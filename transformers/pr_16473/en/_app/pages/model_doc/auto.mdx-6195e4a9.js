import{S as xEt,i as kEt,s as SEt,e as a,k as l,w as f,t as o,M as REt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as BEt}from"../../chunks/vendor-6b77c823.js";import{T as iBr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function PEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,bC,Nf,xe,co,ji,Gn,FC,On,Vn,vC,Di,Xn,TC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),bC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),FC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),vC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),TC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var c9=s(de);Ce=r(c9,"NewModelConfig"),c9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var f9=s(Ii);qf=r(f9,"model_type"),f9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var m9=s(qi);Ni=r(m9,'"new-model"'),m9.forEach(t),bC=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),FC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var g9=s(On);Vn=r(g9,"PreTrainedModel"),g9.forEach(t),vC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),TC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var h9=s(Gi);jf=r(h9,"NewModelConfig"),h9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,bC),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,FC),e(xe,On),e(On,Vn),e(xe,vC),e(xe,Di),e(Di,Xn),e(xe,TC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function $Et(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function IEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function qEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,bC,Nf,xe,co,ji,Gn,FC,On,Vn,vC,Di,Xn,TC,Gi,jf,Da,fo,_e,c9,Oi,f9,m9,zo,Ga,g9,Df,h9,iIe,USe,Vi,Gf,zJ,MC,dIe,QJ,cIe,JSe,zn,fIe,WJ,mIe,gIe,HJ,hIe,pIe,YSe,EC,KSe,p9,_Ie,ZSe,Of,eRe,Xi,Vf,UJ,CC,uIe,JJ,bIe,oRe,Qo,wC,FIe,AC,vIe,_9,TIe,MIe,EIe,yC,CIe,YJ,wIe,AIe,yIe,mo,LC,LIe,KJ,xIe,kIe,zi,SIe,ZJ,RIe,BIe,eY,PIe,$Ie,IIe,F,Xf,oY,qIe,NIe,u9,jIe,DIe,GIe,zf,rY,OIe,VIe,b9,XIe,zIe,QIe,Qf,tY,WIe,HIe,F9,UIe,JIe,YIe,Wf,aY,KIe,ZIe,v9,eqe,oqe,rqe,Hf,nY,tqe,aqe,T9,nqe,sqe,lqe,Uf,sY,iqe,dqe,M9,cqe,fqe,mqe,Jf,lY,gqe,hqe,E9,pqe,_qe,uqe,Yf,iY,bqe,Fqe,C9,vqe,Tqe,Mqe,Kf,dY,Eqe,Cqe,w9,wqe,Aqe,yqe,Zf,cY,Lqe,xqe,A9,kqe,Sqe,Rqe,em,fY,Bqe,Pqe,y9,$qe,Iqe,qqe,om,mY,Nqe,jqe,L9,Dqe,Gqe,Oqe,rm,gY,Vqe,Xqe,x9,zqe,Qqe,Wqe,tm,hY,Hqe,Uqe,k9,Jqe,Yqe,Kqe,am,pY,Zqe,eNe,S9,oNe,rNe,tNe,nm,_Y,aNe,nNe,R9,sNe,lNe,iNe,sm,uY,dNe,cNe,B9,fNe,mNe,gNe,lm,bY,hNe,pNe,P9,_Ne,uNe,bNe,im,FY,FNe,vNe,$9,TNe,MNe,ENe,dm,vY,CNe,wNe,I9,ANe,yNe,LNe,cm,TY,xNe,kNe,q9,SNe,RNe,BNe,fm,MY,PNe,$Ne,N9,INe,qNe,NNe,mm,EY,jNe,DNe,j9,GNe,ONe,VNe,gm,CY,XNe,zNe,D9,QNe,WNe,HNe,hm,wY,UNe,JNe,G9,YNe,KNe,ZNe,pm,AY,eje,oje,O9,rje,tje,aje,_m,yY,nje,sje,V9,lje,ije,dje,um,LY,cje,fje,X9,mje,gje,hje,bm,xY,pje,_je,z9,uje,bje,Fje,Fm,kY,vje,Tje,Q9,Mje,Eje,Cje,vm,SY,wje,Aje,W9,yje,Lje,xje,Tm,RY,kje,Sje,H9,Rje,Bje,Pje,Mm,BY,$je,Ije,U9,qje,Nje,jje,Em,PY,Dje,Gje,J9,Oje,Vje,Xje,Cm,$Y,zje,Qje,Y9,Wje,Hje,Uje,wm,IY,Jje,Yje,K9,Kje,Zje,eDe,Am,qY,oDe,rDe,Z9,tDe,aDe,nDe,ym,NY,sDe,lDe,ex,iDe,dDe,cDe,Lm,jY,fDe,mDe,ox,gDe,hDe,pDe,xm,DY,_De,uDe,rx,bDe,FDe,vDe,km,GY,TDe,MDe,tx,EDe,CDe,wDe,Sm,OY,ADe,yDe,ax,LDe,xDe,kDe,Rm,VY,SDe,RDe,nx,BDe,PDe,$De,Bm,XY,IDe,qDe,sx,NDe,jDe,DDe,Pm,zY,GDe,ODe,lx,VDe,XDe,zDe,$m,QY,QDe,WDe,ix,HDe,UDe,JDe,Im,WY,YDe,KDe,dx,ZDe,eGe,oGe,qm,HY,rGe,tGe,cx,aGe,nGe,sGe,Nm,UY,lGe,iGe,fx,dGe,cGe,fGe,jm,JY,mGe,gGe,mx,hGe,pGe,_Ge,Dm,YY,uGe,bGe,gx,FGe,vGe,TGe,Gm,KY,MGe,EGe,hx,CGe,wGe,AGe,Om,ZY,yGe,LGe,px,xGe,kGe,SGe,Vm,eK,RGe,BGe,_x,PGe,$Ge,IGe,Xm,oK,qGe,NGe,ux,jGe,DGe,GGe,zm,rK,OGe,VGe,bx,XGe,zGe,QGe,Qm,tK,WGe,HGe,Fx,UGe,JGe,YGe,Wm,aK,KGe,ZGe,vx,eOe,oOe,rOe,Hm,nK,tOe,aOe,Tx,nOe,sOe,lOe,Um,sK,iOe,dOe,Mx,cOe,fOe,mOe,Jm,lK,gOe,hOe,Ex,pOe,_Oe,uOe,Ym,iK,bOe,FOe,Cx,vOe,TOe,MOe,Km,dK,EOe,COe,wx,wOe,AOe,yOe,Zm,cK,LOe,xOe,Ax,kOe,SOe,ROe,eg,fK,BOe,POe,yx,$Oe,IOe,qOe,og,mK,NOe,jOe,Lx,DOe,GOe,OOe,rg,gK,VOe,XOe,xx,zOe,QOe,WOe,tg,hK,HOe,UOe,kx,JOe,YOe,KOe,ag,pK,ZOe,eVe,Sx,oVe,rVe,tVe,ng,_K,aVe,nVe,Rx,sVe,lVe,iVe,sg,uK,dVe,cVe,Bx,fVe,mVe,gVe,lg,bK,hVe,pVe,Px,_Ve,uVe,bVe,ig,FK,FVe,vVe,$x,TVe,MVe,EVe,dg,vK,CVe,wVe,Ix,AVe,yVe,LVe,cg,TK,xVe,kVe,qx,SVe,RVe,BVe,fg,MK,PVe,$Ve,Nx,IVe,qVe,NVe,mg,EK,jVe,DVe,jx,GVe,OVe,VVe,gg,CK,XVe,zVe,Dx,QVe,WVe,HVe,hg,wK,UVe,JVe,Gx,YVe,KVe,ZVe,pg,AK,eXe,oXe,Ox,rXe,tXe,aXe,_g,yK,nXe,sXe,Vx,lXe,iXe,dXe,ug,LK,cXe,fXe,Xx,mXe,gXe,hXe,bg,xK,pXe,_Xe,zx,uXe,bXe,FXe,Fg,kK,vXe,TXe,Qx,MXe,EXe,CXe,vg,SK,wXe,AXe,Wx,yXe,LXe,xXe,Tg,RK,kXe,SXe,Hx,RXe,BXe,PXe,Mg,BK,$Xe,IXe,Ux,qXe,NXe,jXe,Eg,PK,DXe,GXe,Jx,OXe,VXe,XXe,Cg,$K,zXe,QXe,Yx,WXe,HXe,UXe,wg,IK,JXe,YXe,Kx,KXe,ZXe,eze,Ag,qK,oze,rze,Zx,tze,aze,nze,yg,NK,sze,lze,ek,ize,dze,cze,Lg,jK,fze,mze,ok,gze,hze,pze,xg,DK,_ze,uze,rk,bze,Fze,vze,kg,GK,Tze,Mze,tk,Eze,Cze,wze,Sg,OK,Aze,yze,ak,Lze,xze,kze,Rg,VK,Sze,Rze,nk,Bze,Pze,$ze,Bg,XK,Ize,qze,sk,Nze,jze,Dze,Pg,zK,Gze,Oze,lk,Vze,Xze,zze,QK,Qze,Wze,xC,Hze,$g,kC,Uze,WK,Jze,rRe,Qi,Ig,HK,SC,Yze,UK,Kze,tRe,Wo,RC,Zze,BC,eQe,ik,oQe,rQe,tQe,PC,aQe,JK,nQe,sQe,lQe,go,$C,iQe,YK,dQe,cQe,Oa,fQe,KK,mQe,gQe,ZK,hQe,pQe,eZ,_Qe,uQe,bQe,E,Qn,oZ,FQe,vQe,dk,TQe,MQe,ck,EQe,CQe,wQe,Wn,rZ,AQe,yQe,fk,LQe,xQe,mk,kQe,SQe,RQe,Hn,tZ,BQe,PQe,gk,$Qe,IQe,hk,qQe,NQe,jQe,qg,aZ,DQe,GQe,pk,OQe,VQe,XQe,Un,nZ,zQe,QQe,_k,WQe,HQe,uk,UQe,JQe,YQe,Ng,sZ,KQe,ZQe,bk,eWe,oWe,rWe,jg,lZ,tWe,aWe,Fk,nWe,sWe,lWe,Dg,iZ,iWe,dWe,vk,cWe,fWe,mWe,Jn,dZ,gWe,hWe,Tk,pWe,_We,Mk,uWe,bWe,FWe,Yn,cZ,vWe,TWe,Ek,MWe,EWe,Ck,CWe,wWe,AWe,Kn,fZ,yWe,LWe,wk,xWe,kWe,Ak,SWe,RWe,BWe,Gg,mZ,PWe,$We,yk,IWe,qWe,NWe,Og,gZ,jWe,DWe,Lk,GWe,OWe,VWe,Zn,hZ,XWe,zWe,xk,QWe,WWe,kk,HWe,UWe,JWe,Vg,pZ,YWe,KWe,Sk,ZWe,eHe,oHe,es,_Z,rHe,tHe,Rk,aHe,nHe,Bk,sHe,lHe,iHe,os,uZ,dHe,cHe,Pk,fHe,mHe,$k,gHe,hHe,pHe,rs,bZ,_He,uHe,Ik,bHe,FHe,FZ,vHe,THe,MHe,Xg,vZ,EHe,CHe,qk,wHe,AHe,yHe,ts,TZ,LHe,xHe,Nk,kHe,SHe,jk,RHe,BHe,PHe,zg,MZ,$He,IHe,Dk,qHe,NHe,jHe,as,EZ,DHe,GHe,Gk,OHe,VHe,Ok,XHe,zHe,QHe,ns,CZ,WHe,HHe,Vk,UHe,JHe,Xk,YHe,KHe,ZHe,ss,wZ,eUe,oUe,zk,rUe,tUe,Qk,aUe,nUe,sUe,Qg,AZ,lUe,iUe,Wk,dUe,cUe,fUe,ls,yZ,mUe,gUe,Hk,hUe,pUe,Uk,_Ue,uUe,bUe,Wg,LZ,FUe,vUe,Jk,TUe,MUe,EUe,is,xZ,CUe,wUe,Yk,AUe,yUe,Kk,LUe,xUe,kUe,ds,kZ,SUe,RUe,Zk,BUe,PUe,eS,$Ue,IUe,qUe,cs,SZ,NUe,jUe,oS,DUe,GUe,rS,OUe,VUe,XUe,fs,RZ,zUe,QUe,tS,WUe,HUe,aS,UUe,JUe,YUe,Hg,BZ,KUe,ZUe,nS,eJe,oJe,rJe,ms,PZ,tJe,aJe,sS,nJe,sJe,lS,lJe,iJe,dJe,gs,$Z,cJe,fJe,iS,mJe,gJe,dS,hJe,pJe,_Je,hs,IZ,uJe,bJe,cS,FJe,vJe,fS,TJe,MJe,EJe,ps,qZ,CJe,wJe,mS,AJe,yJe,gS,LJe,xJe,kJe,_s,NZ,SJe,RJe,hS,BJe,PJe,pS,$Je,IJe,qJe,us,jZ,NJe,jJe,_S,DJe,GJe,uS,OJe,VJe,XJe,Ug,DZ,zJe,QJe,bS,WJe,HJe,UJe,bs,GZ,JJe,YJe,FS,KJe,ZJe,vS,eYe,oYe,rYe,Jg,OZ,tYe,aYe,TS,nYe,sYe,lYe,Yg,VZ,iYe,dYe,MS,cYe,fYe,mYe,Fs,XZ,gYe,hYe,ES,pYe,_Ye,CS,uYe,bYe,FYe,vs,zZ,vYe,TYe,wS,MYe,EYe,AS,CYe,wYe,AYe,Kg,QZ,yYe,LYe,yS,xYe,kYe,SYe,Ts,WZ,RYe,BYe,LS,PYe,$Ye,xS,IYe,qYe,NYe,Ms,HZ,jYe,DYe,kS,GYe,OYe,SS,VYe,XYe,zYe,Es,UZ,QYe,WYe,RS,HYe,UYe,BS,JYe,YYe,KYe,Cs,JZ,ZYe,eKe,PS,oKe,rKe,$S,tKe,aKe,nKe,ws,YZ,sKe,lKe,IS,iKe,dKe,qS,cKe,fKe,mKe,Zg,KZ,gKe,hKe,NS,pKe,_Ke,uKe,eh,ZZ,bKe,FKe,jS,vKe,TKe,MKe,oh,eee,EKe,CKe,DS,wKe,AKe,yKe,rh,oee,LKe,xKe,GS,kKe,SKe,RKe,As,ree,BKe,PKe,OS,$Ke,IKe,VS,qKe,NKe,jKe,th,tee,DKe,GKe,XS,OKe,VKe,XKe,ys,aee,zKe,QKe,zS,WKe,HKe,QS,UKe,JKe,YKe,Ls,nee,KKe,ZKe,WS,eZe,oZe,HS,rZe,tZe,aZe,xs,see,nZe,sZe,US,lZe,iZe,JS,dZe,cZe,fZe,ks,lee,mZe,gZe,YS,hZe,pZe,KS,_Ze,uZe,bZe,Ss,iee,FZe,vZe,ZS,TZe,MZe,eR,EZe,CZe,wZe,Rs,dee,AZe,yZe,oR,LZe,xZe,rR,kZe,SZe,RZe,ah,cee,BZe,PZe,tR,$Ze,IZe,qZe,nh,fee,NZe,jZe,aR,DZe,GZe,OZe,Bs,mee,VZe,XZe,nR,zZe,QZe,sR,WZe,HZe,UZe,Ps,gee,JZe,YZe,lR,KZe,ZZe,iR,eeo,oeo,reo,$s,hee,teo,aeo,dR,neo,seo,cR,leo,ieo,deo,sh,pee,ceo,feo,fR,meo,geo,heo,lh,_ee,peo,_eo,mR,ueo,beo,Feo,ih,uee,veo,Teo,gR,Meo,Eeo,Ceo,dh,bee,weo,Aeo,hR,yeo,Leo,xeo,ch,Fee,keo,Seo,pR,Reo,Beo,Peo,Is,vee,$eo,Ieo,_R,qeo,Neo,uR,jeo,Deo,Geo,fh,Tee,Oeo,Veo,bR,Xeo,zeo,Qeo,mh,Mee,Weo,Heo,FR,Ueo,Jeo,Yeo,qs,Eee,Keo,Zeo,vR,eoo,ooo,TR,roo,too,aoo,Ns,Cee,noo,soo,MR,loo,ioo,ER,doo,coo,foo,wee,moo,goo,IC,hoo,gh,qC,poo,Aee,_oo,aRe,Wi,hh,yee,NC,uoo,Lee,boo,nRe,Ho,jC,Foo,DC,voo,CR,Too,Moo,Eoo,GC,Coo,xee,woo,Aoo,yoo,$e,OC,Loo,kee,xoo,koo,Va,Soo,See,Roo,Boo,Ree,Poo,$oo,Bee,Ioo,qoo,Noo,te,ph,Pee,joo,Doo,wR,Goo,Ooo,Voo,_h,$ee,Xoo,zoo,AR,Qoo,Woo,Hoo,uh,Iee,Uoo,Joo,yR,Yoo,Koo,Zoo,bh,qee,ero,oro,LR,rro,tro,aro,Fh,Nee,nro,sro,xR,lro,iro,dro,vh,jee,cro,fro,kR,mro,gro,hro,Th,Dee,pro,_ro,SR,uro,bro,Fro,Mh,Gee,vro,Tro,RR,Mro,Ero,Cro,Eh,Oee,wro,Aro,BR,yro,Lro,xro,Ch,Vee,kro,Sro,PR,Rro,Bro,Pro,wh,Xee,$ro,Iro,$R,qro,Nro,jro,Ah,zee,Dro,Gro,IR,Oro,Vro,Xro,yh,Qee,zro,Qro,qR,Wro,Hro,Uro,Lh,Wee,Jro,Yro,NR,Kro,Zro,eto,xh,Hee,oto,rto,jR,tto,ato,nto,kh,Uee,sto,lto,DR,ito,dto,cto,Sh,Jee,fto,mto,GR,gto,hto,pto,Rh,Yee,_to,uto,OR,bto,Fto,vto,Bh,Tto,Kee,Mto,Eto,VC,Cto,Ph,XC,wto,Zee,Ato,sRe,Hi,$h,eoe,zC,yto,ooe,Lto,lRe,Uo,QC,xto,WC,kto,VR,Sto,Rto,Bto,HC,Pto,roe,$to,Ito,qto,Ie,UC,Nto,toe,jto,Dto,Ui,Gto,aoe,Oto,Vto,noe,Xto,zto,Qto,ke,Ih,soe,Wto,Hto,XR,Uto,Jto,Yto,qh,loe,Kto,Zto,zR,eao,oao,rao,Nh,ioe,tao,aao,QR,nao,sao,lao,jh,doe,iao,dao,WR,cao,fao,mao,Dh,coe,gao,hao,HR,pao,_ao,uao,Gh,foe,bao,Fao,UR,vao,Tao,Mao,Oh,moe,Eao,Cao,JR,wao,Aao,yao,Vh,goe,Lao,xao,YR,kao,Sao,Rao,Xh,Bao,hoe,Pao,$ao,JC,Iao,zh,YC,qao,poe,Nao,iRe,Ji,Qh,_oe,KC,jao,uoe,Dao,dRe,Jo,ZC,Gao,Yi,Oao,KR,Vao,Xao,ZR,zao,Qao,Wao,e5,Hao,boe,Uao,Jao,Yao,Xr,o5,Kao,Foe,Zao,eno,Ki,ono,voe,rno,tno,eB,ano,nno,sno,Toe,lno,ino,r5,dno,qe,t5,cno,Moe,fno,mno,Xa,gno,Eoe,hno,pno,Coe,_no,uno,woe,bno,Fno,vno,T,Wh,Aoe,Tno,Mno,oB,Eno,Cno,wno,Hh,yoe,Ano,yno,rB,Lno,xno,kno,Uh,Loe,Sno,Rno,tB,Bno,Pno,$no,Jh,xoe,Ino,qno,aB,Nno,jno,Dno,Yh,koe,Gno,Ono,nB,Vno,Xno,zno,Kh,Soe,Qno,Wno,sB,Hno,Uno,Jno,Zh,Roe,Yno,Kno,lB,Zno,eso,oso,ep,Boe,rso,tso,iB,aso,nso,sso,op,Poe,lso,iso,dB,dso,cso,fso,rp,$oe,mso,gso,cB,hso,pso,_so,tp,Ioe,uso,bso,fB,Fso,vso,Tso,ap,qoe,Mso,Eso,mB,Cso,wso,Aso,np,Noe,yso,Lso,gB,xso,kso,Sso,sp,joe,Rso,Bso,hB,Pso,$so,Iso,lp,Doe,qso,Nso,pB,jso,Dso,Gso,ip,Goe,Oso,Vso,_B,Xso,zso,Qso,dp,Ooe,Wso,Hso,uB,Uso,Jso,Yso,cp,Voe,Kso,Zso,bB,elo,olo,rlo,fp,Xoe,tlo,alo,FB,nlo,slo,llo,mp,zoe,ilo,dlo,vB,clo,flo,mlo,gp,Qoe,glo,hlo,TB,plo,_lo,ulo,hp,Woe,blo,Flo,MB,vlo,Tlo,Mlo,pp,Hoe,Elo,Clo,EB,wlo,Alo,ylo,_p,Uoe,Llo,xlo,CB,klo,Slo,Rlo,up,Joe,Blo,Plo,wB,$lo,Ilo,qlo,bp,Yoe,Nlo,jlo,AB,Dlo,Glo,Olo,Fp,Koe,Vlo,Xlo,yB,zlo,Qlo,Wlo,vp,Zoe,Hlo,Ulo,LB,Jlo,Ylo,Klo,Tp,ere,Zlo,eio,xB,oio,rio,tio,js,ore,aio,nio,kB,sio,lio,SB,iio,dio,cio,Mp,rre,fio,mio,RB,gio,hio,pio,Ep,tre,_io,uio,BB,bio,Fio,vio,Cp,are,Tio,Mio,PB,Eio,Cio,wio,wp,nre,Aio,yio,$B,Lio,xio,kio,Ap,sre,Sio,Rio,IB,Bio,Pio,$io,yp,lre,Iio,qio,qB,Nio,jio,Dio,Lp,ire,Gio,Oio,NB,Vio,Xio,zio,xp,dre,Qio,Wio,jB,Hio,Uio,Jio,kp,cre,Yio,Kio,DB,Zio,edo,odo,Sp,fre,rdo,tdo,GB,ado,ndo,sdo,Rp,mre,ldo,ido,OB,ddo,cdo,fdo,Bp,gre,mdo,gdo,VB,hdo,pdo,_do,Pp,hre,udo,bdo,XB,Fdo,vdo,Tdo,$p,pre,Mdo,Edo,zB,Cdo,wdo,Ado,Ip,_re,ydo,Ldo,QB,xdo,kdo,Sdo,qp,ure,Rdo,Bdo,WB,Pdo,$do,Ido,Np,bre,qdo,Ndo,HB,jdo,Ddo,Gdo,jp,Fre,Odo,Vdo,UB,Xdo,zdo,Qdo,Dp,vre,Wdo,Hdo,JB,Udo,Jdo,Ydo,Gp,Tre,Kdo,Zdo,YB,eco,oco,rco,Op,Mre,tco,aco,KB,nco,sco,lco,Vp,Ere,ico,dco,ZB,cco,fco,mco,Xp,Cre,gco,hco,eP,pco,_co,uco,zp,wre,bco,Fco,oP,vco,Tco,Mco,Qp,Are,Eco,Cco,rP,wco,Aco,yco,Wp,yre,Lco,xco,tP,kco,Sco,Rco,Hp,Lre,Bco,Pco,aP,$co,Ico,qco,Up,xre,Nco,jco,nP,Dco,Gco,Oco,Jp,kre,Vco,Xco,sP,zco,Qco,Wco,Yp,Sre,Hco,Uco,lP,Jco,Yco,Kco,Kp,Rre,Zco,efo,iP,ofo,rfo,tfo,Zp,Bre,afo,nfo,dP,sfo,lfo,ifo,e_,Pre,dfo,cfo,cP,ffo,mfo,gfo,o_,$re,hfo,pfo,fP,_fo,ufo,bfo,r_,Ire,Ffo,vfo,mP,Tfo,Mfo,Efo,t_,qre,Cfo,wfo,gP,Afo,yfo,Lfo,a_,Nre,xfo,kfo,hP,Sfo,Rfo,Bfo,n_,jre,Pfo,$fo,pP,Ifo,qfo,Nfo,s_,Dre,jfo,Dfo,_P,Gfo,Ofo,Vfo,l_,Gre,Xfo,zfo,uP,Qfo,Wfo,Hfo,i_,Ore,Ufo,Jfo,bP,Yfo,Kfo,Zfo,d_,Vre,emo,omo,FP,rmo,tmo,amo,c_,Xre,nmo,smo,vP,lmo,imo,dmo,f_,zre,cmo,fmo,TP,mmo,gmo,hmo,m_,Qre,pmo,_mo,MP,umo,bmo,Fmo,g_,Wre,vmo,Tmo,EP,Mmo,Emo,Cmo,h_,Hre,wmo,Amo,CP,ymo,Lmo,xmo,p_,Ure,kmo,Smo,wP,Rmo,Bmo,Pmo,__,Jre,$mo,Imo,AP,qmo,Nmo,jmo,u_,Yre,Dmo,Gmo,yP,Omo,Vmo,Xmo,b_,Kre,zmo,Qmo,LP,Wmo,Hmo,Umo,F_,Zre,Jmo,Ymo,xP,Kmo,Zmo,ego,v_,ete,ogo,rgo,kP,tgo,ago,ngo,T_,ote,sgo,lgo,SP,igo,dgo,cgo,M_,rte,fgo,mgo,RP,ggo,hgo,pgo,E_,tte,_go,ugo,BP,bgo,Fgo,vgo,C_,ate,Tgo,Mgo,PP,Ego,Cgo,wgo,w_,nte,Ago,ygo,$P,Lgo,xgo,kgo,A_,ste,Sgo,Rgo,IP,Bgo,Pgo,$go,y_,lte,Igo,qgo,qP,Ngo,jgo,Dgo,L_,ite,Ggo,Ogo,NP,Vgo,Xgo,zgo,x_,dte,Qgo,Wgo,jP,Hgo,Ugo,Jgo,k_,Ygo,cte,Kgo,Zgo,fte,eho,oho,mte,rho,tho,a5,cRe,Zi,S_,gte,n5,aho,hte,nho,fRe,Yo,s5,sho,ed,lho,DP,iho,dho,GP,cho,fho,mho,l5,gho,pte,hho,pho,_ho,zr,i5,uho,_te,bho,Fho,od,vho,ute,Tho,Mho,OP,Eho,Cho,who,bte,Aho,yho,d5,Lho,Ne,c5,xho,Fte,kho,Sho,za,Rho,vte,Bho,Pho,Tte,$ho,Iho,Mte,qho,Nho,jho,S,R_,Ete,Dho,Gho,VP,Oho,Vho,Xho,B_,Cte,zho,Qho,XP,Who,Hho,Uho,P_,wte,Jho,Yho,zP,Kho,Zho,epo,$_,Ate,opo,rpo,QP,tpo,apo,npo,I_,yte,spo,lpo,WP,ipo,dpo,cpo,q_,Lte,fpo,mpo,HP,gpo,hpo,ppo,N_,xte,_po,upo,UP,bpo,Fpo,vpo,j_,kte,Tpo,Mpo,JP,Epo,Cpo,wpo,D_,Ste,Apo,ypo,YP,Lpo,xpo,kpo,G_,Rte,Spo,Rpo,KP,Bpo,Ppo,$po,O_,Bte,Ipo,qpo,ZP,Npo,jpo,Dpo,V_,Pte,Gpo,Opo,e$,Vpo,Xpo,zpo,X_,$te,Qpo,Wpo,o$,Hpo,Upo,Jpo,z_,Ite,Ypo,Kpo,r$,Zpo,e_o,o_o,Q_,qte,r_o,t_o,t$,a_o,n_o,s_o,W_,Nte,l_o,i_o,a$,d_o,c_o,f_o,H_,jte,m_o,g_o,n$,h_o,p_o,__o,U_,Dte,u_o,b_o,s$,F_o,v_o,T_o,J_,Gte,M_o,E_o,l$,C_o,w_o,A_o,Y_,Ote,y_o,L_o,i$,x_o,k_o,S_o,K_,Vte,R_o,B_o,d$,P_o,$_o,I_o,Z_,Xte,q_o,N_o,c$,j_o,D_o,G_o,eu,zte,O_o,V_o,f$,X_o,z_o,Q_o,ou,Qte,W_o,H_o,m$,U_o,J_o,Y_o,ru,Wte,K_o,Z_o,g$,euo,ouo,ruo,tu,Hte,tuo,auo,h$,nuo,suo,luo,au,Ute,iuo,duo,p$,cuo,fuo,muo,nu,Jte,guo,huo,_$,puo,_uo,uuo,su,Yte,buo,Fuo,u$,vuo,Tuo,Muo,lu,Kte,Euo,Cuo,b$,wuo,Auo,yuo,iu,Zte,Luo,xuo,F$,kuo,Suo,Ruo,du,eae,Buo,Puo,v$,$uo,Iuo,quo,cu,oae,Nuo,juo,T$,Duo,Guo,Ouo,fu,rae,Vuo,Xuo,M$,zuo,Quo,Wuo,mu,tae,Huo,Uuo,E$,Juo,Yuo,Kuo,gu,aae,Zuo,e1o,C$,o1o,r1o,t1o,hu,nae,a1o,n1o,w$,s1o,l1o,i1o,pu,sae,d1o,c1o,A$,f1o,m1o,g1o,_u,lae,h1o,p1o,y$,_1o,u1o,b1o,uu,F1o,iae,v1o,T1o,dae,M1o,E1o,cae,C1o,w1o,f5,mRe,rd,bu,fae,m5,A1o,mae,y1o,gRe,Ko,g5,L1o,td,x1o,L$,k1o,S1o,x$,R1o,B1o,P1o,h5,$1o,gae,I1o,q1o,N1o,Qr,p5,j1o,hae,D1o,G1o,ad,O1o,pae,V1o,X1o,k$,z1o,Q1o,W1o,_ae,H1o,U1o,_5,J1o,je,u5,Y1o,uae,K1o,Z1o,Qa,e4o,bae,o4o,r4o,Fae,t4o,a4o,vae,n4o,s4o,l4o,$,Fu,Tae,i4o,d4o,S$,c4o,f4o,m4o,vu,Mae,g4o,h4o,R$,p4o,_4o,u4o,Tu,Eae,b4o,F4o,B$,v4o,T4o,M4o,Mu,Cae,E4o,C4o,P$,w4o,A4o,y4o,Eu,wae,L4o,x4o,$$,k4o,S4o,R4o,Cu,Aae,B4o,P4o,I$,$4o,I4o,q4o,wu,yae,N4o,j4o,q$,D4o,G4o,O4o,Au,Lae,V4o,X4o,N$,z4o,Q4o,W4o,yu,xae,H4o,U4o,j$,J4o,Y4o,K4o,Lu,kae,Z4o,ebo,D$,obo,rbo,tbo,xu,Sae,abo,nbo,G$,sbo,lbo,ibo,ku,Rae,dbo,cbo,O$,fbo,mbo,gbo,Su,Bae,hbo,pbo,V$,_bo,ubo,bbo,Ru,Pae,Fbo,vbo,X$,Tbo,Mbo,Ebo,Bu,$ae,Cbo,wbo,z$,Abo,ybo,Lbo,Pu,Iae,xbo,kbo,Q$,Sbo,Rbo,Bbo,$u,qae,Pbo,$bo,W$,Ibo,qbo,Nbo,Iu,Nae,jbo,Dbo,H$,Gbo,Obo,Vbo,qu,jae,Xbo,zbo,U$,Qbo,Wbo,Hbo,Nu,Dae,Ubo,Jbo,J$,Ybo,Kbo,Zbo,ju,Gae,e3o,o3o,Y$,r3o,t3o,a3o,Du,Oae,n3o,s3o,K$,l3o,i3o,d3o,Gu,Vae,c3o,f3o,Z$,m3o,g3o,h3o,Ou,Xae,p3o,_3o,eI,u3o,b3o,F3o,Vu,zae,v3o,T3o,oI,M3o,E3o,C3o,Xu,Qae,w3o,A3o,rI,y3o,L3o,x3o,zu,Wae,k3o,S3o,tI,R3o,B3o,P3o,Qu,Hae,$3o,I3o,aI,q3o,N3o,j3o,Wu,Uae,D3o,G3o,nI,O3o,V3o,X3o,Hu,Jae,z3o,Q3o,sI,W3o,H3o,U3o,Uu,Yae,J3o,Y3o,lI,K3o,Z3o,e2o,Ju,Kae,o2o,r2o,iI,t2o,a2o,n2o,Yu,Zae,s2o,l2o,dI,i2o,d2o,c2o,Ku,ene,f2o,m2o,cI,g2o,h2o,p2o,Zu,one,_2o,u2o,fI,b2o,F2o,v2o,e1,T2o,rne,M2o,E2o,tne,C2o,w2o,ane,A2o,y2o,b5,hRe,nd,o1,nne,F5,L2o,sne,x2o,pRe,Zo,v5,k2o,sd,S2o,mI,R2o,B2o,gI,P2o,$2o,I2o,T5,q2o,lne,N2o,j2o,D2o,Wr,M5,G2o,ine,O2o,V2o,ld,X2o,dne,z2o,Q2o,hI,W2o,H2o,U2o,cne,J2o,Y2o,E5,K2o,De,C5,Z2o,fne,eFo,oFo,Wa,rFo,mne,tFo,aFo,gne,nFo,sFo,hne,lFo,iFo,dFo,I,r1,pne,cFo,fFo,pI,mFo,gFo,hFo,t1,_ne,pFo,_Fo,_I,uFo,bFo,FFo,a1,une,vFo,TFo,uI,MFo,EFo,CFo,n1,bne,wFo,AFo,bI,yFo,LFo,xFo,s1,Fne,kFo,SFo,FI,RFo,BFo,PFo,l1,vne,$Fo,IFo,vI,qFo,NFo,jFo,i1,Tne,DFo,GFo,TI,OFo,VFo,XFo,d1,Mne,zFo,QFo,MI,WFo,HFo,UFo,c1,Ene,JFo,YFo,EI,KFo,ZFo,evo,f1,Cne,ovo,rvo,CI,tvo,avo,nvo,m1,wne,svo,lvo,wI,ivo,dvo,cvo,g1,Ane,fvo,mvo,AI,gvo,hvo,pvo,h1,yne,_vo,uvo,yI,bvo,Fvo,vvo,p1,Lne,Tvo,Mvo,LI,Evo,Cvo,wvo,_1,xne,Avo,yvo,xI,Lvo,xvo,kvo,u1,kne,Svo,Rvo,kI,Bvo,Pvo,$vo,b1,Sne,Ivo,qvo,SI,Nvo,jvo,Dvo,F1,Rne,Gvo,Ovo,RI,Vvo,Xvo,zvo,v1,Bne,Qvo,Wvo,BI,Hvo,Uvo,Jvo,T1,Pne,Yvo,Kvo,PI,Zvo,e6o,o6o,M1,$ne,r6o,t6o,$I,a6o,n6o,s6o,E1,Ine,l6o,i6o,II,d6o,c6o,f6o,C1,qne,m6o,g6o,qI,h6o,p6o,_6o,w1,Nne,u6o,b6o,NI,F6o,v6o,T6o,A1,jne,M6o,E6o,jI,C6o,w6o,A6o,y1,Dne,y6o,L6o,DI,x6o,k6o,S6o,L1,Gne,R6o,B6o,GI,P6o,$6o,I6o,x1,One,q6o,N6o,OI,j6o,D6o,G6o,k1,Vne,O6o,V6o,VI,X6o,z6o,Q6o,S1,Xne,W6o,H6o,XI,U6o,J6o,Y6o,R1,zne,K6o,Z6o,Qne,eTo,oTo,rTo,B1,Wne,tTo,aTo,zI,nTo,sTo,lTo,P1,Hne,iTo,dTo,QI,cTo,fTo,mTo,$1,Une,gTo,hTo,WI,pTo,_To,uTo,I1,Jne,bTo,FTo,HI,vTo,TTo,MTo,q1,ETo,Yne,CTo,wTo,Kne,ATo,yTo,Zne,LTo,xTo,w5,_Re,id,N1,ese,A5,kTo,ose,STo,uRe,er,y5,RTo,dd,BTo,UI,PTo,$To,JI,ITo,qTo,NTo,L5,jTo,rse,DTo,GTo,OTo,Hr,x5,VTo,tse,XTo,zTo,cd,QTo,ase,WTo,HTo,YI,UTo,JTo,YTo,nse,KTo,ZTo,k5,e7o,Ge,S5,o7o,sse,r7o,t7o,Ha,a7o,lse,n7o,s7o,ise,l7o,i7o,dse,d7o,c7o,f7o,ae,j1,cse,m7o,g7o,KI,h7o,p7o,_7o,D1,fse,u7o,b7o,ZI,F7o,v7o,T7o,G1,mse,M7o,E7o,eq,C7o,w7o,A7o,O1,gse,y7o,L7o,oq,x7o,k7o,S7o,V1,hse,R7o,B7o,rq,P7o,$7o,I7o,X1,pse,q7o,N7o,tq,j7o,D7o,G7o,z1,_se,O7o,V7o,aq,X7o,z7o,Q7o,Q1,use,W7o,H7o,nq,U7o,J7o,Y7o,W1,bse,K7o,Z7o,sq,eMo,oMo,rMo,H1,Fse,tMo,aMo,lq,nMo,sMo,lMo,U1,vse,iMo,dMo,iq,cMo,fMo,mMo,J1,Tse,gMo,hMo,dq,pMo,_Mo,uMo,Y1,Mse,bMo,FMo,cq,vMo,TMo,MMo,K1,Ese,EMo,CMo,fq,wMo,AMo,yMo,Z1,Cse,LMo,xMo,mq,kMo,SMo,RMo,e4,wse,BMo,PMo,gq,$Mo,IMo,qMo,o4,Ase,NMo,jMo,hq,DMo,GMo,OMo,r4,VMo,yse,XMo,zMo,Lse,QMo,WMo,xse,HMo,UMo,R5,bRe,fd,t4,kse,B5,JMo,Sse,YMo,FRe,or,P5,KMo,md,ZMo,pq,eEo,oEo,_q,rEo,tEo,aEo,$5,nEo,Rse,sEo,lEo,iEo,Ur,I5,dEo,Bse,cEo,fEo,gd,mEo,Pse,gEo,hEo,uq,pEo,_Eo,uEo,$se,bEo,FEo,q5,vEo,Oe,N5,TEo,Ise,MEo,EEo,Ua,CEo,qse,wEo,AEo,Nse,yEo,LEo,jse,xEo,kEo,SEo,y,a4,Dse,REo,BEo,bq,PEo,$Eo,IEo,n4,Gse,qEo,NEo,Fq,jEo,DEo,GEo,s4,Ose,OEo,VEo,vq,XEo,zEo,QEo,l4,Vse,WEo,HEo,Tq,UEo,JEo,YEo,i4,Xse,KEo,ZEo,Mq,eCo,oCo,rCo,d4,zse,tCo,aCo,Eq,nCo,sCo,lCo,c4,Qse,iCo,dCo,Cq,cCo,fCo,mCo,f4,Wse,gCo,hCo,wq,pCo,_Co,uCo,m4,Hse,bCo,FCo,Aq,vCo,TCo,MCo,g4,Use,ECo,CCo,yq,wCo,ACo,yCo,h4,Jse,LCo,xCo,Lq,kCo,SCo,RCo,p4,Yse,BCo,PCo,xq,$Co,ICo,qCo,_4,Kse,NCo,jCo,kq,DCo,GCo,OCo,u4,Zse,VCo,XCo,Sq,zCo,QCo,WCo,b4,ele,HCo,UCo,Rq,JCo,YCo,KCo,F4,ole,ZCo,e5o,Bq,o5o,r5o,t5o,v4,rle,a5o,n5o,Pq,s5o,l5o,i5o,T4,tle,d5o,c5o,$q,f5o,m5o,g5o,M4,ale,h5o,p5o,Iq,_5o,u5o,b5o,E4,nle,F5o,v5o,qq,T5o,M5o,E5o,C4,sle,C5o,w5o,Nq,A5o,y5o,L5o,w4,lle,x5o,k5o,jq,S5o,R5o,B5o,A4,ile,P5o,$5o,Dq,I5o,q5o,N5o,y4,dle,j5o,D5o,Gq,G5o,O5o,V5o,L4,cle,X5o,z5o,Oq,Q5o,W5o,H5o,x4,fle,U5o,J5o,Vq,Y5o,K5o,Z5o,k4,mle,ewo,owo,Xq,rwo,two,awo,S4,gle,nwo,swo,zq,lwo,iwo,dwo,R4,hle,cwo,fwo,Qq,mwo,gwo,hwo,B4,ple,pwo,_wo,Wq,uwo,bwo,Fwo,P4,_le,vwo,Two,Hq,Mwo,Ewo,Cwo,$4,ule,wwo,Awo,Uq,ywo,Lwo,xwo,I4,ble,kwo,Swo,Jq,Rwo,Bwo,Pwo,q4,Fle,$wo,Iwo,Yq,qwo,Nwo,jwo,N4,vle,Dwo,Gwo,Kq,Owo,Vwo,Xwo,j4,Tle,zwo,Qwo,Zq,Wwo,Hwo,Uwo,D4,Mle,Jwo,Ywo,eN,Kwo,Zwo,eAo,G4,Ele,oAo,rAo,oN,tAo,aAo,nAo,O4,Cle,sAo,lAo,rN,iAo,dAo,cAo,V4,wle,fAo,mAo,tN,gAo,hAo,pAo,X4,Ale,_Ao,uAo,aN,bAo,FAo,vAo,z4,yle,TAo,MAo,nN,EAo,CAo,wAo,Q4,Lle,AAo,yAo,sN,LAo,xAo,kAo,W4,xle,SAo,RAo,lN,BAo,PAo,$Ao,H4,kle,IAo,qAo,iN,NAo,jAo,DAo,U4,Sle,GAo,OAo,dN,VAo,XAo,zAo,J4,Rle,QAo,WAo,cN,HAo,UAo,JAo,Y4,YAo,Ble,KAo,ZAo,Ple,e0o,o0o,$le,r0o,t0o,j5,vRe,hd,K4,Ile,D5,a0o,qle,n0o,TRe,rr,G5,s0o,pd,l0o,fN,i0o,d0o,mN,c0o,f0o,m0o,O5,g0o,Nle,h0o,p0o,_0o,Jr,V5,u0o,jle,b0o,F0o,_d,v0o,Dle,T0o,M0o,gN,E0o,C0o,w0o,Gle,A0o,y0o,X5,L0o,Ve,z5,x0o,Ole,k0o,S0o,Ja,R0o,Vle,B0o,P0o,Xle,$0o,I0o,zle,q0o,N0o,j0o,G,Z4,Qle,D0o,G0o,hN,O0o,V0o,X0o,eb,Wle,z0o,Q0o,pN,W0o,H0o,U0o,ob,Hle,J0o,Y0o,_N,K0o,Z0o,eyo,rb,Ule,oyo,ryo,uN,tyo,ayo,nyo,tb,Jle,syo,lyo,bN,iyo,dyo,cyo,ab,Yle,fyo,myo,FN,gyo,hyo,pyo,nb,Kle,_yo,uyo,vN,byo,Fyo,vyo,sb,Zle,Tyo,Myo,TN,Eyo,Cyo,wyo,lb,eie,Ayo,yyo,MN,Lyo,xyo,kyo,ib,oie,Syo,Ryo,EN,Byo,Pyo,$yo,db,rie,Iyo,qyo,CN,Nyo,jyo,Dyo,cb,tie,Gyo,Oyo,wN,Vyo,Xyo,zyo,fb,aie,Qyo,Wyo,AN,Hyo,Uyo,Jyo,mb,nie,Yyo,Kyo,yN,Zyo,eLo,oLo,gb,sie,rLo,tLo,LN,aLo,nLo,sLo,hb,lie,lLo,iLo,xN,dLo,cLo,fLo,pb,iie,mLo,gLo,kN,hLo,pLo,_Lo,_b,die,uLo,bLo,SN,FLo,vLo,TLo,ub,cie,MLo,ELo,RN,CLo,wLo,ALo,bb,fie,yLo,LLo,BN,xLo,kLo,SLo,Fb,mie,RLo,BLo,PN,PLo,$Lo,ILo,vb,gie,qLo,NLo,$N,jLo,DLo,GLo,Tb,hie,OLo,VLo,IN,XLo,zLo,QLo,Mb,pie,WLo,HLo,qN,ULo,JLo,YLo,Eb,_ie,KLo,ZLo,NN,e8o,o8o,r8o,Cb,uie,t8o,a8o,jN,n8o,s8o,l8o,wb,bie,i8o,d8o,DN,c8o,f8o,m8o,Ab,Fie,g8o,h8o,GN,p8o,_8o,u8o,yb,b8o,vie,F8o,v8o,Tie,T8o,M8o,Mie,E8o,C8o,Q5,MRe,ud,Lb,Eie,W5,w8o,Cie,A8o,ERe,tr,H5,y8o,bd,L8o,ON,x8o,k8o,VN,S8o,R8o,B8o,U5,P8o,wie,$8o,I8o,q8o,Yr,J5,N8o,Aie,j8o,D8o,Fd,G8o,yie,O8o,V8o,XN,X8o,z8o,Q8o,Lie,W8o,H8o,Y5,U8o,Xe,K5,J8o,xie,Y8o,K8o,Ya,Z8o,kie,e9o,o9o,Sie,r9o,t9o,Rie,a9o,n9o,s9o,da,xb,Bie,l9o,i9o,zN,d9o,c9o,f9o,kb,Pie,m9o,g9o,QN,h9o,p9o,_9o,Sb,$ie,u9o,b9o,WN,F9o,v9o,T9o,Rb,Iie,M9o,E9o,HN,C9o,w9o,A9o,Bb,qie,y9o,L9o,UN,x9o,k9o,S9o,Pb,R9o,Nie,B9o,P9o,jie,$9o,I9o,Die,q9o,N9o,Z5,CRe,vd,$b,Gie,ew,j9o,Oie,D9o,wRe,ar,ow,G9o,Td,O9o,JN,V9o,X9o,YN,z9o,Q9o,W9o,rw,H9o,Vie,U9o,J9o,Y9o,Kr,tw,K9o,Xie,Z9o,exo,Md,oxo,zie,rxo,txo,KN,axo,nxo,sxo,Qie,lxo,ixo,aw,dxo,ze,nw,cxo,Wie,fxo,mxo,Ka,gxo,Hie,hxo,pxo,Uie,_xo,uxo,Jie,bxo,Fxo,vxo,j,Ib,Yie,Txo,Mxo,ZN,Exo,Cxo,wxo,qb,Kie,Axo,yxo,ej,Lxo,xxo,kxo,Nb,Zie,Sxo,Rxo,oj,Bxo,Pxo,$xo,jb,ede,Ixo,qxo,rj,Nxo,jxo,Dxo,Db,ode,Gxo,Oxo,tj,Vxo,Xxo,zxo,Gb,rde,Qxo,Wxo,aj,Hxo,Uxo,Jxo,Ob,tde,Yxo,Kxo,nj,Zxo,eko,oko,Vb,ade,rko,tko,sj,ako,nko,sko,Xb,nde,lko,iko,lj,dko,cko,fko,zb,sde,mko,gko,ij,hko,pko,_ko,Qb,lde,uko,bko,dj,Fko,vko,Tko,Wb,ide,Mko,Eko,cj,Cko,wko,Ako,Hb,dde,yko,Lko,fj,xko,kko,Sko,Ub,cde,Rko,Bko,mj,Pko,$ko,Iko,Jb,fde,qko,Nko,gj,jko,Dko,Gko,Yb,mde,Oko,Vko,hj,Xko,zko,Qko,Kb,gde,Wko,Hko,pj,Uko,Jko,Yko,Zb,hde,Kko,Zko,_j,eSo,oSo,rSo,e3,pde,tSo,aSo,uj,nSo,sSo,lSo,o3,_de,iSo,dSo,bj,cSo,fSo,mSo,r3,ude,gSo,hSo,Fj,pSo,_So,uSo,t3,bde,bSo,FSo,vj,vSo,TSo,MSo,a3,Fde,ESo,CSo,Tj,wSo,ASo,ySo,n3,vde,LSo,xSo,Mj,kSo,SSo,RSo,s3,Tde,BSo,PSo,Ej,$So,ISo,qSo,l3,Mde,NSo,jSo,Cj,DSo,GSo,OSo,i3,Ede,VSo,XSo,wj,zSo,QSo,WSo,d3,Cde,HSo,USo,Aj,JSo,YSo,KSo,c3,wde,ZSo,eRo,yj,oRo,rRo,tRo,f3,Ade,aRo,nRo,Lj,sRo,lRo,iRo,m3,yde,dRo,cRo,xj,fRo,mRo,gRo,g3,Lde,hRo,pRo,kj,_Ro,uRo,bRo,h3,xde,FRo,vRo,Sj,TRo,MRo,ERo,p3,CRo,kde,wRo,ARo,Sde,yRo,LRo,Rde,xRo,kRo,sw,ARe,Ed,_3,Bde,lw,SRo,Pde,RRo,yRe,nr,iw,BRo,Cd,PRo,Rj,$Ro,IRo,Bj,qRo,NRo,jRo,dw,DRo,$de,GRo,ORo,VRo,Zr,cw,XRo,Ide,zRo,QRo,wd,WRo,qde,HRo,URo,Pj,JRo,YRo,KRo,Nde,ZRo,eBo,fw,oBo,Qe,mw,rBo,jde,tBo,aBo,Za,nBo,Dde,sBo,lBo,Gde,iBo,dBo,Ode,cBo,fBo,mBo,R,u3,Vde,gBo,hBo,$j,pBo,_Bo,uBo,b3,Xde,bBo,FBo,Ij,vBo,TBo,MBo,F3,zde,EBo,CBo,qj,wBo,ABo,yBo,v3,Qde,LBo,xBo,Nj,kBo,SBo,RBo,T3,Wde,BBo,PBo,jj,$Bo,IBo,qBo,M3,Hde,NBo,jBo,Dj,DBo,GBo,OBo,E3,Ude,VBo,XBo,Gj,zBo,QBo,WBo,C3,Jde,HBo,UBo,Oj,JBo,YBo,KBo,w3,Yde,ZBo,ePo,Vj,oPo,rPo,tPo,A3,Kde,aPo,nPo,Xj,sPo,lPo,iPo,y3,Zde,dPo,cPo,zj,fPo,mPo,gPo,L3,ece,hPo,pPo,Qj,_Po,uPo,bPo,x3,oce,FPo,vPo,Wj,TPo,MPo,EPo,k3,rce,CPo,wPo,Hj,APo,yPo,LPo,S3,tce,xPo,kPo,Uj,SPo,RPo,BPo,R3,ace,PPo,$Po,Jj,IPo,qPo,NPo,B3,nce,jPo,DPo,Yj,GPo,OPo,VPo,P3,sce,XPo,zPo,Kj,QPo,WPo,HPo,$3,lce,UPo,JPo,Zj,YPo,KPo,ZPo,I3,ice,e$o,o$o,eD,r$o,t$o,a$o,q3,dce,n$o,s$o,oD,l$o,i$o,d$o,N3,cce,c$o,f$o,rD,m$o,g$o,h$o,j3,fce,p$o,_$o,tD,u$o,b$o,F$o,D3,mce,v$o,T$o,aD,M$o,E$o,C$o,G3,gce,w$o,A$o,nD,y$o,L$o,x$o,O3,hce,k$o,S$o,sD,R$o,B$o,P$o,V3,pce,$$o,I$o,lD,q$o,N$o,j$o,X3,_ce,D$o,G$o,iD,O$o,V$o,X$o,z3,uce,z$o,Q$o,dD,W$o,H$o,U$o,Q3,bce,J$o,Y$o,cD,K$o,Z$o,eIo,W3,Fce,oIo,rIo,fD,tIo,aIo,nIo,H3,vce,sIo,lIo,mD,iIo,dIo,cIo,U3,Tce,fIo,mIo,gD,gIo,hIo,pIo,J3,Mce,_Io,uIo,hD,bIo,FIo,vIo,Y3,Ece,TIo,MIo,pD,EIo,CIo,wIo,K3,Cce,AIo,yIo,_D,LIo,xIo,kIo,Z3,wce,SIo,RIo,uD,BIo,PIo,$Io,e2,Ace,IIo,qIo,bD,NIo,jIo,DIo,o2,yce,GIo,OIo,FD,VIo,XIo,zIo,r2,QIo,Lce,WIo,HIo,xce,UIo,JIo,kce,YIo,KIo,gw,LRe,Ad,t2,Sce,hw,ZIo,Rce,eqo,xRe,sr,pw,oqo,yd,rqo,vD,tqo,aqo,TD,nqo,sqo,lqo,_w,iqo,Bce,dqo,cqo,fqo,et,uw,mqo,Pce,gqo,hqo,Ld,pqo,$ce,_qo,uqo,MD,bqo,Fqo,vqo,Ice,Tqo,Mqo,bw,Eqo,We,Fw,Cqo,qce,wqo,Aqo,en,yqo,Nce,Lqo,xqo,jce,kqo,Sqo,Dce,Rqo,Bqo,Pqo,Gce,a2,Oce,$qo,Iqo,ED,qqo,Nqo,jqo,n2,Dqo,Vce,Gqo,Oqo,Xce,Vqo,Xqo,zce,zqo,Qqo,vw,kRe,xd,s2,Qce,Tw,Wqo,Wce,Hqo,SRe,lr,Mw,Uqo,kd,Jqo,CD,Yqo,Kqo,wD,Zqo,eNo,oNo,Ew,rNo,Hce,tNo,aNo,nNo,ot,Cw,sNo,Uce,lNo,iNo,Sd,dNo,Jce,cNo,fNo,AD,mNo,gNo,hNo,Yce,pNo,_No,ww,uNo,He,Aw,bNo,Kce,FNo,vNo,on,TNo,Zce,MNo,ENo,efe,CNo,wNo,ofe,ANo,yNo,LNo,ge,l2,rfe,xNo,kNo,yD,SNo,RNo,BNo,i2,tfe,PNo,$No,LD,INo,qNo,NNo,Ds,afe,jNo,DNo,xD,GNo,ONo,kD,VNo,XNo,zNo,d2,nfe,QNo,WNo,SD,HNo,UNo,JNo,ma,sfe,YNo,KNo,RD,ZNo,ejo,BD,ojo,rjo,PD,tjo,ajo,njo,c2,lfe,sjo,ljo,$D,ijo,djo,cjo,f2,ife,fjo,mjo,ID,gjo,hjo,pjo,m2,dfe,_jo,ujo,qD,bjo,Fjo,vjo,g2,cfe,Tjo,Mjo,ND,Ejo,Cjo,wjo,h2,ffe,Ajo,yjo,jD,Ljo,xjo,kjo,p2,mfe,Sjo,Rjo,DD,Bjo,Pjo,$jo,_2,Ijo,gfe,qjo,Njo,hfe,jjo,Djo,pfe,Gjo,Ojo,yw,RRe,Rd,u2,_fe,Lw,Vjo,ufe,Xjo,BRe,ir,xw,zjo,Bd,Qjo,GD,Wjo,Hjo,OD,Ujo,Jjo,Yjo,kw,Kjo,bfe,Zjo,eDo,oDo,rt,Sw,rDo,Ffe,tDo,aDo,Pd,nDo,vfe,sDo,lDo,VD,iDo,dDo,cDo,Tfe,fDo,mDo,Rw,gDo,Ue,Bw,hDo,Mfe,pDo,_Do,rn,uDo,Efe,bDo,FDo,Cfe,vDo,TDo,wfe,MDo,EDo,CDo,Afe,b2,yfe,wDo,ADo,XD,yDo,LDo,xDo,F2,kDo,Lfe,SDo,RDo,xfe,BDo,PDo,kfe,$Do,IDo,Pw,PRe,$d,v2,Sfe,$w,qDo,Rfe,NDo,$Re,dr,Iw,jDo,Id,DDo,zD,GDo,ODo,QD,VDo,XDo,zDo,qw,QDo,Bfe,WDo,HDo,UDo,tt,Nw,JDo,Pfe,YDo,KDo,qd,ZDo,$fe,eGo,oGo,WD,rGo,tGo,aGo,Ife,nGo,sGo,jw,lGo,Je,Dw,iGo,qfe,dGo,cGo,tn,fGo,Nfe,mGo,gGo,jfe,hGo,pGo,Dfe,_Go,uGo,bGo,Se,T2,Gfe,FGo,vGo,HD,TGo,MGo,EGo,M2,Ofe,CGo,wGo,UD,AGo,yGo,LGo,E2,Vfe,xGo,kGo,JD,SGo,RGo,BGo,C2,Xfe,PGo,$Go,YD,IGo,qGo,NGo,w2,zfe,jGo,DGo,KD,GGo,OGo,VGo,A2,Qfe,XGo,zGo,ZD,QGo,WGo,HGo,y2,Wfe,UGo,JGo,eG,YGo,KGo,ZGo,L2,Hfe,eOo,oOo,oG,rOo,tOo,aOo,x2,nOo,Ufe,sOo,lOo,Jfe,iOo,dOo,Yfe,cOo,fOo,Gw,IRe,Nd,k2,Kfe,Ow,mOo,Zfe,gOo,qRe,cr,Vw,hOo,jd,pOo,rG,_Oo,uOo,tG,bOo,FOo,vOo,Xw,TOo,eme,MOo,EOo,COo,at,zw,wOo,ome,AOo,yOo,Dd,LOo,rme,xOo,kOo,aG,SOo,ROo,BOo,tme,POo,$Oo,Qw,IOo,Ye,Ww,qOo,ame,NOo,jOo,an,DOo,nme,GOo,OOo,sme,VOo,XOo,lme,zOo,QOo,WOo,nn,S2,ime,HOo,UOo,nG,JOo,YOo,KOo,R2,dme,ZOo,eVo,sG,oVo,rVo,tVo,B2,cme,aVo,nVo,lG,sVo,lVo,iVo,P2,fme,dVo,cVo,iG,fVo,mVo,gVo,$2,hVo,mme,pVo,_Vo,gme,uVo,bVo,hme,FVo,vVo,Hw,NRe,Gd,I2,pme,Uw,TVo,_me,MVo,jRe,fr,Jw,EVo,Od,CVo,dG,wVo,AVo,cG,yVo,LVo,xVo,Yw,kVo,ume,SVo,RVo,BVo,nt,Kw,PVo,bme,$Vo,IVo,Vd,qVo,Fme,NVo,jVo,fG,DVo,GVo,OVo,vme,VVo,XVo,Zw,zVo,Ke,eA,QVo,Tme,WVo,HVo,sn,UVo,Mme,JVo,YVo,Eme,KVo,ZVo,Cme,eXo,oXo,rXo,Re,q2,wme,tXo,aXo,mG,nXo,sXo,lXo,N2,Ame,iXo,dXo,gG,cXo,fXo,mXo,j2,yme,gXo,hXo,hG,pXo,_Xo,uXo,D2,Lme,bXo,FXo,pG,vXo,TXo,MXo,G2,xme,EXo,CXo,_G,wXo,AXo,yXo,O2,kme,LXo,xXo,uG,kXo,SXo,RXo,V2,Sme,BXo,PXo,bG,$Xo,IXo,qXo,X2,Rme,NXo,jXo,FG,DXo,GXo,OXo,z2,VXo,Bme,XXo,zXo,Pme,QXo,WXo,$me,HXo,UXo,oA,DRe,Xd,Q2,Ime,rA,JXo,qme,YXo,GRe,mr,tA,KXo,zd,ZXo,vG,ezo,ozo,TG,rzo,tzo,azo,aA,nzo,Nme,szo,lzo,izo,st,nA,dzo,jme,czo,fzo,Qd,mzo,Dme,gzo,hzo,MG,pzo,_zo,uzo,Gme,bzo,Fzo,sA,vzo,Ze,lA,Tzo,Ome,Mzo,Ezo,ln,Czo,Vme,wzo,Azo,Xme,yzo,Lzo,zme,xzo,kzo,Szo,iA,W2,Qme,Rzo,Bzo,EG,Pzo,$zo,Izo,H2,Wme,qzo,Nzo,CG,jzo,Dzo,Gzo,U2,Ozo,Hme,Vzo,Xzo,Ume,zzo,Qzo,Jme,Wzo,Hzo,dA,ORe,Wd,J2,Yme,cA,Uzo,Kme,Jzo,VRe,gr,fA,Yzo,Hd,Kzo,wG,Zzo,eQo,AG,oQo,rQo,tQo,mA,aQo,Zme,nQo,sQo,lQo,lt,gA,iQo,ege,dQo,cQo,Ud,fQo,oge,mQo,gQo,yG,hQo,pQo,_Qo,rge,uQo,bQo,hA,FQo,eo,pA,vQo,tge,TQo,MQo,dn,EQo,age,CQo,wQo,nge,AQo,yQo,sge,LQo,xQo,kQo,cn,Y2,lge,SQo,RQo,LG,BQo,PQo,$Qo,K2,ige,IQo,qQo,xG,NQo,jQo,DQo,Z2,dge,GQo,OQo,kG,VQo,XQo,zQo,eF,cge,QQo,WQo,SG,HQo,UQo,JQo,oF,YQo,fge,KQo,ZQo,mge,eWo,oWo,gge,rWo,tWo,_A,XRe,Jd,rF,hge,uA,aWo,pge,nWo,zRe,hr,bA,sWo,Yd,lWo,RG,iWo,dWo,BG,cWo,fWo,mWo,FA,gWo,_ge,hWo,pWo,_Wo,it,vA,uWo,uge,bWo,FWo,Kd,vWo,bge,TWo,MWo,PG,EWo,CWo,wWo,Fge,AWo,yWo,TA,LWo,oo,MA,xWo,vge,kWo,SWo,fn,RWo,Tge,BWo,PWo,Mge,$Wo,IWo,Ege,qWo,NWo,jWo,Zd,tF,Cge,DWo,GWo,$G,OWo,VWo,XWo,aF,wge,zWo,QWo,IG,WWo,HWo,UWo,nF,Age,JWo,YWo,qG,KWo,ZWo,eHo,sF,oHo,yge,rHo,tHo,Lge,aHo,nHo,xge,sHo,lHo,EA,QRe,ec,lF,kge,CA,iHo,Sge,dHo,WRe,pr,wA,cHo,oc,fHo,NG,mHo,gHo,jG,hHo,pHo,_Ho,AA,uHo,Rge,bHo,FHo,vHo,dt,yA,THo,Bge,MHo,EHo,rc,CHo,Pge,wHo,AHo,DG,yHo,LHo,xHo,$ge,kHo,SHo,LA,RHo,ro,xA,BHo,Ige,PHo,$Ho,mn,IHo,qge,qHo,NHo,Nge,jHo,DHo,jge,GHo,OHo,VHo,Dge,iF,Gge,XHo,zHo,GG,QHo,WHo,HHo,dF,UHo,Oge,JHo,YHo,Vge,KHo,ZHo,Xge,eUo,oUo,kA,HRe,tc,cF,zge,SA,rUo,Qge,tUo,URe,_r,RA,aUo,ac,nUo,OG,sUo,lUo,VG,iUo,dUo,cUo,BA,fUo,Wge,mUo,gUo,hUo,ct,PA,pUo,Hge,_Uo,uUo,nc,bUo,Uge,FUo,vUo,XG,TUo,MUo,EUo,Jge,CUo,wUo,$A,AUo,to,IA,yUo,Yge,LUo,xUo,gn,kUo,Kge,SUo,RUo,Zge,BUo,PUo,ehe,$Uo,IUo,qUo,ohe,fF,rhe,NUo,jUo,zG,DUo,GUo,OUo,mF,VUo,the,XUo,zUo,ahe,QUo,WUo,nhe,HUo,UUo,qA,JRe,sc,gF,she,NA,JUo,lhe,YUo,YRe,ur,jA,KUo,lc,ZUo,QG,eJo,oJo,WG,rJo,tJo,aJo,DA,nJo,ihe,sJo,lJo,iJo,ft,GA,dJo,dhe,cJo,fJo,ic,mJo,che,gJo,hJo,HG,pJo,_Jo,uJo,fhe,bJo,FJo,OA,vJo,ao,VA,TJo,mhe,MJo,EJo,hn,CJo,ghe,wJo,AJo,hhe,yJo,LJo,phe,xJo,kJo,SJo,dc,hF,_he,RJo,BJo,UG,PJo,$Jo,IJo,pF,uhe,qJo,NJo,JG,jJo,DJo,GJo,_F,bhe,OJo,VJo,YG,XJo,zJo,QJo,uF,WJo,Fhe,HJo,UJo,vhe,JJo,YJo,The,KJo,ZJo,XA,KRe,cc,bF,Mhe,zA,eYo,Ehe,oYo,ZRe,br,QA,rYo,fc,tYo,KG,aYo,nYo,ZG,sYo,lYo,iYo,WA,dYo,Che,cYo,fYo,mYo,mt,HA,gYo,whe,hYo,pYo,mc,_Yo,Ahe,uYo,bYo,eO,FYo,vYo,TYo,yhe,MYo,EYo,UA,CYo,no,JA,wYo,Lhe,AYo,yYo,pn,LYo,xhe,xYo,kYo,khe,SYo,RYo,She,BYo,PYo,$Yo,Rhe,FF,Bhe,IYo,qYo,oO,NYo,jYo,DYo,vF,GYo,Phe,OYo,VYo,$he,XYo,zYo,Ihe,QYo,WYo,YA,eBe,gc,TF,qhe,KA,HYo,Nhe,UYo,oBe,Fr,ZA,JYo,hc,YYo,rO,KYo,ZYo,tO,eKo,oKo,rKo,e0,tKo,jhe,aKo,nKo,sKo,gt,o0,lKo,Dhe,iKo,dKo,pc,cKo,Ghe,fKo,mKo,aO,gKo,hKo,pKo,Ohe,_Ko,uKo,r0,bKo,ho,t0,FKo,Vhe,vKo,TKo,_n,MKo,Xhe,EKo,CKo,zhe,wKo,AKo,Qhe,yKo,LKo,xKo,x,MF,Whe,kKo,SKo,nO,RKo,BKo,PKo,EF,Hhe,$Ko,IKo,sO,qKo,NKo,jKo,CF,Uhe,DKo,GKo,lO,OKo,VKo,XKo,wF,Jhe,zKo,QKo,iO,WKo,HKo,UKo,AF,Yhe,JKo,YKo,dO,KKo,ZKo,eZo,yF,Khe,oZo,rZo,cO,tZo,aZo,nZo,LF,Zhe,sZo,lZo,fO,iZo,dZo,cZo,xF,epe,fZo,mZo,mO,gZo,hZo,pZo,kF,ope,_Zo,uZo,gO,bZo,FZo,vZo,SF,rpe,TZo,MZo,hO,EZo,CZo,wZo,RF,tpe,AZo,yZo,pO,LZo,xZo,kZo,BF,ape,SZo,RZo,_O,BZo,PZo,$Zo,PF,npe,IZo,qZo,uO,NZo,jZo,DZo,$F,spe,GZo,OZo,bO,VZo,XZo,zZo,IF,lpe,QZo,WZo,FO,HZo,UZo,JZo,qF,ipe,YZo,KZo,vO,ZZo,eer,oer,Gs,dpe,rer,ter,TO,aer,ner,MO,ser,ler,ier,NF,cpe,der,cer,EO,fer,mer,ger,jF,fpe,her,per,CO,_er,uer,ber,DF,mpe,Fer,ver,wO,Ter,Mer,Eer,GF,gpe,Cer,wer,AO,Aer,yer,Ler,OF,hpe,xer,ker,yO,Ser,Rer,Ber,VF,ppe,Per,$er,LO,Ier,qer,Ner,XF,_pe,jer,Der,xO,Ger,Oer,Ver,zF,upe,Xer,zer,kO,Qer,Wer,Her,QF,bpe,Uer,Jer,SO,Yer,Ker,Zer,WF,Fpe,eor,oor,RO,ror,tor,aor,HF,vpe,nor,sor,BO,lor,ior,dor,UF,Tpe,cor,mor,PO,gor,hor,por,JF,Mpe,_or,uor,$O,bor,For,vor,YF,Epe,Tor,Mor,IO,Eor,Cor,wor,KF,Cpe,Aor,yor,qO,Lor,xor,kor,ZF,wpe,Sor,Ror,NO,Bor,Por,$or,ev,Ape,Ior,qor,jO,Nor,jor,Dor,ov,ype,Gor,Oor,DO,Vor,Xor,zor,rv,Lpe,Qor,Wor,GO,Hor,Uor,Jor,tv,xpe,Yor,Kor,OO,Zor,err,orr,av,kpe,rrr,trr,VO,arr,nrr,srr,nv,Spe,lrr,irr,XO,drr,crr,frr,sv,Rpe,mrr,grr,zO,hrr,prr,_rr,lv,Bpe,urr,brr,QO,Frr,vrr,Trr,iv,Ppe,Mrr,Err,WO,Crr,wrr,Arr,dv,$pe,yrr,Lrr,HO,xrr,krr,Srr,cv,Ipe,Rrr,Brr,UO,Prr,$rr,Irr,qpe,qrr,Nrr,a0,rBe,_c,fv,Npe,n0,jrr,jpe,Drr,tBe,vr,s0,Grr,uc,Orr,JO,Vrr,Xrr,YO,zrr,Qrr,Wrr,l0,Hrr,Dpe,Urr,Jrr,Yrr,ht,i0,Krr,Gpe,Zrr,etr,bc,otr,Ope,rtr,ttr,KO,atr,ntr,str,Vpe,ltr,itr,d0,dtr,po,c0,ctr,Xpe,ftr,mtr,un,gtr,zpe,htr,ptr,Qpe,_tr,utr,Wpe,btr,Ftr,vtr,H,mv,Hpe,Ttr,Mtr,ZO,Etr,Ctr,wtr,gv,Upe,Atr,ytr,eV,Ltr,xtr,ktr,hv,Jpe,Str,Rtr,oV,Btr,Ptr,$tr,pv,Ype,Itr,qtr,rV,Ntr,jtr,Dtr,_v,Kpe,Gtr,Otr,tV,Vtr,Xtr,ztr,uv,Zpe,Qtr,Wtr,aV,Htr,Utr,Jtr,bv,e_e,Ytr,Ktr,nV,Ztr,ear,oar,Fv,o_e,rar,tar,sV,aar,nar,sar,vv,r_e,lar,iar,lV,dar,car,far,Tv,t_e,mar,gar,iV,har,par,_ar,Mv,a_e,uar,bar,dV,Far,Tar,Mar,Ev,n_e,Ear,Car,cV,war,Aar,yar,Cv,s_e,Lar,xar,fV,kar,Sar,Rar,wv,l_e,Bar,Par,mV,$ar,Iar,qar,Av,i_e,Nar,jar,gV,Dar,Gar,Oar,yv,d_e,Var,Xar,hV,zar,Qar,War,Lv,c_e,Har,Uar,pV,Jar,Yar,Kar,xv,f_e,Zar,enr,_V,onr,rnr,tnr,kv,m_e,anr,nnr,uV,snr,lnr,inr,Sv,g_e,dnr,cnr,bV,fnr,mnr,gnr,Rv,h_e,hnr,pnr,FV,_nr,unr,bnr,Bv,p_e,Fnr,vnr,vV,Tnr,Mnr,Enr,Pv,__e,Cnr,wnr,TV,Anr,ynr,Lnr,u_e,xnr,knr,f0,aBe,Fc,$v,b_e,m0,Snr,F_e,Rnr,nBe,Tr,g0,Bnr,vc,Pnr,MV,$nr,Inr,EV,qnr,Nnr,jnr,h0,Dnr,v_e,Gnr,Onr,Vnr,pt,p0,Xnr,T_e,znr,Qnr,Tc,Wnr,M_e,Hnr,Unr,CV,Jnr,Ynr,Knr,E_e,Znr,esr,_0,osr,_o,u0,rsr,C_e,tsr,asr,bn,nsr,w_e,ssr,lsr,A_e,isr,dsr,y_e,csr,fsr,msr,ce,Iv,L_e,gsr,hsr,wV,psr,_sr,usr,qv,x_e,bsr,Fsr,AV,vsr,Tsr,Msr,Nv,k_e,Esr,Csr,yV,wsr,Asr,ysr,jv,S_e,Lsr,xsr,LV,ksr,Ssr,Rsr,Dv,R_e,Bsr,Psr,xV,$sr,Isr,qsr,Gv,B_e,Nsr,jsr,kV,Dsr,Gsr,Osr,Ov,P_e,Vsr,Xsr,SV,zsr,Qsr,Wsr,Vv,$_e,Hsr,Usr,RV,Jsr,Ysr,Ksr,Xv,I_e,Zsr,elr,BV,olr,rlr,tlr,zv,q_e,alr,nlr,PV,slr,llr,ilr,Qv,N_e,dlr,clr,$V,flr,mlr,glr,Wv,j_e,hlr,plr,IV,_lr,ulr,blr,D_e,Flr,vlr,b0,sBe,Mc,Hv,G_e,F0,Tlr,O_e,Mlr,lBe,Mr,v0,Elr,Ec,Clr,qV,wlr,Alr,NV,ylr,Llr,xlr,T0,klr,V_e,Slr,Rlr,Blr,_t,M0,Plr,X_e,$lr,Ilr,Cc,qlr,z_e,Nlr,jlr,jV,Dlr,Glr,Olr,Q_e,Vlr,Xlr,E0,zlr,uo,C0,Qlr,W_e,Wlr,Hlr,Fn,Ulr,H_e,Jlr,Ylr,U_e,Klr,Zlr,J_e,eir,oir,rir,w0,Uv,Y_e,tir,air,DV,nir,sir,lir,Jv,K_e,iir,dir,GV,cir,fir,mir,Z_e,gir,hir,A0,iBe,wc,Yv,eue,y0,pir,oue,_ir,dBe,Er,L0,uir,Ac,bir,OV,Fir,vir,VV,Tir,Mir,Eir,x0,Cir,rue,wir,Air,yir,ut,k0,Lir,tue,xir,kir,yc,Sir,aue,Rir,Bir,XV,Pir,$ir,Iir,nue,qir,Nir,S0,jir,bo,R0,Dir,sue,Gir,Oir,vn,Vir,lue,Xir,zir,iue,Qir,Wir,due,Hir,Uir,Jir,J,Kv,cue,Yir,Kir,zV,Zir,edr,odr,Zv,fue,rdr,tdr,QV,adr,ndr,sdr,e6,mue,ldr,idr,WV,ddr,cdr,fdr,o6,gue,mdr,gdr,HV,hdr,pdr,_dr,r6,hue,udr,bdr,UV,Fdr,vdr,Tdr,t6,pue,Mdr,Edr,JV,Cdr,wdr,Adr,a6,_ue,ydr,Ldr,YV,xdr,kdr,Sdr,n6,uue,Rdr,Bdr,KV,Pdr,$dr,Idr,s6,bue,qdr,Ndr,ZV,jdr,Ddr,Gdr,l6,Fue,Odr,Vdr,eX,Xdr,zdr,Qdr,i6,vue,Wdr,Hdr,oX,Udr,Jdr,Ydr,d6,Tue,Kdr,Zdr,rX,ecr,ocr,rcr,c6,Mue,tcr,acr,tX,ncr,scr,lcr,f6,Eue,icr,dcr,aX,ccr,fcr,mcr,m6,Cue,gcr,hcr,nX,pcr,_cr,ucr,g6,wue,bcr,Fcr,sX,vcr,Tcr,Mcr,h6,Aue,Ecr,Ccr,lX,wcr,Acr,ycr,p6,yue,Lcr,xcr,iX,kcr,Scr,Rcr,_6,Lue,Bcr,Pcr,dX,$cr,Icr,qcr,u6,xue,Ncr,jcr,cX,Dcr,Gcr,Ocr,kue,Vcr,Xcr,B0,cBe,Lc,b6,Sue,P0,zcr,Rue,Qcr,fBe,Cr,$0,Wcr,xc,Hcr,fX,Ucr,Jcr,mX,Ycr,Kcr,Zcr,I0,efr,Bue,ofr,rfr,tfr,bt,q0,afr,Pue,nfr,sfr,kc,lfr,$ue,ifr,dfr,gX,cfr,ffr,mfr,Iue,gfr,hfr,N0,pfr,Fo,j0,_fr,que,ufr,bfr,Tn,Ffr,Nue,vfr,Tfr,jue,Mfr,Efr,Due,Cfr,wfr,Afr,ue,F6,Gue,yfr,Lfr,hX,xfr,kfr,Sfr,v6,Oue,Rfr,Bfr,pX,Pfr,$fr,Ifr,T6,Vue,qfr,Nfr,_X,jfr,Dfr,Gfr,M6,Xue,Ofr,Vfr,uX,Xfr,zfr,Qfr,E6,zue,Wfr,Hfr,bX,Ufr,Jfr,Yfr,C6,Que,Kfr,Zfr,FX,emr,omr,rmr,w6,Wue,tmr,amr,vX,nmr,smr,lmr,A6,Hue,imr,dmr,TX,cmr,fmr,mmr,y6,Uue,gmr,hmr,MX,pmr,_mr,umr,L6,Jue,bmr,Fmr,EX,vmr,Tmr,Mmr,Yue,Emr,Cmr,D0,mBe,Sc,x6,Kue,G0,wmr,Zue,Amr,gBe,wr,O0,ymr,Rc,Lmr,CX,xmr,kmr,wX,Smr,Rmr,Bmr,V0,Pmr,e1e,$mr,Imr,qmr,Ft,X0,Nmr,o1e,jmr,Dmr,Bc,Gmr,r1e,Omr,Vmr,AX,Xmr,zmr,Qmr,t1e,Wmr,Hmr,z0,Umr,vo,Q0,Jmr,a1e,Ymr,Kmr,Mn,Zmr,n1e,egr,ogr,s1e,rgr,tgr,l1e,agr,ngr,sgr,V,k6,i1e,lgr,igr,yX,dgr,cgr,fgr,S6,d1e,mgr,ggr,LX,hgr,pgr,_gr,R6,c1e,ugr,bgr,xX,Fgr,vgr,Tgr,B6,f1e,Mgr,Egr,kX,Cgr,wgr,Agr,P6,m1e,ygr,Lgr,SX,xgr,kgr,Sgr,$6,g1e,Rgr,Bgr,RX,Pgr,$gr,Igr,I6,h1e,qgr,Ngr,BX,jgr,Dgr,Ggr,q6,p1e,Ogr,Vgr,PX,Xgr,zgr,Qgr,N6,_1e,Wgr,Hgr,$X,Ugr,Jgr,Ygr,j6,u1e,Kgr,Zgr,IX,ehr,ohr,rhr,D6,b1e,thr,ahr,qX,nhr,shr,lhr,G6,F1e,ihr,dhr,NX,chr,fhr,mhr,O6,v1e,ghr,hhr,jX,phr,_hr,uhr,V6,T1e,bhr,Fhr,DX,vhr,Thr,Mhr,X6,M1e,Ehr,Chr,GX,whr,Ahr,yhr,z6,E1e,Lhr,xhr,OX,khr,Shr,Rhr,Q6,C1e,Bhr,Phr,VX,$hr,Ihr,qhr,W6,w1e,Nhr,jhr,XX,Dhr,Ghr,Ohr,H6,A1e,Vhr,Xhr,zX,zhr,Qhr,Whr,U6,y1e,Hhr,Uhr,QX,Jhr,Yhr,Khr,J6,L1e,Zhr,epr,WX,opr,rpr,tpr,Y6,x1e,apr,npr,HX,spr,lpr,ipr,K6,k1e,dpr,cpr,UX,fpr,mpr,gpr,Z6,S1e,hpr,ppr,JX,_pr,upr,bpr,eT,R1e,Fpr,vpr,YX,Tpr,Mpr,Epr,oT,B1e,Cpr,wpr,KX,Apr,ypr,Lpr,P1e,xpr,kpr,W0,hBe,Pc,rT,$1e,H0,Spr,I1e,Rpr,pBe,Ar,U0,Bpr,$c,Ppr,ZX,$pr,Ipr,ez,qpr,Npr,jpr,J0,Dpr,q1e,Gpr,Opr,Vpr,vt,Y0,Xpr,N1e,zpr,Qpr,Ic,Wpr,j1e,Hpr,Upr,oz,Jpr,Ypr,Kpr,D1e,Zpr,e_r,K0,o_r,To,Z0,r_r,G1e,t_r,a_r,En,n_r,O1e,s_r,l_r,V1e,i_r,d_r,X1e,c_r,f_r,m_r,ne,tT,z1e,g_r,h_r,rz,p_r,__r,u_r,aT,Q1e,b_r,F_r,tz,v_r,T_r,M_r,nT,W1e,E_r,C_r,az,w_r,A_r,y_r,sT,H1e,L_r,x_r,nz,k_r,S_r,R_r,lT,U1e,B_r,P_r,sz,$_r,I_r,q_r,iT,J1e,N_r,j_r,lz,D_r,G_r,O_r,dT,Y1e,V_r,X_r,iz,z_r,Q_r,W_r,cT,K1e,H_r,U_r,dz,J_r,Y_r,K_r,fT,Z1e,Z_r,eur,cz,our,rur,tur,mT,e4e,aur,nur,fz,sur,lur,iur,gT,o4e,dur,cur,mz,fur,mur,gur,hT,r4e,hur,pur,gz,_ur,uur,bur,pT,t4e,Fur,vur,hz,Tur,Mur,Eur,_T,a4e,Cur,wur,pz,Aur,yur,Lur,uT,n4e,xur,kur,_z,Sur,Rur,Bur,bT,s4e,Pur,$ur,uz,Iur,qur,Nur,FT,l4e,jur,Dur,bz,Gur,Our,Vur,i4e,Xur,zur,ey,_Be,qc,vT,d4e,oy,Qur,c4e,Wur,uBe,yr,ry,Hur,Nc,Uur,Fz,Jur,Yur,vz,Kur,Zur,e1r,ty,o1r,f4e,r1r,t1r,a1r,Tt,ay,n1r,m4e,s1r,l1r,jc,i1r,g4e,d1r,c1r,Tz,f1r,m1r,g1r,h4e,h1r,p1r,ny,_1r,Mo,sy,u1r,p4e,b1r,F1r,Cn,v1r,_4e,T1r,M1r,u4e,E1r,C1r,b4e,w1r,A1r,y1r,F4e,TT,v4e,L1r,x1r,Mz,k1r,S1r,R1r,T4e,B1r,P1r,ly,bBe,Dc,MT,M4e,iy,$1r,E4e,I1r,FBe,Lr,dy,q1r,Gc,N1r,Ez,j1r,D1r,Cz,G1r,O1r,V1r,cy,X1r,C4e,z1r,Q1r,W1r,Mt,fy,H1r,w4e,U1r,J1r,Oc,Y1r,A4e,K1r,Z1r,wz,e4r,o4r,r4r,y4e,t4r,a4r,my,n4r,Eo,gy,s4r,L4e,l4r,i4r,wn,d4r,x4e,c4r,f4r,k4e,m4r,g4r,S4e,h4r,p4r,_4r,Y,ET,R4e,u4r,b4r,Az,F4r,v4r,T4r,CT,B4e,M4r,E4r,yz,C4r,w4r,A4r,wT,P4e,y4r,L4r,Lz,x4r,k4r,S4r,AT,$4e,R4r,B4r,xz,P4r,$4r,I4r,yT,I4e,q4r,N4r,kz,j4r,D4r,G4r,LT,q4e,O4r,V4r,Sz,X4r,z4r,Q4r,xT,N4e,W4r,H4r,Rz,U4r,J4r,Y4r,kT,j4e,K4r,Z4r,Bz,ebr,obr,rbr,ST,D4e,tbr,abr,Pz,nbr,sbr,lbr,RT,G4e,ibr,dbr,$z,cbr,fbr,mbr,BT,O4e,gbr,hbr,Iz,pbr,_br,ubr,PT,V4e,bbr,Fbr,qz,vbr,Tbr,Mbr,$T,X4e,Ebr,Cbr,Nz,wbr,Abr,ybr,IT,z4e,Lbr,xbr,jz,kbr,Sbr,Rbr,qT,Q4e,Bbr,Pbr,Dz,$br,Ibr,qbr,NT,W4e,Nbr,jbr,Gz,Dbr,Gbr,Obr,jT,H4e,Vbr,Xbr,Oz,zbr,Qbr,Wbr,DT,U4e,Hbr,Ubr,Vz,Jbr,Ybr,Kbr,GT,J4e,Zbr,e3r,Xz,o3r,r3r,t3r,OT,Y4e,a3r,n3r,zz,s3r,l3r,i3r,K4e,d3r,c3r,hy,vBe,Vc,VT,Z4e,py,f3r,ebe,m3r,TBe,xr,_y,g3r,Xc,h3r,Qz,p3r,_3r,Wz,u3r,b3r,F3r,uy,v3r,obe,T3r,M3r,E3r,Et,by,C3r,rbe,w3r,A3r,zc,y3r,tbe,L3r,x3r,Hz,k3r,S3r,R3r,abe,B3r,P3r,Fy,$3r,Co,vy,I3r,nbe,q3r,N3r,An,j3r,sbe,D3r,G3r,lbe,O3r,V3r,ibe,X3r,z3r,Q3r,K,XT,dbe,W3r,H3r,Uz,U3r,J3r,Y3r,zT,cbe,K3r,Z3r,Jz,e2r,o2r,r2r,QT,fbe,t2r,a2r,Yz,n2r,s2r,l2r,WT,mbe,i2r,d2r,Kz,c2r,f2r,m2r,HT,gbe,g2r,h2r,Zz,p2r,_2r,u2r,UT,hbe,b2r,F2r,eQ,v2r,T2r,M2r,JT,pbe,E2r,C2r,oQ,w2r,A2r,y2r,YT,_be,L2r,x2r,rQ,k2r,S2r,R2r,KT,ube,B2r,P2r,tQ,$2r,I2r,q2r,ZT,bbe,N2r,j2r,aQ,D2r,G2r,O2r,e7,Fbe,V2r,X2r,nQ,z2r,Q2r,W2r,o7,vbe,H2r,U2r,sQ,J2r,Y2r,K2r,r7,Tbe,Z2r,eFr,lQ,oFr,rFr,tFr,t7,Mbe,aFr,nFr,iQ,sFr,lFr,iFr,a7,Ebe,dFr,cFr,dQ,fFr,mFr,gFr,n7,Cbe,hFr,pFr,cQ,_Fr,uFr,bFr,s7,wbe,FFr,vFr,fQ,TFr,MFr,EFr,l7,Abe,CFr,wFr,mQ,AFr,yFr,LFr,i7,ybe,xFr,kFr,gQ,SFr,RFr,BFr,d7,Lbe,PFr,$Fr,hQ,IFr,qFr,NFr,xbe,jFr,DFr,Ty,MBe,Qc,c7,kbe,My,GFr,Sbe,OFr,EBe,kr,Ey,VFr,Wc,XFr,pQ,zFr,QFr,_Q,WFr,HFr,UFr,Cy,JFr,Rbe,YFr,KFr,ZFr,Ct,wy,evr,Bbe,ovr,rvr,Hc,tvr,Pbe,avr,nvr,uQ,svr,lvr,ivr,$be,dvr,cvr,Ay,fvr,wo,yy,mvr,Ibe,gvr,hvr,yn,pvr,qbe,_vr,uvr,Nbe,bvr,Fvr,jbe,vvr,Tvr,Mvr,Dbe,f7,Gbe,Evr,Cvr,bQ,wvr,Avr,yvr,Obe,Lvr,xvr,Ly,CBe,Uc,m7,Vbe,xy,kvr,Xbe,Svr,wBe,Sr,ky,Rvr,Jc,Bvr,FQ,Pvr,$vr,vQ,Ivr,qvr,Nvr,Sy,jvr,zbe,Dvr,Gvr,Ovr,wt,Ry,Vvr,Qbe,Xvr,zvr,Yc,Qvr,Wbe,Wvr,Hvr,TQ,Uvr,Jvr,Yvr,Hbe,Kvr,Zvr,By,e6r,Ao,Py,o6r,Ube,r6r,t6r,Ln,a6r,Jbe,n6r,s6r,Ybe,l6r,i6r,Kbe,d6r,c6r,f6r,Zbe,g7,e3e,m6r,g6r,MQ,h6r,p6r,_6r,o3e,u6r,b6r,$y,ABe,Kc,h7,r3e,Iy,F6r,t3e,v6r,yBe,Rr,qy,T6r,Zc,M6r,EQ,E6r,C6r,CQ,w6r,A6r,y6r,Ny,L6r,a3e,x6r,k6r,S6r,At,jy,R6r,n3e,B6r,P6r,ef,$6r,s3e,I6r,q6r,wQ,N6r,j6r,D6r,l3e,G6r,O6r,Dy,V6r,yo,Gy,X6r,i3e,z6r,Q6r,xn,W6r,d3e,H6r,U6r,c3e,J6r,Y6r,f3e,K6r,Z6r,eTr,z,p7,m3e,oTr,rTr,AQ,tTr,aTr,nTr,_7,g3e,sTr,lTr,yQ,iTr,dTr,cTr,u7,h3e,fTr,mTr,LQ,gTr,hTr,pTr,b7,p3e,_Tr,uTr,xQ,bTr,FTr,vTr,F7,_3e,TTr,MTr,kQ,ETr,CTr,wTr,v7,u3e,ATr,yTr,SQ,LTr,xTr,kTr,T7,b3e,STr,RTr,RQ,BTr,PTr,$Tr,M7,F3e,ITr,qTr,BQ,NTr,jTr,DTr,E7,v3e,GTr,OTr,PQ,VTr,XTr,zTr,C7,T3e,QTr,WTr,$Q,HTr,UTr,JTr,w7,M3e,YTr,KTr,IQ,ZTr,e7r,o7r,A7,E3e,r7r,t7r,qQ,a7r,n7r,s7r,y7,C3e,l7r,i7r,NQ,d7r,c7r,f7r,L7,w3e,m7r,g7r,jQ,h7r,p7r,_7r,x7,A3e,u7r,b7r,DQ,F7r,v7r,T7r,k7,y3e,M7r,E7r,GQ,C7r,w7r,A7r,S7,L3e,y7r,L7r,OQ,x7r,k7r,S7r,R7,x3e,R7r,B7r,VQ,P7r,$7r,I7r,B7,k3e,q7r,N7r,XQ,j7r,D7r,G7r,P7,S3e,O7r,V7r,zQ,X7r,z7r,Q7r,$7,R3e,W7r,H7r,QQ,U7r,J7r,Y7r,I7,B3e,K7r,Z7r,WQ,eMr,oMr,rMr,q7,P3e,tMr,aMr,HQ,nMr,sMr,lMr,N7,$3e,iMr,dMr,UQ,cMr,fMr,mMr,j7,I3e,gMr,hMr,JQ,pMr,_Mr,uMr,q3e,bMr,FMr,Oy,LBe,of,D7,N3e,Vy,vMr,j3e,TMr,xBe,Br,Xy,MMr,rf,EMr,YQ,CMr,wMr,KQ,AMr,yMr,LMr,zy,xMr,D3e,kMr,SMr,RMr,yt,Qy,BMr,G3e,PMr,$Mr,tf,IMr,O3e,qMr,NMr,ZQ,jMr,DMr,GMr,V3e,OMr,VMr,Wy,XMr,Lo,Hy,zMr,X3e,QMr,WMr,kn,HMr,z3e,UMr,JMr,Q3e,YMr,KMr,W3e,ZMr,eEr,oEr,ca,G7,H3e,rEr,tEr,eW,aEr,nEr,sEr,O7,U3e,lEr,iEr,oW,dEr,cEr,fEr,V7,J3e,mEr,gEr,rW,hEr,pEr,_Er,X7,Y3e,uEr,bEr,tW,FEr,vEr,TEr,z7,K3e,MEr,EEr,aW,CEr,wEr,AEr,Z3e,yEr,LEr,Uy,kBe,af,Q7,e2e,Jy,xEr,o2e,kEr,SBe,Pr,Yy,SEr,nf,REr,nW,BEr,PEr,sW,$Er,IEr,qEr,Ky,NEr,r2e,jEr,DEr,GEr,Lt,Zy,OEr,t2e,VEr,XEr,sf,zEr,a2e,QEr,WEr,lW,HEr,UEr,JEr,n2e,YEr,KEr,eL,ZEr,xo,oL,eCr,s2e,oCr,rCr,Sn,tCr,l2e,aCr,nCr,i2e,sCr,lCr,d2e,iCr,dCr,cCr,fe,W7,c2e,fCr,mCr,iW,gCr,hCr,pCr,H7,f2e,_Cr,uCr,dW,bCr,FCr,vCr,U7,m2e,TCr,MCr,cW,ECr,CCr,wCr,J7,g2e,ACr,yCr,fW,LCr,xCr,kCr,Y7,h2e,SCr,RCr,mW,BCr,PCr,$Cr,K7,p2e,ICr,qCr,gW,NCr,jCr,DCr,Z7,_2e,GCr,OCr,hW,VCr,XCr,zCr,eM,u2e,QCr,WCr,pW,HCr,UCr,JCr,oM,b2e,YCr,KCr,_W,ZCr,e5r,o5r,rM,F2e,r5r,t5r,uW,a5r,n5r,s5r,tM,v2e,l5r,i5r,bW,d5r,c5r,f5r,aM,T2e,m5r,g5r,FW,h5r,p5r,_5r,M2e,u5r,b5r,rL,RBe,lf,nM,E2e,tL,F5r,C2e,v5r,BBe,$r,aL,T5r,df,M5r,vW,E5r,C5r,TW,w5r,A5r,y5r,nL,L5r,w2e,x5r,k5r,S5r,xt,sL,R5r,A2e,B5r,P5r,cf,$5r,y2e,I5r,q5r,MW,N5r,j5r,D5r,L2e,G5r,O5r,lL,V5r,ko,iL,X5r,x2e,z5r,Q5r,Rn,W5r,k2e,H5r,U5r,S2e,J5r,Y5r,R2e,K5r,Z5r,ewr,be,sM,B2e,owr,rwr,EW,twr,awr,nwr,lM,P2e,swr,lwr,CW,iwr,dwr,cwr,iM,$2e,fwr,mwr,wW,gwr,hwr,pwr,dM,I2e,_wr,uwr,AW,bwr,Fwr,vwr,cM,q2e,Twr,Mwr,yW,Ewr,Cwr,wwr,fM,N2e,Awr,ywr,LW,Lwr,xwr,kwr,mM,j2e,Swr,Rwr,xW,Bwr,Pwr,$wr,gM,D2e,Iwr,qwr,kW,Nwr,jwr,Dwr,hM,G2e,Gwr,Owr,SW,Vwr,Xwr,zwr,pM,O2e,Qwr,Wwr,RW,Hwr,Uwr,Jwr,V2e,Ywr,Kwr,dL,PBe,ff,_M,X2e,cL,Zwr,z2e,eAr,$Be,Ir,fL,oAr,mf,rAr,BW,tAr,aAr,PW,nAr,sAr,lAr,mL,iAr,Q2e,dAr,cAr,fAr,kt,gL,mAr,W2e,gAr,hAr,gf,pAr,H2e,_Ar,uAr,$W,bAr,FAr,vAr,U2e,TAr,MAr,hL,EAr,So,pL,CAr,J2e,wAr,AAr,Bn,yAr,Y2e,LAr,xAr,K2e,kAr,SAr,Z2e,RAr,BAr,PAr,Ee,uM,eFe,$Ar,IAr,IW,qAr,NAr,jAr,bM,oFe,DAr,GAr,qW,OAr,VAr,XAr,FM,rFe,zAr,QAr,NW,WAr,HAr,UAr,vM,tFe,JAr,YAr,jW,KAr,ZAr,e0r,TM,aFe,o0r,r0r,DW,t0r,a0r,n0r,MM,nFe,s0r,l0r,GW,i0r,d0r,c0r,EM,sFe,f0r,m0r,OW,g0r,h0r,p0r,CM,lFe,_0r,u0r,VW,b0r,F0r,v0r,wM,iFe,T0r,M0r,XW,E0r,C0r,w0r,dFe,A0r,y0r,_L,IBe,hf,AM,cFe,uL,L0r,fFe,x0r,qBe,qr,bL,k0r,pf,S0r,zW,R0r,B0r,QW,P0r,$0r,I0r,FL,q0r,mFe,N0r,j0r,D0r,St,vL,G0r,gFe,O0r,V0r,_f,X0r,hFe,z0r,Q0r,WW,W0r,H0r,U0r,pFe,J0r,Y0r,TL,K0r,Ro,ML,Z0r,_Fe,eyr,oyr,Pn,ryr,uFe,tyr,ayr,bFe,nyr,syr,FFe,lyr,iyr,dyr,Fe,yM,vFe,cyr,fyr,HW,myr,gyr,hyr,LM,TFe,pyr,_yr,UW,uyr,byr,Fyr,xM,MFe,vyr,Tyr,JW,Myr,Eyr,Cyr,kM,EFe,wyr,Ayr,YW,yyr,Lyr,xyr,SM,CFe,kyr,Syr,KW,Ryr,Byr,Pyr,RM,wFe,$yr,Iyr,ZW,qyr,Nyr,jyr,BM,AFe,Dyr,Gyr,eH,Oyr,Vyr,Xyr,PM,yFe,zyr,Qyr,oH,Wyr,Hyr,Uyr,$M,LFe,Jyr,Yyr,rH,Kyr,Zyr,eLr,IM,xFe,oLr,rLr,tH,tLr,aLr,nLr,kFe,sLr,lLr,EL,NBe,uf,qM,SFe,CL,iLr,RFe,dLr,jBe,Nr,wL,cLr,bf,fLr,aH,mLr,gLr,nH,hLr,pLr,_Lr,AL,uLr,BFe,bLr,FLr,vLr,Rt,yL,TLr,PFe,MLr,ELr,Ff,CLr,$Fe,wLr,ALr,sH,yLr,LLr,xLr,IFe,kLr,SLr,LL,RLr,Bo,xL,BLr,qFe,PLr,$Lr,$n,ILr,NFe,qLr,NLr,jFe,jLr,DLr,DFe,GLr,OLr,VLr,ve,NM,GFe,XLr,zLr,lH,QLr,WLr,HLr,jM,OFe,ULr,JLr,iH,YLr,KLr,ZLr,DM,VFe,e8r,o8r,dH,r8r,t8r,a8r,GM,XFe,n8r,s8r,cH,l8r,i8r,d8r,OM,zFe,c8r,f8r,fH,m8r,g8r,h8r,VM,QFe,p8r,_8r,mH,u8r,b8r,F8r,XM,WFe,v8r,T8r,gH,M8r,E8r,C8r,zM,HFe,w8r,A8r,hH,y8r,L8r,x8r,QM,UFe,k8r,S8r,pH,R8r,B8r,P8r,WM,JFe,$8r,I8r,_H,q8r,N8r,j8r,YFe,D8r,G8r,kL,DBe,vf,HM,KFe,SL,O8r,ZFe,V8r,GBe,jr,RL,X8r,Tf,z8r,uH,Q8r,W8r,bH,H8r,U8r,J8r,BL,Y8r,eve,K8r,Z8r,e9r,Bt,PL,o9r,ove,r9r,t9r,Mf,a9r,rve,n9r,s9r,FH,l9r,i9r,d9r,tve,c9r,f9r,$L,m9r,Po,IL,g9r,ave,h9r,p9r,In,_9r,nve,u9r,b9r,sve,F9r,v9r,lve,T9r,M9r,E9r,Be,UM,ive,C9r,w9r,vH,A9r,y9r,L9r,JM,dve,x9r,k9r,TH,S9r,R9r,B9r,YM,cve,P9r,$9r,MH,I9r,q9r,N9r,KM,fve,j9r,D9r,EH,G9r,O9r,V9r,ZM,mve,X9r,z9r,CH,Q9r,W9r,H9r,eE,gve,U9r,J9r,wH,Y9r,K9r,Z9r,oE,hve,exr,oxr,AH,rxr,txr,axr,rE,pve,nxr,sxr,yH,lxr,ixr,dxr,_ve,cxr,fxr,qL,OBe,Ef,tE,uve,NL,mxr,bve,gxr,VBe,Dr,jL,hxr,Cf,pxr,LH,_xr,uxr,xH,bxr,Fxr,vxr,DL,Txr,Fve,Mxr,Exr,Cxr,Pt,GL,wxr,vve,Axr,yxr,wf,Lxr,Tve,xxr,kxr,kH,Sxr,Rxr,Bxr,Mve,Pxr,$xr,OL,Ixr,$o,VL,qxr,Eve,Nxr,jxr,qn,Dxr,Cve,Gxr,Oxr,wve,Vxr,Xxr,Ave,zxr,Qxr,Wxr,Pe,aE,yve,Hxr,Uxr,SH,Jxr,Yxr,Kxr,nE,Lve,Zxr,ekr,RH,okr,rkr,tkr,sE,xve,akr,nkr,BH,skr,lkr,ikr,lE,kve,dkr,ckr,PH,fkr,mkr,gkr,iE,Sve,hkr,pkr,$H,_kr,ukr,bkr,dE,Rve,Fkr,vkr,IH,Tkr,Mkr,Ekr,cE,Bve,Ckr,wkr,qH,Akr,ykr,Lkr,fE,Pve,xkr,kkr,NH,Skr,Rkr,Bkr,$ve,Pkr,$kr,XL,XBe,Af,mE,Ive,zL,Ikr,qve,qkr,zBe,Gr,QL,Nkr,yf,jkr,jH,Dkr,Gkr,DH,Okr,Vkr,Xkr,WL,zkr,Nve,Qkr,Wkr,Hkr,$t,HL,Ukr,jve,Jkr,Ykr,Lf,Kkr,Dve,Zkr,eSr,GH,oSr,rSr,tSr,Gve,aSr,nSr,UL,sSr,Io,JL,lSr,Ove,iSr,dSr,Nn,cSr,Vve,fSr,mSr,Xve,gSr,hSr,zve,pSr,_Sr,uSr,Qve,gE,Wve,bSr,FSr,OH,vSr,TSr,MSr,Hve,ESr,CSr,YL,QBe,xf,hE,Uve,KL,wSr,Jve,ASr,WBe,Or,ZL,ySr,kf,LSr,VH,xSr,kSr,XH,SSr,RSr,BSr,e8,PSr,Yve,$Sr,ISr,qSr,It,o8,NSr,Kve,jSr,DSr,Sf,GSr,Zve,OSr,VSr,zH,XSr,zSr,QSr,e6e,WSr,HSr,r8,USr,qo,t8,JSr,o6e,YSr,KSr,jn,ZSr,r6e,eRr,oRr,t6e,rRr,tRr,a6e,aRr,nRr,sRr,a8,pE,n6e,lRr,iRr,QH,dRr,cRr,fRr,_E,s6e,mRr,gRr,WH,hRr,pRr,_Rr,l6e,uRr,bRr,n8,HBe,Rf,uE,i6e,s8,FRr,d6e,vRr,UBe,Vr,l8,TRr,Bf,MRr,HH,ERr,CRr,UH,wRr,ARr,yRr,i8,LRr,c6e,xRr,kRr,SRr,qt,d8,RRr,f6e,BRr,PRr,Pf,$Rr,m6e,IRr,qRr,JH,NRr,jRr,DRr,g6e,GRr,ORr,c8,VRr,No,f8,XRr,h6e,zRr,QRr,Dn,WRr,p6e,HRr,URr,_6e,JRr,YRr,u6e,KRr,ZRr,eBr,b6e,bE,F6e,oBr,rBr,YH,tBr,aBr,nBr,v6e,sBr,lBr,m8,JBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),MC=new X({}),EC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new iBr({props:{warning:!0,$$slots:{default:[PEt]},$$scope:{ctx:If}}}),CC=new X({}),wC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L542"}}),LC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L565",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),xC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),kC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L687",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),SC=new X({}),RC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L352"}}),$C=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16473/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),IC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),qC=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),NC=new X({}),jC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),OC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new iBr({props:{$$slots:{default:[$Et]},$$scope:{ctx:If}}}),VC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),XC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),zC=new X({}),QC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L70"}}),UC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new iBr({props:{$$slots:{default:[IEt]},$$scope:{ctx:If}}}),JC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),YC=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),KC=new X({}),ZC=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L709"}}),o5=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),r5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),t5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n5=new X({}),s5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L716"}}),i5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),d5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),c5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m5=new X({}),g5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L731"}}),p5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),u5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F5=new X({}),v5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L738"}}),M5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),E5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),C5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A5=new X({}),y5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L745"}}),x5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),k5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),S5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),R5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B5=new X({}),P5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L754"}}),I5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),q5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),N5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),j5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D5=new X({}),G5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L788"}}),V5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),X5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),z5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W5=new X({}),H5=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L795"}}),J5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Y5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),K5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Z5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ew=new X({}),ow=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L781"}}),tw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lw=new X({}),iw=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L763"}}),cw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),mw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hw=new X({}),pw=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L770"}}),uw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),Fw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Mw=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L804"}}),Cw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Aw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new X({}),xw=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L843"}}),Sw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Bw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new X({}),Iw=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L850"}}),Nw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Dw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new X({}),Vw=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L873"}}),zw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Ww=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L857"}}),Kw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),eA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L864"}}),nA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),lA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L882"}}),gA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),pA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L889"}}),vA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),MA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L836"}}),yA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),xA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),RA=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L811"}}),PA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),IA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),jA=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L818"}}),GA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),VA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),QA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L827"}}),HA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),JA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),o0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),t0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),i0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),c0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new X({}),g0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),p0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),u0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),v0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),M0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),C0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),k0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),R0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),q0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),j0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),X0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Q0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Y0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Z0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),ay=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),sy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),fy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),gy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),by=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),vy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),yy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),Ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Py=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Iy=new X({}),qy=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),jy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Dy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Gy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Vy=new X({}),Xy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Qy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Hy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Jy=new X({}),Yy=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Zy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),oL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tL=new X({}),aL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),sL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),iL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cL=new X({}),fL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),gL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),hL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),pL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uL=new X({}),bL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),vL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),TL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),ML=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),wL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),yL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),xL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SL=new X({}),RL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),PL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),$L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),IL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NL=new X({}),jL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),GL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),OL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),VL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zL=new X({}),QL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),HL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),JL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KL=new X({}),ZL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),o8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),r8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),t8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),n8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s8=new X({}),l8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),d8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),f8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),bC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),FC=o("AutoConfig"),On=o(", "),Vn=a("a"),vC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),TC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),c9=o("will create a model that is an instance of "),Oi=a("a"),f9=o("BertModel"),m9=o("."),zo=l(),Ga=a("p"),g9=o("There is one class of "),Df=a("code"),h9=o("AutoModel"),iIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),USe=l(),Vi=a("h2"),Gf=a("a"),zJ=a("span"),f(MC.$$.fragment),dIe=l(),QJ=a("span"),cIe=o("Extending the Auto Classes"),JSe=l(),zn=a("p"),fIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),WJ=a("code"),mIe=o("NewModel"),gIe=o(", make sure you have a "),HJ=a("code"),hIe=o("NewModelConfig"),pIe=o(` then you can add those to the auto
classes like this:`),YSe=l(),f(EC.$$.fragment),KSe=l(),p9=a("p"),_Ie=o("You will then be able to use the auto classes like you would usually do!"),ZSe=l(),f(Of.$$.fragment),eRe=l(),Xi=a("h2"),Vf=a("a"),UJ=a("span"),f(CC.$$.fragment),uIe=l(),JJ=a("span"),bIe=o("AutoConfig"),oRe=l(),Qo=a("div"),f(wC.$$.fragment),FIe=l(),AC=a("p"),vIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=a("a"),TIe=o("from_pretrained()"),MIe=o(" class method."),EIe=l(),yC=a("p"),CIe=o("This class cannot be instantiated directly using "),YJ=a("code"),wIe=o("__init__()"),AIe=o(" (throws an error)."),yIe=l(),mo=a("div"),f(LC.$$.fragment),LIe=l(),KJ=a("p"),xIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),kIe=l(),zi=a("p"),SIe=o("The configuration class to instantiate is selected based on the "),ZJ=a("code"),RIe=o("model_type"),BIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eY=a("code"),PIe=o("pretrained_model_name_or_path"),$Ie=o(":"),IIe=l(),F=a("ul"),Xf=a("li"),oY=a("strong"),qIe=o("albert"),NIe=o(" \u2014 "),u9=a("a"),jIe=o("AlbertConfig"),DIe=o(" (ALBERT model)"),GIe=l(),zf=a("li"),rY=a("strong"),OIe=o("bart"),VIe=o(" \u2014 "),b9=a("a"),XIe=o("BartConfig"),zIe=o(" (BART model)"),QIe=l(),Qf=a("li"),tY=a("strong"),WIe=o("beit"),HIe=o(" \u2014 "),F9=a("a"),UIe=o("BeitConfig"),JIe=o(" (BEiT model)"),YIe=l(),Wf=a("li"),aY=a("strong"),KIe=o("bert"),ZIe=o(" \u2014 "),v9=a("a"),eqe=o("BertConfig"),oqe=o(" (BERT model)"),rqe=l(),Hf=a("li"),nY=a("strong"),tqe=o("bert-generation"),aqe=o(" \u2014 "),T9=a("a"),nqe=o("BertGenerationConfig"),sqe=o(" (Bert Generation model)"),lqe=l(),Uf=a("li"),sY=a("strong"),iqe=o("big_bird"),dqe=o(" \u2014 "),M9=a("a"),cqe=o("BigBirdConfig"),fqe=o(" (BigBird model)"),mqe=l(),Jf=a("li"),lY=a("strong"),gqe=o("bigbird_pegasus"),hqe=o(" \u2014 "),E9=a("a"),pqe=o("BigBirdPegasusConfig"),_qe=o(" (BigBirdPegasus model)"),uqe=l(),Yf=a("li"),iY=a("strong"),bqe=o("blenderbot"),Fqe=o(" \u2014 "),C9=a("a"),vqe=o("BlenderbotConfig"),Tqe=o(" (Blenderbot model)"),Mqe=l(),Kf=a("li"),dY=a("strong"),Eqe=o("blenderbot-small"),Cqe=o(" \u2014 "),w9=a("a"),wqe=o("BlenderbotSmallConfig"),Aqe=o(" (BlenderbotSmall model)"),yqe=l(),Zf=a("li"),cY=a("strong"),Lqe=o("camembert"),xqe=o(" \u2014 "),A9=a("a"),kqe=o("CamembertConfig"),Sqe=o(" (CamemBERT model)"),Rqe=l(),em=a("li"),fY=a("strong"),Bqe=o("canine"),Pqe=o(" \u2014 "),y9=a("a"),$qe=o("CanineConfig"),Iqe=o(" (Canine model)"),qqe=l(),om=a("li"),mY=a("strong"),Nqe=o("clip"),jqe=o(" \u2014 "),L9=a("a"),Dqe=o("CLIPConfig"),Gqe=o(" (CLIP model)"),Oqe=l(),rm=a("li"),gY=a("strong"),Vqe=o("convbert"),Xqe=o(" \u2014 "),x9=a("a"),zqe=o("ConvBertConfig"),Qqe=o(" (ConvBERT model)"),Wqe=l(),tm=a("li"),hY=a("strong"),Hqe=o("convnext"),Uqe=o(" \u2014 "),k9=a("a"),Jqe=o("ConvNextConfig"),Yqe=o(" (ConvNext model)"),Kqe=l(),am=a("li"),pY=a("strong"),Zqe=o("ctrl"),eNe=o(" \u2014 "),S9=a("a"),oNe=o("CTRLConfig"),rNe=o(" (CTRL model)"),tNe=l(),nm=a("li"),_Y=a("strong"),aNe=o("data2vec-audio"),nNe=o(" \u2014 "),R9=a("a"),sNe=o("Data2VecAudioConfig"),lNe=o(" (Data2VecAudio model)"),iNe=l(),sm=a("li"),uY=a("strong"),dNe=o("data2vec-text"),cNe=o(" \u2014 "),B9=a("a"),fNe=o("Data2VecTextConfig"),mNe=o(" (Data2VecText model)"),gNe=l(),lm=a("li"),bY=a("strong"),hNe=o("deberta"),pNe=o(" \u2014 "),P9=a("a"),_Ne=o("DebertaConfig"),uNe=o(" (DeBERTa model)"),bNe=l(),im=a("li"),FY=a("strong"),FNe=o("deberta-v2"),vNe=o(" \u2014 "),$9=a("a"),TNe=o("DebertaV2Config"),MNe=o(" (DeBERTa-v2 model)"),ENe=l(),dm=a("li"),vY=a("strong"),CNe=o("decision_transformer"),wNe=o(" \u2014 "),I9=a("a"),ANe=o("DecisionTransformerConfig"),yNe=o(" (Decision Transformer model)"),LNe=l(),cm=a("li"),TY=a("strong"),xNe=o("deit"),kNe=o(" \u2014 "),q9=a("a"),SNe=o("DeiTConfig"),RNe=o(" (DeiT model)"),BNe=l(),fm=a("li"),MY=a("strong"),PNe=o("detr"),$Ne=o(" \u2014 "),N9=a("a"),INe=o("DetrConfig"),qNe=o(" (DETR model)"),NNe=l(),mm=a("li"),EY=a("strong"),jNe=o("distilbert"),DNe=o(" \u2014 "),j9=a("a"),GNe=o("DistilBertConfig"),ONe=o(" (DistilBERT model)"),VNe=l(),gm=a("li"),CY=a("strong"),XNe=o("dpr"),zNe=o(" \u2014 "),D9=a("a"),QNe=o("DPRConfig"),WNe=o(" (DPR model)"),HNe=l(),hm=a("li"),wY=a("strong"),UNe=o("dpt"),JNe=o(" \u2014 "),G9=a("a"),YNe=o("DPTConfig"),KNe=o(" (DPT model)"),ZNe=l(),pm=a("li"),AY=a("strong"),eje=o("electra"),oje=o(" \u2014 "),O9=a("a"),rje=o("ElectraConfig"),tje=o(" (ELECTRA model)"),aje=l(),_m=a("li"),yY=a("strong"),nje=o("encoder-decoder"),sje=o(" \u2014 "),V9=a("a"),lje=o("EncoderDecoderConfig"),ije=o(" (Encoder decoder model)"),dje=l(),um=a("li"),LY=a("strong"),cje=o("flaubert"),fje=o(" \u2014 "),X9=a("a"),mje=o("FlaubertConfig"),gje=o(" (FlauBERT model)"),hje=l(),bm=a("li"),xY=a("strong"),pje=o("fnet"),_je=o(" \u2014 "),z9=a("a"),uje=o("FNetConfig"),bje=o(" (FNet model)"),Fje=l(),Fm=a("li"),kY=a("strong"),vje=o("fsmt"),Tje=o(" \u2014 "),Q9=a("a"),Mje=o("FSMTConfig"),Eje=o(" (FairSeq Machine-Translation model)"),Cje=l(),vm=a("li"),SY=a("strong"),wje=o("funnel"),Aje=o(" \u2014 "),W9=a("a"),yje=o("FunnelConfig"),Lje=o(" (Funnel Transformer model)"),xje=l(),Tm=a("li"),RY=a("strong"),kje=o("glpn"),Sje=o(" \u2014 "),H9=a("a"),Rje=o("GLPNConfig"),Bje=o(" (GLPN model)"),Pje=l(),Mm=a("li"),BY=a("strong"),$je=o("gpt2"),Ije=o(" \u2014 "),U9=a("a"),qje=o("GPT2Config"),Nje=o(" (OpenAI GPT-2 model)"),jje=l(),Em=a("li"),PY=a("strong"),Dje=o("gpt_neo"),Gje=o(" \u2014 "),J9=a("a"),Oje=o("GPTNeoConfig"),Vje=o(" (GPT Neo model)"),Xje=l(),Cm=a("li"),$Y=a("strong"),zje=o("gptj"),Qje=o(" \u2014 "),Y9=a("a"),Wje=o("GPTJConfig"),Hje=o(" (GPT-J model)"),Uje=l(),wm=a("li"),IY=a("strong"),Jje=o("hubert"),Yje=o(" \u2014 "),K9=a("a"),Kje=o("HubertConfig"),Zje=o(" (Hubert model)"),eDe=l(),Am=a("li"),qY=a("strong"),oDe=o("ibert"),rDe=o(" \u2014 "),Z9=a("a"),tDe=o("IBertConfig"),aDe=o(" (I-BERT model)"),nDe=l(),ym=a("li"),NY=a("strong"),sDe=o("imagegpt"),lDe=o(" \u2014 "),ex=a("a"),iDe=o("ImageGPTConfig"),dDe=o(" (ImageGPT model)"),cDe=l(),Lm=a("li"),jY=a("strong"),fDe=o("layoutlm"),mDe=o(" \u2014 "),ox=a("a"),gDe=o("LayoutLMConfig"),hDe=o(" (LayoutLM model)"),pDe=l(),xm=a("li"),DY=a("strong"),_De=o("layoutlmv2"),uDe=o(" \u2014 "),rx=a("a"),bDe=o("LayoutLMv2Config"),FDe=o(" (LayoutLMv2 model)"),vDe=l(),km=a("li"),GY=a("strong"),TDe=o("led"),MDe=o(" \u2014 "),tx=a("a"),EDe=o("LEDConfig"),CDe=o(" (LED model)"),wDe=l(),Sm=a("li"),OY=a("strong"),ADe=o("longformer"),yDe=o(" \u2014 "),ax=a("a"),LDe=o("LongformerConfig"),xDe=o(" (Longformer model)"),kDe=l(),Rm=a("li"),VY=a("strong"),SDe=o("luke"),RDe=o(" \u2014 "),nx=a("a"),BDe=o("LukeConfig"),PDe=o(" (LUKE model)"),$De=l(),Bm=a("li"),XY=a("strong"),IDe=o("lxmert"),qDe=o(" \u2014 "),sx=a("a"),NDe=o("LxmertConfig"),jDe=o(" (LXMERT model)"),DDe=l(),Pm=a("li"),zY=a("strong"),GDe=o("m2m_100"),ODe=o(" \u2014 "),lx=a("a"),VDe=o("M2M100Config"),XDe=o(" (M2M100 model)"),zDe=l(),$m=a("li"),QY=a("strong"),QDe=o("marian"),WDe=o(" \u2014 "),ix=a("a"),HDe=o("MarianConfig"),UDe=o(" (Marian model)"),JDe=l(),Im=a("li"),WY=a("strong"),YDe=o("maskformer"),KDe=o(" \u2014 "),dx=a("a"),ZDe=o("MaskFormerConfig"),eGe=o(" (MaskFormer model)"),oGe=l(),qm=a("li"),HY=a("strong"),rGe=o("mbart"),tGe=o(" \u2014 "),cx=a("a"),aGe=o("MBartConfig"),nGe=o(" (mBART model)"),sGe=l(),Nm=a("li"),UY=a("strong"),lGe=o("megatron-bert"),iGe=o(" \u2014 "),fx=a("a"),dGe=o("MegatronBertConfig"),cGe=o(" (MegatronBert model)"),fGe=l(),jm=a("li"),JY=a("strong"),mGe=o("mobilebert"),gGe=o(" \u2014 "),mx=a("a"),hGe=o("MobileBertConfig"),pGe=o(" (MobileBERT model)"),_Ge=l(),Dm=a("li"),YY=a("strong"),uGe=o("mpnet"),bGe=o(" \u2014 "),gx=a("a"),FGe=o("MPNetConfig"),vGe=o(" (MPNet model)"),TGe=l(),Gm=a("li"),KY=a("strong"),MGe=o("mt5"),EGe=o(" \u2014 "),hx=a("a"),CGe=o("MT5Config"),wGe=o(" (mT5 model)"),AGe=l(),Om=a("li"),ZY=a("strong"),yGe=o("nystromformer"),LGe=o(" \u2014 "),px=a("a"),xGe=o("NystromformerConfig"),kGe=o(" (Nystromformer model)"),SGe=l(),Vm=a("li"),eK=a("strong"),RGe=o("openai-gpt"),BGe=o(" \u2014 "),_x=a("a"),PGe=o("OpenAIGPTConfig"),$Ge=o(" (OpenAI GPT model)"),IGe=l(),Xm=a("li"),oK=a("strong"),qGe=o("pegasus"),NGe=o(" \u2014 "),ux=a("a"),jGe=o("PegasusConfig"),DGe=o(" (Pegasus model)"),GGe=l(),zm=a("li"),rK=a("strong"),OGe=o("perceiver"),VGe=o(" \u2014 "),bx=a("a"),XGe=o("PerceiverConfig"),zGe=o(" (Perceiver model)"),QGe=l(),Qm=a("li"),tK=a("strong"),WGe=o("plbart"),HGe=o(" \u2014 "),Fx=a("a"),UGe=o("PLBartConfig"),JGe=o(" (PLBart model)"),YGe=l(),Wm=a("li"),aK=a("strong"),KGe=o("poolformer"),ZGe=o(" \u2014 "),vx=a("a"),eOe=o("PoolFormerConfig"),oOe=o(" (PoolFormer model)"),rOe=l(),Hm=a("li"),nK=a("strong"),tOe=o("prophetnet"),aOe=o(" \u2014 "),Tx=a("a"),nOe=o("ProphetNetConfig"),sOe=o(" (ProphetNet model)"),lOe=l(),Um=a("li"),sK=a("strong"),iOe=o("qdqbert"),dOe=o(" \u2014 "),Mx=a("a"),cOe=o("QDQBertConfig"),fOe=o(" (QDQBert model)"),mOe=l(),Jm=a("li"),lK=a("strong"),gOe=o("rag"),hOe=o(" \u2014 "),Ex=a("a"),pOe=o("RagConfig"),_Oe=o(" (RAG model)"),uOe=l(),Ym=a("li"),iK=a("strong"),bOe=o("realm"),FOe=o(" \u2014 "),Cx=a("a"),vOe=o("RealmConfig"),TOe=o(" (Realm model)"),MOe=l(),Km=a("li"),dK=a("strong"),EOe=o("reformer"),COe=o(" \u2014 "),wx=a("a"),wOe=o("ReformerConfig"),AOe=o(" (Reformer model)"),yOe=l(),Zm=a("li"),cK=a("strong"),LOe=o("rembert"),xOe=o(" \u2014 "),Ax=a("a"),kOe=o("RemBertConfig"),SOe=o(" (RemBERT model)"),ROe=l(),eg=a("li"),fK=a("strong"),BOe=o("resnet"),POe=o(" \u2014 "),yx=a("a"),$Oe=o("ResNetConfig"),IOe=o(" (ResNet model)"),qOe=l(),og=a("li"),mK=a("strong"),NOe=o("retribert"),jOe=o(" \u2014 "),Lx=a("a"),DOe=o("RetriBertConfig"),GOe=o(" (RetriBERT model)"),OOe=l(),rg=a("li"),gK=a("strong"),VOe=o("roberta"),XOe=o(" \u2014 "),xx=a("a"),zOe=o("RobertaConfig"),QOe=o(" (RoBERTa model)"),WOe=l(),tg=a("li"),hK=a("strong"),HOe=o("roformer"),UOe=o(" \u2014 "),kx=a("a"),JOe=o("RoFormerConfig"),YOe=o(" (RoFormer model)"),KOe=l(),ag=a("li"),pK=a("strong"),ZOe=o("segformer"),eVe=o(" \u2014 "),Sx=a("a"),oVe=o("SegformerConfig"),rVe=o(" (SegFormer model)"),tVe=l(),ng=a("li"),_K=a("strong"),aVe=o("sew"),nVe=o(" \u2014 "),Rx=a("a"),sVe=o("SEWConfig"),lVe=o(" (SEW model)"),iVe=l(),sg=a("li"),uK=a("strong"),dVe=o("sew-d"),cVe=o(" \u2014 "),Bx=a("a"),fVe=o("SEWDConfig"),mVe=o(" (SEW-D model)"),gVe=l(),lg=a("li"),bK=a("strong"),hVe=o("speech-encoder-decoder"),pVe=o(" \u2014 "),Px=a("a"),_Ve=o("SpeechEncoderDecoderConfig"),uVe=o(" (Speech Encoder decoder model)"),bVe=l(),ig=a("li"),FK=a("strong"),FVe=o("speech_to_text"),vVe=o(" \u2014 "),$x=a("a"),TVe=o("Speech2TextConfig"),MVe=o(" (Speech2Text model)"),EVe=l(),dg=a("li"),vK=a("strong"),CVe=o("speech_to_text_2"),wVe=o(" \u2014 "),Ix=a("a"),AVe=o("Speech2Text2Config"),yVe=o(" (Speech2Text2 model)"),LVe=l(),cg=a("li"),TK=a("strong"),xVe=o("splinter"),kVe=o(" \u2014 "),qx=a("a"),SVe=o("SplinterConfig"),RVe=o(" (Splinter model)"),BVe=l(),fg=a("li"),MK=a("strong"),PVe=o("squeezebert"),$Ve=o(" \u2014 "),Nx=a("a"),IVe=o("SqueezeBertConfig"),qVe=o(" (SqueezeBERT model)"),NVe=l(),mg=a("li"),EK=a("strong"),jVe=o("swin"),DVe=o(" \u2014 "),jx=a("a"),GVe=o("SwinConfig"),OVe=o(" (Swin model)"),VVe=l(),gg=a("li"),CK=a("strong"),XVe=o("t5"),zVe=o(" \u2014 "),Dx=a("a"),QVe=o("T5Config"),WVe=o(" (T5 model)"),HVe=l(),hg=a("li"),wK=a("strong"),UVe=o("tapas"),JVe=o(" \u2014 "),Gx=a("a"),YVe=o("TapasConfig"),KVe=o(" (TAPAS model)"),ZVe=l(),pg=a("li"),AK=a("strong"),eXe=o("transfo-xl"),oXe=o(" \u2014 "),Ox=a("a"),rXe=o("TransfoXLConfig"),tXe=o(" (Transformer-XL model)"),aXe=l(),_g=a("li"),yK=a("strong"),nXe=o("trocr"),sXe=o(" \u2014 "),Vx=a("a"),lXe=o("TrOCRConfig"),iXe=o(" (TrOCR model)"),dXe=l(),ug=a("li"),LK=a("strong"),cXe=o("unispeech"),fXe=o(" \u2014 "),Xx=a("a"),mXe=o("UniSpeechConfig"),gXe=o(" (UniSpeech model)"),hXe=l(),bg=a("li"),xK=a("strong"),pXe=o("unispeech-sat"),_Xe=o(" \u2014 "),zx=a("a"),uXe=o("UniSpeechSatConfig"),bXe=o(" (UniSpeechSat model)"),FXe=l(),Fg=a("li"),kK=a("strong"),vXe=o("van"),TXe=o(" \u2014 "),Qx=a("a"),MXe=o("VanConfig"),EXe=o(" (VAN model)"),CXe=l(),vg=a("li"),SK=a("strong"),wXe=o("vilt"),AXe=o(" \u2014 "),Wx=a("a"),yXe=o("ViltConfig"),LXe=o(" (ViLT model)"),xXe=l(),Tg=a("li"),RK=a("strong"),kXe=o("vision-encoder-decoder"),SXe=o(" \u2014 "),Hx=a("a"),RXe=o("VisionEncoderDecoderConfig"),BXe=o(" (Vision Encoder decoder model)"),PXe=l(),Mg=a("li"),BK=a("strong"),$Xe=o("vision-text-dual-encoder"),IXe=o(" \u2014 "),Ux=a("a"),qXe=o("VisionTextDualEncoderConfig"),NXe=o(" (VisionTextDualEncoder model)"),jXe=l(),Eg=a("li"),PK=a("strong"),DXe=o("visual_bert"),GXe=o(" \u2014 "),Jx=a("a"),OXe=o("VisualBertConfig"),VXe=o(" (VisualBert model)"),XXe=l(),Cg=a("li"),$K=a("strong"),zXe=o("vit"),QXe=o(" \u2014 "),Yx=a("a"),WXe=o("ViTConfig"),HXe=o(" (ViT model)"),UXe=l(),wg=a("li"),IK=a("strong"),JXe=o("vit_mae"),YXe=o(" \u2014 "),Kx=a("a"),KXe=o("ViTMAEConfig"),ZXe=o(" (ViTMAE model)"),eze=l(),Ag=a("li"),qK=a("strong"),oze=o("wav2vec2"),rze=o(" \u2014 "),Zx=a("a"),tze=o("Wav2Vec2Config"),aze=o(" (Wav2Vec2 model)"),nze=l(),yg=a("li"),NK=a("strong"),sze=o("wavlm"),lze=o(" \u2014 "),ek=a("a"),ize=o("WavLMConfig"),dze=o(" (WavLM model)"),cze=l(),Lg=a("li"),jK=a("strong"),fze=o("xglm"),mze=o(" \u2014 "),ok=a("a"),gze=o("XGLMConfig"),hze=o(" (XGLM model)"),pze=l(),xg=a("li"),DK=a("strong"),_ze=o("xlm"),uze=o(" \u2014 "),rk=a("a"),bze=o("XLMConfig"),Fze=o(" (XLM model)"),vze=l(),kg=a("li"),GK=a("strong"),Tze=o("xlm-prophetnet"),Mze=o(" \u2014 "),tk=a("a"),Eze=o("XLMProphetNetConfig"),Cze=o(" (XLMProphetNet model)"),wze=l(),Sg=a("li"),OK=a("strong"),Aze=o("xlm-roberta"),yze=o(" \u2014 "),ak=a("a"),Lze=o("XLMRobertaConfig"),xze=o(" (XLM-RoBERTa model)"),kze=l(),Rg=a("li"),VK=a("strong"),Sze=o("xlm-roberta-xl"),Rze=o(" \u2014 "),nk=a("a"),Bze=o("XLMRobertaXLConfig"),Pze=o(" (XLM-RoBERTa-XL model)"),$ze=l(),Bg=a("li"),XK=a("strong"),Ize=o("xlnet"),qze=o(" \u2014 "),sk=a("a"),Nze=o("XLNetConfig"),jze=o(" (XLNet model)"),Dze=l(),Pg=a("li"),zK=a("strong"),Gze=o("yoso"),Oze=o(" \u2014 "),lk=a("a"),Vze=o("YosoConfig"),Xze=o(" (YOSO model)"),zze=l(),QK=a("p"),Qze=o("Examples:"),Wze=l(),f(xC.$$.fragment),Hze=l(),$g=a("div"),f(kC.$$.fragment),Uze=l(),WK=a("p"),Jze=o("Register a new configuration for this class."),rRe=l(),Qi=a("h2"),Ig=a("a"),HK=a("span"),f(SC.$$.fragment),Yze=l(),UK=a("span"),Kze=o("AutoTokenizer"),tRe=l(),Wo=a("div"),f(RC.$$.fragment),Zze=l(),BC=a("p"),eQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ik=a("a"),oQe=o("AutoTokenizer.from_pretrained()"),rQe=o(" class method."),tQe=l(),PC=a("p"),aQe=o("This class cannot be instantiated directly using "),JK=a("code"),nQe=o("__init__()"),sQe=o(" (throws an error)."),lQe=l(),go=a("div"),f($C.$$.fragment),iQe=l(),YK=a("p"),dQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),cQe=l(),Oa=a("p"),fQe=o("The tokenizer class to instantiate is selected based on the "),KK=a("code"),mQe=o("model_type"),gQe=o(` property of the config object (either
passed as an argument or loaded from `),ZK=a("code"),hQe=o("pretrained_model_name_or_path"),pQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eZ=a("code"),_Qe=o("pretrained_model_name_or_path"),uQe=o(":"),bQe=l(),E=a("ul"),Qn=a("li"),oZ=a("strong"),FQe=o("albert"),vQe=o(" \u2014 "),dk=a("a"),TQe=o("AlbertTokenizer"),MQe=o(" or "),ck=a("a"),EQe=o("AlbertTokenizerFast"),CQe=o(" (ALBERT model)"),wQe=l(),Wn=a("li"),rZ=a("strong"),AQe=o("bart"),yQe=o(" \u2014 "),fk=a("a"),LQe=o("BartTokenizer"),xQe=o(" or "),mk=a("a"),kQe=o("BartTokenizerFast"),SQe=o(" (BART model)"),RQe=l(),Hn=a("li"),tZ=a("strong"),BQe=o("barthez"),PQe=o(" \u2014 "),gk=a("a"),$Qe=o("BarthezTokenizer"),IQe=o(" or "),hk=a("a"),qQe=o("BarthezTokenizerFast"),NQe=o(" (BARThez model)"),jQe=l(),qg=a("li"),aZ=a("strong"),DQe=o("bartpho"),GQe=o(" \u2014 "),pk=a("a"),OQe=o("BartphoTokenizer"),VQe=o(" (BARTpho model)"),XQe=l(),Un=a("li"),nZ=a("strong"),zQe=o("bert"),QQe=o(" \u2014 "),_k=a("a"),WQe=o("BertTokenizer"),HQe=o(" or "),uk=a("a"),UQe=o("BertTokenizerFast"),JQe=o(" (BERT model)"),YQe=l(),Ng=a("li"),sZ=a("strong"),KQe=o("bert-generation"),ZQe=o(" \u2014 "),bk=a("a"),eWe=o("BertGenerationTokenizer"),oWe=o(" (Bert Generation model)"),rWe=l(),jg=a("li"),lZ=a("strong"),tWe=o("bert-japanese"),aWe=o(" \u2014 "),Fk=a("a"),nWe=o("BertJapaneseTokenizer"),sWe=o(" (BertJapanese model)"),lWe=l(),Dg=a("li"),iZ=a("strong"),iWe=o("bertweet"),dWe=o(" \u2014 "),vk=a("a"),cWe=o("BertweetTokenizer"),fWe=o(" (Bertweet model)"),mWe=l(),Jn=a("li"),dZ=a("strong"),gWe=o("big_bird"),hWe=o(" \u2014 "),Tk=a("a"),pWe=o("BigBirdTokenizer"),_We=o(" or "),Mk=a("a"),uWe=o("BigBirdTokenizerFast"),bWe=o(" (BigBird model)"),FWe=l(),Yn=a("li"),cZ=a("strong"),vWe=o("bigbird_pegasus"),TWe=o(" \u2014 "),Ek=a("a"),MWe=o("PegasusTokenizer"),EWe=o(" or "),Ck=a("a"),CWe=o("PegasusTokenizerFast"),wWe=o(" (BigBirdPegasus model)"),AWe=l(),Kn=a("li"),fZ=a("strong"),yWe=o("blenderbot"),LWe=o(" \u2014 "),wk=a("a"),xWe=o("BlenderbotTokenizer"),kWe=o(" or "),Ak=a("a"),SWe=o("BlenderbotTokenizerFast"),RWe=o(" (Blenderbot model)"),BWe=l(),Gg=a("li"),mZ=a("strong"),PWe=o("blenderbot-small"),$We=o(" \u2014 "),yk=a("a"),IWe=o("BlenderbotSmallTokenizer"),qWe=o(" (BlenderbotSmall model)"),NWe=l(),Og=a("li"),gZ=a("strong"),jWe=o("byt5"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("ByT5Tokenizer"),OWe=o(" (ByT5 model)"),VWe=l(),Zn=a("li"),hZ=a("strong"),XWe=o("camembert"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("CamembertTokenizer"),WWe=o(" or "),kk=a("a"),HWe=o("CamembertTokenizerFast"),UWe=o(" (CamemBERT model)"),JWe=l(),Vg=a("li"),pZ=a("strong"),YWe=o("canine"),KWe=o(" \u2014 "),Sk=a("a"),ZWe=o("CanineTokenizer"),eHe=o(" (Canine model)"),oHe=l(),es=a("li"),_Z=a("strong"),rHe=o("clip"),tHe=o(" \u2014 "),Rk=a("a"),aHe=o("CLIPTokenizer"),nHe=o(" or "),Bk=a("a"),sHe=o("CLIPTokenizerFast"),lHe=o(" (CLIP model)"),iHe=l(),os=a("li"),uZ=a("strong"),dHe=o("convbert"),cHe=o(" \u2014 "),Pk=a("a"),fHe=o("ConvBertTokenizer"),mHe=o(" or "),$k=a("a"),gHe=o("ConvBertTokenizerFast"),hHe=o(" (ConvBERT model)"),pHe=l(),rs=a("li"),bZ=a("strong"),_He=o("cpm"),uHe=o(" \u2014 "),Ik=a("a"),bHe=o("CpmTokenizer"),FHe=o(" or "),FZ=a("code"),vHe=o("CpmTokenizerFast"),THe=o(" (CPM model)"),MHe=l(),Xg=a("li"),vZ=a("strong"),EHe=o("ctrl"),CHe=o(" \u2014 "),qk=a("a"),wHe=o("CTRLTokenizer"),AHe=o(" (CTRL model)"),yHe=l(),ts=a("li"),TZ=a("strong"),LHe=o("deberta"),xHe=o(" \u2014 "),Nk=a("a"),kHe=o("DebertaTokenizer"),SHe=o(" or "),jk=a("a"),RHe=o("DebertaTokenizerFast"),BHe=o(" (DeBERTa model)"),PHe=l(),zg=a("li"),MZ=a("strong"),$He=o("deberta-v2"),IHe=o(" \u2014 "),Dk=a("a"),qHe=o("DebertaV2Tokenizer"),NHe=o(" (DeBERTa-v2 model)"),jHe=l(),as=a("li"),EZ=a("strong"),DHe=o("distilbert"),GHe=o(" \u2014 "),Gk=a("a"),OHe=o("DistilBertTokenizer"),VHe=o(" or "),Ok=a("a"),XHe=o("DistilBertTokenizerFast"),zHe=o(" (DistilBERT model)"),QHe=l(),ns=a("li"),CZ=a("strong"),WHe=o("dpr"),HHe=o(" \u2014 "),Vk=a("a"),UHe=o("DPRQuestionEncoderTokenizer"),JHe=o(" or "),Xk=a("a"),YHe=o("DPRQuestionEncoderTokenizerFast"),KHe=o(" (DPR model)"),ZHe=l(),ss=a("li"),wZ=a("strong"),eUe=o("electra"),oUe=o(" \u2014 "),zk=a("a"),rUe=o("ElectraTokenizer"),tUe=o(" or "),Qk=a("a"),aUe=o("ElectraTokenizerFast"),nUe=o(" (ELECTRA model)"),sUe=l(),Qg=a("li"),AZ=a("strong"),lUe=o("flaubert"),iUe=o(" \u2014 "),Wk=a("a"),dUe=o("FlaubertTokenizer"),cUe=o(" (FlauBERT model)"),fUe=l(),ls=a("li"),yZ=a("strong"),mUe=o("fnet"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("FNetTokenizer"),pUe=o(" or "),Uk=a("a"),_Ue=o("FNetTokenizerFast"),uUe=o(" (FNet model)"),bUe=l(),Wg=a("li"),LZ=a("strong"),FUe=o("fsmt"),vUe=o(" \u2014 "),Jk=a("a"),TUe=o("FSMTTokenizer"),MUe=o(" (FairSeq Machine-Translation model)"),EUe=l(),is=a("li"),xZ=a("strong"),CUe=o("funnel"),wUe=o(" \u2014 "),Yk=a("a"),AUe=o("FunnelTokenizer"),yUe=o(" or "),Kk=a("a"),LUe=o("FunnelTokenizerFast"),xUe=o(" (Funnel Transformer model)"),kUe=l(),ds=a("li"),kZ=a("strong"),SUe=o("gpt2"),RUe=o(" \u2014 "),Zk=a("a"),BUe=o("GPT2Tokenizer"),PUe=o(" or "),eS=a("a"),$Ue=o("GPT2TokenizerFast"),IUe=o(" (OpenAI GPT-2 model)"),qUe=l(),cs=a("li"),SZ=a("strong"),NUe=o("gpt_neo"),jUe=o(" \u2014 "),oS=a("a"),DUe=o("GPT2Tokenizer"),GUe=o(" or "),rS=a("a"),OUe=o("GPT2TokenizerFast"),VUe=o(" (GPT Neo model)"),XUe=l(),fs=a("li"),RZ=a("strong"),zUe=o("herbert"),QUe=o(" \u2014 "),tS=a("a"),WUe=o("HerbertTokenizer"),HUe=o(" or "),aS=a("a"),UUe=o("HerbertTokenizerFast"),JUe=o(" (HerBERT model)"),YUe=l(),Hg=a("li"),BZ=a("strong"),KUe=o("hubert"),ZUe=o(" \u2014 "),nS=a("a"),eJe=o("Wav2Vec2CTCTokenizer"),oJe=o(" (Hubert model)"),rJe=l(),ms=a("li"),PZ=a("strong"),tJe=o("ibert"),aJe=o(" \u2014 "),sS=a("a"),nJe=o("RobertaTokenizer"),sJe=o(" or "),lS=a("a"),lJe=o("RobertaTokenizerFast"),iJe=o(" (I-BERT model)"),dJe=l(),gs=a("li"),$Z=a("strong"),cJe=o("layoutlm"),fJe=o(" \u2014 "),iS=a("a"),mJe=o("LayoutLMTokenizer"),gJe=o(" or "),dS=a("a"),hJe=o("LayoutLMTokenizerFast"),pJe=o(" (LayoutLM model)"),_Je=l(),hs=a("li"),IZ=a("strong"),uJe=o("layoutlmv2"),bJe=o(" \u2014 "),cS=a("a"),FJe=o("LayoutLMv2Tokenizer"),vJe=o(" or "),fS=a("a"),TJe=o("LayoutLMv2TokenizerFast"),MJe=o(" (LayoutLMv2 model)"),EJe=l(),ps=a("li"),qZ=a("strong"),CJe=o("layoutxlm"),wJe=o(" \u2014 "),mS=a("a"),AJe=o("LayoutXLMTokenizer"),yJe=o(" or "),gS=a("a"),LJe=o("LayoutXLMTokenizerFast"),xJe=o(" (LayoutXLM model)"),kJe=l(),_s=a("li"),NZ=a("strong"),SJe=o("led"),RJe=o(" \u2014 "),hS=a("a"),BJe=o("LEDTokenizer"),PJe=o(" or "),pS=a("a"),$Je=o("LEDTokenizerFast"),IJe=o(" (LED model)"),qJe=l(),us=a("li"),jZ=a("strong"),NJe=o("longformer"),jJe=o(" \u2014 "),_S=a("a"),DJe=o("LongformerTokenizer"),GJe=o(" or "),uS=a("a"),OJe=o("LongformerTokenizerFast"),VJe=o(" (Longformer model)"),XJe=l(),Ug=a("li"),DZ=a("strong"),zJe=o("luke"),QJe=o(" \u2014 "),bS=a("a"),WJe=o("LukeTokenizer"),HJe=o(" (LUKE model)"),UJe=l(),bs=a("li"),GZ=a("strong"),JJe=o("lxmert"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("LxmertTokenizer"),ZJe=o(" or "),vS=a("a"),eYe=o("LxmertTokenizerFast"),oYe=o(" (LXMERT model)"),rYe=l(),Jg=a("li"),OZ=a("strong"),tYe=o("m2m_100"),aYe=o(" \u2014 "),TS=a("a"),nYe=o("M2M100Tokenizer"),sYe=o(" (M2M100 model)"),lYe=l(),Yg=a("li"),VZ=a("strong"),iYe=o("marian"),dYe=o(" \u2014 "),MS=a("a"),cYe=o("MarianTokenizer"),fYe=o(" (Marian model)"),mYe=l(),Fs=a("li"),XZ=a("strong"),gYe=o("mbart"),hYe=o(" \u2014 "),ES=a("a"),pYe=o("MBartTokenizer"),_Ye=o(" or "),CS=a("a"),uYe=o("MBartTokenizerFast"),bYe=o(" (mBART model)"),FYe=l(),vs=a("li"),zZ=a("strong"),vYe=o("mbart50"),TYe=o(" \u2014 "),wS=a("a"),MYe=o("MBart50Tokenizer"),EYe=o(" or "),AS=a("a"),CYe=o("MBart50TokenizerFast"),wYe=o(" (mBART-50 model)"),AYe=l(),Kg=a("li"),QZ=a("strong"),yYe=o("mluke"),LYe=o(" \u2014 "),yS=a("a"),xYe=o("MLukeTokenizer"),kYe=o(" (mLUKE model)"),SYe=l(),Ts=a("li"),WZ=a("strong"),RYe=o("mobilebert"),BYe=o(" \u2014 "),LS=a("a"),PYe=o("MobileBertTokenizer"),$Ye=o(" or "),xS=a("a"),IYe=o("MobileBertTokenizerFast"),qYe=o(" (MobileBERT model)"),NYe=l(),Ms=a("li"),HZ=a("strong"),jYe=o("mpnet"),DYe=o(" \u2014 "),kS=a("a"),GYe=o("MPNetTokenizer"),OYe=o(" or "),SS=a("a"),VYe=o("MPNetTokenizerFast"),XYe=o(" (MPNet model)"),zYe=l(),Es=a("li"),UZ=a("strong"),QYe=o("mt5"),WYe=o(" \u2014 "),RS=a("a"),HYe=o("MT5Tokenizer"),UYe=o(" or "),BS=a("a"),JYe=o("MT5TokenizerFast"),YYe=o(" (mT5 model)"),KYe=l(),Cs=a("li"),JZ=a("strong"),ZYe=o("openai-gpt"),eKe=o(" \u2014 "),PS=a("a"),oKe=o("OpenAIGPTTokenizer"),rKe=o(" or "),$S=a("a"),tKe=o("OpenAIGPTTokenizerFast"),aKe=o(" (OpenAI GPT model)"),nKe=l(),ws=a("li"),YZ=a("strong"),sKe=o("pegasus"),lKe=o(" \u2014 "),IS=a("a"),iKe=o("PegasusTokenizer"),dKe=o(" or "),qS=a("a"),cKe=o("PegasusTokenizerFast"),fKe=o(" (Pegasus model)"),mKe=l(),Zg=a("li"),KZ=a("strong"),gKe=o("perceiver"),hKe=o(" \u2014 "),NS=a("a"),pKe=o("PerceiverTokenizer"),_Ke=o(" (Perceiver model)"),uKe=l(),eh=a("li"),ZZ=a("strong"),bKe=o("phobert"),FKe=o(" \u2014 "),jS=a("a"),vKe=o("PhobertTokenizer"),TKe=o(" (PhoBERT model)"),MKe=l(),oh=a("li"),eee=a("strong"),EKe=o("plbart"),CKe=o(" \u2014 "),DS=a("a"),wKe=o("PLBartTokenizer"),AKe=o(" (PLBart model)"),yKe=l(),rh=a("li"),oee=a("strong"),LKe=o("prophetnet"),xKe=o(" \u2014 "),GS=a("a"),kKe=o("ProphetNetTokenizer"),SKe=o(" (ProphetNet model)"),RKe=l(),As=a("li"),ree=a("strong"),BKe=o("qdqbert"),PKe=o(" \u2014 "),OS=a("a"),$Ke=o("BertTokenizer"),IKe=o(" or "),VS=a("a"),qKe=o("BertTokenizerFast"),NKe=o(" (QDQBert model)"),jKe=l(),th=a("li"),tee=a("strong"),DKe=o("rag"),GKe=o(" \u2014 "),XS=a("a"),OKe=o("RagTokenizer"),VKe=o(" (RAG model)"),XKe=l(),ys=a("li"),aee=a("strong"),zKe=o("realm"),QKe=o(" \u2014 "),zS=a("a"),WKe=o("RealmTokenizer"),HKe=o(" or "),QS=a("a"),UKe=o("RealmTokenizerFast"),JKe=o(" (Realm model)"),YKe=l(),Ls=a("li"),nee=a("strong"),KKe=o("reformer"),ZKe=o(" \u2014 "),WS=a("a"),eZe=o("ReformerTokenizer"),oZe=o(" or "),HS=a("a"),rZe=o("ReformerTokenizerFast"),tZe=o(" (Reformer model)"),aZe=l(),xs=a("li"),see=a("strong"),nZe=o("rembert"),sZe=o(" \u2014 "),US=a("a"),lZe=o("RemBertTokenizer"),iZe=o(" or "),JS=a("a"),dZe=o("RemBertTokenizerFast"),cZe=o(" (RemBERT model)"),fZe=l(),ks=a("li"),lee=a("strong"),mZe=o("retribert"),gZe=o(" \u2014 "),YS=a("a"),hZe=o("RetriBertTokenizer"),pZe=o(" or "),KS=a("a"),_Ze=o("RetriBertTokenizerFast"),uZe=o(" (RetriBERT model)"),bZe=l(),Ss=a("li"),iee=a("strong"),FZe=o("roberta"),vZe=o(" \u2014 "),ZS=a("a"),TZe=o("RobertaTokenizer"),MZe=o(" or "),eR=a("a"),EZe=o("RobertaTokenizerFast"),CZe=o(" (RoBERTa model)"),wZe=l(),Rs=a("li"),dee=a("strong"),AZe=o("roformer"),yZe=o(" \u2014 "),oR=a("a"),LZe=o("RoFormerTokenizer"),xZe=o(" or "),rR=a("a"),kZe=o("RoFormerTokenizerFast"),SZe=o(" (RoFormer model)"),RZe=l(),ah=a("li"),cee=a("strong"),BZe=o("speech_to_text"),PZe=o(" \u2014 "),tR=a("a"),$Ze=o("Speech2TextTokenizer"),IZe=o(" (Speech2Text model)"),qZe=l(),nh=a("li"),fee=a("strong"),NZe=o("speech_to_text_2"),jZe=o(" \u2014 "),aR=a("a"),DZe=o("Speech2Text2Tokenizer"),GZe=o(" (Speech2Text2 model)"),OZe=l(),Bs=a("li"),mee=a("strong"),VZe=o("splinter"),XZe=o(" \u2014 "),nR=a("a"),zZe=o("SplinterTokenizer"),QZe=o(" or "),sR=a("a"),WZe=o("SplinterTokenizerFast"),HZe=o(" (Splinter model)"),UZe=l(),Ps=a("li"),gee=a("strong"),JZe=o("squeezebert"),YZe=o(" \u2014 "),lR=a("a"),KZe=o("SqueezeBertTokenizer"),ZZe=o(" or "),iR=a("a"),eeo=o("SqueezeBertTokenizerFast"),oeo=o(" (SqueezeBERT model)"),reo=l(),$s=a("li"),hee=a("strong"),teo=o("t5"),aeo=o(" \u2014 "),dR=a("a"),neo=o("T5Tokenizer"),seo=o(" or "),cR=a("a"),leo=o("T5TokenizerFast"),ieo=o(" (T5 model)"),deo=l(),sh=a("li"),pee=a("strong"),ceo=o("tapas"),feo=o(" \u2014 "),fR=a("a"),meo=o("TapasTokenizer"),geo=o(" (TAPAS model)"),heo=l(),lh=a("li"),_ee=a("strong"),peo=o("tapex"),_eo=o(" \u2014 "),mR=a("a"),ueo=o("TapexTokenizer"),beo=o(" (TAPEX model)"),Feo=l(),ih=a("li"),uee=a("strong"),veo=o("transfo-xl"),Teo=o(" \u2014 "),gR=a("a"),Meo=o("TransfoXLTokenizer"),Eeo=o(" (Transformer-XL model)"),Ceo=l(),dh=a("li"),bee=a("strong"),weo=o("wav2vec2"),Aeo=o(" \u2014 "),hR=a("a"),yeo=o("Wav2Vec2CTCTokenizer"),Leo=o(" (Wav2Vec2 model)"),xeo=l(),ch=a("li"),Fee=a("strong"),keo=o("wav2vec2_phoneme"),Seo=o(" \u2014 "),pR=a("a"),Reo=o("Wav2Vec2PhonemeCTCTokenizer"),Beo=o(" (Wav2Vec2Phoneme model)"),Peo=l(),Is=a("li"),vee=a("strong"),$eo=o("xglm"),Ieo=o(" \u2014 "),_R=a("a"),qeo=o("XGLMTokenizer"),Neo=o(" or "),uR=a("a"),jeo=o("XGLMTokenizerFast"),Deo=o(" (XGLM model)"),Geo=l(),fh=a("li"),Tee=a("strong"),Oeo=o("xlm"),Veo=o(" \u2014 "),bR=a("a"),Xeo=o("XLMTokenizer"),zeo=o(" (XLM model)"),Qeo=l(),mh=a("li"),Mee=a("strong"),Weo=o("xlm-prophetnet"),Heo=o(" \u2014 "),FR=a("a"),Ueo=o("XLMProphetNetTokenizer"),Jeo=o(" (XLMProphetNet model)"),Yeo=l(),qs=a("li"),Eee=a("strong"),Keo=o("xlm-roberta"),Zeo=o(" \u2014 "),vR=a("a"),eoo=o("XLMRobertaTokenizer"),ooo=o(" or "),TR=a("a"),roo=o("XLMRobertaTokenizerFast"),too=o(" (XLM-RoBERTa model)"),aoo=l(),Ns=a("li"),Cee=a("strong"),noo=o("xlnet"),soo=o(" \u2014 "),MR=a("a"),loo=o("XLNetTokenizer"),ioo=o(" or "),ER=a("a"),doo=o("XLNetTokenizerFast"),coo=o(" (XLNet model)"),foo=l(),wee=a("p"),moo=o("Examples:"),goo=l(),f(IC.$$.fragment),hoo=l(),gh=a("div"),f(qC.$$.fragment),poo=l(),Aee=a("p"),_oo=o("Register a new tokenizer in this mapping."),aRe=l(),Wi=a("h2"),hh=a("a"),yee=a("span"),f(NC.$$.fragment),uoo=l(),Lee=a("span"),boo=o("AutoFeatureExtractor"),nRe=l(),Ho=a("div"),f(jC.$$.fragment),Foo=l(),DC=a("p"),voo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CR=a("a"),Too=o("AutoFeatureExtractor.from_pretrained()"),Moo=o(" class method."),Eoo=l(),GC=a("p"),Coo=o("This class cannot be instantiated directly using "),xee=a("code"),woo=o("__init__()"),Aoo=o(" (throws an error)."),yoo=l(),$e=a("div"),f(OC.$$.fragment),Loo=l(),kee=a("p"),xoo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),koo=l(),Va=a("p"),Soo=o("The feature extractor class to instantiate is selected based on the "),See=a("code"),Roo=o("model_type"),Boo=o(` property of the config object
(either passed as an argument or loaded from `),Ree=a("code"),Poo=o("pretrained_model_name_or_path"),$oo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bee=a("code"),Ioo=o("pretrained_model_name_or_path"),qoo=o(":"),Noo=l(),te=a("ul"),ph=a("li"),Pee=a("strong"),joo=o("beit"),Doo=o(" \u2014 "),wR=a("a"),Goo=o("BeitFeatureExtractor"),Ooo=o(" (BEiT model)"),Voo=l(),_h=a("li"),$ee=a("strong"),Xoo=o("clip"),zoo=o(" \u2014 "),AR=a("a"),Qoo=o("CLIPFeatureExtractor"),Woo=o(" (CLIP model)"),Hoo=l(),uh=a("li"),Iee=a("strong"),Uoo=o("convnext"),Joo=o(" \u2014 "),yR=a("a"),Yoo=o("ConvNextFeatureExtractor"),Koo=o(" (ConvNext model)"),Zoo=l(),bh=a("li"),qee=a("strong"),ero=o("deit"),oro=o(" \u2014 "),LR=a("a"),rro=o("DeiTFeatureExtractor"),tro=o(" (DeiT model)"),aro=l(),Fh=a("li"),Nee=a("strong"),nro=o("detr"),sro=o(" \u2014 "),xR=a("a"),lro=o("DetrFeatureExtractor"),iro=o(" (DETR model)"),dro=l(),vh=a("li"),jee=a("strong"),cro=o("hubert"),fro=o(" \u2014 "),kR=a("a"),mro=o("Wav2Vec2FeatureExtractor"),gro=o(" (Hubert model)"),hro=l(),Th=a("li"),Dee=a("strong"),pro=o("layoutlmv2"),_ro=o(" \u2014 "),SR=a("a"),uro=o("LayoutLMv2FeatureExtractor"),bro=o(" (LayoutLMv2 model)"),Fro=l(),Mh=a("li"),Gee=a("strong"),vro=o("maskformer"),Tro=o(" \u2014 "),RR=a("a"),Mro=o("MaskFormerFeatureExtractor"),Ero=o(" (MaskFormer model)"),Cro=l(),Eh=a("li"),Oee=a("strong"),wro=o("perceiver"),Aro=o(" \u2014 "),BR=a("a"),yro=o("PerceiverFeatureExtractor"),Lro=o(" (Perceiver model)"),xro=l(),Ch=a("li"),Vee=a("strong"),kro=o("poolformer"),Sro=o(" \u2014 "),PR=a("a"),Rro=o("PoolFormerFeatureExtractor"),Bro=o(" (PoolFormer model)"),Pro=l(),wh=a("li"),Xee=a("strong"),$ro=o("resnet"),Iro=o(" \u2014 "),$R=a("a"),qro=o("ConvNextFeatureExtractor"),Nro=o(" (ResNet model)"),jro=l(),Ah=a("li"),zee=a("strong"),Dro=o("segformer"),Gro=o(" \u2014 "),IR=a("a"),Oro=o("SegformerFeatureExtractor"),Vro=o(" (SegFormer model)"),Xro=l(),yh=a("li"),Qee=a("strong"),zro=o("speech_to_text"),Qro=o(" \u2014 "),qR=a("a"),Wro=o("Speech2TextFeatureExtractor"),Hro=o(" (Speech2Text model)"),Uro=l(),Lh=a("li"),Wee=a("strong"),Jro=o("swin"),Yro=o(" \u2014 "),NR=a("a"),Kro=o("ViTFeatureExtractor"),Zro=o(" (Swin model)"),eto=l(),xh=a("li"),Hee=a("strong"),oto=o("van"),rto=o(" \u2014 "),jR=a("a"),tto=o("ConvNextFeatureExtractor"),ato=o(" (VAN model)"),nto=l(),kh=a("li"),Uee=a("strong"),sto=o("vit"),lto=o(" \u2014 "),DR=a("a"),ito=o("ViTFeatureExtractor"),dto=o(" (ViT model)"),cto=l(),Sh=a("li"),Jee=a("strong"),fto=o("vit_mae"),mto=o(" \u2014 "),GR=a("a"),gto=o("ViTFeatureExtractor"),hto=o(" (ViTMAE model)"),pto=l(),Rh=a("li"),Yee=a("strong"),_to=o("wav2vec2"),uto=o(" \u2014 "),OR=a("a"),bto=o("Wav2Vec2FeatureExtractor"),Fto=o(" (Wav2Vec2 model)"),vto=l(),f(Bh.$$.fragment),Tto=l(),Kee=a("p"),Mto=o("Examples:"),Eto=l(),f(VC.$$.fragment),Cto=l(),Ph=a("div"),f(XC.$$.fragment),wto=l(),Zee=a("p"),Ato=o("Register a new feature extractor for this class."),sRe=l(),Hi=a("h2"),$h=a("a"),eoe=a("span"),f(zC.$$.fragment),yto=l(),ooe=a("span"),Lto=o("AutoProcessor"),lRe=l(),Uo=a("div"),f(QC.$$.fragment),xto=l(),WC=a("p"),kto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VR=a("a"),Sto=o("AutoProcessor.from_pretrained()"),Rto=o(" class method."),Bto=l(),HC=a("p"),Pto=o("This class cannot be instantiated directly using "),roe=a("code"),$to=o("__init__()"),Ito=o(" (throws an error)."),qto=l(),Ie=a("div"),f(UC.$$.fragment),Nto=l(),toe=a("p"),jto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Dto=l(),Ui=a("p"),Gto=o("The processor class to instantiate is selected based on the "),aoe=a("code"),Oto=o("model_type"),Vto=o(` property of the config object (either
passed as an argument or loaded from `),noe=a("code"),Xto=o("pretrained_model_name_or_path"),zto=o(" if possible):"),Qto=l(),ke=a("ul"),Ih=a("li"),soe=a("strong"),Wto=o("clip"),Hto=o(" \u2014 "),XR=a("a"),Uto=o("CLIPProcessor"),Jto=o(" (CLIP model)"),Yto=l(),qh=a("li"),loe=a("strong"),Kto=o("layoutlmv2"),Zto=o(" \u2014 "),zR=a("a"),eao=o("LayoutLMv2Processor"),oao=o(" (LayoutLMv2 model)"),rao=l(),Nh=a("li"),ioe=a("strong"),tao=o("layoutxlm"),aao=o(" \u2014 "),QR=a("a"),nao=o("LayoutXLMProcessor"),sao=o(" (LayoutXLM model)"),lao=l(),jh=a("li"),doe=a("strong"),iao=o("speech_to_text"),dao=o(" \u2014 "),WR=a("a"),cao=o("Speech2TextProcessor"),fao=o(" (Speech2Text model)"),mao=l(),Dh=a("li"),coe=a("strong"),gao=o("speech_to_text_2"),hao=o(" \u2014 "),HR=a("a"),pao=o("Speech2Text2Processor"),_ao=o(" (Speech2Text2 model)"),uao=l(),Gh=a("li"),foe=a("strong"),bao=o("trocr"),Fao=o(" \u2014 "),UR=a("a"),vao=o("TrOCRProcessor"),Tao=o(" (TrOCR model)"),Mao=l(),Oh=a("li"),moe=a("strong"),Eao=o("vision-text-dual-encoder"),Cao=o(" \u2014 "),JR=a("a"),wao=o("VisionTextDualEncoderProcessor"),Aao=o(" (VisionTextDualEncoder model)"),yao=l(),Vh=a("li"),goe=a("strong"),Lao=o("wav2vec2"),xao=o(" \u2014 "),YR=a("a"),kao=o("Wav2Vec2Processor"),Sao=o(" (Wav2Vec2 model)"),Rao=l(),f(Xh.$$.fragment),Bao=l(),hoe=a("p"),Pao=o("Examples:"),$ao=l(),f(JC.$$.fragment),Iao=l(),zh=a("div"),f(YC.$$.fragment),qao=l(),poe=a("p"),Nao=o("Register a new processor for this class."),iRe=l(),Ji=a("h2"),Qh=a("a"),_oe=a("span"),f(KC.$$.fragment),jao=l(),uoe=a("span"),Dao=o("AutoModel"),dRe=l(),Jo=a("div"),f(ZC.$$.fragment),Gao=l(),Yi=a("p"),Oao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KR=a("a"),Vao=o("from_pretrained()"),Xao=o(" class method or the "),ZR=a("a"),zao=o("from_config()"),Qao=o(` class
method.`),Wao=l(),e5=a("p"),Hao=o("This class cannot be instantiated directly using "),boe=a("code"),Uao=o("__init__()"),Jao=o(" (throws an error)."),Yao=l(),Xr=a("div"),f(o5.$$.fragment),Kao=l(),Foe=a("p"),Zao=o("Instantiates one of the base model classes of the library from a configuration."),eno=l(),Ki=a("p"),ono=o(`Note:
Loading a model from its configuration file does `),voe=a("strong"),rno=o("not"),tno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eB=a("a"),ano=o("from_pretrained()"),nno=o(" to load the model weights."),sno=l(),Toe=a("p"),lno=o("Examples:"),ino=l(),f(r5.$$.fragment),dno=l(),qe=a("div"),f(t5.$$.fragment),cno=l(),Moe=a("p"),fno=o("Instantiate one of the base model classes of the library from a pretrained model."),mno=l(),Xa=a("p"),gno=o("The model class to instantiate is selected based on the "),Eoe=a("code"),hno=o("model_type"),pno=o(` property of the config object (either
passed as an argument or loaded from `),Coe=a("code"),_no=o("pretrained_model_name_or_path"),uno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=a("code"),bno=o("pretrained_model_name_or_path"),Fno=o(":"),vno=l(),T=a("ul"),Wh=a("li"),Aoe=a("strong"),Tno=o("albert"),Mno=o(" \u2014 "),oB=a("a"),Eno=o("AlbertModel"),Cno=o(" (ALBERT model)"),wno=l(),Hh=a("li"),yoe=a("strong"),Ano=o("bart"),yno=o(" \u2014 "),rB=a("a"),Lno=o("BartModel"),xno=o(" (BART model)"),kno=l(),Uh=a("li"),Loe=a("strong"),Sno=o("beit"),Rno=o(" \u2014 "),tB=a("a"),Bno=o("BeitModel"),Pno=o(" (BEiT model)"),$no=l(),Jh=a("li"),xoe=a("strong"),Ino=o("bert"),qno=o(" \u2014 "),aB=a("a"),Nno=o("BertModel"),jno=o(" (BERT model)"),Dno=l(),Yh=a("li"),koe=a("strong"),Gno=o("bert-generation"),Ono=o(" \u2014 "),nB=a("a"),Vno=o("BertGenerationEncoder"),Xno=o(" (Bert Generation model)"),zno=l(),Kh=a("li"),Soe=a("strong"),Qno=o("big_bird"),Wno=o(" \u2014 "),sB=a("a"),Hno=o("BigBirdModel"),Uno=o(" (BigBird model)"),Jno=l(),Zh=a("li"),Roe=a("strong"),Yno=o("bigbird_pegasus"),Kno=o(" \u2014 "),lB=a("a"),Zno=o("BigBirdPegasusModel"),eso=o(" (BigBirdPegasus model)"),oso=l(),ep=a("li"),Boe=a("strong"),rso=o("blenderbot"),tso=o(" \u2014 "),iB=a("a"),aso=o("BlenderbotModel"),nso=o(" (Blenderbot model)"),sso=l(),op=a("li"),Poe=a("strong"),lso=o("blenderbot-small"),iso=o(" \u2014 "),dB=a("a"),dso=o("BlenderbotSmallModel"),cso=o(" (BlenderbotSmall model)"),fso=l(),rp=a("li"),$oe=a("strong"),mso=o("camembert"),gso=o(" \u2014 "),cB=a("a"),hso=o("CamembertModel"),pso=o(" (CamemBERT model)"),_so=l(),tp=a("li"),Ioe=a("strong"),uso=o("canine"),bso=o(" \u2014 "),fB=a("a"),Fso=o("CanineModel"),vso=o(" (Canine model)"),Tso=l(),ap=a("li"),qoe=a("strong"),Mso=o("clip"),Eso=o(" \u2014 "),mB=a("a"),Cso=o("CLIPModel"),wso=o(" (CLIP model)"),Aso=l(),np=a("li"),Noe=a("strong"),yso=o("convbert"),Lso=o(" \u2014 "),gB=a("a"),xso=o("ConvBertModel"),kso=o(" (ConvBERT model)"),Sso=l(),sp=a("li"),joe=a("strong"),Rso=o("convnext"),Bso=o(" \u2014 "),hB=a("a"),Pso=o("ConvNextModel"),$so=o(" (ConvNext model)"),Iso=l(),lp=a("li"),Doe=a("strong"),qso=o("ctrl"),Nso=o(" \u2014 "),pB=a("a"),jso=o("CTRLModel"),Dso=o(" (CTRL model)"),Gso=l(),ip=a("li"),Goe=a("strong"),Oso=o("data2vec-audio"),Vso=o(" \u2014 "),_B=a("a"),Xso=o("Data2VecAudioModel"),zso=o(" (Data2VecAudio model)"),Qso=l(),dp=a("li"),Ooe=a("strong"),Wso=o("data2vec-text"),Hso=o(" \u2014 "),uB=a("a"),Uso=o("Data2VecTextModel"),Jso=o(" (Data2VecText model)"),Yso=l(),cp=a("li"),Voe=a("strong"),Kso=o("deberta"),Zso=o(" \u2014 "),bB=a("a"),elo=o("DebertaModel"),olo=o(" (DeBERTa model)"),rlo=l(),fp=a("li"),Xoe=a("strong"),tlo=o("deberta-v2"),alo=o(" \u2014 "),FB=a("a"),nlo=o("DebertaV2Model"),slo=o(" (DeBERTa-v2 model)"),llo=l(),mp=a("li"),zoe=a("strong"),ilo=o("decision_transformer"),dlo=o(" \u2014 "),vB=a("a"),clo=o("DecisionTransformerModel"),flo=o(" (Decision Transformer model)"),mlo=l(),gp=a("li"),Qoe=a("strong"),glo=o("deit"),hlo=o(" \u2014 "),TB=a("a"),plo=o("DeiTModel"),_lo=o(" (DeiT model)"),ulo=l(),hp=a("li"),Woe=a("strong"),blo=o("detr"),Flo=o(" \u2014 "),MB=a("a"),vlo=o("DetrModel"),Tlo=o(" (DETR model)"),Mlo=l(),pp=a("li"),Hoe=a("strong"),Elo=o("distilbert"),Clo=o(" \u2014 "),EB=a("a"),wlo=o("DistilBertModel"),Alo=o(" (DistilBERT model)"),ylo=l(),_p=a("li"),Uoe=a("strong"),Llo=o("dpr"),xlo=o(" \u2014 "),CB=a("a"),klo=o("DPRQuestionEncoder"),Slo=o(" (DPR model)"),Rlo=l(),up=a("li"),Joe=a("strong"),Blo=o("dpt"),Plo=o(" \u2014 "),wB=a("a"),$lo=o("DPTModel"),Ilo=o(" (DPT model)"),qlo=l(),bp=a("li"),Yoe=a("strong"),Nlo=o("electra"),jlo=o(" \u2014 "),AB=a("a"),Dlo=o("ElectraModel"),Glo=o(" (ELECTRA model)"),Olo=l(),Fp=a("li"),Koe=a("strong"),Vlo=o("flaubert"),Xlo=o(" \u2014 "),yB=a("a"),zlo=o("FlaubertModel"),Qlo=o(" (FlauBERT model)"),Wlo=l(),vp=a("li"),Zoe=a("strong"),Hlo=o("fnet"),Ulo=o(" \u2014 "),LB=a("a"),Jlo=o("FNetModel"),Ylo=o(" (FNet model)"),Klo=l(),Tp=a("li"),ere=a("strong"),Zlo=o("fsmt"),eio=o(" \u2014 "),xB=a("a"),oio=o("FSMTModel"),rio=o(" (FairSeq Machine-Translation model)"),tio=l(),js=a("li"),ore=a("strong"),aio=o("funnel"),nio=o(" \u2014 "),kB=a("a"),sio=o("FunnelModel"),lio=o(" or "),SB=a("a"),iio=o("FunnelBaseModel"),dio=o(" (Funnel Transformer model)"),cio=l(),Mp=a("li"),rre=a("strong"),fio=o("glpn"),mio=o(" \u2014 "),RB=a("a"),gio=o("GLPNModel"),hio=o(" (GLPN model)"),pio=l(),Ep=a("li"),tre=a("strong"),_io=o("gpt2"),uio=o(" \u2014 "),BB=a("a"),bio=o("GPT2Model"),Fio=o(" (OpenAI GPT-2 model)"),vio=l(),Cp=a("li"),are=a("strong"),Tio=o("gpt_neo"),Mio=o(" \u2014 "),PB=a("a"),Eio=o("GPTNeoModel"),Cio=o(" (GPT Neo model)"),wio=l(),wp=a("li"),nre=a("strong"),Aio=o("gptj"),yio=o(" \u2014 "),$B=a("a"),Lio=o("GPTJModel"),xio=o(" (GPT-J model)"),kio=l(),Ap=a("li"),sre=a("strong"),Sio=o("hubert"),Rio=o(" \u2014 "),IB=a("a"),Bio=o("HubertModel"),Pio=o(" (Hubert model)"),$io=l(),yp=a("li"),lre=a("strong"),Iio=o("ibert"),qio=o(" \u2014 "),qB=a("a"),Nio=o("IBertModel"),jio=o(" (I-BERT model)"),Dio=l(),Lp=a("li"),ire=a("strong"),Gio=o("imagegpt"),Oio=o(" \u2014 "),NB=a("a"),Vio=o("ImageGPTModel"),Xio=o(" (ImageGPT model)"),zio=l(),xp=a("li"),dre=a("strong"),Qio=o("layoutlm"),Wio=o(" \u2014 "),jB=a("a"),Hio=o("LayoutLMModel"),Uio=o(" (LayoutLM model)"),Jio=l(),kp=a("li"),cre=a("strong"),Yio=o("layoutlmv2"),Kio=o(" \u2014 "),DB=a("a"),Zio=o("LayoutLMv2Model"),edo=o(" (LayoutLMv2 model)"),odo=l(),Sp=a("li"),fre=a("strong"),rdo=o("led"),tdo=o(" \u2014 "),GB=a("a"),ado=o("LEDModel"),ndo=o(" (LED model)"),sdo=l(),Rp=a("li"),mre=a("strong"),ldo=o("longformer"),ido=o(" \u2014 "),OB=a("a"),ddo=o("LongformerModel"),cdo=o(" (Longformer model)"),fdo=l(),Bp=a("li"),gre=a("strong"),mdo=o("luke"),gdo=o(" \u2014 "),VB=a("a"),hdo=o("LukeModel"),pdo=o(" (LUKE model)"),_do=l(),Pp=a("li"),hre=a("strong"),udo=o("lxmert"),bdo=o(" \u2014 "),XB=a("a"),Fdo=o("LxmertModel"),vdo=o(" (LXMERT model)"),Tdo=l(),$p=a("li"),pre=a("strong"),Mdo=o("m2m_100"),Edo=o(" \u2014 "),zB=a("a"),Cdo=o("M2M100Model"),wdo=o(" (M2M100 model)"),Ado=l(),Ip=a("li"),_re=a("strong"),ydo=o("marian"),Ldo=o(" \u2014 "),QB=a("a"),xdo=o("MarianModel"),kdo=o(" (Marian model)"),Sdo=l(),qp=a("li"),ure=a("strong"),Rdo=o("maskformer"),Bdo=o(" \u2014 "),WB=a("a"),Pdo=o("MaskFormerModel"),$do=o(" (MaskFormer model)"),Ido=l(),Np=a("li"),bre=a("strong"),qdo=o("mbart"),Ndo=o(" \u2014 "),HB=a("a"),jdo=o("MBartModel"),Ddo=o(" (mBART model)"),Gdo=l(),jp=a("li"),Fre=a("strong"),Odo=o("megatron-bert"),Vdo=o(" \u2014 "),UB=a("a"),Xdo=o("MegatronBertModel"),zdo=o(" (MegatronBert model)"),Qdo=l(),Dp=a("li"),vre=a("strong"),Wdo=o("mobilebert"),Hdo=o(" \u2014 "),JB=a("a"),Udo=o("MobileBertModel"),Jdo=o(" (MobileBERT model)"),Ydo=l(),Gp=a("li"),Tre=a("strong"),Kdo=o("mpnet"),Zdo=o(" \u2014 "),YB=a("a"),eco=o("MPNetModel"),oco=o(" (MPNet model)"),rco=l(),Op=a("li"),Mre=a("strong"),tco=o("mt5"),aco=o(" \u2014 "),KB=a("a"),nco=o("MT5Model"),sco=o(" (mT5 model)"),lco=l(),Vp=a("li"),Ere=a("strong"),ico=o("nystromformer"),dco=o(" \u2014 "),ZB=a("a"),cco=o("NystromformerModel"),fco=o(" (Nystromformer model)"),mco=l(),Xp=a("li"),Cre=a("strong"),gco=o("openai-gpt"),hco=o(" \u2014 "),eP=a("a"),pco=o("OpenAIGPTModel"),_co=o(" (OpenAI GPT model)"),uco=l(),zp=a("li"),wre=a("strong"),bco=o("pegasus"),Fco=o(" \u2014 "),oP=a("a"),vco=o("PegasusModel"),Tco=o(" (Pegasus model)"),Mco=l(),Qp=a("li"),Are=a("strong"),Eco=o("perceiver"),Cco=o(" \u2014 "),rP=a("a"),wco=o("PerceiverModel"),Aco=o(" (Perceiver model)"),yco=l(),Wp=a("li"),yre=a("strong"),Lco=o("plbart"),xco=o(" \u2014 "),tP=a("a"),kco=o("PLBartModel"),Sco=o(" (PLBart model)"),Rco=l(),Hp=a("li"),Lre=a("strong"),Bco=o("poolformer"),Pco=o(" \u2014 "),aP=a("a"),$co=o("PoolFormerModel"),Ico=o(" (PoolFormer model)"),qco=l(),Up=a("li"),xre=a("strong"),Nco=o("prophetnet"),jco=o(" \u2014 "),nP=a("a"),Dco=o("ProphetNetModel"),Gco=o(" (ProphetNet model)"),Oco=l(),Jp=a("li"),kre=a("strong"),Vco=o("qdqbert"),Xco=o(" \u2014 "),sP=a("a"),zco=o("QDQBertModel"),Qco=o(" (QDQBert model)"),Wco=l(),Yp=a("li"),Sre=a("strong"),Hco=o("reformer"),Uco=o(" \u2014 "),lP=a("a"),Jco=o("ReformerModel"),Yco=o(" (Reformer model)"),Kco=l(),Kp=a("li"),Rre=a("strong"),Zco=o("rembert"),efo=o(" \u2014 "),iP=a("a"),ofo=o("RemBertModel"),rfo=o(" (RemBERT model)"),tfo=l(),Zp=a("li"),Bre=a("strong"),afo=o("resnet"),nfo=o(" \u2014 "),dP=a("a"),sfo=o("ResNetModel"),lfo=o(" (ResNet model)"),ifo=l(),e_=a("li"),Pre=a("strong"),dfo=o("retribert"),cfo=o(" \u2014 "),cP=a("a"),ffo=o("RetriBertModel"),mfo=o(" (RetriBERT model)"),gfo=l(),o_=a("li"),$re=a("strong"),hfo=o("roberta"),pfo=o(" \u2014 "),fP=a("a"),_fo=o("RobertaModel"),ufo=o(" (RoBERTa model)"),bfo=l(),r_=a("li"),Ire=a("strong"),Ffo=o("roformer"),vfo=o(" \u2014 "),mP=a("a"),Tfo=o("RoFormerModel"),Mfo=o(" (RoFormer model)"),Efo=l(),t_=a("li"),qre=a("strong"),Cfo=o("segformer"),wfo=o(" \u2014 "),gP=a("a"),Afo=o("SegformerModel"),yfo=o(" (SegFormer model)"),Lfo=l(),a_=a("li"),Nre=a("strong"),xfo=o("sew"),kfo=o(" \u2014 "),hP=a("a"),Sfo=o("SEWModel"),Rfo=o(" (SEW model)"),Bfo=l(),n_=a("li"),jre=a("strong"),Pfo=o("sew-d"),$fo=o(" \u2014 "),pP=a("a"),Ifo=o("SEWDModel"),qfo=o(" (SEW-D model)"),Nfo=l(),s_=a("li"),Dre=a("strong"),jfo=o("speech_to_text"),Dfo=o(" \u2014 "),_P=a("a"),Gfo=o("Speech2TextModel"),Ofo=o(" (Speech2Text model)"),Vfo=l(),l_=a("li"),Gre=a("strong"),Xfo=o("splinter"),zfo=o(" \u2014 "),uP=a("a"),Qfo=o("SplinterModel"),Wfo=o(" (Splinter model)"),Hfo=l(),i_=a("li"),Ore=a("strong"),Ufo=o("squeezebert"),Jfo=o(" \u2014 "),bP=a("a"),Yfo=o("SqueezeBertModel"),Kfo=o(" (SqueezeBERT model)"),Zfo=l(),d_=a("li"),Vre=a("strong"),emo=o("swin"),omo=o(" \u2014 "),FP=a("a"),rmo=o("SwinModel"),tmo=o(" (Swin model)"),amo=l(),c_=a("li"),Xre=a("strong"),nmo=o("t5"),smo=o(" \u2014 "),vP=a("a"),lmo=o("T5Model"),imo=o(" (T5 model)"),dmo=l(),f_=a("li"),zre=a("strong"),cmo=o("tapas"),fmo=o(" \u2014 "),TP=a("a"),mmo=o("TapasModel"),gmo=o(" (TAPAS model)"),hmo=l(),m_=a("li"),Qre=a("strong"),pmo=o("transfo-xl"),_mo=o(" \u2014 "),MP=a("a"),umo=o("TransfoXLModel"),bmo=o(" (Transformer-XL model)"),Fmo=l(),g_=a("li"),Wre=a("strong"),vmo=o("unispeech"),Tmo=o(" \u2014 "),EP=a("a"),Mmo=o("UniSpeechModel"),Emo=o(" (UniSpeech model)"),Cmo=l(),h_=a("li"),Hre=a("strong"),wmo=o("unispeech-sat"),Amo=o(" \u2014 "),CP=a("a"),ymo=o("UniSpeechSatModel"),Lmo=o(" (UniSpeechSat model)"),xmo=l(),p_=a("li"),Ure=a("strong"),kmo=o("van"),Smo=o(" \u2014 "),wP=a("a"),Rmo=o("VanModel"),Bmo=o(" (VAN model)"),Pmo=l(),__=a("li"),Jre=a("strong"),$mo=o("vilt"),Imo=o(" \u2014 "),AP=a("a"),qmo=o("ViltModel"),Nmo=o(" (ViLT model)"),jmo=l(),u_=a("li"),Yre=a("strong"),Dmo=o("vision-text-dual-encoder"),Gmo=o(" \u2014 "),yP=a("a"),Omo=o("VisionTextDualEncoderModel"),Vmo=o(" (VisionTextDualEncoder model)"),Xmo=l(),b_=a("li"),Kre=a("strong"),zmo=o("visual_bert"),Qmo=o(" \u2014 "),LP=a("a"),Wmo=o("VisualBertModel"),Hmo=o(" (VisualBert model)"),Umo=l(),F_=a("li"),Zre=a("strong"),Jmo=o("vit"),Ymo=o(" \u2014 "),xP=a("a"),Kmo=o("ViTModel"),Zmo=o(" (ViT model)"),ego=l(),v_=a("li"),ete=a("strong"),ogo=o("vit_mae"),rgo=o(" \u2014 "),kP=a("a"),tgo=o("ViTMAEModel"),ago=o(" (ViTMAE model)"),ngo=l(),T_=a("li"),ote=a("strong"),sgo=o("wav2vec2"),lgo=o(" \u2014 "),SP=a("a"),igo=o("Wav2Vec2Model"),dgo=o(" (Wav2Vec2 model)"),cgo=l(),M_=a("li"),rte=a("strong"),fgo=o("wavlm"),mgo=o(" \u2014 "),RP=a("a"),ggo=o("WavLMModel"),hgo=o(" (WavLM model)"),pgo=l(),E_=a("li"),tte=a("strong"),_go=o("xglm"),ugo=o(" \u2014 "),BP=a("a"),bgo=o("XGLMModel"),Fgo=o(" (XGLM model)"),vgo=l(),C_=a("li"),ate=a("strong"),Tgo=o("xlm"),Mgo=o(" \u2014 "),PP=a("a"),Ego=o("XLMModel"),Cgo=o(" (XLM model)"),wgo=l(),w_=a("li"),nte=a("strong"),Ago=o("xlm-prophetnet"),ygo=o(" \u2014 "),$P=a("a"),Lgo=o("XLMProphetNetModel"),xgo=o(" (XLMProphetNet model)"),kgo=l(),A_=a("li"),ste=a("strong"),Sgo=o("xlm-roberta"),Rgo=o(" \u2014 "),IP=a("a"),Bgo=o("XLMRobertaModel"),Pgo=o(" (XLM-RoBERTa model)"),$go=l(),y_=a("li"),lte=a("strong"),Igo=o("xlm-roberta-xl"),qgo=o(" \u2014 "),qP=a("a"),Ngo=o("XLMRobertaXLModel"),jgo=o(" (XLM-RoBERTa-XL model)"),Dgo=l(),L_=a("li"),ite=a("strong"),Ggo=o("xlnet"),Ogo=o(" \u2014 "),NP=a("a"),Vgo=o("XLNetModel"),Xgo=o(" (XLNet model)"),zgo=l(),x_=a("li"),dte=a("strong"),Qgo=o("yoso"),Wgo=o(" \u2014 "),jP=a("a"),Hgo=o("YosoModel"),Ugo=o(" (YOSO model)"),Jgo=l(),k_=a("p"),Ygo=o("The model is set in evaluation mode by default using "),cte=a("code"),Kgo=o("model.eval()"),Zgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=a("code"),eho=o("model.train()"),oho=l(),mte=a("p"),rho=o("Examples:"),tho=l(),f(a5.$$.fragment),cRe=l(),Zi=a("h2"),S_=a("a"),gte=a("span"),f(n5.$$.fragment),aho=l(),hte=a("span"),nho=o("AutoModelForPreTraining"),fRe=l(),Yo=a("div"),f(s5.$$.fragment),sho=l(),ed=a("p"),lho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DP=a("a"),iho=o("from_pretrained()"),dho=o(" class method or the "),GP=a("a"),cho=o("from_config()"),fho=o(` class
method.`),mho=l(),l5=a("p"),gho=o("This class cannot be instantiated directly using "),pte=a("code"),hho=o("__init__()"),pho=o(" (throws an error)."),_ho=l(),zr=a("div"),f(i5.$$.fragment),uho=l(),_te=a("p"),bho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Fho=l(),od=a("p"),vho=o(`Note:
Loading a model from its configuration file does `),ute=a("strong"),Tho=o("not"),Mho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OP=a("a"),Eho=o("from_pretrained()"),Cho=o(" to load the model weights."),who=l(),bte=a("p"),Aho=o("Examples:"),yho=l(),f(d5.$$.fragment),Lho=l(),Ne=a("div"),f(c5.$$.fragment),xho=l(),Fte=a("p"),kho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Sho=l(),za=a("p"),Rho=o("The model class to instantiate is selected based on the "),vte=a("code"),Bho=o("model_type"),Pho=o(` property of the config object (either
passed as an argument or loaded from `),Tte=a("code"),$ho=o("pretrained_model_name_or_path"),Iho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=a("code"),qho=o("pretrained_model_name_or_path"),Nho=o(":"),jho=l(),S=a("ul"),R_=a("li"),Ete=a("strong"),Dho=o("albert"),Gho=o(" \u2014 "),VP=a("a"),Oho=o("AlbertForPreTraining"),Vho=o(" (ALBERT model)"),Xho=l(),B_=a("li"),Cte=a("strong"),zho=o("bart"),Qho=o(" \u2014 "),XP=a("a"),Who=o("BartForConditionalGeneration"),Hho=o(" (BART model)"),Uho=l(),P_=a("li"),wte=a("strong"),Jho=o("bert"),Yho=o(" \u2014 "),zP=a("a"),Kho=o("BertForPreTraining"),Zho=o(" (BERT model)"),epo=l(),$_=a("li"),Ate=a("strong"),opo=o("big_bird"),rpo=o(" \u2014 "),QP=a("a"),tpo=o("BigBirdForPreTraining"),apo=o(" (BigBird model)"),npo=l(),I_=a("li"),yte=a("strong"),spo=o("camembert"),lpo=o(" \u2014 "),WP=a("a"),ipo=o("CamembertForMaskedLM"),dpo=o(" (CamemBERT model)"),cpo=l(),q_=a("li"),Lte=a("strong"),fpo=o("ctrl"),mpo=o(" \u2014 "),HP=a("a"),gpo=o("CTRLLMHeadModel"),hpo=o(" (CTRL model)"),ppo=l(),N_=a("li"),xte=a("strong"),_po=o("data2vec-text"),upo=o(" \u2014 "),UP=a("a"),bpo=o("Data2VecTextForMaskedLM"),Fpo=o(" (Data2VecText model)"),vpo=l(),j_=a("li"),kte=a("strong"),Tpo=o("deberta"),Mpo=o(" \u2014 "),JP=a("a"),Epo=o("DebertaForMaskedLM"),Cpo=o(" (DeBERTa model)"),wpo=l(),D_=a("li"),Ste=a("strong"),Apo=o("deberta-v2"),ypo=o(" \u2014 "),YP=a("a"),Lpo=o("DebertaV2ForMaskedLM"),xpo=o(" (DeBERTa-v2 model)"),kpo=l(),G_=a("li"),Rte=a("strong"),Spo=o("distilbert"),Rpo=o(" \u2014 "),KP=a("a"),Bpo=o("DistilBertForMaskedLM"),Ppo=o(" (DistilBERT model)"),$po=l(),O_=a("li"),Bte=a("strong"),Ipo=o("electra"),qpo=o(" \u2014 "),ZP=a("a"),Npo=o("ElectraForPreTraining"),jpo=o(" (ELECTRA model)"),Dpo=l(),V_=a("li"),Pte=a("strong"),Gpo=o("flaubert"),Opo=o(" \u2014 "),e$=a("a"),Vpo=o("FlaubertWithLMHeadModel"),Xpo=o(" (FlauBERT model)"),zpo=l(),X_=a("li"),$te=a("strong"),Qpo=o("fnet"),Wpo=o(" \u2014 "),o$=a("a"),Hpo=o("FNetForPreTraining"),Upo=o(" (FNet model)"),Jpo=l(),z_=a("li"),Ite=a("strong"),Ypo=o("fsmt"),Kpo=o(" \u2014 "),r$=a("a"),Zpo=o("FSMTForConditionalGeneration"),e_o=o(" (FairSeq Machine-Translation model)"),o_o=l(),Q_=a("li"),qte=a("strong"),r_o=o("funnel"),t_o=o(" \u2014 "),t$=a("a"),a_o=o("FunnelForPreTraining"),n_o=o(" (Funnel Transformer model)"),s_o=l(),W_=a("li"),Nte=a("strong"),l_o=o("gpt2"),i_o=o(" \u2014 "),a$=a("a"),d_o=o("GPT2LMHeadModel"),c_o=o(" (OpenAI GPT-2 model)"),f_o=l(),H_=a("li"),jte=a("strong"),m_o=o("ibert"),g_o=o(" \u2014 "),n$=a("a"),h_o=o("IBertForMaskedLM"),p_o=o(" (I-BERT model)"),__o=l(),U_=a("li"),Dte=a("strong"),u_o=o("layoutlm"),b_o=o(" \u2014 "),s$=a("a"),F_o=o("LayoutLMForMaskedLM"),v_o=o(" (LayoutLM model)"),T_o=l(),J_=a("li"),Gte=a("strong"),M_o=o("longformer"),E_o=o(" \u2014 "),l$=a("a"),C_o=o("LongformerForMaskedLM"),w_o=o(" (Longformer model)"),A_o=l(),Y_=a("li"),Ote=a("strong"),y_o=o("lxmert"),L_o=o(" \u2014 "),i$=a("a"),x_o=o("LxmertForPreTraining"),k_o=o(" (LXMERT model)"),S_o=l(),K_=a("li"),Vte=a("strong"),R_o=o("megatron-bert"),B_o=o(" \u2014 "),d$=a("a"),P_o=o("MegatronBertForPreTraining"),$_o=o(" (MegatronBert model)"),I_o=l(),Z_=a("li"),Xte=a("strong"),q_o=o("mobilebert"),N_o=o(" \u2014 "),c$=a("a"),j_o=o("MobileBertForPreTraining"),D_o=o(" (MobileBERT model)"),G_o=l(),eu=a("li"),zte=a("strong"),O_o=o("mpnet"),V_o=o(" \u2014 "),f$=a("a"),X_o=o("MPNetForMaskedLM"),z_o=o(" (MPNet model)"),Q_o=l(),ou=a("li"),Qte=a("strong"),W_o=o("openai-gpt"),H_o=o(" \u2014 "),m$=a("a"),U_o=o("OpenAIGPTLMHeadModel"),J_o=o(" (OpenAI GPT model)"),Y_o=l(),ru=a("li"),Wte=a("strong"),K_o=o("retribert"),Z_o=o(" \u2014 "),g$=a("a"),euo=o("RetriBertModel"),ouo=o(" (RetriBERT model)"),ruo=l(),tu=a("li"),Hte=a("strong"),tuo=o("roberta"),auo=o(" \u2014 "),h$=a("a"),nuo=o("RobertaForMaskedLM"),suo=o(" (RoBERTa model)"),luo=l(),au=a("li"),Ute=a("strong"),iuo=o("squeezebert"),duo=o(" \u2014 "),p$=a("a"),cuo=o("SqueezeBertForMaskedLM"),fuo=o(" (SqueezeBERT model)"),muo=l(),nu=a("li"),Jte=a("strong"),guo=o("t5"),huo=o(" \u2014 "),_$=a("a"),puo=o("T5ForConditionalGeneration"),_uo=o(" (T5 model)"),uuo=l(),su=a("li"),Yte=a("strong"),buo=o("tapas"),Fuo=o(" \u2014 "),u$=a("a"),vuo=o("TapasForMaskedLM"),Tuo=o(" (TAPAS model)"),Muo=l(),lu=a("li"),Kte=a("strong"),Euo=o("transfo-xl"),Cuo=o(" \u2014 "),b$=a("a"),wuo=o("TransfoXLLMHeadModel"),Auo=o(" (Transformer-XL model)"),yuo=l(),iu=a("li"),Zte=a("strong"),Luo=o("unispeech"),xuo=o(" \u2014 "),F$=a("a"),kuo=o("UniSpeechForPreTraining"),Suo=o(" (UniSpeech model)"),Ruo=l(),du=a("li"),eae=a("strong"),Buo=o("unispeech-sat"),Puo=o(" \u2014 "),v$=a("a"),$uo=o("UniSpeechSatForPreTraining"),Iuo=o(" (UniSpeechSat model)"),quo=l(),cu=a("li"),oae=a("strong"),Nuo=o("visual_bert"),juo=o(" \u2014 "),T$=a("a"),Duo=o("VisualBertForPreTraining"),Guo=o(" (VisualBert model)"),Ouo=l(),fu=a("li"),rae=a("strong"),Vuo=o("vit_mae"),Xuo=o(" \u2014 "),M$=a("a"),zuo=o("ViTMAEForPreTraining"),Quo=o(" (ViTMAE model)"),Wuo=l(),mu=a("li"),tae=a("strong"),Huo=o("wav2vec2"),Uuo=o(" \u2014 "),E$=a("a"),Juo=o("Wav2Vec2ForPreTraining"),Yuo=o(" (Wav2Vec2 model)"),Kuo=l(),gu=a("li"),aae=a("strong"),Zuo=o("xlm"),e1o=o(" \u2014 "),C$=a("a"),o1o=o("XLMWithLMHeadModel"),r1o=o(" (XLM model)"),t1o=l(),hu=a("li"),nae=a("strong"),a1o=o("xlm-roberta"),n1o=o(" \u2014 "),w$=a("a"),s1o=o("XLMRobertaForMaskedLM"),l1o=o(" (XLM-RoBERTa model)"),i1o=l(),pu=a("li"),sae=a("strong"),d1o=o("xlm-roberta-xl"),c1o=o(" \u2014 "),A$=a("a"),f1o=o("XLMRobertaXLForMaskedLM"),m1o=o(" (XLM-RoBERTa-XL model)"),g1o=l(),_u=a("li"),lae=a("strong"),h1o=o("xlnet"),p1o=o(" \u2014 "),y$=a("a"),_1o=o("XLNetLMHeadModel"),u1o=o(" (XLNet model)"),b1o=l(),uu=a("p"),F1o=o("The model is set in evaluation mode by default using "),iae=a("code"),v1o=o("model.eval()"),T1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dae=a("code"),M1o=o("model.train()"),E1o=l(),cae=a("p"),C1o=o("Examples:"),w1o=l(),f(f5.$$.fragment),mRe=l(),rd=a("h2"),bu=a("a"),fae=a("span"),f(m5.$$.fragment),A1o=l(),mae=a("span"),y1o=o("AutoModelForCausalLM"),gRe=l(),Ko=a("div"),f(g5.$$.fragment),L1o=l(),td=a("p"),x1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),L$=a("a"),k1o=o("from_pretrained()"),S1o=o(" class method or the "),x$=a("a"),R1o=o("from_config()"),B1o=o(` class
method.`),P1o=l(),h5=a("p"),$1o=o("This class cannot be instantiated directly using "),gae=a("code"),I1o=o("__init__()"),q1o=o(" (throws an error)."),N1o=l(),Qr=a("div"),f(p5.$$.fragment),j1o=l(),hae=a("p"),D1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G1o=l(),ad=a("p"),O1o=o(`Note:
Loading a model from its configuration file does `),pae=a("strong"),V1o=o("not"),X1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k$=a("a"),z1o=o("from_pretrained()"),Q1o=o(" to load the model weights."),W1o=l(),_ae=a("p"),H1o=o("Examples:"),U1o=l(),f(_5.$$.fragment),J1o=l(),je=a("div"),f(u5.$$.fragment),Y1o=l(),uae=a("p"),K1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Z1o=l(),Qa=a("p"),e4o=o("The model class to instantiate is selected based on the "),bae=a("code"),o4o=o("model_type"),r4o=o(` property of the config object (either
passed as an argument or loaded from `),Fae=a("code"),t4o=o("pretrained_model_name_or_path"),a4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=a("code"),n4o=o("pretrained_model_name_or_path"),s4o=o(":"),l4o=l(),$=a("ul"),Fu=a("li"),Tae=a("strong"),i4o=o("bart"),d4o=o(" \u2014 "),S$=a("a"),c4o=o("BartForCausalLM"),f4o=o(" (BART model)"),m4o=l(),vu=a("li"),Mae=a("strong"),g4o=o("bert"),h4o=o(" \u2014 "),R$=a("a"),p4o=o("BertLMHeadModel"),_4o=o(" (BERT model)"),u4o=l(),Tu=a("li"),Eae=a("strong"),b4o=o("bert-generation"),F4o=o(" \u2014 "),B$=a("a"),v4o=o("BertGenerationDecoder"),T4o=o(" (Bert Generation model)"),M4o=l(),Mu=a("li"),Cae=a("strong"),E4o=o("big_bird"),C4o=o(" \u2014 "),P$=a("a"),w4o=o("BigBirdForCausalLM"),A4o=o(" (BigBird model)"),y4o=l(),Eu=a("li"),wae=a("strong"),L4o=o("bigbird_pegasus"),x4o=o(" \u2014 "),$$=a("a"),k4o=o("BigBirdPegasusForCausalLM"),S4o=o(" (BigBirdPegasus model)"),R4o=l(),Cu=a("li"),Aae=a("strong"),B4o=o("blenderbot"),P4o=o(" \u2014 "),I$=a("a"),$4o=o("BlenderbotForCausalLM"),I4o=o(" (Blenderbot model)"),q4o=l(),wu=a("li"),yae=a("strong"),N4o=o("blenderbot-small"),j4o=o(" \u2014 "),q$=a("a"),D4o=o("BlenderbotSmallForCausalLM"),G4o=o(" (BlenderbotSmall model)"),O4o=l(),Au=a("li"),Lae=a("strong"),V4o=o("camembert"),X4o=o(" \u2014 "),N$=a("a"),z4o=o("CamembertForCausalLM"),Q4o=o(" (CamemBERT model)"),W4o=l(),yu=a("li"),xae=a("strong"),H4o=o("ctrl"),U4o=o(" \u2014 "),j$=a("a"),J4o=o("CTRLLMHeadModel"),Y4o=o(" (CTRL model)"),K4o=l(),Lu=a("li"),kae=a("strong"),Z4o=o("data2vec-text"),ebo=o(" \u2014 "),D$=a("a"),obo=o("Data2VecTextForCausalLM"),rbo=o(" (Data2VecText model)"),tbo=l(),xu=a("li"),Sae=a("strong"),abo=o("electra"),nbo=o(" \u2014 "),G$=a("a"),sbo=o("ElectraForCausalLM"),lbo=o(" (ELECTRA model)"),ibo=l(),ku=a("li"),Rae=a("strong"),dbo=o("gpt2"),cbo=o(" \u2014 "),O$=a("a"),fbo=o("GPT2LMHeadModel"),mbo=o(" (OpenAI GPT-2 model)"),gbo=l(),Su=a("li"),Bae=a("strong"),hbo=o("gpt_neo"),pbo=o(" \u2014 "),V$=a("a"),_bo=o("GPTNeoForCausalLM"),ubo=o(" (GPT Neo model)"),bbo=l(),Ru=a("li"),Pae=a("strong"),Fbo=o("gptj"),vbo=o(" \u2014 "),X$=a("a"),Tbo=o("GPTJForCausalLM"),Mbo=o(" (GPT-J model)"),Ebo=l(),Bu=a("li"),$ae=a("strong"),Cbo=o("marian"),wbo=o(" \u2014 "),z$=a("a"),Abo=o("MarianForCausalLM"),ybo=o(" (Marian model)"),Lbo=l(),Pu=a("li"),Iae=a("strong"),xbo=o("mbart"),kbo=o(" \u2014 "),Q$=a("a"),Sbo=o("MBartForCausalLM"),Rbo=o(" (mBART model)"),Bbo=l(),$u=a("li"),qae=a("strong"),Pbo=o("megatron-bert"),$bo=o(" \u2014 "),W$=a("a"),Ibo=o("MegatronBertForCausalLM"),qbo=o(" (MegatronBert model)"),Nbo=l(),Iu=a("li"),Nae=a("strong"),jbo=o("openai-gpt"),Dbo=o(" \u2014 "),H$=a("a"),Gbo=o("OpenAIGPTLMHeadModel"),Obo=o(" (OpenAI GPT model)"),Vbo=l(),qu=a("li"),jae=a("strong"),Xbo=o("pegasus"),zbo=o(" \u2014 "),U$=a("a"),Qbo=o("PegasusForCausalLM"),Wbo=o(" (Pegasus model)"),Hbo=l(),Nu=a("li"),Dae=a("strong"),Ubo=o("plbart"),Jbo=o(" \u2014 "),J$=a("a"),Ybo=o("PLBartForCausalLM"),Kbo=o(" (PLBart model)"),Zbo=l(),ju=a("li"),Gae=a("strong"),e3o=o("prophetnet"),o3o=o(" \u2014 "),Y$=a("a"),r3o=o("ProphetNetForCausalLM"),t3o=o(" (ProphetNet model)"),a3o=l(),Du=a("li"),Oae=a("strong"),n3o=o("qdqbert"),s3o=o(" \u2014 "),K$=a("a"),l3o=o("QDQBertLMHeadModel"),i3o=o(" (QDQBert model)"),d3o=l(),Gu=a("li"),Vae=a("strong"),c3o=o("reformer"),f3o=o(" \u2014 "),Z$=a("a"),m3o=o("ReformerModelWithLMHead"),g3o=o(" (Reformer model)"),h3o=l(),Ou=a("li"),Xae=a("strong"),p3o=o("rembert"),_3o=o(" \u2014 "),eI=a("a"),u3o=o("RemBertForCausalLM"),b3o=o(" (RemBERT model)"),F3o=l(),Vu=a("li"),zae=a("strong"),v3o=o("roberta"),T3o=o(" \u2014 "),oI=a("a"),M3o=o("RobertaForCausalLM"),E3o=o(" (RoBERTa model)"),C3o=l(),Xu=a("li"),Qae=a("strong"),w3o=o("roformer"),A3o=o(" \u2014 "),rI=a("a"),y3o=o("RoFormerForCausalLM"),L3o=o(" (RoFormer model)"),x3o=l(),zu=a("li"),Wae=a("strong"),k3o=o("speech_to_text_2"),S3o=o(" \u2014 "),tI=a("a"),R3o=o("Speech2Text2ForCausalLM"),B3o=o(" (Speech2Text2 model)"),P3o=l(),Qu=a("li"),Hae=a("strong"),$3o=o("transfo-xl"),I3o=o(" \u2014 "),aI=a("a"),q3o=o("TransfoXLLMHeadModel"),N3o=o(" (Transformer-XL model)"),j3o=l(),Wu=a("li"),Uae=a("strong"),D3o=o("trocr"),G3o=o(" \u2014 "),nI=a("a"),O3o=o("TrOCRForCausalLM"),V3o=o(" (TrOCR model)"),X3o=l(),Hu=a("li"),Jae=a("strong"),z3o=o("xglm"),Q3o=o(" \u2014 "),sI=a("a"),W3o=o("XGLMForCausalLM"),H3o=o(" (XGLM model)"),U3o=l(),Uu=a("li"),Yae=a("strong"),J3o=o("xlm"),Y3o=o(" \u2014 "),lI=a("a"),K3o=o("XLMWithLMHeadModel"),Z3o=o(" (XLM model)"),e2o=l(),Ju=a("li"),Kae=a("strong"),o2o=o("xlm-prophetnet"),r2o=o(" \u2014 "),iI=a("a"),t2o=o("XLMProphetNetForCausalLM"),a2o=o(" (XLMProphetNet model)"),n2o=l(),Yu=a("li"),Zae=a("strong"),s2o=o("xlm-roberta"),l2o=o(" \u2014 "),dI=a("a"),i2o=o("XLMRobertaForCausalLM"),d2o=o(" (XLM-RoBERTa model)"),c2o=l(),Ku=a("li"),ene=a("strong"),f2o=o("xlm-roberta-xl"),m2o=o(" \u2014 "),cI=a("a"),g2o=o("XLMRobertaXLForCausalLM"),h2o=o(" (XLM-RoBERTa-XL model)"),p2o=l(),Zu=a("li"),one=a("strong"),_2o=o("xlnet"),u2o=o(" \u2014 "),fI=a("a"),b2o=o("XLNetLMHeadModel"),F2o=o(" (XLNet model)"),v2o=l(),e1=a("p"),T2o=o("The model is set in evaluation mode by default using "),rne=a("code"),M2o=o("model.eval()"),E2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=a("code"),C2o=o("model.train()"),w2o=l(),ane=a("p"),A2o=o("Examples:"),y2o=l(),f(b5.$$.fragment),hRe=l(),nd=a("h2"),o1=a("a"),nne=a("span"),f(F5.$$.fragment),L2o=l(),sne=a("span"),x2o=o("AutoModelForMaskedLM"),pRe=l(),Zo=a("div"),f(v5.$$.fragment),k2o=l(),sd=a("p"),S2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mI=a("a"),R2o=o("from_pretrained()"),B2o=o(" class method or the "),gI=a("a"),P2o=o("from_config()"),$2o=o(` class
method.`),I2o=l(),T5=a("p"),q2o=o("This class cannot be instantiated directly using "),lne=a("code"),N2o=o("__init__()"),j2o=o(" (throws an error)."),D2o=l(),Wr=a("div"),f(M5.$$.fragment),G2o=l(),ine=a("p"),O2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),V2o=l(),ld=a("p"),X2o=o(`Note:
Loading a model from its configuration file does `),dne=a("strong"),z2o=o("not"),Q2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hI=a("a"),W2o=o("from_pretrained()"),H2o=o(" to load the model weights."),U2o=l(),cne=a("p"),J2o=o("Examples:"),Y2o=l(),f(E5.$$.fragment),K2o=l(),De=a("div"),f(C5.$$.fragment),Z2o=l(),fne=a("p"),eFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),oFo=l(),Wa=a("p"),rFo=o("The model class to instantiate is selected based on the "),mne=a("code"),tFo=o("model_type"),aFo=o(` property of the config object (either
passed as an argument or loaded from `),gne=a("code"),nFo=o("pretrained_model_name_or_path"),sFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=a("code"),lFo=o("pretrained_model_name_or_path"),iFo=o(":"),dFo=l(),I=a("ul"),r1=a("li"),pne=a("strong"),cFo=o("albert"),fFo=o(" \u2014 "),pI=a("a"),mFo=o("AlbertForMaskedLM"),gFo=o(" (ALBERT model)"),hFo=l(),t1=a("li"),_ne=a("strong"),pFo=o("bart"),_Fo=o(" \u2014 "),_I=a("a"),uFo=o("BartForConditionalGeneration"),bFo=o(" (BART model)"),FFo=l(),a1=a("li"),une=a("strong"),vFo=o("bert"),TFo=o(" \u2014 "),uI=a("a"),MFo=o("BertForMaskedLM"),EFo=o(" (BERT model)"),CFo=l(),n1=a("li"),bne=a("strong"),wFo=o("big_bird"),AFo=o(" \u2014 "),bI=a("a"),yFo=o("BigBirdForMaskedLM"),LFo=o(" (BigBird model)"),xFo=l(),s1=a("li"),Fne=a("strong"),kFo=o("camembert"),SFo=o(" \u2014 "),FI=a("a"),RFo=o("CamembertForMaskedLM"),BFo=o(" (CamemBERT model)"),PFo=l(),l1=a("li"),vne=a("strong"),$Fo=o("convbert"),IFo=o(" \u2014 "),vI=a("a"),qFo=o("ConvBertForMaskedLM"),NFo=o(" (ConvBERT model)"),jFo=l(),i1=a("li"),Tne=a("strong"),DFo=o("data2vec-text"),GFo=o(" \u2014 "),TI=a("a"),OFo=o("Data2VecTextForMaskedLM"),VFo=o(" (Data2VecText model)"),XFo=l(),d1=a("li"),Mne=a("strong"),zFo=o("deberta"),QFo=o(" \u2014 "),MI=a("a"),WFo=o("DebertaForMaskedLM"),HFo=o(" (DeBERTa model)"),UFo=l(),c1=a("li"),Ene=a("strong"),JFo=o("deberta-v2"),YFo=o(" \u2014 "),EI=a("a"),KFo=o("DebertaV2ForMaskedLM"),ZFo=o(" (DeBERTa-v2 model)"),evo=l(),f1=a("li"),Cne=a("strong"),ovo=o("distilbert"),rvo=o(" \u2014 "),CI=a("a"),tvo=o("DistilBertForMaskedLM"),avo=o(" (DistilBERT model)"),nvo=l(),m1=a("li"),wne=a("strong"),svo=o("electra"),lvo=o(" \u2014 "),wI=a("a"),ivo=o("ElectraForMaskedLM"),dvo=o(" (ELECTRA model)"),cvo=l(),g1=a("li"),Ane=a("strong"),fvo=o("flaubert"),mvo=o(" \u2014 "),AI=a("a"),gvo=o("FlaubertWithLMHeadModel"),hvo=o(" (FlauBERT model)"),pvo=l(),h1=a("li"),yne=a("strong"),_vo=o("fnet"),uvo=o(" \u2014 "),yI=a("a"),bvo=o("FNetForMaskedLM"),Fvo=o(" (FNet model)"),vvo=l(),p1=a("li"),Lne=a("strong"),Tvo=o("funnel"),Mvo=o(" \u2014 "),LI=a("a"),Evo=o("FunnelForMaskedLM"),Cvo=o(" (Funnel Transformer model)"),wvo=l(),_1=a("li"),xne=a("strong"),Avo=o("ibert"),yvo=o(" \u2014 "),xI=a("a"),Lvo=o("IBertForMaskedLM"),xvo=o(" (I-BERT model)"),kvo=l(),u1=a("li"),kne=a("strong"),Svo=o("layoutlm"),Rvo=o(" \u2014 "),kI=a("a"),Bvo=o("LayoutLMForMaskedLM"),Pvo=o(" (LayoutLM model)"),$vo=l(),b1=a("li"),Sne=a("strong"),Ivo=o("longformer"),qvo=o(" \u2014 "),SI=a("a"),Nvo=o("LongformerForMaskedLM"),jvo=o(" (Longformer model)"),Dvo=l(),F1=a("li"),Rne=a("strong"),Gvo=o("mbart"),Ovo=o(" \u2014 "),RI=a("a"),Vvo=o("MBartForConditionalGeneration"),Xvo=o(" (mBART model)"),zvo=l(),v1=a("li"),Bne=a("strong"),Qvo=o("megatron-bert"),Wvo=o(" \u2014 "),BI=a("a"),Hvo=o("MegatronBertForMaskedLM"),Uvo=o(" (MegatronBert model)"),Jvo=l(),T1=a("li"),Pne=a("strong"),Yvo=o("mobilebert"),Kvo=o(" \u2014 "),PI=a("a"),Zvo=o("MobileBertForMaskedLM"),e6o=o(" (MobileBERT model)"),o6o=l(),M1=a("li"),$ne=a("strong"),r6o=o("mpnet"),t6o=o(" \u2014 "),$I=a("a"),a6o=o("MPNetForMaskedLM"),n6o=o(" (MPNet model)"),s6o=l(),E1=a("li"),Ine=a("strong"),l6o=o("nystromformer"),i6o=o(" \u2014 "),II=a("a"),d6o=o("NystromformerForMaskedLM"),c6o=o(" (Nystromformer model)"),f6o=l(),C1=a("li"),qne=a("strong"),m6o=o("perceiver"),g6o=o(" \u2014 "),qI=a("a"),h6o=o("PerceiverForMaskedLM"),p6o=o(" (Perceiver model)"),_6o=l(),w1=a("li"),Nne=a("strong"),u6o=o("qdqbert"),b6o=o(" \u2014 "),NI=a("a"),F6o=o("QDQBertForMaskedLM"),v6o=o(" (QDQBert model)"),T6o=l(),A1=a("li"),jne=a("strong"),M6o=o("reformer"),E6o=o(" \u2014 "),jI=a("a"),C6o=o("ReformerForMaskedLM"),w6o=o(" (Reformer model)"),A6o=l(),y1=a("li"),Dne=a("strong"),y6o=o("rembert"),L6o=o(" \u2014 "),DI=a("a"),x6o=o("RemBertForMaskedLM"),k6o=o(" (RemBERT model)"),S6o=l(),L1=a("li"),Gne=a("strong"),R6o=o("roberta"),B6o=o(" \u2014 "),GI=a("a"),P6o=o("RobertaForMaskedLM"),$6o=o(" (RoBERTa model)"),I6o=l(),x1=a("li"),One=a("strong"),q6o=o("roformer"),N6o=o(" \u2014 "),OI=a("a"),j6o=o("RoFormerForMaskedLM"),D6o=o(" (RoFormer model)"),G6o=l(),k1=a("li"),Vne=a("strong"),O6o=o("squeezebert"),V6o=o(" \u2014 "),VI=a("a"),X6o=o("SqueezeBertForMaskedLM"),z6o=o(" (SqueezeBERT model)"),Q6o=l(),S1=a("li"),Xne=a("strong"),W6o=o("tapas"),H6o=o(" \u2014 "),XI=a("a"),U6o=o("TapasForMaskedLM"),J6o=o(" (TAPAS model)"),Y6o=l(),R1=a("li"),zne=a("strong"),K6o=o("wav2vec2"),Z6o=o(" \u2014 "),Qne=a("code"),eTo=o("Wav2Vec2ForMaskedLM"),oTo=o("(Wav2Vec2 model)"),rTo=l(),B1=a("li"),Wne=a("strong"),tTo=o("xlm"),aTo=o(" \u2014 "),zI=a("a"),nTo=o("XLMWithLMHeadModel"),sTo=o(" (XLM model)"),lTo=l(),P1=a("li"),Hne=a("strong"),iTo=o("xlm-roberta"),dTo=o(" \u2014 "),QI=a("a"),cTo=o("XLMRobertaForMaskedLM"),fTo=o(" (XLM-RoBERTa model)"),mTo=l(),$1=a("li"),Une=a("strong"),gTo=o("xlm-roberta-xl"),hTo=o(" \u2014 "),WI=a("a"),pTo=o("XLMRobertaXLForMaskedLM"),_To=o(" (XLM-RoBERTa-XL model)"),uTo=l(),I1=a("li"),Jne=a("strong"),bTo=o("yoso"),FTo=o(" \u2014 "),HI=a("a"),vTo=o("YosoForMaskedLM"),TTo=o(" (YOSO model)"),MTo=l(),q1=a("p"),ETo=o("The model is set in evaluation mode by default using "),Yne=a("code"),CTo=o("model.eval()"),wTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kne=a("code"),ATo=o("model.train()"),yTo=l(),Zne=a("p"),LTo=o("Examples:"),xTo=l(),f(w5.$$.fragment),_Re=l(),id=a("h2"),N1=a("a"),ese=a("span"),f(A5.$$.fragment),kTo=l(),ose=a("span"),STo=o("AutoModelForSeq2SeqLM"),uRe=l(),er=a("div"),f(y5.$$.fragment),RTo=l(),dd=a("p"),BTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UI=a("a"),PTo=o("from_pretrained()"),$To=o(" class method or the "),JI=a("a"),ITo=o("from_config()"),qTo=o(` class
method.`),NTo=l(),L5=a("p"),jTo=o("This class cannot be instantiated directly using "),rse=a("code"),DTo=o("__init__()"),GTo=o(" (throws an error)."),OTo=l(),Hr=a("div"),f(x5.$$.fragment),VTo=l(),tse=a("p"),XTo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zTo=l(),cd=a("p"),QTo=o(`Note:
Loading a model from its configuration file does `),ase=a("strong"),WTo=o("not"),HTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=a("a"),UTo=o("from_pretrained()"),JTo=o(" to load the model weights."),YTo=l(),nse=a("p"),KTo=o("Examples:"),ZTo=l(),f(k5.$$.fragment),e7o=l(),Ge=a("div"),f(S5.$$.fragment),o7o=l(),sse=a("p"),r7o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t7o=l(),Ha=a("p"),a7o=o("The model class to instantiate is selected based on the "),lse=a("code"),n7o=o("model_type"),s7o=o(` property of the config object (either
passed as an argument or loaded from `),ise=a("code"),l7o=o("pretrained_model_name_or_path"),i7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=a("code"),d7o=o("pretrained_model_name_or_path"),c7o=o(":"),f7o=l(),ae=a("ul"),j1=a("li"),cse=a("strong"),m7o=o("bart"),g7o=o(" \u2014 "),KI=a("a"),h7o=o("BartForConditionalGeneration"),p7o=o(" (BART model)"),_7o=l(),D1=a("li"),fse=a("strong"),u7o=o("bigbird_pegasus"),b7o=o(" \u2014 "),ZI=a("a"),F7o=o("BigBirdPegasusForConditionalGeneration"),v7o=o(" (BigBirdPegasus model)"),T7o=l(),G1=a("li"),mse=a("strong"),M7o=o("blenderbot"),E7o=o(" \u2014 "),eq=a("a"),C7o=o("BlenderbotForConditionalGeneration"),w7o=o(" (Blenderbot model)"),A7o=l(),O1=a("li"),gse=a("strong"),y7o=o("blenderbot-small"),L7o=o(" \u2014 "),oq=a("a"),x7o=o("BlenderbotSmallForConditionalGeneration"),k7o=o(" (BlenderbotSmall model)"),S7o=l(),V1=a("li"),hse=a("strong"),R7o=o("encoder-decoder"),B7o=o(" \u2014 "),rq=a("a"),P7o=o("EncoderDecoderModel"),$7o=o(" (Encoder decoder model)"),I7o=l(),X1=a("li"),pse=a("strong"),q7o=o("fsmt"),N7o=o(" \u2014 "),tq=a("a"),j7o=o("FSMTForConditionalGeneration"),D7o=o(" (FairSeq Machine-Translation model)"),G7o=l(),z1=a("li"),_se=a("strong"),O7o=o("led"),V7o=o(" \u2014 "),aq=a("a"),X7o=o("LEDForConditionalGeneration"),z7o=o(" (LED model)"),Q7o=l(),Q1=a("li"),use=a("strong"),W7o=o("m2m_100"),H7o=o(" \u2014 "),nq=a("a"),U7o=o("M2M100ForConditionalGeneration"),J7o=o(" (M2M100 model)"),Y7o=l(),W1=a("li"),bse=a("strong"),K7o=o("marian"),Z7o=o(" \u2014 "),sq=a("a"),eMo=o("MarianMTModel"),oMo=o(" (Marian model)"),rMo=l(),H1=a("li"),Fse=a("strong"),tMo=o("mbart"),aMo=o(" \u2014 "),lq=a("a"),nMo=o("MBartForConditionalGeneration"),sMo=o(" (mBART model)"),lMo=l(),U1=a("li"),vse=a("strong"),iMo=o("mt5"),dMo=o(" \u2014 "),iq=a("a"),cMo=o("MT5ForConditionalGeneration"),fMo=o(" (mT5 model)"),mMo=l(),J1=a("li"),Tse=a("strong"),gMo=o("pegasus"),hMo=o(" \u2014 "),dq=a("a"),pMo=o("PegasusForConditionalGeneration"),_Mo=o(" (Pegasus model)"),uMo=l(),Y1=a("li"),Mse=a("strong"),bMo=o("plbart"),FMo=o(" \u2014 "),cq=a("a"),vMo=o("PLBartForConditionalGeneration"),TMo=o(" (PLBart model)"),MMo=l(),K1=a("li"),Ese=a("strong"),EMo=o("prophetnet"),CMo=o(" \u2014 "),fq=a("a"),wMo=o("ProphetNetForConditionalGeneration"),AMo=o(" (ProphetNet model)"),yMo=l(),Z1=a("li"),Cse=a("strong"),LMo=o("t5"),xMo=o(" \u2014 "),mq=a("a"),kMo=o("T5ForConditionalGeneration"),SMo=o(" (T5 model)"),RMo=l(),e4=a("li"),wse=a("strong"),BMo=o("tapex"),PMo=o(" \u2014 "),gq=a("a"),$Mo=o("BartForConditionalGeneration"),IMo=o(" (TAPEX model)"),qMo=l(),o4=a("li"),Ase=a("strong"),NMo=o("xlm-prophetnet"),jMo=o(" \u2014 "),hq=a("a"),DMo=o("XLMProphetNetForConditionalGeneration"),GMo=o(" (XLMProphetNet model)"),OMo=l(),r4=a("p"),VMo=o("The model is set in evaluation mode by default using "),yse=a("code"),XMo=o("model.eval()"),zMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),QMo=o("model.train()"),WMo=l(),xse=a("p"),HMo=o("Examples:"),UMo=l(),f(R5.$$.fragment),bRe=l(),fd=a("h2"),t4=a("a"),kse=a("span"),f(B5.$$.fragment),JMo=l(),Sse=a("span"),YMo=o("AutoModelForSequenceClassification"),FRe=l(),or=a("div"),f(P5.$$.fragment),KMo=l(),md=a("p"),ZMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pq=a("a"),eEo=o("from_pretrained()"),oEo=o(" class method or the "),_q=a("a"),rEo=o("from_config()"),tEo=o(` class
method.`),aEo=l(),$5=a("p"),nEo=o("This class cannot be instantiated directly using "),Rse=a("code"),sEo=o("__init__()"),lEo=o(" (throws an error)."),iEo=l(),Ur=a("div"),f(I5.$$.fragment),dEo=l(),Bse=a("p"),cEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fEo=l(),gd=a("p"),mEo=o(`Note:
Loading a model from its configuration file does `),Pse=a("strong"),gEo=o("not"),hEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=a("a"),pEo=o("from_pretrained()"),_Eo=o(" to load the model weights."),uEo=l(),$se=a("p"),bEo=o("Examples:"),FEo=l(),f(q5.$$.fragment),vEo=l(),Oe=a("div"),f(N5.$$.fragment),TEo=l(),Ise=a("p"),MEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),EEo=l(),Ua=a("p"),CEo=o("The model class to instantiate is selected based on the "),qse=a("code"),wEo=o("model_type"),AEo=o(` property of the config object (either
passed as an argument or loaded from `),Nse=a("code"),yEo=o("pretrained_model_name_or_path"),LEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=a("code"),xEo=o("pretrained_model_name_or_path"),kEo=o(":"),SEo=l(),y=a("ul"),a4=a("li"),Dse=a("strong"),REo=o("albert"),BEo=o(" \u2014 "),bq=a("a"),PEo=o("AlbertForSequenceClassification"),$Eo=o(" (ALBERT model)"),IEo=l(),n4=a("li"),Gse=a("strong"),qEo=o("bart"),NEo=o(" \u2014 "),Fq=a("a"),jEo=o("BartForSequenceClassification"),DEo=o(" (BART model)"),GEo=l(),s4=a("li"),Ose=a("strong"),OEo=o("bert"),VEo=o(" \u2014 "),vq=a("a"),XEo=o("BertForSequenceClassification"),zEo=o(" (BERT model)"),QEo=l(),l4=a("li"),Vse=a("strong"),WEo=o("big_bird"),HEo=o(" \u2014 "),Tq=a("a"),UEo=o("BigBirdForSequenceClassification"),JEo=o(" (BigBird model)"),YEo=l(),i4=a("li"),Xse=a("strong"),KEo=o("bigbird_pegasus"),ZEo=o(" \u2014 "),Mq=a("a"),eCo=o("BigBirdPegasusForSequenceClassification"),oCo=o(" (BigBirdPegasus model)"),rCo=l(),d4=a("li"),zse=a("strong"),tCo=o("camembert"),aCo=o(" \u2014 "),Eq=a("a"),nCo=o("CamembertForSequenceClassification"),sCo=o(" (CamemBERT model)"),lCo=l(),c4=a("li"),Qse=a("strong"),iCo=o("canine"),dCo=o(" \u2014 "),Cq=a("a"),cCo=o("CanineForSequenceClassification"),fCo=o(" (Canine model)"),mCo=l(),f4=a("li"),Wse=a("strong"),gCo=o("convbert"),hCo=o(" \u2014 "),wq=a("a"),pCo=o("ConvBertForSequenceClassification"),_Co=o(" (ConvBERT model)"),uCo=l(),m4=a("li"),Hse=a("strong"),bCo=o("ctrl"),FCo=o(" \u2014 "),Aq=a("a"),vCo=o("CTRLForSequenceClassification"),TCo=o(" (CTRL model)"),MCo=l(),g4=a("li"),Use=a("strong"),ECo=o("data2vec-text"),CCo=o(" \u2014 "),yq=a("a"),wCo=o("Data2VecTextForSequenceClassification"),ACo=o(" (Data2VecText model)"),yCo=l(),h4=a("li"),Jse=a("strong"),LCo=o("deberta"),xCo=o(" \u2014 "),Lq=a("a"),kCo=o("DebertaForSequenceClassification"),SCo=o(" (DeBERTa model)"),RCo=l(),p4=a("li"),Yse=a("strong"),BCo=o("deberta-v2"),PCo=o(" \u2014 "),xq=a("a"),$Co=o("DebertaV2ForSequenceClassification"),ICo=o(" (DeBERTa-v2 model)"),qCo=l(),_4=a("li"),Kse=a("strong"),NCo=o("distilbert"),jCo=o(" \u2014 "),kq=a("a"),DCo=o("DistilBertForSequenceClassification"),GCo=o(" (DistilBERT model)"),OCo=l(),u4=a("li"),Zse=a("strong"),VCo=o("electra"),XCo=o(" \u2014 "),Sq=a("a"),zCo=o("ElectraForSequenceClassification"),QCo=o(" (ELECTRA model)"),WCo=l(),b4=a("li"),ele=a("strong"),HCo=o("flaubert"),UCo=o(" \u2014 "),Rq=a("a"),JCo=o("FlaubertForSequenceClassification"),YCo=o(" (FlauBERT model)"),KCo=l(),F4=a("li"),ole=a("strong"),ZCo=o("fnet"),e5o=o(" \u2014 "),Bq=a("a"),o5o=o("FNetForSequenceClassification"),r5o=o(" (FNet model)"),t5o=l(),v4=a("li"),rle=a("strong"),a5o=o("funnel"),n5o=o(" \u2014 "),Pq=a("a"),s5o=o("FunnelForSequenceClassification"),l5o=o(" (Funnel Transformer model)"),i5o=l(),T4=a("li"),tle=a("strong"),d5o=o("gpt2"),c5o=o(" \u2014 "),$q=a("a"),f5o=o("GPT2ForSequenceClassification"),m5o=o(" (OpenAI GPT-2 model)"),g5o=l(),M4=a("li"),ale=a("strong"),h5o=o("gpt_neo"),p5o=o(" \u2014 "),Iq=a("a"),_5o=o("GPTNeoForSequenceClassification"),u5o=o(" (GPT Neo model)"),b5o=l(),E4=a("li"),nle=a("strong"),F5o=o("gptj"),v5o=o(" \u2014 "),qq=a("a"),T5o=o("GPTJForSequenceClassification"),M5o=o(" (GPT-J model)"),E5o=l(),C4=a("li"),sle=a("strong"),C5o=o("ibert"),w5o=o(" \u2014 "),Nq=a("a"),A5o=o("IBertForSequenceClassification"),y5o=o(" (I-BERT model)"),L5o=l(),w4=a("li"),lle=a("strong"),x5o=o("layoutlm"),k5o=o(" \u2014 "),jq=a("a"),S5o=o("LayoutLMForSequenceClassification"),R5o=o(" (LayoutLM model)"),B5o=l(),A4=a("li"),ile=a("strong"),P5o=o("layoutlmv2"),$5o=o(" \u2014 "),Dq=a("a"),I5o=o("LayoutLMv2ForSequenceClassification"),q5o=o(" (LayoutLMv2 model)"),N5o=l(),y4=a("li"),dle=a("strong"),j5o=o("led"),D5o=o(" \u2014 "),Gq=a("a"),G5o=o("LEDForSequenceClassification"),O5o=o(" (LED model)"),V5o=l(),L4=a("li"),cle=a("strong"),X5o=o("longformer"),z5o=o(" \u2014 "),Oq=a("a"),Q5o=o("LongformerForSequenceClassification"),W5o=o(" (Longformer model)"),H5o=l(),x4=a("li"),fle=a("strong"),U5o=o("mbart"),J5o=o(" \u2014 "),Vq=a("a"),Y5o=o("MBartForSequenceClassification"),K5o=o(" (mBART model)"),Z5o=l(),k4=a("li"),mle=a("strong"),ewo=o("megatron-bert"),owo=o(" \u2014 "),Xq=a("a"),rwo=o("MegatronBertForSequenceClassification"),two=o(" (MegatronBert model)"),awo=l(),S4=a("li"),gle=a("strong"),nwo=o("mobilebert"),swo=o(" \u2014 "),zq=a("a"),lwo=o("MobileBertForSequenceClassification"),iwo=o(" (MobileBERT model)"),dwo=l(),R4=a("li"),hle=a("strong"),cwo=o("mpnet"),fwo=o(" \u2014 "),Qq=a("a"),mwo=o("MPNetForSequenceClassification"),gwo=o(" (MPNet model)"),hwo=l(),B4=a("li"),ple=a("strong"),pwo=o("nystromformer"),_wo=o(" \u2014 "),Wq=a("a"),uwo=o("NystromformerForSequenceClassification"),bwo=o(" (Nystromformer model)"),Fwo=l(),P4=a("li"),_le=a("strong"),vwo=o("openai-gpt"),Two=o(" \u2014 "),Hq=a("a"),Mwo=o("OpenAIGPTForSequenceClassification"),Ewo=o(" (OpenAI GPT model)"),Cwo=l(),$4=a("li"),ule=a("strong"),wwo=o("perceiver"),Awo=o(" \u2014 "),Uq=a("a"),ywo=o("PerceiverForSequenceClassification"),Lwo=o(" (Perceiver model)"),xwo=l(),I4=a("li"),ble=a("strong"),kwo=o("plbart"),Swo=o(" \u2014 "),Jq=a("a"),Rwo=o("PLBartForSequenceClassification"),Bwo=o(" (PLBart model)"),Pwo=l(),q4=a("li"),Fle=a("strong"),$wo=o("qdqbert"),Iwo=o(" \u2014 "),Yq=a("a"),qwo=o("QDQBertForSequenceClassification"),Nwo=o(" (QDQBert model)"),jwo=l(),N4=a("li"),vle=a("strong"),Dwo=o("reformer"),Gwo=o(" \u2014 "),Kq=a("a"),Owo=o("ReformerForSequenceClassification"),Vwo=o(" (Reformer model)"),Xwo=l(),j4=a("li"),Tle=a("strong"),zwo=o("rembert"),Qwo=o(" \u2014 "),Zq=a("a"),Wwo=o("RemBertForSequenceClassification"),Hwo=o(" (RemBERT model)"),Uwo=l(),D4=a("li"),Mle=a("strong"),Jwo=o("roberta"),Ywo=o(" \u2014 "),eN=a("a"),Kwo=o("RobertaForSequenceClassification"),Zwo=o(" (RoBERTa model)"),eAo=l(),G4=a("li"),Ele=a("strong"),oAo=o("roformer"),rAo=o(" \u2014 "),oN=a("a"),tAo=o("RoFormerForSequenceClassification"),aAo=o(" (RoFormer model)"),nAo=l(),O4=a("li"),Cle=a("strong"),sAo=o("squeezebert"),lAo=o(" \u2014 "),rN=a("a"),iAo=o("SqueezeBertForSequenceClassification"),dAo=o(" (SqueezeBERT model)"),cAo=l(),V4=a("li"),wle=a("strong"),fAo=o("tapas"),mAo=o(" \u2014 "),tN=a("a"),gAo=o("TapasForSequenceClassification"),hAo=o(" (TAPAS model)"),pAo=l(),X4=a("li"),Ale=a("strong"),_Ao=o("tapex"),uAo=o(" \u2014 "),aN=a("a"),bAo=o("BartForSequenceClassification"),FAo=o(" (TAPEX model)"),vAo=l(),z4=a("li"),yle=a("strong"),TAo=o("transfo-xl"),MAo=o(" \u2014 "),nN=a("a"),EAo=o("TransfoXLForSequenceClassification"),CAo=o(" (Transformer-XL model)"),wAo=l(),Q4=a("li"),Lle=a("strong"),AAo=o("xlm"),yAo=o(" \u2014 "),sN=a("a"),LAo=o("XLMForSequenceClassification"),xAo=o(" (XLM model)"),kAo=l(),W4=a("li"),xle=a("strong"),SAo=o("xlm-roberta"),RAo=o(" \u2014 "),lN=a("a"),BAo=o("XLMRobertaForSequenceClassification"),PAo=o(" (XLM-RoBERTa model)"),$Ao=l(),H4=a("li"),kle=a("strong"),IAo=o("xlm-roberta-xl"),qAo=o(" \u2014 "),iN=a("a"),NAo=o("XLMRobertaXLForSequenceClassification"),jAo=o(" (XLM-RoBERTa-XL model)"),DAo=l(),U4=a("li"),Sle=a("strong"),GAo=o("xlnet"),OAo=o(" \u2014 "),dN=a("a"),VAo=o("XLNetForSequenceClassification"),XAo=o(" (XLNet model)"),zAo=l(),J4=a("li"),Rle=a("strong"),QAo=o("yoso"),WAo=o(" \u2014 "),cN=a("a"),HAo=o("YosoForSequenceClassification"),UAo=o(" (YOSO model)"),JAo=l(),Y4=a("p"),YAo=o("The model is set in evaluation mode by default using "),Ble=a("code"),KAo=o("model.eval()"),ZAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=a("code"),e0o=o("model.train()"),o0o=l(),$le=a("p"),r0o=o("Examples:"),t0o=l(),f(j5.$$.fragment),vRe=l(),hd=a("h2"),K4=a("a"),Ile=a("span"),f(D5.$$.fragment),a0o=l(),qle=a("span"),n0o=o("AutoModelForMultipleChoice"),TRe=l(),rr=a("div"),f(G5.$$.fragment),s0o=l(),pd=a("p"),l0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fN=a("a"),i0o=o("from_pretrained()"),d0o=o(" class method or the "),mN=a("a"),c0o=o("from_config()"),f0o=o(` class
method.`),m0o=l(),O5=a("p"),g0o=o("This class cannot be instantiated directly using "),Nle=a("code"),h0o=o("__init__()"),p0o=o(" (throws an error)."),_0o=l(),Jr=a("div"),f(V5.$$.fragment),u0o=l(),jle=a("p"),b0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),F0o=l(),_d=a("p"),v0o=o(`Note:
Loading a model from its configuration file does `),Dle=a("strong"),T0o=o("not"),M0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=a("a"),E0o=o("from_pretrained()"),C0o=o(" to load the model weights."),w0o=l(),Gle=a("p"),A0o=o("Examples:"),y0o=l(),f(X5.$$.fragment),L0o=l(),Ve=a("div"),f(z5.$$.fragment),x0o=l(),Ole=a("p"),k0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S0o=l(),Ja=a("p"),R0o=o("The model class to instantiate is selected based on the "),Vle=a("code"),B0o=o("model_type"),P0o=o(` property of the config object (either
passed as an argument or loaded from `),Xle=a("code"),$0o=o("pretrained_model_name_or_path"),I0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=a("code"),q0o=o("pretrained_model_name_or_path"),N0o=o(":"),j0o=l(),G=a("ul"),Z4=a("li"),Qle=a("strong"),D0o=o("albert"),G0o=o(" \u2014 "),hN=a("a"),O0o=o("AlbertForMultipleChoice"),V0o=o(" (ALBERT model)"),X0o=l(),eb=a("li"),Wle=a("strong"),z0o=o("bert"),Q0o=o(" \u2014 "),pN=a("a"),W0o=o("BertForMultipleChoice"),H0o=o(" (BERT model)"),U0o=l(),ob=a("li"),Hle=a("strong"),J0o=o("big_bird"),Y0o=o(" \u2014 "),_N=a("a"),K0o=o("BigBirdForMultipleChoice"),Z0o=o(" (BigBird model)"),eyo=l(),rb=a("li"),Ule=a("strong"),oyo=o("camembert"),ryo=o(" \u2014 "),uN=a("a"),tyo=o("CamembertForMultipleChoice"),ayo=o(" (CamemBERT model)"),nyo=l(),tb=a("li"),Jle=a("strong"),syo=o("canine"),lyo=o(" \u2014 "),bN=a("a"),iyo=o("CanineForMultipleChoice"),dyo=o(" (Canine model)"),cyo=l(),ab=a("li"),Yle=a("strong"),fyo=o("convbert"),myo=o(" \u2014 "),FN=a("a"),gyo=o("ConvBertForMultipleChoice"),hyo=o(" (ConvBERT model)"),pyo=l(),nb=a("li"),Kle=a("strong"),_yo=o("data2vec-text"),uyo=o(" \u2014 "),vN=a("a"),byo=o("Data2VecTextForMultipleChoice"),Fyo=o(" (Data2VecText model)"),vyo=l(),sb=a("li"),Zle=a("strong"),Tyo=o("distilbert"),Myo=o(" \u2014 "),TN=a("a"),Eyo=o("DistilBertForMultipleChoice"),Cyo=o(" (DistilBERT model)"),wyo=l(),lb=a("li"),eie=a("strong"),Ayo=o("electra"),yyo=o(" \u2014 "),MN=a("a"),Lyo=o("ElectraForMultipleChoice"),xyo=o(" (ELECTRA model)"),kyo=l(),ib=a("li"),oie=a("strong"),Syo=o("flaubert"),Ryo=o(" \u2014 "),EN=a("a"),Byo=o("FlaubertForMultipleChoice"),Pyo=o(" (FlauBERT model)"),$yo=l(),db=a("li"),rie=a("strong"),Iyo=o("fnet"),qyo=o(" \u2014 "),CN=a("a"),Nyo=o("FNetForMultipleChoice"),jyo=o(" (FNet model)"),Dyo=l(),cb=a("li"),tie=a("strong"),Gyo=o("funnel"),Oyo=o(" \u2014 "),wN=a("a"),Vyo=o("FunnelForMultipleChoice"),Xyo=o(" (Funnel Transformer model)"),zyo=l(),fb=a("li"),aie=a("strong"),Qyo=o("ibert"),Wyo=o(" \u2014 "),AN=a("a"),Hyo=o("IBertForMultipleChoice"),Uyo=o(" (I-BERT model)"),Jyo=l(),mb=a("li"),nie=a("strong"),Yyo=o("longformer"),Kyo=o(" \u2014 "),yN=a("a"),Zyo=o("LongformerForMultipleChoice"),eLo=o(" (Longformer model)"),oLo=l(),gb=a("li"),sie=a("strong"),rLo=o("megatron-bert"),tLo=o(" \u2014 "),LN=a("a"),aLo=o("MegatronBertForMultipleChoice"),nLo=o(" (MegatronBert model)"),sLo=l(),hb=a("li"),lie=a("strong"),lLo=o("mobilebert"),iLo=o(" \u2014 "),xN=a("a"),dLo=o("MobileBertForMultipleChoice"),cLo=o(" (MobileBERT model)"),fLo=l(),pb=a("li"),iie=a("strong"),mLo=o("mpnet"),gLo=o(" \u2014 "),kN=a("a"),hLo=o("MPNetForMultipleChoice"),pLo=o(" (MPNet model)"),_Lo=l(),_b=a("li"),die=a("strong"),uLo=o("nystromformer"),bLo=o(" \u2014 "),SN=a("a"),FLo=o("NystromformerForMultipleChoice"),vLo=o(" (Nystromformer model)"),TLo=l(),ub=a("li"),cie=a("strong"),MLo=o("qdqbert"),ELo=o(" \u2014 "),RN=a("a"),CLo=o("QDQBertForMultipleChoice"),wLo=o(" (QDQBert model)"),ALo=l(),bb=a("li"),fie=a("strong"),yLo=o("rembert"),LLo=o(" \u2014 "),BN=a("a"),xLo=o("RemBertForMultipleChoice"),kLo=o(" (RemBERT model)"),SLo=l(),Fb=a("li"),mie=a("strong"),RLo=o("roberta"),BLo=o(" \u2014 "),PN=a("a"),PLo=o("RobertaForMultipleChoice"),$Lo=o(" (RoBERTa model)"),ILo=l(),vb=a("li"),gie=a("strong"),qLo=o("roformer"),NLo=o(" \u2014 "),$N=a("a"),jLo=o("RoFormerForMultipleChoice"),DLo=o(" (RoFormer model)"),GLo=l(),Tb=a("li"),hie=a("strong"),OLo=o("squeezebert"),VLo=o(" \u2014 "),IN=a("a"),XLo=o("SqueezeBertForMultipleChoice"),zLo=o(" (SqueezeBERT model)"),QLo=l(),Mb=a("li"),pie=a("strong"),WLo=o("xlm"),HLo=o(" \u2014 "),qN=a("a"),ULo=o("XLMForMultipleChoice"),JLo=o(" (XLM model)"),YLo=l(),Eb=a("li"),_ie=a("strong"),KLo=o("xlm-roberta"),ZLo=o(" \u2014 "),NN=a("a"),e8o=o("XLMRobertaForMultipleChoice"),o8o=o(" (XLM-RoBERTa model)"),r8o=l(),Cb=a("li"),uie=a("strong"),t8o=o("xlm-roberta-xl"),a8o=o(" \u2014 "),jN=a("a"),n8o=o("XLMRobertaXLForMultipleChoice"),s8o=o(" (XLM-RoBERTa-XL model)"),l8o=l(),wb=a("li"),bie=a("strong"),i8o=o("xlnet"),d8o=o(" \u2014 "),DN=a("a"),c8o=o("XLNetForMultipleChoice"),f8o=o(" (XLNet model)"),m8o=l(),Ab=a("li"),Fie=a("strong"),g8o=o("yoso"),h8o=o(" \u2014 "),GN=a("a"),p8o=o("YosoForMultipleChoice"),_8o=o(" (YOSO model)"),u8o=l(),yb=a("p"),b8o=o("The model is set in evaluation mode by default using "),vie=a("code"),F8o=o("model.eval()"),v8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=a("code"),T8o=o("model.train()"),M8o=l(),Mie=a("p"),E8o=o("Examples:"),C8o=l(),f(Q5.$$.fragment),MRe=l(),ud=a("h2"),Lb=a("a"),Eie=a("span"),f(W5.$$.fragment),w8o=l(),Cie=a("span"),A8o=o("AutoModelForNextSentencePrediction"),ERe=l(),tr=a("div"),f(H5.$$.fragment),y8o=l(),bd=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ON=a("a"),x8o=o("from_pretrained()"),k8o=o(" class method or the "),VN=a("a"),S8o=o("from_config()"),R8o=o(` class
method.`),B8o=l(),U5=a("p"),P8o=o("This class cannot be instantiated directly using "),wie=a("code"),$8o=o("__init__()"),I8o=o(" (throws an error)."),q8o=l(),Yr=a("div"),f(J5.$$.fragment),N8o=l(),Aie=a("p"),j8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),D8o=l(),Fd=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),yie=a("strong"),O8o=o("not"),V8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),X8o=o("from_pretrained()"),z8o=o(" to load the model weights."),Q8o=l(),Lie=a("p"),W8o=o("Examples:"),H8o=l(),f(Y5.$$.fragment),U8o=l(),Xe=a("div"),f(K5.$$.fragment),J8o=l(),xie=a("p"),Y8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),K8o=l(),Ya=a("p"),Z8o=o("The model class to instantiate is selected based on the "),kie=a("code"),e9o=o("model_type"),o9o=o(` property of the config object (either
passed as an argument or loaded from `),Sie=a("code"),r9o=o("pretrained_model_name_or_path"),t9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=a("code"),a9o=o("pretrained_model_name_or_path"),n9o=o(":"),s9o=l(),da=a("ul"),xb=a("li"),Bie=a("strong"),l9o=o("bert"),i9o=o(" \u2014 "),zN=a("a"),d9o=o("BertForNextSentencePrediction"),c9o=o(" (BERT model)"),f9o=l(),kb=a("li"),Pie=a("strong"),m9o=o("fnet"),g9o=o(" \u2014 "),QN=a("a"),h9o=o("FNetForNextSentencePrediction"),p9o=o(" (FNet model)"),_9o=l(),Sb=a("li"),$ie=a("strong"),u9o=o("megatron-bert"),b9o=o(" \u2014 "),WN=a("a"),F9o=o("MegatronBertForNextSentencePrediction"),v9o=o(" (MegatronBert model)"),T9o=l(),Rb=a("li"),Iie=a("strong"),M9o=o("mobilebert"),E9o=o(" \u2014 "),HN=a("a"),C9o=o("MobileBertForNextSentencePrediction"),w9o=o(" (MobileBERT model)"),A9o=l(),Bb=a("li"),qie=a("strong"),y9o=o("qdqbert"),L9o=o(" \u2014 "),UN=a("a"),x9o=o("QDQBertForNextSentencePrediction"),k9o=o(" (QDQBert model)"),S9o=l(),Pb=a("p"),R9o=o("The model is set in evaluation mode by default using "),Nie=a("code"),B9o=o("model.eval()"),P9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),$9o=o("model.train()"),I9o=l(),Die=a("p"),q9o=o("Examples:"),N9o=l(),f(Z5.$$.fragment),CRe=l(),vd=a("h2"),$b=a("a"),Gie=a("span"),f(ew.$$.fragment),j9o=l(),Oie=a("span"),D9o=o("AutoModelForTokenClassification"),wRe=l(),ar=a("div"),f(ow.$$.fragment),G9o=l(),Td=a("p"),O9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JN=a("a"),V9o=o("from_pretrained()"),X9o=o(" class method or the "),YN=a("a"),z9o=o("from_config()"),Q9o=o(` class
method.`),W9o=l(),rw=a("p"),H9o=o("This class cannot be instantiated directly using "),Vie=a("code"),U9o=o("__init__()"),J9o=o(" (throws an error)."),Y9o=l(),Kr=a("div"),f(tw.$$.fragment),K9o=l(),Xie=a("p"),Z9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),exo=l(),Md=a("p"),oxo=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),rxo=o("not"),txo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=a("a"),axo=o("from_pretrained()"),nxo=o(" to load the model weights."),sxo=l(),Qie=a("p"),lxo=o("Examples:"),ixo=l(),f(aw.$$.fragment),dxo=l(),ze=a("div"),f(nw.$$.fragment),cxo=l(),Wie=a("p"),fxo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mxo=l(),Ka=a("p"),gxo=o("The model class to instantiate is selected based on the "),Hie=a("code"),hxo=o("model_type"),pxo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),_xo=o("pretrained_model_name_or_path"),uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),bxo=o("pretrained_model_name_or_path"),Fxo=o(":"),vxo=l(),j=a("ul"),Ib=a("li"),Yie=a("strong"),Txo=o("albert"),Mxo=o(" \u2014 "),ZN=a("a"),Exo=o("AlbertForTokenClassification"),Cxo=o(" (ALBERT model)"),wxo=l(),qb=a("li"),Kie=a("strong"),Axo=o("bert"),yxo=o(" \u2014 "),ej=a("a"),Lxo=o("BertForTokenClassification"),xxo=o(" (BERT model)"),kxo=l(),Nb=a("li"),Zie=a("strong"),Sxo=o("big_bird"),Rxo=o(" \u2014 "),oj=a("a"),Bxo=o("BigBirdForTokenClassification"),Pxo=o(" (BigBird model)"),$xo=l(),jb=a("li"),ede=a("strong"),Ixo=o("camembert"),qxo=o(" \u2014 "),rj=a("a"),Nxo=o("CamembertForTokenClassification"),jxo=o(" (CamemBERT model)"),Dxo=l(),Db=a("li"),ode=a("strong"),Gxo=o("canine"),Oxo=o(" \u2014 "),tj=a("a"),Vxo=o("CanineForTokenClassification"),Xxo=o(" (Canine model)"),zxo=l(),Gb=a("li"),rde=a("strong"),Qxo=o("convbert"),Wxo=o(" \u2014 "),aj=a("a"),Hxo=o("ConvBertForTokenClassification"),Uxo=o(" (ConvBERT model)"),Jxo=l(),Ob=a("li"),tde=a("strong"),Yxo=o("data2vec-text"),Kxo=o(" \u2014 "),nj=a("a"),Zxo=o("Data2VecTextForTokenClassification"),eko=o(" (Data2VecText model)"),oko=l(),Vb=a("li"),ade=a("strong"),rko=o("deberta"),tko=o(" \u2014 "),sj=a("a"),ako=o("DebertaForTokenClassification"),nko=o(" (DeBERTa model)"),sko=l(),Xb=a("li"),nde=a("strong"),lko=o("deberta-v2"),iko=o(" \u2014 "),lj=a("a"),dko=o("DebertaV2ForTokenClassification"),cko=o(" (DeBERTa-v2 model)"),fko=l(),zb=a("li"),sde=a("strong"),mko=o("distilbert"),gko=o(" \u2014 "),ij=a("a"),hko=o("DistilBertForTokenClassification"),pko=o(" (DistilBERT model)"),_ko=l(),Qb=a("li"),lde=a("strong"),uko=o("electra"),bko=o(" \u2014 "),dj=a("a"),Fko=o("ElectraForTokenClassification"),vko=o(" (ELECTRA model)"),Tko=l(),Wb=a("li"),ide=a("strong"),Mko=o("flaubert"),Eko=o(" \u2014 "),cj=a("a"),Cko=o("FlaubertForTokenClassification"),wko=o(" (FlauBERT model)"),Ako=l(),Hb=a("li"),dde=a("strong"),yko=o("fnet"),Lko=o(" \u2014 "),fj=a("a"),xko=o("FNetForTokenClassification"),kko=o(" (FNet model)"),Sko=l(),Ub=a("li"),cde=a("strong"),Rko=o("funnel"),Bko=o(" \u2014 "),mj=a("a"),Pko=o("FunnelForTokenClassification"),$ko=o(" (Funnel Transformer model)"),Iko=l(),Jb=a("li"),fde=a("strong"),qko=o("gpt2"),Nko=o(" \u2014 "),gj=a("a"),jko=o("GPT2ForTokenClassification"),Dko=o(" (OpenAI GPT-2 model)"),Gko=l(),Yb=a("li"),mde=a("strong"),Oko=o("ibert"),Vko=o(" \u2014 "),hj=a("a"),Xko=o("IBertForTokenClassification"),zko=o(" (I-BERT model)"),Qko=l(),Kb=a("li"),gde=a("strong"),Wko=o("layoutlm"),Hko=o(" \u2014 "),pj=a("a"),Uko=o("LayoutLMForTokenClassification"),Jko=o(" (LayoutLM model)"),Yko=l(),Zb=a("li"),hde=a("strong"),Kko=o("layoutlmv2"),Zko=o(" \u2014 "),_j=a("a"),eSo=o("LayoutLMv2ForTokenClassification"),oSo=o(" (LayoutLMv2 model)"),rSo=l(),e3=a("li"),pde=a("strong"),tSo=o("longformer"),aSo=o(" \u2014 "),uj=a("a"),nSo=o("LongformerForTokenClassification"),sSo=o(" (Longformer model)"),lSo=l(),o3=a("li"),_de=a("strong"),iSo=o("megatron-bert"),dSo=o(" \u2014 "),bj=a("a"),cSo=o("MegatronBertForTokenClassification"),fSo=o(" (MegatronBert model)"),mSo=l(),r3=a("li"),ude=a("strong"),gSo=o("mobilebert"),hSo=o(" \u2014 "),Fj=a("a"),pSo=o("MobileBertForTokenClassification"),_So=o(" (MobileBERT model)"),uSo=l(),t3=a("li"),bde=a("strong"),bSo=o("mpnet"),FSo=o(" \u2014 "),vj=a("a"),vSo=o("MPNetForTokenClassification"),TSo=o(" (MPNet model)"),MSo=l(),a3=a("li"),Fde=a("strong"),ESo=o("nystromformer"),CSo=o(" \u2014 "),Tj=a("a"),wSo=o("NystromformerForTokenClassification"),ASo=o(" (Nystromformer model)"),ySo=l(),n3=a("li"),vde=a("strong"),LSo=o("qdqbert"),xSo=o(" \u2014 "),Mj=a("a"),kSo=o("QDQBertForTokenClassification"),SSo=o(" (QDQBert model)"),RSo=l(),s3=a("li"),Tde=a("strong"),BSo=o("rembert"),PSo=o(" \u2014 "),Ej=a("a"),$So=o("RemBertForTokenClassification"),ISo=o(" (RemBERT model)"),qSo=l(),l3=a("li"),Mde=a("strong"),NSo=o("roberta"),jSo=o(" \u2014 "),Cj=a("a"),DSo=o("RobertaForTokenClassification"),GSo=o(" (RoBERTa model)"),OSo=l(),i3=a("li"),Ede=a("strong"),VSo=o("roformer"),XSo=o(" \u2014 "),wj=a("a"),zSo=o("RoFormerForTokenClassification"),QSo=o(" (RoFormer model)"),WSo=l(),d3=a("li"),Cde=a("strong"),HSo=o("squeezebert"),USo=o(" \u2014 "),Aj=a("a"),JSo=o("SqueezeBertForTokenClassification"),YSo=o(" (SqueezeBERT model)"),KSo=l(),c3=a("li"),wde=a("strong"),ZSo=o("xlm"),eRo=o(" \u2014 "),yj=a("a"),oRo=o("XLMForTokenClassification"),rRo=o(" (XLM model)"),tRo=l(),f3=a("li"),Ade=a("strong"),aRo=o("xlm-roberta"),nRo=o(" \u2014 "),Lj=a("a"),sRo=o("XLMRobertaForTokenClassification"),lRo=o(" (XLM-RoBERTa model)"),iRo=l(),m3=a("li"),yde=a("strong"),dRo=o("xlm-roberta-xl"),cRo=o(" \u2014 "),xj=a("a"),fRo=o("XLMRobertaXLForTokenClassification"),mRo=o(" (XLM-RoBERTa-XL model)"),gRo=l(),g3=a("li"),Lde=a("strong"),hRo=o("xlnet"),pRo=o(" \u2014 "),kj=a("a"),_Ro=o("XLNetForTokenClassification"),uRo=o(" (XLNet model)"),bRo=l(),h3=a("li"),xde=a("strong"),FRo=o("yoso"),vRo=o(" \u2014 "),Sj=a("a"),TRo=o("YosoForTokenClassification"),MRo=o(" (YOSO model)"),ERo=l(),p3=a("p"),CRo=o("The model is set in evaluation mode by default using "),kde=a("code"),wRo=o("model.eval()"),ARo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),yRo=o("model.train()"),LRo=l(),Rde=a("p"),xRo=o("Examples:"),kRo=l(),f(sw.$$.fragment),ARe=l(),Ed=a("h2"),_3=a("a"),Bde=a("span"),f(lw.$$.fragment),SRo=l(),Pde=a("span"),RRo=o("AutoModelForQuestionAnswering"),yRe=l(),nr=a("div"),f(iw.$$.fragment),BRo=l(),Cd=a("p"),PRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rj=a("a"),$Ro=o("from_pretrained()"),IRo=o(" class method or the "),Bj=a("a"),qRo=o("from_config()"),NRo=o(` class
method.`),jRo=l(),dw=a("p"),DRo=o("This class cannot be instantiated directly using "),$de=a("code"),GRo=o("__init__()"),ORo=o(" (throws an error)."),VRo=l(),Zr=a("div"),f(cw.$$.fragment),XRo=l(),Ide=a("p"),zRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QRo=l(),wd=a("p"),WRo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),HRo=o("not"),URo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=a("a"),JRo=o("from_pretrained()"),YRo=o(" to load the model weights."),KRo=l(),Nde=a("p"),ZRo=o("Examples:"),eBo=l(),f(fw.$$.fragment),oBo=l(),Qe=a("div"),f(mw.$$.fragment),rBo=l(),jde=a("p"),tBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aBo=l(),Za=a("p"),nBo=o("The model class to instantiate is selected based on the "),Dde=a("code"),sBo=o("model_type"),lBo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),iBo=o("pretrained_model_name_or_path"),dBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),cBo=o("pretrained_model_name_or_path"),fBo=o(":"),mBo=l(),R=a("ul"),u3=a("li"),Vde=a("strong"),gBo=o("albert"),hBo=o(" \u2014 "),$j=a("a"),pBo=o("AlbertForQuestionAnswering"),_Bo=o(" (ALBERT model)"),uBo=l(),b3=a("li"),Xde=a("strong"),bBo=o("bart"),FBo=o(" \u2014 "),Ij=a("a"),vBo=o("BartForQuestionAnswering"),TBo=o(" (BART model)"),MBo=l(),F3=a("li"),zde=a("strong"),EBo=o("bert"),CBo=o(" \u2014 "),qj=a("a"),wBo=o("BertForQuestionAnswering"),ABo=o(" (BERT model)"),yBo=l(),v3=a("li"),Qde=a("strong"),LBo=o("big_bird"),xBo=o(" \u2014 "),Nj=a("a"),kBo=o("BigBirdForQuestionAnswering"),SBo=o(" (BigBird model)"),RBo=l(),T3=a("li"),Wde=a("strong"),BBo=o("bigbird_pegasus"),PBo=o(" \u2014 "),jj=a("a"),$Bo=o("BigBirdPegasusForQuestionAnswering"),IBo=o(" (BigBirdPegasus model)"),qBo=l(),M3=a("li"),Hde=a("strong"),NBo=o("camembert"),jBo=o(" \u2014 "),Dj=a("a"),DBo=o("CamembertForQuestionAnswering"),GBo=o(" (CamemBERT model)"),OBo=l(),E3=a("li"),Ude=a("strong"),VBo=o("canine"),XBo=o(" \u2014 "),Gj=a("a"),zBo=o("CanineForQuestionAnswering"),QBo=o(" (Canine model)"),WBo=l(),C3=a("li"),Jde=a("strong"),HBo=o("convbert"),UBo=o(" \u2014 "),Oj=a("a"),JBo=o("ConvBertForQuestionAnswering"),YBo=o(" (ConvBERT model)"),KBo=l(),w3=a("li"),Yde=a("strong"),ZBo=o("data2vec-text"),ePo=o(" \u2014 "),Vj=a("a"),oPo=o("Data2VecTextForQuestionAnswering"),rPo=o(" (Data2VecText model)"),tPo=l(),A3=a("li"),Kde=a("strong"),aPo=o("deberta"),nPo=o(" \u2014 "),Xj=a("a"),sPo=o("DebertaForQuestionAnswering"),lPo=o(" (DeBERTa model)"),iPo=l(),y3=a("li"),Zde=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),zj=a("a"),fPo=o("DebertaV2ForQuestionAnswering"),mPo=o(" (DeBERTa-v2 model)"),gPo=l(),L3=a("li"),ece=a("strong"),hPo=o("distilbert"),pPo=o(" \u2014 "),Qj=a("a"),_Po=o("DistilBertForQuestionAnswering"),uPo=o(" (DistilBERT model)"),bPo=l(),x3=a("li"),oce=a("strong"),FPo=o("electra"),vPo=o(" \u2014 "),Wj=a("a"),TPo=o("ElectraForQuestionAnswering"),MPo=o(" (ELECTRA model)"),EPo=l(),k3=a("li"),rce=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),Hj=a("a"),APo=o("FlaubertForQuestionAnsweringSimple"),yPo=o(" (FlauBERT model)"),LPo=l(),S3=a("li"),tce=a("strong"),xPo=o("fnet"),kPo=o(" \u2014 "),Uj=a("a"),SPo=o("FNetForQuestionAnswering"),RPo=o(" (FNet model)"),BPo=l(),R3=a("li"),ace=a("strong"),PPo=o("funnel"),$Po=o(" \u2014 "),Jj=a("a"),IPo=o("FunnelForQuestionAnswering"),qPo=o(" (Funnel Transformer model)"),NPo=l(),B3=a("li"),nce=a("strong"),jPo=o("gptj"),DPo=o(" \u2014 "),Yj=a("a"),GPo=o("GPTJForQuestionAnswering"),OPo=o(" (GPT-J model)"),VPo=l(),P3=a("li"),sce=a("strong"),XPo=o("ibert"),zPo=o(" \u2014 "),Kj=a("a"),QPo=o("IBertForQuestionAnswering"),WPo=o(" (I-BERT model)"),HPo=l(),$3=a("li"),lce=a("strong"),UPo=o("layoutlmv2"),JPo=o(" \u2014 "),Zj=a("a"),YPo=o("LayoutLMv2ForQuestionAnswering"),KPo=o(" (LayoutLMv2 model)"),ZPo=l(),I3=a("li"),ice=a("strong"),e$o=o("led"),o$o=o(" \u2014 "),eD=a("a"),r$o=o("LEDForQuestionAnswering"),t$o=o(" (LED model)"),a$o=l(),q3=a("li"),dce=a("strong"),n$o=o("longformer"),s$o=o(" \u2014 "),oD=a("a"),l$o=o("LongformerForQuestionAnswering"),i$o=o(" (Longformer model)"),d$o=l(),N3=a("li"),cce=a("strong"),c$o=o("lxmert"),f$o=o(" \u2014 "),rD=a("a"),m$o=o("LxmertForQuestionAnswering"),g$o=o(" (LXMERT model)"),h$o=l(),j3=a("li"),fce=a("strong"),p$o=o("mbart"),_$o=o(" \u2014 "),tD=a("a"),u$o=o("MBartForQuestionAnswering"),b$o=o(" (mBART model)"),F$o=l(),D3=a("li"),mce=a("strong"),v$o=o("megatron-bert"),T$o=o(" \u2014 "),aD=a("a"),M$o=o("MegatronBertForQuestionAnswering"),E$o=o(" (MegatronBert model)"),C$o=l(),G3=a("li"),gce=a("strong"),w$o=o("mobilebert"),A$o=o(" \u2014 "),nD=a("a"),y$o=o("MobileBertForQuestionAnswering"),L$o=o(" (MobileBERT model)"),x$o=l(),O3=a("li"),hce=a("strong"),k$o=o("mpnet"),S$o=o(" \u2014 "),sD=a("a"),R$o=o("MPNetForQuestionAnswering"),B$o=o(" (MPNet model)"),P$o=l(),V3=a("li"),pce=a("strong"),$$o=o("nystromformer"),I$o=o(" \u2014 "),lD=a("a"),q$o=o("NystromformerForQuestionAnswering"),N$o=o(" (Nystromformer model)"),j$o=l(),X3=a("li"),_ce=a("strong"),D$o=o("qdqbert"),G$o=o(" \u2014 "),iD=a("a"),O$o=o("QDQBertForQuestionAnswering"),V$o=o(" (QDQBert model)"),X$o=l(),z3=a("li"),uce=a("strong"),z$o=o("reformer"),Q$o=o(" \u2014 "),dD=a("a"),W$o=o("ReformerForQuestionAnswering"),H$o=o(" (Reformer model)"),U$o=l(),Q3=a("li"),bce=a("strong"),J$o=o("rembert"),Y$o=o(" \u2014 "),cD=a("a"),K$o=o("RemBertForQuestionAnswering"),Z$o=o(" (RemBERT model)"),eIo=l(),W3=a("li"),Fce=a("strong"),oIo=o("roberta"),rIo=o(" \u2014 "),fD=a("a"),tIo=o("RobertaForQuestionAnswering"),aIo=o(" (RoBERTa model)"),nIo=l(),H3=a("li"),vce=a("strong"),sIo=o("roformer"),lIo=o(" \u2014 "),mD=a("a"),iIo=o("RoFormerForQuestionAnswering"),dIo=o(" (RoFormer model)"),cIo=l(),U3=a("li"),Tce=a("strong"),fIo=o("splinter"),mIo=o(" \u2014 "),gD=a("a"),gIo=o("SplinterForQuestionAnswering"),hIo=o(" (Splinter model)"),pIo=l(),J3=a("li"),Mce=a("strong"),_Io=o("squeezebert"),uIo=o(" \u2014 "),hD=a("a"),bIo=o("SqueezeBertForQuestionAnswering"),FIo=o(" (SqueezeBERT model)"),vIo=l(),Y3=a("li"),Ece=a("strong"),TIo=o("xlm"),MIo=o(" \u2014 "),pD=a("a"),EIo=o("XLMForQuestionAnsweringSimple"),CIo=o(" (XLM model)"),wIo=l(),K3=a("li"),Cce=a("strong"),AIo=o("xlm-roberta"),yIo=o(" \u2014 "),_D=a("a"),LIo=o("XLMRobertaForQuestionAnswering"),xIo=o(" (XLM-RoBERTa model)"),kIo=l(),Z3=a("li"),wce=a("strong"),SIo=o("xlm-roberta-xl"),RIo=o(" \u2014 "),uD=a("a"),BIo=o("XLMRobertaXLForQuestionAnswering"),PIo=o(" (XLM-RoBERTa-XL model)"),$Io=l(),e2=a("li"),Ace=a("strong"),IIo=o("xlnet"),qIo=o(" \u2014 "),bD=a("a"),NIo=o("XLNetForQuestionAnsweringSimple"),jIo=o(" (XLNet model)"),DIo=l(),o2=a("li"),yce=a("strong"),GIo=o("yoso"),OIo=o(" \u2014 "),FD=a("a"),VIo=o("YosoForQuestionAnswering"),XIo=o(" (YOSO model)"),zIo=l(),r2=a("p"),QIo=o("The model is set in evaluation mode by default using "),Lce=a("code"),WIo=o("model.eval()"),HIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=a("code"),UIo=o("model.train()"),JIo=l(),kce=a("p"),YIo=o("Examples:"),KIo=l(),f(gw.$$.fragment),LRe=l(),Ad=a("h2"),t2=a("a"),Sce=a("span"),f(hw.$$.fragment),ZIo=l(),Rce=a("span"),eqo=o("AutoModelForTableQuestionAnswering"),xRe=l(),sr=a("div"),f(pw.$$.fragment),oqo=l(),yd=a("p"),rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vD=a("a"),tqo=o("from_pretrained()"),aqo=o(" class method or the "),TD=a("a"),nqo=o("from_config()"),sqo=o(` class
method.`),lqo=l(),_w=a("p"),iqo=o("This class cannot be instantiated directly using "),Bce=a("code"),dqo=o("__init__()"),cqo=o(" (throws an error)."),fqo=l(),et=a("div"),f(uw.$$.fragment),mqo=l(),Pce=a("p"),gqo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hqo=l(),Ld=a("p"),pqo=o(`Note:
Loading a model from its configuration file does `),$ce=a("strong"),_qo=o("not"),uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),bqo=o("from_pretrained()"),Fqo=o(" to load the model weights."),vqo=l(),Ice=a("p"),Tqo=o("Examples:"),Mqo=l(),f(bw.$$.fragment),Eqo=l(),We=a("div"),f(Fw.$$.fragment),Cqo=l(),qce=a("p"),wqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Aqo=l(),en=a("p"),yqo=o("The model class to instantiate is selected based on the "),Nce=a("code"),Lqo=o("model_type"),xqo=o(` property of the config object (either
passed as an argument or loaded from `),jce=a("code"),kqo=o("pretrained_model_name_or_path"),Sqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=a("code"),Rqo=o("pretrained_model_name_or_path"),Bqo=o(":"),Pqo=l(),Gce=a("ul"),a2=a("li"),Oce=a("strong"),$qo=o("tapas"),Iqo=o(" \u2014 "),ED=a("a"),qqo=o("TapasForQuestionAnswering"),Nqo=o(" (TAPAS model)"),jqo=l(),n2=a("p"),Dqo=o("The model is set in evaluation mode by default using "),Vce=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=a("code"),Vqo=o("model.train()"),Xqo=l(),zce=a("p"),zqo=o("Examples:"),Qqo=l(),f(vw.$$.fragment),kRe=l(),xd=a("h2"),s2=a("a"),Qce=a("span"),f(Tw.$$.fragment),Wqo=l(),Wce=a("span"),Hqo=o("AutoModelForImageClassification"),SRe=l(),lr=a("div"),f(Mw.$$.fragment),Uqo=l(),kd=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CD=a("a"),Yqo=o("from_pretrained()"),Kqo=o(" class method or the "),wD=a("a"),Zqo=o("from_config()"),eNo=o(` class
method.`),oNo=l(),Ew=a("p"),rNo=o("This class cannot be instantiated directly using "),Hce=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),ot=a("div"),f(Cw.$$.fragment),sNo=l(),Uce=a("p"),lNo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),iNo=l(),Sd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Jce=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),mNo=o("from_pretrained()"),gNo=o(" to load the model weights."),hNo=l(),Yce=a("p"),pNo=o("Examples:"),_No=l(),f(ww.$$.fragment),uNo=l(),He=a("div"),f(Aw.$$.fragment),bNo=l(),Kce=a("p"),FNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vNo=l(),on=a("p"),TNo=o("The model class to instantiate is selected based on the "),Zce=a("code"),MNo=o("model_type"),ENo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),CNo=o("pretrained_model_name_or_path"),wNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),ANo=o("pretrained_model_name_or_path"),yNo=o(":"),LNo=l(),ge=a("ul"),l2=a("li"),rfe=a("strong"),xNo=o("beit"),kNo=o(" \u2014 "),yD=a("a"),SNo=o("BeitForImageClassification"),RNo=o(" (BEiT model)"),BNo=l(),i2=a("li"),tfe=a("strong"),PNo=o("convnext"),$No=o(" \u2014 "),LD=a("a"),INo=o("ConvNextForImageClassification"),qNo=o(" (ConvNext model)"),NNo=l(),Ds=a("li"),afe=a("strong"),jNo=o("deit"),DNo=o(" \u2014 "),xD=a("a"),GNo=o("DeiTForImageClassification"),ONo=o(" or "),kD=a("a"),VNo=o("DeiTForImageClassificationWithTeacher"),XNo=o(" (DeiT model)"),zNo=l(),d2=a("li"),nfe=a("strong"),QNo=o("imagegpt"),WNo=o(" \u2014 "),SD=a("a"),HNo=o("ImageGPTForImageClassification"),UNo=o(" (ImageGPT model)"),JNo=l(),ma=a("li"),sfe=a("strong"),YNo=o("perceiver"),KNo=o(" \u2014 "),RD=a("a"),ZNo=o("PerceiverForImageClassificationLearned"),ejo=o(" or "),BD=a("a"),ojo=o("PerceiverForImageClassificationFourier"),rjo=o(" or "),PD=a("a"),tjo=o("PerceiverForImageClassificationConvProcessing"),ajo=o(" (Perceiver model)"),njo=l(),c2=a("li"),lfe=a("strong"),sjo=o("poolformer"),ljo=o(" \u2014 "),$D=a("a"),ijo=o("PoolFormerForImageClassification"),djo=o(" (PoolFormer model)"),cjo=l(),f2=a("li"),ife=a("strong"),fjo=o("resnet"),mjo=o(" \u2014 "),ID=a("a"),gjo=o("ResNetForImageClassification"),hjo=o(" (ResNet model)"),pjo=l(),m2=a("li"),dfe=a("strong"),_jo=o("segformer"),ujo=o(" \u2014 "),qD=a("a"),bjo=o("SegformerForImageClassification"),Fjo=o(" (SegFormer model)"),vjo=l(),g2=a("li"),cfe=a("strong"),Tjo=o("swin"),Mjo=o(" \u2014 "),ND=a("a"),Ejo=o("SwinForImageClassification"),Cjo=o(" (Swin model)"),wjo=l(),h2=a("li"),ffe=a("strong"),Ajo=o("van"),yjo=o(" \u2014 "),jD=a("a"),Ljo=o("VanForImageClassification"),xjo=o(" (VAN model)"),kjo=l(),p2=a("li"),mfe=a("strong"),Sjo=o("vit"),Rjo=o(" \u2014 "),DD=a("a"),Bjo=o("ViTForImageClassification"),Pjo=o(" (ViT model)"),$jo=l(),_2=a("p"),Ijo=o("The model is set in evaluation mode by default using "),gfe=a("code"),qjo=o("model.eval()"),Njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=a("code"),jjo=o("model.train()"),Djo=l(),pfe=a("p"),Gjo=o("Examples:"),Ojo=l(),f(yw.$$.fragment),RRe=l(),Rd=a("h2"),u2=a("a"),_fe=a("span"),f(Lw.$$.fragment),Vjo=l(),ufe=a("span"),Xjo=o("AutoModelForVision2Seq"),BRe=l(),ir=a("div"),f(xw.$$.fragment),zjo=l(),Bd=a("p"),Qjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GD=a("a"),Wjo=o("from_pretrained()"),Hjo=o(" class method or the "),OD=a("a"),Ujo=o("from_config()"),Jjo=o(` class
method.`),Yjo=l(),kw=a("p"),Kjo=o("This class cannot be instantiated directly using "),bfe=a("code"),Zjo=o("__init__()"),eDo=o(" (throws an error)."),oDo=l(),rt=a("div"),f(Sw.$$.fragment),rDo=l(),Ffe=a("p"),tDo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),aDo=l(),Pd=a("p"),nDo=o(`Note:
Loading a model from its configuration file does `),vfe=a("strong"),sDo=o("not"),lDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),iDo=o("from_pretrained()"),dDo=o(" to load the model weights."),cDo=l(),Tfe=a("p"),fDo=o("Examples:"),mDo=l(),f(Rw.$$.fragment),gDo=l(),Ue=a("div"),f(Bw.$$.fragment),hDo=l(),Mfe=a("p"),pDo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Do=l(),rn=a("p"),uDo=o("The model class to instantiate is selected based on the "),Efe=a("code"),bDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),vDo=o("pretrained_model_name_or_path"),TDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),MDo=o("pretrained_model_name_or_path"),EDo=o(":"),CDo=l(),Afe=a("ul"),b2=a("li"),yfe=a("strong"),wDo=o("vision-encoder-decoder"),ADo=o(" \u2014 "),XD=a("a"),yDo=o("VisionEncoderDecoderModel"),LDo=o(" (Vision Encoder decoder model)"),xDo=l(),F2=a("p"),kDo=o("The model is set in evaluation mode by default using "),Lfe=a("code"),SDo=o("model.eval()"),RDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=a("code"),BDo=o("model.train()"),PDo=l(),kfe=a("p"),$Do=o("Examples:"),IDo=l(),f(Pw.$$.fragment),PRe=l(),$d=a("h2"),v2=a("a"),Sfe=a("span"),f($w.$$.fragment),qDo=l(),Rfe=a("span"),NDo=o("AutoModelForAudioClassification"),$Re=l(),dr=a("div"),f(Iw.$$.fragment),jDo=l(),Id=a("p"),DDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zD=a("a"),GDo=o("from_pretrained()"),ODo=o(" class method or the "),QD=a("a"),VDo=o("from_config()"),XDo=o(` class
method.`),zDo=l(),qw=a("p"),QDo=o("This class cannot be instantiated directly using "),Bfe=a("code"),WDo=o("__init__()"),HDo=o(" (throws an error)."),UDo=l(),tt=a("div"),f(Nw.$$.fragment),JDo=l(),Pfe=a("p"),YDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),KDo=l(),qd=a("p"),ZDo=o(`Note:
Loading a model from its configuration file does `),$fe=a("strong"),eGo=o("not"),oGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=a("a"),rGo=o("from_pretrained()"),tGo=o(" to load the model weights."),aGo=l(),Ife=a("p"),nGo=o("Examples:"),sGo=l(),f(jw.$$.fragment),lGo=l(),Je=a("div"),f(Dw.$$.fragment),iGo=l(),qfe=a("p"),dGo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cGo=l(),tn=a("p"),fGo=o("The model class to instantiate is selected based on the "),Nfe=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),jfe=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),Se=a("ul"),T2=a("li"),Gfe=a("strong"),FGo=o("data2vec-audio"),vGo=o(" \u2014 "),HD=a("a"),TGo=o("Data2VecAudioForSequenceClassification"),MGo=o(" (Data2VecAudio model)"),EGo=l(),M2=a("li"),Ofe=a("strong"),CGo=o("hubert"),wGo=o(" \u2014 "),UD=a("a"),AGo=o("HubertForSequenceClassification"),yGo=o(" (Hubert model)"),LGo=l(),E2=a("li"),Vfe=a("strong"),xGo=o("sew"),kGo=o(" \u2014 "),JD=a("a"),SGo=o("SEWForSequenceClassification"),RGo=o(" (SEW model)"),BGo=l(),C2=a("li"),Xfe=a("strong"),PGo=o("sew-d"),$Go=o(" \u2014 "),YD=a("a"),IGo=o("SEWDForSequenceClassification"),qGo=o(" (SEW-D model)"),NGo=l(),w2=a("li"),zfe=a("strong"),jGo=o("unispeech"),DGo=o(" \u2014 "),KD=a("a"),GGo=o("UniSpeechForSequenceClassification"),OGo=o(" (UniSpeech model)"),VGo=l(),A2=a("li"),Qfe=a("strong"),XGo=o("unispeech-sat"),zGo=o(" \u2014 "),ZD=a("a"),QGo=o("UniSpeechSatForSequenceClassification"),WGo=o(" (UniSpeechSat model)"),HGo=l(),y2=a("li"),Wfe=a("strong"),UGo=o("wav2vec2"),JGo=o(" \u2014 "),eG=a("a"),YGo=o("Wav2Vec2ForSequenceClassification"),KGo=o(" (Wav2Vec2 model)"),ZGo=l(),L2=a("li"),Hfe=a("strong"),eOo=o("wavlm"),oOo=o(" \u2014 "),oG=a("a"),rOo=o("WavLMForSequenceClassification"),tOo=o(" (WavLM model)"),aOo=l(),x2=a("p"),nOo=o("The model is set in evaluation mode by default using "),Ufe=a("code"),sOo=o("model.eval()"),lOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=a("code"),iOo=o("model.train()"),dOo=l(),Yfe=a("p"),cOo=o("Examples:"),fOo=l(),f(Gw.$$.fragment),IRe=l(),Nd=a("h2"),k2=a("a"),Kfe=a("span"),f(Ow.$$.fragment),mOo=l(),Zfe=a("span"),gOo=o("AutoModelForAudioFrameClassification"),qRe=l(),cr=a("div"),f(Vw.$$.fragment),hOo=l(),jd=a("p"),pOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rG=a("a"),_Oo=o("from_pretrained()"),uOo=o(" class method or the "),tG=a("a"),bOo=o("from_config()"),FOo=o(` class
method.`),vOo=l(),Xw=a("p"),TOo=o("This class cannot be instantiated directly using "),eme=a("code"),MOo=o("__init__()"),EOo=o(" (throws an error)."),COo=l(),at=a("div"),f(zw.$$.fragment),wOo=l(),ome=a("p"),AOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),yOo=l(),Dd=a("p"),LOo=o(`Note:
Loading a model from its configuration file does `),rme=a("strong"),xOo=o("not"),kOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=a("a"),SOo=o("from_pretrained()"),ROo=o(" to load the model weights."),BOo=l(),tme=a("p"),POo=o("Examples:"),$Oo=l(),f(Qw.$$.fragment),IOo=l(),Ye=a("div"),f(Ww.$$.fragment),qOo=l(),ame=a("p"),NOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jOo=l(),an=a("p"),DOo=o("The model class to instantiate is selected based on the "),nme=a("code"),GOo=o("model_type"),OOo=o(` property of the config object (either
passed as an argument or loaded from `),sme=a("code"),VOo=o("pretrained_model_name_or_path"),XOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=a("code"),zOo=o("pretrained_model_name_or_path"),QOo=o(":"),WOo=l(),nn=a("ul"),S2=a("li"),ime=a("strong"),HOo=o("data2vec-audio"),UOo=o(" \u2014 "),nG=a("a"),JOo=o("Data2VecAudioForAudioFrameClassification"),YOo=o(" (Data2VecAudio model)"),KOo=l(),R2=a("li"),dme=a("strong"),ZOo=o("unispeech-sat"),eVo=o(" \u2014 "),sG=a("a"),oVo=o("UniSpeechSatForAudioFrameClassification"),rVo=o(" (UniSpeechSat model)"),tVo=l(),B2=a("li"),cme=a("strong"),aVo=o("wav2vec2"),nVo=o(" \u2014 "),lG=a("a"),sVo=o("Wav2Vec2ForAudioFrameClassification"),lVo=o(" (Wav2Vec2 model)"),iVo=l(),P2=a("li"),fme=a("strong"),dVo=o("wavlm"),cVo=o(" \u2014 "),iG=a("a"),fVo=o("WavLMForAudioFrameClassification"),mVo=o(" (WavLM model)"),gVo=l(),$2=a("p"),hVo=o("The model is set in evaluation mode by default using "),mme=a("code"),pVo=o("model.eval()"),_Vo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),uVo=o("model.train()"),bVo=l(),hme=a("p"),FVo=o("Examples:"),vVo=l(),f(Hw.$$.fragment),NRe=l(),Gd=a("h2"),I2=a("a"),pme=a("span"),f(Uw.$$.fragment),TVo=l(),_me=a("span"),MVo=o("AutoModelForCTC"),jRe=l(),fr=a("div"),f(Jw.$$.fragment),EVo=l(),Od=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dG=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),cG=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),Yw=a("p"),kVo=o("This class cannot be instantiated directly using "),ume=a("code"),SVo=o("__init__()"),RVo=o(" (throws an error)."),BVo=l(),nt=a("div"),f(Kw.$$.fragment),PVo=l(),bme=a("p"),$Vo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IVo=l(),Vd=a("p"),qVo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),NVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),vme=a("p"),VVo=o("Examples:"),XVo=l(),f(Zw.$$.fragment),zVo=l(),Ke=a("div"),f(eA.$$.fragment),QVo=l(),Tme=a("p"),WVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),HVo=l(),sn=a("p"),UVo=o("The model class to instantiate is selected based on the "),Mme=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Eme=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),Re=a("ul"),q2=a("li"),wme=a("strong"),tXo=o("data2vec-audio"),aXo=o(" \u2014 "),mG=a("a"),nXo=o("Data2VecAudioForCTC"),sXo=o(" (Data2VecAudio model)"),lXo=l(),N2=a("li"),Ame=a("strong"),iXo=o("hubert"),dXo=o(" \u2014 "),gG=a("a"),cXo=o("HubertForCTC"),fXo=o(" (Hubert model)"),mXo=l(),j2=a("li"),yme=a("strong"),gXo=o("sew"),hXo=o(" \u2014 "),hG=a("a"),pXo=o("SEWForCTC"),_Xo=o(" (SEW model)"),uXo=l(),D2=a("li"),Lme=a("strong"),bXo=o("sew-d"),FXo=o(" \u2014 "),pG=a("a"),vXo=o("SEWDForCTC"),TXo=o(" (SEW-D model)"),MXo=l(),G2=a("li"),xme=a("strong"),EXo=o("unispeech"),CXo=o(" \u2014 "),_G=a("a"),wXo=o("UniSpeechForCTC"),AXo=o(" (UniSpeech model)"),yXo=l(),O2=a("li"),kme=a("strong"),LXo=o("unispeech-sat"),xXo=o(" \u2014 "),uG=a("a"),kXo=o("UniSpeechSatForCTC"),SXo=o(" (UniSpeechSat model)"),RXo=l(),V2=a("li"),Sme=a("strong"),BXo=o("wav2vec2"),PXo=o(" \u2014 "),bG=a("a"),$Xo=o("Wav2Vec2ForCTC"),IXo=o(" (Wav2Vec2 model)"),qXo=l(),X2=a("li"),Rme=a("strong"),NXo=o("wavlm"),jXo=o(" \u2014 "),FG=a("a"),DXo=o("WavLMForCTC"),GXo=o(" (WavLM model)"),OXo=l(),z2=a("p"),VXo=o("The model is set in evaluation mode by default using "),Bme=a("code"),XXo=o("model.eval()"),zXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=a("code"),QXo=o("model.train()"),WXo=l(),$me=a("p"),HXo=o("Examples:"),UXo=l(),f(oA.$$.fragment),DRe=l(),Xd=a("h2"),Q2=a("a"),Ime=a("span"),f(rA.$$.fragment),JXo=l(),qme=a("span"),YXo=o("AutoModelForSpeechSeq2Seq"),GRe=l(),mr=a("div"),f(tA.$$.fragment),KXo=l(),zd=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vG=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),TG=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),aA=a("p"),nzo=o("This class cannot be instantiated directly using "),Nme=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),st=a("div"),f(nA.$$.fragment),dzo=l(),jme=a("p"),czo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fzo=l(),Qd=a("p"),mzo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),pzo=o("from_pretrained()"),_zo=o(" to load the model weights."),uzo=l(),Gme=a("p"),bzo=o("Examples:"),Fzo=l(),f(sA.$$.fragment),vzo=l(),Ze=a("div"),f(lA.$$.fragment),Tzo=l(),Ome=a("p"),Mzo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ezo=l(),ln=a("p"),Czo=o("The model class to instantiate is selected based on the "),Vme=a("code"),wzo=o("model_type"),Azo=o(` property of the config object (either
passed as an argument or loaded from `),Xme=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),xzo=o("pretrained_model_name_or_path"),kzo=o(":"),Szo=l(),iA=a("ul"),W2=a("li"),Qme=a("strong"),Rzo=o("speech-encoder-decoder"),Bzo=o(" \u2014 "),EG=a("a"),Pzo=o("SpeechEncoderDecoderModel"),$zo=o(" (Speech Encoder decoder model)"),Izo=l(),H2=a("li"),Wme=a("strong"),qzo=o("speech_to_text"),Nzo=o(" \u2014 "),CG=a("a"),jzo=o("Speech2TextForConditionalGeneration"),Dzo=o(" (Speech2Text model)"),Gzo=l(),U2=a("p"),Ozo=o("The model is set in evaluation mode by default using "),Hme=a("code"),Vzo=o("model.eval()"),Xzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=a("code"),zzo=o("model.train()"),Qzo=l(),Jme=a("p"),Wzo=o("Examples:"),Hzo=l(),f(dA.$$.fragment),ORe=l(),Wd=a("h2"),J2=a("a"),Yme=a("span"),f(cA.$$.fragment),Uzo=l(),Kme=a("span"),Jzo=o("AutoModelForAudioXVector"),VRe=l(),gr=a("div"),f(fA.$$.fragment),Yzo=l(),Hd=a("p"),Kzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wG=a("a"),Zzo=o("from_pretrained()"),eQo=o(" class method or the "),AG=a("a"),oQo=o("from_config()"),rQo=o(` class
method.`),tQo=l(),mA=a("p"),aQo=o("This class cannot be instantiated directly using "),Zme=a("code"),nQo=o("__init__()"),sQo=o(" (throws an error)."),lQo=l(),lt=a("div"),f(gA.$$.fragment),iQo=l(),ege=a("p"),dQo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cQo=l(),Ud=a("p"),fQo=o(`Note:
Loading a model from its configuration file does `),oge=a("strong"),mQo=o("not"),gQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),hQo=o("from_pretrained()"),pQo=o(" to load the model weights."),_Qo=l(),rge=a("p"),uQo=o("Examples:"),bQo=l(),f(hA.$$.fragment),FQo=l(),eo=a("div"),f(pA.$$.fragment),vQo=l(),tge=a("p"),TQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),MQo=l(),dn=a("p"),EQo=o("The model class to instantiate is selected based on the "),age=a("code"),CQo=o("model_type"),wQo=o(` property of the config object (either
passed as an argument or loaded from `),nge=a("code"),AQo=o("pretrained_model_name_or_path"),yQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=a("code"),LQo=o("pretrained_model_name_or_path"),xQo=o(":"),kQo=l(),cn=a("ul"),Y2=a("li"),lge=a("strong"),SQo=o("data2vec-audio"),RQo=o(" \u2014 "),LG=a("a"),BQo=o("Data2VecAudioForXVector"),PQo=o(" (Data2VecAudio model)"),$Qo=l(),K2=a("li"),ige=a("strong"),IQo=o("unispeech-sat"),qQo=o(" \u2014 "),xG=a("a"),NQo=o("UniSpeechSatForXVector"),jQo=o(" (UniSpeechSat model)"),DQo=l(),Z2=a("li"),dge=a("strong"),GQo=o("wav2vec2"),OQo=o(" \u2014 "),kG=a("a"),VQo=o("Wav2Vec2ForXVector"),XQo=o(" (Wav2Vec2 model)"),zQo=l(),eF=a("li"),cge=a("strong"),QQo=o("wavlm"),WQo=o(" \u2014 "),SG=a("a"),HQo=o("WavLMForXVector"),UQo=o(" (WavLM model)"),JQo=l(),oF=a("p"),YQo=o("The model is set in evaluation mode by default using "),fge=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=a("code"),eWo=o("model.train()"),oWo=l(),gge=a("p"),rWo=o("Examples:"),tWo=l(),f(_A.$$.fragment),XRe=l(),Jd=a("h2"),rF=a("a"),hge=a("span"),f(uA.$$.fragment),aWo=l(),pge=a("span"),nWo=o("AutoModelForMaskedImageModeling"),zRe=l(),hr=a("div"),f(bA.$$.fragment),sWo=l(),Yd=a("p"),lWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RG=a("a"),iWo=o("from_pretrained()"),dWo=o(" class method or the "),BG=a("a"),cWo=o("from_config()"),fWo=o(` class
method.`),mWo=l(),FA=a("p"),gWo=o("This class cannot be instantiated directly using "),_ge=a("code"),hWo=o("__init__()"),pWo=o(" (throws an error)."),_Wo=l(),it=a("div"),f(vA.$$.fragment),uWo=l(),uge=a("p"),bWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),FWo=l(),Kd=a("p"),vWo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),TWo=o("not"),MWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=a("a"),EWo=o("from_pretrained()"),CWo=o(" to load the model weights."),wWo=l(),Fge=a("p"),AWo=o("Examples:"),yWo=l(),f(TA.$$.fragment),LWo=l(),oo=a("div"),f(MA.$$.fragment),xWo=l(),vge=a("p"),kWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),SWo=l(),fn=a("p"),RWo=o("The model class to instantiate is selected based on the "),Tge=a("code"),BWo=o("model_type"),PWo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),$Wo=o("pretrained_model_name_or_path"),IWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),qWo=o("pretrained_model_name_or_path"),NWo=o(":"),jWo=l(),Zd=a("ul"),tF=a("li"),Cge=a("strong"),DWo=o("deit"),GWo=o(" \u2014 "),$G=a("a"),OWo=o("DeiTForMaskedImageModeling"),VWo=o(" (DeiT model)"),XWo=l(),aF=a("li"),wge=a("strong"),zWo=o("swin"),QWo=o(" \u2014 "),IG=a("a"),WWo=o("SwinForMaskedImageModeling"),HWo=o(" (Swin model)"),UWo=l(),nF=a("li"),Age=a("strong"),JWo=o("vit"),YWo=o(" \u2014 "),qG=a("a"),KWo=o("ViTForMaskedImageModeling"),ZWo=o(" (ViT model)"),eHo=l(),sF=a("p"),oHo=o("The model is set in evaluation mode by default using "),yge=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),aHo=o("model.train()"),nHo=l(),xge=a("p"),sHo=o("Examples:"),lHo=l(),f(EA.$$.fragment),QRe=l(),ec=a("h2"),lF=a("a"),kge=a("span"),f(CA.$$.fragment),iHo=l(),Sge=a("span"),dHo=o("AutoModelForObjectDetection"),WRe=l(),pr=a("div"),f(wA.$$.fragment),cHo=l(),oc=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NG=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),jG=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),AA=a("p"),uHo=o("This class cannot be instantiated directly using "),Rge=a("code"),bHo=o("__init__()"),FHo=o(" (throws an error)."),vHo=l(),dt=a("div"),f(yA.$$.fragment),THo=l(),Bge=a("p"),MHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),EHo=l(),rc=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),$ge=a("p"),kHo=o("Examples:"),SHo=l(),f(LA.$$.fragment),RHo=l(),ro=a("div"),f(xA.$$.fragment),BHo=l(),Ige=a("p"),PHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),$Ho=l(),mn=a("p"),IHo=o("The model class to instantiate is selected based on the "),qge=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),Dge=a("ul"),iF=a("li"),Gge=a("strong"),XHo=o("detr"),zHo=o(" \u2014 "),GG=a("a"),QHo=o("DetrForObjectDetection"),WHo=o(" (DETR model)"),HHo=l(),dF=a("p"),UHo=o("The model is set in evaluation mode by default using "),Oge=a("code"),JHo=o("model.eval()"),YHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=a("code"),KHo=o("model.train()"),ZHo=l(),Xge=a("p"),eUo=o("Examples:"),oUo=l(),f(kA.$$.fragment),HRe=l(),tc=a("h2"),cF=a("a"),zge=a("span"),f(SA.$$.fragment),rUo=l(),Qge=a("span"),tUo=o("AutoModelForImageSegmentation"),URe=l(),_r=a("div"),f(RA.$$.fragment),aUo=l(),ac=a("p"),nUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OG=a("a"),sUo=o("from_pretrained()"),lUo=o(" class method or the "),VG=a("a"),iUo=o("from_config()"),dUo=o(` class
method.`),cUo=l(),BA=a("p"),fUo=o("This class cannot be instantiated directly using "),Wge=a("code"),mUo=o("__init__()"),gUo=o(" (throws an error)."),hUo=l(),ct=a("div"),f(PA.$$.fragment),pUo=l(),Hge=a("p"),_Uo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),uUo=l(),nc=a("p"),bUo=o(`Note:
Loading a model from its configuration file does `),Uge=a("strong"),FUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),TUo=o("from_pretrained()"),MUo=o(" to load the model weights."),EUo=l(),Jge=a("p"),CUo=o("Examples:"),wUo=l(),f($A.$$.fragment),AUo=l(),to=a("div"),f(IA.$$.fragment),yUo=l(),Yge=a("p"),LUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),xUo=l(),gn=a("p"),kUo=o("The model class to instantiate is selected based on the "),Kge=a("code"),SUo=o("model_type"),RUo=o(` property of the config object (either
passed as an argument or loaded from `),Zge=a("code"),BUo=o("pretrained_model_name_or_path"),PUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=a("code"),$Uo=o("pretrained_model_name_or_path"),IUo=o(":"),qUo=l(),ohe=a("ul"),fF=a("li"),rhe=a("strong"),NUo=o("detr"),jUo=o(" \u2014 "),zG=a("a"),DUo=o("DetrForSegmentation"),GUo=o(" (DETR model)"),OUo=l(),mF=a("p"),VUo=o("The model is set in evaluation mode by default using "),the=a("code"),XUo=o("model.eval()"),zUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),QUo=o("model.train()"),WUo=l(),nhe=a("p"),HUo=o("Examples:"),UUo=l(),f(qA.$$.fragment),JRe=l(),sc=a("h2"),gF=a("a"),she=a("span"),f(NA.$$.fragment),JUo=l(),lhe=a("span"),YUo=o("AutoModelForSemanticSegmentation"),YRe=l(),ur=a("div"),f(jA.$$.fragment),KUo=l(),lc=a("p"),ZUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QG=a("a"),eJo=o("from_pretrained()"),oJo=o(" class method or the "),WG=a("a"),rJo=o("from_config()"),tJo=o(` class
method.`),aJo=l(),DA=a("p"),nJo=o("This class cannot be instantiated directly using "),ihe=a("code"),sJo=o("__init__()"),lJo=o(" (throws an error)."),iJo=l(),ft=a("div"),f(GA.$$.fragment),dJo=l(),dhe=a("p"),cJo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fJo=l(),ic=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),che=a("strong"),gJo=o("not"),hJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),pJo=o("from_pretrained()"),_Jo=o(" to load the model weights."),uJo=l(),fhe=a("p"),bJo=o("Examples:"),FJo=l(),f(OA.$$.fragment),vJo=l(),ao=a("div"),f(VA.$$.fragment),TJo=l(),mhe=a("p"),MJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),EJo=l(),hn=a("p"),CJo=o("The model class to instantiate is selected based on the "),ghe=a("code"),wJo=o("model_type"),AJo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),yJo=o("pretrained_model_name_or_path"),LJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),xJo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),dc=a("ul"),hF=a("li"),_he=a("strong"),RJo=o("beit"),BJo=o(" \u2014 "),UG=a("a"),PJo=o("BeitForSemanticSegmentation"),$Jo=o(" (BEiT model)"),IJo=l(),pF=a("li"),uhe=a("strong"),qJo=o("dpt"),NJo=o(" \u2014 "),JG=a("a"),jJo=o("DPTForSemanticSegmentation"),DJo=o(" (DPT model)"),GJo=l(),_F=a("li"),bhe=a("strong"),OJo=o("segformer"),VJo=o(" \u2014 "),YG=a("a"),XJo=o("SegformerForSemanticSegmentation"),zJo=o(" (SegFormer model)"),QJo=l(),uF=a("p"),WJo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=a("code"),JJo=o("model.train()"),YJo=l(),The=a("p"),KJo=o("Examples:"),ZJo=l(),f(XA.$$.fragment),KRe=l(),cc=a("h2"),bF=a("a"),Mhe=a("span"),f(zA.$$.fragment),eYo=l(),Ehe=a("span"),oYo=o("AutoModelForInstanceSegmentation"),ZRe=l(),br=a("div"),f(QA.$$.fragment),rYo=l(),fc=a("p"),tYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KG=a("a"),aYo=o("from_pretrained()"),nYo=o(" class method or the "),ZG=a("a"),sYo=o("from_config()"),lYo=o(` class
method.`),iYo=l(),WA=a("p"),dYo=o("This class cannot be instantiated directly using "),Che=a("code"),cYo=o("__init__()"),fYo=o(" (throws an error)."),mYo=l(),mt=a("div"),f(HA.$$.fragment),gYo=l(),whe=a("p"),hYo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pYo=l(),mc=a("p"),_Yo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),uYo=o("not"),bYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),FYo=o("from_pretrained()"),vYo=o(" to load the model weights."),TYo=l(),yhe=a("p"),MYo=o("Examples:"),EYo=l(),f(UA.$$.fragment),CYo=l(),no=a("div"),f(JA.$$.fragment),wYo=l(),Lhe=a("p"),AYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),yYo=l(),pn=a("p"),LYo=o("The model class to instantiate is selected based on the "),xhe=a("code"),xYo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),khe=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=a("code"),BYo=o("pretrained_model_name_or_path"),PYo=o(":"),$Yo=l(),Rhe=a("ul"),FF=a("li"),Bhe=a("strong"),IYo=o("maskformer"),qYo=o(" \u2014 "),oO=a("a"),NYo=o("MaskFormerForInstanceSegmentation"),jYo=o(" (MaskFormer model)"),DYo=l(),vF=a("p"),GYo=o("The model is set in evaluation mode by default using "),Phe=a("code"),OYo=o("model.eval()"),VYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=a("code"),XYo=o("model.train()"),zYo=l(),Ihe=a("p"),QYo=o("Examples:"),WYo=l(),f(YA.$$.fragment),eBe=l(),gc=a("h2"),TF=a("a"),qhe=a("span"),f(KA.$$.fragment),HYo=l(),Nhe=a("span"),UYo=o("TFAutoModel"),oBe=l(),Fr=a("div"),f(ZA.$$.fragment),JYo=l(),hc=a("p"),YYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rO=a("a"),KYo=o("from_pretrained()"),ZYo=o(" class method or the "),tO=a("a"),eKo=o("from_config()"),oKo=o(` class
method.`),rKo=l(),e0=a("p"),tKo=o("This class cannot be instantiated directly using "),jhe=a("code"),aKo=o("__init__()"),nKo=o(" (throws an error)."),sKo=l(),gt=a("div"),f(o0.$$.fragment),lKo=l(),Dhe=a("p"),iKo=o("Instantiates one of the base model classes of the library from a configuration."),dKo=l(),pc=a("p"),cKo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),fKo=o("not"),mKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),gKo=o("from_pretrained()"),hKo=o(" to load the model weights."),pKo=l(),Ohe=a("p"),_Ko=o("Examples:"),uKo=l(),f(r0.$$.fragment),bKo=l(),ho=a("div"),f(t0.$$.fragment),FKo=l(),Vhe=a("p"),vKo=o("Instantiate one of the base model classes of the library from a pretrained model."),TKo=l(),_n=a("p"),MKo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),EKo=o("model_type"),CKo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(":"),xKo=l(),x=a("ul"),MF=a("li"),Whe=a("strong"),kKo=o("albert"),SKo=o(" \u2014 "),nO=a("a"),RKo=o("TFAlbertModel"),BKo=o(" (ALBERT model)"),PKo=l(),EF=a("li"),Hhe=a("strong"),$Ko=o("bart"),IKo=o(" \u2014 "),sO=a("a"),qKo=o("TFBartModel"),NKo=o(" (BART model)"),jKo=l(),CF=a("li"),Uhe=a("strong"),DKo=o("bert"),GKo=o(" \u2014 "),lO=a("a"),OKo=o("TFBertModel"),VKo=o(" (BERT model)"),XKo=l(),wF=a("li"),Jhe=a("strong"),zKo=o("blenderbot"),QKo=o(" \u2014 "),iO=a("a"),WKo=o("TFBlenderbotModel"),HKo=o(" (Blenderbot model)"),UKo=l(),AF=a("li"),Yhe=a("strong"),JKo=o("blenderbot-small"),YKo=o(" \u2014 "),dO=a("a"),KKo=o("TFBlenderbotSmallModel"),ZKo=o(" (BlenderbotSmall model)"),eZo=l(),yF=a("li"),Khe=a("strong"),oZo=o("camembert"),rZo=o(" \u2014 "),cO=a("a"),tZo=o("TFCamembertModel"),aZo=o(" (CamemBERT model)"),nZo=l(),LF=a("li"),Zhe=a("strong"),sZo=o("clip"),lZo=o(" \u2014 "),fO=a("a"),iZo=o("TFCLIPModel"),dZo=o(" (CLIP model)"),cZo=l(),xF=a("li"),epe=a("strong"),fZo=o("convbert"),mZo=o(" \u2014 "),mO=a("a"),gZo=o("TFConvBertModel"),hZo=o(" (ConvBERT model)"),pZo=l(),kF=a("li"),ope=a("strong"),_Zo=o("convnext"),uZo=o(" \u2014 "),gO=a("a"),bZo=o("TFConvNextModel"),FZo=o(" (ConvNext model)"),vZo=l(),SF=a("li"),rpe=a("strong"),TZo=o("ctrl"),MZo=o(" \u2014 "),hO=a("a"),EZo=o("TFCTRLModel"),CZo=o(" (CTRL model)"),wZo=l(),RF=a("li"),tpe=a("strong"),AZo=o("deberta"),yZo=o(" \u2014 "),pO=a("a"),LZo=o("TFDebertaModel"),xZo=o(" (DeBERTa model)"),kZo=l(),BF=a("li"),ape=a("strong"),SZo=o("deberta-v2"),RZo=o(" \u2014 "),_O=a("a"),BZo=o("TFDebertaV2Model"),PZo=o(" (DeBERTa-v2 model)"),$Zo=l(),PF=a("li"),npe=a("strong"),IZo=o("distilbert"),qZo=o(" \u2014 "),uO=a("a"),NZo=o("TFDistilBertModel"),jZo=o(" (DistilBERT model)"),DZo=l(),$F=a("li"),spe=a("strong"),GZo=o("dpr"),OZo=o(" \u2014 "),bO=a("a"),VZo=o("TFDPRQuestionEncoder"),XZo=o(" (DPR model)"),zZo=l(),IF=a("li"),lpe=a("strong"),QZo=o("electra"),WZo=o(" \u2014 "),FO=a("a"),HZo=o("TFElectraModel"),UZo=o(" (ELECTRA model)"),JZo=l(),qF=a("li"),ipe=a("strong"),YZo=o("flaubert"),KZo=o(" \u2014 "),vO=a("a"),ZZo=o("TFFlaubertModel"),eer=o(" (FlauBERT model)"),oer=l(),Gs=a("li"),dpe=a("strong"),rer=o("funnel"),ter=o(" \u2014 "),TO=a("a"),aer=o("TFFunnelModel"),ner=o(" or "),MO=a("a"),ser=o("TFFunnelBaseModel"),ler=o(" (Funnel Transformer model)"),ier=l(),NF=a("li"),cpe=a("strong"),der=o("gpt2"),cer=o(" \u2014 "),EO=a("a"),fer=o("TFGPT2Model"),mer=o(" (OpenAI GPT-2 model)"),ger=l(),jF=a("li"),fpe=a("strong"),her=o("gptj"),per=o(" \u2014 "),CO=a("a"),_er=o("TFGPTJModel"),uer=o(" (GPT-J model)"),ber=l(),DF=a("li"),mpe=a("strong"),Fer=o("hubert"),ver=o(" \u2014 "),wO=a("a"),Ter=o("TFHubertModel"),Mer=o(" (Hubert model)"),Eer=l(),GF=a("li"),gpe=a("strong"),Cer=o("layoutlm"),wer=o(" \u2014 "),AO=a("a"),Aer=o("TFLayoutLMModel"),yer=o(" (LayoutLM model)"),Ler=l(),OF=a("li"),hpe=a("strong"),xer=o("led"),ker=o(" \u2014 "),yO=a("a"),Ser=o("TFLEDModel"),Rer=o(" (LED model)"),Ber=l(),VF=a("li"),ppe=a("strong"),Per=o("longformer"),$er=o(" \u2014 "),LO=a("a"),Ier=o("TFLongformerModel"),qer=o(" (Longformer model)"),Ner=l(),XF=a("li"),_pe=a("strong"),jer=o("lxmert"),Der=o(" \u2014 "),xO=a("a"),Ger=o("TFLxmertModel"),Oer=o(" (LXMERT model)"),Ver=l(),zF=a("li"),upe=a("strong"),Xer=o("marian"),zer=o(" \u2014 "),kO=a("a"),Qer=o("TFMarianModel"),Wer=o(" (Marian model)"),Her=l(),QF=a("li"),bpe=a("strong"),Uer=o("mbart"),Jer=o(" \u2014 "),SO=a("a"),Yer=o("TFMBartModel"),Ker=o(" (mBART model)"),Zer=l(),WF=a("li"),Fpe=a("strong"),eor=o("mobilebert"),oor=o(" \u2014 "),RO=a("a"),ror=o("TFMobileBertModel"),tor=o(" (MobileBERT model)"),aor=l(),HF=a("li"),vpe=a("strong"),nor=o("mpnet"),sor=o(" \u2014 "),BO=a("a"),lor=o("TFMPNetModel"),ior=o(" (MPNet model)"),dor=l(),UF=a("li"),Tpe=a("strong"),cor=o("mt5"),mor=o(" \u2014 "),PO=a("a"),gor=o("TFMT5Model"),hor=o(" (mT5 model)"),por=l(),JF=a("li"),Mpe=a("strong"),_or=o("openai-gpt"),uor=o(" \u2014 "),$O=a("a"),bor=o("TFOpenAIGPTModel"),For=o(" (OpenAI GPT model)"),vor=l(),YF=a("li"),Epe=a("strong"),Tor=o("pegasus"),Mor=o(" \u2014 "),IO=a("a"),Eor=o("TFPegasusModel"),Cor=o(" (Pegasus model)"),wor=l(),KF=a("li"),Cpe=a("strong"),Aor=o("rembert"),yor=o(" \u2014 "),qO=a("a"),Lor=o("TFRemBertModel"),xor=o(" (RemBERT model)"),kor=l(),ZF=a("li"),wpe=a("strong"),Sor=o("roberta"),Ror=o(" \u2014 "),NO=a("a"),Bor=o("TFRobertaModel"),Por=o(" (RoBERTa model)"),$or=l(),ev=a("li"),Ape=a("strong"),Ior=o("roformer"),qor=o(" \u2014 "),jO=a("a"),Nor=o("TFRoFormerModel"),jor=o(" (RoFormer model)"),Dor=l(),ov=a("li"),ype=a("strong"),Gor=o("speech_to_text"),Oor=o(" \u2014 "),DO=a("a"),Vor=o("TFSpeech2TextModel"),Xor=o(" (Speech2Text model)"),zor=l(),rv=a("li"),Lpe=a("strong"),Qor=o("t5"),Wor=o(" \u2014 "),GO=a("a"),Hor=o("TFT5Model"),Uor=o(" (T5 model)"),Jor=l(),tv=a("li"),xpe=a("strong"),Yor=o("tapas"),Kor=o(" \u2014 "),OO=a("a"),Zor=o("TFTapasModel"),err=o(" (TAPAS model)"),orr=l(),av=a("li"),kpe=a("strong"),rrr=o("transfo-xl"),trr=o(" \u2014 "),VO=a("a"),arr=o("TFTransfoXLModel"),nrr=o(" (Transformer-XL model)"),srr=l(),nv=a("li"),Spe=a("strong"),lrr=o("vit"),irr=o(" \u2014 "),XO=a("a"),drr=o("TFViTModel"),crr=o(" (ViT model)"),frr=l(),sv=a("li"),Rpe=a("strong"),mrr=o("vit_mae"),grr=o(" \u2014 "),zO=a("a"),hrr=o("TFViTMAEModel"),prr=o(" (ViTMAE model)"),_rr=l(),lv=a("li"),Bpe=a("strong"),urr=o("wav2vec2"),brr=o(" \u2014 "),QO=a("a"),Frr=o("TFWav2Vec2Model"),vrr=o(" (Wav2Vec2 model)"),Trr=l(),iv=a("li"),Ppe=a("strong"),Mrr=o("xlm"),Err=o(" \u2014 "),WO=a("a"),Crr=o("TFXLMModel"),wrr=o(" (XLM model)"),Arr=l(),dv=a("li"),$pe=a("strong"),yrr=o("xlm-roberta"),Lrr=o(" \u2014 "),HO=a("a"),xrr=o("TFXLMRobertaModel"),krr=o(" (XLM-RoBERTa model)"),Srr=l(),cv=a("li"),Ipe=a("strong"),Rrr=o("xlnet"),Brr=o(" \u2014 "),UO=a("a"),Prr=o("TFXLNetModel"),$rr=o(" (XLNet model)"),Irr=l(),qpe=a("p"),qrr=o("Examples:"),Nrr=l(),f(a0.$$.fragment),rBe=l(),_c=a("h2"),fv=a("a"),Npe=a("span"),f(n0.$$.fragment),jrr=l(),jpe=a("span"),Drr=o("TFAutoModelForPreTraining"),tBe=l(),vr=a("div"),f(s0.$$.fragment),Grr=l(),uc=a("p"),Orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JO=a("a"),Vrr=o("from_pretrained()"),Xrr=o(" class method or the "),YO=a("a"),zrr=o("from_config()"),Qrr=o(` class
method.`),Wrr=l(),l0=a("p"),Hrr=o("This class cannot be instantiated directly using "),Dpe=a("code"),Urr=o("__init__()"),Jrr=o(" (throws an error)."),Yrr=l(),ht=a("div"),f(i0.$$.fragment),Krr=l(),Gpe=a("p"),Zrr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),etr=l(),bc=a("p"),otr=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),rtr=o("not"),ttr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),atr=o("from_pretrained()"),ntr=o(" to load the model weights."),str=l(),Vpe=a("p"),ltr=o("Examples:"),itr=l(),f(d0.$$.fragment),dtr=l(),po=a("div"),f(c0.$$.fragment),ctr=l(),Xpe=a("p"),ftr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),mtr=l(),un=a("p"),gtr=o("The model class to instantiate is selected based on the "),zpe=a("code"),htr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),_tr=o("pretrained_model_name_or_path"),utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=a("code"),btr=o("pretrained_model_name_or_path"),Ftr=o(":"),vtr=l(),H=a("ul"),mv=a("li"),Hpe=a("strong"),Ttr=o("albert"),Mtr=o(" \u2014 "),ZO=a("a"),Etr=o("TFAlbertForPreTraining"),Ctr=o(" (ALBERT model)"),wtr=l(),gv=a("li"),Upe=a("strong"),Atr=o("bart"),ytr=o(" \u2014 "),eV=a("a"),Ltr=o("TFBartForConditionalGeneration"),xtr=o(" (BART model)"),ktr=l(),hv=a("li"),Jpe=a("strong"),Str=o("bert"),Rtr=o(" \u2014 "),oV=a("a"),Btr=o("TFBertForPreTraining"),Ptr=o(" (BERT model)"),$tr=l(),pv=a("li"),Ype=a("strong"),Itr=o("camembert"),qtr=o(" \u2014 "),rV=a("a"),Ntr=o("TFCamembertForMaskedLM"),jtr=o(" (CamemBERT model)"),Dtr=l(),_v=a("li"),Kpe=a("strong"),Gtr=o("ctrl"),Otr=o(" \u2014 "),tV=a("a"),Vtr=o("TFCTRLLMHeadModel"),Xtr=o(" (CTRL model)"),ztr=l(),uv=a("li"),Zpe=a("strong"),Qtr=o("distilbert"),Wtr=o(" \u2014 "),aV=a("a"),Htr=o("TFDistilBertForMaskedLM"),Utr=o(" (DistilBERT model)"),Jtr=l(),bv=a("li"),e_e=a("strong"),Ytr=o("electra"),Ktr=o(" \u2014 "),nV=a("a"),Ztr=o("TFElectraForPreTraining"),ear=o(" (ELECTRA model)"),oar=l(),Fv=a("li"),o_e=a("strong"),rar=o("flaubert"),tar=o(" \u2014 "),sV=a("a"),aar=o("TFFlaubertWithLMHeadModel"),nar=o(" (FlauBERT model)"),sar=l(),vv=a("li"),r_e=a("strong"),lar=o("funnel"),iar=o(" \u2014 "),lV=a("a"),dar=o("TFFunnelForPreTraining"),car=o(" (Funnel Transformer model)"),far=l(),Tv=a("li"),t_e=a("strong"),mar=o("gpt2"),gar=o(" \u2014 "),iV=a("a"),har=o("TFGPT2LMHeadModel"),par=o(" (OpenAI GPT-2 model)"),_ar=l(),Mv=a("li"),a_e=a("strong"),uar=o("layoutlm"),bar=o(" \u2014 "),dV=a("a"),Far=o("TFLayoutLMForMaskedLM"),Tar=o(" (LayoutLM model)"),Mar=l(),Ev=a("li"),n_e=a("strong"),Ear=o("lxmert"),Car=o(" \u2014 "),cV=a("a"),war=o("TFLxmertForPreTraining"),Aar=o(" (LXMERT model)"),yar=l(),Cv=a("li"),s_e=a("strong"),Lar=o("mobilebert"),xar=o(" \u2014 "),fV=a("a"),kar=o("TFMobileBertForPreTraining"),Sar=o(" (MobileBERT model)"),Rar=l(),wv=a("li"),l_e=a("strong"),Bar=o("mpnet"),Par=o(" \u2014 "),mV=a("a"),$ar=o("TFMPNetForMaskedLM"),Iar=o(" (MPNet model)"),qar=l(),Av=a("li"),i_e=a("strong"),Nar=o("openai-gpt"),jar=o(" \u2014 "),gV=a("a"),Dar=o("TFOpenAIGPTLMHeadModel"),Gar=o(" (OpenAI GPT model)"),Oar=l(),yv=a("li"),d_e=a("strong"),Var=o("roberta"),Xar=o(" \u2014 "),hV=a("a"),zar=o("TFRobertaForMaskedLM"),Qar=o(" (RoBERTa model)"),War=l(),Lv=a("li"),c_e=a("strong"),Har=o("t5"),Uar=o(" \u2014 "),pV=a("a"),Jar=o("TFT5ForConditionalGeneration"),Yar=o(" (T5 model)"),Kar=l(),xv=a("li"),f_e=a("strong"),Zar=o("tapas"),enr=o(" \u2014 "),_V=a("a"),onr=o("TFTapasForMaskedLM"),rnr=o(" (TAPAS model)"),tnr=l(),kv=a("li"),m_e=a("strong"),anr=o("transfo-xl"),nnr=o(" \u2014 "),uV=a("a"),snr=o("TFTransfoXLLMHeadModel"),lnr=o(" (Transformer-XL model)"),inr=l(),Sv=a("li"),g_e=a("strong"),dnr=o("vit_mae"),cnr=o(" \u2014 "),bV=a("a"),fnr=o("TFViTMAEForPreTraining"),mnr=o(" (ViTMAE model)"),gnr=l(),Rv=a("li"),h_e=a("strong"),hnr=o("xlm"),pnr=o(" \u2014 "),FV=a("a"),_nr=o("TFXLMWithLMHeadModel"),unr=o(" (XLM model)"),bnr=l(),Bv=a("li"),p_e=a("strong"),Fnr=o("xlm-roberta"),vnr=o(" \u2014 "),vV=a("a"),Tnr=o("TFXLMRobertaForMaskedLM"),Mnr=o(" (XLM-RoBERTa model)"),Enr=l(),Pv=a("li"),__e=a("strong"),Cnr=o("xlnet"),wnr=o(" \u2014 "),TV=a("a"),Anr=o("TFXLNetLMHeadModel"),ynr=o(" (XLNet model)"),Lnr=l(),u_e=a("p"),xnr=o("Examples:"),knr=l(),f(f0.$$.fragment),aBe=l(),Fc=a("h2"),$v=a("a"),b_e=a("span"),f(m0.$$.fragment),Snr=l(),F_e=a("span"),Rnr=o("TFAutoModelForCausalLM"),nBe=l(),Tr=a("div"),f(g0.$$.fragment),Bnr=l(),vc=a("p"),Pnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MV=a("a"),$nr=o("from_pretrained()"),Inr=o(" class method or the "),EV=a("a"),qnr=o("from_config()"),Nnr=o(` class
method.`),jnr=l(),h0=a("p"),Dnr=o("This class cannot be instantiated directly using "),v_e=a("code"),Gnr=o("__init__()"),Onr=o(" (throws an error)."),Vnr=l(),pt=a("div"),f(p0.$$.fragment),Xnr=l(),T_e=a("p"),znr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qnr=l(),Tc=a("p"),Wnr=o(`Note:
Loading a model from its configuration file does `),M_e=a("strong"),Hnr=o("not"),Unr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),Jnr=o("from_pretrained()"),Ynr=o(" to load the model weights."),Knr=l(),E_e=a("p"),Znr=o("Examples:"),esr=l(),f(_0.$$.fragment),osr=l(),_o=a("div"),f(u0.$$.fragment),rsr=l(),C_e=a("p"),tsr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),asr=l(),bn=a("p"),nsr=o("The model class to instantiate is selected based on the "),w_e=a("code"),ssr=o("model_type"),lsr=o(` property of the config object (either
passed as an argument or loaded from `),A_e=a("code"),isr=o("pretrained_model_name_or_path"),dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=a("code"),csr=o("pretrained_model_name_or_path"),fsr=o(":"),msr=l(),ce=a("ul"),Iv=a("li"),L_e=a("strong"),gsr=o("bert"),hsr=o(" \u2014 "),wV=a("a"),psr=o("TFBertLMHeadModel"),_sr=o(" (BERT model)"),usr=l(),qv=a("li"),x_e=a("strong"),bsr=o("camembert"),Fsr=o(" \u2014 "),AV=a("a"),vsr=o("TFCamembertForCausalLM"),Tsr=o(" (CamemBERT model)"),Msr=l(),Nv=a("li"),k_e=a("strong"),Esr=o("ctrl"),Csr=o(" \u2014 "),yV=a("a"),wsr=o("TFCTRLLMHeadModel"),Asr=o(" (CTRL model)"),ysr=l(),jv=a("li"),S_e=a("strong"),Lsr=o("gpt2"),xsr=o(" \u2014 "),LV=a("a"),ksr=o("TFGPT2LMHeadModel"),Ssr=o(" (OpenAI GPT-2 model)"),Rsr=l(),Dv=a("li"),R_e=a("strong"),Bsr=o("gptj"),Psr=o(" \u2014 "),xV=a("a"),$sr=o("TFGPTJForCausalLM"),Isr=o(" (GPT-J model)"),qsr=l(),Gv=a("li"),B_e=a("strong"),Nsr=o("openai-gpt"),jsr=o(" \u2014 "),kV=a("a"),Dsr=o("TFOpenAIGPTLMHeadModel"),Gsr=o(" (OpenAI GPT model)"),Osr=l(),Ov=a("li"),P_e=a("strong"),Vsr=o("rembert"),Xsr=o(" \u2014 "),SV=a("a"),zsr=o("TFRemBertForCausalLM"),Qsr=o(" (RemBERT model)"),Wsr=l(),Vv=a("li"),$_e=a("strong"),Hsr=o("roberta"),Usr=o(" \u2014 "),RV=a("a"),Jsr=o("TFRobertaForCausalLM"),Ysr=o(" (RoBERTa model)"),Ksr=l(),Xv=a("li"),I_e=a("strong"),Zsr=o("roformer"),elr=o(" \u2014 "),BV=a("a"),olr=o("TFRoFormerForCausalLM"),rlr=o(" (RoFormer model)"),tlr=l(),zv=a("li"),q_e=a("strong"),alr=o("transfo-xl"),nlr=o(" \u2014 "),PV=a("a"),slr=o("TFTransfoXLLMHeadModel"),llr=o(" (Transformer-XL model)"),ilr=l(),Qv=a("li"),N_e=a("strong"),dlr=o("xlm"),clr=o(" \u2014 "),$V=a("a"),flr=o("TFXLMWithLMHeadModel"),mlr=o(" (XLM model)"),glr=l(),Wv=a("li"),j_e=a("strong"),hlr=o("xlnet"),plr=o(" \u2014 "),IV=a("a"),_lr=o("TFXLNetLMHeadModel"),ulr=o(" (XLNet model)"),blr=l(),D_e=a("p"),Flr=o("Examples:"),vlr=l(),f(b0.$$.fragment),sBe=l(),Mc=a("h2"),Hv=a("a"),G_e=a("span"),f(F0.$$.fragment),Tlr=l(),O_e=a("span"),Mlr=o("TFAutoModelForImageClassification"),lBe=l(),Mr=a("div"),f(v0.$$.fragment),Elr=l(),Ec=a("p"),Clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=a("a"),wlr=o("from_pretrained()"),Alr=o(" class method or the "),NV=a("a"),ylr=o("from_config()"),Llr=o(` class
method.`),xlr=l(),T0=a("p"),klr=o("This class cannot be instantiated directly using "),V_e=a("code"),Slr=o("__init__()"),Rlr=o(" (throws an error)."),Blr=l(),_t=a("div"),f(M0.$$.fragment),Plr=l(),X_e=a("p"),$lr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ilr=l(),Cc=a("p"),qlr=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),Nlr=o("not"),jlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),Dlr=o("from_pretrained()"),Glr=o(" to load the model weights."),Olr=l(),Q_e=a("p"),Vlr=o("Examples:"),Xlr=l(),f(E0.$$.fragment),zlr=l(),uo=a("div"),f(C0.$$.fragment),Qlr=l(),W_e=a("p"),Wlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hlr=l(),Fn=a("p"),Ulr=o("The model class to instantiate is selected based on the "),H_e=a("code"),Jlr=o("model_type"),Ylr=o(` property of the config object (either
passed as an argument or loaded from `),U_e=a("code"),Klr=o("pretrained_model_name_or_path"),Zlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=a("code"),eir=o("pretrained_model_name_or_path"),oir=o(":"),rir=l(),w0=a("ul"),Uv=a("li"),Y_e=a("strong"),tir=o("convnext"),air=o(" \u2014 "),DV=a("a"),nir=o("TFConvNextForImageClassification"),sir=o(" (ConvNext model)"),lir=l(),Jv=a("li"),K_e=a("strong"),iir=o("vit"),dir=o(" \u2014 "),GV=a("a"),cir=o("TFViTForImageClassification"),fir=o(" (ViT model)"),mir=l(),Z_e=a("p"),gir=o("Examples:"),hir=l(),f(A0.$$.fragment),iBe=l(),wc=a("h2"),Yv=a("a"),eue=a("span"),f(y0.$$.fragment),pir=l(),oue=a("span"),_ir=o("TFAutoModelForMaskedLM"),dBe=l(),Er=a("div"),f(L0.$$.fragment),uir=l(),Ac=a("p"),bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OV=a("a"),Fir=o("from_pretrained()"),vir=o(" class method or the "),VV=a("a"),Tir=o("from_config()"),Mir=o(` class
method.`),Eir=l(),x0=a("p"),Cir=o("This class cannot be instantiated directly using "),rue=a("code"),wir=o("__init__()"),Air=o(" (throws an error)."),yir=l(),ut=a("div"),f(k0.$$.fragment),Lir=l(),tue=a("p"),xir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kir=l(),yc=a("p"),Sir=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),Rir=o("not"),Bir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),Pir=o("from_pretrained()"),$ir=o(" to load the model weights."),Iir=l(),nue=a("p"),qir=o("Examples:"),Nir=l(),f(S0.$$.fragment),jir=l(),bo=a("div"),f(R0.$$.fragment),Dir=l(),sue=a("p"),Gir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Oir=l(),vn=a("p"),Vir=o("The model class to instantiate is selected based on the "),lue=a("code"),Xir=o("model_type"),zir=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),Qir=o("pretrained_model_name_or_path"),Wir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),Hir=o("pretrained_model_name_or_path"),Uir=o(":"),Jir=l(),J=a("ul"),Kv=a("li"),cue=a("strong"),Yir=o("albert"),Kir=o(" \u2014 "),zV=a("a"),Zir=o("TFAlbertForMaskedLM"),edr=o(" (ALBERT model)"),odr=l(),Zv=a("li"),fue=a("strong"),rdr=o("bert"),tdr=o(" \u2014 "),QV=a("a"),adr=o("TFBertForMaskedLM"),ndr=o(" (BERT model)"),sdr=l(),e6=a("li"),mue=a("strong"),ldr=o("camembert"),idr=o(" \u2014 "),WV=a("a"),ddr=o("TFCamembertForMaskedLM"),cdr=o(" (CamemBERT model)"),fdr=l(),o6=a("li"),gue=a("strong"),mdr=o("convbert"),gdr=o(" \u2014 "),HV=a("a"),hdr=o("TFConvBertForMaskedLM"),pdr=o(" (ConvBERT model)"),_dr=l(),r6=a("li"),hue=a("strong"),udr=o("deberta"),bdr=o(" \u2014 "),UV=a("a"),Fdr=o("TFDebertaForMaskedLM"),vdr=o(" (DeBERTa model)"),Tdr=l(),t6=a("li"),pue=a("strong"),Mdr=o("deberta-v2"),Edr=o(" \u2014 "),JV=a("a"),Cdr=o("TFDebertaV2ForMaskedLM"),wdr=o(" (DeBERTa-v2 model)"),Adr=l(),a6=a("li"),_ue=a("strong"),ydr=o("distilbert"),Ldr=o(" \u2014 "),YV=a("a"),xdr=o("TFDistilBertForMaskedLM"),kdr=o(" (DistilBERT model)"),Sdr=l(),n6=a("li"),uue=a("strong"),Rdr=o("electra"),Bdr=o(" \u2014 "),KV=a("a"),Pdr=o("TFElectraForMaskedLM"),$dr=o(" (ELECTRA model)"),Idr=l(),s6=a("li"),bue=a("strong"),qdr=o("flaubert"),Ndr=o(" \u2014 "),ZV=a("a"),jdr=o("TFFlaubertWithLMHeadModel"),Ddr=o(" (FlauBERT model)"),Gdr=l(),l6=a("li"),Fue=a("strong"),Odr=o("funnel"),Vdr=o(" \u2014 "),eX=a("a"),Xdr=o("TFFunnelForMaskedLM"),zdr=o(" (Funnel Transformer model)"),Qdr=l(),i6=a("li"),vue=a("strong"),Wdr=o("layoutlm"),Hdr=o(" \u2014 "),oX=a("a"),Udr=o("TFLayoutLMForMaskedLM"),Jdr=o(" (LayoutLM model)"),Ydr=l(),d6=a("li"),Tue=a("strong"),Kdr=o("longformer"),Zdr=o(" \u2014 "),rX=a("a"),ecr=o("TFLongformerForMaskedLM"),ocr=o(" (Longformer model)"),rcr=l(),c6=a("li"),Mue=a("strong"),tcr=o("mobilebert"),acr=o(" \u2014 "),tX=a("a"),ncr=o("TFMobileBertForMaskedLM"),scr=o(" (MobileBERT model)"),lcr=l(),f6=a("li"),Eue=a("strong"),icr=o("mpnet"),dcr=o(" \u2014 "),aX=a("a"),ccr=o("TFMPNetForMaskedLM"),fcr=o(" (MPNet model)"),mcr=l(),m6=a("li"),Cue=a("strong"),gcr=o("rembert"),hcr=o(" \u2014 "),nX=a("a"),pcr=o("TFRemBertForMaskedLM"),_cr=o(" (RemBERT model)"),ucr=l(),g6=a("li"),wue=a("strong"),bcr=o("roberta"),Fcr=o(" \u2014 "),sX=a("a"),vcr=o("TFRobertaForMaskedLM"),Tcr=o(" (RoBERTa model)"),Mcr=l(),h6=a("li"),Aue=a("strong"),Ecr=o("roformer"),Ccr=o(" \u2014 "),lX=a("a"),wcr=o("TFRoFormerForMaskedLM"),Acr=o(" (RoFormer model)"),ycr=l(),p6=a("li"),yue=a("strong"),Lcr=o("tapas"),xcr=o(" \u2014 "),iX=a("a"),kcr=o("TFTapasForMaskedLM"),Scr=o(" (TAPAS model)"),Rcr=l(),_6=a("li"),Lue=a("strong"),Bcr=o("xlm"),Pcr=o(" \u2014 "),dX=a("a"),$cr=o("TFXLMWithLMHeadModel"),Icr=o(" (XLM model)"),qcr=l(),u6=a("li"),xue=a("strong"),Ncr=o("xlm-roberta"),jcr=o(" \u2014 "),cX=a("a"),Dcr=o("TFXLMRobertaForMaskedLM"),Gcr=o(" (XLM-RoBERTa model)"),Ocr=l(),kue=a("p"),Vcr=o("Examples:"),Xcr=l(),f(B0.$$.fragment),cBe=l(),Lc=a("h2"),b6=a("a"),Sue=a("span"),f(P0.$$.fragment),zcr=l(),Rue=a("span"),Qcr=o("TFAutoModelForSeq2SeqLM"),fBe=l(),Cr=a("div"),f($0.$$.fragment),Wcr=l(),xc=a("p"),Hcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fX=a("a"),Ucr=o("from_pretrained()"),Jcr=o(" class method or the "),mX=a("a"),Ycr=o("from_config()"),Kcr=o(` class
method.`),Zcr=l(),I0=a("p"),efr=o("This class cannot be instantiated directly using "),Bue=a("code"),ofr=o("__init__()"),rfr=o(" (throws an error)."),tfr=l(),bt=a("div"),f(q0.$$.fragment),afr=l(),Pue=a("p"),nfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sfr=l(),kc=a("p"),lfr=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),ifr=o("not"),dfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),cfr=o("from_pretrained()"),ffr=o(" to load the model weights."),mfr=l(),Iue=a("p"),gfr=o("Examples:"),hfr=l(),f(N0.$$.fragment),pfr=l(),Fo=a("div"),f(j0.$$.fragment),_fr=l(),que=a("p"),ufr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bfr=l(),Tn=a("p"),Ffr=o("The model class to instantiate is selected based on the "),Nue=a("code"),vfr=o("model_type"),Tfr=o(` property of the config object (either
passed as an argument or loaded from `),jue=a("code"),Mfr=o("pretrained_model_name_or_path"),Efr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=a("code"),Cfr=o("pretrained_model_name_or_path"),wfr=o(":"),Afr=l(),ue=a("ul"),F6=a("li"),Gue=a("strong"),yfr=o("bart"),Lfr=o(" \u2014 "),hX=a("a"),xfr=o("TFBartForConditionalGeneration"),kfr=o(" (BART model)"),Sfr=l(),v6=a("li"),Oue=a("strong"),Rfr=o("blenderbot"),Bfr=o(" \u2014 "),pX=a("a"),Pfr=o("TFBlenderbotForConditionalGeneration"),$fr=o(" (Blenderbot model)"),Ifr=l(),T6=a("li"),Vue=a("strong"),qfr=o("blenderbot-small"),Nfr=o(" \u2014 "),_X=a("a"),jfr=o("TFBlenderbotSmallForConditionalGeneration"),Dfr=o(" (BlenderbotSmall model)"),Gfr=l(),M6=a("li"),Xue=a("strong"),Ofr=o("encoder-decoder"),Vfr=o(" \u2014 "),uX=a("a"),Xfr=o("TFEncoderDecoderModel"),zfr=o(" (Encoder decoder model)"),Qfr=l(),E6=a("li"),zue=a("strong"),Wfr=o("led"),Hfr=o(" \u2014 "),bX=a("a"),Ufr=o("TFLEDForConditionalGeneration"),Jfr=o(" (LED model)"),Yfr=l(),C6=a("li"),Que=a("strong"),Kfr=o("marian"),Zfr=o(" \u2014 "),FX=a("a"),emr=o("TFMarianMTModel"),omr=o(" (Marian model)"),rmr=l(),w6=a("li"),Wue=a("strong"),tmr=o("mbart"),amr=o(" \u2014 "),vX=a("a"),nmr=o("TFMBartForConditionalGeneration"),smr=o(" (mBART model)"),lmr=l(),A6=a("li"),Hue=a("strong"),imr=o("mt5"),dmr=o(" \u2014 "),TX=a("a"),cmr=o("TFMT5ForConditionalGeneration"),fmr=o(" (mT5 model)"),mmr=l(),y6=a("li"),Uue=a("strong"),gmr=o("pegasus"),hmr=o(" \u2014 "),MX=a("a"),pmr=o("TFPegasusForConditionalGeneration"),_mr=o(" (Pegasus model)"),umr=l(),L6=a("li"),Jue=a("strong"),bmr=o("t5"),Fmr=o(" \u2014 "),EX=a("a"),vmr=o("TFT5ForConditionalGeneration"),Tmr=o(" (T5 model)"),Mmr=l(),Yue=a("p"),Emr=o("Examples:"),Cmr=l(),f(D0.$$.fragment),mBe=l(),Sc=a("h2"),x6=a("a"),Kue=a("span"),f(G0.$$.fragment),wmr=l(),Zue=a("span"),Amr=o("TFAutoModelForSequenceClassification"),gBe=l(),wr=a("div"),f(O0.$$.fragment),ymr=l(),Rc=a("p"),Lmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CX=a("a"),xmr=o("from_pretrained()"),kmr=o(" class method or the "),wX=a("a"),Smr=o("from_config()"),Rmr=o(` class
method.`),Bmr=l(),V0=a("p"),Pmr=o("This class cannot be instantiated directly using "),e1e=a("code"),$mr=o("__init__()"),Imr=o(" (throws an error)."),qmr=l(),Ft=a("div"),f(X0.$$.fragment),Nmr=l(),o1e=a("p"),jmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dmr=l(),Bc=a("p"),Gmr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),Omr=o("not"),Vmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),Xmr=o("from_pretrained()"),zmr=o(" to load the model weights."),Qmr=l(),t1e=a("p"),Wmr=o("Examples:"),Hmr=l(),f(z0.$$.fragment),Umr=l(),vo=a("div"),f(Q0.$$.fragment),Jmr=l(),a1e=a("p"),Ymr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kmr=l(),Mn=a("p"),Zmr=o("The model class to instantiate is selected based on the "),n1e=a("code"),egr=o("model_type"),ogr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(":"),sgr=l(),V=a("ul"),k6=a("li"),i1e=a("strong"),lgr=o("albert"),igr=o(" \u2014 "),yX=a("a"),dgr=o("TFAlbertForSequenceClassification"),cgr=o(" (ALBERT model)"),fgr=l(),S6=a("li"),d1e=a("strong"),mgr=o("bert"),ggr=o(" \u2014 "),LX=a("a"),hgr=o("TFBertForSequenceClassification"),pgr=o(" (BERT model)"),_gr=l(),R6=a("li"),c1e=a("strong"),ugr=o("camembert"),bgr=o(" \u2014 "),xX=a("a"),Fgr=o("TFCamembertForSequenceClassification"),vgr=o(" (CamemBERT model)"),Tgr=l(),B6=a("li"),f1e=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),kX=a("a"),Cgr=o("TFConvBertForSequenceClassification"),wgr=o(" (ConvBERT model)"),Agr=l(),P6=a("li"),m1e=a("strong"),ygr=o("ctrl"),Lgr=o(" \u2014 "),SX=a("a"),xgr=o("TFCTRLForSequenceClassification"),kgr=o(" (CTRL model)"),Sgr=l(),$6=a("li"),g1e=a("strong"),Rgr=o("deberta"),Bgr=o(" \u2014 "),RX=a("a"),Pgr=o("TFDebertaForSequenceClassification"),$gr=o(" (DeBERTa model)"),Igr=l(),I6=a("li"),h1e=a("strong"),qgr=o("deberta-v2"),Ngr=o(" \u2014 "),BX=a("a"),jgr=o("TFDebertaV2ForSequenceClassification"),Dgr=o(" (DeBERTa-v2 model)"),Ggr=l(),q6=a("li"),p1e=a("strong"),Ogr=o("distilbert"),Vgr=o(" \u2014 "),PX=a("a"),Xgr=o("TFDistilBertForSequenceClassification"),zgr=o(" (DistilBERT model)"),Qgr=l(),N6=a("li"),_1e=a("strong"),Wgr=o("electra"),Hgr=o(" \u2014 "),$X=a("a"),Ugr=o("TFElectraForSequenceClassification"),Jgr=o(" (ELECTRA model)"),Ygr=l(),j6=a("li"),u1e=a("strong"),Kgr=o("flaubert"),Zgr=o(" \u2014 "),IX=a("a"),ehr=o("TFFlaubertForSequenceClassification"),ohr=o(" (FlauBERT model)"),rhr=l(),D6=a("li"),b1e=a("strong"),thr=o("funnel"),ahr=o(" \u2014 "),qX=a("a"),nhr=o("TFFunnelForSequenceClassification"),shr=o(" (Funnel Transformer model)"),lhr=l(),G6=a("li"),F1e=a("strong"),ihr=o("gpt2"),dhr=o(" \u2014 "),NX=a("a"),chr=o("TFGPT2ForSequenceClassification"),fhr=o(" (OpenAI GPT-2 model)"),mhr=l(),O6=a("li"),v1e=a("strong"),ghr=o("gptj"),hhr=o(" \u2014 "),jX=a("a"),phr=o("TFGPTJForSequenceClassification"),_hr=o(" (GPT-J model)"),uhr=l(),V6=a("li"),T1e=a("strong"),bhr=o("layoutlm"),Fhr=o(" \u2014 "),DX=a("a"),vhr=o("TFLayoutLMForSequenceClassification"),Thr=o(" (LayoutLM model)"),Mhr=l(),X6=a("li"),M1e=a("strong"),Ehr=o("longformer"),Chr=o(" \u2014 "),GX=a("a"),whr=o("TFLongformerForSequenceClassification"),Ahr=o(" (Longformer model)"),yhr=l(),z6=a("li"),E1e=a("strong"),Lhr=o("mobilebert"),xhr=o(" \u2014 "),OX=a("a"),khr=o("TFMobileBertForSequenceClassification"),Shr=o(" (MobileBERT model)"),Rhr=l(),Q6=a("li"),C1e=a("strong"),Bhr=o("mpnet"),Phr=o(" \u2014 "),VX=a("a"),$hr=o("TFMPNetForSequenceClassification"),Ihr=o(" (MPNet model)"),qhr=l(),W6=a("li"),w1e=a("strong"),Nhr=o("openai-gpt"),jhr=o(" \u2014 "),XX=a("a"),Dhr=o("TFOpenAIGPTForSequenceClassification"),Ghr=o(" (OpenAI GPT model)"),Ohr=l(),H6=a("li"),A1e=a("strong"),Vhr=o("rembert"),Xhr=o(" \u2014 "),zX=a("a"),zhr=o("TFRemBertForSequenceClassification"),Qhr=o(" (RemBERT model)"),Whr=l(),U6=a("li"),y1e=a("strong"),Hhr=o("roberta"),Uhr=o(" \u2014 "),QX=a("a"),Jhr=o("TFRobertaForSequenceClassification"),Yhr=o(" (RoBERTa model)"),Khr=l(),J6=a("li"),L1e=a("strong"),Zhr=o("roformer"),epr=o(" \u2014 "),WX=a("a"),opr=o("TFRoFormerForSequenceClassification"),rpr=o(" (RoFormer model)"),tpr=l(),Y6=a("li"),x1e=a("strong"),apr=o("tapas"),npr=o(" \u2014 "),HX=a("a"),spr=o("TFTapasForSequenceClassification"),lpr=o(" (TAPAS model)"),ipr=l(),K6=a("li"),k1e=a("strong"),dpr=o("transfo-xl"),cpr=o(" \u2014 "),UX=a("a"),fpr=o("TFTransfoXLForSequenceClassification"),mpr=o(" (Transformer-XL model)"),gpr=l(),Z6=a("li"),S1e=a("strong"),hpr=o("xlm"),ppr=o(" \u2014 "),JX=a("a"),_pr=o("TFXLMForSequenceClassification"),upr=o(" (XLM model)"),bpr=l(),eT=a("li"),R1e=a("strong"),Fpr=o("xlm-roberta"),vpr=o(" \u2014 "),YX=a("a"),Tpr=o("TFXLMRobertaForSequenceClassification"),Mpr=o(" (XLM-RoBERTa model)"),Epr=l(),oT=a("li"),B1e=a("strong"),Cpr=o("xlnet"),wpr=o(" \u2014 "),KX=a("a"),Apr=o("TFXLNetForSequenceClassification"),ypr=o(" (XLNet model)"),Lpr=l(),P1e=a("p"),xpr=o("Examples:"),kpr=l(),f(W0.$$.fragment),hBe=l(),Pc=a("h2"),rT=a("a"),$1e=a("span"),f(H0.$$.fragment),Spr=l(),I1e=a("span"),Rpr=o("TFAutoModelForMultipleChoice"),pBe=l(),Ar=a("div"),f(U0.$$.fragment),Bpr=l(),$c=a("p"),Ppr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=a("a"),$pr=o("from_pretrained()"),Ipr=o(" class method or the "),ez=a("a"),qpr=o("from_config()"),Npr=o(` class
method.`),jpr=l(),J0=a("p"),Dpr=o("This class cannot be instantiated directly using "),q1e=a("code"),Gpr=o("__init__()"),Opr=o(" (throws an error)."),Vpr=l(),vt=a("div"),f(Y0.$$.fragment),Xpr=l(),N1e=a("p"),zpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qpr=l(),Ic=a("p"),Wpr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),Hpr=o("not"),Upr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),Jpr=o("from_pretrained()"),Ypr=o(" to load the model weights."),Kpr=l(),D1e=a("p"),Zpr=o("Examples:"),e_r=l(),f(K0.$$.fragment),o_r=l(),To=a("div"),f(Z0.$$.fragment),r_r=l(),G1e=a("p"),t_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a_r=l(),En=a("p"),n_r=o("The model class to instantiate is selected based on the "),O1e=a("code"),s_r=o("model_type"),l_r=o(` property of the config object (either
passed as an argument or loaded from `),V1e=a("code"),i_r=o("pretrained_model_name_or_path"),d_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(":"),m_r=l(),ne=a("ul"),tT=a("li"),z1e=a("strong"),g_r=o("albert"),h_r=o(" \u2014 "),rz=a("a"),p_r=o("TFAlbertForMultipleChoice"),__r=o(" (ALBERT model)"),u_r=l(),aT=a("li"),Q1e=a("strong"),b_r=o("bert"),F_r=o(" \u2014 "),tz=a("a"),v_r=o("TFBertForMultipleChoice"),T_r=o(" (BERT model)"),M_r=l(),nT=a("li"),W1e=a("strong"),E_r=o("camembert"),C_r=o(" \u2014 "),az=a("a"),w_r=o("TFCamembertForMultipleChoice"),A_r=o(" (CamemBERT model)"),y_r=l(),sT=a("li"),H1e=a("strong"),L_r=o("convbert"),x_r=o(" \u2014 "),nz=a("a"),k_r=o("TFConvBertForMultipleChoice"),S_r=o(" (ConvBERT model)"),R_r=l(),lT=a("li"),U1e=a("strong"),B_r=o("distilbert"),P_r=o(" \u2014 "),sz=a("a"),$_r=o("TFDistilBertForMultipleChoice"),I_r=o(" (DistilBERT model)"),q_r=l(),iT=a("li"),J1e=a("strong"),N_r=o("electra"),j_r=o(" \u2014 "),lz=a("a"),D_r=o("TFElectraForMultipleChoice"),G_r=o(" (ELECTRA model)"),O_r=l(),dT=a("li"),Y1e=a("strong"),V_r=o("flaubert"),X_r=o(" \u2014 "),iz=a("a"),z_r=o("TFFlaubertForMultipleChoice"),Q_r=o(" (FlauBERT model)"),W_r=l(),cT=a("li"),K1e=a("strong"),H_r=o("funnel"),U_r=o(" \u2014 "),dz=a("a"),J_r=o("TFFunnelForMultipleChoice"),Y_r=o(" (Funnel Transformer model)"),K_r=l(),fT=a("li"),Z1e=a("strong"),Z_r=o("longformer"),eur=o(" \u2014 "),cz=a("a"),our=o("TFLongformerForMultipleChoice"),rur=o(" (Longformer model)"),tur=l(),mT=a("li"),e4e=a("strong"),aur=o("mobilebert"),nur=o(" \u2014 "),fz=a("a"),sur=o("TFMobileBertForMultipleChoice"),lur=o(" (MobileBERT model)"),iur=l(),gT=a("li"),o4e=a("strong"),dur=o("mpnet"),cur=o(" \u2014 "),mz=a("a"),fur=o("TFMPNetForMultipleChoice"),mur=o(" (MPNet model)"),gur=l(),hT=a("li"),r4e=a("strong"),hur=o("rembert"),pur=o(" \u2014 "),gz=a("a"),_ur=o("TFRemBertForMultipleChoice"),uur=o(" (RemBERT model)"),bur=l(),pT=a("li"),t4e=a("strong"),Fur=o("roberta"),vur=o(" \u2014 "),hz=a("a"),Tur=o("TFRobertaForMultipleChoice"),Mur=o(" (RoBERTa model)"),Eur=l(),_T=a("li"),a4e=a("strong"),Cur=o("roformer"),wur=o(" \u2014 "),pz=a("a"),Aur=o("TFRoFormerForMultipleChoice"),yur=o(" (RoFormer model)"),Lur=l(),uT=a("li"),n4e=a("strong"),xur=o("xlm"),kur=o(" \u2014 "),_z=a("a"),Sur=o("TFXLMForMultipleChoice"),Rur=o(" (XLM model)"),Bur=l(),bT=a("li"),s4e=a("strong"),Pur=o("xlm-roberta"),$ur=o(" \u2014 "),uz=a("a"),Iur=o("TFXLMRobertaForMultipleChoice"),qur=o(" (XLM-RoBERTa model)"),Nur=l(),FT=a("li"),l4e=a("strong"),jur=o("xlnet"),Dur=o(" \u2014 "),bz=a("a"),Gur=o("TFXLNetForMultipleChoice"),Our=o(" (XLNet model)"),Vur=l(),i4e=a("p"),Xur=o("Examples:"),zur=l(),f(ey.$$.fragment),_Be=l(),qc=a("h2"),vT=a("a"),d4e=a("span"),f(oy.$$.fragment),Qur=l(),c4e=a("span"),Wur=o("TFAutoModelForTableQuestionAnswering"),uBe=l(),yr=a("div"),f(ry.$$.fragment),Hur=l(),Nc=a("p"),Uur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fz=a("a"),Jur=o("from_pretrained()"),Yur=o(" class method or the "),vz=a("a"),Kur=o("from_config()"),Zur=o(` class
method.`),e1r=l(),ty=a("p"),o1r=o("This class cannot be instantiated directly using "),f4e=a("code"),r1r=o("__init__()"),t1r=o(" (throws an error)."),a1r=l(),Tt=a("div"),f(ay.$$.fragment),n1r=l(),m4e=a("p"),s1r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l1r=l(),jc=a("p"),i1r=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),d1r=o("not"),c1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),f1r=o("from_pretrained()"),m1r=o(" to load the model weights."),g1r=l(),h4e=a("p"),h1r=o("Examples:"),p1r=l(),f(ny.$$.fragment),_1r=l(),Mo=a("div"),f(sy.$$.fragment),u1r=l(),p4e=a("p"),b1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),F1r=l(),Cn=a("p"),v1r=o("The model class to instantiate is selected based on the "),_4e=a("code"),T1r=o("model_type"),M1r=o(` property of the config object (either
passed as an argument or loaded from `),u4e=a("code"),E1r=o("pretrained_model_name_or_path"),C1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),w1r=o("pretrained_model_name_or_path"),A1r=o(":"),y1r=l(),F4e=a("ul"),TT=a("li"),v4e=a("strong"),L1r=o("tapas"),x1r=o(" \u2014 "),Mz=a("a"),k1r=o("TFTapasForQuestionAnswering"),S1r=o(" (TAPAS model)"),R1r=l(),T4e=a("p"),B1r=o("Examples:"),P1r=l(),f(ly.$$.fragment),bBe=l(),Dc=a("h2"),MT=a("a"),M4e=a("span"),f(iy.$$.fragment),$1r=l(),E4e=a("span"),I1r=o("TFAutoModelForTokenClassification"),FBe=l(),Lr=a("div"),f(dy.$$.fragment),q1r=l(),Gc=a("p"),N1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ez=a("a"),j1r=o("from_pretrained()"),D1r=o(" class method or the "),Cz=a("a"),G1r=o("from_config()"),O1r=o(` class
method.`),V1r=l(),cy=a("p"),X1r=o("This class cannot be instantiated directly using "),C4e=a("code"),z1r=o("__init__()"),Q1r=o(" (throws an error)."),W1r=l(),Mt=a("div"),f(fy.$$.fragment),H1r=l(),w4e=a("p"),U1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),J1r=l(),Oc=a("p"),Y1r=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),K1r=o("not"),Z1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=a("a"),e4r=o("from_pretrained()"),o4r=o(" to load the model weights."),r4r=l(),y4e=a("p"),t4r=o("Examples:"),a4r=l(),f(my.$$.fragment),n4r=l(),Eo=a("div"),f(gy.$$.fragment),s4r=l(),L4e=a("p"),l4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i4r=l(),wn=a("p"),d4r=o("The model class to instantiate is selected based on the "),x4e=a("code"),c4r=o("model_type"),f4r=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(":"),_4r=l(),Y=a("ul"),ET=a("li"),R4e=a("strong"),u4r=o("albert"),b4r=o(" \u2014 "),Az=a("a"),F4r=o("TFAlbertForTokenClassification"),v4r=o(" (ALBERT model)"),T4r=l(),CT=a("li"),B4e=a("strong"),M4r=o("bert"),E4r=o(" \u2014 "),yz=a("a"),C4r=o("TFBertForTokenClassification"),w4r=o(" (BERT model)"),A4r=l(),wT=a("li"),P4e=a("strong"),y4r=o("camembert"),L4r=o(" \u2014 "),Lz=a("a"),x4r=o("TFCamembertForTokenClassification"),k4r=o(" (CamemBERT model)"),S4r=l(),AT=a("li"),$4e=a("strong"),R4r=o("convbert"),B4r=o(" \u2014 "),xz=a("a"),P4r=o("TFConvBertForTokenClassification"),$4r=o(" (ConvBERT model)"),I4r=l(),yT=a("li"),I4e=a("strong"),q4r=o("deberta"),N4r=o(" \u2014 "),kz=a("a"),j4r=o("TFDebertaForTokenClassification"),D4r=o(" (DeBERTa model)"),G4r=l(),LT=a("li"),q4e=a("strong"),O4r=o("deberta-v2"),V4r=o(" \u2014 "),Sz=a("a"),X4r=o("TFDebertaV2ForTokenClassification"),z4r=o(" (DeBERTa-v2 model)"),Q4r=l(),xT=a("li"),N4e=a("strong"),W4r=o("distilbert"),H4r=o(" \u2014 "),Rz=a("a"),U4r=o("TFDistilBertForTokenClassification"),J4r=o(" (DistilBERT model)"),Y4r=l(),kT=a("li"),j4e=a("strong"),K4r=o("electra"),Z4r=o(" \u2014 "),Bz=a("a"),ebr=o("TFElectraForTokenClassification"),obr=o(" (ELECTRA model)"),rbr=l(),ST=a("li"),D4e=a("strong"),tbr=o("flaubert"),abr=o(" \u2014 "),Pz=a("a"),nbr=o("TFFlaubertForTokenClassification"),sbr=o(" (FlauBERT model)"),lbr=l(),RT=a("li"),G4e=a("strong"),ibr=o("funnel"),dbr=o(" \u2014 "),$z=a("a"),cbr=o("TFFunnelForTokenClassification"),fbr=o(" (Funnel Transformer model)"),mbr=l(),BT=a("li"),O4e=a("strong"),gbr=o("layoutlm"),hbr=o(" \u2014 "),Iz=a("a"),pbr=o("TFLayoutLMForTokenClassification"),_br=o(" (LayoutLM model)"),ubr=l(),PT=a("li"),V4e=a("strong"),bbr=o("longformer"),Fbr=o(" \u2014 "),qz=a("a"),vbr=o("TFLongformerForTokenClassification"),Tbr=o(" (Longformer model)"),Mbr=l(),$T=a("li"),X4e=a("strong"),Ebr=o("mobilebert"),Cbr=o(" \u2014 "),Nz=a("a"),wbr=o("TFMobileBertForTokenClassification"),Abr=o(" (MobileBERT model)"),ybr=l(),IT=a("li"),z4e=a("strong"),Lbr=o("mpnet"),xbr=o(" \u2014 "),jz=a("a"),kbr=o("TFMPNetForTokenClassification"),Sbr=o(" (MPNet model)"),Rbr=l(),qT=a("li"),Q4e=a("strong"),Bbr=o("rembert"),Pbr=o(" \u2014 "),Dz=a("a"),$br=o("TFRemBertForTokenClassification"),Ibr=o(" (RemBERT model)"),qbr=l(),NT=a("li"),W4e=a("strong"),Nbr=o("roberta"),jbr=o(" \u2014 "),Gz=a("a"),Dbr=o("TFRobertaForTokenClassification"),Gbr=o(" (RoBERTa model)"),Obr=l(),jT=a("li"),H4e=a("strong"),Vbr=o("roformer"),Xbr=o(" \u2014 "),Oz=a("a"),zbr=o("TFRoFormerForTokenClassification"),Qbr=o(" (RoFormer model)"),Wbr=l(),DT=a("li"),U4e=a("strong"),Hbr=o("xlm"),Ubr=o(" \u2014 "),Vz=a("a"),Jbr=o("TFXLMForTokenClassification"),Ybr=o(" (XLM model)"),Kbr=l(),GT=a("li"),J4e=a("strong"),Zbr=o("xlm-roberta"),e3r=o(" \u2014 "),Xz=a("a"),o3r=o("TFXLMRobertaForTokenClassification"),r3r=o(" (XLM-RoBERTa model)"),t3r=l(),OT=a("li"),Y4e=a("strong"),a3r=o("xlnet"),n3r=o(" \u2014 "),zz=a("a"),s3r=o("TFXLNetForTokenClassification"),l3r=o(" (XLNet model)"),i3r=l(),K4e=a("p"),d3r=o("Examples:"),c3r=l(),f(hy.$$.fragment),vBe=l(),Vc=a("h2"),VT=a("a"),Z4e=a("span"),f(py.$$.fragment),f3r=l(),ebe=a("span"),m3r=o("TFAutoModelForQuestionAnswering"),TBe=l(),xr=a("div"),f(_y.$$.fragment),g3r=l(),Xc=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qz=a("a"),p3r=o("from_pretrained()"),_3r=o(" class method or the "),Wz=a("a"),u3r=o("from_config()"),b3r=o(` class
method.`),F3r=l(),uy=a("p"),v3r=o("This class cannot be instantiated directly using "),obe=a("code"),T3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),Et=a("div"),f(by.$$.fragment),C3r=l(),rbe=a("p"),w3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A3r=l(),zc=a("p"),y3r=o(`Note:
Loading a model from its configuration file does `),tbe=a("strong"),L3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),k3r=o("from_pretrained()"),S3r=o(" to load the model weights."),R3r=l(),abe=a("p"),B3r=o("Examples:"),P3r=l(),f(Fy.$$.fragment),$3r=l(),Co=a("div"),f(vy.$$.fragment),I3r=l(),nbe=a("p"),q3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N3r=l(),An=a("p"),j3r=o("The model class to instantiate is selected based on the "),sbe=a("code"),D3r=o("model_type"),G3r=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(":"),Q3r=l(),K=a("ul"),XT=a("li"),dbe=a("strong"),W3r=o("albert"),H3r=o(" \u2014 "),Uz=a("a"),U3r=o("TFAlbertForQuestionAnswering"),J3r=o(" (ALBERT model)"),Y3r=l(),zT=a("li"),cbe=a("strong"),K3r=o("bert"),Z3r=o(" \u2014 "),Jz=a("a"),e2r=o("TFBertForQuestionAnswering"),o2r=o(" (BERT model)"),r2r=l(),QT=a("li"),fbe=a("strong"),t2r=o("camembert"),a2r=o(" \u2014 "),Yz=a("a"),n2r=o("TFCamembertForQuestionAnswering"),s2r=o(" (CamemBERT model)"),l2r=l(),WT=a("li"),mbe=a("strong"),i2r=o("convbert"),d2r=o(" \u2014 "),Kz=a("a"),c2r=o("TFConvBertForQuestionAnswering"),f2r=o(" (ConvBERT model)"),m2r=l(),HT=a("li"),gbe=a("strong"),g2r=o("deberta"),h2r=o(" \u2014 "),Zz=a("a"),p2r=o("TFDebertaForQuestionAnswering"),_2r=o(" (DeBERTa model)"),u2r=l(),UT=a("li"),hbe=a("strong"),b2r=o("deberta-v2"),F2r=o(" \u2014 "),eQ=a("a"),v2r=o("TFDebertaV2ForQuestionAnswering"),T2r=o(" (DeBERTa-v2 model)"),M2r=l(),JT=a("li"),pbe=a("strong"),E2r=o("distilbert"),C2r=o(" \u2014 "),oQ=a("a"),w2r=o("TFDistilBertForQuestionAnswering"),A2r=o(" (DistilBERT model)"),y2r=l(),YT=a("li"),_be=a("strong"),L2r=o("electra"),x2r=o(" \u2014 "),rQ=a("a"),k2r=o("TFElectraForQuestionAnswering"),S2r=o(" (ELECTRA model)"),R2r=l(),KT=a("li"),ube=a("strong"),B2r=o("flaubert"),P2r=o(" \u2014 "),tQ=a("a"),$2r=o("TFFlaubertForQuestionAnsweringSimple"),I2r=o(" (FlauBERT model)"),q2r=l(),ZT=a("li"),bbe=a("strong"),N2r=o("funnel"),j2r=o(" \u2014 "),aQ=a("a"),D2r=o("TFFunnelForQuestionAnswering"),G2r=o(" (Funnel Transformer model)"),O2r=l(),e7=a("li"),Fbe=a("strong"),V2r=o("gptj"),X2r=o(" \u2014 "),nQ=a("a"),z2r=o("TFGPTJForQuestionAnswering"),Q2r=o(" (GPT-J model)"),W2r=l(),o7=a("li"),vbe=a("strong"),H2r=o("longformer"),U2r=o(" \u2014 "),sQ=a("a"),J2r=o("TFLongformerForQuestionAnswering"),Y2r=o(" (Longformer model)"),K2r=l(),r7=a("li"),Tbe=a("strong"),Z2r=o("mobilebert"),eFr=o(" \u2014 "),lQ=a("a"),oFr=o("TFMobileBertForQuestionAnswering"),rFr=o(" (MobileBERT model)"),tFr=l(),t7=a("li"),Mbe=a("strong"),aFr=o("mpnet"),nFr=o(" \u2014 "),iQ=a("a"),sFr=o("TFMPNetForQuestionAnswering"),lFr=o(" (MPNet model)"),iFr=l(),a7=a("li"),Ebe=a("strong"),dFr=o("rembert"),cFr=o(" \u2014 "),dQ=a("a"),fFr=o("TFRemBertForQuestionAnswering"),mFr=o(" (RemBERT model)"),gFr=l(),n7=a("li"),Cbe=a("strong"),hFr=o("roberta"),pFr=o(" \u2014 "),cQ=a("a"),_Fr=o("TFRobertaForQuestionAnswering"),uFr=o(" (RoBERTa model)"),bFr=l(),s7=a("li"),wbe=a("strong"),FFr=o("roformer"),vFr=o(" \u2014 "),fQ=a("a"),TFr=o("TFRoFormerForQuestionAnswering"),MFr=o(" (RoFormer model)"),EFr=l(),l7=a("li"),Abe=a("strong"),CFr=o("xlm"),wFr=o(" \u2014 "),mQ=a("a"),AFr=o("TFXLMForQuestionAnsweringSimple"),yFr=o(" (XLM model)"),LFr=l(),i7=a("li"),ybe=a("strong"),xFr=o("xlm-roberta"),kFr=o(" \u2014 "),gQ=a("a"),SFr=o("TFXLMRobertaForQuestionAnswering"),RFr=o(" (XLM-RoBERTa model)"),BFr=l(),d7=a("li"),Lbe=a("strong"),PFr=o("xlnet"),$Fr=o(" \u2014 "),hQ=a("a"),IFr=o("TFXLNetForQuestionAnsweringSimple"),qFr=o(" (XLNet model)"),NFr=l(),xbe=a("p"),jFr=o("Examples:"),DFr=l(),f(Ty.$$.fragment),MBe=l(),Qc=a("h2"),c7=a("a"),kbe=a("span"),f(My.$$.fragment),GFr=l(),Sbe=a("span"),OFr=o("TFAutoModelForVision2Seq"),EBe=l(),kr=a("div"),f(Ey.$$.fragment),VFr=l(),Wc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pQ=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),_Q=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),Cy=a("p"),JFr=o("This class cannot be instantiated directly using "),Rbe=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Ct=a("div"),f(wy.$$.fragment),evr=l(),Bbe=a("p"),ovr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rvr=l(),Hc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),svr=o("from_pretrained()"),lvr=o(" to load the model weights."),ivr=l(),$be=a("p"),dvr=o("Examples:"),cvr=l(),f(Ay.$$.fragment),fvr=l(),wo=a("div"),f(yy.$$.fragment),mvr=l(),Ibe=a("p"),gvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hvr=l(),yn=a("p"),pvr=o("The model class to instantiate is selected based on the "),qbe=a("code"),_vr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),bvr=o("pretrained_model_name_or_path"),Fvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),vvr=o("pretrained_model_name_or_path"),Tvr=o(":"),Mvr=l(),Dbe=a("ul"),f7=a("li"),Gbe=a("strong"),Evr=o("vision-encoder-decoder"),Cvr=o(" \u2014 "),bQ=a("a"),wvr=o("TFVisionEncoderDecoderModel"),Avr=o(" (Vision Encoder decoder model)"),yvr=l(),Obe=a("p"),Lvr=o("Examples:"),xvr=l(),f(Ly.$$.fragment),CBe=l(),Uc=a("h2"),m7=a("a"),Vbe=a("span"),f(xy.$$.fragment),kvr=l(),Xbe=a("span"),Svr=o("TFAutoModelForSpeechSeq2Seq"),wBe=l(),Sr=a("div"),f(ky.$$.fragment),Rvr=l(),Jc=a("p"),Bvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=a("a"),Pvr=o("from_pretrained()"),$vr=o(" class method or the "),vQ=a("a"),Ivr=o("from_config()"),qvr=o(` class
method.`),Nvr=l(),Sy=a("p"),jvr=o("This class cannot be instantiated directly using "),zbe=a("code"),Dvr=o("__init__()"),Gvr=o(" (throws an error)."),Ovr=l(),wt=a("div"),f(Ry.$$.fragment),Vvr=l(),Qbe=a("p"),Xvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zvr=l(),Yc=a("p"),Qvr=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),Wvr=o("not"),Hvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Uvr=o("from_pretrained()"),Jvr=o(" to load the model weights."),Yvr=l(),Hbe=a("p"),Kvr=o("Examples:"),Zvr=l(),f(By.$$.fragment),e6r=l(),Ao=a("div"),f(Py.$$.fragment),o6r=l(),Ube=a("p"),r6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),t6r=l(),Ln=a("p"),a6r=o("The model class to instantiate is selected based on the "),Jbe=a("code"),n6r=o("model_type"),s6r=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),d6r=o("pretrained_model_name_or_path"),c6r=o(":"),f6r=l(),Zbe=a("ul"),g7=a("li"),e3e=a("strong"),m6r=o("speech_to_text"),g6r=o(" \u2014 "),MQ=a("a"),h6r=o("TFSpeech2TextForConditionalGeneration"),p6r=o(" (Speech2Text model)"),_6r=l(),o3e=a("p"),u6r=o("Examples:"),b6r=l(),f($y.$$.fragment),ABe=l(),Kc=a("h2"),h7=a("a"),r3e=a("span"),f(Iy.$$.fragment),F6r=l(),t3e=a("span"),v6r=o("FlaxAutoModel"),yBe=l(),Rr=a("div"),f(qy.$$.fragment),T6r=l(),Zc=a("p"),M6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EQ=a("a"),E6r=o("from_pretrained()"),C6r=o(" class method or the "),CQ=a("a"),w6r=o("from_config()"),A6r=o(` class
method.`),y6r=l(),Ny=a("p"),L6r=o("This class cannot be instantiated directly using "),a3e=a("code"),x6r=o("__init__()"),k6r=o(" (throws an error)."),S6r=l(),At=a("div"),f(jy.$$.fragment),R6r=l(),n3e=a("p"),B6r=o("Instantiates one of the base model classes of the library from a configuration."),P6r=l(),ef=a("p"),$6r=o(`Note:
Loading a model from its configuration file does `),s3e=a("strong"),I6r=o("not"),q6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),N6r=o("from_pretrained()"),j6r=o(" to load the model weights."),D6r=l(),l3e=a("p"),G6r=o("Examples:"),O6r=l(),f(Dy.$$.fragment),V6r=l(),yo=a("div"),f(Gy.$$.fragment),X6r=l(),i3e=a("p"),z6r=o("Instantiate one of the base model classes of the library from a pretrained model."),Q6r=l(),xn=a("p"),W6r=o("The model class to instantiate is selected based on the "),d3e=a("code"),H6r=o("model_type"),U6r=o(` property of the config object (either
passed as an argument or loaded from `),c3e=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(":"),eTr=l(),z=a("ul"),p7=a("li"),m3e=a("strong"),oTr=o("albert"),rTr=o(" \u2014 "),AQ=a("a"),tTr=o("FlaxAlbertModel"),aTr=o(" (ALBERT model)"),nTr=l(),_7=a("li"),g3e=a("strong"),sTr=o("bart"),lTr=o(" \u2014 "),yQ=a("a"),iTr=o("FlaxBartModel"),dTr=o(" (BART model)"),cTr=l(),u7=a("li"),h3e=a("strong"),fTr=o("beit"),mTr=o(" \u2014 "),LQ=a("a"),gTr=o("FlaxBeitModel"),hTr=o(" (BEiT model)"),pTr=l(),b7=a("li"),p3e=a("strong"),_Tr=o("bert"),uTr=o(" \u2014 "),xQ=a("a"),bTr=o("FlaxBertModel"),FTr=o(" (BERT model)"),vTr=l(),F7=a("li"),_3e=a("strong"),TTr=o("big_bird"),MTr=o(" \u2014 "),kQ=a("a"),ETr=o("FlaxBigBirdModel"),CTr=o(" (BigBird model)"),wTr=l(),v7=a("li"),u3e=a("strong"),ATr=o("blenderbot"),yTr=o(" \u2014 "),SQ=a("a"),LTr=o("FlaxBlenderbotModel"),xTr=o(" (Blenderbot model)"),kTr=l(),T7=a("li"),b3e=a("strong"),STr=o("blenderbot-small"),RTr=o(" \u2014 "),RQ=a("a"),BTr=o("FlaxBlenderbotSmallModel"),PTr=o(" (BlenderbotSmall model)"),$Tr=l(),M7=a("li"),F3e=a("strong"),ITr=o("clip"),qTr=o(" \u2014 "),BQ=a("a"),NTr=o("FlaxCLIPModel"),jTr=o(" (CLIP model)"),DTr=l(),E7=a("li"),v3e=a("strong"),GTr=o("distilbert"),OTr=o(" \u2014 "),PQ=a("a"),VTr=o("FlaxDistilBertModel"),XTr=o(" (DistilBERT model)"),zTr=l(),C7=a("li"),T3e=a("strong"),QTr=o("electra"),WTr=o(" \u2014 "),$Q=a("a"),HTr=o("FlaxElectraModel"),UTr=o(" (ELECTRA model)"),JTr=l(),w7=a("li"),M3e=a("strong"),YTr=o("gpt2"),KTr=o(" \u2014 "),IQ=a("a"),ZTr=o("FlaxGPT2Model"),e7r=o(" (OpenAI GPT-2 model)"),o7r=l(),A7=a("li"),E3e=a("strong"),r7r=o("gpt_neo"),t7r=o(" \u2014 "),qQ=a("a"),a7r=o("FlaxGPTNeoModel"),n7r=o(" (GPT Neo model)"),s7r=l(),y7=a("li"),C3e=a("strong"),l7r=o("gptj"),i7r=o(" \u2014 "),NQ=a("a"),d7r=o("FlaxGPTJModel"),c7r=o(" (GPT-J model)"),f7r=l(),L7=a("li"),w3e=a("strong"),m7r=o("marian"),g7r=o(" \u2014 "),jQ=a("a"),h7r=o("FlaxMarianModel"),p7r=o(" (Marian model)"),_7r=l(),x7=a("li"),A3e=a("strong"),u7r=o("mbart"),b7r=o(" \u2014 "),DQ=a("a"),F7r=o("FlaxMBartModel"),v7r=o(" (mBART model)"),T7r=l(),k7=a("li"),y3e=a("strong"),M7r=o("mt5"),E7r=o(" \u2014 "),GQ=a("a"),C7r=o("FlaxMT5Model"),w7r=o(" (mT5 model)"),A7r=l(),S7=a("li"),L3e=a("strong"),y7r=o("pegasus"),L7r=o(" \u2014 "),OQ=a("a"),x7r=o("FlaxPegasusModel"),k7r=o(" (Pegasus model)"),S7r=l(),R7=a("li"),x3e=a("strong"),R7r=o("roberta"),B7r=o(" \u2014 "),VQ=a("a"),P7r=o("FlaxRobertaModel"),$7r=o(" (RoBERTa model)"),I7r=l(),B7=a("li"),k3e=a("strong"),q7r=o("roformer"),N7r=o(" \u2014 "),XQ=a("a"),j7r=o("FlaxRoFormerModel"),D7r=o(" (RoFormer model)"),G7r=l(),P7=a("li"),S3e=a("strong"),O7r=o("t5"),V7r=o(" \u2014 "),zQ=a("a"),X7r=o("FlaxT5Model"),z7r=o(" (T5 model)"),Q7r=l(),$7=a("li"),R3e=a("strong"),W7r=o("vision-text-dual-encoder"),H7r=o(" \u2014 "),QQ=a("a"),U7r=o("FlaxVisionTextDualEncoderModel"),J7r=o(" (VisionTextDualEncoder model)"),Y7r=l(),I7=a("li"),B3e=a("strong"),K7r=o("vit"),Z7r=o(" \u2014 "),WQ=a("a"),eMr=o("FlaxViTModel"),oMr=o(" (ViT model)"),rMr=l(),q7=a("li"),P3e=a("strong"),tMr=o("wav2vec2"),aMr=o(" \u2014 "),HQ=a("a"),nMr=o("FlaxWav2Vec2Model"),sMr=o(" (Wav2Vec2 model)"),lMr=l(),N7=a("li"),$3e=a("strong"),iMr=o("xglm"),dMr=o(" \u2014 "),UQ=a("a"),cMr=o("FlaxXGLMModel"),fMr=o(" (XGLM model)"),mMr=l(),j7=a("li"),I3e=a("strong"),gMr=o("xlm-roberta"),hMr=o(" \u2014 "),JQ=a("a"),pMr=o("FlaxXLMRobertaModel"),_Mr=o(" (XLM-RoBERTa model)"),uMr=l(),q3e=a("p"),bMr=o("Examples:"),FMr=l(),f(Oy.$$.fragment),LBe=l(),of=a("h2"),D7=a("a"),N3e=a("span"),f(Vy.$$.fragment),vMr=l(),j3e=a("span"),TMr=o("FlaxAutoModelForCausalLM"),xBe=l(),Br=a("div"),f(Xy.$$.fragment),MMr=l(),rf=a("p"),EMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=a("a"),CMr=o("from_pretrained()"),wMr=o(" class method or the "),KQ=a("a"),AMr=o("from_config()"),yMr=o(` class
method.`),LMr=l(),zy=a("p"),xMr=o("This class cannot be instantiated directly using "),D3e=a("code"),kMr=o("__init__()"),SMr=o(" (throws an error)."),RMr=l(),yt=a("div"),f(Qy.$$.fragment),BMr=l(),G3e=a("p"),PMr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Mr=l(),tf=a("p"),IMr=o(`Note:
Loading a model from its configuration file does `),O3e=a("strong"),qMr=o("not"),NMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),jMr=o("from_pretrained()"),DMr=o(" to load the model weights."),GMr=l(),V3e=a("p"),OMr=o("Examples:"),VMr=l(),f(Wy.$$.fragment),XMr=l(),Lo=a("div"),f(Hy.$$.fragment),zMr=l(),X3e=a("p"),QMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WMr=l(),kn=a("p"),HMr=o("The model class to instantiate is selected based on the "),z3e=a("code"),UMr=o("model_type"),JMr=o(` property of the config object (either
passed as an argument or loaded from `),Q3e=a("code"),YMr=o("pretrained_model_name_or_path"),KMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=a("code"),ZMr=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),ca=a("ul"),G7=a("li"),H3e=a("strong"),rEr=o("bart"),tEr=o(" \u2014 "),eW=a("a"),aEr=o("FlaxBartForCausalLM"),nEr=o(" (BART model)"),sEr=l(),O7=a("li"),U3e=a("strong"),lEr=o("gpt2"),iEr=o(" \u2014 "),oW=a("a"),dEr=o("FlaxGPT2LMHeadModel"),cEr=o(" (OpenAI GPT-2 model)"),fEr=l(),V7=a("li"),J3e=a("strong"),mEr=o("gpt_neo"),gEr=o(" \u2014 "),rW=a("a"),hEr=o("FlaxGPTNeoForCausalLM"),pEr=o(" (GPT Neo model)"),_Er=l(),X7=a("li"),Y3e=a("strong"),uEr=o("gptj"),bEr=o(" \u2014 "),tW=a("a"),FEr=o("FlaxGPTJForCausalLM"),vEr=o(" (GPT-J model)"),TEr=l(),z7=a("li"),K3e=a("strong"),MEr=o("xglm"),EEr=o(" \u2014 "),aW=a("a"),CEr=o("FlaxXGLMForCausalLM"),wEr=o(" (XGLM model)"),AEr=l(),Z3e=a("p"),yEr=o("Examples:"),LEr=l(),f(Uy.$$.fragment),kBe=l(),af=a("h2"),Q7=a("a"),e2e=a("span"),f(Jy.$$.fragment),xEr=l(),o2e=a("span"),kEr=o("FlaxAutoModelForPreTraining"),SBe=l(),Pr=a("div"),f(Yy.$$.fragment),SEr=l(),nf=a("p"),REr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nW=a("a"),BEr=o("from_pretrained()"),PEr=o(" class method or the "),sW=a("a"),$Er=o("from_config()"),IEr=o(` class
method.`),qEr=l(),Ky=a("p"),NEr=o("This class cannot be instantiated directly using "),r2e=a("code"),jEr=o("__init__()"),DEr=o(" (throws an error)."),GEr=l(),Lt=a("div"),f(Zy.$$.fragment),OEr=l(),t2e=a("p"),VEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),XEr=l(),sf=a("p"),zEr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),QEr=o("not"),WEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),HEr=o("from_pretrained()"),UEr=o(" to load the model weights."),JEr=l(),n2e=a("p"),YEr=o("Examples:"),KEr=l(),f(eL.$$.fragment),ZEr=l(),xo=a("div"),f(oL.$$.fragment),eCr=l(),s2e=a("p"),oCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rCr=l(),Sn=a("p"),tCr=o("The model class to instantiate is selected based on the "),l2e=a("code"),aCr=o("model_type"),nCr=o(` property of the config object (either
passed as an argument or loaded from `),i2e=a("code"),sCr=o("pretrained_model_name_or_path"),lCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=a("code"),iCr=o("pretrained_model_name_or_path"),dCr=o(":"),cCr=l(),fe=a("ul"),W7=a("li"),c2e=a("strong"),fCr=o("albert"),mCr=o(" \u2014 "),iW=a("a"),gCr=o("FlaxAlbertForPreTraining"),hCr=o(" (ALBERT model)"),pCr=l(),H7=a("li"),f2e=a("strong"),_Cr=o("bart"),uCr=o(" \u2014 "),dW=a("a"),bCr=o("FlaxBartForConditionalGeneration"),FCr=o(" (BART model)"),vCr=l(),U7=a("li"),m2e=a("strong"),TCr=o("bert"),MCr=o(" \u2014 "),cW=a("a"),ECr=o("FlaxBertForPreTraining"),CCr=o(" (BERT model)"),wCr=l(),J7=a("li"),g2e=a("strong"),ACr=o("big_bird"),yCr=o(" \u2014 "),fW=a("a"),LCr=o("FlaxBigBirdForPreTraining"),xCr=o(" (BigBird model)"),kCr=l(),Y7=a("li"),h2e=a("strong"),SCr=o("electra"),RCr=o(" \u2014 "),mW=a("a"),BCr=o("FlaxElectraForPreTraining"),PCr=o(" (ELECTRA model)"),$Cr=l(),K7=a("li"),p2e=a("strong"),ICr=o("mbart"),qCr=o(" \u2014 "),gW=a("a"),NCr=o("FlaxMBartForConditionalGeneration"),jCr=o(" (mBART model)"),DCr=l(),Z7=a("li"),_2e=a("strong"),GCr=o("mt5"),OCr=o(" \u2014 "),hW=a("a"),VCr=o("FlaxMT5ForConditionalGeneration"),XCr=o(" (mT5 model)"),zCr=l(),eM=a("li"),u2e=a("strong"),QCr=o("roberta"),WCr=o(" \u2014 "),pW=a("a"),HCr=o("FlaxRobertaForMaskedLM"),UCr=o(" (RoBERTa model)"),JCr=l(),oM=a("li"),b2e=a("strong"),YCr=o("roformer"),KCr=o(" \u2014 "),_W=a("a"),ZCr=o("FlaxRoFormerForMaskedLM"),e5r=o(" (RoFormer model)"),o5r=l(),rM=a("li"),F2e=a("strong"),r5r=o("t5"),t5r=o(" \u2014 "),uW=a("a"),a5r=o("FlaxT5ForConditionalGeneration"),n5r=o(" (T5 model)"),s5r=l(),tM=a("li"),v2e=a("strong"),l5r=o("wav2vec2"),i5r=o(" \u2014 "),bW=a("a"),d5r=o("FlaxWav2Vec2ForPreTraining"),c5r=o(" (Wav2Vec2 model)"),f5r=l(),aM=a("li"),T2e=a("strong"),m5r=o("xlm-roberta"),g5r=o(" \u2014 "),FW=a("a"),h5r=o("FlaxXLMRobertaForMaskedLM"),p5r=o(" (XLM-RoBERTa model)"),_5r=l(),M2e=a("p"),u5r=o("Examples:"),b5r=l(),f(rL.$$.fragment),RBe=l(),lf=a("h2"),nM=a("a"),E2e=a("span"),f(tL.$$.fragment),F5r=l(),C2e=a("span"),v5r=o("FlaxAutoModelForMaskedLM"),BBe=l(),$r=a("div"),f(aL.$$.fragment),T5r=l(),df=a("p"),M5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vW=a("a"),E5r=o("from_pretrained()"),C5r=o(" class method or the "),TW=a("a"),w5r=o("from_config()"),A5r=o(` class
method.`),y5r=l(),nL=a("p"),L5r=o("This class cannot be instantiated directly using "),w2e=a("code"),x5r=o("__init__()"),k5r=o(" (throws an error)."),S5r=l(),xt=a("div"),f(sL.$$.fragment),R5r=l(),A2e=a("p"),B5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P5r=l(),cf=a("p"),$5r=o(`Note:
Loading a model from its configuration file does `),y2e=a("strong"),I5r=o("not"),q5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),N5r=o("from_pretrained()"),j5r=o(" to load the model weights."),D5r=l(),L2e=a("p"),G5r=o("Examples:"),O5r=l(),f(lL.$$.fragment),V5r=l(),ko=a("div"),f(iL.$$.fragment),X5r=l(),x2e=a("p"),z5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q5r=l(),Rn=a("p"),W5r=o("The model class to instantiate is selected based on the "),k2e=a("code"),H5r=o("model_type"),U5r=o(` property of the config object (either
passed as an argument or loaded from `),S2e=a("code"),J5r=o("pretrained_model_name_or_path"),Y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=a("code"),K5r=o("pretrained_model_name_or_path"),Z5r=o(":"),ewr=l(),be=a("ul"),sM=a("li"),B2e=a("strong"),owr=o("albert"),rwr=o(" \u2014 "),EW=a("a"),twr=o("FlaxAlbertForMaskedLM"),awr=o(" (ALBERT model)"),nwr=l(),lM=a("li"),P2e=a("strong"),swr=o("bart"),lwr=o(" \u2014 "),CW=a("a"),iwr=o("FlaxBartForConditionalGeneration"),dwr=o(" (BART model)"),cwr=l(),iM=a("li"),$2e=a("strong"),fwr=o("bert"),mwr=o(" \u2014 "),wW=a("a"),gwr=o("FlaxBertForMaskedLM"),hwr=o(" (BERT model)"),pwr=l(),dM=a("li"),I2e=a("strong"),_wr=o("big_bird"),uwr=o(" \u2014 "),AW=a("a"),bwr=o("FlaxBigBirdForMaskedLM"),Fwr=o(" (BigBird model)"),vwr=l(),cM=a("li"),q2e=a("strong"),Twr=o("distilbert"),Mwr=o(" \u2014 "),yW=a("a"),Ewr=o("FlaxDistilBertForMaskedLM"),Cwr=o(" (DistilBERT model)"),wwr=l(),fM=a("li"),N2e=a("strong"),Awr=o("electra"),ywr=o(" \u2014 "),LW=a("a"),Lwr=o("FlaxElectraForMaskedLM"),xwr=o(" (ELECTRA model)"),kwr=l(),mM=a("li"),j2e=a("strong"),Swr=o("mbart"),Rwr=o(" \u2014 "),xW=a("a"),Bwr=o("FlaxMBartForConditionalGeneration"),Pwr=o(" (mBART model)"),$wr=l(),gM=a("li"),D2e=a("strong"),Iwr=o("roberta"),qwr=o(" \u2014 "),kW=a("a"),Nwr=o("FlaxRobertaForMaskedLM"),jwr=o(" (RoBERTa model)"),Dwr=l(),hM=a("li"),G2e=a("strong"),Gwr=o("roformer"),Owr=o(" \u2014 "),SW=a("a"),Vwr=o("FlaxRoFormerForMaskedLM"),Xwr=o(" (RoFormer model)"),zwr=l(),pM=a("li"),O2e=a("strong"),Qwr=o("xlm-roberta"),Wwr=o(" \u2014 "),RW=a("a"),Hwr=o("FlaxXLMRobertaForMaskedLM"),Uwr=o(" (XLM-RoBERTa model)"),Jwr=l(),V2e=a("p"),Ywr=o("Examples:"),Kwr=l(),f(dL.$$.fragment),PBe=l(),ff=a("h2"),_M=a("a"),X2e=a("span"),f(cL.$$.fragment),Zwr=l(),z2e=a("span"),eAr=o("FlaxAutoModelForSeq2SeqLM"),$Be=l(),Ir=a("div"),f(fL.$$.fragment),oAr=l(),mf=a("p"),rAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BW=a("a"),tAr=o("from_pretrained()"),aAr=o(" class method or the "),PW=a("a"),nAr=o("from_config()"),sAr=o(` class
method.`),lAr=l(),mL=a("p"),iAr=o("This class cannot be instantiated directly using "),Q2e=a("code"),dAr=o("__init__()"),cAr=o(" (throws an error)."),fAr=l(),kt=a("div"),f(gL.$$.fragment),mAr=l(),W2e=a("p"),gAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hAr=l(),gf=a("p"),pAr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),_Ar=o("not"),uAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=a("a"),bAr=o("from_pretrained()"),FAr=o(" to load the model weights."),vAr=l(),U2e=a("p"),TAr=o("Examples:"),MAr=l(),f(hL.$$.fragment),EAr=l(),So=a("div"),f(pL.$$.fragment),CAr=l(),J2e=a("p"),wAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),AAr=l(),Bn=a("p"),yAr=o("The model class to instantiate is selected based on the "),Y2e=a("code"),LAr=o("model_type"),xAr=o(` property of the config object (either
passed as an argument or loaded from `),K2e=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=a("code"),RAr=o("pretrained_model_name_or_path"),BAr=o(":"),PAr=l(),Ee=a("ul"),uM=a("li"),eFe=a("strong"),$Ar=o("bart"),IAr=o(" \u2014 "),IW=a("a"),qAr=o("FlaxBartForConditionalGeneration"),NAr=o(" (BART model)"),jAr=l(),bM=a("li"),oFe=a("strong"),DAr=o("blenderbot"),GAr=o(" \u2014 "),qW=a("a"),OAr=o("FlaxBlenderbotForConditionalGeneration"),VAr=o(" (Blenderbot model)"),XAr=l(),FM=a("li"),rFe=a("strong"),zAr=o("blenderbot-small"),QAr=o(" \u2014 "),NW=a("a"),WAr=o("FlaxBlenderbotSmallForConditionalGeneration"),HAr=o(" (BlenderbotSmall model)"),UAr=l(),vM=a("li"),tFe=a("strong"),JAr=o("encoder-decoder"),YAr=o(" \u2014 "),jW=a("a"),KAr=o("FlaxEncoderDecoderModel"),ZAr=o(" (Encoder decoder model)"),e0r=l(),TM=a("li"),aFe=a("strong"),o0r=o("marian"),r0r=o(" \u2014 "),DW=a("a"),t0r=o("FlaxMarianMTModel"),a0r=o(" (Marian model)"),n0r=l(),MM=a("li"),nFe=a("strong"),s0r=o("mbart"),l0r=o(" \u2014 "),GW=a("a"),i0r=o("FlaxMBartForConditionalGeneration"),d0r=o(" (mBART model)"),c0r=l(),EM=a("li"),sFe=a("strong"),f0r=o("mt5"),m0r=o(" \u2014 "),OW=a("a"),g0r=o("FlaxMT5ForConditionalGeneration"),h0r=o(" (mT5 model)"),p0r=l(),CM=a("li"),lFe=a("strong"),_0r=o("pegasus"),u0r=o(" \u2014 "),VW=a("a"),b0r=o("FlaxPegasusForConditionalGeneration"),F0r=o(" (Pegasus model)"),v0r=l(),wM=a("li"),iFe=a("strong"),T0r=o("t5"),M0r=o(" \u2014 "),XW=a("a"),E0r=o("FlaxT5ForConditionalGeneration"),C0r=o(" (T5 model)"),w0r=l(),dFe=a("p"),A0r=o("Examples:"),y0r=l(),f(_L.$$.fragment),IBe=l(),hf=a("h2"),AM=a("a"),cFe=a("span"),f(uL.$$.fragment),L0r=l(),fFe=a("span"),x0r=o("FlaxAutoModelForSequenceClassification"),qBe=l(),qr=a("div"),f(bL.$$.fragment),k0r=l(),pf=a("p"),S0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zW=a("a"),R0r=o("from_pretrained()"),B0r=o(" class method or the "),QW=a("a"),P0r=o("from_config()"),$0r=o(` class
method.`),I0r=l(),FL=a("p"),q0r=o("This class cannot be instantiated directly using "),mFe=a("code"),N0r=o("__init__()"),j0r=o(" (throws an error)."),D0r=l(),St=a("div"),f(vL.$$.fragment),G0r=l(),gFe=a("p"),O0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V0r=l(),_f=a("p"),X0r=o(`Note:
Loading a model from its configuration file does `),hFe=a("strong"),z0r=o("not"),Q0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),W0r=o("from_pretrained()"),H0r=o(" to load the model weights."),U0r=l(),pFe=a("p"),J0r=o("Examples:"),Y0r=l(),f(TL.$$.fragment),K0r=l(),Ro=a("div"),f(ML.$$.fragment),Z0r=l(),_Fe=a("p"),eyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oyr=l(),Pn=a("p"),ryr=o("The model class to instantiate is selected based on the "),uFe=a("code"),tyr=o("model_type"),ayr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),nyr=o("pretrained_model_name_or_path"),syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),lyr=o("pretrained_model_name_or_path"),iyr=o(":"),dyr=l(),Fe=a("ul"),yM=a("li"),vFe=a("strong"),cyr=o("albert"),fyr=o(" \u2014 "),HW=a("a"),myr=o("FlaxAlbertForSequenceClassification"),gyr=o(" (ALBERT model)"),hyr=l(),LM=a("li"),TFe=a("strong"),pyr=o("bart"),_yr=o(" \u2014 "),UW=a("a"),uyr=o("FlaxBartForSequenceClassification"),byr=o(" (BART model)"),Fyr=l(),xM=a("li"),MFe=a("strong"),vyr=o("bert"),Tyr=o(" \u2014 "),JW=a("a"),Myr=o("FlaxBertForSequenceClassification"),Eyr=o(" (BERT model)"),Cyr=l(),kM=a("li"),EFe=a("strong"),wyr=o("big_bird"),Ayr=o(" \u2014 "),YW=a("a"),yyr=o("FlaxBigBirdForSequenceClassification"),Lyr=o(" (BigBird model)"),xyr=l(),SM=a("li"),CFe=a("strong"),kyr=o("distilbert"),Syr=o(" \u2014 "),KW=a("a"),Ryr=o("FlaxDistilBertForSequenceClassification"),Byr=o(" (DistilBERT model)"),Pyr=l(),RM=a("li"),wFe=a("strong"),$yr=o("electra"),Iyr=o(" \u2014 "),ZW=a("a"),qyr=o("FlaxElectraForSequenceClassification"),Nyr=o(" (ELECTRA model)"),jyr=l(),BM=a("li"),AFe=a("strong"),Dyr=o("mbart"),Gyr=o(" \u2014 "),eH=a("a"),Oyr=o("FlaxMBartForSequenceClassification"),Vyr=o(" (mBART model)"),Xyr=l(),PM=a("li"),yFe=a("strong"),zyr=o("roberta"),Qyr=o(" \u2014 "),oH=a("a"),Wyr=o("FlaxRobertaForSequenceClassification"),Hyr=o(" (RoBERTa model)"),Uyr=l(),$M=a("li"),LFe=a("strong"),Jyr=o("roformer"),Yyr=o(" \u2014 "),rH=a("a"),Kyr=o("FlaxRoFormerForSequenceClassification"),Zyr=o(" (RoFormer model)"),eLr=l(),IM=a("li"),xFe=a("strong"),oLr=o("xlm-roberta"),rLr=o(" \u2014 "),tH=a("a"),tLr=o("FlaxXLMRobertaForSequenceClassification"),aLr=o(" (XLM-RoBERTa model)"),nLr=l(),kFe=a("p"),sLr=o("Examples:"),lLr=l(),f(EL.$$.fragment),NBe=l(),uf=a("h2"),qM=a("a"),SFe=a("span"),f(CL.$$.fragment),iLr=l(),RFe=a("span"),dLr=o("FlaxAutoModelForQuestionAnswering"),jBe=l(),Nr=a("div"),f(wL.$$.fragment),cLr=l(),bf=a("p"),fLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=a("a"),mLr=o("from_pretrained()"),gLr=o(" class method or the "),nH=a("a"),hLr=o("from_config()"),pLr=o(` class
method.`),_Lr=l(),AL=a("p"),uLr=o("This class cannot be instantiated directly using "),BFe=a("code"),bLr=o("__init__()"),FLr=o(" (throws an error)."),vLr=l(),Rt=a("div"),f(yL.$$.fragment),TLr=l(),PFe=a("p"),MLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ELr=l(),Ff=a("p"),CLr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),wLr=o("not"),ALr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),yLr=o("from_pretrained()"),LLr=o(" to load the model weights."),xLr=l(),IFe=a("p"),kLr=o("Examples:"),SLr=l(),f(LL.$$.fragment),RLr=l(),Bo=a("div"),f(xL.$$.fragment),BLr=l(),qFe=a("p"),PLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$Lr=l(),$n=a("p"),ILr=o("The model class to instantiate is selected based on the "),NFe=a("code"),qLr=o("model_type"),NLr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),jLr=o("pretrained_model_name_or_path"),DLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(":"),VLr=l(),ve=a("ul"),NM=a("li"),GFe=a("strong"),XLr=o("albert"),zLr=o(" \u2014 "),lH=a("a"),QLr=o("FlaxAlbertForQuestionAnswering"),WLr=o(" (ALBERT model)"),HLr=l(),jM=a("li"),OFe=a("strong"),ULr=o("bart"),JLr=o(" \u2014 "),iH=a("a"),YLr=o("FlaxBartForQuestionAnswering"),KLr=o(" (BART model)"),ZLr=l(),DM=a("li"),VFe=a("strong"),e8r=o("bert"),o8r=o(" \u2014 "),dH=a("a"),r8r=o("FlaxBertForQuestionAnswering"),t8r=o(" (BERT model)"),a8r=l(),GM=a("li"),XFe=a("strong"),n8r=o("big_bird"),s8r=o(" \u2014 "),cH=a("a"),l8r=o("FlaxBigBirdForQuestionAnswering"),i8r=o(" (BigBird model)"),d8r=l(),OM=a("li"),zFe=a("strong"),c8r=o("distilbert"),f8r=o(" \u2014 "),fH=a("a"),m8r=o("FlaxDistilBertForQuestionAnswering"),g8r=o(" (DistilBERT model)"),h8r=l(),VM=a("li"),QFe=a("strong"),p8r=o("electra"),_8r=o(" \u2014 "),mH=a("a"),u8r=o("FlaxElectraForQuestionAnswering"),b8r=o(" (ELECTRA model)"),F8r=l(),XM=a("li"),WFe=a("strong"),v8r=o("mbart"),T8r=o(" \u2014 "),gH=a("a"),M8r=o("FlaxMBartForQuestionAnswering"),E8r=o(" (mBART model)"),C8r=l(),zM=a("li"),HFe=a("strong"),w8r=o("roberta"),A8r=o(" \u2014 "),hH=a("a"),y8r=o("FlaxRobertaForQuestionAnswering"),L8r=o(" (RoBERTa model)"),x8r=l(),QM=a("li"),UFe=a("strong"),k8r=o("roformer"),S8r=o(" \u2014 "),pH=a("a"),R8r=o("FlaxRoFormerForQuestionAnswering"),B8r=o(" (RoFormer model)"),P8r=l(),WM=a("li"),JFe=a("strong"),$8r=o("xlm-roberta"),I8r=o(" \u2014 "),_H=a("a"),q8r=o("FlaxXLMRobertaForQuestionAnswering"),N8r=o(" (XLM-RoBERTa model)"),j8r=l(),YFe=a("p"),D8r=o("Examples:"),G8r=l(),f(kL.$$.fragment),DBe=l(),vf=a("h2"),HM=a("a"),KFe=a("span"),f(SL.$$.fragment),O8r=l(),ZFe=a("span"),V8r=o("FlaxAutoModelForTokenClassification"),GBe=l(),jr=a("div"),f(RL.$$.fragment),X8r=l(),Tf=a("p"),z8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uH=a("a"),Q8r=o("from_pretrained()"),W8r=o(" class method or the "),bH=a("a"),H8r=o("from_config()"),U8r=o(` class
method.`),J8r=l(),BL=a("p"),Y8r=o("This class cannot be instantiated directly using "),eve=a("code"),K8r=o("__init__()"),Z8r=o(" (throws an error)."),e9r=l(),Bt=a("div"),f(PL.$$.fragment),o9r=l(),ove=a("p"),r9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),t9r=l(),Mf=a("p"),a9r=o(`Note:
Loading a model from its configuration file does `),rve=a("strong"),n9r=o("not"),s9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),l9r=o("from_pretrained()"),i9r=o(" to load the model weights."),d9r=l(),tve=a("p"),c9r=o("Examples:"),f9r=l(),f($L.$$.fragment),m9r=l(),Po=a("div"),f(IL.$$.fragment),g9r=l(),ave=a("p"),h9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),p9r=l(),In=a("p"),_9r=o("The model class to instantiate is selected based on the "),nve=a("code"),u9r=o("model_type"),b9r=o(` property of the config object (either
passed as an argument or loaded from `),sve=a("code"),F9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=a("code"),T9r=o("pretrained_model_name_or_path"),M9r=o(":"),E9r=l(),Be=a("ul"),UM=a("li"),ive=a("strong"),C9r=o("albert"),w9r=o(" \u2014 "),vH=a("a"),A9r=o("FlaxAlbertForTokenClassification"),y9r=o(" (ALBERT model)"),L9r=l(),JM=a("li"),dve=a("strong"),x9r=o("bert"),k9r=o(" \u2014 "),TH=a("a"),S9r=o("FlaxBertForTokenClassification"),R9r=o(" (BERT model)"),B9r=l(),YM=a("li"),cve=a("strong"),P9r=o("big_bird"),$9r=o(" \u2014 "),MH=a("a"),I9r=o("FlaxBigBirdForTokenClassification"),q9r=o(" (BigBird model)"),N9r=l(),KM=a("li"),fve=a("strong"),j9r=o("distilbert"),D9r=o(" \u2014 "),EH=a("a"),G9r=o("FlaxDistilBertForTokenClassification"),O9r=o(" (DistilBERT model)"),V9r=l(),ZM=a("li"),mve=a("strong"),X9r=o("electra"),z9r=o(" \u2014 "),CH=a("a"),Q9r=o("FlaxElectraForTokenClassification"),W9r=o(" (ELECTRA model)"),H9r=l(),eE=a("li"),gve=a("strong"),U9r=o("roberta"),J9r=o(" \u2014 "),wH=a("a"),Y9r=o("FlaxRobertaForTokenClassification"),K9r=o(" (RoBERTa model)"),Z9r=l(),oE=a("li"),hve=a("strong"),exr=o("roformer"),oxr=o(" \u2014 "),AH=a("a"),rxr=o("FlaxRoFormerForTokenClassification"),txr=o(" (RoFormer model)"),axr=l(),rE=a("li"),pve=a("strong"),nxr=o("xlm-roberta"),sxr=o(" \u2014 "),yH=a("a"),lxr=o("FlaxXLMRobertaForTokenClassification"),ixr=o(" (XLM-RoBERTa model)"),dxr=l(),_ve=a("p"),cxr=o("Examples:"),fxr=l(),f(qL.$$.fragment),OBe=l(),Ef=a("h2"),tE=a("a"),uve=a("span"),f(NL.$$.fragment),mxr=l(),bve=a("span"),gxr=o("FlaxAutoModelForMultipleChoice"),VBe=l(),Dr=a("div"),f(jL.$$.fragment),hxr=l(),Cf=a("p"),pxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=a("a"),_xr=o("from_pretrained()"),uxr=o(" class method or the "),xH=a("a"),bxr=o("from_config()"),Fxr=o(` class
method.`),vxr=l(),DL=a("p"),Txr=o("This class cannot be instantiated directly using "),Fve=a("code"),Mxr=o("__init__()"),Exr=o(" (throws an error)."),Cxr=l(),Pt=a("div"),f(GL.$$.fragment),wxr=l(),vve=a("p"),Axr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yxr=l(),wf=a("p"),Lxr=o(`Note:
Loading a model from its configuration file does `),Tve=a("strong"),xxr=o("not"),kxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=a("a"),Sxr=o("from_pretrained()"),Rxr=o(" to load the model weights."),Bxr=l(),Mve=a("p"),Pxr=o("Examples:"),$xr=l(),f(OL.$$.fragment),Ixr=l(),$o=a("div"),f(VL.$$.fragment),qxr=l(),Eve=a("p"),Nxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jxr=l(),qn=a("p"),Dxr=o("The model class to instantiate is selected based on the "),Cve=a("code"),Gxr=o("model_type"),Oxr=o(` property of the config object (either
passed as an argument or loaded from `),wve=a("code"),Vxr=o("pretrained_model_name_or_path"),Xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=a("code"),zxr=o("pretrained_model_name_or_path"),Qxr=o(":"),Wxr=l(),Pe=a("ul"),aE=a("li"),yve=a("strong"),Hxr=o("albert"),Uxr=o(" \u2014 "),SH=a("a"),Jxr=o("FlaxAlbertForMultipleChoice"),Yxr=o(" (ALBERT model)"),Kxr=l(),nE=a("li"),Lve=a("strong"),Zxr=o("bert"),ekr=o(" \u2014 "),RH=a("a"),okr=o("FlaxBertForMultipleChoice"),rkr=o(" (BERT model)"),tkr=l(),sE=a("li"),xve=a("strong"),akr=o("big_bird"),nkr=o(" \u2014 "),BH=a("a"),skr=o("FlaxBigBirdForMultipleChoice"),lkr=o(" (BigBird model)"),ikr=l(),lE=a("li"),kve=a("strong"),dkr=o("distilbert"),ckr=o(" \u2014 "),PH=a("a"),fkr=o("FlaxDistilBertForMultipleChoice"),mkr=o(" (DistilBERT model)"),gkr=l(),iE=a("li"),Sve=a("strong"),hkr=o("electra"),pkr=o(" \u2014 "),$H=a("a"),_kr=o("FlaxElectraForMultipleChoice"),ukr=o(" (ELECTRA model)"),bkr=l(),dE=a("li"),Rve=a("strong"),Fkr=o("roberta"),vkr=o(" \u2014 "),IH=a("a"),Tkr=o("FlaxRobertaForMultipleChoice"),Mkr=o(" (RoBERTa model)"),Ekr=l(),cE=a("li"),Bve=a("strong"),Ckr=o("roformer"),wkr=o(" \u2014 "),qH=a("a"),Akr=o("FlaxRoFormerForMultipleChoice"),ykr=o(" (RoFormer model)"),Lkr=l(),fE=a("li"),Pve=a("strong"),xkr=o("xlm-roberta"),kkr=o(" \u2014 "),NH=a("a"),Skr=o("FlaxXLMRobertaForMultipleChoice"),Rkr=o(" (XLM-RoBERTa model)"),Bkr=l(),$ve=a("p"),Pkr=o("Examples:"),$kr=l(),f(XL.$$.fragment),XBe=l(),Af=a("h2"),mE=a("a"),Ive=a("span"),f(zL.$$.fragment),Ikr=l(),qve=a("span"),qkr=o("FlaxAutoModelForNextSentencePrediction"),zBe=l(),Gr=a("div"),f(QL.$$.fragment),Nkr=l(),yf=a("p"),jkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jH=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" class method or the "),DH=a("a"),Okr=o("from_config()"),Vkr=o(` class
method.`),Xkr=l(),WL=a("p"),zkr=o("This class cannot be instantiated directly using "),Nve=a("code"),Qkr=o("__init__()"),Wkr=o(" (throws an error)."),Hkr=l(),$t=a("div"),f(HL.$$.fragment),Ukr=l(),jve=a("p"),Jkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Ykr=l(),Lf=a("p"),Kkr=o(`Note:
Loading a model from its configuration file does `),Dve=a("strong"),Zkr=o("not"),eSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),oSr=o("from_pretrained()"),rSr=o(" to load the model weights."),tSr=l(),Gve=a("p"),aSr=o("Examples:"),nSr=l(),f(UL.$$.fragment),sSr=l(),Io=a("div"),f(JL.$$.fragment),lSr=l(),Ove=a("p"),iSr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dSr=l(),Nn=a("p"),cSr=o("The model class to instantiate is selected based on the "),Vve=a("code"),fSr=o("model_type"),mSr=o(` property of the config object (either
passed as an argument or loaded from `),Xve=a("code"),gSr=o("pretrained_model_name_or_path"),hSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(":"),uSr=l(),Qve=a("ul"),gE=a("li"),Wve=a("strong"),bSr=o("bert"),FSr=o(" \u2014 "),OH=a("a"),vSr=o("FlaxBertForNextSentencePrediction"),TSr=o(" (BERT model)"),MSr=l(),Hve=a("p"),ESr=o("Examples:"),CSr=l(),f(YL.$$.fragment),QBe=l(),xf=a("h2"),hE=a("a"),Uve=a("span"),f(KL.$$.fragment),wSr=l(),Jve=a("span"),ASr=o("FlaxAutoModelForImageClassification"),WBe=l(),Or=a("div"),f(ZL.$$.fragment),ySr=l(),kf=a("p"),LSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VH=a("a"),xSr=o("from_pretrained()"),kSr=o(" class method or the "),XH=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),BSr=l(),e8=a("p"),PSr=o("This class cannot be instantiated directly using "),Yve=a("code"),$Sr=o("__init__()"),ISr=o(" (throws an error)."),qSr=l(),It=a("div"),f(o8.$$.fragment),NSr=l(),Kve=a("p"),jSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DSr=l(),Sf=a("p"),GSr=o(`Note:
Loading a model from its configuration file does `),Zve=a("strong"),OSr=o("not"),VSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),XSr=o("from_pretrained()"),zSr=o(" to load the model weights."),QSr=l(),e6e=a("p"),WSr=o("Examples:"),HSr=l(),f(r8.$$.fragment),USr=l(),qo=a("div"),f(t8.$$.fragment),JSr=l(),o6e=a("p"),YSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KSr=l(),jn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),r6e=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),t6e=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),a8=a("ul"),pE=a("li"),n6e=a("strong"),lRr=o("beit"),iRr=o(" \u2014 "),QH=a("a"),dRr=o("FlaxBeitForImageClassification"),cRr=o(" (BEiT model)"),fRr=l(),_E=a("li"),s6e=a("strong"),mRr=o("vit"),gRr=o(" \u2014 "),WH=a("a"),hRr=o("FlaxViTForImageClassification"),pRr=o(" (ViT model)"),_Rr=l(),l6e=a("p"),uRr=o("Examples:"),bRr=l(),f(n8.$$.fragment),HBe=l(),Rf=a("h2"),uE=a("a"),i6e=a("span"),f(s8.$$.fragment),FRr=l(),d6e=a("span"),vRr=o("FlaxAutoModelForVision2Seq"),UBe=l(),Vr=a("div"),f(l8.$$.fragment),TRr=l(),Bf=a("p"),MRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HH=a("a"),ERr=o("from_pretrained()"),CRr=o(" class method or the "),UH=a("a"),wRr=o("from_config()"),ARr=o(` class
method.`),yRr=l(),i8=a("p"),LRr=o("This class cannot be instantiated directly using "),c6e=a("code"),xRr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),qt=a("div"),f(d8.$$.fragment),RRr=l(),f6e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PRr=l(),Pf=a("p"),$Rr=o(`Note:
Loading a model from its configuration file does `),m6e=a("strong"),IRr=o("not"),qRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=a("a"),NRr=o("from_pretrained()"),jRr=o(" to load the model weights."),DRr=l(),g6e=a("p"),GRr=o("Examples:"),ORr=l(),f(c8.$$.fragment),VRr=l(),No=a("div"),f(f8.$$.fragment),XRr=l(),h6e=a("p"),zRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QRr=l(),Dn=a("p"),WRr=o("The model class to instantiate is selected based on the "),p6e=a("code"),HRr=o("model_type"),URr=o(` property of the config object (either
passed as an argument or loaded from `),_6e=a("code"),JRr=o("pretrained_model_name_or_path"),YRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=a("code"),KRr=o("pretrained_model_name_or_path"),ZRr=o(":"),eBr=l(),b6e=a("ul"),bE=a("li"),F6e=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),YH=a("a"),tBr=o("FlaxVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),v6e=a("p"),sBr=o("Examples:"),lBr=l(),f(m8.$$.fragment),this.h()},l(c){const u=REt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var g8=s(de);Ce=n(g8,"A",{id:!0,class:!0,href:!0});var T6e=s(Ce);lo=n(T6e,"SPAN",{});var M6e=s(lo);m(me.$$.fragment,M6e),M6e.forEach(t),T6e.forEach(t),Me=i(g8),Xo=n(g8,"SPAN",{});var dBr=s(Xo);Ii=r(dBr,"Auto Classes"),dBr.forEach(t),g8.forEach(t),qf=i(c),fa=n(c,"P",{});var YBe=s(fa);qi=r(YBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(YBe,"CODE",{});var cBr=s(Ni);bC=r(cBr,"from_pretrained()"),cBr.forEach(t),Nf=r(YBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),YBe.forEach(t),xe=i(c),co=n(c,"P",{});var FE=s(co);ji=r(FE,"Instantiating one of "),Gn=n(FE,"A",{href:!0});var fBr=s(Gn);FC=r(fBr,"AutoConfig"),fBr.forEach(t),On=r(FE,", "),Vn=n(FE,"A",{href:!0});var mBr=s(Vn);vC=r(mBr,"AutoModel"),mBr.forEach(t),Di=r(FE,`, and
`),Xn=n(FE,"A",{href:!0});var gBr=s(Xn);TC=r(gBr,"AutoTokenizer"),gBr.forEach(t),Gi=r(FE," will directly create a class of the relevant architecture. For instance"),FE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var KBe=s(_e);c9=r(KBe,"will create a model that is an instance of "),Oi=n(KBe,"A",{href:!0});var hBr=s(Oi);f9=r(hBr,"BertModel"),hBr.forEach(t),m9=r(KBe,"."),KBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var ZBe=s(Ga);g9=r(ZBe,"There is one class of "),Df=n(ZBe,"CODE",{});var pBr=s(Df);h9=r(pBr,"AutoModel"),pBr.forEach(t),iIe=r(ZBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ZBe.forEach(t),USe=i(c),Vi=n(c,"H2",{class:!0});var ePe=s(Vi);Gf=n(ePe,"A",{id:!0,class:!0,href:!0});var _Br=s(Gf);zJ=n(_Br,"SPAN",{});var uBr=s(zJ);m(MC.$$.fragment,uBr),uBr.forEach(t),_Br.forEach(t),dIe=i(ePe),QJ=n(ePe,"SPAN",{});var bBr=s(QJ);cIe=r(bBr,"Extending the Auto Classes"),bBr.forEach(t),ePe.forEach(t),JSe=i(c),zn=n(c,"P",{});var KH=s(zn);fIe=r(KH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),WJ=n(KH,"CODE",{});var FBr=s(WJ);mIe=r(FBr,"NewModel"),FBr.forEach(t),gIe=r(KH,", make sure you have a "),HJ=n(KH,"CODE",{});var vBr=s(HJ);hIe=r(vBr,"NewModelConfig"),vBr.forEach(t),pIe=r(KH,` then you can add those to the auto
classes like this:`),KH.forEach(t),YSe=i(c),m(EC.$$.fragment,c),KSe=i(c),p9=n(c,"P",{});var TBr=s(p9);_Ie=r(TBr,"You will then be able to use the auto classes like you would usually do!"),TBr.forEach(t),ZSe=i(c),m(Of.$$.fragment,c),eRe=i(c),Xi=n(c,"H2",{class:!0});var oPe=s(Xi);Vf=n(oPe,"A",{id:!0,class:!0,href:!0});var MBr=s(Vf);UJ=n(MBr,"SPAN",{});var EBr=s(UJ);m(CC.$$.fragment,EBr),EBr.forEach(t),MBr.forEach(t),uIe=i(oPe),JJ=n(oPe,"SPAN",{});var CBr=s(JJ);bIe=r(CBr,"AutoConfig"),CBr.forEach(t),oPe.forEach(t),oRe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(wC.$$.fragment,Os),FIe=i(Os),AC=n(Os,"P",{});var rPe=s(AC);vIe=r(rPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),_9=n(rPe,"A",{href:!0});var wBr=s(_9);TIe=r(wBr,"from_pretrained()"),wBr.forEach(t),MIe=r(rPe," class method."),rPe.forEach(t),EIe=i(Os),yC=n(Os,"P",{});var tPe=s(yC);CIe=r(tPe,"This class cannot be instantiated directly using "),YJ=n(tPe,"CODE",{});var ABr=s(YJ);wIe=r(ABr,"__init__()"),ABr.forEach(t),AIe=r(tPe," (throws an error)."),tPe.forEach(t),yIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(LC.$$.fragment,ga),LIe=i(ga),KJ=n(ga,"P",{});var yBr=s(KJ);xIe=r(yBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),yBr.forEach(t),kIe=i(ga),zi=n(ga,"P",{});var ZH=s(zi);SIe=r(ZH,"The configuration class to instantiate is selected based on the "),ZJ=n(ZH,"CODE",{});var LBr=s(ZJ);RIe=r(LBr,"model_type"),LBr.forEach(t),BIe=r(ZH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),eY=n(ZH,"CODE",{});var xBr=s(eY);PIe=r(xBr,"pretrained_model_name_or_path"),xBr.forEach(t),$Ie=r(ZH,":"),ZH.forEach(t),IIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var E6e=s(Xf);oY=n(E6e,"STRONG",{});var kBr=s(oY);qIe=r(kBr,"albert"),kBr.forEach(t),NIe=r(E6e," \u2014 "),u9=n(E6e,"A",{href:!0});var SBr=s(u9);jIe=r(SBr,"AlbertConfig"),SBr.forEach(t),DIe=r(E6e," (ALBERT model)"),E6e.forEach(t),GIe=i(v),zf=n(v,"LI",{});var C6e=s(zf);rY=n(C6e,"STRONG",{});var RBr=s(rY);OIe=r(RBr,"bart"),RBr.forEach(t),VIe=r(C6e," \u2014 "),b9=n(C6e,"A",{href:!0});var BBr=s(b9);XIe=r(BBr,"BartConfig"),BBr.forEach(t),zIe=r(C6e," (BART model)"),C6e.forEach(t),QIe=i(v),Qf=n(v,"LI",{});var w6e=s(Qf);tY=n(w6e,"STRONG",{});var PBr=s(tY);WIe=r(PBr,"beit"),PBr.forEach(t),HIe=r(w6e," \u2014 "),F9=n(w6e,"A",{href:!0});var $Br=s(F9);UIe=r($Br,"BeitConfig"),$Br.forEach(t),JIe=r(w6e," (BEiT model)"),w6e.forEach(t),YIe=i(v),Wf=n(v,"LI",{});var A6e=s(Wf);aY=n(A6e,"STRONG",{});var IBr=s(aY);KIe=r(IBr,"bert"),IBr.forEach(t),ZIe=r(A6e," \u2014 "),v9=n(A6e,"A",{href:!0});var qBr=s(v9);eqe=r(qBr,"BertConfig"),qBr.forEach(t),oqe=r(A6e," (BERT model)"),A6e.forEach(t),rqe=i(v),Hf=n(v,"LI",{});var y6e=s(Hf);nY=n(y6e,"STRONG",{});var NBr=s(nY);tqe=r(NBr,"bert-generation"),NBr.forEach(t),aqe=r(y6e," \u2014 "),T9=n(y6e,"A",{href:!0});var jBr=s(T9);nqe=r(jBr,"BertGenerationConfig"),jBr.forEach(t),sqe=r(y6e," (Bert Generation model)"),y6e.forEach(t),lqe=i(v),Uf=n(v,"LI",{});var L6e=s(Uf);sY=n(L6e,"STRONG",{});var DBr=s(sY);iqe=r(DBr,"big_bird"),DBr.forEach(t),dqe=r(L6e," \u2014 "),M9=n(L6e,"A",{href:!0});var GBr=s(M9);cqe=r(GBr,"BigBirdConfig"),GBr.forEach(t),fqe=r(L6e," (BigBird model)"),L6e.forEach(t),mqe=i(v),Jf=n(v,"LI",{});var x6e=s(Jf);lY=n(x6e,"STRONG",{});var OBr=s(lY);gqe=r(OBr,"bigbird_pegasus"),OBr.forEach(t),hqe=r(x6e," \u2014 "),E9=n(x6e,"A",{href:!0});var VBr=s(E9);pqe=r(VBr,"BigBirdPegasusConfig"),VBr.forEach(t),_qe=r(x6e," (BigBirdPegasus model)"),x6e.forEach(t),uqe=i(v),Yf=n(v,"LI",{});var k6e=s(Yf);iY=n(k6e,"STRONG",{});var XBr=s(iY);bqe=r(XBr,"blenderbot"),XBr.forEach(t),Fqe=r(k6e," \u2014 "),C9=n(k6e,"A",{href:!0});var zBr=s(C9);vqe=r(zBr,"BlenderbotConfig"),zBr.forEach(t),Tqe=r(k6e," (Blenderbot model)"),k6e.forEach(t),Mqe=i(v),Kf=n(v,"LI",{});var S6e=s(Kf);dY=n(S6e,"STRONG",{});var QBr=s(dY);Eqe=r(QBr,"blenderbot-small"),QBr.forEach(t),Cqe=r(S6e," \u2014 "),w9=n(S6e,"A",{href:!0});var WBr=s(w9);wqe=r(WBr,"BlenderbotSmallConfig"),WBr.forEach(t),Aqe=r(S6e," (BlenderbotSmall model)"),S6e.forEach(t),yqe=i(v),Zf=n(v,"LI",{});var R6e=s(Zf);cY=n(R6e,"STRONG",{});var HBr=s(cY);Lqe=r(HBr,"camembert"),HBr.forEach(t),xqe=r(R6e," \u2014 "),A9=n(R6e,"A",{href:!0});var UBr=s(A9);kqe=r(UBr,"CamembertConfig"),UBr.forEach(t),Sqe=r(R6e," (CamemBERT model)"),R6e.forEach(t),Rqe=i(v),em=n(v,"LI",{});var B6e=s(em);fY=n(B6e,"STRONG",{});var JBr=s(fY);Bqe=r(JBr,"canine"),JBr.forEach(t),Pqe=r(B6e," \u2014 "),y9=n(B6e,"A",{href:!0});var YBr=s(y9);$qe=r(YBr,"CanineConfig"),YBr.forEach(t),Iqe=r(B6e," (Canine model)"),B6e.forEach(t),qqe=i(v),om=n(v,"LI",{});var P6e=s(om);mY=n(P6e,"STRONG",{});var KBr=s(mY);Nqe=r(KBr,"clip"),KBr.forEach(t),jqe=r(P6e," \u2014 "),L9=n(P6e,"A",{href:!0});var ZBr=s(L9);Dqe=r(ZBr,"CLIPConfig"),ZBr.forEach(t),Gqe=r(P6e," (CLIP model)"),P6e.forEach(t),Oqe=i(v),rm=n(v,"LI",{});var $6e=s(rm);gY=n($6e,"STRONG",{});var ePr=s(gY);Vqe=r(ePr,"convbert"),ePr.forEach(t),Xqe=r($6e," \u2014 "),x9=n($6e,"A",{href:!0});var oPr=s(x9);zqe=r(oPr,"ConvBertConfig"),oPr.forEach(t),Qqe=r($6e," (ConvBERT model)"),$6e.forEach(t),Wqe=i(v),tm=n(v,"LI",{});var I6e=s(tm);hY=n(I6e,"STRONG",{});var rPr=s(hY);Hqe=r(rPr,"convnext"),rPr.forEach(t),Uqe=r(I6e," \u2014 "),k9=n(I6e,"A",{href:!0});var tPr=s(k9);Jqe=r(tPr,"ConvNextConfig"),tPr.forEach(t),Yqe=r(I6e," (ConvNext model)"),I6e.forEach(t),Kqe=i(v),am=n(v,"LI",{});var q6e=s(am);pY=n(q6e,"STRONG",{});var aPr=s(pY);Zqe=r(aPr,"ctrl"),aPr.forEach(t),eNe=r(q6e," \u2014 "),S9=n(q6e,"A",{href:!0});var nPr=s(S9);oNe=r(nPr,"CTRLConfig"),nPr.forEach(t),rNe=r(q6e," (CTRL model)"),q6e.forEach(t),tNe=i(v),nm=n(v,"LI",{});var N6e=s(nm);_Y=n(N6e,"STRONG",{});var sPr=s(_Y);aNe=r(sPr,"data2vec-audio"),sPr.forEach(t),nNe=r(N6e," \u2014 "),R9=n(N6e,"A",{href:!0});var lPr=s(R9);sNe=r(lPr,"Data2VecAudioConfig"),lPr.forEach(t),lNe=r(N6e," (Data2VecAudio model)"),N6e.forEach(t),iNe=i(v),sm=n(v,"LI",{});var j6e=s(sm);uY=n(j6e,"STRONG",{});var iPr=s(uY);dNe=r(iPr,"data2vec-text"),iPr.forEach(t),cNe=r(j6e," \u2014 "),B9=n(j6e,"A",{href:!0});var dPr=s(B9);fNe=r(dPr,"Data2VecTextConfig"),dPr.forEach(t),mNe=r(j6e," (Data2VecText model)"),j6e.forEach(t),gNe=i(v),lm=n(v,"LI",{});var D6e=s(lm);bY=n(D6e,"STRONG",{});var cPr=s(bY);hNe=r(cPr,"deberta"),cPr.forEach(t),pNe=r(D6e," \u2014 "),P9=n(D6e,"A",{href:!0});var fPr=s(P9);_Ne=r(fPr,"DebertaConfig"),fPr.forEach(t),uNe=r(D6e," (DeBERTa model)"),D6e.forEach(t),bNe=i(v),im=n(v,"LI",{});var G6e=s(im);FY=n(G6e,"STRONG",{});var mPr=s(FY);FNe=r(mPr,"deberta-v2"),mPr.forEach(t),vNe=r(G6e," \u2014 "),$9=n(G6e,"A",{href:!0});var gPr=s($9);TNe=r(gPr,"DebertaV2Config"),gPr.forEach(t),MNe=r(G6e," (DeBERTa-v2 model)"),G6e.forEach(t),ENe=i(v),dm=n(v,"LI",{});var O6e=s(dm);vY=n(O6e,"STRONG",{});var hPr=s(vY);CNe=r(hPr,"decision_transformer"),hPr.forEach(t),wNe=r(O6e," \u2014 "),I9=n(O6e,"A",{href:!0});var pPr=s(I9);ANe=r(pPr,"DecisionTransformerConfig"),pPr.forEach(t),yNe=r(O6e," (Decision Transformer model)"),O6e.forEach(t),LNe=i(v),cm=n(v,"LI",{});var V6e=s(cm);TY=n(V6e,"STRONG",{});var _Pr=s(TY);xNe=r(_Pr,"deit"),_Pr.forEach(t),kNe=r(V6e," \u2014 "),q9=n(V6e,"A",{href:!0});var uPr=s(q9);SNe=r(uPr,"DeiTConfig"),uPr.forEach(t),RNe=r(V6e," (DeiT model)"),V6e.forEach(t),BNe=i(v),fm=n(v,"LI",{});var X6e=s(fm);MY=n(X6e,"STRONG",{});var bPr=s(MY);PNe=r(bPr,"detr"),bPr.forEach(t),$Ne=r(X6e," \u2014 "),N9=n(X6e,"A",{href:!0});var FPr=s(N9);INe=r(FPr,"DetrConfig"),FPr.forEach(t),qNe=r(X6e," (DETR model)"),X6e.forEach(t),NNe=i(v),mm=n(v,"LI",{});var z6e=s(mm);EY=n(z6e,"STRONG",{});var vPr=s(EY);jNe=r(vPr,"distilbert"),vPr.forEach(t),DNe=r(z6e," \u2014 "),j9=n(z6e,"A",{href:!0});var TPr=s(j9);GNe=r(TPr,"DistilBertConfig"),TPr.forEach(t),ONe=r(z6e," (DistilBERT model)"),z6e.forEach(t),VNe=i(v),gm=n(v,"LI",{});var Q6e=s(gm);CY=n(Q6e,"STRONG",{});var MPr=s(CY);XNe=r(MPr,"dpr"),MPr.forEach(t),zNe=r(Q6e," \u2014 "),D9=n(Q6e,"A",{href:!0});var EPr=s(D9);QNe=r(EPr,"DPRConfig"),EPr.forEach(t),WNe=r(Q6e," (DPR model)"),Q6e.forEach(t),HNe=i(v),hm=n(v,"LI",{});var W6e=s(hm);wY=n(W6e,"STRONG",{});var CPr=s(wY);UNe=r(CPr,"dpt"),CPr.forEach(t),JNe=r(W6e," \u2014 "),G9=n(W6e,"A",{href:!0});var wPr=s(G9);YNe=r(wPr,"DPTConfig"),wPr.forEach(t),KNe=r(W6e," (DPT model)"),W6e.forEach(t),ZNe=i(v),pm=n(v,"LI",{});var H6e=s(pm);AY=n(H6e,"STRONG",{});var APr=s(AY);eje=r(APr,"electra"),APr.forEach(t),oje=r(H6e," \u2014 "),O9=n(H6e,"A",{href:!0});var yPr=s(O9);rje=r(yPr,"ElectraConfig"),yPr.forEach(t),tje=r(H6e," (ELECTRA model)"),H6e.forEach(t),aje=i(v),_m=n(v,"LI",{});var U6e=s(_m);yY=n(U6e,"STRONG",{});var LPr=s(yY);nje=r(LPr,"encoder-decoder"),LPr.forEach(t),sje=r(U6e," \u2014 "),V9=n(U6e,"A",{href:!0});var xPr=s(V9);lje=r(xPr,"EncoderDecoderConfig"),xPr.forEach(t),ije=r(U6e," (Encoder decoder model)"),U6e.forEach(t),dje=i(v),um=n(v,"LI",{});var J6e=s(um);LY=n(J6e,"STRONG",{});var kPr=s(LY);cje=r(kPr,"flaubert"),kPr.forEach(t),fje=r(J6e," \u2014 "),X9=n(J6e,"A",{href:!0});var SPr=s(X9);mje=r(SPr,"FlaubertConfig"),SPr.forEach(t),gje=r(J6e," (FlauBERT model)"),J6e.forEach(t),hje=i(v),bm=n(v,"LI",{});var Y6e=s(bm);xY=n(Y6e,"STRONG",{});var RPr=s(xY);pje=r(RPr,"fnet"),RPr.forEach(t),_je=r(Y6e," \u2014 "),z9=n(Y6e,"A",{href:!0});var BPr=s(z9);uje=r(BPr,"FNetConfig"),BPr.forEach(t),bje=r(Y6e," (FNet model)"),Y6e.forEach(t),Fje=i(v),Fm=n(v,"LI",{});var K6e=s(Fm);kY=n(K6e,"STRONG",{});var PPr=s(kY);vje=r(PPr,"fsmt"),PPr.forEach(t),Tje=r(K6e," \u2014 "),Q9=n(K6e,"A",{href:!0});var $Pr=s(Q9);Mje=r($Pr,"FSMTConfig"),$Pr.forEach(t),Eje=r(K6e," (FairSeq Machine-Translation model)"),K6e.forEach(t),Cje=i(v),vm=n(v,"LI",{});var Z6e=s(vm);SY=n(Z6e,"STRONG",{});var IPr=s(SY);wje=r(IPr,"funnel"),IPr.forEach(t),Aje=r(Z6e," \u2014 "),W9=n(Z6e,"A",{href:!0});var qPr=s(W9);yje=r(qPr,"FunnelConfig"),qPr.forEach(t),Lje=r(Z6e," (Funnel Transformer model)"),Z6e.forEach(t),xje=i(v),Tm=n(v,"LI",{});var eTe=s(Tm);RY=n(eTe,"STRONG",{});var NPr=s(RY);kje=r(NPr,"glpn"),NPr.forEach(t),Sje=r(eTe," \u2014 "),H9=n(eTe,"A",{href:!0});var jPr=s(H9);Rje=r(jPr,"GLPNConfig"),jPr.forEach(t),Bje=r(eTe," (GLPN model)"),eTe.forEach(t),Pje=i(v),Mm=n(v,"LI",{});var oTe=s(Mm);BY=n(oTe,"STRONG",{});var DPr=s(BY);$je=r(DPr,"gpt2"),DPr.forEach(t),Ije=r(oTe," \u2014 "),U9=n(oTe,"A",{href:!0});var GPr=s(U9);qje=r(GPr,"GPT2Config"),GPr.forEach(t),Nje=r(oTe," (OpenAI GPT-2 model)"),oTe.forEach(t),jje=i(v),Em=n(v,"LI",{});var rTe=s(Em);PY=n(rTe,"STRONG",{});var OPr=s(PY);Dje=r(OPr,"gpt_neo"),OPr.forEach(t),Gje=r(rTe," \u2014 "),J9=n(rTe,"A",{href:!0});var VPr=s(J9);Oje=r(VPr,"GPTNeoConfig"),VPr.forEach(t),Vje=r(rTe," (GPT Neo model)"),rTe.forEach(t),Xje=i(v),Cm=n(v,"LI",{});var tTe=s(Cm);$Y=n(tTe,"STRONG",{});var XPr=s($Y);zje=r(XPr,"gptj"),XPr.forEach(t),Qje=r(tTe," \u2014 "),Y9=n(tTe,"A",{href:!0});var zPr=s(Y9);Wje=r(zPr,"GPTJConfig"),zPr.forEach(t),Hje=r(tTe," (GPT-J model)"),tTe.forEach(t),Uje=i(v),wm=n(v,"LI",{});var aTe=s(wm);IY=n(aTe,"STRONG",{});var QPr=s(IY);Jje=r(QPr,"hubert"),QPr.forEach(t),Yje=r(aTe," \u2014 "),K9=n(aTe,"A",{href:!0});var WPr=s(K9);Kje=r(WPr,"HubertConfig"),WPr.forEach(t),Zje=r(aTe," (Hubert model)"),aTe.forEach(t),eDe=i(v),Am=n(v,"LI",{});var nTe=s(Am);qY=n(nTe,"STRONG",{});var HPr=s(qY);oDe=r(HPr,"ibert"),HPr.forEach(t),rDe=r(nTe," \u2014 "),Z9=n(nTe,"A",{href:!0});var UPr=s(Z9);tDe=r(UPr,"IBertConfig"),UPr.forEach(t),aDe=r(nTe," (I-BERT model)"),nTe.forEach(t),nDe=i(v),ym=n(v,"LI",{});var sTe=s(ym);NY=n(sTe,"STRONG",{});var JPr=s(NY);sDe=r(JPr,"imagegpt"),JPr.forEach(t),lDe=r(sTe," \u2014 "),ex=n(sTe,"A",{href:!0});var YPr=s(ex);iDe=r(YPr,"ImageGPTConfig"),YPr.forEach(t),dDe=r(sTe," (ImageGPT model)"),sTe.forEach(t),cDe=i(v),Lm=n(v,"LI",{});var lTe=s(Lm);jY=n(lTe,"STRONG",{});var KPr=s(jY);fDe=r(KPr,"layoutlm"),KPr.forEach(t),mDe=r(lTe," \u2014 "),ox=n(lTe,"A",{href:!0});var ZPr=s(ox);gDe=r(ZPr,"LayoutLMConfig"),ZPr.forEach(t),hDe=r(lTe," (LayoutLM model)"),lTe.forEach(t),pDe=i(v),xm=n(v,"LI",{});var iTe=s(xm);DY=n(iTe,"STRONG",{});var e$r=s(DY);_De=r(e$r,"layoutlmv2"),e$r.forEach(t),uDe=r(iTe," \u2014 "),rx=n(iTe,"A",{href:!0});var o$r=s(rx);bDe=r(o$r,"LayoutLMv2Config"),o$r.forEach(t),FDe=r(iTe," (LayoutLMv2 model)"),iTe.forEach(t),vDe=i(v),km=n(v,"LI",{});var dTe=s(km);GY=n(dTe,"STRONG",{});var r$r=s(GY);TDe=r(r$r,"led"),r$r.forEach(t),MDe=r(dTe," \u2014 "),tx=n(dTe,"A",{href:!0});var t$r=s(tx);EDe=r(t$r,"LEDConfig"),t$r.forEach(t),CDe=r(dTe," (LED model)"),dTe.forEach(t),wDe=i(v),Sm=n(v,"LI",{});var cTe=s(Sm);OY=n(cTe,"STRONG",{});var a$r=s(OY);ADe=r(a$r,"longformer"),a$r.forEach(t),yDe=r(cTe," \u2014 "),ax=n(cTe,"A",{href:!0});var n$r=s(ax);LDe=r(n$r,"LongformerConfig"),n$r.forEach(t),xDe=r(cTe," (Longformer model)"),cTe.forEach(t),kDe=i(v),Rm=n(v,"LI",{});var fTe=s(Rm);VY=n(fTe,"STRONG",{});var s$r=s(VY);SDe=r(s$r,"luke"),s$r.forEach(t),RDe=r(fTe," \u2014 "),nx=n(fTe,"A",{href:!0});var l$r=s(nx);BDe=r(l$r,"LukeConfig"),l$r.forEach(t),PDe=r(fTe," (LUKE model)"),fTe.forEach(t),$De=i(v),Bm=n(v,"LI",{});var mTe=s(Bm);XY=n(mTe,"STRONG",{});var i$r=s(XY);IDe=r(i$r,"lxmert"),i$r.forEach(t),qDe=r(mTe," \u2014 "),sx=n(mTe,"A",{href:!0});var d$r=s(sx);NDe=r(d$r,"LxmertConfig"),d$r.forEach(t),jDe=r(mTe," (LXMERT model)"),mTe.forEach(t),DDe=i(v),Pm=n(v,"LI",{});var gTe=s(Pm);zY=n(gTe,"STRONG",{});var c$r=s(zY);GDe=r(c$r,"m2m_100"),c$r.forEach(t),ODe=r(gTe," \u2014 "),lx=n(gTe,"A",{href:!0});var f$r=s(lx);VDe=r(f$r,"M2M100Config"),f$r.forEach(t),XDe=r(gTe," (M2M100 model)"),gTe.forEach(t),zDe=i(v),$m=n(v,"LI",{});var hTe=s($m);QY=n(hTe,"STRONG",{});var m$r=s(QY);QDe=r(m$r,"marian"),m$r.forEach(t),WDe=r(hTe," \u2014 "),ix=n(hTe,"A",{href:!0});var g$r=s(ix);HDe=r(g$r,"MarianConfig"),g$r.forEach(t),UDe=r(hTe," (Marian model)"),hTe.forEach(t),JDe=i(v),Im=n(v,"LI",{});var pTe=s(Im);WY=n(pTe,"STRONG",{});var h$r=s(WY);YDe=r(h$r,"maskformer"),h$r.forEach(t),KDe=r(pTe," \u2014 "),dx=n(pTe,"A",{href:!0});var p$r=s(dx);ZDe=r(p$r,"MaskFormerConfig"),p$r.forEach(t),eGe=r(pTe," (MaskFormer model)"),pTe.forEach(t),oGe=i(v),qm=n(v,"LI",{});var _Te=s(qm);HY=n(_Te,"STRONG",{});var _$r=s(HY);rGe=r(_$r,"mbart"),_$r.forEach(t),tGe=r(_Te," \u2014 "),cx=n(_Te,"A",{href:!0});var u$r=s(cx);aGe=r(u$r,"MBartConfig"),u$r.forEach(t),nGe=r(_Te," (mBART model)"),_Te.forEach(t),sGe=i(v),Nm=n(v,"LI",{});var uTe=s(Nm);UY=n(uTe,"STRONG",{});var b$r=s(UY);lGe=r(b$r,"megatron-bert"),b$r.forEach(t),iGe=r(uTe," \u2014 "),fx=n(uTe,"A",{href:!0});var F$r=s(fx);dGe=r(F$r,"MegatronBertConfig"),F$r.forEach(t),cGe=r(uTe," (MegatronBert model)"),uTe.forEach(t),fGe=i(v),jm=n(v,"LI",{});var bTe=s(jm);JY=n(bTe,"STRONG",{});var v$r=s(JY);mGe=r(v$r,"mobilebert"),v$r.forEach(t),gGe=r(bTe," \u2014 "),mx=n(bTe,"A",{href:!0});var T$r=s(mx);hGe=r(T$r,"MobileBertConfig"),T$r.forEach(t),pGe=r(bTe," (MobileBERT model)"),bTe.forEach(t),_Ge=i(v),Dm=n(v,"LI",{});var FTe=s(Dm);YY=n(FTe,"STRONG",{});var M$r=s(YY);uGe=r(M$r,"mpnet"),M$r.forEach(t),bGe=r(FTe," \u2014 "),gx=n(FTe,"A",{href:!0});var E$r=s(gx);FGe=r(E$r,"MPNetConfig"),E$r.forEach(t),vGe=r(FTe," (MPNet model)"),FTe.forEach(t),TGe=i(v),Gm=n(v,"LI",{});var vTe=s(Gm);KY=n(vTe,"STRONG",{});var C$r=s(KY);MGe=r(C$r,"mt5"),C$r.forEach(t),EGe=r(vTe," \u2014 "),hx=n(vTe,"A",{href:!0});var w$r=s(hx);CGe=r(w$r,"MT5Config"),w$r.forEach(t),wGe=r(vTe," (mT5 model)"),vTe.forEach(t),AGe=i(v),Om=n(v,"LI",{});var TTe=s(Om);ZY=n(TTe,"STRONG",{});var A$r=s(ZY);yGe=r(A$r,"nystromformer"),A$r.forEach(t),LGe=r(TTe," \u2014 "),px=n(TTe,"A",{href:!0});var y$r=s(px);xGe=r(y$r,"NystromformerConfig"),y$r.forEach(t),kGe=r(TTe," (Nystromformer model)"),TTe.forEach(t),SGe=i(v),Vm=n(v,"LI",{});var MTe=s(Vm);eK=n(MTe,"STRONG",{});var L$r=s(eK);RGe=r(L$r,"openai-gpt"),L$r.forEach(t),BGe=r(MTe," \u2014 "),_x=n(MTe,"A",{href:!0});var x$r=s(_x);PGe=r(x$r,"OpenAIGPTConfig"),x$r.forEach(t),$Ge=r(MTe," (OpenAI GPT model)"),MTe.forEach(t),IGe=i(v),Xm=n(v,"LI",{});var ETe=s(Xm);oK=n(ETe,"STRONG",{});var k$r=s(oK);qGe=r(k$r,"pegasus"),k$r.forEach(t),NGe=r(ETe," \u2014 "),ux=n(ETe,"A",{href:!0});var S$r=s(ux);jGe=r(S$r,"PegasusConfig"),S$r.forEach(t),DGe=r(ETe," (Pegasus model)"),ETe.forEach(t),GGe=i(v),zm=n(v,"LI",{});var CTe=s(zm);rK=n(CTe,"STRONG",{});var R$r=s(rK);OGe=r(R$r,"perceiver"),R$r.forEach(t),VGe=r(CTe," \u2014 "),bx=n(CTe,"A",{href:!0});var B$r=s(bx);XGe=r(B$r,"PerceiverConfig"),B$r.forEach(t),zGe=r(CTe," (Perceiver model)"),CTe.forEach(t),QGe=i(v),Qm=n(v,"LI",{});var wTe=s(Qm);tK=n(wTe,"STRONG",{});var P$r=s(tK);WGe=r(P$r,"plbart"),P$r.forEach(t),HGe=r(wTe," \u2014 "),Fx=n(wTe,"A",{href:!0});var $$r=s(Fx);UGe=r($$r,"PLBartConfig"),$$r.forEach(t),JGe=r(wTe," (PLBart model)"),wTe.forEach(t),YGe=i(v),Wm=n(v,"LI",{});var ATe=s(Wm);aK=n(ATe,"STRONG",{});var I$r=s(aK);KGe=r(I$r,"poolformer"),I$r.forEach(t),ZGe=r(ATe," \u2014 "),vx=n(ATe,"A",{href:!0});var q$r=s(vx);eOe=r(q$r,"PoolFormerConfig"),q$r.forEach(t),oOe=r(ATe," (PoolFormer model)"),ATe.forEach(t),rOe=i(v),Hm=n(v,"LI",{});var yTe=s(Hm);nK=n(yTe,"STRONG",{});var N$r=s(nK);tOe=r(N$r,"prophetnet"),N$r.forEach(t),aOe=r(yTe," \u2014 "),Tx=n(yTe,"A",{href:!0});var j$r=s(Tx);nOe=r(j$r,"ProphetNetConfig"),j$r.forEach(t),sOe=r(yTe," (ProphetNet model)"),yTe.forEach(t),lOe=i(v),Um=n(v,"LI",{});var LTe=s(Um);sK=n(LTe,"STRONG",{});var D$r=s(sK);iOe=r(D$r,"qdqbert"),D$r.forEach(t),dOe=r(LTe," \u2014 "),Mx=n(LTe,"A",{href:!0});var G$r=s(Mx);cOe=r(G$r,"QDQBertConfig"),G$r.forEach(t),fOe=r(LTe," (QDQBert model)"),LTe.forEach(t),mOe=i(v),Jm=n(v,"LI",{});var xTe=s(Jm);lK=n(xTe,"STRONG",{});var O$r=s(lK);gOe=r(O$r,"rag"),O$r.forEach(t),hOe=r(xTe," \u2014 "),Ex=n(xTe,"A",{href:!0});var V$r=s(Ex);pOe=r(V$r,"RagConfig"),V$r.forEach(t),_Oe=r(xTe," (RAG model)"),xTe.forEach(t),uOe=i(v),Ym=n(v,"LI",{});var kTe=s(Ym);iK=n(kTe,"STRONG",{});var X$r=s(iK);bOe=r(X$r,"realm"),X$r.forEach(t),FOe=r(kTe," \u2014 "),Cx=n(kTe,"A",{href:!0});var z$r=s(Cx);vOe=r(z$r,"RealmConfig"),z$r.forEach(t),TOe=r(kTe," (Realm model)"),kTe.forEach(t),MOe=i(v),Km=n(v,"LI",{});var STe=s(Km);dK=n(STe,"STRONG",{});var Q$r=s(dK);EOe=r(Q$r,"reformer"),Q$r.forEach(t),COe=r(STe," \u2014 "),wx=n(STe,"A",{href:!0});var W$r=s(wx);wOe=r(W$r,"ReformerConfig"),W$r.forEach(t),AOe=r(STe," (Reformer model)"),STe.forEach(t),yOe=i(v),Zm=n(v,"LI",{});var RTe=s(Zm);cK=n(RTe,"STRONG",{});var H$r=s(cK);LOe=r(H$r,"rembert"),H$r.forEach(t),xOe=r(RTe," \u2014 "),Ax=n(RTe,"A",{href:!0});var U$r=s(Ax);kOe=r(U$r,"RemBertConfig"),U$r.forEach(t),SOe=r(RTe," (RemBERT model)"),RTe.forEach(t),ROe=i(v),eg=n(v,"LI",{});var BTe=s(eg);fK=n(BTe,"STRONG",{});var J$r=s(fK);BOe=r(J$r,"resnet"),J$r.forEach(t),POe=r(BTe," \u2014 "),yx=n(BTe,"A",{href:!0});var Y$r=s(yx);$Oe=r(Y$r,"ResNetConfig"),Y$r.forEach(t),IOe=r(BTe," (ResNet model)"),BTe.forEach(t),qOe=i(v),og=n(v,"LI",{});var PTe=s(og);mK=n(PTe,"STRONG",{});var K$r=s(mK);NOe=r(K$r,"retribert"),K$r.forEach(t),jOe=r(PTe," \u2014 "),Lx=n(PTe,"A",{href:!0});var Z$r=s(Lx);DOe=r(Z$r,"RetriBertConfig"),Z$r.forEach(t),GOe=r(PTe," (RetriBERT model)"),PTe.forEach(t),OOe=i(v),rg=n(v,"LI",{});var $Te=s(rg);gK=n($Te,"STRONG",{});var eIr=s(gK);VOe=r(eIr,"roberta"),eIr.forEach(t),XOe=r($Te," \u2014 "),xx=n($Te,"A",{href:!0});var oIr=s(xx);zOe=r(oIr,"RobertaConfig"),oIr.forEach(t),QOe=r($Te," (RoBERTa model)"),$Te.forEach(t),WOe=i(v),tg=n(v,"LI",{});var ITe=s(tg);hK=n(ITe,"STRONG",{});var rIr=s(hK);HOe=r(rIr,"roformer"),rIr.forEach(t),UOe=r(ITe," \u2014 "),kx=n(ITe,"A",{href:!0});var tIr=s(kx);JOe=r(tIr,"RoFormerConfig"),tIr.forEach(t),YOe=r(ITe," (RoFormer model)"),ITe.forEach(t),KOe=i(v),ag=n(v,"LI",{});var qTe=s(ag);pK=n(qTe,"STRONG",{});var aIr=s(pK);ZOe=r(aIr,"segformer"),aIr.forEach(t),eVe=r(qTe," \u2014 "),Sx=n(qTe,"A",{href:!0});var nIr=s(Sx);oVe=r(nIr,"SegformerConfig"),nIr.forEach(t),rVe=r(qTe," (SegFormer model)"),qTe.forEach(t),tVe=i(v),ng=n(v,"LI",{});var NTe=s(ng);_K=n(NTe,"STRONG",{});var sIr=s(_K);aVe=r(sIr,"sew"),sIr.forEach(t),nVe=r(NTe," \u2014 "),Rx=n(NTe,"A",{href:!0});var lIr=s(Rx);sVe=r(lIr,"SEWConfig"),lIr.forEach(t),lVe=r(NTe," (SEW model)"),NTe.forEach(t),iVe=i(v),sg=n(v,"LI",{});var jTe=s(sg);uK=n(jTe,"STRONG",{});var iIr=s(uK);dVe=r(iIr,"sew-d"),iIr.forEach(t),cVe=r(jTe," \u2014 "),Bx=n(jTe,"A",{href:!0});var dIr=s(Bx);fVe=r(dIr,"SEWDConfig"),dIr.forEach(t),mVe=r(jTe," (SEW-D model)"),jTe.forEach(t),gVe=i(v),lg=n(v,"LI",{});var DTe=s(lg);bK=n(DTe,"STRONG",{});var cIr=s(bK);hVe=r(cIr,"speech-encoder-decoder"),cIr.forEach(t),pVe=r(DTe," \u2014 "),Px=n(DTe,"A",{href:!0});var fIr=s(Px);_Ve=r(fIr,"SpeechEncoderDecoderConfig"),fIr.forEach(t),uVe=r(DTe," (Speech Encoder decoder model)"),DTe.forEach(t),bVe=i(v),ig=n(v,"LI",{});var GTe=s(ig);FK=n(GTe,"STRONG",{});var mIr=s(FK);FVe=r(mIr,"speech_to_text"),mIr.forEach(t),vVe=r(GTe," \u2014 "),$x=n(GTe,"A",{href:!0});var gIr=s($x);TVe=r(gIr,"Speech2TextConfig"),gIr.forEach(t),MVe=r(GTe," (Speech2Text model)"),GTe.forEach(t),EVe=i(v),dg=n(v,"LI",{});var OTe=s(dg);vK=n(OTe,"STRONG",{});var hIr=s(vK);CVe=r(hIr,"speech_to_text_2"),hIr.forEach(t),wVe=r(OTe," \u2014 "),Ix=n(OTe,"A",{href:!0});var pIr=s(Ix);AVe=r(pIr,"Speech2Text2Config"),pIr.forEach(t),yVe=r(OTe," (Speech2Text2 model)"),OTe.forEach(t),LVe=i(v),cg=n(v,"LI",{});var VTe=s(cg);TK=n(VTe,"STRONG",{});var _Ir=s(TK);xVe=r(_Ir,"splinter"),_Ir.forEach(t),kVe=r(VTe," \u2014 "),qx=n(VTe,"A",{href:!0});var uIr=s(qx);SVe=r(uIr,"SplinterConfig"),uIr.forEach(t),RVe=r(VTe," (Splinter model)"),VTe.forEach(t),BVe=i(v),fg=n(v,"LI",{});var XTe=s(fg);MK=n(XTe,"STRONG",{});var bIr=s(MK);PVe=r(bIr,"squeezebert"),bIr.forEach(t),$Ve=r(XTe," \u2014 "),Nx=n(XTe,"A",{href:!0});var FIr=s(Nx);IVe=r(FIr,"SqueezeBertConfig"),FIr.forEach(t),qVe=r(XTe," (SqueezeBERT model)"),XTe.forEach(t),NVe=i(v),mg=n(v,"LI",{});var zTe=s(mg);EK=n(zTe,"STRONG",{});var vIr=s(EK);jVe=r(vIr,"swin"),vIr.forEach(t),DVe=r(zTe," \u2014 "),jx=n(zTe,"A",{href:!0});var TIr=s(jx);GVe=r(TIr,"SwinConfig"),TIr.forEach(t),OVe=r(zTe," (Swin model)"),zTe.forEach(t),VVe=i(v),gg=n(v,"LI",{});var QTe=s(gg);CK=n(QTe,"STRONG",{});var MIr=s(CK);XVe=r(MIr,"t5"),MIr.forEach(t),zVe=r(QTe," \u2014 "),Dx=n(QTe,"A",{href:!0});var EIr=s(Dx);QVe=r(EIr,"T5Config"),EIr.forEach(t),WVe=r(QTe," (T5 model)"),QTe.forEach(t),HVe=i(v),hg=n(v,"LI",{});var WTe=s(hg);wK=n(WTe,"STRONG",{});var CIr=s(wK);UVe=r(CIr,"tapas"),CIr.forEach(t),JVe=r(WTe," \u2014 "),Gx=n(WTe,"A",{href:!0});var wIr=s(Gx);YVe=r(wIr,"TapasConfig"),wIr.forEach(t),KVe=r(WTe," (TAPAS model)"),WTe.forEach(t),ZVe=i(v),pg=n(v,"LI",{});var HTe=s(pg);AK=n(HTe,"STRONG",{});var AIr=s(AK);eXe=r(AIr,"transfo-xl"),AIr.forEach(t),oXe=r(HTe," \u2014 "),Ox=n(HTe,"A",{href:!0});var yIr=s(Ox);rXe=r(yIr,"TransfoXLConfig"),yIr.forEach(t),tXe=r(HTe," (Transformer-XL model)"),HTe.forEach(t),aXe=i(v),_g=n(v,"LI",{});var UTe=s(_g);yK=n(UTe,"STRONG",{});var LIr=s(yK);nXe=r(LIr,"trocr"),LIr.forEach(t),sXe=r(UTe," \u2014 "),Vx=n(UTe,"A",{href:!0});var xIr=s(Vx);lXe=r(xIr,"TrOCRConfig"),xIr.forEach(t),iXe=r(UTe," (TrOCR model)"),UTe.forEach(t),dXe=i(v),ug=n(v,"LI",{});var JTe=s(ug);LK=n(JTe,"STRONG",{});var kIr=s(LK);cXe=r(kIr,"unispeech"),kIr.forEach(t),fXe=r(JTe," \u2014 "),Xx=n(JTe,"A",{href:!0});var SIr=s(Xx);mXe=r(SIr,"UniSpeechConfig"),SIr.forEach(t),gXe=r(JTe," (UniSpeech model)"),JTe.forEach(t),hXe=i(v),bg=n(v,"LI",{});var YTe=s(bg);xK=n(YTe,"STRONG",{});var RIr=s(xK);pXe=r(RIr,"unispeech-sat"),RIr.forEach(t),_Xe=r(YTe," \u2014 "),zx=n(YTe,"A",{href:!0});var BIr=s(zx);uXe=r(BIr,"UniSpeechSatConfig"),BIr.forEach(t),bXe=r(YTe," (UniSpeechSat model)"),YTe.forEach(t),FXe=i(v),Fg=n(v,"LI",{});var KTe=s(Fg);kK=n(KTe,"STRONG",{});var PIr=s(kK);vXe=r(PIr,"van"),PIr.forEach(t),TXe=r(KTe," \u2014 "),Qx=n(KTe,"A",{href:!0});var $Ir=s(Qx);MXe=r($Ir,"VanConfig"),$Ir.forEach(t),EXe=r(KTe," (VAN model)"),KTe.forEach(t),CXe=i(v),vg=n(v,"LI",{});var ZTe=s(vg);SK=n(ZTe,"STRONG",{});var IIr=s(SK);wXe=r(IIr,"vilt"),IIr.forEach(t),AXe=r(ZTe," \u2014 "),Wx=n(ZTe,"A",{href:!0});var qIr=s(Wx);yXe=r(qIr,"ViltConfig"),qIr.forEach(t),LXe=r(ZTe," (ViLT model)"),ZTe.forEach(t),xXe=i(v),Tg=n(v,"LI",{});var e7e=s(Tg);RK=n(e7e,"STRONG",{});var NIr=s(RK);kXe=r(NIr,"vision-encoder-decoder"),NIr.forEach(t),SXe=r(e7e," \u2014 "),Hx=n(e7e,"A",{href:!0});var jIr=s(Hx);RXe=r(jIr,"VisionEncoderDecoderConfig"),jIr.forEach(t),BXe=r(e7e," (Vision Encoder decoder model)"),e7e.forEach(t),PXe=i(v),Mg=n(v,"LI",{});var o7e=s(Mg);BK=n(o7e,"STRONG",{});var DIr=s(BK);$Xe=r(DIr,"vision-text-dual-encoder"),DIr.forEach(t),IXe=r(o7e," \u2014 "),Ux=n(o7e,"A",{href:!0});var GIr=s(Ux);qXe=r(GIr,"VisionTextDualEncoderConfig"),GIr.forEach(t),NXe=r(o7e," (VisionTextDualEncoder model)"),o7e.forEach(t),jXe=i(v),Eg=n(v,"LI",{});var r7e=s(Eg);PK=n(r7e,"STRONG",{});var OIr=s(PK);DXe=r(OIr,"visual_bert"),OIr.forEach(t),GXe=r(r7e," \u2014 "),Jx=n(r7e,"A",{href:!0});var VIr=s(Jx);OXe=r(VIr,"VisualBertConfig"),VIr.forEach(t),VXe=r(r7e," (VisualBert model)"),r7e.forEach(t),XXe=i(v),Cg=n(v,"LI",{});var t7e=s(Cg);$K=n(t7e,"STRONG",{});var XIr=s($K);zXe=r(XIr,"vit"),XIr.forEach(t),QXe=r(t7e," \u2014 "),Yx=n(t7e,"A",{href:!0});var zIr=s(Yx);WXe=r(zIr,"ViTConfig"),zIr.forEach(t),HXe=r(t7e," (ViT model)"),t7e.forEach(t),UXe=i(v),wg=n(v,"LI",{});var a7e=s(wg);IK=n(a7e,"STRONG",{});var QIr=s(IK);JXe=r(QIr,"vit_mae"),QIr.forEach(t),YXe=r(a7e," \u2014 "),Kx=n(a7e,"A",{href:!0});var WIr=s(Kx);KXe=r(WIr,"ViTMAEConfig"),WIr.forEach(t),ZXe=r(a7e," (ViTMAE model)"),a7e.forEach(t),eze=i(v),Ag=n(v,"LI",{});var n7e=s(Ag);qK=n(n7e,"STRONG",{});var HIr=s(qK);oze=r(HIr,"wav2vec2"),HIr.forEach(t),rze=r(n7e," \u2014 "),Zx=n(n7e,"A",{href:!0});var UIr=s(Zx);tze=r(UIr,"Wav2Vec2Config"),UIr.forEach(t),aze=r(n7e," (Wav2Vec2 model)"),n7e.forEach(t),nze=i(v),yg=n(v,"LI",{});var s7e=s(yg);NK=n(s7e,"STRONG",{});var JIr=s(NK);sze=r(JIr,"wavlm"),JIr.forEach(t),lze=r(s7e," \u2014 "),ek=n(s7e,"A",{href:!0});var YIr=s(ek);ize=r(YIr,"WavLMConfig"),YIr.forEach(t),dze=r(s7e," (WavLM model)"),s7e.forEach(t),cze=i(v),Lg=n(v,"LI",{});var l7e=s(Lg);jK=n(l7e,"STRONG",{});var KIr=s(jK);fze=r(KIr,"xglm"),KIr.forEach(t),mze=r(l7e," \u2014 "),ok=n(l7e,"A",{href:!0});var ZIr=s(ok);gze=r(ZIr,"XGLMConfig"),ZIr.forEach(t),hze=r(l7e," (XGLM model)"),l7e.forEach(t),pze=i(v),xg=n(v,"LI",{});var i7e=s(xg);DK=n(i7e,"STRONG",{});var eqr=s(DK);_ze=r(eqr,"xlm"),eqr.forEach(t),uze=r(i7e," \u2014 "),rk=n(i7e,"A",{href:!0});var oqr=s(rk);bze=r(oqr,"XLMConfig"),oqr.forEach(t),Fze=r(i7e," (XLM model)"),i7e.forEach(t),vze=i(v),kg=n(v,"LI",{});var d7e=s(kg);GK=n(d7e,"STRONG",{});var rqr=s(GK);Tze=r(rqr,"xlm-prophetnet"),rqr.forEach(t),Mze=r(d7e," \u2014 "),tk=n(d7e,"A",{href:!0});var tqr=s(tk);Eze=r(tqr,"XLMProphetNetConfig"),tqr.forEach(t),Cze=r(d7e," (XLMProphetNet model)"),d7e.forEach(t),wze=i(v),Sg=n(v,"LI",{});var c7e=s(Sg);OK=n(c7e,"STRONG",{});var aqr=s(OK);Aze=r(aqr,"xlm-roberta"),aqr.forEach(t),yze=r(c7e," \u2014 "),ak=n(c7e,"A",{href:!0});var nqr=s(ak);Lze=r(nqr,"XLMRobertaConfig"),nqr.forEach(t),xze=r(c7e," (XLM-RoBERTa model)"),c7e.forEach(t),kze=i(v),Rg=n(v,"LI",{});var f7e=s(Rg);VK=n(f7e,"STRONG",{});var sqr=s(VK);Sze=r(sqr,"xlm-roberta-xl"),sqr.forEach(t),Rze=r(f7e," \u2014 "),nk=n(f7e,"A",{href:!0});var lqr=s(nk);Bze=r(lqr,"XLMRobertaXLConfig"),lqr.forEach(t),Pze=r(f7e," (XLM-RoBERTa-XL model)"),f7e.forEach(t),$ze=i(v),Bg=n(v,"LI",{});var m7e=s(Bg);XK=n(m7e,"STRONG",{});var iqr=s(XK);Ize=r(iqr,"xlnet"),iqr.forEach(t),qze=r(m7e," \u2014 "),sk=n(m7e,"A",{href:!0});var dqr=s(sk);Nze=r(dqr,"XLNetConfig"),dqr.forEach(t),jze=r(m7e," (XLNet model)"),m7e.forEach(t),Dze=i(v),Pg=n(v,"LI",{});var g7e=s(Pg);zK=n(g7e,"STRONG",{});var cqr=s(zK);Gze=r(cqr,"yoso"),cqr.forEach(t),Oze=r(g7e," \u2014 "),lk=n(g7e,"A",{href:!0});var fqr=s(lk);Vze=r(fqr,"YosoConfig"),fqr.forEach(t),Xze=r(g7e," (YOSO model)"),g7e.forEach(t),v.forEach(t),zze=i(ga),QK=n(ga,"P",{});var mqr=s(QK);Qze=r(mqr,"Examples:"),mqr.forEach(t),Wze=i(ga),m(xC.$$.fragment,ga),ga.forEach(t),Hze=i(Os),$g=n(Os,"DIV",{class:!0});var aPe=s($g);m(kC.$$.fragment,aPe),Uze=i(aPe),WK=n(aPe,"P",{});var gqr=s(WK);Jze=r(gqr,"Register a new configuration for this class."),gqr.forEach(t),aPe.forEach(t),Os.forEach(t),rRe=i(c),Qi=n(c,"H2",{class:!0});var nPe=s(Qi);Ig=n(nPe,"A",{id:!0,class:!0,href:!0});var hqr=s(Ig);HK=n(hqr,"SPAN",{});var pqr=s(HK);m(SC.$$.fragment,pqr),pqr.forEach(t),hqr.forEach(t),Yze=i(nPe),UK=n(nPe,"SPAN",{});var _qr=s(UK);Kze=r(_qr,"AutoTokenizer"),_qr.forEach(t),nPe.forEach(t),tRe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(RC.$$.fragment,Vs),Zze=i(Vs),BC=n(Vs,"P",{});var sPe=s(BC);eQe=r(sPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),ik=n(sPe,"A",{href:!0});var uqr=s(ik);oQe=r(uqr,"AutoTokenizer.from_pretrained()"),uqr.forEach(t),rQe=r(sPe," class method."),sPe.forEach(t),tQe=i(Vs),PC=n(Vs,"P",{});var lPe=s(PC);aQe=r(lPe,"This class cannot be instantiated directly using "),JK=n(lPe,"CODE",{});var bqr=s(JK);nQe=r(bqr,"__init__()"),bqr.forEach(t),sQe=r(lPe," (throws an error)."),lPe.forEach(t),lQe=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m($C.$$.fragment,ha),iQe=i(ha),YK=n(ha,"P",{});var Fqr=s(YK);dQe=r(Fqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Fqr.forEach(t),cQe=i(ha),Oa=n(ha,"P",{});var vE=s(Oa);fQe=r(vE,"The tokenizer class to instantiate is selected based on the "),KK=n(vE,"CODE",{});var vqr=s(KK);mQe=r(vqr,"model_type"),vqr.forEach(t),gQe=r(vE,` property of the config object (either
passed as an argument or loaded from `),ZK=n(vE,"CODE",{});var Tqr=s(ZK);hQe=r(Tqr,"pretrained_model_name_or_path"),Tqr.forEach(t),pQe=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eZ=n(vE,"CODE",{});var Mqr=s(eZ);_Qe=r(Mqr,"pretrained_model_name_or_path"),Mqr.forEach(t),uQe=r(vE,":"),vE.forEach(t),bQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var h8=s(Qn);oZ=n(h8,"STRONG",{});var Eqr=s(oZ);FQe=r(Eqr,"albert"),Eqr.forEach(t),vQe=r(h8," \u2014 "),dk=n(h8,"A",{href:!0});var Cqr=s(dk);TQe=r(Cqr,"AlbertTokenizer"),Cqr.forEach(t),MQe=r(h8," or "),ck=n(h8,"A",{href:!0});var wqr=s(ck);EQe=r(wqr,"AlbertTokenizerFast"),wqr.forEach(t),CQe=r(h8," (ALBERT model)"),h8.forEach(t),wQe=i(w),Wn=n(w,"LI",{});var p8=s(Wn);rZ=n(p8,"STRONG",{});var Aqr=s(rZ);AQe=r(Aqr,"bart"),Aqr.forEach(t),yQe=r(p8," \u2014 "),fk=n(p8,"A",{href:!0});var yqr=s(fk);LQe=r(yqr,"BartTokenizer"),yqr.forEach(t),xQe=r(p8," or "),mk=n(p8,"A",{href:!0});var Lqr=s(mk);kQe=r(Lqr,"BartTokenizerFast"),Lqr.forEach(t),SQe=r(p8," (BART model)"),p8.forEach(t),RQe=i(w),Hn=n(w,"LI",{});var _8=s(Hn);tZ=n(_8,"STRONG",{});var xqr=s(tZ);BQe=r(xqr,"barthez"),xqr.forEach(t),PQe=r(_8," \u2014 "),gk=n(_8,"A",{href:!0});var kqr=s(gk);$Qe=r(kqr,"BarthezTokenizer"),kqr.forEach(t),IQe=r(_8," or "),hk=n(_8,"A",{href:!0});var Sqr=s(hk);qQe=r(Sqr,"BarthezTokenizerFast"),Sqr.forEach(t),NQe=r(_8," (BARThez model)"),_8.forEach(t),jQe=i(w),qg=n(w,"LI",{});var h7e=s(qg);aZ=n(h7e,"STRONG",{});var Rqr=s(aZ);DQe=r(Rqr,"bartpho"),Rqr.forEach(t),GQe=r(h7e," \u2014 "),pk=n(h7e,"A",{href:!0});var Bqr=s(pk);OQe=r(Bqr,"BartphoTokenizer"),Bqr.forEach(t),VQe=r(h7e," (BARTpho model)"),h7e.forEach(t),XQe=i(w),Un=n(w,"LI",{});var u8=s(Un);nZ=n(u8,"STRONG",{});var Pqr=s(nZ);zQe=r(Pqr,"bert"),Pqr.forEach(t),QQe=r(u8," \u2014 "),_k=n(u8,"A",{href:!0});var $qr=s(_k);WQe=r($qr,"BertTokenizer"),$qr.forEach(t),HQe=r(u8," or "),uk=n(u8,"A",{href:!0});var Iqr=s(uk);UQe=r(Iqr,"BertTokenizerFast"),Iqr.forEach(t),JQe=r(u8," (BERT model)"),u8.forEach(t),YQe=i(w),Ng=n(w,"LI",{});var p7e=s(Ng);sZ=n(p7e,"STRONG",{});var qqr=s(sZ);KQe=r(qqr,"bert-generation"),qqr.forEach(t),ZQe=r(p7e," \u2014 "),bk=n(p7e,"A",{href:!0});var Nqr=s(bk);eWe=r(Nqr,"BertGenerationTokenizer"),Nqr.forEach(t),oWe=r(p7e," (Bert Generation model)"),p7e.forEach(t),rWe=i(w),jg=n(w,"LI",{});var _7e=s(jg);lZ=n(_7e,"STRONG",{});var jqr=s(lZ);tWe=r(jqr,"bert-japanese"),jqr.forEach(t),aWe=r(_7e," \u2014 "),Fk=n(_7e,"A",{href:!0});var Dqr=s(Fk);nWe=r(Dqr,"BertJapaneseTokenizer"),Dqr.forEach(t),sWe=r(_7e," (BertJapanese model)"),_7e.forEach(t),lWe=i(w),Dg=n(w,"LI",{});var u7e=s(Dg);iZ=n(u7e,"STRONG",{});var Gqr=s(iZ);iWe=r(Gqr,"bertweet"),Gqr.forEach(t),dWe=r(u7e," \u2014 "),vk=n(u7e,"A",{href:!0});var Oqr=s(vk);cWe=r(Oqr,"BertweetTokenizer"),Oqr.forEach(t),fWe=r(u7e," (Bertweet model)"),u7e.forEach(t),mWe=i(w),Jn=n(w,"LI",{});var b8=s(Jn);dZ=n(b8,"STRONG",{});var Vqr=s(dZ);gWe=r(Vqr,"big_bird"),Vqr.forEach(t),hWe=r(b8," \u2014 "),Tk=n(b8,"A",{href:!0});var Xqr=s(Tk);pWe=r(Xqr,"BigBirdTokenizer"),Xqr.forEach(t),_We=r(b8," or "),Mk=n(b8,"A",{href:!0});var zqr=s(Mk);uWe=r(zqr,"BigBirdTokenizerFast"),zqr.forEach(t),bWe=r(b8," (BigBird model)"),b8.forEach(t),FWe=i(w),Yn=n(w,"LI",{});var F8=s(Yn);cZ=n(F8,"STRONG",{});var Qqr=s(cZ);vWe=r(Qqr,"bigbird_pegasus"),Qqr.forEach(t),TWe=r(F8," \u2014 "),Ek=n(F8,"A",{href:!0});var Wqr=s(Ek);MWe=r(Wqr,"PegasusTokenizer"),Wqr.forEach(t),EWe=r(F8," or "),Ck=n(F8,"A",{href:!0});var Hqr=s(Ck);CWe=r(Hqr,"PegasusTokenizerFast"),Hqr.forEach(t),wWe=r(F8," (BigBirdPegasus model)"),F8.forEach(t),AWe=i(w),Kn=n(w,"LI",{});var v8=s(Kn);fZ=n(v8,"STRONG",{});var Uqr=s(fZ);yWe=r(Uqr,"blenderbot"),Uqr.forEach(t),LWe=r(v8," \u2014 "),wk=n(v8,"A",{href:!0});var Jqr=s(wk);xWe=r(Jqr,"BlenderbotTokenizer"),Jqr.forEach(t),kWe=r(v8," or "),Ak=n(v8,"A",{href:!0});var Yqr=s(Ak);SWe=r(Yqr,"BlenderbotTokenizerFast"),Yqr.forEach(t),RWe=r(v8," (Blenderbot model)"),v8.forEach(t),BWe=i(w),Gg=n(w,"LI",{});var b7e=s(Gg);mZ=n(b7e,"STRONG",{});var Kqr=s(mZ);PWe=r(Kqr,"blenderbot-small"),Kqr.forEach(t),$We=r(b7e," \u2014 "),yk=n(b7e,"A",{href:!0});var Zqr=s(yk);IWe=r(Zqr,"BlenderbotSmallTokenizer"),Zqr.forEach(t),qWe=r(b7e," (BlenderbotSmall model)"),b7e.forEach(t),NWe=i(w),Og=n(w,"LI",{});var F7e=s(Og);gZ=n(F7e,"STRONG",{});var eNr=s(gZ);jWe=r(eNr,"byt5"),eNr.forEach(t),DWe=r(F7e," \u2014 "),Lk=n(F7e,"A",{href:!0});var oNr=s(Lk);GWe=r(oNr,"ByT5Tokenizer"),oNr.forEach(t),OWe=r(F7e," (ByT5 model)"),F7e.forEach(t),VWe=i(w),Zn=n(w,"LI",{});var T8=s(Zn);hZ=n(T8,"STRONG",{});var rNr=s(hZ);XWe=r(rNr,"camembert"),rNr.forEach(t),zWe=r(T8," \u2014 "),xk=n(T8,"A",{href:!0});var tNr=s(xk);QWe=r(tNr,"CamembertTokenizer"),tNr.forEach(t),WWe=r(T8," or "),kk=n(T8,"A",{href:!0});var aNr=s(kk);HWe=r(aNr,"CamembertTokenizerFast"),aNr.forEach(t),UWe=r(T8," (CamemBERT model)"),T8.forEach(t),JWe=i(w),Vg=n(w,"LI",{});var v7e=s(Vg);pZ=n(v7e,"STRONG",{});var nNr=s(pZ);YWe=r(nNr,"canine"),nNr.forEach(t),KWe=r(v7e," \u2014 "),Sk=n(v7e,"A",{href:!0});var sNr=s(Sk);ZWe=r(sNr,"CanineTokenizer"),sNr.forEach(t),eHe=r(v7e," (Canine model)"),v7e.forEach(t),oHe=i(w),es=n(w,"LI",{});var M8=s(es);_Z=n(M8,"STRONG",{});var lNr=s(_Z);rHe=r(lNr,"clip"),lNr.forEach(t),tHe=r(M8," \u2014 "),Rk=n(M8,"A",{href:!0});var iNr=s(Rk);aHe=r(iNr,"CLIPTokenizer"),iNr.forEach(t),nHe=r(M8," or "),Bk=n(M8,"A",{href:!0});var dNr=s(Bk);sHe=r(dNr,"CLIPTokenizerFast"),dNr.forEach(t),lHe=r(M8," (CLIP model)"),M8.forEach(t),iHe=i(w),os=n(w,"LI",{});var E8=s(os);uZ=n(E8,"STRONG",{});var cNr=s(uZ);dHe=r(cNr,"convbert"),cNr.forEach(t),cHe=r(E8," \u2014 "),Pk=n(E8,"A",{href:!0});var fNr=s(Pk);fHe=r(fNr,"ConvBertTokenizer"),fNr.forEach(t),mHe=r(E8," or "),$k=n(E8,"A",{href:!0});var mNr=s($k);gHe=r(mNr,"ConvBertTokenizerFast"),mNr.forEach(t),hHe=r(E8," (ConvBERT model)"),E8.forEach(t),pHe=i(w),rs=n(w,"LI",{});var C8=s(rs);bZ=n(C8,"STRONG",{});var gNr=s(bZ);_He=r(gNr,"cpm"),gNr.forEach(t),uHe=r(C8," \u2014 "),Ik=n(C8,"A",{href:!0});var hNr=s(Ik);bHe=r(hNr,"CpmTokenizer"),hNr.forEach(t),FHe=r(C8," or "),FZ=n(C8,"CODE",{});var pNr=s(FZ);vHe=r(pNr,"CpmTokenizerFast"),pNr.forEach(t),THe=r(C8," (CPM model)"),C8.forEach(t),MHe=i(w),Xg=n(w,"LI",{});var T7e=s(Xg);vZ=n(T7e,"STRONG",{});var _Nr=s(vZ);EHe=r(_Nr,"ctrl"),_Nr.forEach(t),CHe=r(T7e," \u2014 "),qk=n(T7e,"A",{href:!0});var uNr=s(qk);wHe=r(uNr,"CTRLTokenizer"),uNr.forEach(t),AHe=r(T7e," (CTRL model)"),T7e.forEach(t),yHe=i(w),ts=n(w,"LI",{});var w8=s(ts);TZ=n(w8,"STRONG",{});var bNr=s(TZ);LHe=r(bNr,"deberta"),bNr.forEach(t),xHe=r(w8," \u2014 "),Nk=n(w8,"A",{href:!0});var FNr=s(Nk);kHe=r(FNr,"DebertaTokenizer"),FNr.forEach(t),SHe=r(w8," or "),jk=n(w8,"A",{href:!0});var vNr=s(jk);RHe=r(vNr,"DebertaTokenizerFast"),vNr.forEach(t),BHe=r(w8," (DeBERTa model)"),w8.forEach(t),PHe=i(w),zg=n(w,"LI",{});var M7e=s(zg);MZ=n(M7e,"STRONG",{});var TNr=s(MZ);$He=r(TNr,"deberta-v2"),TNr.forEach(t),IHe=r(M7e," \u2014 "),Dk=n(M7e,"A",{href:!0});var MNr=s(Dk);qHe=r(MNr,"DebertaV2Tokenizer"),MNr.forEach(t),NHe=r(M7e," (DeBERTa-v2 model)"),M7e.forEach(t),jHe=i(w),as=n(w,"LI",{});var A8=s(as);EZ=n(A8,"STRONG",{});var ENr=s(EZ);DHe=r(ENr,"distilbert"),ENr.forEach(t),GHe=r(A8," \u2014 "),Gk=n(A8,"A",{href:!0});var CNr=s(Gk);OHe=r(CNr,"DistilBertTokenizer"),CNr.forEach(t),VHe=r(A8," or "),Ok=n(A8,"A",{href:!0});var wNr=s(Ok);XHe=r(wNr,"DistilBertTokenizerFast"),wNr.forEach(t),zHe=r(A8," (DistilBERT model)"),A8.forEach(t),QHe=i(w),ns=n(w,"LI",{});var y8=s(ns);CZ=n(y8,"STRONG",{});var ANr=s(CZ);WHe=r(ANr,"dpr"),ANr.forEach(t),HHe=r(y8," \u2014 "),Vk=n(y8,"A",{href:!0});var yNr=s(Vk);UHe=r(yNr,"DPRQuestionEncoderTokenizer"),yNr.forEach(t),JHe=r(y8," or "),Xk=n(y8,"A",{href:!0});var LNr=s(Xk);YHe=r(LNr,"DPRQuestionEncoderTokenizerFast"),LNr.forEach(t),KHe=r(y8," (DPR model)"),y8.forEach(t),ZHe=i(w),ss=n(w,"LI",{});var L8=s(ss);wZ=n(L8,"STRONG",{});var xNr=s(wZ);eUe=r(xNr,"electra"),xNr.forEach(t),oUe=r(L8," \u2014 "),zk=n(L8,"A",{href:!0});var kNr=s(zk);rUe=r(kNr,"ElectraTokenizer"),kNr.forEach(t),tUe=r(L8," or "),Qk=n(L8,"A",{href:!0});var SNr=s(Qk);aUe=r(SNr,"ElectraTokenizerFast"),SNr.forEach(t),nUe=r(L8," (ELECTRA model)"),L8.forEach(t),sUe=i(w),Qg=n(w,"LI",{});var E7e=s(Qg);AZ=n(E7e,"STRONG",{});var RNr=s(AZ);lUe=r(RNr,"flaubert"),RNr.forEach(t),iUe=r(E7e," \u2014 "),Wk=n(E7e,"A",{href:!0});var BNr=s(Wk);dUe=r(BNr,"FlaubertTokenizer"),BNr.forEach(t),cUe=r(E7e," (FlauBERT model)"),E7e.forEach(t),fUe=i(w),ls=n(w,"LI",{});var x8=s(ls);yZ=n(x8,"STRONG",{});var PNr=s(yZ);mUe=r(PNr,"fnet"),PNr.forEach(t),gUe=r(x8," \u2014 "),Hk=n(x8,"A",{href:!0});var $Nr=s(Hk);hUe=r($Nr,"FNetTokenizer"),$Nr.forEach(t),pUe=r(x8," or "),Uk=n(x8,"A",{href:!0});var INr=s(Uk);_Ue=r(INr,"FNetTokenizerFast"),INr.forEach(t),uUe=r(x8," (FNet model)"),x8.forEach(t),bUe=i(w),Wg=n(w,"LI",{});var C7e=s(Wg);LZ=n(C7e,"STRONG",{});var qNr=s(LZ);FUe=r(qNr,"fsmt"),qNr.forEach(t),vUe=r(C7e," \u2014 "),Jk=n(C7e,"A",{href:!0});var NNr=s(Jk);TUe=r(NNr,"FSMTTokenizer"),NNr.forEach(t),MUe=r(C7e," (FairSeq Machine-Translation model)"),C7e.forEach(t),EUe=i(w),is=n(w,"LI",{});var k8=s(is);xZ=n(k8,"STRONG",{});var jNr=s(xZ);CUe=r(jNr,"funnel"),jNr.forEach(t),wUe=r(k8," \u2014 "),Yk=n(k8,"A",{href:!0});var DNr=s(Yk);AUe=r(DNr,"FunnelTokenizer"),DNr.forEach(t),yUe=r(k8," or "),Kk=n(k8,"A",{href:!0});var GNr=s(Kk);LUe=r(GNr,"FunnelTokenizerFast"),GNr.forEach(t),xUe=r(k8," (Funnel Transformer model)"),k8.forEach(t),kUe=i(w),ds=n(w,"LI",{});var S8=s(ds);kZ=n(S8,"STRONG",{});var ONr=s(kZ);SUe=r(ONr,"gpt2"),ONr.forEach(t),RUe=r(S8," \u2014 "),Zk=n(S8,"A",{href:!0});var VNr=s(Zk);BUe=r(VNr,"GPT2Tokenizer"),VNr.forEach(t),PUe=r(S8," or "),eS=n(S8,"A",{href:!0});var XNr=s(eS);$Ue=r(XNr,"GPT2TokenizerFast"),XNr.forEach(t),IUe=r(S8," (OpenAI GPT-2 model)"),S8.forEach(t),qUe=i(w),cs=n(w,"LI",{});var R8=s(cs);SZ=n(R8,"STRONG",{});var zNr=s(SZ);NUe=r(zNr,"gpt_neo"),zNr.forEach(t),jUe=r(R8," \u2014 "),oS=n(R8,"A",{href:!0});var QNr=s(oS);DUe=r(QNr,"GPT2Tokenizer"),QNr.forEach(t),GUe=r(R8," or "),rS=n(R8,"A",{href:!0});var WNr=s(rS);OUe=r(WNr,"GPT2TokenizerFast"),WNr.forEach(t),VUe=r(R8," (GPT Neo model)"),R8.forEach(t),XUe=i(w),fs=n(w,"LI",{});var B8=s(fs);RZ=n(B8,"STRONG",{});var HNr=s(RZ);zUe=r(HNr,"herbert"),HNr.forEach(t),QUe=r(B8," \u2014 "),tS=n(B8,"A",{href:!0});var UNr=s(tS);WUe=r(UNr,"HerbertTokenizer"),UNr.forEach(t),HUe=r(B8," or "),aS=n(B8,"A",{href:!0});var JNr=s(aS);UUe=r(JNr,"HerbertTokenizerFast"),JNr.forEach(t),JUe=r(B8," (HerBERT model)"),B8.forEach(t),YUe=i(w),Hg=n(w,"LI",{});var w7e=s(Hg);BZ=n(w7e,"STRONG",{});var YNr=s(BZ);KUe=r(YNr,"hubert"),YNr.forEach(t),ZUe=r(w7e," \u2014 "),nS=n(w7e,"A",{href:!0});var KNr=s(nS);eJe=r(KNr,"Wav2Vec2CTCTokenizer"),KNr.forEach(t),oJe=r(w7e," (Hubert model)"),w7e.forEach(t),rJe=i(w),ms=n(w,"LI",{});var P8=s(ms);PZ=n(P8,"STRONG",{});var ZNr=s(PZ);tJe=r(ZNr,"ibert"),ZNr.forEach(t),aJe=r(P8," \u2014 "),sS=n(P8,"A",{href:!0});var ejr=s(sS);nJe=r(ejr,"RobertaTokenizer"),ejr.forEach(t),sJe=r(P8," or "),lS=n(P8,"A",{href:!0});var ojr=s(lS);lJe=r(ojr,"RobertaTokenizerFast"),ojr.forEach(t),iJe=r(P8," (I-BERT model)"),P8.forEach(t),dJe=i(w),gs=n(w,"LI",{});var $8=s(gs);$Z=n($8,"STRONG",{});var rjr=s($Z);cJe=r(rjr,"layoutlm"),rjr.forEach(t),fJe=r($8," \u2014 "),iS=n($8,"A",{href:!0});var tjr=s(iS);mJe=r(tjr,"LayoutLMTokenizer"),tjr.forEach(t),gJe=r($8," or "),dS=n($8,"A",{href:!0});var ajr=s(dS);hJe=r(ajr,"LayoutLMTokenizerFast"),ajr.forEach(t),pJe=r($8," (LayoutLM model)"),$8.forEach(t),_Je=i(w),hs=n(w,"LI",{});var I8=s(hs);IZ=n(I8,"STRONG",{});var njr=s(IZ);uJe=r(njr,"layoutlmv2"),njr.forEach(t),bJe=r(I8," \u2014 "),cS=n(I8,"A",{href:!0});var sjr=s(cS);FJe=r(sjr,"LayoutLMv2Tokenizer"),sjr.forEach(t),vJe=r(I8," or "),fS=n(I8,"A",{href:!0});var ljr=s(fS);TJe=r(ljr,"LayoutLMv2TokenizerFast"),ljr.forEach(t),MJe=r(I8," (LayoutLMv2 model)"),I8.forEach(t),EJe=i(w),ps=n(w,"LI",{});var q8=s(ps);qZ=n(q8,"STRONG",{});var ijr=s(qZ);CJe=r(ijr,"layoutxlm"),ijr.forEach(t),wJe=r(q8," \u2014 "),mS=n(q8,"A",{href:!0});var djr=s(mS);AJe=r(djr,"LayoutXLMTokenizer"),djr.forEach(t),yJe=r(q8," or "),gS=n(q8,"A",{href:!0});var cjr=s(gS);LJe=r(cjr,"LayoutXLMTokenizerFast"),cjr.forEach(t),xJe=r(q8," (LayoutXLM model)"),q8.forEach(t),kJe=i(w),_s=n(w,"LI",{});var N8=s(_s);NZ=n(N8,"STRONG",{});var fjr=s(NZ);SJe=r(fjr,"led"),fjr.forEach(t),RJe=r(N8," \u2014 "),hS=n(N8,"A",{href:!0});var mjr=s(hS);BJe=r(mjr,"LEDTokenizer"),mjr.forEach(t),PJe=r(N8," or "),pS=n(N8,"A",{href:!0});var gjr=s(pS);$Je=r(gjr,"LEDTokenizerFast"),gjr.forEach(t),IJe=r(N8," (LED model)"),N8.forEach(t),qJe=i(w),us=n(w,"LI",{});var j8=s(us);jZ=n(j8,"STRONG",{});var hjr=s(jZ);NJe=r(hjr,"longformer"),hjr.forEach(t),jJe=r(j8," \u2014 "),_S=n(j8,"A",{href:!0});var pjr=s(_S);DJe=r(pjr,"LongformerTokenizer"),pjr.forEach(t),GJe=r(j8," or "),uS=n(j8,"A",{href:!0});var _jr=s(uS);OJe=r(_jr,"LongformerTokenizerFast"),_jr.forEach(t),VJe=r(j8," (Longformer model)"),j8.forEach(t),XJe=i(w),Ug=n(w,"LI",{});var A7e=s(Ug);DZ=n(A7e,"STRONG",{});var ujr=s(DZ);zJe=r(ujr,"luke"),ujr.forEach(t),QJe=r(A7e," \u2014 "),bS=n(A7e,"A",{href:!0});var bjr=s(bS);WJe=r(bjr,"LukeTokenizer"),bjr.forEach(t),HJe=r(A7e," (LUKE model)"),A7e.forEach(t),UJe=i(w),bs=n(w,"LI",{});var D8=s(bs);GZ=n(D8,"STRONG",{});var Fjr=s(GZ);JJe=r(Fjr,"lxmert"),Fjr.forEach(t),YJe=r(D8," \u2014 "),FS=n(D8,"A",{href:!0});var vjr=s(FS);KJe=r(vjr,"LxmertTokenizer"),vjr.forEach(t),ZJe=r(D8," or "),vS=n(D8,"A",{href:!0});var Tjr=s(vS);eYe=r(Tjr,"LxmertTokenizerFast"),Tjr.forEach(t),oYe=r(D8," (LXMERT model)"),D8.forEach(t),rYe=i(w),Jg=n(w,"LI",{});var y7e=s(Jg);OZ=n(y7e,"STRONG",{});var Mjr=s(OZ);tYe=r(Mjr,"m2m_100"),Mjr.forEach(t),aYe=r(y7e," \u2014 "),TS=n(y7e,"A",{href:!0});var Ejr=s(TS);nYe=r(Ejr,"M2M100Tokenizer"),Ejr.forEach(t),sYe=r(y7e," (M2M100 model)"),y7e.forEach(t),lYe=i(w),Yg=n(w,"LI",{});var L7e=s(Yg);VZ=n(L7e,"STRONG",{});var Cjr=s(VZ);iYe=r(Cjr,"marian"),Cjr.forEach(t),dYe=r(L7e," \u2014 "),MS=n(L7e,"A",{href:!0});var wjr=s(MS);cYe=r(wjr,"MarianTokenizer"),wjr.forEach(t),fYe=r(L7e," (Marian model)"),L7e.forEach(t),mYe=i(w),Fs=n(w,"LI",{});var G8=s(Fs);XZ=n(G8,"STRONG",{});var Ajr=s(XZ);gYe=r(Ajr,"mbart"),Ajr.forEach(t),hYe=r(G8," \u2014 "),ES=n(G8,"A",{href:!0});var yjr=s(ES);pYe=r(yjr,"MBartTokenizer"),yjr.forEach(t),_Ye=r(G8," or "),CS=n(G8,"A",{href:!0});var Ljr=s(CS);uYe=r(Ljr,"MBartTokenizerFast"),Ljr.forEach(t),bYe=r(G8," (mBART model)"),G8.forEach(t),FYe=i(w),vs=n(w,"LI",{});var O8=s(vs);zZ=n(O8,"STRONG",{});var xjr=s(zZ);vYe=r(xjr,"mbart50"),xjr.forEach(t),TYe=r(O8," \u2014 "),wS=n(O8,"A",{href:!0});var kjr=s(wS);MYe=r(kjr,"MBart50Tokenizer"),kjr.forEach(t),EYe=r(O8," or "),AS=n(O8,"A",{href:!0});var Sjr=s(AS);CYe=r(Sjr,"MBart50TokenizerFast"),Sjr.forEach(t),wYe=r(O8," (mBART-50 model)"),O8.forEach(t),AYe=i(w),Kg=n(w,"LI",{});var x7e=s(Kg);QZ=n(x7e,"STRONG",{});var Rjr=s(QZ);yYe=r(Rjr,"mluke"),Rjr.forEach(t),LYe=r(x7e," \u2014 "),yS=n(x7e,"A",{href:!0});var Bjr=s(yS);xYe=r(Bjr,"MLukeTokenizer"),Bjr.forEach(t),kYe=r(x7e," (mLUKE model)"),x7e.forEach(t),SYe=i(w),Ts=n(w,"LI",{});var V8=s(Ts);WZ=n(V8,"STRONG",{});var Pjr=s(WZ);RYe=r(Pjr,"mobilebert"),Pjr.forEach(t),BYe=r(V8," \u2014 "),LS=n(V8,"A",{href:!0});var $jr=s(LS);PYe=r($jr,"MobileBertTokenizer"),$jr.forEach(t),$Ye=r(V8," or "),xS=n(V8,"A",{href:!0});var Ijr=s(xS);IYe=r(Ijr,"MobileBertTokenizerFast"),Ijr.forEach(t),qYe=r(V8," (MobileBERT model)"),V8.forEach(t),NYe=i(w),Ms=n(w,"LI",{});var X8=s(Ms);HZ=n(X8,"STRONG",{});var qjr=s(HZ);jYe=r(qjr,"mpnet"),qjr.forEach(t),DYe=r(X8," \u2014 "),kS=n(X8,"A",{href:!0});var Njr=s(kS);GYe=r(Njr,"MPNetTokenizer"),Njr.forEach(t),OYe=r(X8," or "),SS=n(X8,"A",{href:!0});var jjr=s(SS);VYe=r(jjr,"MPNetTokenizerFast"),jjr.forEach(t),XYe=r(X8," (MPNet model)"),X8.forEach(t),zYe=i(w),Es=n(w,"LI",{});var z8=s(Es);UZ=n(z8,"STRONG",{});var Djr=s(UZ);QYe=r(Djr,"mt5"),Djr.forEach(t),WYe=r(z8," \u2014 "),RS=n(z8,"A",{href:!0});var Gjr=s(RS);HYe=r(Gjr,"MT5Tokenizer"),Gjr.forEach(t),UYe=r(z8," or "),BS=n(z8,"A",{href:!0});var Ojr=s(BS);JYe=r(Ojr,"MT5TokenizerFast"),Ojr.forEach(t),YYe=r(z8," (mT5 model)"),z8.forEach(t),KYe=i(w),Cs=n(w,"LI",{});var Q8=s(Cs);JZ=n(Q8,"STRONG",{});var Vjr=s(JZ);ZYe=r(Vjr,"openai-gpt"),Vjr.forEach(t),eKe=r(Q8," \u2014 "),PS=n(Q8,"A",{href:!0});var Xjr=s(PS);oKe=r(Xjr,"OpenAIGPTTokenizer"),Xjr.forEach(t),rKe=r(Q8," or "),$S=n(Q8,"A",{href:!0});var zjr=s($S);tKe=r(zjr,"OpenAIGPTTokenizerFast"),zjr.forEach(t),aKe=r(Q8," (OpenAI GPT model)"),Q8.forEach(t),nKe=i(w),ws=n(w,"LI",{});var W8=s(ws);YZ=n(W8,"STRONG",{});var Qjr=s(YZ);sKe=r(Qjr,"pegasus"),Qjr.forEach(t),lKe=r(W8," \u2014 "),IS=n(W8,"A",{href:!0});var Wjr=s(IS);iKe=r(Wjr,"PegasusTokenizer"),Wjr.forEach(t),dKe=r(W8," or "),qS=n(W8,"A",{href:!0});var Hjr=s(qS);cKe=r(Hjr,"PegasusTokenizerFast"),Hjr.forEach(t),fKe=r(W8," (Pegasus model)"),W8.forEach(t),mKe=i(w),Zg=n(w,"LI",{});var k7e=s(Zg);KZ=n(k7e,"STRONG",{});var Ujr=s(KZ);gKe=r(Ujr,"perceiver"),Ujr.forEach(t),hKe=r(k7e," \u2014 "),NS=n(k7e,"A",{href:!0});var Jjr=s(NS);pKe=r(Jjr,"PerceiverTokenizer"),Jjr.forEach(t),_Ke=r(k7e," (Perceiver model)"),k7e.forEach(t),uKe=i(w),eh=n(w,"LI",{});var S7e=s(eh);ZZ=n(S7e,"STRONG",{});var Yjr=s(ZZ);bKe=r(Yjr,"phobert"),Yjr.forEach(t),FKe=r(S7e," \u2014 "),jS=n(S7e,"A",{href:!0});var Kjr=s(jS);vKe=r(Kjr,"PhobertTokenizer"),Kjr.forEach(t),TKe=r(S7e," (PhoBERT model)"),S7e.forEach(t),MKe=i(w),oh=n(w,"LI",{});var R7e=s(oh);eee=n(R7e,"STRONG",{});var Zjr=s(eee);EKe=r(Zjr,"plbart"),Zjr.forEach(t),CKe=r(R7e," \u2014 "),DS=n(R7e,"A",{href:!0});var eDr=s(DS);wKe=r(eDr,"PLBartTokenizer"),eDr.forEach(t),AKe=r(R7e," (PLBart model)"),R7e.forEach(t),yKe=i(w),rh=n(w,"LI",{});var B7e=s(rh);oee=n(B7e,"STRONG",{});var oDr=s(oee);LKe=r(oDr,"prophetnet"),oDr.forEach(t),xKe=r(B7e," \u2014 "),GS=n(B7e,"A",{href:!0});var rDr=s(GS);kKe=r(rDr,"ProphetNetTokenizer"),rDr.forEach(t),SKe=r(B7e," (ProphetNet model)"),B7e.forEach(t),RKe=i(w),As=n(w,"LI",{});var H8=s(As);ree=n(H8,"STRONG",{});var tDr=s(ree);BKe=r(tDr,"qdqbert"),tDr.forEach(t),PKe=r(H8," \u2014 "),OS=n(H8,"A",{href:!0});var aDr=s(OS);$Ke=r(aDr,"BertTokenizer"),aDr.forEach(t),IKe=r(H8," or "),VS=n(H8,"A",{href:!0});var nDr=s(VS);qKe=r(nDr,"BertTokenizerFast"),nDr.forEach(t),NKe=r(H8," (QDQBert model)"),H8.forEach(t),jKe=i(w),th=n(w,"LI",{});var P7e=s(th);tee=n(P7e,"STRONG",{});var sDr=s(tee);DKe=r(sDr,"rag"),sDr.forEach(t),GKe=r(P7e," \u2014 "),XS=n(P7e,"A",{href:!0});var lDr=s(XS);OKe=r(lDr,"RagTokenizer"),lDr.forEach(t),VKe=r(P7e," (RAG model)"),P7e.forEach(t),XKe=i(w),ys=n(w,"LI",{});var U8=s(ys);aee=n(U8,"STRONG",{});var iDr=s(aee);zKe=r(iDr,"realm"),iDr.forEach(t),QKe=r(U8," \u2014 "),zS=n(U8,"A",{href:!0});var dDr=s(zS);WKe=r(dDr,"RealmTokenizer"),dDr.forEach(t),HKe=r(U8," or "),QS=n(U8,"A",{href:!0});var cDr=s(QS);UKe=r(cDr,"RealmTokenizerFast"),cDr.forEach(t),JKe=r(U8," (Realm model)"),U8.forEach(t),YKe=i(w),Ls=n(w,"LI",{});var J8=s(Ls);nee=n(J8,"STRONG",{});var fDr=s(nee);KKe=r(fDr,"reformer"),fDr.forEach(t),ZKe=r(J8," \u2014 "),WS=n(J8,"A",{href:!0});var mDr=s(WS);eZe=r(mDr,"ReformerTokenizer"),mDr.forEach(t),oZe=r(J8," or "),HS=n(J8,"A",{href:!0});var gDr=s(HS);rZe=r(gDr,"ReformerTokenizerFast"),gDr.forEach(t),tZe=r(J8," (Reformer model)"),J8.forEach(t),aZe=i(w),xs=n(w,"LI",{});var Y8=s(xs);see=n(Y8,"STRONG",{});var hDr=s(see);nZe=r(hDr,"rembert"),hDr.forEach(t),sZe=r(Y8," \u2014 "),US=n(Y8,"A",{href:!0});var pDr=s(US);lZe=r(pDr,"RemBertTokenizer"),pDr.forEach(t),iZe=r(Y8," or "),JS=n(Y8,"A",{href:!0});var _Dr=s(JS);dZe=r(_Dr,"RemBertTokenizerFast"),_Dr.forEach(t),cZe=r(Y8," (RemBERT model)"),Y8.forEach(t),fZe=i(w),ks=n(w,"LI",{});var K8=s(ks);lee=n(K8,"STRONG",{});var uDr=s(lee);mZe=r(uDr,"retribert"),uDr.forEach(t),gZe=r(K8," \u2014 "),YS=n(K8,"A",{href:!0});var bDr=s(YS);hZe=r(bDr,"RetriBertTokenizer"),bDr.forEach(t),pZe=r(K8," or "),KS=n(K8,"A",{href:!0});var FDr=s(KS);_Ze=r(FDr,"RetriBertTokenizerFast"),FDr.forEach(t),uZe=r(K8," (RetriBERT model)"),K8.forEach(t),bZe=i(w),Ss=n(w,"LI",{});var Z8=s(Ss);iee=n(Z8,"STRONG",{});var vDr=s(iee);FZe=r(vDr,"roberta"),vDr.forEach(t),vZe=r(Z8," \u2014 "),ZS=n(Z8,"A",{href:!0});var TDr=s(ZS);TZe=r(TDr,"RobertaTokenizer"),TDr.forEach(t),MZe=r(Z8," or "),eR=n(Z8,"A",{href:!0});var MDr=s(eR);EZe=r(MDr,"RobertaTokenizerFast"),MDr.forEach(t),CZe=r(Z8," (RoBERTa model)"),Z8.forEach(t),wZe=i(w),Rs=n(w,"LI",{});var e9=s(Rs);dee=n(e9,"STRONG",{});var EDr=s(dee);AZe=r(EDr,"roformer"),EDr.forEach(t),yZe=r(e9," \u2014 "),oR=n(e9,"A",{href:!0});var CDr=s(oR);LZe=r(CDr,"RoFormerTokenizer"),CDr.forEach(t),xZe=r(e9," or "),rR=n(e9,"A",{href:!0});var wDr=s(rR);kZe=r(wDr,"RoFormerTokenizerFast"),wDr.forEach(t),SZe=r(e9," (RoFormer model)"),e9.forEach(t),RZe=i(w),ah=n(w,"LI",{});var $7e=s(ah);cee=n($7e,"STRONG",{});var ADr=s(cee);BZe=r(ADr,"speech_to_text"),ADr.forEach(t),PZe=r($7e," \u2014 "),tR=n($7e,"A",{href:!0});var yDr=s(tR);$Ze=r(yDr,"Speech2TextTokenizer"),yDr.forEach(t),IZe=r($7e," (Speech2Text model)"),$7e.forEach(t),qZe=i(w),nh=n(w,"LI",{});var I7e=s(nh);fee=n(I7e,"STRONG",{});var LDr=s(fee);NZe=r(LDr,"speech_to_text_2"),LDr.forEach(t),jZe=r(I7e," \u2014 "),aR=n(I7e,"A",{href:!0});var xDr=s(aR);DZe=r(xDr,"Speech2Text2Tokenizer"),xDr.forEach(t),GZe=r(I7e," (Speech2Text2 model)"),I7e.forEach(t),OZe=i(w),Bs=n(w,"LI",{});var o9=s(Bs);mee=n(o9,"STRONG",{});var kDr=s(mee);VZe=r(kDr,"splinter"),kDr.forEach(t),XZe=r(o9," \u2014 "),nR=n(o9,"A",{href:!0});var SDr=s(nR);zZe=r(SDr,"SplinterTokenizer"),SDr.forEach(t),QZe=r(o9," or "),sR=n(o9,"A",{href:!0});var RDr=s(sR);WZe=r(RDr,"SplinterTokenizerFast"),RDr.forEach(t),HZe=r(o9," (Splinter model)"),o9.forEach(t),UZe=i(w),Ps=n(w,"LI",{});var r9=s(Ps);gee=n(r9,"STRONG",{});var BDr=s(gee);JZe=r(BDr,"squeezebert"),BDr.forEach(t),YZe=r(r9," \u2014 "),lR=n(r9,"A",{href:!0});var PDr=s(lR);KZe=r(PDr,"SqueezeBertTokenizer"),PDr.forEach(t),ZZe=r(r9," or "),iR=n(r9,"A",{href:!0});var $Dr=s(iR);eeo=r($Dr,"SqueezeBertTokenizerFast"),$Dr.forEach(t),oeo=r(r9," (SqueezeBERT model)"),r9.forEach(t),reo=i(w),$s=n(w,"LI",{});var t9=s($s);hee=n(t9,"STRONG",{});var IDr=s(hee);teo=r(IDr,"t5"),IDr.forEach(t),aeo=r(t9," \u2014 "),dR=n(t9,"A",{href:!0});var qDr=s(dR);neo=r(qDr,"T5Tokenizer"),qDr.forEach(t),seo=r(t9," or "),cR=n(t9,"A",{href:!0});var NDr=s(cR);leo=r(NDr,"T5TokenizerFast"),NDr.forEach(t),ieo=r(t9," (T5 model)"),t9.forEach(t),deo=i(w),sh=n(w,"LI",{});var q7e=s(sh);pee=n(q7e,"STRONG",{});var jDr=s(pee);ceo=r(jDr,"tapas"),jDr.forEach(t),feo=r(q7e," \u2014 "),fR=n(q7e,"A",{href:!0});var DDr=s(fR);meo=r(DDr,"TapasTokenizer"),DDr.forEach(t),geo=r(q7e," (TAPAS model)"),q7e.forEach(t),heo=i(w),lh=n(w,"LI",{});var N7e=s(lh);_ee=n(N7e,"STRONG",{});var GDr=s(_ee);peo=r(GDr,"tapex"),GDr.forEach(t),_eo=r(N7e," \u2014 "),mR=n(N7e,"A",{href:!0});var ODr=s(mR);ueo=r(ODr,"TapexTokenizer"),ODr.forEach(t),beo=r(N7e," (TAPEX model)"),N7e.forEach(t),Feo=i(w),ih=n(w,"LI",{});var j7e=s(ih);uee=n(j7e,"STRONG",{});var VDr=s(uee);veo=r(VDr,"transfo-xl"),VDr.forEach(t),Teo=r(j7e," \u2014 "),gR=n(j7e,"A",{href:!0});var XDr=s(gR);Meo=r(XDr,"TransfoXLTokenizer"),XDr.forEach(t),Eeo=r(j7e," (Transformer-XL model)"),j7e.forEach(t),Ceo=i(w),dh=n(w,"LI",{});var D7e=s(dh);bee=n(D7e,"STRONG",{});var zDr=s(bee);weo=r(zDr,"wav2vec2"),zDr.forEach(t),Aeo=r(D7e," \u2014 "),hR=n(D7e,"A",{href:!0});var QDr=s(hR);yeo=r(QDr,"Wav2Vec2CTCTokenizer"),QDr.forEach(t),Leo=r(D7e," (Wav2Vec2 model)"),D7e.forEach(t),xeo=i(w),ch=n(w,"LI",{});var G7e=s(ch);Fee=n(G7e,"STRONG",{});var WDr=s(Fee);keo=r(WDr,"wav2vec2_phoneme"),WDr.forEach(t),Seo=r(G7e," \u2014 "),pR=n(G7e,"A",{href:!0});var HDr=s(pR);Reo=r(HDr,"Wav2Vec2PhonemeCTCTokenizer"),HDr.forEach(t),Beo=r(G7e," (Wav2Vec2Phoneme model)"),G7e.forEach(t),Peo=i(w),Is=n(w,"LI",{});var a9=s(Is);vee=n(a9,"STRONG",{});var UDr=s(vee);$eo=r(UDr,"xglm"),UDr.forEach(t),Ieo=r(a9," \u2014 "),_R=n(a9,"A",{href:!0});var JDr=s(_R);qeo=r(JDr,"XGLMTokenizer"),JDr.forEach(t),Neo=r(a9," or "),uR=n(a9,"A",{href:!0});var YDr=s(uR);jeo=r(YDr,"XGLMTokenizerFast"),YDr.forEach(t),Deo=r(a9," (XGLM model)"),a9.forEach(t),Geo=i(w),fh=n(w,"LI",{});var O7e=s(fh);Tee=n(O7e,"STRONG",{});var KDr=s(Tee);Oeo=r(KDr,"xlm"),KDr.forEach(t),Veo=r(O7e," \u2014 "),bR=n(O7e,"A",{href:!0});var ZDr=s(bR);Xeo=r(ZDr,"XLMTokenizer"),ZDr.forEach(t),zeo=r(O7e," (XLM model)"),O7e.forEach(t),Qeo=i(w),mh=n(w,"LI",{});var V7e=s(mh);Mee=n(V7e,"STRONG",{});var eGr=s(Mee);Weo=r(eGr,"xlm-prophetnet"),eGr.forEach(t),Heo=r(V7e," \u2014 "),FR=n(V7e,"A",{href:!0});var oGr=s(FR);Ueo=r(oGr,"XLMProphetNetTokenizer"),oGr.forEach(t),Jeo=r(V7e," (XLMProphetNet model)"),V7e.forEach(t),Yeo=i(w),qs=n(w,"LI",{});var n9=s(qs);Eee=n(n9,"STRONG",{});var rGr=s(Eee);Keo=r(rGr,"xlm-roberta"),rGr.forEach(t),Zeo=r(n9," \u2014 "),vR=n(n9,"A",{href:!0});var tGr=s(vR);eoo=r(tGr,"XLMRobertaTokenizer"),tGr.forEach(t),ooo=r(n9," or "),TR=n(n9,"A",{href:!0});var aGr=s(TR);roo=r(aGr,"XLMRobertaTokenizerFast"),aGr.forEach(t),too=r(n9," (XLM-RoBERTa model)"),n9.forEach(t),aoo=i(w),Ns=n(w,"LI",{});var s9=s(Ns);Cee=n(s9,"STRONG",{});var nGr=s(Cee);noo=r(nGr,"xlnet"),nGr.forEach(t),soo=r(s9," \u2014 "),MR=n(s9,"A",{href:!0});var sGr=s(MR);loo=r(sGr,"XLNetTokenizer"),sGr.forEach(t),ioo=r(s9," or "),ER=n(s9,"A",{href:!0});var lGr=s(ER);doo=r(lGr,"XLNetTokenizerFast"),lGr.forEach(t),coo=r(s9," (XLNet model)"),s9.forEach(t),w.forEach(t),foo=i(ha),wee=n(ha,"P",{});var iGr=s(wee);moo=r(iGr,"Examples:"),iGr.forEach(t),goo=i(ha),m(IC.$$.fragment,ha),ha.forEach(t),hoo=i(Vs),gh=n(Vs,"DIV",{class:!0});var iPe=s(gh);m(qC.$$.fragment,iPe),poo=i(iPe),Aee=n(iPe,"P",{});var dGr=s(Aee);_oo=r(dGr,"Register a new tokenizer in this mapping."),dGr.forEach(t),iPe.forEach(t),Vs.forEach(t),aRe=i(c),Wi=n(c,"H2",{class:!0});var dPe=s(Wi);hh=n(dPe,"A",{id:!0,class:!0,href:!0});var cGr=s(hh);yee=n(cGr,"SPAN",{});var fGr=s(yee);m(NC.$$.fragment,fGr),fGr.forEach(t),cGr.forEach(t),uoo=i(dPe),Lee=n(dPe,"SPAN",{});var mGr=s(Lee);boo=r(mGr,"AutoFeatureExtractor"),mGr.forEach(t),dPe.forEach(t),nRe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(jC.$$.fragment,Xs),Foo=i(Xs),DC=n(Xs,"P",{});var cPe=s(DC);voo=r(cPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CR=n(cPe,"A",{href:!0});var gGr=s(CR);Too=r(gGr,"AutoFeatureExtractor.from_pretrained()"),gGr.forEach(t),Moo=r(cPe," class method."),cPe.forEach(t),Eoo=i(Xs),GC=n(Xs,"P",{});var fPe=s(GC);Coo=r(fPe,"This class cannot be instantiated directly using "),xee=n(fPe,"CODE",{});var hGr=s(xee);woo=r(hGr,"__init__()"),hGr.forEach(t),Aoo=r(fPe," (throws an error)."),fPe.forEach(t),yoo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(OC.$$.fragment,Nt),Loo=i(Nt),kee=n(Nt,"P",{});var pGr=s(kee);xoo=r(pGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),pGr.forEach(t),koo=i(Nt),Va=n(Nt,"P",{});var TE=s(Va);Soo=r(TE,"The feature extractor class to instantiate is selected based on the "),See=n(TE,"CODE",{});var _Gr=s(See);Roo=r(_Gr,"model_type"),_Gr.forEach(t),Boo=r(TE,` property of the config object
(either passed as an argument or loaded from `),Ree=n(TE,"CODE",{});var uGr=s(Ree);Poo=r(uGr,"pretrained_model_name_or_path"),uGr.forEach(t),$oo=r(TE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Bee=n(TE,"CODE",{});var bGr=s(Bee);Ioo=r(bGr,"pretrained_model_name_or_path"),bGr.forEach(t),qoo=r(TE,":"),TE.forEach(t),Noo=i(Nt),te=n(Nt,"UL",{});var se=s(te);ph=n(se,"LI",{});var X7e=s(ph);Pee=n(X7e,"STRONG",{});var FGr=s(Pee);joo=r(FGr,"beit"),FGr.forEach(t),Doo=r(X7e," \u2014 "),wR=n(X7e,"A",{href:!0});var vGr=s(wR);Goo=r(vGr,"BeitFeatureExtractor"),vGr.forEach(t),Ooo=r(X7e," (BEiT model)"),X7e.forEach(t),Voo=i(se),_h=n(se,"LI",{});var z7e=s(_h);$ee=n(z7e,"STRONG",{});var TGr=s($ee);Xoo=r(TGr,"clip"),TGr.forEach(t),zoo=r(z7e," \u2014 "),AR=n(z7e,"A",{href:!0});var MGr=s(AR);Qoo=r(MGr,"CLIPFeatureExtractor"),MGr.forEach(t),Woo=r(z7e," (CLIP model)"),z7e.forEach(t),Hoo=i(se),uh=n(se,"LI",{});var Q7e=s(uh);Iee=n(Q7e,"STRONG",{});var EGr=s(Iee);Uoo=r(EGr,"convnext"),EGr.forEach(t),Joo=r(Q7e," \u2014 "),yR=n(Q7e,"A",{href:!0});var CGr=s(yR);Yoo=r(CGr,"ConvNextFeatureExtractor"),CGr.forEach(t),Koo=r(Q7e," (ConvNext model)"),Q7e.forEach(t),Zoo=i(se),bh=n(se,"LI",{});var W7e=s(bh);qee=n(W7e,"STRONG",{});var wGr=s(qee);ero=r(wGr,"deit"),wGr.forEach(t),oro=r(W7e," \u2014 "),LR=n(W7e,"A",{href:!0});var AGr=s(LR);rro=r(AGr,"DeiTFeatureExtractor"),AGr.forEach(t),tro=r(W7e," (DeiT model)"),W7e.forEach(t),aro=i(se),Fh=n(se,"LI",{});var H7e=s(Fh);Nee=n(H7e,"STRONG",{});var yGr=s(Nee);nro=r(yGr,"detr"),yGr.forEach(t),sro=r(H7e," \u2014 "),xR=n(H7e,"A",{href:!0});var LGr=s(xR);lro=r(LGr,"DetrFeatureExtractor"),LGr.forEach(t),iro=r(H7e," (DETR model)"),H7e.forEach(t),dro=i(se),vh=n(se,"LI",{});var U7e=s(vh);jee=n(U7e,"STRONG",{});var xGr=s(jee);cro=r(xGr,"hubert"),xGr.forEach(t),fro=r(U7e," \u2014 "),kR=n(U7e,"A",{href:!0});var kGr=s(kR);mro=r(kGr,"Wav2Vec2FeatureExtractor"),kGr.forEach(t),gro=r(U7e," (Hubert model)"),U7e.forEach(t),hro=i(se),Th=n(se,"LI",{});var J7e=s(Th);Dee=n(J7e,"STRONG",{});var SGr=s(Dee);pro=r(SGr,"layoutlmv2"),SGr.forEach(t),_ro=r(J7e," \u2014 "),SR=n(J7e,"A",{href:!0});var RGr=s(SR);uro=r(RGr,"LayoutLMv2FeatureExtractor"),RGr.forEach(t),bro=r(J7e," (LayoutLMv2 model)"),J7e.forEach(t),Fro=i(se),Mh=n(se,"LI",{});var Y7e=s(Mh);Gee=n(Y7e,"STRONG",{});var BGr=s(Gee);vro=r(BGr,"maskformer"),BGr.forEach(t),Tro=r(Y7e," \u2014 "),RR=n(Y7e,"A",{href:!0});var PGr=s(RR);Mro=r(PGr,"MaskFormerFeatureExtractor"),PGr.forEach(t),Ero=r(Y7e," (MaskFormer model)"),Y7e.forEach(t),Cro=i(se),Eh=n(se,"LI",{});var K7e=s(Eh);Oee=n(K7e,"STRONG",{});var $Gr=s(Oee);wro=r($Gr,"perceiver"),$Gr.forEach(t),Aro=r(K7e," \u2014 "),BR=n(K7e,"A",{href:!0});var IGr=s(BR);yro=r(IGr,"PerceiverFeatureExtractor"),IGr.forEach(t),Lro=r(K7e," (Perceiver model)"),K7e.forEach(t),xro=i(se),Ch=n(se,"LI",{});var Z7e=s(Ch);Vee=n(Z7e,"STRONG",{});var qGr=s(Vee);kro=r(qGr,"poolformer"),qGr.forEach(t),Sro=r(Z7e," \u2014 "),PR=n(Z7e,"A",{href:!0});var NGr=s(PR);Rro=r(NGr,"PoolFormerFeatureExtractor"),NGr.forEach(t),Bro=r(Z7e," (PoolFormer model)"),Z7e.forEach(t),Pro=i(se),wh=n(se,"LI",{});var eMe=s(wh);Xee=n(eMe,"STRONG",{});var jGr=s(Xee);$ro=r(jGr,"resnet"),jGr.forEach(t),Iro=r(eMe," \u2014 "),$R=n(eMe,"A",{href:!0});var DGr=s($R);qro=r(DGr,"ConvNextFeatureExtractor"),DGr.forEach(t),Nro=r(eMe," (ResNet model)"),eMe.forEach(t),jro=i(se),Ah=n(se,"LI",{});var oMe=s(Ah);zee=n(oMe,"STRONG",{});var GGr=s(zee);Dro=r(GGr,"segformer"),GGr.forEach(t),Gro=r(oMe," \u2014 "),IR=n(oMe,"A",{href:!0});var OGr=s(IR);Oro=r(OGr,"SegformerFeatureExtractor"),OGr.forEach(t),Vro=r(oMe," (SegFormer model)"),oMe.forEach(t),Xro=i(se),yh=n(se,"LI",{});var rMe=s(yh);Qee=n(rMe,"STRONG",{});var VGr=s(Qee);zro=r(VGr,"speech_to_text"),VGr.forEach(t),Qro=r(rMe," \u2014 "),qR=n(rMe,"A",{href:!0});var XGr=s(qR);Wro=r(XGr,"Speech2TextFeatureExtractor"),XGr.forEach(t),Hro=r(rMe," (Speech2Text model)"),rMe.forEach(t),Uro=i(se),Lh=n(se,"LI",{});var tMe=s(Lh);Wee=n(tMe,"STRONG",{});var zGr=s(Wee);Jro=r(zGr,"swin"),zGr.forEach(t),Yro=r(tMe," \u2014 "),NR=n(tMe,"A",{href:!0});var QGr=s(NR);Kro=r(QGr,"ViTFeatureExtractor"),QGr.forEach(t),Zro=r(tMe," (Swin model)"),tMe.forEach(t),eto=i(se),xh=n(se,"LI",{});var aMe=s(xh);Hee=n(aMe,"STRONG",{});var WGr=s(Hee);oto=r(WGr,"van"),WGr.forEach(t),rto=r(aMe," \u2014 "),jR=n(aMe,"A",{href:!0});var HGr=s(jR);tto=r(HGr,"ConvNextFeatureExtractor"),HGr.forEach(t),ato=r(aMe," (VAN model)"),aMe.forEach(t),nto=i(se),kh=n(se,"LI",{});var nMe=s(kh);Uee=n(nMe,"STRONG",{});var UGr=s(Uee);sto=r(UGr,"vit"),UGr.forEach(t),lto=r(nMe," \u2014 "),DR=n(nMe,"A",{href:!0});var JGr=s(DR);ito=r(JGr,"ViTFeatureExtractor"),JGr.forEach(t),dto=r(nMe," (ViT model)"),nMe.forEach(t),cto=i(se),Sh=n(se,"LI",{});var sMe=s(Sh);Jee=n(sMe,"STRONG",{});var YGr=s(Jee);fto=r(YGr,"vit_mae"),YGr.forEach(t),mto=r(sMe," \u2014 "),GR=n(sMe,"A",{href:!0});var KGr=s(GR);gto=r(KGr,"ViTFeatureExtractor"),KGr.forEach(t),hto=r(sMe," (ViTMAE model)"),sMe.forEach(t),pto=i(se),Rh=n(se,"LI",{});var lMe=s(Rh);Yee=n(lMe,"STRONG",{});var ZGr=s(Yee);_to=r(ZGr,"wav2vec2"),ZGr.forEach(t),uto=r(lMe," \u2014 "),OR=n(lMe,"A",{href:!0});var eOr=s(OR);bto=r(eOr,"Wav2Vec2FeatureExtractor"),eOr.forEach(t),Fto=r(lMe," (Wav2Vec2 model)"),lMe.forEach(t),se.forEach(t),vto=i(Nt),m(Bh.$$.fragment,Nt),Tto=i(Nt),Kee=n(Nt,"P",{});var oOr=s(Kee);Mto=r(oOr,"Examples:"),oOr.forEach(t),Eto=i(Nt),m(VC.$$.fragment,Nt),Nt.forEach(t),Cto=i(Xs),Ph=n(Xs,"DIV",{class:!0});var mPe=s(Ph);m(XC.$$.fragment,mPe),wto=i(mPe),Zee=n(mPe,"P",{});var rOr=s(Zee);Ato=r(rOr,"Register a new feature extractor for this class."),rOr.forEach(t),mPe.forEach(t),Xs.forEach(t),sRe=i(c),Hi=n(c,"H2",{class:!0});var gPe=s(Hi);$h=n(gPe,"A",{id:!0,class:!0,href:!0});var tOr=s($h);eoe=n(tOr,"SPAN",{});var aOr=s(eoe);m(zC.$$.fragment,aOr),aOr.forEach(t),tOr.forEach(t),yto=i(gPe),ooe=n(gPe,"SPAN",{});var nOr=s(ooe);Lto=r(nOr,"AutoProcessor"),nOr.forEach(t),gPe.forEach(t),lRe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(QC.$$.fragment,zs),xto=i(zs),WC=n(zs,"P",{});var hPe=s(WC);kto=r(hPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),VR=n(hPe,"A",{href:!0});var sOr=s(VR);Sto=r(sOr,"AutoProcessor.from_pretrained()"),sOr.forEach(t),Rto=r(hPe," class method."),hPe.forEach(t),Bto=i(zs),HC=n(zs,"P",{});var pPe=s(HC);Pto=r(pPe,"This class cannot be instantiated directly using "),roe=n(pPe,"CODE",{});var lOr=s(roe);$to=r(lOr,"__init__()"),lOr.forEach(t),Ito=r(pPe," (throws an error)."),pPe.forEach(t),qto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(UC.$$.fragment,jt),Nto=i(jt),toe=n(jt,"P",{});var iOr=s(toe);jto=r(iOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),iOr.forEach(t),Dto=i(jt),Ui=n(jt,"P",{});var eU=s(Ui);Gto=r(eU,"The processor class to instantiate is selected based on the "),aoe=n(eU,"CODE",{});var dOr=s(aoe);Oto=r(dOr,"model_type"),dOr.forEach(t),Vto=r(eU,` property of the config object (either
passed as an argument or loaded from `),noe=n(eU,"CODE",{});var cOr=s(noe);Xto=r(cOr,"pretrained_model_name_or_path"),cOr.forEach(t),zto=r(eU," if possible):"),eU.forEach(t),Qto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Ih=n(jo,"LI",{});var iMe=s(Ih);soe=n(iMe,"STRONG",{});var fOr=s(soe);Wto=r(fOr,"clip"),fOr.forEach(t),Hto=r(iMe," \u2014 "),XR=n(iMe,"A",{href:!0});var mOr=s(XR);Uto=r(mOr,"CLIPProcessor"),mOr.forEach(t),Jto=r(iMe," (CLIP model)"),iMe.forEach(t),Yto=i(jo),qh=n(jo,"LI",{});var dMe=s(qh);loe=n(dMe,"STRONG",{});var gOr=s(loe);Kto=r(gOr,"layoutlmv2"),gOr.forEach(t),Zto=r(dMe," \u2014 "),zR=n(dMe,"A",{href:!0});var hOr=s(zR);eao=r(hOr,"LayoutLMv2Processor"),hOr.forEach(t),oao=r(dMe," (LayoutLMv2 model)"),dMe.forEach(t),rao=i(jo),Nh=n(jo,"LI",{});var cMe=s(Nh);ioe=n(cMe,"STRONG",{});var pOr=s(ioe);tao=r(pOr,"layoutxlm"),pOr.forEach(t),aao=r(cMe," \u2014 "),QR=n(cMe,"A",{href:!0});var _Or=s(QR);nao=r(_Or,"LayoutXLMProcessor"),_Or.forEach(t),sao=r(cMe," (LayoutXLM model)"),cMe.forEach(t),lao=i(jo),jh=n(jo,"LI",{});var fMe=s(jh);doe=n(fMe,"STRONG",{});var uOr=s(doe);iao=r(uOr,"speech_to_text"),uOr.forEach(t),dao=r(fMe," \u2014 "),WR=n(fMe,"A",{href:!0});var bOr=s(WR);cao=r(bOr,"Speech2TextProcessor"),bOr.forEach(t),fao=r(fMe," (Speech2Text model)"),fMe.forEach(t),mao=i(jo),Dh=n(jo,"LI",{});var mMe=s(Dh);coe=n(mMe,"STRONG",{});var FOr=s(coe);gao=r(FOr,"speech_to_text_2"),FOr.forEach(t),hao=r(mMe," \u2014 "),HR=n(mMe,"A",{href:!0});var vOr=s(HR);pao=r(vOr,"Speech2Text2Processor"),vOr.forEach(t),_ao=r(mMe," (Speech2Text2 model)"),mMe.forEach(t),uao=i(jo),Gh=n(jo,"LI",{});var gMe=s(Gh);foe=n(gMe,"STRONG",{});var TOr=s(foe);bao=r(TOr,"trocr"),TOr.forEach(t),Fao=r(gMe," \u2014 "),UR=n(gMe,"A",{href:!0});var MOr=s(UR);vao=r(MOr,"TrOCRProcessor"),MOr.forEach(t),Tao=r(gMe," (TrOCR model)"),gMe.forEach(t),Mao=i(jo),Oh=n(jo,"LI",{});var hMe=s(Oh);moe=n(hMe,"STRONG",{});var EOr=s(moe);Eao=r(EOr,"vision-text-dual-encoder"),EOr.forEach(t),Cao=r(hMe," \u2014 "),JR=n(hMe,"A",{href:!0});var COr=s(JR);wao=r(COr,"VisionTextDualEncoderProcessor"),COr.forEach(t),Aao=r(hMe," (VisionTextDualEncoder model)"),hMe.forEach(t),yao=i(jo),Vh=n(jo,"LI",{});var pMe=s(Vh);goe=n(pMe,"STRONG",{});var wOr=s(goe);Lao=r(wOr,"wav2vec2"),wOr.forEach(t),xao=r(pMe," \u2014 "),YR=n(pMe,"A",{href:!0});var AOr=s(YR);kao=r(AOr,"Wav2Vec2Processor"),AOr.forEach(t),Sao=r(pMe," (Wav2Vec2 model)"),pMe.forEach(t),jo.forEach(t),Rao=i(jt),m(Xh.$$.fragment,jt),Bao=i(jt),hoe=n(jt,"P",{});var yOr=s(hoe);Pao=r(yOr,"Examples:"),yOr.forEach(t),$ao=i(jt),m(JC.$$.fragment,jt),jt.forEach(t),Iao=i(zs),zh=n(zs,"DIV",{class:!0});var _Pe=s(zh);m(YC.$$.fragment,_Pe),qao=i(_Pe),poe=n(_Pe,"P",{});var LOr=s(poe);Nao=r(LOr,"Register a new processor for this class."),LOr.forEach(t),_Pe.forEach(t),zs.forEach(t),iRe=i(c),Ji=n(c,"H2",{class:!0});var uPe=s(Ji);Qh=n(uPe,"A",{id:!0,class:!0,href:!0});var xOr=s(Qh);_oe=n(xOr,"SPAN",{});var kOr=s(_oe);m(KC.$$.fragment,kOr),kOr.forEach(t),xOr.forEach(t),jao=i(uPe),uoe=n(uPe,"SPAN",{});var SOr=s(uoe);Dao=r(SOr,"AutoModel"),SOr.forEach(t),uPe.forEach(t),dRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(ZC.$$.fragment,Qs),Gao=i(Qs),Yi=n(Qs,"P",{});var oU=s(Yi);Oao=r(oU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KR=n(oU,"A",{href:!0});var ROr=s(KR);Vao=r(ROr,"from_pretrained()"),ROr.forEach(t),Xao=r(oU," class method or the "),ZR=n(oU,"A",{href:!0});var BOr=s(ZR);zao=r(BOr,"from_config()"),BOr.forEach(t),Qao=r(oU,` class
method.`),oU.forEach(t),Wao=i(Qs),e5=n(Qs,"P",{});var bPe=s(e5);Hao=r(bPe,"This class cannot be instantiated directly using "),boe=n(bPe,"CODE",{});var POr=s(boe);Uao=r(POr,"__init__()"),POr.forEach(t),Jao=r(bPe," (throws an error)."),bPe.forEach(t),Yao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(o5.$$.fragment,Ws),Kao=i(Ws),Foe=n(Ws,"P",{});var $Or=s(Foe);Zao=r($Or,"Instantiates one of the base model classes of the library from a configuration."),$Or.forEach(t),eno=i(Ws),Ki=n(Ws,"P",{});var rU=s(Ki);ono=r(rU,`Note:
Loading a model from its configuration file does `),voe=n(rU,"STRONG",{});var IOr=s(voe);rno=r(IOr,"not"),IOr.forEach(t),tno=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eB=n(rU,"A",{href:!0});var qOr=s(eB);ano=r(qOr,"from_pretrained()"),qOr.forEach(t),nno=r(rU," to load the model weights."),rU.forEach(t),sno=i(Ws),Toe=n(Ws,"P",{});var NOr=s(Toe);lno=r(NOr,"Examples:"),NOr.forEach(t),ino=i(Ws),m(r5.$$.fragment,Ws),Ws.forEach(t),dno=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(t5.$$.fragment,Dt),cno=i(Dt),Moe=n(Dt,"P",{});var jOr=s(Moe);fno=r(jOr,"Instantiate one of the base model classes of the library from a pretrained model."),jOr.forEach(t),mno=i(Dt),Xa=n(Dt,"P",{});var ME=s(Xa);gno=r(ME,"The model class to instantiate is selected based on the "),Eoe=n(ME,"CODE",{});var DOr=s(Eoe);hno=r(DOr,"model_type"),DOr.forEach(t),pno=r(ME,` property of the config object (either
passed as an argument or loaded from `),Coe=n(ME,"CODE",{});var GOr=s(Coe);_no=r(GOr,"pretrained_model_name_or_path"),GOr.forEach(t),uno=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),woe=n(ME,"CODE",{});var OOr=s(woe);bno=r(OOr,"pretrained_model_name_or_path"),OOr.forEach(t),Fno=r(ME,":"),ME.forEach(t),vno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Wh=n(M,"LI",{});var _Me=s(Wh);Aoe=n(_Me,"STRONG",{});var VOr=s(Aoe);Tno=r(VOr,"albert"),VOr.forEach(t),Mno=r(_Me," \u2014 "),oB=n(_Me,"A",{href:!0});var XOr=s(oB);Eno=r(XOr,"AlbertModel"),XOr.forEach(t),Cno=r(_Me," (ALBERT model)"),_Me.forEach(t),wno=i(M),Hh=n(M,"LI",{});var uMe=s(Hh);yoe=n(uMe,"STRONG",{});var zOr=s(yoe);Ano=r(zOr,"bart"),zOr.forEach(t),yno=r(uMe," \u2014 "),rB=n(uMe,"A",{href:!0});var QOr=s(rB);Lno=r(QOr,"BartModel"),QOr.forEach(t),xno=r(uMe," (BART model)"),uMe.forEach(t),kno=i(M),Uh=n(M,"LI",{});var bMe=s(Uh);Loe=n(bMe,"STRONG",{});var WOr=s(Loe);Sno=r(WOr,"beit"),WOr.forEach(t),Rno=r(bMe," \u2014 "),tB=n(bMe,"A",{href:!0});var HOr=s(tB);Bno=r(HOr,"BeitModel"),HOr.forEach(t),Pno=r(bMe," (BEiT model)"),bMe.forEach(t),$no=i(M),Jh=n(M,"LI",{});var FMe=s(Jh);xoe=n(FMe,"STRONG",{});var UOr=s(xoe);Ino=r(UOr,"bert"),UOr.forEach(t),qno=r(FMe," \u2014 "),aB=n(FMe,"A",{href:!0});var JOr=s(aB);Nno=r(JOr,"BertModel"),JOr.forEach(t),jno=r(FMe," (BERT model)"),FMe.forEach(t),Dno=i(M),Yh=n(M,"LI",{});var vMe=s(Yh);koe=n(vMe,"STRONG",{});var YOr=s(koe);Gno=r(YOr,"bert-generation"),YOr.forEach(t),Ono=r(vMe," \u2014 "),nB=n(vMe,"A",{href:!0});var KOr=s(nB);Vno=r(KOr,"BertGenerationEncoder"),KOr.forEach(t),Xno=r(vMe," (Bert Generation model)"),vMe.forEach(t),zno=i(M),Kh=n(M,"LI",{});var TMe=s(Kh);Soe=n(TMe,"STRONG",{});var ZOr=s(Soe);Qno=r(ZOr,"big_bird"),ZOr.forEach(t),Wno=r(TMe," \u2014 "),sB=n(TMe,"A",{href:!0});var eVr=s(sB);Hno=r(eVr,"BigBirdModel"),eVr.forEach(t),Uno=r(TMe," (BigBird model)"),TMe.forEach(t),Jno=i(M),Zh=n(M,"LI",{});var MMe=s(Zh);Roe=n(MMe,"STRONG",{});var oVr=s(Roe);Yno=r(oVr,"bigbird_pegasus"),oVr.forEach(t),Kno=r(MMe," \u2014 "),lB=n(MMe,"A",{href:!0});var rVr=s(lB);Zno=r(rVr,"BigBirdPegasusModel"),rVr.forEach(t),eso=r(MMe," (BigBirdPegasus model)"),MMe.forEach(t),oso=i(M),ep=n(M,"LI",{});var EMe=s(ep);Boe=n(EMe,"STRONG",{});var tVr=s(Boe);rso=r(tVr,"blenderbot"),tVr.forEach(t),tso=r(EMe," \u2014 "),iB=n(EMe,"A",{href:!0});var aVr=s(iB);aso=r(aVr,"BlenderbotModel"),aVr.forEach(t),nso=r(EMe," (Blenderbot model)"),EMe.forEach(t),sso=i(M),op=n(M,"LI",{});var CMe=s(op);Poe=n(CMe,"STRONG",{});var nVr=s(Poe);lso=r(nVr,"blenderbot-small"),nVr.forEach(t),iso=r(CMe," \u2014 "),dB=n(CMe,"A",{href:!0});var sVr=s(dB);dso=r(sVr,"BlenderbotSmallModel"),sVr.forEach(t),cso=r(CMe," (BlenderbotSmall model)"),CMe.forEach(t),fso=i(M),rp=n(M,"LI",{});var wMe=s(rp);$oe=n(wMe,"STRONG",{});var lVr=s($oe);mso=r(lVr,"camembert"),lVr.forEach(t),gso=r(wMe," \u2014 "),cB=n(wMe,"A",{href:!0});var iVr=s(cB);hso=r(iVr,"CamembertModel"),iVr.forEach(t),pso=r(wMe," (CamemBERT model)"),wMe.forEach(t),_so=i(M),tp=n(M,"LI",{});var AMe=s(tp);Ioe=n(AMe,"STRONG",{});var dVr=s(Ioe);uso=r(dVr,"canine"),dVr.forEach(t),bso=r(AMe," \u2014 "),fB=n(AMe,"A",{href:!0});var cVr=s(fB);Fso=r(cVr,"CanineModel"),cVr.forEach(t),vso=r(AMe," (Canine model)"),AMe.forEach(t),Tso=i(M),ap=n(M,"LI",{});var yMe=s(ap);qoe=n(yMe,"STRONG",{});var fVr=s(qoe);Mso=r(fVr,"clip"),fVr.forEach(t),Eso=r(yMe," \u2014 "),mB=n(yMe,"A",{href:!0});var mVr=s(mB);Cso=r(mVr,"CLIPModel"),mVr.forEach(t),wso=r(yMe," (CLIP model)"),yMe.forEach(t),Aso=i(M),np=n(M,"LI",{});var LMe=s(np);Noe=n(LMe,"STRONG",{});var gVr=s(Noe);yso=r(gVr,"convbert"),gVr.forEach(t),Lso=r(LMe," \u2014 "),gB=n(LMe,"A",{href:!0});var hVr=s(gB);xso=r(hVr,"ConvBertModel"),hVr.forEach(t),kso=r(LMe," (ConvBERT model)"),LMe.forEach(t),Sso=i(M),sp=n(M,"LI",{});var xMe=s(sp);joe=n(xMe,"STRONG",{});var pVr=s(joe);Rso=r(pVr,"convnext"),pVr.forEach(t),Bso=r(xMe," \u2014 "),hB=n(xMe,"A",{href:!0});var _Vr=s(hB);Pso=r(_Vr,"ConvNextModel"),_Vr.forEach(t),$so=r(xMe," (ConvNext model)"),xMe.forEach(t),Iso=i(M),lp=n(M,"LI",{});var kMe=s(lp);Doe=n(kMe,"STRONG",{});var uVr=s(Doe);qso=r(uVr,"ctrl"),uVr.forEach(t),Nso=r(kMe," \u2014 "),pB=n(kMe,"A",{href:!0});var bVr=s(pB);jso=r(bVr,"CTRLModel"),bVr.forEach(t),Dso=r(kMe," (CTRL model)"),kMe.forEach(t),Gso=i(M),ip=n(M,"LI",{});var SMe=s(ip);Goe=n(SMe,"STRONG",{});var FVr=s(Goe);Oso=r(FVr,"data2vec-audio"),FVr.forEach(t),Vso=r(SMe," \u2014 "),_B=n(SMe,"A",{href:!0});var vVr=s(_B);Xso=r(vVr,"Data2VecAudioModel"),vVr.forEach(t),zso=r(SMe," (Data2VecAudio model)"),SMe.forEach(t),Qso=i(M),dp=n(M,"LI",{});var RMe=s(dp);Ooe=n(RMe,"STRONG",{});var TVr=s(Ooe);Wso=r(TVr,"data2vec-text"),TVr.forEach(t),Hso=r(RMe," \u2014 "),uB=n(RMe,"A",{href:!0});var MVr=s(uB);Uso=r(MVr,"Data2VecTextModel"),MVr.forEach(t),Jso=r(RMe," (Data2VecText model)"),RMe.forEach(t),Yso=i(M),cp=n(M,"LI",{});var BMe=s(cp);Voe=n(BMe,"STRONG",{});var EVr=s(Voe);Kso=r(EVr,"deberta"),EVr.forEach(t),Zso=r(BMe," \u2014 "),bB=n(BMe,"A",{href:!0});var CVr=s(bB);elo=r(CVr,"DebertaModel"),CVr.forEach(t),olo=r(BMe," (DeBERTa model)"),BMe.forEach(t),rlo=i(M),fp=n(M,"LI",{});var PMe=s(fp);Xoe=n(PMe,"STRONG",{});var wVr=s(Xoe);tlo=r(wVr,"deberta-v2"),wVr.forEach(t),alo=r(PMe," \u2014 "),FB=n(PMe,"A",{href:!0});var AVr=s(FB);nlo=r(AVr,"DebertaV2Model"),AVr.forEach(t),slo=r(PMe," (DeBERTa-v2 model)"),PMe.forEach(t),llo=i(M),mp=n(M,"LI",{});var $Me=s(mp);zoe=n($Me,"STRONG",{});var yVr=s(zoe);ilo=r(yVr,"decision_transformer"),yVr.forEach(t),dlo=r($Me," \u2014 "),vB=n($Me,"A",{href:!0});var LVr=s(vB);clo=r(LVr,"DecisionTransformerModel"),LVr.forEach(t),flo=r($Me," (Decision Transformer model)"),$Me.forEach(t),mlo=i(M),gp=n(M,"LI",{});var IMe=s(gp);Qoe=n(IMe,"STRONG",{});var xVr=s(Qoe);glo=r(xVr,"deit"),xVr.forEach(t),hlo=r(IMe," \u2014 "),TB=n(IMe,"A",{href:!0});var kVr=s(TB);plo=r(kVr,"DeiTModel"),kVr.forEach(t),_lo=r(IMe," (DeiT model)"),IMe.forEach(t),ulo=i(M),hp=n(M,"LI",{});var qMe=s(hp);Woe=n(qMe,"STRONG",{});var SVr=s(Woe);blo=r(SVr,"detr"),SVr.forEach(t),Flo=r(qMe," \u2014 "),MB=n(qMe,"A",{href:!0});var RVr=s(MB);vlo=r(RVr,"DetrModel"),RVr.forEach(t),Tlo=r(qMe," (DETR model)"),qMe.forEach(t),Mlo=i(M),pp=n(M,"LI",{});var NMe=s(pp);Hoe=n(NMe,"STRONG",{});var BVr=s(Hoe);Elo=r(BVr,"distilbert"),BVr.forEach(t),Clo=r(NMe," \u2014 "),EB=n(NMe,"A",{href:!0});var PVr=s(EB);wlo=r(PVr,"DistilBertModel"),PVr.forEach(t),Alo=r(NMe," (DistilBERT model)"),NMe.forEach(t),ylo=i(M),_p=n(M,"LI",{});var jMe=s(_p);Uoe=n(jMe,"STRONG",{});var $Vr=s(Uoe);Llo=r($Vr,"dpr"),$Vr.forEach(t),xlo=r(jMe," \u2014 "),CB=n(jMe,"A",{href:!0});var IVr=s(CB);klo=r(IVr,"DPRQuestionEncoder"),IVr.forEach(t),Slo=r(jMe," (DPR model)"),jMe.forEach(t),Rlo=i(M),up=n(M,"LI",{});var DMe=s(up);Joe=n(DMe,"STRONG",{});var qVr=s(Joe);Blo=r(qVr,"dpt"),qVr.forEach(t),Plo=r(DMe," \u2014 "),wB=n(DMe,"A",{href:!0});var NVr=s(wB);$lo=r(NVr,"DPTModel"),NVr.forEach(t),Ilo=r(DMe," (DPT model)"),DMe.forEach(t),qlo=i(M),bp=n(M,"LI",{});var GMe=s(bp);Yoe=n(GMe,"STRONG",{});var jVr=s(Yoe);Nlo=r(jVr,"electra"),jVr.forEach(t),jlo=r(GMe," \u2014 "),AB=n(GMe,"A",{href:!0});var DVr=s(AB);Dlo=r(DVr,"ElectraModel"),DVr.forEach(t),Glo=r(GMe," (ELECTRA model)"),GMe.forEach(t),Olo=i(M),Fp=n(M,"LI",{});var OMe=s(Fp);Koe=n(OMe,"STRONG",{});var GVr=s(Koe);Vlo=r(GVr,"flaubert"),GVr.forEach(t),Xlo=r(OMe," \u2014 "),yB=n(OMe,"A",{href:!0});var OVr=s(yB);zlo=r(OVr,"FlaubertModel"),OVr.forEach(t),Qlo=r(OMe," (FlauBERT model)"),OMe.forEach(t),Wlo=i(M),vp=n(M,"LI",{});var VMe=s(vp);Zoe=n(VMe,"STRONG",{});var VVr=s(Zoe);Hlo=r(VVr,"fnet"),VVr.forEach(t),Ulo=r(VMe," \u2014 "),LB=n(VMe,"A",{href:!0});var XVr=s(LB);Jlo=r(XVr,"FNetModel"),XVr.forEach(t),Ylo=r(VMe," (FNet model)"),VMe.forEach(t),Klo=i(M),Tp=n(M,"LI",{});var XMe=s(Tp);ere=n(XMe,"STRONG",{});var zVr=s(ere);Zlo=r(zVr,"fsmt"),zVr.forEach(t),eio=r(XMe," \u2014 "),xB=n(XMe,"A",{href:!0});var QVr=s(xB);oio=r(QVr,"FSMTModel"),QVr.forEach(t),rio=r(XMe," (FairSeq Machine-Translation model)"),XMe.forEach(t),tio=i(M),js=n(M,"LI",{});var l9=s(js);ore=n(l9,"STRONG",{});var WVr=s(ore);aio=r(WVr,"funnel"),WVr.forEach(t),nio=r(l9," \u2014 "),kB=n(l9,"A",{href:!0});var HVr=s(kB);sio=r(HVr,"FunnelModel"),HVr.forEach(t),lio=r(l9," or "),SB=n(l9,"A",{href:!0});var UVr=s(SB);iio=r(UVr,"FunnelBaseModel"),UVr.forEach(t),dio=r(l9," (Funnel Transformer model)"),l9.forEach(t),cio=i(M),Mp=n(M,"LI",{});var zMe=s(Mp);rre=n(zMe,"STRONG",{});var JVr=s(rre);fio=r(JVr,"glpn"),JVr.forEach(t),mio=r(zMe," \u2014 "),RB=n(zMe,"A",{href:!0});var YVr=s(RB);gio=r(YVr,"GLPNModel"),YVr.forEach(t),hio=r(zMe," (GLPN model)"),zMe.forEach(t),pio=i(M),Ep=n(M,"LI",{});var QMe=s(Ep);tre=n(QMe,"STRONG",{});var KVr=s(tre);_io=r(KVr,"gpt2"),KVr.forEach(t),uio=r(QMe," \u2014 "),BB=n(QMe,"A",{href:!0});var ZVr=s(BB);bio=r(ZVr,"GPT2Model"),ZVr.forEach(t),Fio=r(QMe," (OpenAI GPT-2 model)"),QMe.forEach(t),vio=i(M),Cp=n(M,"LI",{});var WMe=s(Cp);are=n(WMe,"STRONG",{});var eXr=s(are);Tio=r(eXr,"gpt_neo"),eXr.forEach(t),Mio=r(WMe," \u2014 "),PB=n(WMe,"A",{href:!0});var oXr=s(PB);Eio=r(oXr,"GPTNeoModel"),oXr.forEach(t),Cio=r(WMe," (GPT Neo model)"),WMe.forEach(t),wio=i(M),wp=n(M,"LI",{});var HMe=s(wp);nre=n(HMe,"STRONG",{});var rXr=s(nre);Aio=r(rXr,"gptj"),rXr.forEach(t),yio=r(HMe," \u2014 "),$B=n(HMe,"A",{href:!0});var tXr=s($B);Lio=r(tXr,"GPTJModel"),tXr.forEach(t),xio=r(HMe," (GPT-J model)"),HMe.forEach(t),kio=i(M),Ap=n(M,"LI",{});var UMe=s(Ap);sre=n(UMe,"STRONG",{});var aXr=s(sre);Sio=r(aXr,"hubert"),aXr.forEach(t),Rio=r(UMe," \u2014 "),IB=n(UMe,"A",{href:!0});var nXr=s(IB);Bio=r(nXr,"HubertModel"),nXr.forEach(t),Pio=r(UMe," (Hubert model)"),UMe.forEach(t),$io=i(M),yp=n(M,"LI",{});var JMe=s(yp);lre=n(JMe,"STRONG",{});var sXr=s(lre);Iio=r(sXr,"ibert"),sXr.forEach(t),qio=r(JMe," \u2014 "),qB=n(JMe,"A",{href:!0});var lXr=s(qB);Nio=r(lXr,"IBertModel"),lXr.forEach(t),jio=r(JMe," (I-BERT model)"),JMe.forEach(t),Dio=i(M),Lp=n(M,"LI",{});var YMe=s(Lp);ire=n(YMe,"STRONG",{});var iXr=s(ire);Gio=r(iXr,"imagegpt"),iXr.forEach(t),Oio=r(YMe," \u2014 "),NB=n(YMe,"A",{href:!0});var dXr=s(NB);Vio=r(dXr,"ImageGPTModel"),dXr.forEach(t),Xio=r(YMe," (ImageGPT model)"),YMe.forEach(t),zio=i(M),xp=n(M,"LI",{});var KMe=s(xp);dre=n(KMe,"STRONG",{});var cXr=s(dre);Qio=r(cXr,"layoutlm"),cXr.forEach(t),Wio=r(KMe," \u2014 "),jB=n(KMe,"A",{href:!0});var fXr=s(jB);Hio=r(fXr,"LayoutLMModel"),fXr.forEach(t),Uio=r(KMe," (LayoutLM model)"),KMe.forEach(t),Jio=i(M),kp=n(M,"LI",{});var ZMe=s(kp);cre=n(ZMe,"STRONG",{});var mXr=s(cre);Yio=r(mXr,"layoutlmv2"),mXr.forEach(t),Kio=r(ZMe," \u2014 "),DB=n(ZMe,"A",{href:!0});var gXr=s(DB);Zio=r(gXr,"LayoutLMv2Model"),gXr.forEach(t),edo=r(ZMe," (LayoutLMv2 model)"),ZMe.forEach(t),odo=i(M),Sp=n(M,"LI",{});var eEe=s(Sp);fre=n(eEe,"STRONG",{});var hXr=s(fre);rdo=r(hXr,"led"),hXr.forEach(t),tdo=r(eEe," \u2014 "),GB=n(eEe,"A",{href:!0});var pXr=s(GB);ado=r(pXr,"LEDModel"),pXr.forEach(t),ndo=r(eEe," (LED model)"),eEe.forEach(t),sdo=i(M),Rp=n(M,"LI",{});var oEe=s(Rp);mre=n(oEe,"STRONG",{});var _Xr=s(mre);ldo=r(_Xr,"longformer"),_Xr.forEach(t),ido=r(oEe," \u2014 "),OB=n(oEe,"A",{href:!0});var uXr=s(OB);ddo=r(uXr,"LongformerModel"),uXr.forEach(t),cdo=r(oEe," (Longformer model)"),oEe.forEach(t),fdo=i(M),Bp=n(M,"LI",{});var rEe=s(Bp);gre=n(rEe,"STRONG",{});var bXr=s(gre);mdo=r(bXr,"luke"),bXr.forEach(t),gdo=r(rEe," \u2014 "),VB=n(rEe,"A",{href:!0});var FXr=s(VB);hdo=r(FXr,"LukeModel"),FXr.forEach(t),pdo=r(rEe," (LUKE model)"),rEe.forEach(t),_do=i(M),Pp=n(M,"LI",{});var tEe=s(Pp);hre=n(tEe,"STRONG",{});var vXr=s(hre);udo=r(vXr,"lxmert"),vXr.forEach(t),bdo=r(tEe," \u2014 "),XB=n(tEe,"A",{href:!0});var TXr=s(XB);Fdo=r(TXr,"LxmertModel"),TXr.forEach(t),vdo=r(tEe," (LXMERT model)"),tEe.forEach(t),Tdo=i(M),$p=n(M,"LI",{});var aEe=s($p);pre=n(aEe,"STRONG",{});var MXr=s(pre);Mdo=r(MXr,"m2m_100"),MXr.forEach(t),Edo=r(aEe," \u2014 "),zB=n(aEe,"A",{href:!0});var EXr=s(zB);Cdo=r(EXr,"M2M100Model"),EXr.forEach(t),wdo=r(aEe," (M2M100 model)"),aEe.forEach(t),Ado=i(M),Ip=n(M,"LI",{});var nEe=s(Ip);_re=n(nEe,"STRONG",{});var CXr=s(_re);ydo=r(CXr,"marian"),CXr.forEach(t),Ldo=r(nEe," \u2014 "),QB=n(nEe,"A",{href:!0});var wXr=s(QB);xdo=r(wXr,"MarianModel"),wXr.forEach(t),kdo=r(nEe," (Marian model)"),nEe.forEach(t),Sdo=i(M),qp=n(M,"LI",{});var sEe=s(qp);ure=n(sEe,"STRONG",{});var AXr=s(ure);Rdo=r(AXr,"maskformer"),AXr.forEach(t),Bdo=r(sEe," \u2014 "),WB=n(sEe,"A",{href:!0});var yXr=s(WB);Pdo=r(yXr,"MaskFormerModel"),yXr.forEach(t),$do=r(sEe," (MaskFormer model)"),sEe.forEach(t),Ido=i(M),Np=n(M,"LI",{});var lEe=s(Np);bre=n(lEe,"STRONG",{});var LXr=s(bre);qdo=r(LXr,"mbart"),LXr.forEach(t),Ndo=r(lEe," \u2014 "),HB=n(lEe,"A",{href:!0});var xXr=s(HB);jdo=r(xXr,"MBartModel"),xXr.forEach(t),Ddo=r(lEe," (mBART model)"),lEe.forEach(t),Gdo=i(M),jp=n(M,"LI",{});var iEe=s(jp);Fre=n(iEe,"STRONG",{});var kXr=s(Fre);Odo=r(kXr,"megatron-bert"),kXr.forEach(t),Vdo=r(iEe," \u2014 "),UB=n(iEe,"A",{href:!0});var SXr=s(UB);Xdo=r(SXr,"MegatronBertModel"),SXr.forEach(t),zdo=r(iEe," (MegatronBert model)"),iEe.forEach(t),Qdo=i(M),Dp=n(M,"LI",{});var dEe=s(Dp);vre=n(dEe,"STRONG",{});var RXr=s(vre);Wdo=r(RXr,"mobilebert"),RXr.forEach(t),Hdo=r(dEe," \u2014 "),JB=n(dEe,"A",{href:!0});var BXr=s(JB);Udo=r(BXr,"MobileBertModel"),BXr.forEach(t),Jdo=r(dEe," (MobileBERT model)"),dEe.forEach(t),Ydo=i(M),Gp=n(M,"LI",{});var cEe=s(Gp);Tre=n(cEe,"STRONG",{});var PXr=s(Tre);Kdo=r(PXr,"mpnet"),PXr.forEach(t),Zdo=r(cEe," \u2014 "),YB=n(cEe,"A",{href:!0});var $Xr=s(YB);eco=r($Xr,"MPNetModel"),$Xr.forEach(t),oco=r(cEe," (MPNet model)"),cEe.forEach(t),rco=i(M),Op=n(M,"LI",{});var fEe=s(Op);Mre=n(fEe,"STRONG",{});var IXr=s(Mre);tco=r(IXr,"mt5"),IXr.forEach(t),aco=r(fEe," \u2014 "),KB=n(fEe,"A",{href:!0});var qXr=s(KB);nco=r(qXr,"MT5Model"),qXr.forEach(t),sco=r(fEe," (mT5 model)"),fEe.forEach(t),lco=i(M),Vp=n(M,"LI",{});var mEe=s(Vp);Ere=n(mEe,"STRONG",{});var NXr=s(Ere);ico=r(NXr,"nystromformer"),NXr.forEach(t),dco=r(mEe," \u2014 "),ZB=n(mEe,"A",{href:!0});var jXr=s(ZB);cco=r(jXr,"NystromformerModel"),jXr.forEach(t),fco=r(mEe," (Nystromformer model)"),mEe.forEach(t),mco=i(M),Xp=n(M,"LI",{});var gEe=s(Xp);Cre=n(gEe,"STRONG",{});var DXr=s(Cre);gco=r(DXr,"openai-gpt"),DXr.forEach(t),hco=r(gEe," \u2014 "),eP=n(gEe,"A",{href:!0});var GXr=s(eP);pco=r(GXr,"OpenAIGPTModel"),GXr.forEach(t),_co=r(gEe," (OpenAI GPT model)"),gEe.forEach(t),uco=i(M),zp=n(M,"LI",{});var hEe=s(zp);wre=n(hEe,"STRONG",{});var OXr=s(wre);bco=r(OXr,"pegasus"),OXr.forEach(t),Fco=r(hEe," \u2014 "),oP=n(hEe,"A",{href:!0});var VXr=s(oP);vco=r(VXr,"PegasusModel"),VXr.forEach(t),Tco=r(hEe," (Pegasus model)"),hEe.forEach(t),Mco=i(M),Qp=n(M,"LI",{});var pEe=s(Qp);Are=n(pEe,"STRONG",{});var XXr=s(Are);Eco=r(XXr,"perceiver"),XXr.forEach(t),Cco=r(pEe," \u2014 "),rP=n(pEe,"A",{href:!0});var zXr=s(rP);wco=r(zXr,"PerceiverModel"),zXr.forEach(t),Aco=r(pEe," (Perceiver model)"),pEe.forEach(t),yco=i(M),Wp=n(M,"LI",{});var _Ee=s(Wp);yre=n(_Ee,"STRONG",{});var QXr=s(yre);Lco=r(QXr,"plbart"),QXr.forEach(t),xco=r(_Ee," \u2014 "),tP=n(_Ee,"A",{href:!0});var WXr=s(tP);kco=r(WXr,"PLBartModel"),WXr.forEach(t),Sco=r(_Ee," (PLBart model)"),_Ee.forEach(t),Rco=i(M),Hp=n(M,"LI",{});var uEe=s(Hp);Lre=n(uEe,"STRONG",{});var HXr=s(Lre);Bco=r(HXr,"poolformer"),HXr.forEach(t),Pco=r(uEe," \u2014 "),aP=n(uEe,"A",{href:!0});var UXr=s(aP);$co=r(UXr,"PoolFormerModel"),UXr.forEach(t),Ico=r(uEe," (PoolFormer model)"),uEe.forEach(t),qco=i(M),Up=n(M,"LI",{});var bEe=s(Up);xre=n(bEe,"STRONG",{});var JXr=s(xre);Nco=r(JXr,"prophetnet"),JXr.forEach(t),jco=r(bEe," \u2014 "),nP=n(bEe,"A",{href:!0});var YXr=s(nP);Dco=r(YXr,"ProphetNetModel"),YXr.forEach(t),Gco=r(bEe," (ProphetNet model)"),bEe.forEach(t),Oco=i(M),Jp=n(M,"LI",{});var FEe=s(Jp);kre=n(FEe,"STRONG",{});var KXr=s(kre);Vco=r(KXr,"qdqbert"),KXr.forEach(t),Xco=r(FEe," \u2014 "),sP=n(FEe,"A",{href:!0});var ZXr=s(sP);zco=r(ZXr,"QDQBertModel"),ZXr.forEach(t),Qco=r(FEe," (QDQBert model)"),FEe.forEach(t),Wco=i(M),Yp=n(M,"LI",{});var vEe=s(Yp);Sre=n(vEe,"STRONG",{});var ezr=s(Sre);Hco=r(ezr,"reformer"),ezr.forEach(t),Uco=r(vEe," \u2014 "),lP=n(vEe,"A",{href:!0});var ozr=s(lP);Jco=r(ozr,"ReformerModel"),ozr.forEach(t),Yco=r(vEe," (Reformer model)"),vEe.forEach(t),Kco=i(M),Kp=n(M,"LI",{});var TEe=s(Kp);Rre=n(TEe,"STRONG",{});var rzr=s(Rre);Zco=r(rzr,"rembert"),rzr.forEach(t),efo=r(TEe," \u2014 "),iP=n(TEe,"A",{href:!0});var tzr=s(iP);ofo=r(tzr,"RemBertModel"),tzr.forEach(t),rfo=r(TEe," (RemBERT model)"),TEe.forEach(t),tfo=i(M),Zp=n(M,"LI",{});var MEe=s(Zp);Bre=n(MEe,"STRONG",{});var azr=s(Bre);afo=r(azr,"resnet"),azr.forEach(t),nfo=r(MEe," \u2014 "),dP=n(MEe,"A",{href:!0});var nzr=s(dP);sfo=r(nzr,"ResNetModel"),nzr.forEach(t),lfo=r(MEe," (ResNet model)"),MEe.forEach(t),ifo=i(M),e_=n(M,"LI",{});var EEe=s(e_);Pre=n(EEe,"STRONG",{});var szr=s(Pre);dfo=r(szr,"retribert"),szr.forEach(t),cfo=r(EEe," \u2014 "),cP=n(EEe,"A",{href:!0});var lzr=s(cP);ffo=r(lzr,"RetriBertModel"),lzr.forEach(t),mfo=r(EEe," (RetriBERT model)"),EEe.forEach(t),gfo=i(M),o_=n(M,"LI",{});var CEe=s(o_);$re=n(CEe,"STRONG",{});var izr=s($re);hfo=r(izr,"roberta"),izr.forEach(t),pfo=r(CEe," \u2014 "),fP=n(CEe,"A",{href:!0});var dzr=s(fP);_fo=r(dzr,"RobertaModel"),dzr.forEach(t),ufo=r(CEe," (RoBERTa model)"),CEe.forEach(t),bfo=i(M),r_=n(M,"LI",{});var wEe=s(r_);Ire=n(wEe,"STRONG",{});var czr=s(Ire);Ffo=r(czr,"roformer"),czr.forEach(t),vfo=r(wEe," \u2014 "),mP=n(wEe,"A",{href:!0});var fzr=s(mP);Tfo=r(fzr,"RoFormerModel"),fzr.forEach(t),Mfo=r(wEe," (RoFormer model)"),wEe.forEach(t),Efo=i(M),t_=n(M,"LI",{});var AEe=s(t_);qre=n(AEe,"STRONG",{});var mzr=s(qre);Cfo=r(mzr,"segformer"),mzr.forEach(t),wfo=r(AEe," \u2014 "),gP=n(AEe,"A",{href:!0});var gzr=s(gP);Afo=r(gzr,"SegformerModel"),gzr.forEach(t),yfo=r(AEe," (SegFormer model)"),AEe.forEach(t),Lfo=i(M),a_=n(M,"LI",{});var yEe=s(a_);Nre=n(yEe,"STRONG",{});var hzr=s(Nre);xfo=r(hzr,"sew"),hzr.forEach(t),kfo=r(yEe," \u2014 "),hP=n(yEe,"A",{href:!0});var pzr=s(hP);Sfo=r(pzr,"SEWModel"),pzr.forEach(t),Rfo=r(yEe," (SEW model)"),yEe.forEach(t),Bfo=i(M),n_=n(M,"LI",{});var LEe=s(n_);jre=n(LEe,"STRONG",{});var _zr=s(jre);Pfo=r(_zr,"sew-d"),_zr.forEach(t),$fo=r(LEe," \u2014 "),pP=n(LEe,"A",{href:!0});var uzr=s(pP);Ifo=r(uzr,"SEWDModel"),uzr.forEach(t),qfo=r(LEe," (SEW-D model)"),LEe.forEach(t),Nfo=i(M),s_=n(M,"LI",{});var xEe=s(s_);Dre=n(xEe,"STRONG",{});var bzr=s(Dre);jfo=r(bzr,"speech_to_text"),bzr.forEach(t),Dfo=r(xEe," \u2014 "),_P=n(xEe,"A",{href:!0});var Fzr=s(_P);Gfo=r(Fzr,"Speech2TextModel"),Fzr.forEach(t),Ofo=r(xEe," (Speech2Text model)"),xEe.forEach(t),Vfo=i(M),l_=n(M,"LI",{});var kEe=s(l_);Gre=n(kEe,"STRONG",{});var vzr=s(Gre);Xfo=r(vzr,"splinter"),vzr.forEach(t),zfo=r(kEe," \u2014 "),uP=n(kEe,"A",{href:!0});var Tzr=s(uP);Qfo=r(Tzr,"SplinterModel"),Tzr.forEach(t),Wfo=r(kEe," (Splinter model)"),kEe.forEach(t),Hfo=i(M),i_=n(M,"LI",{});var SEe=s(i_);Ore=n(SEe,"STRONG",{});var Mzr=s(Ore);Ufo=r(Mzr,"squeezebert"),Mzr.forEach(t),Jfo=r(SEe," \u2014 "),bP=n(SEe,"A",{href:!0});var Ezr=s(bP);Yfo=r(Ezr,"SqueezeBertModel"),Ezr.forEach(t),Kfo=r(SEe," (SqueezeBERT model)"),SEe.forEach(t),Zfo=i(M),d_=n(M,"LI",{});var REe=s(d_);Vre=n(REe,"STRONG",{});var Czr=s(Vre);emo=r(Czr,"swin"),Czr.forEach(t),omo=r(REe," \u2014 "),FP=n(REe,"A",{href:!0});var wzr=s(FP);rmo=r(wzr,"SwinModel"),wzr.forEach(t),tmo=r(REe," (Swin model)"),REe.forEach(t),amo=i(M),c_=n(M,"LI",{});var BEe=s(c_);Xre=n(BEe,"STRONG",{});var Azr=s(Xre);nmo=r(Azr,"t5"),Azr.forEach(t),smo=r(BEe," \u2014 "),vP=n(BEe,"A",{href:!0});var yzr=s(vP);lmo=r(yzr,"T5Model"),yzr.forEach(t),imo=r(BEe," (T5 model)"),BEe.forEach(t),dmo=i(M),f_=n(M,"LI",{});var PEe=s(f_);zre=n(PEe,"STRONG",{});var Lzr=s(zre);cmo=r(Lzr,"tapas"),Lzr.forEach(t),fmo=r(PEe," \u2014 "),TP=n(PEe,"A",{href:!0});var xzr=s(TP);mmo=r(xzr,"TapasModel"),xzr.forEach(t),gmo=r(PEe," (TAPAS model)"),PEe.forEach(t),hmo=i(M),m_=n(M,"LI",{});var $Ee=s(m_);Qre=n($Ee,"STRONG",{});var kzr=s(Qre);pmo=r(kzr,"transfo-xl"),kzr.forEach(t),_mo=r($Ee," \u2014 "),MP=n($Ee,"A",{href:!0});var Szr=s(MP);umo=r(Szr,"TransfoXLModel"),Szr.forEach(t),bmo=r($Ee," (Transformer-XL model)"),$Ee.forEach(t),Fmo=i(M),g_=n(M,"LI",{});var IEe=s(g_);Wre=n(IEe,"STRONG",{});var Rzr=s(Wre);vmo=r(Rzr,"unispeech"),Rzr.forEach(t),Tmo=r(IEe," \u2014 "),EP=n(IEe,"A",{href:!0});var Bzr=s(EP);Mmo=r(Bzr,"UniSpeechModel"),Bzr.forEach(t),Emo=r(IEe," (UniSpeech model)"),IEe.forEach(t),Cmo=i(M),h_=n(M,"LI",{});var qEe=s(h_);Hre=n(qEe,"STRONG",{});var Pzr=s(Hre);wmo=r(Pzr,"unispeech-sat"),Pzr.forEach(t),Amo=r(qEe," \u2014 "),CP=n(qEe,"A",{href:!0});var $zr=s(CP);ymo=r($zr,"UniSpeechSatModel"),$zr.forEach(t),Lmo=r(qEe," (UniSpeechSat model)"),qEe.forEach(t),xmo=i(M),p_=n(M,"LI",{});var NEe=s(p_);Ure=n(NEe,"STRONG",{});var Izr=s(Ure);kmo=r(Izr,"van"),Izr.forEach(t),Smo=r(NEe," \u2014 "),wP=n(NEe,"A",{href:!0});var qzr=s(wP);Rmo=r(qzr,"VanModel"),qzr.forEach(t),Bmo=r(NEe," (VAN model)"),NEe.forEach(t),Pmo=i(M),__=n(M,"LI",{});var jEe=s(__);Jre=n(jEe,"STRONG",{});var Nzr=s(Jre);$mo=r(Nzr,"vilt"),Nzr.forEach(t),Imo=r(jEe," \u2014 "),AP=n(jEe,"A",{href:!0});var jzr=s(AP);qmo=r(jzr,"ViltModel"),jzr.forEach(t),Nmo=r(jEe," (ViLT model)"),jEe.forEach(t),jmo=i(M),u_=n(M,"LI",{});var DEe=s(u_);Yre=n(DEe,"STRONG",{});var Dzr=s(Yre);Dmo=r(Dzr,"vision-text-dual-encoder"),Dzr.forEach(t),Gmo=r(DEe," \u2014 "),yP=n(DEe,"A",{href:!0});var Gzr=s(yP);Omo=r(Gzr,"VisionTextDualEncoderModel"),Gzr.forEach(t),Vmo=r(DEe," (VisionTextDualEncoder model)"),DEe.forEach(t),Xmo=i(M),b_=n(M,"LI",{});var GEe=s(b_);Kre=n(GEe,"STRONG",{});var Ozr=s(Kre);zmo=r(Ozr,"visual_bert"),Ozr.forEach(t),Qmo=r(GEe," \u2014 "),LP=n(GEe,"A",{href:!0});var Vzr=s(LP);Wmo=r(Vzr,"VisualBertModel"),Vzr.forEach(t),Hmo=r(GEe," (VisualBert model)"),GEe.forEach(t),Umo=i(M),F_=n(M,"LI",{});var OEe=s(F_);Zre=n(OEe,"STRONG",{});var Xzr=s(Zre);Jmo=r(Xzr,"vit"),Xzr.forEach(t),Ymo=r(OEe," \u2014 "),xP=n(OEe,"A",{href:!0});var zzr=s(xP);Kmo=r(zzr,"ViTModel"),zzr.forEach(t),Zmo=r(OEe," (ViT model)"),OEe.forEach(t),ego=i(M),v_=n(M,"LI",{});var VEe=s(v_);ete=n(VEe,"STRONG",{});var Qzr=s(ete);ogo=r(Qzr,"vit_mae"),Qzr.forEach(t),rgo=r(VEe," \u2014 "),kP=n(VEe,"A",{href:!0});var Wzr=s(kP);tgo=r(Wzr,"ViTMAEModel"),Wzr.forEach(t),ago=r(VEe," (ViTMAE model)"),VEe.forEach(t),ngo=i(M),T_=n(M,"LI",{});var XEe=s(T_);ote=n(XEe,"STRONG",{});var Hzr=s(ote);sgo=r(Hzr,"wav2vec2"),Hzr.forEach(t),lgo=r(XEe," \u2014 "),SP=n(XEe,"A",{href:!0});var Uzr=s(SP);igo=r(Uzr,"Wav2Vec2Model"),Uzr.forEach(t),dgo=r(XEe," (Wav2Vec2 model)"),XEe.forEach(t),cgo=i(M),M_=n(M,"LI",{});var zEe=s(M_);rte=n(zEe,"STRONG",{});var Jzr=s(rte);fgo=r(Jzr,"wavlm"),Jzr.forEach(t),mgo=r(zEe," \u2014 "),RP=n(zEe,"A",{href:!0});var Yzr=s(RP);ggo=r(Yzr,"WavLMModel"),Yzr.forEach(t),hgo=r(zEe," (WavLM model)"),zEe.forEach(t),pgo=i(M),E_=n(M,"LI",{});var QEe=s(E_);tte=n(QEe,"STRONG",{});var Kzr=s(tte);_go=r(Kzr,"xglm"),Kzr.forEach(t),ugo=r(QEe," \u2014 "),BP=n(QEe,"A",{href:!0});var Zzr=s(BP);bgo=r(Zzr,"XGLMModel"),Zzr.forEach(t),Fgo=r(QEe," (XGLM model)"),QEe.forEach(t),vgo=i(M),C_=n(M,"LI",{});var WEe=s(C_);ate=n(WEe,"STRONG",{});var eQr=s(ate);Tgo=r(eQr,"xlm"),eQr.forEach(t),Mgo=r(WEe," \u2014 "),PP=n(WEe,"A",{href:!0});var oQr=s(PP);Ego=r(oQr,"XLMModel"),oQr.forEach(t),Cgo=r(WEe," (XLM model)"),WEe.forEach(t),wgo=i(M),w_=n(M,"LI",{});var HEe=s(w_);nte=n(HEe,"STRONG",{});var rQr=s(nte);Ago=r(rQr,"xlm-prophetnet"),rQr.forEach(t),ygo=r(HEe," \u2014 "),$P=n(HEe,"A",{href:!0});var tQr=s($P);Lgo=r(tQr,"XLMProphetNetModel"),tQr.forEach(t),xgo=r(HEe," (XLMProphetNet model)"),HEe.forEach(t),kgo=i(M),A_=n(M,"LI",{});var UEe=s(A_);ste=n(UEe,"STRONG",{});var aQr=s(ste);Sgo=r(aQr,"xlm-roberta"),aQr.forEach(t),Rgo=r(UEe," \u2014 "),IP=n(UEe,"A",{href:!0});var nQr=s(IP);Bgo=r(nQr,"XLMRobertaModel"),nQr.forEach(t),Pgo=r(UEe," (XLM-RoBERTa model)"),UEe.forEach(t),$go=i(M),y_=n(M,"LI",{});var JEe=s(y_);lte=n(JEe,"STRONG",{});var sQr=s(lte);Igo=r(sQr,"xlm-roberta-xl"),sQr.forEach(t),qgo=r(JEe," \u2014 "),qP=n(JEe,"A",{href:!0});var lQr=s(qP);Ngo=r(lQr,"XLMRobertaXLModel"),lQr.forEach(t),jgo=r(JEe," (XLM-RoBERTa-XL model)"),JEe.forEach(t),Dgo=i(M),L_=n(M,"LI",{});var YEe=s(L_);ite=n(YEe,"STRONG",{});var iQr=s(ite);Ggo=r(iQr,"xlnet"),iQr.forEach(t),Ogo=r(YEe," \u2014 "),NP=n(YEe,"A",{href:!0});var dQr=s(NP);Vgo=r(dQr,"XLNetModel"),dQr.forEach(t),Xgo=r(YEe," (XLNet model)"),YEe.forEach(t),zgo=i(M),x_=n(M,"LI",{});var KEe=s(x_);dte=n(KEe,"STRONG",{});var cQr=s(dte);Qgo=r(cQr,"yoso"),cQr.forEach(t),Wgo=r(KEe," \u2014 "),jP=n(KEe,"A",{href:!0});var fQr=s(jP);Hgo=r(fQr,"YosoModel"),fQr.forEach(t),Ugo=r(KEe," (YOSO model)"),KEe.forEach(t),M.forEach(t),Jgo=i(Dt),k_=n(Dt,"P",{});var ZEe=s(k_);Ygo=r(ZEe,"The model is set in evaluation mode by default using "),cte=n(ZEe,"CODE",{});var mQr=s(cte);Kgo=r(mQr,"model.eval()"),mQr.forEach(t),Zgo=r(ZEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fte=n(ZEe,"CODE",{});var gQr=s(fte);eho=r(gQr,"model.train()"),gQr.forEach(t),ZEe.forEach(t),oho=i(Dt),mte=n(Dt,"P",{});var hQr=s(mte);rho=r(hQr,"Examples:"),hQr.forEach(t),tho=i(Dt),m(a5.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),cRe=i(c),Zi=n(c,"H2",{class:!0});var FPe=s(Zi);S_=n(FPe,"A",{id:!0,class:!0,href:!0});var pQr=s(S_);gte=n(pQr,"SPAN",{});var _Qr=s(gte);m(n5.$$.fragment,_Qr),_Qr.forEach(t),pQr.forEach(t),aho=i(FPe),hte=n(FPe,"SPAN",{});var uQr=s(hte);nho=r(uQr,"AutoModelForPreTraining"),uQr.forEach(t),FPe.forEach(t),fRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(s5.$$.fragment,Hs),sho=i(Hs),ed=n(Hs,"P",{});var tU=s(ed);lho=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DP=n(tU,"A",{href:!0});var bQr=s(DP);iho=r(bQr,"from_pretrained()"),bQr.forEach(t),dho=r(tU," class method or the "),GP=n(tU,"A",{href:!0});var FQr=s(GP);cho=r(FQr,"from_config()"),FQr.forEach(t),fho=r(tU,` class
method.`),tU.forEach(t),mho=i(Hs),l5=n(Hs,"P",{});var vPe=s(l5);gho=r(vPe,"This class cannot be instantiated directly using "),pte=n(vPe,"CODE",{});var vQr=s(pte);hho=r(vQr,"__init__()"),vQr.forEach(t),pho=r(vPe," (throws an error)."),vPe.forEach(t),_ho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(i5.$$.fragment,Us),uho=i(Us),_te=n(Us,"P",{});var TQr=s(_te);bho=r(TQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),TQr.forEach(t),Fho=i(Us),od=n(Us,"P",{});var aU=s(od);vho=r(aU,`Note:
Loading a model from its configuration file does `),ute=n(aU,"STRONG",{});var MQr=s(ute);Tho=r(MQr,"not"),MQr.forEach(t),Mho=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OP=n(aU,"A",{href:!0});var EQr=s(OP);Eho=r(EQr,"from_pretrained()"),EQr.forEach(t),Cho=r(aU," to load the model weights."),aU.forEach(t),who=i(Us),bte=n(Us,"P",{});var CQr=s(bte);Aho=r(CQr,"Examples:"),CQr.forEach(t),yho=i(Us),m(d5.$$.fragment,Us),Us.forEach(t),Lho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(c5.$$.fragment,Gt),xho=i(Gt),Fte=n(Gt,"P",{});var wQr=s(Fte);kho=r(wQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wQr.forEach(t),Sho=i(Gt),za=n(Gt,"P",{});var EE=s(za);Rho=r(EE,"The model class to instantiate is selected based on the "),vte=n(EE,"CODE",{});var AQr=s(vte);Bho=r(AQr,"model_type"),AQr.forEach(t),Pho=r(EE,` property of the config object (either
passed as an argument or loaded from `),Tte=n(EE,"CODE",{});var yQr=s(Tte);$ho=r(yQr,"pretrained_model_name_or_path"),yQr.forEach(t),Iho=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mte=n(EE,"CODE",{});var LQr=s(Mte);qho=r(LQr,"pretrained_model_name_or_path"),LQr.forEach(t),Nho=r(EE,":"),EE.forEach(t),jho=i(Gt),S=n(Gt,"UL",{});var B=s(S);R_=n(B,"LI",{});var eCe=s(R_);Ete=n(eCe,"STRONG",{});var xQr=s(Ete);Dho=r(xQr,"albert"),xQr.forEach(t),Gho=r(eCe," \u2014 "),VP=n(eCe,"A",{href:!0});var kQr=s(VP);Oho=r(kQr,"AlbertForPreTraining"),kQr.forEach(t),Vho=r(eCe," (ALBERT model)"),eCe.forEach(t),Xho=i(B),B_=n(B,"LI",{});var oCe=s(B_);Cte=n(oCe,"STRONG",{});var SQr=s(Cte);zho=r(SQr,"bart"),SQr.forEach(t),Qho=r(oCe," \u2014 "),XP=n(oCe,"A",{href:!0});var RQr=s(XP);Who=r(RQr,"BartForConditionalGeneration"),RQr.forEach(t),Hho=r(oCe," (BART model)"),oCe.forEach(t),Uho=i(B),P_=n(B,"LI",{});var rCe=s(P_);wte=n(rCe,"STRONG",{});var BQr=s(wte);Jho=r(BQr,"bert"),BQr.forEach(t),Yho=r(rCe," \u2014 "),zP=n(rCe,"A",{href:!0});var PQr=s(zP);Kho=r(PQr,"BertForPreTraining"),PQr.forEach(t),Zho=r(rCe," (BERT model)"),rCe.forEach(t),epo=i(B),$_=n(B,"LI",{});var tCe=s($_);Ate=n(tCe,"STRONG",{});var $Qr=s(Ate);opo=r($Qr,"big_bird"),$Qr.forEach(t),rpo=r(tCe," \u2014 "),QP=n(tCe,"A",{href:!0});var IQr=s(QP);tpo=r(IQr,"BigBirdForPreTraining"),IQr.forEach(t),apo=r(tCe," (BigBird model)"),tCe.forEach(t),npo=i(B),I_=n(B,"LI",{});var aCe=s(I_);yte=n(aCe,"STRONG",{});var qQr=s(yte);spo=r(qQr,"camembert"),qQr.forEach(t),lpo=r(aCe," \u2014 "),WP=n(aCe,"A",{href:!0});var NQr=s(WP);ipo=r(NQr,"CamembertForMaskedLM"),NQr.forEach(t),dpo=r(aCe," (CamemBERT model)"),aCe.forEach(t),cpo=i(B),q_=n(B,"LI",{});var nCe=s(q_);Lte=n(nCe,"STRONG",{});var jQr=s(Lte);fpo=r(jQr,"ctrl"),jQr.forEach(t),mpo=r(nCe," \u2014 "),HP=n(nCe,"A",{href:!0});var DQr=s(HP);gpo=r(DQr,"CTRLLMHeadModel"),DQr.forEach(t),hpo=r(nCe," (CTRL model)"),nCe.forEach(t),ppo=i(B),N_=n(B,"LI",{});var sCe=s(N_);xte=n(sCe,"STRONG",{});var GQr=s(xte);_po=r(GQr,"data2vec-text"),GQr.forEach(t),upo=r(sCe," \u2014 "),UP=n(sCe,"A",{href:!0});var OQr=s(UP);bpo=r(OQr,"Data2VecTextForMaskedLM"),OQr.forEach(t),Fpo=r(sCe," (Data2VecText model)"),sCe.forEach(t),vpo=i(B),j_=n(B,"LI",{});var lCe=s(j_);kte=n(lCe,"STRONG",{});var VQr=s(kte);Tpo=r(VQr,"deberta"),VQr.forEach(t),Mpo=r(lCe," \u2014 "),JP=n(lCe,"A",{href:!0});var XQr=s(JP);Epo=r(XQr,"DebertaForMaskedLM"),XQr.forEach(t),Cpo=r(lCe," (DeBERTa model)"),lCe.forEach(t),wpo=i(B),D_=n(B,"LI",{});var iCe=s(D_);Ste=n(iCe,"STRONG",{});var zQr=s(Ste);Apo=r(zQr,"deberta-v2"),zQr.forEach(t),ypo=r(iCe," \u2014 "),YP=n(iCe,"A",{href:!0});var QQr=s(YP);Lpo=r(QQr,"DebertaV2ForMaskedLM"),QQr.forEach(t),xpo=r(iCe," (DeBERTa-v2 model)"),iCe.forEach(t),kpo=i(B),G_=n(B,"LI",{});var dCe=s(G_);Rte=n(dCe,"STRONG",{});var WQr=s(Rte);Spo=r(WQr,"distilbert"),WQr.forEach(t),Rpo=r(dCe," \u2014 "),KP=n(dCe,"A",{href:!0});var HQr=s(KP);Bpo=r(HQr,"DistilBertForMaskedLM"),HQr.forEach(t),Ppo=r(dCe," (DistilBERT model)"),dCe.forEach(t),$po=i(B),O_=n(B,"LI",{});var cCe=s(O_);Bte=n(cCe,"STRONG",{});var UQr=s(Bte);Ipo=r(UQr,"electra"),UQr.forEach(t),qpo=r(cCe," \u2014 "),ZP=n(cCe,"A",{href:!0});var JQr=s(ZP);Npo=r(JQr,"ElectraForPreTraining"),JQr.forEach(t),jpo=r(cCe," (ELECTRA model)"),cCe.forEach(t),Dpo=i(B),V_=n(B,"LI",{});var fCe=s(V_);Pte=n(fCe,"STRONG",{});var YQr=s(Pte);Gpo=r(YQr,"flaubert"),YQr.forEach(t),Opo=r(fCe," \u2014 "),e$=n(fCe,"A",{href:!0});var KQr=s(e$);Vpo=r(KQr,"FlaubertWithLMHeadModel"),KQr.forEach(t),Xpo=r(fCe," (FlauBERT model)"),fCe.forEach(t),zpo=i(B),X_=n(B,"LI",{});var mCe=s(X_);$te=n(mCe,"STRONG",{});var ZQr=s($te);Qpo=r(ZQr,"fnet"),ZQr.forEach(t),Wpo=r(mCe," \u2014 "),o$=n(mCe,"A",{href:!0});var eWr=s(o$);Hpo=r(eWr,"FNetForPreTraining"),eWr.forEach(t),Upo=r(mCe," (FNet model)"),mCe.forEach(t),Jpo=i(B),z_=n(B,"LI",{});var gCe=s(z_);Ite=n(gCe,"STRONG",{});var oWr=s(Ite);Ypo=r(oWr,"fsmt"),oWr.forEach(t),Kpo=r(gCe," \u2014 "),r$=n(gCe,"A",{href:!0});var rWr=s(r$);Zpo=r(rWr,"FSMTForConditionalGeneration"),rWr.forEach(t),e_o=r(gCe," (FairSeq Machine-Translation model)"),gCe.forEach(t),o_o=i(B),Q_=n(B,"LI",{});var hCe=s(Q_);qte=n(hCe,"STRONG",{});var tWr=s(qte);r_o=r(tWr,"funnel"),tWr.forEach(t),t_o=r(hCe," \u2014 "),t$=n(hCe,"A",{href:!0});var aWr=s(t$);a_o=r(aWr,"FunnelForPreTraining"),aWr.forEach(t),n_o=r(hCe," (Funnel Transformer model)"),hCe.forEach(t),s_o=i(B),W_=n(B,"LI",{});var pCe=s(W_);Nte=n(pCe,"STRONG",{});var nWr=s(Nte);l_o=r(nWr,"gpt2"),nWr.forEach(t),i_o=r(pCe," \u2014 "),a$=n(pCe,"A",{href:!0});var sWr=s(a$);d_o=r(sWr,"GPT2LMHeadModel"),sWr.forEach(t),c_o=r(pCe," (OpenAI GPT-2 model)"),pCe.forEach(t),f_o=i(B),H_=n(B,"LI",{});var _Ce=s(H_);jte=n(_Ce,"STRONG",{});var lWr=s(jte);m_o=r(lWr,"ibert"),lWr.forEach(t),g_o=r(_Ce," \u2014 "),n$=n(_Ce,"A",{href:!0});var iWr=s(n$);h_o=r(iWr,"IBertForMaskedLM"),iWr.forEach(t),p_o=r(_Ce," (I-BERT model)"),_Ce.forEach(t),__o=i(B),U_=n(B,"LI",{});var uCe=s(U_);Dte=n(uCe,"STRONG",{});var dWr=s(Dte);u_o=r(dWr,"layoutlm"),dWr.forEach(t),b_o=r(uCe," \u2014 "),s$=n(uCe,"A",{href:!0});var cWr=s(s$);F_o=r(cWr,"LayoutLMForMaskedLM"),cWr.forEach(t),v_o=r(uCe," (LayoutLM model)"),uCe.forEach(t),T_o=i(B),J_=n(B,"LI",{});var bCe=s(J_);Gte=n(bCe,"STRONG",{});var fWr=s(Gte);M_o=r(fWr,"longformer"),fWr.forEach(t),E_o=r(bCe," \u2014 "),l$=n(bCe,"A",{href:!0});var mWr=s(l$);C_o=r(mWr,"LongformerForMaskedLM"),mWr.forEach(t),w_o=r(bCe," (Longformer model)"),bCe.forEach(t),A_o=i(B),Y_=n(B,"LI",{});var FCe=s(Y_);Ote=n(FCe,"STRONG",{});var gWr=s(Ote);y_o=r(gWr,"lxmert"),gWr.forEach(t),L_o=r(FCe," \u2014 "),i$=n(FCe,"A",{href:!0});var hWr=s(i$);x_o=r(hWr,"LxmertForPreTraining"),hWr.forEach(t),k_o=r(FCe," (LXMERT model)"),FCe.forEach(t),S_o=i(B),K_=n(B,"LI",{});var vCe=s(K_);Vte=n(vCe,"STRONG",{});var pWr=s(Vte);R_o=r(pWr,"megatron-bert"),pWr.forEach(t),B_o=r(vCe," \u2014 "),d$=n(vCe,"A",{href:!0});var _Wr=s(d$);P_o=r(_Wr,"MegatronBertForPreTraining"),_Wr.forEach(t),$_o=r(vCe," (MegatronBert model)"),vCe.forEach(t),I_o=i(B),Z_=n(B,"LI",{});var TCe=s(Z_);Xte=n(TCe,"STRONG",{});var uWr=s(Xte);q_o=r(uWr,"mobilebert"),uWr.forEach(t),N_o=r(TCe," \u2014 "),c$=n(TCe,"A",{href:!0});var bWr=s(c$);j_o=r(bWr,"MobileBertForPreTraining"),bWr.forEach(t),D_o=r(TCe," (MobileBERT model)"),TCe.forEach(t),G_o=i(B),eu=n(B,"LI",{});var MCe=s(eu);zte=n(MCe,"STRONG",{});var FWr=s(zte);O_o=r(FWr,"mpnet"),FWr.forEach(t),V_o=r(MCe," \u2014 "),f$=n(MCe,"A",{href:!0});var vWr=s(f$);X_o=r(vWr,"MPNetForMaskedLM"),vWr.forEach(t),z_o=r(MCe," (MPNet model)"),MCe.forEach(t),Q_o=i(B),ou=n(B,"LI",{});var ECe=s(ou);Qte=n(ECe,"STRONG",{});var TWr=s(Qte);W_o=r(TWr,"openai-gpt"),TWr.forEach(t),H_o=r(ECe," \u2014 "),m$=n(ECe,"A",{href:!0});var MWr=s(m$);U_o=r(MWr,"OpenAIGPTLMHeadModel"),MWr.forEach(t),J_o=r(ECe," (OpenAI GPT model)"),ECe.forEach(t),Y_o=i(B),ru=n(B,"LI",{});var CCe=s(ru);Wte=n(CCe,"STRONG",{});var EWr=s(Wte);K_o=r(EWr,"retribert"),EWr.forEach(t),Z_o=r(CCe," \u2014 "),g$=n(CCe,"A",{href:!0});var CWr=s(g$);euo=r(CWr,"RetriBertModel"),CWr.forEach(t),ouo=r(CCe," (RetriBERT model)"),CCe.forEach(t),ruo=i(B),tu=n(B,"LI",{});var wCe=s(tu);Hte=n(wCe,"STRONG",{});var wWr=s(Hte);tuo=r(wWr,"roberta"),wWr.forEach(t),auo=r(wCe," \u2014 "),h$=n(wCe,"A",{href:!0});var AWr=s(h$);nuo=r(AWr,"RobertaForMaskedLM"),AWr.forEach(t),suo=r(wCe," (RoBERTa model)"),wCe.forEach(t),luo=i(B),au=n(B,"LI",{});var ACe=s(au);Ute=n(ACe,"STRONG",{});var yWr=s(Ute);iuo=r(yWr,"squeezebert"),yWr.forEach(t),duo=r(ACe," \u2014 "),p$=n(ACe,"A",{href:!0});var LWr=s(p$);cuo=r(LWr,"SqueezeBertForMaskedLM"),LWr.forEach(t),fuo=r(ACe," (SqueezeBERT model)"),ACe.forEach(t),muo=i(B),nu=n(B,"LI",{});var yCe=s(nu);Jte=n(yCe,"STRONG",{});var xWr=s(Jte);guo=r(xWr,"t5"),xWr.forEach(t),huo=r(yCe," \u2014 "),_$=n(yCe,"A",{href:!0});var kWr=s(_$);puo=r(kWr,"T5ForConditionalGeneration"),kWr.forEach(t),_uo=r(yCe," (T5 model)"),yCe.forEach(t),uuo=i(B),su=n(B,"LI",{});var LCe=s(su);Yte=n(LCe,"STRONG",{});var SWr=s(Yte);buo=r(SWr,"tapas"),SWr.forEach(t),Fuo=r(LCe," \u2014 "),u$=n(LCe,"A",{href:!0});var RWr=s(u$);vuo=r(RWr,"TapasForMaskedLM"),RWr.forEach(t),Tuo=r(LCe," (TAPAS model)"),LCe.forEach(t),Muo=i(B),lu=n(B,"LI",{});var xCe=s(lu);Kte=n(xCe,"STRONG",{});var BWr=s(Kte);Euo=r(BWr,"transfo-xl"),BWr.forEach(t),Cuo=r(xCe," \u2014 "),b$=n(xCe,"A",{href:!0});var PWr=s(b$);wuo=r(PWr,"TransfoXLLMHeadModel"),PWr.forEach(t),Auo=r(xCe," (Transformer-XL model)"),xCe.forEach(t),yuo=i(B),iu=n(B,"LI",{});var kCe=s(iu);Zte=n(kCe,"STRONG",{});var $Wr=s(Zte);Luo=r($Wr,"unispeech"),$Wr.forEach(t),xuo=r(kCe," \u2014 "),F$=n(kCe,"A",{href:!0});var IWr=s(F$);kuo=r(IWr,"UniSpeechForPreTraining"),IWr.forEach(t),Suo=r(kCe," (UniSpeech model)"),kCe.forEach(t),Ruo=i(B),du=n(B,"LI",{});var SCe=s(du);eae=n(SCe,"STRONG",{});var qWr=s(eae);Buo=r(qWr,"unispeech-sat"),qWr.forEach(t),Puo=r(SCe," \u2014 "),v$=n(SCe,"A",{href:!0});var NWr=s(v$);$uo=r(NWr,"UniSpeechSatForPreTraining"),NWr.forEach(t),Iuo=r(SCe," (UniSpeechSat model)"),SCe.forEach(t),quo=i(B),cu=n(B,"LI",{});var RCe=s(cu);oae=n(RCe,"STRONG",{});var jWr=s(oae);Nuo=r(jWr,"visual_bert"),jWr.forEach(t),juo=r(RCe," \u2014 "),T$=n(RCe,"A",{href:!0});var DWr=s(T$);Duo=r(DWr,"VisualBertForPreTraining"),DWr.forEach(t),Guo=r(RCe," (VisualBert model)"),RCe.forEach(t),Ouo=i(B),fu=n(B,"LI",{});var BCe=s(fu);rae=n(BCe,"STRONG",{});var GWr=s(rae);Vuo=r(GWr,"vit_mae"),GWr.forEach(t),Xuo=r(BCe," \u2014 "),M$=n(BCe,"A",{href:!0});var OWr=s(M$);zuo=r(OWr,"ViTMAEForPreTraining"),OWr.forEach(t),Quo=r(BCe," (ViTMAE model)"),BCe.forEach(t),Wuo=i(B),mu=n(B,"LI",{});var PCe=s(mu);tae=n(PCe,"STRONG",{});var VWr=s(tae);Huo=r(VWr,"wav2vec2"),VWr.forEach(t),Uuo=r(PCe," \u2014 "),E$=n(PCe,"A",{href:!0});var XWr=s(E$);Juo=r(XWr,"Wav2Vec2ForPreTraining"),XWr.forEach(t),Yuo=r(PCe," (Wav2Vec2 model)"),PCe.forEach(t),Kuo=i(B),gu=n(B,"LI",{});var $Ce=s(gu);aae=n($Ce,"STRONG",{});var zWr=s(aae);Zuo=r(zWr,"xlm"),zWr.forEach(t),e1o=r($Ce," \u2014 "),C$=n($Ce,"A",{href:!0});var QWr=s(C$);o1o=r(QWr,"XLMWithLMHeadModel"),QWr.forEach(t),r1o=r($Ce," (XLM model)"),$Ce.forEach(t),t1o=i(B),hu=n(B,"LI",{});var ICe=s(hu);nae=n(ICe,"STRONG",{});var WWr=s(nae);a1o=r(WWr,"xlm-roberta"),WWr.forEach(t),n1o=r(ICe," \u2014 "),w$=n(ICe,"A",{href:!0});var HWr=s(w$);s1o=r(HWr,"XLMRobertaForMaskedLM"),HWr.forEach(t),l1o=r(ICe," (XLM-RoBERTa model)"),ICe.forEach(t),i1o=i(B),pu=n(B,"LI",{});var qCe=s(pu);sae=n(qCe,"STRONG",{});var UWr=s(sae);d1o=r(UWr,"xlm-roberta-xl"),UWr.forEach(t),c1o=r(qCe," \u2014 "),A$=n(qCe,"A",{href:!0});var JWr=s(A$);f1o=r(JWr,"XLMRobertaXLForMaskedLM"),JWr.forEach(t),m1o=r(qCe," (XLM-RoBERTa-XL model)"),qCe.forEach(t),g1o=i(B),_u=n(B,"LI",{});var NCe=s(_u);lae=n(NCe,"STRONG",{});var YWr=s(lae);h1o=r(YWr,"xlnet"),YWr.forEach(t),p1o=r(NCe," \u2014 "),y$=n(NCe,"A",{href:!0});var KWr=s(y$);_1o=r(KWr,"XLNetLMHeadModel"),KWr.forEach(t),u1o=r(NCe," (XLNet model)"),NCe.forEach(t),B.forEach(t),b1o=i(Gt),uu=n(Gt,"P",{});var jCe=s(uu);F1o=r(jCe,"The model is set in evaluation mode by default using "),iae=n(jCe,"CODE",{});var ZWr=s(iae);v1o=r(ZWr,"model.eval()"),ZWr.forEach(t),T1o=r(jCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dae=n(jCe,"CODE",{});var eHr=s(dae);M1o=r(eHr,"model.train()"),eHr.forEach(t),jCe.forEach(t),E1o=i(Gt),cae=n(Gt,"P",{});var oHr=s(cae);C1o=r(oHr,"Examples:"),oHr.forEach(t),w1o=i(Gt),m(f5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),mRe=i(c),rd=n(c,"H2",{class:!0});var TPe=s(rd);bu=n(TPe,"A",{id:!0,class:!0,href:!0});var rHr=s(bu);fae=n(rHr,"SPAN",{});var tHr=s(fae);m(m5.$$.fragment,tHr),tHr.forEach(t),rHr.forEach(t),A1o=i(TPe),mae=n(TPe,"SPAN",{});var aHr=s(mae);y1o=r(aHr,"AutoModelForCausalLM"),aHr.forEach(t),TPe.forEach(t),gRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(g5.$$.fragment,Js),L1o=i(Js),td=n(Js,"P",{});var nU=s(td);x1o=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),L$=n(nU,"A",{href:!0});var nHr=s(L$);k1o=r(nHr,"from_pretrained()"),nHr.forEach(t),S1o=r(nU," class method or the "),x$=n(nU,"A",{href:!0});var sHr=s(x$);R1o=r(sHr,"from_config()"),sHr.forEach(t),B1o=r(nU,` class
method.`),nU.forEach(t),P1o=i(Js),h5=n(Js,"P",{});var MPe=s(h5);$1o=r(MPe,"This class cannot be instantiated directly using "),gae=n(MPe,"CODE",{});var lHr=s(gae);I1o=r(lHr,"__init__()"),lHr.forEach(t),q1o=r(MPe," (throws an error)."),MPe.forEach(t),N1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(p5.$$.fragment,Ys),j1o=i(Ys),hae=n(Ys,"P",{});var iHr=s(hae);D1o=r(iHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iHr.forEach(t),G1o=i(Ys),ad=n(Ys,"P",{});var sU=s(ad);O1o=r(sU,`Note:
Loading a model from its configuration file does `),pae=n(sU,"STRONG",{});var dHr=s(pae);V1o=r(dHr,"not"),dHr.forEach(t),X1o=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),k$=n(sU,"A",{href:!0});var cHr=s(k$);z1o=r(cHr,"from_pretrained()"),cHr.forEach(t),Q1o=r(sU," to load the model weights."),sU.forEach(t),W1o=i(Ys),_ae=n(Ys,"P",{});var fHr=s(_ae);H1o=r(fHr,"Examples:"),fHr.forEach(t),U1o=i(Ys),m(_5.$$.fragment,Ys),Ys.forEach(t),J1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(u5.$$.fragment,Ot),Y1o=i(Ot),uae=n(Ot,"P",{});var mHr=s(uae);K1o=r(mHr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mHr.forEach(t),Z1o=i(Ot),Qa=n(Ot,"P",{});var CE=s(Qa);e4o=r(CE,"The model class to instantiate is selected based on the "),bae=n(CE,"CODE",{});var gHr=s(bae);o4o=r(gHr,"model_type"),gHr.forEach(t),r4o=r(CE,` property of the config object (either
passed as an argument or loaded from `),Fae=n(CE,"CODE",{});var hHr=s(Fae);t4o=r(hHr,"pretrained_model_name_or_path"),hHr.forEach(t),a4o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vae=n(CE,"CODE",{});var pHr=s(vae);n4o=r(pHr,"pretrained_model_name_or_path"),pHr.forEach(t),s4o=r(CE,":"),CE.forEach(t),l4o=i(Ot),$=n(Ot,"UL",{});var q=s($);Fu=n(q,"LI",{});var DCe=s(Fu);Tae=n(DCe,"STRONG",{});var _Hr=s(Tae);i4o=r(_Hr,"bart"),_Hr.forEach(t),d4o=r(DCe," \u2014 "),S$=n(DCe,"A",{href:!0});var uHr=s(S$);c4o=r(uHr,"BartForCausalLM"),uHr.forEach(t),f4o=r(DCe," (BART model)"),DCe.forEach(t),m4o=i(q),vu=n(q,"LI",{});var GCe=s(vu);Mae=n(GCe,"STRONG",{});var bHr=s(Mae);g4o=r(bHr,"bert"),bHr.forEach(t),h4o=r(GCe," \u2014 "),R$=n(GCe,"A",{href:!0});var FHr=s(R$);p4o=r(FHr,"BertLMHeadModel"),FHr.forEach(t),_4o=r(GCe," (BERT model)"),GCe.forEach(t),u4o=i(q),Tu=n(q,"LI",{});var OCe=s(Tu);Eae=n(OCe,"STRONG",{});var vHr=s(Eae);b4o=r(vHr,"bert-generation"),vHr.forEach(t),F4o=r(OCe," \u2014 "),B$=n(OCe,"A",{href:!0});var THr=s(B$);v4o=r(THr,"BertGenerationDecoder"),THr.forEach(t),T4o=r(OCe," (Bert Generation model)"),OCe.forEach(t),M4o=i(q),Mu=n(q,"LI",{});var VCe=s(Mu);Cae=n(VCe,"STRONG",{});var MHr=s(Cae);E4o=r(MHr,"big_bird"),MHr.forEach(t),C4o=r(VCe," \u2014 "),P$=n(VCe,"A",{href:!0});var EHr=s(P$);w4o=r(EHr,"BigBirdForCausalLM"),EHr.forEach(t),A4o=r(VCe," (BigBird model)"),VCe.forEach(t),y4o=i(q),Eu=n(q,"LI",{});var XCe=s(Eu);wae=n(XCe,"STRONG",{});var CHr=s(wae);L4o=r(CHr,"bigbird_pegasus"),CHr.forEach(t),x4o=r(XCe," \u2014 "),$$=n(XCe,"A",{href:!0});var wHr=s($$);k4o=r(wHr,"BigBirdPegasusForCausalLM"),wHr.forEach(t),S4o=r(XCe," (BigBirdPegasus model)"),XCe.forEach(t),R4o=i(q),Cu=n(q,"LI",{});var zCe=s(Cu);Aae=n(zCe,"STRONG",{});var AHr=s(Aae);B4o=r(AHr,"blenderbot"),AHr.forEach(t),P4o=r(zCe," \u2014 "),I$=n(zCe,"A",{href:!0});var yHr=s(I$);$4o=r(yHr,"BlenderbotForCausalLM"),yHr.forEach(t),I4o=r(zCe," (Blenderbot model)"),zCe.forEach(t),q4o=i(q),wu=n(q,"LI",{});var QCe=s(wu);yae=n(QCe,"STRONG",{});var LHr=s(yae);N4o=r(LHr,"blenderbot-small"),LHr.forEach(t),j4o=r(QCe," \u2014 "),q$=n(QCe,"A",{href:!0});var xHr=s(q$);D4o=r(xHr,"BlenderbotSmallForCausalLM"),xHr.forEach(t),G4o=r(QCe," (BlenderbotSmall model)"),QCe.forEach(t),O4o=i(q),Au=n(q,"LI",{});var WCe=s(Au);Lae=n(WCe,"STRONG",{});var kHr=s(Lae);V4o=r(kHr,"camembert"),kHr.forEach(t),X4o=r(WCe," \u2014 "),N$=n(WCe,"A",{href:!0});var SHr=s(N$);z4o=r(SHr,"CamembertForCausalLM"),SHr.forEach(t),Q4o=r(WCe," (CamemBERT model)"),WCe.forEach(t),W4o=i(q),yu=n(q,"LI",{});var HCe=s(yu);xae=n(HCe,"STRONG",{});var RHr=s(xae);H4o=r(RHr,"ctrl"),RHr.forEach(t),U4o=r(HCe," \u2014 "),j$=n(HCe,"A",{href:!0});var BHr=s(j$);J4o=r(BHr,"CTRLLMHeadModel"),BHr.forEach(t),Y4o=r(HCe," (CTRL model)"),HCe.forEach(t),K4o=i(q),Lu=n(q,"LI",{});var UCe=s(Lu);kae=n(UCe,"STRONG",{});var PHr=s(kae);Z4o=r(PHr,"data2vec-text"),PHr.forEach(t),ebo=r(UCe," \u2014 "),D$=n(UCe,"A",{href:!0});var $Hr=s(D$);obo=r($Hr,"Data2VecTextForCausalLM"),$Hr.forEach(t),rbo=r(UCe," (Data2VecText model)"),UCe.forEach(t),tbo=i(q),xu=n(q,"LI",{});var JCe=s(xu);Sae=n(JCe,"STRONG",{});var IHr=s(Sae);abo=r(IHr,"electra"),IHr.forEach(t),nbo=r(JCe," \u2014 "),G$=n(JCe,"A",{href:!0});var qHr=s(G$);sbo=r(qHr,"ElectraForCausalLM"),qHr.forEach(t),lbo=r(JCe," (ELECTRA model)"),JCe.forEach(t),ibo=i(q),ku=n(q,"LI",{});var YCe=s(ku);Rae=n(YCe,"STRONG",{});var NHr=s(Rae);dbo=r(NHr,"gpt2"),NHr.forEach(t),cbo=r(YCe," \u2014 "),O$=n(YCe,"A",{href:!0});var jHr=s(O$);fbo=r(jHr,"GPT2LMHeadModel"),jHr.forEach(t),mbo=r(YCe," (OpenAI GPT-2 model)"),YCe.forEach(t),gbo=i(q),Su=n(q,"LI",{});var KCe=s(Su);Bae=n(KCe,"STRONG",{});var DHr=s(Bae);hbo=r(DHr,"gpt_neo"),DHr.forEach(t),pbo=r(KCe," \u2014 "),V$=n(KCe,"A",{href:!0});var GHr=s(V$);_bo=r(GHr,"GPTNeoForCausalLM"),GHr.forEach(t),ubo=r(KCe," (GPT Neo model)"),KCe.forEach(t),bbo=i(q),Ru=n(q,"LI",{});var ZCe=s(Ru);Pae=n(ZCe,"STRONG",{});var OHr=s(Pae);Fbo=r(OHr,"gptj"),OHr.forEach(t),vbo=r(ZCe," \u2014 "),X$=n(ZCe,"A",{href:!0});var VHr=s(X$);Tbo=r(VHr,"GPTJForCausalLM"),VHr.forEach(t),Mbo=r(ZCe," (GPT-J model)"),ZCe.forEach(t),Ebo=i(q),Bu=n(q,"LI",{});var e5e=s(Bu);$ae=n(e5e,"STRONG",{});var XHr=s($ae);Cbo=r(XHr,"marian"),XHr.forEach(t),wbo=r(e5e," \u2014 "),z$=n(e5e,"A",{href:!0});var zHr=s(z$);Abo=r(zHr,"MarianForCausalLM"),zHr.forEach(t),ybo=r(e5e," (Marian model)"),e5e.forEach(t),Lbo=i(q),Pu=n(q,"LI",{});var o5e=s(Pu);Iae=n(o5e,"STRONG",{});var QHr=s(Iae);xbo=r(QHr,"mbart"),QHr.forEach(t),kbo=r(o5e," \u2014 "),Q$=n(o5e,"A",{href:!0});var WHr=s(Q$);Sbo=r(WHr,"MBartForCausalLM"),WHr.forEach(t),Rbo=r(o5e," (mBART model)"),o5e.forEach(t),Bbo=i(q),$u=n(q,"LI",{});var r5e=s($u);qae=n(r5e,"STRONG",{});var HHr=s(qae);Pbo=r(HHr,"megatron-bert"),HHr.forEach(t),$bo=r(r5e," \u2014 "),W$=n(r5e,"A",{href:!0});var UHr=s(W$);Ibo=r(UHr,"MegatronBertForCausalLM"),UHr.forEach(t),qbo=r(r5e," (MegatronBert model)"),r5e.forEach(t),Nbo=i(q),Iu=n(q,"LI",{});var t5e=s(Iu);Nae=n(t5e,"STRONG",{});var JHr=s(Nae);jbo=r(JHr,"openai-gpt"),JHr.forEach(t),Dbo=r(t5e," \u2014 "),H$=n(t5e,"A",{href:!0});var YHr=s(H$);Gbo=r(YHr,"OpenAIGPTLMHeadModel"),YHr.forEach(t),Obo=r(t5e," (OpenAI GPT model)"),t5e.forEach(t),Vbo=i(q),qu=n(q,"LI",{});var a5e=s(qu);jae=n(a5e,"STRONG",{});var KHr=s(jae);Xbo=r(KHr,"pegasus"),KHr.forEach(t),zbo=r(a5e," \u2014 "),U$=n(a5e,"A",{href:!0});var ZHr=s(U$);Qbo=r(ZHr,"PegasusForCausalLM"),ZHr.forEach(t),Wbo=r(a5e," (Pegasus model)"),a5e.forEach(t),Hbo=i(q),Nu=n(q,"LI",{});var n5e=s(Nu);Dae=n(n5e,"STRONG",{});var eUr=s(Dae);Ubo=r(eUr,"plbart"),eUr.forEach(t),Jbo=r(n5e," \u2014 "),J$=n(n5e,"A",{href:!0});var oUr=s(J$);Ybo=r(oUr,"PLBartForCausalLM"),oUr.forEach(t),Kbo=r(n5e," (PLBart model)"),n5e.forEach(t),Zbo=i(q),ju=n(q,"LI",{});var s5e=s(ju);Gae=n(s5e,"STRONG",{});var rUr=s(Gae);e3o=r(rUr,"prophetnet"),rUr.forEach(t),o3o=r(s5e," \u2014 "),Y$=n(s5e,"A",{href:!0});var tUr=s(Y$);r3o=r(tUr,"ProphetNetForCausalLM"),tUr.forEach(t),t3o=r(s5e," (ProphetNet model)"),s5e.forEach(t),a3o=i(q),Du=n(q,"LI",{});var l5e=s(Du);Oae=n(l5e,"STRONG",{});var aUr=s(Oae);n3o=r(aUr,"qdqbert"),aUr.forEach(t),s3o=r(l5e," \u2014 "),K$=n(l5e,"A",{href:!0});var nUr=s(K$);l3o=r(nUr,"QDQBertLMHeadModel"),nUr.forEach(t),i3o=r(l5e," (QDQBert model)"),l5e.forEach(t),d3o=i(q),Gu=n(q,"LI",{});var i5e=s(Gu);Vae=n(i5e,"STRONG",{});var sUr=s(Vae);c3o=r(sUr,"reformer"),sUr.forEach(t),f3o=r(i5e," \u2014 "),Z$=n(i5e,"A",{href:!0});var lUr=s(Z$);m3o=r(lUr,"ReformerModelWithLMHead"),lUr.forEach(t),g3o=r(i5e," (Reformer model)"),i5e.forEach(t),h3o=i(q),Ou=n(q,"LI",{});var d5e=s(Ou);Xae=n(d5e,"STRONG",{});var iUr=s(Xae);p3o=r(iUr,"rembert"),iUr.forEach(t),_3o=r(d5e," \u2014 "),eI=n(d5e,"A",{href:!0});var dUr=s(eI);u3o=r(dUr,"RemBertForCausalLM"),dUr.forEach(t),b3o=r(d5e," (RemBERT model)"),d5e.forEach(t),F3o=i(q),Vu=n(q,"LI",{});var c5e=s(Vu);zae=n(c5e,"STRONG",{});var cUr=s(zae);v3o=r(cUr,"roberta"),cUr.forEach(t),T3o=r(c5e," \u2014 "),oI=n(c5e,"A",{href:!0});var fUr=s(oI);M3o=r(fUr,"RobertaForCausalLM"),fUr.forEach(t),E3o=r(c5e," (RoBERTa model)"),c5e.forEach(t),C3o=i(q),Xu=n(q,"LI",{});var f5e=s(Xu);Qae=n(f5e,"STRONG",{});var mUr=s(Qae);w3o=r(mUr,"roformer"),mUr.forEach(t),A3o=r(f5e," \u2014 "),rI=n(f5e,"A",{href:!0});var gUr=s(rI);y3o=r(gUr,"RoFormerForCausalLM"),gUr.forEach(t),L3o=r(f5e," (RoFormer model)"),f5e.forEach(t),x3o=i(q),zu=n(q,"LI",{});var m5e=s(zu);Wae=n(m5e,"STRONG",{});var hUr=s(Wae);k3o=r(hUr,"speech_to_text_2"),hUr.forEach(t),S3o=r(m5e," \u2014 "),tI=n(m5e,"A",{href:!0});var pUr=s(tI);R3o=r(pUr,"Speech2Text2ForCausalLM"),pUr.forEach(t),B3o=r(m5e," (Speech2Text2 model)"),m5e.forEach(t),P3o=i(q),Qu=n(q,"LI",{});var g5e=s(Qu);Hae=n(g5e,"STRONG",{});var _Ur=s(Hae);$3o=r(_Ur,"transfo-xl"),_Ur.forEach(t),I3o=r(g5e," \u2014 "),aI=n(g5e,"A",{href:!0});var uUr=s(aI);q3o=r(uUr,"TransfoXLLMHeadModel"),uUr.forEach(t),N3o=r(g5e," (Transformer-XL model)"),g5e.forEach(t),j3o=i(q),Wu=n(q,"LI",{});var h5e=s(Wu);Uae=n(h5e,"STRONG",{});var bUr=s(Uae);D3o=r(bUr,"trocr"),bUr.forEach(t),G3o=r(h5e," \u2014 "),nI=n(h5e,"A",{href:!0});var FUr=s(nI);O3o=r(FUr,"TrOCRForCausalLM"),FUr.forEach(t),V3o=r(h5e," (TrOCR model)"),h5e.forEach(t),X3o=i(q),Hu=n(q,"LI",{});var p5e=s(Hu);Jae=n(p5e,"STRONG",{});var vUr=s(Jae);z3o=r(vUr,"xglm"),vUr.forEach(t),Q3o=r(p5e," \u2014 "),sI=n(p5e,"A",{href:!0});var TUr=s(sI);W3o=r(TUr,"XGLMForCausalLM"),TUr.forEach(t),H3o=r(p5e," (XGLM model)"),p5e.forEach(t),U3o=i(q),Uu=n(q,"LI",{});var _5e=s(Uu);Yae=n(_5e,"STRONG",{});var MUr=s(Yae);J3o=r(MUr,"xlm"),MUr.forEach(t),Y3o=r(_5e," \u2014 "),lI=n(_5e,"A",{href:!0});var EUr=s(lI);K3o=r(EUr,"XLMWithLMHeadModel"),EUr.forEach(t),Z3o=r(_5e," (XLM model)"),_5e.forEach(t),e2o=i(q),Ju=n(q,"LI",{});var u5e=s(Ju);Kae=n(u5e,"STRONG",{});var CUr=s(Kae);o2o=r(CUr,"xlm-prophetnet"),CUr.forEach(t),r2o=r(u5e," \u2014 "),iI=n(u5e,"A",{href:!0});var wUr=s(iI);t2o=r(wUr,"XLMProphetNetForCausalLM"),wUr.forEach(t),a2o=r(u5e," (XLMProphetNet model)"),u5e.forEach(t),n2o=i(q),Yu=n(q,"LI",{});var b5e=s(Yu);Zae=n(b5e,"STRONG",{});var AUr=s(Zae);s2o=r(AUr,"xlm-roberta"),AUr.forEach(t),l2o=r(b5e," \u2014 "),dI=n(b5e,"A",{href:!0});var yUr=s(dI);i2o=r(yUr,"XLMRobertaForCausalLM"),yUr.forEach(t),d2o=r(b5e," (XLM-RoBERTa model)"),b5e.forEach(t),c2o=i(q),Ku=n(q,"LI",{});var F5e=s(Ku);ene=n(F5e,"STRONG",{});var LUr=s(ene);f2o=r(LUr,"xlm-roberta-xl"),LUr.forEach(t),m2o=r(F5e," \u2014 "),cI=n(F5e,"A",{href:!0});var xUr=s(cI);g2o=r(xUr,"XLMRobertaXLForCausalLM"),xUr.forEach(t),h2o=r(F5e," (XLM-RoBERTa-XL model)"),F5e.forEach(t),p2o=i(q),Zu=n(q,"LI",{});var v5e=s(Zu);one=n(v5e,"STRONG",{});var kUr=s(one);_2o=r(kUr,"xlnet"),kUr.forEach(t),u2o=r(v5e," \u2014 "),fI=n(v5e,"A",{href:!0});var SUr=s(fI);b2o=r(SUr,"XLNetLMHeadModel"),SUr.forEach(t),F2o=r(v5e," (XLNet model)"),v5e.forEach(t),q.forEach(t),v2o=i(Ot),e1=n(Ot,"P",{});var T5e=s(e1);T2o=r(T5e,"The model is set in evaluation mode by default using "),rne=n(T5e,"CODE",{});var RUr=s(rne);M2o=r(RUr,"model.eval()"),RUr.forEach(t),E2o=r(T5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=n(T5e,"CODE",{});var BUr=s(tne);C2o=r(BUr,"model.train()"),BUr.forEach(t),T5e.forEach(t),w2o=i(Ot),ane=n(Ot,"P",{});var PUr=s(ane);A2o=r(PUr,"Examples:"),PUr.forEach(t),y2o=i(Ot),m(b5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),hRe=i(c),nd=n(c,"H2",{class:!0});var EPe=s(nd);o1=n(EPe,"A",{id:!0,class:!0,href:!0});var $Ur=s(o1);nne=n($Ur,"SPAN",{});var IUr=s(nne);m(F5.$$.fragment,IUr),IUr.forEach(t),$Ur.forEach(t),L2o=i(EPe),sne=n(EPe,"SPAN",{});var qUr=s(sne);x2o=r(qUr,"AutoModelForMaskedLM"),qUr.forEach(t),EPe.forEach(t),pRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(v5.$$.fragment,Ks),k2o=i(Ks),sd=n(Ks,"P",{});var lU=s(sd);S2o=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mI=n(lU,"A",{href:!0});var NUr=s(mI);R2o=r(NUr,"from_pretrained()"),NUr.forEach(t),B2o=r(lU," class method or the "),gI=n(lU,"A",{href:!0});var jUr=s(gI);P2o=r(jUr,"from_config()"),jUr.forEach(t),$2o=r(lU,` class
method.`),lU.forEach(t),I2o=i(Ks),T5=n(Ks,"P",{});var CPe=s(T5);q2o=r(CPe,"This class cannot be instantiated directly using "),lne=n(CPe,"CODE",{});var DUr=s(lne);N2o=r(DUr,"__init__()"),DUr.forEach(t),j2o=r(CPe," (throws an error)."),CPe.forEach(t),D2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(M5.$$.fragment,Zs),G2o=i(Zs),ine=n(Zs,"P",{});var GUr=s(ine);O2o=r(GUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GUr.forEach(t),V2o=i(Zs),ld=n(Zs,"P",{});var iU=s(ld);X2o=r(iU,`Note:
Loading a model from its configuration file does `),dne=n(iU,"STRONG",{});var OUr=s(dne);z2o=r(OUr,"not"),OUr.forEach(t),Q2o=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hI=n(iU,"A",{href:!0});var VUr=s(hI);W2o=r(VUr,"from_pretrained()"),VUr.forEach(t),H2o=r(iU," to load the model weights."),iU.forEach(t),U2o=i(Zs),cne=n(Zs,"P",{});var XUr=s(cne);J2o=r(XUr,"Examples:"),XUr.forEach(t),Y2o=i(Zs),m(E5.$$.fragment,Zs),Zs.forEach(t),K2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(C5.$$.fragment,Vt),Z2o=i(Vt),fne=n(Vt,"P",{});var zUr=s(fne);eFo=r(zUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zUr.forEach(t),oFo=i(Vt),Wa=n(Vt,"P",{});var wE=s(Wa);rFo=r(wE,"The model class to instantiate is selected based on the "),mne=n(wE,"CODE",{});var QUr=s(mne);tFo=r(QUr,"model_type"),QUr.forEach(t),aFo=r(wE,` property of the config object (either
passed as an argument or loaded from `),gne=n(wE,"CODE",{});var WUr=s(gne);nFo=r(WUr,"pretrained_model_name_or_path"),WUr.forEach(t),sFo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=n(wE,"CODE",{});var HUr=s(hne);lFo=r(HUr,"pretrained_model_name_or_path"),HUr.forEach(t),iFo=r(wE,":"),wE.forEach(t),dFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);r1=n(N,"LI",{});var M5e=s(r1);pne=n(M5e,"STRONG",{});var UUr=s(pne);cFo=r(UUr,"albert"),UUr.forEach(t),fFo=r(M5e," \u2014 "),pI=n(M5e,"A",{href:!0});var JUr=s(pI);mFo=r(JUr,"AlbertForMaskedLM"),JUr.forEach(t),gFo=r(M5e," (ALBERT model)"),M5e.forEach(t),hFo=i(N),t1=n(N,"LI",{});var E5e=s(t1);_ne=n(E5e,"STRONG",{});var YUr=s(_ne);pFo=r(YUr,"bart"),YUr.forEach(t),_Fo=r(E5e," \u2014 "),_I=n(E5e,"A",{href:!0});var KUr=s(_I);uFo=r(KUr,"BartForConditionalGeneration"),KUr.forEach(t),bFo=r(E5e," (BART model)"),E5e.forEach(t),FFo=i(N),a1=n(N,"LI",{});var C5e=s(a1);une=n(C5e,"STRONG",{});var ZUr=s(une);vFo=r(ZUr,"bert"),ZUr.forEach(t),TFo=r(C5e," \u2014 "),uI=n(C5e,"A",{href:!0});var eJr=s(uI);MFo=r(eJr,"BertForMaskedLM"),eJr.forEach(t),EFo=r(C5e," (BERT model)"),C5e.forEach(t),CFo=i(N),n1=n(N,"LI",{});var w5e=s(n1);bne=n(w5e,"STRONG",{});var oJr=s(bne);wFo=r(oJr,"big_bird"),oJr.forEach(t),AFo=r(w5e," \u2014 "),bI=n(w5e,"A",{href:!0});var rJr=s(bI);yFo=r(rJr,"BigBirdForMaskedLM"),rJr.forEach(t),LFo=r(w5e," (BigBird model)"),w5e.forEach(t),xFo=i(N),s1=n(N,"LI",{});var A5e=s(s1);Fne=n(A5e,"STRONG",{});var tJr=s(Fne);kFo=r(tJr,"camembert"),tJr.forEach(t),SFo=r(A5e," \u2014 "),FI=n(A5e,"A",{href:!0});var aJr=s(FI);RFo=r(aJr,"CamembertForMaskedLM"),aJr.forEach(t),BFo=r(A5e," (CamemBERT model)"),A5e.forEach(t),PFo=i(N),l1=n(N,"LI",{});var y5e=s(l1);vne=n(y5e,"STRONG",{});var nJr=s(vne);$Fo=r(nJr,"convbert"),nJr.forEach(t),IFo=r(y5e," \u2014 "),vI=n(y5e,"A",{href:!0});var sJr=s(vI);qFo=r(sJr,"ConvBertForMaskedLM"),sJr.forEach(t),NFo=r(y5e," (ConvBERT model)"),y5e.forEach(t),jFo=i(N),i1=n(N,"LI",{});var L5e=s(i1);Tne=n(L5e,"STRONG",{});var lJr=s(Tne);DFo=r(lJr,"data2vec-text"),lJr.forEach(t),GFo=r(L5e," \u2014 "),TI=n(L5e,"A",{href:!0});var iJr=s(TI);OFo=r(iJr,"Data2VecTextForMaskedLM"),iJr.forEach(t),VFo=r(L5e," (Data2VecText model)"),L5e.forEach(t),XFo=i(N),d1=n(N,"LI",{});var x5e=s(d1);Mne=n(x5e,"STRONG",{});var dJr=s(Mne);zFo=r(dJr,"deberta"),dJr.forEach(t),QFo=r(x5e," \u2014 "),MI=n(x5e,"A",{href:!0});var cJr=s(MI);WFo=r(cJr,"DebertaForMaskedLM"),cJr.forEach(t),HFo=r(x5e," (DeBERTa model)"),x5e.forEach(t),UFo=i(N),c1=n(N,"LI",{});var k5e=s(c1);Ene=n(k5e,"STRONG",{});var fJr=s(Ene);JFo=r(fJr,"deberta-v2"),fJr.forEach(t),YFo=r(k5e," \u2014 "),EI=n(k5e,"A",{href:!0});var mJr=s(EI);KFo=r(mJr,"DebertaV2ForMaskedLM"),mJr.forEach(t),ZFo=r(k5e," (DeBERTa-v2 model)"),k5e.forEach(t),evo=i(N),f1=n(N,"LI",{});var S5e=s(f1);Cne=n(S5e,"STRONG",{});var gJr=s(Cne);ovo=r(gJr,"distilbert"),gJr.forEach(t),rvo=r(S5e," \u2014 "),CI=n(S5e,"A",{href:!0});var hJr=s(CI);tvo=r(hJr,"DistilBertForMaskedLM"),hJr.forEach(t),avo=r(S5e," (DistilBERT model)"),S5e.forEach(t),nvo=i(N),m1=n(N,"LI",{});var R5e=s(m1);wne=n(R5e,"STRONG",{});var pJr=s(wne);svo=r(pJr,"electra"),pJr.forEach(t),lvo=r(R5e," \u2014 "),wI=n(R5e,"A",{href:!0});var _Jr=s(wI);ivo=r(_Jr,"ElectraForMaskedLM"),_Jr.forEach(t),dvo=r(R5e," (ELECTRA model)"),R5e.forEach(t),cvo=i(N),g1=n(N,"LI",{});var B5e=s(g1);Ane=n(B5e,"STRONG",{});var uJr=s(Ane);fvo=r(uJr,"flaubert"),uJr.forEach(t),mvo=r(B5e," \u2014 "),AI=n(B5e,"A",{href:!0});var bJr=s(AI);gvo=r(bJr,"FlaubertWithLMHeadModel"),bJr.forEach(t),hvo=r(B5e," (FlauBERT model)"),B5e.forEach(t),pvo=i(N),h1=n(N,"LI",{});var P5e=s(h1);yne=n(P5e,"STRONG",{});var FJr=s(yne);_vo=r(FJr,"fnet"),FJr.forEach(t),uvo=r(P5e," \u2014 "),yI=n(P5e,"A",{href:!0});var vJr=s(yI);bvo=r(vJr,"FNetForMaskedLM"),vJr.forEach(t),Fvo=r(P5e," (FNet model)"),P5e.forEach(t),vvo=i(N),p1=n(N,"LI",{});var $5e=s(p1);Lne=n($5e,"STRONG",{});var TJr=s(Lne);Tvo=r(TJr,"funnel"),TJr.forEach(t),Mvo=r($5e," \u2014 "),LI=n($5e,"A",{href:!0});var MJr=s(LI);Evo=r(MJr,"FunnelForMaskedLM"),MJr.forEach(t),Cvo=r($5e," (Funnel Transformer model)"),$5e.forEach(t),wvo=i(N),_1=n(N,"LI",{});var I5e=s(_1);xne=n(I5e,"STRONG",{});var EJr=s(xne);Avo=r(EJr,"ibert"),EJr.forEach(t),yvo=r(I5e," \u2014 "),xI=n(I5e,"A",{href:!0});var CJr=s(xI);Lvo=r(CJr,"IBertForMaskedLM"),CJr.forEach(t),xvo=r(I5e," (I-BERT model)"),I5e.forEach(t),kvo=i(N),u1=n(N,"LI",{});var q5e=s(u1);kne=n(q5e,"STRONG",{});var wJr=s(kne);Svo=r(wJr,"layoutlm"),wJr.forEach(t),Rvo=r(q5e," \u2014 "),kI=n(q5e,"A",{href:!0});var AJr=s(kI);Bvo=r(AJr,"LayoutLMForMaskedLM"),AJr.forEach(t),Pvo=r(q5e," (LayoutLM model)"),q5e.forEach(t),$vo=i(N),b1=n(N,"LI",{});var N5e=s(b1);Sne=n(N5e,"STRONG",{});var yJr=s(Sne);Ivo=r(yJr,"longformer"),yJr.forEach(t),qvo=r(N5e," \u2014 "),SI=n(N5e,"A",{href:!0});var LJr=s(SI);Nvo=r(LJr,"LongformerForMaskedLM"),LJr.forEach(t),jvo=r(N5e," (Longformer model)"),N5e.forEach(t),Dvo=i(N),F1=n(N,"LI",{});var j5e=s(F1);Rne=n(j5e,"STRONG",{});var xJr=s(Rne);Gvo=r(xJr,"mbart"),xJr.forEach(t),Ovo=r(j5e," \u2014 "),RI=n(j5e,"A",{href:!0});var kJr=s(RI);Vvo=r(kJr,"MBartForConditionalGeneration"),kJr.forEach(t),Xvo=r(j5e," (mBART model)"),j5e.forEach(t),zvo=i(N),v1=n(N,"LI",{});var D5e=s(v1);Bne=n(D5e,"STRONG",{});var SJr=s(Bne);Qvo=r(SJr,"megatron-bert"),SJr.forEach(t),Wvo=r(D5e," \u2014 "),BI=n(D5e,"A",{href:!0});var RJr=s(BI);Hvo=r(RJr,"MegatronBertForMaskedLM"),RJr.forEach(t),Uvo=r(D5e," (MegatronBert model)"),D5e.forEach(t),Jvo=i(N),T1=n(N,"LI",{});var G5e=s(T1);Pne=n(G5e,"STRONG",{});var BJr=s(Pne);Yvo=r(BJr,"mobilebert"),BJr.forEach(t),Kvo=r(G5e," \u2014 "),PI=n(G5e,"A",{href:!0});var PJr=s(PI);Zvo=r(PJr,"MobileBertForMaskedLM"),PJr.forEach(t),e6o=r(G5e," (MobileBERT model)"),G5e.forEach(t),o6o=i(N),M1=n(N,"LI",{});var O5e=s(M1);$ne=n(O5e,"STRONG",{});var $Jr=s($ne);r6o=r($Jr,"mpnet"),$Jr.forEach(t),t6o=r(O5e," \u2014 "),$I=n(O5e,"A",{href:!0});var IJr=s($I);a6o=r(IJr,"MPNetForMaskedLM"),IJr.forEach(t),n6o=r(O5e," (MPNet model)"),O5e.forEach(t),s6o=i(N),E1=n(N,"LI",{});var V5e=s(E1);Ine=n(V5e,"STRONG",{});var qJr=s(Ine);l6o=r(qJr,"nystromformer"),qJr.forEach(t),i6o=r(V5e," \u2014 "),II=n(V5e,"A",{href:!0});var NJr=s(II);d6o=r(NJr,"NystromformerForMaskedLM"),NJr.forEach(t),c6o=r(V5e," (Nystromformer model)"),V5e.forEach(t),f6o=i(N),C1=n(N,"LI",{});var X5e=s(C1);qne=n(X5e,"STRONG",{});var jJr=s(qne);m6o=r(jJr,"perceiver"),jJr.forEach(t),g6o=r(X5e," \u2014 "),qI=n(X5e,"A",{href:!0});var DJr=s(qI);h6o=r(DJr,"PerceiverForMaskedLM"),DJr.forEach(t),p6o=r(X5e," (Perceiver model)"),X5e.forEach(t),_6o=i(N),w1=n(N,"LI",{});var z5e=s(w1);Nne=n(z5e,"STRONG",{});var GJr=s(Nne);u6o=r(GJr,"qdqbert"),GJr.forEach(t),b6o=r(z5e," \u2014 "),NI=n(z5e,"A",{href:!0});var OJr=s(NI);F6o=r(OJr,"QDQBertForMaskedLM"),OJr.forEach(t),v6o=r(z5e," (QDQBert model)"),z5e.forEach(t),T6o=i(N),A1=n(N,"LI",{});var Q5e=s(A1);jne=n(Q5e,"STRONG",{});var VJr=s(jne);M6o=r(VJr,"reformer"),VJr.forEach(t),E6o=r(Q5e," \u2014 "),jI=n(Q5e,"A",{href:!0});var XJr=s(jI);C6o=r(XJr,"ReformerForMaskedLM"),XJr.forEach(t),w6o=r(Q5e," (Reformer model)"),Q5e.forEach(t),A6o=i(N),y1=n(N,"LI",{});var W5e=s(y1);Dne=n(W5e,"STRONG",{});var zJr=s(Dne);y6o=r(zJr,"rembert"),zJr.forEach(t),L6o=r(W5e," \u2014 "),DI=n(W5e,"A",{href:!0});var QJr=s(DI);x6o=r(QJr,"RemBertForMaskedLM"),QJr.forEach(t),k6o=r(W5e," (RemBERT model)"),W5e.forEach(t),S6o=i(N),L1=n(N,"LI",{});var H5e=s(L1);Gne=n(H5e,"STRONG",{});var WJr=s(Gne);R6o=r(WJr,"roberta"),WJr.forEach(t),B6o=r(H5e," \u2014 "),GI=n(H5e,"A",{href:!0});var HJr=s(GI);P6o=r(HJr,"RobertaForMaskedLM"),HJr.forEach(t),$6o=r(H5e," (RoBERTa model)"),H5e.forEach(t),I6o=i(N),x1=n(N,"LI",{});var U5e=s(x1);One=n(U5e,"STRONG",{});var UJr=s(One);q6o=r(UJr,"roformer"),UJr.forEach(t),N6o=r(U5e," \u2014 "),OI=n(U5e,"A",{href:!0});var JJr=s(OI);j6o=r(JJr,"RoFormerForMaskedLM"),JJr.forEach(t),D6o=r(U5e," (RoFormer model)"),U5e.forEach(t),G6o=i(N),k1=n(N,"LI",{});var J5e=s(k1);Vne=n(J5e,"STRONG",{});var YJr=s(Vne);O6o=r(YJr,"squeezebert"),YJr.forEach(t),V6o=r(J5e," \u2014 "),VI=n(J5e,"A",{href:!0});var KJr=s(VI);X6o=r(KJr,"SqueezeBertForMaskedLM"),KJr.forEach(t),z6o=r(J5e," (SqueezeBERT model)"),J5e.forEach(t),Q6o=i(N),S1=n(N,"LI",{});var Y5e=s(S1);Xne=n(Y5e,"STRONG",{});var ZJr=s(Xne);W6o=r(ZJr,"tapas"),ZJr.forEach(t),H6o=r(Y5e," \u2014 "),XI=n(Y5e,"A",{href:!0});var eYr=s(XI);U6o=r(eYr,"TapasForMaskedLM"),eYr.forEach(t),J6o=r(Y5e," (TAPAS model)"),Y5e.forEach(t),Y6o=i(N),R1=n(N,"LI",{});var K5e=s(R1);zne=n(K5e,"STRONG",{});var oYr=s(zne);K6o=r(oYr,"wav2vec2"),oYr.forEach(t),Z6o=r(K5e," \u2014 "),Qne=n(K5e,"CODE",{});var rYr=s(Qne);eTo=r(rYr,"Wav2Vec2ForMaskedLM"),rYr.forEach(t),oTo=r(K5e,"(Wav2Vec2 model)"),K5e.forEach(t),rTo=i(N),B1=n(N,"LI",{});var Z5e=s(B1);Wne=n(Z5e,"STRONG",{});var tYr=s(Wne);tTo=r(tYr,"xlm"),tYr.forEach(t),aTo=r(Z5e," \u2014 "),zI=n(Z5e,"A",{href:!0});var aYr=s(zI);nTo=r(aYr,"XLMWithLMHeadModel"),aYr.forEach(t),sTo=r(Z5e," (XLM model)"),Z5e.forEach(t),lTo=i(N),P1=n(N,"LI",{});var ewe=s(P1);Hne=n(ewe,"STRONG",{});var nYr=s(Hne);iTo=r(nYr,"xlm-roberta"),nYr.forEach(t),dTo=r(ewe," \u2014 "),QI=n(ewe,"A",{href:!0});var sYr=s(QI);cTo=r(sYr,"XLMRobertaForMaskedLM"),sYr.forEach(t),fTo=r(ewe," (XLM-RoBERTa model)"),ewe.forEach(t),mTo=i(N),$1=n(N,"LI",{});var owe=s($1);Une=n(owe,"STRONG",{});var lYr=s(Une);gTo=r(lYr,"xlm-roberta-xl"),lYr.forEach(t),hTo=r(owe," \u2014 "),WI=n(owe,"A",{href:!0});var iYr=s(WI);pTo=r(iYr,"XLMRobertaXLForMaskedLM"),iYr.forEach(t),_To=r(owe," (XLM-RoBERTa-XL model)"),owe.forEach(t),uTo=i(N),I1=n(N,"LI",{});var rwe=s(I1);Jne=n(rwe,"STRONG",{});var dYr=s(Jne);bTo=r(dYr,"yoso"),dYr.forEach(t),FTo=r(rwe," \u2014 "),HI=n(rwe,"A",{href:!0});var cYr=s(HI);vTo=r(cYr,"YosoForMaskedLM"),cYr.forEach(t),TTo=r(rwe," (YOSO model)"),rwe.forEach(t),N.forEach(t),MTo=i(Vt),q1=n(Vt,"P",{});var twe=s(q1);ETo=r(twe,"The model is set in evaluation mode by default using "),Yne=n(twe,"CODE",{});var fYr=s(Yne);CTo=r(fYr,"model.eval()"),fYr.forEach(t),wTo=r(twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kne=n(twe,"CODE",{});var mYr=s(Kne);ATo=r(mYr,"model.train()"),mYr.forEach(t),twe.forEach(t),yTo=i(Vt),Zne=n(Vt,"P",{});var gYr=s(Zne);LTo=r(gYr,"Examples:"),gYr.forEach(t),xTo=i(Vt),m(w5.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),_Re=i(c),id=n(c,"H2",{class:!0});var wPe=s(id);N1=n(wPe,"A",{id:!0,class:!0,href:!0});var hYr=s(N1);ese=n(hYr,"SPAN",{});var pYr=s(ese);m(A5.$$.fragment,pYr),pYr.forEach(t),hYr.forEach(t),kTo=i(wPe),ose=n(wPe,"SPAN",{});var _Yr=s(ose);STo=r(_Yr,"AutoModelForSeq2SeqLM"),_Yr.forEach(t),wPe.forEach(t),uRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(y5.$$.fragment,el),RTo=i(el),dd=n(el,"P",{});var dU=s(dd);BTo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UI=n(dU,"A",{href:!0});var uYr=s(UI);PTo=r(uYr,"from_pretrained()"),uYr.forEach(t),$To=r(dU," class method or the "),JI=n(dU,"A",{href:!0});var bYr=s(JI);ITo=r(bYr,"from_config()"),bYr.forEach(t),qTo=r(dU,` class
method.`),dU.forEach(t),NTo=i(el),L5=n(el,"P",{});var APe=s(L5);jTo=r(APe,"This class cannot be instantiated directly using "),rse=n(APe,"CODE",{});var FYr=s(rse);DTo=r(FYr,"__init__()"),FYr.forEach(t),GTo=r(APe," (throws an error)."),APe.forEach(t),OTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(x5.$$.fragment,ol),VTo=i(ol),tse=n(ol,"P",{});var vYr=s(tse);XTo=r(vYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),vYr.forEach(t),zTo=i(ol),cd=n(ol,"P",{});var cU=s(cd);QTo=r(cU,`Note:
Loading a model from its configuration file does `),ase=n(cU,"STRONG",{});var TYr=s(ase);WTo=r(TYr,"not"),TYr.forEach(t),HTo=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),YI=n(cU,"A",{href:!0});var MYr=s(YI);UTo=r(MYr,"from_pretrained()"),MYr.forEach(t),JTo=r(cU," to load the model weights."),cU.forEach(t),YTo=i(ol),nse=n(ol,"P",{});var EYr=s(nse);KTo=r(EYr,"Examples:"),EYr.forEach(t),ZTo=i(ol),m(k5.$$.fragment,ol),ol.forEach(t),e7o=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(S5.$$.fragment,Xt),o7o=i(Xt),sse=n(Xt,"P",{});var CYr=s(sse);r7o=r(CYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),CYr.forEach(t),t7o=i(Xt),Ha=n(Xt,"P",{});var AE=s(Ha);a7o=r(AE,"The model class to instantiate is selected based on the "),lse=n(AE,"CODE",{});var wYr=s(lse);n7o=r(wYr,"model_type"),wYr.forEach(t),s7o=r(AE,` property of the config object (either
passed as an argument or loaded from `),ise=n(AE,"CODE",{});var AYr=s(ise);l7o=r(AYr,"pretrained_model_name_or_path"),AYr.forEach(t),i7o=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dse=n(AE,"CODE",{});var yYr=s(dse);d7o=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),c7o=r(AE,":"),AE.forEach(t),f7o=i(Xt),ae=n(Xt,"UL",{});var le=s(ae);j1=n(le,"LI",{});var awe=s(j1);cse=n(awe,"STRONG",{});var LYr=s(cse);m7o=r(LYr,"bart"),LYr.forEach(t),g7o=r(awe," \u2014 "),KI=n(awe,"A",{href:!0});var xYr=s(KI);h7o=r(xYr,"BartForConditionalGeneration"),xYr.forEach(t),p7o=r(awe," (BART model)"),awe.forEach(t),_7o=i(le),D1=n(le,"LI",{});var nwe=s(D1);fse=n(nwe,"STRONG",{});var kYr=s(fse);u7o=r(kYr,"bigbird_pegasus"),kYr.forEach(t),b7o=r(nwe," \u2014 "),ZI=n(nwe,"A",{href:!0});var SYr=s(ZI);F7o=r(SYr,"BigBirdPegasusForConditionalGeneration"),SYr.forEach(t),v7o=r(nwe," (BigBirdPegasus model)"),nwe.forEach(t),T7o=i(le),G1=n(le,"LI",{});var swe=s(G1);mse=n(swe,"STRONG",{});var RYr=s(mse);M7o=r(RYr,"blenderbot"),RYr.forEach(t),E7o=r(swe," \u2014 "),eq=n(swe,"A",{href:!0});var BYr=s(eq);C7o=r(BYr,"BlenderbotForConditionalGeneration"),BYr.forEach(t),w7o=r(swe," (Blenderbot model)"),swe.forEach(t),A7o=i(le),O1=n(le,"LI",{});var lwe=s(O1);gse=n(lwe,"STRONG",{});var PYr=s(gse);y7o=r(PYr,"blenderbot-small"),PYr.forEach(t),L7o=r(lwe," \u2014 "),oq=n(lwe,"A",{href:!0});var $Yr=s(oq);x7o=r($Yr,"BlenderbotSmallForConditionalGeneration"),$Yr.forEach(t),k7o=r(lwe," (BlenderbotSmall model)"),lwe.forEach(t),S7o=i(le),V1=n(le,"LI",{});var iwe=s(V1);hse=n(iwe,"STRONG",{});var IYr=s(hse);R7o=r(IYr,"encoder-decoder"),IYr.forEach(t),B7o=r(iwe," \u2014 "),rq=n(iwe,"A",{href:!0});var qYr=s(rq);P7o=r(qYr,"EncoderDecoderModel"),qYr.forEach(t),$7o=r(iwe," (Encoder decoder model)"),iwe.forEach(t),I7o=i(le),X1=n(le,"LI",{});var dwe=s(X1);pse=n(dwe,"STRONG",{});var NYr=s(pse);q7o=r(NYr,"fsmt"),NYr.forEach(t),N7o=r(dwe," \u2014 "),tq=n(dwe,"A",{href:!0});var jYr=s(tq);j7o=r(jYr,"FSMTForConditionalGeneration"),jYr.forEach(t),D7o=r(dwe," (FairSeq Machine-Translation model)"),dwe.forEach(t),G7o=i(le),z1=n(le,"LI",{});var cwe=s(z1);_se=n(cwe,"STRONG",{});var DYr=s(_se);O7o=r(DYr,"led"),DYr.forEach(t),V7o=r(cwe," \u2014 "),aq=n(cwe,"A",{href:!0});var GYr=s(aq);X7o=r(GYr,"LEDForConditionalGeneration"),GYr.forEach(t),z7o=r(cwe," (LED model)"),cwe.forEach(t),Q7o=i(le),Q1=n(le,"LI",{});var fwe=s(Q1);use=n(fwe,"STRONG",{});var OYr=s(use);W7o=r(OYr,"m2m_100"),OYr.forEach(t),H7o=r(fwe," \u2014 "),nq=n(fwe,"A",{href:!0});var VYr=s(nq);U7o=r(VYr,"M2M100ForConditionalGeneration"),VYr.forEach(t),J7o=r(fwe," (M2M100 model)"),fwe.forEach(t),Y7o=i(le),W1=n(le,"LI",{});var mwe=s(W1);bse=n(mwe,"STRONG",{});var XYr=s(bse);K7o=r(XYr,"marian"),XYr.forEach(t),Z7o=r(mwe," \u2014 "),sq=n(mwe,"A",{href:!0});var zYr=s(sq);eMo=r(zYr,"MarianMTModel"),zYr.forEach(t),oMo=r(mwe," (Marian model)"),mwe.forEach(t),rMo=i(le),H1=n(le,"LI",{});var gwe=s(H1);Fse=n(gwe,"STRONG",{});var QYr=s(Fse);tMo=r(QYr,"mbart"),QYr.forEach(t),aMo=r(gwe," \u2014 "),lq=n(gwe,"A",{href:!0});var WYr=s(lq);nMo=r(WYr,"MBartForConditionalGeneration"),WYr.forEach(t),sMo=r(gwe," (mBART model)"),gwe.forEach(t),lMo=i(le),U1=n(le,"LI",{});var hwe=s(U1);vse=n(hwe,"STRONG",{});var HYr=s(vse);iMo=r(HYr,"mt5"),HYr.forEach(t),dMo=r(hwe," \u2014 "),iq=n(hwe,"A",{href:!0});var UYr=s(iq);cMo=r(UYr,"MT5ForConditionalGeneration"),UYr.forEach(t),fMo=r(hwe," (mT5 model)"),hwe.forEach(t),mMo=i(le),J1=n(le,"LI",{});var pwe=s(J1);Tse=n(pwe,"STRONG",{});var JYr=s(Tse);gMo=r(JYr,"pegasus"),JYr.forEach(t),hMo=r(pwe," \u2014 "),dq=n(pwe,"A",{href:!0});var YYr=s(dq);pMo=r(YYr,"PegasusForConditionalGeneration"),YYr.forEach(t),_Mo=r(pwe," (Pegasus model)"),pwe.forEach(t),uMo=i(le),Y1=n(le,"LI",{});var _we=s(Y1);Mse=n(_we,"STRONG",{});var KYr=s(Mse);bMo=r(KYr,"plbart"),KYr.forEach(t),FMo=r(_we," \u2014 "),cq=n(_we,"A",{href:!0});var ZYr=s(cq);vMo=r(ZYr,"PLBartForConditionalGeneration"),ZYr.forEach(t),TMo=r(_we," (PLBart model)"),_we.forEach(t),MMo=i(le),K1=n(le,"LI",{});var uwe=s(K1);Ese=n(uwe,"STRONG",{});var eKr=s(Ese);EMo=r(eKr,"prophetnet"),eKr.forEach(t),CMo=r(uwe," \u2014 "),fq=n(uwe,"A",{href:!0});var oKr=s(fq);wMo=r(oKr,"ProphetNetForConditionalGeneration"),oKr.forEach(t),AMo=r(uwe," (ProphetNet model)"),uwe.forEach(t),yMo=i(le),Z1=n(le,"LI",{});var bwe=s(Z1);Cse=n(bwe,"STRONG",{});var rKr=s(Cse);LMo=r(rKr,"t5"),rKr.forEach(t),xMo=r(bwe," \u2014 "),mq=n(bwe,"A",{href:!0});var tKr=s(mq);kMo=r(tKr,"T5ForConditionalGeneration"),tKr.forEach(t),SMo=r(bwe," (T5 model)"),bwe.forEach(t),RMo=i(le),e4=n(le,"LI",{});var Fwe=s(e4);wse=n(Fwe,"STRONG",{});var aKr=s(wse);BMo=r(aKr,"tapex"),aKr.forEach(t),PMo=r(Fwe," \u2014 "),gq=n(Fwe,"A",{href:!0});var nKr=s(gq);$Mo=r(nKr,"BartForConditionalGeneration"),nKr.forEach(t),IMo=r(Fwe," (TAPEX model)"),Fwe.forEach(t),qMo=i(le),o4=n(le,"LI",{});var vwe=s(o4);Ase=n(vwe,"STRONG",{});var sKr=s(Ase);NMo=r(sKr,"xlm-prophetnet"),sKr.forEach(t),jMo=r(vwe," \u2014 "),hq=n(vwe,"A",{href:!0});var lKr=s(hq);DMo=r(lKr,"XLMProphetNetForConditionalGeneration"),lKr.forEach(t),GMo=r(vwe," (XLMProphetNet model)"),vwe.forEach(t),le.forEach(t),OMo=i(Xt),r4=n(Xt,"P",{});var Twe=s(r4);VMo=r(Twe,"The model is set in evaluation mode by default using "),yse=n(Twe,"CODE",{});var iKr=s(yse);XMo=r(iKr,"model.eval()"),iKr.forEach(t),zMo=r(Twe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=n(Twe,"CODE",{});var dKr=s(Lse);QMo=r(dKr,"model.train()"),dKr.forEach(t),Twe.forEach(t),WMo=i(Xt),xse=n(Xt,"P",{});var cKr=s(xse);HMo=r(cKr,"Examples:"),cKr.forEach(t),UMo=i(Xt),m(R5.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),bRe=i(c),fd=n(c,"H2",{class:!0});var yPe=s(fd);t4=n(yPe,"A",{id:!0,class:!0,href:!0});var fKr=s(t4);kse=n(fKr,"SPAN",{});var mKr=s(kse);m(B5.$$.fragment,mKr),mKr.forEach(t),fKr.forEach(t),JMo=i(yPe),Sse=n(yPe,"SPAN",{});var gKr=s(Sse);YMo=r(gKr,"AutoModelForSequenceClassification"),gKr.forEach(t),yPe.forEach(t),FRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(P5.$$.fragment,rl),KMo=i(rl),md=n(rl,"P",{});var fU=s(md);ZMo=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pq=n(fU,"A",{href:!0});var hKr=s(pq);eEo=r(hKr,"from_pretrained()"),hKr.forEach(t),oEo=r(fU," class method or the "),_q=n(fU,"A",{href:!0});var pKr=s(_q);rEo=r(pKr,"from_config()"),pKr.forEach(t),tEo=r(fU,` class
method.`),fU.forEach(t),aEo=i(rl),$5=n(rl,"P",{});var LPe=s($5);nEo=r(LPe,"This class cannot be instantiated directly using "),Rse=n(LPe,"CODE",{});var _Kr=s(Rse);sEo=r(_Kr,"__init__()"),_Kr.forEach(t),lEo=r(LPe," (throws an error)."),LPe.forEach(t),iEo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(I5.$$.fragment,tl),dEo=i(tl),Bse=n(tl,"P",{});var uKr=s(Bse);cEo=r(uKr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uKr.forEach(t),fEo=i(tl),gd=n(tl,"P",{});var mU=s(gd);mEo=r(mU,`Note:
Loading a model from its configuration file does `),Pse=n(mU,"STRONG",{});var bKr=s(Pse);gEo=r(bKr,"not"),bKr.forEach(t),hEo=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uq=n(mU,"A",{href:!0});var FKr=s(uq);pEo=r(FKr,"from_pretrained()"),FKr.forEach(t),_Eo=r(mU," to load the model weights."),mU.forEach(t),uEo=i(tl),$se=n(tl,"P",{});var vKr=s($se);bEo=r(vKr,"Examples:"),vKr.forEach(t),FEo=i(tl),m(q5.$$.fragment,tl),tl.forEach(t),vEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(N5.$$.fragment,zt),TEo=i(zt),Ise=n(zt,"P",{});var TKr=s(Ise);MEo=r(TKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),TKr.forEach(t),EEo=i(zt),Ua=n(zt,"P",{});var yE=s(Ua);CEo=r(yE,"The model class to instantiate is selected based on the "),qse=n(yE,"CODE",{});var MKr=s(qse);wEo=r(MKr,"model_type"),MKr.forEach(t),AEo=r(yE,` property of the config object (either
passed as an argument or loaded from `),Nse=n(yE,"CODE",{});var EKr=s(Nse);yEo=r(EKr,"pretrained_model_name_or_path"),EKr.forEach(t),LEo=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jse=n(yE,"CODE",{});var CKr=s(jse);xEo=r(CKr,"pretrained_model_name_or_path"),CKr.forEach(t),kEo=r(yE,":"),yE.forEach(t),SEo=i(zt),y=n(zt,"UL",{});var L=s(y);a4=n(L,"LI",{});var Mwe=s(a4);Dse=n(Mwe,"STRONG",{});var wKr=s(Dse);REo=r(wKr,"albert"),wKr.forEach(t),BEo=r(Mwe," \u2014 "),bq=n(Mwe,"A",{href:!0});var AKr=s(bq);PEo=r(AKr,"AlbertForSequenceClassification"),AKr.forEach(t),$Eo=r(Mwe," (ALBERT model)"),Mwe.forEach(t),IEo=i(L),n4=n(L,"LI",{});var Ewe=s(n4);Gse=n(Ewe,"STRONG",{});var yKr=s(Gse);qEo=r(yKr,"bart"),yKr.forEach(t),NEo=r(Ewe," \u2014 "),Fq=n(Ewe,"A",{href:!0});var LKr=s(Fq);jEo=r(LKr,"BartForSequenceClassification"),LKr.forEach(t),DEo=r(Ewe," (BART model)"),Ewe.forEach(t),GEo=i(L),s4=n(L,"LI",{});var Cwe=s(s4);Ose=n(Cwe,"STRONG",{});var xKr=s(Ose);OEo=r(xKr,"bert"),xKr.forEach(t),VEo=r(Cwe," \u2014 "),vq=n(Cwe,"A",{href:!0});var kKr=s(vq);XEo=r(kKr,"BertForSequenceClassification"),kKr.forEach(t),zEo=r(Cwe," (BERT model)"),Cwe.forEach(t),QEo=i(L),l4=n(L,"LI",{});var wwe=s(l4);Vse=n(wwe,"STRONG",{});var SKr=s(Vse);WEo=r(SKr,"big_bird"),SKr.forEach(t),HEo=r(wwe," \u2014 "),Tq=n(wwe,"A",{href:!0});var RKr=s(Tq);UEo=r(RKr,"BigBirdForSequenceClassification"),RKr.forEach(t),JEo=r(wwe," (BigBird model)"),wwe.forEach(t),YEo=i(L),i4=n(L,"LI",{});var Awe=s(i4);Xse=n(Awe,"STRONG",{});var BKr=s(Xse);KEo=r(BKr,"bigbird_pegasus"),BKr.forEach(t),ZEo=r(Awe," \u2014 "),Mq=n(Awe,"A",{href:!0});var PKr=s(Mq);eCo=r(PKr,"BigBirdPegasusForSequenceClassification"),PKr.forEach(t),oCo=r(Awe," (BigBirdPegasus model)"),Awe.forEach(t),rCo=i(L),d4=n(L,"LI",{});var ywe=s(d4);zse=n(ywe,"STRONG",{});var $Kr=s(zse);tCo=r($Kr,"camembert"),$Kr.forEach(t),aCo=r(ywe," \u2014 "),Eq=n(ywe,"A",{href:!0});var IKr=s(Eq);nCo=r(IKr,"CamembertForSequenceClassification"),IKr.forEach(t),sCo=r(ywe," (CamemBERT model)"),ywe.forEach(t),lCo=i(L),c4=n(L,"LI",{});var Lwe=s(c4);Qse=n(Lwe,"STRONG",{});var qKr=s(Qse);iCo=r(qKr,"canine"),qKr.forEach(t),dCo=r(Lwe," \u2014 "),Cq=n(Lwe,"A",{href:!0});var NKr=s(Cq);cCo=r(NKr,"CanineForSequenceClassification"),NKr.forEach(t),fCo=r(Lwe," (Canine model)"),Lwe.forEach(t),mCo=i(L),f4=n(L,"LI",{});var xwe=s(f4);Wse=n(xwe,"STRONG",{});var jKr=s(Wse);gCo=r(jKr,"convbert"),jKr.forEach(t),hCo=r(xwe," \u2014 "),wq=n(xwe,"A",{href:!0});var DKr=s(wq);pCo=r(DKr,"ConvBertForSequenceClassification"),DKr.forEach(t),_Co=r(xwe," (ConvBERT model)"),xwe.forEach(t),uCo=i(L),m4=n(L,"LI",{});var kwe=s(m4);Hse=n(kwe,"STRONG",{});var GKr=s(Hse);bCo=r(GKr,"ctrl"),GKr.forEach(t),FCo=r(kwe," \u2014 "),Aq=n(kwe,"A",{href:!0});var OKr=s(Aq);vCo=r(OKr,"CTRLForSequenceClassification"),OKr.forEach(t),TCo=r(kwe," (CTRL model)"),kwe.forEach(t),MCo=i(L),g4=n(L,"LI",{});var Swe=s(g4);Use=n(Swe,"STRONG",{});var VKr=s(Use);ECo=r(VKr,"data2vec-text"),VKr.forEach(t),CCo=r(Swe," \u2014 "),yq=n(Swe,"A",{href:!0});var XKr=s(yq);wCo=r(XKr,"Data2VecTextForSequenceClassification"),XKr.forEach(t),ACo=r(Swe," (Data2VecText model)"),Swe.forEach(t),yCo=i(L),h4=n(L,"LI",{});var Rwe=s(h4);Jse=n(Rwe,"STRONG",{});var zKr=s(Jse);LCo=r(zKr,"deberta"),zKr.forEach(t),xCo=r(Rwe," \u2014 "),Lq=n(Rwe,"A",{href:!0});var QKr=s(Lq);kCo=r(QKr,"DebertaForSequenceClassification"),QKr.forEach(t),SCo=r(Rwe," (DeBERTa model)"),Rwe.forEach(t),RCo=i(L),p4=n(L,"LI",{});var Bwe=s(p4);Yse=n(Bwe,"STRONG",{});var WKr=s(Yse);BCo=r(WKr,"deberta-v2"),WKr.forEach(t),PCo=r(Bwe," \u2014 "),xq=n(Bwe,"A",{href:!0});var HKr=s(xq);$Co=r(HKr,"DebertaV2ForSequenceClassification"),HKr.forEach(t),ICo=r(Bwe," (DeBERTa-v2 model)"),Bwe.forEach(t),qCo=i(L),_4=n(L,"LI",{});var Pwe=s(_4);Kse=n(Pwe,"STRONG",{});var UKr=s(Kse);NCo=r(UKr,"distilbert"),UKr.forEach(t),jCo=r(Pwe," \u2014 "),kq=n(Pwe,"A",{href:!0});var JKr=s(kq);DCo=r(JKr,"DistilBertForSequenceClassification"),JKr.forEach(t),GCo=r(Pwe," (DistilBERT model)"),Pwe.forEach(t),OCo=i(L),u4=n(L,"LI",{});var $we=s(u4);Zse=n($we,"STRONG",{});var YKr=s(Zse);VCo=r(YKr,"electra"),YKr.forEach(t),XCo=r($we," \u2014 "),Sq=n($we,"A",{href:!0});var KKr=s(Sq);zCo=r(KKr,"ElectraForSequenceClassification"),KKr.forEach(t),QCo=r($we," (ELECTRA model)"),$we.forEach(t),WCo=i(L),b4=n(L,"LI",{});var Iwe=s(b4);ele=n(Iwe,"STRONG",{});var ZKr=s(ele);HCo=r(ZKr,"flaubert"),ZKr.forEach(t),UCo=r(Iwe," \u2014 "),Rq=n(Iwe,"A",{href:!0});var eZr=s(Rq);JCo=r(eZr,"FlaubertForSequenceClassification"),eZr.forEach(t),YCo=r(Iwe," (FlauBERT model)"),Iwe.forEach(t),KCo=i(L),F4=n(L,"LI",{});var qwe=s(F4);ole=n(qwe,"STRONG",{});var oZr=s(ole);ZCo=r(oZr,"fnet"),oZr.forEach(t),e5o=r(qwe," \u2014 "),Bq=n(qwe,"A",{href:!0});var rZr=s(Bq);o5o=r(rZr,"FNetForSequenceClassification"),rZr.forEach(t),r5o=r(qwe," (FNet model)"),qwe.forEach(t),t5o=i(L),v4=n(L,"LI",{});var Nwe=s(v4);rle=n(Nwe,"STRONG",{});var tZr=s(rle);a5o=r(tZr,"funnel"),tZr.forEach(t),n5o=r(Nwe," \u2014 "),Pq=n(Nwe,"A",{href:!0});var aZr=s(Pq);s5o=r(aZr,"FunnelForSequenceClassification"),aZr.forEach(t),l5o=r(Nwe," (Funnel Transformer model)"),Nwe.forEach(t),i5o=i(L),T4=n(L,"LI",{});var jwe=s(T4);tle=n(jwe,"STRONG",{});var nZr=s(tle);d5o=r(nZr,"gpt2"),nZr.forEach(t),c5o=r(jwe," \u2014 "),$q=n(jwe,"A",{href:!0});var sZr=s($q);f5o=r(sZr,"GPT2ForSequenceClassification"),sZr.forEach(t),m5o=r(jwe," (OpenAI GPT-2 model)"),jwe.forEach(t),g5o=i(L),M4=n(L,"LI",{});var Dwe=s(M4);ale=n(Dwe,"STRONG",{});var lZr=s(ale);h5o=r(lZr,"gpt_neo"),lZr.forEach(t),p5o=r(Dwe," \u2014 "),Iq=n(Dwe,"A",{href:!0});var iZr=s(Iq);_5o=r(iZr,"GPTNeoForSequenceClassification"),iZr.forEach(t),u5o=r(Dwe," (GPT Neo model)"),Dwe.forEach(t),b5o=i(L),E4=n(L,"LI",{});var Gwe=s(E4);nle=n(Gwe,"STRONG",{});var dZr=s(nle);F5o=r(dZr,"gptj"),dZr.forEach(t),v5o=r(Gwe," \u2014 "),qq=n(Gwe,"A",{href:!0});var cZr=s(qq);T5o=r(cZr,"GPTJForSequenceClassification"),cZr.forEach(t),M5o=r(Gwe," (GPT-J model)"),Gwe.forEach(t),E5o=i(L),C4=n(L,"LI",{});var Owe=s(C4);sle=n(Owe,"STRONG",{});var fZr=s(sle);C5o=r(fZr,"ibert"),fZr.forEach(t),w5o=r(Owe," \u2014 "),Nq=n(Owe,"A",{href:!0});var mZr=s(Nq);A5o=r(mZr,"IBertForSequenceClassification"),mZr.forEach(t),y5o=r(Owe," (I-BERT model)"),Owe.forEach(t),L5o=i(L),w4=n(L,"LI",{});var Vwe=s(w4);lle=n(Vwe,"STRONG",{});var gZr=s(lle);x5o=r(gZr,"layoutlm"),gZr.forEach(t),k5o=r(Vwe," \u2014 "),jq=n(Vwe,"A",{href:!0});var hZr=s(jq);S5o=r(hZr,"LayoutLMForSequenceClassification"),hZr.forEach(t),R5o=r(Vwe," (LayoutLM model)"),Vwe.forEach(t),B5o=i(L),A4=n(L,"LI",{});var Xwe=s(A4);ile=n(Xwe,"STRONG",{});var pZr=s(ile);P5o=r(pZr,"layoutlmv2"),pZr.forEach(t),$5o=r(Xwe," \u2014 "),Dq=n(Xwe,"A",{href:!0});var _Zr=s(Dq);I5o=r(_Zr,"LayoutLMv2ForSequenceClassification"),_Zr.forEach(t),q5o=r(Xwe," (LayoutLMv2 model)"),Xwe.forEach(t),N5o=i(L),y4=n(L,"LI",{});var zwe=s(y4);dle=n(zwe,"STRONG",{});var uZr=s(dle);j5o=r(uZr,"led"),uZr.forEach(t),D5o=r(zwe," \u2014 "),Gq=n(zwe,"A",{href:!0});var bZr=s(Gq);G5o=r(bZr,"LEDForSequenceClassification"),bZr.forEach(t),O5o=r(zwe," (LED model)"),zwe.forEach(t),V5o=i(L),L4=n(L,"LI",{});var Qwe=s(L4);cle=n(Qwe,"STRONG",{});var FZr=s(cle);X5o=r(FZr,"longformer"),FZr.forEach(t),z5o=r(Qwe," \u2014 "),Oq=n(Qwe,"A",{href:!0});var vZr=s(Oq);Q5o=r(vZr,"LongformerForSequenceClassification"),vZr.forEach(t),W5o=r(Qwe," (Longformer model)"),Qwe.forEach(t),H5o=i(L),x4=n(L,"LI",{});var Wwe=s(x4);fle=n(Wwe,"STRONG",{});var TZr=s(fle);U5o=r(TZr,"mbart"),TZr.forEach(t),J5o=r(Wwe," \u2014 "),Vq=n(Wwe,"A",{href:!0});var MZr=s(Vq);Y5o=r(MZr,"MBartForSequenceClassification"),MZr.forEach(t),K5o=r(Wwe," (mBART model)"),Wwe.forEach(t),Z5o=i(L),k4=n(L,"LI",{});var Hwe=s(k4);mle=n(Hwe,"STRONG",{});var EZr=s(mle);ewo=r(EZr,"megatron-bert"),EZr.forEach(t),owo=r(Hwe," \u2014 "),Xq=n(Hwe,"A",{href:!0});var CZr=s(Xq);rwo=r(CZr,"MegatronBertForSequenceClassification"),CZr.forEach(t),two=r(Hwe," (MegatronBert model)"),Hwe.forEach(t),awo=i(L),S4=n(L,"LI",{});var Uwe=s(S4);gle=n(Uwe,"STRONG",{});var wZr=s(gle);nwo=r(wZr,"mobilebert"),wZr.forEach(t),swo=r(Uwe," \u2014 "),zq=n(Uwe,"A",{href:!0});var AZr=s(zq);lwo=r(AZr,"MobileBertForSequenceClassification"),AZr.forEach(t),iwo=r(Uwe," (MobileBERT model)"),Uwe.forEach(t),dwo=i(L),R4=n(L,"LI",{});var Jwe=s(R4);hle=n(Jwe,"STRONG",{});var yZr=s(hle);cwo=r(yZr,"mpnet"),yZr.forEach(t),fwo=r(Jwe," \u2014 "),Qq=n(Jwe,"A",{href:!0});var LZr=s(Qq);mwo=r(LZr,"MPNetForSequenceClassification"),LZr.forEach(t),gwo=r(Jwe," (MPNet model)"),Jwe.forEach(t),hwo=i(L),B4=n(L,"LI",{});var Ywe=s(B4);ple=n(Ywe,"STRONG",{});var xZr=s(ple);pwo=r(xZr,"nystromformer"),xZr.forEach(t),_wo=r(Ywe," \u2014 "),Wq=n(Ywe,"A",{href:!0});var kZr=s(Wq);uwo=r(kZr,"NystromformerForSequenceClassification"),kZr.forEach(t),bwo=r(Ywe," (Nystromformer model)"),Ywe.forEach(t),Fwo=i(L),P4=n(L,"LI",{});var Kwe=s(P4);_le=n(Kwe,"STRONG",{});var SZr=s(_le);vwo=r(SZr,"openai-gpt"),SZr.forEach(t),Two=r(Kwe," \u2014 "),Hq=n(Kwe,"A",{href:!0});var RZr=s(Hq);Mwo=r(RZr,"OpenAIGPTForSequenceClassification"),RZr.forEach(t),Ewo=r(Kwe," (OpenAI GPT model)"),Kwe.forEach(t),Cwo=i(L),$4=n(L,"LI",{});var Zwe=s($4);ule=n(Zwe,"STRONG",{});var BZr=s(ule);wwo=r(BZr,"perceiver"),BZr.forEach(t),Awo=r(Zwe," \u2014 "),Uq=n(Zwe,"A",{href:!0});var PZr=s(Uq);ywo=r(PZr,"PerceiverForSequenceClassification"),PZr.forEach(t),Lwo=r(Zwe," (Perceiver model)"),Zwe.forEach(t),xwo=i(L),I4=n(L,"LI",{});var eAe=s(I4);ble=n(eAe,"STRONG",{});var $Zr=s(ble);kwo=r($Zr,"plbart"),$Zr.forEach(t),Swo=r(eAe," \u2014 "),Jq=n(eAe,"A",{href:!0});var IZr=s(Jq);Rwo=r(IZr,"PLBartForSequenceClassification"),IZr.forEach(t),Bwo=r(eAe," (PLBart model)"),eAe.forEach(t),Pwo=i(L),q4=n(L,"LI",{});var oAe=s(q4);Fle=n(oAe,"STRONG",{});var qZr=s(Fle);$wo=r(qZr,"qdqbert"),qZr.forEach(t),Iwo=r(oAe," \u2014 "),Yq=n(oAe,"A",{href:!0});var NZr=s(Yq);qwo=r(NZr,"QDQBertForSequenceClassification"),NZr.forEach(t),Nwo=r(oAe," (QDQBert model)"),oAe.forEach(t),jwo=i(L),N4=n(L,"LI",{});var rAe=s(N4);vle=n(rAe,"STRONG",{});var jZr=s(vle);Dwo=r(jZr,"reformer"),jZr.forEach(t),Gwo=r(rAe," \u2014 "),Kq=n(rAe,"A",{href:!0});var DZr=s(Kq);Owo=r(DZr,"ReformerForSequenceClassification"),DZr.forEach(t),Vwo=r(rAe," (Reformer model)"),rAe.forEach(t),Xwo=i(L),j4=n(L,"LI",{});var tAe=s(j4);Tle=n(tAe,"STRONG",{});var GZr=s(Tle);zwo=r(GZr,"rembert"),GZr.forEach(t),Qwo=r(tAe," \u2014 "),Zq=n(tAe,"A",{href:!0});var OZr=s(Zq);Wwo=r(OZr,"RemBertForSequenceClassification"),OZr.forEach(t),Hwo=r(tAe," (RemBERT model)"),tAe.forEach(t),Uwo=i(L),D4=n(L,"LI",{});var aAe=s(D4);Mle=n(aAe,"STRONG",{});var VZr=s(Mle);Jwo=r(VZr,"roberta"),VZr.forEach(t),Ywo=r(aAe," \u2014 "),eN=n(aAe,"A",{href:!0});var XZr=s(eN);Kwo=r(XZr,"RobertaForSequenceClassification"),XZr.forEach(t),Zwo=r(aAe," (RoBERTa model)"),aAe.forEach(t),eAo=i(L),G4=n(L,"LI",{});var nAe=s(G4);Ele=n(nAe,"STRONG",{});var zZr=s(Ele);oAo=r(zZr,"roformer"),zZr.forEach(t),rAo=r(nAe," \u2014 "),oN=n(nAe,"A",{href:!0});var QZr=s(oN);tAo=r(QZr,"RoFormerForSequenceClassification"),QZr.forEach(t),aAo=r(nAe," (RoFormer model)"),nAe.forEach(t),nAo=i(L),O4=n(L,"LI",{});var sAe=s(O4);Cle=n(sAe,"STRONG",{});var WZr=s(Cle);sAo=r(WZr,"squeezebert"),WZr.forEach(t),lAo=r(sAe," \u2014 "),rN=n(sAe,"A",{href:!0});var HZr=s(rN);iAo=r(HZr,"SqueezeBertForSequenceClassification"),HZr.forEach(t),dAo=r(sAe," (SqueezeBERT model)"),sAe.forEach(t),cAo=i(L),V4=n(L,"LI",{});var lAe=s(V4);wle=n(lAe,"STRONG",{});var UZr=s(wle);fAo=r(UZr,"tapas"),UZr.forEach(t),mAo=r(lAe," \u2014 "),tN=n(lAe,"A",{href:!0});var JZr=s(tN);gAo=r(JZr,"TapasForSequenceClassification"),JZr.forEach(t),hAo=r(lAe," (TAPAS model)"),lAe.forEach(t),pAo=i(L),X4=n(L,"LI",{});var iAe=s(X4);Ale=n(iAe,"STRONG",{});var YZr=s(Ale);_Ao=r(YZr,"tapex"),YZr.forEach(t),uAo=r(iAe," \u2014 "),aN=n(iAe,"A",{href:!0});var KZr=s(aN);bAo=r(KZr,"BartForSequenceClassification"),KZr.forEach(t),FAo=r(iAe," (TAPEX model)"),iAe.forEach(t),vAo=i(L),z4=n(L,"LI",{});var dAe=s(z4);yle=n(dAe,"STRONG",{});var ZZr=s(yle);TAo=r(ZZr,"transfo-xl"),ZZr.forEach(t),MAo=r(dAe," \u2014 "),nN=n(dAe,"A",{href:!0});var eet=s(nN);EAo=r(eet,"TransfoXLForSequenceClassification"),eet.forEach(t),CAo=r(dAe," (Transformer-XL model)"),dAe.forEach(t),wAo=i(L),Q4=n(L,"LI",{});var cAe=s(Q4);Lle=n(cAe,"STRONG",{});var oet=s(Lle);AAo=r(oet,"xlm"),oet.forEach(t),yAo=r(cAe," \u2014 "),sN=n(cAe,"A",{href:!0});var ret=s(sN);LAo=r(ret,"XLMForSequenceClassification"),ret.forEach(t),xAo=r(cAe," (XLM model)"),cAe.forEach(t),kAo=i(L),W4=n(L,"LI",{});var fAe=s(W4);xle=n(fAe,"STRONG",{});var tet=s(xle);SAo=r(tet,"xlm-roberta"),tet.forEach(t),RAo=r(fAe," \u2014 "),lN=n(fAe,"A",{href:!0});var aet=s(lN);BAo=r(aet,"XLMRobertaForSequenceClassification"),aet.forEach(t),PAo=r(fAe," (XLM-RoBERTa model)"),fAe.forEach(t),$Ao=i(L),H4=n(L,"LI",{});var mAe=s(H4);kle=n(mAe,"STRONG",{});var net=s(kle);IAo=r(net,"xlm-roberta-xl"),net.forEach(t),qAo=r(mAe," \u2014 "),iN=n(mAe,"A",{href:!0});var set=s(iN);NAo=r(set,"XLMRobertaXLForSequenceClassification"),set.forEach(t),jAo=r(mAe," (XLM-RoBERTa-XL model)"),mAe.forEach(t),DAo=i(L),U4=n(L,"LI",{});var gAe=s(U4);Sle=n(gAe,"STRONG",{});var iet=s(Sle);GAo=r(iet,"xlnet"),iet.forEach(t),OAo=r(gAe," \u2014 "),dN=n(gAe,"A",{href:!0});var det=s(dN);VAo=r(det,"XLNetForSequenceClassification"),det.forEach(t),XAo=r(gAe," (XLNet model)"),gAe.forEach(t),zAo=i(L),J4=n(L,"LI",{});var hAe=s(J4);Rle=n(hAe,"STRONG",{});var cet=s(Rle);QAo=r(cet,"yoso"),cet.forEach(t),WAo=r(hAe," \u2014 "),cN=n(hAe,"A",{href:!0});var fet=s(cN);HAo=r(fet,"YosoForSequenceClassification"),fet.forEach(t),UAo=r(hAe," (YOSO model)"),hAe.forEach(t),L.forEach(t),JAo=i(zt),Y4=n(zt,"P",{});var pAe=s(Y4);YAo=r(pAe,"The model is set in evaluation mode by default using "),Ble=n(pAe,"CODE",{});var met=s(Ble);KAo=r(met,"model.eval()"),met.forEach(t),ZAo=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ple=n(pAe,"CODE",{});var get=s(Ple);e0o=r(get,"model.train()"),get.forEach(t),pAe.forEach(t),o0o=i(zt),$le=n(zt,"P",{});var het=s($le);r0o=r(het,"Examples:"),het.forEach(t),t0o=i(zt),m(j5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),vRe=i(c),hd=n(c,"H2",{class:!0});var xPe=s(hd);K4=n(xPe,"A",{id:!0,class:!0,href:!0});var pet=s(K4);Ile=n(pet,"SPAN",{});var _et=s(Ile);m(D5.$$.fragment,_et),_et.forEach(t),pet.forEach(t),a0o=i(xPe),qle=n(xPe,"SPAN",{});var uet=s(qle);n0o=r(uet,"AutoModelForMultipleChoice"),uet.forEach(t),xPe.forEach(t),TRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(G5.$$.fragment,al),s0o=i(al),pd=n(al,"P",{});var gU=s(pd);l0o=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fN=n(gU,"A",{href:!0});var bet=s(fN);i0o=r(bet,"from_pretrained()"),bet.forEach(t),d0o=r(gU," class method or the "),mN=n(gU,"A",{href:!0});var Fet=s(mN);c0o=r(Fet,"from_config()"),Fet.forEach(t),f0o=r(gU,` class
method.`),gU.forEach(t),m0o=i(al),O5=n(al,"P",{});var kPe=s(O5);g0o=r(kPe,"This class cannot be instantiated directly using "),Nle=n(kPe,"CODE",{});var vet=s(Nle);h0o=r(vet,"__init__()"),vet.forEach(t),p0o=r(kPe," (throws an error)."),kPe.forEach(t),_0o=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(V5.$$.fragment,nl),u0o=i(nl),jle=n(nl,"P",{});var Tet=s(jle);b0o=r(Tet,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Tet.forEach(t),F0o=i(nl),_d=n(nl,"P",{});var hU=s(_d);v0o=r(hU,`Note:
Loading a model from its configuration file does `),Dle=n(hU,"STRONG",{});var Met=s(Dle);T0o=r(Met,"not"),Met.forEach(t),M0o=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gN=n(hU,"A",{href:!0});var Eet=s(gN);E0o=r(Eet,"from_pretrained()"),Eet.forEach(t),C0o=r(hU," to load the model weights."),hU.forEach(t),w0o=i(nl),Gle=n(nl,"P",{});var Cet=s(Gle);A0o=r(Cet,"Examples:"),Cet.forEach(t),y0o=i(nl),m(X5.$$.fragment,nl),nl.forEach(t),L0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(z5.$$.fragment,Qt),x0o=i(Qt),Ole=n(Qt,"P",{});var wet=s(Ole);k0o=r(wet,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wet.forEach(t),S0o=i(Qt),Ja=n(Qt,"P",{});var LE=s(Ja);R0o=r(LE,"The model class to instantiate is selected based on the "),Vle=n(LE,"CODE",{});var Aet=s(Vle);B0o=r(Aet,"model_type"),Aet.forEach(t),P0o=r(LE,` property of the config object (either
passed as an argument or loaded from `),Xle=n(LE,"CODE",{});var yet=s(Xle);$0o=r(yet,"pretrained_model_name_or_path"),yet.forEach(t),I0o=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zle=n(LE,"CODE",{});var Let=s(zle);q0o=r(Let,"pretrained_model_name_or_path"),Let.forEach(t),N0o=r(LE,":"),LE.forEach(t),j0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Z4=n(O,"LI",{});var _Ae=s(Z4);Qle=n(_Ae,"STRONG",{});var xet=s(Qle);D0o=r(xet,"albert"),xet.forEach(t),G0o=r(_Ae," \u2014 "),hN=n(_Ae,"A",{href:!0});var ket=s(hN);O0o=r(ket,"AlbertForMultipleChoice"),ket.forEach(t),V0o=r(_Ae," (ALBERT model)"),_Ae.forEach(t),X0o=i(O),eb=n(O,"LI",{});var uAe=s(eb);Wle=n(uAe,"STRONG",{});var Set=s(Wle);z0o=r(Set,"bert"),Set.forEach(t),Q0o=r(uAe," \u2014 "),pN=n(uAe,"A",{href:!0});var Ret=s(pN);W0o=r(Ret,"BertForMultipleChoice"),Ret.forEach(t),H0o=r(uAe," (BERT model)"),uAe.forEach(t),U0o=i(O),ob=n(O,"LI",{});var bAe=s(ob);Hle=n(bAe,"STRONG",{});var Bet=s(Hle);J0o=r(Bet,"big_bird"),Bet.forEach(t),Y0o=r(bAe," \u2014 "),_N=n(bAe,"A",{href:!0});var Pet=s(_N);K0o=r(Pet,"BigBirdForMultipleChoice"),Pet.forEach(t),Z0o=r(bAe," (BigBird model)"),bAe.forEach(t),eyo=i(O),rb=n(O,"LI",{});var FAe=s(rb);Ule=n(FAe,"STRONG",{});var $et=s(Ule);oyo=r($et,"camembert"),$et.forEach(t),ryo=r(FAe," \u2014 "),uN=n(FAe,"A",{href:!0});var Iet=s(uN);tyo=r(Iet,"CamembertForMultipleChoice"),Iet.forEach(t),ayo=r(FAe," (CamemBERT model)"),FAe.forEach(t),nyo=i(O),tb=n(O,"LI",{});var vAe=s(tb);Jle=n(vAe,"STRONG",{});var qet=s(Jle);syo=r(qet,"canine"),qet.forEach(t),lyo=r(vAe," \u2014 "),bN=n(vAe,"A",{href:!0});var Net=s(bN);iyo=r(Net,"CanineForMultipleChoice"),Net.forEach(t),dyo=r(vAe," (Canine model)"),vAe.forEach(t),cyo=i(O),ab=n(O,"LI",{});var TAe=s(ab);Yle=n(TAe,"STRONG",{});var jet=s(Yle);fyo=r(jet,"convbert"),jet.forEach(t),myo=r(TAe," \u2014 "),FN=n(TAe,"A",{href:!0});var Det=s(FN);gyo=r(Det,"ConvBertForMultipleChoice"),Det.forEach(t),hyo=r(TAe," (ConvBERT model)"),TAe.forEach(t),pyo=i(O),nb=n(O,"LI",{});var MAe=s(nb);Kle=n(MAe,"STRONG",{});var Get=s(Kle);_yo=r(Get,"data2vec-text"),Get.forEach(t),uyo=r(MAe," \u2014 "),vN=n(MAe,"A",{href:!0});var Oet=s(vN);byo=r(Oet,"Data2VecTextForMultipleChoice"),Oet.forEach(t),Fyo=r(MAe," (Data2VecText model)"),MAe.forEach(t),vyo=i(O),sb=n(O,"LI",{});var EAe=s(sb);Zle=n(EAe,"STRONG",{});var Vet=s(Zle);Tyo=r(Vet,"distilbert"),Vet.forEach(t),Myo=r(EAe," \u2014 "),TN=n(EAe,"A",{href:!0});var Xet=s(TN);Eyo=r(Xet,"DistilBertForMultipleChoice"),Xet.forEach(t),Cyo=r(EAe," (DistilBERT model)"),EAe.forEach(t),wyo=i(O),lb=n(O,"LI",{});var CAe=s(lb);eie=n(CAe,"STRONG",{});var zet=s(eie);Ayo=r(zet,"electra"),zet.forEach(t),yyo=r(CAe," \u2014 "),MN=n(CAe,"A",{href:!0});var Qet=s(MN);Lyo=r(Qet,"ElectraForMultipleChoice"),Qet.forEach(t),xyo=r(CAe," (ELECTRA model)"),CAe.forEach(t),kyo=i(O),ib=n(O,"LI",{});var wAe=s(ib);oie=n(wAe,"STRONG",{});var Wet=s(oie);Syo=r(Wet,"flaubert"),Wet.forEach(t),Ryo=r(wAe," \u2014 "),EN=n(wAe,"A",{href:!0});var Het=s(EN);Byo=r(Het,"FlaubertForMultipleChoice"),Het.forEach(t),Pyo=r(wAe," (FlauBERT model)"),wAe.forEach(t),$yo=i(O),db=n(O,"LI",{});var AAe=s(db);rie=n(AAe,"STRONG",{});var Uet=s(rie);Iyo=r(Uet,"fnet"),Uet.forEach(t),qyo=r(AAe," \u2014 "),CN=n(AAe,"A",{href:!0});var Jet=s(CN);Nyo=r(Jet,"FNetForMultipleChoice"),Jet.forEach(t),jyo=r(AAe," (FNet model)"),AAe.forEach(t),Dyo=i(O),cb=n(O,"LI",{});var yAe=s(cb);tie=n(yAe,"STRONG",{});var Yet=s(tie);Gyo=r(Yet,"funnel"),Yet.forEach(t),Oyo=r(yAe," \u2014 "),wN=n(yAe,"A",{href:!0});var Ket=s(wN);Vyo=r(Ket,"FunnelForMultipleChoice"),Ket.forEach(t),Xyo=r(yAe," (Funnel Transformer model)"),yAe.forEach(t),zyo=i(O),fb=n(O,"LI",{});var LAe=s(fb);aie=n(LAe,"STRONG",{});var Zet=s(aie);Qyo=r(Zet,"ibert"),Zet.forEach(t),Wyo=r(LAe," \u2014 "),AN=n(LAe,"A",{href:!0});var eot=s(AN);Hyo=r(eot,"IBertForMultipleChoice"),eot.forEach(t),Uyo=r(LAe," (I-BERT model)"),LAe.forEach(t),Jyo=i(O),mb=n(O,"LI",{});var xAe=s(mb);nie=n(xAe,"STRONG",{});var oot=s(nie);Yyo=r(oot,"longformer"),oot.forEach(t),Kyo=r(xAe," \u2014 "),yN=n(xAe,"A",{href:!0});var rot=s(yN);Zyo=r(rot,"LongformerForMultipleChoice"),rot.forEach(t),eLo=r(xAe," (Longformer model)"),xAe.forEach(t),oLo=i(O),gb=n(O,"LI",{});var kAe=s(gb);sie=n(kAe,"STRONG",{});var tot=s(sie);rLo=r(tot,"megatron-bert"),tot.forEach(t),tLo=r(kAe," \u2014 "),LN=n(kAe,"A",{href:!0});var aot=s(LN);aLo=r(aot,"MegatronBertForMultipleChoice"),aot.forEach(t),nLo=r(kAe," (MegatronBert model)"),kAe.forEach(t),sLo=i(O),hb=n(O,"LI",{});var SAe=s(hb);lie=n(SAe,"STRONG",{});var not=s(lie);lLo=r(not,"mobilebert"),not.forEach(t),iLo=r(SAe," \u2014 "),xN=n(SAe,"A",{href:!0});var sot=s(xN);dLo=r(sot,"MobileBertForMultipleChoice"),sot.forEach(t),cLo=r(SAe," (MobileBERT model)"),SAe.forEach(t),fLo=i(O),pb=n(O,"LI",{});var RAe=s(pb);iie=n(RAe,"STRONG",{});var lot=s(iie);mLo=r(lot,"mpnet"),lot.forEach(t),gLo=r(RAe," \u2014 "),kN=n(RAe,"A",{href:!0});var iot=s(kN);hLo=r(iot,"MPNetForMultipleChoice"),iot.forEach(t),pLo=r(RAe," (MPNet model)"),RAe.forEach(t),_Lo=i(O),_b=n(O,"LI",{});var BAe=s(_b);die=n(BAe,"STRONG",{});var dot=s(die);uLo=r(dot,"nystromformer"),dot.forEach(t),bLo=r(BAe," \u2014 "),SN=n(BAe,"A",{href:!0});var cot=s(SN);FLo=r(cot,"NystromformerForMultipleChoice"),cot.forEach(t),vLo=r(BAe," (Nystromformer model)"),BAe.forEach(t),TLo=i(O),ub=n(O,"LI",{});var PAe=s(ub);cie=n(PAe,"STRONG",{});var fot=s(cie);MLo=r(fot,"qdqbert"),fot.forEach(t),ELo=r(PAe," \u2014 "),RN=n(PAe,"A",{href:!0});var mot=s(RN);CLo=r(mot,"QDQBertForMultipleChoice"),mot.forEach(t),wLo=r(PAe," (QDQBert model)"),PAe.forEach(t),ALo=i(O),bb=n(O,"LI",{});var $Ae=s(bb);fie=n($Ae,"STRONG",{});var got=s(fie);yLo=r(got,"rembert"),got.forEach(t),LLo=r($Ae," \u2014 "),BN=n($Ae,"A",{href:!0});var hot=s(BN);xLo=r(hot,"RemBertForMultipleChoice"),hot.forEach(t),kLo=r($Ae," (RemBERT model)"),$Ae.forEach(t),SLo=i(O),Fb=n(O,"LI",{});var IAe=s(Fb);mie=n(IAe,"STRONG",{});var pot=s(mie);RLo=r(pot,"roberta"),pot.forEach(t),BLo=r(IAe," \u2014 "),PN=n(IAe,"A",{href:!0});var _ot=s(PN);PLo=r(_ot,"RobertaForMultipleChoice"),_ot.forEach(t),$Lo=r(IAe," (RoBERTa model)"),IAe.forEach(t),ILo=i(O),vb=n(O,"LI",{});var qAe=s(vb);gie=n(qAe,"STRONG",{});var uot=s(gie);qLo=r(uot,"roformer"),uot.forEach(t),NLo=r(qAe," \u2014 "),$N=n(qAe,"A",{href:!0});var bot=s($N);jLo=r(bot,"RoFormerForMultipleChoice"),bot.forEach(t),DLo=r(qAe," (RoFormer model)"),qAe.forEach(t),GLo=i(O),Tb=n(O,"LI",{});var NAe=s(Tb);hie=n(NAe,"STRONG",{});var Fot=s(hie);OLo=r(Fot,"squeezebert"),Fot.forEach(t),VLo=r(NAe," \u2014 "),IN=n(NAe,"A",{href:!0});var vot=s(IN);XLo=r(vot,"SqueezeBertForMultipleChoice"),vot.forEach(t),zLo=r(NAe," (SqueezeBERT model)"),NAe.forEach(t),QLo=i(O),Mb=n(O,"LI",{});var jAe=s(Mb);pie=n(jAe,"STRONG",{});var Tot=s(pie);WLo=r(Tot,"xlm"),Tot.forEach(t),HLo=r(jAe," \u2014 "),qN=n(jAe,"A",{href:!0});var Mot=s(qN);ULo=r(Mot,"XLMForMultipleChoice"),Mot.forEach(t),JLo=r(jAe," (XLM model)"),jAe.forEach(t),YLo=i(O),Eb=n(O,"LI",{});var DAe=s(Eb);_ie=n(DAe,"STRONG",{});var Eot=s(_ie);KLo=r(Eot,"xlm-roberta"),Eot.forEach(t),ZLo=r(DAe," \u2014 "),NN=n(DAe,"A",{href:!0});var Cot=s(NN);e8o=r(Cot,"XLMRobertaForMultipleChoice"),Cot.forEach(t),o8o=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),r8o=i(O),Cb=n(O,"LI",{});var GAe=s(Cb);uie=n(GAe,"STRONG",{});var wot=s(uie);t8o=r(wot,"xlm-roberta-xl"),wot.forEach(t),a8o=r(GAe," \u2014 "),jN=n(GAe,"A",{href:!0});var Aot=s(jN);n8o=r(Aot,"XLMRobertaXLForMultipleChoice"),Aot.forEach(t),s8o=r(GAe," (XLM-RoBERTa-XL model)"),GAe.forEach(t),l8o=i(O),wb=n(O,"LI",{});var OAe=s(wb);bie=n(OAe,"STRONG",{});var yot=s(bie);i8o=r(yot,"xlnet"),yot.forEach(t),d8o=r(OAe," \u2014 "),DN=n(OAe,"A",{href:!0});var Lot=s(DN);c8o=r(Lot,"XLNetForMultipleChoice"),Lot.forEach(t),f8o=r(OAe," (XLNet model)"),OAe.forEach(t),m8o=i(O),Ab=n(O,"LI",{});var VAe=s(Ab);Fie=n(VAe,"STRONG",{});var xot=s(Fie);g8o=r(xot,"yoso"),xot.forEach(t),h8o=r(VAe," \u2014 "),GN=n(VAe,"A",{href:!0});var kot=s(GN);p8o=r(kot,"YosoForMultipleChoice"),kot.forEach(t),_8o=r(VAe," (YOSO model)"),VAe.forEach(t),O.forEach(t),u8o=i(Qt),yb=n(Qt,"P",{});var XAe=s(yb);b8o=r(XAe,"The model is set in evaluation mode by default using "),vie=n(XAe,"CODE",{});var Sot=s(vie);F8o=r(Sot,"model.eval()"),Sot.forEach(t),v8o=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tie=n(XAe,"CODE",{});var Rot=s(Tie);T8o=r(Rot,"model.train()"),Rot.forEach(t),XAe.forEach(t),M8o=i(Qt),Mie=n(Qt,"P",{});var Bot=s(Mie);E8o=r(Bot,"Examples:"),Bot.forEach(t),C8o=i(Qt),m(Q5.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),MRe=i(c),ud=n(c,"H2",{class:!0});var SPe=s(ud);Lb=n(SPe,"A",{id:!0,class:!0,href:!0});var Pot=s(Lb);Eie=n(Pot,"SPAN",{});var $ot=s(Eie);m(W5.$$.fragment,$ot),$ot.forEach(t),Pot.forEach(t),w8o=i(SPe),Cie=n(SPe,"SPAN",{});var Iot=s(Cie);A8o=r(Iot,"AutoModelForNextSentencePrediction"),Iot.forEach(t),SPe.forEach(t),ERe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(H5.$$.fragment,sl),y8o=i(sl),bd=n(sl,"P",{});var pU=s(bd);L8o=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ON=n(pU,"A",{href:!0});var qot=s(ON);x8o=r(qot,"from_pretrained()"),qot.forEach(t),k8o=r(pU," class method or the "),VN=n(pU,"A",{href:!0});var Not=s(VN);S8o=r(Not,"from_config()"),Not.forEach(t),R8o=r(pU,` class
method.`),pU.forEach(t),B8o=i(sl),U5=n(sl,"P",{});var RPe=s(U5);P8o=r(RPe,"This class cannot be instantiated directly using "),wie=n(RPe,"CODE",{});var jot=s(wie);$8o=r(jot,"__init__()"),jot.forEach(t),I8o=r(RPe," (throws an error)."),RPe.forEach(t),q8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(J5.$$.fragment,ll),N8o=i(ll),Aie=n(ll,"P",{});var Dot=s(Aie);j8o=r(Dot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Dot.forEach(t),D8o=i(ll),Fd=n(ll,"P",{});var _U=s(Fd);G8o=r(_U,`Note:
Loading a model from its configuration file does `),yie=n(_U,"STRONG",{});var Got=s(yie);O8o=r(Got,"not"),Got.forEach(t),V8o=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(_U,"A",{href:!0});var Oot=s(XN);X8o=r(Oot,"from_pretrained()"),Oot.forEach(t),z8o=r(_U," to load the model weights."),_U.forEach(t),Q8o=i(ll),Lie=n(ll,"P",{});var Vot=s(Lie);W8o=r(Vot,"Examples:"),Vot.forEach(t),H8o=i(ll),m(Y5.$$.fragment,ll),ll.forEach(t),U8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(K5.$$.fragment,Wt),J8o=i(Wt),xie=n(Wt,"P",{});var Xot=s(xie);Y8o=r(Xot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xot.forEach(t),K8o=i(Wt),Ya=n(Wt,"P",{});var xE=s(Ya);Z8o=r(xE,"The model class to instantiate is selected based on the "),kie=n(xE,"CODE",{});var zot=s(kie);e9o=r(zot,"model_type"),zot.forEach(t),o9o=r(xE,` property of the config object (either
passed as an argument or loaded from `),Sie=n(xE,"CODE",{});var Qot=s(Sie);r9o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),t9o=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rie=n(xE,"CODE",{});var Wot=s(Rie);a9o=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),n9o=r(xE,":"),xE.forEach(t),s9o=i(Wt),da=n(Wt,"UL",{});var il=s(da);xb=n(il,"LI",{});var zAe=s(xb);Bie=n(zAe,"STRONG",{});var Hot=s(Bie);l9o=r(Hot,"bert"),Hot.forEach(t),i9o=r(zAe," \u2014 "),zN=n(zAe,"A",{href:!0});var Uot=s(zN);d9o=r(Uot,"BertForNextSentencePrediction"),Uot.forEach(t),c9o=r(zAe," (BERT model)"),zAe.forEach(t),f9o=i(il),kb=n(il,"LI",{});var QAe=s(kb);Pie=n(QAe,"STRONG",{});var Jot=s(Pie);m9o=r(Jot,"fnet"),Jot.forEach(t),g9o=r(QAe," \u2014 "),QN=n(QAe,"A",{href:!0});var Yot=s(QN);h9o=r(Yot,"FNetForNextSentencePrediction"),Yot.forEach(t),p9o=r(QAe," (FNet model)"),QAe.forEach(t),_9o=i(il),Sb=n(il,"LI",{});var WAe=s(Sb);$ie=n(WAe,"STRONG",{});var Kot=s($ie);u9o=r(Kot,"megatron-bert"),Kot.forEach(t),b9o=r(WAe," \u2014 "),WN=n(WAe,"A",{href:!0});var Zot=s(WN);F9o=r(Zot,"MegatronBertForNextSentencePrediction"),Zot.forEach(t),v9o=r(WAe," (MegatronBert model)"),WAe.forEach(t),T9o=i(il),Rb=n(il,"LI",{});var HAe=s(Rb);Iie=n(HAe,"STRONG",{});var ert=s(Iie);M9o=r(ert,"mobilebert"),ert.forEach(t),E9o=r(HAe," \u2014 "),HN=n(HAe,"A",{href:!0});var ort=s(HN);C9o=r(ort,"MobileBertForNextSentencePrediction"),ort.forEach(t),w9o=r(HAe," (MobileBERT model)"),HAe.forEach(t),A9o=i(il),Bb=n(il,"LI",{});var UAe=s(Bb);qie=n(UAe,"STRONG",{});var rrt=s(qie);y9o=r(rrt,"qdqbert"),rrt.forEach(t),L9o=r(UAe," \u2014 "),UN=n(UAe,"A",{href:!0});var trt=s(UN);x9o=r(trt,"QDQBertForNextSentencePrediction"),trt.forEach(t),k9o=r(UAe," (QDQBert model)"),UAe.forEach(t),il.forEach(t),S9o=i(Wt),Pb=n(Wt,"P",{});var JAe=s(Pb);R9o=r(JAe,"The model is set in evaluation mode by default using "),Nie=n(JAe,"CODE",{});var art=s(Nie);B9o=r(art,"model.eval()"),art.forEach(t),P9o=r(JAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(JAe,"CODE",{});var nrt=s(jie);$9o=r(nrt,"model.train()"),nrt.forEach(t),JAe.forEach(t),I9o=i(Wt),Die=n(Wt,"P",{});var srt=s(Die);q9o=r(srt,"Examples:"),srt.forEach(t),N9o=i(Wt),m(Z5.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),CRe=i(c),vd=n(c,"H2",{class:!0});var BPe=s(vd);$b=n(BPe,"A",{id:!0,class:!0,href:!0});var lrt=s($b);Gie=n(lrt,"SPAN",{});var irt=s(Gie);m(ew.$$.fragment,irt),irt.forEach(t),lrt.forEach(t),j9o=i(BPe),Oie=n(BPe,"SPAN",{});var drt=s(Oie);D9o=r(drt,"AutoModelForTokenClassification"),drt.forEach(t),BPe.forEach(t),wRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(ow.$$.fragment,dl),G9o=i(dl),Td=n(dl,"P",{});var uU=s(Td);O9o=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JN=n(uU,"A",{href:!0});var crt=s(JN);V9o=r(crt,"from_pretrained()"),crt.forEach(t),X9o=r(uU," class method or the "),YN=n(uU,"A",{href:!0});var frt=s(YN);z9o=r(frt,"from_config()"),frt.forEach(t),Q9o=r(uU,` class
method.`),uU.forEach(t),W9o=i(dl),rw=n(dl,"P",{});var PPe=s(rw);H9o=r(PPe,"This class cannot be instantiated directly using "),Vie=n(PPe,"CODE",{});var mrt=s(Vie);U9o=r(mrt,"__init__()"),mrt.forEach(t),J9o=r(PPe," (throws an error)."),PPe.forEach(t),Y9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(tw.$$.fragment,cl),K9o=i(cl),Xie=n(cl,"P",{});var grt=s(Xie);Z9o=r(grt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),grt.forEach(t),exo=i(cl),Md=n(cl,"P",{});var bU=s(Md);oxo=r(bU,`Note:
Loading a model from its configuration file does `),zie=n(bU,"STRONG",{});var hrt=s(zie);rxo=r(hrt,"not"),hrt.forEach(t),txo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KN=n(bU,"A",{href:!0});var prt=s(KN);axo=r(prt,"from_pretrained()"),prt.forEach(t),nxo=r(bU," to load the model weights."),bU.forEach(t),sxo=i(cl),Qie=n(cl,"P",{});var _rt=s(Qie);lxo=r(_rt,"Examples:"),_rt.forEach(t),ixo=i(cl),m(aw.$$.fragment,cl),cl.forEach(t),dxo=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(nw.$$.fragment,Ht),cxo=i(Ht),Wie=n(Ht,"P",{});var urt=s(Wie);fxo=r(urt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),urt.forEach(t),mxo=i(Ht),Ka=n(Ht,"P",{});var kE=s(Ka);gxo=r(kE,"The model class to instantiate is selected based on the "),Hie=n(kE,"CODE",{});var brt=s(Hie);hxo=r(brt,"model_type"),brt.forEach(t),pxo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Uie=n(kE,"CODE",{});var Frt=s(Uie);_xo=r(Frt,"pretrained_model_name_or_path"),Frt.forEach(t),uxo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(kE,"CODE",{});var vrt=s(Jie);bxo=r(vrt,"pretrained_model_name_or_path"),vrt.forEach(t),Fxo=r(kE,":"),kE.forEach(t),vxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Ib=n(D,"LI",{});var YAe=s(Ib);Yie=n(YAe,"STRONG",{});var Trt=s(Yie);Txo=r(Trt,"albert"),Trt.forEach(t),Mxo=r(YAe," \u2014 "),ZN=n(YAe,"A",{href:!0});var Mrt=s(ZN);Exo=r(Mrt,"AlbertForTokenClassification"),Mrt.forEach(t),Cxo=r(YAe," (ALBERT model)"),YAe.forEach(t),wxo=i(D),qb=n(D,"LI",{});var KAe=s(qb);Kie=n(KAe,"STRONG",{});var Ert=s(Kie);Axo=r(Ert,"bert"),Ert.forEach(t),yxo=r(KAe," \u2014 "),ej=n(KAe,"A",{href:!0});var Crt=s(ej);Lxo=r(Crt,"BertForTokenClassification"),Crt.forEach(t),xxo=r(KAe," (BERT model)"),KAe.forEach(t),kxo=i(D),Nb=n(D,"LI",{});var ZAe=s(Nb);Zie=n(ZAe,"STRONG",{});var wrt=s(Zie);Sxo=r(wrt,"big_bird"),wrt.forEach(t),Rxo=r(ZAe," \u2014 "),oj=n(ZAe,"A",{href:!0});var Art=s(oj);Bxo=r(Art,"BigBirdForTokenClassification"),Art.forEach(t),Pxo=r(ZAe," (BigBird model)"),ZAe.forEach(t),$xo=i(D),jb=n(D,"LI",{});var e0e=s(jb);ede=n(e0e,"STRONG",{});var yrt=s(ede);Ixo=r(yrt,"camembert"),yrt.forEach(t),qxo=r(e0e," \u2014 "),rj=n(e0e,"A",{href:!0});var Lrt=s(rj);Nxo=r(Lrt,"CamembertForTokenClassification"),Lrt.forEach(t),jxo=r(e0e," (CamemBERT model)"),e0e.forEach(t),Dxo=i(D),Db=n(D,"LI",{});var o0e=s(Db);ode=n(o0e,"STRONG",{});var xrt=s(ode);Gxo=r(xrt,"canine"),xrt.forEach(t),Oxo=r(o0e," \u2014 "),tj=n(o0e,"A",{href:!0});var krt=s(tj);Vxo=r(krt,"CanineForTokenClassification"),krt.forEach(t),Xxo=r(o0e," (Canine model)"),o0e.forEach(t),zxo=i(D),Gb=n(D,"LI",{});var r0e=s(Gb);rde=n(r0e,"STRONG",{});var Srt=s(rde);Qxo=r(Srt,"convbert"),Srt.forEach(t),Wxo=r(r0e," \u2014 "),aj=n(r0e,"A",{href:!0});var Rrt=s(aj);Hxo=r(Rrt,"ConvBertForTokenClassification"),Rrt.forEach(t),Uxo=r(r0e," (ConvBERT model)"),r0e.forEach(t),Jxo=i(D),Ob=n(D,"LI",{});var t0e=s(Ob);tde=n(t0e,"STRONG",{});var Brt=s(tde);Yxo=r(Brt,"data2vec-text"),Brt.forEach(t),Kxo=r(t0e," \u2014 "),nj=n(t0e,"A",{href:!0});var Prt=s(nj);Zxo=r(Prt,"Data2VecTextForTokenClassification"),Prt.forEach(t),eko=r(t0e," (Data2VecText model)"),t0e.forEach(t),oko=i(D),Vb=n(D,"LI",{});var a0e=s(Vb);ade=n(a0e,"STRONG",{});var $rt=s(ade);rko=r($rt,"deberta"),$rt.forEach(t),tko=r(a0e," \u2014 "),sj=n(a0e,"A",{href:!0});var Irt=s(sj);ako=r(Irt,"DebertaForTokenClassification"),Irt.forEach(t),nko=r(a0e," (DeBERTa model)"),a0e.forEach(t),sko=i(D),Xb=n(D,"LI",{});var n0e=s(Xb);nde=n(n0e,"STRONG",{});var qrt=s(nde);lko=r(qrt,"deberta-v2"),qrt.forEach(t),iko=r(n0e," \u2014 "),lj=n(n0e,"A",{href:!0});var Nrt=s(lj);dko=r(Nrt,"DebertaV2ForTokenClassification"),Nrt.forEach(t),cko=r(n0e," (DeBERTa-v2 model)"),n0e.forEach(t),fko=i(D),zb=n(D,"LI",{});var s0e=s(zb);sde=n(s0e,"STRONG",{});var jrt=s(sde);mko=r(jrt,"distilbert"),jrt.forEach(t),gko=r(s0e," \u2014 "),ij=n(s0e,"A",{href:!0});var Drt=s(ij);hko=r(Drt,"DistilBertForTokenClassification"),Drt.forEach(t),pko=r(s0e," (DistilBERT model)"),s0e.forEach(t),_ko=i(D),Qb=n(D,"LI",{});var l0e=s(Qb);lde=n(l0e,"STRONG",{});var Grt=s(lde);uko=r(Grt,"electra"),Grt.forEach(t),bko=r(l0e," \u2014 "),dj=n(l0e,"A",{href:!0});var Ort=s(dj);Fko=r(Ort,"ElectraForTokenClassification"),Ort.forEach(t),vko=r(l0e," (ELECTRA model)"),l0e.forEach(t),Tko=i(D),Wb=n(D,"LI",{});var i0e=s(Wb);ide=n(i0e,"STRONG",{});var Vrt=s(ide);Mko=r(Vrt,"flaubert"),Vrt.forEach(t),Eko=r(i0e," \u2014 "),cj=n(i0e,"A",{href:!0});var Xrt=s(cj);Cko=r(Xrt,"FlaubertForTokenClassification"),Xrt.forEach(t),wko=r(i0e," (FlauBERT model)"),i0e.forEach(t),Ako=i(D),Hb=n(D,"LI",{});var d0e=s(Hb);dde=n(d0e,"STRONG",{});var zrt=s(dde);yko=r(zrt,"fnet"),zrt.forEach(t),Lko=r(d0e," \u2014 "),fj=n(d0e,"A",{href:!0});var Qrt=s(fj);xko=r(Qrt,"FNetForTokenClassification"),Qrt.forEach(t),kko=r(d0e," (FNet model)"),d0e.forEach(t),Sko=i(D),Ub=n(D,"LI",{});var c0e=s(Ub);cde=n(c0e,"STRONG",{});var Wrt=s(cde);Rko=r(Wrt,"funnel"),Wrt.forEach(t),Bko=r(c0e," \u2014 "),mj=n(c0e,"A",{href:!0});var Hrt=s(mj);Pko=r(Hrt,"FunnelForTokenClassification"),Hrt.forEach(t),$ko=r(c0e," (Funnel Transformer model)"),c0e.forEach(t),Iko=i(D),Jb=n(D,"LI",{});var f0e=s(Jb);fde=n(f0e,"STRONG",{});var Urt=s(fde);qko=r(Urt,"gpt2"),Urt.forEach(t),Nko=r(f0e," \u2014 "),gj=n(f0e,"A",{href:!0});var Jrt=s(gj);jko=r(Jrt,"GPT2ForTokenClassification"),Jrt.forEach(t),Dko=r(f0e," (OpenAI GPT-2 model)"),f0e.forEach(t),Gko=i(D),Yb=n(D,"LI",{});var m0e=s(Yb);mde=n(m0e,"STRONG",{});var Yrt=s(mde);Oko=r(Yrt,"ibert"),Yrt.forEach(t),Vko=r(m0e," \u2014 "),hj=n(m0e,"A",{href:!0});var Krt=s(hj);Xko=r(Krt,"IBertForTokenClassification"),Krt.forEach(t),zko=r(m0e," (I-BERT model)"),m0e.forEach(t),Qko=i(D),Kb=n(D,"LI",{});var g0e=s(Kb);gde=n(g0e,"STRONG",{});var Zrt=s(gde);Wko=r(Zrt,"layoutlm"),Zrt.forEach(t),Hko=r(g0e," \u2014 "),pj=n(g0e,"A",{href:!0});var ett=s(pj);Uko=r(ett,"LayoutLMForTokenClassification"),ett.forEach(t),Jko=r(g0e," (LayoutLM model)"),g0e.forEach(t),Yko=i(D),Zb=n(D,"LI",{});var h0e=s(Zb);hde=n(h0e,"STRONG",{});var ott=s(hde);Kko=r(ott,"layoutlmv2"),ott.forEach(t),Zko=r(h0e," \u2014 "),_j=n(h0e,"A",{href:!0});var rtt=s(_j);eSo=r(rtt,"LayoutLMv2ForTokenClassification"),rtt.forEach(t),oSo=r(h0e," (LayoutLMv2 model)"),h0e.forEach(t),rSo=i(D),e3=n(D,"LI",{});var p0e=s(e3);pde=n(p0e,"STRONG",{});var ttt=s(pde);tSo=r(ttt,"longformer"),ttt.forEach(t),aSo=r(p0e," \u2014 "),uj=n(p0e,"A",{href:!0});var att=s(uj);nSo=r(att,"LongformerForTokenClassification"),att.forEach(t),sSo=r(p0e," (Longformer model)"),p0e.forEach(t),lSo=i(D),o3=n(D,"LI",{});var _0e=s(o3);_de=n(_0e,"STRONG",{});var ntt=s(_de);iSo=r(ntt,"megatron-bert"),ntt.forEach(t),dSo=r(_0e," \u2014 "),bj=n(_0e,"A",{href:!0});var stt=s(bj);cSo=r(stt,"MegatronBertForTokenClassification"),stt.forEach(t),fSo=r(_0e," (MegatronBert model)"),_0e.forEach(t),mSo=i(D),r3=n(D,"LI",{});var u0e=s(r3);ude=n(u0e,"STRONG",{});var ltt=s(ude);gSo=r(ltt,"mobilebert"),ltt.forEach(t),hSo=r(u0e," \u2014 "),Fj=n(u0e,"A",{href:!0});var itt=s(Fj);pSo=r(itt,"MobileBertForTokenClassification"),itt.forEach(t),_So=r(u0e," (MobileBERT model)"),u0e.forEach(t),uSo=i(D),t3=n(D,"LI",{});var b0e=s(t3);bde=n(b0e,"STRONG",{});var dtt=s(bde);bSo=r(dtt,"mpnet"),dtt.forEach(t),FSo=r(b0e," \u2014 "),vj=n(b0e,"A",{href:!0});var ctt=s(vj);vSo=r(ctt,"MPNetForTokenClassification"),ctt.forEach(t),TSo=r(b0e," (MPNet model)"),b0e.forEach(t),MSo=i(D),a3=n(D,"LI",{});var F0e=s(a3);Fde=n(F0e,"STRONG",{});var ftt=s(Fde);ESo=r(ftt,"nystromformer"),ftt.forEach(t),CSo=r(F0e," \u2014 "),Tj=n(F0e,"A",{href:!0});var mtt=s(Tj);wSo=r(mtt,"NystromformerForTokenClassification"),mtt.forEach(t),ASo=r(F0e," (Nystromformer model)"),F0e.forEach(t),ySo=i(D),n3=n(D,"LI",{});var v0e=s(n3);vde=n(v0e,"STRONG",{});var gtt=s(vde);LSo=r(gtt,"qdqbert"),gtt.forEach(t),xSo=r(v0e," \u2014 "),Mj=n(v0e,"A",{href:!0});var htt=s(Mj);kSo=r(htt,"QDQBertForTokenClassification"),htt.forEach(t),SSo=r(v0e," (QDQBert model)"),v0e.forEach(t),RSo=i(D),s3=n(D,"LI",{});var T0e=s(s3);Tde=n(T0e,"STRONG",{});var ptt=s(Tde);BSo=r(ptt,"rembert"),ptt.forEach(t),PSo=r(T0e," \u2014 "),Ej=n(T0e,"A",{href:!0});var _tt=s(Ej);$So=r(_tt,"RemBertForTokenClassification"),_tt.forEach(t),ISo=r(T0e," (RemBERT model)"),T0e.forEach(t),qSo=i(D),l3=n(D,"LI",{});var M0e=s(l3);Mde=n(M0e,"STRONG",{});var utt=s(Mde);NSo=r(utt,"roberta"),utt.forEach(t),jSo=r(M0e," \u2014 "),Cj=n(M0e,"A",{href:!0});var btt=s(Cj);DSo=r(btt,"RobertaForTokenClassification"),btt.forEach(t),GSo=r(M0e," (RoBERTa model)"),M0e.forEach(t),OSo=i(D),i3=n(D,"LI",{});var E0e=s(i3);Ede=n(E0e,"STRONG",{});var Ftt=s(Ede);VSo=r(Ftt,"roformer"),Ftt.forEach(t),XSo=r(E0e," \u2014 "),wj=n(E0e,"A",{href:!0});var vtt=s(wj);zSo=r(vtt,"RoFormerForTokenClassification"),vtt.forEach(t),QSo=r(E0e," (RoFormer model)"),E0e.forEach(t),WSo=i(D),d3=n(D,"LI",{});var C0e=s(d3);Cde=n(C0e,"STRONG",{});var Ttt=s(Cde);HSo=r(Ttt,"squeezebert"),Ttt.forEach(t),USo=r(C0e," \u2014 "),Aj=n(C0e,"A",{href:!0});var Mtt=s(Aj);JSo=r(Mtt,"SqueezeBertForTokenClassification"),Mtt.forEach(t),YSo=r(C0e," (SqueezeBERT model)"),C0e.forEach(t),KSo=i(D),c3=n(D,"LI",{});var w0e=s(c3);wde=n(w0e,"STRONG",{});var Ett=s(wde);ZSo=r(Ett,"xlm"),Ett.forEach(t),eRo=r(w0e," \u2014 "),yj=n(w0e,"A",{href:!0});var Ctt=s(yj);oRo=r(Ctt,"XLMForTokenClassification"),Ctt.forEach(t),rRo=r(w0e," (XLM model)"),w0e.forEach(t),tRo=i(D),f3=n(D,"LI",{});var A0e=s(f3);Ade=n(A0e,"STRONG",{});var wtt=s(Ade);aRo=r(wtt,"xlm-roberta"),wtt.forEach(t),nRo=r(A0e," \u2014 "),Lj=n(A0e,"A",{href:!0});var Att=s(Lj);sRo=r(Att,"XLMRobertaForTokenClassification"),Att.forEach(t),lRo=r(A0e," (XLM-RoBERTa model)"),A0e.forEach(t),iRo=i(D),m3=n(D,"LI",{});var y0e=s(m3);yde=n(y0e,"STRONG",{});var ytt=s(yde);dRo=r(ytt,"xlm-roberta-xl"),ytt.forEach(t),cRo=r(y0e," \u2014 "),xj=n(y0e,"A",{href:!0});var Ltt=s(xj);fRo=r(Ltt,"XLMRobertaXLForTokenClassification"),Ltt.forEach(t),mRo=r(y0e," (XLM-RoBERTa-XL model)"),y0e.forEach(t),gRo=i(D),g3=n(D,"LI",{});var L0e=s(g3);Lde=n(L0e,"STRONG",{});var xtt=s(Lde);hRo=r(xtt,"xlnet"),xtt.forEach(t),pRo=r(L0e," \u2014 "),kj=n(L0e,"A",{href:!0});var ktt=s(kj);_Ro=r(ktt,"XLNetForTokenClassification"),ktt.forEach(t),uRo=r(L0e," (XLNet model)"),L0e.forEach(t),bRo=i(D),h3=n(D,"LI",{});var x0e=s(h3);xde=n(x0e,"STRONG",{});var Stt=s(xde);FRo=r(Stt,"yoso"),Stt.forEach(t),vRo=r(x0e," \u2014 "),Sj=n(x0e,"A",{href:!0});var Rtt=s(Sj);TRo=r(Rtt,"YosoForTokenClassification"),Rtt.forEach(t),MRo=r(x0e," (YOSO model)"),x0e.forEach(t),D.forEach(t),ERo=i(Ht),p3=n(Ht,"P",{});var k0e=s(p3);CRo=r(k0e,"The model is set in evaluation mode by default using "),kde=n(k0e,"CODE",{});var Btt=s(kde);wRo=r(Btt,"model.eval()"),Btt.forEach(t),ARo=r(k0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(k0e,"CODE",{});var Ptt=s(Sde);yRo=r(Ptt,"model.train()"),Ptt.forEach(t),k0e.forEach(t),LRo=i(Ht),Rde=n(Ht,"P",{});var $tt=s(Rde);xRo=r($tt,"Examples:"),$tt.forEach(t),kRo=i(Ht),m(sw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),ARe=i(c),Ed=n(c,"H2",{class:!0});var $Pe=s(Ed);_3=n($Pe,"A",{id:!0,class:!0,href:!0});var Itt=s(_3);Bde=n(Itt,"SPAN",{});var qtt=s(Bde);m(lw.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),SRo=i($Pe),Pde=n($Pe,"SPAN",{});var Ntt=s(Pde);RRo=r(Ntt,"AutoModelForQuestionAnswering"),Ntt.forEach(t),$Pe.forEach(t),yRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(iw.$$.fragment,fl),BRo=i(fl),Cd=n(fl,"P",{});var FU=s(Cd);PRo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Rj=n(FU,"A",{href:!0});var jtt=s(Rj);$Ro=r(jtt,"from_pretrained()"),jtt.forEach(t),IRo=r(FU," class method or the "),Bj=n(FU,"A",{href:!0});var Dtt=s(Bj);qRo=r(Dtt,"from_config()"),Dtt.forEach(t),NRo=r(FU,` class
method.`),FU.forEach(t),jRo=i(fl),dw=n(fl,"P",{});var IPe=s(dw);DRo=r(IPe,"This class cannot be instantiated directly using "),$de=n(IPe,"CODE",{});var Gtt=s($de);GRo=r(Gtt,"__init__()"),Gtt.forEach(t),ORo=r(IPe," (throws an error)."),IPe.forEach(t),VRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(cw.$$.fragment,ml),XRo=i(ml),Ide=n(ml,"P",{});var Ott=s(Ide);zRo=r(Ott,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Ott.forEach(t),QRo=i(ml),wd=n(ml,"P",{});var vU=s(wd);WRo=r(vU,`Note:
Loading a model from its configuration file does `),qde=n(vU,"STRONG",{});var Vtt=s(qde);HRo=r(Vtt,"not"),Vtt.forEach(t),URo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pj=n(vU,"A",{href:!0});var Xtt=s(Pj);JRo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),YRo=r(vU," to load the model weights."),vU.forEach(t),KRo=i(ml),Nde=n(ml,"P",{});var ztt=s(Nde);ZRo=r(ztt,"Examples:"),ztt.forEach(t),eBo=i(ml),m(fw.$$.fragment,ml),ml.forEach(t),oBo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(mw.$$.fragment,Ut),rBo=i(Ut),jde=n(Ut,"P",{});var Qtt=s(jde);tBo=r(Qtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Qtt.forEach(t),aBo=i(Ut),Za=n(Ut,"P",{});var SE=s(Za);nBo=r(SE,"The model class to instantiate is selected based on the "),Dde=n(SE,"CODE",{});var Wtt=s(Dde);sBo=r(Wtt,"model_type"),Wtt.forEach(t),lBo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Gde=n(SE,"CODE",{});var Htt=s(Gde);iBo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),dBo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(SE,"CODE",{});var Utt=s(Ode);cBo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),fBo=r(SE,":"),SE.forEach(t),mBo=i(Ut),R=n(Ut,"UL",{});var P=s(R);u3=n(P,"LI",{});var S0e=s(u3);Vde=n(S0e,"STRONG",{});var Jtt=s(Vde);gBo=r(Jtt,"albert"),Jtt.forEach(t),hBo=r(S0e," \u2014 "),$j=n(S0e,"A",{href:!0});var Ytt=s($j);pBo=r(Ytt,"AlbertForQuestionAnswering"),Ytt.forEach(t),_Bo=r(S0e," (ALBERT model)"),S0e.forEach(t),uBo=i(P),b3=n(P,"LI",{});var R0e=s(b3);Xde=n(R0e,"STRONG",{});var Ktt=s(Xde);bBo=r(Ktt,"bart"),Ktt.forEach(t),FBo=r(R0e," \u2014 "),Ij=n(R0e,"A",{href:!0});var Ztt=s(Ij);vBo=r(Ztt,"BartForQuestionAnswering"),Ztt.forEach(t),TBo=r(R0e," (BART model)"),R0e.forEach(t),MBo=i(P),F3=n(P,"LI",{});var B0e=s(F3);zde=n(B0e,"STRONG",{});var eat=s(zde);EBo=r(eat,"bert"),eat.forEach(t),CBo=r(B0e," \u2014 "),qj=n(B0e,"A",{href:!0});var oat=s(qj);wBo=r(oat,"BertForQuestionAnswering"),oat.forEach(t),ABo=r(B0e," (BERT model)"),B0e.forEach(t),yBo=i(P),v3=n(P,"LI",{});var P0e=s(v3);Qde=n(P0e,"STRONG",{});var rat=s(Qde);LBo=r(rat,"big_bird"),rat.forEach(t),xBo=r(P0e," \u2014 "),Nj=n(P0e,"A",{href:!0});var tat=s(Nj);kBo=r(tat,"BigBirdForQuestionAnswering"),tat.forEach(t),SBo=r(P0e," (BigBird model)"),P0e.forEach(t),RBo=i(P),T3=n(P,"LI",{});var $0e=s(T3);Wde=n($0e,"STRONG",{});var aat=s(Wde);BBo=r(aat,"bigbird_pegasus"),aat.forEach(t),PBo=r($0e," \u2014 "),jj=n($0e,"A",{href:!0});var nat=s(jj);$Bo=r(nat,"BigBirdPegasusForQuestionAnswering"),nat.forEach(t),IBo=r($0e," (BigBirdPegasus model)"),$0e.forEach(t),qBo=i(P),M3=n(P,"LI",{});var I0e=s(M3);Hde=n(I0e,"STRONG",{});var sat=s(Hde);NBo=r(sat,"camembert"),sat.forEach(t),jBo=r(I0e," \u2014 "),Dj=n(I0e,"A",{href:!0});var lat=s(Dj);DBo=r(lat,"CamembertForQuestionAnswering"),lat.forEach(t),GBo=r(I0e," (CamemBERT model)"),I0e.forEach(t),OBo=i(P),E3=n(P,"LI",{});var q0e=s(E3);Ude=n(q0e,"STRONG",{});var iat=s(Ude);VBo=r(iat,"canine"),iat.forEach(t),XBo=r(q0e," \u2014 "),Gj=n(q0e,"A",{href:!0});var dat=s(Gj);zBo=r(dat,"CanineForQuestionAnswering"),dat.forEach(t),QBo=r(q0e," (Canine model)"),q0e.forEach(t),WBo=i(P),C3=n(P,"LI",{});var N0e=s(C3);Jde=n(N0e,"STRONG",{});var cat=s(Jde);HBo=r(cat,"convbert"),cat.forEach(t),UBo=r(N0e," \u2014 "),Oj=n(N0e,"A",{href:!0});var fat=s(Oj);JBo=r(fat,"ConvBertForQuestionAnswering"),fat.forEach(t),YBo=r(N0e," (ConvBERT model)"),N0e.forEach(t),KBo=i(P),w3=n(P,"LI",{});var j0e=s(w3);Yde=n(j0e,"STRONG",{});var mat=s(Yde);ZBo=r(mat,"data2vec-text"),mat.forEach(t),ePo=r(j0e," \u2014 "),Vj=n(j0e,"A",{href:!0});var gat=s(Vj);oPo=r(gat,"Data2VecTextForQuestionAnswering"),gat.forEach(t),rPo=r(j0e," (Data2VecText model)"),j0e.forEach(t),tPo=i(P),A3=n(P,"LI",{});var D0e=s(A3);Kde=n(D0e,"STRONG",{});var hat=s(Kde);aPo=r(hat,"deberta"),hat.forEach(t),nPo=r(D0e," \u2014 "),Xj=n(D0e,"A",{href:!0});var pat=s(Xj);sPo=r(pat,"DebertaForQuestionAnswering"),pat.forEach(t),lPo=r(D0e," (DeBERTa model)"),D0e.forEach(t),iPo=i(P),y3=n(P,"LI",{});var G0e=s(y3);Zde=n(G0e,"STRONG",{});var _at=s(Zde);dPo=r(_at,"deberta-v2"),_at.forEach(t),cPo=r(G0e," \u2014 "),zj=n(G0e,"A",{href:!0});var uat=s(zj);fPo=r(uat,"DebertaV2ForQuestionAnswering"),uat.forEach(t),mPo=r(G0e," (DeBERTa-v2 model)"),G0e.forEach(t),gPo=i(P),L3=n(P,"LI",{});var O0e=s(L3);ece=n(O0e,"STRONG",{});var bat=s(ece);hPo=r(bat,"distilbert"),bat.forEach(t),pPo=r(O0e," \u2014 "),Qj=n(O0e,"A",{href:!0});var Fat=s(Qj);_Po=r(Fat,"DistilBertForQuestionAnswering"),Fat.forEach(t),uPo=r(O0e," (DistilBERT model)"),O0e.forEach(t),bPo=i(P),x3=n(P,"LI",{});var V0e=s(x3);oce=n(V0e,"STRONG",{});var vat=s(oce);FPo=r(vat,"electra"),vat.forEach(t),vPo=r(V0e," \u2014 "),Wj=n(V0e,"A",{href:!0});var Tat=s(Wj);TPo=r(Tat,"ElectraForQuestionAnswering"),Tat.forEach(t),MPo=r(V0e," (ELECTRA model)"),V0e.forEach(t),EPo=i(P),k3=n(P,"LI",{});var X0e=s(k3);rce=n(X0e,"STRONG",{});var Mat=s(rce);CPo=r(Mat,"flaubert"),Mat.forEach(t),wPo=r(X0e," \u2014 "),Hj=n(X0e,"A",{href:!0});var Eat=s(Hj);APo=r(Eat,"FlaubertForQuestionAnsweringSimple"),Eat.forEach(t),yPo=r(X0e," (FlauBERT model)"),X0e.forEach(t),LPo=i(P),S3=n(P,"LI",{});var z0e=s(S3);tce=n(z0e,"STRONG",{});var Cat=s(tce);xPo=r(Cat,"fnet"),Cat.forEach(t),kPo=r(z0e," \u2014 "),Uj=n(z0e,"A",{href:!0});var wat=s(Uj);SPo=r(wat,"FNetForQuestionAnswering"),wat.forEach(t),RPo=r(z0e," (FNet model)"),z0e.forEach(t),BPo=i(P),R3=n(P,"LI",{});var Q0e=s(R3);ace=n(Q0e,"STRONG",{});var Aat=s(ace);PPo=r(Aat,"funnel"),Aat.forEach(t),$Po=r(Q0e," \u2014 "),Jj=n(Q0e,"A",{href:!0});var yat=s(Jj);IPo=r(yat,"FunnelForQuestionAnswering"),yat.forEach(t),qPo=r(Q0e," (Funnel Transformer model)"),Q0e.forEach(t),NPo=i(P),B3=n(P,"LI",{});var W0e=s(B3);nce=n(W0e,"STRONG",{});var Lat=s(nce);jPo=r(Lat,"gptj"),Lat.forEach(t),DPo=r(W0e," \u2014 "),Yj=n(W0e,"A",{href:!0});var xat=s(Yj);GPo=r(xat,"GPTJForQuestionAnswering"),xat.forEach(t),OPo=r(W0e," (GPT-J model)"),W0e.forEach(t),VPo=i(P),P3=n(P,"LI",{});var H0e=s(P3);sce=n(H0e,"STRONG",{});var kat=s(sce);XPo=r(kat,"ibert"),kat.forEach(t),zPo=r(H0e," \u2014 "),Kj=n(H0e,"A",{href:!0});var Sat=s(Kj);QPo=r(Sat,"IBertForQuestionAnswering"),Sat.forEach(t),WPo=r(H0e," (I-BERT model)"),H0e.forEach(t),HPo=i(P),$3=n(P,"LI",{});var U0e=s($3);lce=n(U0e,"STRONG",{});var Rat=s(lce);UPo=r(Rat,"layoutlmv2"),Rat.forEach(t),JPo=r(U0e," \u2014 "),Zj=n(U0e,"A",{href:!0});var Bat=s(Zj);YPo=r(Bat,"LayoutLMv2ForQuestionAnswering"),Bat.forEach(t),KPo=r(U0e," (LayoutLMv2 model)"),U0e.forEach(t),ZPo=i(P),I3=n(P,"LI",{});var J0e=s(I3);ice=n(J0e,"STRONG",{});var Pat=s(ice);e$o=r(Pat,"led"),Pat.forEach(t),o$o=r(J0e," \u2014 "),eD=n(J0e,"A",{href:!0});var $at=s(eD);r$o=r($at,"LEDForQuestionAnswering"),$at.forEach(t),t$o=r(J0e," (LED model)"),J0e.forEach(t),a$o=i(P),q3=n(P,"LI",{});var Y0e=s(q3);dce=n(Y0e,"STRONG",{});var Iat=s(dce);n$o=r(Iat,"longformer"),Iat.forEach(t),s$o=r(Y0e," \u2014 "),oD=n(Y0e,"A",{href:!0});var qat=s(oD);l$o=r(qat,"LongformerForQuestionAnswering"),qat.forEach(t),i$o=r(Y0e," (Longformer model)"),Y0e.forEach(t),d$o=i(P),N3=n(P,"LI",{});var K0e=s(N3);cce=n(K0e,"STRONG",{});var Nat=s(cce);c$o=r(Nat,"lxmert"),Nat.forEach(t),f$o=r(K0e," \u2014 "),rD=n(K0e,"A",{href:!0});var jat=s(rD);m$o=r(jat,"LxmertForQuestionAnswering"),jat.forEach(t),g$o=r(K0e," (LXMERT model)"),K0e.forEach(t),h$o=i(P),j3=n(P,"LI",{});var Z0e=s(j3);fce=n(Z0e,"STRONG",{});var Dat=s(fce);p$o=r(Dat,"mbart"),Dat.forEach(t),_$o=r(Z0e," \u2014 "),tD=n(Z0e,"A",{href:!0});var Gat=s(tD);u$o=r(Gat,"MBartForQuestionAnswering"),Gat.forEach(t),b$o=r(Z0e," (mBART model)"),Z0e.forEach(t),F$o=i(P),D3=n(P,"LI",{});var eye=s(D3);mce=n(eye,"STRONG",{});var Oat=s(mce);v$o=r(Oat,"megatron-bert"),Oat.forEach(t),T$o=r(eye," \u2014 "),aD=n(eye,"A",{href:!0});var Vat=s(aD);M$o=r(Vat,"MegatronBertForQuestionAnswering"),Vat.forEach(t),E$o=r(eye," (MegatronBert model)"),eye.forEach(t),C$o=i(P),G3=n(P,"LI",{});var oye=s(G3);gce=n(oye,"STRONG",{});var Xat=s(gce);w$o=r(Xat,"mobilebert"),Xat.forEach(t),A$o=r(oye," \u2014 "),nD=n(oye,"A",{href:!0});var zat=s(nD);y$o=r(zat,"MobileBertForQuestionAnswering"),zat.forEach(t),L$o=r(oye," (MobileBERT model)"),oye.forEach(t),x$o=i(P),O3=n(P,"LI",{});var rye=s(O3);hce=n(rye,"STRONG",{});var Qat=s(hce);k$o=r(Qat,"mpnet"),Qat.forEach(t),S$o=r(rye," \u2014 "),sD=n(rye,"A",{href:!0});var Wat=s(sD);R$o=r(Wat,"MPNetForQuestionAnswering"),Wat.forEach(t),B$o=r(rye," (MPNet model)"),rye.forEach(t),P$o=i(P),V3=n(P,"LI",{});var tye=s(V3);pce=n(tye,"STRONG",{});var Hat=s(pce);$$o=r(Hat,"nystromformer"),Hat.forEach(t),I$o=r(tye," \u2014 "),lD=n(tye,"A",{href:!0});var Uat=s(lD);q$o=r(Uat,"NystromformerForQuestionAnswering"),Uat.forEach(t),N$o=r(tye," (Nystromformer model)"),tye.forEach(t),j$o=i(P),X3=n(P,"LI",{});var aye=s(X3);_ce=n(aye,"STRONG",{});var Jat=s(_ce);D$o=r(Jat,"qdqbert"),Jat.forEach(t),G$o=r(aye," \u2014 "),iD=n(aye,"A",{href:!0});var Yat=s(iD);O$o=r(Yat,"QDQBertForQuestionAnswering"),Yat.forEach(t),V$o=r(aye," (QDQBert model)"),aye.forEach(t),X$o=i(P),z3=n(P,"LI",{});var nye=s(z3);uce=n(nye,"STRONG",{});var Kat=s(uce);z$o=r(Kat,"reformer"),Kat.forEach(t),Q$o=r(nye," \u2014 "),dD=n(nye,"A",{href:!0});var Zat=s(dD);W$o=r(Zat,"ReformerForQuestionAnswering"),Zat.forEach(t),H$o=r(nye," (Reformer model)"),nye.forEach(t),U$o=i(P),Q3=n(P,"LI",{});var sye=s(Q3);bce=n(sye,"STRONG",{});var ent=s(bce);J$o=r(ent,"rembert"),ent.forEach(t),Y$o=r(sye," \u2014 "),cD=n(sye,"A",{href:!0});var ont=s(cD);K$o=r(ont,"RemBertForQuestionAnswering"),ont.forEach(t),Z$o=r(sye," (RemBERT model)"),sye.forEach(t),eIo=i(P),W3=n(P,"LI",{});var lye=s(W3);Fce=n(lye,"STRONG",{});var rnt=s(Fce);oIo=r(rnt,"roberta"),rnt.forEach(t),rIo=r(lye," \u2014 "),fD=n(lye,"A",{href:!0});var tnt=s(fD);tIo=r(tnt,"RobertaForQuestionAnswering"),tnt.forEach(t),aIo=r(lye," (RoBERTa model)"),lye.forEach(t),nIo=i(P),H3=n(P,"LI",{});var iye=s(H3);vce=n(iye,"STRONG",{});var ant=s(vce);sIo=r(ant,"roformer"),ant.forEach(t),lIo=r(iye," \u2014 "),mD=n(iye,"A",{href:!0});var nnt=s(mD);iIo=r(nnt,"RoFormerForQuestionAnswering"),nnt.forEach(t),dIo=r(iye," (RoFormer model)"),iye.forEach(t),cIo=i(P),U3=n(P,"LI",{});var dye=s(U3);Tce=n(dye,"STRONG",{});var snt=s(Tce);fIo=r(snt,"splinter"),snt.forEach(t),mIo=r(dye," \u2014 "),gD=n(dye,"A",{href:!0});var lnt=s(gD);gIo=r(lnt,"SplinterForQuestionAnswering"),lnt.forEach(t),hIo=r(dye," (Splinter model)"),dye.forEach(t),pIo=i(P),J3=n(P,"LI",{});var cye=s(J3);Mce=n(cye,"STRONG",{});var int=s(Mce);_Io=r(int,"squeezebert"),int.forEach(t),uIo=r(cye," \u2014 "),hD=n(cye,"A",{href:!0});var dnt=s(hD);bIo=r(dnt,"SqueezeBertForQuestionAnswering"),dnt.forEach(t),FIo=r(cye," (SqueezeBERT model)"),cye.forEach(t),vIo=i(P),Y3=n(P,"LI",{});var fye=s(Y3);Ece=n(fye,"STRONG",{});var cnt=s(Ece);TIo=r(cnt,"xlm"),cnt.forEach(t),MIo=r(fye," \u2014 "),pD=n(fye,"A",{href:!0});var fnt=s(pD);EIo=r(fnt,"XLMForQuestionAnsweringSimple"),fnt.forEach(t),CIo=r(fye," (XLM model)"),fye.forEach(t),wIo=i(P),K3=n(P,"LI",{});var mye=s(K3);Cce=n(mye,"STRONG",{});var mnt=s(Cce);AIo=r(mnt,"xlm-roberta"),mnt.forEach(t),yIo=r(mye," \u2014 "),_D=n(mye,"A",{href:!0});var gnt=s(_D);LIo=r(gnt,"XLMRobertaForQuestionAnswering"),gnt.forEach(t),xIo=r(mye," (XLM-RoBERTa model)"),mye.forEach(t),kIo=i(P),Z3=n(P,"LI",{});var gye=s(Z3);wce=n(gye,"STRONG",{});var hnt=s(wce);SIo=r(hnt,"xlm-roberta-xl"),hnt.forEach(t),RIo=r(gye," \u2014 "),uD=n(gye,"A",{href:!0});var pnt=s(uD);BIo=r(pnt,"XLMRobertaXLForQuestionAnswering"),pnt.forEach(t),PIo=r(gye," (XLM-RoBERTa-XL model)"),gye.forEach(t),$Io=i(P),e2=n(P,"LI",{});var hye=s(e2);Ace=n(hye,"STRONG",{});var _nt=s(Ace);IIo=r(_nt,"xlnet"),_nt.forEach(t),qIo=r(hye," \u2014 "),bD=n(hye,"A",{href:!0});var unt=s(bD);NIo=r(unt,"XLNetForQuestionAnsweringSimple"),unt.forEach(t),jIo=r(hye," (XLNet model)"),hye.forEach(t),DIo=i(P),o2=n(P,"LI",{});var pye=s(o2);yce=n(pye,"STRONG",{});var bnt=s(yce);GIo=r(bnt,"yoso"),bnt.forEach(t),OIo=r(pye," \u2014 "),FD=n(pye,"A",{href:!0});var Fnt=s(FD);VIo=r(Fnt,"YosoForQuestionAnswering"),Fnt.forEach(t),XIo=r(pye," (YOSO model)"),pye.forEach(t),P.forEach(t),zIo=i(Ut),r2=n(Ut,"P",{});var _ye=s(r2);QIo=r(_ye,"The model is set in evaluation mode by default using "),Lce=n(_ye,"CODE",{});var vnt=s(Lce);WIo=r(vnt,"model.eval()"),vnt.forEach(t),HIo=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xce=n(_ye,"CODE",{});var Tnt=s(xce);UIo=r(Tnt,"model.train()"),Tnt.forEach(t),_ye.forEach(t),JIo=i(Ut),kce=n(Ut,"P",{});var Mnt=s(kce);YIo=r(Mnt,"Examples:"),Mnt.forEach(t),KIo=i(Ut),m(gw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),LRe=i(c),Ad=n(c,"H2",{class:!0});var qPe=s(Ad);t2=n(qPe,"A",{id:!0,class:!0,href:!0});var Ent=s(t2);Sce=n(Ent,"SPAN",{});var Cnt=s(Sce);m(hw.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),ZIo=i(qPe),Rce=n(qPe,"SPAN",{});var wnt=s(Rce);eqo=r(wnt,"AutoModelForTableQuestionAnswering"),wnt.forEach(t),qPe.forEach(t),xRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(pw.$$.fragment,gl),oqo=i(gl),yd=n(gl,"P",{});var TU=s(yd);rqo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),vD=n(TU,"A",{href:!0});var Ant=s(vD);tqo=r(Ant,"from_pretrained()"),Ant.forEach(t),aqo=r(TU," class method or the "),TD=n(TU,"A",{href:!0});var ynt=s(TD);nqo=r(ynt,"from_config()"),ynt.forEach(t),sqo=r(TU,` class
method.`),TU.forEach(t),lqo=i(gl),_w=n(gl,"P",{});var NPe=s(_w);iqo=r(NPe,"This class cannot be instantiated directly using "),Bce=n(NPe,"CODE",{});var Lnt=s(Bce);dqo=r(Lnt,"__init__()"),Lnt.forEach(t),cqo=r(NPe," (throws an error)."),NPe.forEach(t),fqo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(uw.$$.fragment,hl),mqo=i(hl),Pce=n(hl,"P",{});var xnt=s(Pce);gqo=r(xnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xnt.forEach(t),hqo=i(hl),Ld=n(hl,"P",{});var MU=s(Ld);pqo=r(MU,`Note:
Loading a model from its configuration file does `),$ce=n(MU,"STRONG",{});var knt=s($ce);_qo=r(knt,"not"),knt.forEach(t),uqo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(MU,"A",{href:!0});var Snt=s(MD);bqo=r(Snt,"from_pretrained()"),Snt.forEach(t),Fqo=r(MU," to load the model weights."),MU.forEach(t),vqo=i(hl),Ice=n(hl,"P",{});var Rnt=s(Ice);Tqo=r(Rnt,"Examples:"),Rnt.forEach(t),Mqo=i(hl),m(bw.$$.fragment,hl),hl.forEach(t),Eqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(Fw.$$.fragment,Jt),Cqo=i(Jt),qce=n(Jt,"P",{});var Bnt=s(qce);wqo=r(Bnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Bnt.forEach(t),Aqo=i(Jt),en=n(Jt,"P",{});var RE=s(en);yqo=r(RE,"The model class to instantiate is selected based on the "),Nce=n(RE,"CODE",{});var Pnt=s(Nce);Lqo=r(Pnt,"model_type"),Pnt.forEach(t),xqo=r(RE,` property of the config object (either
passed as an argument or loaded from `),jce=n(RE,"CODE",{});var $nt=s(jce);kqo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),Sqo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dce=n(RE,"CODE",{});var Int=s(Dce);Rqo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),Bqo=r(RE,":"),RE.forEach(t),Pqo=i(Jt),Gce=n(Jt,"UL",{});var qnt=s(Gce);a2=n(qnt,"LI",{});var uye=s(a2);Oce=n(uye,"STRONG",{});var Nnt=s(Oce);$qo=r(Nnt,"tapas"),Nnt.forEach(t),Iqo=r(uye," \u2014 "),ED=n(uye,"A",{href:!0});var jnt=s(ED);qqo=r(jnt,"TapasForQuestionAnswering"),jnt.forEach(t),Nqo=r(uye," (TAPAS model)"),uye.forEach(t),qnt.forEach(t),jqo=i(Jt),n2=n(Jt,"P",{});var bye=s(n2);Dqo=r(bye,"The model is set in evaluation mode by default using "),Vce=n(bye,"CODE",{});var Dnt=s(Vce);Gqo=r(Dnt,"model.eval()"),Dnt.forEach(t),Oqo=r(bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xce=n(bye,"CODE",{});var Gnt=s(Xce);Vqo=r(Gnt,"model.train()"),Gnt.forEach(t),bye.forEach(t),Xqo=i(Jt),zce=n(Jt,"P",{});var Ont=s(zce);zqo=r(Ont,"Examples:"),Ont.forEach(t),Qqo=i(Jt),m(vw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),kRe=i(c),xd=n(c,"H2",{class:!0});var jPe=s(xd);s2=n(jPe,"A",{id:!0,class:!0,href:!0});var Vnt=s(s2);Qce=n(Vnt,"SPAN",{});var Xnt=s(Qce);m(Tw.$$.fragment,Xnt),Xnt.forEach(t),Vnt.forEach(t),Wqo=i(jPe),Wce=n(jPe,"SPAN",{});var znt=s(Wce);Hqo=r(znt,"AutoModelForImageClassification"),znt.forEach(t),jPe.forEach(t),SRe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(Mw.$$.fragment,pl),Uqo=i(pl),kd=n(pl,"P",{});var EU=s(kd);Jqo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CD=n(EU,"A",{href:!0});var Qnt=s(CD);Yqo=r(Qnt,"from_pretrained()"),Qnt.forEach(t),Kqo=r(EU," class method or the "),wD=n(EU,"A",{href:!0});var Wnt=s(wD);Zqo=r(Wnt,"from_config()"),Wnt.forEach(t),eNo=r(EU,` class
method.`),EU.forEach(t),oNo=i(pl),Ew=n(pl,"P",{});var DPe=s(Ew);rNo=r(DPe,"This class cannot be instantiated directly using "),Hce=n(DPe,"CODE",{});var Hnt=s(Hce);tNo=r(Hnt,"__init__()"),Hnt.forEach(t),aNo=r(DPe," (throws an error)."),DPe.forEach(t),nNo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Cw.$$.fragment,_l),sNo=i(_l),Uce=n(_l,"P",{});var Unt=s(Uce);lNo=r(Unt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Unt.forEach(t),iNo=i(_l),Sd=n(_l,"P",{});var CU=s(Sd);dNo=r(CU,`Note:
Loading a model from its configuration file does `),Jce=n(CU,"STRONG",{});var Jnt=s(Jce);cNo=r(Jnt,"not"),Jnt.forEach(t),fNo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(CU,"A",{href:!0});var Ynt=s(AD);mNo=r(Ynt,"from_pretrained()"),Ynt.forEach(t),gNo=r(CU," to load the model weights."),CU.forEach(t),hNo=i(_l),Yce=n(_l,"P",{});var Knt=s(Yce);pNo=r(Knt,"Examples:"),Knt.forEach(t),_No=i(_l),m(ww.$$.fragment,_l),_l.forEach(t),uNo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Aw.$$.fragment,Yt),bNo=i(Yt),Kce=n(Yt,"P",{});var Znt=s(Kce);FNo=r(Znt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Znt.forEach(t),vNo=i(Yt),on=n(Yt,"P",{});var BE=s(on);TNo=r(BE,"The model class to instantiate is selected based on the "),Zce=n(BE,"CODE",{});var est=s(Zce);MNo=r(est,"model_type"),est.forEach(t),ENo=r(BE,` property of the config object (either
passed as an argument or loaded from `),efe=n(BE,"CODE",{});var ost=s(efe);CNo=r(ost,"pretrained_model_name_or_path"),ost.forEach(t),wNo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(BE,"CODE",{});var rst=s(ofe);ANo=r(rst,"pretrained_model_name_or_path"),rst.forEach(t),yNo=r(BE,":"),BE.forEach(t),LNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);l2=n(Te,"LI",{});var Fye=s(l2);rfe=n(Fye,"STRONG",{});var tst=s(rfe);xNo=r(tst,"beit"),tst.forEach(t),kNo=r(Fye," \u2014 "),yD=n(Fye,"A",{href:!0});var ast=s(yD);SNo=r(ast,"BeitForImageClassification"),ast.forEach(t),RNo=r(Fye," (BEiT model)"),Fye.forEach(t),BNo=i(Te),i2=n(Te,"LI",{});var vye=s(i2);tfe=n(vye,"STRONG",{});var nst=s(tfe);PNo=r(nst,"convnext"),nst.forEach(t),$No=r(vye," \u2014 "),LD=n(vye,"A",{href:!0});var sst=s(LD);INo=r(sst,"ConvNextForImageClassification"),sst.forEach(t),qNo=r(vye," (ConvNext model)"),vye.forEach(t),NNo=i(Te),Ds=n(Te,"LI",{});var i9=s(Ds);afe=n(i9,"STRONG",{});var lst=s(afe);jNo=r(lst,"deit"),lst.forEach(t),DNo=r(i9," \u2014 "),xD=n(i9,"A",{href:!0});var ist=s(xD);GNo=r(ist,"DeiTForImageClassification"),ist.forEach(t),ONo=r(i9," or "),kD=n(i9,"A",{href:!0});var dst=s(kD);VNo=r(dst,"DeiTForImageClassificationWithTeacher"),dst.forEach(t),XNo=r(i9," (DeiT model)"),i9.forEach(t),zNo=i(Te),d2=n(Te,"LI",{});var Tye=s(d2);nfe=n(Tye,"STRONG",{});var cst=s(nfe);QNo=r(cst,"imagegpt"),cst.forEach(t),WNo=r(Tye," \u2014 "),SD=n(Tye,"A",{href:!0});var fst=s(SD);HNo=r(fst,"ImageGPTForImageClassification"),fst.forEach(t),UNo=r(Tye," (ImageGPT model)"),Tye.forEach(t),JNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);sfe=n($f,"STRONG",{});var mst=s(sfe);YNo=r(mst,"perceiver"),mst.forEach(t),KNo=r($f," \u2014 "),RD=n($f,"A",{href:!0});var gst=s(RD);ZNo=r(gst,"PerceiverForImageClassificationLearned"),gst.forEach(t),ejo=r($f," or "),BD=n($f,"A",{href:!0});var hst=s(BD);ojo=r(hst,"PerceiverForImageClassificationFourier"),hst.forEach(t),rjo=r($f," or "),PD=n($f,"A",{href:!0});var pst=s(PD);tjo=r(pst,"PerceiverForImageClassificationConvProcessing"),pst.forEach(t),ajo=r($f," (Perceiver model)"),$f.forEach(t),njo=i(Te),c2=n(Te,"LI",{});var Mye=s(c2);lfe=n(Mye,"STRONG",{});var _st=s(lfe);sjo=r(_st,"poolformer"),_st.forEach(t),ljo=r(Mye," \u2014 "),$D=n(Mye,"A",{href:!0});var ust=s($D);ijo=r(ust,"PoolFormerForImageClassification"),ust.forEach(t),djo=r(Mye," (PoolFormer model)"),Mye.forEach(t),cjo=i(Te),f2=n(Te,"LI",{});var Eye=s(f2);ife=n(Eye,"STRONG",{});var bst=s(ife);fjo=r(bst,"resnet"),bst.forEach(t),mjo=r(Eye," \u2014 "),ID=n(Eye,"A",{href:!0});var Fst=s(ID);gjo=r(Fst,"ResNetForImageClassification"),Fst.forEach(t),hjo=r(Eye," (ResNet model)"),Eye.forEach(t),pjo=i(Te),m2=n(Te,"LI",{});var Cye=s(m2);dfe=n(Cye,"STRONG",{});var vst=s(dfe);_jo=r(vst,"segformer"),vst.forEach(t),ujo=r(Cye," \u2014 "),qD=n(Cye,"A",{href:!0});var Tst=s(qD);bjo=r(Tst,"SegformerForImageClassification"),Tst.forEach(t),Fjo=r(Cye," (SegFormer model)"),Cye.forEach(t),vjo=i(Te),g2=n(Te,"LI",{});var wye=s(g2);cfe=n(wye,"STRONG",{});var Mst=s(cfe);Tjo=r(Mst,"swin"),Mst.forEach(t),Mjo=r(wye," \u2014 "),ND=n(wye,"A",{href:!0});var Est=s(ND);Ejo=r(Est,"SwinForImageClassification"),Est.forEach(t),Cjo=r(wye," (Swin model)"),wye.forEach(t),wjo=i(Te),h2=n(Te,"LI",{});var Aye=s(h2);ffe=n(Aye,"STRONG",{});var Cst=s(ffe);Ajo=r(Cst,"van"),Cst.forEach(t),yjo=r(Aye," \u2014 "),jD=n(Aye,"A",{href:!0});var wst=s(jD);Ljo=r(wst,"VanForImageClassification"),wst.forEach(t),xjo=r(Aye," (VAN model)"),Aye.forEach(t),kjo=i(Te),p2=n(Te,"LI",{});var yye=s(p2);mfe=n(yye,"STRONG",{});var Ast=s(mfe);Sjo=r(Ast,"vit"),Ast.forEach(t),Rjo=r(yye," \u2014 "),DD=n(yye,"A",{href:!0});var yst=s(DD);Bjo=r(yst,"ViTForImageClassification"),yst.forEach(t),Pjo=r(yye," (ViT model)"),yye.forEach(t),Te.forEach(t),$jo=i(Yt),_2=n(Yt,"P",{});var Lye=s(_2);Ijo=r(Lye,"The model is set in evaluation mode by default using "),gfe=n(Lye,"CODE",{});var Lst=s(gfe);qjo=r(Lst,"model.eval()"),Lst.forEach(t),Njo=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hfe=n(Lye,"CODE",{});var xst=s(hfe);jjo=r(xst,"model.train()"),xst.forEach(t),Lye.forEach(t),Djo=i(Yt),pfe=n(Yt,"P",{});var kst=s(pfe);Gjo=r(kst,"Examples:"),kst.forEach(t),Ojo=i(Yt),m(yw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),RRe=i(c),Rd=n(c,"H2",{class:!0});var GPe=s(Rd);u2=n(GPe,"A",{id:!0,class:!0,href:!0});var Sst=s(u2);_fe=n(Sst,"SPAN",{});var Rst=s(_fe);m(Lw.$$.fragment,Rst),Rst.forEach(t),Sst.forEach(t),Vjo=i(GPe),ufe=n(GPe,"SPAN",{});var Bst=s(ufe);Xjo=r(Bst,"AutoModelForVision2Seq"),Bst.forEach(t),GPe.forEach(t),BRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(xw.$$.fragment,ul),zjo=i(ul),Bd=n(ul,"P",{});var wU=s(Bd);Qjo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GD=n(wU,"A",{href:!0});var Pst=s(GD);Wjo=r(Pst,"from_pretrained()"),Pst.forEach(t),Hjo=r(wU," class method or the "),OD=n(wU,"A",{href:!0});var $st=s(OD);Ujo=r($st,"from_config()"),$st.forEach(t),Jjo=r(wU,` class
method.`),wU.forEach(t),Yjo=i(ul),kw=n(ul,"P",{});var OPe=s(kw);Kjo=r(OPe,"This class cannot be instantiated directly using "),bfe=n(OPe,"CODE",{});var Ist=s(bfe);Zjo=r(Ist,"__init__()"),Ist.forEach(t),eDo=r(OPe," (throws an error)."),OPe.forEach(t),oDo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(Sw.$$.fragment,bl),rDo=i(bl),Ffe=n(bl,"P",{});var qst=s(Ffe);tDo=r(qst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qst.forEach(t),aDo=i(bl),Pd=n(bl,"P",{});var AU=s(Pd);nDo=r(AU,`Note:
Loading a model from its configuration file does `),vfe=n(AU,"STRONG",{});var Nst=s(vfe);sDo=r(Nst,"not"),Nst.forEach(t),lDo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(AU,"A",{href:!0});var jst=s(VD);iDo=r(jst,"from_pretrained()"),jst.forEach(t),dDo=r(AU," to load the model weights."),AU.forEach(t),cDo=i(bl),Tfe=n(bl,"P",{});var Dst=s(Tfe);fDo=r(Dst,"Examples:"),Dst.forEach(t),mDo=i(bl),m(Rw.$$.fragment,bl),bl.forEach(t),gDo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Bw.$$.fragment,Kt),hDo=i(Kt),Mfe=n(Kt,"P",{});var Gst=s(Mfe);pDo=r(Gst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Gst.forEach(t),_Do=i(Kt),rn=n(Kt,"P",{});var PE=s(rn);uDo=r(PE,"The model class to instantiate is selected based on the "),Efe=n(PE,"CODE",{});var Ost=s(Efe);bDo=r(Ost,"model_type"),Ost.forEach(t),FDo=r(PE,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(PE,"CODE",{});var Vst=s(Cfe);vDo=r(Vst,"pretrained_model_name_or_path"),Vst.forEach(t),TDo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(PE,"CODE",{});var Xst=s(wfe);MDo=r(Xst,"pretrained_model_name_or_path"),Xst.forEach(t),EDo=r(PE,":"),PE.forEach(t),CDo=i(Kt),Afe=n(Kt,"UL",{});var zst=s(Afe);b2=n(zst,"LI",{});var xye=s(b2);yfe=n(xye,"STRONG",{});var Qst=s(yfe);wDo=r(Qst,"vision-encoder-decoder"),Qst.forEach(t),ADo=r(xye," \u2014 "),XD=n(xye,"A",{href:!0});var Wst=s(XD);yDo=r(Wst,"VisionEncoderDecoderModel"),Wst.forEach(t),LDo=r(xye," (Vision Encoder decoder model)"),xye.forEach(t),zst.forEach(t),xDo=i(Kt),F2=n(Kt,"P",{});var kye=s(F2);kDo=r(kye,"The model is set in evaluation mode by default using "),Lfe=n(kye,"CODE",{});var Hst=s(Lfe);SDo=r(Hst,"model.eval()"),Hst.forEach(t),RDo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xfe=n(kye,"CODE",{});var Ust=s(xfe);BDo=r(Ust,"model.train()"),Ust.forEach(t),kye.forEach(t),PDo=i(Kt),kfe=n(Kt,"P",{});var Jst=s(kfe);$Do=r(Jst,"Examples:"),Jst.forEach(t),IDo=i(Kt),m(Pw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),PRe=i(c),$d=n(c,"H2",{class:!0});var VPe=s($d);v2=n(VPe,"A",{id:!0,class:!0,href:!0});var Yst=s(v2);Sfe=n(Yst,"SPAN",{});var Kst=s(Sfe);m($w.$$.fragment,Kst),Kst.forEach(t),Yst.forEach(t),qDo=i(VPe),Rfe=n(VPe,"SPAN",{});var Zst=s(Rfe);NDo=r(Zst,"AutoModelForAudioClassification"),Zst.forEach(t),VPe.forEach(t),$Re=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Iw.$$.fragment,Fl),jDo=i(Fl),Id=n(Fl,"P",{});var yU=s(Id);DDo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),zD=n(yU,"A",{href:!0});var elt=s(zD);GDo=r(elt,"from_pretrained()"),elt.forEach(t),ODo=r(yU," class method or the "),QD=n(yU,"A",{href:!0});var olt=s(QD);VDo=r(olt,"from_config()"),olt.forEach(t),XDo=r(yU,` class
method.`),yU.forEach(t),zDo=i(Fl),qw=n(Fl,"P",{});var XPe=s(qw);QDo=r(XPe,"This class cannot be instantiated directly using "),Bfe=n(XPe,"CODE",{});var rlt=s(Bfe);WDo=r(rlt,"__init__()"),rlt.forEach(t),HDo=r(XPe," (throws an error)."),XPe.forEach(t),UDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(Nw.$$.fragment,vl),JDo=i(vl),Pfe=n(vl,"P",{});var tlt=s(Pfe);YDo=r(tlt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),tlt.forEach(t),KDo=i(vl),qd=n(vl,"P",{});var LU=s(qd);ZDo=r(LU,`Note:
Loading a model from its configuration file does `),$fe=n(LU,"STRONG",{});var alt=s($fe);eGo=r(alt,"not"),alt.forEach(t),oGo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WD=n(LU,"A",{href:!0});var nlt=s(WD);rGo=r(nlt,"from_pretrained()"),nlt.forEach(t),tGo=r(LU," to load the model weights."),LU.forEach(t),aGo=i(vl),Ife=n(vl,"P",{});var slt=s(Ife);nGo=r(slt,"Examples:"),slt.forEach(t),sGo=i(vl),m(jw.$$.fragment,vl),vl.forEach(t),lGo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Dw.$$.fragment,Zt),iGo=i(Zt),qfe=n(Zt,"P",{});var llt=s(qfe);dGo=r(llt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),llt.forEach(t),cGo=i(Zt),tn=n(Zt,"P",{});var $E=s(tn);fGo=r($E,"The model class to instantiate is selected based on the "),Nfe=n($E,"CODE",{});var ilt=s(Nfe);mGo=r(ilt,"model_type"),ilt.forEach(t),gGo=r($E,` property of the config object (either
passed as an argument or loaded from `),jfe=n($E,"CODE",{});var dlt=s(jfe);hGo=r(dlt,"pretrained_model_name_or_path"),dlt.forEach(t),pGo=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dfe=n($E,"CODE",{});var clt=s(Dfe);_Go=r(clt,"pretrained_model_name_or_path"),clt.forEach(t),uGo=r($E,":"),$E.forEach(t),bGo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);T2=n(Do,"LI",{});var Sye=s(T2);Gfe=n(Sye,"STRONG",{});var flt=s(Gfe);FGo=r(flt,"data2vec-audio"),flt.forEach(t),vGo=r(Sye," \u2014 "),HD=n(Sye,"A",{href:!0});var mlt=s(HD);TGo=r(mlt,"Data2VecAudioForSequenceClassification"),mlt.forEach(t),MGo=r(Sye," (Data2VecAudio model)"),Sye.forEach(t),EGo=i(Do),M2=n(Do,"LI",{});var Rye=s(M2);Ofe=n(Rye,"STRONG",{});var glt=s(Ofe);CGo=r(glt,"hubert"),glt.forEach(t),wGo=r(Rye," \u2014 "),UD=n(Rye,"A",{href:!0});var hlt=s(UD);AGo=r(hlt,"HubertForSequenceClassification"),hlt.forEach(t),yGo=r(Rye," (Hubert model)"),Rye.forEach(t),LGo=i(Do),E2=n(Do,"LI",{});var Bye=s(E2);Vfe=n(Bye,"STRONG",{});var plt=s(Vfe);xGo=r(plt,"sew"),plt.forEach(t),kGo=r(Bye," \u2014 "),JD=n(Bye,"A",{href:!0});var _lt=s(JD);SGo=r(_lt,"SEWForSequenceClassification"),_lt.forEach(t),RGo=r(Bye," (SEW model)"),Bye.forEach(t),BGo=i(Do),C2=n(Do,"LI",{});var Pye=s(C2);Xfe=n(Pye,"STRONG",{});var ult=s(Xfe);PGo=r(ult,"sew-d"),ult.forEach(t),$Go=r(Pye," \u2014 "),YD=n(Pye,"A",{href:!0});var blt=s(YD);IGo=r(blt,"SEWDForSequenceClassification"),blt.forEach(t),qGo=r(Pye," (SEW-D model)"),Pye.forEach(t),NGo=i(Do),w2=n(Do,"LI",{});var $ye=s(w2);zfe=n($ye,"STRONG",{});var Flt=s(zfe);jGo=r(Flt,"unispeech"),Flt.forEach(t),DGo=r($ye," \u2014 "),KD=n($ye,"A",{href:!0});var vlt=s(KD);GGo=r(vlt,"UniSpeechForSequenceClassification"),vlt.forEach(t),OGo=r($ye," (UniSpeech model)"),$ye.forEach(t),VGo=i(Do),A2=n(Do,"LI",{});var Iye=s(A2);Qfe=n(Iye,"STRONG",{});var Tlt=s(Qfe);XGo=r(Tlt,"unispeech-sat"),Tlt.forEach(t),zGo=r(Iye," \u2014 "),ZD=n(Iye,"A",{href:!0});var Mlt=s(ZD);QGo=r(Mlt,"UniSpeechSatForSequenceClassification"),Mlt.forEach(t),WGo=r(Iye," (UniSpeechSat model)"),Iye.forEach(t),HGo=i(Do),y2=n(Do,"LI",{});var qye=s(y2);Wfe=n(qye,"STRONG",{});var Elt=s(Wfe);UGo=r(Elt,"wav2vec2"),Elt.forEach(t),JGo=r(qye," \u2014 "),eG=n(qye,"A",{href:!0});var Clt=s(eG);YGo=r(Clt,"Wav2Vec2ForSequenceClassification"),Clt.forEach(t),KGo=r(qye," (Wav2Vec2 model)"),qye.forEach(t),ZGo=i(Do),L2=n(Do,"LI",{});var Nye=s(L2);Hfe=n(Nye,"STRONG",{});var wlt=s(Hfe);eOo=r(wlt,"wavlm"),wlt.forEach(t),oOo=r(Nye," \u2014 "),oG=n(Nye,"A",{href:!0});var Alt=s(oG);rOo=r(Alt,"WavLMForSequenceClassification"),Alt.forEach(t),tOo=r(Nye," (WavLM model)"),Nye.forEach(t),Do.forEach(t),aOo=i(Zt),x2=n(Zt,"P",{});var jye=s(x2);nOo=r(jye,"The model is set in evaluation mode by default using "),Ufe=n(jye,"CODE",{});var ylt=s(Ufe);sOo=r(ylt,"model.eval()"),ylt.forEach(t),lOo=r(jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jfe=n(jye,"CODE",{});var Llt=s(Jfe);iOo=r(Llt,"model.train()"),Llt.forEach(t),jye.forEach(t),dOo=i(Zt),Yfe=n(Zt,"P",{});var xlt=s(Yfe);cOo=r(xlt,"Examples:"),xlt.forEach(t),fOo=i(Zt),m(Gw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),IRe=i(c),Nd=n(c,"H2",{class:!0});var zPe=s(Nd);k2=n(zPe,"A",{id:!0,class:!0,href:!0});var klt=s(k2);Kfe=n(klt,"SPAN",{});var Slt=s(Kfe);m(Ow.$$.fragment,Slt),Slt.forEach(t),klt.forEach(t),mOo=i(zPe),Zfe=n(zPe,"SPAN",{});var Rlt=s(Zfe);gOo=r(Rlt,"AutoModelForAudioFrameClassification"),Rlt.forEach(t),zPe.forEach(t),qRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Vw.$$.fragment,Tl),hOo=i(Tl),jd=n(Tl,"P",{});var xU=s(jd);pOo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rG=n(xU,"A",{href:!0});var Blt=s(rG);_Oo=r(Blt,"from_pretrained()"),Blt.forEach(t),uOo=r(xU," class method or the "),tG=n(xU,"A",{href:!0});var Plt=s(tG);bOo=r(Plt,"from_config()"),Plt.forEach(t),FOo=r(xU,` class
method.`),xU.forEach(t),vOo=i(Tl),Xw=n(Tl,"P",{});var QPe=s(Xw);TOo=r(QPe,"This class cannot be instantiated directly using "),eme=n(QPe,"CODE",{});var $lt=s(eme);MOo=r($lt,"__init__()"),$lt.forEach(t),EOo=r(QPe," (throws an error)."),QPe.forEach(t),COo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(zw.$$.fragment,Ml),wOo=i(Ml),ome=n(Ml,"P",{});var Ilt=s(ome);AOo=r(Ilt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Ilt.forEach(t),yOo=i(Ml),Dd=n(Ml,"P",{});var kU=s(Dd);LOo=r(kU,`Note:
Loading a model from its configuration file does `),rme=n(kU,"STRONG",{});var qlt=s(rme);xOo=r(qlt,"not"),qlt.forEach(t),kOo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aG=n(kU,"A",{href:!0});var Nlt=s(aG);SOo=r(Nlt,"from_pretrained()"),Nlt.forEach(t),ROo=r(kU," to load the model weights."),kU.forEach(t),BOo=i(Ml),tme=n(Ml,"P",{});var jlt=s(tme);POo=r(jlt,"Examples:"),jlt.forEach(t),$Oo=i(Ml),m(Qw.$$.fragment,Ml),Ml.forEach(t),IOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(Ww.$$.fragment,ea),qOo=i(ea),ame=n(ea,"P",{});var Dlt=s(ame);NOo=r(Dlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Dlt.forEach(t),jOo=i(ea),an=n(ea,"P",{});var IE=s(an);DOo=r(IE,"The model class to instantiate is selected based on the "),nme=n(IE,"CODE",{});var Glt=s(nme);GOo=r(Glt,"model_type"),Glt.forEach(t),OOo=r(IE,` property of the config object (either
passed as an argument or loaded from `),sme=n(IE,"CODE",{});var Olt=s(sme);VOo=r(Olt,"pretrained_model_name_or_path"),Olt.forEach(t),XOo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lme=n(IE,"CODE",{});var Vlt=s(lme);zOo=r(Vlt,"pretrained_model_name_or_path"),Vlt.forEach(t),QOo=r(IE,":"),IE.forEach(t),WOo=i(ea),nn=n(ea,"UL",{});var qE=s(nn);S2=n(qE,"LI",{});var Dye=s(S2);ime=n(Dye,"STRONG",{});var Xlt=s(ime);HOo=r(Xlt,"data2vec-audio"),Xlt.forEach(t),UOo=r(Dye," \u2014 "),nG=n(Dye,"A",{href:!0});var zlt=s(nG);JOo=r(zlt,"Data2VecAudioForAudioFrameClassification"),zlt.forEach(t),YOo=r(Dye," (Data2VecAudio model)"),Dye.forEach(t),KOo=i(qE),R2=n(qE,"LI",{});var Gye=s(R2);dme=n(Gye,"STRONG",{});var Qlt=s(dme);ZOo=r(Qlt,"unispeech-sat"),Qlt.forEach(t),eVo=r(Gye," \u2014 "),sG=n(Gye,"A",{href:!0});var Wlt=s(sG);oVo=r(Wlt,"UniSpeechSatForAudioFrameClassification"),Wlt.forEach(t),rVo=r(Gye," (UniSpeechSat model)"),Gye.forEach(t),tVo=i(qE),B2=n(qE,"LI",{});var Oye=s(B2);cme=n(Oye,"STRONG",{});var Hlt=s(cme);aVo=r(Hlt,"wav2vec2"),Hlt.forEach(t),nVo=r(Oye," \u2014 "),lG=n(Oye,"A",{href:!0});var Ult=s(lG);sVo=r(Ult,"Wav2Vec2ForAudioFrameClassification"),Ult.forEach(t),lVo=r(Oye," (Wav2Vec2 model)"),Oye.forEach(t),iVo=i(qE),P2=n(qE,"LI",{});var Vye=s(P2);fme=n(Vye,"STRONG",{});var Jlt=s(fme);dVo=r(Jlt,"wavlm"),Jlt.forEach(t),cVo=r(Vye," \u2014 "),iG=n(Vye,"A",{href:!0});var Ylt=s(iG);fVo=r(Ylt,"WavLMForAudioFrameClassification"),Ylt.forEach(t),mVo=r(Vye," (WavLM model)"),Vye.forEach(t),qE.forEach(t),gVo=i(ea),$2=n(ea,"P",{});var Xye=s($2);hVo=r(Xye,"The model is set in evaluation mode by default using "),mme=n(Xye,"CODE",{});var Klt=s(mme);pVo=r(Klt,"model.eval()"),Klt.forEach(t),_Vo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(Xye,"CODE",{});var Zlt=s(gme);uVo=r(Zlt,"model.train()"),Zlt.forEach(t),Xye.forEach(t),bVo=i(ea),hme=n(ea,"P",{});var eit=s(hme);FVo=r(eit,"Examples:"),eit.forEach(t),vVo=i(ea),m(Hw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),NRe=i(c),Gd=n(c,"H2",{class:!0});var WPe=s(Gd);I2=n(WPe,"A",{id:!0,class:!0,href:!0});var oit=s(I2);pme=n(oit,"SPAN",{});var rit=s(pme);m(Uw.$$.fragment,rit),rit.forEach(t),oit.forEach(t),TVo=i(WPe),_me=n(WPe,"SPAN",{});var tit=s(_me);MVo=r(tit,"AutoModelForCTC"),tit.forEach(t),WPe.forEach(t),jRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Jw.$$.fragment,El),EVo=i(El),Od=n(El,"P",{});var SU=s(Od);CVo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),dG=n(SU,"A",{href:!0});var ait=s(dG);wVo=r(ait,"from_pretrained()"),ait.forEach(t),AVo=r(SU," class method or the "),cG=n(SU,"A",{href:!0});var nit=s(cG);yVo=r(nit,"from_config()"),nit.forEach(t),LVo=r(SU,` class
method.`),SU.forEach(t),xVo=i(El),Yw=n(El,"P",{});var HPe=s(Yw);kVo=r(HPe,"This class cannot be instantiated directly using "),ume=n(HPe,"CODE",{});var sit=s(ume);SVo=r(sit,"__init__()"),sit.forEach(t),RVo=r(HPe," (throws an error)."),HPe.forEach(t),BVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Kw.$$.fragment,Cl),PVo=i(Cl),bme=n(Cl,"P",{});var lit=s(bme);$Vo=r(lit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lit.forEach(t),IVo=i(Cl),Vd=n(Cl,"P",{});var RU=s(Vd);qVo=r(RU,`Note:
Loading a model from its configuration file does `),Fme=n(RU,"STRONG",{});var iit=s(Fme);NVo=r(iit,"not"),iit.forEach(t),jVo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(RU,"A",{href:!0});var dit=s(fG);DVo=r(dit,"from_pretrained()"),dit.forEach(t),GVo=r(RU," to load the model weights."),RU.forEach(t),OVo=i(Cl),vme=n(Cl,"P",{});var cit=s(vme);VVo=r(cit,"Examples:"),cit.forEach(t),XVo=i(Cl),m(Zw.$$.fragment,Cl),Cl.forEach(t),zVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(eA.$$.fragment,oa),QVo=i(oa),Tme=n(oa,"P",{});var fit=s(Tme);WVo=r(fit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fit.forEach(t),HVo=i(oa),sn=n(oa,"P",{});var NE=s(sn);UVo=r(NE,"The model class to instantiate is selected based on the "),Mme=n(NE,"CODE",{});var mit=s(Mme);JVo=r(mit,"model_type"),mit.forEach(t),YVo=r(NE,` property of the config object (either
passed as an argument or loaded from `),Eme=n(NE,"CODE",{});var git=s(Eme);KVo=r(git,"pretrained_model_name_or_path"),git.forEach(t),ZVo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cme=n(NE,"CODE",{});var hit=s(Cme);eXo=r(hit,"pretrained_model_name_or_path"),hit.forEach(t),oXo=r(NE,":"),NE.forEach(t),rXo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);q2=n(Go,"LI",{});var zye=s(q2);wme=n(zye,"STRONG",{});var pit=s(wme);tXo=r(pit,"data2vec-audio"),pit.forEach(t),aXo=r(zye," \u2014 "),mG=n(zye,"A",{href:!0});var _it=s(mG);nXo=r(_it,"Data2VecAudioForCTC"),_it.forEach(t),sXo=r(zye," (Data2VecAudio model)"),zye.forEach(t),lXo=i(Go),N2=n(Go,"LI",{});var Qye=s(N2);Ame=n(Qye,"STRONG",{});var uit=s(Ame);iXo=r(uit,"hubert"),uit.forEach(t),dXo=r(Qye," \u2014 "),gG=n(Qye,"A",{href:!0});var bit=s(gG);cXo=r(bit,"HubertForCTC"),bit.forEach(t),fXo=r(Qye," (Hubert model)"),Qye.forEach(t),mXo=i(Go),j2=n(Go,"LI",{});var Wye=s(j2);yme=n(Wye,"STRONG",{});var Fit=s(yme);gXo=r(Fit,"sew"),Fit.forEach(t),hXo=r(Wye," \u2014 "),hG=n(Wye,"A",{href:!0});var vit=s(hG);pXo=r(vit,"SEWForCTC"),vit.forEach(t),_Xo=r(Wye," (SEW model)"),Wye.forEach(t),uXo=i(Go),D2=n(Go,"LI",{});var Hye=s(D2);Lme=n(Hye,"STRONG",{});var Tit=s(Lme);bXo=r(Tit,"sew-d"),Tit.forEach(t),FXo=r(Hye," \u2014 "),pG=n(Hye,"A",{href:!0});var Mit=s(pG);vXo=r(Mit,"SEWDForCTC"),Mit.forEach(t),TXo=r(Hye," (SEW-D model)"),Hye.forEach(t),MXo=i(Go),G2=n(Go,"LI",{});var Uye=s(G2);xme=n(Uye,"STRONG",{});var Eit=s(xme);EXo=r(Eit,"unispeech"),Eit.forEach(t),CXo=r(Uye," \u2014 "),_G=n(Uye,"A",{href:!0});var Cit=s(_G);wXo=r(Cit,"UniSpeechForCTC"),Cit.forEach(t),AXo=r(Uye," (UniSpeech model)"),Uye.forEach(t),yXo=i(Go),O2=n(Go,"LI",{});var Jye=s(O2);kme=n(Jye,"STRONG",{});var wit=s(kme);LXo=r(wit,"unispeech-sat"),wit.forEach(t),xXo=r(Jye," \u2014 "),uG=n(Jye,"A",{href:!0});var Ait=s(uG);kXo=r(Ait,"UniSpeechSatForCTC"),Ait.forEach(t),SXo=r(Jye," (UniSpeechSat model)"),Jye.forEach(t),RXo=i(Go),V2=n(Go,"LI",{});var Yye=s(V2);Sme=n(Yye,"STRONG",{});var yit=s(Sme);BXo=r(yit,"wav2vec2"),yit.forEach(t),PXo=r(Yye," \u2014 "),bG=n(Yye,"A",{href:!0});var Lit=s(bG);$Xo=r(Lit,"Wav2Vec2ForCTC"),Lit.forEach(t),IXo=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),qXo=i(Go),X2=n(Go,"LI",{});var Kye=s(X2);Rme=n(Kye,"STRONG",{});var xit=s(Rme);NXo=r(xit,"wavlm"),xit.forEach(t),jXo=r(Kye," \u2014 "),FG=n(Kye,"A",{href:!0});var kit=s(FG);DXo=r(kit,"WavLMForCTC"),kit.forEach(t),GXo=r(Kye," (WavLM model)"),Kye.forEach(t),Go.forEach(t),OXo=i(oa),z2=n(oa,"P",{});var Zye=s(z2);VXo=r(Zye,"The model is set in evaluation mode by default using "),Bme=n(Zye,"CODE",{});var Sit=s(Bme);XXo=r(Sit,"model.eval()"),Sit.forEach(t),zXo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pme=n(Zye,"CODE",{});var Rit=s(Pme);QXo=r(Rit,"model.train()"),Rit.forEach(t),Zye.forEach(t),WXo=i(oa),$me=n(oa,"P",{});var Bit=s($me);HXo=r(Bit,"Examples:"),Bit.forEach(t),UXo=i(oa),m(oA.$$.fragment,oa),oa.forEach(t),El.forEach(t),DRe=i(c),Xd=n(c,"H2",{class:!0});var UPe=s(Xd);Q2=n(UPe,"A",{id:!0,class:!0,href:!0});var Pit=s(Q2);Ime=n(Pit,"SPAN",{});var $it=s(Ime);m(rA.$$.fragment,$it),$it.forEach(t),Pit.forEach(t),JXo=i(UPe),qme=n(UPe,"SPAN",{});var Iit=s(qme);YXo=r(Iit,"AutoModelForSpeechSeq2Seq"),Iit.forEach(t),UPe.forEach(t),GRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(tA.$$.fragment,wl),KXo=i(wl),zd=n(wl,"P",{});var BU=s(zd);ZXo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),vG=n(BU,"A",{href:!0});var qit=s(vG);ezo=r(qit,"from_pretrained()"),qit.forEach(t),ozo=r(BU," class method or the "),TG=n(BU,"A",{href:!0});var Nit=s(TG);rzo=r(Nit,"from_config()"),Nit.forEach(t),tzo=r(BU,` class
method.`),BU.forEach(t),azo=i(wl),aA=n(wl,"P",{});var JPe=s(aA);nzo=r(JPe,"This class cannot be instantiated directly using "),Nme=n(JPe,"CODE",{});var jit=s(Nme);szo=r(jit,"__init__()"),jit.forEach(t),lzo=r(JPe," (throws an error)."),JPe.forEach(t),izo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(nA.$$.fragment,Al),dzo=i(Al),jme=n(Al,"P",{});var Dit=s(jme);czo=r(Dit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Dit.forEach(t),fzo=i(Al),Qd=n(Al,"P",{});var PU=s(Qd);mzo=r(PU,`Note:
Loading a model from its configuration file does `),Dme=n(PU,"STRONG",{});var Git=s(Dme);gzo=r(Git,"not"),Git.forEach(t),hzo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(PU,"A",{href:!0});var Oit=s(MG);pzo=r(Oit,"from_pretrained()"),Oit.forEach(t),_zo=r(PU," to load the model weights."),PU.forEach(t),uzo=i(Al),Gme=n(Al,"P",{});var Vit=s(Gme);bzo=r(Vit,"Examples:"),Vit.forEach(t),Fzo=i(Al),m(sA.$$.fragment,Al),Al.forEach(t),vzo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(lA.$$.fragment,ra),Tzo=i(ra),Ome=n(ra,"P",{});var Xit=s(Ome);Mzo=r(Xit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xit.forEach(t),Ezo=i(ra),ln=n(ra,"P",{});var jE=s(ln);Czo=r(jE,"The model class to instantiate is selected based on the "),Vme=n(jE,"CODE",{});var zit=s(Vme);wzo=r(zit,"model_type"),zit.forEach(t),Azo=r(jE,` property of the config object (either
passed as an argument or loaded from `),Xme=n(jE,"CODE",{});var Qit=s(Xme);yzo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),Lzo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(jE,"CODE",{});var Wit=s(zme);xzo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),kzo=r(jE,":"),jE.forEach(t),Szo=i(ra),iA=n(ra,"UL",{});var YPe=s(iA);W2=n(YPe,"LI",{});var eLe=s(W2);Qme=n(eLe,"STRONG",{});var Hit=s(Qme);Rzo=r(Hit,"speech-encoder-decoder"),Hit.forEach(t),Bzo=r(eLe," \u2014 "),EG=n(eLe,"A",{href:!0});var Uit=s(EG);Pzo=r(Uit,"SpeechEncoderDecoderModel"),Uit.forEach(t),$zo=r(eLe," (Speech Encoder decoder model)"),eLe.forEach(t),Izo=i(YPe),H2=n(YPe,"LI",{});var oLe=s(H2);Wme=n(oLe,"STRONG",{});var Jit=s(Wme);qzo=r(Jit,"speech_to_text"),Jit.forEach(t),Nzo=r(oLe," \u2014 "),CG=n(oLe,"A",{href:!0});var Yit=s(CG);jzo=r(Yit,"Speech2TextForConditionalGeneration"),Yit.forEach(t),Dzo=r(oLe," (Speech2Text model)"),oLe.forEach(t),YPe.forEach(t),Gzo=i(ra),U2=n(ra,"P",{});var rLe=s(U2);Ozo=r(rLe,"The model is set in evaluation mode by default using "),Hme=n(rLe,"CODE",{});var Kit=s(Hme);Vzo=r(Kit,"model.eval()"),Kit.forEach(t),Xzo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ume=n(rLe,"CODE",{});var Zit=s(Ume);zzo=r(Zit,"model.train()"),Zit.forEach(t),rLe.forEach(t),Qzo=i(ra),Jme=n(ra,"P",{});var edt=s(Jme);Wzo=r(edt,"Examples:"),edt.forEach(t),Hzo=i(ra),m(dA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),ORe=i(c),Wd=n(c,"H2",{class:!0});var KPe=s(Wd);J2=n(KPe,"A",{id:!0,class:!0,href:!0});var odt=s(J2);Yme=n(odt,"SPAN",{});var rdt=s(Yme);m(cA.$$.fragment,rdt),rdt.forEach(t),odt.forEach(t),Uzo=i(KPe),Kme=n(KPe,"SPAN",{});var tdt=s(Kme);Jzo=r(tdt,"AutoModelForAudioXVector"),tdt.forEach(t),KPe.forEach(t),VRe=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(fA.$$.fragment,yl),Yzo=i(yl),Hd=n(yl,"P",{});var $U=s(Hd);Kzo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),wG=n($U,"A",{href:!0});var adt=s(wG);Zzo=r(adt,"from_pretrained()"),adt.forEach(t),eQo=r($U," class method or the "),AG=n($U,"A",{href:!0});var ndt=s(AG);oQo=r(ndt,"from_config()"),ndt.forEach(t),rQo=r($U,` class
method.`),$U.forEach(t),tQo=i(yl),mA=n(yl,"P",{});var ZPe=s(mA);aQo=r(ZPe,"This class cannot be instantiated directly using "),Zme=n(ZPe,"CODE",{});var sdt=s(Zme);nQo=r(sdt,"__init__()"),sdt.forEach(t),sQo=r(ZPe," (throws an error)."),ZPe.forEach(t),lQo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(gA.$$.fragment,Ll),iQo=i(Ll),ege=n(Ll,"P",{});var ldt=s(ege);dQo=r(ldt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),ldt.forEach(t),cQo=i(Ll),Ud=n(Ll,"P",{});var IU=s(Ud);fQo=r(IU,`Note:
Loading a model from its configuration file does `),oge=n(IU,"STRONG",{});var idt=s(oge);mQo=r(idt,"not"),idt.forEach(t),gQo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(IU,"A",{href:!0});var ddt=s(yG);hQo=r(ddt,"from_pretrained()"),ddt.forEach(t),pQo=r(IU," to load the model weights."),IU.forEach(t),_Qo=i(Ll),rge=n(Ll,"P",{});var cdt=s(rge);uQo=r(cdt,"Examples:"),cdt.forEach(t),bQo=i(Ll),m(hA.$$.fragment,Ll),Ll.forEach(t),FQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(pA.$$.fragment,ta),vQo=i(ta),tge=n(ta,"P",{});var fdt=s(tge);TQo=r(fdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fdt.forEach(t),MQo=i(ta),dn=n(ta,"P",{});var DE=s(dn);EQo=r(DE,"The model class to instantiate is selected based on the "),age=n(DE,"CODE",{});var mdt=s(age);CQo=r(mdt,"model_type"),mdt.forEach(t),wQo=r(DE,` property of the config object (either
passed as an argument or loaded from `),nge=n(DE,"CODE",{});var gdt=s(nge);AQo=r(gdt,"pretrained_model_name_or_path"),gdt.forEach(t),yQo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sge=n(DE,"CODE",{});var hdt=s(sge);LQo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),xQo=r(DE,":"),DE.forEach(t),kQo=i(ta),cn=n(ta,"UL",{});var GE=s(cn);Y2=n(GE,"LI",{});var tLe=s(Y2);lge=n(tLe,"STRONG",{});var pdt=s(lge);SQo=r(pdt,"data2vec-audio"),pdt.forEach(t),RQo=r(tLe," \u2014 "),LG=n(tLe,"A",{href:!0});var _dt=s(LG);BQo=r(_dt,"Data2VecAudioForXVector"),_dt.forEach(t),PQo=r(tLe," (Data2VecAudio model)"),tLe.forEach(t),$Qo=i(GE),K2=n(GE,"LI",{});var aLe=s(K2);ige=n(aLe,"STRONG",{});var udt=s(ige);IQo=r(udt,"unispeech-sat"),udt.forEach(t),qQo=r(aLe," \u2014 "),xG=n(aLe,"A",{href:!0});var bdt=s(xG);NQo=r(bdt,"UniSpeechSatForXVector"),bdt.forEach(t),jQo=r(aLe," (UniSpeechSat model)"),aLe.forEach(t),DQo=i(GE),Z2=n(GE,"LI",{});var nLe=s(Z2);dge=n(nLe,"STRONG",{});var Fdt=s(dge);GQo=r(Fdt,"wav2vec2"),Fdt.forEach(t),OQo=r(nLe," \u2014 "),kG=n(nLe,"A",{href:!0});var vdt=s(kG);VQo=r(vdt,"Wav2Vec2ForXVector"),vdt.forEach(t),XQo=r(nLe," (Wav2Vec2 model)"),nLe.forEach(t),zQo=i(GE),eF=n(GE,"LI",{});var sLe=s(eF);cge=n(sLe,"STRONG",{});var Tdt=s(cge);QQo=r(Tdt,"wavlm"),Tdt.forEach(t),WQo=r(sLe," \u2014 "),SG=n(sLe,"A",{href:!0});var Mdt=s(SG);HQo=r(Mdt,"WavLMForXVector"),Mdt.forEach(t),UQo=r(sLe," (WavLM model)"),sLe.forEach(t),GE.forEach(t),JQo=i(ta),oF=n(ta,"P",{});var lLe=s(oF);YQo=r(lLe,"The model is set in evaluation mode by default using "),fge=n(lLe,"CODE",{});var Edt=s(fge);KQo=r(Edt,"model.eval()"),Edt.forEach(t),ZQo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mge=n(lLe,"CODE",{});var Cdt=s(mge);eWo=r(Cdt,"model.train()"),Cdt.forEach(t),lLe.forEach(t),oWo=i(ta),gge=n(ta,"P",{});var wdt=s(gge);rWo=r(wdt,"Examples:"),wdt.forEach(t),tWo=i(ta),m(_A.$$.fragment,ta),ta.forEach(t),yl.forEach(t),XRe=i(c),Jd=n(c,"H2",{class:!0});var e$e=s(Jd);rF=n(e$e,"A",{id:!0,class:!0,href:!0});var Adt=s(rF);hge=n(Adt,"SPAN",{});var ydt=s(hge);m(uA.$$.fragment,ydt),ydt.forEach(t),Adt.forEach(t),aWo=i(e$e),pge=n(e$e,"SPAN",{});var Ldt=s(pge);nWo=r(Ldt,"AutoModelForMaskedImageModeling"),Ldt.forEach(t),e$e.forEach(t),zRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(bA.$$.fragment,xl),sWo=i(xl),Yd=n(xl,"P",{});var qU=s(Yd);lWo=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),RG=n(qU,"A",{href:!0});var xdt=s(RG);iWo=r(xdt,"from_pretrained()"),xdt.forEach(t),dWo=r(qU," class method or the "),BG=n(qU,"A",{href:!0});var kdt=s(BG);cWo=r(kdt,"from_config()"),kdt.forEach(t),fWo=r(qU,` class
method.`),qU.forEach(t),mWo=i(xl),FA=n(xl,"P",{});var o$e=s(FA);gWo=r(o$e,"This class cannot be instantiated directly using "),_ge=n(o$e,"CODE",{});var Sdt=s(_ge);hWo=r(Sdt,"__init__()"),Sdt.forEach(t),pWo=r(o$e," (throws an error)."),o$e.forEach(t),_Wo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(vA.$$.fragment,kl),uWo=i(kl),uge=n(kl,"P",{});var Rdt=s(uge);bWo=r(Rdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rdt.forEach(t),FWo=i(kl),Kd=n(kl,"P",{});var NU=s(Kd);vWo=r(NU,`Note:
Loading a model from its configuration file does `),bge=n(NU,"STRONG",{});var Bdt=s(bge);TWo=r(Bdt,"not"),Bdt.forEach(t),MWo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PG=n(NU,"A",{href:!0});var Pdt=s(PG);EWo=r(Pdt,"from_pretrained()"),Pdt.forEach(t),CWo=r(NU," to load the model weights."),NU.forEach(t),wWo=i(kl),Fge=n(kl,"P",{});var $dt=s(Fge);AWo=r($dt,"Examples:"),$dt.forEach(t),yWo=i(kl),m(TA.$$.fragment,kl),kl.forEach(t),LWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(MA.$$.fragment,aa),xWo=i(aa),vge=n(aa,"P",{});var Idt=s(vge);kWo=r(Idt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Idt.forEach(t),SWo=i(aa),fn=n(aa,"P",{});var OE=s(fn);RWo=r(OE,"The model class to instantiate is selected based on the "),Tge=n(OE,"CODE",{});var qdt=s(Tge);BWo=r(qdt,"model_type"),qdt.forEach(t),PWo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Mge=n(OE,"CODE",{});var Ndt=s(Mge);$Wo=r(Ndt,"pretrained_model_name_or_path"),Ndt.forEach(t),IWo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(OE,"CODE",{});var jdt=s(Ege);qWo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),NWo=r(OE,":"),OE.forEach(t),jWo=i(aa),Zd=n(aa,"UL",{});var jU=s(Zd);tF=n(jU,"LI",{});var iLe=s(tF);Cge=n(iLe,"STRONG",{});var Ddt=s(Cge);DWo=r(Ddt,"deit"),Ddt.forEach(t),GWo=r(iLe," \u2014 "),$G=n(iLe,"A",{href:!0});var Gdt=s($G);OWo=r(Gdt,"DeiTForMaskedImageModeling"),Gdt.forEach(t),VWo=r(iLe," (DeiT model)"),iLe.forEach(t),XWo=i(jU),aF=n(jU,"LI",{});var dLe=s(aF);wge=n(dLe,"STRONG",{});var Odt=s(wge);zWo=r(Odt,"swin"),Odt.forEach(t),QWo=r(dLe," \u2014 "),IG=n(dLe,"A",{href:!0});var Vdt=s(IG);WWo=r(Vdt,"SwinForMaskedImageModeling"),Vdt.forEach(t),HWo=r(dLe," (Swin model)"),dLe.forEach(t),UWo=i(jU),nF=n(jU,"LI",{});var cLe=s(nF);Age=n(cLe,"STRONG",{});var Xdt=s(Age);JWo=r(Xdt,"vit"),Xdt.forEach(t),YWo=r(cLe," \u2014 "),qG=n(cLe,"A",{href:!0});var zdt=s(qG);KWo=r(zdt,"ViTForMaskedImageModeling"),zdt.forEach(t),ZWo=r(cLe," (ViT model)"),cLe.forEach(t),jU.forEach(t),eHo=i(aa),sF=n(aa,"P",{});var fLe=s(sF);oHo=r(fLe,"The model is set in evaluation mode by default using "),yge=n(fLe,"CODE",{});var Qdt=s(yge);rHo=r(Qdt,"model.eval()"),Qdt.forEach(t),tHo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(fLe,"CODE",{});var Wdt=s(Lge);aHo=r(Wdt,"model.train()"),Wdt.forEach(t),fLe.forEach(t),nHo=i(aa),xge=n(aa,"P",{});var Hdt=s(xge);sHo=r(Hdt,"Examples:"),Hdt.forEach(t),lHo=i(aa),m(EA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),QRe=i(c),ec=n(c,"H2",{class:!0});var r$e=s(ec);lF=n(r$e,"A",{id:!0,class:!0,href:!0});var Udt=s(lF);kge=n(Udt,"SPAN",{});var Jdt=s(kge);m(CA.$$.fragment,Jdt),Jdt.forEach(t),Udt.forEach(t),iHo=i(r$e),Sge=n(r$e,"SPAN",{});var Ydt=s(Sge);dHo=r(Ydt,"AutoModelForObjectDetection"),Ydt.forEach(t),r$e.forEach(t),WRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(wA.$$.fragment,Sl),cHo=i(Sl),oc=n(Sl,"P",{});var DU=s(oc);fHo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NG=n(DU,"A",{href:!0});var Kdt=s(NG);mHo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),gHo=r(DU," class method or the "),jG=n(DU,"A",{href:!0});var Zdt=s(jG);hHo=r(Zdt,"from_config()"),Zdt.forEach(t),pHo=r(DU,` class
method.`),DU.forEach(t),_Ho=i(Sl),AA=n(Sl,"P",{});var t$e=s(AA);uHo=r(t$e,"This class cannot be instantiated directly using "),Rge=n(t$e,"CODE",{});var ect=s(Rge);bHo=r(ect,"__init__()"),ect.forEach(t),FHo=r(t$e," (throws an error)."),t$e.forEach(t),vHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(yA.$$.fragment,Rl),THo=i(Rl),Bge=n(Rl,"P",{});var oct=s(Bge);MHo=r(oct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),oct.forEach(t),EHo=i(Rl),rc=n(Rl,"P",{});var GU=s(rc);CHo=r(GU,`Note:
Loading a model from its configuration file does `),Pge=n(GU,"STRONG",{});var rct=s(Pge);wHo=r(rct,"not"),rct.forEach(t),AHo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(GU,"A",{href:!0});var tct=s(DG);yHo=r(tct,"from_pretrained()"),tct.forEach(t),LHo=r(GU," to load the model weights."),GU.forEach(t),xHo=i(Rl),$ge=n(Rl,"P",{});var act=s($ge);kHo=r(act,"Examples:"),act.forEach(t),SHo=i(Rl),m(LA.$$.fragment,Rl),Rl.forEach(t),RHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(xA.$$.fragment,na),BHo=i(na),Ige=n(na,"P",{});var nct=s(Ige);PHo=r(nct,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),nct.forEach(t),$Ho=i(na),mn=n(na,"P",{});var VE=s(mn);IHo=r(VE,"The model class to instantiate is selected based on the "),qge=n(VE,"CODE",{});var sct=s(qge);qHo=r(sct,"model_type"),sct.forEach(t),NHo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Nge=n(VE,"CODE",{});var lct=s(Nge);jHo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),DHo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jge=n(VE,"CODE",{});var ict=s(jge);GHo=r(ict,"pretrained_model_name_or_path"),ict.forEach(t),OHo=r(VE,":"),VE.forEach(t),VHo=i(na),Dge=n(na,"UL",{});var dct=s(Dge);iF=n(dct,"LI",{});var mLe=s(iF);Gge=n(mLe,"STRONG",{});var cct=s(Gge);XHo=r(cct,"detr"),cct.forEach(t),zHo=r(mLe," \u2014 "),GG=n(mLe,"A",{href:!0});var fct=s(GG);QHo=r(fct,"DetrForObjectDetection"),fct.forEach(t),WHo=r(mLe," (DETR model)"),mLe.forEach(t),dct.forEach(t),HHo=i(na),dF=n(na,"P",{});var gLe=s(dF);UHo=r(gLe,"The model is set in evaluation mode by default using "),Oge=n(gLe,"CODE",{});var mct=s(Oge);JHo=r(mct,"model.eval()"),mct.forEach(t),YHo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vge=n(gLe,"CODE",{});var gct=s(Vge);KHo=r(gct,"model.train()"),gct.forEach(t),gLe.forEach(t),ZHo=i(na),Xge=n(na,"P",{});var hct=s(Xge);eUo=r(hct,"Examples:"),hct.forEach(t),oUo=i(na),m(kA.$$.fragment,na),na.forEach(t),Sl.forEach(t),HRe=i(c),tc=n(c,"H2",{class:!0});var a$e=s(tc);cF=n(a$e,"A",{id:!0,class:!0,href:!0});var pct=s(cF);zge=n(pct,"SPAN",{});var _ct=s(zge);m(SA.$$.fragment,_ct),_ct.forEach(t),pct.forEach(t),rUo=i(a$e),Qge=n(a$e,"SPAN",{});var uct=s(Qge);tUo=r(uct,"AutoModelForImageSegmentation"),uct.forEach(t),a$e.forEach(t),URe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(RA.$$.fragment,Bl),aUo=i(Bl),ac=n(Bl,"P",{});var OU=s(ac);nUo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OG=n(OU,"A",{href:!0});var bct=s(OG);sUo=r(bct,"from_pretrained()"),bct.forEach(t),lUo=r(OU," class method or the "),VG=n(OU,"A",{href:!0});var Fct=s(VG);iUo=r(Fct,"from_config()"),Fct.forEach(t),dUo=r(OU,` class
method.`),OU.forEach(t),cUo=i(Bl),BA=n(Bl,"P",{});var n$e=s(BA);fUo=r(n$e,"This class cannot be instantiated directly using "),Wge=n(n$e,"CODE",{});var vct=s(Wge);mUo=r(vct,"__init__()"),vct.forEach(t),gUo=r(n$e," (throws an error)."),n$e.forEach(t),hUo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(PA.$$.fragment,Pl),pUo=i(Pl),Hge=n(Pl,"P",{});var Tct=s(Hge);_Uo=r(Tct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Tct.forEach(t),uUo=i(Pl),nc=n(Pl,"P",{});var VU=s(nc);bUo=r(VU,`Note:
Loading a model from its configuration file does `),Uge=n(VU,"STRONG",{});var Mct=s(Uge);FUo=r(Mct,"not"),Mct.forEach(t),vUo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(VU,"A",{href:!0});var Ect=s(XG);TUo=r(Ect,"from_pretrained()"),Ect.forEach(t),MUo=r(VU," to load the model weights."),VU.forEach(t),EUo=i(Pl),Jge=n(Pl,"P",{});var Cct=s(Jge);CUo=r(Cct,"Examples:"),Cct.forEach(t),wUo=i(Pl),m($A.$$.fragment,Pl),Pl.forEach(t),AUo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(IA.$$.fragment,sa),yUo=i(sa),Yge=n(sa,"P",{});var wct=s(Yge);LUo=r(wct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wct.forEach(t),xUo=i(sa),gn=n(sa,"P",{});var XE=s(gn);kUo=r(XE,"The model class to instantiate is selected based on the "),Kge=n(XE,"CODE",{});var Act=s(Kge);SUo=r(Act,"model_type"),Act.forEach(t),RUo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Zge=n(XE,"CODE",{});var yct=s(Zge);BUo=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),PUo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ehe=n(XE,"CODE",{});var Lct=s(ehe);$Uo=r(Lct,"pretrained_model_name_or_path"),Lct.forEach(t),IUo=r(XE,":"),XE.forEach(t),qUo=i(sa),ohe=n(sa,"UL",{});var xct=s(ohe);fF=n(xct,"LI",{});var hLe=s(fF);rhe=n(hLe,"STRONG",{});var kct=s(rhe);NUo=r(kct,"detr"),kct.forEach(t),jUo=r(hLe," \u2014 "),zG=n(hLe,"A",{href:!0});var Sct=s(zG);DUo=r(Sct,"DetrForSegmentation"),Sct.forEach(t),GUo=r(hLe," (DETR model)"),hLe.forEach(t),xct.forEach(t),OUo=i(sa),mF=n(sa,"P",{});var pLe=s(mF);VUo=r(pLe,"The model is set in evaluation mode by default using "),the=n(pLe,"CODE",{});var Rct=s(the);XUo=r(Rct,"model.eval()"),Rct.forEach(t),zUo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(pLe,"CODE",{});var Bct=s(ahe);QUo=r(Bct,"model.train()"),Bct.forEach(t),pLe.forEach(t),WUo=i(sa),nhe=n(sa,"P",{});var Pct=s(nhe);HUo=r(Pct,"Examples:"),Pct.forEach(t),UUo=i(sa),m(qA.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),JRe=i(c),sc=n(c,"H2",{class:!0});var s$e=s(sc);gF=n(s$e,"A",{id:!0,class:!0,href:!0});var $ct=s(gF);she=n($ct,"SPAN",{});var Ict=s(she);m(NA.$$.fragment,Ict),Ict.forEach(t),$ct.forEach(t),JUo=i(s$e),lhe=n(s$e,"SPAN",{});var qct=s(lhe);YUo=r(qct,"AutoModelForSemanticSegmentation"),qct.forEach(t),s$e.forEach(t),YRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(jA.$$.fragment,$l),KUo=i($l),lc=n($l,"P",{});var XU=s(lc);ZUo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QG=n(XU,"A",{href:!0});var Nct=s(QG);eJo=r(Nct,"from_pretrained()"),Nct.forEach(t),oJo=r(XU," class method or the "),WG=n(XU,"A",{href:!0});var jct=s(WG);rJo=r(jct,"from_config()"),jct.forEach(t),tJo=r(XU,` class
method.`),XU.forEach(t),aJo=i($l),DA=n($l,"P",{});var l$e=s(DA);nJo=r(l$e,"This class cannot be instantiated directly using "),ihe=n(l$e,"CODE",{});var Dct=s(ihe);sJo=r(Dct,"__init__()"),Dct.forEach(t),lJo=r(l$e," (throws an error)."),l$e.forEach(t),iJo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(GA.$$.fragment,Il),dJo=i(Il),dhe=n(Il,"P",{});var Gct=s(dhe);cJo=r(Gct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gct.forEach(t),fJo=i(Il),ic=n(Il,"P",{});var zU=s(ic);mJo=r(zU,`Note:
Loading a model from its configuration file does `),che=n(zU,"STRONG",{});var Oct=s(che);gJo=r(Oct,"not"),Oct.forEach(t),hJo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(zU,"A",{href:!0});var Vct=s(HG);pJo=r(Vct,"from_pretrained()"),Vct.forEach(t),_Jo=r(zU," to load the model weights."),zU.forEach(t),uJo=i(Il),fhe=n(Il,"P",{});var Xct=s(fhe);bJo=r(Xct,"Examples:"),Xct.forEach(t),FJo=i(Il),m(OA.$$.fragment,Il),Il.forEach(t),vJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(VA.$$.fragment,la),TJo=i(la),mhe=n(la,"P",{});var zct=s(mhe);MJo=r(zct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zct.forEach(t),EJo=i(la),hn=n(la,"P",{});var zE=s(hn);CJo=r(zE,"The model class to instantiate is selected based on the "),ghe=n(zE,"CODE",{});var Qct=s(ghe);wJo=r(Qct,"model_type"),Qct.forEach(t),AJo=r(zE,` property of the config object (either
passed as an argument or loaded from `),hhe=n(zE,"CODE",{});var Wct=s(hhe);yJo=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),LJo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(zE,"CODE",{});var Hct=s(phe);xJo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),kJo=r(zE,":"),zE.forEach(t),SJo=i(la),dc=n(la,"UL",{});var QU=s(dc);hF=n(QU,"LI",{});var _Le=s(hF);_he=n(_Le,"STRONG",{});var Uct=s(_he);RJo=r(Uct,"beit"),Uct.forEach(t),BJo=r(_Le," \u2014 "),UG=n(_Le,"A",{href:!0});var Jct=s(UG);PJo=r(Jct,"BeitForSemanticSegmentation"),Jct.forEach(t),$Jo=r(_Le," (BEiT model)"),_Le.forEach(t),IJo=i(QU),pF=n(QU,"LI",{});var uLe=s(pF);uhe=n(uLe,"STRONG",{});var Yct=s(uhe);qJo=r(Yct,"dpt"),Yct.forEach(t),NJo=r(uLe," \u2014 "),JG=n(uLe,"A",{href:!0});var Kct=s(JG);jJo=r(Kct,"DPTForSemanticSegmentation"),Kct.forEach(t),DJo=r(uLe," (DPT model)"),uLe.forEach(t),GJo=i(QU),_F=n(QU,"LI",{});var bLe=s(_F);bhe=n(bLe,"STRONG",{});var Zct=s(bhe);OJo=r(Zct,"segformer"),Zct.forEach(t),VJo=r(bLe," \u2014 "),YG=n(bLe,"A",{href:!0});var eft=s(YG);XJo=r(eft,"SegformerForSemanticSegmentation"),eft.forEach(t),zJo=r(bLe," (SegFormer model)"),bLe.forEach(t),QU.forEach(t),QJo=i(la),uF=n(la,"P",{});var FLe=s(uF);WJo=r(FLe,"The model is set in evaluation mode by default using "),Fhe=n(FLe,"CODE",{});var oft=s(Fhe);HJo=r(oft,"model.eval()"),oft.forEach(t),UJo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vhe=n(FLe,"CODE",{});var rft=s(vhe);JJo=r(rft,"model.train()"),rft.forEach(t),FLe.forEach(t),YJo=i(la),The=n(la,"P",{});var tft=s(The);KJo=r(tft,"Examples:"),tft.forEach(t),ZJo=i(la),m(XA.$$.fragment,la),la.forEach(t),$l.forEach(t),KRe=i(c),cc=n(c,"H2",{class:!0});var i$e=s(cc);bF=n(i$e,"A",{id:!0,class:!0,href:!0});var aft=s(bF);Mhe=n(aft,"SPAN",{});var nft=s(Mhe);m(zA.$$.fragment,nft),nft.forEach(t),aft.forEach(t),eYo=i(i$e),Ehe=n(i$e,"SPAN",{});var sft=s(Ehe);oYo=r(sft,"AutoModelForInstanceSegmentation"),sft.forEach(t),i$e.forEach(t),ZRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(QA.$$.fragment,ql),rYo=i(ql),fc=n(ql,"P",{});var WU=s(fc);tYo=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),KG=n(WU,"A",{href:!0});var lft=s(KG);aYo=r(lft,"from_pretrained()"),lft.forEach(t),nYo=r(WU," class method or the "),ZG=n(WU,"A",{href:!0});var ift=s(ZG);sYo=r(ift,"from_config()"),ift.forEach(t),lYo=r(WU,` class
method.`),WU.forEach(t),iYo=i(ql),WA=n(ql,"P",{});var d$e=s(WA);dYo=r(d$e,"This class cannot be instantiated directly using "),Che=n(d$e,"CODE",{});var dft=s(Che);cYo=r(dft,"__init__()"),dft.forEach(t),fYo=r(d$e," (throws an error)."),d$e.forEach(t),mYo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(HA.$$.fragment,Nl),gYo=i(Nl),whe=n(Nl,"P",{});var cft=s(whe);hYo=r(cft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),cft.forEach(t),pYo=i(Nl),mc=n(Nl,"P",{});var HU=s(mc);_Yo=r(HU,`Note:
Loading a model from its configuration file does `),Ahe=n(HU,"STRONG",{});var fft=s(Ahe);uYo=r(fft,"not"),fft.forEach(t),bYo=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(HU,"A",{href:!0});var mft=s(eO);FYo=r(mft,"from_pretrained()"),mft.forEach(t),vYo=r(HU," to load the model weights."),HU.forEach(t),TYo=i(Nl),yhe=n(Nl,"P",{});var gft=s(yhe);MYo=r(gft,"Examples:"),gft.forEach(t),EYo=i(Nl),m(UA.$$.fragment,Nl),Nl.forEach(t),CYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(JA.$$.fragment,ia),wYo=i(ia),Lhe=n(ia,"P",{});var hft=s(Lhe);AYo=r(hft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hft.forEach(t),yYo=i(ia),pn=n(ia,"P",{});var QE=s(pn);LYo=r(QE,"The model class to instantiate is selected based on the "),xhe=n(QE,"CODE",{});var pft=s(xhe);xYo=r(pft,"model_type"),pft.forEach(t),kYo=r(QE,` property of the config object (either
passed as an argument or loaded from `),khe=n(QE,"CODE",{});var _ft=s(khe);SYo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),RYo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),She=n(QE,"CODE",{});var uft=s(She);BYo=r(uft,"pretrained_model_name_or_path"),uft.forEach(t),PYo=r(QE,":"),QE.forEach(t),$Yo=i(ia),Rhe=n(ia,"UL",{});var bft=s(Rhe);FF=n(bft,"LI",{});var vLe=s(FF);Bhe=n(vLe,"STRONG",{});var Fft=s(Bhe);IYo=r(Fft,"maskformer"),Fft.forEach(t),qYo=r(vLe," \u2014 "),oO=n(vLe,"A",{href:!0});var vft=s(oO);NYo=r(vft,"MaskFormerForInstanceSegmentation"),vft.forEach(t),jYo=r(vLe," (MaskFormer model)"),vLe.forEach(t),bft.forEach(t),DYo=i(ia),vF=n(ia,"P",{});var TLe=s(vF);GYo=r(TLe,"The model is set in evaluation mode by default using "),Phe=n(TLe,"CODE",{});var Tft=s(Phe);OYo=r(Tft,"model.eval()"),Tft.forEach(t),VYo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$he=n(TLe,"CODE",{});var Mft=s($he);XYo=r(Mft,"model.train()"),Mft.forEach(t),TLe.forEach(t),zYo=i(ia),Ihe=n(ia,"P",{});var Eft=s(Ihe);QYo=r(Eft,"Examples:"),Eft.forEach(t),WYo=i(ia),m(YA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),eBe=i(c),gc=n(c,"H2",{class:!0});var c$e=s(gc);TF=n(c$e,"A",{id:!0,class:!0,href:!0});var Cft=s(TF);qhe=n(Cft,"SPAN",{});var wft=s(qhe);m(KA.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),HYo=i(c$e),Nhe=n(c$e,"SPAN",{});var Aft=s(Nhe);UYo=r(Aft,"TFAutoModel"),Aft.forEach(t),c$e.forEach(t),oBe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(ZA.$$.fragment,jl),JYo=i(jl),hc=n(jl,"P",{});var UU=s(hc);YYo=r(UU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rO=n(UU,"A",{href:!0});var yft=s(rO);KYo=r(yft,"from_pretrained()"),yft.forEach(t),ZYo=r(UU," class method or the "),tO=n(UU,"A",{href:!0});var Lft=s(tO);eKo=r(Lft,"from_config()"),Lft.forEach(t),oKo=r(UU,` class
method.`),UU.forEach(t),rKo=i(jl),e0=n(jl,"P",{});var f$e=s(e0);tKo=r(f$e,"This class cannot be instantiated directly using "),jhe=n(f$e,"CODE",{});var xft=s(jhe);aKo=r(xft,"__init__()"),xft.forEach(t),nKo=r(f$e," (throws an error)."),f$e.forEach(t),sKo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(o0.$$.fragment,Dl),lKo=i(Dl),Dhe=n(Dl,"P",{});var kft=s(Dhe);iKo=r(kft,"Instantiates one of the base model classes of the library from a configuration."),kft.forEach(t),dKo=i(Dl),pc=n(Dl,"P",{});var JU=s(pc);cKo=r(JU,`Note:
Loading a model from its configuration file does `),Ghe=n(JU,"STRONG",{});var Sft=s(Ghe);fKo=r(Sft,"not"),Sft.forEach(t),mKo=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(JU,"A",{href:!0});var Rft=s(aO);gKo=r(Rft,"from_pretrained()"),Rft.forEach(t),hKo=r(JU," to load the model weights."),JU.forEach(t),pKo=i(Dl),Ohe=n(Dl,"P",{});var Bft=s(Ohe);_Ko=r(Bft,"Examples:"),Bft.forEach(t),uKo=i(Dl),m(r0.$$.fragment,Dl),Dl.forEach(t),bKo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(t0.$$.fragment,pa),FKo=i(pa),Vhe=n(pa,"P",{});var Pft=s(Vhe);vKo=r(Pft,"Instantiate one of the base model classes of the library from a pretrained model."),Pft.forEach(t),TKo=i(pa),_n=n(pa,"P",{});var WE=s(_n);MKo=r(WE,"The model class to instantiate is selected based on the "),Xhe=n(WE,"CODE",{});var $ft=s(Xhe);EKo=r($ft,"model_type"),$ft.forEach(t),CKo=r(WE,` property of the config object (either
passed as an argument or loaded from `),zhe=n(WE,"CODE",{});var Ift=s(zhe);wKo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),AKo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(WE,"CODE",{});var qft=s(Qhe);yKo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),LKo=r(WE,":"),WE.forEach(t),xKo=i(pa),x=n(pa,"UL",{});var k=s(x);MF=n(k,"LI",{});var MLe=s(MF);Whe=n(MLe,"STRONG",{});var Nft=s(Whe);kKo=r(Nft,"albert"),Nft.forEach(t),SKo=r(MLe," \u2014 "),nO=n(MLe,"A",{href:!0});var jft=s(nO);RKo=r(jft,"TFAlbertModel"),jft.forEach(t),BKo=r(MLe," (ALBERT model)"),MLe.forEach(t),PKo=i(k),EF=n(k,"LI",{});var ELe=s(EF);Hhe=n(ELe,"STRONG",{});var Dft=s(Hhe);$Ko=r(Dft,"bart"),Dft.forEach(t),IKo=r(ELe," \u2014 "),sO=n(ELe,"A",{href:!0});var Gft=s(sO);qKo=r(Gft,"TFBartModel"),Gft.forEach(t),NKo=r(ELe," (BART model)"),ELe.forEach(t),jKo=i(k),CF=n(k,"LI",{});var CLe=s(CF);Uhe=n(CLe,"STRONG",{});var Oft=s(Uhe);DKo=r(Oft,"bert"),Oft.forEach(t),GKo=r(CLe," \u2014 "),lO=n(CLe,"A",{href:!0});var Vft=s(lO);OKo=r(Vft,"TFBertModel"),Vft.forEach(t),VKo=r(CLe," (BERT model)"),CLe.forEach(t),XKo=i(k),wF=n(k,"LI",{});var wLe=s(wF);Jhe=n(wLe,"STRONG",{});var Xft=s(Jhe);zKo=r(Xft,"blenderbot"),Xft.forEach(t),QKo=r(wLe," \u2014 "),iO=n(wLe,"A",{href:!0});var zft=s(iO);WKo=r(zft,"TFBlenderbotModel"),zft.forEach(t),HKo=r(wLe," (Blenderbot model)"),wLe.forEach(t),UKo=i(k),AF=n(k,"LI",{});var ALe=s(AF);Yhe=n(ALe,"STRONG",{});var Qft=s(Yhe);JKo=r(Qft,"blenderbot-small"),Qft.forEach(t),YKo=r(ALe," \u2014 "),dO=n(ALe,"A",{href:!0});var Wft=s(dO);KKo=r(Wft,"TFBlenderbotSmallModel"),Wft.forEach(t),ZKo=r(ALe," (BlenderbotSmall model)"),ALe.forEach(t),eZo=i(k),yF=n(k,"LI",{});var yLe=s(yF);Khe=n(yLe,"STRONG",{});var Hft=s(Khe);oZo=r(Hft,"camembert"),Hft.forEach(t),rZo=r(yLe," \u2014 "),cO=n(yLe,"A",{href:!0});var Uft=s(cO);tZo=r(Uft,"TFCamembertModel"),Uft.forEach(t),aZo=r(yLe," (CamemBERT model)"),yLe.forEach(t),nZo=i(k),LF=n(k,"LI",{});var LLe=s(LF);Zhe=n(LLe,"STRONG",{});var Jft=s(Zhe);sZo=r(Jft,"clip"),Jft.forEach(t),lZo=r(LLe," \u2014 "),fO=n(LLe,"A",{href:!0});var Yft=s(fO);iZo=r(Yft,"TFCLIPModel"),Yft.forEach(t),dZo=r(LLe," (CLIP model)"),LLe.forEach(t),cZo=i(k),xF=n(k,"LI",{});var xLe=s(xF);epe=n(xLe,"STRONG",{});var Kft=s(epe);fZo=r(Kft,"convbert"),Kft.forEach(t),mZo=r(xLe," \u2014 "),mO=n(xLe,"A",{href:!0});var Zft=s(mO);gZo=r(Zft,"TFConvBertModel"),Zft.forEach(t),hZo=r(xLe," (ConvBERT model)"),xLe.forEach(t),pZo=i(k),kF=n(k,"LI",{});var kLe=s(kF);ope=n(kLe,"STRONG",{});var emt=s(ope);_Zo=r(emt,"convnext"),emt.forEach(t),uZo=r(kLe," \u2014 "),gO=n(kLe,"A",{href:!0});var omt=s(gO);bZo=r(omt,"TFConvNextModel"),omt.forEach(t),FZo=r(kLe," (ConvNext model)"),kLe.forEach(t),vZo=i(k),SF=n(k,"LI",{});var SLe=s(SF);rpe=n(SLe,"STRONG",{});var rmt=s(rpe);TZo=r(rmt,"ctrl"),rmt.forEach(t),MZo=r(SLe," \u2014 "),hO=n(SLe,"A",{href:!0});var tmt=s(hO);EZo=r(tmt,"TFCTRLModel"),tmt.forEach(t),CZo=r(SLe," (CTRL model)"),SLe.forEach(t),wZo=i(k),RF=n(k,"LI",{});var RLe=s(RF);tpe=n(RLe,"STRONG",{});var amt=s(tpe);AZo=r(amt,"deberta"),amt.forEach(t),yZo=r(RLe," \u2014 "),pO=n(RLe,"A",{href:!0});var nmt=s(pO);LZo=r(nmt,"TFDebertaModel"),nmt.forEach(t),xZo=r(RLe," (DeBERTa model)"),RLe.forEach(t),kZo=i(k),BF=n(k,"LI",{});var BLe=s(BF);ape=n(BLe,"STRONG",{});var smt=s(ape);SZo=r(smt,"deberta-v2"),smt.forEach(t),RZo=r(BLe," \u2014 "),_O=n(BLe,"A",{href:!0});var lmt=s(_O);BZo=r(lmt,"TFDebertaV2Model"),lmt.forEach(t),PZo=r(BLe," (DeBERTa-v2 model)"),BLe.forEach(t),$Zo=i(k),PF=n(k,"LI",{});var PLe=s(PF);npe=n(PLe,"STRONG",{});var imt=s(npe);IZo=r(imt,"distilbert"),imt.forEach(t),qZo=r(PLe," \u2014 "),uO=n(PLe,"A",{href:!0});var dmt=s(uO);NZo=r(dmt,"TFDistilBertModel"),dmt.forEach(t),jZo=r(PLe," (DistilBERT model)"),PLe.forEach(t),DZo=i(k),$F=n(k,"LI",{});var $Le=s($F);spe=n($Le,"STRONG",{});var cmt=s(spe);GZo=r(cmt,"dpr"),cmt.forEach(t),OZo=r($Le," \u2014 "),bO=n($Le,"A",{href:!0});var fmt=s(bO);VZo=r(fmt,"TFDPRQuestionEncoder"),fmt.forEach(t),XZo=r($Le," (DPR model)"),$Le.forEach(t),zZo=i(k),IF=n(k,"LI",{});var ILe=s(IF);lpe=n(ILe,"STRONG",{});var mmt=s(lpe);QZo=r(mmt,"electra"),mmt.forEach(t),WZo=r(ILe," \u2014 "),FO=n(ILe,"A",{href:!0});var gmt=s(FO);HZo=r(gmt,"TFElectraModel"),gmt.forEach(t),UZo=r(ILe," (ELECTRA model)"),ILe.forEach(t),JZo=i(k),qF=n(k,"LI",{});var qLe=s(qF);ipe=n(qLe,"STRONG",{});var hmt=s(ipe);YZo=r(hmt,"flaubert"),hmt.forEach(t),KZo=r(qLe," \u2014 "),vO=n(qLe,"A",{href:!0});var pmt=s(vO);ZZo=r(pmt,"TFFlaubertModel"),pmt.forEach(t),eer=r(qLe," (FlauBERT model)"),qLe.forEach(t),oer=i(k),Gs=n(k,"LI",{});var d9=s(Gs);dpe=n(d9,"STRONG",{});var _mt=s(dpe);rer=r(_mt,"funnel"),_mt.forEach(t),ter=r(d9," \u2014 "),TO=n(d9,"A",{href:!0});var umt=s(TO);aer=r(umt,"TFFunnelModel"),umt.forEach(t),ner=r(d9," or "),MO=n(d9,"A",{href:!0});var bmt=s(MO);ser=r(bmt,"TFFunnelBaseModel"),bmt.forEach(t),ler=r(d9," (Funnel Transformer model)"),d9.forEach(t),ier=i(k),NF=n(k,"LI",{});var NLe=s(NF);cpe=n(NLe,"STRONG",{});var Fmt=s(cpe);der=r(Fmt,"gpt2"),Fmt.forEach(t),cer=r(NLe," \u2014 "),EO=n(NLe,"A",{href:!0});var vmt=s(EO);fer=r(vmt,"TFGPT2Model"),vmt.forEach(t),mer=r(NLe," (OpenAI GPT-2 model)"),NLe.forEach(t),ger=i(k),jF=n(k,"LI",{});var jLe=s(jF);fpe=n(jLe,"STRONG",{});var Tmt=s(fpe);her=r(Tmt,"gptj"),Tmt.forEach(t),per=r(jLe," \u2014 "),CO=n(jLe,"A",{href:!0});var Mmt=s(CO);_er=r(Mmt,"TFGPTJModel"),Mmt.forEach(t),uer=r(jLe," (GPT-J model)"),jLe.forEach(t),ber=i(k),DF=n(k,"LI",{});var DLe=s(DF);mpe=n(DLe,"STRONG",{});var Emt=s(mpe);Fer=r(Emt,"hubert"),Emt.forEach(t),ver=r(DLe," \u2014 "),wO=n(DLe,"A",{href:!0});var Cmt=s(wO);Ter=r(Cmt,"TFHubertModel"),Cmt.forEach(t),Mer=r(DLe," (Hubert model)"),DLe.forEach(t),Eer=i(k),GF=n(k,"LI",{});var GLe=s(GF);gpe=n(GLe,"STRONG",{});var wmt=s(gpe);Cer=r(wmt,"layoutlm"),wmt.forEach(t),wer=r(GLe," \u2014 "),AO=n(GLe,"A",{href:!0});var Amt=s(AO);Aer=r(Amt,"TFLayoutLMModel"),Amt.forEach(t),yer=r(GLe," (LayoutLM model)"),GLe.forEach(t),Ler=i(k),OF=n(k,"LI",{});var OLe=s(OF);hpe=n(OLe,"STRONG",{});var ymt=s(hpe);xer=r(ymt,"led"),ymt.forEach(t),ker=r(OLe," \u2014 "),yO=n(OLe,"A",{href:!0});var Lmt=s(yO);Ser=r(Lmt,"TFLEDModel"),Lmt.forEach(t),Rer=r(OLe," (LED model)"),OLe.forEach(t),Ber=i(k),VF=n(k,"LI",{});var VLe=s(VF);ppe=n(VLe,"STRONG",{});var xmt=s(ppe);Per=r(xmt,"longformer"),xmt.forEach(t),$er=r(VLe," \u2014 "),LO=n(VLe,"A",{href:!0});var kmt=s(LO);Ier=r(kmt,"TFLongformerModel"),kmt.forEach(t),qer=r(VLe," (Longformer model)"),VLe.forEach(t),Ner=i(k),XF=n(k,"LI",{});var XLe=s(XF);_pe=n(XLe,"STRONG",{});var Smt=s(_pe);jer=r(Smt,"lxmert"),Smt.forEach(t),Der=r(XLe," \u2014 "),xO=n(XLe,"A",{href:!0});var Rmt=s(xO);Ger=r(Rmt,"TFLxmertModel"),Rmt.forEach(t),Oer=r(XLe," (LXMERT model)"),XLe.forEach(t),Ver=i(k),zF=n(k,"LI",{});var zLe=s(zF);upe=n(zLe,"STRONG",{});var Bmt=s(upe);Xer=r(Bmt,"marian"),Bmt.forEach(t),zer=r(zLe," \u2014 "),kO=n(zLe,"A",{href:!0});var Pmt=s(kO);Qer=r(Pmt,"TFMarianModel"),Pmt.forEach(t),Wer=r(zLe," (Marian model)"),zLe.forEach(t),Her=i(k),QF=n(k,"LI",{});var QLe=s(QF);bpe=n(QLe,"STRONG",{});var $mt=s(bpe);Uer=r($mt,"mbart"),$mt.forEach(t),Jer=r(QLe," \u2014 "),SO=n(QLe,"A",{href:!0});var Imt=s(SO);Yer=r(Imt,"TFMBartModel"),Imt.forEach(t),Ker=r(QLe," (mBART model)"),QLe.forEach(t),Zer=i(k),WF=n(k,"LI",{});var WLe=s(WF);Fpe=n(WLe,"STRONG",{});var qmt=s(Fpe);eor=r(qmt,"mobilebert"),qmt.forEach(t),oor=r(WLe," \u2014 "),RO=n(WLe,"A",{href:!0});var Nmt=s(RO);ror=r(Nmt,"TFMobileBertModel"),Nmt.forEach(t),tor=r(WLe," (MobileBERT model)"),WLe.forEach(t),aor=i(k),HF=n(k,"LI",{});var HLe=s(HF);vpe=n(HLe,"STRONG",{});var jmt=s(vpe);nor=r(jmt,"mpnet"),jmt.forEach(t),sor=r(HLe," \u2014 "),BO=n(HLe,"A",{href:!0});var Dmt=s(BO);lor=r(Dmt,"TFMPNetModel"),Dmt.forEach(t),ior=r(HLe," (MPNet model)"),HLe.forEach(t),dor=i(k),UF=n(k,"LI",{});var ULe=s(UF);Tpe=n(ULe,"STRONG",{});var Gmt=s(Tpe);cor=r(Gmt,"mt5"),Gmt.forEach(t),mor=r(ULe," \u2014 "),PO=n(ULe,"A",{href:!0});var Omt=s(PO);gor=r(Omt,"TFMT5Model"),Omt.forEach(t),hor=r(ULe," (mT5 model)"),ULe.forEach(t),por=i(k),JF=n(k,"LI",{});var JLe=s(JF);Mpe=n(JLe,"STRONG",{});var Vmt=s(Mpe);_or=r(Vmt,"openai-gpt"),Vmt.forEach(t),uor=r(JLe," \u2014 "),$O=n(JLe,"A",{href:!0});var Xmt=s($O);bor=r(Xmt,"TFOpenAIGPTModel"),Xmt.forEach(t),For=r(JLe," (OpenAI GPT model)"),JLe.forEach(t),vor=i(k),YF=n(k,"LI",{});var YLe=s(YF);Epe=n(YLe,"STRONG",{});var zmt=s(Epe);Tor=r(zmt,"pegasus"),zmt.forEach(t),Mor=r(YLe," \u2014 "),IO=n(YLe,"A",{href:!0});var Qmt=s(IO);Eor=r(Qmt,"TFPegasusModel"),Qmt.forEach(t),Cor=r(YLe," (Pegasus model)"),YLe.forEach(t),wor=i(k),KF=n(k,"LI",{});var KLe=s(KF);Cpe=n(KLe,"STRONG",{});var Wmt=s(Cpe);Aor=r(Wmt,"rembert"),Wmt.forEach(t),yor=r(KLe," \u2014 "),qO=n(KLe,"A",{href:!0});var Hmt=s(qO);Lor=r(Hmt,"TFRemBertModel"),Hmt.forEach(t),xor=r(KLe," (RemBERT model)"),KLe.forEach(t),kor=i(k),ZF=n(k,"LI",{});var ZLe=s(ZF);wpe=n(ZLe,"STRONG",{});var Umt=s(wpe);Sor=r(Umt,"roberta"),Umt.forEach(t),Ror=r(ZLe," \u2014 "),NO=n(ZLe,"A",{href:!0});var Jmt=s(NO);Bor=r(Jmt,"TFRobertaModel"),Jmt.forEach(t),Por=r(ZLe," (RoBERTa model)"),ZLe.forEach(t),$or=i(k),ev=n(k,"LI",{});var e8e=s(ev);Ape=n(e8e,"STRONG",{});var Ymt=s(Ape);Ior=r(Ymt,"roformer"),Ymt.forEach(t),qor=r(e8e," \u2014 "),jO=n(e8e,"A",{href:!0});var Kmt=s(jO);Nor=r(Kmt,"TFRoFormerModel"),Kmt.forEach(t),jor=r(e8e," (RoFormer model)"),e8e.forEach(t),Dor=i(k),ov=n(k,"LI",{});var o8e=s(ov);ype=n(o8e,"STRONG",{});var Zmt=s(ype);Gor=r(Zmt,"speech_to_text"),Zmt.forEach(t),Oor=r(o8e," \u2014 "),DO=n(o8e,"A",{href:!0});var egt=s(DO);Vor=r(egt,"TFSpeech2TextModel"),egt.forEach(t),Xor=r(o8e," (Speech2Text model)"),o8e.forEach(t),zor=i(k),rv=n(k,"LI",{});var r8e=s(rv);Lpe=n(r8e,"STRONG",{});var ogt=s(Lpe);Qor=r(ogt,"t5"),ogt.forEach(t),Wor=r(r8e," \u2014 "),GO=n(r8e,"A",{href:!0});var rgt=s(GO);Hor=r(rgt,"TFT5Model"),rgt.forEach(t),Uor=r(r8e," (T5 model)"),r8e.forEach(t),Jor=i(k),tv=n(k,"LI",{});var t8e=s(tv);xpe=n(t8e,"STRONG",{});var tgt=s(xpe);Yor=r(tgt,"tapas"),tgt.forEach(t),Kor=r(t8e," \u2014 "),OO=n(t8e,"A",{href:!0});var agt=s(OO);Zor=r(agt,"TFTapasModel"),agt.forEach(t),err=r(t8e," (TAPAS model)"),t8e.forEach(t),orr=i(k),av=n(k,"LI",{});var a8e=s(av);kpe=n(a8e,"STRONG",{});var ngt=s(kpe);rrr=r(ngt,"transfo-xl"),ngt.forEach(t),trr=r(a8e," \u2014 "),VO=n(a8e,"A",{href:!0});var sgt=s(VO);arr=r(sgt,"TFTransfoXLModel"),sgt.forEach(t),nrr=r(a8e," (Transformer-XL model)"),a8e.forEach(t),srr=i(k),nv=n(k,"LI",{});var n8e=s(nv);Spe=n(n8e,"STRONG",{});var lgt=s(Spe);lrr=r(lgt,"vit"),lgt.forEach(t),irr=r(n8e," \u2014 "),XO=n(n8e,"A",{href:!0});var igt=s(XO);drr=r(igt,"TFViTModel"),igt.forEach(t),crr=r(n8e," (ViT model)"),n8e.forEach(t),frr=i(k),sv=n(k,"LI",{});var s8e=s(sv);Rpe=n(s8e,"STRONG",{});var dgt=s(Rpe);mrr=r(dgt,"vit_mae"),dgt.forEach(t),grr=r(s8e," \u2014 "),zO=n(s8e,"A",{href:!0});var cgt=s(zO);hrr=r(cgt,"TFViTMAEModel"),cgt.forEach(t),prr=r(s8e," (ViTMAE model)"),s8e.forEach(t),_rr=i(k),lv=n(k,"LI",{});var l8e=s(lv);Bpe=n(l8e,"STRONG",{});var fgt=s(Bpe);urr=r(fgt,"wav2vec2"),fgt.forEach(t),brr=r(l8e," \u2014 "),QO=n(l8e,"A",{href:!0});var mgt=s(QO);Frr=r(mgt,"TFWav2Vec2Model"),mgt.forEach(t),vrr=r(l8e," (Wav2Vec2 model)"),l8e.forEach(t),Trr=i(k),iv=n(k,"LI",{});var i8e=s(iv);Ppe=n(i8e,"STRONG",{});var ggt=s(Ppe);Mrr=r(ggt,"xlm"),ggt.forEach(t),Err=r(i8e," \u2014 "),WO=n(i8e,"A",{href:!0});var hgt=s(WO);Crr=r(hgt,"TFXLMModel"),hgt.forEach(t),wrr=r(i8e," (XLM model)"),i8e.forEach(t),Arr=i(k),dv=n(k,"LI",{});var d8e=s(dv);$pe=n(d8e,"STRONG",{});var pgt=s($pe);yrr=r(pgt,"xlm-roberta"),pgt.forEach(t),Lrr=r(d8e," \u2014 "),HO=n(d8e,"A",{href:!0});var _gt=s(HO);xrr=r(_gt,"TFXLMRobertaModel"),_gt.forEach(t),krr=r(d8e," (XLM-RoBERTa model)"),d8e.forEach(t),Srr=i(k),cv=n(k,"LI",{});var c8e=s(cv);Ipe=n(c8e,"STRONG",{});var ugt=s(Ipe);Rrr=r(ugt,"xlnet"),ugt.forEach(t),Brr=r(c8e," \u2014 "),UO=n(c8e,"A",{href:!0});var bgt=s(UO);Prr=r(bgt,"TFXLNetModel"),bgt.forEach(t),$rr=r(c8e," (XLNet model)"),c8e.forEach(t),k.forEach(t),Irr=i(pa),qpe=n(pa,"P",{});var Fgt=s(qpe);qrr=r(Fgt,"Examples:"),Fgt.forEach(t),Nrr=i(pa),m(a0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),rBe=i(c),_c=n(c,"H2",{class:!0});var m$e=s(_c);fv=n(m$e,"A",{id:!0,class:!0,href:!0});var vgt=s(fv);Npe=n(vgt,"SPAN",{});var Tgt=s(Npe);m(n0.$$.fragment,Tgt),Tgt.forEach(t),vgt.forEach(t),jrr=i(m$e),jpe=n(m$e,"SPAN",{});var Mgt=s(jpe);Drr=r(Mgt,"TFAutoModelForPreTraining"),Mgt.forEach(t),m$e.forEach(t),tBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(s0.$$.fragment,Gl),Grr=i(Gl),uc=n(Gl,"P",{});var YU=s(uc);Orr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),JO=n(YU,"A",{href:!0});var Egt=s(JO);Vrr=r(Egt,"from_pretrained()"),Egt.forEach(t),Xrr=r(YU," class method or the "),YO=n(YU,"A",{href:!0});var Cgt=s(YO);zrr=r(Cgt,"from_config()"),Cgt.forEach(t),Qrr=r(YU,` class
method.`),YU.forEach(t),Wrr=i(Gl),l0=n(Gl,"P",{});var g$e=s(l0);Hrr=r(g$e,"This class cannot be instantiated directly using "),Dpe=n(g$e,"CODE",{});var wgt=s(Dpe);Urr=r(wgt,"__init__()"),wgt.forEach(t),Jrr=r(g$e," (throws an error)."),g$e.forEach(t),Yrr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(i0.$$.fragment,Ol),Krr=i(Ol),Gpe=n(Ol,"P",{});var Agt=s(Gpe);Zrr=r(Agt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Agt.forEach(t),etr=i(Ol),bc=n(Ol,"P",{});var KU=s(bc);otr=r(KU,`Note:
Loading a model from its configuration file does `),Ope=n(KU,"STRONG",{});var ygt=s(Ope);rtr=r(ygt,"not"),ygt.forEach(t),ttr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(KU,"A",{href:!0});var Lgt=s(KO);atr=r(Lgt,"from_pretrained()"),Lgt.forEach(t),ntr=r(KU," to load the model weights."),KU.forEach(t),str=i(Ol),Vpe=n(Ol,"P",{});var xgt=s(Vpe);ltr=r(xgt,"Examples:"),xgt.forEach(t),itr=i(Ol),m(d0.$$.fragment,Ol),Ol.forEach(t),dtr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(c0.$$.fragment,_a),ctr=i(_a),Xpe=n(_a,"P",{});var kgt=s(Xpe);ftr=r(kgt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),kgt.forEach(t),mtr=i(_a),un=n(_a,"P",{});var HE=s(un);gtr=r(HE,"The model class to instantiate is selected based on the "),zpe=n(HE,"CODE",{});var Sgt=s(zpe);htr=r(Sgt,"model_type"),Sgt.forEach(t),ptr=r(HE,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(HE,"CODE",{});var Rgt=s(Qpe);_tr=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),utr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wpe=n(HE,"CODE",{});var Bgt=s(Wpe);btr=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),Ftr=r(HE,":"),HE.forEach(t),vtr=i(_a),H=n(_a,"UL",{});var U=s(H);mv=n(U,"LI",{});var f8e=s(mv);Hpe=n(f8e,"STRONG",{});var Pgt=s(Hpe);Ttr=r(Pgt,"albert"),Pgt.forEach(t),Mtr=r(f8e," \u2014 "),ZO=n(f8e,"A",{href:!0});var $gt=s(ZO);Etr=r($gt,"TFAlbertForPreTraining"),$gt.forEach(t),Ctr=r(f8e," (ALBERT model)"),f8e.forEach(t),wtr=i(U),gv=n(U,"LI",{});var m8e=s(gv);Upe=n(m8e,"STRONG",{});var Igt=s(Upe);Atr=r(Igt,"bart"),Igt.forEach(t),ytr=r(m8e," \u2014 "),eV=n(m8e,"A",{href:!0});var qgt=s(eV);Ltr=r(qgt,"TFBartForConditionalGeneration"),qgt.forEach(t),xtr=r(m8e," (BART model)"),m8e.forEach(t),ktr=i(U),hv=n(U,"LI",{});var g8e=s(hv);Jpe=n(g8e,"STRONG",{});var Ngt=s(Jpe);Str=r(Ngt,"bert"),Ngt.forEach(t),Rtr=r(g8e," \u2014 "),oV=n(g8e,"A",{href:!0});var jgt=s(oV);Btr=r(jgt,"TFBertForPreTraining"),jgt.forEach(t),Ptr=r(g8e," (BERT model)"),g8e.forEach(t),$tr=i(U),pv=n(U,"LI",{});var h8e=s(pv);Ype=n(h8e,"STRONG",{});var Dgt=s(Ype);Itr=r(Dgt,"camembert"),Dgt.forEach(t),qtr=r(h8e," \u2014 "),rV=n(h8e,"A",{href:!0});var Ggt=s(rV);Ntr=r(Ggt,"TFCamembertForMaskedLM"),Ggt.forEach(t),jtr=r(h8e," (CamemBERT model)"),h8e.forEach(t),Dtr=i(U),_v=n(U,"LI",{});var p8e=s(_v);Kpe=n(p8e,"STRONG",{});var Ogt=s(Kpe);Gtr=r(Ogt,"ctrl"),Ogt.forEach(t),Otr=r(p8e," \u2014 "),tV=n(p8e,"A",{href:!0});var Vgt=s(tV);Vtr=r(Vgt,"TFCTRLLMHeadModel"),Vgt.forEach(t),Xtr=r(p8e," (CTRL model)"),p8e.forEach(t),ztr=i(U),uv=n(U,"LI",{});var _8e=s(uv);Zpe=n(_8e,"STRONG",{});var Xgt=s(Zpe);Qtr=r(Xgt,"distilbert"),Xgt.forEach(t),Wtr=r(_8e," \u2014 "),aV=n(_8e,"A",{href:!0});var zgt=s(aV);Htr=r(zgt,"TFDistilBertForMaskedLM"),zgt.forEach(t),Utr=r(_8e," (DistilBERT model)"),_8e.forEach(t),Jtr=i(U),bv=n(U,"LI",{});var u8e=s(bv);e_e=n(u8e,"STRONG",{});var Qgt=s(e_e);Ytr=r(Qgt,"electra"),Qgt.forEach(t),Ktr=r(u8e," \u2014 "),nV=n(u8e,"A",{href:!0});var Wgt=s(nV);Ztr=r(Wgt,"TFElectraForPreTraining"),Wgt.forEach(t),ear=r(u8e," (ELECTRA model)"),u8e.forEach(t),oar=i(U),Fv=n(U,"LI",{});var b8e=s(Fv);o_e=n(b8e,"STRONG",{});var Hgt=s(o_e);rar=r(Hgt,"flaubert"),Hgt.forEach(t),tar=r(b8e," \u2014 "),sV=n(b8e,"A",{href:!0});var Ugt=s(sV);aar=r(Ugt,"TFFlaubertWithLMHeadModel"),Ugt.forEach(t),nar=r(b8e," (FlauBERT model)"),b8e.forEach(t),sar=i(U),vv=n(U,"LI",{});var F8e=s(vv);r_e=n(F8e,"STRONG",{});var Jgt=s(r_e);lar=r(Jgt,"funnel"),Jgt.forEach(t),iar=r(F8e," \u2014 "),lV=n(F8e,"A",{href:!0});var Ygt=s(lV);dar=r(Ygt,"TFFunnelForPreTraining"),Ygt.forEach(t),car=r(F8e," (Funnel Transformer model)"),F8e.forEach(t),far=i(U),Tv=n(U,"LI",{});var v8e=s(Tv);t_e=n(v8e,"STRONG",{});var Kgt=s(t_e);mar=r(Kgt,"gpt2"),Kgt.forEach(t),gar=r(v8e," \u2014 "),iV=n(v8e,"A",{href:!0});var Zgt=s(iV);har=r(Zgt,"TFGPT2LMHeadModel"),Zgt.forEach(t),par=r(v8e," (OpenAI GPT-2 model)"),v8e.forEach(t),_ar=i(U),Mv=n(U,"LI",{});var T8e=s(Mv);a_e=n(T8e,"STRONG",{});var eht=s(a_e);uar=r(eht,"layoutlm"),eht.forEach(t),bar=r(T8e," \u2014 "),dV=n(T8e,"A",{href:!0});var oht=s(dV);Far=r(oht,"TFLayoutLMForMaskedLM"),oht.forEach(t),Tar=r(T8e," (LayoutLM model)"),T8e.forEach(t),Mar=i(U),Ev=n(U,"LI",{});var M8e=s(Ev);n_e=n(M8e,"STRONG",{});var rht=s(n_e);Ear=r(rht,"lxmert"),rht.forEach(t),Car=r(M8e," \u2014 "),cV=n(M8e,"A",{href:!0});var tht=s(cV);war=r(tht,"TFLxmertForPreTraining"),tht.forEach(t),Aar=r(M8e," (LXMERT model)"),M8e.forEach(t),yar=i(U),Cv=n(U,"LI",{});var E8e=s(Cv);s_e=n(E8e,"STRONG",{});var aht=s(s_e);Lar=r(aht,"mobilebert"),aht.forEach(t),xar=r(E8e," \u2014 "),fV=n(E8e,"A",{href:!0});var nht=s(fV);kar=r(nht,"TFMobileBertForPreTraining"),nht.forEach(t),Sar=r(E8e," (MobileBERT model)"),E8e.forEach(t),Rar=i(U),wv=n(U,"LI",{});var C8e=s(wv);l_e=n(C8e,"STRONG",{});var sht=s(l_e);Bar=r(sht,"mpnet"),sht.forEach(t),Par=r(C8e," \u2014 "),mV=n(C8e,"A",{href:!0});var lht=s(mV);$ar=r(lht,"TFMPNetForMaskedLM"),lht.forEach(t),Iar=r(C8e," (MPNet model)"),C8e.forEach(t),qar=i(U),Av=n(U,"LI",{});var w8e=s(Av);i_e=n(w8e,"STRONG",{});var iht=s(i_e);Nar=r(iht,"openai-gpt"),iht.forEach(t),jar=r(w8e," \u2014 "),gV=n(w8e,"A",{href:!0});var dht=s(gV);Dar=r(dht,"TFOpenAIGPTLMHeadModel"),dht.forEach(t),Gar=r(w8e," (OpenAI GPT model)"),w8e.forEach(t),Oar=i(U),yv=n(U,"LI",{});var A8e=s(yv);d_e=n(A8e,"STRONG",{});var cht=s(d_e);Var=r(cht,"roberta"),cht.forEach(t),Xar=r(A8e," \u2014 "),hV=n(A8e,"A",{href:!0});var fht=s(hV);zar=r(fht,"TFRobertaForMaskedLM"),fht.forEach(t),Qar=r(A8e," (RoBERTa model)"),A8e.forEach(t),War=i(U),Lv=n(U,"LI",{});var y8e=s(Lv);c_e=n(y8e,"STRONG",{});var mht=s(c_e);Har=r(mht,"t5"),mht.forEach(t),Uar=r(y8e," \u2014 "),pV=n(y8e,"A",{href:!0});var ght=s(pV);Jar=r(ght,"TFT5ForConditionalGeneration"),ght.forEach(t),Yar=r(y8e," (T5 model)"),y8e.forEach(t),Kar=i(U),xv=n(U,"LI",{});var L8e=s(xv);f_e=n(L8e,"STRONG",{});var hht=s(f_e);Zar=r(hht,"tapas"),hht.forEach(t),enr=r(L8e," \u2014 "),_V=n(L8e,"A",{href:!0});var pht=s(_V);onr=r(pht,"TFTapasForMaskedLM"),pht.forEach(t),rnr=r(L8e," (TAPAS model)"),L8e.forEach(t),tnr=i(U),kv=n(U,"LI",{});var x8e=s(kv);m_e=n(x8e,"STRONG",{});var _ht=s(m_e);anr=r(_ht,"transfo-xl"),_ht.forEach(t),nnr=r(x8e," \u2014 "),uV=n(x8e,"A",{href:!0});var uht=s(uV);snr=r(uht,"TFTransfoXLLMHeadModel"),uht.forEach(t),lnr=r(x8e," (Transformer-XL model)"),x8e.forEach(t),inr=i(U),Sv=n(U,"LI",{});var k8e=s(Sv);g_e=n(k8e,"STRONG",{});var bht=s(g_e);dnr=r(bht,"vit_mae"),bht.forEach(t),cnr=r(k8e," \u2014 "),bV=n(k8e,"A",{href:!0});var Fht=s(bV);fnr=r(Fht,"TFViTMAEForPreTraining"),Fht.forEach(t),mnr=r(k8e," (ViTMAE model)"),k8e.forEach(t),gnr=i(U),Rv=n(U,"LI",{});var S8e=s(Rv);h_e=n(S8e,"STRONG",{});var vht=s(h_e);hnr=r(vht,"xlm"),vht.forEach(t),pnr=r(S8e," \u2014 "),FV=n(S8e,"A",{href:!0});var Tht=s(FV);_nr=r(Tht,"TFXLMWithLMHeadModel"),Tht.forEach(t),unr=r(S8e," (XLM model)"),S8e.forEach(t),bnr=i(U),Bv=n(U,"LI",{});var R8e=s(Bv);p_e=n(R8e,"STRONG",{});var Mht=s(p_e);Fnr=r(Mht,"xlm-roberta"),Mht.forEach(t),vnr=r(R8e," \u2014 "),vV=n(R8e,"A",{href:!0});var Eht=s(vV);Tnr=r(Eht,"TFXLMRobertaForMaskedLM"),Eht.forEach(t),Mnr=r(R8e," (XLM-RoBERTa model)"),R8e.forEach(t),Enr=i(U),Pv=n(U,"LI",{});var B8e=s(Pv);__e=n(B8e,"STRONG",{});var Cht=s(__e);Cnr=r(Cht,"xlnet"),Cht.forEach(t),wnr=r(B8e," \u2014 "),TV=n(B8e,"A",{href:!0});var wht=s(TV);Anr=r(wht,"TFXLNetLMHeadModel"),wht.forEach(t),ynr=r(B8e," (XLNet model)"),B8e.forEach(t),U.forEach(t),Lnr=i(_a),u_e=n(_a,"P",{});var Aht=s(u_e);xnr=r(Aht,"Examples:"),Aht.forEach(t),knr=i(_a),m(f0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),aBe=i(c),Fc=n(c,"H2",{class:!0});var h$e=s(Fc);$v=n(h$e,"A",{id:!0,class:!0,href:!0});var yht=s($v);b_e=n(yht,"SPAN",{});var Lht=s(b_e);m(m0.$$.fragment,Lht),Lht.forEach(t),yht.forEach(t),Snr=i(h$e),F_e=n(h$e,"SPAN",{});var xht=s(F_e);Rnr=r(xht,"TFAutoModelForCausalLM"),xht.forEach(t),h$e.forEach(t),nBe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(g0.$$.fragment,Vl),Bnr=i(Vl),vc=n(Vl,"P",{});var ZU=s(vc);Pnr=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MV=n(ZU,"A",{href:!0});var kht=s(MV);$nr=r(kht,"from_pretrained()"),kht.forEach(t),Inr=r(ZU," class method or the "),EV=n(ZU,"A",{href:!0});var Sht=s(EV);qnr=r(Sht,"from_config()"),Sht.forEach(t),Nnr=r(ZU,` class
method.`),ZU.forEach(t),jnr=i(Vl),h0=n(Vl,"P",{});var p$e=s(h0);Dnr=r(p$e,"This class cannot be instantiated directly using "),v_e=n(p$e,"CODE",{});var Rht=s(v_e);Gnr=r(Rht,"__init__()"),Rht.forEach(t),Onr=r(p$e," (throws an error)."),p$e.forEach(t),Vnr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(p0.$$.fragment,Xl),Xnr=i(Xl),T_e=n(Xl,"P",{});var Bht=s(T_e);znr=r(Bht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Bht.forEach(t),Qnr=i(Xl),Tc=n(Xl,"P",{});var eJ=s(Tc);Wnr=r(eJ,`Note:
Loading a model from its configuration file does `),M_e=n(eJ,"STRONG",{});var Pht=s(M_e);Hnr=r(Pht,"not"),Pht.forEach(t),Unr=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(eJ,"A",{href:!0});var $ht=s(CV);Jnr=r($ht,"from_pretrained()"),$ht.forEach(t),Ynr=r(eJ," to load the model weights."),eJ.forEach(t),Knr=i(Xl),E_e=n(Xl,"P",{});var Iht=s(E_e);Znr=r(Iht,"Examples:"),Iht.forEach(t),esr=i(Xl),m(_0.$$.fragment,Xl),Xl.forEach(t),osr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(u0.$$.fragment,ua),rsr=i(ua),C_e=n(ua,"P",{});var qht=s(C_e);tsr=r(qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qht.forEach(t),asr=i(ua),bn=n(ua,"P",{});var UE=s(bn);nsr=r(UE,"The model class to instantiate is selected based on the "),w_e=n(UE,"CODE",{});var Nht=s(w_e);ssr=r(Nht,"model_type"),Nht.forEach(t),lsr=r(UE,` property of the config object (either
passed as an argument or loaded from `),A_e=n(UE,"CODE",{});var jht=s(A_e);isr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),dsr=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y_e=n(UE,"CODE",{});var Dht=s(y_e);csr=r(Dht,"pretrained_model_name_or_path"),Dht.forEach(t),fsr=r(UE,":"),UE.forEach(t),msr=i(ua),ce=n(ua,"UL",{});var he=s(ce);Iv=n(he,"LI",{});var P8e=s(Iv);L_e=n(P8e,"STRONG",{});var Ght=s(L_e);gsr=r(Ght,"bert"),Ght.forEach(t),hsr=r(P8e," \u2014 "),wV=n(P8e,"A",{href:!0});var Oht=s(wV);psr=r(Oht,"TFBertLMHeadModel"),Oht.forEach(t),_sr=r(P8e," (BERT model)"),P8e.forEach(t),usr=i(he),qv=n(he,"LI",{});var $8e=s(qv);x_e=n($8e,"STRONG",{});var Vht=s(x_e);bsr=r(Vht,"camembert"),Vht.forEach(t),Fsr=r($8e," \u2014 "),AV=n($8e,"A",{href:!0});var Xht=s(AV);vsr=r(Xht,"TFCamembertForCausalLM"),Xht.forEach(t),Tsr=r($8e," (CamemBERT model)"),$8e.forEach(t),Msr=i(he),Nv=n(he,"LI",{});var I8e=s(Nv);k_e=n(I8e,"STRONG",{});var zht=s(k_e);Esr=r(zht,"ctrl"),zht.forEach(t),Csr=r(I8e," \u2014 "),yV=n(I8e,"A",{href:!0});var Qht=s(yV);wsr=r(Qht,"TFCTRLLMHeadModel"),Qht.forEach(t),Asr=r(I8e," (CTRL model)"),I8e.forEach(t),ysr=i(he),jv=n(he,"LI",{});var q8e=s(jv);S_e=n(q8e,"STRONG",{});var Wht=s(S_e);Lsr=r(Wht,"gpt2"),Wht.forEach(t),xsr=r(q8e," \u2014 "),LV=n(q8e,"A",{href:!0});var Hht=s(LV);ksr=r(Hht,"TFGPT2LMHeadModel"),Hht.forEach(t),Ssr=r(q8e," (OpenAI GPT-2 model)"),q8e.forEach(t),Rsr=i(he),Dv=n(he,"LI",{});var N8e=s(Dv);R_e=n(N8e,"STRONG",{});var Uht=s(R_e);Bsr=r(Uht,"gptj"),Uht.forEach(t),Psr=r(N8e," \u2014 "),xV=n(N8e,"A",{href:!0});var Jht=s(xV);$sr=r(Jht,"TFGPTJForCausalLM"),Jht.forEach(t),Isr=r(N8e," (GPT-J model)"),N8e.forEach(t),qsr=i(he),Gv=n(he,"LI",{});var j8e=s(Gv);B_e=n(j8e,"STRONG",{});var Yht=s(B_e);Nsr=r(Yht,"openai-gpt"),Yht.forEach(t),jsr=r(j8e," \u2014 "),kV=n(j8e,"A",{href:!0});var Kht=s(kV);Dsr=r(Kht,"TFOpenAIGPTLMHeadModel"),Kht.forEach(t),Gsr=r(j8e," (OpenAI GPT model)"),j8e.forEach(t),Osr=i(he),Ov=n(he,"LI",{});var D8e=s(Ov);P_e=n(D8e,"STRONG",{});var Zht=s(P_e);Vsr=r(Zht,"rembert"),Zht.forEach(t),Xsr=r(D8e," \u2014 "),SV=n(D8e,"A",{href:!0});var ept=s(SV);zsr=r(ept,"TFRemBertForCausalLM"),ept.forEach(t),Qsr=r(D8e," (RemBERT model)"),D8e.forEach(t),Wsr=i(he),Vv=n(he,"LI",{});var G8e=s(Vv);$_e=n(G8e,"STRONG",{});var opt=s($_e);Hsr=r(opt,"roberta"),opt.forEach(t),Usr=r(G8e," \u2014 "),RV=n(G8e,"A",{href:!0});var rpt=s(RV);Jsr=r(rpt,"TFRobertaForCausalLM"),rpt.forEach(t),Ysr=r(G8e," (RoBERTa model)"),G8e.forEach(t),Ksr=i(he),Xv=n(he,"LI",{});var O8e=s(Xv);I_e=n(O8e,"STRONG",{});var tpt=s(I_e);Zsr=r(tpt,"roformer"),tpt.forEach(t),elr=r(O8e," \u2014 "),BV=n(O8e,"A",{href:!0});var apt=s(BV);olr=r(apt,"TFRoFormerForCausalLM"),apt.forEach(t),rlr=r(O8e," (RoFormer model)"),O8e.forEach(t),tlr=i(he),zv=n(he,"LI",{});var V8e=s(zv);q_e=n(V8e,"STRONG",{});var npt=s(q_e);alr=r(npt,"transfo-xl"),npt.forEach(t),nlr=r(V8e," \u2014 "),PV=n(V8e,"A",{href:!0});var spt=s(PV);slr=r(spt,"TFTransfoXLLMHeadModel"),spt.forEach(t),llr=r(V8e," (Transformer-XL model)"),V8e.forEach(t),ilr=i(he),Qv=n(he,"LI",{});var X8e=s(Qv);N_e=n(X8e,"STRONG",{});var lpt=s(N_e);dlr=r(lpt,"xlm"),lpt.forEach(t),clr=r(X8e," \u2014 "),$V=n(X8e,"A",{href:!0});var ipt=s($V);flr=r(ipt,"TFXLMWithLMHeadModel"),ipt.forEach(t),mlr=r(X8e," (XLM model)"),X8e.forEach(t),glr=i(he),Wv=n(he,"LI",{});var z8e=s(Wv);j_e=n(z8e,"STRONG",{});var dpt=s(j_e);hlr=r(dpt,"xlnet"),dpt.forEach(t),plr=r(z8e," \u2014 "),IV=n(z8e,"A",{href:!0});var cpt=s(IV);_lr=r(cpt,"TFXLNetLMHeadModel"),cpt.forEach(t),ulr=r(z8e," (XLNet model)"),z8e.forEach(t),he.forEach(t),blr=i(ua),D_e=n(ua,"P",{});var fpt=s(D_e);Flr=r(fpt,"Examples:"),fpt.forEach(t),vlr=i(ua),m(b0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),sBe=i(c),Mc=n(c,"H2",{class:!0});var _$e=s(Mc);Hv=n(_$e,"A",{id:!0,class:!0,href:!0});var mpt=s(Hv);G_e=n(mpt,"SPAN",{});var gpt=s(G_e);m(F0.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),Tlr=i(_$e),O_e=n(_$e,"SPAN",{});var hpt=s(O_e);Mlr=r(hpt,"TFAutoModelForImageClassification"),hpt.forEach(t),_$e.forEach(t),lBe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(v0.$$.fragment,zl),Elr=i(zl),Ec=n(zl,"P",{});var oJ=s(Ec);Clr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qV=n(oJ,"A",{href:!0});var ppt=s(qV);wlr=r(ppt,"from_pretrained()"),ppt.forEach(t),Alr=r(oJ," class method or the "),NV=n(oJ,"A",{href:!0});var _pt=s(NV);ylr=r(_pt,"from_config()"),_pt.forEach(t),Llr=r(oJ,` class
method.`),oJ.forEach(t),xlr=i(zl),T0=n(zl,"P",{});var u$e=s(T0);klr=r(u$e,"This class cannot be instantiated directly using "),V_e=n(u$e,"CODE",{});var upt=s(V_e);Slr=r(upt,"__init__()"),upt.forEach(t),Rlr=r(u$e," (throws an error)."),u$e.forEach(t),Blr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(M0.$$.fragment,Ql),Plr=i(Ql),X_e=n(Ql,"P",{});var bpt=s(X_e);$lr=r(bpt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bpt.forEach(t),Ilr=i(Ql),Cc=n(Ql,"P",{});var rJ=s(Cc);qlr=r(rJ,`Note:
Loading a model from its configuration file does `),z_e=n(rJ,"STRONG",{});var Fpt=s(z_e);Nlr=r(Fpt,"not"),Fpt.forEach(t),jlr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(rJ,"A",{href:!0});var vpt=s(jV);Dlr=r(vpt,"from_pretrained()"),vpt.forEach(t),Glr=r(rJ," to load the model weights."),rJ.forEach(t),Olr=i(Ql),Q_e=n(Ql,"P",{});var Tpt=s(Q_e);Vlr=r(Tpt,"Examples:"),Tpt.forEach(t),Xlr=i(Ql),m(E0.$$.fragment,Ql),Ql.forEach(t),zlr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(C0.$$.fragment,ba),Qlr=i(ba),W_e=n(ba,"P",{});var Mpt=s(W_e);Wlr=r(Mpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Mpt.forEach(t),Hlr=i(ba),Fn=n(ba,"P",{});var JE=s(Fn);Ulr=r(JE,"The model class to instantiate is selected based on the "),H_e=n(JE,"CODE",{});var Ept=s(H_e);Jlr=r(Ept,"model_type"),Ept.forEach(t),Ylr=r(JE,` property of the config object (either
passed as an argument or loaded from `),U_e=n(JE,"CODE",{});var Cpt=s(U_e);Klr=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),Zlr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J_e=n(JE,"CODE",{});var wpt=s(J_e);eir=r(wpt,"pretrained_model_name_or_path"),wpt.forEach(t),oir=r(JE,":"),JE.forEach(t),rir=i(ba),w0=n(ba,"UL",{});var b$e=s(w0);Uv=n(b$e,"LI",{});var Q8e=s(Uv);Y_e=n(Q8e,"STRONG",{});var Apt=s(Y_e);tir=r(Apt,"convnext"),Apt.forEach(t),air=r(Q8e," \u2014 "),DV=n(Q8e,"A",{href:!0});var ypt=s(DV);nir=r(ypt,"TFConvNextForImageClassification"),ypt.forEach(t),sir=r(Q8e," (ConvNext model)"),Q8e.forEach(t),lir=i(b$e),Jv=n(b$e,"LI",{});var W8e=s(Jv);K_e=n(W8e,"STRONG",{});var Lpt=s(K_e);iir=r(Lpt,"vit"),Lpt.forEach(t),dir=r(W8e," \u2014 "),GV=n(W8e,"A",{href:!0});var xpt=s(GV);cir=r(xpt,"TFViTForImageClassification"),xpt.forEach(t),fir=r(W8e," (ViT model)"),W8e.forEach(t),b$e.forEach(t),mir=i(ba),Z_e=n(ba,"P",{});var kpt=s(Z_e);gir=r(kpt,"Examples:"),kpt.forEach(t),hir=i(ba),m(A0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),iBe=i(c),wc=n(c,"H2",{class:!0});var F$e=s(wc);Yv=n(F$e,"A",{id:!0,class:!0,href:!0});var Spt=s(Yv);eue=n(Spt,"SPAN",{});var Rpt=s(eue);m(y0.$$.fragment,Rpt),Rpt.forEach(t),Spt.forEach(t),pir=i(F$e),oue=n(F$e,"SPAN",{});var Bpt=s(oue);_ir=r(Bpt,"TFAutoModelForMaskedLM"),Bpt.forEach(t),F$e.forEach(t),dBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(L0.$$.fragment,Wl),uir=i(Wl),Ac=n(Wl,"P",{});var tJ=s(Ac);bir=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),OV=n(tJ,"A",{href:!0});var Ppt=s(OV);Fir=r(Ppt,"from_pretrained()"),Ppt.forEach(t),vir=r(tJ," class method or the "),VV=n(tJ,"A",{href:!0});var $pt=s(VV);Tir=r($pt,"from_config()"),$pt.forEach(t),Mir=r(tJ,` class
method.`),tJ.forEach(t),Eir=i(Wl),x0=n(Wl,"P",{});var v$e=s(x0);Cir=r(v$e,"This class cannot be instantiated directly using "),rue=n(v$e,"CODE",{});var Ipt=s(rue);wir=r(Ipt,"__init__()"),Ipt.forEach(t),Air=r(v$e," (throws an error)."),v$e.forEach(t),yir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(k0.$$.fragment,Hl),Lir=i(Hl),tue=n(Hl,"P",{});var qpt=s(tue);xir=r(qpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),qpt.forEach(t),kir=i(Hl),yc=n(Hl,"P",{});var aJ=s(yc);Sir=r(aJ,`Note:
Loading a model from its configuration file does `),aue=n(aJ,"STRONG",{});var Npt=s(aue);Rir=r(Npt,"not"),Npt.forEach(t),Bir=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(aJ,"A",{href:!0});var jpt=s(XV);Pir=r(jpt,"from_pretrained()"),jpt.forEach(t),$ir=r(aJ," to load the model weights."),aJ.forEach(t),Iir=i(Hl),nue=n(Hl,"P",{});var Dpt=s(nue);qir=r(Dpt,"Examples:"),Dpt.forEach(t),Nir=i(Hl),m(S0.$$.fragment,Hl),Hl.forEach(t),jir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(R0.$$.fragment,Fa),Dir=i(Fa),sue=n(Fa,"P",{});var Gpt=s(sue);Gir=r(Gpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gpt.forEach(t),Oir=i(Fa),vn=n(Fa,"P",{});var YE=s(vn);Vir=r(YE,"The model class to instantiate is selected based on the "),lue=n(YE,"CODE",{});var Opt=s(lue);Xir=r(Opt,"model_type"),Opt.forEach(t),zir=r(YE,` property of the config object (either
passed as an argument or loaded from `),iue=n(YE,"CODE",{});var Vpt=s(iue);Qir=r(Vpt,"pretrained_model_name_or_path"),Vpt.forEach(t),Wir=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(YE,"CODE",{});var Xpt=s(due);Hir=r(Xpt,"pretrained_model_name_or_path"),Xpt.forEach(t),Uir=r(YE,":"),YE.forEach(t),Jir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);Kv=n(ee,"LI",{});var H8e=s(Kv);cue=n(H8e,"STRONG",{});var zpt=s(cue);Yir=r(zpt,"albert"),zpt.forEach(t),Kir=r(H8e," \u2014 "),zV=n(H8e,"A",{href:!0});var Qpt=s(zV);Zir=r(Qpt,"TFAlbertForMaskedLM"),Qpt.forEach(t),edr=r(H8e," (ALBERT model)"),H8e.forEach(t),odr=i(ee),Zv=n(ee,"LI",{});var U8e=s(Zv);fue=n(U8e,"STRONG",{});var Wpt=s(fue);rdr=r(Wpt,"bert"),Wpt.forEach(t),tdr=r(U8e," \u2014 "),QV=n(U8e,"A",{href:!0});var Hpt=s(QV);adr=r(Hpt,"TFBertForMaskedLM"),Hpt.forEach(t),ndr=r(U8e," (BERT model)"),U8e.forEach(t),sdr=i(ee),e6=n(ee,"LI",{});var J8e=s(e6);mue=n(J8e,"STRONG",{});var Upt=s(mue);ldr=r(Upt,"camembert"),Upt.forEach(t),idr=r(J8e," \u2014 "),WV=n(J8e,"A",{href:!0});var Jpt=s(WV);ddr=r(Jpt,"TFCamembertForMaskedLM"),Jpt.forEach(t),cdr=r(J8e," (CamemBERT model)"),J8e.forEach(t),fdr=i(ee),o6=n(ee,"LI",{});var Y8e=s(o6);gue=n(Y8e,"STRONG",{});var Ypt=s(gue);mdr=r(Ypt,"convbert"),Ypt.forEach(t),gdr=r(Y8e," \u2014 "),HV=n(Y8e,"A",{href:!0});var Kpt=s(HV);hdr=r(Kpt,"TFConvBertForMaskedLM"),Kpt.forEach(t),pdr=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),_dr=i(ee),r6=n(ee,"LI",{});var K8e=s(r6);hue=n(K8e,"STRONG",{});var Zpt=s(hue);udr=r(Zpt,"deberta"),Zpt.forEach(t),bdr=r(K8e," \u2014 "),UV=n(K8e,"A",{href:!0});var e_t=s(UV);Fdr=r(e_t,"TFDebertaForMaskedLM"),e_t.forEach(t),vdr=r(K8e," (DeBERTa model)"),K8e.forEach(t),Tdr=i(ee),t6=n(ee,"LI",{});var Z8e=s(t6);pue=n(Z8e,"STRONG",{});var o_t=s(pue);Mdr=r(o_t,"deberta-v2"),o_t.forEach(t),Edr=r(Z8e," \u2014 "),JV=n(Z8e,"A",{href:!0});var r_t=s(JV);Cdr=r(r_t,"TFDebertaV2ForMaskedLM"),r_t.forEach(t),wdr=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),Adr=i(ee),a6=n(ee,"LI",{});var e9e=s(a6);_ue=n(e9e,"STRONG",{});var t_t=s(_ue);ydr=r(t_t,"distilbert"),t_t.forEach(t),Ldr=r(e9e," \u2014 "),YV=n(e9e,"A",{href:!0});var a_t=s(YV);xdr=r(a_t,"TFDistilBertForMaskedLM"),a_t.forEach(t),kdr=r(e9e," (DistilBERT model)"),e9e.forEach(t),Sdr=i(ee),n6=n(ee,"LI",{});var o9e=s(n6);uue=n(o9e,"STRONG",{});var n_t=s(uue);Rdr=r(n_t,"electra"),n_t.forEach(t),Bdr=r(o9e," \u2014 "),KV=n(o9e,"A",{href:!0});var s_t=s(KV);Pdr=r(s_t,"TFElectraForMaskedLM"),s_t.forEach(t),$dr=r(o9e," (ELECTRA model)"),o9e.forEach(t),Idr=i(ee),s6=n(ee,"LI",{});var r9e=s(s6);bue=n(r9e,"STRONG",{});var l_t=s(bue);qdr=r(l_t,"flaubert"),l_t.forEach(t),Ndr=r(r9e," \u2014 "),ZV=n(r9e,"A",{href:!0});var i_t=s(ZV);jdr=r(i_t,"TFFlaubertWithLMHeadModel"),i_t.forEach(t),Ddr=r(r9e," (FlauBERT model)"),r9e.forEach(t),Gdr=i(ee),l6=n(ee,"LI",{});var t9e=s(l6);Fue=n(t9e,"STRONG",{});var d_t=s(Fue);Odr=r(d_t,"funnel"),d_t.forEach(t),Vdr=r(t9e," \u2014 "),eX=n(t9e,"A",{href:!0});var c_t=s(eX);Xdr=r(c_t,"TFFunnelForMaskedLM"),c_t.forEach(t),zdr=r(t9e," (Funnel Transformer model)"),t9e.forEach(t),Qdr=i(ee),i6=n(ee,"LI",{});var a9e=s(i6);vue=n(a9e,"STRONG",{});var f_t=s(vue);Wdr=r(f_t,"layoutlm"),f_t.forEach(t),Hdr=r(a9e," \u2014 "),oX=n(a9e,"A",{href:!0});var m_t=s(oX);Udr=r(m_t,"TFLayoutLMForMaskedLM"),m_t.forEach(t),Jdr=r(a9e," (LayoutLM model)"),a9e.forEach(t),Ydr=i(ee),d6=n(ee,"LI",{});var n9e=s(d6);Tue=n(n9e,"STRONG",{});var g_t=s(Tue);Kdr=r(g_t,"longformer"),g_t.forEach(t),Zdr=r(n9e," \u2014 "),rX=n(n9e,"A",{href:!0});var h_t=s(rX);ecr=r(h_t,"TFLongformerForMaskedLM"),h_t.forEach(t),ocr=r(n9e," (Longformer model)"),n9e.forEach(t),rcr=i(ee),c6=n(ee,"LI",{});var s9e=s(c6);Mue=n(s9e,"STRONG",{});var p_t=s(Mue);tcr=r(p_t,"mobilebert"),p_t.forEach(t),acr=r(s9e," \u2014 "),tX=n(s9e,"A",{href:!0});var __t=s(tX);ncr=r(__t,"TFMobileBertForMaskedLM"),__t.forEach(t),scr=r(s9e," (MobileBERT model)"),s9e.forEach(t),lcr=i(ee),f6=n(ee,"LI",{});var l9e=s(f6);Eue=n(l9e,"STRONG",{});var u_t=s(Eue);icr=r(u_t,"mpnet"),u_t.forEach(t),dcr=r(l9e," \u2014 "),aX=n(l9e,"A",{href:!0});var b_t=s(aX);ccr=r(b_t,"TFMPNetForMaskedLM"),b_t.forEach(t),fcr=r(l9e," (MPNet model)"),l9e.forEach(t),mcr=i(ee),m6=n(ee,"LI",{});var i9e=s(m6);Cue=n(i9e,"STRONG",{});var F_t=s(Cue);gcr=r(F_t,"rembert"),F_t.forEach(t),hcr=r(i9e," \u2014 "),nX=n(i9e,"A",{href:!0});var v_t=s(nX);pcr=r(v_t,"TFRemBertForMaskedLM"),v_t.forEach(t),_cr=r(i9e," (RemBERT model)"),i9e.forEach(t),ucr=i(ee),g6=n(ee,"LI",{});var d9e=s(g6);wue=n(d9e,"STRONG",{});var T_t=s(wue);bcr=r(T_t,"roberta"),T_t.forEach(t),Fcr=r(d9e," \u2014 "),sX=n(d9e,"A",{href:!0});var M_t=s(sX);vcr=r(M_t,"TFRobertaForMaskedLM"),M_t.forEach(t),Tcr=r(d9e," (RoBERTa model)"),d9e.forEach(t),Mcr=i(ee),h6=n(ee,"LI",{});var c9e=s(h6);Aue=n(c9e,"STRONG",{});var E_t=s(Aue);Ecr=r(E_t,"roformer"),E_t.forEach(t),Ccr=r(c9e," \u2014 "),lX=n(c9e,"A",{href:!0});var C_t=s(lX);wcr=r(C_t,"TFRoFormerForMaskedLM"),C_t.forEach(t),Acr=r(c9e," (RoFormer model)"),c9e.forEach(t),ycr=i(ee),p6=n(ee,"LI",{});var f9e=s(p6);yue=n(f9e,"STRONG",{});var w_t=s(yue);Lcr=r(w_t,"tapas"),w_t.forEach(t),xcr=r(f9e," \u2014 "),iX=n(f9e,"A",{href:!0});var A_t=s(iX);kcr=r(A_t,"TFTapasForMaskedLM"),A_t.forEach(t),Scr=r(f9e," (TAPAS model)"),f9e.forEach(t),Rcr=i(ee),_6=n(ee,"LI",{});var m9e=s(_6);Lue=n(m9e,"STRONG",{});var y_t=s(Lue);Bcr=r(y_t,"xlm"),y_t.forEach(t),Pcr=r(m9e," \u2014 "),dX=n(m9e,"A",{href:!0});var L_t=s(dX);$cr=r(L_t,"TFXLMWithLMHeadModel"),L_t.forEach(t),Icr=r(m9e," (XLM model)"),m9e.forEach(t),qcr=i(ee),u6=n(ee,"LI",{});var g9e=s(u6);xue=n(g9e,"STRONG",{});var x_t=s(xue);Ncr=r(x_t,"xlm-roberta"),x_t.forEach(t),jcr=r(g9e," \u2014 "),cX=n(g9e,"A",{href:!0});var k_t=s(cX);Dcr=r(k_t,"TFXLMRobertaForMaskedLM"),k_t.forEach(t),Gcr=r(g9e," (XLM-RoBERTa model)"),g9e.forEach(t),ee.forEach(t),Ocr=i(Fa),kue=n(Fa,"P",{});var S_t=s(kue);Vcr=r(S_t,"Examples:"),S_t.forEach(t),Xcr=i(Fa),m(B0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),cBe=i(c),Lc=n(c,"H2",{class:!0});var T$e=s(Lc);b6=n(T$e,"A",{id:!0,class:!0,href:!0});var R_t=s(b6);Sue=n(R_t,"SPAN",{});var B_t=s(Sue);m(P0.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),zcr=i(T$e),Rue=n(T$e,"SPAN",{});var P_t=s(Rue);Qcr=r(P_t,"TFAutoModelForSeq2SeqLM"),P_t.forEach(t),T$e.forEach(t),fBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m($0.$$.fragment,Ul),Wcr=i(Ul),xc=n(Ul,"P",{});var nJ=s(xc);Hcr=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),fX=n(nJ,"A",{href:!0});var $_t=s(fX);Ucr=r($_t,"from_pretrained()"),$_t.forEach(t),Jcr=r(nJ," class method or the "),mX=n(nJ,"A",{href:!0});var I_t=s(mX);Ycr=r(I_t,"from_config()"),I_t.forEach(t),Kcr=r(nJ,` class
method.`),nJ.forEach(t),Zcr=i(Ul),I0=n(Ul,"P",{});var M$e=s(I0);efr=r(M$e,"This class cannot be instantiated directly using "),Bue=n(M$e,"CODE",{});var q_t=s(Bue);ofr=r(q_t,"__init__()"),q_t.forEach(t),rfr=r(M$e," (throws an error)."),M$e.forEach(t),tfr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(q0.$$.fragment,Jl),afr=i(Jl),Pue=n(Jl,"P",{});var N_t=s(Pue);nfr=r(N_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N_t.forEach(t),sfr=i(Jl),kc=n(Jl,"P",{});var sJ=s(kc);lfr=r(sJ,`Note:
Loading a model from its configuration file does `),$ue=n(sJ,"STRONG",{});var j_t=s($ue);ifr=r(j_t,"not"),j_t.forEach(t),dfr=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(sJ,"A",{href:!0});var D_t=s(gX);cfr=r(D_t,"from_pretrained()"),D_t.forEach(t),ffr=r(sJ," to load the model weights."),sJ.forEach(t),mfr=i(Jl),Iue=n(Jl,"P",{});var G_t=s(Iue);gfr=r(G_t,"Examples:"),G_t.forEach(t),hfr=i(Jl),m(N0.$$.fragment,Jl),Jl.forEach(t),pfr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(j0.$$.fragment,va),_fr=i(va),que=n(va,"P",{});var O_t=s(que);ufr=r(O_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O_t.forEach(t),bfr=i(va),Tn=n(va,"P",{});var KE=s(Tn);Ffr=r(KE,"The model class to instantiate is selected based on the "),Nue=n(KE,"CODE",{});var V_t=s(Nue);vfr=r(V_t,"model_type"),V_t.forEach(t),Tfr=r(KE,` property of the config object (either
passed as an argument or loaded from `),jue=n(KE,"CODE",{});var X_t=s(jue);Mfr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),Efr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Due=n(KE,"CODE",{});var z_t=s(Due);Cfr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),wfr=r(KE,":"),KE.forEach(t),Afr=i(va),ue=n(va,"UL",{});var we=s(ue);F6=n(we,"LI",{});var h9e=s(F6);Gue=n(h9e,"STRONG",{});var Q_t=s(Gue);yfr=r(Q_t,"bart"),Q_t.forEach(t),Lfr=r(h9e," \u2014 "),hX=n(h9e,"A",{href:!0});var W_t=s(hX);xfr=r(W_t,"TFBartForConditionalGeneration"),W_t.forEach(t),kfr=r(h9e," (BART model)"),h9e.forEach(t),Sfr=i(we),v6=n(we,"LI",{});var p9e=s(v6);Oue=n(p9e,"STRONG",{});var H_t=s(Oue);Rfr=r(H_t,"blenderbot"),H_t.forEach(t),Bfr=r(p9e," \u2014 "),pX=n(p9e,"A",{href:!0});var U_t=s(pX);Pfr=r(U_t,"TFBlenderbotForConditionalGeneration"),U_t.forEach(t),$fr=r(p9e," (Blenderbot model)"),p9e.forEach(t),Ifr=i(we),T6=n(we,"LI",{});var _9e=s(T6);Vue=n(_9e,"STRONG",{});var J_t=s(Vue);qfr=r(J_t,"blenderbot-small"),J_t.forEach(t),Nfr=r(_9e," \u2014 "),_X=n(_9e,"A",{href:!0});var Y_t=s(_X);jfr=r(Y_t,"TFBlenderbotSmallForConditionalGeneration"),Y_t.forEach(t),Dfr=r(_9e," (BlenderbotSmall model)"),_9e.forEach(t),Gfr=i(we),M6=n(we,"LI",{});var u9e=s(M6);Xue=n(u9e,"STRONG",{});var K_t=s(Xue);Ofr=r(K_t,"encoder-decoder"),K_t.forEach(t),Vfr=r(u9e," \u2014 "),uX=n(u9e,"A",{href:!0});var Z_t=s(uX);Xfr=r(Z_t,"TFEncoderDecoderModel"),Z_t.forEach(t),zfr=r(u9e," (Encoder decoder model)"),u9e.forEach(t),Qfr=i(we),E6=n(we,"LI",{});var b9e=s(E6);zue=n(b9e,"STRONG",{});var eut=s(zue);Wfr=r(eut,"led"),eut.forEach(t),Hfr=r(b9e," \u2014 "),bX=n(b9e,"A",{href:!0});var out=s(bX);Ufr=r(out,"TFLEDForConditionalGeneration"),out.forEach(t),Jfr=r(b9e," (LED model)"),b9e.forEach(t),Yfr=i(we),C6=n(we,"LI",{});var F9e=s(C6);Que=n(F9e,"STRONG",{});var rut=s(Que);Kfr=r(rut,"marian"),rut.forEach(t),Zfr=r(F9e," \u2014 "),FX=n(F9e,"A",{href:!0});var tut=s(FX);emr=r(tut,"TFMarianMTModel"),tut.forEach(t),omr=r(F9e," (Marian model)"),F9e.forEach(t),rmr=i(we),w6=n(we,"LI",{});var v9e=s(w6);Wue=n(v9e,"STRONG",{});var aut=s(Wue);tmr=r(aut,"mbart"),aut.forEach(t),amr=r(v9e," \u2014 "),vX=n(v9e,"A",{href:!0});var nut=s(vX);nmr=r(nut,"TFMBartForConditionalGeneration"),nut.forEach(t),smr=r(v9e," (mBART model)"),v9e.forEach(t),lmr=i(we),A6=n(we,"LI",{});var T9e=s(A6);Hue=n(T9e,"STRONG",{});var sut=s(Hue);imr=r(sut,"mt5"),sut.forEach(t),dmr=r(T9e," \u2014 "),TX=n(T9e,"A",{href:!0});var lut=s(TX);cmr=r(lut,"TFMT5ForConditionalGeneration"),lut.forEach(t),fmr=r(T9e," (mT5 model)"),T9e.forEach(t),mmr=i(we),y6=n(we,"LI",{});var M9e=s(y6);Uue=n(M9e,"STRONG",{});var iut=s(Uue);gmr=r(iut,"pegasus"),iut.forEach(t),hmr=r(M9e," \u2014 "),MX=n(M9e,"A",{href:!0});var dut=s(MX);pmr=r(dut,"TFPegasusForConditionalGeneration"),dut.forEach(t),_mr=r(M9e," (Pegasus model)"),M9e.forEach(t),umr=i(we),L6=n(we,"LI",{});var E9e=s(L6);Jue=n(E9e,"STRONG",{});var cut=s(Jue);bmr=r(cut,"t5"),cut.forEach(t),Fmr=r(E9e," \u2014 "),EX=n(E9e,"A",{href:!0});var fut=s(EX);vmr=r(fut,"TFT5ForConditionalGeneration"),fut.forEach(t),Tmr=r(E9e," (T5 model)"),E9e.forEach(t),we.forEach(t),Mmr=i(va),Yue=n(va,"P",{});var mut=s(Yue);Emr=r(mut,"Examples:"),mut.forEach(t),Cmr=i(va),m(D0.$$.fragment,va),va.forEach(t),Ul.forEach(t),mBe=i(c),Sc=n(c,"H2",{class:!0});var E$e=s(Sc);x6=n(E$e,"A",{id:!0,class:!0,href:!0});var gut=s(x6);Kue=n(gut,"SPAN",{});var hut=s(Kue);m(G0.$$.fragment,hut),hut.forEach(t),gut.forEach(t),wmr=i(E$e),Zue=n(E$e,"SPAN",{});var put=s(Zue);Amr=r(put,"TFAutoModelForSequenceClassification"),put.forEach(t),E$e.forEach(t),gBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(O0.$$.fragment,Yl),ymr=i(Yl),Rc=n(Yl,"P",{});var lJ=s(Rc);Lmr=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CX=n(lJ,"A",{href:!0});var _ut=s(CX);xmr=r(_ut,"from_pretrained()"),_ut.forEach(t),kmr=r(lJ," class method or the "),wX=n(lJ,"A",{href:!0});var uut=s(wX);Smr=r(uut,"from_config()"),uut.forEach(t),Rmr=r(lJ,` class
method.`),lJ.forEach(t),Bmr=i(Yl),V0=n(Yl,"P",{});var C$e=s(V0);Pmr=r(C$e,"This class cannot be instantiated directly using "),e1e=n(C$e,"CODE",{});var but=s(e1e);$mr=r(but,"__init__()"),but.forEach(t),Imr=r(C$e," (throws an error)."),C$e.forEach(t),qmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(X0.$$.fragment,Kl),Nmr=i(Kl),o1e=n(Kl,"P",{});var Fut=s(o1e);jmr=r(Fut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fut.forEach(t),Dmr=i(Kl),Bc=n(Kl,"P",{});var iJ=s(Bc);Gmr=r(iJ,`Note:
Loading a model from its configuration file does `),r1e=n(iJ,"STRONG",{});var vut=s(r1e);Omr=r(vut,"not"),vut.forEach(t),Vmr=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(iJ,"A",{href:!0});var Tut=s(AX);Xmr=r(Tut,"from_pretrained()"),Tut.forEach(t),zmr=r(iJ," to load the model weights."),iJ.forEach(t),Qmr=i(Kl),t1e=n(Kl,"P",{});var Mut=s(t1e);Wmr=r(Mut,"Examples:"),Mut.forEach(t),Hmr=i(Kl),m(z0.$$.fragment,Kl),Kl.forEach(t),Umr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(Q0.$$.fragment,Ta),Jmr=i(Ta),a1e=n(Ta,"P",{});var Eut=s(a1e);Ymr=r(Eut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Eut.forEach(t),Kmr=i(Ta),Mn=n(Ta,"P",{});var ZE=s(Mn);Zmr=r(ZE,"The model class to instantiate is selected based on the "),n1e=n(ZE,"CODE",{});var Cut=s(n1e);egr=r(Cut,"model_type"),Cut.forEach(t),ogr=r(ZE,` property of the config object (either
passed as an argument or loaded from `),s1e=n(ZE,"CODE",{});var wut=s(s1e);rgr=r(wut,"pretrained_model_name_or_path"),wut.forEach(t),tgr=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(ZE,"CODE",{});var Aut=s(l1e);agr=r(Aut,"pretrained_model_name_or_path"),Aut.forEach(t),ngr=r(ZE,":"),ZE.forEach(t),sgr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);k6=n(Q,"LI",{});var C9e=s(k6);i1e=n(C9e,"STRONG",{});var yut=s(i1e);lgr=r(yut,"albert"),yut.forEach(t),igr=r(C9e," \u2014 "),yX=n(C9e,"A",{href:!0});var Lut=s(yX);dgr=r(Lut,"TFAlbertForSequenceClassification"),Lut.forEach(t),cgr=r(C9e," (ALBERT model)"),C9e.forEach(t),fgr=i(Q),S6=n(Q,"LI",{});var w9e=s(S6);d1e=n(w9e,"STRONG",{});var xut=s(d1e);mgr=r(xut,"bert"),xut.forEach(t),ggr=r(w9e," \u2014 "),LX=n(w9e,"A",{href:!0});var kut=s(LX);hgr=r(kut,"TFBertForSequenceClassification"),kut.forEach(t),pgr=r(w9e," (BERT model)"),w9e.forEach(t),_gr=i(Q),R6=n(Q,"LI",{});var A9e=s(R6);c1e=n(A9e,"STRONG",{});var Sut=s(c1e);ugr=r(Sut,"camembert"),Sut.forEach(t),bgr=r(A9e," \u2014 "),xX=n(A9e,"A",{href:!0});var Rut=s(xX);Fgr=r(Rut,"TFCamembertForSequenceClassification"),Rut.forEach(t),vgr=r(A9e," (CamemBERT model)"),A9e.forEach(t),Tgr=i(Q),B6=n(Q,"LI",{});var y9e=s(B6);f1e=n(y9e,"STRONG",{});var But=s(f1e);Mgr=r(But,"convbert"),But.forEach(t),Egr=r(y9e," \u2014 "),kX=n(y9e,"A",{href:!0});var Put=s(kX);Cgr=r(Put,"TFConvBertForSequenceClassification"),Put.forEach(t),wgr=r(y9e," (ConvBERT model)"),y9e.forEach(t),Agr=i(Q),P6=n(Q,"LI",{});var L9e=s(P6);m1e=n(L9e,"STRONG",{});var $ut=s(m1e);ygr=r($ut,"ctrl"),$ut.forEach(t),Lgr=r(L9e," \u2014 "),SX=n(L9e,"A",{href:!0});var Iut=s(SX);xgr=r(Iut,"TFCTRLForSequenceClassification"),Iut.forEach(t),kgr=r(L9e," (CTRL model)"),L9e.forEach(t),Sgr=i(Q),$6=n(Q,"LI",{});var x9e=s($6);g1e=n(x9e,"STRONG",{});var qut=s(g1e);Rgr=r(qut,"deberta"),qut.forEach(t),Bgr=r(x9e," \u2014 "),RX=n(x9e,"A",{href:!0});var Nut=s(RX);Pgr=r(Nut,"TFDebertaForSequenceClassification"),Nut.forEach(t),$gr=r(x9e," (DeBERTa model)"),x9e.forEach(t),Igr=i(Q),I6=n(Q,"LI",{});var k9e=s(I6);h1e=n(k9e,"STRONG",{});var jut=s(h1e);qgr=r(jut,"deberta-v2"),jut.forEach(t),Ngr=r(k9e," \u2014 "),BX=n(k9e,"A",{href:!0});var Dut=s(BX);jgr=r(Dut,"TFDebertaV2ForSequenceClassification"),Dut.forEach(t),Dgr=r(k9e," (DeBERTa-v2 model)"),k9e.forEach(t),Ggr=i(Q),q6=n(Q,"LI",{});var S9e=s(q6);p1e=n(S9e,"STRONG",{});var Gut=s(p1e);Ogr=r(Gut,"distilbert"),Gut.forEach(t),Vgr=r(S9e," \u2014 "),PX=n(S9e,"A",{href:!0});var Out=s(PX);Xgr=r(Out,"TFDistilBertForSequenceClassification"),Out.forEach(t),zgr=r(S9e," (DistilBERT model)"),S9e.forEach(t),Qgr=i(Q),N6=n(Q,"LI",{});var R9e=s(N6);_1e=n(R9e,"STRONG",{});var Vut=s(_1e);Wgr=r(Vut,"electra"),Vut.forEach(t),Hgr=r(R9e," \u2014 "),$X=n(R9e,"A",{href:!0});var Xut=s($X);Ugr=r(Xut,"TFElectraForSequenceClassification"),Xut.forEach(t),Jgr=r(R9e," (ELECTRA model)"),R9e.forEach(t),Ygr=i(Q),j6=n(Q,"LI",{});var B9e=s(j6);u1e=n(B9e,"STRONG",{});var zut=s(u1e);Kgr=r(zut,"flaubert"),zut.forEach(t),Zgr=r(B9e," \u2014 "),IX=n(B9e,"A",{href:!0});var Qut=s(IX);ehr=r(Qut,"TFFlaubertForSequenceClassification"),Qut.forEach(t),ohr=r(B9e," (FlauBERT model)"),B9e.forEach(t),rhr=i(Q),D6=n(Q,"LI",{});var P9e=s(D6);b1e=n(P9e,"STRONG",{});var Wut=s(b1e);thr=r(Wut,"funnel"),Wut.forEach(t),ahr=r(P9e," \u2014 "),qX=n(P9e,"A",{href:!0});var Hut=s(qX);nhr=r(Hut,"TFFunnelForSequenceClassification"),Hut.forEach(t),shr=r(P9e," (Funnel Transformer model)"),P9e.forEach(t),lhr=i(Q),G6=n(Q,"LI",{});var $9e=s(G6);F1e=n($9e,"STRONG",{});var Uut=s(F1e);ihr=r(Uut,"gpt2"),Uut.forEach(t),dhr=r($9e," \u2014 "),NX=n($9e,"A",{href:!0});var Jut=s(NX);chr=r(Jut,"TFGPT2ForSequenceClassification"),Jut.forEach(t),fhr=r($9e," (OpenAI GPT-2 model)"),$9e.forEach(t),mhr=i(Q),O6=n(Q,"LI",{});var I9e=s(O6);v1e=n(I9e,"STRONG",{});var Yut=s(v1e);ghr=r(Yut,"gptj"),Yut.forEach(t),hhr=r(I9e," \u2014 "),jX=n(I9e,"A",{href:!0});var Kut=s(jX);phr=r(Kut,"TFGPTJForSequenceClassification"),Kut.forEach(t),_hr=r(I9e," (GPT-J model)"),I9e.forEach(t),uhr=i(Q),V6=n(Q,"LI",{});var q9e=s(V6);T1e=n(q9e,"STRONG",{});var Zut=s(T1e);bhr=r(Zut,"layoutlm"),Zut.forEach(t),Fhr=r(q9e," \u2014 "),DX=n(q9e,"A",{href:!0});var e1t=s(DX);vhr=r(e1t,"TFLayoutLMForSequenceClassification"),e1t.forEach(t),Thr=r(q9e," (LayoutLM model)"),q9e.forEach(t),Mhr=i(Q),X6=n(Q,"LI",{});var N9e=s(X6);M1e=n(N9e,"STRONG",{});var o1t=s(M1e);Ehr=r(o1t,"longformer"),o1t.forEach(t),Chr=r(N9e," \u2014 "),GX=n(N9e,"A",{href:!0});var r1t=s(GX);whr=r(r1t,"TFLongformerForSequenceClassification"),r1t.forEach(t),Ahr=r(N9e," (Longformer model)"),N9e.forEach(t),yhr=i(Q),z6=n(Q,"LI",{});var j9e=s(z6);E1e=n(j9e,"STRONG",{});var t1t=s(E1e);Lhr=r(t1t,"mobilebert"),t1t.forEach(t),xhr=r(j9e," \u2014 "),OX=n(j9e,"A",{href:!0});var a1t=s(OX);khr=r(a1t,"TFMobileBertForSequenceClassification"),a1t.forEach(t),Shr=r(j9e," (MobileBERT model)"),j9e.forEach(t),Rhr=i(Q),Q6=n(Q,"LI",{});var D9e=s(Q6);C1e=n(D9e,"STRONG",{});var n1t=s(C1e);Bhr=r(n1t,"mpnet"),n1t.forEach(t),Phr=r(D9e," \u2014 "),VX=n(D9e,"A",{href:!0});var s1t=s(VX);$hr=r(s1t,"TFMPNetForSequenceClassification"),s1t.forEach(t),Ihr=r(D9e," (MPNet model)"),D9e.forEach(t),qhr=i(Q),W6=n(Q,"LI",{});var G9e=s(W6);w1e=n(G9e,"STRONG",{});var l1t=s(w1e);Nhr=r(l1t,"openai-gpt"),l1t.forEach(t),jhr=r(G9e," \u2014 "),XX=n(G9e,"A",{href:!0});var i1t=s(XX);Dhr=r(i1t,"TFOpenAIGPTForSequenceClassification"),i1t.forEach(t),Ghr=r(G9e," (OpenAI GPT model)"),G9e.forEach(t),Ohr=i(Q),H6=n(Q,"LI",{});var O9e=s(H6);A1e=n(O9e,"STRONG",{});var d1t=s(A1e);Vhr=r(d1t,"rembert"),d1t.forEach(t),Xhr=r(O9e," \u2014 "),zX=n(O9e,"A",{href:!0});var c1t=s(zX);zhr=r(c1t,"TFRemBertForSequenceClassification"),c1t.forEach(t),Qhr=r(O9e," (RemBERT model)"),O9e.forEach(t),Whr=i(Q),U6=n(Q,"LI",{});var V9e=s(U6);y1e=n(V9e,"STRONG",{});var f1t=s(y1e);Hhr=r(f1t,"roberta"),f1t.forEach(t),Uhr=r(V9e," \u2014 "),QX=n(V9e,"A",{href:!0});var m1t=s(QX);Jhr=r(m1t,"TFRobertaForSequenceClassification"),m1t.forEach(t),Yhr=r(V9e," (RoBERTa model)"),V9e.forEach(t),Khr=i(Q),J6=n(Q,"LI",{});var X9e=s(J6);L1e=n(X9e,"STRONG",{});var g1t=s(L1e);Zhr=r(g1t,"roformer"),g1t.forEach(t),epr=r(X9e," \u2014 "),WX=n(X9e,"A",{href:!0});var h1t=s(WX);opr=r(h1t,"TFRoFormerForSequenceClassification"),h1t.forEach(t),rpr=r(X9e," (RoFormer model)"),X9e.forEach(t),tpr=i(Q),Y6=n(Q,"LI",{});var z9e=s(Y6);x1e=n(z9e,"STRONG",{});var p1t=s(x1e);apr=r(p1t,"tapas"),p1t.forEach(t),npr=r(z9e," \u2014 "),HX=n(z9e,"A",{href:!0});var _1t=s(HX);spr=r(_1t,"TFTapasForSequenceClassification"),_1t.forEach(t),lpr=r(z9e," (TAPAS model)"),z9e.forEach(t),ipr=i(Q),K6=n(Q,"LI",{});var Q9e=s(K6);k1e=n(Q9e,"STRONG",{});var u1t=s(k1e);dpr=r(u1t,"transfo-xl"),u1t.forEach(t),cpr=r(Q9e," \u2014 "),UX=n(Q9e,"A",{href:!0});var b1t=s(UX);fpr=r(b1t,"TFTransfoXLForSequenceClassification"),b1t.forEach(t),mpr=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),gpr=i(Q),Z6=n(Q,"LI",{});var W9e=s(Z6);S1e=n(W9e,"STRONG",{});var F1t=s(S1e);hpr=r(F1t,"xlm"),F1t.forEach(t),ppr=r(W9e," \u2014 "),JX=n(W9e,"A",{href:!0});var v1t=s(JX);_pr=r(v1t,"TFXLMForSequenceClassification"),v1t.forEach(t),upr=r(W9e," (XLM model)"),W9e.forEach(t),bpr=i(Q),eT=n(Q,"LI",{});var H9e=s(eT);R1e=n(H9e,"STRONG",{});var T1t=s(R1e);Fpr=r(T1t,"xlm-roberta"),T1t.forEach(t),vpr=r(H9e," \u2014 "),YX=n(H9e,"A",{href:!0});var M1t=s(YX);Tpr=r(M1t,"TFXLMRobertaForSequenceClassification"),M1t.forEach(t),Mpr=r(H9e," (XLM-RoBERTa model)"),H9e.forEach(t),Epr=i(Q),oT=n(Q,"LI",{});var U9e=s(oT);B1e=n(U9e,"STRONG",{});var E1t=s(B1e);Cpr=r(E1t,"xlnet"),E1t.forEach(t),wpr=r(U9e," \u2014 "),KX=n(U9e,"A",{href:!0});var C1t=s(KX);Apr=r(C1t,"TFXLNetForSequenceClassification"),C1t.forEach(t),ypr=r(U9e," (XLNet model)"),U9e.forEach(t),Q.forEach(t),Lpr=i(Ta),P1e=n(Ta,"P",{});var w1t=s(P1e);xpr=r(w1t,"Examples:"),w1t.forEach(t),kpr=i(Ta),m(W0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),hBe=i(c),Pc=n(c,"H2",{class:!0});var w$e=s(Pc);rT=n(w$e,"A",{id:!0,class:!0,href:!0});var A1t=s(rT);$1e=n(A1t,"SPAN",{});var y1t=s($1e);m(H0.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),Spr=i(w$e),I1e=n(w$e,"SPAN",{});var L1t=s(I1e);Rpr=r(L1t,"TFAutoModelForMultipleChoice"),L1t.forEach(t),w$e.forEach(t),pBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(U0.$$.fragment,Zl),Bpr=i(Zl),$c=n(Zl,"P",{});var dJ=s($c);Ppr=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZX=n(dJ,"A",{href:!0});var x1t=s(ZX);$pr=r(x1t,"from_pretrained()"),x1t.forEach(t),Ipr=r(dJ," class method or the "),ez=n(dJ,"A",{href:!0});var k1t=s(ez);qpr=r(k1t,"from_config()"),k1t.forEach(t),Npr=r(dJ,` class
method.`),dJ.forEach(t),jpr=i(Zl),J0=n(Zl,"P",{});var A$e=s(J0);Dpr=r(A$e,"This class cannot be instantiated directly using "),q1e=n(A$e,"CODE",{});var S1t=s(q1e);Gpr=r(S1t,"__init__()"),S1t.forEach(t),Opr=r(A$e," (throws an error)."),A$e.forEach(t),Vpr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(Y0.$$.fragment,ei),Xpr=i(ei),N1e=n(ei,"P",{});var R1t=s(N1e);zpr=r(R1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R1t.forEach(t),Qpr=i(ei),Ic=n(ei,"P",{});var cJ=s(Ic);Wpr=r(cJ,`Note:
Loading a model from its configuration file does `),j1e=n(cJ,"STRONG",{});var B1t=s(j1e);Hpr=r(B1t,"not"),B1t.forEach(t),Upr=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(cJ,"A",{href:!0});var P1t=s(oz);Jpr=r(P1t,"from_pretrained()"),P1t.forEach(t),Ypr=r(cJ," to load the model weights."),cJ.forEach(t),Kpr=i(ei),D1e=n(ei,"P",{});var $1t=s(D1e);Zpr=r($1t,"Examples:"),$1t.forEach(t),e_r=i(ei),m(K0.$$.fragment,ei),ei.forEach(t),o_r=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(Z0.$$.fragment,Ma),r_r=i(Ma),G1e=n(Ma,"P",{});var I1t=s(G1e);t_r=r(I1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I1t.forEach(t),a_r=i(Ma),En=n(Ma,"P",{});var eC=s(En);n_r=r(eC,"The model class to instantiate is selected based on the "),O1e=n(eC,"CODE",{});var q1t=s(O1e);s_r=r(q1t,"model_type"),q1t.forEach(t),l_r=r(eC,` property of the config object (either
passed as an argument or loaded from `),V1e=n(eC,"CODE",{});var N1t=s(V1e);i_r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),d_r=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X1e=n(eC,"CODE",{});var j1t=s(X1e);c_r=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),f_r=r(eC,":"),eC.forEach(t),m_r=i(Ma),ne=n(Ma,"UL",{});var ie=s(ne);tT=n(ie,"LI",{});var J9e=s(tT);z1e=n(J9e,"STRONG",{});var D1t=s(z1e);g_r=r(D1t,"albert"),D1t.forEach(t),h_r=r(J9e," \u2014 "),rz=n(J9e,"A",{href:!0});var G1t=s(rz);p_r=r(G1t,"TFAlbertForMultipleChoice"),G1t.forEach(t),__r=r(J9e," (ALBERT model)"),J9e.forEach(t),u_r=i(ie),aT=n(ie,"LI",{});var Y9e=s(aT);Q1e=n(Y9e,"STRONG",{});var O1t=s(Q1e);b_r=r(O1t,"bert"),O1t.forEach(t),F_r=r(Y9e," \u2014 "),tz=n(Y9e,"A",{href:!0});var V1t=s(tz);v_r=r(V1t,"TFBertForMultipleChoice"),V1t.forEach(t),T_r=r(Y9e," (BERT model)"),Y9e.forEach(t),M_r=i(ie),nT=n(ie,"LI",{});var K9e=s(nT);W1e=n(K9e,"STRONG",{});var X1t=s(W1e);E_r=r(X1t,"camembert"),X1t.forEach(t),C_r=r(K9e," \u2014 "),az=n(K9e,"A",{href:!0});var z1t=s(az);w_r=r(z1t,"TFCamembertForMultipleChoice"),z1t.forEach(t),A_r=r(K9e," (CamemBERT model)"),K9e.forEach(t),y_r=i(ie),sT=n(ie,"LI",{});var Z9e=s(sT);H1e=n(Z9e,"STRONG",{});var Q1t=s(H1e);L_r=r(Q1t,"convbert"),Q1t.forEach(t),x_r=r(Z9e," \u2014 "),nz=n(Z9e,"A",{href:!0});var W1t=s(nz);k_r=r(W1t,"TFConvBertForMultipleChoice"),W1t.forEach(t),S_r=r(Z9e," (ConvBERT model)"),Z9e.forEach(t),R_r=i(ie),lT=n(ie,"LI",{});var exe=s(lT);U1e=n(exe,"STRONG",{});var H1t=s(U1e);B_r=r(H1t,"distilbert"),H1t.forEach(t),P_r=r(exe," \u2014 "),sz=n(exe,"A",{href:!0});var U1t=s(sz);$_r=r(U1t,"TFDistilBertForMultipleChoice"),U1t.forEach(t),I_r=r(exe," (DistilBERT model)"),exe.forEach(t),q_r=i(ie),iT=n(ie,"LI",{});var oxe=s(iT);J1e=n(oxe,"STRONG",{});var J1t=s(J1e);N_r=r(J1t,"electra"),J1t.forEach(t),j_r=r(oxe," \u2014 "),lz=n(oxe,"A",{href:!0});var Y1t=s(lz);D_r=r(Y1t,"TFElectraForMultipleChoice"),Y1t.forEach(t),G_r=r(oxe," (ELECTRA model)"),oxe.forEach(t),O_r=i(ie),dT=n(ie,"LI",{});var rxe=s(dT);Y1e=n(rxe,"STRONG",{});var K1t=s(Y1e);V_r=r(K1t,"flaubert"),K1t.forEach(t),X_r=r(rxe," \u2014 "),iz=n(rxe,"A",{href:!0});var Z1t=s(iz);z_r=r(Z1t,"TFFlaubertForMultipleChoice"),Z1t.forEach(t),Q_r=r(rxe," (FlauBERT model)"),rxe.forEach(t),W_r=i(ie),cT=n(ie,"LI",{});var txe=s(cT);K1e=n(txe,"STRONG",{});var e4t=s(K1e);H_r=r(e4t,"funnel"),e4t.forEach(t),U_r=r(txe," \u2014 "),dz=n(txe,"A",{href:!0});var o4t=s(dz);J_r=r(o4t,"TFFunnelForMultipleChoice"),o4t.forEach(t),Y_r=r(txe," (Funnel Transformer model)"),txe.forEach(t),K_r=i(ie),fT=n(ie,"LI",{});var axe=s(fT);Z1e=n(axe,"STRONG",{});var r4t=s(Z1e);Z_r=r(r4t,"longformer"),r4t.forEach(t),eur=r(axe," \u2014 "),cz=n(axe,"A",{href:!0});var t4t=s(cz);our=r(t4t,"TFLongformerForMultipleChoice"),t4t.forEach(t),rur=r(axe," (Longformer model)"),axe.forEach(t),tur=i(ie),mT=n(ie,"LI",{});var nxe=s(mT);e4e=n(nxe,"STRONG",{});var a4t=s(e4e);aur=r(a4t,"mobilebert"),a4t.forEach(t),nur=r(nxe," \u2014 "),fz=n(nxe,"A",{href:!0});var n4t=s(fz);sur=r(n4t,"TFMobileBertForMultipleChoice"),n4t.forEach(t),lur=r(nxe," (MobileBERT model)"),nxe.forEach(t),iur=i(ie),gT=n(ie,"LI",{});var sxe=s(gT);o4e=n(sxe,"STRONG",{});var s4t=s(o4e);dur=r(s4t,"mpnet"),s4t.forEach(t),cur=r(sxe," \u2014 "),mz=n(sxe,"A",{href:!0});var l4t=s(mz);fur=r(l4t,"TFMPNetForMultipleChoice"),l4t.forEach(t),mur=r(sxe," (MPNet model)"),sxe.forEach(t),gur=i(ie),hT=n(ie,"LI",{});var lxe=s(hT);r4e=n(lxe,"STRONG",{});var i4t=s(r4e);hur=r(i4t,"rembert"),i4t.forEach(t),pur=r(lxe," \u2014 "),gz=n(lxe,"A",{href:!0});var d4t=s(gz);_ur=r(d4t,"TFRemBertForMultipleChoice"),d4t.forEach(t),uur=r(lxe," (RemBERT model)"),lxe.forEach(t),bur=i(ie),pT=n(ie,"LI",{});var ixe=s(pT);t4e=n(ixe,"STRONG",{});var c4t=s(t4e);Fur=r(c4t,"roberta"),c4t.forEach(t),vur=r(ixe," \u2014 "),hz=n(ixe,"A",{href:!0});var f4t=s(hz);Tur=r(f4t,"TFRobertaForMultipleChoice"),f4t.forEach(t),Mur=r(ixe," (RoBERTa model)"),ixe.forEach(t),Eur=i(ie),_T=n(ie,"LI",{});var dxe=s(_T);a4e=n(dxe,"STRONG",{});var m4t=s(a4e);Cur=r(m4t,"roformer"),m4t.forEach(t),wur=r(dxe," \u2014 "),pz=n(dxe,"A",{href:!0});var g4t=s(pz);Aur=r(g4t,"TFRoFormerForMultipleChoice"),g4t.forEach(t),yur=r(dxe," (RoFormer model)"),dxe.forEach(t),Lur=i(ie),uT=n(ie,"LI",{});var cxe=s(uT);n4e=n(cxe,"STRONG",{});var h4t=s(n4e);xur=r(h4t,"xlm"),h4t.forEach(t),kur=r(cxe," \u2014 "),_z=n(cxe,"A",{href:!0});var p4t=s(_z);Sur=r(p4t,"TFXLMForMultipleChoice"),p4t.forEach(t),Rur=r(cxe," (XLM model)"),cxe.forEach(t),Bur=i(ie),bT=n(ie,"LI",{});var fxe=s(bT);s4e=n(fxe,"STRONG",{});var _4t=s(s4e);Pur=r(_4t,"xlm-roberta"),_4t.forEach(t),$ur=r(fxe," \u2014 "),uz=n(fxe,"A",{href:!0});var u4t=s(uz);Iur=r(u4t,"TFXLMRobertaForMultipleChoice"),u4t.forEach(t),qur=r(fxe," (XLM-RoBERTa model)"),fxe.forEach(t),Nur=i(ie),FT=n(ie,"LI",{});var mxe=s(FT);l4e=n(mxe,"STRONG",{});var b4t=s(l4e);jur=r(b4t,"xlnet"),b4t.forEach(t),Dur=r(mxe," \u2014 "),bz=n(mxe,"A",{href:!0});var F4t=s(bz);Gur=r(F4t,"TFXLNetForMultipleChoice"),F4t.forEach(t),Our=r(mxe," (XLNet model)"),mxe.forEach(t),ie.forEach(t),Vur=i(Ma),i4e=n(Ma,"P",{});var v4t=s(i4e);Xur=r(v4t,"Examples:"),v4t.forEach(t),zur=i(Ma),m(ey.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),_Be=i(c),qc=n(c,"H2",{class:!0});var y$e=s(qc);vT=n(y$e,"A",{id:!0,class:!0,href:!0});var T4t=s(vT);d4e=n(T4t,"SPAN",{});var M4t=s(d4e);m(oy.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),Qur=i(y$e),c4e=n(y$e,"SPAN",{});var E4t=s(c4e);Wur=r(E4t,"TFAutoModelForTableQuestionAnswering"),E4t.forEach(t),y$e.forEach(t),uBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ry.$$.fragment,oi),Hur=i(oi),Nc=n(oi,"P",{});var fJ=s(Nc);Uur=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Fz=n(fJ,"A",{href:!0});var C4t=s(Fz);Jur=r(C4t,"from_pretrained()"),C4t.forEach(t),Yur=r(fJ," class method or the "),vz=n(fJ,"A",{href:!0});var w4t=s(vz);Kur=r(w4t,"from_config()"),w4t.forEach(t),Zur=r(fJ,` class
method.`),fJ.forEach(t),e1r=i(oi),ty=n(oi,"P",{});var L$e=s(ty);o1r=r(L$e,"This class cannot be instantiated directly using "),f4e=n(L$e,"CODE",{});var A4t=s(f4e);r1r=r(A4t,"__init__()"),A4t.forEach(t),t1r=r(L$e," (throws an error)."),L$e.forEach(t),a1r=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(ay.$$.fragment,ri),n1r=i(ri),m4e=n(ri,"P",{});var y4t=s(m4e);s1r=r(y4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),y4t.forEach(t),l1r=i(ri),jc=n(ri,"P",{});var mJ=s(jc);i1r=r(mJ,`Note:
Loading a model from its configuration file does `),g4e=n(mJ,"STRONG",{});var L4t=s(g4e);d1r=r(L4t,"not"),L4t.forEach(t),c1r=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(mJ,"A",{href:!0});var x4t=s(Tz);f1r=r(x4t,"from_pretrained()"),x4t.forEach(t),m1r=r(mJ," to load the model weights."),mJ.forEach(t),g1r=i(ri),h4e=n(ri,"P",{});var k4t=s(h4e);h1r=r(k4t,"Examples:"),k4t.forEach(t),p1r=i(ri),m(ny.$$.fragment,ri),ri.forEach(t),_1r=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(sy.$$.fragment,Ea),u1r=i(Ea),p4e=n(Ea,"P",{});var S4t=s(p4e);b1r=r(S4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),S4t.forEach(t),F1r=i(Ea),Cn=n(Ea,"P",{});var oC=s(Cn);v1r=r(oC,"The model class to instantiate is selected based on the "),_4e=n(oC,"CODE",{});var R4t=s(_4e);T1r=r(R4t,"model_type"),R4t.forEach(t),M1r=r(oC,` property of the config object (either
passed as an argument or loaded from `),u4e=n(oC,"CODE",{});var B4t=s(u4e);E1r=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),C1r=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(oC,"CODE",{});var P4t=s(b4e);w1r=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),A1r=r(oC,":"),oC.forEach(t),y1r=i(Ea),F4e=n(Ea,"UL",{});var $4t=s(F4e);TT=n($4t,"LI",{});var gxe=s(TT);v4e=n(gxe,"STRONG",{});var I4t=s(v4e);L1r=r(I4t,"tapas"),I4t.forEach(t),x1r=r(gxe," \u2014 "),Mz=n(gxe,"A",{href:!0});var q4t=s(Mz);k1r=r(q4t,"TFTapasForQuestionAnswering"),q4t.forEach(t),S1r=r(gxe," (TAPAS model)"),gxe.forEach(t),$4t.forEach(t),R1r=i(Ea),T4e=n(Ea,"P",{});var N4t=s(T4e);B1r=r(N4t,"Examples:"),N4t.forEach(t),P1r=i(Ea),m(ly.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),bBe=i(c),Dc=n(c,"H2",{class:!0});var x$e=s(Dc);MT=n(x$e,"A",{id:!0,class:!0,href:!0});var j4t=s(MT);M4e=n(j4t,"SPAN",{});var D4t=s(M4e);m(iy.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),$1r=i(x$e),E4e=n(x$e,"SPAN",{});var G4t=s(E4e);I1r=r(G4t,"TFAutoModelForTokenClassification"),G4t.forEach(t),x$e.forEach(t),FBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(dy.$$.fragment,ti),q1r=i(ti),Gc=n(ti,"P",{});var gJ=s(Gc);N1r=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Ez=n(gJ,"A",{href:!0});var O4t=s(Ez);j1r=r(O4t,"from_pretrained()"),O4t.forEach(t),D1r=r(gJ," class method or the "),Cz=n(gJ,"A",{href:!0});var V4t=s(Cz);G1r=r(V4t,"from_config()"),V4t.forEach(t),O1r=r(gJ,` class
method.`),gJ.forEach(t),V1r=i(ti),cy=n(ti,"P",{});var k$e=s(cy);X1r=r(k$e,"This class cannot be instantiated directly using "),C4e=n(k$e,"CODE",{});var X4t=s(C4e);z1r=r(X4t,"__init__()"),X4t.forEach(t),Q1r=r(k$e," (throws an error)."),k$e.forEach(t),W1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(fy.$$.fragment,ai),H1r=i(ai),w4e=n(ai,"P",{});var z4t=s(w4e);U1r=r(z4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),z4t.forEach(t),J1r=i(ai),Oc=n(ai,"P",{});var hJ=s(Oc);Y1r=r(hJ,`Note:
Loading a model from its configuration file does `),A4e=n(hJ,"STRONG",{});var Q4t=s(A4e);K1r=r(Q4t,"not"),Q4t.forEach(t),Z1r=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wz=n(hJ,"A",{href:!0});var W4t=s(wz);e4r=r(W4t,"from_pretrained()"),W4t.forEach(t),o4r=r(hJ," to load the model weights."),hJ.forEach(t),r4r=i(ai),y4e=n(ai,"P",{});var H4t=s(y4e);t4r=r(H4t,"Examples:"),H4t.forEach(t),a4r=i(ai),m(my.$$.fragment,ai),ai.forEach(t),n4r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(gy.$$.fragment,Ca),s4r=i(Ca),L4e=n(Ca,"P",{});var U4t=s(L4e);l4r=r(U4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U4t.forEach(t),i4r=i(Ca),wn=n(Ca,"P",{});var rC=s(wn);d4r=r(rC,"The model class to instantiate is selected based on the "),x4e=n(rC,"CODE",{});var J4t=s(x4e);c4r=r(J4t,"model_type"),J4t.forEach(t),f4r=r(rC,` property of the config object (either
passed as an argument or loaded from `),k4e=n(rC,"CODE",{});var Y4t=s(k4e);m4r=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),g4r=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(rC,"CODE",{});var K4t=s(S4e);h4r=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),p4r=r(rC,":"),rC.forEach(t),_4r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);ET=n(oe,"LI",{});var hxe=s(ET);R4e=n(hxe,"STRONG",{});var Z4t=s(R4e);u4r=r(Z4t,"albert"),Z4t.forEach(t),b4r=r(hxe," \u2014 "),Az=n(hxe,"A",{href:!0});var ebt=s(Az);F4r=r(ebt,"TFAlbertForTokenClassification"),ebt.forEach(t),v4r=r(hxe," (ALBERT model)"),hxe.forEach(t),T4r=i(oe),CT=n(oe,"LI",{});var pxe=s(CT);B4e=n(pxe,"STRONG",{});var obt=s(B4e);M4r=r(obt,"bert"),obt.forEach(t),E4r=r(pxe," \u2014 "),yz=n(pxe,"A",{href:!0});var rbt=s(yz);C4r=r(rbt,"TFBertForTokenClassification"),rbt.forEach(t),w4r=r(pxe," (BERT model)"),pxe.forEach(t),A4r=i(oe),wT=n(oe,"LI",{});var _xe=s(wT);P4e=n(_xe,"STRONG",{});var tbt=s(P4e);y4r=r(tbt,"camembert"),tbt.forEach(t),L4r=r(_xe," \u2014 "),Lz=n(_xe,"A",{href:!0});var abt=s(Lz);x4r=r(abt,"TFCamembertForTokenClassification"),abt.forEach(t),k4r=r(_xe," (CamemBERT model)"),_xe.forEach(t),S4r=i(oe),AT=n(oe,"LI",{});var uxe=s(AT);$4e=n(uxe,"STRONG",{});var nbt=s($4e);R4r=r(nbt,"convbert"),nbt.forEach(t),B4r=r(uxe," \u2014 "),xz=n(uxe,"A",{href:!0});var sbt=s(xz);P4r=r(sbt,"TFConvBertForTokenClassification"),sbt.forEach(t),$4r=r(uxe," (ConvBERT model)"),uxe.forEach(t),I4r=i(oe),yT=n(oe,"LI",{});var bxe=s(yT);I4e=n(bxe,"STRONG",{});var lbt=s(I4e);q4r=r(lbt,"deberta"),lbt.forEach(t),N4r=r(bxe," \u2014 "),kz=n(bxe,"A",{href:!0});var ibt=s(kz);j4r=r(ibt,"TFDebertaForTokenClassification"),ibt.forEach(t),D4r=r(bxe," (DeBERTa model)"),bxe.forEach(t),G4r=i(oe),LT=n(oe,"LI",{});var Fxe=s(LT);q4e=n(Fxe,"STRONG",{});var dbt=s(q4e);O4r=r(dbt,"deberta-v2"),dbt.forEach(t),V4r=r(Fxe," \u2014 "),Sz=n(Fxe,"A",{href:!0});var cbt=s(Sz);X4r=r(cbt,"TFDebertaV2ForTokenClassification"),cbt.forEach(t),z4r=r(Fxe," (DeBERTa-v2 model)"),Fxe.forEach(t),Q4r=i(oe),xT=n(oe,"LI",{});var vxe=s(xT);N4e=n(vxe,"STRONG",{});var fbt=s(N4e);W4r=r(fbt,"distilbert"),fbt.forEach(t),H4r=r(vxe," \u2014 "),Rz=n(vxe,"A",{href:!0});var mbt=s(Rz);U4r=r(mbt,"TFDistilBertForTokenClassification"),mbt.forEach(t),J4r=r(vxe," (DistilBERT model)"),vxe.forEach(t),Y4r=i(oe),kT=n(oe,"LI",{});var Txe=s(kT);j4e=n(Txe,"STRONG",{});var gbt=s(j4e);K4r=r(gbt,"electra"),gbt.forEach(t),Z4r=r(Txe," \u2014 "),Bz=n(Txe,"A",{href:!0});var hbt=s(Bz);ebr=r(hbt,"TFElectraForTokenClassification"),hbt.forEach(t),obr=r(Txe," (ELECTRA model)"),Txe.forEach(t),rbr=i(oe),ST=n(oe,"LI",{});var Mxe=s(ST);D4e=n(Mxe,"STRONG",{});var pbt=s(D4e);tbr=r(pbt,"flaubert"),pbt.forEach(t),abr=r(Mxe," \u2014 "),Pz=n(Mxe,"A",{href:!0});var _bt=s(Pz);nbr=r(_bt,"TFFlaubertForTokenClassification"),_bt.forEach(t),sbr=r(Mxe," (FlauBERT model)"),Mxe.forEach(t),lbr=i(oe),RT=n(oe,"LI",{});var Exe=s(RT);G4e=n(Exe,"STRONG",{});var ubt=s(G4e);ibr=r(ubt,"funnel"),ubt.forEach(t),dbr=r(Exe," \u2014 "),$z=n(Exe,"A",{href:!0});var bbt=s($z);cbr=r(bbt,"TFFunnelForTokenClassification"),bbt.forEach(t),fbr=r(Exe," (Funnel Transformer model)"),Exe.forEach(t),mbr=i(oe),BT=n(oe,"LI",{});var Cxe=s(BT);O4e=n(Cxe,"STRONG",{});var Fbt=s(O4e);gbr=r(Fbt,"layoutlm"),Fbt.forEach(t),hbr=r(Cxe," \u2014 "),Iz=n(Cxe,"A",{href:!0});var vbt=s(Iz);pbr=r(vbt,"TFLayoutLMForTokenClassification"),vbt.forEach(t),_br=r(Cxe," (LayoutLM model)"),Cxe.forEach(t),ubr=i(oe),PT=n(oe,"LI",{});var wxe=s(PT);V4e=n(wxe,"STRONG",{});var Tbt=s(V4e);bbr=r(Tbt,"longformer"),Tbt.forEach(t),Fbr=r(wxe," \u2014 "),qz=n(wxe,"A",{href:!0});var Mbt=s(qz);vbr=r(Mbt,"TFLongformerForTokenClassification"),Mbt.forEach(t),Tbr=r(wxe," (Longformer model)"),wxe.forEach(t),Mbr=i(oe),$T=n(oe,"LI",{});var Axe=s($T);X4e=n(Axe,"STRONG",{});var Ebt=s(X4e);Ebr=r(Ebt,"mobilebert"),Ebt.forEach(t),Cbr=r(Axe," \u2014 "),Nz=n(Axe,"A",{href:!0});var Cbt=s(Nz);wbr=r(Cbt,"TFMobileBertForTokenClassification"),Cbt.forEach(t),Abr=r(Axe," (MobileBERT model)"),Axe.forEach(t),ybr=i(oe),IT=n(oe,"LI",{});var yxe=s(IT);z4e=n(yxe,"STRONG",{});var wbt=s(z4e);Lbr=r(wbt,"mpnet"),wbt.forEach(t),xbr=r(yxe," \u2014 "),jz=n(yxe,"A",{href:!0});var Abt=s(jz);kbr=r(Abt,"TFMPNetForTokenClassification"),Abt.forEach(t),Sbr=r(yxe," (MPNet model)"),yxe.forEach(t),Rbr=i(oe),qT=n(oe,"LI",{});var Lxe=s(qT);Q4e=n(Lxe,"STRONG",{});var ybt=s(Q4e);Bbr=r(ybt,"rembert"),ybt.forEach(t),Pbr=r(Lxe," \u2014 "),Dz=n(Lxe,"A",{href:!0});var Lbt=s(Dz);$br=r(Lbt,"TFRemBertForTokenClassification"),Lbt.forEach(t),Ibr=r(Lxe," (RemBERT model)"),Lxe.forEach(t),qbr=i(oe),NT=n(oe,"LI",{});var xxe=s(NT);W4e=n(xxe,"STRONG",{});var xbt=s(W4e);Nbr=r(xbt,"roberta"),xbt.forEach(t),jbr=r(xxe," \u2014 "),Gz=n(xxe,"A",{href:!0});var kbt=s(Gz);Dbr=r(kbt,"TFRobertaForTokenClassification"),kbt.forEach(t),Gbr=r(xxe," (RoBERTa model)"),xxe.forEach(t),Obr=i(oe),jT=n(oe,"LI",{});var kxe=s(jT);H4e=n(kxe,"STRONG",{});var Sbt=s(H4e);Vbr=r(Sbt,"roformer"),Sbt.forEach(t),Xbr=r(kxe," \u2014 "),Oz=n(kxe,"A",{href:!0});var Rbt=s(Oz);zbr=r(Rbt,"TFRoFormerForTokenClassification"),Rbt.forEach(t),Qbr=r(kxe," (RoFormer model)"),kxe.forEach(t),Wbr=i(oe),DT=n(oe,"LI",{});var Sxe=s(DT);U4e=n(Sxe,"STRONG",{});var Bbt=s(U4e);Hbr=r(Bbt,"xlm"),Bbt.forEach(t),Ubr=r(Sxe," \u2014 "),Vz=n(Sxe,"A",{href:!0});var Pbt=s(Vz);Jbr=r(Pbt,"TFXLMForTokenClassification"),Pbt.forEach(t),Ybr=r(Sxe," (XLM model)"),Sxe.forEach(t),Kbr=i(oe),GT=n(oe,"LI",{});var Rxe=s(GT);J4e=n(Rxe,"STRONG",{});var $bt=s(J4e);Zbr=r($bt,"xlm-roberta"),$bt.forEach(t),e3r=r(Rxe," \u2014 "),Xz=n(Rxe,"A",{href:!0});var Ibt=s(Xz);o3r=r(Ibt,"TFXLMRobertaForTokenClassification"),Ibt.forEach(t),r3r=r(Rxe," (XLM-RoBERTa model)"),Rxe.forEach(t),t3r=i(oe),OT=n(oe,"LI",{});var Bxe=s(OT);Y4e=n(Bxe,"STRONG",{});var qbt=s(Y4e);a3r=r(qbt,"xlnet"),qbt.forEach(t),n3r=r(Bxe," \u2014 "),zz=n(Bxe,"A",{href:!0});var Nbt=s(zz);s3r=r(Nbt,"TFXLNetForTokenClassification"),Nbt.forEach(t),l3r=r(Bxe," (XLNet model)"),Bxe.forEach(t),oe.forEach(t),i3r=i(Ca),K4e=n(Ca,"P",{});var jbt=s(K4e);d3r=r(jbt,"Examples:"),jbt.forEach(t),c3r=i(Ca),m(hy.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),vBe=i(c),Vc=n(c,"H2",{class:!0});var S$e=s(Vc);VT=n(S$e,"A",{id:!0,class:!0,href:!0});var Dbt=s(VT);Z4e=n(Dbt,"SPAN",{});var Gbt=s(Z4e);m(py.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),f3r=i(S$e),ebe=n(S$e,"SPAN",{});var Obt=s(ebe);m3r=r(Obt,"TFAutoModelForQuestionAnswering"),Obt.forEach(t),S$e.forEach(t),TBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(_y.$$.fragment,ni),g3r=i(ni),Xc=n(ni,"P",{});var pJ=s(Xc);h3r=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qz=n(pJ,"A",{href:!0});var Vbt=s(Qz);p3r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),_3r=r(pJ," class method or the "),Wz=n(pJ,"A",{href:!0});var Xbt=s(Wz);u3r=r(Xbt,"from_config()"),Xbt.forEach(t),b3r=r(pJ,` class
method.`),pJ.forEach(t),F3r=i(ni),uy=n(ni,"P",{});var R$e=s(uy);v3r=r(R$e,"This class cannot be instantiated directly using "),obe=n(R$e,"CODE",{});var zbt=s(obe);T3r=r(zbt,"__init__()"),zbt.forEach(t),M3r=r(R$e," (throws an error)."),R$e.forEach(t),E3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(by.$$.fragment,si),C3r=i(si),rbe=n(si,"P",{});var Qbt=s(rbe);w3r=r(Qbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qbt.forEach(t),A3r=i(si),zc=n(si,"P",{});var _J=s(zc);y3r=r(_J,`Note:
Loading a model from its configuration file does `),tbe=n(_J,"STRONG",{});var Wbt=s(tbe);L3r=r(Wbt,"not"),Wbt.forEach(t),x3r=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(_J,"A",{href:!0});var Hbt=s(Hz);k3r=r(Hbt,"from_pretrained()"),Hbt.forEach(t),S3r=r(_J," to load the model weights."),_J.forEach(t),R3r=i(si),abe=n(si,"P",{});var Ubt=s(abe);B3r=r(Ubt,"Examples:"),Ubt.forEach(t),P3r=i(si),m(Fy.$$.fragment,si),si.forEach(t),$3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(vy.$$.fragment,wa),I3r=i(wa),nbe=n(wa,"P",{});var Jbt=s(nbe);q3r=r(Jbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jbt.forEach(t),N3r=i(wa),An=n(wa,"P",{});var tC=s(An);j3r=r(tC,"The model class to instantiate is selected based on the "),sbe=n(tC,"CODE",{});var Ybt=s(sbe);D3r=r(Ybt,"model_type"),Ybt.forEach(t),G3r=r(tC,` property of the config object (either
passed as an argument or loaded from `),lbe=n(tC,"CODE",{});var Kbt=s(lbe);O3r=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),V3r=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(tC,"CODE",{});var Zbt=s(ibe);X3r=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),z3r=r(tC,":"),tC.forEach(t),Q3r=i(wa),K=n(wa,"UL",{});var re=s(K);XT=n(re,"LI",{});var Pxe=s(XT);dbe=n(Pxe,"STRONG",{});var e3t=s(dbe);W3r=r(e3t,"albert"),e3t.forEach(t),H3r=r(Pxe," \u2014 "),Uz=n(Pxe,"A",{href:!0});var o3t=s(Uz);U3r=r(o3t,"TFAlbertForQuestionAnswering"),o3t.forEach(t),J3r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),Y3r=i(re),zT=n(re,"LI",{});var $xe=s(zT);cbe=n($xe,"STRONG",{});var r3t=s(cbe);K3r=r(r3t,"bert"),r3t.forEach(t),Z3r=r($xe," \u2014 "),Jz=n($xe,"A",{href:!0});var t3t=s(Jz);e2r=r(t3t,"TFBertForQuestionAnswering"),t3t.forEach(t),o2r=r($xe," (BERT model)"),$xe.forEach(t),r2r=i(re),QT=n(re,"LI",{});var Ixe=s(QT);fbe=n(Ixe,"STRONG",{});var a3t=s(fbe);t2r=r(a3t,"camembert"),a3t.forEach(t),a2r=r(Ixe," \u2014 "),Yz=n(Ixe,"A",{href:!0});var n3t=s(Yz);n2r=r(n3t,"TFCamembertForQuestionAnswering"),n3t.forEach(t),s2r=r(Ixe," (CamemBERT model)"),Ixe.forEach(t),l2r=i(re),WT=n(re,"LI",{});var qxe=s(WT);mbe=n(qxe,"STRONG",{});var s3t=s(mbe);i2r=r(s3t,"convbert"),s3t.forEach(t),d2r=r(qxe," \u2014 "),Kz=n(qxe,"A",{href:!0});var l3t=s(Kz);c2r=r(l3t,"TFConvBertForQuestionAnswering"),l3t.forEach(t),f2r=r(qxe," (ConvBERT model)"),qxe.forEach(t),m2r=i(re),HT=n(re,"LI",{});var Nxe=s(HT);gbe=n(Nxe,"STRONG",{});var i3t=s(gbe);g2r=r(i3t,"deberta"),i3t.forEach(t),h2r=r(Nxe," \u2014 "),Zz=n(Nxe,"A",{href:!0});var d3t=s(Zz);p2r=r(d3t,"TFDebertaForQuestionAnswering"),d3t.forEach(t),_2r=r(Nxe," (DeBERTa model)"),Nxe.forEach(t),u2r=i(re),UT=n(re,"LI",{});var jxe=s(UT);hbe=n(jxe,"STRONG",{});var c3t=s(hbe);b2r=r(c3t,"deberta-v2"),c3t.forEach(t),F2r=r(jxe," \u2014 "),eQ=n(jxe,"A",{href:!0});var f3t=s(eQ);v2r=r(f3t,"TFDebertaV2ForQuestionAnswering"),f3t.forEach(t),T2r=r(jxe," (DeBERTa-v2 model)"),jxe.forEach(t),M2r=i(re),JT=n(re,"LI",{});var Dxe=s(JT);pbe=n(Dxe,"STRONG",{});var m3t=s(pbe);E2r=r(m3t,"distilbert"),m3t.forEach(t),C2r=r(Dxe," \u2014 "),oQ=n(Dxe,"A",{href:!0});var g3t=s(oQ);w2r=r(g3t,"TFDistilBertForQuestionAnswering"),g3t.forEach(t),A2r=r(Dxe," (DistilBERT model)"),Dxe.forEach(t),y2r=i(re),YT=n(re,"LI",{});var Gxe=s(YT);_be=n(Gxe,"STRONG",{});var h3t=s(_be);L2r=r(h3t,"electra"),h3t.forEach(t),x2r=r(Gxe," \u2014 "),rQ=n(Gxe,"A",{href:!0});var p3t=s(rQ);k2r=r(p3t,"TFElectraForQuestionAnswering"),p3t.forEach(t),S2r=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),R2r=i(re),KT=n(re,"LI",{});var Oxe=s(KT);ube=n(Oxe,"STRONG",{});var _3t=s(ube);B2r=r(_3t,"flaubert"),_3t.forEach(t),P2r=r(Oxe," \u2014 "),tQ=n(Oxe,"A",{href:!0});var u3t=s(tQ);$2r=r(u3t,"TFFlaubertForQuestionAnsweringSimple"),u3t.forEach(t),I2r=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),q2r=i(re),ZT=n(re,"LI",{});var Vxe=s(ZT);bbe=n(Vxe,"STRONG",{});var b3t=s(bbe);N2r=r(b3t,"funnel"),b3t.forEach(t),j2r=r(Vxe," \u2014 "),aQ=n(Vxe,"A",{href:!0});var F3t=s(aQ);D2r=r(F3t,"TFFunnelForQuestionAnswering"),F3t.forEach(t),G2r=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),O2r=i(re),e7=n(re,"LI",{});var Xxe=s(e7);Fbe=n(Xxe,"STRONG",{});var v3t=s(Fbe);V2r=r(v3t,"gptj"),v3t.forEach(t),X2r=r(Xxe," \u2014 "),nQ=n(Xxe,"A",{href:!0});var T3t=s(nQ);z2r=r(T3t,"TFGPTJForQuestionAnswering"),T3t.forEach(t),Q2r=r(Xxe," (GPT-J model)"),Xxe.forEach(t),W2r=i(re),o7=n(re,"LI",{});var zxe=s(o7);vbe=n(zxe,"STRONG",{});var M3t=s(vbe);H2r=r(M3t,"longformer"),M3t.forEach(t),U2r=r(zxe," \u2014 "),sQ=n(zxe,"A",{href:!0});var E3t=s(sQ);J2r=r(E3t,"TFLongformerForQuestionAnswering"),E3t.forEach(t),Y2r=r(zxe," (Longformer model)"),zxe.forEach(t),K2r=i(re),r7=n(re,"LI",{});var Qxe=s(r7);Tbe=n(Qxe,"STRONG",{});var C3t=s(Tbe);Z2r=r(C3t,"mobilebert"),C3t.forEach(t),eFr=r(Qxe," \u2014 "),lQ=n(Qxe,"A",{href:!0});var w3t=s(lQ);oFr=r(w3t,"TFMobileBertForQuestionAnswering"),w3t.forEach(t),rFr=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),tFr=i(re),t7=n(re,"LI",{});var Wxe=s(t7);Mbe=n(Wxe,"STRONG",{});var A3t=s(Mbe);aFr=r(A3t,"mpnet"),A3t.forEach(t),nFr=r(Wxe," \u2014 "),iQ=n(Wxe,"A",{href:!0});var y3t=s(iQ);sFr=r(y3t,"TFMPNetForQuestionAnswering"),y3t.forEach(t),lFr=r(Wxe," (MPNet model)"),Wxe.forEach(t),iFr=i(re),a7=n(re,"LI",{});var Hxe=s(a7);Ebe=n(Hxe,"STRONG",{});var L3t=s(Ebe);dFr=r(L3t,"rembert"),L3t.forEach(t),cFr=r(Hxe," \u2014 "),dQ=n(Hxe,"A",{href:!0});var x3t=s(dQ);fFr=r(x3t,"TFRemBertForQuestionAnswering"),x3t.forEach(t),mFr=r(Hxe," (RemBERT model)"),Hxe.forEach(t),gFr=i(re),n7=n(re,"LI",{});var Uxe=s(n7);Cbe=n(Uxe,"STRONG",{});var k3t=s(Cbe);hFr=r(k3t,"roberta"),k3t.forEach(t),pFr=r(Uxe," \u2014 "),cQ=n(Uxe,"A",{href:!0});var S3t=s(cQ);_Fr=r(S3t,"TFRobertaForQuestionAnswering"),S3t.forEach(t),uFr=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),bFr=i(re),s7=n(re,"LI",{});var Jxe=s(s7);wbe=n(Jxe,"STRONG",{});var R3t=s(wbe);FFr=r(R3t,"roformer"),R3t.forEach(t),vFr=r(Jxe," \u2014 "),fQ=n(Jxe,"A",{href:!0});var B3t=s(fQ);TFr=r(B3t,"TFRoFormerForQuestionAnswering"),B3t.forEach(t),MFr=r(Jxe," (RoFormer model)"),Jxe.forEach(t),EFr=i(re),l7=n(re,"LI",{});var Yxe=s(l7);Abe=n(Yxe,"STRONG",{});var P3t=s(Abe);CFr=r(P3t,"xlm"),P3t.forEach(t),wFr=r(Yxe," \u2014 "),mQ=n(Yxe,"A",{href:!0});var $3t=s(mQ);AFr=r($3t,"TFXLMForQuestionAnsweringSimple"),$3t.forEach(t),yFr=r(Yxe," (XLM model)"),Yxe.forEach(t),LFr=i(re),i7=n(re,"LI",{});var Kxe=s(i7);ybe=n(Kxe,"STRONG",{});var I3t=s(ybe);xFr=r(I3t,"xlm-roberta"),I3t.forEach(t),kFr=r(Kxe," \u2014 "),gQ=n(Kxe,"A",{href:!0});var q3t=s(gQ);SFr=r(q3t,"TFXLMRobertaForQuestionAnswering"),q3t.forEach(t),RFr=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),BFr=i(re),d7=n(re,"LI",{});var Zxe=s(d7);Lbe=n(Zxe,"STRONG",{});var N3t=s(Lbe);PFr=r(N3t,"xlnet"),N3t.forEach(t),$Fr=r(Zxe," \u2014 "),hQ=n(Zxe,"A",{href:!0});var j3t=s(hQ);IFr=r(j3t,"TFXLNetForQuestionAnsweringSimple"),j3t.forEach(t),qFr=r(Zxe," (XLNet model)"),Zxe.forEach(t),re.forEach(t),NFr=i(wa),xbe=n(wa,"P",{});var D3t=s(xbe);jFr=r(D3t,"Examples:"),D3t.forEach(t),DFr=i(wa),m(Ty.$$.fragment,wa),wa.forEach(t),ni.forEach(t),MBe=i(c),Qc=n(c,"H2",{class:!0});var B$e=s(Qc);c7=n(B$e,"A",{id:!0,class:!0,href:!0});var G3t=s(c7);kbe=n(G3t,"SPAN",{});var O3t=s(kbe);m(My.$$.fragment,O3t),O3t.forEach(t),G3t.forEach(t),GFr=i(B$e),Sbe=n(B$e,"SPAN",{});var V3t=s(Sbe);OFr=r(V3t,"TFAutoModelForVision2Seq"),V3t.forEach(t),B$e.forEach(t),EBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Ey.$$.fragment,li),VFr=i(li),Wc=n(li,"P",{});var uJ=s(Wc);XFr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pQ=n(uJ,"A",{href:!0});var X3t=s(pQ);zFr=r(X3t,"from_pretrained()"),X3t.forEach(t),QFr=r(uJ," class method or the "),_Q=n(uJ,"A",{href:!0});var z3t=s(_Q);WFr=r(z3t,"from_config()"),z3t.forEach(t),HFr=r(uJ,` class
method.`),uJ.forEach(t),UFr=i(li),Cy=n(li,"P",{});var P$e=s(Cy);JFr=r(P$e,"This class cannot be instantiated directly using "),Rbe=n(P$e,"CODE",{});var Q3t=s(Rbe);YFr=r(Q3t,"__init__()"),Q3t.forEach(t),KFr=r(P$e," (throws an error)."),P$e.forEach(t),ZFr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(wy.$$.fragment,ii),evr=i(ii),Bbe=n(ii,"P",{});var W3t=s(Bbe);ovr=r(W3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W3t.forEach(t),rvr=i(ii),Hc=n(ii,"P",{});var bJ=s(Hc);tvr=r(bJ,`Note:
Loading a model from its configuration file does `),Pbe=n(bJ,"STRONG",{});var H3t=s(Pbe);avr=r(H3t,"not"),H3t.forEach(t),nvr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(bJ,"A",{href:!0});var U3t=s(uQ);svr=r(U3t,"from_pretrained()"),U3t.forEach(t),lvr=r(bJ," to load the model weights."),bJ.forEach(t),ivr=i(ii),$be=n(ii,"P",{});var J3t=s($be);dvr=r(J3t,"Examples:"),J3t.forEach(t),cvr=i(ii),m(Ay.$$.fragment,ii),ii.forEach(t),fvr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(yy.$$.fragment,Aa),mvr=i(Aa),Ibe=n(Aa,"P",{});var Y3t=s(Ibe);gvr=r(Y3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Y3t.forEach(t),hvr=i(Aa),yn=n(Aa,"P",{});var aC=s(yn);pvr=r(aC,"The model class to instantiate is selected based on the "),qbe=n(aC,"CODE",{});var K3t=s(qbe);_vr=r(K3t,"model_type"),K3t.forEach(t),uvr=r(aC,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(aC,"CODE",{});var Z3t=s(Nbe);bvr=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),Fvr=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(aC,"CODE",{});var e2t=s(jbe);vvr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),Tvr=r(aC,":"),aC.forEach(t),Mvr=i(Aa),Dbe=n(Aa,"UL",{});var o2t=s(Dbe);f7=n(o2t,"LI",{});var eke=s(f7);Gbe=n(eke,"STRONG",{});var r2t=s(Gbe);Evr=r(r2t,"vision-encoder-decoder"),r2t.forEach(t),Cvr=r(eke," \u2014 "),bQ=n(eke,"A",{href:!0});var t2t=s(bQ);wvr=r(t2t,"TFVisionEncoderDecoderModel"),t2t.forEach(t),Avr=r(eke," (Vision Encoder decoder model)"),eke.forEach(t),o2t.forEach(t),yvr=i(Aa),Obe=n(Aa,"P",{});var a2t=s(Obe);Lvr=r(a2t,"Examples:"),a2t.forEach(t),xvr=i(Aa),m(Ly.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),CBe=i(c),Uc=n(c,"H2",{class:!0});var $$e=s(Uc);m7=n($$e,"A",{id:!0,class:!0,href:!0});var n2t=s(m7);Vbe=n(n2t,"SPAN",{});var s2t=s(Vbe);m(xy.$$.fragment,s2t),s2t.forEach(t),n2t.forEach(t),kvr=i($$e),Xbe=n($$e,"SPAN",{});var l2t=s(Xbe);Svr=r(l2t,"TFAutoModelForSpeechSeq2Seq"),l2t.forEach(t),$$e.forEach(t),wBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(ky.$$.fragment,di),Rvr=i(di),Jc=n(di,"P",{});var FJ=s(Jc);Bvr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),FQ=n(FJ,"A",{href:!0});var i2t=s(FQ);Pvr=r(i2t,"from_pretrained()"),i2t.forEach(t),$vr=r(FJ," class method or the "),vQ=n(FJ,"A",{href:!0});var d2t=s(vQ);Ivr=r(d2t,"from_config()"),d2t.forEach(t),qvr=r(FJ,` class
method.`),FJ.forEach(t),Nvr=i(di),Sy=n(di,"P",{});var I$e=s(Sy);jvr=r(I$e,"This class cannot be instantiated directly using "),zbe=n(I$e,"CODE",{});var c2t=s(zbe);Dvr=r(c2t,"__init__()"),c2t.forEach(t),Gvr=r(I$e," (throws an error)."),I$e.forEach(t),Ovr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(Ry.$$.fragment,ci),Vvr=i(ci),Qbe=n(ci,"P",{});var f2t=s(Qbe);Xvr=r(f2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f2t.forEach(t),zvr=i(ci),Yc=n(ci,"P",{});var vJ=s(Yc);Qvr=r(vJ,`Note:
Loading a model from its configuration file does `),Wbe=n(vJ,"STRONG",{});var m2t=s(Wbe);Wvr=r(m2t,"not"),m2t.forEach(t),Hvr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(vJ,"A",{href:!0});var g2t=s(TQ);Uvr=r(g2t,"from_pretrained()"),g2t.forEach(t),Jvr=r(vJ," to load the model weights."),vJ.forEach(t),Yvr=i(ci),Hbe=n(ci,"P",{});var h2t=s(Hbe);Kvr=r(h2t,"Examples:"),h2t.forEach(t),Zvr=i(ci),m(By.$$.fragment,ci),ci.forEach(t),e6r=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Py.$$.fragment,ya),o6r=i(ya),Ube=n(ya,"P",{});var p2t=s(Ube);r6r=r(p2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),p2t.forEach(t),t6r=i(ya),Ln=n(ya,"P",{});var nC=s(Ln);a6r=r(nC,"The model class to instantiate is selected based on the "),Jbe=n(nC,"CODE",{});var _2t=s(Jbe);n6r=r(_2t,"model_type"),_2t.forEach(t),s6r=r(nC,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(nC,"CODE",{});var u2t=s(Ybe);l6r=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),i6r=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(nC,"CODE",{});var b2t=s(Kbe);d6r=r(b2t,"pretrained_model_name_or_path"),b2t.forEach(t),c6r=r(nC,":"),nC.forEach(t),f6r=i(ya),Zbe=n(ya,"UL",{});var F2t=s(Zbe);g7=n(F2t,"LI",{});var oke=s(g7);e3e=n(oke,"STRONG",{});var v2t=s(e3e);m6r=r(v2t,"speech_to_text"),v2t.forEach(t),g6r=r(oke," \u2014 "),MQ=n(oke,"A",{href:!0});var T2t=s(MQ);h6r=r(T2t,"TFSpeech2TextForConditionalGeneration"),T2t.forEach(t),p6r=r(oke," (Speech2Text model)"),oke.forEach(t),F2t.forEach(t),_6r=i(ya),o3e=n(ya,"P",{});var M2t=s(o3e);u6r=r(M2t,"Examples:"),M2t.forEach(t),b6r=i(ya),m($y.$$.fragment,ya),ya.forEach(t),di.forEach(t),ABe=i(c),Kc=n(c,"H2",{class:!0});var q$e=s(Kc);h7=n(q$e,"A",{id:!0,class:!0,href:!0});var E2t=s(h7);r3e=n(E2t,"SPAN",{});var C2t=s(r3e);m(Iy.$$.fragment,C2t),C2t.forEach(t),E2t.forEach(t),F6r=i(q$e),t3e=n(q$e,"SPAN",{});var w2t=s(t3e);v6r=r(w2t,"FlaxAutoModel"),w2t.forEach(t),q$e.forEach(t),yBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(qy.$$.fragment,fi),T6r=i(fi),Zc=n(fi,"P",{});var TJ=s(Zc);M6r=r(TJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EQ=n(TJ,"A",{href:!0});var A2t=s(EQ);E6r=r(A2t,"from_pretrained()"),A2t.forEach(t),C6r=r(TJ," class method or the "),CQ=n(TJ,"A",{href:!0});var y2t=s(CQ);w6r=r(y2t,"from_config()"),y2t.forEach(t),A6r=r(TJ,` class
method.`),TJ.forEach(t),y6r=i(fi),Ny=n(fi,"P",{});var N$e=s(Ny);L6r=r(N$e,"This class cannot be instantiated directly using "),a3e=n(N$e,"CODE",{});var L2t=s(a3e);x6r=r(L2t,"__init__()"),L2t.forEach(t),k6r=r(N$e," (throws an error)."),N$e.forEach(t),S6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(jy.$$.fragment,mi),R6r=i(mi),n3e=n(mi,"P",{});var x2t=s(n3e);B6r=r(x2t,"Instantiates one of the base model classes of the library from a configuration."),x2t.forEach(t),P6r=i(mi),ef=n(mi,"P",{});var MJ=s(ef);$6r=r(MJ,`Note:
Loading a model from its configuration file does `),s3e=n(MJ,"STRONG",{});var k2t=s(s3e);I6r=r(k2t,"not"),k2t.forEach(t),q6r=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(MJ,"A",{href:!0});var S2t=s(wQ);N6r=r(S2t,"from_pretrained()"),S2t.forEach(t),j6r=r(MJ," to load the model weights."),MJ.forEach(t),D6r=i(mi),l3e=n(mi,"P",{});var R2t=s(l3e);G6r=r(R2t,"Examples:"),R2t.forEach(t),O6r=i(mi),m(Dy.$$.fragment,mi),mi.forEach(t),V6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(Gy.$$.fragment,La),X6r=i(La),i3e=n(La,"P",{});var B2t=s(i3e);z6r=r(B2t,"Instantiate one of the base model classes of the library from a pretrained model."),B2t.forEach(t),Q6r=i(La),xn=n(La,"P",{});var sC=s(xn);W6r=r(sC,"The model class to instantiate is selected based on the "),d3e=n(sC,"CODE",{});var P2t=s(d3e);H6r=r(P2t,"model_type"),P2t.forEach(t),U6r=r(sC,` property of the config object (either
passed as an argument or loaded from `),c3e=n(sC,"CODE",{});var $2t=s(c3e);J6r=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),Y6r=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f3e=n(sC,"CODE",{});var I2t=s(f3e);K6r=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),Z6r=r(sC,":"),sC.forEach(t),eTr=i(La),z=n(La,"UL",{});var W=s(z);p7=n(W,"LI",{});var rke=s(p7);m3e=n(rke,"STRONG",{});var q2t=s(m3e);oTr=r(q2t,"albert"),q2t.forEach(t),rTr=r(rke," \u2014 "),AQ=n(rke,"A",{href:!0});var N2t=s(AQ);tTr=r(N2t,"FlaxAlbertModel"),N2t.forEach(t),aTr=r(rke," (ALBERT model)"),rke.forEach(t),nTr=i(W),_7=n(W,"LI",{});var tke=s(_7);g3e=n(tke,"STRONG",{});var j2t=s(g3e);sTr=r(j2t,"bart"),j2t.forEach(t),lTr=r(tke," \u2014 "),yQ=n(tke,"A",{href:!0});var D2t=s(yQ);iTr=r(D2t,"FlaxBartModel"),D2t.forEach(t),dTr=r(tke," (BART model)"),tke.forEach(t),cTr=i(W),u7=n(W,"LI",{});var ake=s(u7);h3e=n(ake,"STRONG",{});var G2t=s(h3e);fTr=r(G2t,"beit"),G2t.forEach(t),mTr=r(ake," \u2014 "),LQ=n(ake,"A",{href:!0});var O2t=s(LQ);gTr=r(O2t,"FlaxBeitModel"),O2t.forEach(t),hTr=r(ake," (BEiT model)"),ake.forEach(t),pTr=i(W),b7=n(W,"LI",{});var nke=s(b7);p3e=n(nke,"STRONG",{});var V2t=s(p3e);_Tr=r(V2t,"bert"),V2t.forEach(t),uTr=r(nke," \u2014 "),xQ=n(nke,"A",{href:!0});var X2t=s(xQ);bTr=r(X2t,"FlaxBertModel"),X2t.forEach(t),FTr=r(nke," (BERT model)"),nke.forEach(t),vTr=i(W),F7=n(W,"LI",{});var ske=s(F7);_3e=n(ske,"STRONG",{});var z2t=s(_3e);TTr=r(z2t,"big_bird"),z2t.forEach(t),MTr=r(ske," \u2014 "),kQ=n(ske,"A",{href:!0});var Q2t=s(kQ);ETr=r(Q2t,"FlaxBigBirdModel"),Q2t.forEach(t),CTr=r(ske," (BigBird model)"),ske.forEach(t),wTr=i(W),v7=n(W,"LI",{});var lke=s(v7);u3e=n(lke,"STRONG",{});var W2t=s(u3e);ATr=r(W2t,"blenderbot"),W2t.forEach(t),yTr=r(lke," \u2014 "),SQ=n(lke,"A",{href:!0});var H2t=s(SQ);LTr=r(H2t,"FlaxBlenderbotModel"),H2t.forEach(t),xTr=r(lke," (Blenderbot model)"),lke.forEach(t),kTr=i(W),T7=n(W,"LI",{});var ike=s(T7);b3e=n(ike,"STRONG",{});var U2t=s(b3e);STr=r(U2t,"blenderbot-small"),U2t.forEach(t),RTr=r(ike," \u2014 "),RQ=n(ike,"A",{href:!0});var J2t=s(RQ);BTr=r(J2t,"FlaxBlenderbotSmallModel"),J2t.forEach(t),PTr=r(ike," (BlenderbotSmall model)"),ike.forEach(t),$Tr=i(W),M7=n(W,"LI",{});var dke=s(M7);F3e=n(dke,"STRONG",{});var Y2t=s(F3e);ITr=r(Y2t,"clip"),Y2t.forEach(t),qTr=r(dke," \u2014 "),BQ=n(dke,"A",{href:!0});var K2t=s(BQ);NTr=r(K2t,"FlaxCLIPModel"),K2t.forEach(t),jTr=r(dke," (CLIP model)"),dke.forEach(t),DTr=i(W),E7=n(W,"LI",{});var cke=s(E7);v3e=n(cke,"STRONG",{});var Z2t=s(v3e);GTr=r(Z2t,"distilbert"),Z2t.forEach(t),OTr=r(cke," \u2014 "),PQ=n(cke,"A",{href:!0});var eFt=s(PQ);VTr=r(eFt,"FlaxDistilBertModel"),eFt.forEach(t),XTr=r(cke," (DistilBERT model)"),cke.forEach(t),zTr=i(W),C7=n(W,"LI",{});var fke=s(C7);T3e=n(fke,"STRONG",{});var oFt=s(T3e);QTr=r(oFt,"electra"),oFt.forEach(t),WTr=r(fke," \u2014 "),$Q=n(fke,"A",{href:!0});var rFt=s($Q);HTr=r(rFt,"FlaxElectraModel"),rFt.forEach(t),UTr=r(fke," (ELECTRA model)"),fke.forEach(t),JTr=i(W),w7=n(W,"LI",{});var mke=s(w7);M3e=n(mke,"STRONG",{});var tFt=s(M3e);YTr=r(tFt,"gpt2"),tFt.forEach(t),KTr=r(mke," \u2014 "),IQ=n(mke,"A",{href:!0});var aFt=s(IQ);ZTr=r(aFt,"FlaxGPT2Model"),aFt.forEach(t),e7r=r(mke," (OpenAI GPT-2 model)"),mke.forEach(t),o7r=i(W),A7=n(W,"LI",{});var gke=s(A7);E3e=n(gke,"STRONG",{});var nFt=s(E3e);r7r=r(nFt,"gpt_neo"),nFt.forEach(t),t7r=r(gke," \u2014 "),qQ=n(gke,"A",{href:!0});var sFt=s(qQ);a7r=r(sFt,"FlaxGPTNeoModel"),sFt.forEach(t),n7r=r(gke," (GPT Neo model)"),gke.forEach(t),s7r=i(W),y7=n(W,"LI",{});var hke=s(y7);C3e=n(hke,"STRONG",{});var lFt=s(C3e);l7r=r(lFt,"gptj"),lFt.forEach(t),i7r=r(hke," \u2014 "),NQ=n(hke,"A",{href:!0});var iFt=s(NQ);d7r=r(iFt,"FlaxGPTJModel"),iFt.forEach(t),c7r=r(hke," (GPT-J model)"),hke.forEach(t),f7r=i(W),L7=n(W,"LI",{});var pke=s(L7);w3e=n(pke,"STRONG",{});var dFt=s(w3e);m7r=r(dFt,"marian"),dFt.forEach(t),g7r=r(pke," \u2014 "),jQ=n(pke,"A",{href:!0});var cFt=s(jQ);h7r=r(cFt,"FlaxMarianModel"),cFt.forEach(t),p7r=r(pke," (Marian model)"),pke.forEach(t),_7r=i(W),x7=n(W,"LI",{});var _ke=s(x7);A3e=n(_ke,"STRONG",{});var fFt=s(A3e);u7r=r(fFt,"mbart"),fFt.forEach(t),b7r=r(_ke," \u2014 "),DQ=n(_ke,"A",{href:!0});var mFt=s(DQ);F7r=r(mFt,"FlaxMBartModel"),mFt.forEach(t),v7r=r(_ke," (mBART model)"),_ke.forEach(t),T7r=i(W),k7=n(W,"LI",{});var uke=s(k7);y3e=n(uke,"STRONG",{});var gFt=s(y3e);M7r=r(gFt,"mt5"),gFt.forEach(t),E7r=r(uke," \u2014 "),GQ=n(uke,"A",{href:!0});var hFt=s(GQ);C7r=r(hFt,"FlaxMT5Model"),hFt.forEach(t),w7r=r(uke," (mT5 model)"),uke.forEach(t),A7r=i(W),S7=n(W,"LI",{});var bke=s(S7);L3e=n(bke,"STRONG",{});var pFt=s(L3e);y7r=r(pFt,"pegasus"),pFt.forEach(t),L7r=r(bke," \u2014 "),OQ=n(bke,"A",{href:!0});var _Ft=s(OQ);x7r=r(_Ft,"FlaxPegasusModel"),_Ft.forEach(t),k7r=r(bke," (Pegasus model)"),bke.forEach(t),S7r=i(W),R7=n(W,"LI",{});var Fke=s(R7);x3e=n(Fke,"STRONG",{});var uFt=s(x3e);R7r=r(uFt,"roberta"),uFt.forEach(t),B7r=r(Fke," \u2014 "),VQ=n(Fke,"A",{href:!0});var bFt=s(VQ);P7r=r(bFt,"FlaxRobertaModel"),bFt.forEach(t),$7r=r(Fke," (RoBERTa model)"),Fke.forEach(t),I7r=i(W),B7=n(W,"LI",{});var vke=s(B7);k3e=n(vke,"STRONG",{});var FFt=s(k3e);q7r=r(FFt,"roformer"),FFt.forEach(t),N7r=r(vke," \u2014 "),XQ=n(vke,"A",{href:!0});var vFt=s(XQ);j7r=r(vFt,"FlaxRoFormerModel"),vFt.forEach(t),D7r=r(vke," (RoFormer model)"),vke.forEach(t),G7r=i(W),P7=n(W,"LI",{});var Tke=s(P7);S3e=n(Tke,"STRONG",{});var TFt=s(S3e);O7r=r(TFt,"t5"),TFt.forEach(t),V7r=r(Tke," \u2014 "),zQ=n(Tke,"A",{href:!0});var MFt=s(zQ);X7r=r(MFt,"FlaxT5Model"),MFt.forEach(t),z7r=r(Tke," (T5 model)"),Tke.forEach(t),Q7r=i(W),$7=n(W,"LI",{});var Mke=s($7);R3e=n(Mke,"STRONG",{});var EFt=s(R3e);W7r=r(EFt,"vision-text-dual-encoder"),EFt.forEach(t),H7r=r(Mke," \u2014 "),QQ=n(Mke,"A",{href:!0});var CFt=s(QQ);U7r=r(CFt,"FlaxVisionTextDualEncoderModel"),CFt.forEach(t),J7r=r(Mke," (VisionTextDualEncoder model)"),Mke.forEach(t),Y7r=i(W),I7=n(W,"LI",{});var Eke=s(I7);B3e=n(Eke,"STRONG",{});var wFt=s(B3e);K7r=r(wFt,"vit"),wFt.forEach(t),Z7r=r(Eke," \u2014 "),WQ=n(Eke,"A",{href:!0});var AFt=s(WQ);eMr=r(AFt,"FlaxViTModel"),AFt.forEach(t),oMr=r(Eke," (ViT model)"),Eke.forEach(t),rMr=i(W),q7=n(W,"LI",{});var Cke=s(q7);P3e=n(Cke,"STRONG",{});var yFt=s(P3e);tMr=r(yFt,"wav2vec2"),yFt.forEach(t),aMr=r(Cke," \u2014 "),HQ=n(Cke,"A",{href:!0});var LFt=s(HQ);nMr=r(LFt,"FlaxWav2Vec2Model"),LFt.forEach(t),sMr=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),lMr=i(W),N7=n(W,"LI",{});var wke=s(N7);$3e=n(wke,"STRONG",{});var xFt=s($3e);iMr=r(xFt,"xglm"),xFt.forEach(t),dMr=r(wke," \u2014 "),UQ=n(wke,"A",{href:!0});var kFt=s(UQ);cMr=r(kFt,"FlaxXGLMModel"),kFt.forEach(t),fMr=r(wke," (XGLM model)"),wke.forEach(t),mMr=i(W),j7=n(W,"LI",{});var Ake=s(j7);I3e=n(Ake,"STRONG",{});var SFt=s(I3e);gMr=r(SFt,"xlm-roberta"),SFt.forEach(t),hMr=r(Ake," \u2014 "),JQ=n(Ake,"A",{href:!0});var RFt=s(JQ);pMr=r(RFt,"FlaxXLMRobertaModel"),RFt.forEach(t),_Mr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),W.forEach(t),uMr=i(La),q3e=n(La,"P",{});var BFt=s(q3e);bMr=r(BFt,"Examples:"),BFt.forEach(t),FMr=i(La),m(Oy.$$.fragment,La),La.forEach(t),fi.forEach(t),LBe=i(c),of=n(c,"H2",{class:!0});var j$e=s(of);D7=n(j$e,"A",{id:!0,class:!0,href:!0});var PFt=s(D7);N3e=n(PFt,"SPAN",{});var $Ft=s(N3e);m(Vy.$$.fragment,$Ft),$Ft.forEach(t),PFt.forEach(t),vMr=i(j$e),j3e=n(j$e,"SPAN",{});var IFt=s(j3e);TMr=r(IFt,"FlaxAutoModelForCausalLM"),IFt.forEach(t),j$e.forEach(t),xBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Xy.$$.fragment,gi),MMr=i(gi),rf=n(gi,"P",{});var EJ=s(rf);EMr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),YQ=n(EJ,"A",{href:!0});var qFt=s(YQ);CMr=r(qFt,"from_pretrained()"),qFt.forEach(t),wMr=r(EJ," class method or the "),KQ=n(EJ,"A",{href:!0});var NFt=s(KQ);AMr=r(NFt,"from_config()"),NFt.forEach(t),yMr=r(EJ,` class
method.`),EJ.forEach(t),LMr=i(gi),zy=n(gi,"P",{});var D$e=s(zy);xMr=r(D$e,"This class cannot be instantiated directly using "),D3e=n(D$e,"CODE",{});var jFt=s(D3e);kMr=r(jFt,"__init__()"),jFt.forEach(t),SMr=r(D$e," (throws an error)."),D$e.forEach(t),RMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Qy.$$.fragment,hi),BMr=i(hi),G3e=n(hi,"P",{});var DFt=s(G3e);PMr=r(DFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DFt.forEach(t),$Mr=i(hi),tf=n(hi,"P",{});var CJ=s(tf);IMr=r(CJ,`Note:
Loading a model from its configuration file does `),O3e=n(CJ,"STRONG",{});var GFt=s(O3e);qMr=r(GFt,"not"),GFt.forEach(t),NMr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(CJ,"A",{href:!0});var OFt=s(ZQ);jMr=r(OFt,"from_pretrained()"),OFt.forEach(t),DMr=r(CJ," to load the model weights."),CJ.forEach(t),GMr=i(hi),V3e=n(hi,"P",{});var VFt=s(V3e);OMr=r(VFt,"Examples:"),VFt.forEach(t),VMr=i(hi),m(Wy.$$.fragment,hi),hi.forEach(t),XMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Hy.$$.fragment,xa),zMr=i(xa),X3e=n(xa,"P",{});var XFt=s(X3e);QMr=r(XFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XFt.forEach(t),WMr=i(xa),kn=n(xa,"P",{});var lC=s(kn);HMr=r(lC,"The model class to instantiate is selected based on the "),z3e=n(lC,"CODE",{});var zFt=s(z3e);UMr=r(zFt,"model_type"),zFt.forEach(t),JMr=r(lC,` property of the config object (either
passed as an argument or loaded from `),Q3e=n(lC,"CODE",{});var QFt=s(Q3e);YMr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),KMr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W3e=n(lC,"CODE",{});var WFt=s(W3e);ZMr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),eEr=r(lC,":"),lC.forEach(t),oEr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);G7=n(pi,"LI",{});var yke=s(G7);H3e=n(yke,"STRONG",{});var HFt=s(H3e);rEr=r(HFt,"bart"),HFt.forEach(t),tEr=r(yke," \u2014 "),eW=n(yke,"A",{href:!0});var UFt=s(eW);aEr=r(UFt,"FlaxBartForCausalLM"),UFt.forEach(t),nEr=r(yke," (BART model)"),yke.forEach(t),sEr=i(pi),O7=n(pi,"LI",{});var Lke=s(O7);U3e=n(Lke,"STRONG",{});var JFt=s(U3e);lEr=r(JFt,"gpt2"),JFt.forEach(t),iEr=r(Lke," \u2014 "),oW=n(Lke,"A",{href:!0});var YFt=s(oW);dEr=r(YFt,"FlaxGPT2LMHeadModel"),YFt.forEach(t),cEr=r(Lke," (OpenAI GPT-2 model)"),Lke.forEach(t),fEr=i(pi),V7=n(pi,"LI",{});var xke=s(V7);J3e=n(xke,"STRONG",{});var KFt=s(J3e);mEr=r(KFt,"gpt_neo"),KFt.forEach(t),gEr=r(xke," \u2014 "),rW=n(xke,"A",{href:!0});var ZFt=s(rW);hEr=r(ZFt,"FlaxGPTNeoForCausalLM"),ZFt.forEach(t),pEr=r(xke," (GPT Neo model)"),xke.forEach(t),_Er=i(pi),X7=n(pi,"LI",{});var kke=s(X7);Y3e=n(kke,"STRONG",{});var evt=s(Y3e);uEr=r(evt,"gptj"),evt.forEach(t),bEr=r(kke," \u2014 "),tW=n(kke,"A",{href:!0});var ovt=s(tW);FEr=r(ovt,"FlaxGPTJForCausalLM"),ovt.forEach(t),vEr=r(kke," (GPT-J model)"),kke.forEach(t),TEr=i(pi),z7=n(pi,"LI",{});var Ske=s(z7);K3e=n(Ske,"STRONG",{});var rvt=s(K3e);MEr=r(rvt,"xglm"),rvt.forEach(t),EEr=r(Ske," \u2014 "),aW=n(Ske,"A",{href:!0});var tvt=s(aW);CEr=r(tvt,"FlaxXGLMForCausalLM"),tvt.forEach(t),wEr=r(Ske," (XGLM model)"),Ske.forEach(t),pi.forEach(t),AEr=i(xa),Z3e=n(xa,"P",{});var avt=s(Z3e);yEr=r(avt,"Examples:"),avt.forEach(t),LEr=i(xa),m(Uy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),kBe=i(c),af=n(c,"H2",{class:!0});var G$e=s(af);Q7=n(G$e,"A",{id:!0,class:!0,href:!0});var nvt=s(Q7);e2e=n(nvt,"SPAN",{});var svt=s(e2e);m(Jy.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),xEr=i(G$e),o2e=n(G$e,"SPAN",{});var lvt=s(o2e);kEr=r(lvt,"FlaxAutoModelForPreTraining"),lvt.forEach(t),G$e.forEach(t),SBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Yy.$$.fragment,_i),SEr=i(_i),nf=n(_i,"P",{});var wJ=s(nf);REr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nW=n(wJ,"A",{href:!0});var ivt=s(nW);BEr=r(ivt,"from_pretrained()"),ivt.forEach(t),PEr=r(wJ," class method or the "),sW=n(wJ,"A",{href:!0});var dvt=s(sW);$Er=r(dvt,"from_config()"),dvt.forEach(t),IEr=r(wJ,` class
method.`),wJ.forEach(t),qEr=i(_i),Ky=n(_i,"P",{});var O$e=s(Ky);NEr=r(O$e,"This class cannot be instantiated directly using "),r2e=n(O$e,"CODE",{});var cvt=s(r2e);jEr=r(cvt,"__init__()"),cvt.forEach(t),DEr=r(O$e," (throws an error)."),O$e.forEach(t),GEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Zy.$$.fragment,ui),OEr=i(ui),t2e=n(ui,"P",{});var fvt=s(t2e);VEr=r(fvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fvt.forEach(t),XEr=i(ui),sf=n(ui,"P",{});var AJ=s(sf);zEr=r(AJ,`Note:
Loading a model from its configuration file does `),a2e=n(AJ,"STRONG",{});var mvt=s(a2e);QEr=r(mvt,"not"),mvt.forEach(t),WEr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(AJ,"A",{href:!0});var gvt=s(lW);HEr=r(gvt,"from_pretrained()"),gvt.forEach(t),UEr=r(AJ," to load the model weights."),AJ.forEach(t),JEr=i(ui),n2e=n(ui,"P",{});var hvt=s(n2e);YEr=r(hvt,"Examples:"),hvt.forEach(t),KEr=i(ui),m(eL.$$.fragment,ui),ui.forEach(t),ZEr=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(oL.$$.fragment,ka),eCr=i(ka),s2e=n(ka,"P",{});var pvt=s(s2e);oCr=r(pvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),pvt.forEach(t),rCr=i(ka),Sn=n(ka,"P",{});var iC=s(Sn);tCr=r(iC,"The model class to instantiate is selected based on the "),l2e=n(iC,"CODE",{});var _vt=s(l2e);aCr=r(_vt,"model_type"),_vt.forEach(t),nCr=r(iC,` property of the config object (either
passed as an argument or loaded from `),i2e=n(iC,"CODE",{});var uvt=s(i2e);sCr=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),lCr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d2e=n(iC,"CODE",{});var bvt=s(d2e);iCr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),dCr=r(iC,":"),iC.forEach(t),cCr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);W7=n(pe,"LI",{});var Rke=s(W7);c2e=n(Rke,"STRONG",{});var Fvt=s(c2e);fCr=r(Fvt,"albert"),Fvt.forEach(t),mCr=r(Rke," \u2014 "),iW=n(Rke,"A",{href:!0});var vvt=s(iW);gCr=r(vvt,"FlaxAlbertForPreTraining"),vvt.forEach(t),hCr=r(Rke," (ALBERT model)"),Rke.forEach(t),pCr=i(pe),H7=n(pe,"LI",{});var Bke=s(H7);f2e=n(Bke,"STRONG",{});var Tvt=s(f2e);_Cr=r(Tvt,"bart"),Tvt.forEach(t),uCr=r(Bke," \u2014 "),dW=n(Bke,"A",{href:!0});var Mvt=s(dW);bCr=r(Mvt,"FlaxBartForConditionalGeneration"),Mvt.forEach(t),FCr=r(Bke," (BART model)"),Bke.forEach(t),vCr=i(pe),U7=n(pe,"LI",{});var Pke=s(U7);m2e=n(Pke,"STRONG",{});var Evt=s(m2e);TCr=r(Evt,"bert"),Evt.forEach(t),MCr=r(Pke," \u2014 "),cW=n(Pke,"A",{href:!0});var Cvt=s(cW);ECr=r(Cvt,"FlaxBertForPreTraining"),Cvt.forEach(t),CCr=r(Pke," (BERT model)"),Pke.forEach(t),wCr=i(pe),J7=n(pe,"LI",{});var $ke=s(J7);g2e=n($ke,"STRONG",{});var wvt=s(g2e);ACr=r(wvt,"big_bird"),wvt.forEach(t),yCr=r($ke," \u2014 "),fW=n($ke,"A",{href:!0});var Avt=s(fW);LCr=r(Avt,"FlaxBigBirdForPreTraining"),Avt.forEach(t),xCr=r($ke," (BigBird model)"),$ke.forEach(t),kCr=i(pe),Y7=n(pe,"LI",{});var Ike=s(Y7);h2e=n(Ike,"STRONG",{});var yvt=s(h2e);SCr=r(yvt,"electra"),yvt.forEach(t),RCr=r(Ike," \u2014 "),mW=n(Ike,"A",{href:!0});var Lvt=s(mW);BCr=r(Lvt,"FlaxElectraForPreTraining"),Lvt.forEach(t),PCr=r(Ike," (ELECTRA model)"),Ike.forEach(t),$Cr=i(pe),K7=n(pe,"LI",{});var qke=s(K7);p2e=n(qke,"STRONG",{});var xvt=s(p2e);ICr=r(xvt,"mbart"),xvt.forEach(t),qCr=r(qke," \u2014 "),gW=n(qke,"A",{href:!0});var kvt=s(gW);NCr=r(kvt,"FlaxMBartForConditionalGeneration"),kvt.forEach(t),jCr=r(qke," (mBART model)"),qke.forEach(t),DCr=i(pe),Z7=n(pe,"LI",{});var Nke=s(Z7);_2e=n(Nke,"STRONG",{});var Svt=s(_2e);GCr=r(Svt,"mt5"),Svt.forEach(t),OCr=r(Nke," \u2014 "),hW=n(Nke,"A",{href:!0});var Rvt=s(hW);VCr=r(Rvt,"FlaxMT5ForConditionalGeneration"),Rvt.forEach(t),XCr=r(Nke," (mT5 model)"),Nke.forEach(t),zCr=i(pe),eM=n(pe,"LI",{});var jke=s(eM);u2e=n(jke,"STRONG",{});var Bvt=s(u2e);QCr=r(Bvt,"roberta"),Bvt.forEach(t),WCr=r(jke," \u2014 "),pW=n(jke,"A",{href:!0});var Pvt=s(pW);HCr=r(Pvt,"FlaxRobertaForMaskedLM"),Pvt.forEach(t),UCr=r(jke," (RoBERTa model)"),jke.forEach(t),JCr=i(pe),oM=n(pe,"LI",{});var Dke=s(oM);b2e=n(Dke,"STRONG",{});var $vt=s(b2e);YCr=r($vt,"roformer"),$vt.forEach(t),KCr=r(Dke," \u2014 "),_W=n(Dke,"A",{href:!0});var Ivt=s(_W);ZCr=r(Ivt,"FlaxRoFormerForMaskedLM"),Ivt.forEach(t),e5r=r(Dke," (RoFormer model)"),Dke.forEach(t),o5r=i(pe),rM=n(pe,"LI",{});var Gke=s(rM);F2e=n(Gke,"STRONG",{});var qvt=s(F2e);r5r=r(qvt,"t5"),qvt.forEach(t),t5r=r(Gke," \u2014 "),uW=n(Gke,"A",{href:!0});var Nvt=s(uW);a5r=r(Nvt,"FlaxT5ForConditionalGeneration"),Nvt.forEach(t),n5r=r(Gke," (T5 model)"),Gke.forEach(t),s5r=i(pe),tM=n(pe,"LI",{});var Oke=s(tM);v2e=n(Oke,"STRONG",{});var jvt=s(v2e);l5r=r(jvt,"wav2vec2"),jvt.forEach(t),i5r=r(Oke," \u2014 "),bW=n(Oke,"A",{href:!0});var Dvt=s(bW);d5r=r(Dvt,"FlaxWav2Vec2ForPreTraining"),Dvt.forEach(t),c5r=r(Oke," (Wav2Vec2 model)"),Oke.forEach(t),f5r=i(pe),aM=n(pe,"LI",{});var Vke=s(aM);T2e=n(Vke,"STRONG",{});var Gvt=s(T2e);m5r=r(Gvt,"xlm-roberta"),Gvt.forEach(t),g5r=r(Vke," \u2014 "),FW=n(Vke,"A",{href:!0});var Ovt=s(FW);h5r=r(Ovt,"FlaxXLMRobertaForMaskedLM"),Ovt.forEach(t),p5r=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),pe.forEach(t),_5r=i(ka),M2e=n(ka,"P",{});var Vvt=s(M2e);u5r=r(Vvt,"Examples:"),Vvt.forEach(t),b5r=i(ka),m(rL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),RBe=i(c),lf=n(c,"H2",{class:!0});var V$e=s(lf);nM=n(V$e,"A",{id:!0,class:!0,href:!0});var Xvt=s(nM);E2e=n(Xvt,"SPAN",{});var zvt=s(E2e);m(tL.$$.fragment,zvt),zvt.forEach(t),Xvt.forEach(t),F5r=i(V$e),C2e=n(V$e,"SPAN",{});var Qvt=s(C2e);v5r=r(Qvt,"FlaxAutoModelForMaskedLM"),Qvt.forEach(t),V$e.forEach(t),BBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(aL.$$.fragment,bi),T5r=i(bi),df=n(bi,"P",{});var yJ=s(df);M5r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vW=n(yJ,"A",{href:!0});var Wvt=s(vW);E5r=r(Wvt,"from_pretrained()"),Wvt.forEach(t),C5r=r(yJ," class method or the "),TW=n(yJ,"A",{href:!0});var Hvt=s(TW);w5r=r(Hvt,"from_config()"),Hvt.forEach(t),A5r=r(yJ,` class
method.`),yJ.forEach(t),y5r=i(bi),nL=n(bi,"P",{});var X$e=s(nL);L5r=r(X$e,"This class cannot be instantiated directly using "),w2e=n(X$e,"CODE",{});var Uvt=s(w2e);x5r=r(Uvt,"__init__()"),Uvt.forEach(t),k5r=r(X$e," (throws an error)."),X$e.forEach(t),S5r=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(sL.$$.fragment,Fi),R5r=i(Fi),A2e=n(Fi,"P",{});var Jvt=s(A2e);B5r=r(Jvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Jvt.forEach(t),P5r=i(Fi),cf=n(Fi,"P",{});var LJ=s(cf);$5r=r(LJ,`Note:
Loading a model from its configuration file does `),y2e=n(LJ,"STRONG",{});var Yvt=s(y2e);I5r=r(Yvt,"not"),Yvt.forEach(t),q5r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(LJ,"A",{href:!0});var Kvt=s(MW);N5r=r(Kvt,"from_pretrained()"),Kvt.forEach(t),j5r=r(LJ," to load the model weights."),LJ.forEach(t),D5r=i(Fi),L2e=n(Fi,"P",{});var Zvt=s(L2e);G5r=r(Zvt,"Examples:"),Zvt.forEach(t),O5r=i(Fi),m(lL.$$.fragment,Fi),Fi.forEach(t),V5r=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(iL.$$.fragment,Sa),X5r=i(Sa),x2e=n(Sa,"P",{});var e6t=s(x2e);z5r=r(e6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),e6t.forEach(t),Q5r=i(Sa),Rn=n(Sa,"P",{});var dC=s(Rn);W5r=r(dC,"The model class to instantiate is selected based on the "),k2e=n(dC,"CODE",{});var o6t=s(k2e);H5r=r(o6t,"model_type"),o6t.forEach(t),U5r=r(dC,` property of the config object (either
passed as an argument or loaded from `),S2e=n(dC,"CODE",{});var r6t=s(S2e);J5r=r(r6t,"pretrained_model_name_or_path"),r6t.forEach(t),Y5r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R2e=n(dC,"CODE",{});var t6t=s(R2e);K5r=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Z5r=r(dC,":"),dC.forEach(t),ewr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);sM=n(Ae,"LI",{});var Xke=s(sM);B2e=n(Xke,"STRONG",{});var a6t=s(B2e);owr=r(a6t,"albert"),a6t.forEach(t),rwr=r(Xke," \u2014 "),EW=n(Xke,"A",{href:!0});var n6t=s(EW);twr=r(n6t,"FlaxAlbertForMaskedLM"),n6t.forEach(t),awr=r(Xke," (ALBERT model)"),Xke.forEach(t),nwr=i(Ae),lM=n(Ae,"LI",{});var zke=s(lM);P2e=n(zke,"STRONG",{});var s6t=s(P2e);swr=r(s6t,"bart"),s6t.forEach(t),lwr=r(zke," \u2014 "),CW=n(zke,"A",{href:!0});var l6t=s(CW);iwr=r(l6t,"FlaxBartForConditionalGeneration"),l6t.forEach(t),dwr=r(zke," (BART model)"),zke.forEach(t),cwr=i(Ae),iM=n(Ae,"LI",{});var Qke=s(iM);$2e=n(Qke,"STRONG",{});var i6t=s($2e);fwr=r(i6t,"bert"),i6t.forEach(t),mwr=r(Qke," \u2014 "),wW=n(Qke,"A",{href:!0});var d6t=s(wW);gwr=r(d6t,"FlaxBertForMaskedLM"),d6t.forEach(t),hwr=r(Qke," (BERT model)"),Qke.forEach(t),pwr=i(Ae),dM=n(Ae,"LI",{});var Wke=s(dM);I2e=n(Wke,"STRONG",{});var c6t=s(I2e);_wr=r(c6t,"big_bird"),c6t.forEach(t),uwr=r(Wke," \u2014 "),AW=n(Wke,"A",{href:!0});var f6t=s(AW);bwr=r(f6t,"FlaxBigBirdForMaskedLM"),f6t.forEach(t),Fwr=r(Wke," (BigBird model)"),Wke.forEach(t),vwr=i(Ae),cM=n(Ae,"LI",{});var Hke=s(cM);q2e=n(Hke,"STRONG",{});var m6t=s(q2e);Twr=r(m6t,"distilbert"),m6t.forEach(t),Mwr=r(Hke," \u2014 "),yW=n(Hke,"A",{href:!0});var g6t=s(yW);Ewr=r(g6t,"FlaxDistilBertForMaskedLM"),g6t.forEach(t),Cwr=r(Hke," (DistilBERT model)"),Hke.forEach(t),wwr=i(Ae),fM=n(Ae,"LI",{});var Uke=s(fM);N2e=n(Uke,"STRONG",{});var h6t=s(N2e);Awr=r(h6t,"electra"),h6t.forEach(t),ywr=r(Uke," \u2014 "),LW=n(Uke,"A",{href:!0});var p6t=s(LW);Lwr=r(p6t,"FlaxElectraForMaskedLM"),p6t.forEach(t),xwr=r(Uke," (ELECTRA model)"),Uke.forEach(t),kwr=i(Ae),mM=n(Ae,"LI",{});var Jke=s(mM);j2e=n(Jke,"STRONG",{});var _6t=s(j2e);Swr=r(_6t,"mbart"),_6t.forEach(t),Rwr=r(Jke," \u2014 "),xW=n(Jke,"A",{href:!0});var u6t=s(xW);Bwr=r(u6t,"FlaxMBartForConditionalGeneration"),u6t.forEach(t),Pwr=r(Jke," (mBART model)"),Jke.forEach(t),$wr=i(Ae),gM=n(Ae,"LI",{});var Yke=s(gM);D2e=n(Yke,"STRONG",{});var b6t=s(D2e);Iwr=r(b6t,"roberta"),b6t.forEach(t),qwr=r(Yke," \u2014 "),kW=n(Yke,"A",{href:!0});var F6t=s(kW);Nwr=r(F6t,"FlaxRobertaForMaskedLM"),F6t.forEach(t),jwr=r(Yke," (RoBERTa model)"),Yke.forEach(t),Dwr=i(Ae),hM=n(Ae,"LI",{});var Kke=s(hM);G2e=n(Kke,"STRONG",{});var v6t=s(G2e);Gwr=r(v6t,"roformer"),v6t.forEach(t),Owr=r(Kke," \u2014 "),SW=n(Kke,"A",{href:!0});var T6t=s(SW);Vwr=r(T6t,"FlaxRoFormerForMaskedLM"),T6t.forEach(t),Xwr=r(Kke," (RoFormer model)"),Kke.forEach(t),zwr=i(Ae),pM=n(Ae,"LI",{});var Zke=s(pM);O2e=n(Zke,"STRONG",{});var M6t=s(O2e);Qwr=r(M6t,"xlm-roberta"),M6t.forEach(t),Wwr=r(Zke," \u2014 "),RW=n(Zke,"A",{href:!0});var E6t=s(RW);Hwr=r(E6t,"FlaxXLMRobertaForMaskedLM"),E6t.forEach(t),Uwr=r(Zke," (XLM-RoBERTa model)"),Zke.forEach(t),Ae.forEach(t),Jwr=i(Sa),V2e=n(Sa,"P",{});var C6t=s(V2e);Ywr=r(C6t,"Examples:"),C6t.forEach(t),Kwr=i(Sa),m(dL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),PBe=i(c),ff=n(c,"H2",{class:!0});var z$e=s(ff);_M=n(z$e,"A",{id:!0,class:!0,href:!0});var w6t=s(_M);X2e=n(w6t,"SPAN",{});var A6t=s(X2e);m(cL.$$.fragment,A6t),A6t.forEach(t),w6t.forEach(t),Zwr=i(z$e),z2e=n(z$e,"SPAN",{});var y6t=s(z2e);eAr=r(y6t,"FlaxAutoModelForSeq2SeqLM"),y6t.forEach(t),z$e.forEach(t),$Be=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(fL.$$.fragment,vi),oAr=i(vi),mf=n(vi,"P",{});var xJ=s(mf);rAr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),BW=n(xJ,"A",{href:!0});var L6t=s(BW);tAr=r(L6t,"from_pretrained()"),L6t.forEach(t),aAr=r(xJ," class method or the "),PW=n(xJ,"A",{href:!0});var x6t=s(PW);nAr=r(x6t,"from_config()"),x6t.forEach(t),sAr=r(xJ,` class
method.`),xJ.forEach(t),lAr=i(vi),mL=n(vi,"P",{});var Q$e=s(mL);iAr=r(Q$e,"This class cannot be instantiated directly using "),Q2e=n(Q$e,"CODE",{});var k6t=s(Q2e);dAr=r(k6t,"__init__()"),k6t.forEach(t),cAr=r(Q$e," (throws an error)."),Q$e.forEach(t),fAr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(gL.$$.fragment,Ti),mAr=i(Ti),W2e=n(Ti,"P",{});var S6t=s(W2e);gAr=r(S6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),S6t.forEach(t),hAr=i(Ti),gf=n(Ti,"P",{});var kJ=s(gf);pAr=r(kJ,`Note:
Loading a model from its configuration file does `),H2e=n(kJ,"STRONG",{});var R6t=s(H2e);_Ar=r(R6t,"not"),R6t.forEach(t),uAr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$W=n(kJ,"A",{href:!0});var B6t=s($W);bAr=r(B6t,"from_pretrained()"),B6t.forEach(t),FAr=r(kJ," to load the model weights."),kJ.forEach(t),vAr=i(Ti),U2e=n(Ti,"P",{});var P6t=s(U2e);TAr=r(P6t,"Examples:"),P6t.forEach(t),MAr=i(Ti),m(hL.$$.fragment,Ti),Ti.forEach(t),EAr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(pL.$$.fragment,Ra),CAr=i(Ra),J2e=n(Ra,"P",{});var $6t=s(J2e);wAr=r($6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$6t.forEach(t),AAr=i(Ra),Bn=n(Ra,"P",{});var cC=s(Bn);yAr=r(cC,"The model class to instantiate is selected based on the "),Y2e=n(cC,"CODE",{});var I6t=s(Y2e);LAr=r(I6t,"model_type"),I6t.forEach(t),xAr=r(cC,` property of the config object (either
passed as an argument or loaded from `),K2e=n(cC,"CODE",{});var q6t=s(K2e);kAr=r(q6t,"pretrained_model_name_or_path"),q6t.forEach(t),SAr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z2e=n(cC,"CODE",{});var N6t=s(Z2e);RAr=r(N6t,"pretrained_model_name_or_path"),N6t.forEach(t),BAr=r(cC,":"),cC.forEach(t),PAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);uM=n(so,"LI",{});var eSe=s(uM);eFe=n(eSe,"STRONG",{});var j6t=s(eFe);$Ar=r(j6t,"bart"),j6t.forEach(t),IAr=r(eSe," \u2014 "),IW=n(eSe,"A",{href:!0});var D6t=s(IW);qAr=r(D6t,"FlaxBartForConditionalGeneration"),D6t.forEach(t),NAr=r(eSe," (BART model)"),eSe.forEach(t),jAr=i(so),bM=n(so,"LI",{});var oSe=s(bM);oFe=n(oSe,"STRONG",{});var G6t=s(oFe);DAr=r(G6t,"blenderbot"),G6t.forEach(t),GAr=r(oSe," \u2014 "),qW=n(oSe,"A",{href:!0});var O6t=s(qW);OAr=r(O6t,"FlaxBlenderbotForConditionalGeneration"),O6t.forEach(t),VAr=r(oSe," (Blenderbot model)"),oSe.forEach(t),XAr=i(so),FM=n(so,"LI",{});var rSe=s(FM);rFe=n(rSe,"STRONG",{});var V6t=s(rFe);zAr=r(V6t,"blenderbot-small"),V6t.forEach(t),QAr=r(rSe," \u2014 "),NW=n(rSe,"A",{href:!0});var X6t=s(NW);WAr=r(X6t,"FlaxBlenderbotSmallForConditionalGeneration"),X6t.forEach(t),HAr=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),UAr=i(so),vM=n(so,"LI",{});var tSe=s(vM);tFe=n(tSe,"STRONG",{});var z6t=s(tFe);JAr=r(z6t,"encoder-decoder"),z6t.forEach(t),YAr=r(tSe," \u2014 "),jW=n(tSe,"A",{href:!0});var Q6t=s(jW);KAr=r(Q6t,"FlaxEncoderDecoderModel"),Q6t.forEach(t),ZAr=r(tSe," (Encoder decoder model)"),tSe.forEach(t),e0r=i(so),TM=n(so,"LI",{});var aSe=s(TM);aFe=n(aSe,"STRONG",{});var W6t=s(aFe);o0r=r(W6t,"marian"),W6t.forEach(t),r0r=r(aSe," \u2014 "),DW=n(aSe,"A",{href:!0});var H6t=s(DW);t0r=r(H6t,"FlaxMarianMTModel"),H6t.forEach(t),a0r=r(aSe," (Marian model)"),aSe.forEach(t),n0r=i(so),MM=n(so,"LI",{});var nSe=s(MM);nFe=n(nSe,"STRONG",{});var U6t=s(nFe);s0r=r(U6t,"mbart"),U6t.forEach(t),l0r=r(nSe," \u2014 "),GW=n(nSe,"A",{href:!0});var J6t=s(GW);i0r=r(J6t,"FlaxMBartForConditionalGeneration"),J6t.forEach(t),d0r=r(nSe," (mBART model)"),nSe.forEach(t),c0r=i(so),EM=n(so,"LI",{});var sSe=s(EM);sFe=n(sSe,"STRONG",{});var Y6t=s(sFe);f0r=r(Y6t,"mt5"),Y6t.forEach(t),m0r=r(sSe," \u2014 "),OW=n(sSe,"A",{href:!0});var K6t=s(OW);g0r=r(K6t,"FlaxMT5ForConditionalGeneration"),K6t.forEach(t),h0r=r(sSe," (mT5 model)"),sSe.forEach(t),p0r=i(so),CM=n(so,"LI",{});var lSe=s(CM);lFe=n(lSe,"STRONG",{});var Z6t=s(lFe);_0r=r(Z6t,"pegasus"),Z6t.forEach(t),u0r=r(lSe," \u2014 "),VW=n(lSe,"A",{href:!0});var eTt=s(VW);b0r=r(eTt,"FlaxPegasusForConditionalGeneration"),eTt.forEach(t),F0r=r(lSe," (Pegasus model)"),lSe.forEach(t),v0r=i(so),wM=n(so,"LI",{});var iSe=s(wM);iFe=n(iSe,"STRONG",{});var oTt=s(iFe);T0r=r(oTt,"t5"),oTt.forEach(t),M0r=r(iSe," \u2014 "),XW=n(iSe,"A",{href:!0});var rTt=s(XW);E0r=r(rTt,"FlaxT5ForConditionalGeneration"),rTt.forEach(t),C0r=r(iSe," (T5 model)"),iSe.forEach(t),so.forEach(t),w0r=i(Ra),dFe=n(Ra,"P",{});var tTt=s(dFe);A0r=r(tTt,"Examples:"),tTt.forEach(t),y0r=i(Ra),m(_L.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),IBe=i(c),hf=n(c,"H2",{class:!0});var W$e=s(hf);AM=n(W$e,"A",{id:!0,class:!0,href:!0});var aTt=s(AM);cFe=n(aTt,"SPAN",{});var nTt=s(cFe);m(uL.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),L0r=i(W$e),fFe=n(W$e,"SPAN",{});var sTt=s(fFe);x0r=r(sTt,"FlaxAutoModelForSequenceClassification"),sTt.forEach(t),W$e.forEach(t),qBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(bL.$$.fragment,Mi),k0r=i(Mi),pf=n(Mi,"P",{});var SJ=s(pf);S0r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zW=n(SJ,"A",{href:!0});var lTt=s(zW);R0r=r(lTt,"from_pretrained()"),lTt.forEach(t),B0r=r(SJ," class method or the "),QW=n(SJ,"A",{href:!0});var iTt=s(QW);P0r=r(iTt,"from_config()"),iTt.forEach(t),$0r=r(SJ,` class
method.`),SJ.forEach(t),I0r=i(Mi),FL=n(Mi,"P",{});var H$e=s(FL);q0r=r(H$e,"This class cannot be instantiated directly using "),mFe=n(H$e,"CODE",{});var dTt=s(mFe);N0r=r(dTt,"__init__()"),dTt.forEach(t),j0r=r(H$e," (throws an error)."),H$e.forEach(t),D0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(vL.$$.fragment,Ei),G0r=i(Ei),gFe=n(Ei,"P",{});var cTt=s(gFe);O0r=r(cTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cTt.forEach(t),V0r=i(Ei),_f=n(Ei,"P",{});var RJ=s(_f);X0r=r(RJ,`Note:
Loading a model from its configuration file does `),hFe=n(RJ,"STRONG",{});var fTt=s(hFe);z0r=r(fTt,"not"),fTt.forEach(t),Q0r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(RJ,"A",{href:!0});var mTt=s(WW);W0r=r(mTt,"from_pretrained()"),mTt.forEach(t),H0r=r(RJ," to load the model weights."),RJ.forEach(t),U0r=i(Ei),pFe=n(Ei,"P",{});var gTt=s(pFe);J0r=r(gTt,"Examples:"),gTt.forEach(t),Y0r=i(Ei),m(TL.$$.fragment,Ei),Ei.forEach(t),K0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(ML.$$.fragment,Ba),Z0r=i(Ba),_Fe=n(Ba,"P",{});var hTt=s(_Fe);eyr=r(hTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hTt.forEach(t),oyr=i(Ba),Pn=n(Ba,"P",{});var fC=s(Pn);ryr=r(fC,"The model class to instantiate is selected based on the "),uFe=n(fC,"CODE",{});var pTt=s(uFe);tyr=r(pTt,"model_type"),pTt.forEach(t),ayr=r(fC,` property of the config object (either
passed as an argument or loaded from `),bFe=n(fC,"CODE",{});var _Tt=s(bFe);nyr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),syr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(fC,"CODE",{});var uTt=s(FFe);lyr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),iyr=r(fC,":"),fC.forEach(t),dyr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);yM=n(ye,"LI",{});var dSe=s(yM);vFe=n(dSe,"STRONG",{});var bTt=s(vFe);cyr=r(bTt,"albert"),bTt.forEach(t),fyr=r(dSe," \u2014 "),HW=n(dSe,"A",{href:!0});var FTt=s(HW);myr=r(FTt,"FlaxAlbertForSequenceClassification"),FTt.forEach(t),gyr=r(dSe," (ALBERT model)"),dSe.forEach(t),hyr=i(ye),LM=n(ye,"LI",{});var cSe=s(LM);TFe=n(cSe,"STRONG",{});var vTt=s(TFe);pyr=r(vTt,"bart"),vTt.forEach(t),_yr=r(cSe," \u2014 "),UW=n(cSe,"A",{href:!0});var TTt=s(UW);uyr=r(TTt,"FlaxBartForSequenceClassification"),TTt.forEach(t),byr=r(cSe," (BART model)"),cSe.forEach(t),Fyr=i(ye),xM=n(ye,"LI",{});var fSe=s(xM);MFe=n(fSe,"STRONG",{});var MTt=s(MFe);vyr=r(MTt,"bert"),MTt.forEach(t),Tyr=r(fSe," \u2014 "),JW=n(fSe,"A",{href:!0});var ETt=s(JW);Myr=r(ETt,"FlaxBertForSequenceClassification"),ETt.forEach(t),Eyr=r(fSe," (BERT model)"),fSe.forEach(t),Cyr=i(ye),kM=n(ye,"LI",{});var mSe=s(kM);EFe=n(mSe,"STRONG",{});var CTt=s(EFe);wyr=r(CTt,"big_bird"),CTt.forEach(t),Ayr=r(mSe," \u2014 "),YW=n(mSe,"A",{href:!0});var wTt=s(YW);yyr=r(wTt,"FlaxBigBirdForSequenceClassification"),wTt.forEach(t),Lyr=r(mSe," (BigBird model)"),mSe.forEach(t),xyr=i(ye),SM=n(ye,"LI",{});var gSe=s(SM);CFe=n(gSe,"STRONG",{});var ATt=s(CFe);kyr=r(ATt,"distilbert"),ATt.forEach(t),Syr=r(gSe," \u2014 "),KW=n(gSe,"A",{href:!0});var yTt=s(KW);Ryr=r(yTt,"FlaxDistilBertForSequenceClassification"),yTt.forEach(t),Byr=r(gSe," (DistilBERT model)"),gSe.forEach(t),Pyr=i(ye),RM=n(ye,"LI",{});var hSe=s(RM);wFe=n(hSe,"STRONG",{});var LTt=s(wFe);$yr=r(LTt,"electra"),LTt.forEach(t),Iyr=r(hSe," \u2014 "),ZW=n(hSe,"A",{href:!0});var xTt=s(ZW);qyr=r(xTt,"FlaxElectraForSequenceClassification"),xTt.forEach(t),Nyr=r(hSe," (ELECTRA model)"),hSe.forEach(t),jyr=i(ye),BM=n(ye,"LI",{});var pSe=s(BM);AFe=n(pSe,"STRONG",{});var kTt=s(AFe);Dyr=r(kTt,"mbart"),kTt.forEach(t),Gyr=r(pSe," \u2014 "),eH=n(pSe,"A",{href:!0});var STt=s(eH);Oyr=r(STt,"FlaxMBartForSequenceClassification"),STt.forEach(t),Vyr=r(pSe," (mBART model)"),pSe.forEach(t),Xyr=i(ye),PM=n(ye,"LI",{});var _Se=s(PM);yFe=n(_Se,"STRONG",{});var RTt=s(yFe);zyr=r(RTt,"roberta"),RTt.forEach(t),Qyr=r(_Se," \u2014 "),oH=n(_Se,"A",{href:!0});var BTt=s(oH);Wyr=r(BTt,"FlaxRobertaForSequenceClassification"),BTt.forEach(t),Hyr=r(_Se," (RoBERTa model)"),_Se.forEach(t),Uyr=i(ye),$M=n(ye,"LI",{});var uSe=s($M);LFe=n(uSe,"STRONG",{});var PTt=s(LFe);Jyr=r(PTt,"roformer"),PTt.forEach(t),Yyr=r(uSe," \u2014 "),rH=n(uSe,"A",{href:!0});var $Tt=s(rH);Kyr=r($Tt,"FlaxRoFormerForSequenceClassification"),$Tt.forEach(t),Zyr=r(uSe," (RoFormer model)"),uSe.forEach(t),eLr=i(ye),IM=n(ye,"LI",{});var bSe=s(IM);xFe=n(bSe,"STRONG",{});var ITt=s(xFe);oLr=r(ITt,"xlm-roberta"),ITt.forEach(t),rLr=r(bSe," \u2014 "),tH=n(bSe,"A",{href:!0});var qTt=s(tH);tLr=r(qTt,"FlaxXLMRobertaForSequenceClassification"),qTt.forEach(t),aLr=r(bSe," (XLM-RoBERTa model)"),bSe.forEach(t),ye.forEach(t),nLr=i(Ba),kFe=n(Ba,"P",{});var NTt=s(kFe);sLr=r(NTt,"Examples:"),NTt.forEach(t),lLr=i(Ba),m(EL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),NBe=i(c),uf=n(c,"H2",{class:!0});var U$e=s(uf);qM=n(U$e,"A",{id:!0,class:!0,href:!0});var jTt=s(qM);SFe=n(jTt,"SPAN",{});var DTt=s(SFe);m(CL.$$.fragment,DTt),DTt.forEach(t),jTt.forEach(t),iLr=i(U$e),RFe=n(U$e,"SPAN",{});var GTt=s(RFe);dLr=r(GTt,"FlaxAutoModelForQuestionAnswering"),GTt.forEach(t),U$e.forEach(t),jBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(wL.$$.fragment,Ci),cLr=i(Ci),bf=n(Ci,"P",{});var BJ=s(bf);fLr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),aH=n(BJ,"A",{href:!0});var OTt=s(aH);mLr=r(OTt,"from_pretrained()"),OTt.forEach(t),gLr=r(BJ," class method or the "),nH=n(BJ,"A",{href:!0});var VTt=s(nH);hLr=r(VTt,"from_config()"),VTt.forEach(t),pLr=r(BJ,` class
method.`),BJ.forEach(t),_Lr=i(Ci),AL=n(Ci,"P",{});var J$e=s(AL);uLr=r(J$e,"This class cannot be instantiated directly using "),BFe=n(J$e,"CODE",{});var XTt=s(BFe);bLr=r(XTt,"__init__()"),XTt.forEach(t),FLr=r(J$e," (throws an error)."),J$e.forEach(t),vLr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(yL.$$.fragment,wi),TLr=i(wi),PFe=n(wi,"P",{});var zTt=s(PFe);MLr=r(zTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),zTt.forEach(t),ELr=i(wi),Ff=n(wi,"P",{});var PJ=s(Ff);CLr=r(PJ,`Note:
Loading a model from its configuration file does `),$Fe=n(PJ,"STRONG",{});var QTt=s($Fe);wLr=r(QTt,"not"),QTt.forEach(t),ALr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(PJ,"A",{href:!0});var WTt=s(sH);yLr=r(WTt,"from_pretrained()"),WTt.forEach(t),LLr=r(PJ," to load the model weights."),PJ.forEach(t),xLr=i(wi),IFe=n(wi,"P",{});var HTt=s(IFe);kLr=r(HTt,"Examples:"),HTt.forEach(t),SLr=i(wi),m(LL.$$.fragment,wi),wi.forEach(t),RLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(xL.$$.fragment,Pa),BLr=i(Pa),qFe=n(Pa,"P",{});var UTt=s(qFe);PLr=r(UTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),UTt.forEach(t),$Lr=i(Pa),$n=n(Pa,"P",{});var mC=s($n);ILr=r(mC,"The model class to instantiate is selected based on the "),NFe=n(mC,"CODE",{});var JTt=s(NFe);qLr=r(JTt,"model_type"),JTt.forEach(t),NLr=r(mC,` property of the config object (either
passed as an argument or loaded from `),jFe=n(mC,"CODE",{});var YTt=s(jFe);jLr=r(YTt,"pretrained_model_name_or_path"),YTt.forEach(t),DLr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(mC,"CODE",{});var KTt=s(DFe);GLr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),OLr=r(mC,":"),mC.forEach(t),VLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);NM=n(Le,"LI",{});var FSe=s(NM);GFe=n(FSe,"STRONG",{});var ZTt=s(GFe);XLr=r(ZTt,"albert"),ZTt.forEach(t),zLr=r(FSe," \u2014 "),lH=n(FSe,"A",{href:!0});var e7t=s(lH);QLr=r(e7t,"FlaxAlbertForQuestionAnswering"),e7t.forEach(t),WLr=r(FSe," (ALBERT model)"),FSe.forEach(t),HLr=i(Le),jM=n(Le,"LI",{});var vSe=s(jM);OFe=n(vSe,"STRONG",{});var o7t=s(OFe);ULr=r(o7t,"bart"),o7t.forEach(t),JLr=r(vSe," \u2014 "),iH=n(vSe,"A",{href:!0});var r7t=s(iH);YLr=r(r7t,"FlaxBartForQuestionAnswering"),r7t.forEach(t),KLr=r(vSe," (BART model)"),vSe.forEach(t),ZLr=i(Le),DM=n(Le,"LI",{});var TSe=s(DM);VFe=n(TSe,"STRONG",{});var t7t=s(VFe);e8r=r(t7t,"bert"),t7t.forEach(t),o8r=r(TSe," \u2014 "),dH=n(TSe,"A",{href:!0});var a7t=s(dH);r8r=r(a7t,"FlaxBertForQuestionAnswering"),a7t.forEach(t),t8r=r(TSe," (BERT model)"),TSe.forEach(t),a8r=i(Le),GM=n(Le,"LI",{});var MSe=s(GM);XFe=n(MSe,"STRONG",{});var n7t=s(XFe);n8r=r(n7t,"big_bird"),n7t.forEach(t),s8r=r(MSe," \u2014 "),cH=n(MSe,"A",{href:!0});var s7t=s(cH);l8r=r(s7t,"FlaxBigBirdForQuestionAnswering"),s7t.forEach(t),i8r=r(MSe," (BigBird model)"),MSe.forEach(t),d8r=i(Le),OM=n(Le,"LI",{});var ESe=s(OM);zFe=n(ESe,"STRONG",{});var l7t=s(zFe);c8r=r(l7t,"distilbert"),l7t.forEach(t),f8r=r(ESe," \u2014 "),fH=n(ESe,"A",{href:!0});var i7t=s(fH);m8r=r(i7t,"FlaxDistilBertForQuestionAnswering"),i7t.forEach(t),g8r=r(ESe," (DistilBERT model)"),ESe.forEach(t),h8r=i(Le),VM=n(Le,"LI",{});var CSe=s(VM);QFe=n(CSe,"STRONG",{});var d7t=s(QFe);p8r=r(d7t,"electra"),d7t.forEach(t),_8r=r(CSe," \u2014 "),mH=n(CSe,"A",{href:!0});var c7t=s(mH);u8r=r(c7t,"FlaxElectraForQuestionAnswering"),c7t.forEach(t),b8r=r(CSe," (ELECTRA model)"),CSe.forEach(t),F8r=i(Le),XM=n(Le,"LI",{});var wSe=s(XM);WFe=n(wSe,"STRONG",{});var f7t=s(WFe);v8r=r(f7t,"mbart"),f7t.forEach(t),T8r=r(wSe," \u2014 "),gH=n(wSe,"A",{href:!0});var m7t=s(gH);M8r=r(m7t,"FlaxMBartForQuestionAnswering"),m7t.forEach(t),E8r=r(wSe," (mBART model)"),wSe.forEach(t),C8r=i(Le),zM=n(Le,"LI",{});var ASe=s(zM);HFe=n(ASe,"STRONG",{});var g7t=s(HFe);w8r=r(g7t,"roberta"),g7t.forEach(t),A8r=r(ASe," \u2014 "),hH=n(ASe,"A",{href:!0});var h7t=s(hH);y8r=r(h7t,"FlaxRobertaForQuestionAnswering"),h7t.forEach(t),L8r=r(ASe," (RoBERTa model)"),ASe.forEach(t),x8r=i(Le),QM=n(Le,"LI",{});var ySe=s(QM);UFe=n(ySe,"STRONG",{});var p7t=s(UFe);k8r=r(p7t,"roformer"),p7t.forEach(t),S8r=r(ySe," \u2014 "),pH=n(ySe,"A",{href:!0});var _7t=s(pH);R8r=r(_7t,"FlaxRoFormerForQuestionAnswering"),_7t.forEach(t),B8r=r(ySe," (RoFormer model)"),ySe.forEach(t),P8r=i(Le),WM=n(Le,"LI",{});var LSe=s(WM);JFe=n(LSe,"STRONG",{});var u7t=s(JFe);$8r=r(u7t,"xlm-roberta"),u7t.forEach(t),I8r=r(LSe," \u2014 "),_H=n(LSe,"A",{href:!0});var b7t=s(_H);q8r=r(b7t,"FlaxXLMRobertaForQuestionAnswering"),b7t.forEach(t),N8r=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Le.forEach(t),j8r=i(Pa),YFe=n(Pa,"P",{});var F7t=s(YFe);D8r=r(F7t,"Examples:"),F7t.forEach(t),G8r=i(Pa),m(kL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),DBe=i(c),vf=n(c,"H2",{class:!0});var Y$e=s(vf);HM=n(Y$e,"A",{id:!0,class:!0,href:!0});var v7t=s(HM);KFe=n(v7t,"SPAN",{});var T7t=s(KFe);m(SL.$$.fragment,T7t),T7t.forEach(t),v7t.forEach(t),O8r=i(Y$e),ZFe=n(Y$e,"SPAN",{});var M7t=s(ZFe);V8r=r(M7t,"FlaxAutoModelForTokenClassification"),M7t.forEach(t),Y$e.forEach(t),GBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(RL.$$.fragment,Ai),X8r=i(Ai),Tf=n(Ai,"P",{});var $J=s(Tf);z8r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),uH=n($J,"A",{href:!0});var E7t=s(uH);Q8r=r(E7t,"from_pretrained()"),E7t.forEach(t),W8r=r($J," class method or the "),bH=n($J,"A",{href:!0});var C7t=s(bH);H8r=r(C7t,"from_config()"),C7t.forEach(t),U8r=r($J,` class
method.`),$J.forEach(t),J8r=i(Ai),BL=n(Ai,"P",{});var K$e=s(BL);Y8r=r(K$e,"This class cannot be instantiated directly using "),eve=n(K$e,"CODE",{});var w7t=s(eve);K8r=r(w7t,"__init__()"),w7t.forEach(t),Z8r=r(K$e," (throws an error)."),K$e.forEach(t),e9r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(PL.$$.fragment,yi),o9r=i(yi),ove=n(yi,"P",{});var A7t=s(ove);r9r=r(A7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A7t.forEach(t),t9r=i(yi),Mf=n(yi,"P",{});var IJ=s(Mf);a9r=r(IJ,`Note:
Loading a model from its configuration file does `),rve=n(IJ,"STRONG",{});var y7t=s(rve);n9r=r(y7t,"not"),y7t.forEach(t),s9r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(IJ,"A",{href:!0});var L7t=s(FH);l9r=r(L7t,"from_pretrained()"),L7t.forEach(t),i9r=r(IJ," to load the model weights."),IJ.forEach(t),d9r=i(yi),tve=n(yi,"P",{});var x7t=s(tve);c9r=r(x7t,"Examples:"),x7t.forEach(t),f9r=i(yi),m($L.$$.fragment,yi),yi.forEach(t),m9r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(IL.$$.fragment,$a),g9r=i($a),ave=n($a,"P",{});var k7t=s(ave);h9r=r(k7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),k7t.forEach(t),p9r=i($a),In=n($a,"P",{});var gC=s(In);_9r=r(gC,"The model class to instantiate is selected based on the "),nve=n(gC,"CODE",{});var S7t=s(nve);u9r=r(S7t,"model_type"),S7t.forEach(t),b9r=r(gC,` property of the config object (either
passed as an argument or loaded from `),sve=n(gC,"CODE",{});var R7t=s(sve);F9r=r(R7t,"pretrained_model_name_or_path"),R7t.forEach(t),v9r=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lve=n(gC,"CODE",{});var B7t=s(lve);T9r=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),M9r=r(gC,":"),gC.forEach(t),E9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);UM=n(Oo,"LI",{});var xSe=s(UM);ive=n(xSe,"STRONG",{});var P7t=s(ive);C9r=r(P7t,"albert"),P7t.forEach(t),w9r=r(xSe," \u2014 "),vH=n(xSe,"A",{href:!0});var $7t=s(vH);A9r=r($7t,"FlaxAlbertForTokenClassification"),$7t.forEach(t),y9r=r(xSe," (ALBERT model)"),xSe.forEach(t),L9r=i(Oo),JM=n(Oo,"LI",{});var kSe=s(JM);dve=n(kSe,"STRONG",{});var I7t=s(dve);x9r=r(I7t,"bert"),I7t.forEach(t),k9r=r(kSe," \u2014 "),TH=n(kSe,"A",{href:!0});var q7t=s(TH);S9r=r(q7t,"FlaxBertForTokenClassification"),q7t.forEach(t),R9r=r(kSe," (BERT model)"),kSe.forEach(t),B9r=i(Oo),YM=n(Oo,"LI",{});var SSe=s(YM);cve=n(SSe,"STRONG",{});var N7t=s(cve);P9r=r(N7t,"big_bird"),N7t.forEach(t),$9r=r(SSe," \u2014 "),MH=n(SSe,"A",{href:!0});var j7t=s(MH);I9r=r(j7t,"FlaxBigBirdForTokenClassification"),j7t.forEach(t),q9r=r(SSe," (BigBird model)"),SSe.forEach(t),N9r=i(Oo),KM=n(Oo,"LI",{});var RSe=s(KM);fve=n(RSe,"STRONG",{});var D7t=s(fve);j9r=r(D7t,"distilbert"),D7t.forEach(t),D9r=r(RSe," \u2014 "),EH=n(RSe,"A",{href:!0});var G7t=s(EH);G9r=r(G7t,"FlaxDistilBertForTokenClassification"),G7t.forEach(t),O9r=r(RSe," (DistilBERT model)"),RSe.forEach(t),V9r=i(Oo),ZM=n(Oo,"LI",{});var BSe=s(ZM);mve=n(BSe,"STRONG",{});var O7t=s(mve);X9r=r(O7t,"electra"),O7t.forEach(t),z9r=r(BSe," \u2014 "),CH=n(BSe,"A",{href:!0});var V7t=s(CH);Q9r=r(V7t,"FlaxElectraForTokenClassification"),V7t.forEach(t),W9r=r(BSe," (ELECTRA model)"),BSe.forEach(t),H9r=i(Oo),eE=n(Oo,"LI",{});var PSe=s(eE);gve=n(PSe,"STRONG",{});var X7t=s(gve);U9r=r(X7t,"roberta"),X7t.forEach(t),J9r=r(PSe," \u2014 "),wH=n(PSe,"A",{href:!0});var z7t=s(wH);Y9r=r(z7t,"FlaxRobertaForTokenClassification"),z7t.forEach(t),K9r=r(PSe," (RoBERTa model)"),PSe.forEach(t),Z9r=i(Oo),oE=n(Oo,"LI",{});var $Se=s(oE);hve=n($Se,"STRONG",{});var Q7t=s(hve);exr=r(Q7t,"roformer"),Q7t.forEach(t),oxr=r($Se," \u2014 "),AH=n($Se,"A",{href:!0});var W7t=s(AH);rxr=r(W7t,"FlaxRoFormerForTokenClassification"),W7t.forEach(t),txr=r($Se," (RoFormer model)"),$Se.forEach(t),axr=i(Oo),rE=n(Oo,"LI",{});var ISe=s(rE);pve=n(ISe,"STRONG",{});var H7t=s(pve);nxr=r(H7t,"xlm-roberta"),H7t.forEach(t),sxr=r(ISe," \u2014 "),yH=n(ISe,"A",{href:!0});var U7t=s(yH);lxr=r(U7t,"FlaxXLMRobertaForTokenClassification"),U7t.forEach(t),ixr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),Oo.forEach(t),dxr=i($a),_ve=n($a,"P",{});var J7t=s(_ve);cxr=r(J7t,"Examples:"),J7t.forEach(t),fxr=i($a),m(qL.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),OBe=i(c),Ef=n(c,"H2",{class:!0});var Z$e=s(Ef);tE=n(Z$e,"A",{id:!0,class:!0,href:!0});var Y7t=s(tE);uve=n(Y7t,"SPAN",{});var K7t=s(uve);m(NL.$$.fragment,K7t),K7t.forEach(t),Y7t.forEach(t),mxr=i(Z$e),bve=n(Z$e,"SPAN",{});var Z7t=s(bve);gxr=r(Z7t,"FlaxAutoModelForMultipleChoice"),Z7t.forEach(t),Z$e.forEach(t),VBe=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(jL.$$.fragment,Li),hxr=i(Li),Cf=n(Li,"P",{});var qJ=s(Cf);pxr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LH=n(qJ,"A",{href:!0});var eMt=s(LH);_xr=r(eMt,"from_pretrained()"),eMt.forEach(t),uxr=r(qJ," class method or the "),xH=n(qJ,"A",{href:!0});var oMt=s(xH);bxr=r(oMt,"from_config()"),oMt.forEach(t),Fxr=r(qJ,` class
method.`),qJ.forEach(t),vxr=i(Li),DL=n(Li,"P",{});var eIe=s(DL);Txr=r(eIe,"This class cannot be instantiated directly using "),Fve=n(eIe,"CODE",{});var rMt=s(Fve);Mxr=r(rMt,"__init__()"),rMt.forEach(t),Exr=r(eIe," (throws an error)."),eIe.forEach(t),Cxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(GL.$$.fragment,xi),wxr=i(xi),vve=n(xi,"P",{});var tMt=s(vve);Axr=r(tMt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tMt.forEach(t),yxr=i(xi),wf=n(xi,"P",{});var NJ=s(wf);Lxr=r(NJ,`Note:
Loading a model from its configuration file does `),Tve=n(NJ,"STRONG",{});var aMt=s(Tve);xxr=r(aMt,"not"),aMt.forEach(t),kxr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kH=n(NJ,"A",{href:!0});var nMt=s(kH);Sxr=r(nMt,"from_pretrained()"),nMt.forEach(t),Rxr=r(NJ," to load the model weights."),NJ.forEach(t),Bxr=i(xi),Mve=n(xi,"P",{});var sMt=s(Mve);Pxr=r(sMt,"Examples:"),sMt.forEach(t),$xr=i(xi),m(OL.$$.fragment,xi),xi.forEach(t),Ixr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(VL.$$.fragment,Ia),qxr=i(Ia),Eve=n(Ia,"P",{});var lMt=s(Eve);Nxr=r(lMt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lMt.forEach(t),jxr=i(Ia),qn=n(Ia,"P",{});var hC=s(qn);Dxr=r(hC,"The model class to instantiate is selected based on the "),Cve=n(hC,"CODE",{});var iMt=s(Cve);Gxr=r(iMt,"model_type"),iMt.forEach(t),Oxr=r(hC,` property of the config object (either
passed as an argument or loaded from `),wve=n(hC,"CODE",{});var dMt=s(wve);Vxr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),Xxr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ave=n(hC,"CODE",{});var cMt=s(Ave);zxr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),Qxr=r(hC,":"),hC.forEach(t),Wxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);aE=n(Vo,"LI",{});var qSe=s(aE);yve=n(qSe,"STRONG",{});var fMt=s(yve);Hxr=r(fMt,"albert"),fMt.forEach(t),Uxr=r(qSe," \u2014 "),SH=n(qSe,"A",{href:!0});var mMt=s(SH);Jxr=r(mMt,"FlaxAlbertForMultipleChoice"),mMt.forEach(t),Yxr=r(qSe," (ALBERT model)"),qSe.forEach(t),Kxr=i(Vo),nE=n(Vo,"LI",{});var NSe=s(nE);Lve=n(NSe,"STRONG",{});var gMt=s(Lve);Zxr=r(gMt,"bert"),gMt.forEach(t),ekr=r(NSe," \u2014 "),RH=n(NSe,"A",{href:!0});var hMt=s(RH);okr=r(hMt,"FlaxBertForMultipleChoice"),hMt.forEach(t),rkr=r(NSe," (BERT model)"),NSe.forEach(t),tkr=i(Vo),sE=n(Vo,"LI",{});var jSe=s(sE);xve=n(jSe,"STRONG",{});var pMt=s(xve);akr=r(pMt,"big_bird"),pMt.forEach(t),nkr=r(jSe," \u2014 "),BH=n(jSe,"A",{href:!0});var _Mt=s(BH);skr=r(_Mt,"FlaxBigBirdForMultipleChoice"),_Mt.forEach(t),lkr=r(jSe," (BigBird model)"),jSe.forEach(t),ikr=i(Vo),lE=n(Vo,"LI",{});var DSe=s(lE);kve=n(DSe,"STRONG",{});var uMt=s(kve);dkr=r(uMt,"distilbert"),uMt.forEach(t),ckr=r(DSe," \u2014 "),PH=n(DSe,"A",{href:!0});var bMt=s(PH);fkr=r(bMt,"FlaxDistilBertForMultipleChoice"),bMt.forEach(t),mkr=r(DSe," (DistilBERT model)"),DSe.forEach(t),gkr=i(Vo),iE=n(Vo,"LI",{});var GSe=s(iE);Sve=n(GSe,"STRONG",{});var FMt=s(Sve);hkr=r(FMt,"electra"),FMt.forEach(t),pkr=r(GSe," \u2014 "),$H=n(GSe,"A",{href:!0});var vMt=s($H);_kr=r(vMt,"FlaxElectraForMultipleChoice"),vMt.forEach(t),ukr=r(GSe," (ELECTRA model)"),GSe.forEach(t),bkr=i(Vo),dE=n(Vo,"LI",{});var OSe=s(dE);Rve=n(OSe,"STRONG",{});var TMt=s(Rve);Fkr=r(TMt,"roberta"),TMt.forEach(t),vkr=r(OSe," \u2014 "),IH=n(OSe,"A",{href:!0});var MMt=s(IH);Tkr=r(MMt,"FlaxRobertaForMultipleChoice"),MMt.forEach(t),Mkr=r(OSe," (RoBERTa model)"),OSe.forEach(t),Ekr=i(Vo),cE=n(Vo,"LI",{});var VSe=s(cE);Bve=n(VSe,"STRONG",{});var EMt=s(Bve);Ckr=r(EMt,"roformer"),EMt.forEach(t),wkr=r(VSe," \u2014 "),qH=n(VSe,"A",{href:!0});var CMt=s(qH);Akr=r(CMt,"FlaxRoFormerForMultipleChoice"),CMt.forEach(t),ykr=r(VSe," (RoFormer model)"),VSe.forEach(t),Lkr=i(Vo),fE=n(Vo,"LI",{});var XSe=s(fE);Pve=n(XSe,"STRONG",{});var wMt=s(Pve);xkr=r(wMt,"xlm-roberta"),wMt.forEach(t),kkr=r(XSe," \u2014 "),NH=n(XSe,"A",{href:!0});var AMt=s(NH);Skr=r(AMt,"FlaxXLMRobertaForMultipleChoice"),AMt.forEach(t),Rkr=r(XSe," (XLM-RoBERTa model)"),XSe.forEach(t),Vo.forEach(t),Bkr=i(Ia),$ve=n(Ia,"P",{});var yMt=s($ve);Pkr=r(yMt,"Examples:"),yMt.forEach(t),$kr=i(Ia),m(XL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),XBe=i(c),Af=n(c,"H2",{class:!0});var oIe=s(Af);mE=n(oIe,"A",{id:!0,class:!0,href:!0});var LMt=s(mE);Ive=n(LMt,"SPAN",{});var xMt=s(Ive);m(zL.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),Ikr=i(oIe),qve=n(oIe,"SPAN",{});var kMt=s(qve);qkr=r(kMt,"FlaxAutoModelForNextSentencePrediction"),kMt.forEach(t),oIe.forEach(t),zBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(QL.$$.fragment,ki),Nkr=i(ki),yf=n(ki,"P",{});var jJ=s(yf);jkr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),jH=n(jJ,"A",{href:!0});var SMt=s(jH);Dkr=r(SMt,"from_pretrained()"),SMt.forEach(t),Gkr=r(jJ," class method or the "),DH=n(jJ,"A",{href:!0});var RMt=s(DH);Okr=r(RMt,"from_config()"),RMt.forEach(t),Vkr=r(jJ,` class
method.`),jJ.forEach(t),Xkr=i(ki),WL=n(ki,"P",{});var rIe=s(WL);zkr=r(rIe,"This class cannot be instantiated directly using "),Nve=n(rIe,"CODE",{});var BMt=s(Nve);Qkr=r(BMt,"__init__()"),BMt.forEach(t),Wkr=r(rIe," (throws an error)."),rIe.forEach(t),Hkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(HL.$$.fragment,Si),Ukr=i(Si),jve=n(Si,"P",{});var PMt=s(jve);Jkr=r(PMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),PMt.forEach(t),Ykr=i(Si),Lf=n(Si,"P",{});var DJ=s(Lf);Kkr=r(DJ,`Note:
Loading a model from its configuration file does `),Dve=n(DJ,"STRONG",{});var $Mt=s(Dve);Zkr=r($Mt,"not"),$Mt.forEach(t),eSr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(DJ,"A",{href:!0});var IMt=s(GH);oSr=r(IMt,"from_pretrained()"),IMt.forEach(t),rSr=r(DJ," to load the model weights."),DJ.forEach(t),tSr=i(Si),Gve=n(Si,"P",{});var qMt=s(Gve);aSr=r(qMt,"Examples:"),qMt.forEach(t),nSr=i(Si),m(UL.$$.fragment,Si),Si.forEach(t),sSr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(JL.$$.fragment,qa),lSr=i(qa),Ove=n(qa,"P",{});var NMt=s(Ove);iSr=r(NMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NMt.forEach(t),dSr=i(qa),Nn=n(qa,"P",{});var pC=s(Nn);cSr=r(pC,"The model class to instantiate is selected based on the "),Vve=n(pC,"CODE",{});var jMt=s(Vve);fSr=r(jMt,"model_type"),jMt.forEach(t),mSr=r(pC,` property of the config object (either
passed as an argument or loaded from `),Xve=n(pC,"CODE",{});var DMt=s(Xve);gSr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),hSr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zve=n(pC,"CODE",{});var GMt=s(zve);pSr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),_Sr=r(pC,":"),pC.forEach(t),uSr=i(qa),Qve=n(qa,"UL",{});var OMt=s(Qve);gE=n(OMt,"LI",{});var zSe=s(gE);Wve=n(zSe,"STRONG",{});var VMt=s(Wve);bSr=r(VMt,"bert"),VMt.forEach(t),FSr=r(zSe," \u2014 "),OH=n(zSe,"A",{href:!0});var XMt=s(OH);vSr=r(XMt,"FlaxBertForNextSentencePrediction"),XMt.forEach(t),TSr=r(zSe," (BERT model)"),zSe.forEach(t),OMt.forEach(t),MSr=i(qa),Hve=n(qa,"P",{});var zMt=s(Hve);ESr=r(zMt,"Examples:"),zMt.forEach(t),CSr=i(qa),m(YL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),QBe=i(c),xf=n(c,"H2",{class:!0});var tIe=s(xf);hE=n(tIe,"A",{id:!0,class:!0,href:!0});var QMt=s(hE);Uve=n(QMt,"SPAN",{});var WMt=s(Uve);m(KL.$$.fragment,WMt),WMt.forEach(t),QMt.forEach(t),wSr=i(tIe),Jve=n(tIe,"SPAN",{});var HMt=s(Jve);ASr=r(HMt,"FlaxAutoModelForImageClassification"),HMt.forEach(t),tIe.forEach(t),WBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(ZL.$$.fragment,Ri),ySr=i(Ri),kf=n(Ri,"P",{});var GJ=s(kf);LSr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),VH=n(GJ,"A",{href:!0});var UMt=s(VH);xSr=r(UMt,"from_pretrained()"),UMt.forEach(t),kSr=r(GJ," class method or the "),XH=n(GJ,"A",{href:!0});var JMt=s(XH);SSr=r(JMt,"from_config()"),JMt.forEach(t),RSr=r(GJ,` class
method.`),GJ.forEach(t),BSr=i(Ri),e8=n(Ri,"P",{});var aIe=s(e8);PSr=r(aIe,"This class cannot be instantiated directly using "),Yve=n(aIe,"CODE",{});var YMt=s(Yve);$Sr=r(YMt,"__init__()"),YMt.forEach(t),ISr=r(aIe," (throws an error)."),aIe.forEach(t),qSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(o8.$$.fragment,Bi),NSr=i(Bi),Kve=n(Bi,"P",{});var KMt=s(Kve);jSr=r(KMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KMt.forEach(t),DSr=i(Bi),Sf=n(Bi,"P",{});var OJ=s(Sf);GSr=r(OJ,`Note:
Loading a model from its configuration file does `),Zve=n(OJ,"STRONG",{});var ZMt=s(Zve);OSr=r(ZMt,"not"),ZMt.forEach(t),VSr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(OJ,"A",{href:!0});var eEt=s(zH);XSr=r(eEt,"from_pretrained()"),eEt.forEach(t),zSr=r(OJ," to load the model weights."),OJ.forEach(t),QSr=i(Bi),e6e=n(Bi,"P",{});var oEt=s(e6e);WSr=r(oEt,"Examples:"),oEt.forEach(t),HSr=i(Bi),m(r8.$$.fragment,Bi),Bi.forEach(t),USr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(t8.$$.fragment,Na),JSr=i(Na),o6e=n(Na,"P",{});var rEt=s(o6e);YSr=r(rEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rEt.forEach(t),KSr=i(Na),jn=n(Na,"P",{});var _C=s(jn);ZSr=r(_C,"The model class to instantiate is selected based on the "),r6e=n(_C,"CODE",{});var tEt=s(r6e);eRr=r(tEt,"model_type"),tEt.forEach(t),oRr=r(_C,` property of the config object (either
passed as an argument or loaded from `),t6e=n(_C,"CODE",{});var aEt=s(t6e);rRr=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),tRr=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a6e=n(_C,"CODE",{});var nEt=s(a6e);aRr=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),nRr=r(_C,":"),_C.forEach(t),sRr=i(Na),a8=n(Na,"UL",{});var nIe=s(a8);pE=n(nIe,"LI",{});var QSe=s(pE);n6e=n(QSe,"STRONG",{});var sEt=s(n6e);lRr=r(sEt,"beit"),sEt.forEach(t),iRr=r(QSe," \u2014 "),QH=n(QSe,"A",{href:!0});var lEt=s(QH);dRr=r(lEt,"FlaxBeitForImageClassification"),lEt.forEach(t),cRr=r(QSe," (BEiT model)"),QSe.forEach(t),fRr=i(nIe),_E=n(nIe,"LI",{});var WSe=s(_E);s6e=n(WSe,"STRONG",{});var iEt=s(s6e);mRr=r(iEt,"vit"),iEt.forEach(t),gRr=r(WSe," \u2014 "),WH=n(WSe,"A",{href:!0});var dEt=s(WH);hRr=r(dEt,"FlaxViTForImageClassification"),dEt.forEach(t),pRr=r(WSe," (ViT model)"),WSe.forEach(t),nIe.forEach(t),_Rr=i(Na),l6e=n(Na,"P",{});var cEt=s(l6e);uRr=r(cEt,"Examples:"),cEt.forEach(t),bRr=i(Na),m(n8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),HBe=i(c),Rf=n(c,"H2",{class:!0});var sIe=s(Rf);uE=n(sIe,"A",{id:!0,class:!0,href:!0});var fEt=s(uE);i6e=n(fEt,"SPAN",{});var mEt=s(i6e);m(s8.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),FRr=i(sIe),d6e=n(sIe,"SPAN",{});var gEt=s(d6e);vRr=r(gEt,"FlaxAutoModelForVision2Seq"),gEt.forEach(t),sIe.forEach(t),UBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(l8.$$.fragment,Pi),TRr=i(Pi),Bf=n(Pi,"P",{});var VJ=s(Bf);MRr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HH=n(VJ,"A",{href:!0});var hEt=s(HH);ERr=r(hEt,"from_pretrained()"),hEt.forEach(t),CRr=r(VJ," class method or the "),UH=n(VJ,"A",{href:!0});var pEt=s(UH);wRr=r(pEt,"from_config()"),pEt.forEach(t),ARr=r(VJ,` class
method.`),VJ.forEach(t),yRr=i(Pi),i8=n(Pi,"P",{});var lIe=s(i8);LRr=r(lIe,"This class cannot be instantiated directly using "),c6e=n(lIe,"CODE",{});var _Et=s(c6e);xRr=r(_Et,"__init__()"),_Et.forEach(t),kRr=r(lIe," (throws an error)."),lIe.forEach(t),SRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(d8.$$.fragment,$i),RRr=i($i),f6e=n($i,"P",{});var uEt=s(f6e);BRr=r(uEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uEt.forEach(t),PRr=i($i),Pf=n($i,"P",{});var XJ=s(Pf);$Rr=r(XJ,`Note:
Loading a model from its configuration file does `),m6e=n(XJ,"STRONG",{});var bEt=s(m6e);IRr=r(bEt,"not"),bEt.forEach(t),qRr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JH=n(XJ,"A",{href:!0});var FEt=s(JH);NRr=r(FEt,"from_pretrained()"),FEt.forEach(t),jRr=r(XJ," to load the model weights."),XJ.forEach(t),DRr=i($i),g6e=n($i,"P",{});var vEt=s(g6e);GRr=r(vEt,"Examples:"),vEt.forEach(t),ORr=i($i),m(c8.$$.fragment,$i),$i.forEach(t),VRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(f8.$$.fragment,ja),XRr=i(ja),h6e=n(ja,"P",{});var TEt=s(h6e);zRr=r(TEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),TEt.forEach(t),QRr=i(ja),Dn=n(ja,"P",{});var uC=s(Dn);WRr=r(uC,"The model class to instantiate is selected based on the "),p6e=n(uC,"CODE",{});var MEt=s(p6e);HRr=r(MEt,"model_type"),MEt.forEach(t),URr=r(uC,` property of the config object (either
passed as an argument or loaded from `),_6e=n(uC,"CODE",{});var EEt=s(_6e);JRr=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),YRr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u6e=n(uC,"CODE",{});var CEt=s(u6e);KRr=r(CEt,"pretrained_model_name_or_path"),CEt.forEach(t),ZRr=r(uC,":"),uC.forEach(t),eBr=i(ja),b6e=n(ja,"UL",{});var wEt=s(b6e);bE=n(wEt,"LI",{});var HSe=s(bE);F6e=n(HSe,"STRONG",{});var AEt=s(F6e);oBr=r(AEt,"vision-encoder-decoder"),AEt.forEach(t),rBr=r(HSe," \u2014 "),YH=n(HSe,"A",{href:!0});var yEt=s(YH);tBr=r(yEt,"FlaxVisionEncoderDecoderModel"),yEt.forEach(t),aBr=r(HSe," (Vision Encoder decoder model)"),HSe.forEach(t),wEt.forEach(t),nBr=i(ja),v6e=n(ja,"P",{});var LEt=s(v6e);sBr=r(LEt,"Examples:"),LEt.forEach(t),lBr=i(ja),m(m8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(NEt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(_9,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(u9,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig"),d(b9,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(F9,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig"),d(v9,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig"),d(T9,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(M9,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig"),d(E9,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(C9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(w9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(A9,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig"),d(y9,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig"),d(L9,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig"),d(x9,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig"),d(k9,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig"),d(S9,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig"),d(R9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(B9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(P9,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig"),d($9,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(I9,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(q9,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig"),d(N9,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig"),d(j9,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig"),d(D9,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig"),d(G9,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig"),d(O9,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig"),d(V9,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(X9,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig"),d(z9,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig"),d(Q9,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig"),d(W9,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig"),d(H9,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig"),d(U9,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config"),d(J9,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Y9,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig"),d(K9,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig"),d(Z9,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig"),d(ex,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(ox,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(rx,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(tx,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig"),d(ax,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig"),d(nx,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig"),d(sx,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig"),d(lx,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config"),d(ix,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig"),d(dx,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(cx,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig"),d(fx,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(mx,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(gx,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig"),d(hx,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config"),d(px,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(_x,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(ux,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig"),d(bx,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Fx,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig"),d(vx,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Tx,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Mx,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Ex,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagConfig"),d(Cx,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmConfig"),d(wx,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig"),d(Ax,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig"),d(yx,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig"),d(Lx,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig"),d(xx,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig"),d(kx,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig"),d(Sx,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig"),d(Rx,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig"),d(Bx,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig"),d(Px,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d($x,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Ix,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(qx,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig"),d(Nx,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(jx,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig"),d(Dx,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config"),d(Gx,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig"),d(Ox,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Vx,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig"),d(Xx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(zx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Qx,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig"),d(Wx,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig"),d(Hx,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Ux,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Jx,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Yx,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig"),d(Kx,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Zx,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(ek,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig"),d(ok,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig"),d(rk,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig"),d(tk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(ak,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(nk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(sk,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig"),d(lk,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(ik,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(dk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizer"),d(ck,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(fk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizer"),d(mk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizerFast"),d(gk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizer"),d(hk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(pk,"href","/docs/transformers/pr_16473/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(_k,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(uk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(bk,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Fk,"href","/docs/transformers/pr_16473/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(vk,"href","/docs/transformers/pr_16473/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Tk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Mk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Ck,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(wk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ak,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(yk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Lk,"href","/docs/transformers/pr_16473/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(xk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizer"),d(kk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineTokenizer"),d(Rk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizer"),d(Bk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizer"),d($k,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16473/en/model_doc/cpm#transformers.CpmTokenizer"),d(qk,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Nk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizer"),d(jk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Gk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Ok,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Xk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(zk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizer"),d(Qk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Hk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizer"),d(Uk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Yk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Kk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Zk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(eS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(oS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(rS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(tS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizer"),d(aS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(nS,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(sS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(lS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(iS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(dS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(cS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(fS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(mS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(gS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(hS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizer"),d(pS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizerFast"),d(_S,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizer"),d(uS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(bS,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeTokenizer"),d(FS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(vS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(TS,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(MS,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianTokenizer"),d(ES,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizer"),d(CS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(wS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(AS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(yS,"href","/docs/transformers/pr_16473/en/model_doc/mluke#transformers.MLukeTokenizer"),d(LS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(xS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(kS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(SS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(RS,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d(BS,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(PS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d($S,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(IS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(qS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(NS,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(jS,"href","/docs/transformers/pr_16473/en/model_doc/phobert#transformers.PhobertTokenizer"),d(DS,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartTokenizer"),d(GS,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(OS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(VS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(XS,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagTokenizer"),d(zS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizer"),d(QS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizerFast"),d(WS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizer"),d(HS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(US,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizer"),d(JS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(YS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(KS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(eR,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(oR,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(rR,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(tR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(aR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(nR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizer"),d(sR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(lR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(iR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(dR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d(cR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(fR,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasTokenizer"),d(mR,"href","/docs/transformers/pr_16473/en/model_doc/tapex#transformers.TapexTokenizer"),d(gR,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(hR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(pR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(_R,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizer"),d(uR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(bR,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMTokenizer"),d(FR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(vR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(TR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(MR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(ER,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(gh,"class","docstring"),d(Wo,"class","docstring"),d(hh,"id","transformers.AutoFeatureExtractor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(CR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(wR,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(xR,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(SR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(RR,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d($R,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(OR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Ph,"class","docstring"),d(Ho,"class","docstring"),d($h,"id","transformers.AutoProcessor"),d($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($h,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(VR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(XR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPProcessor"),d(zR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(QR,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(WR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(HR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(UR,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRProcessor"),d(JR,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(YR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(zh,"class","docstring"),d(Uo,"class","docstring"),d(Qh,"id","transformers.AutoModel"),d(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(KR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eB,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(oB,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel"),d(rB,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel"),d(tB,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel"),d(aB,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(nB,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(sB,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel"),d(lB,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(iB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(dB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(cB,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel"),d(fB,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel"),d(mB,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel"),d(gB,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel"),d(hB,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel"),d(pB,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel"),d(_B,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(uB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(bB,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel"),d(FB,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(vB,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(TB,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel"),d(MB,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel"),d(EB,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel"),d(CB,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(wB,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel"),d(AB,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel"),d(yB,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel"),d(LB,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel"),d(xB,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel"),d(kB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel"),d(SB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel"),d(RB,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel"),d(BB,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model"),d(PB,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d($B,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel"),d(IB,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel"),d(qB,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel"),d(NB,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(jB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(DB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(GB,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel"),d(OB,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel"),d(VB,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel"),d(XB,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel"),d(zB,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model"),d(QB,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel"),d(WB,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel"),d(HB,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel"),d(UB,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(JB,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel"),d(YB,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel"),d(KB,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model"),d(ZB,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel"),d(eP,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(oP,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel"),d(rP,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel"),d(tP,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel"),d(aP,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel"),d(nP,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(sP,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel"),d(lP,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel"),d(iP,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel"),d(dP,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel"),d(cP,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(fP,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel"),d(mP,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel"),d(gP,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel"),d(hP,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel"),d(pP,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel"),d(_P,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(uP,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel"),d(bP,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(FP,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel"),d(vP,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model"),d(TP,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel"),d(MP,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(EP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel"),d(CP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(wP,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel"),d(AP,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel"),d(yP,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(LP,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel"),d(xP,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel"),d(kP,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(SP,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(RP,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel"),d(BP,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel"),d(PP,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel"),d($P,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(IP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(qP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(NP,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel"),d(jP,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(S_,"id","transformers.AutoModelForPreTraining"),d(S_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(DP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(VP,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining"),d(XP,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(zP,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining"),d(QP,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(WP,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(HP,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(UP,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(JP,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(YP,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(KP,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(ZP,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining"),d(e$,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(o$,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining"),d(r$,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(t$,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(a$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(n$,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(s$,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(l$,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(i$,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(d$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(c$,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(f$,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(m$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(g$,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(h$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(p$,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(_$,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(u$,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(b$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(F$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(v$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(T$,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(M$,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(E$,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(C$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(w$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(A$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(y$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(bu,"id","transformers.AutoModelForCausalLM"),d(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(L$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(x$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(k$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(S$,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM"),d(R$,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel"),d(B$,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(P$,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d($$,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(I$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(q$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(N$,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(j$,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(D$,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(G$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM"),d(O$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(V$,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(X$,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(z$,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM"),d(Q$,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM"),d(W$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(H$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(U$,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(J$,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(Y$,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(K$,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(Z$,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(eI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(oI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(rI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(tI,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(aI,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(nI,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(sI,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(lI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(iI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(dI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(cI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(fI,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(o1,"id","transformers.AutoModelForMaskedLM"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(mI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(pI,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(FI,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(vI,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(TI,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(MI,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(EI,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(CI,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(wI,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(AI,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(yI,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(LI,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(xI,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(SI,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(RI,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d($I,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(II,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(qI,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(NI,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(DI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(OI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(VI,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(XI,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(zI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(QI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(WI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(HI,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(N1,"id","transformers.AutoModelForSeq2SeqLM"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(UI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(KI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(tq,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel"),d(lq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(t4,"id","transformers.AutoModelForSequenceClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(pq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_q,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(bq,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d($q,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(K4,"id","transformers.AutoModelForMultipleChoice"),d(K4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(fN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(hN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d($N,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Lb,"id","transformers.AutoModelForNextSentencePrediction"),d(Lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lb,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(ON,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(zN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(QN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(WN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(HN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(UN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d($b,"id","transformers.AutoModelForTokenClassification"),d($b,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($b,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(JN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(ZN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(ej,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification"),d(oj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(rj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(tj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification"),d(aj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(sj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(lj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(ij,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(cj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(mj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(gj,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(hj,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(_j,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(uj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(bj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(wj,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(xj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(kj,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(_3,"id","transformers.AutoModelForQuestionAnswering"),d(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Rj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Pj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d($j,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Uj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(_D,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(FD,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(t2,"id","transformers.AutoModelForTableQuestionAnswering"),d(t2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(vD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(ED,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(s2,"id","transformers.AutoModelForImageClassification"),d(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(CD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(yD,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification"),d(LD,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(xD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification"),d(kD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(SD,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(RD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(BD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(PD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d($D,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ID,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(qD,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(ND,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification"),d(jD,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification"),d(DD,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(u2,"id","transformers.AutoModelForVision2Seq"),d(u2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(GD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(XD,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(v2,"id","transformers.AutoModelForAudioClassification"),d(v2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(zD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(HD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(KD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(ZD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(eG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(oG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(k2,"id","transformers.AutoModelForAudioFrameClassification"),d(k2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(rG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(nG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(sG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(lG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(iG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(I2,"id","transformers.AutoModelForCTC"),d(I2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(dG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(mG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(gG,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC"),d(hG,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC"),d(pG,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC"),d(_G,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(uG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(bG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(FG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(Q2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(Q2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(vG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(EG,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(CG,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(J2,"id","transformers.AutoModelForAudioXVector"),d(J2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(wG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(LG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(xG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(kG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(SG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(rF,"id","transformers.AutoModelForMaskedImageModeling"),d(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(RG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d($G,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(IG,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(qG,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(lF,"id","transformers.AutoModelForObjectDetection"),d(lF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(NG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(GG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(cF,"id","transformers.AutoModelForImageSegmentation"),d(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(OG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(zG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(gF,"id","transformers.AutoModelForSemanticSegmentation"),d(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(QG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(UG,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(JG,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(YG,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(bF,"id","transformers.AutoModelForInstanceSegmentation"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(oO,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(TF,"id","transformers.TFAutoModel"),d(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(rO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(nO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel"),d(sO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel"),d(lO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel"),d(iO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(dO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(cO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel"),d(fO,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel"),d(mO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel"),d(gO,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel"),d(hO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel"),d(pO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel"),d(_O,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(uO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(bO,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(FO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel"),d(vO,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(TO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel"),d(MO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(EO,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model"),d(CO,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel"),d(wO,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel"),d(AO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(yO,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel"),d(LO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel"),d(xO,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel"),d(kO,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel"),d(SO,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel"),d(RO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(BO,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel"),d(PO,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model"),d($O,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(IO,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel"),d(qO,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel"),d(NO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel"),d(jO,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel"),d(DO,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(GO,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model"),d(OO,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel"),d(VO,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(XO,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel"),d(zO,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(QO,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(WO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel"),d(HO,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(UO,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(fv,"id","transformers.TFAutoModelForPreTraining"),d(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(JO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(ZO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(eV,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(oV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining"),d(rV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(tV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(aV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(nV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(sV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(lV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(iV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(dV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(cV,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(fV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(mV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(gV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(hV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(pV,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(_V,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(uV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(bV,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(FV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(vV,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(TV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d($v,"id","transformers.TFAutoModelForCausalLM"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(MV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(wV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(AV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(yV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(LV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(xV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(kV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(SV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(RV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(BV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(PV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($V,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(IV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(Hv,"id","transformers.TFAutoModelForImageClassification"),d(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(qV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(DV,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(GV,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Yv,"id","transformers.TFAutoModelForMaskedLM"),d(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(OV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(zV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(QV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(HV,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(UV,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(JV,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(YV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(KV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(eX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(oX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(rX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(tX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(aX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(nX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(sX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(lX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(iX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(dX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(cX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(b6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(b6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(fX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(hX,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(bX,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel"),d(vX,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(TX,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(MX,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(EX,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(x6,"id","transformers.TFAutoModelForSequenceClassification"),d(x6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(CX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(yX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d($X,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(rT,"id","transformers.TFAutoModelForMultipleChoice"),d(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(ZX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ez,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(rz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(az,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(pz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(_z,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(uz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(vT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Fz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(Mz,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(MT,"id","transformers.TFAutoModelForTokenClassification"),d(MT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Ez,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Cz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Az,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(yz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(kz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d($z,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(qz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(jz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(zz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(VT,"id","transformers.TFAutoModelForQuestionAnswering"),d(VT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Qz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Hz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Uz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(aQ,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(gQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(c7,"id","transformers.TFAutoModelForVision2Seq"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(pQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Q,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(bQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(m7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(FQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(MQ,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(h7,"id","transformers.FlaxAutoModel"),d(h7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h7,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(EQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(AQ,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel"),d(yQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel"),d(LQ,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel"),d(xQ,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel"),d(kQ,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(SQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(RQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(BQ,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel"),d(PQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d($Q,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel"),d(IQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(qQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(NQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(jQ,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel"),d(DQ,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel"),d(GQ,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model"),d(OQ,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(VQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(XQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(zQ,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model"),d(QQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(WQ,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel"),d(HQ,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(UQ,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(JQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(D7,"id","transformers.FlaxAutoModelForCausalLM"),d(D7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D7,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(YQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(eW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(oW,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(rW,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(tW,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(aW,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(Q7,"id","transformers.FlaxAutoModelForPreTraining"),d(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q7,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(nW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(iW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(dW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(cW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(fW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(mW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(gW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(pW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(_W,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(uW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(bW,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(FW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(nM,"id","transformers.FlaxAutoModelForMaskedLM"),d(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(vW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(EW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(CW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(AW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(yW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(LW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(xW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(kW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(_M,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(_M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_M,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(BW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($W,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(IW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(DW,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(GW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(OW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(VW,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(XW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(AM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(zW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(HW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(JW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(KW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(ZW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(eH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(oH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(rH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(tH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(qM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(aH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(lH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(mH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(gH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(hH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(pH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(_H,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(HM,"id","transformers.FlaxAutoModelForTokenClassification"),d(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(HM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(uH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(vH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(TH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(MH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(EH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(CH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(wH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(AH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(yH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(tE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(tE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(LH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(SH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(RH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(BH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(PH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d($H,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(IH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(qH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(NH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(jH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(OH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(hE,"id","transformers.FlaxAutoModelForImageClassification"),d(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(VH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(QH,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(WH,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(uE,"id","transformers.FlaxAutoModelForVision2Seq"),d(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(HH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(YH,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,bC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,FC),e(co,On),e(co,Vn),e(Vn,vC),e(co,Di),e(co,Xn),e(Xn,TC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,c9),e(_e,Oi),e(Oi,f9),e(_e,m9),b(c,zo,u),b(c,Ga,u),e(Ga,g9),e(Ga,Df),e(Df,h9),e(Ga,iIe),b(c,USe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,zJ),g(MC,zJ,null),e(Vi,dIe),e(Vi,QJ),e(QJ,cIe),b(c,JSe,u),b(c,zn,u),e(zn,fIe),e(zn,WJ),e(WJ,mIe),e(zn,gIe),e(zn,HJ),e(HJ,hIe),e(zn,pIe),b(c,YSe,u),g(EC,c,u),b(c,KSe,u),b(c,p9,u),e(p9,_Ie),b(c,ZSe,u),g(Of,c,u),b(c,eRe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,UJ),g(CC,UJ,null),e(Xi,uIe),e(Xi,JJ),e(JJ,bIe),b(c,oRe,u),b(c,Qo,u),g(wC,Qo,null),e(Qo,FIe),e(Qo,AC),e(AC,vIe),e(AC,_9),e(_9,TIe),e(AC,MIe),e(Qo,EIe),e(Qo,yC),e(yC,CIe),e(yC,YJ),e(YJ,wIe),e(yC,AIe),e(Qo,yIe),e(Qo,mo),g(LC,mo,null),e(mo,LIe),e(mo,KJ),e(KJ,xIe),e(mo,kIe),e(mo,zi),e(zi,SIe),e(zi,ZJ),e(ZJ,RIe),e(zi,BIe),e(zi,eY),e(eY,PIe),e(zi,$Ie),e(mo,IIe),e(mo,F),e(F,Xf),e(Xf,oY),e(oY,qIe),e(Xf,NIe),e(Xf,u9),e(u9,jIe),e(Xf,DIe),e(F,GIe),e(F,zf),e(zf,rY),e(rY,OIe),e(zf,VIe),e(zf,b9),e(b9,XIe),e(zf,zIe),e(F,QIe),e(F,Qf),e(Qf,tY),e(tY,WIe),e(Qf,HIe),e(Qf,F9),e(F9,UIe),e(Qf,JIe),e(F,YIe),e(F,Wf),e(Wf,aY),e(aY,KIe),e(Wf,ZIe),e(Wf,v9),e(v9,eqe),e(Wf,oqe),e(F,rqe),e(F,Hf),e(Hf,nY),e(nY,tqe),e(Hf,aqe),e(Hf,T9),e(T9,nqe),e(Hf,sqe),e(F,lqe),e(F,Uf),e(Uf,sY),e(sY,iqe),e(Uf,dqe),e(Uf,M9),e(M9,cqe),e(Uf,fqe),e(F,mqe),e(F,Jf),e(Jf,lY),e(lY,gqe),e(Jf,hqe),e(Jf,E9),e(E9,pqe),e(Jf,_qe),e(F,uqe),e(F,Yf),e(Yf,iY),e(iY,bqe),e(Yf,Fqe),e(Yf,C9),e(C9,vqe),e(Yf,Tqe),e(F,Mqe),e(F,Kf),e(Kf,dY),e(dY,Eqe),e(Kf,Cqe),e(Kf,w9),e(w9,wqe),e(Kf,Aqe),e(F,yqe),e(F,Zf),e(Zf,cY),e(cY,Lqe),e(Zf,xqe),e(Zf,A9),e(A9,kqe),e(Zf,Sqe),e(F,Rqe),e(F,em),e(em,fY),e(fY,Bqe),e(em,Pqe),e(em,y9),e(y9,$qe),e(em,Iqe),e(F,qqe),e(F,om),e(om,mY),e(mY,Nqe),e(om,jqe),e(om,L9),e(L9,Dqe),e(om,Gqe),e(F,Oqe),e(F,rm),e(rm,gY),e(gY,Vqe),e(rm,Xqe),e(rm,x9),e(x9,zqe),e(rm,Qqe),e(F,Wqe),e(F,tm),e(tm,hY),e(hY,Hqe),e(tm,Uqe),e(tm,k9),e(k9,Jqe),e(tm,Yqe),e(F,Kqe),e(F,am),e(am,pY),e(pY,Zqe),e(am,eNe),e(am,S9),e(S9,oNe),e(am,rNe),e(F,tNe),e(F,nm),e(nm,_Y),e(_Y,aNe),e(nm,nNe),e(nm,R9),e(R9,sNe),e(nm,lNe),e(F,iNe),e(F,sm),e(sm,uY),e(uY,dNe),e(sm,cNe),e(sm,B9),e(B9,fNe),e(sm,mNe),e(F,gNe),e(F,lm),e(lm,bY),e(bY,hNe),e(lm,pNe),e(lm,P9),e(P9,_Ne),e(lm,uNe),e(F,bNe),e(F,im),e(im,FY),e(FY,FNe),e(im,vNe),e(im,$9),e($9,TNe),e(im,MNe),e(F,ENe),e(F,dm),e(dm,vY),e(vY,CNe),e(dm,wNe),e(dm,I9),e(I9,ANe),e(dm,yNe),e(F,LNe),e(F,cm),e(cm,TY),e(TY,xNe),e(cm,kNe),e(cm,q9),e(q9,SNe),e(cm,RNe),e(F,BNe),e(F,fm),e(fm,MY),e(MY,PNe),e(fm,$Ne),e(fm,N9),e(N9,INe),e(fm,qNe),e(F,NNe),e(F,mm),e(mm,EY),e(EY,jNe),e(mm,DNe),e(mm,j9),e(j9,GNe),e(mm,ONe),e(F,VNe),e(F,gm),e(gm,CY),e(CY,XNe),e(gm,zNe),e(gm,D9),e(D9,QNe),e(gm,WNe),e(F,HNe),e(F,hm),e(hm,wY),e(wY,UNe),e(hm,JNe),e(hm,G9),e(G9,YNe),e(hm,KNe),e(F,ZNe),e(F,pm),e(pm,AY),e(AY,eje),e(pm,oje),e(pm,O9),e(O9,rje),e(pm,tje),e(F,aje),e(F,_m),e(_m,yY),e(yY,nje),e(_m,sje),e(_m,V9),e(V9,lje),e(_m,ije),e(F,dje),e(F,um),e(um,LY),e(LY,cje),e(um,fje),e(um,X9),e(X9,mje),e(um,gje),e(F,hje),e(F,bm),e(bm,xY),e(xY,pje),e(bm,_je),e(bm,z9),e(z9,uje),e(bm,bje),e(F,Fje),e(F,Fm),e(Fm,kY),e(kY,vje),e(Fm,Tje),e(Fm,Q9),e(Q9,Mje),e(Fm,Eje),e(F,Cje),e(F,vm),e(vm,SY),e(SY,wje),e(vm,Aje),e(vm,W9),e(W9,yje),e(vm,Lje),e(F,xje),e(F,Tm),e(Tm,RY),e(RY,kje),e(Tm,Sje),e(Tm,H9),e(H9,Rje),e(Tm,Bje),e(F,Pje),e(F,Mm),e(Mm,BY),e(BY,$je),e(Mm,Ije),e(Mm,U9),e(U9,qje),e(Mm,Nje),e(F,jje),e(F,Em),e(Em,PY),e(PY,Dje),e(Em,Gje),e(Em,J9),e(J9,Oje),e(Em,Vje),e(F,Xje),e(F,Cm),e(Cm,$Y),e($Y,zje),e(Cm,Qje),e(Cm,Y9),e(Y9,Wje),e(Cm,Hje),e(F,Uje),e(F,wm),e(wm,IY),e(IY,Jje),e(wm,Yje),e(wm,K9),e(K9,Kje),e(wm,Zje),e(F,eDe),e(F,Am),e(Am,qY),e(qY,oDe),e(Am,rDe),e(Am,Z9),e(Z9,tDe),e(Am,aDe),e(F,nDe),e(F,ym),e(ym,NY),e(NY,sDe),e(ym,lDe),e(ym,ex),e(ex,iDe),e(ym,dDe),e(F,cDe),e(F,Lm),e(Lm,jY),e(jY,fDe),e(Lm,mDe),e(Lm,ox),e(ox,gDe),e(Lm,hDe),e(F,pDe),e(F,xm),e(xm,DY),e(DY,_De),e(xm,uDe),e(xm,rx),e(rx,bDe),e(xm,FDe),e(F,vDe),e(F,km),e(km,GY),e(GY,TDe),e(km,MDe),e(km,tx),e(tx,EDe),e(km,CDe),e(F,wDe),e(F,Sm),e(Sm,OY),e(OY,ADe),e(Sm,yDe),e(Sm,ax),e(ax,LDe),e(Sm,xDe),e(F,kDe),e(F,Rm),e(Rm,VY),e(VY,SDe),e(Rm,RDe),e(Rm,nx),e(nx,BDe),e(Rm,PDe),e(F,$De),e(F,Bm),e(Bm,XY),e(XY,IDe),e(Bm,qDe),e(Bm,sx),e(sx,NDe),e(Bm,jDe),e(F,DDe),e(F,Pm),e(Pm,zY),e(zY,GDe),e(Pm,ODe),e(Pm,lx),e(lx,VDe),e(Pm,XDe),e(F,zDe),e(F,$m),e($m,QY),e(QY,QDe),e($m,WDe),e($m,ix),e(ix,HDe),e($m,UDe),e(F,JDe),e(F,Im),e(Im,WY),e(WY,YDe),e(Im,KDe),e(Im,dx),e(dx,ZDe),e(Im,eGe),e(F,oGe),e(F,qm),e(qm,HY),e(HY,rGe),e(qm,tGe),e(qm,cx),e(cx,aGe),e(qm,nGe),e(F,sGe),e(F,Nm),e(Nm,UY),e(UY,lGe),e(Nm,iGe),e(Nm,fx),e(fx,dGe),e(Nm,cGe),e(F,fGe),e(F,jm),e(jm,JY),e(JY,mGe),e(jm,gGe),e(jm,mx),e(mx,hGe),e(jm,pGe),e(F,_Ge),e(F,Dm),e(Dm,YY),e(YY,uGe),e(Dm,bGe),e(Dm,gx),e(gx,FGe),e(Dm,vGe),e(F,TGe),e(F,Gm),e(Gm,KY),e(KY,MGe),e(Gm,EGe),e(Gm,hx),e(hx,CGe),e(Gm,wGe),e(F,AGe),e(F,Om),e(Om,ZY),e(ZY,yGe),e(Om,LGe),e(Om,px),e(px,xGe),e(Om,kGe),e(F,SGe),e(F,Vm),e(Vm,eK),e(eK,RGe),e(Vm,BGe),e(Vm,_x),e(_x,PGe),e(Vm,$Ge),e(F,IGe),e(F,Xm),e(Xm,oK),e(oK,qGe),e(Xm,NGe),e(Xm,ux),e(ux,jGe),e(Xm,DGe),e(F,GGe),e(F,zm),e(zm,rK),e(rK,OGe),e(zm,VGe),e(zm,bx),e(bx,XGe),e(zm,zGe),e(F,QGe),e(F,Qm),e(Qm,tK),e(tK,WGe),e(Qm,HGe),e(Qm,Fx),e(Fx,UGe),e(Qm,JGe),e(F,YGe),e(F,Wm),e(Wm,aK),e(aK,KGe),e(Wm,ZGe),e(Wm,vx),e(vx,eOe),e(Wm,oOe),e(F,rOe),e(F,Hm),e(Hm,nK),e(nK,tOe),e(Hm,aOe),e(Hm,Tx),e(Tx,nOe),e(Hm,sOe),e(F,lOe),e(F,Um),e(Um,sK),e(sK,iOe),e(Um,dOe),e(Um,Mx),e(Mx,cOe),e(Um,fOe),e(F,mOe),e(F,Jm),e(Jm,lK),e(lK,gOe),e(Jm,hOe),e(Jm,Ex),e(Ex,pOe),e(Jm,_Oe),e(F,uOe),e(F,Ym),e(Ym,iK),e(iK,bOe),e(Ym,FOe),e(Ym,Cx),e(Cx,vOe),e(Ym,TOe),e(F,MOe),e(F,Km),e(Km,dK),e(dK,EOe),e(Km,COe),e(Km,wx),e(wx,wOe),e(Km,AOe),e(F,yOe),e(F,Zm),e(Zm,cK),e(cK,LOe),e(Zm,xOe),e(Zm,Ax),e(Ax,kOe),e(Zm,SOe),e(F,ROe),e(F,eg),e(eg,fK),e(fK,BOe),e(eg,POe),e(eg,yx),e(yx,$Oe),e(eg,IOe),e(F,qOe),e(F,og),e(og,mK),e(mK,NOe),e(og,jOe),e(og,Lx),e(Lx,DOe),e(og,GOe),e(F,OOe),e(F,rg),e(rg,gK),e(gK,VOe),e(rg,XOe),e(rg,xx),e(xx,zOe),e(rg,QOe),e(F,WOe),e(F,tg),e(tg,hK),e(hK,HOe),e(tg,UOe),e(tg,kx),e(kx,JOe),e(tg,YOe),e(F,KOe),e(F,ag),e(ag,pK),e(pK,ZOe),e(ag,eVe),e(ag,Sx),e(Sx,oVe),e(ag,rVe),e(F,tVe),e(F,ng),e(ng,_K),e(_K,aVe),e(ng,nVe),e(ng,Rx),e(Rx,sVe),e(ng,lVe),e(F,iVe),e(F,sg),e(sg,uK),e(uK,dVe),e(sg,cVe),e(sg,Bx),e(Bx,fVe),e(sg,mVe),e(F,gVe),e(F,lg),e(lg,bK),e(bK,hVe),e(lg,pVe),e(lg,Px),e(Px,_Ve),e(lg,uVe),e(F,bVe),e(F,ig),e(ig,FK),e(FK,FVe),e(ig,vVe),e(ig,$x),e($x,TVe),e(ig,MVe),e(F,EVe),e(F,dg),e(dg,vK),e(vK,CVe),e(dg,wVe),e(dg,Ix),e(Ix,AVe),e(dg,yVe),e(F,LVe),e(F,cg),e(cg,TK),e(TK,xVe),e(cg,kVe),e(cg,qx),e(qx,SVe),e(cg,RVe),e(F,BVe),e(F,fg),e(fg,MK),e(MK,PVe),e(fg,$Ve),e(fg,Nx),e(Nx,IVe),e(fg,qVe),e(F,NVe),e(F,mg),e(mg,EK),e(EK,jVe),e(mg,DVe),e(mg,jx),e(jx,GVe),e(mg,OVe),e(F,VVe),e(F,gg),e(gg,CK),e(CK,XVe),e(gg,zVe),e(gg,Dx),e(Dx,QVe),e(gg,WVe),e(F,HVe),e(F,hg),e(hg,wK),e(wK,UVe),e(hg,JVe),e(hg,Gx),e(Gx,YVe),e(hg,KVe),e(F,ZVe),e(F,pg),e(pg,AK),e(AK,eXe),e(pg,oXe),e(pg,Ox),e(Ox,rXe),e(pg,tXe),e(F,aXe),e(F,_g),e(_g,yK),e(yK,nXe),e(_g,sXe),e(_g,Vx),e(Vx,lXe),e(_g,iXe),e(F,dXe),e(F,ug),e(ug,LK),e(LK,cXe),e(ug,fXe),e(ug,Xx),e(Xx,mXe),e(ug,gXe),e(F,hXe),e(F,bg),e(bg,xK),e(xK,pXe),e(bg,_Xe),e(bg,zx),e(zx,uXe),e(bg,bXe),e(F,FXe),e(F,Fg),e(Fg,kK),e(kK,vXe),e(Fg,TXe),e(Fg,Qx),e(Qx,MXe),e(Fg,EXe),e(F,CXe),e(F,vg),e(vg,SK),e(SK,wXe),e(vg,AXe),e(vg,Wx),e(Wx,yXe),e(vg,LXe),e(F,xXe),e(F,Tg),e(Tg,RK),e(RK,kXe),e(Tg,SXe),e(Tg,Hx),e(Hx,RXe),e(Tg,BXe),e(F,PXe),e(F,Mg),e(Mg,BK),e(BK,$Xe),e(Mg,IXe),e(Mg,Ux),e(Ux,qXe),e(Mg,NXe),e(F,jXe),e(F,Eg),e(Eg,PK),e(PK,DXe),e(Eg,GXe),e(Eg,Jx),e(Jx,OXe),e(Eg,VXe),e(F,XXe),e(F,Cg),e(Cg,$K),e($K,zXe),e(Cg,QXe),e(Cg,Yx),e(Yx,WXe),e(Cg,HXe),e(F,UXe),e(F,wg),e(wg,IK),e(IK,JXe),e(wg,YXe),e(wg,Kx),e(Kx,KXe),e(wg,ZXe),e(F,eze),e(F,Ag),e(Ag,qK),e(qK,oze),e(Ag,rze),e(Ag,Zx),e(Zx,tze),e(Ag,aze),e(F,nze),e(F,yg),e(yg,NK),e(NK,sze),e(yg,lze),e(yg,ek),e(ek,ize),e(yg,dze),e(F,cze),e(F,Lg),e(Lg,jK),e(jK,fze),e(Lg,mze),e(Lg,ok),e(ok,gze),e(Lg,hze),e(F,pze),e(F,xg),e(xg,DK),e(DK,_ze),e(xg,uze),e(xg,rk),e(rk,bze),e(xg,Fze),e(F,vze),e(F,kg),e(kg,GK),e(GK,Tze),e(kg,Mze),e(kg,tk),e(tk,Eze),e(kg,Cze),e(F,wze),e(F,Sg),e(Sg,OK),e(OK,Aze),e(Sg,yze),e(Sg,ak),e(ak,Lze),e(Sg,xze),e(F,kze),e(F,Rg),e(Rg,VK),e(VK,Sze),e(Rg,Rze),e(Rg,nk),e(nk,Bze),e(Rg,Pze),e(F,$ze),e(F,Bg),e(Bg,XK),e(XK,Ize),e(Bg,qze),e(Bg,sk),e(sk,Nze),e(Bg,jze),e(F,Dze),e(F,Pg),e(Pg,zK),e(zK,Gze),e(Pg,Oze),e(Pg,lk),e(lk,Vze),e(Pg,Xze),e(mo,zze),e(mo,QK),e(QK,Qze),e(mo,Wze),g(xC,mo,null),e(Qo,Hze),e(Qo,$g),g(kC,$g,null),e($g,Uze),e($g,WK),e(WK,Jze),b(c,rRe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,HK),g(SC,HK,null),e(Qi,Yze),e(Qi,UK),e(UK,Kze),b(c,tRe,u),b(c,Wo,u),g(RC,Wo,null),e(Wo,Zze),e(Wo,BC),e(BC,eQe),e(BC,ik),e(ik,oQe),e(BC,rQe),e(Wo,tQe),e(Wo,PC),e(PC,aQe),e(PC,JK),e(JK,nQe),e(PC,sQe),e(Wo,lQe),e(Wo,go),g($C,go,null),e(go,iQe),e(go,YK),e(YK,dQe),e(go,cQe),e(go,Oa),e(Oa,fQe),e(Oa,KK),e(KK,mQe),e(Oa,gQe),e(Oa,ZK),e(ZK,hQe),e(Oa,pQe),e(Oa,eZ),e(eZ,_Qe),e(Oa,uQe),e(go,bQe),e(go,E),e(E,Qn),e(Qn,oZ),e(oZ,FQe),e(Qn,vQe),e(Qn,dk),e(dk,TQe),e(Qn,MQe),e(Qn,ck),e(ck,EQe),e(Qn,CQe),e(E,wQe),e(E,Wn),e(Wn,rZ),e(rZ,AQe),e(Wn,yQe),e(Wn,fk),e(fk,LQe),e(Wn,xQe),e(Wn,mk),e(mk,kQe),e(Wn,SQe),e(E,RQe),e(E,Hn),e(Hn,tZ),e(tZ,BQe),e(Hn,PQe),e(Hn,gk),e(gk,$Qe),e(Hn,IQe),e(Hn,hk),e(hk,qQe),e(Hn,NQe),e(E,jQe),e(E,qg),e(qg,aZ),e(aZ,DQe),e(qg,GQe),e(qg,pk),e(pk,OQe),e(qg,VQe),e(E,XQe),e(E,Un),e(Un,nZ),e(nZ,zQe),e(Un,QQe),e(Un,_k),e(_k,WQe),e(Un,HQe),e(Un,uk),e(uk,UQe),e(Un,JQe),e(E,YQe),e(E,Ng),e(Ng,sZ),e(sZ,KQe),e(Ng,ZQe),e(Ng,bk),e(bk,eWe),e(Ng,oWe),e(E,rWe),e(E,jg),e(jg,lZ),e(lZ,tWe),e(jg,aWe),e(jg,Fk),e(Fk,nWe),e(jg,sWe),e(E,lWe),e(E,Dg),e(Dg,iZ),e(iZ,iWe),e(Dg,dWe),e(Dg,vk),e(vk,cWe),e(Dg,fWe),e(E,mWe),e(E,Jn),e(Jn,dZ),e(dZ,gWe),e(Jn,hWe),e(Jn,Tk),e(Tk,pWe),e(Jn,_We),e(Jn,Mk),e(Mk,uWe),e(Jn,bWe),e(E,FWe),e(E,Yn),e(Yn,cZ),e(cZ,vWe),e(Yn,TWe),e(Yn,Ek),e(Ek,MWe),e(Yn,EWe),e(Yn,Ck),e(Ck,CWe),e(Yn,wWe),e(E,AWe),e(E,Kn),e(Kn,fZ),e(fZ,yWe),e(Kn,LWe),e(Kn,wk),e(wk,xWe),e(Kn,kWe),e(Kn,Ak),e(Ak,SWe),e(Kn,RWe),e(E,BWe),e(E,Gg),e(Gg,mZ),e(mZ,PWe),e(Gg,$We),e(Gg,yk),e(yk,IWe),e(Gg,qWe),e(E,NWe),e(E,Og),e(Og,gZ),e(gZ,jWe),e(Og,DWe),e(Og,Lk),e(Lk,GWe),e(Og,OWe),e(E,VWe),e(E,Zn),e(Zn,hZ),e(hZ,XWe),e(Zn,zWe),e(Zn,xk),e(xk,QWe),e(Zn,WWe),e(Zn,kk),e(kk,HWe),e(Zn,UWe),e(E,JWe),e(E,Vg),e(Vg,pZ),e(pZ,YWe),e(Vg,KWe),e(Vg,Sk),e(Sk,ZWe),e(Vg,eHe),e(E,oHe),e(E,es),e(es,_Z),e(_Z,rHe),e(es,tHe),e(es,Rk),e(Rk,aHe),e(es,nHe),e(es,Bk),e(Bk,sHe),e(es,lHe),e(E,iHe),e(E,os),e(os,uZ),e(uZ,dHe),e(os,cHe),e(os,Pk),e(Pk,fHe),e(os,mHe),e(os,$k),e($k,gHe),e(os,hHe),e(E,pHe),e(E,rs),e(rs,bZ),e(bZ,_He),e(rs,uHe),e(rs,Ik),e(Ik,bHe),e(rs,FHe),e(rs,FZ),e(FZ,vHe),e(rs,THe),e(E,MHe),e(E,Xg),e(Xg,vZ),e(vZ,EHe),e(Xg,CHe),e(Xg,qk),e(qk,wHe),e(Xg,AHe),e(E,yHe),e(E,ts),e(ts,TZ),e(TZ,LHe),e(ts,xHe),e(ts,Nk),e(Nk,kHe),e(ts,SHe),e(ts,jk),e(jk,RHe),e(ts,BHe),e(E,PHe),e(E,zg),e(zg,MZ),e(MZ,$He),e(zg,IHe),e(zg,Dk),e(Dk,qHe),e(zg,NHe),e(E,jHe),e(E,as),e(as,EZ),e(EZ,DHe),e(as,GHe),e(as,Gk),e(Gk,OHe),e(as,VHe),e(as,Ok),e(Ok,XHe),e(as,zHe),e(E,QHe),e(E,ns),e(ns,CZ),e(CZ,WHe),e(ns,HHe),e(ns,Vk),e(Vk,UHe),e(ns,JHe),e(ns,Xk),e(Xk,YHe),e(ns,KHe),e(E,ZHe),e(E,ss),e(ss,wZ),e(wZ,eUe),e(ss,oUe),e(ss,zk),e(zk,rUe),e(ss,tUe),e(ss,Qk),e(Qk,aUe),e(ss,nUe),e(E,sUe),e(E,Qg),e(Qg,AZ),e(AZ,lUe),e(Qg,iUe),e(Qg,Wk),e(Wk,dUe),e(Qg,cUe),e(E,fUe),e(E,ls),e(ls,yZ),e(yZ,mUe),e(ls,gUe),e(ls,Hk),e(Hk,hUe),e(ls,pUe),e(ls,Uk),e(Uk,_Ue),e(ls,uUe),e(E,bUe),e(E,Wg),e(Wg,LZ),e(LZ,FUe),e(Wg,vUe),e(Wg,Jk),e(Jk,TUe),e(Wg,MUe),e(E,EUe),e(E,is),e(is,xZ),e(xZ,CUe),e(is,wUe),e(is,Yk),e(Yk,AUe),e(is,yUe),e(is,Kk),e(Kk,LUe),e(is,xUe),e(E,kUe),e(E,ds),e(ds,kZ),e(kZ,SUe),e(ds,RUe),e(ds,Zk),e(Zk,BUe),e(ds,PUe),e(ds,eS),e(eS,$Ue),e(ds,IUe),e(E,qUe),e(E,cs),e(cs,SZ),e(SZ,NUe),e(cs,jUe),e(cs,oS),e(oS,DUe),e(cs,GUe),e(cs,rS),e(rS,OUe),e(cs,VUe),e(E,XUe),e(E,fs),e(fs,RZ),e(RZ,zUe),e(fs,QUe),e(fs,tS),e(tS,WUe),e(fs,HUe),e(fs,aS),e(aS,UUe),e(fs,JUe),e(E,YUe),e(E,Hg),e(Hg,BZ),e(BZ,KUe),e(Hg,ZUe),e(Hg,nS),e(nS,eJe),e(Hg,oJe),e(E,rJe),e(E,ms),e(ms,PZ),e(PZ,tJe),e(ms,aJe),e(ms,sS),e(sS,nJe),e(ms,sJe),e(ms,lS),e(lS,lJe),e(ms,iJe),e(E,dJe),e(E,gs),e(gs,$Z),e($Z,cJe),e(gs,fJe),e(gs,iS),e(iS,mJe),e(gs,gJe),e(gs,dS),e(dS,hJe),e(gs,pJe),e(E,_Je),e(E,hs),e(hs,IZ),e(IZ,uJe),e(hs,bJe),e(hs,cS),e(cS,FJe),e(hs,vJe),e(hs,fS),e(fS,TJe),e(hs,MJe),e(E,EJe),e(E,ps),e(ps,qZ),e(qZ,CJe),e(ps,wJe),e(ps,mS),e(mS,AJe),e(ps,yJe),e(ps,gS),e(gS,LJe),e(ps,xJe),e(E,kJe),e(E,_s),e(_s,NZ),e(NZ,SJe),e(_s,RJe),e(_s,hS),e(hS,BJe),e(_s,PJe),e(_s,pS),e(pS,$Je),e(_s,IJe),e(E,qJe),e(E,us),e(us,jZ),e(jZ,NJe),e(us,jJe),e(us,_S),e(_S,DJe),e(us,GJe),e(us,uS),e(uS,OJe),e(us,VJe),e(E,XJe),e(E,Ug),e(Ug,DZ),e(DZ,zJe),e(Ug,QJe),e(Ug,bS),e(bS,WJe),e(Ug,HJe),e(E,UJe),e(E,bs),e(bs,GZ),e(GZ,JJe),e(bs,YJe),e(bs,FS),e(FS,KJe),e(bs,ZJe),e(bs,vS),e(vS,eYe),e(bs,oYe),e(E,rYe),e(E,Jg),e(Jg,OZ),e(OZ,tYe),e(Jg,aYe),e(Jg,TS),e(TS,nYe),e(Jg,sYe),e(E,lYe),e(E,Yg),e(Yg,VZ),e(VZ,iYe),e(Yg,dYe),e(Yg,MS),e(MS,cYe),e(Yg,fYe),e(E,mYe),e(E,Fs),e(Fs,XZ),e(XZ,gYe),e(Fs,hYe),e(Fs,ES),e(ES,pYe),e(Fs,_Ye),e(Fs,CS),e(CS,uYe),e(Fs,bYe),e(E,FYe),e(E,vs),e(vs,zZ),e(zZ,vYe),e(vs,TYe),e(vs,wS),e(wS,MYe),e(vs,EYe),e(vs,AS),e(AS,CYe),e(vs,wYe),e(E,AYe),e(E,Kg),e(Kg,QZ),e(QZ,yYe),e(Kg,LYe),e(Kg,yS),e(yS,xYe),e(Kg,kYe),e(E,SYe),e(E,Ts),e(Ts,WZ),e(WZ,RYe),e(Ts,BYe),e(Ts,LS),e(LS,PYe),e(Ts,$Ye),e(Ts,xS),e(xS,IYe),e(Ts,qYe),e(E,NYe),e(E,Ms),e(Ms,HZ),e(HZ,jYe),e(Ms,DYe),e(Ms,kS),e(kS,GYe),e(Ms,OYe),e(Ms,SS),e(SS,VYe),e(Ms,XYe),e(E,zYe),e(E,Es),e(Es,UZ),e(UZ,QYe),e(Es,WYe),e(Es,RS),e(RS,HYe),e(Es,UYe),e(Es,BS),e(BS,JYe),e(Es,YYe),e(E,KYe),e(E,Cs),e(Cs,JZ),e(JZ,ZYe),e(Cs,eKe),e(Cs,PS),e(PS,oKe),e(Cs,rKe),e(Cs,$S),e($S,tKe),e(Cs,aKe),e(E,nKe),e(E,ws),e(ws,YZ),e(YZ,sKe),e(ws,lKe),e(ws,IS),e(IS,iKe),e(ws,dKe),e(ws,qS),e(qS,cKe),e(ws,fKe),e(E,mKe),e(E,Zg),e(Zg,KZ),e(KZ,gKe),e(Zg,hKe),e(Zg,NS),e(NS,pKe),e(Zg,_Ke),e(E,uKe),e(E,eh),e(eh,ZZ),e(ZZ,bKe),e(eh,FKe),e(eh,jS),e(jS,vKe),e(eh,TKe),e(E,MKe),e(E,oh),e(oh,eee),e(eee,EKe),e(oh,CKe),e(oh,DS),e(DS,wKe),e(oh,AKe),e(E,yKe),e(E,rh),e(rh,oee),e(oee,LKe),e(rh,xKe),e(rh,GS),e(GS,kKe),e(rh,SKe),e(E,RKe),e(E,As),e(As,ree),e(ree,BKe),e(As,PKe),e(As,OS),e(OS,$Ke),e(As,IKe),e(As,VS),e(VS,qKe),e(As,NKe),e(E,jKe),e(E,th),e(th,tee),e(tee,DKe),e(th,GKe),e(th,XS),e(XS,OKe),e(th,VKe),e(E,XKe),e(E,ys),e(ys,aee),e(aee,zKe),e(ys,QKe),e(ys,zS),e(zS,WKe),e(ys,HKe),e(ys,QS),e(QS,UKe),e(ys,JKe),e(E,YKe),e(E,Ls),e(Ls,nee),e(nee,KKe),e(Ls,ZKe),e(Ls,WS),e(WS,eZe),e(Ls,oZe),e(Ls,HS),e(HS,rZe),e(Ls,tZe),e(E,aZe),e(E,xs),e(xs,see),e(see,nZe),e(xs,sZe),e(xs,US),e(US,lZe),e(xs,iZe),e(xs,JS),e(JS,dZe),e(xs,cZe),e(E,fZe),e(E,ks),e(ks,lee),e(lee,mZe),e(ks,gZe),e(ks,YS),e(YS,hZe),e(ks,pZe),e(ks,KS),e(KS,_Ze),e(ks,uZe),e(E,bZe),e(E,Ss),e(Ss,iee),e(iee,FZe),e(Ss,vZe),e(Ss,ZS),e(ZS,TZe),e(Ss,MZe),e(Ss,eR),e(eR,EZe),e(Ss,CZe),e(E,wZe),e(E,Rs),e(Rs,dee),e(dee,AZe),e(Rs,yZe),e(Rs,oR),e(oR,LZe),e(Rs,xZe),e(Rs,rR),e(rR,kZe),e(Rs,SZe),e(E,RZe),e(E,ah),e(ah,cee),e(cee,BZe),e(ah,PZe),e(ah,tR),e(tR,$Ze),e(ah,IZe),e(E,qZe),e(E,nh),e(nh,fee),e(fee,NZe),e(nh,jZe),e(nh,aR),e(aR,DZe),e(nh,GZe),e(E,OZe),e(E,Bs),e(Bs,mee),e(mee,VZe),e(Bs,XZe),e(Bs,nR),e(nR,zZe),e(Bs,QZe),e(Bs,sR),e(sR,WZe),e(Bs,HZe),e(E,UZe),e(E,Ps),e(Ps,gee),e(gee,JZe),e(Ps,YZe),e(Ps,lR),e(lR,KZe),e(Ps,ZZe),e(Ps,iR),e(iR,eeo),e(Ps,oeo),e(E,reo),e(E,$s),e($s,hee),e(hee,teo),e($s,aeo),e($s,dR),e(dR,neo),e($s,seo),e($s,cR),e(cR,leo),e($s,ieo),e(E,deo),e(E,sh),e(sh,pee),e(pee,ceo),e(sh,feo),e(sh,fR),e(fR,meo),e(sh,geo),e(E,heo),e(E,lh),e(lh,_ee),e(_ee,peo),e(lh,_eo),e(lh,mR),e(mR,ueo),e(lh,beo),e(E,Feo),e(E,ih),e(ih,uee),e(uee,veo),e(ih,Teo),e(ih,gR),e(gR,Meo),e(ih,Eeo),e(E,Ceo),e(E,dh),e(dh,bee),e(bee,weo),e(dh,Aeo),e(dh,hR),e(hR,yeo),e(dh,Leo),e(E,xeo),e(E,ch),e(ch,Fee),e(Fee,keo),e(ch,Seo),e(ch,pR),e(pR,Reo),e(ch,Beo),e(E,Peo),e(E,Is),e(Is,vee),e(vee,$eo),e(Is,Ieo),e(Is,_R),e(_R,qeo),e(Is,Neo),e(Is,uR),e(uR,jeo),e(Is,Deo),e(E,Geo),e(E,fh),e(fh,Tee),e(Tee,Oeo),e(fh,Veo),e(fh,bR),e(bR,Xeo),e(fh,zeo),e(E,Qeo),e(E,mh),e(mh,Mee),e(Mee,Weo),e(mh,Heo),e(mh,FR),e(FR,Ueo),e(mh,Jeo),e(E,Yeo),e(E,qs),e(qs,Eee),e(Eee,Keo),e(qs,Zeo),e(qs,vR),e(vR,eoo),e(qs,ooo),e(qs,TR),e(TR,roo),e(qs,too),e(E,aoo),e(E,Ns),e(Ns,Cee),e(Cee,noo),e(Ns,soo),e(Ns,MR),e(MR,loo),e(Ns,ioo),e(Ns,ER),e(ER,doo),e(Ns,coo),e(go,foo),e(go,wee),e(wee,moo),e(go,goo),g(IC,go,null),e(Wo,hoo),e(Wo,gh),g(qC,gh,null),e(gh,poo),e(gh,Aee),e(Aee,_oo),b(c,aRe,u),b(c,Wi,u),e(Wi,hh),e(hh,yee),g(NC,yee,null),e(Wi,uoo),e(Wi,Lee),e(Lee,boo),b(c,nRe,u),b(c,Ho,u),g(jC,Ho,null),e(Ho,Foo),e(Ho,DC),e(DC,voo),e(DC,CR),e(CR,Too),e(DC,Moo),e(Ho,Eoo),e(Ho,GC),e(GC,Coo),e(GC,xee),e(xee,woo),e(GC,Aoo),e(Ho,yoo),e(Ho,$e),g(OC,$e,null),e($e,Loo),e($e,kee),e(kee,xoo),e($e,koo),e($e,Va),e(Va,Soo),e(Va,See),e(See,Roo),e(Va,Boo),e(Va,Ree),e(Ree,Poo),e(Va,$oo),e(Va,Bee),e(Bee,Ioo),e(Va,qoo),e($e,Noo),e($e,te),e(te,ph),e(ph,Pee),e(Pee,joo),e(ph,Doo),e(ph,wR),e(wR,Goo),e(ph,Ooo),e(te,Voo),e(te,_h),e(_h,$ee),e($ee,Xoo),e(_h,zoo),e(_h,AR),e(AR,Qoo),e(_h,Woo),e(te,Hoo),e(te,uh),e(uh,Iee),e(Iee,Uoo),e(uh,Joo),e(uh,yR),e(yR,Yoo),e(uh,Koo),e(te,Zoo),e(te,bh),e(bh,qee),e(qee,ero),e(bh,oro),e(bh,LR),e(LR,rro),e(bh,tro),e(te,aro),e(te,Fh),e(Fh,Nee),e(Nee,nro),e(Fh,sro),e(Fh,xR),e(xR,lro),e(Fh,iro),e(te,dro),e(te,vh),e(vh,jee),e(jee,cro),e(vh,fro),e(vh,kR),e(kR,mro),e(vh,gro),e(te,hro),e(te,Th),e(Th,Dee),e(Dee,pro),e(Th,_ro),e(Th,SR),e(SR,uro),e(Th,bro),e(te,Fro),e(te,Mh),e(Mh,Gee),e(Gee,vro),e(Mh,Tro),e(Mh,RR),e(RR,Mro),e(Mh,Ero),e(te,Cro),e(te,Eh),e(Eh,Oee),e(Oee,wro),e(Eh,Aro),e(Eh,BR),e(BR,yro),e(Eh,Lro),e(te,xro),e(te,Ch),e(Ch,Vee),e(Vee,kro),e(Ch,Sro),e(Ch,PR),e(PR,Rro),e(Ch,Bro),e(te,Pro),e(te,wh),e(wh,Xee),e(Xee,$ro),e(wh,Iro),e(wh,$R),e($R,qro),e(wh,Nro),e(te,jro),e(te,Ah),e(Ah,zee),e(zee,Dro),e(Ah,Gro),e(Ah,IR),e(IR,Oro),e(Ah,Vro),e(te,Xro),e(te,yh),e(yh,Qee),e(Qee,zro),e(yh,Qro),e(yh,qR),e(qR,Wro),e(yh,Hro),e(te,Uro),e(te,Lh),e(Lh,Wee),e(Wee,Jro),e(Lh,Yro),e(Lh,NR),e(NR,Kro),e(Lh,Zro),e(te,eto),e(te,xh),e(xh,Hee),e(Hee,oto),e(xh,rto),e(xh,jR),e(jR,tto),e(xh,ato),e(te,nto),e(te,kh),e(kh,Uee),e(Uee,sto),e(kh,lto),e(kh,DR),e(DR,ito),e(kh,dto),e(te,cto),e(te,Sh),e(Sh,Jee),e(Jee,fto),e(Sh,mto),e(Sh,GR),e(GR,gto),e(Sh,hto),e(te,pto),e(te,Rh),e(Rh,Yee),e(Yee,_to),e(Rh,uto),e(Rh,OR),e(OR,bto),e(Rh,Fto),e($e,vto),g(Bh,$e,null),e($e,Tto),e($e,Kee),e(Kee,Mto),e($e,Eto),g(VC,$e,null),e(Ho,Cto),e(Ho,Ph),g(XC,Ph,null),e(Ph,wto),e(Ph,Zee),e(Zee,Ato),b(c,sRe,u),b(c,Hi,u),e(Hi,$h),e($h,eoe),g(zC,eoe,null),e(Hi,yto),e(Hi,ooe),e(ooe,Lto),b(c,lRe,u),b(c,Uo,u),g(QC,Uo,null),e(Uo,xto),e(Uo,WC),e(WC,kto),e(WC,VR),e(VR,Sto),e(WC,Rto),e(Uo,Bto),e(Uo,HC),e(HC,Pto),e(HC,roe),e(roe,$to),e(HC,Ito),e(Uo,qto),e(Uo,Ie),g(UC,Ie,null),e(Ie,Nto),e(Ie,toe),e(toe,jto),e(Ie,Dto),e(Ie,Ui),e(Ui,Gto),e(Ui,aoe),e(aoe,Oto),e(Ui,Vto),e(Ui,noe),e(noe,Xto),e(Ui,zto),e(Ie,Qto),e(Ie,ke),e(ke,Ih),e(Ih,soe),e(soe,Wto),e(Ih,Hto),e(Ih,XR),e(XR,Uto),e(Ih,Jto),e(ke,Yto),e(ke,qh),e(qh,loe),e(loe,Kto),e(qh,Zto),e(qh,zR),e(zR,eao),e(qh,oao),e(ke,rao),e(ke,Nh),e(Nh,ioe),e(ioe,tao),e(Nh,aao),e(Nh,QR),e(QR,nao),e(Nh,sao),e(ke,lao),e(ke,jh),e(jh,doe),e(doe,iao),e(jh,dao),e(jh,WR),e(WR,cao),e(jh,fao),e(ke,mao),e(ke,Dh),e(Dh,coe),e(coe,gao),e(Dh,hao),e(Dh,HR),e(HR,pao),e(Dh,_ao),e(ke,uao),e(ke,Gh),e(Gh,foe),e(foe,bao),e(Gh,Fao),e(Gh,UR),e(UR,vao),e(Gh,Tao),e(ke,Mao),e(ke,Oh),e(Oh,moe),e(moe,Eao),e(Oh,Cao),e(Oh,JR),e(JR,wao),e(Oh,Aao),e(ke,yao),e(ke,Vh),e(Vh,goe),e(goe,Lao),e(Vh,xao),e(Vh,YR),e(YR,kao),e(Vh,Sao),e(Ie,Rao),g(Xh,Ie,null),e(Ie,Bao),e(Ie,hoe),e(hoe,Pao),e(Ie,$ao),g(JC,Ie,null),e(Uo,Iao),e(Uo,zh),g(YC,zh,null),e(zh,qao),e(zh,poe),e(poe,Nao),b(c,iRe,u),b(c,Ji,u),e(Ji,Qh),e(Qh,_oe),g(KC,_oe,null),e(Ji,jao),e(Ji,uoe),e(uoe,Dao),b(c,dRe,u),b(c,Jo,u),g(ZC,Jo,null),e(Jo,Gao),e(Jo,Yi),e(Yi,Oao),e(Yi,KR),e(KR,Vao),e(Yi,Xao),e(Yi,ZR),e(ZR,zao),e(Yi,Qao),e(Jo,Wao),e(Jo,e5),e(e5,Hao),e(e5,boe),e(boe,Uao),e(e5,Jao),e(Jo,Yao),e(Jo,Xr),g(o5,Xr,null),e(Xr,Kao),e(Xr,Foe),e(Foe,Zao),e(Xr,eno),e(Xr,Ki),e(Ki,ono),e(Ki,voe),e(voe,rno),e(Ki,tno),e(Ki,eB),e(eB,ano),e(Ki,nno),e(Xr,sno),e(Xr,Toe),e(Toe,lno),e(Xr,ino),g(r5,Xr,null),e(Jo,dno),e(Jo,qe),g(t5,qe,null),e(qe,cno),e(qe,Moe),e(Moe,fno),e(qe,mno),e(qe,Xa),e(Xa,gno),e(Xa,Eoe),e(Eoe,hno),e(Xa,pno),e(Xa,Coe),e(Coe,_no),e(Xa,uno),e(Xa,woe),e(woe,bno),e(Xa,Fno),e(qe,vno),e(qe,T),e(T,Wh),e(Wh,Aoe),e(Aoe,Tno),e(Wh,Mno),e(Wh,oB),e(oB,Eno),e(Wh,Cno),e(T,wno),e(T,Hh),e(Hh,yoe),e(yoe,Ano),e(Hh,yno),e(Hh,rB),e(rB,Lno),e(Hh,xno),e(T,kno),e(T,Uh),e(Uh,Loe),e(Loe,Sno),e(Uh,Rno),e(Uh,tB),e(tB,Bno),e(Uh,Pno),e(T,$no),e(T,Jh),e(Jh,xoe),e(xoe,Ino),e(Jh,qno),e(Jh,aB),e(aB,Nno),e(Jh,jno),e(T,Dno),e(T,Yh),e(Yh,koe),e(koe,Gno),e(Yh,Ono),e(Yh,nB),e(nB,Vno),e(Yh,Xno),e(T,zno),e(T,Kh),e(Kh,Soe),e(Soe,Qno),e(Kh,Wno),e(Kh,sB),e(sB,Hno),e(Kh,Uno),e(T,Jno),e(T,Zh),e(Zh,Roe),e(Roe,Yno),e(Zh,Kno),e(Zh,lB),e(lB,Zno),e(Zh,eso),e(T,oso),e(T,ep),e(ep,Boe),e(Boe,rso),e(ep,tso),e(ep,iB),e(iB,aso),e(ep,nso),e(T,sso),e(T,op),e(op,Poe),e(Poe,lso),e(op,iso),e(op,dB),e(dB,dso),e(op,cso),e(T,fso),e(T,rp),e(rp,$oe),e($oe,mso),e(rp,gso),e(rp,cB),e(cB,hso),e(rp,pso),e(T,_so),e(T,tp),e(tp,Ioe),e(Ioe,uso),e(tp,bso),e(tp,fB),e(fB,Fso),e(tp,vso),e(T,Tso),e(T,ap),e(ap,qoe),e(qoe,Mso),e(ap,Eso),e(ap,mB),e(mB,Cso),e(ap,wso),e(T,Aso),e(T,np),e(np,Noe),e(Noe,yso),e(np,Lso),e(np,gB),e(gB,xso),e(np,kso),e(T,Sso),e(T,sp),e(sp,joe),e(joe,Rso),e(sp,Bso),e(sp,hB),e(hB,Pso),e(sp,$so),e(T,Iso),e(T,lp),e(lp,Doe),e(Doe,qso),e(lp,Nso),e(lp,pB),e(pB,jso),e(lp,Dso),e(T,Gso),e(T,ip),e(ip,Goe),e(Goe,Oso),e(ip,Vso),e(ip,_B),e(_B,Xso),e(ip,zso),e(T,Qso),e(T,dp),e(dp,Ooe),e(Ooe,Wso),e(dp,Hso),e(dp,uB),e(uB,Uso),e(dp,Jso),e(T,Yso),e(T,cp),e(cp,Voe),e(Voe,Kso),e(cp,Zso),e(cp,bB),e(bB,elo),e(cp,olo),e(T,rlo),e(T,fp),e(fp,Xoe),e(Xoe,tlo),e(fp,alo),e(fp,FB),e(FB,nlo),e(fp,slo),e(T,llo),e(T,mp),e(mp,zoe),e(zoe,ilo),e(mp,dlo),e(mp,vB),e(vB,clo),e(mp,flo),e(T,mlo),e(T,gp),e(gp,Qoe),e(Qoe,glo),e(gp,hlo),e(gp,TB),e(TB,plo),e(gp,_lo),e(T,ulo),e(T,hp),e(hp,Woe),e(Woe,blo),e(hp,Flo),e(hp,MB),e(MB,vlo),e(hp,Tlo),e(T,Mlo),e(T,pp),e(pp,Hoe),e(Hoe,Elo),e(pp,Clo),e(pp,EB),e(EB,wlo),e(pp,Alo),e(T,ylo),e(T,_p),e(_p,Uoe),e(Uoe,Llo),e(_p,xlo),e(_p,CB),e(CB,klo),e(_p,Slo),e(T,Rlo),e(T,up),e(up,Joe),e(Joe,Blo),e(up,Plo),e(up,wB),e(wB,$lo),e(up,Ilo),e(T,qlo),e(T,bp),e(bp,Yoe),e(Yoe,Nlo),e(bp,jlo),e(bp,AB),e(AB,Dlo),e(bp,Glo),e(T,Olo),e(T,Fp),e(Fp,Koe),e(Koe,Vlo),e(Fp,Xlo),e(Fp,yB),e(yB,zlo),e(Fp,Qlo),e(T,Wlo),e(T,vp),e(vp,Zoe),e(Zoe,Hlo),e(vp,Ulo),e(vp,LB),e(LB,Jlo),e(vp,Ylo),e(T,Klo),e(T,Tp),e(Tp,ere),e(ere,Zlo),e(Tp,eio),e(Tp,xB),e(xB,oio),e(Tp,rio),e(T,tio),e(T,js),e(js,ore),e(ore,aio),e(js,nio),e(js,kB),e(kB,sio),e(js,lio),e(js,SB),e(SB,iio),e(js,dio),e(T,cio),e(T,Mp),e(Mp,rre),e(rre,fio),e(Mp,mio),e(Mp,RB),e(RB,gio),e(Mp,hio),e(T,pio),e(T,Ep),e(Ep,tre),e(tre,_io),e(Ep,uio),e(Ep,BB),e(BB,bio),e(Ep,Fio),e(T,vio),e(T,Cp),e(Cp,are),e(are,Tio),e(Cp,Mio),e(Cp,PB),e(PB,Eio),e(Cp,Cio),e(T,wio),e(T,wp),e(wp,nre),e(nre,Aio),e(wp,yio),e(wp,$B),e($B,Lio),e(wp,xio),e(T,kio),e(T,Ap),e(Ap,sre),e(sre,Sio),e(Ap,Rio),e(Ap,IB),e(IB,Bio),e(Ap,Pio),e(T,$io),e(T,yp),e(yp,lre),e(lre,Iio),e(yp,qio),e(yp,qB),e(qB,Nio),e(yp,jio),e(T,Dio),e(T,Lp),e(Lp,ire),e(ire,Gio),e(Lp,Oio),e(Lp,NB),e(NB,Vio),e(Lp,Xio),e(T,zio),e(T,xp),e(xp,dre),e(dre,Qio),e(xp,Wio),e(xp,jB),e(jB,Hio),e(xp,Uio),e(T,Jio),e(T,kp),e(kp,cre),e(cre,Yio),e(kp,Kio),e(kp,DB),e(DB,Zio),e(kp,edo),e(T,odo),e(T,Sp),e(Sp,fre),e(fre,rdo),e(Sp,tdo),e(Sp,GB),e(GB,ado),e(Sp,ndo),e(T,sdo),e(T,Rp),e(Rp,mre),e(mre,ldo),e(Rp,ido),e(Rp,OB),e(OB,ddo),e(Rp,cdo),e(T,fdo),e(T,Bp),e(Bp,gre),e(gre,mdo),e(Bp,gdo),e(Bp,VB),e(VB,hdo),e(Bp,pdo),e(T,_do),e(T,Pp),e(Pp,hre),e(hre,udo),e(Pp,bdo),e(Pp,XB),e(XB,Fdo),e(Pp,vdo),e(T,Tdo),e(T,$p),e($p,pre),e(pre,Mdo),e($p,Edo),e($p,zB),e(zB,Cdo),e($p,wdo),e(T,Ado),e(T,Ip),e(Ip,_re),e(_re,ydo),e(Ip,Ldo),e(Ip,QB),e(QB,xdo),e(Ip,kdo),e(T,Sdo),e(T,qp),e(qp,ure),e(ure,Rdo),e(qp,Bdo),e(qp,WB),e(WB,Pdo),e(qp,$do),e(T,Ido),e(T,Np),e(Np,bre),e(bre,qdo),e(Np,Ndo),e(Np,HB),e(HB,jdo),e(Np,Ddo),e(T,Gdo),e(T,jp),e(jp,Fre),e(Fre,Odo),e(jp,Vdo),e(jp,UB),e(UB,Xdo),e(jp,zdo),e(T,Qdo),e(T,Dp),e(Dp,vre),e(vre,Wdo),e(Dp,Hdo),e(Dp,JB),e(JB,Udo),e(Dp,Jdo),e(T,Ydo),e(T,Gp),e(Gp,Tre),e(Tre,Kdo),e(Gp,Zdo),e(Gp,YB),e(YB,eco),e(Gp,oco),e(T,rco),e(T,Op),e(Op,Mre),e(Mre,tco),e(Op,aco),e(Op,KB),e(KB,nco),e(Op,sco),e(T,lco),e(T,Vp),e(Vp,Ere),e(Ere,ico),e(Vp,dco),e(Vp,ZB),e(ZB,cco),e(Vp,fco),e(T,mco),e(T,Xp),e(Xp,Cre),e(Cre,gco),e(Xp,hco),e(Xp,eP),e(eP,pco),e(Xp,_co),e(T,uco),e(T,zp),e(zp,wre),e(wre,bco),e(zp,Fco),e(zp,oP),e(oP,vco),e(zp,Tco),e(T,Mco),e(T,Qp),e(Qp,Are),e(Are,Eco),e(Qp,Cco),e(Qp,rP),e(rP,wco),e(Qp,Aco),e(T,yco),e(T,Wp),e(Wp,yre),e(yre,Lco),e(Wp,xco),e(Wp,tP),e(tP,kco),e(Wp,Sco),e(T,Rco),e(T,Hp),e(Hp,Lre),e(Lre,Bco),e(Hp,Pco),e(Hp,aP),e(aP,$co),e(Hp,Ico),e(T,qco),e(T,Up),e(Up,xre),e(xre,Nco),e(Up,jco),e(Up,nP),e(nP,Dco),e(Up,Gco),e(T,Oco),e(T,Jp),e(Jp,kre),e(kre,Vco),e(Jp,Xco),e(Jp,sP),e(sP,zco),e(Jp,Qco),e(T,Wco),e(T,Yp),e(Yp,Sre),e(Sre,Hco),e(Yp,Uco),e(Yp,lP),e(lP,Jco),e(Yp,Yco),e(T,Kco),e(T,Kp),e(Kp,Rre),e(Rre,Zco),e(Kp,efo),e(Kp,iP),e(iP,ofo),e(Kp,rfo),e(T,tfo),e(T,Zp),e(Zp,Bre),e(Bre,afo),e(Zp,nfo),e(Zp,dP),e(dP,sfo),e(Zp,lfo),e(T,ifo),e(T,e_),e(e_,Pre),e(Pre,dfo),e(e_,cfo),e(e_,cP),e(cP,ffo),e(e_,mfo),e(T,gfo),e(T,o_),e(o_,$re),e($re,hfo),e(o_,pfo),e(o_,fP),e(fP,_fo),e(o_,ufo),e(T,bfo),e(T,r_),e(r_,Ire),e(Ire,Ffo),e(r_,vfo),e(r_,mP),e(mP,Tfo),e(r_,Mfo),e(T,Efo),e(T,t_),e(t_,qre),e(qre,Cfo),e(t_,wfo),e(t_,gP),e(gP,Afo),e(t_,yfo),e(T,Lfo),e(T,a_),e(a_,Nre),e(Nre,xfo),e(a_,kfo),e(a_,hP),e(hP,Sfo),e(a_,Rfo),e(T,Bfo),e(T,n_),e(n_,jre),e(jre,Pfo),e(n_,$fo),e(n_,pP),e(pP,Ifo),e(n_,qfo),e(T,Nfo),e(T,s_),e(s_,Dre),e(Dre,jfo),e(s_,Dfo),e(s_,_P),e(_P,Gfo),e(s_,Ofo),e(T,Vfo),e(T,l_),e(l_,Gre),e(Gre,Xfo),e(l_,zfo),e(l_,uP),e(uP,Qfo),e(l_,Wfo),e(T,Hfo),e(T,i_),e(i_,Ore),e(Ore,Ufo),e(i_,Jfo),e(i_,bP),e(bP,Yfo),e(i_,Kfo),e(T,Zfo),e(T,d_),e(d_,Vre),e(Vre,emo),e(d_,omo),e(d_,FP),e(FP,rmo),e(d_,tmo),e(T,amo),e(T,c_),e(c_,Xre),e(Xre,nmo),e(c_,smo),e(c_,vP),e(vP,lmo),e(c_,imo),e(T,dmo),e(T,f_),e(f_,zre),e(zre,cmo),e(f_,fmo),e(f_,TP),e(TP,mmo),e(f_,gmo),e(T,hmo),e(T,m_),e(m_,Qre),e(Qre,pmo),e(m_,_mo),e(m_,MP),e(MP,umo),e(m_,bmo),e(T,Fmo),e(T,g_),e(g_,Wre),e(Wre,vmo),e(g_,Tmo),e(g_,EP),e(EP,Mmo),e(g_,Emo),e(T,Cmo),e(T,h_),e(h_,Hre),e(Hre,wmo),e(h_,Amo),e(h_,CP),e(CP,ymo),e(h_,Lmo),e(T,xmo),e(T,p_),e(p_,Ure),e(Ure,kmo),e(p_,Smo),e(p_,wP),e(wP,Rmo),e(p_,Bmo),e(T,Pmo),e(T,__),e(__,Jre),e(Jre,$mo),e(__,Imo),e(__,AP),e(AP,qmo),e(__,Nmo),e(T,jmo),e(T,u_),e(u_,Yre),e(Yre,Dmo),e(u_,Gmo),e(u_,yP),e(yP,Omo),e(u_,Vmo),e(T,Xmo),e(T,b_),e(b_,Kre),e(Kre,zmo),e(b_,Qmo),e(b_,LP),e(LP,Wmo),e(b_,Hmo),e(T,Umo),e(T,F_),e(F_,Zre),e(Zre,Jmo),e(F_,Ymo),e(F_,xP),e(xP,Kmo),e(F_,Zmo),e(T,ego),e(T,v_),e(v_,ete),e(ete,ogo),e(v_,rgo),e(v_,kP),e(kP,tgo),e(v_,ago),e(T,ngo),e(T,T_),e(T_,ote),e(ote,sgo),e(T_,lgo),e(T_,SP),e(SP,igo),e(T_,dgo),e(T,cgo),e(T,M_),e(M_,rte),e(rte,fgo),e(M_,mgo),e(M_,RP),e(RP,ggo),e(M_,hgo),e(T,pgo),e(T,E_),e(E_,tte),e(tte,_go),e(E_,ugo),e(E_,BP),e(BP,bgo),e(E_,Fgo),e(T,vgo),e(T,C_),e(C_,ate),e(ate,Tgo),e(C_,Mgo),e(C_,PP),e(PP,Ego),e(C_,Cgo),e(T,wgo),e(T,w_),e(w_,nte),e(nte,Ago),e(w_,ygo),e(w_,$P),e($P,Lgo),e(w_,xgo),e(T,kgo),e(T,A_),e(A_,ste),e(ste,Sgo),e(A_,Rgo),e(A_,IP),e(IP,Bgo),e(A_,Pgo),e(T,$go),e(T,y_),e(y_,lte),e(lte,Igo),e(y_,qgo),e(y_,qP),e(qP,Ngo),e(y_,jgo),e(T,Dgo),e(T,L_),e(L_,ite),e(ite,Ggo),e(L_,Ogo),e(L_,NP),e(NP,Vgo),e(L_,Xgo),e(T,zgo),e(T,x_),e(x_,dte),e(dte,Qgo),e(x_,Wgo),e(x_,jP),e(jP,Hgo),e(x_,Ugo),e(qe,Jgo),e(qe,k_),e(k_,Ygo),e(k_,cte),e(cte,Kgo),e(k_,Zgo),e(k_,fte),e(fte,eho),e(qe,oho),e(qe,mte),e(mte,rho),e(qe,tho),g(a5,qe,null),b(c,cRe,u),b(c,Zi,u),e(Zi,S_),e(S_,gte),g(n5,gte,null),e(Zi,aho),e(Zi,hte),e(hte,nho),b(c,fRe,u),b(c,Yo,u),g(s5,Yo,null),e(Yo,sho),e(Yo,ed),e(ed,lho),e(ed,DP),e(DP,iho),e(ed,dho),e(ed,GP),e(GP,cho),e(ed,fho),e(Yo,mho),e(Yo,l5),e(l5,gho),e(l5,pte),e(pte,hho),e(l5,pho),e(Yo,_ho),e(Yo,zr),g(i5,zr,null),e(zr,uho),e(zr,_te),e(_te,bho),e(zr,Fho),e(zr,od),e(od,vho),e(od,ute),e(ute,Tho),e(od,Mho),e(od,OP),e(OP,Eho),e(od,Cho),e(zr,who),e(zr,bte),e(bte,Aho),e(zr,yho),g(d5,zr,null),e(Yo,Lho),e(Yo,Ne),g(c5,Ne,null),e(Ne,xho),e(Ne,Fte),e(Fte,kho),e(Ne,Sho),e(Ne,za),e(za,Rho),e(za,vte),e(vte,Bho),e(za,Pho),e(za,Tte),e(Tte,$ho),e(za,Iho),e(za,Mte),e(Mte,qho),e(za,Nho),e(Ne,jho),e(Ne,S),e(S,R_),e(R_,Ete),e(Ete,Dho),e(R_,Gho),e(R_,VP),e(VP,Oho),e(R_,Vho),e(S,Xho),e(S,B_),e(B_,Cte),e(Cte,zho),e(B_,Qho),e(B_,XP),e(XP,Who),e(B_,Hho),e(S,Uho),e(S,P_),e(P_,wte),e(wte,Jho),e(P_,Yho),e(P_,zP),e(zP,Kho),e(P_,Zho),e(S,epo),e(S,$_),e($_,Ate),e(Ate,opo),e($_,rpo),e($_,QP),e(QP,tpo),e($_,apo),e(S,npo),e(S,I_),e(I_,yte),e(yte,spo),e(I_,lpo),e(I_,WP),e(WP,ipo),e(I_,dpo),e(S,cpo),e(S,q_),e(q_,Lte),e(Lte,fpo),e(q_,mpo),e(q_,HP),e(HP,gpo),e(q_,hpo),e(S,ppo),e(S,N_),e(N_,xte),e(xte,_po),e(N_,upo),e(N_,UP),e(UP,bpo),e(N_,Fpo),e(S,vpo),e(S,j_),e(j_,kte),e(kte,Tpo),e(j_,Mpo),e(j_,JP),e(JP,Epo),e(j_,Cpo),e(S,wpo),e(S,D_),e(D_,Ste),e(Ste,Apo),e(D_,ypo),e(D_,YP),e(YP,Lpo),e(D_,xpo),e(S,kpo),e(S,G_),e(G_,Rte),e(Rte,Spo),e(G_,Rpo),e(G_,KP),e(KP,Bpo),e(G_,Ppo),e(S,$po),e(S,O_),e(O_,Bte),e(Bte,Ipo),e(O_,qpo),e(O_,ZP),e(ZP,Npo),e(O_,jpo),e(S,Dpo),e(S,V_),e(V_,Pte),e(Pte,Gpo),e(V_,Opo),e(V_,e$),e(e$,Vpo),e(V_,Xpo),e(S,zpo),e(S,X_),e(X_,$te),e($te,Qpo),e(X_,Wpo),e(X_,o$),e(o$,Hpo),e(X_,Upo),e(S,Jpo),e(S,z_),e(z_,Ite),e(Ite,Ypo),e(z_,Kpo),e(z_,r$),e(r$,Zpo),e(z_,e_o),e(S,o_o),e(S,Q_),e(Q_,qte),e(qte,r_o),e(Q_,t_o),e(Q_,t$),e(t$,a_o),e(Q_,n_o),e(S,s_o),e(S,W_),e(W_,Nte),e(Nte,l_o),e(W_,i_o),e(W_,a$),e(a$,d_o),e(W_,c_o),e(S,f_o),e(S,H_),e(H_,jte),e(jte,m_o),e(H_,g_o),e(H_,n$),e(n$,h_o),e(H_,p_o),e(S,__o),e(S,U_),e(U_,Dte),e(Dte,u_o),e(U_,b_o),e(U_,s$),e(s$,F_o),e(U_,v_o),e(S,T_o),e(S,J_),e(J_,Gte),e(Gte,M_o),e(J_,E_o),e(J_,l$),e(l$,C_o),e(J_,w_o),e(S,A_o),e(S,Y_),e(Y_,Ote),e(Ote,y_o),e(Y_,L_o),e(Y_,i$),e(i$,x_o),e(Y_,k_o),e(S,S_o),e(S,K_),e(K_,Vte),e(Vte,R_o),e(K_,B_o),e(K_,d$),e(d$,P_o),e(K_,$_o),e(S,I_o),e(S,Z_),e(Z_,Xte),e(Xte,q_o),e(Z_,N_o),e(Z_,c$),e(c$,j_o),e(Z_,D_o),e(S,G_o),e(S,eu),e(eu,zte),e(zte,O_o),e(eu,V_o),e(eu,f$),e(f$,X_o),e(eu,z_o),e(S,Q_o),e(S,ou),e(ou,Qte),e(Qte,W_o),e(ou,H_o),e(ou,m$),e(m$,U_o),e(ou,J_o),e(S,Y_o),e(S,ru),e(ru,Wte),e(Wte,K_o),e(ru,Z_o),e(ru,g$),e(g$,euo),e(ru,ouo),e(S,ruo),e(S,tu),e(tu,Hte),e(Hte,tuo),e(tu,auo),e(tu,h$),e(h$,nuo),e(tu,suo),e(S,luo),e(S,au),e(au,Ute),e(Ute,iuo),e(au,duo),e(au,p$),e(p$,cuo),e(au,fuo),e(S,muo),e(S,nu),e(nu,Jte),e(Jte,guo),e(nu,huo),e(nu,_$),e(_$,puo),e(nu,_uo),e(S,uuo),e(S,su),e(su,Yte),e(Yte,buo),e(su,Fuo),e(su,u$),e(u$,vuo),e(su,Tuo),e(S,Muo),e(S,lu),e(lu,Kte),e(Kte,Euo),e(lu,Cuo),e(lu,b$),e(b$,wuo),e(lu,Auo),e(S,yuo),e(S,iu),e(iu,Zte),e(Zte,Luo),e(iu,xuo),e(iu,F$),e(F$,kuo),e(iu,Suo),e(S,Ruo),e(S,du),e(du,eae),e(eae,Buo),e(du,Puo),e(du,v$),e(v$,$uo),e(du,Iuo),e(S,quo),e(S,cu),e(cu,oae),e(oae,Nuo),e(cu,juo),e(cu,T$),e(T$,Duo),e(cu,Guo),e(S,Ouo),e(S,fu),e(fu,rae),e(rae,Vuo),e(fu,Xuo),e(fu,M$),e(M$,zuo),e(fu,Quo),e(S,Wuo),e(S,mu),e(mu,tae),e(tae,Huo),e(mu,Uuo),e(mu,E$),e(E$,Juo),e(mu,Yuo),e(S,Kuo),e(S,gu),e(gu,aae),e(aae,Zuo),e(gu,e1o),e(gu,C$),e(C$,o1o),e(gu,r1o),e(S,t1o),e(S,hu),e(hu,nae),e(nae,a1o),e(hu,n1o),e(hu,w$),e(w$,s1o),e(hu,l1o),e(S,i1o),e(S,pu),e(pu,sae),e(sae,d1o),e(pu,c1o),e(pu,A$),e(A$,f1o),e(pu,m1o),e(S,g1o),e(S,_u),e(_u,lae),e(lae,h1o),e(_u,p1o),e(_u,y$),e(y$,_1o),e(_u,u1o),e(Ne,b1o),e(Ne,uu),e(uu,F1o),e(uu,iae),e(iae,v1o),e(uu,T1o),e(uu,dae),e(dae,M1o),e(Ne,E1o),e(Ne,cae),e(cae,C1o),e(Ne,w1o),g(f5,Ne,null),b(c,mRe,u),b(c,rd,u),e(rd,bu),e(bu,fae),g(m5,fae,null),e(rd,A1o),e(rd,mae),e(mae,y1o),b(c,gRe,u),b(c,Ko,u),g(g5,Ko,null),e(Ko,L1o),e(Ko,td),e(td,x1o),e(td,L$),e(L$,k1o),e(td,S1o),e(td,x$),e(x$,R1o),e(td,B1o),e(Ko,P1o),e(Ko,h5),e(h5,$1o),e(h5,gae),e(gae,I1o),e(h5,q1o),e(Ko,N1o),e(Ko,Qr),g(p5,Qr,null),e(Qr,j1o),e(Qr,hae),e(hae,D1o),e(Qr,G1o),e(Qr,ad),e(ad,O1o),e(ad,pae),e(pae,V1o),e(ad,X1o),e(ad,k$),e(k$,z1o),e(ad,Q1o),e(Qr,W1o),e(Qr,_ae),e(_ae,H1o),e(Qr,U1o),g(_5,Qr,null),e(Ko,J1o),e(Ko,je),g(u5,je,null),e(je,Y1o),e(je,uae),e(uae,K1o),e(je,Z1o),e(je,Qa),e(Qa,e4o),e(Qa,bae),e(bae,o4o),e(Qa,r4o),e(Qa,Fae),e(Fae,t4o),e(Qa,a4o),e(Qa,vae),e(vae,n4o),e(Qa,s4o),e(je,l4o),e(je,$),e($,Fu),e(Fu,Tae),e(Tae,i4o),e(Fu,d4o),e(Fu,S$),e(S$,c4o),e(Fu,f4o),e($,m4o),e($,vu),e(vu,Mae),e(Mae,g4o),e(vu,h4o),e(vu,R$),e(R$,p4o),e(vu,_4o),e($,u4o),e($,Tu),e(Tu,Eae),e(Eae,b4o),e(Tu,F4o),e(Tu,B$),e(B$,v4o),e(Tu,T4o),e($,M4o),e($,Mu),e(Mu,Cae),e(Cae,E4o),e(Mu,C4o),e(Mu,P$),e(P$,w4o),e(Mu,A4o),e($,y4o),e($,Eu),e(Eu,wae),e(wae,L4o),e(Eu,x4o),e(Eu,$$),e($$,k4o),e(Eu,S4o),e($,R4o),e($,Cu),e(Cu,Aae),e(Aae,B4o),e(Cu,P4o),e(Cu,I$),e(I$,$4o),e(Cu,I4o),e($,q4o),e($,wu),e(wu,yae),e(yae,N4o),e(wu,j4o),e(wu,q$),e(q$,D4o),e(wu,G4o),e($,O4o),e($,Au),e(Au,Lae),e(Lae,V4o),e(Au,X4o),e(Au,N$),e(N$,z4o),e(Au,Q4o),e($,W4o),e($,yu),e(yu,xae),e(xae,H4o),e(yu,U4o),e(yu,j$),e(j$,J4o),e(yu,Y4o),e($,K4o),e($,Lu),e(Lu,kae),e(kae,Z4o),e(Lu,ebo),e(Lu,D$),e(D$,obo),e(Lu,rbo),e($,tbo),e($,xu),e(xu,Sae),e(Sae,abo),e(xu,nbo),e(xu,G$),e(G$,sbo),e(xu,lbo),e($,ibo),e($,ku),e(ku,Rae),e(Rae,dbo),e(ku,cbo),e(ku,O$),e(O$,fbo),e(ku,mbo),e($,gbo),e($,Su),e(Su,Bae),e(Bae,hbo),e(Su,pbo),e(Su,V$),e(V$,_bo),e(Su,ubo),e($,bbo),e($,Ru),e(Ru,Pae),e(Pae,Fbo),e(Ru,vbo),e(Ru,X$),e(X$,Tbo),e(Ru,Mbo),e($,Ebo),e($,Bu),e(Bu,$ae),e($ae,Cbo),e(Bu,wbo),e(Bu,z$),e(z$,Abo),e(Bu,ybo),e($,Lbo),e($,Pu),e(Pu,Iae),e(Iae,xbo),e(Pu,kbo),e(Pu,Q$),e(Q$,Sbo),e(Pu,Rbo),e($,Bbo),e($,$u),e($u,qae),e(qae,Pbo),e($u,$bo),e($u,W$),e(W$,Ibo),e($u,qbo),e($,Nbo),e($,Iu),e(Iu,Nae),e(Nae,jbo),e(Iu,Dbo),e(Iu,H$),e(H$,Gbo),e(Iu,Obo),e($,Vbo),e($,qu),e(qu,jae),e(jae,Xbo),e(qu,zbo),e(qu,U$),e(U$,Qbo),e(qu,Wbo),e($,Hbo),e($,Nu),e(Nu,Dae),e(Dae,Ubo),e(Nu,Jbo),e(Nu,J$),e(J$,Ybo),e(Nu,Kbo),e($,Zbo),e($,ju),e(ju,Gae),e(Gae,e3o),e(ju,o3o),e(ju,Y$),e(Y$,r3o),e(ju,t3o),e($,a3o),e($,Du),e(Du,Oae),e(Oae,n3o),e(Du,s3o),e(Du,K$),e(K$,l3o),e(Du,i3o),e($,d3o),e($,Gu),e(Gu,Vae),e(Vae,c3o),e(Gu,f3o),e(Gu,Z$),e(Z$,m3o),e(Gu,g3o),e($,h3o),e($,Ou),e(Ou,Xae),e(Xae,p3o),e(Ou,_3o),e(Ou,eI),e(eI,u3o),e(Ou,b3o),e($,F3o),e($,Vu),e(Vu,zae),e(zae,v3o),e(Vu,T3o),e(Vu,oI),e(oI,M3o),e(Vu,E3o),e($,C3o),e($,Xu),e(Xu,Qae),e(Qae,w3o),e(Xu,A3o),e(Xu,rI),e(rI,y3o),e(Xu,L3o),e($,x3o),e($,zu),e(zu,Wae),e(Wae,k3o),e(zu,S3o),e(zu,tI),e(tI,R3o),e(zu,B3o),e($,P3o),e($,Qu),e(Qu,Hae),e(Hae,$3o),e(Qu,I3o),e(Qu,aI),e(aI,q3o),e(Qu,N3o),e($,j3o),e($,Wu),e(Wu,Uae),e(Uae,D3o),e(Wu,G3o),e(Wu,nI),e(nI,O3o),e(Wu,V3o),e($,X3o),e($,Hu),e(Hu,Jae),e(Jae,z3o),e(Hu,Q3o),e(Hu,sI),e(sI,W3o),e(Hu,H3o),e($,U3o),e($,Uu),e(Uu,Yae),e(Yae,J3o),e(Uu,Y3o),e(Uu,lI),e(lI,K3o),e(Uu,Z3o),e($,e2o),e($,Ju),e(Ju,Kae),e(Kae,o2o),e(Ju,r2o),e(Ju,iI),e(iI,t2o),e(Ju,a2o),e($,n2o),e($,Yu),e(Yu,Zae),e(Zae,s2o),e(Yu,l2o),e(Yu,dI),e(dI,i2o),e(Yu,d2o),e($,c2o),e($,Ku),e(Ku,ene),e(ene,f2o),e(Ku,m2o),e(Ku,cI),e(cI,g2o),e(Ku,h2o),e($,p2o),e($,Zu),e(Zu,one),e(one,_2o),e(Zu,u2o),e(Zu,fI),e(fI,b2o),e(Zu,F2o),e(je,v2o),e(je,e1),e(e1,T2o),e(e1,rne),e(rne,M2o),e(e1,E2o),e(e1,tne),e(tne,C2o),e(je,w2o),e(je,ane),e(ane,A2o),e(je,y2o),g(b5,je,null),b(c,hRe,u),b(c,nd,u),e(nd,o1),e(o1,nne),g(F5,nne,null),e(nd,L2o),e(nd,sne),e(sne,x2o),b(c,pRe,u),b(c,Zo,u),g(v5,Zo,null),e(Zo,k2o),e(Zo,sd),e(sd,S2o),e(sd,mI),e(mI,R2o),e(sd,B2o),e(sd,gI),e(gI,P2o),e(sd,$2o),e(Zo,I2o),e(Zo,T5),e(T5,q2o),e(T5,lne),e(lne,N2o),e(T5,j2o),e(Zo,D2o),e(Zo,Wr),g(M5,Wr,null),e(Wr,G2o),e(Wr,ine),e(ine,O2o),e(Wr,V2o),e(Wr,ld),e(ld,X2o),e(ld,dne),e(dne,z2o),e(ld,Q2o),e(ld,hI),e(hI,W2o),e(ld,H2o),e(Wr,U2o),e(Wr,cne),e(cne,J2o),e(Wr,Y2o),g(E5,Wr,null),e(Zo,K2o),e(Zo,De),g(C5,De,null),e(De,Z2o),e(De,fne),e(fne,eFo),e(De,oFo),e(De,Wa),e(Wa,rFo),e(Wa,mne),e(mne,tFo),e(Wa,aFo),e(Wa,gne),e(gne,nFo),e(Wa,sFo),e(Wa,hne),e(hne,lFo),e(Wa,iFo),e(De,dFo),e(De,I),e(I,r1),e(r1,pne),e(pne,cFo),e(r1,fFo),e(r1,pI),e(pI,mFo),e(r1,gFo),e(I,hFo),e(I,t1),e(t1,_ne),e(_ne,pFo),e(t1,_Fo),e(t1,_I),e(_I,uFo),e(t1,bFo),e(I,FFo),e(I,a1),e(a1,une),e(une,vFo),e(a1,TFo),e(a1,uI),e(uI,MFo),e(a1,EFo),e(I,CFo),e(I,n1),e(n1,bne),e(bne,wFo),e(n1,AFo),e(n1,bI),e(bI,yFo),e(n1,LFo),e(I,xFo),e(I,s1),e(s1,Fne),e(Fne,kFo),e(s1,SFo),e(s1,FI),e(FI,RFo),e(s1,BFo),e(I,PFo),e(I,l1),e(l1,vne),e(vne,$Fo),e(l1,IFo),e(l1,vI),e(vI,qFo),e(l1,NFo),e(I,jFo),e(I,i1),e(i1,Tne),e(Tne,DFo),e(i1,GFo),e(i1,TI),e(TI,OFo),e(i1,VFo),e(I,XFo),e(I,d1),e(d1,Mne),e(Mne,zFo),e(d1,QFo),e(d1,MI),e(MI,WFo),e(d1,HFo),e(I,UFo),e(I,c1),e(c1,Ene),e(Ene,JFo),e(c1,YFo),e(c1,EI),e(EI,KFo),e(c1,ZFo),e(I,evo),e(I,f1),e(f1,Cne),e(Cne,ovo),e(f1,rvo),e(f1,CI),e(CI,tvo),e(f1,avo),e(I,nvo),e(I,m1),e(m1,wne),e(wne,svo),e(m1,lvo),e(m1,wI),e(wI,ivo),e(m1,dvo),e(I,cvo),e(I,g1),e(g1,Ane),e(Ane,fvo),e(g1,mvo),e(g1,AI),e(AI,gvo),e(g1,hvo),e(I,pvo),e(I,h1),e(h1,yne),e(yne,_vo),e(h1,uvo),e(h1,yI),e(yI,bvo),e(h1,Fvo),e(I,vvo),e(I,p1),e(p1,Lne),e(Lne,Tvo),e(p1,Mvo),e(p1,LI),e(LI,Evo),e(p1,Cvo),e(I,wvo),e(I,_1),e(_1,xne),e(xne,Avo),e(_1,yvo),e(_1,xI),e(xI,Lvo),e(_1,xvo),e(I,kvo),e(I,u1),e(u1,kne),e(kne,Svo),e(u1,Rvo),e(u1,kI),e(kI,Bvo),e(u1,Pvo),e(I,$vo),e(I,b1),e(b1,Sne),e(Sne,Ivo),e(b1,qvo),e(b1,SI),e(SI,Nvo),e(b1,jvo),e(I,Dvo),e(I,F1),e(F1,Rne),e(Rne,Gvo),e(F1,Ovo),e(F1,RI),e(RI,Vvo),e(F1,Xvo),e(I,zvo),e(I,v1),e(v1,Bne),e(Bne,Qvo),e(v1,Wvo),e(v1,BI),e(BI,Hvo),e(v1,Uvo),e(I,Jvo),e(I,T1),e(T1,Pne),e(Pne,Yvo),e(T1,Kvo),e(T1,PI),e(PI,Zvo),e(T1,e6o),e(I,o6o),e(I,M1),e(M1,$ne),e($ne,r6o),e(M1,t6o),e(M1,$I),e($I,a6o),e(M1,n6o),e(I,s6o),e(I,E1),e(E1,Ine),e(Ine,l6o),e(E1,i6o),e(E1,II),e(II,d6o),e(E1,c6o),e(I,f6o),e(I,C1),e(C1,qne),e(qne,m6o),e(C1,g6o),e(C1,qI),e(qI,h6o),e(C1,p6o),e(I,_6o),e(I,w1),e(w1,Nne),e(Nne,u6o),e(w1,b6o),e(w1,NI),e(NI,F6o),e(w1,v6o),e(I,T6o),e(I,A1),e(A1,jne),e(jne,M6o),e(A1,E6o),e(A1,jI),e(jI,C6o),e(A1,w6o),e(I,A6o),e(I,y1),e(y1,Dne),e(Dne,y6o),e(y1,L6o),e(y1,DI),e(DI,x6o),e(y1,k6o),e(I,S6o),e(I,L1),e(L1,Gne),e(Gne,R6o),e(L1,B6o),e(L1,GI),e(GI,P6o),e(L1,$6o),e(I,I6o),e(I,x1),e(x1,One),e(One,q6o),e(x1,N6o),e(x1,OI),e(OI,j6o),e(x1,D6o),e(I,G6o),e(I,k1),e(k1,Vne),e(Vne,O6o),e(k1,V6o),e(k1,VI),e(VI,X6o),e(k1,z6o),e(I,Q6o),e(I,S1),e(S1,Xne),e(Xne,W6o),e(S1,H6o),e(S1,XI),e(XI,U6o),e(S1,J6o),e(I,Y6o),e(I,R1),e(R1,zne),e(zne,K6o),e(R1,Z6o),e(R1,Qne),e(Qne,eTo),e(R1,oTo),e(I,rTo),e(I,B1),e(B1,Wne),e(Wne,tTo),e(B1,aTo),e(B1,zI),e(zI,nTo),e(B1,sTo),e(I,lTo),e(I,P1),e(P1,Hne),e(Hne,iTo),e(P1,dTo),e(P1,QI),e(QI,cTo),e(P1,fTo),e(I,mTo),e(I,$1),e($1,Une),e(Une,gTo),e($1,hTo),e($1,WI),e(WI,pTo),e($1,_To),e(I,uTo),e(I,I1),e(I1,Jne),e(Jne,bTo),e(I1,FTo),e(I1,HI),e(HI,vTo),e(I1,TTo),e(De,MTo),e(De,q1),e(q1,ETo),e(q1,Yne),e(Yne,CTo),e(q1,wTo),e(q1,Kne),e(Kne,ATo),e(De,yTo),e(De,Zne),e(Zne,LTo),e(De,xTo),g(w5,De,null),b(c,_Re,u),b(c,id,u),e(id,N1),e(N1,ese),g(A5,ese,null),e(id,kTo),e(id,ose),e(ose,STo),b(c,uRe,u),b(c,er,u),g(y5,er,null),e(er,RTo),e(er,dd),e(dd,BTo),e(dd,UI),e(UI,PTo),e(dd,$To),e(dd,JI),e(JI,ITo),e(dd,qTo),e(er,NTo),e(er,L5),e(L5,jTo),e(L5,rse),e(rse,DTo),e(L5,GTo),e(er,OTo),e(er,Hr),g(x5,Hr,null),e(Hr,VTo),e(Hr,tse),e(tse,XTo),e(Hr,zTo),e(Hr,cd),e(cd,QTo),e(cd,ase),e(ase,WTo),e(cd,HTo),e(cd,YI),e(YI,UTo),e(cd,JTo),e(Hr,YTo),e(Hr,nse),e(nse,KTo),e(Hr,ZTo),g(k5,Hr,null),e(er,e7o),e(er,Ge),g(S5,Ge,null),e(Ge,o7o),e(Ge,sse),e(sse,r7o),e(Ge,t7o),e(Ge,Ha),e(Ha,a7o),e(Ha,lse),e(lse,n7o),e(Ha,s7o),e(Ha,ise),e(ise,l7o),e(Ha,i7o),e(Ha,dse),e(dse,d7o),e(Ha,c7o),e(Ge,f7o),e(Ge,ae),e(ae,j1),e(j1,cse),e(cse,m7o),e(j1,g7o),e(j1,KI),e(KI,h7o),e(j1,p7o),e(ae,_7o),e(ae,D1),e(D1,fse),e(fse,u7o),e(D1,b7o),e(D1,ZI),e(ZI,F7o),e(D1,v7o),e(ae,T7o),e(ae,G1),e(G1,mse),e(mse,M7o),e(G1,E7o),e(G1,eq),e(eq,C7o),e(G1,w7o),e(ae,A7o),e(ae,O1),e(O1,gse),e(gse,y7o),e(O1,L7o),e(O1,oq),e(oq,x7o),e(O1,k7o),e(ae,S7o),e(ae,V1),e(V1,hse),e(hse,R7o),e(V1,B7o),e(V1,rq),e(rq,P7o),e(V1,$7o),e(ae,I7o),e(ae,X1),e(X1,pse),e(pse,q7o),e(X1,N7o),e(X1,tq),e(tq,j7o),e(X1,D7o),e(ae,G7o),e(ae,z1),e(z1,_se),e(_se,O7o),e(z1,V7o),e(z1,aq),e(aq,X7o),e(z1,z7o),e(ae,Q7o),e(ae,Q1),e(Q1,use),e(use,W7o),e(Q1,H7o),e(Q1,nq),e(nq,U7o),e(Q1,J7o),e(ae,Y7o),e(ae,W1),e(W1,bse),e(bse,K7o),e(W1,Z7o),e(W1,sq),e(sq,eMo),e(W1,oMo),e(ae,rMo),e(ae,H1),e(H1,Fse),e(Fse,tMo),e(H1,aMo),e(H1,lq),e(lq,nMo),e(H1,sMo),e(ae,lMo),e(ae,U1),e(U1,vse),e(vse,iMo),e(U1,dMo),e(U1,iq),e(iq,cMo),e(U1,fMo),e(ae,mMo),e(ae,J1),e(J1,Tse),e(Tse,gMo),e(J1,hMo),e(J1,dq),e(dq,pMo),e(J1,_Mo),e(ae,uMo),e(ae,Y1),e(Y1,Mse),e(Mse,bMo),e(Y1,FMo),e(Y1,cq),e(cq,vMo),e(Y1,TMo),e(ae,MMo),e(ae,K1),e(K1,Ese),e(Ese,EMo),e(K1,CMo),e(K1,fq),e(fq,wMo),e(K1,AMo),e(ae,yMo),e(ae,Z1),e(Z1,Cse),e(Cse,LMo),e(Z1,xMo),e(Z1,mq),e(mq,kMo),e(Z1,SMo),e(ae,RMo),e(ae,e4),e(e4,wse),e(wse,BMo),e(e4,PMo),e(e4,gq),e(gq,$Mo),e(e4,IMo),e(ae,qMo),e(ae,o4),e(o4,Ase),e(Ase,NMo),e(o4,jMo),e(o4,hq),e(hq,DMo),e(o4,GMo),e(Ge,OMo),e(Ge,r4),e(r4,VMo),e(r4,yse),e(yse,XMo),e(r4,zMo),e(r4,Lse),e(Lse,QMo),e(Ge,WMo),e(Ge,xse),e(xse,HMo),e(Ge,UMo),g(R5,Ge,null),b(c,bRe,u),b(c,fd,u),e(fd,t4),e(t4,kse),g(B5,kse,null),e(fd,JMo),e(fd,Sse),e(Sse,YMo),b(c,FRe,u),b(c,or,u),g(P5,or,null),e(or,KMo),e(or,md),e(md,ZMo),e(md,pq),e(pq,eEo),e(md,oEo),e(md,_q),e(_q,rEo),e(md,tEo),e(or,aEo),e(or,$5),e($5,nEo),e($5,Rse),e(Rse,sEo),e($5,lEo),e(or,iEo),e(or,Ur),g(I5,Ur,null),e(Ur,dEo),e(Ur,Bse),e(Bse,cEo),e(Ur,fEo),e(Ur,gd),e(gd,mEo),e(gd,Pse),e(Pse,gEo),e(gd,hEo),e(gd,uq),e(uq,pEo),e(gd,_Eo),e(Ur,uEo),e(Ur,$se),e($se,bEo),e(Ur,FEo),g(q5,Ur,null),e(or,vEo),e(or,Oe),g(N5,Oe,null),e(Oe,TEo),e(Oe,Ise),e(Ise,MEo),e(Oe,EEo),e(Oe,Ua),e(Ua,CEo),e(Ua,qse),e(qse,wEo),e(Ua,AEo),e(Ua,Nse),e(Nse,yEo),e(Ua,LEo),e(Ua,jse),e(jse,xEo),e(Ua,kEo),e(Oe,SEo),e(Oe,y),e(y,a4),e(a4,Dse),e(Dse,REo),e(a4,BEo),e(a4,bq),e(bq,PEo),e(a4,$Eo),e(y,IEo),e(y,n4),e(n4,Gse),e(Gse,qEo),e(n4,NEo),e(n4,Fq),e(Fq,jEo),e(n4,DEo),e(y,GEo),e(y,s4),e(s4,Ose),e(Ose,OEo),e(s4,VEo),e(s4,vq),e(vq,XEo),e(s4,zEo),e(y,QEo),e(y,l4),e(l4,Vse),e(Vse,WEo),e(l4,HEo),e(l4,Tq),e(Tq,UEo),e(l4,JEo),e(y,YEo),e(y,i4),e(i4,Xse),e(Xse,KEo),e(i4,ZEo),e(i4,Mq),e(Mq,eCo),e(i4,oCo),e(y,rCo),e(y,d4),e(d4,zse),e(zse,tCo),e(d4,aCo),e(d4,Eq),e(Eq,nCo),e(d4,sCo),e(y,lCo),e(y,c4),e(c4,Qse),e(Qse,iCo),e(c4,dCo),e(c4,Cq),e(Cq,cCo),e(c4,fCo),e(y,mCo),e(y,f4),e(f4,Wse),e(Wse,gCo),e(f4,hCo),e(f4,wq),e(wq,pCo),e(f4,_Co),e(y,uCo),e(y,m4),e(m4,Hse),e(Hse,bCo),e(m4,FCo),e(m4,Aq),e(Aq,vCo),e(m4,TCo),e(y,MCo),e(y,g4),e(g4,Use),e(Use,ECo),e(g4,CCo),e(g4,yq),e(yq,wCo),e(g4,ACo),e(y,yCo),e(y,h4),e(h4,Jse),e(Jse,LCo),e(h4,xCo),e(h4,Lq),e(Lq,kCo),e(h4,SCo),e(y,RCo),e(y,p4),e(p4,Yse),e(Yse,BCo),e(p4,PCo),e(p4,xq),e(xq,$Co),e(p4,ICo),e(y,qCo),e(y,_4),e(_4,Kse),e(Kse,NCo),e(_4,jCo),e(_4,kq),e(kq,DCo),e(_4,GCo),e(y,OCo),e(y,u4),e(u4,Zse),e(Zse,VCo),e(u4,XCo),e(u4,Sq),e(Sq,zCo),e(u4,QCo),e(y,WCo),e(y,b4),e(b4,ele),e(ele,HCo),e(b4,UCo),e(b4,Rq),e(Rq,JCo),e(b4,YCo),e(y,KCo),e(y,F4),e(F4,ole),e(ole,ZCo),e(F4,e5o),e(F4,Bq),e(Bq,o5o),e(F4,r5o),e(y,t5o),e(y,v4),e(v4,rle),e(rle,a5o),e(v4,n5o),e(v4,Pq),e(Pq,s5o),e(v4,l5o),e(y,i5o),e(y,T4),e(T4,tle),e(tle,d5o),e(T4,c5o),e(T4,$q),e($q,f5o),e(T4,m5o),e(y,g5o),e(y,M4),e(M4,ale),e(ale,h5o),e(M4,p5o),e(M4,Iq),e(Iq,_5o),e(M4,u5o),e(y,b5o),e(y,E4),e(E4,nle),e(nle,F5o),e(E4,v5o),e(E4,qq),e(qq,T5o),e(E4,M5o),e(y,E5o),e(y,C4),e(C4,sle),e(sle,C5o),e(C4,w5o),e(C4,Nq),e(Nq,A5o),e(C4,y5o),e(y,L5o),e(y,w4),e(w4,lle),e(lle,x5o),e(w4,k5o),e(w4,jq),e(jq,S5o),e(w4,R5o),e(y,B5o),e(y,A4),e(A4,ile),e(ile,P5o),e(A4,$5o),e(A4,Dq),e(Dq,I5o),e(A4,q5o),e(y,N5o),e(y,y4),e(y4,dle),e(dle,j5o),e(y4,D5o),e(y4,Gq),e(Gq,G5o),e(y4,O5o),e(y,V5o),e(y,L4),e(L4,cle),e(cle,X5o),e(L4,z5o),e(L4,Oq),e(Oq,Q5o),e(L4,W5o),e(y,H5o),e(y,x4),e(x4,fle),e(fle,U5o),e(x4,J5o),e(x4,Vq),e(Vq,Y5o),e(x4,K5o),e(y,Z5o),e(y,k4),e(k4,mle),e(mle,ewo),e(k4,owo),e(k4,Xq),e(Xq,rwo),e(k4,two),e(y,awo),e(y,S4),e(S4,gle),e(gle,nwo),e(S4,swo),e(S4,zq),e(zq,lwo),e(S4,iwo),e(y,dwo),e(y,R4),e(R4,hle),e(hle,cwo),e(R4,fwo),e(R4,Qq),e(Qq,mwo),e(R4,gwo),e(y,hwo),e(y,B4),e(B4,ple),e(ple,pwo),e(B4,_wo),e(B4,Wq),e(Wq,uwo),e(B4,bwo),e(y,Fwo),e(y,P4),e(P4,_le),e(_le,vwo),e(P4,Two),e(P4,Hq),e(Hq,Mwo),e(P4,Ewo),e(y,Cwo),e(y,$4),e($4,ule),e(ule,wwo),e($4,Awo),e($4,Uq),e(Uq,ywo),e($4,Lwo),e(y,xwo),e(y,I4),e(I4,ble),e(ble,kwo),e(I4,Swo),e(I4,Jq),e(Jq,Rwo),e(I4,Bwo),e(y,Pwo),e(y,q4),e(q4,Fle),e(Fle,$wo),e(q4,Iwo),e(q4,Yq),e(Yq,qwo),e(q4,Nwo),e(y,jwo),e(y,N4),e(N4,vle),e(vle,Dwo),e(N4,Gwo),e(N4,Kq),e(Kq,Owo),e(N4,Vwo),e(y,Xwo),e(y,j4),e(j4,Tle),e(Tle,zwo),e(j4,Qwo),e(j4,Zq),e(Zq,Wwo),e(j4,Hwo),e(y,Uwo),e(y,D4),e(D4,Mle),e(Mle,Jwo),e(D4,Ywo),e(D4,eN),e(eN,Kwo),e(D4,Zwo),e(y,eAo),e(y,G4),e(G4,Ele),e(Ele,oAo),e(G4,rAo),e(G4,oN),e(oN,tAo),e(G4,aAo),e(y,nAo),e(y,O4),e(O4,Cle),e(Cle,sAo),e(O4,lAo),e(O4,rN),e(rN,iAo),e(O4,dAo),e(y,cAo),e(y,V4),e(V4,wle),e(wle,fAo),e(V4,mAo),e(V4,tN),e(tN,gAo),e(V4,hAo),e(y,pAo),e(y,X4),e(X4,Ale),e(Ale,_Ao),e(X4,uAo),e(X4,aN),e(aN,bAo),e(X4,FAo),e(y,vAo),e(y,z4),e(z4,yle),e(yle,TAo),e(z4,MAo),e(z4,nN),e(nN,EAo),e(z4,CAo),e(y,wAo),e(y,Q4),e(Q4,Lle),e(Lle,AAo),e(Q4,yAo),e(Q4,sN),e(sN,LAo),e(Q4,xAo),e(y,kAo),e(y,W4),e(W4,xle),e(xle,SAo),e(W4,RAo),e(W4,lN),e(lN,BAo),e(W4,PAo),e(y,$Ao),e(y,H4),e(H4,kle),e(kle,IAo),e(H4,qAo),e(H4,iN),e(iN,NAo),e(H4,jAo),e(y,DAo),e(y,U4),e(U4,Sle),e(Sle,GAo),e(U4,OAo),e(U4,dN),e(dN,VAo),e(U4,XAo),e(y,zAo),e(y,J4),e(J4,Rle),e(Rle,QAo),e(J4,WAo),e(J4,cN),e(cN,HAo),e(J4,UAo),e(Oe,JAo),e(Oe,Y4),e(Y4,YAo),e(Y4,Ble),e(Ble,KAo),e(Y4,ZAo),e(Y4,Ple),e(Ple,e0o),e(Oe,o0o),e(Oe,$le),e($le,r0o),e(Oe,t0o),g(j5,Oe,null),b(c,vRe,u),b(c,hd,u),e(hd,K4),e(K4,Ile),g(D5,Ile,null),e(hd,a0o),e(hd,qle),e(qle,n0o),b(c,TRe,u),b(c,rr,u),g(G5,rr,null),e(rr,s0o),e(rr,pd),e(pd,l0o),e(pd,fN),e(fN,i0o),e(pd,d0o),e(pd,mN),e(mN,c0o),e(pd,f0o),e(rr,m0o),e(rr,O5),e(O5,g0o),e(O5,Nle),e(Nle,h0o),e(O5,p0o),e(rr,_0o),e(rr,Jr),g(V5,Jr,null),e(Jr,u0o),e(Jr,jle),e(jle,b0o),e(Jr,F0o),e(Jr,_d),e(_d,v0o),e(_d,Dle),e(Dle,T0o),e(_d,M0o),e(_d,gN),e(gN,E0o),e(_d,C0o),e(Jr,w0o),e(Jr,Gle),e(Gle,A0o),e(Jr,y0o),g(X5,Jr,null),e(rr,L0o),e(rr,Ve),g(z5,Ve,null),e(Ve,x0o),e(Ve,Ole),e(Ole,k0o),e(Ve,S0o),e(Ve,Ja),e(Ja,R0o),e(Ja,Vle),e(Vle,B0o),e(Ja,P0o),e(Ja,Xle),e(Xle,$0o),e(Ja,I0o),e(Ja,zle),e(zle,q0o),e(Ja,N0o),e(Ve,j0o),e(Ve,G),e(G,Z4),e(Z4,Qle),e(Qle,D0o),e(Z4,G0o),e(Z4,hN),e(hN,O0o),e(Z4,V0o),e(G,X0o),e(G,eb),e(eb,Wle),e(Wle,z0o),e(eb,Q0o),e(eb,pN),e(pN,W0o),e(eb,H0o),e(G,U0o),e(G,ob),e(ob,Hle),e(Hle,J0o),e(ob,Y0o),e(ob,_N),e(_N,K0o),e(ob,Z0o),e(G,eyo),e(G,rb),e(rb,Ule),e(Ule,oyo),e(rb,ryo),e(rb,uN),e(uN,tyo),e(rb,ayo),e(G,nyo),e(G,tb),e(tb,Jle),e(Jle,syo),e(tb,lyo),e(tb,bN),e(bN,iyo),e(tb,dyo),e(G,cyo),e(G,ab),e(ab,Yle),e(Yle,fyo),e(ab,myo),e(ab,FN),e(FN,gyo),e(ab,hyo),e(G,pyo),e(G,nb),e(nb,Kle),e(Kle,_yo),e(nb,uyo),e(nb,vN),e(vN,byo),e(nb,Fyo),e(G,vyo),e(G,sb),e(sb,Zle),e(Zle,Tyo),e(sb,Myo),e(sb,TN),e(TN,Eyo),e(sb,Cyo),e(G,wyo),e(G,lb),e(lb,eie),e(eie,Ayo),e(lb,yyo),e(lb,MN),e(MN,Lyo),e(lb,xyo),e(G,kyo),e(G,ib),e(ib,oie),e(oie,Syo),e(ib,Ryo),e(ib,EN),e(EN,Byo),e(ib,Pyo),e(G,$yo),e(G,db),e(db,rie),e(rie,Iyo),e(db,qyo),e(db,CN),e(CN,Nyo),e(db,jyo),e(G,Dyo),e(G,cb),e(cb,tie),e(tie,Gyo),e(cb,Oyo),e(cb,wN),e(wN,Vyo),e(cb,Xyo),e(G,zyo),e(G,fb),e(fb,aie),e(aie,Qyo),e(fb,Wyo),e(fb,AN),e(AN,Hyo),e(fb,Uyo),e(G,Jyo),e(G,mb),e(mb,nie),e(nie,Yyo),e(mb,Kyo),e(mb,yN),e(yN,Zyo),e(mb,eLo),e(G,oLo),e(G,gb),e(gb,sie),e(sie,rLo),e(gb,tLo),e(gb,LN),e(LN,aLo),e(gb,nLo),e(G,sLo),e(G,hb),e(hb,lie),e(lie,lLo),e(hb,iLo),e(hb,xN),e(xN,dLo),e(hb,cLo),e(G,fLo),e(G,pb),e(pb,iie),e(iie,mLo),e(pb,gLo),e(pb,kN),e(kN,hLo),e(pb,pLo),e(G,_Lo),e(G,_b),e(_b,die),e(die,uLo),e(_b,bLo),e(_b,SN),e(SN,FLo),e(_b,vLo),e(G,TLo),e(G,ub),e(ub,cie),e(cie,MLo),e(ub,ELo),e(ub,RN),e(RN,CLo),e(ub,wLo),e(G,ALo),e(G,bb),e(bb,fie),e(fie,yLo),e(bb,LLo),e(bb,BN),e(BN,xLo),e(bb,kLo),e(G,SLo),e(G,Fb),e(Fb,mie),e(mie,RLo),e(Fb,BLo),e(Fb,PN),e(PN,PLo),e(Fb,$Lo),e(G,ILo),e(G,vb),e(vb,gie),e(gie,qLo),e(vb,NLo),e(vb,$N),e($N,jLo),e(vb,DLo),e(G,GLo),e(G,Tb),e(Tb,hie),e(hie,OLo),e(Tb,VLo),e(Tb,IN),e(IN,XLo),e(Tb,zLo),e(G,QLo),e(G,Mb),e(Mb,pie),e(pie,WLo),e(Mb,HLo),e(Mb,qN),e(qN,ULo),e(Mb,JLo),e(G,YLo),e(G,Eb),e(Eb,_ie),e(_ie,KLo),e(Eb,ZLo),e(Eb,NN),e(NN,e8o),e(Eb,o8o),e(G,r8o),e(G,Cb),e(Cb,uie),e(uie,t8o),e(Cb,a8o),e(Cb,jN),e(jN,n8o),e(Cb,s8o),e(G,l8o),e(G,wb),e(wb,bie),e(bie,i8o),e(wb,d8o),e(wb,DN),e(DN,c8o),e(wb,f8o),e(G,m8o),e(G,Ab),e(Ab,Fie),e(Fie,g8o),e(Ab,h8o),e(Ab,GN),e(GN,p8o),e(Ab,_8o),e(Ve,u8o),e(Ve,yb),e(yb,b8o),e(yb,vie),e(vie,F8o),e(yb,v8o),e(yb,Tie),e(Tie,T8o),e(Ve,M8o),e(Ve,Mie),e(Mie,E8o),e(Ve,C8o),g(Q5,Ve,null),b(c,MRe,u),b(c,ud,u),e(ud,Lb),e(Lb,Eie),g(W5,Eie,null),e(ud,w8o),e(ud,Cie),e(Cie,A8o),b(c,ERe,u),b(c,tr,u),g(H5,tr,null),e(tr,y8o),e(tr,bd),e(bd,L8o),e(bd,ON),e(ON,x8o),e(bd,k8o),e(bd,VN),e(VN,S8o),e(bd,R8o),e(tr,B8o),e(tr,U5),e(U5,P8o),e(U5,wie),e(wie,$8o),e(U5,I8o),e(tr,q8o),e(tr,Yr),g(J5,Yr,null),e(Yr,N8o),e(Yr,Aie),e(Aie,j8o),e(Yr,D8o),e(Yr,Fd),e(Fd,G8o),e(Fd,yie),e(yie,O8o),e(Fd,V8o),e(Fd,XN),e(XN,X8o),e(Fd,z8o),e(Yr,Q8o),e(Yr,Lie),e(Lie,W8o),e(Yr,H8o),g(Y5,Yr,null),e(tr,U8o),e(tr,Xe),g(K5,Xe,null),e(Xe,J8o),e(Xe,xie),e(xie,Y8o),e(Xe,K8o),e(Xe,Ya),e(Ya,Z8o),e(Ya,kie),e(kie,e9o),e(Ya,o9o),e(Ya,Sie),e(Sie,r9o),e(Ya,t9o),e(Ya,Rie),e(Rie,a9o),e(Ya,n9o),e(Xe,s9o),e(Xe,da),e(da,xb),e(xb,Bie),e(Bie,l9o),e(xb,i9o),e(xb,zN),e(zN,d9o),e(xb,c9o),e(da,f9o),e(da,kb),e(kb,Pie),e(Pie,m9o),e(kb,g9o),e(kb,QN),e(QN,h9o),e(kb,p9o),e(da,_9o),e(da,Sb),e(Sb,$ie),e($ie,u9o),e(Sb,b9o),e(Sb,WN),e(WN,F9o),e(Sb,v9o),e(da,T9o),e(da,Rb),e(Rb,Iie),e(Iie,M9o),e(Rb,E9o),e(Rb,HN),e(HN,C9o),e(Rb,w9o),e(da,A9o),e(da,Bb),e(Bb,qie),e(qie,y9o),e(Bb,L9o),e(Bb,UN),e(UN,x9o),e(Bb,k9o),e(Xe,S9o),e(Xe,Pb),e(Pb,R9o),e(Pb,Nie),e(Nie,B9o),e(Pb,P9o),e(Pb,jie),e(jie,$9o),e(Xe,I9o),e(Xe,Die),e(Die,q9o),e(Xe,N9o),g(Z5,Xe,null),b(c,CRe,u),b(c,vd,u),e(vd,$b),e($b,Gie),g(ew,Gie,null),e(vd,j9o),e(vd,Oie),e(Oie,D9o),b(c,wRe,u),b(c,ar,u),g(ow,ar,null),e(ar,G9o),e(ar,Td),e(Td,O9o),e(Td,JN),e(JN,V9o),e(Td,X9o),e(Td,YN),e(YN,z9o),e(Td,Q9o),e(ar,W9o),e(ar,rw),e(rw,H9o),e(rw,Vie),e(Vie,U9o),e(rw,J9o),e(ar,Y9o),e(ar,Kr),g(tw,Kr,null),e(Kr,K9o),e(Kr,Xie),e(Xie,Z9o),e(Kr,exo),e(Kr,Md),e(Md,oxo),e(Md,zie),e(zie,rxo),e(Md,txo),e(Md,KN),e(KN,axo),e(Md,nxo),e(Kr,sxo),e(Kr,Qie),e(Qie,lxo),e(Kr,ixo),g(aw,Kr,null),e(ar,dxo),e(ar,ze),g(nw,ze,null),e(ze,cxo),e(ze,Wie),e(Wie,fxo),e(ze,mxo),e(ze,Ka),e(Ka,gxo),e(Ka,Hie),e(Hie,hxo),e(Ka,pxo),e(Ka,Uie),e(Uie,_xo),e(Ka,uxo),e(Ka,Jie),e(Jie,bxo),e(Ka,Fxo),e(ze,vxo),e(ze,j),e(j,Ib),e(Ib,Yie),e(Yie,Txo),e(Ib,Mxo),e(Ib,ZN),e(ZN,Exo),e(Ib,Cxo),e(j,wxo),e(j,qb),e(qb,Kie),e(Kie,Axo),e(qb,yxo),e(qb,ej),e(ej,Lxo),e(qb,xxo),e(j,kxo),e(j,Nb),e(Nb,Zie),e(Zie,Sxo),e(Nb,Rxo),e(Nb,oj),e(oj,Bxo),e(Nb,Pxo),e(j,$xo),e(j,jb),e(jb,ede),e(ede,Ixo),e(jb,qxo),e(jb,rj),e(rj,Nxo),e(jb,jxo),e(j,Dxo),e(j,Db),e(Db,ode),e(ode,Gxo),e(Db,Oxo),e(Db,tj),e(tj,Vxo),e(Db,Xxo),e(j,zxo),e(j,Gb),e(Gb,rde),e(rde,Qxo),e(Gb,Wxo),e(Gb,aj),e(aj,Hxo),e(Gb,Uxo),e(j,Jxo),e(j,Ob),e(Ob,tde),e(tde,Yxo),e(Ob,Kxo),e(Ob,nj),e(nj,Zxo),e(Ob,eko),e(j,oko),e(j,Vb),e(Vb,ade),e(ade,rko),e(Vb,tko),e(Vb,sj),e(sj,ako),e(Vb,nko),e(j,sko),e(j,Xb),e(Xb,nde),e(nde,lko),e(Xb,iko),e(Xb,lj),e(lj,dko),e(Xb,cko),e(j,fko),e(j,zb),e(zb,sde),e(sde,mko),e(zb,gko),e(zb,ij),e(ij,hko),e(zb,pko),e(j,_ko),e(j,Qb),e(Qb,lde),e(lde,uko),e(Qb,bko),e(Qb,dj),e(dj,Fko),e(Qb,vko),e(j,Tko),e(j,Wb),e(Wb,ide),e(ide,Mko),e(Wb,Eko),e(Wb,cj),e(cj,Cko),e(Wb,wko),e(j,Ako),e(j,Hb),e(Hb,dde),e(dde,yko),e(Hb,Lko),e(Hb,fj),e(fj,xko),e(Hb,kko),e(j,Sko),e(j,Ub),e(Ub,cde),e(cde,Rko),e(Ub,Bko),e(Ub,mj),e(mj,Pko),e(Ub,$ko),e(j,Iko),e(j,Jb),e(Jb,fde),e(fde,qko),e(Jb,Nko),e(Jb,gj),e(gj,jko),e(Jb,Dko),e(j,Gko),e(j,Yb),e(Yb,mde),e(mde,Oko),e(Yb,Vko),e(Yb,hj),e(hj,Xko),e(Yb,zko),e(j,Qko),e(j,Kb),e(Kb,gde),e(gde,Wko),e(Kb,Hko),e(Kb,pj),e(pj,Uko),e(Kb,Jko),e(j,Yko),e(j,Zb),e(Zb,hde),e(hde,Kko),e(Zb,Zko),e(Zb,_j),e(_j,eSo),e(Zb,oSo),e(j,rSo),e(j,e3),e(e3,pde),e(pde,tSo),e(e3,aSo),e(e3,uj),e(uj,nSo),e(e3,sSo),e(j,lSo),e(j,o3),e(o3,_de),e(_de,iSo),e(o3,dSo),e(o3,bj),e(bj,cSo),e(o3,fSo),e(j,mSo),e(j,r3),e(r3,ude),e(ude,gSo),e(r3,hSo),e(r3,Fj),e(Fj,pSo),e(r3,_So),e(j,uSo),e(j,t3),e(t3,bde),e(bde,bSo),e(t3,FSo),e(t3,vj),e(vj,vSo),e(t3,TSo),e(j,MSo),e(j,a3),e(a3,Fde),e(Fde,ESo),e(a3,CSo),e(a3,Tj),e(Tj,wSo),e(a3,ASo),e(j,ySo),e(j,n3),e(n3,vde),e(vde,LSo),e(n3,xSo),e(n3,Mj),e(Mj,kSo),e(n3,SSo),e(j,RSo),e(j,s3),e(s3,Tde),e(Tde,BSo),e(s3,PSo),e(s3,Ej),e(Ej,$So),e(s3,ISo),e(j,qSo),e(j,l3),e(l3,Mde),e(Mde,NSo),e(l3,jSo),e(l3,Cj),e(Cj,DSo),e(l3,GSo),e(j,OSo),e(j,i3),e(i3,Ede),e(Ede,VSo),e(i3,XSo),e(i3,wj),e(wj,zSo),e(i3,QSo),e(j,WSo),e(j,d3),e(d3,Cde),e(Cde,HSo),e(d3,USo),e(d3,Aj),e(Aj,JSo),e(d3,YSo),e(j,KSo),e(j,c3),e(c3,wde),e(wde,ZSo),e(c3,eRo),e(c3,yj),e(yj,oRo),e(c3,rRo),e(j,tRo),e(j,f3),e(f3,Ade),e(Ade,aRo),e(f3,nRo),e(f3,Lj),e(Lj,sRo),e(f3,lRo),e(j,iRo),e(j,m3),e(m3,yde),e(yde,dRo),e(m3,cRo),e(m3,xj),e(xj,fRo),e(m3,mRo),e(j,gRo),e(j,g3),e(g3,Lde),e(Lde,hRo),e(g3,pRo),e(g3,kj),e(kj,_Ro),e(g3,uRo),e(j,bRo),e(j,h3),e(h3,xde),e(xde,FRo),e(h3,vRo),e(h3,Sj),e(Sj,TRo),e(h3,MRo),e(ze,ERo),e(ze,p3),e(p3,CRo),e(p3,kde),e(kde,wRo),e(p3,ARo),e(p3,Sde),e(Sde,yRo),e(ze,LRo),e(ze,Rde),e(Rde,xRo),e(ze,kRo),g(sw,ze,null),b(c,ARe,u),b(c,Ed,u),e(Ed,_3),e(_3,Bde),g(lw,Bde,null),e(Ed,SRo),e(Ed,Pde),e(Pde,RRo),b(c,yRe,u),b(c,nr,u),g(iw,nr,null),e(nr,BRo),e(nr,Cd),e(Cd,PRo),e(Cd,Rj),e(Rj,$Ro),e(Cd,IRo),e(Cd,Bj),e(Bj,qRo),e(Cd,NRo),e(nr,jRo),e(nr,dw),e(dw,DRo),e(dw,$de),e($de,GRo),e(dw,ORo),e(nr,VRo),e(nr,Zr),g(cw,Zr,null),e(Zr,XRo),e(Zr,Ide),e(Ide,zRo),e(Zr,QRo),e(Zr,wd),e(wd,WRo),e(wd,qde),e(qde,HRo),e(wd,URo),e(wd,Pj),e(Pj,JRo),e(wd,YRo),e(Zr,KRo),e(Zr,Nde),e(Nde,ZRo),e(Zr,eBo),g(fw,Zr,null),e(nr,oBo),e(nr,Qe),g(mw,Qe,null),e(Qe,rBo),e(Qe,jde),e(jde,tBo),e(Qe,aBo),e(Qe,Za),e(Za,nBo),e(Za,Dde),e(Dde,sBo),e(Za,lBo),e(Za,Gde),e(Gde,iBo),e(Za,dBo),e(Za,Ode),e(Ode,cBo),e(Za,fBo),e(Qe,mBo),e(Qe,R),e(R,u3),e(u3,Vde),e(Vde,gBo),e(u3,hBo),e(u3,$j),e($j,pBo),e(u3,_Bo),e(R,uBo),e(R,b3),e(b3,Xde),e(Xde,bBo),e(b3,FBo),e(b3,Ij),e(Ij,vBo),e(b3,TBo),e(R,MBo),e(R,F3),e(F3,zde),e(zde,EBo),e(F3,CBo),e(F3,qj),e(qj,wBo),e(F3,ABo),e(R,yBo),e(R,v3),e(v3,Qde),e(Qde,LBo),e(v3,xBo),e(v3,Nj),e(Nj,kBo),e(v3,SBo),e(R,RBo),e(R,T3),e(T3,Wde),e(Wde,BBo),e(T3,PBo),e(T3,jj),e(jj,$Bo),e(T3,IBo),e(R,qBo),e(R,M3),e(M3,Hde),e(Hde,NBo),e(M3,jBo),e(M3,Dj),e(Dj,DBo),e(M3,GBo),e(R,OBo),e(R,E3),e(E3,Ude),e(Ude,VBo),e(E3,XBo),e(E3,Gj),e(Gj,zBo),e(E3,QBo),e(R,WBo),e(R,C3),e(C3,Jde),e(Jde,HBo),e(C3,UBo),e(C3,Oj),e(Oj,JBo),e(C3,YBo),e(R,KBo),e(R,w3),e(w3,Yde),e(Yde,ZBo),e(w3,ePo),e(w3,Vj),e(Vj,oPo),e(w3,rPo),e(R,tPo),e(R,A3),e(A3,Kde),e(Kde,aPo),e(A3,nPo),e(A3,Xj),e(Xj,sPo),e(A3,lPo),e(R,iPo),e(R,y3),e(y3,Zde),e(Zde,dPo),e(y3,cPo),e(y3,zj),e(zj,fPo),e(y3,mPo),e(R,gPo),e(R,L3),e(L3,ece),e(ece,hPo),e(L3,pPo),e(L3,Qj),e(Qj,_Po),e(L3,uPo),e(R,bPo),e(R,x3),e(x3,oce),e(oce,FPo),e(x3,vPo),e(x3,Wj),e(Wj,TPo),e(x3,MPo),e(R,EPo),e(R,k3),e(k3,rce),e(rce,CPo),e(k3,wPo),e(k3,Hj),e(Hj,APo),e(k3,yPo),e(R,LPo),e(R,S3),e(S3,tce),e(tce,xPo),e(S3,kPo),e(S3,Uj),e(Uj,SPo),e(S3,RPo),e(R,BPo),e(R,R3),e(R3,ace),e(ace,PPo),e(R3,$Po),e(R3,Jj),e(Jj,IPo),e(R3,qPo),e(R,NPo),e(R,B3),e(B3,nce),e(nce,jPo),e(B3,DPo),e(B3,Yj),e(Yj,GPo),e(B3,OPo),e(R,VPo),e(R,P3),e(P3,sce),e(sce,XPo),e(P3,zPo),e(P3,Kj),e(Kj,QPo),e(P3,WPo),e(R,HPo),e(R,$3),e($3,lce),e(lce,UPo),e($3,JPo),e($3,Zj),e(Zj,YPo),e($3,KPo),e(R,ZPo),e(R,I3),e(I3,ice),e(ice,e$o),e(I3,o$o),e(I3,eD),e(eD,r$o),e(I3,t$o),e(R,a$o),e(R,q3),e(q3,dce),e(dce,n$o),e(q3,s$o),e(q3,oD),e(oD,l$o),e(q3,i$o),e(R,d$o),e(R,N3),e(N3,cce),e(cce,c$o),e(N3,f$o),e(N3,rD),e(rD,m$o),e(N3,g$o),e(R,h$o),e(R,j3),e(j3,fce),e(fce,p$o),e(j3,_$o),e(j3,tD),e(tD,u$o),e(j3,b$o),e(R,F$o),e(R,D3),e(D3,mce),e(mce,v$o),e(D3,T$o),e(D3,aD),e(aD,M$o),e(D3,E$o),e(R,C$o),e(R,G3),e(G3,gce),e(gce,w$o),e(G3,A$o),e(G3,nD),e(nD,y$o),e(G3,L$o),e(R,x$o),e(R,O3),e(O3,hce),e(hce,k$o),e(O3,S$o),e(O3,sD),e(sD,R$o),e(O3,B$o),e(R,P$o),e(R,V3),e(V3,pce),e(pce,$$o),e(V3,I$o),e(V3,lD),e(lD,q$o),e(V3,N$o),e(R,j$o),e(R,X3),e(X3,_ce),e(_ce,D$o),e(X3,G$o),e(X3,iD),e(iD,O$o),e(X3,V$o),e(R,X$o),e(R,z3),e(z3,uce),e(uce,z$o),e(z3,Q$o),e(z3,dD),e(dD,W$o),e(z3,H$o),e(R,U$o),e(R,Q3),e(Q3,bce),e(bce,J$o),e(Q3,Y$o),e(Q3,cD),e(cD,K$o),e(Q3,Z$o),e(R,eIo),e(R,W3),e(W3,Fce),e(Fce,oIo),e(W3,rIo),e(W3,fD),e(fD,tIo),e(W3,aIo),e(R,nIo),e(R,H3),e(H3,vce),e(vce,sIo),e(H3,lIo),e(H3,mD),e(mD,iIo),e(H3,dIo),e(R,cIo),e(R,U3),e(U3,Tce),e(Tce,fIo),e(U3,mIo),e(U3,gD),e(gD,gIo),e(U3,hIo),e(R,pIo),e(R,J3),e(J3,Mce),e(Mce,_Io),e(J3,uIo),e(J3,hD),e(hD,bIo),e(J3,FIo),e(R,vIo),e(R,Y3),e(Y3,Ece),e(Ece,TIo),e(Y3,MIo),e(Y3,pD),e(pD,EIo),e(Y3,CIo),e(R,wIo),e(R,K3),e(K3,Cce),e(Cce,AIo),e(K3,yIo),e(K3,_D),e(_D,LIo),e(K3,xIo),e(R,kIo),e(R,Z3),e(Z3,wce),e(wce,SIo),e(Z3,RIo),e(Z3,uD),e(uD,BIo),e(Z3,PIo),e(R,$Io),e(R,e2),e(e2,Ace),e(Ace,IIo),e(e2,qIo),e(e2,bD),e(bD,NIo),e(e2,jIo),e(R,DIo),e(R,o2),e(o2,yce),e(yce,GIo),e(o2,OIo),e(o2,FD),e(FD,VIo),e(o2,XIo),e(Qe,zIo),e(Qe,r2),e(r2,QIo),e(r2,Lce),e(Lce,WIo),e(r2,HIo),e(r2,xce),e(xce,UIo),e(Qe,JIo),e(Qe,kce),e(kce,YIo),e(Qe,KIo),g(gw,Qe,null),b(c,LRe,u),b(c,Ad,u),e(Ad,t2),e(t2,Sce),g(hw,Sce,null),e(Ad,ZIo),e(Ad,Rce),e(Rce,eqo),b(c,xRe,u),b(c,sr,u),g(pw,sr,null),e(sr,oqo),e(sr,yd),e(yd,rqo),e(yd,vD),e(vD,tqo),e(yd,aqo),e(yd,TD),e(TD,nqo),e(yd,sqo),e(sr,lqo),e(sr,_w),e(_w,iqo),e(_w,Bce),e(Bce,dqo),e(_w,cqo),e(sr,fqo),e(sr,et),g(uw,et,null),e(et,mqo),e(et,Pce),e(Pce,gqo),e(et,hqo),e(et,Ld),e(Ld,pqo),e(Ld,$ce),e($ce,_qo),e(Ld,uqo),e(Ld,MD),e(MD,bqo),e(Ld,Fqo),e(et,vqo),e(et,Ice),e(Ice,Tqo),e(et,Mqo),g(bw,et,null),e(sr,Eqo),e(sr,We),g(Fw,We,null),e(We,Cqo),e(We,qce),e(qce,wqo),e(We,Aqo),e(We,en),e(en,yqo),e(en,Nce),e(Nce,Lqo),e(en,xqo),e(en,jce),e(jce,kqo),e(en,Sqo),e(en,Dce),e(Dce,Rqo),e(en,Bqo),e(We,Pqo),e(We,Gce),e(Gce,a2),e(a2,Oce),e(Oce,$qo),e(a2,Iqo),e(a2,ED),e(ED,qqo),e(a2,Nqo),e(We,jqo),e(We,n2),e(n2,Dqo),e(n2,Vce),e(Vce,Gqo),e(n2,Oqo),e(n2,Xce),e(Xce,Vqo),e(We,Xqo),e(We,zce),e(zce,zqo),e(We,Qqo),g(vw,We,null),b(c,kRe,u),b(c,xd,u),e(xd,s2),e(s2,Qce),g(Tw,Qce,null),e(xd,Wqo),e(xd,Wce),e(Wce,Hqo),b(c,SRe,u),b(c,lr,u),g(Mw,lr,null),e(lr,Uqo),e(lr,kd),e(kd,Jqo),e(kd,CD),e(CD,Yqo),e(kd,Kqo),e(kd,wD),e(wD,Zqo),e(kd,eNo),e(lr,oNo),e(lr,Ew),e(Ew,rNo),e(Ew,Hce),e(Hce,tNo),e(Ew,aNo),e(lr,nNo),e(lr,ot),g(Cw,ot,null),e(ot,sNo),e(ot,Uce),e(Uce,lNo),e(ot,iNo),e(ot,Sd),e(Sd,dNo),e(Sd,Jce),e(Jce,cNo),e(Sd,fNo),e(Sd,AD),e(AD,mNo),e(Sd,gNo),e(ot,hNo),e(ot,Yce),e(Yce,pNo),e(ot,_No),g(ww,ot,null),e(lr,uNo),e(lr,He),g(Aw,He,null),e(He,bNo),e(He,Kce),e(Kce,FNo),e(He,vNo),e(He,on),e(on,TNo),e(on,Zce),e(Zce,MNo),e(on,ENo),e(on,efe),e(efe,CNo),e(on,wNo),e(on,ofe),e(ofe,ANo),e(on,yNo),e(He,LNo),e(He,ge),e(ge,l2),e(l2,rfe),e(rfe,xNo),e(l2,kNo),e(l2,yD),e(yD,SNo),e(l2,RNo),e(ge,BNo),e(ge,i2),e(i2,tfe),e(tfe,PNo),e(i2,$No),e(i2,LD),e(LD,INo),e(i2,qNo),e(ge,NNo),e(ge,Ds),e(Ds,afe),e(afe,jNo),e(Ds,DNo),e(Ds,xD),e(xD,GNo),e(Ds,ONo),e(Ds,kD),e(kD,VNo),e(Ds,XNo),e(ge,zNo),e(ge,d2),e(d2,nfe),e(nfe,QNo),e(d2,WNo),e(d2,SD),e(SD,HNo),e(d2,UNo),e(ge,JNo),e(ge,ma),e(ma,sfe),e(sfe,YNo),e(ma,KNo),e(ma,RD),e(RD,ZNo),e(ma,ejo),e(ma,BD),e(BD,ojo),e(ma,rjo),e(ma,PD),e(PD,tjo),e(ma,ajo),e(ge,njo),e(ge,c2),e(c2,lfe),e(lfe,sjo),e(c2,ljo),e(c2,$D),e($D,ijo),e(c2,djo),e(ge,cjo),e(ge,f2),e(f2,ife),e(ife,fjo),e(f2,mjo),e(f2,ID),e(ID,gjo),e(f2,hjo),e(ge,pjo),e(ge,m2),e(m2,dfe),e(dfe,_jo),e(m2,ujo),e(m2,qD),e(qD,bjo),e(m2,Fjo),e(ge,vjo),e(ge,g2),e(g2,cfe),e(cfe,Tjo),e(g2,Mjo),e(g2,ND),e(ND,Ejo),e(g2,Cjo),e(ge,wjo),e(ge,h2),e(h2,ffe),e(ffe,Ajo),e(h2,yjo),e(h2,jD),e(jD,Ljo),e(h2,xjo),e(ge,kjo),e(ge,p2),e(p2,mfe),e(mfe,Sjo),e(p2,Rjo),e(p2,DD),e(DD,Bjo),e(p2,Pjo),e(He,$jo),e(He,_2),e(_2,Ijo),e(_2,gfe),e(gfe,qjo),e(_2,Njo),e(_2,hfe),e(hfe,jjo),e(He,Djo),e(He,pfe),e(pfe,Gjo),e(He,Ojo),g(yw,He,null),b(c,RRe,u),b(c,Rd,u),e(Rd,u2),e(u2,_fe),g(Lw,_fe,null),e(Rd,Vjo),e(Rd,ufe),e(ufe,Xjo),b(c,BRe,u),b(c,ir,u),g(xw,ir,null),e(ir,zjo),e(ir,Bd),e(Bd,Qjo),e(Bd,GD),e(GD,Wjo),e(Bd,Hjo),e(Bd,OD),e(OD,Ujo),e(Bd,Jjo),e(ir,Yjo),e(ir,kw),e(kw,Kjo),e(kw,bfe),e(bfe,Zjo),e(kw,eDo),e(ir,oDo),e(ir,rt),g(Sw,rt,null),e(rt,rDo),e(rt,Ffe),e(Ffe,tDo),e(rt,aDo),e(rt,Pd),e(Pd,nDo),e(Pd,vfe),e(vfe,sDo),e(Pd,lDo),e(Pd,VD),e(VD,iDo),e(Pd,dDo),e(rt,cDo),e(rt,Tfe),e(Tfe,fDo),e(rt,mDo),g(Rw,rt,null),e(ir,gDo),e(ir,Ue),g(Bw,Ue,null),e(Ue,hDo),e(Ue,Mfe),e(Mfe,pDo),e(Ue,_Do),e(Ue,rn),e(rn,uDo),e(rn,Efe),e(Efe,bDo),e(rn,FDo),e(rn,Cfe),e(Cfe,vDo),e(rn,TDo),e(rn,wfe),e(wfe,MDo),e(rn,EDo),e(Ue,CDo),e(Ue,Afe),e(Afe,b2),e(b2,yfe),e(yfe,wDo),e(b2,ADo),e(b2,XD),e(XD,yDo),e(b2,LDo),e(Ue,xDo),e(Ue,F2),e(F2,kDo),e(F2,Lfe),e(Lfe,SDo),e(F2,RDo),e(F2,xfe),e(xfe,BDo),e(Ue,PDo),e(Ue,kfe),e(kfe,$Do),e(Ue,IDo),g(Pw,Ue,null),b(c,PRe,u),b(c,$d,u),e($d,v2),e(v2,Sfe),g($w,Sfe,null),e($d,qDo),e($d,Rfe),e(Rfe,NDo),b(c,$Re,u),b(c,dr,u),g(Iw,dr,null),e(dr,jDo),e(dr,Id),e(Id,DDo),e(Id,zD),e(zD,GDo),e(Id,ODo),e(Id,QD),e(QD,VDo),e(Id,XDo),e(dr,zDo),e(dr,qw),e(qw,QDo),e(qw,Bfe),e(Bfe,WDo),e(qw,HDo),e(dr,UDo),e(dr,tt),g(Nw,tt,null),e(tt,JDo),e(tt,Pfe),e(Pfe,YDo),e(tt,KDo),e(tt,qd),e(qd,ZDo),e(qd,$fe),e($fe,eGo),e(qd,oGo),e(qd,WD),e(WD,rGo),e(qd,tGo),e(tt,aGo),e(tt,Ife),e(Ife,nGo),e(tt,sGo),g(jw,tt,null),e(dr,lGo),e(dr,Je),g(Dw,Je,null),e(Je,iGo),e(Je,qfe),e(qfe,dGo),e(Je,cGo),e(Je,tn),e(tn,fGo),e(tn,Nfe),e(Nfe,mGo),e(tn,gGo),e(tn,jfe),e(jfe,hGo),e(tn,pGo),e(tn,Dfe),e(Dfe,_Go),e(tn,uGo),e(Je,bGo),e(Je,Se),e(Se,T2),e(T2,Gfe),e(Gfe,FGo),e(T2,vGo),e(T2,HD),e(HD,TGo),e(T2,MGo),e(Se,EGo),e(Se,M2),e(M2,Ofe),e(Ofe,CGo),e(M2,wGo),e(M2,UD),e(UD,AGo),e(M2,yGo),e(Se,LGo),e(Se,E2),e(E2,Vfe),e(Vfe,xGo),e(E2,kGo),e(E2,JD),e(JD,SGo),e(E2,RGo),e(Se,BGo),e(Se,C2),e(C2,Xfe),e(Xfe,PGo),e(C2,$Go),e(C2,YD),e(YD,IGo),e(C2,qGo),e(Se,NGo),e(Se,w2),e(w2,zfe),e(zfe,jGo),e(w2,DGo),e(w2,KD),e(KD,GGo),e(w2,OGo),e(Se,VGo),e(Se,A2),e(A2,Qfe),e(Qfe,XGo),e(A2,zGo),e(A2,ZD),e(ZD,QGo),e(A2,WGo),e(Se,HGo),e(Se,y2),e(y2,Wfe),e(Wfe,UGo),e(y2,JGo),e(y2,eG),e(eG,YGo),e(y2,KGo),e(Se,ZGo),e(Se,L2),e(L2,Hfe),e(Hfe,eOo),e(L2,oOo),e(L2,oG),e(oG,rOo),e(L2,tOo),e(Je,aOo),e(Je,x2),e(x2,nOo),e(x2,Ufe),e(Ufe,sOo),e(x2,lOo),e(x2,Jfe),e(Jfe,iOo),e(Je,dOo),e(Je,Yfe),e(Yfe,cOo),e(Je,fOo),g(Gw,Je,null),b(c,IRe,u),b(c,Nd,u),e(Nd,k2),e(k2,Kfe),g(Ow,Kfe,null),e(Nd,mOo),e(Nd,Zfe),e(Zfe,gOo),b(c,qRe,u),b(c,cr,u),g(Vw,cr,null),e(cr,hOo),e(cr,jd),e(jd,pOo),e(jd,rG),e(rG,_Oo),e(jd,uOo),e(jd,tG),e(tG,bOo),e(jd,FOo),e(cr,vOo),e(cr,Xw),e(Xw,TOo),e(Xw,eme),e(eme,MOo),e(Xw,EOo),e(cr,COo),e(cr,at),g(zw,at,null),e(at,wOo),e(at,ome),e(ome,AOo),e(at,yOo),e(at,Dd),e(Dd,LOo),e(Dd,rme),e(rme,xOo),e(Dd,kOo),e(Dd,aG),e(aG,SOo),e(Dd,ROo),e(at,BOo),e(at,tme),e(tme,POo),e(at,$Oo),g(Qw,at,null),e(cr,IOo),e(cr,Ye),g(Ww,Ye,null),e(Ye,qOo),e(Ye,ame),e(ame,NOo),e(Ye,jOo),e(Ye,an),e(an,DOo),e(an,nme),e(nme,GOo),e(an,OOo),e(an,sme),e(sme,VOo),e(an,XOo),e(an,lme),e(lme,zOo),e(an,QOo),e(Ye,WOo),e(Ye,nn),e(nn,S2),e(S2,ime),e(ime,HOo),e(S2,UOo),e(S2,nG),e(nG,JOo),e(S2,YOo),e(nn,KOo),e(nn,R2),e(R2,dme),e(dme,ZOo),e(R2,eVo),e(R2,sG),e(sG,oVo),e(R2,rVo),e(nn,tVo),e(nn,B2),e(B2,cme),e(cme,aVo),e(B2,nVo),e(B2,lG),e(lG,sVo),e(B2,lVo),e(nn,iVo),e(nn,P2),e(P2,fme),e(fme,dVo),e(P2,cVo),e(P2,iG),e(iG,fVo),e(P2,mVo),e(Ye,gVo),e(Ye,$2),e($2,hVo),e($2,mme),e(mme,pVo),e($2,_Vo),e($2,gme),e(gme,uVo),e(Ye,bVo),e(Ye,hme),e(hme,FVo),e(Ye,vVo),g(Hw,Ye,null),b(c,NRe,u),b(c,Gd,u),e(Gd,I2),e(I2,pme),g(Uw,pme,null),e(Gd,TVo),e(Gd,_me),e(_me,MVo),b(c,jRe,u),b(c,fr,u),g(Jw,fr,null),e(fr,EVo),e(fr,Od),e(Od,CVo),e(Od,dG),e(dG,wVo),e(Od,AVo),e(Od,cG),e(cG,yVo),e(Od,LVo),e(fr,xVo),e(fr,Yw),e(Yw,kVo),e(Yw,ume),e(ume,SVo),e(Yw,RVo),e(fr,BVo),e(fr,nt),g(Kw,nt,null),e(nt,PVo),e(nt,bme),e(bme,$Vo),e(nt,IVo),e(nt,Vd),e(Vd,qVo),e(Vd,Fme),e(Fme,NVo),e(Vd,jVo),e(Vd,fG),e(fG,DVo),e(Vd,GVo),e(nt,OVo),e(nt,vme),e(vme,VVo),e(nt,XVo),g(Zw,nt,null),e(fr,zVo),e(fr,Ke),g(eA,Ke,null),e(Ke,QVo),e(Ke,Tme),e(Tme,WVo),e(Ke,HVo),e(Ke,sn),e(sn,UVo),e(sn,Mme),e(Mme,JVo),e(sn,YVo),e(sn,Eme),e(Eme,KVo),e(sn,ZVo),e(sn,Cme),e(Cme,eXo),e(sn,oXo),e(Ke,rXo),e(Ke,Re),e(Re,q2),e(q2,wme),e(wme,tXo),e(q2,aXo),e(q2,mG),e(mG,nXo),e(q2,sXo),e(Re,lXo),e(Re,N2),e(N2,Ame),e(Ame,iXo),e(N2,dXo),e(N2,gG),e(gG,cXo),e(N2,fXo),e(Re,mXo),e(Re,j2),e(j2,yme),e(yme,gXo),e(j2,hXo),e(j2,hG),e(hG,pXo),e(j2,_Xo),e(Re,uXo),e(Re,D2),e(D2,Lme),e(Lme,bXo),e(D2,FXo),e(D2,pG),e(pG,vXo),e(D2,TXo),e(Re,MXo),e(Re,G2),e(G2,xme),e(xme,EXo),e(G2,CXo),e(G2,_G),e(_G,wXo),e(G2,AXo),e(Re,yXo),e(Re,O2),e(O2,kme),e(kme,LXo),e(O2,xXo),e(O2,uG),e(uG,kXo),e(O2,SXo),e(Re,RXo),e(Re,V2),e(V2,Sme),e(Sme,BXo),e(V2,PXo),e(V2,bG),e(bG,$Xo),e(V2,IXo),e(Re,qXo),e(Re,X2),e(X2,Rme),e(Rme,NXo),e(X2,jXo),e(X2,FG),e(FG,DXo),e(X2,GXo),e(Ke,OXo),e(Ke,z2),e(z2,VXo),e(z2,Bme),e(Bme,XXo),e(z2,zXo),e(z2,Pme),e(Pme,QXo),e(Ke,WXo),e(Ke,$me),e($me,HXo),e(Ke,UXo),g(oA,Ke,null),b(c,DRe,u),b(c,Xd,u),e(Xd,Q2),e(Q2,Ime),g(rA,Ime,null),e(Xd,JXo),e(Xd,qme),e(qme,YXo),b(c,GRe,u),b(c,mr,u),g(tA,mr,null),e(mr,KXo),e(mr,zd),e(zd,ZXo),e(zd,vG),e(vG,ezo),e(zd,ozo),e(zd,TG),e(TG,rzo),e(zd,tzo),e(mr,azo),e(mr,aA),e(aA,nzo),e(aA,Nme),e(Nme,szo),e(aA,lzo),e(mr,izo),e(mr,st),g(nA,st,null),e(st,dzo),e(st,jme),e(jme,czo),e(st,fzo),e(st,Qd),e(Qd,mzo),e(Qd,Dme),e(Dme,gzo),e(Qd,hzo),e(Qd,MG),e(MG,pzo),e(Qd,_zo),e(st,uzo),e(st,Gme),e(Gme,bzo),e(st,Fzo),g(sA,st,null),e(mr,vzo),e(mr,Ze),g(lA,Ze,null),e(Ze,Tzo),e(Ze,Ome),e(Ome,Mzo),e(Ze,Ezo),e(Ze,ln),e(ln,Czo),e(ln,Vme),e(Vme,wzo),e(ln,Azo),e(ln,Xme),e(Xme,yzo),e(ln,Lzo),e(ln,zme),e(zme,xzo),e(ln,kzo),e(Ze,Szo),e(Ze,iA),e(iA,W2),e(W2,Qme),e(Qme,Rzo),e(W2,Bzo),e(W2,EG),e(EG,Pzo),e(W2,$zo),e(iA,Izo),e(iA,H2),e(H2,Wme),e(Wme,qzo),e(H2,Nzo),e(H2,CG),e(CG,jzo),e(H2,Dzo),e(Ze,Gzo),e(Ze,U2),e(U2,Ozo),e(U2,Hme),e(Hme,Vzo),e(U2,Xzo),e(U2,Ume),e(Ume,zzo),e(Ze,Qzo),e(Ze,Jme),e(Jme,Wzo),e(Ze,Hzo),g(dA,Ze,null),b(c,ORe,u),b(c,Wd,u),e(Wd,J2),e(J2,Yme),g(cA,Yme,null),e(Wd,Uzo),e(Wd,Kme),e(Kme,Jzo),b(c,VRe,u),b(c,gr,u),g(fA,gr,null),e(gr,Yzo),e(gr,Hd),e(Hd,Kzo),e(Hd,wG),e(wG,Zzo),e(Hd,eQo),e(Hd,AG),e(AG,oQo),e(Hd,rQo),e(gr,tQo),e(gr,mA),e(mA,aQo),e(mA,Zme),e(Zme,nQo),e(mA,sQo),e(gr,lQo),e(gr,lt),g(gA,lt,null),e(lt,iQo),e(lt,ege),e(ege,dQo),e(lt,cQo),e(lt,Ud),e(Ud,fQo),e(Ud,oge),e(oge,mQo),e(Ud,gQo),e(Ud,yG),e(yG,hQo),e(Ud,pQo),e(lt,_Qo),e(lt,rge),e(rge,uQo),e(lt,bQo),g(hA,lt,null),e(gr,FQo),e(gr,eo),g(pA,eo,null),e(eo,vQo),e(eo,tge),e(tge,TQo),e(eo,MQo),e(eo,dn),e(dn,EQo),e(dn,age),e(age,CQo),e(dn,wQo),e(dn,nge),e(nge,AQo),e(dn,yQo),e(dn,sge),e(sge,LQo),e(dn,xQo),e(eo,kQo),e(eo,cn),e(cn,Y2),e(Y2,lge),e(lge,SQo),e(Y2,RQo),e(Y2,LG),e(LG,BQo),e(Y2,PQo),e(cn,$Qo),e(cn,K2),e(K2,ige),e(ige,IQo),e(K2,qQo),e(K2,xG),e(xG,NQo),e(K2,jQo),e(cn,DQo),e(cn,Z2),e(Z2,dge),e(dge,GQo),e(Z2,OQo),e(Z2,kG),e(kG,VQo),e(Z2,XQo),e(cn,zQo),e(cn,eF),e(eF,cge),e(cge,QQo),e(eF,WQo),e(eF,SG),e(SG,HQo),e(eF,UQo),e(eo,JQo),e(eo,oF),e(oF,YQo),e(oF,fge),e(fge,KQo),e(oF,ZQo),e(oF,mge),e(mge,eWo),e(eo,oWo),e(eo,gge),e(gge,rWo),e(eo,tWo),g(_A,eo,null),b(c,XRe,u),b(c,Jd,u),e(Jd,rF),e(rF,hge),g(uA,hge,null),e(Jd,aWo),e(Jd,pge),e(pge,nWo),b(c,zRe,u),b(c,hr,u),g(bA,hr,null),e(hr,sWo),e(hr,Yd),e(Yd,lWo),e(Yd,RG),e(RG,iWo),e(Yd,dWo),e(Yd,BG),e(BG,cWo),e(Yd,fWo),e(hr,mWo),e(hr,FA),e(FA,gWo),e(FA,_ge),e(_ge,hWo),e(FA,pWo),e(hr,_Wo),e(hr,it),g(vA,it,null),e(it,uWo),e(it,uge),e(uge,bWo),e(it,FWo),e(it,Kd),e(Kd,vWo),e(Kd,bge),e(bge,TWo),e(Kd,MWo),e(Kd,PG),e(PG,EWo),e(Kd,CWo),e(it,wWo),e(it,Fge),e(Fge,AWo),e(it,yWo),g(TA,it,null),e(hr,LWo),e(hr,oo),g(MA,oo,null),e(oo,xWo),e(oo,vge),e(vge,kWo),e(oo,SWo),e(oo,fn),e(fn,RWo),e(fn,Tge),e(Tge,BWo),e(fn,PWo),e(fn,Mge),e(Mge,$Wo),e(fn,IWo),e(fn,Ege),e(Ege,qWo),e(fn,NWo),e(oo,jWo),e(oo,Zd),e(Zd,tF),e(tF,Cge),e(Cge,DWo),e(tF,GWo),e(tF,$G),e($G,OWo),e(tF,VWo),e(Zd,XWo),e(Zd,aF),e(aF,wge),e(wge,zWo),e(aF,QWo),e(aF,IG),e(IG,WWo),e(aF,HWo),e(Zd,UWo),e(Zd,nF),e(nF,Age),e(Age,JWo),e(nF,YWo),e(nF,qG),e(qG,KWo),e(nF,ZWo),e(oo,eHo),e(oo,sF),e(sF,oHo),e(sF,yge),e(yge,rHo),e(sF,tHo),e(sF,Lge),e(Lge,aHo),e(oo,nHo),e(oo,xge),e(xge,sHo),e(oo,lHo),g(EA,oo,null),b(c,QRe,u),b(c,ec,u),e(ec,lF),e(lF,kge),g(CA,kge,null),e(ec,iHo),e(ec,Sge),e(Sge,dHo),b(c,WRe,u),b(c,pr,u),g(wA,pr,null),e(pr,cHo),e(pr,oc),e(oc,fHo),e(oc,NG),e(NG,mHo),e(oc,gHo),e(oc,jG),e(jG,hHo),e(oc,pHo),e(pr,_Ho),e(pr,AA),e(AA,uHo),e(AA,Rge),e(Rge,bHo),e(AA,FHo),e(pr,vHo),e(pr,dt),g(yA,dt,null),e(dt,THo),e(dt,Bge),e(Bge,MHo),e(dt,EHo),e(dt,rc),e(rc,CHo),e(rc,Pge),e(Pge,wHo),e(rc,AHo),e(rc,DG),e(DG,yHo),e(rc,LHo),e(dt,xHo),e(dt,$ge),e($ge,kHo),e(dt,SHo),g(LA,dt,null),e(pr,RHo),e(pr,ro),g(xA,ro,null),e(ro,BHo),e(ro,Ige),e(Ige,PHo),e(ro,$Ho),e(ro,mn),e(mn,IHo),e(mn,qge),e(qge,qHo),e(mn,NHo),e(mn,Nge),e(Nge,jHo),e(mn,DHo),e(mn,jge),e(jge,GHo),e(mn,OHo),e(ro,VHo),e(ro,Dge),e(Dge,iF),e(iF,Gge),e(Gge,XHo),e(iF,zHo),e(iF,GG),e(GG,QHo),e(iF,WHo),e(ro,HHo),e(ro,dF),e(dF,UHo),e(dF,Oge),e(Oge,JHo),e(dF,YHo),e(dF,Vge),e(Vge,KHo),e(ro,ZHo),e(ro,Xge),e(Xge,eUo),e(ro,oUo),g(kA,ro,null),b(c,HRe,u),b(c,tc,u),e(tc,cF),e(cF,zge),g(SA,zge,null),e(tc,rUo),e(tc,Qge),e(Qge,tUo),b(c,URe,u),b(c,_r,u),g(RA,_r,null),e(_r,aUo),e(_r,ac),e(ac,nUo),e(ac,OG),e(OG,sUo),e(ac,lUo),e(ac,VG),e(VG,iUo),e(ac,dUo),e(_r,cUo),e(_r,BA),e(BA,fUo),e(BA,Wge),e(Wge,mUo),e(BA,gUo),e(_r,hUo),e(_r,ct),g(PA,ct,null),e(ct,pUo),e(ct,Hge),e(Hge,_Uo),e(ct,uUo),e(ct,nc),e(nc,bUo),e(nc,Uge),e(Uge,FUo),e(nc,vUo),e(nc,XG),e(XG,TUo),e(nc,MUo),e(ct,EUo),e(ct,Jge),e(Jge,CUo),e(ct,wUo),g($A,ct,null),e(_r,AUo),e(_r,to),g(IA,to,null),e(to,yUo),e(to,Yge),e(Yge,LUo),e(to,xUo),e(to,gn),e(gn,kUo),e(gn,Kge),e(Kge,SUo),e(gn,RUo),e(gn,Zge),e(Zge,BUo),e(gn,PUo),e(gn,ehe),e(ehe,$Uo),e(gn,IUo),e(to,qUo),e(to,ohe),e(ohe,fF),e(fF,rhe),e(rhe,NUo),e(fF,jUo),e(fF,zG),e(zG,DUo),e(fF,GUo),e(to,OUo),e(to,mF),e(mF,VUo),e(mF,the),e(the,XUo),e(mF,zUo),e(mF,ahe),e(ahe,QUo),e(to,WUo),e(to,nhe),e(nhe,HUo),e(to,UUo),g(qA,to,null),b(c,JRe,u),b(c,sc,u),e(sc,gF),e(gF,she),g(NA,she,null),e(sc,JUo),e(sc,lhe),e(lhe,YUo),b(c,YRe,u),b(c,ur,u),g(jA,ur,null),e(ur,KUo),e(ur,lc),e(lc,ZUo),e(lc,QG),e(QG,eJo),e(lc,oJo),e(lc,WG),e(WG,rJo),e(lc,tJo),e(ur,aJo),e(ur,DA),e(DA,nJo),e(DA,ihe),e(ihe,sJo),e(DA,lJo),e(ur,iJo),e(ur,ft),g(GA,ft,null),e(ft,dJo),e(ft,dhe),e(dhe,cJo),e(ft,fJo),e(ft,ic),e(ic,mJo),e(ic,che),e(che,gJo),e(ic,hJo),e(ic,HG),e(HG,pJo),e(ic,_Jo),e(ft,uJo),e(ft,fhe),e(fhe,bJo),e(ft,FJo),g(OA,ft,null),e(ur,vJo),e(ur,ao),g(VA,ao,null),e(ao,TJo),e(ao,mhe),e(mhe,MJo),e(ao,EJo),e(ao,hn),e(hn,CJo),e(hn,ghe),e(ghe,wJo),e(hn,AJo),e(hn,hhe),e(hhe,yJo),e(hn,LJo),e(hn,phe),e(phe,xJo),e(hn,kJo),e(ao,SJo),e(ao,dc),e(dc,hF),e(hF,_he),e(_he,RJo),e(hF,BJo),e(hF,UG),e(UG,PJo),e(hF,$Jo),e(dc,IJo),e(dc,pF),e(pF,uhe),e(uhe,qJo),e(pF,NJo),e(pF,JG),e(JG,jJo),e(pF,DJo),e(dc,GJo),e(dc,_F),e(_F,bhe),e(bhe,OJo),e(_F,VJo),e(_F,YG),e(YG,XJo),e(_F,zJo),e(ao,QJo),e(ao,uF),e(uF,WJo),e(uF,Fhe),e(Fhe,HJo),e(uF,UJo),e(uF,vhe),e(vhe,JJo),e(ao,YJo),e(ao,The),e(The,KJo),e(ao,ZJo),g(XA,ao,null),b(c,KRe,u),b(c,cc,u),e(cc,bF),e(bF,Mhe),g(zA,Mhe,null),e(cc,eYo),e(cc,Ehe),e(Ehe,oYo),b(c,ZRe,u),b(c,br,u),g(QA,br,null),e(br,rYo),e(br,fc),e(fc,tYo),e(fc,KG),e(KG,aYo),e(fc,nYo),e(fc,ZG),e(ZG,sYo),e(fc,lYo),e(br,iYo),e(br,WA),e(WA,dYo),e(WA,Che),e(Che,cYo),e(WA,fYo),e(br,mYo),e(br,mt),g(HA,mt,null),e(mt,gYo),e(mt,whe),e(whe,hYo),e(mt,pYo),e(mt,mc),e(mc,_Yo),e(mc,Ahe),e(Ahe,uYo),e(mc,bYo),e(mc,eO),e(eO,FYo),e(mc,vYo),e(mt,TYo),e(mt,yhe),e(yhe,MYo),e(mt,EYo),g(UA,mt,null),e(br,CYo),e(br,no),g(JA,no,null),e(no,wYo),e(no,Lhe),e(Lhe,AYo),e(no,yYo),e(no,pn),e(pn,LYo),e(pn,xhe),e(xhe,xYo),e(pn,kYo),e(pn,khe),e(khe,SYo),e(pn,RYo),e(pn,She),e(She,BYo),e(pn,PYo),e(no,$Yo),e(no,Rhe),e(Rhe,FF),e(FF,Bhe),e(Bhe,IYo),e(FF,qYo),e(FF,oO),e(oO,NYo),e(FF,jYo),e(no,DYo),e(no,vF),e(vF,GYo),e(vF,Phe),e(Phe,OYo),e(vF,VYo),e(vF,$he),e($he,XYo),e(no,zYo),e(no,Ihe),e(Ihe,QYo),e(no,WYo),g(YA,no,null),b(c,eBe,u),b(c,gc,u),e(gc,TF),e(TF,qhe),g(KA,qhe,null),e(gc,HYo),e(gc,Nhe),e(Nhe,UYo),b(c,oBe,u),b(c,Fr,u),g(ZA,Fr,null),e(Fr,JYo),e(Fr,hc),e(hc,YYo),e(hc,rO),e(rO,KYo),e(hc,ZYo),e(hc,tO),e(tO,eKo),e(hc,oKo),e(Fr,rKo),e(Fr,e0),e(e0,tKo),e(e0,jhe),e(jhe,aKo),e(e0,nKo),e(Fr,sKo),e(Fr,gt),g(o0,gt,null),e(gt,lKo),e(gt,Dhe),e(Dhe,iKo),e(gt,dKo),e(gt,pc),e(pc,cKo),e(pc,Ghe),e(Ghe,fKo),e(pc,mKo),e(pc,aO),e(aO,gKo),e(pc,hKo),e(gt,pKo),e(gt,Ohe),e(Ohe,_Ko),e(gt,uKo),g(r0,gt,null),e(Fr,bKo),e(Fr,ho),g(t0,ho,null),e(ho,FKo),e(ho,Vhe),e(Vhe,vKo),e(ho,TKo),e(ho,_n),e(_n,MKo),e(_n,Xhe),e(Xhe,EKo),e(_n,CKo),e(_n,zhe),e(zhe,wKo),e(_n,AKo),e(_n,Qhe),e(Qhe,yKo),e(_n,LKo),e(ho,xKo),e(ho,x),e(x,MF),e(MF,Whe),e(Whe,kKo),e(MF,SKo),e(MF,nO),e(nO,RKo),e(MF,BKo),e(x,PKo),e(x,EF),e(EF,Hhe),e(Hhe,$Ko),e(EF,IKo),e(EF,sO),e(sO,qKo),e(EF,NKo),e(x,jKo),e(x,CF),e(CF,Uhe),e(Uhe,DKo),e(CF,GKo),e(CF,lO),e(lO,OKo),e(CF,VKo),e(x,XKo),e(x,wF),e(wF,Jhe),e(Jhe,zKo),e(wF,QKo),e(wF,iO),e(iO,WKo),e(wF,HKo),e(x,UKo),e(x,AF),e(AF,Yhe),e(Yhe,JKo),e(AF,YKo),e(AF,dO),e(dO,KKo),e(AF,ZKo),e(x,eZo),e(x,yF),e(yF,Khe),e(Khe,oZo),e(yF,rZo),e(yF,cO),e(cO,tZo),e(yF,aZo),e(x,nZo),e(x,LF),e(LF,Zhe),e(Zhe,sZo),e(LF,lZo),e(LF,fO),e(fO,iZo),e(LF,dZo),e(x,cZo),e(x,xF),e(xF,epe),e(epe,fZo),e(xF,mZo),e(xF,mO),e(mO,gZo),e(xF,hZo),e(x,pZo),e(x,kF),e(kF,ope),e(ope,_Zo),e(kF,uZo),e(kF,gO),e(gO,bZo),e(kF,FZo),e(x,vZo),e(x,SF),e(SF,rpe),e(rpe,TZo),e(SF,MZo),e(SF,hO),e(hO,EZo),e(SF,CZo),e(x,wZo),e(x,RF),e(RF,tpe),e(tpe,AZo),e(RF,yZo),e(RF,pO),e(pO,LZo),e(RF,xZo),e(x,kZo),e(x,BF),e(BF,ape),e(ape,SZo),e(BF,RZo),e(BF,_O),e(_O,BZo),e(BF,PZo),e(x,$Zo),e(x,PF),e(PF,npe),e(npe,IZo),e(PF,qZo),e(PF,uO),e(uO,NZo),e(PF,jZo),e(x,DZo),e(x,$F),e($F,spe),e(spe,GZo),e($F,OZo),e($F,bO),e(bO,VZo),e($F,XZo),e(x,zZo),e(x,IF),e(IF,lpe),e(lpe,QZo),e(IF,WZo),e(IF,FO),e(FO,HZo),e(IF,UZo),e(x,JZo),e(x,qF),e(qF,ipe),e(ipe,YZo),e(qF,KZo),e(qF,vO),e(vO,ZZo),e(qF,eer),e(x,oer),e(x,Gs),e(Gs,dpe),e(dpe,rer),e(Gs,ter),e(Gs,TO),e(TO,aer),e(Gs,ner),e(Gs,MO),e(MO,ser),e(Gs,ler),e(x,ier),e(x,NF),e(NF,cpe),e(cpe,der),e(NF,cer),e(NF,EO),e(EO,fer),e(NF,mer),e(x,ger),e(x,jF),e(jF,fpe),e(fpe,her),e(jF,per),e(jF,CO),e(CO,_er),e(jF,uer),e(x,ber),e(x,DF),e(DF,mpe),e(mpe,Fer),e(DF,ver),e(DF,wO),e(wO,Ter),e(DF,Mer),e(x,Eer),e(x,GF),e(GF,gpe),e(gpe,Cer),e(GF,wer),e(GF,AO),e(AO,Aer),e(GF,yer),e(x,Ler),e(x,OF),e(OF,hpe),e(hpe,xer),e(OF,ker),e(OF,yO),e(yO,Ser),e(OF,Rer),e(x,Ber),e(x,VF),e(VF,ppe),e(ppe,Per),e(VF,$er),e(VF,LO),e(LO,Ier),e(VF,qer),e(x,Ner),e(x,XF),e(XF,_pe),e(_pe,jer),e(XF,Der),e(XF,xO),e(xO,Ger),e(XF,Oer),e(x,Ver),e(x,zF),e(zF,upe),e(upe,Xer),e(zF,zer),e(zF,kO),e(kO,Qer),e(zF,Wer),e(x,Her),e(x,QF),e(QF,bpe),e(bpe,Uer),e(QF,Jer),e(QF,SO),e(SO,Yer),e(QF,Ker),e(x,Zer),e(x,WF),e(WF,Fpe),e(Fpe,eor),e(WF,oor),e(WF,RO),e(RO,ror),e(WF,tor),e(x,aor),e(x,HF),e(HF,vpe),e(vpe,nor),e(HF,sor),e(HF,BO),e(BO,lor),e(HF,ior),e(x,dor),e(x,UF),e(UF,Tpe),e(Tpe,cor),e(UF,mor),e(UF,PO),e(PO,gor),e(UF,hor),e(x,por),e(x,JF),e(JF,Mpe),e(Mpe,_or),e(JF,uor),e(JF,$O),e($O,bor),e(JF,For),e(x,vor),e(x,YF),e(YF,Epe),e(Epe,Tor),e(YF,Mor),e(YF,IO),e(IO,Eor),e(YF,Cor),e(x,wor),e(x,KF),e(KF,Cpe),e(Cpe,Aor),e(KF,yor),e(KF,qO),e(qO,Lor),e(KF,xor),e(x,kor),e(x,ZF),e(ZF,wpe),e(wpe,Sor),e(ZF,Ror),e(ZF,NO),e(NO,Bor),e(ZF,Por),e(x,$or),e(x,ev),e(ev,Ape),e(Ape,Ior),e(ev,qor),e(ev,jO),e(jO,Nor),e(ev,jor),e(x,Dor),e(x,ov),e(ov,ype),e(ype,Gor),e(ov,Oor),e(ov,DO),e(DO,Vor),e(ov,Xor),e(x,zor),e(x,rv),e(rv,Lpe),e(Lpe,Qor),e(rv,Wor),e(rv,GO),e(GO,Hor),e(rv,Uor),e(x,Jor),e(x,tv),e(tv,xpe),e(xpe,Yor),e(tv,Kor),e(tv,OO),e(OO,Zor),e(tv,err),e(x,orr),e(x,av),e(av,kpe),e(kpe,rrr),e(av,trr),e(av,VO),e(VO,arr),e(av,nrr),e(x,srr),e(x,nv),e(nv,Spe),e(Spe,lrr),e(nv,irr),e(nv,XO),e(XO,drr),e(nv,crr),e(x,frr),e(x,sv),e(sv,Rpe),e(Rpe,mrr),e(sv,grr),e(sv,zO),e(zO,hrr),e(sv,prr),e(x,_rr),e(x,lv),e(lv,Bpe),e(Bpe,urr),e(lv,brr),e(lv,QO),e(QO,Frr),e(lv,vrr),e(x,Trr),e(x,iv),e(iv,Ppe),e(Ppe,Mrr),e(iv,Err),e(iv,WO),e(WO,Crr),e(iv,wrr),e(x,Arr),e(x,dv),e(dv,$pe),e($pe,yrr),e(dv,Lrr),e(dv,HO),e(HO,xrr),e(dv,krr),e(x,Srr),e(x,cv),e(cv,Ipe),e(Ipe,Rrr),e(cv,Brr),e(cv,UO),e(UO,Prr),e(cv,$rr),e(ho,Irr),e(ho,qpe),e(qpe,qrr),e(ho,Nrr),g(a0,ho,null),b(c,rBe,u),b(c,_c,u),e(_c,fv),e(fv,Npe),g(n0,Npe,null),e(_c,jrr),e(_c,jpe),e(jpe,Drr),b(c,tBe,u),b(c,vr,u),g(s0,vr,null),e(vr,Grr),e(vr,uc),e(uc,Orr),e(uc,JO),e(JO,Vrr),e(uc,Xrr),e(uc,YO),e(YO,zrr),e(uc,Qrr),e(vr,Wrr),e(vr,l0),e(l0,Hrr),e(l0,Dpe),e(Dpe,Urr),e(l0,Jrr),e(vr,Yrr),e(vr,ht),g(i0,ht,null),e(ht,Krr),e(ht,Gpe),e(Gpe,Zrr),e(ht,etr),e(ht,bc),e(bc,otr),e(bc,Ope),e(Ope,rtr),e(bc,ttr),e(bc,KO),e(KO,atr),e(bc,ntr),e(ht,str),e(ht,Vpe),e(Vpe,ltr),e(ht,itr),g(d0,ht,null),e(vr,dtr),e(vr,po),g(c0,po,null),e(po,ctr),e(po,Xpe),e(Xpe,ftr),e(po,mtr),e(po,un),e(un,gtr),e(un,zpe),e(zpe,htr),e(un,ptr),e(un,Qpe),e(Qpe,_tr),e(un,utr),e(un,Wpe),e(Wpe,btr),e(un,Ftr),e(po,vtr),e(po,H),e(H,mv),e(mv,Hpe),e(Hpe,Ttr),e(mv,Mtr),e(mv,ZO),e(ZO,Etr),e(mv,Ctr),e(H,wtr),e(H,gv),e(gv,Upe),e(Upe,Atr),e(gv,ytr),e(gv,eV),e(eV,Ltr),e(gv,xtr),e(H,ktr),e(H,hv),e(hv,Jpe),e(Jpe,Str),e(hv,Rtr),e(hv,oV),e(oV,Btr),e(hv,Ptr),e(H,$tr),e(H,pv),e(pv,Ype),e(Ype,Itr),e(pv,qtr),e(pv,rV),e(rV,Ntr),e(pv,jtr),e(H,Dtr),e(H,_v),e(_v,Kpe),e(Kpe,Gtr),e(_v,Otr),e(_v,tV),e(tV,Vtr),e(_v,Xtr),e(H,ztr),e(H,uv),e(uv,Zpe),e(Zpe,Qtr),e(uv,Wtr),e(uv,aV),e(aV,Htr),e(uv,Utr),e(H,Jtr),e(H,bv),e(bv,e_e),e(e_e,Ytr),e(bv,Ktr),e(bv,nV),e(nV,Ztr),e(bv,ear),e(H,oar),e(H,Fv),e(Fv,o_e),e(o_e,rar),e(Fv,tar),e(Fv,sV),e(sV,aar),e(Fv,nar),e(H,sar),e(H,vv),e(vv,r_e),e(r_e,lar),e(vv,iar),e(vv,lV),e(lV,dar),e(vv,car),e(H,far),e(H,Tv),e(Tv,t_e),e(t_e,mar),e(Tv,gar),e(Tv,iV),e(iV,har),e(Tv,par),e(H,_ar),e(H,Mv),e(Mv,a_e),e(a_e,uar),e(Mv,bar),e(Mv,dV),e(dV,Far),e(Mv,Tar),e(H,Mar),e(H,Ev),e(Ev,n_e),e(n_e,Ear),e(Ev,Car),e(Ev,cV),e(cV,war),e(Ev,Aar),e(H,yar),e(H,Cv),e(Cv,s_e),e(s_e,Lar),e(Cv,xar),e(Cv,fV),e(fV,kar),e(Cv,Sar),e(H,Rar),e(H,wv),e(wv,l_e),e(l_e,Bar),e(wv,Par),e(wv,mV),e(mV,$ar),e(wv,Iar),e(H,qar),e(H,Av),e(Av,i_e),e(i_e,Nar),e(Av,jar),e(Av,gV),e(gV,Dar),e(Av,Gar),e(H,Oar),e(H,yv),e(yv,d_e),e(d_e,Var),e(yv,Xar),e(yv,hV),e(hV,zar),e(yv,Qar),e(H,War),e(H,Lv),e(Lv,c_e),e(c_e,Har),e(Lv,Uar),e(Lv,pV),e(pV,Jar),e(Lv,Yar),e(H,Kar),e(H,xv),e(xv,f_e),e(f_e,Zar),e(xv,enr),e(xv,_V),e(_V,onr),e(xv,rnr),e(H,tnr),e(H,kv),e(kv,m_e),e(m_e,anr),e(kv,nnr),e(kv,uV),e(uV,snr),e(kv,lnr),e(H,inr),e(H,Sv),e(Sv,g_e),e(g_e,dnr),e(Sv,cnr),e(Sv,bV),e(bV,fnr),e(Sv,mnr),e(H,gnr),e(H,Rv),e(Rv,h_e),e(h_e,hnr),e(Rv,pnr),e(Rv,FV),e(FV,_nr),e(Rv,unr),e(H,bnr),e(H,Bv),e(Bv,p_e),e(p_e,Fnr),e(Bv,vnr),e(Bv,vV),e(vV,Tnr),e(Bv,Mnr),e(H,Enr),e(H,Pv),e(Pv,__e),e(__e,Cnr),e(Pv,wnr),e(Pv,TV),e(TV,Anr),e(Pv,ynr),e(po,Lnr),e(po,u_e),e(u_e,xnr),e(po,knr),g(f0,po,null),b(c,aBe,u),b(c,Fc,u),e(Fc,$v),e($v,b_e),g(m0,b_e,null),e(Fc,Snr),e(Fc,F_e),e(F_e,Rnr),b(c,nBe,u),b(c,Tr,u),g(g0,Tr,null),e(Tr,Bnr),e(Tr,vc),e(vc,Pnr),e(vc,MV),e(MV,$nr),e(vc,Inr),e(vc,EV),e(EV,qnr),e(vc,Nnr),e(Tr,jnr),e(Tr,h0),e(h0,Dnr),e(h0,v_e),e(v_e,Gnr),e(h0,Onr),e(Tr,Vnr),e(Tr,pt),g(p0,pt,null),e(pt,Xnr),e(pt,T_e),e(T_e,znr),e(pt,Qnr),e(pt,Tc),e(Tc,Wnr),e(Tc,M_e),e(M_e,Hnr),e(Tc,Unr),e(Tc,CV),e(CV,Jnr),e(Tc,Ynr),e(pt,Knr),e(pt,E_e),e(E_e,Znr),e(pt,esr),g(_0,pt,null),e(Tr,osr),e(Tr,_o),g(u0,_o,null),e(_o,rsr),e(_o,C_e),e(C_e,tsr),e(_o,asr),e(_o,bn),e(bn,nsr),e(bn,w_e),e(w_e,ssr),e(bn,lsr),e(bn,A_e),e(A_e,isr),e(bn,dsr),e(bn,y_e),e(y_e,csr),e(bn,fsr),e(_o,msr),e(_o,ce),e(ce,Iv),e(Iv,L_e),e(L_e,gsr),e(Iv,hsr),e(Iv,wV),e(wV,psr),e(Iv,_sr),e(ce,usr),e(ce,qv),e(qv,x_e),e(x_e,bsr),e(qv,Fsr),e(qv,AV),e(AV,vsr),e(qv,Tsr),e(ce,Msr),e(ce,Nv),e(Nv,k_e),e(k_e,Esr),e(Nv,Csr),e(Nv,yV),e(yV,wsr),e(Nv,Asr),e(ce,ysr),e(ce,jv),e(jv,S_e),e(S_e,Lsr),e(jv,xsr),e(jv,LV),e(LV,ksr),e(jv,Ssr),e(ce,Rsr),e(ce,Dv),e(Dv,R_e),e(R_e,Bsr),e(Dv,Psr),e(Dv,xV),e(xV,$sr),e(Dv,Isr),e(ce,qsr),e(ce,Gv),e(Gv,B_e),e(B_e,Nsr),e(Gv,jsr),e(Gv,kV),e(kV,Dsr),e(Gv,Gsr),e(ce,Osr),e(ce,Ov),e(Ov,P_e),e(P_e,Vsr),e(Ov,Xsr),e(Ov,SV),e(SV,zsr),e(Ov,Qsr),e(ce,Wsr),e(ce,Vv),e(Vv,$_e),e($_e,Hsr),e(Vv,Usr),e(Vv,RV),e(RV,Jsr),e(Vv,Ysr),e(ce,Ksr),e(ce,Xv),e(Xv,I_e),e(I_e,Zsr),e(Xv,elr),e(Xv,BV),e(BV,olr),e(Xv,rlr),e(ce,tlr),e(ce,zv),e(zv,q_e),e(q_e,alr),e(zv,nlr),e(zv,PV),e(PV,slr),e(zv,llr),e(ce,ilr),e(ce,Qv),e(Qv,N_e),e(N_e,dlr),e(Qv,clr),e(Qv,$V),e($V,flr),e(Qv,mlr),e(ce,glr),e(ce,Wv),e(Wv,j_e),e(j_e,hlr),e(Wv,plr),e(Wv,IV),e(IV,_lr),e(Wv,ulr),e(_o,blr),e(_o,D_e),e(D_e,Flr),e(_o,vlr),g(b0,_o,null),b(c,sBe,u),b(c,Mc,u),e(Mc,Hv),e(Hv,G_e),g(F0,G_e,null),e(Mc,Tlr),e(Mc,O_e),e(O_e,Mlr),b(c,lBe,u),b(c,Mr,u),g(v0,Mr,null),e(Mr,Elr),e(Mr,Ec),e(Ec,Clr),e(Ec,qV),e(qV,wlr),e(Ec,Alr),e(Ec,NV),e(NV,ylr),e(Ec,Llr),e(Mr,xlr),e(Mr,T0),e(T0,klr),e(T0,V_e),e(V_e,Slr),e(T0,Rlr),e(Mr,Blr),e(Mr,_t),g(M0,_t,null),e(_t,Plr),e(_t,X_e),e(X_e,$lr),e(_t,Ilr),e(_t,Cc),e(Cc,qlr),e(Cc,z_e),e(z_e,Nlr),e(Cc,jlr),e(Cc,jV),e(jV,Dlr),e(Cc,Glr),e(_t,Olr),e(_t,Q_e),e(Q_e,Vlr),e(_t,Xlr),g(E0,_t,null),e(Mr,zlr),e(Mr,uo),g(C0,uo,null),e(uo,Qlr),e(uo,W_e),e(W_e,Wlr),e(uo,Hlr),e(uo,Fn),e(Fn,Ulr),e(Fn,H_e),e(H_e,Jlr),e(Fn,Ylr),e(Fn,U_e),e(U_e,Klr),e(Fn,Zlr),e(Fn,J_e),e(J_e,eir),e(Fn,oir),e(uo,rir),e(uo,w0),e(w0,Uv),e(Uv,Y_e),e(Y_e,tir),e(Uv,air),e(Uv,DV),e(DV,nir),e(Uv,sir),e(w0,lir),e(w0,Jv),e(Jv,K_e),e(K_e,iir),e(Jv,dir),e(Jv,GV),e(GV,cir),e(Jv,fir),e(uo,mir),e(uo,Z_e),e(Z_e,gir),e(uo,hir),g(A0,uo,null),b(c,iBe,u),b(c,wc,u),e(wc,Yv),e(Yv,eue),g(y0,eue,null),e(wc,pir),e(wc,oue),e(oue,_ir),b(c,dBe,u),b(c,Er,u),g(L0,Er,null),e(Er,uir),e(Er,Ac),e(Ac,bir),e(Ac,OV),e(OV,Fir),e(Ac,vir),e(Ac,VV),e(VV,Tir),e(Ac,Mir),e(Er,Eir),e(Er,x0),e(x0,Cir),e(x0,rue),e(rue,wir),e(x0,Air),e(Er,yir),e(Er,ut),g(k0,ut,null),e(ut,Lir),e(ut,tue),e(tue,xir),e(ut,kir),e(ut,yc),e(yc,Sir),e(yc,aue),e(aue,Rir),e(yc,Bir),e(yc,XV),e(XV,Pir),e(yc,$ir),e(ut,Iir),e(ut,nue),e(nue,qir),e(ut,Nir),g(S0,ut,null),e(Er,jir),e(Er,bo),g(R0,bo,null),e(bo,Dir),e(bo,sue),e(sue,Gir),e(bo,Oir),e(bo,vn),e(vn,Vir),e(vn,lue),e(lue,Xir),e(vn,zir),e(vn,iue),e(iue,Qir),e(vn,Wir),e(vn,due),e(due,Hir),e(vn,Uir),e(bo,Jir),e(bo,J),e(J,Kv),e(Kv,cue),e(cue,Yir),e(Kv,Kir),e(Kv,zV),e(zV,Zir),e(Kv,edr),e(J,odr),e(J,Zv),e(Zv,fue),e(fue,rdr),e(Zv,tdr),e(Zv,QV),e(QV,adr),e(Zv,ndr),e(J,sdr),e(J,e6),e(e6,mue),e(mue,ldr),e(e6,idr),e(e6,WV),e(WV,ddr),e(e6,cdr),e(J,fdr),e(J,o6),e(o6,gue),e(gue,mdr),e(o6,gdr),e(o6,HV),e(HV,hdr),e(o6,pdr),e(J,_dr),e(J,r6),e(r6,hue),e(hue,udr),e(r6,bdr),e(r6,UV),e(UV,Fdr),e(r6,vdr),e(J,Tdr),e(J,t6),e(t6,pue),e(pue,Mdr),e(t6,Edr),e(t6,JV),e(JV,Cdr),e(t6,wdr),e(J,Adr),e(J,a6),e(a6,_ue),e(_ue,ydr),e(a6,Ldr),e(a6,YV),e(YV,xdr),e(a6,kdr),e(J,Sdr),e(J,n6),e(n6,uue),e(uue,Rdr),e(n6,Bdr),e(n6,KV),e(KV,Pdr),e(n6,$dr),e(J,Idr),e(J,s6),e(s6,bue),e(bue,qdr),e(s6,Ndr),e(s6,ZV),e(ZV,jdr),e(s6,Ddr),e(J,Gdr),e(J,l6),e(l6,Fue),e(Fue,Odr),e(l6,Vdr),e(l6,eX),e(eX,Xdr),e(l6,zdr),e(J,Qdr),e(J,i6),e(i6,vue),e(vue,Wdr),e(i6,Hdr),e(i6,oX),e(oX,Udr),e(i6,Jdr),e(J,Ydr),e(J,d6),e(d6,Tue),e(Tue,Kdr),e(d6,Zdr),e(d6,rX),e(rX,ecr),e(d6,ocr),e(J,rcr),e(J,c6),e(c6,Mue),e(Mue,tcr),e(c6,acr),e(c6,tX),e(tX,ncr),e(c6,scr),e(J,lcr),e(J,f6),e(f6,Eue),e(Eue,icr),e(f6,dcr),e(f6,aX),e(aX,ccr),e(f6,fcr),e(J,mcr),e(J,m6),e(m6,Cue),e(Cue,gcr),e(m6,hcr),e(m6,nX),e(nX,pcr),e(m6,_cr),e(J,ucr),e(J,g6),e(g6,wue),e(wue,bcr),e(g6,Fcr),e(g6,sX),e(sX,vcr),e(g6,Tcr),e(J,Mcr),e(J,h6),e(h6,Aue),e(Aue,Ecr),e(h6,Ccr),e(h6,lX),e(lX,wcr),e(h6,Acr),e(J,ycr),e(J,p6),e(p6,yue),e(yue,Lcr),e(p6,xcr),e(p6,iX),e(iX,kcr),e(p6,Scr),e(J,Rcr),e(J,_6),e(_6,Lue),e(Lue,Bcr),e(_6,Pcr),e(_6,dX),e(dX,$cr),e(_6,Icr),e(J,qcr),e(J,u6),e(u6,xue),e(xue,Ncr),e(u6,jcr),e(u6,cX),e(cX,Dcr),e(u6,Gcr),e(bo,Ocr),e(bo,kue),e(kue,Vcr),e(bo,Xcr),g(B0,bo,null),b(c,cBe,u),b(c,Lc,u),e(Lc,b6),e(b6,Sue),g(P0,Sue,null),e(Lc,zcr),e(Lc,Rue),e(Rue,Qcr),b(c,fBe,u),b(c,Cr,u),g($0,Cr,null),e(Cr,Wcr),e(Cr,xc),e(xc,Hcr),e(xc,fX),e(fX,Ucr),e(xc,Jcr),e(xc,mX),e(mX,Ycr),e(xc,Kcr),e(Cr,Zcr),e(Cr,I0),e(I0,efr),e(I0,Bue),e(Bue,ofr),e(I0,rfr),e(Cr,tfr),e(Cr,bt),g(q0,bt,null),e(bt,afr),e(bt,Pue),e(Pue,nfr),e(bt,sfr),e(bt,kc),e(kc,lfr),e(kc,$ue),e($ue,ifr),e(kc,dfr),e(kc,gX),e(gX,cfr),e(kc,ffr),e(bt,mfr),e(bt,Iue),e(Iue,gfr),e(bt,hfr),g(N0,bt,null),e(Cr,pfr),e(Cr,Fo),g(j0,Fo,null),e(Fo,_fr),e(Fo,que),e(que,ufr),e(Fo,bfr),e(Fo,Tn),e(Tn,Ffr),e(Tn,Nue),e(Nue,vfr),e(Tn,Tfr),e(Tn,jue),e(jue,Mfr),e(Tn,Efr),e(Tn,Due),e(Due,Cfr),e(Tn,wfr),e(Fo,Afr),e(Fo,ue),e(ue,F6),e(F6,Gue),e(Gue,yfr),e(F6,Lfr),e(F6,hX),e(hX,xfr),e(F6,kfr),e(ue,Sfr),e(ue,v6),e(v6,Oue),e(Oue,Rfr),e(v6,Bfr),e(v6,pX),e(pX,Pfr),e(v6,$fr),e(ue,Ifr),e(ue,T6),e(T6,Vue),e(Vue,qfr),e(T6,Nfr),e(T6,_X),e(_X,jfr),e(T6,Dfr),e(ue,Gfr),e(ue,M6),e(M6,Xue),e(Xue,Ofr),e(M6,Vfr),e(M6,uX),e(uX,Xfr),e(M6,zfr),e(ue,Qfr),e(ue,E6),e(E6,zue),e(zue,Wfr),e(E6,Hfr),e(E6,bX),e(bX,Ufr),e(E6,Jfr),e(ue,Yfr),e(ue,C6),e(C6,Que),e(Que,Kfr),e(C6,Zfr),e(C6,FX),e(FX,emr),e(C6,omr),e(ue,rmr),e(ue,w6),e(w6,Wue),e(Wue,tmr),e(w6,amr),e(w6,vX),e(vX,nmr),e(w6,smr),e(ue,lmr),e(ue,A6),e(A6,Hue),e(Hue,imr),e(A6,dmr),e(A6,TX),e(TX,cmr),e(A6,fmr),e(ue,mmr),e(ue,y6),e(y6,Uue),e(Uue,gmr),e(y6,hmr),e(y6,MX),e(MX,pmr),e(y6,_mr),e(ue,umr),e(ue,L6),e(L6,Jue),e(Jue,bmr),e(L6,Fmr),e(L6,EX),e(EX,vmr),e(L6,Tmr),e(Fo,Mmr),e(Fo,Yue),e(Yue,Emr),e(Fo,Cmr),g(D0,Fo,null),b(c,mBe,u),b(c,Sc,u),e(Sc,x6),e(x6,Kue),g(G0,Kue,null),e(Sc,wmr),e(Sc,Zue),e(Zue,Amr),b(c,gBe,u),b(c,wr,u),g(O0,wr,null),e(wr,ymr),e(wr,Rc),e(Rc,Lmr),e(Rc,CX),e(CX,xmr),e(Rc,kmr),e(Rc,wX),e(wX,Smr),e(Rc,Rmr),e(wr,Bmr),e(wr,V0),e(V0,Pmr),e(V0,e1e),e(e1e,$mr),e(V0,Imr),e(wr,qmr),e(wr,Ft),g(X0,Ft,null),e(Ft,Nmr),e(Ft,o1e),e(o1e,jmr),e(Ft,Dmr),e(Ft,Bc),e(Bc,Gmr),e(Bc,r1e),e(r1e,Omr),e(Bc,Vmr),e(Bc,AX),e(AX,Xmr),e(Bc,zmr),e(Ft,Qmr),e(Ft,t1e),e(t1e,Wmr),e(Ft,Hmr),g(z0,Ft,null),e(wr,Umr),e(wr,vo),g(Q0,vo,null),e(vo,Jmr),e(vo,a1e),e(a1e,Ymr),e(vo,Kmr),e(vo,Mn),e(Mn,Zmr),e(Mn,n1e),e(n1e,egr),e(Mn,ogr),e(Mn,s1e),e(s1e,rgr),e(Mn,tgr),e(Mn,l1e),e(l1e,agr),e(Mn,ngr),e(vo,sgr),e(vo,V),e(V,k6),e(k6,i1e),e(i1e,lgr),e(k6,igr),e(k6,yX),e(yX,dgr),e(k6,cgr),e(V,fgr),e(V,S6),e(S6,d1e),e(d1e,mgr),e(S6,ggr),e(S6,LX),e(LX,hgr),e(S6,pgr),e(V,_gr),e(V,R6),e(R6,c1e),e(c1e,ugr),e(R6,bgr),e(R6,xX),e(xX,Fgr),e(R6,vgr),e(V,Tgr),e(V,B6),e(B6,f1e),e(f1e,Mgr),e(B6,Egr),e(B6,kX),e(kX,Cgr),e(B6,wgr),e(V,Agr),e(V,P6),e(P6,m1e),e(m1e,ygr),e(P6,Lgr),e(P6,SX),e(SX,xgr),e(P6,kgr),e(V,Sgr),e(V,$6),e($6,g1e),e(g1e,Rgr),e($6,Bgr),e($6,RX),e(RX,Pgr),e($6,$gr),e(V,Igr),e(V,I6),e(I6,h1e),e(h1e,qgr),e(I6,Ngr),e(I6,BX),e(BX,jgr),e(I6,Dgr),e(V,Ggr),e(V,q6),e(q6,p1e),e(p1e,Ogr),e(q6,Vgr),e(q6,PX),e(PX,Xgr),e(q6,zgr),e(V,Qgr),e(V,N6),e(N6,_1e),e(_1e,Wgr),e(N6,Hgr),e(N6,$X),e($X,Ugr),e(N6,Jgr),e(V,Ygr),e(V,j6),e(j6,u1e),e(u1e,Kgr),e(j6,Zgr),e(j6,IX),e(IX,ehr),e(j6,ohr),e(V,rhr),e(V,D6),e(D6,b1e),e(b1e,thr),e(D6,ahr),e(D6,qX),e(qX,nhr),e(D6,shr),e(V,lhr),e(V,G6),e(G6,F1e),e(F1e,ihr),e(G6,dhr),e(G6,NX),e(NX,chr),e(G6,fhr),e(V,mhr),e(V,O6),e(O6,v1e),e(v1e,ghr),e(O6,hhr),e(O6,jX),e(jX,phr),e(O6,_hr),e(V,uhr),e(V,V6),e(V6,T1e),e(T1e,bhr),e(V6,Fhr),e(V6,DX),e(DX,vhr),e(V6,Thr),e(V,Mhr),e(V,X6),e(X6,M1e),e(M1e,Ehr),e(X6,Chr),e(X6,GX),e(GX,whr),e(X6,Ahr),e(V,yhr),e(V,z6),e(z6,E1e),e(E1e,Lhr),e(z6,xhr),e(z6,OX),e(OX,khr),e(z6,Shr),e(V,Rhr),e(V,Q6),e(Q6,C1e),e(C1e,Bhr),e(Q6,Phr),e(Q6,VX),e(VX,$hr),e(Q6,Ihr),e(V,qhr),e(V,W6),e(W6,w1e),e(w1e,Nhr),e(W6,jhr),e(W6,XX),e(XX,Dhr),e(W6,Ghr),e(V,Ohr),e(V,H6),e(H6,A1e),e(A1e,Vhr),e(H6,Xhr),e(H6,zX),e(zX,zhr),e(H6,Qhr),e(V,Whr),e(V,U6),e(U6,y1e),e(y1e,Hhr),e(U6,Uhr),e(U6,QX),e(QX,Jhr),e(U6,Yhr),e(V,Khr),e(V,J6),e(J6,L1e),e(L1e,Zhr),e(J6,epr),e(J6,WX),e(WX,opr),e(J6,rpr),e(V,tpr),e(V,Y6),e(Y6,x1e),e(x1e,apr),e(Y6,npr),e(Y6,HX),e(HX,spr),e(Y6,lpr),e(V,ipr),e(V,K6),e(K6,k1e),e(k1e,dpr),e(K6,cpr),e(K6,UX),e(UX,fpr),e(K6,mpr),e(V,gpr),e(V,Z6),e(Z6,S1e),e(S1e,hpr),e(Z6,ppr),e(Z6,JX),e(JX,_pr),e(Z6,upr),e(V,bpr),e(V,eT),e(eT,R1e),e(R1e,Fpr),e(eT,vpr),e(eT,YX),e(YX,Tpr),e(eT,Mpr),e(V,Epr),e(V,oT),e(oT,B1e),e(B1e,Cpr),e(oT,wpr),e(oT,KX),e(KX,Apr),e(oT,ypr),e(vo,Lpr),e(vo,P1e),e(P1e,xpr),e(vo,kpr),g(W0,vo,null),b(c,hBe,u),b(c,Pc,u),e(Pc,rT),e(rT,$1e),g(H0,$1e,null),e(Pc,Spr),e(Pc,I1e),e(I1e,Rpr),b(c,pBe,u),b(c,Ar,u),g(U0,Ar,null),e(Ar,Bpr),e(Ar,$c),e($c,Ppr),e($c,ZX),e(ZX,$pr),e($c,Ipr),e($c,ez),e(ez,qpr),e($c,Npr),e(Ar,jpr),e(Ar,J0),e(J0,Dpr),e(J0,q1e),e(q1e,Gpr),e(J0,Opr),e(Ar,Vpr),e(Ar,vt),g(Y0,vt,null),e(vt,Xpr),e(vt,N1e),e(N1e,zpr),e(vt,Qpr),e(vt,Ic),e(Ic,Wpr),e(Ic,j1e),e(j1e,Hpr),e(Ic,Upr),e(Ic,oz),e(oz,Jpr),e(Ic,Ypr),e(vt,Kpr),e(vt,D1e),e(D1e,Zpr),e(vt,e_r),g(K0,vt,null),e(Ar,o_r),e(Ar,To),g(Z0,To,null),e(To,r_r),e(To,G1e),e(G1e,t_r),e(To,a_r),e(To,En),e(En,n_r),e(En,O1e),e(O1e,s_r),e(En,l_r),e(En,V1e),e(V1e,i_r),e(En,d_r),e(En,X1e),e(X1e,c_r),e(En,f_r),e(To,m_r),e(To,ne),e(ne,tT),e(tT,z1e),e(z1e,g_r),e(tT,h_r),e(tT,rz),e(rz,p_r),e(tT,__r),e(ne,u_r),e(ne,aT),e(aT,Q1e),e(Q1e,b_r),e(aT,F_r),e(aT,tz),e(tz,v_r),e(aT,T_r),e(ne,M_r),e(ne,nT),e(nT,W1e),e(W1e,E_r),e(nT,C_r),e(nT,az),e(az,w_r),e(nT,A_r),e(ne,y_r),e(ne,sT),e(sT,H1e),e(H1e,L_r),e(sT,x_r),e(sT,nz),e(nz,k_r),e(sT,S_r),e(ne,R_r),e(ne,lT),e(lT,U1e),e(U1e,B_r),e(lT,P_r),e(lT,sz),e(sz,$_r),e(lT,I_r),e(ne,q_r),e(ne,iT),e(iT,J1e),e(J1e,N_r),e(iT,j_r),e(iT,lz),e(lz,D_r),e(iT,G_r),e(ne,O_r),e(ne,dT),e(dT,Y1e),e(Y1e,V_r),e(dT,X_r),e(dT,iz),e(iz,z_r),e(dT,Q_r),e(ne,W_r),e(ne,cT),e(cT,K1e),e(K1e,H_r),e(cT,U_r),e(cT,dz),e(dz,J_r),e(cT,Y_r),e(ne,K_r),e(ne,fT),e(fT,Z1e),e(Z1e,Z_r),e(fT,eur),e(fT,cz),e(cz,our),e(fT,rur),e(ne,tur),e(ne,mT),e(mT,e4e),e(e4e,aur),e(mT,nur),e(mT,fz),e(fz,sur),e(mT,lur),e(ne,iur),e(ne,gT),e(gT,o4e),e(o4e,dur),e(gT,cur),e(gT,mz),e(mz,fur),e(gT,mur),e(ne,gur),e(ne,hT),e(hT,r4e),e(r4e,hur),e(hT,pur),e(hT,gz),e(gz,_ur),e(hT,uur),e(ne,bur),e(ne,pT),e(pT,t4e),e(t4e,Fur),e(pT,vur),e(pT,hz),e(hz,Tur),e(pT,Mur),e(ne,Eur),e(ne,_T),e(_T,a4e),e(a4e,Cur),e(_T,wur),e(_T,pz),e(pz,Aur),e(_T,yur),e(ne,Lur),e(ne,uT),e(uT,n4e),e(n4e,xur),e(uT,kur),e(uT,_z),e(_z,Sur),e(uT,Rur),e(ne,Bur),e(ne,bT),e(bT,s4e),e(s4e,Pur),e(bT,$ur),e(bT,uz),e(uz,Iur),e(bT,qur),e(ne,Nur),e(ne,FT),e(FT,l4e),e(l4e,jur),e(FT,Dur),e(FT,bz),e(bz,Gur),e(FT,Our),e(To,Vur),e(To,i4e),e(i4e,Xur),e(To,zur),g(ey,To,null),b(c,_Be,u),b(c,qc,u),e(qc,vT),e(vT,d4e),g(oy,d4e,null),e(qc,Qur),e(qc,c4e),e(c4e,Wur),b(c,uBe,u),b(c,yr,u),g(ry,yr,null),e(yr,Hur),e(yr,Nc),e(Nc,Uur),e(Nc,Fz),e(Fz,Jur),e(Nc,Yur),e(Nc,vz),e(vz,Kur),e(Nc,Zur),e(yr,e1r),e(yr,ty),e(ty,o1r),e(ty,f4e),e(f4e,r1r),e(ty,t1r),e(yr,a1r),e(yr,Tt),g(ay,Tt,null),e(Tt,n1r),e(Tt,m4e),e(m4e,s1r),e(Tt,l1r),e(Tt,jc),e(jc,i1r),e(jc,g4e),e(g4e,d1r),e(jc,c1r),e(jc,Tz),e(Tz,f1r),e(jc,m1r),e(Tt,g1r),e(Tt,h4e),e(h4e,h1r),e(Tt,p1r),g(ny,Tt,null),e(yr,_1r),e(yr,Mo),g(sy,Mo,null),e(Mo,u1r),e(Mo,p4e),e(p4e,b1r),e(Mo,F1r),e(Mo,Cn),e(Cn,v1r),e(Cn,_4e),e(_4e,T1r),e(Cn,M1r),e(Cn,u4e),e(u4e,E1r),e(Cn,C1r),e(Cn,b4e),e(b4e,w1r),e(Cn,A1r),e(Mo,y1r),e(Mo,F4e),e(F4e,TT),e(TT,v4e),e(v4e,L1r),e(TT,x1r),e(TT,Mz),e(Mz,k1r),e(TT,S1r),e(Mo,R1r),e(Mo,T4e),e(T4e,B1r),e(Mo,P1r),g(ly,Mo,null),b(c,bBe,u),b(c,Dc,u),e(Dc,MT),e(MT,M4e),g(iy,M4e,null),e(Dc,$1r),e(Dc,E4e),e(E4e,I1r),b(c,FBe,u),b(c,Lr,u),g(dy,Lr,null),e(Lr,q1r),e(Lr,Gc),e(Gc,N1r),e(Gc,Ez),e(Ez,j1r),e(Gc,D1r),e(Gc,Cz),e(Cz,G1r),e(Gc,O1r),e(Lr,V1r),e(Lr,cy),e(cy,X1r),e(cy,C4e),e(C4e,z1r),e(cy,Q1r),e(Lr,W1r),e(Lr,Mt),g(fy,Mt,null),e(Mt,H1r),e(Mt,w4e),e(w4e,U1r),e(Mt,J1r),e(Mt,Oc),e(Oc,Y1r),e(Oc,A4e),e(A4e,K1r),e(Oc,Z1r),e(Oc,wz),e(wz,e4r),e(Oc,o4r),e(Mt,r4r),e(Mt,y4e),e(y4e,t4r),e(Mt,a4r),g(my,Mt,null),e(Lr,n4r),e(Lr,Eo),g(gy,Eo,null),e(Eo,s4r),e(Eo,L4e),e(L4e,l4r),e(Eo,i4r),e(Eo,wn),e(wn,d4r),e(wn,x4e),e(x4e,c4r),e(wn,f4r),e(wn,k4e),e(k4e,m4r),e(wn,g4r),e(wn,S4e),e(S4e,h4r),e(wn,p4r),e(Eo,_4r),e(Eo,Y),e(Y,ET),e(ET,R4e),e(R4e,u4r),e(ET,b4r),e(ET,Az),e(Az,F4r),e(ET,v4r),e(Y,T4r),e(Y,CT),e(CT,B4e),e(B4e,M4r),e(CT,E4r),e(CT,yz),e(yz,C4r),e(CT,w4r),e(Y,A4r),e(Y,wT),e(wT,P4e),e(P4e,y4r),e(wT,L4r),e(wT,Lz),e(Lz,x4r),e(wT,k4r),e(Y,S4r),e(Y,AT),e(AT,$4e),e($4e,R4r),e(AT,B4r),e(AT,xz),e(xz,P4r),e(AT,$4r),e(Y,I4r),e(Y,yT),e(yT,I4e),e(I4e,q4r),e(yT,N4r),e(yT,kz),e(kz,j4r),e(yT,D4r),e(Y,G4r),e(Y,LT),e(LT,q4e),e(q4e,O4r),e(LT,V4r),e(LT,Sz),e(Sz,X4r),e(LT,z4r),e(Y,Q4r),e(Y,xT),e(xT,N4e),e(N4e,W4r),e(xT,H4r),e(xT,Rz),e(Rz,U4r),e(xT,J4r),e(Y,Y4r),e(Y,kT),e(kT,j4e),e(j4e,K4r),e(kT,Z4r),e(kT,Bz),e(Bz,ebr),e(kT,obr),e(Y,rbr),e(Y,ST),e(ST,D4e),e(D4e,tbr),e(ST,abr),e(ST,Pz),e(Pz,nbr),e(ST,sbr),e(Y,lbr),e(Y,RT),e(RT,G4e),e(G4e,ibr),e(RT,dbr),e(RT,$z),e($z,cbr),e(RT,fbr),e(Y,mbr),e(Y,BT),e(BT,O4e),e(O4e,gbr),e(BT,hbr),e(BT,Iz),e(Iz,pbr),e(BT,_br),e(Y,ubr),e(Y,PT),e(PT,V4e),e(V4e,bbr),e(PT,Fbr),e(PT,qz),e(qz,vbr),e(PT,Tbr),e(Y,Mbr),e(Y,$T),e($T,X4e),e(X4e,Ebr),e($T,Cbr),e($T,Nz),e(Nz,wbr),e($T,Abr),e(Y,ybr),e(Y,IT),e(IT,z4e),e(z4e,Lbr),e(IT,xbr),e(IT,jz),e(jz,kbr),e(IT,Sbr),e(Y,Rbr),e(Y,qT),e(qT,Q4e),e(Q4e,Bbr),e(qT,Pbr),e(qT,Dz),e(Dz,$br),e(qT,Ibr),e(Y,qbr),e(Y,NT),e(NT,W4e),e(W4e,Nbr),e(NT,jbr),e(NT,Gz),e(Gz,Dbr),e(NT,Gbr),e(Y,Obr),e(Y,jT),e(jT,H4e),e(H4e,Vbr),e(jT,Xbr),e(jT,Oz),e(Oz,zbr),e(jT,Qbr),e(Y,Wbr),e(Y,DT),e(DT,U4e),e(U4e,Hbr),e(DT,Ubr),e(DT,Vz),e(Vz,Jbr),e(DT,Ybr),e(Y,Kbr),e(Y,GT),e(GT,J4e),e(J4e,Zbr),e(GT,e3r),e(GT,Xz),e(Xz,o3r),e(GT,r3r),e(Y,t3r),e(Y,OT),e(OT,Y4e),e(Y4e,a3r),e(OT,n3r),e(OT,zz),e(zz,s3r),e(OT,l3r),e(Eo,i3r),e(Eo,K4e),e(K4e,d3r),e(Eo,c3r),g(hy,Eo,null),b(c,vBe,u),b(c,Vc,u),e(Vc,VT),e(VT,Z4e),g(py,Z4e,null),e(Vc,f3r),e(Vc,ebe),e(ebe,m3r),b(c,TBe,u),b(c,xr,u),g(_y,xr,null),e(xr,g3r),e(xr,Xc),e(Xc,h3r),e(Xc,Qz),e(Qz,p3r),e(Xc,_3r),e(Xc,Wz),e(Wz,u3r),e(Xc,b3r),e(xr,F3r),e(xr,uy),e(uy,v3r),e(uy,obe),e(obe,T3r),e(uy,M3r),e(xr,E3r),e(xr,Et),g(by,Et,null),e(Et,C3r),e(Et,rbe),e(rbe,w3r),e(Et,A3r),e(Et,zc),e(zc,y3r),e(zc,tbe),e(tbe,L3r),e(zc,x3r),e(zc,Hz),e(Hz,k3r),e(zc,S3r),e(Et,R3r),e(Et,abe),e(abe,B3r),e(Et,P3r),g(Fy,Et,null),e(xr,$3r),e(xr,Co),g(vy,Co,null),e(Co,I3r),e(Co,nbe),e(nbe,q3r),e(Co,N3r),e(Co,An),e(An,j3r),e(An,sbe),e(sbe,D3r),e(An,G3r),e(An,lbe),e(lbe,O3r),e(An,V3r),e(An,ibe),e(ibe,X3r),e(An,z3r),e(Co,Q3r),e(Co,K),e(K,XT),e(XT,dbe),e(dbe,W3r),e(XT,H3r),e(XT,Uz),e(Uz,U3r),e(XT,J3r),e(K,Y3r),e(K,zT),e(zT,cbe),e(cbe,K3r),e(zT,Z3r),e(zT,Jz),e(Jz,e2r),e(zT,o2r),e(K,r2r),e(K,QT),e(QT,fbe),e(fbe,t2r),e(QT,a2r),e(QT,Yz),e(Yz,n2r),e(QT,s2r),e(K,l2r),e(K,WT),e(WT,mbe),e(mbe,i2r),e(WT,d2r),e(WT,Kz),e(Kz,c2r),e(WT,f2r),e(K,m2r),e(K,HT),e(HT,gbe),e(gbe,g2r),e(HT,h2r),e(HT,Zz),e(Zz,p2r),e(HT,_2r),e(K,u2r),e(K,UT),e(UT,hbe),e(hbe,b2r),e(UT,F2r),e(UT,eQ),e(eQ,v2r),e(UT,T2r),e(K,M2r),e(K,JT),e(JT,pbe),e(pbe,E2r),e(JT,C2r),e(JT,oQ),e(oQ,w2r),e(JT,A2r),e(K,y2r),e(K,YT),e(YT,_be),e(_be,L2r),e(YT,x2r),e(YT,rQ),e(rQ,k2r),e(YT,S2r),e(K,R2r),e(K,KT),e(KT,ube),e(ube,B2r),e(KT,P2r),e(KT,tQ),e(tQ,$2r),e(KT,I2r),e(K,q2r),e(K,ZT),e(ZT,bbe),e(bbe,N2r),e(ZT,j2r),e(ZT,aQ),e(aQ,D2r),e(ZT,G2r),e(K,O2r),e(K,e7),e(e7,Fbe),e(Fbe,V2r),e(e7,X2r),e(e7,nQ),e(nQ,z2r),e(e7,Q2r),e(K,W2r),e(K,o7),e(o7,vbe),e(vbe,H2r),e(o7,U2r),e(o7,sQ),e(sQ,J2r),e(o7,Y2r),e(K,K2r),e(K,r7),e(r7,Tbe),e(Tbe,Z2r),e(r7,eFr),e(r7,lQ),e(lQ,oFr),e(r7,rFr),e(K,tFr),e(K,t7),e(t7,Mbe),e(Mbe,aFr),e(t7,nFr),e(t7,iQ),e(iQ,sFr),e(t7,lFr),e(K,iFr),e(K,a7),e(a7,Ebe),e(Ebe,dFr),e(a7,cFr),e(a7,dQ),e(dQ,fFr),e(a7,mFr),e(K,gFr),e(K,n7),e(n7,Cbe),e(Cbe,hFr),e(n7,pFr),e(n7,cQ),e(cQ,_Fr),e(n7,uFr),e(K,bFr),e(K,s7),e(s7,wbe),e(wbe,FFr),e(s7,vFr),e(s7,fQ),e(fQ,TFr),e(s7,MFr),e(K,EFr),e(K,l7),e(l7,Abe),e(Abe,CFr),e(l7,wFr),e(l7,mQ),e(mQ,AFr),e(l7,yFr),e(K,LFr),e(K,i7),e(i7,ybe),e(ybe,xFr),e(i7,kFr),e(i7,gQ),e(gQ,SFr),e(i7,RFr),e(K,BFr),e(K,d7),e(d7,Lbe),e(Lbe,PFr),e(d7,$Fr),e(d7,hQ),e(hQ,IFr),e(d7,qFr),e(Co,NFr),e(Co,xbe),e(xbe,jFr),e(Co,DFr),g(Ty,Co,null),b(c,MBe,u),b(c,Qc,u),e(Qc,c7),e(c7,kbe),g(My,kbe,null),e(Qc,GFr),e(Qc,Sbe),e(Sbe,OFr),b(c,EBe,u),b(c,kr,u),g(Ey,kr,null),e(kr,VFr),e(kr,Wc),e(Wc,XFr),e(Wc,pQ),e(pQ,zFr),e(Wc,QFr),e(Wc,_Q),e(_Q,WFr),e(Wc,HFr),e(kr,UFr),e(kr,Cy),e(Cy,JFr),e(Cy,Rbe),e(Rbe,YFr),e(Cy,KFr),e(kr,ZFr),e(kr,Ct),g(wy,Ct,null),e(Ct,evr),e(Ct,Bbe),e(Bbe,ovr),e(Ct,rvr),e(Ct,Hc),e(Hc,tvr),e(Hc,Pbe),e(Pbe,avr),e(Hc,nvr),e(Hc,uQ),e(uQ,svr),e(Hc,lvr),e(Ct,ivr),e(Ct,$be),e($be,dvr),e(Ct,cvr),g(Ay,Ct,null),e(kr,fvr),e(kr,wo),g(yy,wo,null),e(wo,mvr),e(wo,Ibe),e(Ibe,gvr),e(wo,hvr),e(wo,yn),e(yn,pvr),e(yn,qbe),e(qbe,_vr),e(yn,uvr),e(yn,Nbe),e(Nbe,bvr),e(yn,Fvr),e(yn,jbe),e(jbe,vvr),e(yn,Tvr),e(wo,Mvr),e(wo,Dbe),e(Dbe,f7),e(f7,Gbe),e(Gbe,Evr),e(f7,Cvr),e(f7,bQ),e(bQ,wvr),e(f7,Avr),e(wo,yvr),e(wo,Obe),e(Obe,Lvr),e(wo,xvr),g(Ly,wo,null),b(c,CBe,u),b(c,Uc,u),e(Uc,m7),e(m7,Vbe),g(xy,Vbe,null),e(Uc,kvr),e(Uc,Xbe),e(Xbe,Svr),b(c,wBe,u),b(c,Sr,u),g(ky,Sr,null),e(Sr,Rvr),e(Sr,Jc),e(Jc,Bvr),e(Jc,FQ),e(FQ,Pvr),e(Jc,$vr),e(Jc,vQ),e(vQ,Ivr),e(Jc,qvr),e(Sr,Nvr),e(Sr,Sy),e(Sy,jvr),e(Sy,zbe),e(zbe,Dvr),e(Sy,Gvr),e(Sr,Ovr),e(Sr,wt),g(Ry,wt,null),e(wt,Vvr),e(wt,Qbe),e(Qbe,Xvr),e(wt,zvr),e(wt,Yc),e(Yc,Qvr),e(Yc,Wbe),e(Wbe,Wvr),e(Yc,Hvr),e(Yc,TQ),e(TQ,Uvr),e(Yc,Jvr),e(wt,Yvr),e(wt,Hbe),e(Hbe,Kvr),e(wt,Zvr),g(By,wt,null),e(Sr,e6r),e(Sr,Ao),g(Py,Ao,null),e(Ao,o6r),e(Ao,Ube),e(Ube,r6r),e(Ao,t6r),e(Ao,Ln),e(Ln,a6r),e(Ln,Jbe),e(Jbe,n6r),e(Ln,s6r),e(Ln,Ybe),e(Ybe,l6r),e(Ln,i6r),e(Ln,Kbe),e(Kbe,d6r),e(Ln,c6r),e(Ao,f6r),e(Ao,Zbe),e(Zbe,g7),e(g7,e3e),e(e3e,m6r),e(g7,g6r),e(g7,MQ),e(MQ,h6r),e(g7,p6r),e(Ao,_6r),e(Ao,o3e),e(o3e,u6r),e(Ao,b6r),g($y,Ao,null),b(c,ABe,u),b(c,Kc,u),e(Kc,h7),e(h7,r3e),g(Iy,r3e,null),e(Kc,F6r),e(Kc,t3e),e(t3e,v6r),b(c,yBe,u),b(c,Rr,u),g(qy,Rr,null),e(Rr,T6r),e(Rr,Zc),e(Zc,M6r),e(Zc,EQ),e(EQ,E6r),e(Zc,C6r),e(Zc,CQ),e(CQ,w6r),e(Zc,A6r),e(Rr,y6r),e(Rr,Ny),e(Ny,L6r),e(Ny,a3e),e(a3e,x6r),e(Ny,k6r),e(Rr,S6r),e(Rr,At),g(jy,At,null),e(At,R6r),e(At,n3e),e(n3e,B6r),e(At,P6r),e(At,ef),e(ef,$6r),e(ef,s3e),e(s3e,I6r),e(ef,q6r),e(ef,wQ),e(wQ,N6r),e(ef,j6r),e(At,D6r),e(At,l3e),e(l3e,G6r),e(At,O6r),g(Dy,At,null),e(Rr,V6r),e(Rr,yo),g(Gy,yo,null),e(yo,X6r),e(yo,i3e),e(i3e,z6r),e(yo,Q6r),e(yo,xn),e(xn,W6r),e(xn,d3e),e(d3e,H6r),e(xn,U6r),e(xn,c3e),e(c3e,J6r),e(xn,Y6r),e(xn,f3e),e(f3e,K6r),e(xn,Z6r),e(yo,eTr),e(yo,z),e(z,p7),e(p7,m3e),e(m3e,oTr),e(p7,rTr),e(p7,AQ),e(AQ,tTr),e(p7,aTr),e(z,nTr),e(z,_7),e(_7,g3e),e(g3e,sTr),e(_7,lTr),e(_7,yQ),e(yQ,iTr),e(_7,dTr),e(z,cTr),e(z,u7),e(u7,h3e),e(h3e,fTr),e(u7,mTr),e(u7,LQ),e(LQ,gTr),e(u7,hTr),e(z,pTr),e(z,b7),e(b7,p3e),e(p3e,_Tr),e(b7,uTr),e(b7,xQ),e(xQ,bTr),e(b7,FTr),e(z,vTr),e(z,F7),e(F7,_3e),e(_3e,TTr),e(F7,MTr),e(F7,kQ),e(kQ,ETr),e(F7,CTr),e(z,wTr),e(z,v7),e(v7,u3e),e(u3e,ATr),e(v7,yTr),e(v7,SQ),e(SQ,LTr),e(v7,xTr),e(z,kTr),e(z,T7),e(T7,b3e),e(b3e,STr),e(T7,RTr),e(T7,RQ),e(RQ,BTr),e(T7,PTr),e(z,$Tr),e(z,M7),e(M7,F3e),e(F3e,ITr),e(M7,qTr),e(M7,BQ),e(BQ,NTr),e(M7,jTr),e(z,DTr),e(z,E7),e(E7,v3e),e(v3e,GTr),e(E7,OTr),e(E7,PQ),e(PQ,VTr),e(E7,XTr),e(z,zTr),e(z,C7),e(C7,T3e),e(T3e,QTr),e(C7,WTr),e(C7,$Q),e($Q,HTr),e(C7,UTr),e(z,JTr),e(z,w7),e(w7,M3e),e(M3e,YTr),e(w7,KTr),e(w7,IQ),e(IQ,ZTr),e(w7,e7r),e(z,o7r),e(z,A7),e(A7,E3e),e(E3e,r7r),e(A7,t7r),e(A7,qQ),e(qQ,a7r),e(A7,n7r),e(z,s7r),e(z,y7),e(y7,C3e),e(C3e,l7r),e(y7,i7r),e(y7,NQ),e(NQ,d7r),e(y7,c7r),e(z,f7r),e(z,L7),e(L7,w3e),e(w3e,m7r),e(L7,g7r),e(L7,jQ),e(jQ,h7r),e(L7,p7r),e(z,_7r),e(z,x7),e(x7,A3e),e(A3e,u7r),e(x7,b7r),e(x7,DQ),e(DQ,F7r),e(x7,v7r),e(z,T7r),e(z,k7),e(k7,y3e),e(y3e,M7r),e(k7,E7r),e(k7,GQ),e(GQ,C7r),e(k7,w7r),e(z,A7r),e(z,S7),e(S7,L3e),e(L3e,y7r),e(S7,L7r),e(S7,OQ),e(OQ,x7r),e(S7,k7r),e(z,S7r),e(z,R7),e(R7,x3e),e(x3e,R7r),e(R7,B7r),e(R7,VQ),e(VQ,P7r),e(R7,$7r),e(z,I7r),e(z,B7),e(B7,k3e),e(k3e,q7r),e(B7,N7r),e(B7,XQ),e(XQ,j7r),e(B7,D7r),e(z,G7r),e(z,P7),e(P7,S3e),e(S3e,O7r),e(P7,V7r),e(P7,zQ),e(zQ,X7r),e(P7,z7r),e(z,Q7r),e(z,$7),e($7,R3e),e(R3e,W7r),e($7,H7r),e($7,QQ),e(QQ,U7r),e($7,J7r),e(z,Y7r),e(z,I7),e(I7,B3e),e(B3e,K7r),e(I7,Z7r),e(I7,WQ),e(WQ,eMr),e(I7,oMr),e(z,rMr),e(z,q7),e(q7,P3e),e(P3e,tMr),e(q7,aMr),e(q7,HQ),e(HQ,nMr),e(q7,sMr),e(z,lMr),e(z,N7),e(N7,$3e),e($3e,iMr),e(N7,dMr),e(N7,UQ),e(UQ,cMr),e(N7,fMr),e(z,mMr),e(z,j7),e(j7,I3e),e(I3e,gMr),e(j7,hMr),e(j7,JQ),e(JQ,pMr),e(j7,_Mr),e(yo,uMr),e(yo,q3e),e(q3e,bMr),e(yo,FMr),g(Oy,yo,null),b(c,LBe,u),b(c,of,u),e(of,D7),e(D7,N3e),g(Vy,N3e,null),e(of,vMr),e(of,j3e),e(j3e,TMr),b(c,xBe,u),b(c,Br,u),g(Xy,Br,null),e(Br,MMr),e(Br,rf),e(rf,EMr),e(rf,YQ),e(YQ,CMr),e(rf,wMr),e(rf,KQ),e(KQ,AMr),e(rf,yMr),e(Br,LMr),e(Br,zy),e(zy,xMr),e(zy,D3e),e(D3e,kMr),e(zy,SMr),e(Br,RMr),e(Br,yt),g(Qy,yt,null),e(yt,BMr),e(yt,G3e),e(G3e,PMr),e(yt,$Mr),e(yt,tf),e(tf,IMr),e(tf,O3e),e(O3e,qMr),e(tf,NMr),e(tf,ZQ),e(ZQ,jMr),e(tf,DMr),e(yt,GMr),e(yt,V3e),e(V3e,OMr),e(yt,VMr),g(Wy,yt,null),e(Br,XMr),e(Br,Lo),g(Hy,Lo,null),e(Lo,zMr),e(Lo,X3e),e(X3e,QMr),e(Lo,WMr),e(Lo,kn),e(kn,HMr),e(kn,z3e),e(z3e,UMr),e(kn,JMr),e(kn,Q3e),e(Q3e,YMr),e(kn,KMr),e(kn,W3e),e(W3e,ZMr),e(kn,eEr),e(Lo,oEr),e(Lo,ca),e(ca,G7),e(G7,H3e),e(H3e,rEr),e(G7,tEr),e(G7,eW),e(eW,aEr),e(G7,nEr),e(ca,sEr),e(ca,O7),e(O7,U3e),e(U3e,lEr),e(O7,iEr),e(O7,oW),e(oW,dEr),e(O7,cEr),e(ca,fEr),e(ca,V7),e(V7,J3e),e(J3e,mEr),e(V7,gEr),e(V7,rW),e(rW,hEr),e(V7,pEr),e(ca,_Er),e(ca,X7),e(X7,Y3e),e(Y3e,uEr),e(X7,bEr),e(X7,tW),e(tW,FEr),e(X7,vEr),e(ca,TEr),e(ca,z7),e(z7,K3e),e(K3e,MEr),e(z7,EEr),e(z7,aW),e(aW,CEr),e(z7,wEr),e(Lo,AEr),e(Lo,Z3e),e(Z3e,yEr),e(Lo,LEr),g(Uy,Lo,null),b(c,kBe,u),b(c,af,u),e(af,Q7),e(Q7,e2e),g(Jy,e2e,null),e(af,xEr),e(af,o2e),e(o2e,kEr),b(c,SBe,u),b(c,Pr,u),g(Yy,Pr,null),e(Pr,SEr),e(Pr,nf),e(nf,REr),e(nf,nW),e(nW,BEr),e(nf,PEr),e(nf,sW),e(sW,$Er),e(nf,IEr),e(Pr,qEr),e(Pr,Ky),e(Ky,NEr),e(Ky,r2e),e(r2e,jEr),e(Ky,DEr),e(Pr,GEr),e(Pr,Lt),g(Zy,Lt,null),e(Lt,OEr),e(Lt,t2e),e(t2e,VEr),e(Lt,XEr),e(Lt,sf),e(sf,zEr),e(sf,a2e),e(a2e,QEr),e(sf,WEr),e(sf,lW),e(lW,HEr),e(sf,UEr),e(Lt,JEr),e(Lt,n2e),e(n2e,YEr),e(Lt,KEr),g(eL,Lt,null),e(Pr,ZEr),e(Pr,xo),g(oL,xo,null),e(xo,eCr),e(xo,s2e),e(s2e,oCr),e(xo,rCr),e(xo,Sn),e(Sn,tCr),e(Sn,l2e),e(l2e,aCr),e(Sn,nCr),e(Sn,i2e),e(i2e,sCr),e(Sn,lCr),e(Sn,d2e),e(d2e,iCr),e(Sn,dCr),e(xo,cCr),e(xo,fe),e(fe,W7),e(W7,c2e),e(c2e,fCr),e(W7,mCr),e(W7,iW),e(iW,gCr),e(W7,hCr),e(fe,pCr),e(fe,H7),e(H7,f2e),e(f2e,_Cr),e(H7,uCr),e(H7,dW),e(dW,bCr),e(H7,FCr),e(fe,vCr),e(fe,U7),e(U7,m2e),e(m2e,TCr),e(U7,MCr),e(U7,cW),e(cW,ECr),e(U7,CCr),e(fe,wCr),e(fe,J7),e(J7,g2e),e(g2e,ACr),e(J7,yCr),e(J7,fW),e(fW,LCr),e(J7,xCr),e(fe,kCr),e(fe,Y7),e(Y7,h2e),e(h2e,SCr),e(Y7,RCr),e(Y7,mW),e(mW,BCr),e(Y7,PCr),e(fe,$Cr),e(fe,K7),e(K7,p2e),e(p2e,ICr),e(K7,qCr),e(K7,gW),e(gW,NCr),e(K7,jCr),e(fe,DCr),e(fe,Z7),e(Z7,_2e),e(_2e,GCr),e(Z7,OCr),e(Z7,hW),e(hW,VCr),e(Z7,XCr),e(fe,zCr),e(fe,eM),e(eM,u2e),e(u2e,QCr),e(eM,WCr),e(eM,pW),e(pW,HCr),e(eM,UCr),e(fe,JCr),e(fe,oM),e(oM,b2e),e(b2e,YCr),e(oM,KCr),e(oM,_W),e(_W,ZCr),e(oM,e5r),e(fe,o5r),e(fe,rM),e(rM,F2e),e(F2e,r5r),e(rM,t5r),e(rM,uW),e(uW,a5r),e(rM,n5r),e(fe,s5r),e(fe,tM),e(tM,v2e),e(v2e,l5r),e(tM,i5r),e(tM,bW),e(bW,d5r),e(tM,c5r),e(fe,f5r),e(fe,aM),e(aM,T2e),e(T2e,m5r),e(aM,g5r),e(aM,FW),e(FW,h5r),e(aM,p5r),e(xo,_5r),e(xo,M2e),e(M2e,u5r),e(xo,b5r),g(rL,xo,null),b(c,RBe,u),b(c,lf,u),e(lf,nM),e(nM,E2e),g(tL,E2e,null),e(lf,F5r),e(lf,C2e),e(C2e,v5r),b(c,BBe,u),b(c,$r,u),g(aL,$r,null),e($r,T5r),e($r,df),e(df,M5r),e(df,vW),e(vW,E5r),e(df,C5r),e(df,TW),e(TW,w5r),e(df,A5r),e($r,y5r),e($r,nL),e(nL,L5r),e(nL,w2e),e(w2e,x5r),e(nL,k5r),e($r,S5r),e($r,xt),g(sL,xt,null),e(xt,R5r),e(xt,A2e),e(A2e,B5r),e(xt,P5r),e(xt,cf),e(cf,$5r),e(cf,y2e),e(y2e,I5r),e(cf,q5r),e(cf,MW),e(MW,N5r),e(cf,j5r),e(xt,D5r),e(xt,L2e),e(L2e,G5r),e(xt,O5r),g(lL,xt,null),e($r,V5r),e($r,ko),g(iL,ko,null),e(ko,X5r),e(ko,x2e),e(x2e,z5r),e(ko,Q5r),e(ko,Rn),e(Rn,W5r),e(Rn,k2e),e(k2e,H5r),e(Rn,U5r),e(Rn,S2e),e(S2e,J5r),e(Rn,Y5r),e(Rn,R2e),e(R2e,K5r),e(Rn,Z5r),e(ko,ewr),e(ko,be),e(be,sM),e(sM,B2e),e(B2e,owr),e(sM,rwr),e(sM,EW),e(EW,twr),e(sM,awr),e(be,nwr),e(be,lM),e(lM,P2e),e(P2e,swr),e(lM,lwr),e(lM,CW),e(CW,iwr),e(lM,dwr),e(be,cwr),e(be,iM),e(iM,$2e),e($2e,fwr),e(iM,mwr),e(iM,wW),e(wW,gwr),e(iM,hwr),e(be,pwr),e(be,dM),e(dM,I2e),e(I2e,_wr),e(dM,uwr),e(dM,AW),e(AW,bwr),e(dM,Fwr),e(be,vwr),e(be,cM),e(cM,q2e),e(q2e,Twr),e(cM,Mwr),e(cM,yW),e(yW,Ewr),e(cM,Cwr),e(be,wwr),e(be,fM),e(fM,N2e),e(N2e,Awr),e(fM,ywr),e(fM,LW),e(LW,Lwr),e(fM,xwr),e(be,kwr),e(be,mM),e(mM,j2e),e(j2e,Swr),e(mM,Rwr),e(mM,xW),e(xW,Bwr),e(mM,Pwr),e(be,$wr),e(be,gM),e(gM,D2e),e(D2e,Iwr),e(gM,qwr),e(gM,kW),e(kW,Nwr),e(gM,jwr),e(be,Dwr),e(be,hM),e(hM,G2e),e(G2e,Gwr),e(hM,Owr),e(hM,SW),e(SW,Vwr),e(hM,Xwr),e(be,zwr),e(be,pM),e(pM,O2e),e(O2e,Qwr),e(pM,Wwr),e(pM,RW),e(RW,Hwr),e(pM,Uwr),e(ko,Jwr),e(ko,V2e),e(V2e,Ywr),e(ko,Kwr),g(dL,ko,null),b(c,PBe,u),b(c,ff,u),e(ff,_M),e(_M,X2e),g(cL,X2e,null),e(ff,Zwr),e(ff,z2e),e(z2e,eAr),b(c,$Be,u),b(c,Ir,u),g(fL,Ir,null),e(Ir,oAr),e(Ir,mf),e(mf,rAr),e(mf,BW),e(BW,tAr),e(mf,aAr),e(mf,PW),e(PW,nAr),e(mf,sAr),e(Ir,lAr),e(Ir,mL),e(mL,iAr),e(mL,Q2e),e(Q2e,dAr),e(mL,cAr),e(Ir,fAr),e(Ir,kt),g(gL,kt,null),e(kt,mAr),e(kt,W2e),e(W2e,gAr),e(kt,hAr),e(kt,gf),e(gf,pAr),e(gf,H2e),e(H2e,_Ar),e(gf,uAr),e(gf,$W),e($W,bAr),e(gf,FAr),e(kt,vAr),e(kt,U2e),e(U2e,TAr),e(kt,MAr),g(hL,kt,null),e(Ir,EAr),e(Ir,So),g(pL,So,null),e(So,CAr),e(So,J2e),e(J2e,wAr),e(So,AAr),e(So,Bn),e(Bn,yAr),e(Bn,Y2e),e(Y2e,LAr),e(Bn,xAr),e(Bn,K2e),e(K2e,kAr),e(Bn,SAr),e(Bn,Z2e),e(Z2e,RAr),e(Bn,BAr),e(So,PAr),e(So,Ee),e(Ee,uM),e(uM,eFe),e(eFe,$Ar),e(uM,IAr),e(uM,IW),e(IW,qAr),e(uM,NAr),e(Ee,jAr),e(Ee,bM),e(bM,oFe),e(oFe,DAr),e(bM,GAr),e(bM,qW),e(qW,OAr),e(bM,VAr),e(Ee,XAr),e(Ee,FM),e(FM,rFe),e(rFe,zAr),e(FM,QAr),e(FM,NW),e(NW,WAr),e(FM,HAr),e(Ee,UAr),e(Ee,vM),e(vM,tFe),e(tFe,JAr),e(vM,YAr),e(vM,jW),e(jW,KAr),e(vM,ZAr),e(Ee,e0r),e(Ee,TM),e(TM,aFe),e(aFe,o0r),e(TM,r0r),e(TM,DW),e(DW,t0r),e(TM,a0r),e(Ee,n0r),e(Ee,MM),e(MM,nFe),e(nFe,s0r),e(MM,l0r),e(MM,GW),e(GW,i0r),e(MM,d0r),e(Ee,c0r),e(Ee,EM),e(EM,sFe),e(sFe,f0r),e(EM,m0r),e(EM,OW),e(OW,g0r),e(EM,h0r),e(Ee,p0r),e(Ee,CM),e(CM,lFe),e(lFe,_0r),e(CM,u0r),e(CM,VW),e(VW,b0r),e(CM,F0r),e(Ee,v0r),e(Ee,wM),e(wM,iFe),e(iFe,T0r),e(wM,M0r),e(wM,XW),e(XW,E0r),e(wM,C0r),e(So,w0r),e(So,dFe),e(dFe,A0r),e(So,y0r),g(_L,So,null),b(c,IBe,u),b(c,hf,u),e(hf,AM),e(AM,cFe),g(uL,cFe,null),e(hf,L0r),e(hf,fFe),e(fFe,x0r),b(c,qBe,u),b(c,qr,u),g(bL,qr,null),e(qr,k0r),e(qr,pf),e(pf,S0r),e(pf,zW),e(zW,R0r),e(pf,B0r),e(pf,QW),e(QW,P0r),e(pf,$0r),e(qr,I0r),e(qr,FL),e(FL,q0r),e(FL,mFe),e(mFe,N0r),e(FL,j0r),e(qr,D0r),e(qr,St),g(vL,St,null),e(St,G0r),e(St,gFe),e(gFe,O0r),e(St,V0r),e(St,_f),e(_f,X0r),e(_f,hFe),e(hFe,z0r),e(_f,Q0r),e(_f,WW),e(WW,W0r),e(_f,H0r),e(St,U0r),e(St,pFe),e(pFe,J0r),e(St,Y0r),g(TL,St,null),e(qr,K0r),e(qr,Ro),g(ML,Ro,null),e(Ro,Z0r),e(Ro,_Fe),e(_Fe,eyr),e(Ro,oyr),e(Ro,Pn),e(Pn,ryr),e(Pn,uFe),e(uFe,tyr),e(Pn,ayr),e(Pn,bFe),e(bFe,nyr),e(Pn,syr),e(Pn,FFe),e(FFe,lyr),e(Pn,iyr),e(Ro,dyr),e(Ro,Fe),e(Fe,yM),e(yM,vFe),e(vFe,cyr),e(yM,fyr),e(yM,HW),e(HW,myr),e(yM,gyr),e(Fe,hyr),e(Fe,LM),e(LM,TFe),e(TFe,pyr),e(LM,_yr),e(LM,UW),e(UW,uyr),e(LM,byr),e(Fe,Fyr),e(Fe,xM),e(xM,MFe),e(MFe,vyr),e(xM,Tyr),e(xM,JW),e(JW,Myr),e(xM,Eyr),e(Fe,Cyr),e(Fe,kM),e(kM,EFe),e(EFe,wyr),e(kM,Ayr),e(kM,YW),e(YW,yyr),e(kM,Lyr),e(Fe,xyr),e(Fe,SM),e(SM,CFe),e(CFe,kyr),e(SM,Syr),e(SM,KW),e(KW,Ryr),e(SM,Byr),e(Fe,Pyr),e(Fe,RM),e(RM,wFe),e(wFe,$yr),e(RM,Iyr),e(RM,ZW),e(ZW,qyr),e(RM,Nyr),e(Fe,jyr),e(Fe,BM),e(BM,AFe),e(AFe,Dyr),e(BM,Gyr),e(BM,eH),e(eH,Oyr),e(BM,Vyr),e(Fe,Xyr),e(Fe,PM),e(PM,yFe),e(yFe,zyr),e(PM,Qyr),e(PM,oH),e(oH,Wyr),e(PM,Hyr),e(Fe,Uyr),e(Fe,$M),e($M,LFe),e(LFe,Jyr),e($M,Yyr),e($M,rH),e(rH,Kyr),e($M,Zyr),e(Fe,eLr),e(Fe,IM),e(IM,xFe),e(xFe,oLr),e(IM,rLr),e(IM,tH),e(tH,tLr),e(IM,aLr),e(Ro,nLr),e(Ro,kFe),e(kFe,sLr),e(Ro,lLr),g(EL,Ro,null),b(c,NBe,u),b(c,uf,u),e(uf,qM),e(qM,SFe),g(CL,SFe,null),e(uf,iLr),e(uf,RFe),e(RFe,dLr),b(c,jBe,u),b(c,Nr,u),g(wL,Nr,null),e(Nr,cLr),e(Nr,bf),e(bf,fLr),e(bf,aH),e(aH,mLr),e(bf,gLr),e(bf,nH),e(nH,hLr),e(bf,pLr),e(Nr,_Lr),e(Nr,AL),e(AL,uLr),e(AL,BFe),e(BFe,bLr),e(AL,FLr),e(Nr,vLr),e(Nr,Rt),g(yL,Rt,null),e(Rt,TLr),e(Rt,PFe),e(PFe,MLr),e(Rt,ELr),e(Rt,Ff),e(Ff,CLr),e(Ff,$Fe),e($Fe,wLr),e(Ff,ALr),e(Ff,sH),e(sH,yLr),e(Ff,LLr),e(Rt,xLr),e(Rt,IFe),e(IFe,kLr),e(Rt,SLr),g(LL,Rt,null),e(Nr,RLr),e(Nr,Bo),g(xL,Bo,null),e(Bo,BLr),e(Bo,qFe),e(qFe,PLr),e(Bo,$Lr),e(Bo,$n),e($n,ILr),e($n,NFe),e(NFe,qLr),e($n,NLr),e($n,jFe),e(jFe,jLr),e($n,DLr),e($n,DFe),e(DFe,GLr),e($n,OLr),e(Bo,VLr),e(Bo,ve),e(ve,NM),e(NM,GFe),e(GFe,XLr),e(NM,zLr),e(NM,lH),e(lH,QLr),e(NM,WLr),e(ve,HLr),e(ve,jM),e(jM,OFe),e(OFe,ULr),e(jM,JLr),e(jM,iH),e(iH,YLr),e(jM,KLr),e(ve,ZLr),e(ve,DM),e(DM,VFe),e(VFe,e8r),e(DM,o8r),e(DM,dH),e(dH,r8r),e(DM,t8r),e(ve,a8r),e(ve,GM),e(GM,XFe),e(XFe,n8r),e(GM,s8r),e(GM,cH),e(cH,l8r),e(GM,i8r),e(ve,d8r),e(ve,OM),e(OM,zFe),e(zFe,c8r),e(OM,f8r),e(OM,fH),e(fH,m8r),e(OM,g8r),e(ve,h8r),e(ve,VM),e(VM,QFe),e(QFe,p8r),e(VM,_8r),e(VM,mH),e(mH,u8r),e(VM,b8r),e(ve,F8r),e(ve,XM),e(XM,WFe),e(WFe,v8r),e(XM,T8r),e(XM,gH),e(gH,M8r),e(XM,E8r),e(ve,C8r),e(ve,zM),e(zM,HFe),e(HFe,w8r),e(zM,A8r),e(zM,hH),e(hH,y8r),e(zM,L8r),e(ve,x8r),e(ve,QM),e(QM,UFe),e(UFe,k8r),e(QM,S8r),e(QM,pH),e(pH,R8r),e(QM,B8r),e(ve,P8r),e(ve,WM),e(WM,JFe),e(JFe,$8r),e(WM,I8r),e(WM,_H),e(_H,q8r),e(WM,N8r),e(Bo,j8r),e(Bo,YFe),e(YFe,D8r),e(Bo,G8r),g(kL,Bo,null),b(c,DBe,u),b(c,vf,u),e(vf,HM),e(HM,KFe),g(SL,KFe,null),e(vf,O8r),e(vf,ZFe),e(ZFe,V8r),b(c,GBe,u),b(c,jr,u),g(RL,jr,null),e(jr,X8r),e(jr,Tf),e(Tf,z8r),e(Tf,uH),e(uH,Q8r),e(Tf,W8r),e(Tf,bH),e(bH,H8r),e(Tf,U8r),e(jr,J8r),e(jr,BL),e(BL,Y8r),e(BL,eve),e(eve,K8r),e(BL,Z8r),e(jr,e9r),e(jr,Bt),g(PL,Bt,null),e(Bt,o9r),e(Bt,ove),e(ove,r9r),e(Bt,t9r),e(Bt,Mf),e(Mf,a9r),e(Mf,rve),e(rve,n9r),e(Mf,s9r),e(Mf,FH),e(FH,l9r),e(Mf,i9r),e(Bt,d9r),e(Bt,tve),e(tve,c9r),e(Bt,f9r),g($L,Bt,null),e(jr,m9r),e(jr,Po),g(IL,Po,null),e(Po,g9r),e(Po,ave),e(ave,h9r),e(Po,p9r),e(Po,In),e(In,_9r),e(In,nve),e(nve,u9r),e(In,b9r),e(In,sve),e(sve,F9r),e(In,v9r),e(In,lve),e(lve,T9r),e(In,M9r),e(Po,E9r),e(Po,Be),e(Be,UM),e(UM,ive),e(ive,C9r),e(UM,w9r),e(UM,vH),e(vH,A9r),e(UM,y9r),e(Be,L9r),e(Be,JM),e(JM,dve),e(dve,x9r),e(JM,k9r),e(JM,TH),e(TH,S9r),e(JM,R9r),e(Be,B9r),e(Be,YM),e(YM,cve),e(cve,P9r),e(YM,$9r),e(YM,MH),e(MH,I9r),e(YM,q9r),e(Be,N9r),e(Be,KM),e(KM,fve),e(fve,j9r),e(KM,D9r),e(KM,EH),e(EH,G9r),e(KM,O9r),e(Be,V9r),e(Be,ZM),e(ZM,mve),e(mve,X9r),e(ZM,z9r),e(ZM,CH),e(CH,Q9r),e(ZM,W9r),e(Be,H9r),e(Be,eE),e(eE,gve),e(gve,U9r),e(eE,J9r),e(eE,wH),e(wH,Y9r),e(eE,K9r),e(Be,Z9r),e(Be,oE),e(oE,hve),e(hve,exr),e(oE,oxr),e(oE,AH),e(AH,rxr),e(oE,txr),e(Be,axr),e(Be,rE),e(rE,pve),e(pve,nxr),e(rE,sxr),e(rE,yH),e(yH,lxr),e(rE,ixr),e(Po,dxr),e(Po,_ve),e(_ve,cxr),e(Po,fxr),g(qL,Po,null),b(c,OBe,u),b(c,Ef,u),e(Ef,tE),e(tE,uve),g(NL,uve,null),e(Ef,mxr),e(Ef,bve),e(bve,gxr),b(c,VBe,u),b(c,Dr,u),g(jL,Dr,null),e(Dr,hxr),e(Dr,Cf),e(Cf,pxr),e(Cf,LH),e(LH,_xr),e(Cf,uxr),e(Cf,xH),e(xH,bxr),e(Cf,Fxr),e(Dr,vxr),e(Dr,DL),e(DL,Txr),e(DL,Fve),e(Fve,Mxr),e(DL,Exr),e(Dr,Cxr),e(Dr,Pt),g(GL,Pt,null),e(Pt,wxr),e(Pt,vve),e(vve,Axr),e(Pt,yxr),e(Pt,wf),e(wf,Lxr),e(wf,Tve),e(Tve,xxr),e(wf,kxr),e(wf,kH),e(kH,Sxr),e(wf,Rxr),e(Pt,Bxr),e(Pt,Mve),e(Mve,Pxr),e(Pt,$xr),g(OL,Pt,null),e(Dr,Ixr),e(Dr,$o),g(VL,$o,null),e($o,qxr),e($o,Eve),e(Eve,Nxr),e($o,jxr),e($o,qn),e(qn,Dxr),e(qn,Cve),e(Cve,Gxr),e(qn,Oxr),e(qn,wve),e(wve,Vxr),e(qn,Xxr),e(qn,Ave),e(Ave,zxr),e(qn,Qxr),e($o,Wxr),e($o,Pe),e(Pe,aE),e(aE,yve),e(yve,Hxr),e(aE,Uxr),e(aE,SH),e(SH,Jxr),e(aE,Yxr),e(Pe,Kxr),e(Pe,nE),e(nE,Lve),e(Lve,Zxr),e(nE,ekr),e(nE,RH),e(RH,okr),e(nE,rkr),e(Pe,tkr),e(Pe,sE),e(sE,xve),e(xve,akr),e(sE,nkr),e(sE,BH),e(BH,skr),e(sE,lkr),e(Pe,ikr),e(Pe,lE),e(lE,kve),e(kve,dkr),e(lE,ckr),e(lE,PH),e(PH,fkr),e(lE,mkr),e(Pe,gkr),e(Pe,iE),e(iE,Sve),e(Sve,hkr),e(iE,pkr),e(iE,$H),e($H,_kr),e(iE,ukr),e(Pe,bkr),e(Pe,dE),e(dE,Rve),e(Rve,Fkr),e(dE,vkr),e(dE,IH),e(IH,Tkr),e(dE,Mkr),e(Pe,Ekr),e(Pe,cE),e(cE,Bve),e(Bve,Ckr),e(cE,wkr),e(cE,qH),e(qH,Akr),e(cE,ykr),e(Pe,Lkr),e(Pe,fE),e(fE,Pve),e(Pve,xkr),e(fE,kkr),e(fE,NH),e(NH,Skr),e(fE,Rkr),e($o,Bkr),e($o,$ve),e($ve,Pkr),e($o,$kr),g(XL,$o,null),b(c,XBe,u),b(c,Af,u),e(Af,mE),e(mE,Ive),g(zL,Ive,null),e(Af,Ikr),e(Af,qve),e(qve,qkr),b(c,zBe,u),b(c,Gr,u),g(QL,Gr,null),e(Gr,Nkr),e(Gr,yf),e(yf,jkr),e(yf,jH),e(jH,Dkr),e(yf,Gkr),e(yf,DH),e(DH,Okr),e(yf,Vkr),e(Gr,Xkr),e(Gr,WL),e(WL,zkr),e(WL,Nve),e(Nve,Qkr),e(WL,Wkr),e(Gr,Hkr),e(Gr,$t),g(HL,$t,null),e($t,Ukr),e($t,jve),e(jve,Jkr),e($t,Ykr),e($t,Lf),e(Lf,Kkr),e(Lf,Dve),e(Dve,Zkr),e(Lf,eSr),e(Lf,GH),e(GH,oSr),e(Lf,rSr),e($t,tSr),e($t,Gve),e(Gve,aSr),e($t,nSr),g(UL,$t,null),e(Gr,sSr),e(Gr,Io),g(JL,Io,null),e(Io,lSr),e(Io,Ove),e(Ove,iSr),e(Io,dSr),e(Io,Nn),e(Nn,cSr),e(Nn,Vve),e(Vve,fSr),e(Nn,mSr),e(Nn,Xve),e(Xve,gSr),e(Nn,hSr),e(Nn,zve),e(zve,pSr),e(Nn,_Sr),e(Io,uSr),e(Io,Qve),e(Qve,gE),e(gE,Wve),e(Wve,bSr),e(gE,FSr),e(gE,OH),e(OH,vSr),e(gE,TSr),e(Io,MSr),e(Io,Hve),e(Hve,ESr),e(Io,CSr),g(YL,Io,null),b(c,QBe,u),b(c,xf,u),e(xf,hE),e(hE,Uve),g(KL,Uve,null),e(xf,wSr),e(xf,Jve),e(Jve,ASr),b(c,WBe,u),b(c,Or,u),g(ZL,Or,null),e(Or,ySr),e(Or,kf),e(kf,LSr),e(kf,VH),e(VH,xSr),e(kf,kSr),e(kf,XH),e(XH,SSr),e(kf,RSr),e(Or,BSr),e(Or,e8),e(e8,PSr),e(e8,Yve),e(Yve,$Sr),e(e8,ISr),e(Or,qSr),e(Or,It),g(o8,It,null),e(It,NSr),e(It,Kve),e(Kve,jSr),e(It,DSr),e(It,Sf),e(Sf,GSr),e(Sf,Zve),e(Zve,OSr),e(Sf,VSr),e(Sf,zH),e(zH,XSr),e(Sf,zSr),e(It,QSr),e(It,e6e),e(e6e,WSr),e(It,HSr),g(r8,It,null),e(Or,USr),e(Or,qo),g(t8,qo,null),e(qo,JSr),e(qo,o6e),e(o6e,YSr),e(qo,KSr),e(qo,jn),e(jn,ZSr),e(jn,r6e),e(r6e,eRr),e(jn,oRr),e(jn,t6e),e(t6e,rRr),e(jn,tRr),e(jn,a6e),e(a6e,aRr),e(jn,nRr),e(qo,sRr),e(qo,a8),e(a8,pE),e(pE,n6e),e(n6e,lRr),e(pE,iRr),e(pE,QH),e(QH,dRr),e(pE,cRr),e(a8,fRr),e(a8,_E),e(_E,s6e),e(s6e,mRr),e(_E,gRr),e(_E,WH),e(WH,hRr),e(_E,pRr),e(qo,_Rr),e(qo,l6e),e(l6e,uRr),e(qo,bRr),g(n8,qo,null),b(c,HBe,u),b(c,Rf,u),e(Rf,uE),e(uE,i6e),g(s8,i6e,null),e(Rf,FRr),e(Rf,d6e),e(d6e,vRr),b(c,UBe,u),b(c,Vr,u),g(l8,Vr,null),e(Vr,TRr),e(Vr,Bf),e(Bf,MRr),e(Bf,HH),e(HH,ERr),e(Bf,CRr),e(Bf,UH),e(UH,wRr),e(Bf,ARr),e(Vr,yRr),e(Vr,i8),e(i8,LRr),e(i8,c6e),e(c6e,xRr),e(i8,kRr),e(Vr,SRr),e(Vr,qt),g(d8,qt,null),e(qt,RRr),e(qt,f6e),e(f6e,BRr),e(qt,PRr),e(qt,Pf),e(Pf,$Rr),e(Pf,m6e),e(m6e,IRr),e(Pf,qRr),e(Pf,JH),e(JH,NRr),e(Pf,jRr),e(qt,DRr),e(qt,g6e),e(g6e,GRr),e(qt,ORr),g(c8,qt,null),e(Vr,VRr),e(Vr,No),g(f8,No,null),e(No,XRr),e(No,h6e),e(h6e,zRr),e(No,QRr),e(No,Dn),e(Dn,WRr),e(Dn,p6e),e(p6e,HRr),e(Dn,URr),e(Dn,_6e),e(_6e,JRr),e(Dn,YRr),e(Dn,u6e),e(u6e,KRr),e(Dn,ZRr),e(No,eBr),e(No,b6e),e(b6e,bE),e(bE,F6e),e(F6e,oBr),e(bE,rBr),e(bE,YH),e(YH,tBr),e(bE,aBr),e(No,nBr),e(No,v6e),e(v6e,sBr),e(No,lBr),g(m8,No,null),JBe=!0},p(c,[u]){const g8={};u&2&&(g8.$$scope={dirty:u,ctx:c}),Of.$set(g8);const T6e={};u&2&&(T6e.$$scope={dirty:u,ctx:c}),Bh.$set(T6e);const M6e={};u&2&&(M6e.$$scope={dirty:u,ctx:c}),Xh.$set(M6e)},i(c){JBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(Of.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(OC.$$.fragment,c),h(Bh.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(UC.$$.fragment,c),h(Xh.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(F5.$$.fragment,c),h(v5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),JBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(Of.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(OC.$$.fragment,c),p(Bh.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(UC.$$.fragment,c),p(Xh.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(F5.$$.fragment,c),p(v5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),JBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(USe),c&&t(Vi),_(MC),c&&t(JSe),c&&t(zn),c&&t(YSe),_(EC,c),c&&t(KSe),c&&t(p9),c&&t(ZSe),_(Of,c),c&&t(eRe),c&&t(Xi),_(CC),c&&t(oRe),c&&t(Qo),_(wC),_(LC),_(xC),_(kC),c&&t(rRe),c&&t(Qi),_(SC),c&&t(tRe),c&&t(Wo),_(RC),_($C),_(IC),_(qC),c&&t(aRe),c&&t(Wi),_(NC),c&&t(nRe),c&&t(Ho),_(jC),_(OC),_(Bh),_(VC),_(XC),c&&t(sRe),c&&t(Hi),_(zC),c&&t(lRe),c&&t(Uo),_(QC),_(UC),_(Xh),_(JC),_(YC),c&&t(iRe),c&&t(Ji),_(KC),c&&t(dRe),c&&t(Jo),_(ZC),_(o5),_(r5),_(t5),_(a5),c&&t(cRe),c&&t(Zi),_(n5),c&&t(fRe),c&&t(Yo),_(s5),_(i5),_(d5),_(c5),_(f5),c&&t(mRe),c&&t(rd),_(m5),c&&t(gRe),c&&t(Ko),_(g5),_(p5),_(_5),_(u5),_(b5),c&&t(hRe),c&&t(nd),_(F5),c&&t(pRe),c&&t(Zo),_(v5),_(M5),_(E5),_(C5),_(w5),c&&t(_Re),c&&t(id),_(A5),c&&t(uRe),c&&t(er),_(y5),_(x5),_(k5),_(S5),_(R5),c&&t(bRe),c&&t(fd),_(B5),c&&t(FRe),c&&t(or),_(P5),_(I5),_(q5),_(N5),_(j5),c&&t(vRe),c&&t(hd),_(D5),c&&t(TRe),c&&t(rr),_(G5),_(V5),_(X5),_(z5),_(Q5),c&&t(MRe),c&&t(ud),_(W5),c&&t(ERe),c&&t(tr),_(H5),_(J5),_(Y5),_(K5),_(Z5),c&&t(CRe),c&&t(vd),_(ew),c&&t(wRe),c&&t(ar),_(ow),_(tw),_(aw),_(nw),_(sw),c&&t(ARe),c&&t(Ed),_(lw),c&&t(yRe),c&&t(nr),_(iw),_(cw),_(fw),_(mw),_(gw),c&&t(LRe),c&&t(Ad),_(hw),c&&t(xRe),c&&t(sr),_(pw),_(uw),_(bw),_(Fw),_(vw),c&&t(kRe),c&&t(xd),_(Tw),c&&t(SRe),c&&t(lr),_(Mw),_(Cw),_(ww),_(Aw),_(yw),c&&t(RRe),c&&t(Rd),_(Lw),c&&t(BRe),c&&t(ir),_(xw),_(Sw),_(Rw),_(Bw),_(Pw),c&&t(PRe),c&&t($d),_($w),c&&t($Re),c&&t(dr),_(Iw),_(Nw),_(jw),_(Dw),_(Gw),c&&t(IRe),c&&t(Nd),_(Ow),c&&t(qRe),c&&t(cr),_(Vw),_(zw),_(Qw),_(Ww),_(Hw),c&&t(NRe),c&&t(Gd),_(Uw),c&&t(jRe),c&&t(fr),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(DRe),c&&t(Xd),_(rA),c&&t(GRe),c&&t(mr),_(tA),_(nA),_(sA),_(lA),_(dA),c&&t(ORe),c&&t(Wd),_(cA),c&&t(VRe),c&&t(gr),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(XRe),c&&t(Jd),_(uA),c&&t(zRe),c&&t(hr),_(bA),_(vA),_(TA),_(MA),_(EA),c&&t(QRe),c&&t(ec),_(CA),c&&t(WRe),c&&t(pr),_(wA),_(yA),_(LA),_(xA),_(kA),c&&t(HRe),c&&t(tc),_(SA),c&&t(URe),c&&t(_r),_(RA),_(PA),_($A),_(IA),_(qA),c&&t(JRe),c&&t(sc),_(NA),c&&t(YRe),c&&t(ur),_(jA),_(GA),_(OA),_(VA),_(XA),c&&t(KRe),c&&t(cc),_(zA),c&&t(ZRe),c&&t(br),_(QA),_(HA),_(UA),_(JA),_(YA),c&&t(eBe),c&&t(gc),_(KA),c&&t(oBe),c&&t(Fr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(rBe),c&&t(_c),_(n0),c&&t(tBe),c&&t(vr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(aBe),c&&t(Fc),_(m0),c&&t(nBe),c&&t(Tr),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(sBe),c&&t(Mc),_(F0),c&&t(lBe),c&&t(Mr),_(v0),_(M0),_(E0),_(C0),_(A0),c&&t(iBe),c&&t(wc),_(y0),c&&t(dBe),c&&t(Er),_(L0),_(k0),_(S0),_(R0),_(B0),c&&t(cBe),c&&t(Lc),_(P0),c&&t(fBe),c&&t(Cr),_($0),_(q0),_(N0),_(j0),_(D0),c&&t(mBe),c&&t(Sc),_(G0),c&&t(gBe),c&&t(wr),_(O0),_(X0),_(z0),_(Q0),_(W0),c&&t(hBe),c&&t(Pc),_(H0),c&&t(pBe),c&&t(Ar),_(U0),_(Y0),_(K0),_(Z0),_(ey),c&&t(_Be),c&&t(qc),_(oy),c&&t(uBe),c&&t(yr),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(bBe),c&&t(Dc),_(iy),c&&t(FBe),c&&t(Lr),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(vBe),c&&t(Vc),_(py),c&&t(TBe),c&&t(xr),_(_y),_(by),_(Fy),_(vy),_(Ty),c&&t(MBe),c&&t(Qc),_(My),c&&t(EBe),c&&t(kr),_(Ey),_(wy),_(Ay),_(yy),_(Ly),c&&t(CBe),c&&t(Uc),_(xy),c&&t(wBe),c&&t(Sr),_(ky),_(Ry),_(By),_(Py),_($y),c&&t(ABe),c&&t(Kc),_(Iy),c&&t(yBe),c&&t(Rr),_(qy),_(jy),_(Dy),_(Gy),_(Oy),c&&t(LBe),c&&t(of),_(Vy),c&&t(xBe),c&&t(Br),_(Xy),_(Qy),_(Wy),_(Hy),_(Uy),c&&t(kBe),c&&t(af),_(Jy),c&&t(SBe),c&&t(Pr),_(Yy),_(Zy),_(eL),_(oL),_(rL),c&&t(RBe),c&&t(lf),_(tL),c&&t(BBe),c&&t($r),_(aL),_(sL),_(lL),_(iL),_(dL),c&&t(PBe),c&&t(ff),_(cL),c&&t($Be),c&&t(Ir),_(fL),_(gL),_(hL),_(pL),_(_L),c&&t(IBe),c&&t(hf),_(uL),c&&t(qBe),c&&t(qr),_(bL),_(vL),_(TL),_(ML),_(EL),c&&t(NBe),c&&t(uf),_(CL),c&&t(jBe),c&&t(Nr),_(wL),_(yL),_(LL),_(xL),_(kL),c&&t(DBe),c&&t(vf),_(SL),c&&t(GBe),c&&t(jr),_(RL),_(PL),_($L),_(IL),_(qL),c&&t(OBe),c&&t(Ef),_(NL),c&&t(VBe),c&&t(Dr),_(jL),_(GL),_(OL),_(VL),_(XL),c&&t(XBe),c&&t(Af),_(zL),c&&t(zBe),c&&t(Gr),_(QL),_(HL),_(UL),_(JL),_(YL),c&&t(QBe),c&&t(xf),_(KL),c&&t(WBe),c&&t(Or),_(ZL),_(o8),_(r8),_(t8),_(n8),c&&t(HBe),c&&t(Rf),_(s8),c&&t(UBe),c&&t(Vr),_(l8),_(d8),_(c8),_(f8),_(m8)}}}const NEt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function jEt(If){return BEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class zEt extends xEt{constructor(Z){super();kEt(this,Z,jEt,qEt,SEt,{})}}export{zEt as default,NEt as metadata};
