import{S as lEt,i as iEt,s as dEt,e as a,k as l,w as f,t as o,M as cEt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as fEt}from"../../chunks/vendor-6b77c823.js";import{T as XRr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function mEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,_C,Nf,xe,co,ji,Gn,uC,On,Vn,bC,Di,Xn,FC,Gi,jf,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ii=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),qi=a("code"),Ni=o('"new-model"'),_C=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),ji=a("code"),Gn=o("NewModel"),uC=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),bC=o(`, make sure its
`),Di=a("code"),Xn=o("config_class"),FC=o(` attribute is set to the same class you use when registering the model (here
`),Gi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var i9=s(de);Ce=r(i9,"NewModelConfig"),i9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Oi=s(me);Me=r(Oi,"PretrainedConfig"),Oi.forEach(t),Xo=r(_e,`, make sure its
`),Ii=n(_e,"CODE",{});var d9=s(Ii);qf=r(d9,"model_type"),d9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),qi=n(_e,"CODE",{});var c9=s(qi);Ni=r(c9,'"new-model"'),c9.forEach(t),_C=r(_e,")."),_e.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),ji=n(zo,"CODE",{});var Ga=s(ji);Gn=r(Ga,"NewModel"),Ga.forEach(t),uC=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var f9=s(On);Vn=r(f9,"PreTrainedModel"),f9.forEach(t),bC=r(zo,`, make sure its
`),Di=n(zo,"CODE",{});var Df=s(Di);Xn=r(Df,"config_class"),Df.forEach(t),FC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Gi=n(zo,"CODE",{});var m9=s(Gi);jf=r(m9,"NewModelConfig"),m9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,Ii),e(Ii,qf),e(Z,fa),e(Z,qi),e(qi,Ni),e(Z,_C),b(fo,Nf,_e),b(fo,xe,_e),e(xe,co),e(xe,ji),e(ji,Gn),e(xe,uC),e(xe,On),e(On,Vn),e(xe,bC),e(xe,Di),e(Di,Xn),e(xe,FC),e(xe,Gi),e(Gi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function gEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function hEt(If){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function pEt(If){let Z,io,de,Ce,lo,me,Me,Xo,Ii,qf,fa,qi,Ni,_C,Nf,xe,co,ji,Gn,uC,On,Vn,bC,Di,Xn,FC,Gi,jf,Da,fo,_e,i9,Oi,d9,c9,zo,Ga,f9,Df,m9,eIe,GSe,Vi,Gf,GJ,vC,oIe,OJ,rIe,OSe,zn,tIe,VJ,aIe,nIe,XJ,sIe,lIe,VSe,TC,XSe,g9,iIe,zSe,Of,QSe,Xi,Vf,zJ,MC,dIe,QJ,cIe,WSe,Qo,EC,fIe,CC,mIe,h9,gIe,hIe,pIe,wC,_Ie,WJ,uIe,bIe,FIe,mo,AC,vIe,HJ,TIe,MIe,zi,EIe,UJ,CIe,wIe,JJ,AIe,yIe,LIe,F,Xf,YJ,xIe,kIe,p9,SIe,RIe,BIe,zf,KJ,PIe,$Ie,_9,IIe,qIe,NIe,Qf,ZJ,jIe,DIe,u9,GIe,OIe,VIe,Wf,eY,XIe,zIe,b9,QIe,WIe,HIe,Hf,oY,UIe,JIe,F9,YIe,KIe,ZIe,Uf,rY,eqe,oqe,v9,rqe,tqe,aqe,Jf,tY,nqe,sqe,T9,lqe,iqe,dqe,Yf,aY,cqe,fqe,M9,mqe,gqe,hqe,Kf,nY,pqe,_qe,E9,uqe,bqe,Fqe,Zf,sY,vqe,Tqe,C9,Mqe,Eqe,Cqe,em,lY,wqe,Aqe,w9,yqe,Lqe,xqe,om,iY,kqe,Sqe,A9,Rqe,Bqe,Pqe,rm,dY,$qe,Iqe,y9,qqe,Nqe,jqe,tm,cY,Dqe,Gqe,L9,Oqe,Vqe,Xqe,am,fY,zqe,Qqe,x9,Wqe,Hqe,Uqe,nm,mY,Jqe,Yqe,k9,Kqe,Zqe,eNe,sm,gY,oNe,rNe,S9,tNe,aNe,nNe,lm,hY,sNe,lNe,R9,iNe,dNe,cNe,im,pY,fNe,mNe,B9,gNe,hNe,pNe,dm,_Y,_Ne,uNe,P9,bNe,FNe,vNe,cm,uY,TNe,MNe,$9,ENe,CNe,wNe,fm,bY,ANe,yNe,I9,LNe,xNe,kNe,mm,FY,SNe,RNe,q9,BNe,PNe,$Ne,gm,vY,INe,qNe,N9,NNe,jNe,DNe,hm,TY,GNe,ONe,j9,VNe,XNe,zNe,pm,MY,QNe,WNe,D9,HNe,UNe,JNe,_m,EY,YNe,KNe,G9,ZNe,eje,oje,um,CY,rje,tje,O9,aje,nje,sje,bm,wY,lje,ije,V9,dje,cje,fje,Fm,AY,mje,gje,X9,hje,pje,_je,vm,yY,uje,bje,z9,Fje,vje,Tje,Tm,LY,Mje,Eje,Q9,Cje,wje,Aje,Mm,xY,yje,Lje,W9,xje,kje,Sje,Em,kY,Rje,Bje,H9,Pje,$je,Ije,Cm,SY,qje,Nje,U9,jje,Dje,Gje,wm,RY,Oje,Vje,J9,Xje,zje,Qje,Am,BY,Wje,Hje,Y9,Uje,Jje,Yje,ym,PY,Kje,Zje,K9,eDe,oDe,rDe,Lm,$Y,tDe,aDe,Z9,nDe,sDe,lDe,xm,IY,iDe,dDe,ex,cDe,fDe,mDe,km,qY,gDe,hDe,ox,pDe,_De,uDe,Sm,NY,bDe,FDe,rx,vDe,TDe,MDe,Rm,jY,EDe,CDe,tx,wDe,ADe,yDe,Bm,DY,LDe,xDe,ax,kDe,SDe,RDe,Pm,GY,BDe,PDe,nx,$De,IDe,qDe,$m,OY,NDe,jDe,sx,DDe,GDe,ODe,Im,VY,VDe,XDe,lx,zDe,QDe,WDe,qm,XY,HDe,UDe,ix,JDe,YDe,KDe,Nm,zY,ZDe,eGe,dx,oGe,rGe,tGe,jm,QY,aGe,nGe,cx,sGe,lGe,iGe,Dm,WY,dGe,cGe,fx,fGe,mGe,gGe,Gm,HY,hGe,pGe,mx,_Ge,uGe,bGe,Om,UY,FGe,vGe,gx,TGe,MGe,EGe,Vm,JY,CGe,wGe,hx,AGe,yGe,LGe,Xm,YY,xGe,kGe,px,SGe,RGe,BGe,zm,KY,PGe,$Ge,_x,IGe,qGe,NGe,Qm,ZY,jGe,DGe,ux,GGe,OGe,VGe,Wm,eK,XGe,zGe,bx,QGe,WGe,HGe,Hm,oK,UGe,JGe,Fx,YGe,KGe,ZGe,Um,rK,eOe,oOe,vx,rOe,tOe,aOe,Jm,tK,nOe,sOe,Tx,lOe,iOe,dOe,Ym,aK,cOe,fOe,Mx,mOe,gOe,hOe,Km,nK,pOe,_Oe,Ex,uOe,bOe,FOe,Zm,sK,vOe,TOe,Cx,MOe,EOe,COe,eg,lK,wOe,AOe,wx,yOe,LOe,xOe,og,iK,kOe,SOe,Ax,ROe,BOe,POe,rg,dK,$Oe,IOe,yx,qOe,NOe,jOe,tg,cK,DOe,GOe,Lx,OOe,VOe,XOe,ag,fK,zOe,QOe,xx,WOe,HOe,UOe,ng,mK,JOe,YOe,kx,KOe,ZOe,eVe,sg,gK,oVe,rVe,Sx,tVe,aVe,nVe,lg,hK,sVe,lVe,Rx,iVe,dVe,cVe,ig,pK,fVe,mVe,Bx,gVe,hVe,pVe,dg,_K,_Ve,uVe,Px,bVe,FVe,vVe,cg,uK,TVe,MVe,$x,EVe,CVe,wVe,fg,bK,AVe,yVe,Ix,LVe,xVe,kVe,mg,FK,SVe,RVe,qx,BVe,PVe,$Ve,gg,vK,IVe,qVe,Nx,NVe,jVe,DVe,hg,TK,GVe,OVe,jx,VVe,XVe,zVe,pg,MK,QVe,WVe,Dx,HVe,UVe,JVe,_g,EK,YVe,KVe,Gx,ZVe,eXe,oXe,ug,CK,rXe,tXe,Ox,aXe,nXe,sXe,bg,wK,lXe,iXe,Vx,dXe,cXe,fXe,Fg,AK,mXe,gXe,Xx,hXe,pXe,_Xe,vg,yK,uXe,bXe,zx,FXe,vXe,TXe,Tg,LK,MXe,EXe,Qx,CXe,wXe,AXe,Mg,xK,yXe,LXe,Wx,xXe,kXe,SXe,Eg,kK,RXe,BXe,Hx,PXe,$Xe,IXe,Cg,SK,qXe,NXe,Ux,jXe,DXe,GXe,wg,RK,OXe,VXe,Jx,XXe,zXe,QXe,Ag,BK,WXe,HXe,Yx,UXe,JXe,YXe,yg,PK,KXe,ZXe,Kx,eze,oze,rze,Lg,$K,tze,aze,Zx,nze,sze,lze,xg,IK,ize,dze,ek,cze,fze,mze,kg,qK,gze,hze,ok,pze,_ze,uze,Sg,NK,bze,Fze,rk,vze,Tze,Mze,Rg,jK,Eze,Cze,tk,wze,Aze,yze,Bg,DK,Lze,xze,ak,kze,Sze,Rze,Pg,GK,Bze,Pze,nk,$ze,Ize,qze,OK,Nze,jze,yC,Dze,$g,LC,Gze,VK,Oze,HSe,Qi,Ig,XK,xC,Vze,zK,Xze,USe,Wo,kC,zze,SC,Qze,sk,Wze,Hze,Uze,RC,Jze,QK,Yze,Kze,Zze,go,BC,eQe,WK,oQe,rQe,Oa,tQe,HK,aQe,nQe,UK,sQe,lQe,JK,iQe,dQe,cQe,E,Qn,YK,fQe,mQe,lk,gQe,hQe,ik,pQe,_Qe,uQe,Wn,KK,bQe,FQe,dk,vQe,TQe,ck,MQe,EQe,CQe,Hn,ZK,wQe,AQe,fk,yQe,LQe,mk,xQe,kQe,SQe,qg,eZ,RQe,BQe,gk,PQe,$Qe,IQe,Un,oZ,qQe,NQe,hk,jQe,DQe,pk,GQe,OQe,VQe,Ng,rZ,XQe,zQe,_k,QQe,WQe,HQe,jg,tZ,UQe,JQe,uk,YQe,KQe,ZQe,Dg,aZ,eWe,oWe,bk,rWe,tWe,aWe,Jn,nZ,nWe,sWe,Fk,lWe,iWe,vk,dWe,cWe,fWe,Yn,sZ,mWe,gWe,Tk,hWe,pWe,Mk,_We,uWe,bWe,Kn,lZ,FWe,vWe,Ek,TWe,MWe,Ck,EWe,CWe,wWe,Gg,iZ,AWe,yWe,wk,LWe,xWe,kWe,Og,dZ,SWe,RWe,Ak,BWe,PWe,$We,Zn,cZ,IWe,qWe,yk,NWe,jWe,Lk,DWe,GWe,OWe,Vg,fZ,VWe,XWe,xk,zWe,QWe,WWe,es,mZ,HWe,UWe,kk,JWe,YWe,Sk,KWe,ZWe,eHe,os,gZ,oHe,rHe,Rk,tHe,aHe,Bk,nHe,sHe,lHe,rs,hZ,iHe,dHe,Pk,cHe,fHe,pZ,mHe,gHe,hHe,Xg,_Z,pHe,_He,$k,uHe,bHe,FHe,ts,uZ,vHe,THe,Ik,MHe,EHe,qk,CHe,wHe,AHe,zg,bZ,yHe,LHe,Nk,xHe,kHe,SHe,as,FZ,RHe,BHe,jk,PHe,$He,Dk,IHe,qHe,NHe,ns,vZ,jHe,DHe,Gk,GHe,OHe,Ok,VHe,XHe,zHe,ss,TZ,QHe,WHe,Vk,HHe,UHe,Xk,JHe,YHe,KHe,Qg,MZ,ZHe,eUe,zk,oUe,rUe,tUe,ls,EZ,aUe,nUe,Qk,sUe,lUe,Wk,iUe,dUe,cUe,Wg,CZ,fUe,mUe,Hk,gUe,hUe,pUe,is,wZ,_Ue,uUe,Uk,bUe,FUe,Jk,vUe,TUe,MUe,ds,AZ,EUe,CUe,Yk,wUe,AUe,Kk,yUe,LUe,xUe,cs,yZ,kUe,SUe,Zk,RUe,BUe,eS,PUe,$Ue,IUe,fs,LZ,qUe,NUe,oS,jUe,DUe,rS,GUe,OUe,VUe,Hg,xZ,XUe,zUe,tS,QUe,WUe,HUe,ms,kZ,UUe,JUe,aS,YUe,KUe,nS,ZUe,eJe,oJe,gs,SZ,rJe,tJe,sS,aJe,nJe,lS,sJe,lJe,iJe,hs,RZ,dJe,cJe,iS,fJe,mJe,dS,gJe,hJe,pJe,ps,BZ,_Je,uJe,cS,bJe,FJe,fS,vJe,TJe,MJe,_s,PZ,EJe,CJe,mS,wJe,AJe,gS,yJe,LJe,xJe,us,$Z,kJe,SJe,hS,RJe,BJe,pS,PJe,$Je,IJe,Ug,IZ,qJe,NJe,_S,jJe,DJe,GJe,bs,qZ,OJe,VJe,uS,XJe,zJe,bS,QJe,WJe,HJe,Jg,NZ,UJe,JJe,FS,YJe,KJe,ZJe,Yg,jZ,eYe,oYe,vS,rYe,tYe,aYe,Fs,DZ,nYe,sYe,TS,lYe,iYe,MS,dYe,cYe,fYe,vs,GZ,mYe,gYe,ES,hYe,pYe,CS,_Ye,uYe,bYe,Kg,OZ,FYe,vYe,wS,TYe,MYe,EYe,Ts,VZ,CYe,wYe,AS,AYe,yYe,yS,LYe,xYe,kYe,Ms,XZ,SYe,RYe,LS,BYe,PYe,xS,$Ye,IYe,qYe,Es,zZ,NYe,jYe,kS,DYe,GYe,SS,OYe,VYe,XYe,Cs,QZ,zYe,QYe,RS,WYe,HYe,BS,UYe,JYe,YYe,ws,WZ,KYe,ZYe,PS,eKe,oKe,$S,rKe,tKe,aKe,Zg,HZ,nKe,sKe,IS,lKe,iKe,dKe,eh,UZ,cKe,fKe,qS,mKe,gKe,hKe,oh,JZ,pKe,_Ke,NS,uKe,bKe,FKe,rh,YZ,vKe,TKe,jS,MKe,EKe,CKe,As,KZ,wKe,AKe,DS,yKe,LKe,GS,xKe,kKe,SKe,th,ZZ,RKe,BKe,OS,PKe,$Ke,IKe,ys,eee,qKe,NKe,VS,jKe,DKe,XS,GKe,OKe,VKe,Ls,oee,XKe,zKe,zS,QKe,WKe,QS,HKe,UKe,JKe,xs,ree,YKe,KKe,WS,ZKe,eZe,HS,oZe,rZe,tZe,ks,tee,aZe,nZe,US,sZe,lZe,JS,iZe,dZe,cZe,Ss,aee,fZe,mZe,YS,gZe,hZe,KS,pZe,_Ze,uZe,Rs,nee,bZe,FZe,ZS,vZe,TZe,eR,MZe,EZe,CZe,ah,see,wZe,AZe,oR,yZe,LZe,xZe,nh,lee,kZe,SZe,rR,RZe,BZe,PZe,Bs,iee,$Ze,IZe,tR,qZe,NZe,aR,jZe,DZe,GZe,Ps,dee,OZe,VZe,nR,XZe,zZe,sR,QZe,WZe,HZe,$s,cee,UZe,JZe,lR,YZe,KZe,iR,ZZe,eeo,oeo,sh,fee,reo,teo,dR,aeo,neo,seo,lh,mee,leo,ieo,cR,deo,ceo,feo,ih,gee,meo,geo,fR,heo,peo,_eo,dh,hee,ueo,beo,mR,Feo,veo,Teo,ch,pee,Meo,Eeo,gR,Ceo,weo,Aeo,Is,_ee,yeo,Leo,hR,xeo,keo,pR,Seo,Reo,Beo,fh,uee,Peo,$eo,_R,Ieo,qeo,Neo,mh,bee,jeo,Deo,uR,Geo,Oeo,Veo,qs,Fee,Xeo,zeo,bR,Qeo,Weo,FR,Heo,Ueo,Jeo,Ns,vee,Yeo,Keo,vR,Zeo,eoo,TR,ooo,roo,too,Tee,aoo,noo,PC,soo,gh,$C,loo,Mee,ioo,JSe,Wi,hh,Eee,IC,doo,Cee,coo,YSe,Ho,qC,foo,NC,moo,MR,goo,hoo,poo,jC,_oo,wee,uoo,boo,Foo,$e,DC,voo,Aee,Too,Moo,Va,Eoo,yee,Coo,woo,Lee,Aoo,yoo,xee,Loo,xoo,koo,te,ph,kee,Soo,Roo,ER,Boo,Poo,$oo,_h,See,Ioo,qoo,CR,Noo,joo,Doo,uh,Ree,Goo,Ooo,wR,Voo,Xoo,zoo,bh,Bee,Qoo,Woo,AR,Hoo,Uoo,Joo,Fh,Pee,Yoo,Koo,yR,Zoo,ero,oro,vh,$ee,rro,tro,LR,aro,nro,sro,Th,Iee,lro,iro,xR,dro,cro,fro,Mh,qee,mro,gro,kR,hro,pro,_ro,Eh,Nee,uro,bro,SR,Fro,vro,Tro,Ch,jee,Mro,Ero,RR,Cro,wro,Aro,wh,Dee,yro,Lro,BR,xro,kro,Sro,Ah,Gee,Rro,Bro,PR,Pro,$ro,Iro,yh,Oee,qro,Nro,$R,jro,Dro,Gro,Lh,Vee,Oro,Vro,IR,Xro,zro,Qro,xh,Xee,Wro,Hro,qR,Uro,Jro,Yro,kh,zee,Kro,Zro,NR,eto,oto,rto,Sh,Qee,tto,ato,jR,nto,sto,lto,Rh,Wee,ito,dto,DR,cto,fto,mto,Bh,gto,Hee,hto,pto,GC,_to,Ph,OC,uto,Uee,bto,KSe,Hi,$h,Jee,VC,Fto,Yee,vto,ZSe,Uo,XC,Tto,zC,Mto,GR,Eto,Cto,wto,QC,Ato,Kee,yto,Lto,xto,Ie,WC,kto,Zee,Sto,Rto,Ui,Bto,eoe,Pto,$to,ooe,Ito,qto,Nto,ke,Ih,roe,jto,Dto,OR,Gto,Oto,Vto,qh,toe,Xto,zto,VR,Qto,Wto,Hto,Nh,aoe,Uto,Jto,XR,Yto,Kto,Zto,jh,noe,eao,oao,zR,rao,tao,aao,Dh,soe,nao,sao,QR,lao,iao,dao,Gh,loe,cao,fao,WR,mao,gao,hao,Oh,ioe,pao,_ao,HR,uao,bao,Fao,Vh,doe,vao,Tao,UR,Mao,Eao,Cao,Xh,wao,coe,Aao,yao,HC,Lao,zh,UC,xao,foe,kao,eRe,Ji,Qh,moe,JC,Sao,goe,Rao,oRe,Jo,YC,Bao,Yi,Pao,JR,$ao,Iao,YR,qao,Nao,jao,KC,Dao,hoe,Gao,Oao,Vao,Xr,ZC,Xao,poe,zao,Qao,Ki,Wao,_oe,Hao,Uao,KR,Jao,Yao,Kao,uoe,Zao,eno,e5,ono,qe,o5,rno,boe,tno,ano,Xa,nno,Foe,sno,lno,voe,ino,dno,Toe,cno,fno,mno,T,Wh,Moe,gno,hno,ZR,pno,_no,uno,Hh,Eoe,bno,Fno,eB,vno,Tno,Mno,Uh,Coe,Eno,Cno,oB,wno,Ano,yno,Jh,woe,Lno,xno,rB,kno,Sno,Rno,Yh,Aoe,Bno,Pno,tB,$no,Ino,qno,Kh,yoe,Nno,jno,aB,Dno,Gno,Ono,Zh,Loe,Vno,Xno,nB,zno,Qno,Wno,ep,xoe,Hno,Uno,sB,Jno,Yno,Kno,op,koe,Zno,eso,lB,oso,rso,tso,rp,Soe,aso,nso,iB,sso,lso,iso,tp,Roe,dso,cso,dB,fso,mso,gso,ap,Boe,hso,pso,cB,_so,uso,bso,np,Poe,Fso,vso,fB,Tso,Mso,Eso,sp,$oe,Cso,wso,mB,Aso,yso,Lso,lp,Ioe,xso,kso,gB,Sso,Rso,Bso,ip,qoe,Pso,$so,hB,Iso,qso,Nso,dp,Noe,jso,Dso,pB,Gso,Oso,Vso,cp,joe,Xso,zso,_B,Qso,Wso,Hso,fp,Doe,Uso,Jso,uB,Yso,Kso,Zso,mp,Goe,elo,olo,bB,rlo,tlo,alo,gp,Ooe,nlo,slo,FB,llo,ilo,dlo,hp,Voe,clo,flo,vB,mlo,glo,hlo,pp,Xoe,plo,_lo,TB,ulo,blo,Flo,_p,zoe,vlo,Tlo,MB,Mlo,Elo,Clo,up,Qoe,wlo,Alo,EB,ylo,Llo,xlo,bp,Woe,klo,Slo,CB,Rlo,Blo,Plo,Fp,Hoe,$lo,Ilo,wB,qlo,Nlo,jlo,vp,Uoe,Dlo,Glo,AB,Olo,Vlo,Xlo,Tp,Joe,zlo,Qlo,yB,Wlo,Hlo,Ulo,js,Yoe,Jlo,Ylo,LB,Klo,Zlo,xB,eio,oio,rio,Mp,Koe,tio,aio,kB,nio,sio,lio,Ep,Zoe,iio,dio,SB,cio,fio,mio,Cp,ere,gio,hio,RB,pio,_io,uio,wp,ore,bio,Fio,BB,vio,Tio,Mio,Ap,rre,Eio,Cio,PB,wio,Aio,yio,yp,tre,Lio,xio,$B,kio,Sio,Rio,Lp,are,Bio,Pio,IB,$io,Iio,qio,xp,nre,Nio,jio,qB,Dio,Gio,Oio,kp,sre,Vio,Xio,NB,zio,Qio,Wio,Sp,lre,Hio,Uio,jB,Jio,Yio,Kio,Rp,ire,Zio,edo,DB,odo,rdo,tdo,Bp,dre,ado,ndo,GB,sdo,ldo,ido,Pp,cre,ddo,cdo,OB,fdo,mdo,gdo,$p,fre,hdo,pdo,VB,_do,udo,bdo,Ip,mre,Fdo,vdo,XB,Tdo,Mdo,Edo,qp,gre,Cdo,wdo,zB,Ado,ydo,Ldo,Np,hre,xdo,kdo,QB,Sdo,Rdo,Bdo,jp,pre,Pdo,$do,WB,Ido,qdo,Ndo,Dp,_re,jdo,Ddo,HB,Gdo,Odo,Vdo,Gp,ure,Xdo,zdo,UB,Qdo,Wdo,Hdo,Op,bre,Udo,Jdo,JB,Ydo,Kdo,Zdo,Vp,Fre,eco,oco,YB,rco,tco,aco,Xp,vre,nco,sco,KB,lco,ico,dco,zp,Tre,cco,fco,ZB,mco,gco,hco,Qp,Mre,pco,_co,eP,uco,bco,Fco,Wp,Ere,vco,Tco,oP,Mco,Eco,Cco,Hp,Cre,wco,Aco,rP,yco,Lco,xco,Up,wre,kco,Sco,tP,Rco,Bco,Pco,Jp,Are,$co,Ico,aP,qco,Nco,jco,Yp,yre,Dco,Gco,nP,Oco,Vco,Xco,Kp,Lre,zco,Qco,sP,Wco,Hco,Uco,Zp,xre,Jco,Yco,lP,Kco,Zco,efo,e_,kre,ofo,rfo,iP,tfo,afo,nfo,o_,Sre,sfo,lfo,dP,ifo,dfo,cfo,r_,Rre,ffo,mfo,cP,gfo,hfo,pfo,t_,Bre,_fo,ufo,fP,bfo,Ffo,vfo,a_,Pre,Tfo,Mfo,mP,Efo,Cfo,wfo,n_,$re,Afo,yfo,gP,Lfo,xfo,kfo,s_,Ire,Sfo,Rfo,hP,Bfo,Pfo,$fo,l_,qre,Ifo,qfo,pP,Nfo,jfo,Dfo,i_,Nre,Gfo,Ofo,_P,Vfo,Xfo,zfo,d_,jre,Qfo,Wfo,uP,Hfo,Ufo,Jfo,c_,Dre,Yfo,Kfo,bP,Zfo,emo,omo,f_,Gre,rmo,tmo,FP,amo,nmo,smo,m_,Ore,lmo,imo,vP,dmo,cmo,fmo,g_,Vre,mmo,gmo,TP,hmo,pmo,_mo,h_,Xre,umo,bmo,MP,Fmo,vmo,Tmo,p_,zre,Mmo,Emo,EP,Cmo,wmo,Amo,__,Qre,ymo,Lmo,CP,xmo,kmo,Smo,u_,Wre,Rmo,Bmo,wP,Pmo,$mo,Imo,b_,Hre,qmo,Nmo,AP,jmo,Dmo,Gmo,F_,Ure,Omo,Vmo,yP,Xmo,zmo,Qmo,v_,Jre,Wmo,Hmo,LP,Umo,Jmo,Ymo,T_,Yre,Kmo,Zmo,xP,ego,ogo,rgo,M_,Kre,tgo,ago,kP,ngo,sgo,lgo,E_,Zre,igo,dgo,SP,cgo,fgo,mgo,C_,ete,ggo,hgo,RP,pgo,_go,ugo,w_,ote,bgo,Fgo,BP,vgo,Tgo,Mgo,A_,rte,Ego,Cgo,PP,wgo,Ago,ygo,y_,tte,Lgo,xgo,$P,kgo,Sgo,Rgo,L_,ate,Bgo,Pgo,IP,$go,Igo,qgo,x_,nte,Ngo,jgo,qP,Dgo,Ggo,Ogo,k_,Vgo,ste,Xgo,zgo,lte,Qgo,Wgo,ite,Hgo,Ugo,r5,rRe,Zi,S_,dte,t5,Jgo,cte,Ygo,tRe,Yo,a5,Kgo,ed,Zgo,NP,eho,oho,jP,rho,tho,aho,n5,nho,fte,sho,lho,iho,zr,s5,dho,mte,cho,fho,od,mho,gte,gho,hho,DP,pho,_ho,uho,hte,bho,Fho,l5,vho,Ne,i5,Tho,pte,Mho,Eho,za,Cho,_te,who,Aho,ute,yho,Lho,bte,xho,kho,Sho,S,R_,Fte,Rho,Bho,GP,Pho,$ho,Iho,B_,vte,qho,Nho,OP,jho,Dho,Gho,P_,Tte,Oho,Vho,VP,Xho,zho,Qho,$_,Mte,Who,Hho,XP,Uho,Jho,Yho,I_,Ete,Kho,Zho,zP,epo,opo,rpo,q_,Cte,tpo,apo,QP,npo,spo,lpo,N_,wte,ipo,dpo,WP,cpo,fpo,mpo,j_,Ate,gpo,hpo,HP,ppo,_po,upo,D_,yte,bpo,Fpo,UP,vpo,Tpo,Mpo,G_,Lte,Epo,Cpo,JP,wpo,Apo,ypo,O_,xte,Lpo,xpo,YP,kpo,Spo,Rpo,V_,kte,Bpo,Ppo,KP,$po,Ipo,qpo,X_,Ste,Npo,jpo,ZP,Dpo,Gpo,Opo,z_,Rte,Vpo,Xpo,e$,zpo,Qpo,Wpo,Q_,Bte,Hpo,Upo,o$,Jpo,Ypo,Kpo,W_,Pte,Zpo,e_o,r$,o_o,r_o,t_o,H_,$te,a_o,n_o,t$,s_o,l_o,i_o,U_,Ite,d_o,c_o,a$,f_o,m_o,g_o,J_,qte,h_o,p_o,n$,__o,u_o,b_o,Y_,Nte,F_o,v_o,s$,T_o,M_o,E_o,K_,jte,C_o,w_o,l$,A_o,y_o,L_o,Z_,Dte,x_o,k_o,i$,S_o,R_o,B_o,eu,Gte,P_o,$_o,d$,I_o,q_o,N_o,ou,Ote,j_o,D_o,c$,G_o,O_o,V_o,ru,Vte,X_o,z_o,f$,Q_o,W_o,H_o,tu,Xte,U_o,J_o,m$,Y_o,K_o,Z_o,au,zte,euo,ouo,g$,ruo,tuo,auo,nu,Qte,nuo,suo,h$,luo,iuo,duo,su,Wte,cuo,fuo,p$,muo,guo,huo,lu,Hte,puo,_uo,_$,uuo,buo,Fuo,iu,Ute,vuo,Tuo,u$,Muo,Euo,Cuo,du,Jte,wuo,Auo,b$,yuo,Luo,xuo,cu,Yte,kuo,Suo,F$,Ruo,Buo,Puo,fu,Kte,$uo,Iuo,v$,quo,Nuo,juo,mu,Zte,Duo,Guo,T$,Ouo,Vuo,Xuo,gu,eae,zuo,Quo,M$,Wuo,Huo,Uuo,hu,oae,Juo,Yuo,E$,Kuo,Zuo,e1o,pu,rae,o1o,r1o,C$,t1o,a1o,n1o,_u,tae,s1o,l1o,w$,i1o,d1o,c1o,uu,f1o,aae,m1o,g1o,nae,h1o,p1o,sae,_1o,u1o,d5,aRe,rd,bu,lae,c5,b1o,iae,F1o,nRe,Ko,f5,v1o,td,T1o,A$,M1o,E1o,y$,C1o,w1o,A1o,m5,y1o,dae,L1o,x1o,k1o,Qr,g5,S1o,cae,R1o,B1o,ad,P1o,fae,$1o,I1o,L$,q1o,N1o,j1o,mae,D1o,G1o,h5,O1o,je,p5,V1o,gae,X1o,z1o,Qa,Q1o,hae,W1o,H1o,pae,U1o,J1o,_ae,Y1o,K1o,Z1o,$,Fu,uae,e4o,o4o,x$,r4o,t4o,a4o,vu,bae,n4o,s4o,k$,l4o,i4o,d4o,Tu,Fae,c4o,f4o,S$,m4o,g4o,h4o,Mu,vae,p4o,_4o,R$,u4o,b4o,F4o,Eu,Tae,v4o,T4o,B$,M4o,E4o,C4o,Cu,Mae,w4o,A4o,P$,y4o,L4o,x4o,wu,Eae,k4o,S4o,$$,R4o,B4o,P4o,Au,Cae,$4o,I4o,I$,q4o,N4o,j4o,yu,wae,D4o,G4o,q$,O4o,V4o,X4o,Lu,Aae,z4o,Q4o,N$,W4o,H4o,U4o,xu,yae,J4o,Y4o,j$,K4o,Z4o,ebo,ku,Lae,obo,rbo,D$,tbo,abo,nbo,Su,xae,sbo,lbo,G$,ibo,dbo,cbo,Ru,kae,fbo,mbo,O$,gbo,hbo,pbo,Bu,Sae,_bo,ubo,V$,bbo,Fbo,vbo,Pu,Rae,Tbo,Mbo,X$,Ebo,Cbo,wbo,$u,Bae,Abo,ybo,z$,Lbo,xbo,kbo,Iu,Pae,Sbo,Rbo,Q$,Bbo,Pbo,$bo,qu,$ae,Ibo,qbo,W$,Nbo,jbo,Dbo,Nu,Iae,Gbo,Obo,H$,Vbo,Xbo,zbo,ju,qae,Qbo,Wbo,U$,Hbo,Ubo,Jbo,Du,Nae,Ybo,Kbo,J$,Zbo,e3o,o3o,Gu,jae,r3o,t3o,Y$,a3o,n3o,s3o,Ou,Dae,l3o,i3o,K$,d3o,c3o,f3o,Vu,Gae,m3o,g3o,Z$,h3o,p3o,_3o,Xu,Oae,u3o,b3o,eI,F3o,v3o,T3o,zu,Vae,M3o,E3o,oI,C3o,w3o,A3o,Qu,Xae,y3o,L3o,rI,x3o,k3o,S3o,Wu,zae,R3o,B3o,tI,P3o,$3o,I3o,Hu,Qae,q3o,N3o,aI,j3o,D3o,G3o,Uu,Wae,O3o,V3o,nI,X3o,z3o,Q3o,Ju,Hae,W3o,H3o,sI,U3o,J3o,Y3o,Yu,Uae,K3o,Z3o,lI,e2o,o2o,r2o,Ku,Jae,t2o,a2o,iI,n2o,s2o,l2o,Zu,Yae,i2o,d2o,dI,c2o,f2o,m2o,e1,g2o,Kae,h2o,p2o,Zae,_2o,u2o,ene,b2o,F2o,_5,sRe,nd,o1,one,u5,v2o,rne,T2o,lRe,Zo,b5,M2o,sd,E2o,cI,C2o,w2o,fI,A2o,y2o,L2o,F5,x2o,tne,k2o,S2o,R2o,Wr,v5,B2o,ane,P2o,$2o,ld,I2o,nne,q2o,N2o,mI,j2o,D2o,G2o,sne,O2o,V2o,T5,X2o,De,M5,z2o,lne,Q2o,W2o,Wa,H2o,ine,U2o,J2o,dne,Y2o,K2o,cne,Z2o,eFo,oFo,I,r1,fne,rFo,tFo,gI,aFo,nFo,sFo,t1,mne,lFo,iFo,hI,dFo,cFo,fFo,a1,gne,mFo,gFo,pI,hFo,pFo,_Fo,n1,hne,uFo,bFo,_I,FFo,vFo,TFo,s1,pne,MFo,EFo,uI,CFo,wFo,AFo,l1,_ne,yFo,LFo,bI,xFo,kFo,SFo,i1,une,RFo,BFo,FI,PFo,$Fo,IFo,d1,bne,qFo,NFo,vI,jFo,DFo,GFo,c1,Fne,OFo,VFo,TI,XFo,zFo,QFo,f1,vne,WFo,HFo,MI,UFo,JFo,YFo,m1,Tne,KFo,ZFo,EI,evo,ovo,rvo,g1,Mne,tvo,avo,CI,nvo,svo,lvo,h1,Ene,ivo,dvo,wI,cvo,fvo,mvo,p1,Cne,gvo,hvo,AI,pvo,_vo,uvo,_1,wne,bvo,Fvo,yI,vvo,Tvo,Mvo,u1,Ane,Evo,Cvo,LI,wvo,Avo,yvo,b1,yne,Lvo,xvo,xI,kvo,Svo,Rvo,F1,Lne,Bvo,Pvo,kI,$vo,Ivo,qvo,v1,xne,Nvo,jvo,SI,Dvo,Gvo,Ovo,T1,kne,Vvo,Xvo,RI,zvo,Qvo,Wvo,M1,Sne,Hvo,Uvo,BI,Jvo,Yvo,Kvo,E1,Rne,Zvo,e6o,PI,o6o,r6o,t6o,C1,Bne,a6o,n6o,$I,s6o,l6o,i6o,w1,Pne,d6o,c6o,II,f6o,m6o,g6o,A1,$ne,h6o,p6o,qI,_6o,u6o,b6o,y1,Ine,F6o,v6o,NI,T6o,M6o,E6o,L1,qne,C6o,w6o,jI,A6o,y6o,L6o,x1,Nne,x6o,k6o,DI,S6o,R6o,B6o,k1,jne,P6o,$6o,GI,I6o,q6o,N6o,S1,Dne,j6o,D6o,OI,G6o,O6o,V6o,R1,Gne,X6o,z6o,One,Q6o,W6o,H6o,B1,Vne,U6o,J6o,VI,Y6o,K6o,Z6o,P1,Xne,eTo,oTo,XI,rTo,tTo,aTo,$1,zne,nTo,sTo,zI,lTo,iTo,dTo,I1,Qne,cTo,fTo,QI,mTo,gTo,hTo,q1,pTo,Wne,_To,uTo,Hne,bTo,FTo,Une,vTo,TTo,E5,iRe,id,N1,Jne,C5,MTo,Yne,ETo,dRe,er,w5,CTo,dd,wTo,WI,ATo,yTo,HI,LTo,xTo,kTo,A5,STo,Kne,RTo,BTo,PTo,Hr,y5,$To,Zne,ITo,qTo,cd,NTo,ese,jTo,DTo,UI,GTo,OTo,VTo,ose,XTo,zTo,L5,QTo,Ge,x5,WTo,rse,HTo,UTo,Ha,JTo,tse,YTo,KTo,ase,ZTo,e7o,nse,o7o,r7o,t7o,se,j1,sse,a7o,n7o,JI,s7o,l7o,i7o,D1,lse,d7o,c7o,YI,f7o,m7o,g7o,G1,ise,h7o,p7o,KI,_7o,u7o,b7o,O1,dse,F7o,v7o,ZI,T7o,M7o,E7o,V1,cse,C7o,w7o,eq,A7o,y7o,L7o,X1,fse,x7o,k7o,oq,S7o,R7o,B7o,z1,mse,P7o,$7o,rq,I7o,q7o,N7o,Q1,gse,j7o,D7o,tq,G7o,O7o,V7o,W1,hse,X7o,z7o,aq,Q7o,W7o,H7o,H1,pse,U7o,J7o,nq,Y7o,K7o,Z7o,U1,_se,eMo,oMo,sq,rMo,tMo,aMo,J1,use,nMo,sMo,lq,lMo,iMo,dMo,Y1,bse,cMo,fMo,iq,mMo,gMo,hMo,K1,Fse,pMo,_Mo,dq,uMo,bMo,FMo,Z1,vse,vMo,TMo,cq,MMo,EMo,CMo,e4,Tse,wMo,AMo,fq,yMo,LMo,xMo,o4,kMo,Mse,SMo,RMo,Ese,BMo,PMo,Cse,$Mo,IMo,k5,cRe,fd,r4,wse,S5,qMo,Ase,NMo,fRe,or,R5,jMo,md,DMo,mq,GMo,OMo,gq,VMo,XMo,zMo,B5,QMo,yse,WMo,HMo,UMo,Ur,P5,JMo,Lse,YMo,KMo,gd,ZMo,xse,eEo,oEo,hq,rEo,tEo,aEo,kse,nEo,sEo,$5,lEo,Oe,I5,iEo,Sse,dEo,cEo,Ua,fEo,Rse,mEo,gEo,Bse,hEo,pEo,Pse,_Eo,uEo,bEo,y,t4,$se,FEo,vEo,pq,TEo,MEo,EEo,a4,Ise,CEo,wEo,_q,AEo,yEo,LEo,n4,qse,xEo,kEo,uq,SEo,REo,BEo,s4,Nse,PEo,$Eo,bq,IEo,qEo,NEo,l4,jse,jEo,DEo,Fq,GEo,OEo,VEo,i4,Dse,XEo,zEo,vq,QEo,WEo,HEo,d4,Gse,UEo,JEo,Tq,YEo,KEo,ZEo,c4,Ose,eCo,oCo,Mq,rCo,tCo,aCo,f4,Vse,nCo,sCo,Eq,lCo,iCo,dCo,m4,Xse,cCo,fCo,Cq,mCo,gCo,hCo,g4,zse,pCo,_Co,wq,uCo,bCo,FCo,h4,Qse,vCo,TCo,Aq,MCo,ECo,CCo,p4,Wse,wCo,ACo,yq,yCo,LCo,xCo,_4,Hse,kCo,SCo,Lq,RCo,BCo,PCo,u4,Use,$Co,ICo,xq,qCo,NCo,jCo,b4,Jse,DCo,GCo,kq,OCo,VCo,XCo,F4,Yse,zCo,QCo,Sq,WCo,HCo,UCo,v4,Kse,JCo,YCo,Rq,KCo,ZCo,e5o,T4,Zse,o5o,r5o,Bq,t5o,a5o,n5o,M4,ele,s5o,l5o,Pq,i5o,d5o,c5o,E4,ole,f5o,m5o,$q,g5o,h5o,p5o,C4,rle,_5o,u5o,Iq,b5o,F5o,v5o,w4,tle,T5o,M5o,qq,E5o,C5o,w5o,A4,ale,A5o,y5o,Nq,L5o,x5o,k5o,y4,nle,S5o,R5o,jq,B5o,P5o,$5o,L4,sle,I5o,q5o,Dq,N5o,j5o,D5o,x4,lle,G5o,O5o,Gq,V5o,X5o,z5o,k4,ile,Q5o,W5o,Oq,H5o,U5o,J5o,S4,dle,Y5o,K5o,Vq,Z5o,ewo,owo,R4,cle,rwo,two,Xq,awo,nwo,swo,B4,fle,lwo,iwo,zq,dwo,cwo,fwo,P4,mle,mwo,gwo,Qq,hwo,pwo,_wo,$4,gle,uwo,bwo,Wq,Fwo,vwo,Two,I4,hle,Mwo,Ewo,Hq,Cwo,wwo,Awo,q4,ple,ywo,Lwo,Uq,xwo,kwo,Swo,N4,_le,Rwo,Bwo,Jq,Pwo,$wo,Iwo,j4,ule,qwo,Nwo,Yq,jwo,Dwo,Gwo,D4,ble,Owo,Vwo,Kq,Xwo,zwo,Qwo,G4,Fle,Wwo,Hwo,Zq,Uwo,Jwo,Ywo,O4,vle,Kwo,Zwo,eN,eAo,oAo,rAo,V4,Tle,tAo,aAo,oN,nAo,sAo,lAo,X4,Mle,iAo,dAo,rN,cAo,fAo,mAo,z4,Ele,gAo,hAo,tN,pAo,_Ao,uAo,Q4,Cle,bAo,FAo,aN,vAo,TAo,MAo,W4,wle,EAo,CAo,nN,wAo,AAo,yAo,H4,Ale,LAo,xAo,sN,kAo,SAo,RAo,U4,BAo,yle,PAo,$Ao,Lle,IAo,qAo,xle,NAo,jAo,q5,mRe,hd,J4,kle,N5,DAo,Sle,GAo,gRe,rr,j5,OAo,pd,VAo,lN,XAo,zAo,iN,QAo,WAo,HAo,D5,UAo,Rle,JAo,YAo,KAo,Jr,G5,ZAo,Ble,e0o,o0o,_d,r0o,Ple,t0o,a0o,dN,n0o,s0o,l0o,$le,i0o,d0o,O5,c0o,Ve,V5,f0o,Ile,m0o,g0o,Ja,h0o,qle,p0o,_0o,Nle,u0o,b0o,jle,F0o,v0o,T0o,G,Y4,Dle,M0o,E0o,cN,C0o,w0o,A0o,K4,Gle,y0o,L0o,fN,x0o,k0o,S0o,Z4,Ole,R0o,B0o,mN,P0o,$0o,I0o,eb,Vle,q0o,N0o,gN,j0o,D0o,G0o,ob,Xle,O0o,V0o,hN,X0o,z0o,Q0o,rb,zle,W0o,H0o,pN,U0o,J0o,Y0o,tb,Qle,K0o,Z0o,_N,eyo,oyo,ryo,ab,Wle,tyo,ayo,uN,nyo,syo,lyo,nb,Hle,iyo,dyo,bN,cyo,fyo,myo,sb,Ule,gyo,hyo,FN,pyo,_yo,uyo,lb,Jle,byo,Fyo,vN,vyo,Tyo,Myo,ib,Yle,Eyo,Cyo,TN,wyo,Ayo,yyo,db,Kle,Lyo,xyo,MN,kyo,Syo,Ryo,cb,Zle,Byo,Pyo,EN,$yo,Iyo,qyo,fb,eie,Nyo,jyo,CN,Dyo,Gyo,Oyo,mb,oie,Vyo,Xyo,wN,zyo,Qyo,Wyo,gb,rie,Hyo,Uyo,AN,Jyo,Yyo,Kyo,hb,tie,Zyo,eLo,yN,oLo,rLo,tLo,pb,aie,aLo,nLo,LN,sLo,lLo,iLo,_b,nie,dLo,cLo,xN,fLo,mLo,gLo,ub,sie,hLo,pLo,kN,_Lo,uLo,bLo,bb,lie,FLo,vLo,SN,TLo,MLo,ELo,Fb,iie,CLo,wLo,RN,ALo,yLo,LLo,vb,die,xLo,kLo,BN,SLo,RLo,BLo,Tb,cie,PLo,$Lo,PN,ILo,qLo,NLo,Mb,fie,jLo,DLo,$N,GLo,OLo,VLo,Eb,mie,XLo,zLo,IN,QLo,WLo,HLo,Cb,gie,ULo,JLo,qN,YLo,KLo,ZLo,wb,e8o,hie,o8o,r8o,pie,t8o,a8o,_ie,n8o,s8o,X5,hRe,ud,Ab,uie,z5,l8o,bie,i8o,pRe,tr,Q5,d8o,bd,c8o,NN,f8o,m8o,jN,g8o,h8o,p8o,W5,_8o,Fie,u8o,b8o,F8o,Yr,H5,v8o,vie,T8o,M8o,Fd,E8o,Tie,C8o,w8o,DN,A8o,y8o,L8o,Mie,x8o,k8o,U5,S8o,Xe,J5,R8o,Eie,B8o,P8o,Ya,$8o,Cie,I8o,q8o,wie,N8o,j8o,Aie,D8o,G8o,O8o,da,yb,yie,V8o,X8o,GN,z8o,Q8o,W8o,Lb,Lie,H8o,U8o,ON,J8o,Y8o,K8o,xb,xie,Z8o,e9o,VN,o9o,r9o,t9o,kb,kie,a9o,n9o,XN,s9o,l9o,i9o,Sb,Sie,d9o,c9o,zN,f9o,m9o,g9o,Rb,h9o,Rie,p9o,_9o,Bie,u9o,b9o,Pie,F9o,v9o,Y5,_Re,vd,Bb,$ie,K5,T9o,Iie,M9o,uRe,ar,Z5,E9o,Td,C9o,QN,w9o,A9o,WN,y9o,L9o,x9o,ew,k9o,qie,S9o,R9o,B9o,Kr,ow,P9o,Nie,$9o,I9o,Md,q9o,jie,N9o,j9o,HN,D9o,G9o,O9o,Die,V9o,X9o,rw,z9o,ze,tw,Q9o,Gie,W9o,H9o,Ka,U9o,Oie,J9o,Y9o,Vie,K9o,Z9o,Xie,exo,oxo,rxo,j,Pb,zie,txo,axo,UN,nxo,sxo,lxo,$b,Qie,ixo,dxo,JN,cxo,fxo,mxo,Ib,Wie,gxo,hxo,YN,pxo,_xo,uxo,qb,Hie,bxo,Fxo,KN,vxo,Txo,Mxo,Nb,Uie,Exo,Cxo,ZN,wxo,Axo,yxo,jb,Jie,Lxo,xxo,ej,kxo,Sxo,Rxo,Db,Yie,Bxo,Pxo,oj,$xo,Ixo,qxo,Gb,Kie,Nxo,jxo,rj,Dxo,Gxo,Oxo,Ob,Zie,Vxo,Xxo,tj,zxo,Qxo,Wxo,Vb,ede,Hxo,Uxo,aj,Jxo,Yxo,Kxo,Xb,ode,Zxo,eko,nj,oko,rko,tko,zb,rde,ako,nko,sj,sko,lko,iko,Qb,tde,dko,cko,lj,fko,mko,gko,Wb,ade,hko,pko,ij,_ko,uko,bko,Hb,nde,Fko,vko,dj,Tko,Mko,Eko,Ub,sde,Cko,wko,cj,Ako,yko,Lko,Jb,lde,xko,kko,fj,Sko,Rko,Bko,Yb,ide,Pko,$ko,mj,Iko,qko,Nko,Kb,dde,jko,Dko,gj,Gko,Oko,Vko,Zb,cde,Xko,zko,hj,Qko,Wko,Hko,e3,fde,Uko,Jko,pj,Yko,Kko,Zko,o3,mde,eSo,oSo,_j,rSo,tSo,aSo,r3,gde,nSo,sSo,uj,lSo,iSo,dSo,t3,hde,cSo,fSo,bj,mSo,gSo,hSo,a3,pde,pSo,_So,Fj,uSo,bSo,FSo,n3,_de,vSo,TSo,vj,MSo,ESo,CSo,s3,ude,wSo,ASo,Tj,ySo,LSo,xSo,l3,bde,kSo,SSo,Mj,RSo,BSo,PSo,i3,Fde,$So,ISo,Ej,qSo,NSo,jSo,d3,vde,DSo,GSo,Cj,OSo,VSo,XSo,c3,Tde,zSo,QSo,wj,WSo,HSo,USo,f3,Mde,JSo,YSo,Aj,KSo,ZSo,eRo,m3,Ede,oRo,rRo,yj,tRo,aRo,nRo,g3,sRo,Cde,lRo,iRo,wde,dRo,cRo,Ade,fRo,mRo,aw,bRe,Ed,h3,yde,nw,gRo,Lde,hRo,FRe,nr,sw,pRo,Cd,_Ro,Lj,uRo,bRo,xj,FRo,vRo,TRo,lw,MRo,xde,ERo,CRo,wRo,Zr,iw,ARo,kde,yRo,LRo,wd,xRo,Sde,kRo,SRo,kj,RRo,BRo,PRo,Rde,$Ro,IRo,dw,qRo,Qe,cw,NRo,Bde,jRo,DRo,Za,GRo,Pde,ORo,VRo,$de,XRo,zRo,Ide,QRo,WRo,HRo,R,p3,qde,URo,JRo,Sj,YRo,KRo,ZRo,_3,Nde,eBo,oBo,Rj,rBo,tBo,aBo,u3,jde,nBo,sBo,Bj,lBo,iBo,dBo,b3,Dde,cBo,fBo,Pj,mBo,gBo,hBo,F3,Gde,pBo,_Bo,$j,uBo,bBo,FBo,v3,Ode,vBo,TBo,Ij,MBo,EBo,CBo,T3,Vde,wBo,ABo,qj,yBo,LBo,xBo,M3,Xde,kBo,SBo,Nj,RBo,BBo,PBo,E3,zde,$Bo,IBo,jj,qBo,NBo,jBo,C3,Qde,DBo,GBo,Dj,OBo,VBo,XBo,w3,Wde,zBo,QBo,Gj,WBo,HBo,UBo,A3,Hde,JBo,YBo,Oj,KBo,ZBo,ePo,y3,Ude,oPo,rPo,Vj,tPo,aPo,nPo,L3,Jde,sPo,lPo,Xj,iPo,dPo,cPo,x3,Yde,fPo,mPo,zj,gPo,hPo,pPo,k3,Kde,_Po,uPo,Qj,bPo,FPo,vPo,S3,Zde,TPo,MPo,Wj,EPo,CPo,wPo,R3,ece,APo,yPo,Hj,LPo,xPo,kPo,B3,oce,SPo,RPo,Uj,BPo,PPo,$Po,P3,rce,IPo,qPo,Jj,NPo,jPo,DPo,$3,tce,GPo,OPo,Yj,VPo,XPo,zPo,I3,ace,QPo,WPo,Kj,HPo,UPo,JPo,q3,nce,YPo,KPo,Zj,ZPo,e$o,o$o,N3,sce,r$o,t$o,eD,a$o,n$o,s$o,j3,lce,l$o,i$o,oD,d$o,c$o,f$o,D3,ice,m$o,g$o,rD,h$o,p$o,_$o,G3,dce,u$o,b$o,tD,F$o,v$o,T$o,O3,cce,M$o,E$o,aD,C$o,w$o,A$o,V3,fce,y$o,L$o,nD,x$o,k$o,S$o,X3,mce,R$o,B$o,sD,P$o,$$o,I$o,z3,gce,q$o,N$o,lD,j$o,D$o,G$o,Q3,hce,O$o,V$o,iD,X$o,z$o,Q$o,W3,pce,W$o,H$o,dD,U$o,J$o,Y$o,H3,_ce,K$o,Z$o,cD,eIo,oIo,rIo,U3,uce,tIo,aIo,fD,nIo,sIo,lIo,J3,bce,iIo,dIo,mD,cIo,fIo,mIo,Y3,Fce,gIo,hIo,gD,pIo,_Io,uIo,K3,vce,bIo,FIo,hD,vIo,TIo,MIo,Z3,Tce,EIo,CIo,pD,wIo,AIo,yIo,e2,LIo,Mce,xIo,kIo,Ece,SIo,RIo,Cce,BIo,PIo,fw,vRe,Ad,o2,wce,mw,$Io,Ace,IIo,TRe,sr,gw,qIo,yd,NIo,_D,jIo,DIo,uD,GIo,OIo,VIo,hw,XIo,yce,zIo,QIo,WIo,et,pw,HIo,Lce,UIo,JIo,Ld,YIo,xce,KIo,ZIo,bD,eqo,oqo,rqo,kce,tqo,aqo,_w,nqo,We,uw,sqo,Sce,lqo,iqo,en,dqo,Rce,cqo,fqo,Bce,mqo,gqo,Pce,hqo,pqo,_qo,$ce,r2,Ice,uqo,bqo,FD,Fqo,vqo,Tqo,t2,Mqo,qce,Eqo,Cqo,Nce,wqo,Aqo,jce,yqo,Lqo,bw,MRe,xd,a2,Dce,Fw,xqo,Gce,kqo,ERe,lr,vw,Sqo,kd,Rqo,vD,Bqo,Pqo,TD,$qo,Iqo,qqo,Tw,Nqo,Oce,jqo,Dqo,Gqo,ot,Mw,Oqo,Vce,Vqo,Xqo,Sd,zqo,Xce,Qqo,Wqo,MD,Hqo,Uqo,Jqo,zce,Yqo,Kqo,Ew,Zqo,He,Cw,eNo,Qce,oNo,rNo,on,tNo,Wce,aNo,nNo,Hce,sNo,lNo,Uce,iNo,dNo,cNo,ge,n2,Jce,fNo,mNo,ED,gNo,hNo,pNo,s2,Yce,_No,uNo,CD,bNo,FNo,vNo,Ds,Kce,TNo,MNo,wD,ENo,CNo,AD,wNo,ANo,yNo,l2,Zce,LNo,xNo,yD,kNo,SNo,RNo,ma,efe,BNo,PNo,LD,$No,INo,xD,qNo,NNo,kD,jNo,DNo,GNo,i2,ofe,ONo,VNo,SD,XNo,zNo,QNo,d2,rfe,WNo,HNo,RD,UNo,JNo,YNo,c2,tfe,KNo,ZNo,BD,ejo,ojo,rjo,f2,afe,tjo,ajo,PD,njo,sjo,ljo,m2,nfe,ijo,djo,$D,cjo,fjo,mjo,g2,sfe,gjo,hjo,ID,pjo,_jo,ujo,h2,bjo,lfe,Fjo,vjo,ife,Tjo,Mjo,dfe,Ejo,Cjo,ww,CRe,Rd,p2,cfe,Aw,wjo,ffe,Ajo,wRe,ir,yw,yjo,Bd,Ljo,qD,xjo,kjo,ND,Sjo,Rjo,Bjo,Lw,Pjo,mfe,$jo,Ijo,qjo,rt,xw,Njo,gfe,jjo,Djo,Pd,Gjo,hfe,Ojo,Vjo,jD,Xjo,zjo,Qjo,pfe,Wjo,Hjo,kw,Ujo,Ue,Sw,Jjo,_fe,Yjo,Kjo,rn,Zjo,ufe,eDo,oDo,bfe,rDo,tDo,Ffe,aDo,nDo,sDo,vfe,_2,Tfe,lDo,iDo,DD,dDo,cDo,fDo,u2,mDo,Mfe,gDo,hDo,Efe,pDo,_Do,Cfe,uDo,bDo,Rw,ARe,$d,b2,wfe,Bw,FDo,Afe,vDo,yRe,dr,Pw,TDo,Id,MDo,GD,EDo,CDo,OD,wDo,ADo,yDo,$w,LDo,yfe,xDo,kDo,SDo,tt,Iw,RDo,Lfe,BDo,PDo,qd,$Do,xfe,IDo,qDo,VD,NDo,jDo,DDo,kfe,GDo,ODo,qw,VDo,Je,Nw,XDo,Sfe,zDo,QDo,tn,WDo,Rfe,HDo,UDo,Bfe,JDo,YDo,Pfe,KDo,ZDo,eGo,Se,F2,$fe,oGo,rGo,XD,tGo,aGo,nGo,v2,Ife,sGo,lGo,zD,iGo,dGo,cGo,T2,qfe,fGo,mGo,QD,gGo,hGo,pGo,M2,Nfe,_Go,uGo,WD,bGo,FGo,vGo,E2,jfe,TGo,MGo,HD,EGo,CGo,wGo,C2,Dfe,AGo,yGo,UD,LGo,xGo,kGo,w2,Gfe,SGo,RGo,JD,BGo,PGo,$Go,A2,Ofe,IGo,qGo,YD,NGo,jGo,DGo,y2,GGo,Vfe,OGo,VGo,Xfe,XGo,zGo,zfe,QGo,WGo,jw,LRe,Nd,L2,Qfe,Dw,HGo,Wfe,UGo,xRe,cr,Gw,JGo,jd,YGo,KD,KGo,ZGo,ZD,eOo,oOo,rOo,Ow,tOo,Hfe,aOo,nOo,sOo,at,Vw,lOo,Ufe,iOo,dOo,Dd,cOo,Jfe,fOo,mOo,eG,gOo,hOo,pOo,Yfe,_Oo,uOo,Xw,bOo,Ye,zw,FOo,Kfe,vOo,TOo,an,MOo,Zfe,EOo,COo,eme,wOo,AOo,ome,yOo,LOo,xOo,nn,x2,rme,kOo,SOo,oG,ROo,BOo,POo,k2,tme,$Oo,IOo,rG,qOo,NOo,jOo,S2,ame,DOo,GOo,tG,OOo,VOo,XOo,R2,nme,zOo,QOo,aG,WOo,HOo,UOo,B2,JOo,sme,YOo,KOo,lme,ZOo,eVo,ime,oVo,rVo,Qw,kRe,Gd,P2,dme,Ww,tVo,cme,aVo,SRe,fr,Hw,nVo,Od,sVo,nG,lVo,iVo,sG,dVo,cVo,fVo,Uw,mVo,fme,gVo,hVo,pVo,nt,Jw,_Vo,mme,uVo,bVo,Vd,FVo,gme,vVo,TVo,lG,MVo,EVo,CVo,hme,wVo,AVo,Yw,yVo,Ke,Kw,LVo,pme,xVo,kVo,sn,SVo,_me,RVo,BVo,ume,PVo,$Vo,bme,IVo,qVo,NVo,Re,$2,Fme,jVo,DVo,iG,GVo,OVo,VVo,I2,vme,XVo,zVo,dG,QVo,WVo,HVo,q2,Tme,UVo,JVo,cG,YVo,KVo,ZVo,N2,Mme,eXo,oXo,fG,rXo,tXo,aXo,j2,Eme,nXo,sXo,mG,lXo,iXo,dXo,D2,Cme,cXo,fXo,gG,mXo,gXo,hXo,G2,wme,pXo,_Xo,hG,uXo,bXo,FXo,O2,Ame,vXo,TXo,pG,MXo,EXo,CXo,V2,wXo,yme,AXo,yXo,Lme,LXo,xXo,xme,kXo,SXo,Zw,RRe,Xd,X2,kme,eA,RXo,Sme,BXo,BRe,mr,oA,PXo,zd,$Xo,_G,IXo,qXo,uG,NXo,jXo,DXo,rA,GXo,Rme,OXo,VXo,XXo,st,tA,zXo,Bme,QXo,WXo,Qd,HXo,Pme,UXo,JXo,bG,YXo,KXo,ZXo,$me,ezo,ozo,aA,rzo,Ze,nA,tzo,Ime,azo,nzo,ln,szo,qme,lzo,izo,Nme,dzo,czo,jme,fzo,mzo,gzo,sA,z2,Dme,hzo,pzo,FG,_zo,uzo,bzo,Q2,Gme,Fzo,vzo,vG,Tzo,Mzo,Ezo,W2,Czo,Ome,wzo,Azo,Vme,yzo,Lzo,Xme,xzo,kzo,lA,PRe,Wd,H2,zme,iA,Szo,Qme,Rzo,$Re,gr,dA,Bzo,Hd,Pzo,TG,$zo,Izo,MG,qzo,Nzo,jzo,cA,Dzo,Wme,Gzo,Ozo,Vzo,lt,fA,Xzo,Hme,zzo,Qzo,Ud,Wzo,Ume,Hzo,Uzo,EG,Jzo,Yzo,Kzo,Jme,Zzo,eQo,mA,oQo,eo,gA,rQo,Yme,tQo,aQo,dn,nQo,Kme,sQo,lQo,Zme,iQo,dQo,ege,cQo,fQo,mQo,cn,U2,oge,gQo,hQo,CG,pQo,_Qo,uQo,J2,rge,bQo,FQo,wG,vQo,TQo,MQo,Y2,tge,EQo,CQo,AG,wQo,AQo,yQo,K2,age,LQo,xQo,yG,kQo,SQo,RQo,Z2,BQo,nge,PQo,$Qo,sge,IQo,qQo,lge,NQo,jQo,hA,IRe,Jd,eF,ige,pA,DQo,dge,GQo,qRe,hr,_A,OQo,Yd,VQo,LG,XQo,zQo,xG,QQo,WQo,HQo,uA,UQo,cge,JQo,YQo,KQo,it,bA,ZQo,fge,eWo,oWo,Kd,rWo,mge,tWo,aWo,kG,nWo,sWo,lWo,gge,iWo,dWo,FA,cWo,oo,vA,fWo,hge,mWo,gWo,fn,hWo,pge,pWo,_Wo,_ge,uWo,bWo,uge,FWo,vWo,TWo,Zd,oF,bge,MWo,EWo,SG,CWo,wWo,AWo,rF,Fge,yWo,LWo,RG,xWo,kWo,SWo,tF,vge,RWo,BWo,BG,PWo,$Wo,IWo,aF,qWo,Tge,NWo,jWo,Mge,DWo,GWo,Ege,OWo,VWo,TA,NRe,ec,nF,Cge,MA,XWo,wge,zWo,jRe,pr,EA,QWo,oc,WWo,PG,HWo,UWo,$G,JWo,YWo,KWo,CA,ZWo,Age,eHo,oHo,rHo,dt,wA,tHo,yge,aHo,nHo,rc,sHo,Lge,lHo,iHo,IG,dHo,cHo,fHo,xge,mHo,gHo,AA,hHo,ro,yA,pHo,kge,_Ho,uHo,mn,bHo,Sge,FHo,vHo,Rge,THo,MHo,Bge,EHo,CHo,wHo,Pge,sF,$ge,AHo,yHo,qG,LHo,xHo,kHo,lF,SHo,Ige,RHo,BHo,qge,PHo,$Ho,Nge,IHo,qHo,LA,DRe,tc,iF,jge,xA,NHo,Dge,jHo,GRe,_r,kA,DHo,ac,GHo,NG,OHo,VHo,jG,XHo,zHo,QHo,SA,WHo,Gge,HHo,UHo,JHo,ct,RA,YHo,Oge,KHo,ZHo,nc,eUo,Vge,oUo,rUo,DG,tUo,aUo,nUo,Xge,sUo,lUo,BA,iUo,to,PA,dUo,zge,cUo,fUo,gn,mUo,Qge,gUo,hUo,Wge,pUo,_Uo,Hge,uUo,bUo,FUo,Uge,dF,Jge,vUo,TUo,GG,MUo,EUo,CUo,cF,wUo,Yge,AUo,yUo,Kge,LUo,xUo,Zge,kUo,SUo,$A,ORe,sc,fF,ehe,IA,RUo,ohe,BUo,VRe,ur,qA,PUo,lc,$Uo,OG,IUo,qUo,VG,NUo,jUo,DUo,NA,GUo,rhe,OUo,VUo,XUo,ft,jA,zUo,the,QUo,WUo,ic,HUo,ahe,UUo,JUo,XG,YUo,KUo,ZUo,nhe,eJo,oJo,DA,rJo,ao,GA,tJo,she,aJo,nJo,hn,sJo,lhe,lJo,iJo,ihe,dJo,cJo,dhe,fJo,mJo,gJo,dc,mF,che,hJo,pJo,zG,_Jo,uJo,bJo,gF,fhe,FJo,vJo,QG,TJo,MJo,EJo,hF,mhe,CJo,wJo,WG,AJo,yJo,LJo,pF,xJo,ghe,kJo,SJo,hhe,RJo,BJo,phe,PJo,$Jo,OA,XRe,cc,_F,_he,VA,IJo,uhe,qJo,zRe,br,XA,NJo,fc,jJo,HG,DJo,GJo,UG,OJo,VJo,XJo,zA,zJo,bhe,QJo,WJo,HJo,mt,QA,UJo,Fhe,JJo,YJo,mc,KJo,vhe,ZJo,eYo,JG,oYo,rYo,tYo,The,aYo,nYo,WA,sYo,no,HA,lYo,Mhe,iYo,dYo,pn,cYo,Ehe,fYo,mYo,Che,gYo,hYo,whe,pYo,_Yo,uYo,Ahe,uF,yhe,bYo,FYo,YG,vYo,TYo,MYo,bF,EYo,Lhe,CYo,wYo,xhe,AYo,yYo,khe,LYo,xYo,UA,QRe,gc,FF,She,JA,kYo,Rhe,SYo,WRe,Fr,YA,RYo,hc,BYo,KG,PYo,$Yo,ZG,IYo,qYo,NYo,KA,jYo,Bhe,DYo,GYo,OYo,gt,ZA,VYo,Phe,XYo,zYo,pc,QYo,$he,WYo,HYo,eO,UYo,JYo,YYo,Ihe,KYo,ZYo,e0,eKo,ho,o0,oKo,qhe,rKo,tKo,_n,aKo,Nhe,nKo,sKo,jhe,lKo,iKo,Dhe,dKo,cKo,fKo,x,vF,Ghe,mKo,gKo,oO,hKo,pKo,_Ko,TF,Ohe,uKo,bKo,rO,FKo,vKo,TKo,MF,Vhe,MKo,EKo,tO,CKo,wKo,AKo,EF,Xhe,yKo,LKo,aO,xKo,kKo,SKo,CF,zhe,RKo,BKo,nO,PKo,$Ko,IKo,wF,Qhe,qKo,NKo,sO,jKo,DKo,GKo,AF,Whe,OKo,VKo,lO,XKo,zKo,QKo,yF,Hhe,WKo,HKo,iO,UKo,JKo,YKo,LF,Uhe,KKo,ZKo,dO,eZo,oZo,rZo,xF,Jhe,tZo,aZo,cO,nZo,sZo,lZo,kF,Yhe,iZo,dZo,fO,cZo,fZo,mZo,SF,Khe,gZo,hZo,mO,pZo,_Zo,uZo,RF,Zhe,bZo,FZo,gO,vZo,TZo,MZo,BF,epe,EZo,CZo,hO,wZo,AZo,yZo,PF,ope,LZo,xZo,pO,kZo,SZo,RZo,$F,rpe,BZo,PZo,_O,$Zo,IZo,qZo,Gs,tpe,NZo,jZo,uO,DZo,GZo,bO,OZo,VZo,XZo,IF,ape,zZo,QZo,FO,WZo,HZo,UZo,qF,npe,JZo,YZo,vO,KZo,ZZo,eer,NF,spe,oer,rer,TO,ter,aer,ner,jF,lpe,ser,ler,MO,ier,der,cer,DF,ipe,fer,mer,EO,ger,her,per,GF,dpe,_er,uer,CO,ber,Fer,ver,OF,cpe,Ter,Mer,wO,Eer,Cer,wer,VF,fpe,Aer,yer,AO,Ler,xer,ker,XF,mpe,Ser,Rer,yO,Ber,Per,$er,zF,gpe,Ier,qer,LO,Ner,jer,Der,QF,hpe,Ger,Oer,xO,Ver,Xer,zer,WF,ppe,Qer,Wer,kO,Her,Uer,Jer,HF,_pe,Yer,Ker,SO,Zer,eor,oor,UF,upe,ror,tor,RO,aor,nor,sor,JF,bpe,lor,ior,BO,dor,cor,mor,YF,Fpe,gor,hor,PO,por,_or,uor,KF,vpe,bor,For,$O,vor,Tor,Mor,ZF,Tpe,Eor,Cor,IO,wor,Aor,yor,ev,Mpe,Lor,xor,qO,kor,Sor,Ror,ov,Epe,Bor,Por,NO,$or,Ior,qor,rv,Cpe,Nor,jor,jO,Dor,Gor,Oor,tv,wpe,Vor,Xor,DO,zor,Qor,Wor,av,Ape,Hor,Uor,GO,Jor,Yor,Kor,nv,ype,Zor,err,OO,orr,rrr,trr,sv,Lpe,arr,nrr,VO,srr,lrr,irr,lv,xpe,drr,crr,XO,frr,mrr,grr,iv,kpe,hrr,prr,zO,_rr,urr,brr,Spe,Frr,vrr,r0,HRe,_c,dv,Rpe,t0,Trr,Bpe,Mrr,URe,vr,a0,Err,uc,Crr,QO,wrr,Arr,WO,yrr,Lrr,xrr,n0,krr,Ppe,Srr,Rrr,Brr,ht,s0,Prr,$pe,$rr,Irr,bc,qrr,Ipe,Nrr,jrr,HO,Drr,Grr,Orr,qpe,Vrr,Xrr,l0,zrr,po,i0,Qrr,Npe,Wrr,Hrr,un,Urr,jpe,Jrr,Yrr,Dpe,Krr,Zrr,Gpe,etr,otr,rtr,H,cv,Ope,ttr,atr,UO,ntr,str,ltr,fv,Vpe,itr,dtr,JO,ctr,ftr,mtr,mv,Xpe,gtr,htr,YO,ptr,_tr,utr,gv,zpe,btr,Ftr,KO,vtr,Ttr,Mtr,hv,Qpe,Etr,Ctr,ZO,wtr,Atr,ytr,pv,Wpe,Ltr,xtr,eV,ktr,Str,Rtr,_v,Hpe,Btr,Ptr,oV,$tr,Itr,qtr,uv,Upe,Ntr,jtr,rV,Dtr,Gtr,Otr,bv,Jpe,Vtr,Xtr,tV,ztr,Qtr,Wtr,Fv,Ype,Htr,Utr,aV,Jtr,Ytr,Ktr,vv,Kpe,Ztr,ear,nV,oar,rar,tar,Tv,Zpe,aar,nar,sV,sar,lar,iar,Mv,e_e,dar,car,lV,far,mar,gar,Ev,o_e,har,par,iV,_ar,uar,bar,Cv,r_e,Far,Tar,dV,Mar,Ear,Car,wv,t_e,war,Aar,cV,yar,Lar,xar,Av,a_e,kar,Sar,fV,Rar,Bar,Par,yv,n_e,$ar,Iar,mV,qar,Nar,jar,Lv,s_e,Dar,Gar,gV,Oar,Var,Xar,xv,l_e,zar,Qar,hV,War,Har,Uar,kv,i_e,Jar,Yar,pV,Kar,Zar,enr,Sv,d_e,onr,rnr,_V,tnr,anr,nnr,Rv,c_e,snr,lnr,uV,inr,dnr,cnr,f_e,fnr,mnr,d0,JRe,Fc,Bv,m_e,c0,gnr,g_e,hnr,YRe,Tr,f0,pnr,vc,_nr,bV,unr,bnr,FV,Fnr,vnr,Tnr,m0,Mnr,h_e,Enr,Cnr,wnr,pt,g0,Anr,p_e,ynr,Lnr,Tc,xnr,__e,knr,Snr,vV,Rnr,Bnr,Pnr,u_e,$nr,Inr,h0,qnr,_o,p0,Nnr,b_e,jnr,Dnr,bn,Gnr,F_e,Onr,Vnr,v_e,Xnr,znr,T_e,Qnr,Wnr,Hnr,ce,Pv,M_e,Unr,Jnr,TV,Ynr,Knr,Znr,$v,E_e,esr,osr,MV,rsr,tsr,asr,Iv,C_e,nsr,ssr,EV,lsr,isr,dsr,qv,w_e,csr,fsr,CV,msr,gsr,hsr,Nv,A_e,psr,_sr,wV,usr,bsr,Fsr,jv,y_e,vsr,Tsr,AV,Msr,Esr,Csr,Dv,L_e,wsr,Asr,yV,ysr,Lsr,xsr,Gv,x_e,ksr,Ssr,LV,Rsr,Bsr,Psr,Ov,k_e,$sr,Isr,xV,qsr,Nsr,jsr,Vv,S_e,Dsr,Gsr,kV,Osr,Vsr,Xsr,Xv,R_e,zsr,Qsr,SV,Wsr,Hsr,Usr,zv,B_e,Jsr,Ysr,RV,Ksr,Zsr,elr,P_e,olr,rlr,_0,KRe,Mc,Qv,$_e,u0,tlr,I_e,alr,ZRe,Mr,b0,nlr,Ec,slr,BV,llr,ilr,PV,dlr,clr,flr,F0,mlr,q_e,glr,hlr,plr,_t,v0,_lr,N_e,ulr,blr,Cc,Flr,j_e,vlr,Tlr,$V,Mlr,Elr,Clr,D_e,wlr,Alr,T0,ylr,uo,M0,Llr,G_e,xlr,klr,Fn,Slr,O_e,Rlr,Blr,V_e,Plr,$lr,X_e,Ilr,qlr,Nlr,E0,Wv,z_e,jlr,Dlr,IV,Glr,Olr,Vlr,Hv,Q_e,Xlr,zlr,qV,Qlr,Wlr,Hlr,W_e,Ulr,Jlr,C0,eBe,wc,Uv,H_e,w0,Ylr,U_e,Klr,oBe,Er,A0,Zlr,Ac,eir,NV,oir,rir,jV,tir,air,nir,y0,sir,J_e,lir,iir,dir,ut,L0,cir,Y_e,fir,mir,yc,gir,K_e,hir,pir,DV,_ir,uir,bir,Z_e,Fir,vir,x0,Tir,bo,k0,Mir,eue,Eir,Cir,vn,wir,oue,Air,yir,rue,Lir,xir,tue,kir,Sir,Rir,J,Jv,aue,Bir,Pir,GV,$ir,Iir,qir,Yv,nue,Nir,jir,OV,Dir,Gir,Oir,Kv,sue,Vir,Xir,VV,zir,Qir,Wir,Zv,lue,Hir,Uir,XV,Jir,Yir,Kir,e6,iue,Zir,edr,zV,odr,rdr,tdr,o6,due,adr,ndr,QV,sdr,ldr,idr,r6,cue,ddr,cdr,WV,fdr,mdr,gdr,t6,fue,hdr,pdr,HV,_dr,udr,bdr,a6,mue,Fdr,vdr,UV,Tdr,Mdr,Edr,n6,gue,Cdr,wdr,JV,Adr,ydr,Ldr,s6,hue,xdr,kdr,YV,Sdr,Rdr,Bdr,l6,pue,Pdr,$dr,KV,Idr,qdr,Ndr,i6,_ue,jdr,Ddr,ZV,Gdr,Odr,Vdr,d6,uue,Xdr,zdr,eX,Qdr,Wdr,Hdr,c6,bue,Udr,Jdr,oX,Ydr,Kdr,Zdr,f6,Fue,ecr,ocr,rX,rcr,tcr,acr,m6,vue,ncr,scr,tX,lcr,icr,dcr,g6,Tue,ccr,fcr,aX,mcr,gcr,hcr,h6,Mue,pcr,_cr,nX,ucr,bcr,Fcr,p6,Eue,vcr,Tcr,sX,Mcr,Ecr,Ccr,Cue,wcr,Acr,S0,rBe,Lc,_6,wue,R0,ycr,Aue,Lcr,tBe,Cr,B0,xcr,xc,kcr,lX,Scr,Rcr,iX,Bcr,Pcr,$cr,P0,Icr,yue,qcr,Ncr,jcr,bt,$0,Dcr,Lue,Gcr,Ocr,kc,Vcr,xue,Xcr,zcr,dX,Qcr,Wcr,Hcr,kue,Ucr,Jcr,I0,Ycr,Fo,q0,Kcr,Sue,Zcr,efr,Tn,ofr,Rue,rfr,tfr,Bue,afr,nfr,Pue,sfr,lfr,ifr,ue,u6,$ue,dfr,cfr,cX,ffr,mfr,gfr,b6,Iue,hfr,pfr,fX,_fr,ufr,bfr,F6,que,Ffr,vfr,mX,Tfr,Mfr,Efr,v6,Nue,Cfr,wfr,gX,Afr,yfr,Lfr,T6,jue,xfr,kfr,hX,Sfr,Rfr,Bfr,M6,Due,Pfr,$fr,pX,Ifr,qfr,Nfr,E6,Gue,jfr,Dfr,_X,Gfr,Ofr,Vfr,C6,Oue,Xfr,zfr,uX,Qfr,Wfr,Hfr,w6,Vue,Ufr,Jfr,bX,Yfr,Kfr,Zfr,A6,Xue,emr,omr,FX,rmr,tmr,amr,zue,nmr,smr,N0,aBe,Sc,y6,Que,j0,lmr,Wue,imr,nBe,wr,D0,dmr,Rc,cmr,vX,fmr,mmr,TX,gmr,hmr,pmr,G0,_mr,Hue,umr,bmr,Fmr,Ft,O0,vmr,Uue,Tmr,Mmr,Bc,Emr,Jue,Cmr,wmr,MX,Amr,ymr,Lmr,Yue,xmr,kmr,V0,Smr,vo,X0,Rmr,Kue,Bmr,Pmr,Mn,$mr,Zue,Imr,qmr,e1e,Nmr,jmr,o1e,Dmr,Gmr,Omr,V,L6,r1e,Vmr,Xmr,EX,zmr,Qmr,Wmr,x6,t1e,Hmr,Umr,CX,Jmr,Ymr,Kmr,k6,a1e,Zmr,egr,wX,ogr,rgr,tgr,S6,n1e,agr,ngr,AX,sgr,lgr,igr,R6,s1e,dgr,cgr,yX,fgr,mgr,ggr,B6,l1e,hgr,pgr,LX,_gr,ugr,bgr,P6,i1e,Fgr,vgr,xX,Tgr,Mgr,Egr,$6,d1e,Cgr,wgr,kX,Agr,ygr,Lgr,I6,c1e,xgr,kgr,SX,Sgr,Rgr,Bgr,q6,f1e,Pgr,$gr,RX,Igr,qgr,Ngr,N6,m1e,jgr,Dgr,BX,Ggr,Ogr,Vgr,j6,g1e,Xgr,zgr,PX,Qgr,Wgr,Hgr,D6,h1e,Ugr,Jgr,$X,Ygr,Kgr,Zgr,G6,p1e,ehr,ohr,IX,rhr,thr,ahr,O6,_1e,nhr,shr,qX,lhr,ihr,dhr,V6,u1e,chr,fhr,NX,mhr,ghr,hhr,X6,b1e,phr,_hr,jX,uhr,bhr,Fhr,z6,F1e,vhr,Thr,DX,Mhr,Ehr,Chr,Q6,v1e,whr,Ahr,GX,yhr,Lhr,xhr,W6,T1e,khr,Shr,OX,Rhr,Bhr,Phr,H6,M1e,$hr,Ihr,VX,qhr,Nhr,jhr,U6,E1e,Dhr,Ghr,XX,Ohr,Vhr,Xhr,J6,C1e,zhr,Qhr,zX,Whr,Hhr,Uhr,Y6,w1e,Jhr,Yhr,QX,Khr,Zhr,epr,K6,A1e,opr,rpr,WX,tpr,apr,npr,Z6,y1e,spr,lpr,HX,ipr,dpr,cpr,L1e,fpr,mpr,z0,sBe,Pc,eT,x1e,Q0,gpr,k1e,hpr,lBe,Ar,W0,ppr,$c,_pr,UX,upr,bpr,JX,Fpr,vpr,Tpr,H0,Mpr,S1e,Epr,Cpr,wpr,vt,U0,Apr,R1e,ypr,Lpr,Ic,xpr,B1e,kpr,Spr,YX,Rpr,Bpr,Ppr,P1e,$pr,Ipr,J0,qpr,To,Y0,Npr,$1e,jpr,Dpr,En,Gpr,I1e,Opr,Vpr,q1e,Xpr,zpr,N1e,Qpr,Wpr,Hpr,ae,oT,j1e,Upr,Jpr,KX,Ypr,Kpr,Zpr,rT,D1e,e_r,o_r,ZX,r_r,t_r,a_r,tT,G1e,n_r,s_r,ez,l_r,i_r,d_r,aT,O1e,c_r,f_r,oz,m_r,g_r,h_r,nT,V1e,p_r,__r,rz,u_r,b_r,F_r,sT,X1e,v_r,T_r,tz,M_r,E_r,C_r,lT,z1e,w_r,A_r,az,y_r,L_r,x_r,iT,Q1e,k_r,S_r,nz,R_r,B_r,P_r,dT,W1e,$_r,I_r,sz,q_r,N_r,j_r,cT,H1e,D_r,G_r,lz,O_r,V_r,X_r,fT,U1e,z_r,Q_r,iz,W_r,H_r,U_r,mT,J1e,J_r,Y_r,dz,K_r,Z_r,eur,gT,Y1e,our,rur,cz,tur,aur,nur,hT,K1e,sur,lur,fz,iur,dur,cur,pT,Z1e,fur,mur,mz,gur,hur,pur,_T,e4e,_ur,uur,gz,bur,Fur,vur,uT,o4e,Tur,Mur,hz,Eur,Cur,wur,r4e,Aur,yur,K0,iBe,qc,bT,t4e,Z0,Lur,a4e,xur,dBe,yr,ey,kur,Nc,Sur,pz,Rur,Bur,_z,Pur,$ur,Iur,oy,qur,n4e,Nur,jur,Dur,Tt,ry,Gur,s4e,Our,Vur,jc,Xur,l4e,zur,Qur,uz,Wur,Hur,Uur,i4e,Jur,Yur,ty,Kur,Mo,ay,Zur,d4e,e1r,o1r,Cn,r1r,c4e,t1r,a1r,f4e,n1r,s1r,m4e,l1r,i1r,d1r,g4e,FT,h4e,c1r,f1r,bz,m1r,g1r,h1r,p4e,p1r,_1r,ny,cBe,Dc,vT,_4e,sy,u1r,u4e,b1r,fBe,Lr,ly,F1r,Gc,v1r,Fz,T1r,M1r,vz,E1r,C1r,w1r,iy,A1r,b4e,y1r,L1r,x1r,Mt,dy,k1r,F4e,S1r,R1r,Oc,B1r,v4e,P1r,$1r,Tz,I1r,q1r,N1r,T4e,j1r,D1r,cy,G1r,Eo,fy,O1r,M4e,V1r,X1r,wn,z1r,E4e,Q1r,W1r,C4e,H1r,U1r,w4e,J1r,Y1r,K1r,Y,TT,A4e,Z1r,e4r,Mz,o4r,r4r,t4r,MT,y4e,a4r,n4r,Ez,s4r,l4r,i4r,ET,L4e,d4r,c4r,Cz,f4r,m4r,g4r,CT,x4e,h4r,p4r,wz,_4r,u4r,b4r,wT,k4e,F4r,v4r,Az,T4r,M4r,E4r,AT,S4e,C4r,w4r,yz,A4r,y4r,L4r,yT,R4e,x4r,k4r,Lz,S4r,R4r,B4r,LT,B4e,P4r,$4r,xz,I4r,q4r,N4r,xT,P4e,j4r,D4r,kz,G4r,O4r,V4r,kT,$4e,X4r,z4r,Sz,Q4r,W4r,H4r,ST,I4e,U4r,J4r,Rz,Y4r,K4r,Z4r,RT,q4e,ebr,obr,Bz,rbr,tbr,abr,BT,N4e,nbr,sbr,Pz,lbr,ibr,dbr,PT,j4e,cbr,fbr,$z,mbr,gbr,hbr,$T,D4e,pbr,_br,Iz,ubr,bbr,Fbr,IT,G4e,vbr,Tbr,qz,Mbr,Ebr,Cbr,qT,O4e,wbr,Abr,Nz,ybr,Lbr,xbr,NT,V4e,kbr,Sbr,jz,Rbr,Bbr,Pbr,jT,X4e,$br,Ibr,Dz,qbr,Nbr,jbr,DT,z4e,Dbr,Gbr,Gz,Obr,Vbr,Xbr,Q4e,zbr,Qbr,my,mBe,Vc,GT,W4e,gy,Wbr,H4e,Hbr,gBe,xr,hy,Ubr,Xc,Jbr,Oz,Ybr,Kbr,Vz,Zbr,e3r,o3r,py,r3r,U4e,t3r,a3r,n3r,Et,_y,s3r,J4e,l3r,i3r,zc,d3r,Y4e,c3r,f3r,Xz,m3r,g3r,h3r,K4e,p3r,_3r,uy,u3r,Co,by,b3r,Z4e,F3r,v3r,An,T3r,ebe,M3r,E3r,obe,C3r,w3r,rbe,A3r,y3r,L3r,K,OT,tbe,x3r,k3r,zz,S3r,R3r,B3r,VT,abe,P3r,$3r,Qz,I3r,q3r,N3r,XT,nbe,j3r,D3r,Wz,G3r,O3r,V3r,zT,sbe,X3r,z3r,Hz,Q3r,W3r,H3r,QT,lbe,U3r,J3r,Uz,Y3r,K3r,Z3r,WT,ibe,e2r,o2r,Jz,r2r,t2r,a2r,HT,dbe,n2r,s2r,Yz,l2r,i2r,d2r,UT,cbe,c2r,f2r,Kz,m2r,g2r,h2r,JT,fbe,p2r,_2r,Zz,u2r,b2r,F2r,YT,mbe,v2r,T2r,eQ,M2r,E2r,C2r,KT,gbe,w2r,A2r,oQ,y2r,L2r,x2r,ZT,hbe,k2r,S2r,rQ,R2r,B2r,P2r,e7,pbe,$2r,I2r,tQ,q2r,N2r,j2r,o7,_be,D2r,G2r,aQ,O2r,V2r,X2r,r7,ube,z2r,Q2r,nQ,W2r,H2r,U2r,t7,bbe,J2r,Y2r,sQ,K2r,Z2r,eFr,a7,Fbe,oFr,rFr,lQ,tFr,aFr,nFr,n7,vbe,sFr,lFr,iQ,iFr,dFr,cFr,s7,Tbe,fFr,mFr,dQ,gFr,hFr,pFr,l7,Mbe,_Fr,uFr,cQ,bFr,FFr,vFr,Ebe,TFr,MFr,Fy,hBe,Qc,i7,Cbe,vy,EFr,wbe,CFr,pBe,kr,Ty,wFr,Wc,AFr,fQ,yFr,LFr,mQ,xFr,kFr,SFr,My,RFr,Abe,BFr,PFr,$Fr,Ct,Ey,IFr,ybe,qFr,NFr,Hc,jFr,Lbe,DFr,GFr,gQ,OFr,VFr,XFr,xbe,zFr,QFr,Cy,WFr,wo,wy,HFr,kbe,UFr,JFr,yn,YFr,Sbe,KFr,ZFr,Rbe,evr,ovr,Bbe,rvr,tvr,avr,Pbe,d7,$be,nvr,svr,hQ,lvr,ivr,dvr,Ibe,cvr,fvr,Ay,_Be,Uc,c7,qbe,yy,mvr,Nbe,gvr,uBe,Sr,Ly,hvr,Jc,pvr,pQ,_vr,uvr,_Q,bvr,Fvr,vvr,xy,Tvr,jbe,Mvr,Evr,Cvr,wt,ky,wvr,Dbe,Avr,yvr,Yc,Lvr,Gbe,xvr,kvr,uQ,Svr,Rvr,Bvr,Obe,Pvr,$vr,Sy,Ivr,Ao,Ry,qvr,Vbe,Nvr,jvr,Ln,Dvr,Xbe,Gvr,Ovr,zbe,Vvr,Xvr,Qbe,zvr,Qvr,Wvr,Wbe,f7,Hbe,Hvr,Uvr,bQ,Jvr,Yvr,Kvr,Ube,Zvr,e6r,By,bBe,Kc,m7,Jbe,Py,o6r,Ybe,r6r,FBe,Rr,$y,t6r,Zc,a6r,FQ,n6r,s6r,vQ,l6r,i6r,d6r,Iy,c6r,Kbe,f6r,m6r,g6r,At,qy,h6r,Zbe,p6r,_6r,ef,u6r,e3e,b6r,F6r,TQ,v6r,T6r,M6r,o3e,E6r,C6r,Ny,w6r,yo,jy,A6r,r3e,y6r,L6r,xn,x6r,t3e,k6r,S6r,a3e,R6r,B6r,n3e,P6r,$6r,I6r,z,g7,s3e,q6r,N6r,MQ,j6r,D6r,G6r,h7,l3e,O6r,V6r,EQ,X6r,z6r,Q6r,p7,i3e,W6r,H6r,CQ,U6r,J6r,Y6r,_7,d3e,K6r,Z6r,wQ,eTr,oTr,rTr,u7,c3e,tTr,aTr,AQ,nTr,sTr,lTr,b7,f3e,iTr,dTr,yQ,cTr,fTr,mTr,F7,m3e,gTr,hTr,LQ,pTr,_Tr,uTr,v7,g3e,bTr,FTr,xQ,vTr,TTr,MTr,T7,h3e,ETr,CTr,kQ,wTr,ATr,yTr,M7,p3e,LTr,xTr,SQ,kTr,STr,RTr,E7,_3e,BTr,PTr,RQ,$Tr,ITr,qTr,C7,u3e,NTr,jTr,BQ,DTr,GTr,OTr,w7,b3e,VTr,XTr,PQ,zTr,QTr,WTr,A7,F3e,HTr,UTr,$Q,JTr,YTr,KTr,y7,v3e,ZTr,e7r,IQ,o7r,r7r,t7r,L7,T3e,a7r,n7r,qQ,s7r,l7r,i7r,x7,M3e,d7r,c7r,NQ,f7r,m7r,g7r,k7,E3e,h7r,p7r,jQ,_7r,u7r,b7r,S7,C3e,F7r,v7r,DQ,T7r,M7r,E7r,R7,w3e,C7r,w7r,GQ,A7r,y7r,L7r,B7,A3e,x7r,k7r,OQ,S7r,R7r,B7r,P7,y3e,P7r,$7r,VQ,I7r,q7r,N7r,$7,L3e,j7r,D7r,XQ,G7r,O7r,V7r,I7,x3e,X7r,z7r,zQ,Q7r,W7r,H7r,q7,k3e,U7r,J7r,QQ,Y7r,K7r,Z7r,S3e,eMr,oMr,Dy,vBe,of,N7,R3e,Gy,rMr,B3e,tMr,TBe,Br,Oy,aMr,rf,nMr,WQ,sMr,lMr,HQ,iMr,dMr,cMr,Vy,fMr,P3e,mMr,gMr,hMr,yt,Xy,pMr,$3e,_Mr,uMr,tf,bMr,I3e,FMr,vMr,UQ,TMr,MMr,EMr,q3e,CMr,wMr,zy,AMr,Lo,Qy,yMr,N3e,LMr,xMr,kn,kMr,j3e,SMr,RMr,D3e,BMr,PMr,G3e,$Mr,IMr,qMr,ca,j7,O3e,NMr,jMr,JQ,DMr,GMr,OMr,D7,V3e,VMr,XMr,YQ,zMr,QMr,WMr,G7,X3e,HMr,UMr,KQ,JMr,YMr,KMr,O7,z3e,ZMr,eEr,ZQ,oEr,rEr,tEr,V7,Q3e,aEr,nEr,eW,sEr,lEr,iEr,W3e,dEr,cEr,Wy,MBe,af,X7,H3e,Hy,fEr,U3e,mEr,EBe,Pr,Uy,gEr,nf,hEr,oW,pEr,_Er,rW,uEr,bEr,FEr,Jy,vEr,J3e,TEr,MEr,EEr,Lt,Yy,CEr,Y3e,wEr,AEr,sf,yEr,K3e,LEr,xEr,tW,kEr,SEr,REr,Z3e,BEr,PEr,Ky,$Er,xo,Zy,IEr,e2e,qEr,NEr,Sn,jEr,o2e,DEr,GEr,r2e,OEr,VEr,t2e,XEr,zEr,QEr,fe,z7,a2e,WEr,HEr,aW,UEr,JEr,YEr,Q7,n2e,KEr,ZEr,nW,eCr,oCr,rCr,W7,s2e,tCr,aCr,sW,nCr,sCr,lCr,H7,l2e,iCr,dCr,lW,cCr,fCr,mCr,U7,i2e,gCr,hCr,iW,pCr,_Cr,uCr,J7,d2e,bCr,FCr,dW,vCr,TCr,MCr,Y7,c2e,ECr,CCr,cW,wCr,ACr,yCr,K7,f2e,LCr,xCr,fW,kCr,SCr,RCr,Z7,m2e,BCr,PCr,mW,$Cr,ICr,qCr,eM,g2e,NCr,jCr,gW,DCr,GCr,OCr,oM,h2e,VCr,XCr,hW,zCr,QCr,WCr,rM,p2e,HCr,UCr,pW,JCr,YCr,KCr,_2e,ZCr,e5r,eL,CBe,lf,tM,u2e,oL,o5r,b2e,r5r,wBe,$r,rL,t5r,df,a5r,_W,n5r,s5r,uW,l5r,i5r,d5r,tL,c5r,F2e,f5r,m5r,g5r,xt,aL,h5r,v2e,p5r,_5r,cf,u5r,T2e,b5r,F5r,bW,v5r,T5r,M5r,M2e,E5r,C5r,nL,w5r,ko,sL,A5r,E2e,y5r,L5r,Rn,x5r,C2e,k5r,S5r,w2e,R5r,B5r,A2e,P5r,$5r,I5r,be,aM,y2e,q5r,N5r,FW,j5r,D5r,G5r,nM,L2e,O5r,V5r,vW,X5r,z5r,Q5r,sM,x2e,W5r,H5r,TW,U5r,J5r,Y5r,lM,k2e,K5r,Z5r,MW,ewr,owr,rwr,iM,S2e,twr,awr,EW,nwr,swr,lwr,dM,R2e,iwr,dwr,CW,cwr,fwr,mwr,cM,B2e,gwr,hwr,wW,pwr,_wr,uwr,fM,P2e,bwr,Fwr,AW,vwr,Twr,Mwr,mM,$2e,Ewr,Cwr,yW,wwr,Awr,ywr,gM,I2e,Lwr,xwr,LW,kwr,Swr,Rwr,q2e,Bwr,Pwr,lL,ABe,ff,hM,N2e,iL,$wr,j2e,Iwr,yBe,Ir,dL,qwr,mf,Nwr,xW,jwr,Dwr,kW,Gwr,Owr,Vwr,cL,Xwr,D2e,zwr,Qwr,Wwr,kt,fL,Hwr,G2e,Uwr,Jwr,gf,Ywr,O2e,Kwr,Zwr,SW,eAr,oAr,rAr,V2e,tAr,aAr,mL,nAr,So,gL,sAr,X2e,lAr,iAr,Bn,dAr,z2e,cAr,fAr,Q2e,mAr,gAr,W2e,hAr,pAr,_Ar,Ee,pM,H2e,uAr,bAr,RW,FAr,vAr,TAr,_M,U2e,MAr,EAr,BW,CAr,wAr,AAr,uM,J2e,yAr,LAr,PW,xAr,kAr,SAr,bM,Y2e,RAr,BAr,$W,PAr,$Ar,IAr,FM,K2e,qAr,NAr,IW,jAr,DAr,GAr,vM,Z2e,OAr,VAr,qW,XAr,zAr,QAr,TM,eFe,WAr,HAr,NW,UAr,JAr,YAr,MM,oFe,KAr,ZAr,jW,e0r,o0r,r0r,EM,rFe,t0r,a0r,DW,n0r,s0r,l0r,tFe,i0r,d0r,hL,LBe,hf,CM,aFe,pL,c0r,nFe,f0r,xBe,qr,_L,m0r,pf,g0r,GW,h0r,p0r,OW,_0r,u0r,b0r,uL,F0r,sFe,v0r,T0r,M0r,St,bL,E0r,lFe,C0r,w0r,_f,A0r,iFe,y0r,L0r,VW,x0r,k0r,S0r,dFe,R0r,B0r,FL,P0r,Ro,vL,$0r,cFe,I0r,q0r,Pn,N0r,fFe,j0r,D0r,mFe,G0r,O0r,gFe,V0r,X0r,z0r,Fe,wM,hFe,Q0r,W0r,XW,H0r,U0r,J0r,AM,pFe,Y0r,K0r,zW,Z0r,eyr,oyr,yM,_Fe,ryr,tyr,QW,ayr,nyr,syr,LM,uFe,lyr,iyr,WW,dyr,cyr,fyr,xM,bFe,myr,gyr,HW,hyr,pyr,_yr,kM,FFe,uyr,byr,UW,Fyr,vyr,Tyr,SM,vFe,Myr,Eyr,JW,Cyr,wyr,Ayr,RM,TFe,yyr,Lyr,YW,xyr,kyr,Syr,BM,MFe,Ryr,Byr,KW,Pyr,$yr,Iyr,PM,EFe,qyr,Nyr,ZW,jyr,Dyr,Gyr,CFe,Oyr,Vyr,TL,kBe,uf,$M,wFe,ML,Xyr,AFe,zyr,SBe,Nr,EL,Qyr,bf,Wyr,eH,Hyr,Uyr,oH,Jyr,Yyr,Kyr,CL,Zyr,yFe,eLr,oLr,rLr,Rt,wL,tLr,LFe,aLr,nLr,Ff,sLr,xFe,lLr,iLr,rH,dLr,cLr,fLr,kFe,mLr,gLr,AL,hLr,Bo,yL,pLr,SFe,_Lr,uLr,$n,bLr,RFe,FLr,vLr,BFe,TLr,MLr,PFe,ELr,CLr,wLr,ve,IM,$Fe,ALr,yLr,tH,LLr,xLr,kLr,qM,IFe,SLr,RLr,aH,BLr,PLr,$Lr,NM,qFe,ILr,qLr,nH,NLr,jLr,DLr,jM,NFe,GLr,OLr,sH,VLr,XLr,zLr,DM,jFe,QLr,WLr,lH,HLr,ULr,JLr,GM,DFe,YLr,KLr,iH,ZLr,e8r,o8r,OM,GFe,r8r,t8r,dH,a8r,n8r,s8r,VM,OFe,l8r,i8r,cH,d8r,c8r,f8r,XM,VFe,m8r,g8r,fH,h8r,p8r,_8r,zM,XFe,u8r,b8r,mH,F8r,v8r,T8r,zFe,M8r,E8r,LL,RBe,vf,QM,QFe,xL,C8r,WFe,w8r,BBe,jr,kL,A8r,Tf,y8r,gH,L8r,x8r,hH,k8r,S8r,R8r,SL,B8r,HFe,P8r,$8r,I8r,Bt,RL,q8r,UFe,N8r,j8r,Mf,D8r,JFe,G8r,O8r,pH,V8r,X8r,z8r,YFe,Q8r,W8r,BL,H8r,Po,PL,U8r,KFe,J8r,Y8r,In,K8r,ZFe,Z8r,e9r,eve,o9r,r9r,ove,t9r,a9r,n9r,Be,WM,rve,s9r,l9r,_H,i9r,d9r,c9r,HM,tve,f9r,m9r,uH,g9r,h9r,p9r,UM,ave,_9r,u9r,bH,b9r,F9r,v9r,JM,nve,T9r,M9r,FH,E9r,C9r,w9r,YM,sve,A9r,y9r,vH,L9r,x9r,k9r,KM,lve,S9r,R9r,TH,B9r,P9r,$9r,ZM,ive,I9r,q9r,MH,N9r,j9r,D9r,eE,dve,G9r,O9r,EH,V9r,X9r,z9r,cve,Q9r,W9r,$L,PBe,Ef,oE,fve,IL,H9r,mve,U9r,$Be,Dr,qL,J9r,Cf,Y9r,CH,K9r,Z9r,wH,exr,oxr,rxr,NL,txr,gve,axr,nxr,sxr,Pt,jL,lxr,hve,ixr,dxr,wf,cxr,pve,fxr,mxr,AH,gxr,hxr,pxr,_ve,_xr,uxr,DL,bxr,$o,GL,Fxr,uve,vxr,Txr,qn,Mxr,bve,Exr,Cxr,Fve,wxr,Axr,vve,yxr,Lxr,xxr,Pe,rE,Tve,kxr,Sxr,yH,Rxr,Bxr,Pxr,tE,Mve,$xr,Ixr,LH,qxr,Nxr,jxr,aE,Eve,Dxr,Gxr,xH,Oxr,Vxr,Xxr,nE,Cve,zxr,Qxr,kH,Wxr,Hxr,Uxr,sE,wve,Jxr,Yxr,SH,Kxr,Zxr,ekr,lE,Ave,okr,rkr,RH,tkr,akr,nkr,iE,yve,skr,lkr,BH,ikr,dkr,ckr,dE,Lve,fkr,mkr,PH,gkr,hkr,pkr,xve,_kr,ukr,OL,IBe,Af,cE,kve,VL,bkr,Sve,Fkr,qBe,Gr,XL,vkr,yf,Tkr,$H,Mkr,Ekr,IH,Ckr,wkr,Akr,zL,ykr,Rve,Lkr,xkr,kkr,$t,QL,Skr,Bve,Rkr,Bkr,Lf,Pkr,Pve,$kr,Ikr,qH,qkr,Nkr,jkr,$ve,Dkr,Gkr,WL,Okr,Io,HL,Vkr,Ive,Xkr,zkr,Nn,Qkr,qve,Wkr,Hkr,Nve,Ukr,Jkr,jve,Ykr,Kkr,Zkr,Dve,fE,Gve,eSr,oSr,NH,rSr,tSr,aSr,Ove,nSr,sSr,UL,NBe,xf,mE,Vve,JL,lSr,Xve,iSr,jBe,Or,YL,dSr,kf,cSr,jH,fSr,mSr,DH,gSr,hSr,pSr,KL,_Sr,zve,uSr,bSr,FSr,It,ZL,vSr,Qve,TSr,MSr,Sf,ESr,Wve,CSr,wSr,GH,ASr,ySr,LSr,Hve,xSr,kSr,e8,SSr,qo,o8,RSr,Uve,BSr,PSr,jn,$Sr,Jve,ISr,qSr,Yve,NSr,jSr,Kve,DSr,GSr,OSr,r8,gE,Zve,VSr,XSr,OH,zSr,QSr,WSr,hE,e6e,HSr,USr,VH,JSr,YSr,KSr,o6e,ZSr,eRr,t8,DBe,Rf,pE,r6e,a8,oRr,t6e,rRr,GBe,Vr,n8,tRr,Bf,aRr,XH,nRr,sRr,zH,lRr,iRr,dRr,s8,cRr,a6e,fRr,mRr,gRr,qt,l8,hRr,n6e,pRr,_Rr,Pf,uRr,s6e,bRr,FRr,QH,vRr,TRr,MRr,l6e,ERr,CRr,i8,wRr,No,d8,ARr,i6e,yRr,LRr,Dn,xRr,d6e,kRr,SRr,c6e,RRr,BRr,f6e,PRr,$Rr,IRr,m6e,_E,g6e,qRr,NRr,WH,jRr,DRr,GRr,h6e,ORr,VRr,c8,OBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vC=new X({}),TC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new XRr({props:{warning:!0,$$slots:{default:[mEt]},$$scope:{ctx:If}}}),MC=new X({}),EC=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L542"}}),AC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L565",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),yC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),LC=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/configuration_auto.py#L687",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),xC=new X({}),kC=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L352"}}),BC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16473/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),PC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),$C=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),IC=new X({}),qC=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),DC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16473/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new XRr({props:{$$slots:{default:[gEt]},$$scope:{ctx:If}}}),GC=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),OC=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),VC=new X({}),XC=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L70"}}),WC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Xh=new XRr({props:{$$slots:{default:[hEt]},$$scope:{ctx:If}}}),HC=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),UC=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),JC=new X({}),YC=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L707"}}),ZC=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),e5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),o5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t5=new X({}),a5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L714"}}),s5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),i5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c5=new X({}),f5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L729"}}),g5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),h5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),p5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u5=new X({}),b5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L736"}}),v5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),T5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),M5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),E5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),C5=new X({}),w5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L743"}}),y5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),L5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),x5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),k5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),S5=new X({}),R5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L752"}}),P5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),$5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),I5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),N5=new X({}),j5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L786"}}),G5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),O5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),V5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),X5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),z5=new X({}),Q5=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L793"}}),H5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),U5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),J5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Y5=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),K5=new X({}),Z5=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L779"}}),ow=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),tw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nw=new X({}),sw=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L761"}}),iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mw=new X({}),gw=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L768"}}),pw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),_w=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),uw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bw=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Fw=new X({}),vw=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L802"}}),Mw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),Cw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),yw=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L841"}}),xw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Sw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Bw=new X({}),Pw=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L848"}}),Iw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dw=new X({}),Gw=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L871"}}),Vw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ww=new X({}),Hw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L855"}}),Jw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eA=new X({}),oA=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L862"}}),tA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),nA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L880"}}),fA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),gA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L887"}}),bA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),FA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),vA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L834"}}),wA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),AA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),yA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xA=new X({}),kA=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L809"}}),RA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),BA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),PA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IA=new X({}),qA=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L816"}}),jA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),DA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),GA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VA=new X({}),XA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_auto.py#L825"}}),QA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),WA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),HA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JA=new X({}),YA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),ZA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),e0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),o0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t0=new X({}),a0=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),s0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),l0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),i0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c0=new X({}),f0=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),g0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),h0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),p0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u0=new X({}),b0=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),v0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),T0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),M0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),L0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),x0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),k0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),$0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),q0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j0=new X({}),D0=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),O0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),V0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),X0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q0=new X({}),W0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),U0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),J0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Y0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z0=new X({}),ey=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),ay=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ny=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sy=new X({}),ly=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),dy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gy=new X({}),hy=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),_y=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),by=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vy=new X({}),Ty=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Ey=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),Cy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),wy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),Ly=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),ky=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),Sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Ry=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Py=new X({}),$y=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),qy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ny=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),jy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Dy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gy=new X({}),Oy=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Xy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),Qy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Hy=new X({}),Uy=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),Yy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Zy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),aL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),sL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),fL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),gL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),bL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),vL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),TL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ML=new X({}),EL=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),wL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),yL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xL=new X({}),kL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),RL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),PL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),qL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),jL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),GL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VL=new X({}),XL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),QL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),HL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new X({}),YL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),ZL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),e8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),o8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),t8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),l8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),d8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16473/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16473/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16473/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),c8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),Ii=o("Auto Classes"),qf=l(),fa=a("p"),qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=a("code"),_C=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),ji=o("Instantiating one of "),Gn=a("a"),uC=o("AutoConfig"),On=o(", "),Vn=a("a"),bC=o("AutoModel"),Di=o(`, and
`),Xn=a("a"),FC=o("AutoTokenizer"),Gi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),i9=o("will create a model that is an instance of "),Oi=a("a"),d9=o("BertModel"),c9=o("."),zo=l(),Ga=a("p"),f9=o("There is one class of "),Df=a("code"),m9=o("AutoModel"),eIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),GSe=l(),Vi=a("h2"),Gf=a("a"),GJ=a("span"),f(vC.$$.fragment),oIe=l(),OJ=a("span"),rIe=o("Extending the Auto Classes"),OSe=l(),zn=a("p"),tIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),VJ=a("code"),aIe=o("NewModel"),nIe=o(", make sure you have a "),XJ=a("code"),sIe=o("NewModelConfig"),lIe=o(` then you can add those to the auto
classes like this:`),VSe=l(),f(TC.$$.fragment),XSe=l(),g9=a("p"),iIe=o("You will then be able to use the auto classes like you would usually do!"),zSe=l(),f(Of.$$.fragment),QSe=l(),Xi=a("h2"),Vf=a("a"),zJ=a("span"),f(MC.$$.fragment),dIe=l(),QJ=a("span"),cIe=o("AutoConfig"),WSe=l(),Qo=a("div"),f(EC.$$.fragment),fIe=l(),CC=a("p"),mIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h9=a("a"),gIe=o("from_pretrained()"),hIe=o(" class method."),pIe=l(),wC=a("p"),_Ie=o("This class cannot be instantiated directly using "),WJ=a("code"),uIe=o("__init__()"),bIe=o(" (throws an error)."),FIe=l(),mo=a("div"),f(AC.$$.fragment),vIe=l(),HJ=a("p"),TIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MIe=l(),zi=a("p"),EIe=o("The configuration class to instantiate is selected based on the "),UJ=a("code"),CIe=o("model_type"),wIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JJ=a("code"),AIe=o("pretrained_model_name_or_path"),yIe=o(":"),LIe=l(),F=a("ul"),Xf=a("li"),YJ=a("strong"),xIe=o("albert"),kIe=o(" \u2014 "),p9=a("a"),SIe=o("AlbertConfig"),RIe=o(" (ALBERT model)"),BIe=l(),zf=a("li"),KJ=a("strong"),PIe=o("bart"),$Ie=o(" \u2014 "),_9=a("a"),IIe=o("BartConfig"),qIe=o(" (BART model)"),NIe=l(),Qf=a("li"),ZJ=a("strong"),jIe=o("beit"),DIe=o(" \u2014 "),u9=a("a"),GIe=o("BeitConfig"),OIe=o(" (BEiT model)"),VIe=l(),Wf=a("li"),eY=a("strong"),XIe=o("bert"),zIe=o(" \u2014 "),b9=a("a"),QIe=o("BertConfig"),WIe=o(" (BERT model)"),HIe=l(),Hf=a("li"),oY=a("strong"),UIe=o("bert-generation"),JIe=o(" \u2014 "),F9=a("a"),YIe=o("BertGenerationConfig"),KIe=o(" (Bert Generation model)"),ZIe=l(),Uf=a("li"),rY=a("strong"),eqe=o("big_bird"),oqe=o(" \u2014 "),v9=a("a"),rqe=o("BigBirdConfig"),tqe=o(" (BigBird model)"),aqe=l(),Jf=a("li"),tY=a("strong"),nqe=o("bigbird_pegasus"),sqe=o(" \u2014 "),T9=a("a"),lqe=o("BigBirdPegasusConfig"),iqe=o(" (BigBirdPegasus model)"),dqe=l(),Yf=a("li"),aY=a("strong"),cqe=o("blenderbot"),fqe=o(" \u2014 "),M9=a("a"),mqe=o("BlenderbotConfig"),gqe=o(" (Blenderbot model)"),hqe=l(),Kf=a("li"),nY=a("strong"),pqe=o("blenderbot-small"),_qe=o(" \u2014 "),E9=a("a"),uqe=o("BlenderbotSmallConfig"),bqe=o(" (BlenderbotSmall model)"),Fqe=l(),Zf=a("li"),sY=a("strong"),vqe=o("camembert"),Tqe=o(" \u2014 "),C9=a("a"),Mqe=o("CamembertConfig"),Eqe=o(" (CamemBERT model)"),Cqe=l(),em=a("li"),lY=a("strong"),wqe=o("canine"),Aqe=o(" \u2014 "),w9=a("a"),yqe=o("CanineConfig"),Lqe=o(" (Canine model)"),xqe=l(),om=a("li"),iY=a("strong"),kqe=o("clip"),Sqe=o(" \u2014 "),A9=a("a"),Rqe=o("CLIPConfig"),Bqe=o(" (CLIP model)"),Pqe=l(),rm=a("li"),dY=a("strong"),$qe=o("convbert"),Iqe=o(" \u2014 "),y9=a("a"),qqe=o("ConvBertConfig"),Nqe=o(" (ConvBERT model)"),jqe=l(),tm=a("li"),cY=a("strong"),Dqe=o("convnext"),Gqe=o(" \u2014 "),L9=a("a"),Oqe=o("ConvNextConfig"),Vqe=o(" (ConvNext model)"),Xqe=l(),am=a("li"),fY=a("strong"),zqe=o("ctrl"),Qqe=o(" \u2014 "),x9=a("a"),Wqe=o("CTRLConfig"),Hqe=o(" (CTRL model)"),Uqe=l(),nm=a("li"),mY=a("strong"),Jqe=o("data2vec-audio"),Yqe=o(" \u2014 "),k9=a("a"),Kqe=o("Data2VecAudioConfig"),Zqe=o(" (Data2VecAudio model)"),eNe=l(),sm=a("li"),gY=a("strong"),oNe=o("data2vec-text"),rNe=o(" \u2014 "),S9=a("a"),tNe=o("Data2VecTextConfig"),aNe=o(" (Data2VecText model)"),nNe=l(),lm=a("li"),hY=a("strong"),sNe=o("deberta"),lNe=o(" \u2014 "),R9=a("a"),iNe=o("DebertaConfig"),dNe=o(" (DeBERTa model)"),cNe=l(),im=a("li"),pY=a("strong"),fNe=o("deberta-v2"),mNe=o(" \u2014 "),B9=a("a"),gNe=o("DebertaV2Config"),hNe=o(" (DeBERTa-v2 model)"),pNe=l(),dm=a("li"),_Y=a("strong"),_Ne=o("decision_transformer"),uNe=o(" \u2014 "),P9=a("a"),bNe=o("DecisionTransformerConfig"),FNe=o(" (Decision Transformer model)"),vNe=l(),cm=a("li"),uY=a("strong"),TNe=o("deit"),MNe=o(" \u2014 "),$9=a("a"),ENe=o("DeiTConfig"),CNe=o(" (DeiT model)"),wNe=l(),fm=a("li"),bY=a("strong"),ANe=o("detr"),yNe=o(" \u2014 "),I9=a("a"),LNe=o("DetrConfig"),xNe=o(" (DETR model)"),kNe=l(),mm=a("li"),FY=a("strong"),SNe=o("distilbert"),RNe=o(" \u2014 "),q9=a("a"),BNe=o("DistilBertConfig"),PNe=o(" (DistilBERT model)"),$Ne=l(),gm=a("li"),vY=a("strong"),INe=o("dpr"),qNe=o(" \u2014 "),N9=a("a"),NNe=o("DPRConfig"),jNe=o(" (DPR model)"),DNe=l(),hm=a("li"),TY=a("strong"),GNe=o("dpt"),ONe=o(" \u2014 "),j9=a("a"),VNe=o("DPTConfig"),XNe=o(" (DPT model)"),zNe=l(),pm=a("li"),MY=a("strong"),QNe=o("electra"),WNe=o(" \u2014 "),D9=a("a"),HNe=o("ElectraConfig"),UNe=o(" (ELECTRA model)"),JNe=l(),_m=a("li"),EY=a("strong"),YNe=o("encoder-decoder"),KNe=o(" \u2014 "),G9=a("a"),ZNe=o("EncoderDecoderConfig"),eje=o(" (Encoder decoder model)"),oje=l(),um=a("li"),CY=a("strong"),rje=o("flaubert"),tje=o(" \u2014 "),O9=a("a"),aje=o("FlaubertConfig"),nje=o(" (FlauBERT model)"),sje=l(),bm=a("li"),wY=a("strong"),lje=o("fnet"),ije=o(" \u2014 "),V9=a("a"),dje=o("FNetConfig"),cje=o(" (FNet model)"),fje=l(),Fm=a("li"),AY=a("strong"),mje=o("fsmt"),gje=o(" \u2014 "),X9=a("a"),hje=o("FSMTConfig"),pje=o(" (FairSeq Machine-Translation model)"),_je=l(),vm=a("li"),yY=a("strong"),uje=o("funnel"),bje=o(" \u2014 "),z9=a("a"),Fje=o("FunnelConfig"),vje=o(" (Funnel Transformer model)"),Tje=l(),Tm=a("li"),LY=a("strong"),Mje=o("glpn"),Eje=o(" \u2014 "),Q9=a("a"),Cje=o("GLPNConfig"),wje=o(" (GLPN model)"),Aje=l(),Mm=a("li"),xY=a("strong"),yje=o("gpt2"),Lje=o(" \u2014 "),W9=a("a"),xje=o("GPT2Config"),kje=o(" (OpenAI GPT-2 model)"),Sje=l(),Em=a("li"),kY=a("strong"),Rje=o("gpt_neo"),Bje=o(" \u2014 "),H9=a("a"),Pje=o("GPTNeoConfig"),$je=o(" (GPT Neo model)"),Ije=l(),Cm=a("li"),SY=a("strong"),qje=o("gptj"),Nje=o(" \u2014 "),U9=a("a"),jje=o("GPTJConfig"),Dje=o(" (GPT-J model)"),Gje=l(),wm=a("li"),RY=a("strong"),Oje=o("hubert"),Vje=o(" \u2014 "),J9=a("a"),Xje=o("HubertConfig"),zje=o(" (Hubert model)"),Qje=l(),Am=a("li"),BY=a("strong"),Wje=o("ibert"),Hje=o(" \u2014 "),Y9=a("a"),Uje=o("IBertConfig"),Jje=o(" (I-BERT model)"),Yje=l(),ym=a("li"),PY=a("strong"),Kje=o("imagegpt"),Zje=o(" \u2014 "),K9=a("a"),eDe=o("ImageGPTConfig"),oDe=o(" (ImageGPT model)"),rDe=l(),Lm=a("li"),$Y=a("strong"),tDe=o("layoutlm"),aDe=o(" \u2014 "),Z9=a("a"),nDe=o("LayoutLMConfig"),sDe=o(" (LayoutLM model)"),lDe=l(),xm=a("li"),IY=a("strong"),iDe=o("layoutlmv2"),dDe=o(" \u2014 "),ex=a("a"),cDe=o("LayoutLMv2Config"),fDe=o(" (LayoutLMv2 model)"),mDe=l(),km=a("li"),qY=a("strong"),gDe=o("led"),hDe=o(" \u2014 "),ox=a("a"),pDe=o("LEDConfig"),_De=o(" (LED model)"),uDe=l(),Sm=a("li"),NY=a("strong"),bDe=o("longformer"),FDe=o(" \u2014 "),rx=a("a"),vDe=o("LongformerConfig"),TDe=o(" (Longformer model)"),MDe=l(),Rm=a("li"),jY=a("strong"),EDe=o("luke"),CDe=o(" \u2014 "),tx=a("a"),wDe=o("LukeConfig"),ADe=o(" (LUKE model)"),yDe=l(),Bm=a("li"),DY=a("strong"),LDe=o("lxmert"),xDe=o(" \u2014 "),ax=a("a"),kDe=o("LxmertConfig"),SDe=o(" (LXMERT model)"),RDe=l(),Pm=a("li"),GY=a("strong"),BDe=o("m2m_100"),PDe=o(" \u2014 "),nx=a("a"),$De=o("M2M100Config"),IDe=o(" (M2M100 model)"),qDe=l(),$m=a("li"),OY=a("strong"),NDe=o("marian"),jDe=o(" \u2014 "),sx=a("a"),DDe=o("MarianConfig"),GDe=o(" (Marian model)"),ODe=l(),Im=a("li"),VY=a("strong"),VDe=o("maskformer"),XDe=o(" \u2014 "),lx=a("a"),zDe=o("MaskFormerConfig"),QDe=o(" (MaskFormer model)"),WDe=l(),qm=a("li"),XY=a("strong"),HDe=o("mbart"),UDe=o(" \u2014 "),ix=a("a"),JDe=o("MBartConfig"),YDe=o(" (mBART model)"),KDe=l(),Nm=a("li"),zY=a("strong"),ZDe=o("megatron-bert"),eGe=o(" \u2014 "),dx=a("a"),oGe=o("MegatronBertConfig"),rGe=o(" (MegatronBert model)"),tGe=l(),jm=a("li"),QY=a("strong"),aGe=o("mobilebert"),nGe=o(" \u2014 "),cx=a("a"),sGe=o("MobileBertConfig"),lGe=o(" (MobileBERT model)"),iGe=l(),Dm=a("li"),WY=a("strong"),dGe=o("mpnet"),cGe=o(" \u2014 "),fx=a("a"),fGe=o("MPNetConfig"),mGe=o(" (MPNet model)"),gGe=l(),Gm=a("li"),HY=a("strong"),hGe=o("mt5"),pGe=o(" \u2014 "),mx=a("a"),_Ge=o("MT5Config"),uGe=o(" (mT5 model)"),bGe=l(),Om=a("li"),UY=a("strong"),FGe=o("nystromformer"),vGe=o(" \u2014 "),gx=a("a"),TGe=o("NystromformerConfig"),MGe=o(" (Nystromformer model)"),EGe=l(),Vm=a("li"),JY=a("strong"),CGe=o("openai-gpt"),wGe=o(" \u2014 "),hx=a("a"),AGe=o("OpenAIGPTConfig"),yGe=o(" (OpenAI GPT model)"),LGe=l(),Xm=a("li"),YY=a("strong"),xGe=o("pegasus"),kGe=o(" \u2014 "),px=a("a"),SGe=o("PegasusConfig"),RGe=o(" (Pegasus model)"),BGe=l(),zm=a("li"),KY=a("strong"),PGe=o("perceiver"),$Ge=o(" \u2014 "),_x=a("a"),IGe=o("PerceiverConfig"),qGe=o(" (Perceiver model)"),NGe=l(),Qm=a("li"),ZY=a("strong"),jGe=o("plbart"),DGe=o(" \u2014 "),ux=a("a"),GGe=o("PLBartConfig"),OGe=o(" (PLBart model)"),VGe=l(),Wm=a("li"),eK=a("strong"),XGe=o("poolformer"),zGe=o(" \u2014 "),bx=a("a"),QGe=o("PoolFormerConfig"),WGe=o(" (PoolFormer model)"),HGe=l(),Hm=a("li"),oK=a("strong"),UGe=o("prophetnet"),JGe=o(" \u2014 "),Fx=a("a"),YGe=o("ProphetNetConfig"),KGe=o(" (ProphetNet model)"),ZGe=l(),Um=a("li"),rK=a("strong"),eOe=o("qdqbert"),oOe=o(" \u2014 "),vx=a("a"),rOe=o("QDQBertConfig"),tOe=o(" (QDQBert model)"),aOe=l(),Jm=a("li"),tK=a("strong"),nOe=o("rag"),sOe=o(" \u2014 "),Tx=a("a"),lOe=o("RagConfig"),iOe=o(" (RAG model)"),dOe=l(),Ym=a("li"),aK=a("strong"),cOe=o("realm"),fOe=o(" \u2014 "),Mx=a("a"),mOe=o("RealmConfig"),gOe=o(" (Realm model)"),hOe=l(),Km=a("li"),nK=a("strong"),pOe=o("reformer"),_Oe=o(" \u2014 "),Ex=a("a"),uOe=o("ReformerConfig"),bOe=o(" (Reformer model)"),FOe=l(),Zm=a("li"),sK=a("strong"),vOe=o("rembert"),TOe=o(" \u2014 "),Cx=a("a"),MOe=o("RemBertConfig"),EOe=o(" (RemBERT model)"),COe=l(),eg=a("li"),lK=a("strong"),wOe=o("resnet"),AOe=o(" \u2014 "),wx=a("a"),yOe=o("ResNetConfig"),LOe=o(" (ResNet model)"),xOe=l(),og=a("li"),iK=a("strong"),kOe=o("retribert"),SOe=o(" \u2014 "),Ax=a("a"),ROe=o("RetriBertConfig"),BOe=o(" (RetriBERT model)"),POe=l(),rg=a("li"),dK=a("strong"),$Oe=o("roberta"),IOe=o(" \u2014 "),yx=a("a"),qOe=o("RobertaConfig"),NOe=o(" (RoBERTa model)"),jOe=l(),tg=a("li"),cK=a("strong"),DOe=o("roformer"),GOe=o(" \u2014 "),Lx=a("a"),OOe=o("RoFormerConfig"),VOe=o(" (RoFormer model)"),XOe=l(),ag=a("li"),fK=a("strong"),zOe=o("segformer"),QOe=o(" \u2014 "),xx=a("a"),WOe=o("SegformerConfig"),HOe=o(" (SegFormer model)"),UOe=l(),ng=a("li"),mK=a("strong"),JOe=o("sew"),YOe=o(" \u2014 "),kx=a("a"),KOe=o("SEWConfig"),ZOe=o(" (SEW model)"),eVe=l(),sg=a("li"),gK=a("strong"),oVe=o("sew-d"),rVe=o(" \u2014 "),Sx=a("a"),tVe=o("SEWDConfig"),aVe=o(" (SEW-D model)"),nVe=l(),lg=a("li"),hK=a("strong"),sVe=o("speech-encoder-decoder"),lVe=o(" \u2014 "),Rx=a("a"),iVe=o("SpeechEncoderDecoderConfig"),dVe=o(" (Speech Encoder decoder model)"),cVe=l(),ig=a("li"),pK=a("strong"),fVe=o("speech_to_text"),mVe=o(" \u2014 "),Bx=a("a"),gVe=o("Speech2TextConfig"),hVe=o(" (Speech2Text model)"),pVe=l(),dg=a("li"),_K=a("strong"),_Ve=o("speech_to_text_2"),uVe=o(" \u2014 "),Px=a("a"),bVe=o("Speech2Text2Config"),FVe=o(" (Speech2Text2 model)"),vVe=l(),cg=a("li"),uK=a("strong"),TVe=o("splinter"),MVe=o(" \u2014 "),$x=a("a"),EVe=o("SplinterConfig"),CVe=o(" (Splinter model)"),wVe=l(),fg=a("li"),bK=a("strong"),AVe=o("squeezebert"),yVe=o(" \u2014 "),Ix=a("a"),LVe=o("SqueezeBertConfig"),xVe=o(" (SqueezeBERT model)"),kVe=l(),mg=a("li"),FK=a("strong"),SVe=o("swin"),RVe=o(" \u2014 "),qx=a("a"),BVe=o("SwinConfig"),PVe=o(" (Swin model)"),$Ve=l(),gg=a("li"),vK=a("strong"),IVe=o("t5"),qVe=o(" \u2014 "),Nx=a("a"),NVe=o("T5Config"),jVe=o(" (T5 model)"),DVe=l(),hg=a("li"),TK=a("strong"),GVe=o("tapas"),OVe=o(" \u2014 "),jx=a("a"),VVe=o("TapasConfig"),XVe=o(" (TAPAS model)"),zVe=l(),pg=a("li"),MK=a("strong"),QVe=o("transfo-xl"),WVe=o(" \u2014 "),Dx=a("a"),HVe=o("TransfoXLConfig"),UVe=o(" (Transformer-XL model)"),JVe=l(),_g=a("li"),EK=a("strong"),YVe=o("trocr"),KVe=o(" \u2014 "),Gx=a("a"),ZVe=o("TrOCRConfig"),eXe=o(" (TrOCR model)"),oXe=l(),ug=a("li"),CK=a("strong"),rXe=o("unispeech"),tXe=o(" \u2014 "),Ox=a("a"),aXe=o("UniSpeechConfig"),nXe=o(" (UniSpeech model)"),sXe=l(),bg=a("li"),wK=a("strong"),lXe=o("unispeech-sat"),iXe=o(" \u2014 "),Vx=a("a"),dXe=o("UniSpeechSatConfig"),cXe=o(" (UniSpeechSat model)"),fXe=l(),Fg=a("li"),AK=a("strong"),mXe=o("van"),gXe=o(" \u2014 "),Xx=a("a"),hXe=o("VanConfig"),pXe=o(" (VAN model)"),_Xe=l(),vg=a("li"),yK=a("strong"),uXe=o("vilt"),bXe=o(" \u2014 "),zx=a("a"),FXe=o("ViltConfig"),vXe=o(" (ViLT model)"),TXe=l(),Tg=a("li"),LK=a("strong"),MXe=o("vision-encoder-decoder"),EXe=o(" \u2014 "),Qx=a("a"),CXe=o("VisionEncoderDecoderConfig"),wXe=o(" (Vision Encoder decoder model)"),AXe=l(),Mg=a("li"),xK=a("strong"),yXe=o("vision-text-dual-encoder"),LXe=o(" \u2014 "),Wx=a("a"),xXe=o("VisionTextDualEncoderConfig"),kXe=o(" (VisionTextDualEncoder model)"),SXe=l(),Eg=a("li"),kK=a("strong"),RXe=o("visual_bert"),BXe=o(" \u2014 "),Hx=a("a"),PXe=o("VisualBertConfig"),$Xe=o(" (VisualBert model)"),IXe=l(),Cg=a("li"),SK=a("strong"),qXe=o("vit"),NXe=o(" \u2014 "),Ux=a("a"),jXe=o("ViTConfig"),DXe=o(" (ViT model)"),GXe=l(),wg=a("li"),RK=a("strong"),OXe=o("vit_mae"),VXe=o(" \u2014 "),Jx=a("a"),XXe=o("ViTMAEConfig"),zXe=o(" (ViTMAE model)"),QXe=l(),Ag=a("li"),BK=a("strong"),WXe=o("wav2vec2"),HXe=o(" \u2014 "),Yx=a("a"),UXe=o("Wav2Vec2Config"),JXe=o(" (Wav2Vec2 model)"),YXe=l(),yg=a("li"),PK=a("strong"),KXe=o("wavlm"),ZXe=o(" \u2014 "),Kx=a("a"),eze=o("WavLMConfig"),oze=o(" (WavLM model)"),rze=l(),Lg=a("li"),$K=a("strong"),tze=o("xglm"),aze=o(" \u2014 "),Zx=a("a"),nze=o("XGLMConfig"),sze=o(" (XGLM model)"),lze=l(),xg=a("li"),IK=a("strong"),ize=o("xlm"),dze=o(" \u2014 "),ek=a("a"),cze=o("XLMConfig"),fze=o(" (XLM model)"),mze=l(),kg=a("li"),qK=a("strong"),gze=o("xlm-prophetnet"),hze=o(" \u2014 "),ok=a("a"),pze=o("XLMProphetNetConfig"),_ze=o(" (XLMProphetNet model)"),uze=l(),Sg=a("li"),NK=a("strong"),bze=o("xlm-roberta"),Fze=o(" \u2014 "),rk=a("a"),vze=o("XLMRobertaConfig"),Tze=o(" (XLM-RoBERTa model)"),Mze=l(),Rg=a("li"),jK=a("strong"),Eze=o("xlm-roberta-xl"),Cze=o(" \u2014 "),tk=a("a"),wze=o("XLMRobertaXLConfig"),Aze=o(" (XLM-RoBERTa-XL model)"),yze=l(),Bg=a("li"),DK=a("strong"),Lze=o("xlnet"),xze=o(" \u2014 "),ak=a("a"),kze=o("XLNetConfig"),Sze=o(" (XLNet model)"),Rze=l(),Pg=a("li"),GK=a("strong"),Bze=o("yoso"),Pze=o(" \u2014 "),nk=a("a"),$ze=o("YosoConfig"),Ize=o(" (YOSO model)"),qze=l(),OK=a("p"),Nze=o("Examples:"),jze=l(),f(yC.$$.fragment),Dze=l(),$g=a("div"),f(LC.$$.fragment),Gze=l(),VK=a("p"),Oze=o("Register a new configuration for this class."),HSe=l(),Qi=a("h2"),Ig=a("a"),XK=a("span"),f(xC.$$.fragment),Vze=l(),zK=a("span"),Xze=o("AutoTokenizer"),USe=l(),Wo=a("div"),f(kC.$$.fragment),zze=l(),SC=a("p"),Qze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sk=a("a"),Wze=o("AutoTokenizer.from_pretrained()"),Hze=o(" class method."),Uze=l(),RC=a("p"),Jze=o("This class cannot be instantiated directly using "),QK=a("code"),Yze=o("__init__()"),Kze=o(" (throws an error)."),Zze=l(),go=a("div"),f(BC.$$.fragment),eQe=l(),WK=a("p"),oQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),rQe=l(),Oa=a("p"),tQe=o("The tokenizer class to instantiate is selected based on the "),HK=a("code"),aQe=o("model_type"),nQe=o(` property of the config object (either
passed as an argument or loaded from `),UK=a("code"),sQe=o("pretrained_model_name_or_path"),lQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=a("code"),iQe=o("pretrained_model_name_or_path"),dQe=o(":"),cQe=l(),E=a("ul"),Qn=a("li"),YK=a("strong"),fQe=o("albert"),mQe=o(" \u2014 "),lk=a("a"),gQe=o("AlbertTokenizer"),hQe=o(" or "),ik=a("a"),pQe=o("AlbertTokenizerFast"),_Qe=o(" (ALBERT model)"),uQe=l(),Wn=a("li"),KK=a("strong"),bQe=o("bart"),FQe=o(" \u2014 "),dk=a("a"),vQe=o("BartTokenizer"),TQe=o(" or "),ck=a("a"),MQe=o("BartTokenizerFast"),EQe=o(" (BART model)"),CQe=l(),Hn=a("li"),ZK=a("strong"),wQe=o("barthez"),AQe=o(" \u2014 "),fk=a("a"),yQe=o("BarthezTokenizer"),LQe=o(" or "),mk=a("a"),xQe=o("BarthezTokenizerFast"),kQe=o(" (BARThez model)"),SQe=l(),qg=a("li"),eZ=a("strong"),RQe=o("bartpho"),BQe=o(" \u2014 "),gk=a("a"),PQe=o("BartphoTokenizer"),$Qe=o(" (BARTpho model)"),IQe=l(),Un=a("li"),oZ=a("strong"),qQe=o("bert"),NQe=o(" \u2014 "),hk=a("a"),jQe=o("BertTokenizer"),DQe=o(" or "),pk=a("a"),GQe=o("BertTokenizerFast"),OQe=o(" (BERT model)"),VQe=l(),Ng=a("li"),rZ=a("strong"),XQe=o("bert-generation"),zQe=o(" \u2014 "),_k=a("a"),QQe=o("BertGenerationTokenizer"),WQe=o(" (Bert Generation model)"),HQe=l(),jg=a("li"),tZ=a("strong"),UQe=o("bert-japanese"),JQe=o(" \u2014 "),uk=a("a"),YQe=o("BertJapaneseTokenizer"),KQe=o(" (BertJapanese model)"),ZQe=l(),Dg=a("li"),aZ=a("strong"),eWe=o("bertweet"),oWe=o(" \u2014 "),bk=a("a"),rWe=o("BertweetTokenizer"),tWe=o(" (Bertweet model)"),aWe=l(),Jn=a("li"),nZ=a("strong"),nWe=o("big_bird"),sWe=o(" \u2014 "),Fk=a("a"),lWe=o("BigBirdTokenizer"),iWe=o(" or "),vk=a("a"),dWe=o("BigBirdTokenizerFast"),cWe=o(" (BigBird model)"),fWe=l(),Yn=a("li"),sZ=a("strong"),mWe=o("bigbird_pegasus"),gWe=o(" \u2014 "),Tk=a("a"),hWe=o("PegasusTokenizer"),pWe=o(" or "),Mk=a("a"),_We=o("PegasusTokenizerFast"),uWe=o(" (BigBirdPegasus model)"),bWe=l(),Kn=a("li"),lZ=a("strong"),FWe=o("blenderbot"),vWe=o(" \u2014 "),Ek=a("a"),TWe=o("BlenderbotTokenizer"),MWe=o(" or "),Ck=a("a"),EWe=o("BlenderbotTokenizerFast"),CWe=o(" (Blenderbot model)"),wWe=l(),Gg=a("li"),iZ=a("strong"),AWe=o("blenderbot-small"),yWe=o(" \u2014 "),wk=a("a"),LWe=o("BlenderbotSmallTokenizer"),xWe=o(" (BlenderbotSmall model)"),kWe=l(),Og=a("li"),dZ=a("strong"),SWe=o("byt5"),RWe=o(" \u2014 "),Ak=a("a"),BWe=o("ByT5Tokenizer"),PWe=o(" (ByT5 model)"),$We=l(),Zn=a("li"),cZ=a("strong"),IWe=o("camembert"),qWe=o(" \u2014 "),yk=a("a"),NWe=o("CamembertTokenizer"),jWe=o(" or "),Lk=a("a"),DWe=o("CamembertTokenizerFast"),GWe=o(" (CamemBERT model)"),OWe=l(),Vg=a("li"),fZ=a("strong"),VWe=o("canine"),XWe=o(" \u2014 "),xk=a("a"),zWe=o("CanineTokenizer"),QWe=o(" (Canine model)"),WWe=l(),es=a("li"),mZ=a("strong"),HWe=o("clip"),UWe=o(" \u2014 "),kk=a("a"),JWe=o("CLIPTokenizer"),YWe=o(" or "),Sk=a("a"),KWe=o("CLIPTokenizerFast"),ZWe=o(" (CLIP model)"),eHe=l(),os=a("li"),gZ=a("strong"),oHe=o("convbert"),rHe=o(" \u2014 "),Rk=a("a"),tHe=o("ConvBertTokenizer"),aHe=o(" or "),Bk=a("a"),nHe=o("ConvBertTokenizerFast"),sHe=o(" (ConvBERT model)"),lHe=l(),rs=a("li"),hZ=a("strong"),iHe=o("cpm"),dHe=o(" \u2014 "),Pk=a("a"),cHe=o("CpmTokenizer"),fHe=o(" or "),pZ=a("code"),mHe=o("CpmTokenizerFast"),gHe=o(" (CPM model)"),hHe=l(),Xg=a("li"),_Z=a("strong"),pHe=o("ctrl"),_He=o(" \u2014 "),$k=a("a"),uHe=o("CTRLTokenizer"),bHe=o(" (CTRL model)"),FHe=l(),ts=a("li"),uZ=a("strong"),vHe=o("deberta"),THe=o(" \u2014 "),Ik=a("a"),MHe=o("DebertaTokenizer"),EHe=o(" or "),qk=a("a"),CHe=o("DebertaTokenizerFast"),wHe=o(" (DeBERTa model)"),AHe=l(),zg=a("li"),bZ=a("strong"),yHe=o("deberta-v2"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("DebertaV2Tokenizer"),kHe=o(" (DeBERTa-v2 model)"),SHe=l(),as=a("li"),FZ=a("strong"),RHe=o("distilbert"),BHe=o(" \u2014 "),jk=a("a"),PHe=o("DistilBertTokenizer"),$He=o(" or "),Dk=a("a"),IHe=o("DistilBertTokenizerFast"),qHe=o(" (DistilBERT model)"),NHe=l(),ns=a("li"),vZ=a("strong"),jHe=o("dpr"),DHe=o(" \u2014 "),Gk=a("a"),GHe=o("DPRQuestionEncoderTokenizer"),OHe=o(" or "),Ok=a("a"),VHe=o("DPRQuestionEncoderTokenizerFast"),XHe=o(" (DPR model)"),zHe=l(),ss=a("li"),TZ=a("strong"),QHe=o("electra"),WHe=o(" \u2014 "),Vk=a("a"),HHe=o("ElectraTokenizer"),UHe=o(" or "),Xk=a("a"),JHe=o("ElectraTokenizerFast"),YHe=o(" (ELECTRA model)"),KHe=l(),Qg=a("li"),MZ=a("strong"),ZHe=o("flaubert"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("FlaubertTokenizer"),rUe=o(" (FlauBERT model)"),tUe=l(),ls=a("li"),EZ=a("strong"),aUe=o("fnet"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("FNetTokenizer"),lUe=o(" or "),Wk=a("a"),iUe=o("FNetTokenizerFast"),dUe=o(" (FNet model)"),cUe=l(),Wg=a("li"),CZ=a("strong"),fUe=o("fsmt"),mUe=o(" \u2014 "),Hk=a("a"),gUe=o("FSMTTokenizer"),hUe=o(" (FairSeq Machine-Translation model)"),pUe=l(),is=a("li"),wZ=a("strong"),_Ue=o("funnel"),uUe=o(" \u2014 "),Uk=a("a"),bUe=o("FunnelTokenizer"),FUe=o(" or "),Jk=a("a"),vUe=o("FunnelTokenizerFast"),TUe=o(" (Funnel Transformer model)"),MUe=l(),ds=a("li"),AZ=a("strong"),EUe=o("gpt2"),CUe=o(" \u2014 "),Yk=a("a"),wUe=o("GPT2Tokenizer"),AUe=o(" or "),Kk=a("a"),yUe=o("GPT2TokenizerFast"),LUe=o(" (OpenAI GPT-2 model)"),xUe=l(),cs=a("li"),yZ=a("strong"),kUe=o("gpt_neo"),SUe=o(" \u2014 "),Zk=a("a"),RUe=o("GPT2Tokenizer"),BUe=o(" or "),eS=a("a"),PUe=o("GPT2TokenizerFast"),$Ue=o(" (GPT Neo model)"),IUe=l(),fs=a("li"),LZ=a("strong"),qUe=o("herbert"),NUe=o(" \u2014 "),oS=a("a"),jUe=o("HerbertTokenizer"),DUe=o(" or "),rS=a("a"),GUe=o("HerbertTokenizerFast"),OUe=o(" (HerBERT model)"),VUe=l(),Hg=a("li"),xZ=a("strong"),XUe=o("hubert"),zUe=o(" \u2014 "),tS=a("a"),QUe=o("Wav2Vec2CTCTokenizer"),WUe=o(" (Hubert model)"),HUe=l(),ms=a("li"),kZ=a("strong"),UUe=o("ibert"),JUe=o(" \u2014 "),aS=a("a"),YUe=o("RobertaTokenizer"),KUe=o(" or "),nS=a("a"),ZUe=o("RobertaTokenizerFast"),eJe=o(" (I-BERT model)"),oJe=l(),gs=a("li"),SZ=a("strong"),rJe=o("layoutlm"),tJe=o(" \u2014 "),sS=a("a"),aJe=o("LayoutLMTokenizer"),nJe=o(" or "),lS=a("a"),sJe=o("LayoutLMTokenizerFast"),lJe=o(" (LayoutLM model)"),iJe=l(),hs=a("li"),RZ=a("strong"),dJe=o("layoutlmv2"),cJe=o(" \u2014 "),iS=a("a"),fJe=o("LayoutLMv2Tokenizer"),mJe=o(" or "),dS=a("a"),gJe=o("LayoutLMv2TokenizerFast"),hJe=o(" (LayoutLMv2 model)"),pJe=l(),ps=a("li"),BZ=a("strong"),_Je=o("layoutxlm"),uJe=o(" \u2014 "),cS=a("a"),bJe=o("LayoutXLMTokenizer"),FJe=o(" or "),fS=a("a"),vJe=o("LayoutXLMTokenizerFast"),TJe=o(" (LayoutXLM model)"),MJe=l(),_s=a("li"),PZ=a("strong"),EJe=o("led"),CJe=o(" \u2014 "),mS=a("a"),wJe=o("LEDTokenizer"),AJe=o(" or "),gS=a("a"),yJe=o("LEDTokenizerFast"),LJe=o(" (LED model)"),xJe=l(),us=a("li"),$Z=a("strong"),kJe=o("longformer"),SJe=o(" \u2014 "),hS=a("a"),RJe=o("LongformerTokenizer"),BJe=o(" or "),pS=a("a"),PJe=o("LongformerTokenizerFast"),$Je=o(" (Longformer model)"),IJe=l(),Ug=a("li"),IZ=a("strong"),qJe=o("luke"),NJe=o(" \u2014 "),_S=a("a"),jJe=o("LukeTokenizer"),DJe=o(" (LUKE model)"),GJe=l(),bs=a("li"),qZ=a("strong"),OJe=o("lxmert"),VJe=o(" \u2014 "),uS=a("a"),XJe=o("LxmertTokenizer"),zJe=o(" or "),bS=a("a"),QJe=o("LxmertTokenizerFast"),WJe=o(" (LXMERT model)"),HJe=l(),Jg=a("li"),NZ=a("strong"),UJe=o("m2m_100"),JJe=o(" \u2014 "),FS=a("a"),YJe=o("M2M100Tokenizer"),KJe=o(" (M2M100 model)"),ZJe=l(),Yg=a("li"),jZ=a("strong"),eYe=o("marian"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("MarianTokenizer"),tYe=o(" (Marian model)"),aYe=l(),Fs=a("li"),DZ=a("strong"),nYe=o("mbart"),sYe=o(" \u2014 "),TS=a("a"),lYe=o("MBartTokenizer"),iYe=o(" or "),MS=a("a"),dYe=o("MBartTokenizerFast"),cYe=o(" (mBART model)"),fYe=l(),vs=a("li"),GZ=a("strong"),mYe=o("mbart50"),gYe=o(" \u2014 "),ES=a("a"),hYe=o("MBart50Tokenizer"),pYe=o(" or "),CS=a("a"),_Ye=o("MBart50TokenizerFast"),uYe=o(" (mBART-50 model)"),bYe=l(),Kg=a("li"),OZ=a("strong"),FYe=o("mluke"),vYe=o(" \u2014 "),wS=a("a"),TYe=o("MLukeTokenizer"),MYe=o(" (mLUKE model)"),EYe=l(),Ts=a("li"),VZ=a("strong"),CYe=o("mobilebert"),wYe=o(" \u2014 "),AS=a("a"),AYe=o("MobileBertTokenizer"),yYe=o(" or "),yS=a("a"),LYe=o("MobileBertTokenizerFast"),xYe=o(" (MobileBERT model)"),kYe=l(),Ms=a("li"),XZ=a("strong"),SYe=o("mpnet"),RYe=o(" \u2014 "),LS=a("a"),BYe=o("MPNetTokenizer"),PYe=o(" or "),xS=a("a"),$Ye=o("MPNetTokenizerFast"),IYe=o(" (MPNet model)"),qYe=l(),Es=a("li"),zZ=a("strong"),NYe=o("mt5"),jYe=o(" \u2014 "),kS=a("a"),DYe=o("MT5Tokenizer"),GYe=o(" or "),SS=a("a"),OYe=o("MT5TokenizerFast"),VYe=o(" (mT5 model)"),XYe=l(),Cs=a("li"),QZ=a("strong"),zYe=o("openai-gpt"),QYe=o(" \u2014 "),RS=a("a"),WYe=o("OpenAIGPTTokenizer"),HYe=o(" or "),BS=a("a"),UYe=o("OpenAIGPTTokenizerFast"),JYe=o(" (OpenAI GPT model)"),YYe=l(),ws=a("li"),WZ=a("strong"),KYe=o("pegasus"),ZYe=o(" \u2014 "),PS=a("a"),eKe=o("PegasusTokenizer"),oKe=o(" or "),$S=a("a"),rKe=o("PegasusTokenizerFast"),tKe=o(" (Pegasus model)"),aKe=l(),Zg=a("li"),HZ=a("strong"),nKe=o("perceiver"),sKe=o(" \u2014 "),IS=a("a"),lKe=o("PerceiverTokenizer"),iKe=o(" (Perceiver model)"),dKe=l(),eh=a("li"),UZ=a("strong"),cKe=o("phobert"),fKe=o(" \u2014 "),qS=a("a"),mKe=o("PhobertTokenizer"),gKe=o(" (PhoBERT model)"),hKe=l(),oh=a("li"),JZ=a("strong"),pKe=o("plbart"),_Ke=o(" \u2014 "),NS=a("a"),uKe=o("PLBartTokenizer"),bKe=o(" (PLBart model)"),FKe=l(),rh=a("li"),YZ=a("strong"),vKe=o("prophetnet"),TKe=o(" \u2014 "),jS=a("a"),MKe=o("ProphetNetTokenizer"),EKe=o(" (ProphetNet model)"),CKe=l(),As=a("li"),KZ=a("strong"),wKe=o("qdqbert"),AKe=o(" \u2014 "),DS=a("a"),yKe=o("BertTokenizer"),LKe=o(" or "),GS=a("a"),xKe=o("BertTokenizerFast"),kKe=o(" (QDQBert model)"),SKe=l(),th=a("li"),ZZ=a("strong"),RKe=o("rag"),BKe=o(" \u2014 "),OS=a("a"),PKe=o("RagTokenizer"),$Ke=o(" (RAG model)"),IKe=l(),ys=a("li"),eee=a("strong"),qKe=o("realm"),NKe=o(" \u2014 "),VS=a("a"),jKe=o("RealmTokenizer"),DKe=o(" or "),XS=a("a"),GKe=o("RealmTokenizerFast"),OKe=o(" (Realm model)"),VKe=l(),Ls=a("li"),oee=a("strong"),XKe=o("reformer"),zKe=o(" \u2014 "),zS=a("a"),QKe=o("ReformerTokenizer"),WKe=o(" or "),QS=a("a"),HKe=o("ReformerTokenizerFast"),UKe=o(" (Reformer model)"),JKe=l(),xs=a("li"),ree=a("strong"),YKe=o("rembert"),KKe=o(" \u2014 "),WS=a("a"),ZKe=o("RemBertTokenizer"),eZe=o(" or "),HS=a("a"),oZe=o("RemBertTokenizerFast"),rZe=o(" (RemBERT model)"),tZe=l(),ks=a("li"),tee=a("strong"),aZe=o("retribert"),nZe=o(" \u2014 "),US=a("a"),sZe=o("RetriBertTokenizer"),lZe=o(" or "),JS=a("a"),iZe=o("RetriBertTokenizerFast"),dZe=o(" (RetriBERT model)"),cZe=l(),Ss=a("li"),aee=a("strong"),fZe=o("roberta"),mZe=o(" \u2014 "),YS=a("a"),gZe=o("RobertaTokenizer"),hZe=o(" or "),KS=a("a"),pZe=o("RobertaTokenizerFast"),_Ze=o(" (RoBERTa model)"),uZe=l(),Rs=a("li"),nee=a("strong"),bZe=o("roformer"),FZe=o(" \u2014 "),ZS=a("a"),vZe=o("RoFormerTokenizer"),TZe=o(" or "),eR=a("a"),MZe=o("RoFormerTokenizerFast"),EZe=o(" (RoFormer model)"),CZe=l(),ah=a("li"),see=a("strong"),wZe=o("speech_to_text"),AZe=o(" \u2014 "),oR=a("a"),yZe=o("Speech2TextTokenizer"),LZe=o(" (Speech2Text model)"),xZe=l(),nh=a("li"),lee=a("strong"),kZe=o("speech_to_text_2"),SZe=o(" \u2014 "),rR=a("a"),RZe=o("Speech2Text2Tokenizer"),BZe=o(" (Speech2Text2 model)"),PZe=l(),Bs=a("li"),iee=a("strong"),$Ze=o("splinter"),IZe=o(" \u2014 "),tR=a("a"),qZe=o("SplinterTokenizer"),NZe=o(" or "),aR=a("a"),jZe=o("SplinterTokenizerFast"),DZe=o(" (Splinter model)"),GZe=l(),Ps=a("li"),dee=a("strong"),OZe=o("squeezebert"),VZe=o(" \u2014 "),nR=a("a"),XZe=o("SqueezeBertTokenizer"),zZe=o(" or "),sR=a("a"),QZe=o("SqueezeBertTokenizerFast"),WZe=o(" (SqueezeBERT model)"),HZe=l(),$s=a("li"),cee=a("strong"),UZe=o("t5"),JZe=o(" \u2014 "),lR=a("a"),YZe=o("T5Tokenizer"),KZe=o(" or "),iR=a("a"),ZZe=o("T5TokenizerFast"),eeo=o(" (T5 model)"),oeo=l(),sh=a("li"),fee=a("strong"),reo=o("tapas"),teo=o(" \u2014 "),dR=a("a"),aeo=o("TapasTokenizer"),neo=o(" (TAPAS model)"),seo=l(),lh=a("li"),mee=a("strong"),leo=o("tapex"),ieo=o(" \u2014 "),cR=a("a"),deo=o("TapexTokenizer"),ceo=o(" (TAPEX model)"),feo=l(),ih=a("li"),gee=a("strong"),meo=o("transfo-xl"),geo=o(" \u2014 "),fR=a("a"),heo=o("TransfoXLTokenizer"),peo=o(" (Transformer-XL model)"),_eo=l(),dh=a("li"),hee=a("strong"),ueo=o("wav2vec2"),beo=o(" \u2014 "),mR=a("a"),Feo=o("Wav2Vec2CTCTokenizer"),veo=o(" (Wav2Vec2 model)"),Teo=l(),ch=a("li"),pee=a("strong"),Meo=o("wav2vec2_phoneme"),Eeo=o(" \u2014 "),gR=a("a"),Ceo=o("Wav2Vec2PhonemeCTCTokenizer"),weo=o(" (Wav2Vec2Phoneme model)"),Aeo=l(),Is=a("li"),_ee=a("strong"),yeo=o("xglm"),Leo=o(" \u2014 "),hR=a("a"),xeo=o("XGLMTokenizer"),keo=o(" or "),pR=a("a"),Seo=o("XGLMTokenizerFast"),Reo=o(" (XGLM model)"),Beo=l(),fh=a("li"),uee=a("strong"),Peo=o("xlm"),$eo=o(" \u2014 "),_R=a("a"),Ieo=o("XLMTokenizer"),qeo=o(" (XLM model)"),Neo=l(),mh=a("li"),bee=a("strong"),jeo=o("xlm-prophetnet"),Deo=o(" \u2014 "),uR=a("a"),Geo=o("XLMProphetNetTokenizer"),Oeo=o(" (XLMProphetNet model)"),Veo=l(),qs=a("li"),Fee=a("strong"),Xeo=o("xlm-roberta"),zeo=o(" \u2014 "),bR=a("a"),Qeo=o("XLMRobertaTokenizer"),Weo=o(" or "),FR=a("a"),Heo=o("XLMRobertaTokenizerFast"),Ueo=o(" (XLM-RoBERTa model)"),Jeo=l(),Ns=a("li"),vee=a("strong"),Yeo=o("xlnet"),Keo=o(" \u2014 "),vR=a("a"),Zeo=o("XLNetTokenizer"),eoo=o(" or "),TR=a("a"),ooo=o("XLNetTokenizerFast"),roo=o(" (XLNet model)"),too=l(),Tee=a("p"),aoo=o("Examples:"),noo=l(),f(PC.$$.fragment),soo=l(),gh=a("div"),f($C.$$.fragment),loo=l(),Mee=a("p"),ioo=o("Register a new tokenizer in this mapping."),JSe=l(),Wi=a("h2"),hh=a("a"),Eee=a("span"),f(IC.$$.fragment),doo=l(),Cee=a("span"),coo=o("AutoFeatureExtractor"),YSe=l(),Ho=a("div"),f(qC.$$.fragment),foo=l(),NC=a("p"),moo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MR=a("a"),goo=o("AutoFeatureExtractor.from_pretrained()"),hoo=o(" class method."),poo=l(),jC=a("p"),_oo=o("This class cannot be instantiated directly using "),wee=a("code"),uoo=o("__init__()"),boo=o(" (throws an error)."),Foo=l(),$e=a("div"),f(DC.$$.fragment),voo=l(),Aee=a("p"),Too=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Moo=l(),Va=a("p"),Eoo=o("The feature extractor class to instantiate is selected based on the "),yee=a("code"),Coo=o("model_type"),woo=o(` property of the config object
(either passed as an argument or loaded from `),Lee=a("code"),Aoo=o("pretrained_model_name_or_path"),yoo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xee=a("code"),Loo=o("pretrained_model_name_or_path"),xoo=o(":"),koo=l(),te=a("ul"),ph=a("li"),kee=a("strong"),Soo=o("beit"),Roo=o(" \u2014 "),ER=a("a"),Boo=o("BeitFeatureExtractor"),Poo=o(" (BEiT model)"),$oo=l(),_h=a("li"),See=a("strong"),Ioo=o("clip"),qoo=o(" \u2014 "),CR=a("a"),Noo=o("CLIPFeatureExtractor"),joo=o(" (CLIP model)"),Doo=l(),uh=a("li"),Ree=a("strong"),Goo=o("convnext"),Ooo=o(" \u2014 "),wR=a("a"),Voo=o("ConvNextFeatureExtractor"),Xoo=o(" (ConvNext model)"),zoo=l(),bh=a("li"),Bee=a("strong"),Qoo=o("deit"),Woo=o(" \u2014 "),AR=a("a"),Hoo=o("DeiTFeatureExtractor"),Uoo=o(" (DeiT model)"),Joo=l(),Fh=a("li"),Pee=a("strong"),Yoo=o("detr"),Koo=o(" \u2014 "),yR=a("a"),Zoo=o("DetrFeatureExtractor"),ero=o(" (DETR model)"),oro=l(),vh=a("li"),$ee=a("strong"),rro=o("hubert"),tro=o(" \u2014 "),LR=a("a"),aro=o("Wav2Vec2FeatureExtractor"),nro=o(" (Hubert model)"),sro=l(),Th=a("li"),Iee=a("strong"),lro=o("layoutlmv2"),iro=o(" \u2014 "),xR=a("a"),dro=o("LayoutLMv2FeatureExtractor"),cro=o(" (LayoutLMv2 model)"),fro=l(),Mh=a("li"),qee=a("strong"),mro=o("maskformer"),gro=o(" \u2014 "),kR=a("a"),hro=o("MaskFormerFeatureExtractor"),pro=o(" (MaskFormer model)"),_ro=l(),Eh=a("li"),Nee=a("strong"),uro=o("perceiver"),bro=o(" \u2014 "),SR=a("a"),Fro=o("PerceiverFeatureExtractor"),vro=o(" (Perceiver model)"),Tro=l(),Ch=a("li"),jee=a("strong"),Mro=o("poolformer"),Ero=o(" \u2014 "),RR=a("a"),Cro=o("PoolFormerFeatureExtractor"),wro=o(" (PoolFormer model)"),Aro=l(),wh=a("li"),Dee=a("strong"),yro=o("resnet"),Lro=o(" \u2014 "),BR=a("a"),xro=o("ConvNextFeatureExtractor"),kro=o(" (ResNet model)"),Sro=l(),Ah=a("li"),Gee=a("strong"),Rro=o("segformer"),Bro=o(" \u2014 "),PR=a("a"),Pro=o("SegformerFeatureExtractor"),$ro=o(" (SegFormer model)"),Iro=l(),yh=a("li"),Oee=a("strong"),qro=o("speech_to_text"),Nro=o(" \u2014 "),$R=a("a"),jro=o("Speech2TextFeatureExtractor"),Dro=o(" (Speech2Text model)"),Gro=l(),Lh=a("li"),Vee=a("strong"),Oro=o("swin"),Vro=o(" \u2014 "),IR=a("a"),Xro=o("ViTFeatureExtractor"),zro=o(" (Swin model)"),Qro=l(),xh=a("li"),Xee=a("strong"),Wro=o("van"),Hro=o(" \u2014 "),qR=a("a"),Uro=o("ConvNextFeatureExtractor"),Jro=o(" (VAN model)"),Yro=l(),kh=a("li"),zee=a("strong"),Kro=o("vit"),Zro=o(" \u2014 "),NR=a("a"),eto=o("ViTFeatureExtractor"),oto=o(" (ViT model)"),rto=l(),Sh=a("li"),Qee=a("strong"),tto=o("vit_mae"),ato=o(" \u2014 "),jR=a("a"),nto=o("ViTFeatureExtractor"),sto=o(" (ViTMAE model)"),lto=l(),Rh=a("li"),Wee=a("strong"),ito=o("wav2vec2"),dto=o(" \u2014 "),DR=a("a"),cto=o("Wav2Vec2FeatureExtractor"),fto=o(" (Wav2Vec2 model)"),mto=l(),f(Bh.$$.fragment),gto=l(),Hee=a("p"),hto=o("Examples:"),pto=l(),f(GC.$$.fragment),_to=l(),Ph=a("div"),f(OC.$$.fragment),uto=l(),Uee=a("p"),bto=o("Register a new feature extractor for this class."),KSe=l(),Hi=a("h2"),$h=a("a"),Jee=a("span"),f(VC.$$.fragment),Fto=l(),Yee=a("span"),vto=o("AutoProcessor"),ZSe=l(),Uo=a("div"),f(XC.$$.fragment),Tto=l(),zC=a("p"),Mto=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GR=a("a"),Eto=o("AutoProcessor.from_pretrained()"),Cto=o(" class method."),wto=l(),QC=a("p"),Ato=o("This class cannot be instantiated directly using "),Kee=a("code"),yto=o("__init__()"),Lto=o(" (throws an error)."),xto=l(),Ie=a("div"),f(WC.$$.fragment),kto=l(),Zee=a("p"),Sto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rto=l(),Ui=a("p"),Bto=o("The processor class to instantiate is selected based on the "),eoe=a("code"),Pto=o("model_type"),$to=o(` property of the config object (either
passed as an argument or loaded from `),ooe=a("code"),Ito=o("pretrained_model_name_or_path"),qto=o(" if possible):"),Nto=l(),ke=a("ul"),Ih=a("li"),roe=a("strong"),jto=o("clip"),Dto=o(" \u2014 "),OR=a("a"),Gto=o("CLIPProcessor"),Oto=o(" (CLIP model)"),Vto=l(),qh=a("li"),toe=a("strong"),Xto=o("layoutlmv2"),zto=o(" \u2014 "),VR=a("a"),Qto=o("LayoutLMv2Processor"),Wto=o(" (LayoutLMv2 model)"),Hto=l(),Nh=a("li"),aoe=a("strong"),Uto=o("layoutxlm"),Jto=o(" \u2014 "),XR=a("a"),Yto=o("LayoutXLMProcessor"),Kto=o(" (LayoutXLM model)"),Zto=l(),jh=a("li"),noe=a("strong"),eao=o("speech_to_text"),oao=o(" \u2014 "),zR=a("a"),rao=o("Speech2TextProcessor"),tao=o(" (Speech2Text model)"),aao=l(),Dh=a("li"),soe=a("strong"),nao=o("speech_to_text_2"),sao=o(" \u2014 "),QR=a("a"),lao=o("Speech2Text2Processor"),iao=o(" (Speech2Text2 model)"),dao=l(),Gh=a("li"),loe=a("strong"),cao=o("trocr"),fao=o(" \u2014 "),WR=a("a"),mao=o("TrOCRProcessor"),gao=o(" (TrOCR model)"),hao=l(),Oh=a("li"),ioe=a("strong"),pao=o("vision-text-dual-encoder"),_ao=o(" \u2014 "),HR=a("a"),uao=o("VisionTextDualEncoderProcessor"),bao=o(" (VisionTextDualEncoder model)"),Fao=l(),Vh=a("li"),doe=a("strong"),vao=o("wav2vec2"),Tao=o(" \u2014 "),UR=a("a"),Mao=o("Wav2Vec2Processor"),Eao=o(" (Wav2Vec2 model)"),Cao=l(),f(Xh.$$.fragment),wao=l(),coe=a("p"),Aao=o("Examples:"),yao=l(),f(HC.$$.fragment),Lao=l(),zh=a("div"),f(UC.$$.fragment),xao=l(),foe=a("p"),kao=o("Register a new processor for this class."),eRe=l(),Ji=a("h2"),Qh=a("a"),moe=a("span"),f(JC.$$.fragment),Sao=l(),goe=a("span"),Rao=o("AutoModel"),oRe=l(),Jo=a("div"),f(YC.$$.fragment),Bao=l(),Yi=a("p"),Pao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JR=a("a"),$ao=o("from_pretrained()"),Iao=o(" class method or the "),YR=a("a"),qao=o("from_config()"),Nao=o(` class
method.`),jao=l(),KC=a("p"),Dao=o("This class cannot be instantiated directly using "),hoe=a("code"),Gao=o("__init__()"),Oao=o(" (throws an error)."),Vao=l(),Xr=a("div"),f(ZC.$$.fragment),Xao=l(),poe=a("p"),zao=o("Instantiates one of the base model classes of the library from a configuration."),Qao=l(),Ki=a("p"),Wao=o(`Note:
Loading a model from its configuration file does `),_oe=a("strong"),Hao=o("not"),Uao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KR=a("a"),Jao=o("from_pretrained()"),Yao=o(" to load the model weights."),Kao=l(),uoe=a("p"),Zao=o("Examples:"),eno=l(),f(e5.$$.fragment),ono=l(),qe=a("div"),f(o5.$$.fragment),rno=l(),boe=a("p"),tno=o("Instantiate one of the base model classes of the library from a pretrained model."),ano=l(),Xa=a("p"),nno=o("The model class to instantiate is selected based on the "),Foe=a("code"),sno=o("model_type"),lno=o(` property of the config object (either
passed as an argument or loaded from `),voe=a("code"),ino=o("pretrained_model_name_or_path"),dno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Toe=a("code"),cno=o("pretrained_model_name_or_path"),fno=o(":"),mno=l(),T=a("ul"),Wh=a("li"),Moe=a("strong"),gno=o("albert"),hno=o(" \u2014 "),ZR=a("a"),pno=o("AlbertModel"),_no=o(" (ALBERT model)"),uno=l(),Hh=a("li"),Eoe=a("strong"),bno=o("bart"),Fno=o(" \u2014 "),eB=a("a"),vno=o("BartModel"),Tno=o(" (BART model)"),Mno=l(),Uh=a("li"),Coe=a("strong"),Eno=o("beit"),Cno=o(" \u2014 "),oB=a("a"),wno=o("BeitModel"),Ano=o(" (BEiT model)"),yno=l(),Jh=a("li"),woe=a("strong"),Lno=o("bert"),xno=o(" \u2014 "),rB=a("a"),kno=o("BertModel"),Sno=o(" (BERT model)"),Rno=l(),Yh=a("li"),Aoe=a("strong"),Bno=o("bert-generation"),Pno=o(" \u2014 "),tB=a("a"),$no=o("BertGenerationEncoder"),Ino=o(" (Bert Generation model)"),qno=l(),Kh=a("li"),yoe=a("strong"),Nno=o("big_bird"),jno=o(" \u2014 "),aB=a("a"),Dno=o("BigBirdModel"),Gno=o(" (BigBird model)"),Ono=l(),Zh=a("li"),Loe=a("strong"),Vno=o("bigbird_pegasus"),Xno=o(" \u2014 "),nB=a("a"),zno=o("BigBirdPegasusModel"),Qno=o(" (BigBirdPegasus model)"),Wno=l(),ep=a("li"),xoe=a("strong"),Hno=o("blenderbot"),Uno=o(" \u2014 "),sB=a("a"),Jno=o("BlenderbotModel"),Yno=o(" (Blenderbot model)"),Kno=l(),op=a("li"),koe=a("strong"),Zno=o("blenderbot-small"),eso=o(" \u2014 "),lB=a("a"),oso=o("BlenderbotSmallModel"),rso=o(" (BlenderbotSmall model)"),tso=l(),rp=a("li"),Soe=a("strong"),aso=o("camembert"),nso=o(" \u2014 "),iB=a("a"),sso=o("CamembertModel"),lso=o(" (CamemBERT model)"),iso=l(),tp=a("li"),Roe=a("strong"),dso=o("canine"),cso=o(" \u2014 "),dB=a("a"),fso=o("CanineModel"),mso=o(" (Canine model)"),gso=l(),ap=a("li"),Boe=a("strong"),hso=o("clip"),pso=o(" \u2014 "),cB=a("a"),_so=o("CLIPModel"),uso=o(" (CLIP model)"),bso=l(),np=a("li"),Poe=a("strong"),Fso=o("convbert"),vso=o(" \u2014 "),fB=a("a"),Tso=o("ConvBertModel"),Mso=o(" (ConvBERT model)"),Eso=l(),sp=a("li"),$oe=a("strong"),Cso=o("convnext"),wso=o(" \u2014 "),mB=a("a"),Aso=o("ConvNextModel"),yso=o(" (ConvNext model)"),Lso=l(),lp=a("li"),Ioe=a("strong"),xso=o("ctrl"),kso=o(" \u2014 "),gB=a("a"),Sso=o("CTRLModel"),Rso=o(" (CTRL model)"),Bso=l(),ip=a("li"),qoe=a("strong"),Pso=o("data2vec-audio"),$so=o(" \u2014 "),hB=a("a"),Iso=o("Data2VecAudioModel"),qso=o(" (Data2VecAudio model)"),Nso=l(),dp=a("li"),Noe=a("strong"),jso=o("data2vec-text"),Dso=o(" \u2014 "),pB=a("a"),Gso=o("Data2VecTextModel"),Oso=o(" (Data2VecText model)"),Vso=l(),cp=a("li"),joe=a("strong"),Xso=o("deberta"),zso=o(" \u2014 "),_B=a("a"),Qso=o("DebertaModel"),Wso=o(" (DeBERTa model)"),Hso=l(),fp=a("li"),Doe=a("strong"),Uso=o("deberta-v2"),Jso=o(" \u2014 "),uB=a("a"),Yso=o("DebertaV2Model"),Kso=o(" (DeBERTa-v2 model)"),Zso=l(),mp=a("li"),Goe=a("strong"),elo=o("decision_transformer"),olo=o(" \u2014 "),bB=a("a"),rlo=o("DecisionTransformerModel"),tlo=o(" (Decision Transformer model)"),alo=l(),gp=a("li"),Ooe=a("strong"),nlo=o("deit"),slo=o(" \u2014 "),FB=a("a"),llo=o("DeiTModel"),ilo=o(" (DeiT model)"),dlo=l(),hp=a("li"),Voe=a("strong"),clo=o("detr"),flo=o(" \u2014 "),vB=a("a"),mlo=o("DetrModel"),glo=o(" (DETR model)"),hlo=l(),pp=a("li"),Xoe=a("strong"),plo=o("distilbert"),_lo=o(" \u2014 "),TB=a("a"),ulo=o("DistilBertModel"),blo=o(" (DistilBERT model)"),Flo=l(),_p=a("li"),zoe=a("strong"),vlo=o("dpr"),Tlo=o(" \u2014 "),MB=a("a"),Mlo=o("DPRQuestionEncoder"),Elo=o(" (DPR model)"),Clo=l(),up=a("li"),Qoe=a("strong"),wlo=o("dpt"),Alo=o(" \u2014 "),EB=a("a"),ylo=o("DPTModel"),Llo=o(" (DPT model)"),xlo=l(),bp=a("li"),Woe=a("strong"),klo=o("electra"),Slo=o(" \u2014 "),CB=a("a"),Rlo=o("ElectraModel"),Blo=o(" (ELECTRA model)"),Plo=l(),Fp=a("li"),Hoe=a("strong"),$lo=o("flaubert"),Ilo=o(" \u2014 "),wB=a("a"),qlo=o("FlaubertModel"),Nlo=o(" (FlauBERT model)"),jlo=l(),vp=a("li"),Uoe=a("strong"),Dlo=o("fnet"),Glo=o(" \u2014 "),AB=a("a"),Olo=o("FNetModel"),Vlo=o(" (FNet model)"),Xlo=l(),Tp=a("li"),Joe=a("strong"),zlo=o("fsmt"),Qlo=o(" \u2014 "),yB=a("a"),Wlo=o("FSMTModel"),Hlo=o(" (FairSeq Machine-Translation model)"),Ulo=l(),js=a("li"),Yoe=a("strong"),Jlo=o("funnel"),Ylo=o(" \u2014 "),LB=a("a"),Klo=o("FunnelModel"),Zlo=o(" or "),xB=a("a"),eio=o("FunnelBaseModel"),oio=o(" (Funnel Transformer model)"),rio=l(),Mp=a("li"),Koe=a("strong"),tio=o("glpn"),aio=o(" \u2014 "),kB=a("a"),nio=o("GLPNModel"),sio=o(" (GLPN model)"),lio=l(),Ep=a("li"),Zoe=a("strong"),iio=o("gpt2"),dio=o(" \u2014 "),SB=a("a"),cio=o("GPT2Model"),fio=o(" (OpenAI GPT-2 model)"),mio=l(),Cp=a("li"),ere=a("strong"),gio=o("gpt_neo"),hio=o(" \u2014 "),RB=a("a"),pio=o("GPTNeoModel"),_io=o(" (GPT Neo model)"),uio=l(),wp=a("li"),ore=a("strong"),bio=o("gptj"),Fio=o(" \u2014 "),BB=a("a"),vio=o("GPTJModel"),Tio=o(" (GPT-J model)"),Mio=l(),Ap=a("li"),rre=a("strong"),Eio=o("hubert"),Cio=o(" \u2014 "),PB=a("a"),wio=o("HubertModel"),Aio=o(" (Hubert model)"),yio=l(),yp=a("li"),tre=a("strong"),Lio=o("ibert"),xio=o(" \u2014 "),$B=a("a"),kio=o("IBertModel"),Sio=o(" (I-BERT model)"),Rio=l(),Lp=a("li"),are=a("strong"),Bio=o("imagegpt"),Pio=o(" \u2014 "),IB=a("a"),$io=o("ImageGPTModel"),Iio=o(" (ImageGPT model)"),qio=l(),xp=a("li"),nre=a("strong"),Nio=o("layoutlm"),jio=o(" \u2014 "),qB=a("a"),Dio=o("LayoutLMModel"),Gio=o(" (LayoutLM model)"),Oio=l(),kp=a("li"),sre=a("strong"),Vio=o("layoutlmv2"),Xio=o(" \u2014 "),NB=a("a"),zio=o("LayoutLMv2Model"),Qio=o(" (LayoutLMv2 model)"),Wio=l(),Sp=a("li"),lre=a("strong"),Hio=o("led"),Uio=o(" \u2014 "),jB=a("a"),Jio=o("LEDModel"),Yio=o(" (LED model)"),Kio=l(),Rp=a("li"),ire=a("strong"),Zio=o("longformer"),edo=o(" \u2014 "),DB=a("a"),odo=o("LongformerModel"),rdo=o(" (Longformer model)"),tdo=l(),Bp=a("li"),dre=a("strong"),ado=o("luke"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("LukeModel"),ldo=o(" (LUKE model)"),ido=l(),Pp=a("li"),cre=a("strong"),ddo=o("lxmert"),cdo=o(" \u2014 "),OB=a("a"),fdo=o("LxmertModel"),mdo=o(" (LXMERT model)"),gdo=l(),$p=a("li"),fre=a("strong"),hdo=o("m2m_100"),pdo=o(" \u2014 "),VB=a("a"),_do=o("M2M100Model"),udo=o(" (M2M100 model)"),bdo=l(),Ip=a("li"),mre=a("strong"),Fdo=o("marian"),vdo=o(" \u2014 "),XB=a("a"),Tdo=o("MarianModel"),Mdo=o(" (Marian model)"),Edo=l(),qp=a("li"),gre=a("strong"),Cdo=o("maskformer"),wdo=o(" \u2014 "),zB=a("a"),Ado=o("MaskFormerModel"),ydo=o(" (MaskFormer model)"),Ldo=l(),Np=a("li"),hre=a("strong"),xdo=o("mbart"),kdo=o(" \u2014 "),QB=a("a"),Sdo=o("MBartModel"),Rdo=o(" (mBART model)"),Bdo=l(),jp=a("li"),pre=a("strong"),Pdo=o("megatron-bert"),$do=o(" \u2014 "),WB=a("a"),Ido=o("MegatronBertModel"),qdo=o(" (MegatronBert model)"),Ndo=l(),Dp=a("li"),_re=a("strong"),jdo=o("mobilebert"),Ddo=o(" \u2014 "),HB=a("a"),Gdo=o("MobileBertModel"),Odo=o(" (MobileBERT model)"),Vdo=l(),Gp=a("li"),ure=a("strong"),Xdo=o("mpnet"),zdo=o(" \u2014 "),UB=a("a"),Qdo=o("MPNetModel"),Wdo=o(" (MPNet model)"),Hdo=l(),Op=a("li"),bre=a("strong"),Udo=o("mt5"),Jdo=o(" \u2014 "),JB=a("a"),Ydo=o("MT5Model"),Kdo=o(" (mT5 model)"),Zdo=l(),Vp=a("li"),Fre=a("strong"),eco=o("nystromformer"),oco=o(" \u2014 "),YB=a("a"),rco=o("NystromformerModel"),tco=o(" (Nystromformer model)"),aco=l(),Xp=a("li"),vre=a("strong"),nco=o("openai-gpt"),sco=o(" \u2014 "),KB=a("a"),lco=o("OpenAIGPTModel"),ico=o(" (OpenAI GPT model)"),dco=l(),zp=a("li"),Tre=a("strong"),cco=o("pegasus"),fco=o(" \u2014 "),ZB=a("a"),mco=o("PegasusModel"),gco=o(" (Pegasus model)"),hco=l(),Qp=a("li"),Mre=a("strong"),pco=o("perceiver"),_co=o(" \u2014 "),eP=a("a"),uco=o("PerceiverModel"),bco=o(" (Perceiver model)"),Fco=l(),Wp=a("li"),Ere=a("strong"),vco=o("plbart"),Tco=o(" \u2014 "),oP=a("a"),Mco=o("PLBartModel"),Eco=o(" (PLBart model)"),Cco=l(),Hp=a("li"),Cre=a("strong"),wco=o("poolformer"),Aco=o(" \u2014 "),rP=a("a"),yco=o("PoolFormerModel"),Lco=o(" (PoolFormer model)"),xco=l(),Up=a("li"),wre=a("strong"),kco=o("prophetnet"),Sco=o(" \u2014 "),tP=a("a"),Rco=o("ProphetNetModel"),Bco=o(" (ProphetNet model)"),Pco=l(),Jp=a("li"),Are=a("strong"),$co=o("qdqbert"),Ico=o(" \u2014 "),aP=a("a"),qco=o("QDQBertModel"),Nco=o(" (QDQBert model)"),jco=l(),Yp=a("li"),yre=a("strong"),Dco=o("reformer"),Gco=o(" \u2014 "),nP=a("a"),Oco=o("ReformerModel"),Vco=o(" (Reformer model)"),Xco=l(),Kp=a("li"),Lre=a("strong"),zco=o("rembert"),Qco=o(" \u2014 "),sP=a("a"),Wco=o("RemBertModel"),Hco=o(" (RemBERT model)"),Uco=l(),Zp=a("li"),xre=a("strong"),Jco=o("resnet"),Yco=o(" \u2014 "),lP=a("a"),Kco=o("ResNetModel"),Zco=o(" (ResNet model)"),efo=l(),e_=a("li"),kre=a("strong"),ofo=o("retribert"),rfo=o(" \u2014 "),iP=a("a"),tfo=o("RetriBertModel"),afo=o(" (RetriBERT model)"),nfo=l(),o_=a("li"),Sre=a("strong"),sfo=o("roberta"),lfo=o(" \u2014 "),dP=a("a"),ifo=o("RobertaModel"),dfo=o(" (RoBERTa model)"),cfo=l(),r_=a("li"),Rre=a("strong"),ffo=o("roformer"),mfo=o(" \u2014 "),cP=a("a"),gfo=o("RoFormerModel"),hfo=o(" (RoFormer model)"),pfo=l(),t_=a("li"),Bre=a("strong"),_fo=o("segformer"),ufo=o(" \u2014 "),fP=a("a"),bfo=o("SegformerModel"),Ffo=o(" (SegFormer model)"),vfo=l(),a_=a("li"),Pre=a("strong"),Tfo=o("sew"),Mfo=o(" \u2014 "),mP=a("a"),Efo=o("SEWModel"),Cfo=o(" (SEW model)"),wfo=l(),n_=a("li"),$re=a("strong"),Afo=o("sew-d"),yfo=o(" \u2014 "),gP=a("a"),Lfo=o("SEWDModel"),xfo=o(" (SEW-D model)"),kfo=l(),s_=a("li"),Ire=a("strong"),Sfo=o("speech_to_text"),Rfo=o(" \u2014 "),hP=a("a"),Bfo=o("Speech2TextModel"),Pfo=o(" (Speech2Text model)"),$fo=l(),l_=a("li"),qre=a("strong"),Ifo=o("splinter"),qfo=o(" \u2014 "),pP=a("a"),Nfo=o("SplinterModel"),jfo=o(" (Splinter model)"),Dfo=l(),i_=a("li"),Nre=a("strong"),Gfo=o("squeezebert"),Ofo=o(" \u2014 "),_P=a("a"),Vfo=o("SqueezeBertModel"),Xfo=o(" (SqueezeBERT model)"),zfo=l(),d_=a("li"),jre=a("strong"),Qfo=o("swin"),Wfo=o(" \u2014 "),uP=a("a"),Hfo=o("SwinModel"),Ufo=o(" (Swin model)"),Jfo=l(),c_=a("li"),Dre=a("strong"),Yfo=o("t5"),Kfo=o(" \u2014 "),bP=a("a"),Zfo=o("T5Model"),emo=o(" (T5 model)"),omo=l(),f_=a("li"),Gre=a("strong"),rmo=o("tapas"),tmo=o(" \u2014 "),FP=a("a"),amo=o("TapasModel"),nmo=o(" (TAPAS model)"),smo=l(),m_=a("li"),Ore=a("strong"),lmo=o("transfo-xl"),imo=o(" \u2014 "),vP=a("a"),dmo=o("TransfoXLModel"),cmo=o(" (Transformer-XL model)"),fmo=l(),g_=a("li"),Vre=a("strong"),mmo=o("unispeech"),gmo=o(" \u2014 "),TP=a("a"),hmo=o("UniSpeechModel"),pmo=o(" (UniSpeech model)"),_mo=l(),h_=a("li"),Xre=a("strong"),umo=o("unispeech-sat"),bmo=o(" \u2014 "),MP=a("a"),Fmo=o("UniSpeechSatModel"),vmo=o(" (UniSpeechSat model)"),Tmo=l(),p_=a("li"),zre=a("strong"),Mmo=o("van"),Emo=o(" \u2014 "),EP=a("a"),Cmo=o("VanModel"),wmo=o(" (VAN model)"),Amo=l(),__=a("li"),Qre=a("strong"),ymo=o("vilt"),Lmo=o(" \u2014 "),CP=a("a"),xmo=o("ViltModel"),kmo=o(" (ViLT model)"),Smo=l(),u_=a("li"),Wre=a("strong"),Rmo=o("vision-text-dual-encoder"),Bmo=o(" \u2014 "),wP=a("a"),Pmo=o("VisionTextDualEncoderModel"),$mo=o(" (VisionTextDualEncoder model)"),Imo=l(),b_=a("li"),Hre=a("strong"),qmo=o("visual_bert"),Nmo=o(" \u2014 "),AP=a("a"),jmo=o("VisualBertModel"),Dmo=o(" (VisualBert model)"),Gmo=l(),F_=a("li"),Ure=a("strong"),Omo=o("vit"),Vmo=o(" \u2014 "),yP=a("a"),Xmo=o("ViTModel"),zmo=o(" (ViT model)"),Qmo=l(),v_=a("li"),Jre=a("strong"),Wmo=o("vit_mae"),Hmo=o(" \u2014 "),LP=a("a"),Umo=o("ViTMAEModel"),Jmo=o(" (ViTMAE model)"),Ymo=l(),T_=a("li"),Yre=a("strong"),Kmo=o("wav2vec2"),Zmo=o(" \u2014 "),xP=a("a"),ego=o("Wav2Vec2Model"),ogo=o(" (Wav2Vec2 model)"),rgo=l(),M_=a("li"),Kre=a("strong"),tgo=o("wavlm"),ago=o(" \u2014 "),kP=a("a"),ngo=o("WavLMModel"),sgo=o(" (WavLM model)"),lgo=l(),E_=a("li"),Zre=a("strong"),igo=o("xglm"),dgo=o(" \u2014 "),SP=a("a"),cgo=o("XGLMModel"),fgo=o(" (XGLM model)"),mgo=l(),C_=a("li"),ete=a("strong"),ggo=o("xlm"),hgo=o(" \u2014 "),RP=a("a"),pgo=o("XLMModel"),_go=o(" (XLM model)"),ugo=l(),w_=a("li"),ote=a("strong"),bgo=o("xlm-prophetnet"),Fgo=o(" \u2014 "),BP=a("a"),vgo=o("XLMProphetNetModel"),Tgo=o(" (XLMProphetNet model)"),Mgo=l(),A_=a("li"),rte=a("strong"),Ego=o("xlm-roberta"),Cgo=o(" \u2014 "),PP=a("a"),wgo=o("XLMRobertaModel"),Ago=o(" (XLM-RoBERTa model)"),ygo=l(),y_=a("li"),tte=a("strong"),Lgo=o("xlm-roberta-xl"),xgo=o(" \u2014 "),$P=a("a"),kgo=o("XLMRobertaXLModel"),Sgo=o(" (XLM-RoBERTa-XL model)"),Rgo=l(),L_=a("li"),ate=a("strong"),Bgo=o("xlnet"),Pgo=o(" \u2014 "),IP=a("a"),$go=o("XLNetModel"),Igo=o(" (XLNet model)"),qgo=l(),x_=a("li"),nte=a("strong"),Ngo=o("yoso"),jgo=o(" \u2014 "),qP=a("a"),Dgo=o("YosoModel"),Ggo=o(" (YOSO model)"),Ogo=l(),k_=a("p"),Vgo=o("The model is set in evaluation mode by default using "),ste=a("code"),Xgo=o("model.eval()"),zgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=a("code"),Qgo=o("model.train()"),Wgo=l(),ite=a("p"),Hgo=o("Examples:"),Ugo=l(),f(r5.$$.fragment),rRe=l(),Zi=a("h2"),S_=a("a"),dte=a("span"),f(t5.$$.fragment),Jgo=l(),cte=a("span"),Ygo=o("AutoModelForPreTraining"),tRe=l(),Yo=a("div"),f(a5.$$.fragment),Kgo=l(),ed=a("p"),Zgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NP=a("a"),eho=o("from_pretrained()"),oho=o(" class method or the "),jP=a("a"),rho=o("from_config()"),tho=o(` class
method.`),aho=l(),n5=a("p"),nho=o("This class cannot be instantiated directly using "),fte=a("code"),sho=o("__init__()"),lho=o(" (throws an error)."),iho=l(),zr=a("div"),f(s5.$$.fragment),dho=l(),mte=a("p"),cho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fho=l(),od=a("p"),mho=o(`Note:
Loading a model from its configuration file does `),gte=a("strong"),gho=o("not"),hho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=a("a"),pho=o("from_pretrained()"),_ho=o(" to load the model weights."),uho=l(),hte=a("p"),bho=o("Examples:"),Fho=l(),f(l5.$$.fragment),vho=l(),Ne=a("div"),f(i5.$$.fragment),Tho=l(),pte=a("p"),Mho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Eho=l(),za=a("p"),Cho=o("The model class to instantiate is selected based on the "),_te=a("code"),who=o("model_type"),Aho=o(` property of the config object (either
passed as an argument or loaded from `),ute=a("code"),yho=o("pretrained_model_name_or_path"),Lho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=a("code"),xho=o("pretrained_model_name_or_path"),kho=o(":"),Sho=l(),S=a("ul"),R_=a("li"),Fte=a("strong"),Rho=o("albert"),Bho=o(" \u2014 "),GP=a("a"),Pho=o("AlbertForPreTraining"),$ho=o(" (ALBERT model)"),Iho=l(),B_=a("li"),vte=a("strong"),qho=o("bart"),Nho=o(" \u2014 "),OP=a("a"),jho=o("BartForConditionalGeneration"),Dho=o(" (BART model)"),Gho=l(),P_=a("li"),Tte=a("strong"),Oho=o("bert"),Vho=o(" \u2014 "),VP=a("a"),Xho=o("BertForPreTraining"),zho=o(" (BERT model)"),Qho=l(),$_=a("li"),Mte=a("strong"),Who=o("big_bird"),Hho=o(" \u2014 "),XP=a("a"),Uho=o("BigBirdForPreTraining"),Jho=o(" (BigBird model)"),Yho=l(),I_=a("li"),Ete=a("strong"),Kho=o("camembert"),Zho=o(" \u2014 "),zP=a("a"),epo=o("CamembertForMaskedLM"),opo=o(" (CamemBERT model)"),rpo=l(),q_=a("li"),Cte=a("strong"),tpo=o("ctrl"),apo=o(" \u2014 "),QP=a("a"),npo=o("CTRLLMHeadModel"),spo=o(" (CTRL model)"),lpo=l(),N_=a("li"),wte=a("strong"),ipo=o("data2vec-text"),dpo=o(" \u2014 "),WP=a("a"),cpo=o("Data2VecTextForMaskedLM"),fpo=o(" (Data2VecText model)"),mpo=l(),j_=a("li"),Ate=a("strong"),gpo=o("deberta"),hpo=o(" \u2014 "),HP=a("a"),ppo=o("DebertaForMaskedLM"),_po=o(" (DeBERTa model)"),upo=l(),D_=a("li"),yte=a("strong"),bpo=o("deberta-v2"),Fpo=o(" \u2014 "),UP=a("a"),vpo=o("DebertaV2ForMaskedLM"),Tpo=o(" (DeBERTa-v2 model)"),Mpo=l(),G_=a("li"),Lte=a("strong"),Epo=o("distilbert"),Cpo=o(" \u2014 "),JP=a("a"),wpo=o("DistilBertForMaskedLM"),Apo=o(" (DistilBERT model)"),ypo=l(),O_=a("li"),xte=a("strong"),Lpo=o("electra"),xpo=o(" \u2014 "),YP=a("a"),kpo=o("ElectraForPreTraining"),Spo=o(" (ELECTRA model)"),Rpo=l(),V_=a("li"),kte=a("strong"),Bpo=o("flaubert"),Ppo=o(" \u2014 "),KP=a("a"),$po=o("FlaubertWithLMHeadModel"),Ipo=o(" (FlauBERT model)"),qpo=l(),X_=a("li"),Ste=a("strong"),Npo=o("fnet"),jpo=o(" \u2014 "),ZP=a("a"),Dpo=o("FNetForPreTraining"),Gpo=o(" (FNet model)"),Opo=l(),z_=a("li"),Rte=a("strong"),Vpo=o("fsmt"),Xpo=o(" \u2014 "),e$=a("a"),zpo=o("FSMTForConditionalGeneration"),Qpo=o(" (FairSeq Machine-Translation model)"),Wpo=l(),Q_=a("li"),Bte=a("strong"),Hpo=o("funnel"),Upo=o(" \u2014 "),o$=a("a"),Jpo=o("FunnelForPreTraining"),Ypo=o(" (Funnel Transformer model)"),Kpo=l(),W_=a("li"),Pte=a("strong"),Zpo=o("gpt2"),e_o=o(" \u2014 "),r$=a("a"),o_o=o("GPT2LMHeadModel"),r_o=o(" (OpenAI GPT-2 model)"),t_o=l(),H_=a("li"),$te=a("strong"),a_o=o("ibert"),n_o=o(" \u2014 "),t$=a("a"),s_o=o("IBertForMaskedLM"),l_o=o(" (I-BERT model)"),i_o=l(),U_=a("li"),Ite=a("strong"),d_o=o("layoutlm"),c_o=o(" \u2014 "),a$=a("a"),f_o=o("LayoutLMForMaskedLM"),m_o=o(" (LayoutLM model)"),g_o=l(),J_=a("li"),qte=a("strong"),h_o=o("longformer"),p_o=o(" \u2014 "),n$=a("a"),__o=o("LongformerForMaskedLM"),u_o=o(" (Longformer model)"),b_o=l(),Y_=a("li"),Nte=a("strong"),F_o=o("lxmert"),v_o=o(" \u2014 "),s$=a("a"),T_o=o("LxmertForPreTraining"),M_o=o(" (LXMERT model)"),E_o=l(),K_=a("li"),jte=a("strong"),C_o=o("megatron-bert"),w_o=o(" \u2014 "),l$=a("a"),A_o=o("MegatronBertForPreTraining"),y_o=o(" (MegatronBert model)"),L_o=l(),Z_=a("li"),Dte=a("strong"),x_o=o("mobilebert"),k_o=o(" \u2014 "),i$=a("a"),S_o=o("MobileBertForPreTraining"),R_o=o(" (MobileBERT model)"),B_o=l(),eu=a("li"),Gte=a("strong"),P_o=o("mpnet"),$_o=o(" \u2014 "),d$=a("a"),I_o=o("MPNetForMaskedLM"),q_o=o(" (MPNet model)"),N_o=l(),ou=a("li"),Ote=a("strong"),j_o=o("openai-gpt"),D_o=o(" \u2014 "),c$=a("a"),G_o=o("OpenAIGPTLMHeadModel"),O_o=o(" (OpenAI GPT model)"),V_o=l(),ru=a("li"),Vte=a("strong"),X_o=o("retribert"),z_o=o(" \u2014 "),f$=a("a"),Q_o=o("RetriBertModel"),W_o=o(" (RetriBERT model)"),H_o=l(),tu=a("li"),Xte=a("strong"),U_o=o("roberta"),J_o=o(" \u2014 "),m$=a("a"),Y_o=o("RobertaForMaskedLM"),K_o=o(" (RoBERTa model)"),Z_o=l(),au=a("li"),zte=a("strong"),euo=o("squeezebert"),ouo=o(" \u2014 "),g$=a("a"),ruo=o("SqueezeBertForMaskedLM"),tuo=o(" (SqueezeBERT model)"),auo=l(),nu=a("li"),Qte=a("strong"),nuo=o("t5"),suo=o(" \u2014 "),h$=a("a"),luo=o("T5ForConditionalGeneration"),iuo=o(" (T5 model)"),duo=l(),su=a("li"),Wte=a("strong"),cuo=o("tapas"),fuo=o(" \u2014 "),p$=a("a"),muo=o("TapasForMaskedLM"),guo=o(" (TAPAS model)"),huo=l(),lu=a("li"),Hte=a("strong"),puo=o("transfo-xl"),_uo=o(" \u2014 "),_$=a("a"),uuo=o("TransfoXLLMHeadModel"),buo=o(" (Transformer-XL model)"),Fuo=l(),iu=a("li"),Ute=a("strong"),vuo=o("unispeech"),Tuo=o(" \u2014 "),u$=a("a"),Muo=o("UniSpeechForPreTraining"),Euo=o(" (UniSpeech model)"),Cuo=l(),du=a("li"),Jte=a("strong"),wuo=o("unispeech-sat"),Auo=o(" \u2014 "),b$=a("a"),yuo=o("UniSpeechSatForPreTraining"),Luo=o(" (UniSpeechSat model)"),xuo=l(),cu=a("li"),Yte=a("strong"),kuo=o("visual_bert"),Suo=o(" \u2014 "),F$=a("a"),Ruo=o("VisualBertForPreTraining"),Buo=o(" (VisualBert model)"),Puo=l(),fu=a("li"),Kte=a("strong"),$uo=o("vit_mae"),Iuo=o(" \u2014 "),v$=a("a"),quo=o("ViTMAEForPreTraining"),Nuo=o(" (ViTMAE model)"),juo=l(),mu=a("li"),Zte=a("strong"),Duo=o("wav2vec2"),Guo=o(" \u2014 "),T$=a("a"),Ouo=o("Wav2Vec2ForPreTraining"),Vuo=o(" (Wav2Vec2 model)"),Xuo=l(),gu=a("li"),eae=a("strong"),zuo=o("xlm"),Quo=o(" \u2014 "),M$=a("a"),Wuo=o("XLMWithLMHeadModel"),Huo=o(" (XLM model)"),Uuo=l(),hu=a("li"),oae=a("strong"),Juo=o("xlm-roberta"),Yuo=o(" \u2014 "),E$=a("a"),Kuo=o("XLMRobertaForMaskedLM"),Zuo=o(" (XLM-RoBERTa model)"),e1o=l(),pu=a("li"),rae=a("strong"),o1o=o("xlm-roberta-xl"),r1o=o(" \u2014 "),C$=a("a"),t1o=o("XLMRobertaXLForMaskedLM"),a1o=o(" (XLM-RoBERTa-XL model)"),n1o=l(),_u=a("li"),tae=a("strong"),s1o=o("xlnet"),l1o=o(" \u2014 "),w$=a("a"),i1o=o("XLNetLMHeadModel"),d1o=o(" (XLNet model)"),c1o=l(),uu=a("p"),f1o=o("The model is set in evaluation mode by default using "),aae=a("code"),m1o=o("model.eval()"),g1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=a("code"),h1o=o("model.train()"),p1o=l(),sae=a("p"),_1o=o("Examples:"),u1o=l(),f(d5.$$.fragment),aRe=l(),rd=a("h2"),bu=a("a"),lae=a("span"),f(c5.$$.fragment),b1o=l(),iae=a("span"),F1o=o("AutoModelForCausalLM"),nRe=l(),Ko=a("div"),f(f5.$$.fragment),v1o=l(),td=a("p"),T1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),A$=a("a"),M1o=o("from_pretrained()"),E1o=o(" class method or the "),y$=a("a"),C1o=o("from_config()"),w1o=o(` class
method.`),A1o=l(),m5=a("p"),y1o=o("This class cannot be instantiated directly using "),dae=a("code"),L1o=o("__init__()"),x1o=o(" (throws an error)."),k1o=l(),Qr=a("div"),f(g5.$$.fragment),S1o=l(),cae=a("p"),R1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),B1o=l(),ad=a("p"),P1o=o(`Note:
Loading a model from its configuration file does `),fae=a("strong"),$1o=o("not"),I1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),L$=a("a"),q1o=o("from_pretrained()"),N1o=o(" to load the model weights."),j1o=l(),mae=a("p"),D1o=o("Examples:"),G1o=l(),f(h5.$$.fragment),O1o=l(),je=a("div"),f(p5.$$.fragment),V1o=l(),gae=a("p"),X1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),z1o=l(),Qa=a("p"),Q1o=o("The model class to instantiate is selected based on the "),hae=a("code"),W1o=o("model_type"),H1o=o(` property of the config object (either
passed as an argument or loaded from `),pae=a("code"),U1o=o("pretrained_model_name_or_path"),J1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ae=a("code"),Y1o=o("pretrained_model_name_or_path"),K1o=o(":"),Z1o=l(),$=a("ul"),Fu=a("li"),uae=a("strong"),e4o=o("bart"),o4o=o(" \u2014 "),x$=a("a"),r4o=o("BartForCausalLM"),t4o=o(" (BART model)"),a4o=l(),vu=a("li"),bae=a("strong"),n4o=o("bert"),s4o=o(" \u2014 "),k$=a("a"),l4o=o("BertLMHeadModel"),i4o=o(" (BERT model)"),d4o=l(),Tu=a("li"),Fae=a("strong"),c4o=o("bert-generation"),f4o=o(" \u2014 "),S$=a("a"),m4o=o("BertGenerationDecoder"),g4o=o(" (Bert Generation model)"),h4o=l(),Mu=a("li"),vae=a("strong"),p4o=o("big_bird"),_4o=o(" \u2014 "),R$=a("a"),u4o=o("BigBirdForCausalLM"),b4o=o(" (BigBird model)"),F4o=l(),Eu=a("li"),Tae=a("strong"),v4o=o("bigbird_pegasus"),T4o=o(" \u2014 "),B$=a("a"),M4o=o("BigBirdPegasusForCausalLM"),E4o=o(" (BigBirdPegasus model)"),C4o=l(),Cu=a("li"),Mae=a("strong"),w4o=o("blenderbot"),A4o=o(" \u2014 "),P$=a("a"),y4o=o("BlenderbotForCausalLM"),L4o=o(" (Blenderbot model)"),x4o=l(),wu=a("li"),Eae=a("strong"),k4o=o("blenderbot-small"),S4o=o(" \u2014 "),$$=a("a"),R4o=o("BlenderbotSmallForCausalLM"),B4o=o(" (BlenderbotSmall model)"),P4o=l(),Au=a("li"),Cae=a("strong"),$4o=o("camembert"),I4o=o(" \u2014 "),I$=a("a"),q4o=o("CamembertForCausalLM"),N4o=o(" (CamemBERT model)"),j4o=l(),yu=a("li"),wae=a("strong"),D4o=o("ctrl"),G4o=o(" \u2014 "),q$=a("a"),O4o=o("CTRLLMHeadModel"),V4o=o(" (CTRL model)"),X4o=l(),Lu=a("li"),Aae=a("strong"),z4o=o("data2vec-text"),Q4o=o(" \u2014 "),N$=a("a"),W4o=o("Data2VecTextForCausalLM"),H4o=o(" (Data2VecText model)"),U4o=l(),xu=a("li"),yae=a("strong"),J4o=o("electra"),Y4o=o(" \u2014 "),j$=a("a"),K4o=o("ElectraForCausalLM"),Z4o=o(" (ELECTRA model)"),ebo=l(),ku=a("li"),Lae=a("strong"),obo=o("gpt2"),rbo=o(" \u2014 "),D$=a("a"),tbo=o("GPT2LMHeadModel"),abo=o(" (OpenAI GPT-2 model)"),nbo=l(),Su=a("li"),xae=a("strong"),sbo=o("gpt_neo"),lbo=o(" \u2014 "),G$=a("a"),ibo=o("GPTNeoForCausalLM"),dbo=o(" (GPT Neo model)"),cbo=l(),Ru=a("li"),kae=a("strong"),fbo=o("gptj"),mbo=o(" \u2014 "),O$=a("a"),gbo=o("GPTJForCausalLM"),hbo=o(" (GPT-J model)"),pbo=l(),Bu=a("li"),Sae=a("strong"),_bo=o("marian"),ubo=o(" \u2014 "),V$=a("a"),bbo=o("MarianForCausalLM"),Fbo=o(" (Marian model)"),vbo=l(),Pu=a("li"),Rae=a("strong"),Tbo=o("mbart"),Mbo=o(" \u2014 "),X$=a("a"),Ebo=o("MBartForCausalLM"),Cbo=o(" (mBART model)"),wbo=l(),$u=a("li"),Bae=a("strong"),Abo=o("megatron-bert"),ybo=o(" \u2014 "),z$=a("a"),Lbo=o("MegatronBertForCausalLM"),xbo=o(" (MegatronBert model)"),kbo=l(),Iu=a("li"),Pae=a("strong"),Sbo=o("openai-gpt"),Rbo=o(" \u2014 "),Q$=a("a"),Bbo=o("OpenAIGPTLMHeadModel"),Pbo=o(" (OpenAI GPT model)"),$bo=l(),qu=a("li"),$ae=a("strong"),Ibo=o("pegasus"),qbo=o(" \u2014 "),W$=a("a"),Nbo=o("PegasusForCausalLM"),jbo=o(" (Pegasus model)"),Dbo=l(),Nu=a("li"),Iae=a("strong"),Gbo=o("plbart"),Obo=o(" \u2014 "),H$=a("a"),Vbo=o("PLBartForCausalLM"),Xbo=o(" (PLBart model)"),zbo=l(),ju=a("li"),qae=a("strong"),Qbo=o("prophetnet"),Wbo=o(" \u2014 "),U$=a("a"),Hbo=o("ProphetNetForCausalLM"),Ubo=o(" (ProphetNet model)"),Jbo=l(),Du=a("li"),Nae=a("strong"),Ybo=o("qdqbert"),Kbo=o(" \u2014 "),J$=a("a"),Zbo=o("QDQBertLMHeadModel"),e3o=o(" (QDQBert model)"),o3o=l(),Gu=a("li"),jae=a("strong"),r3o=o("reformer"),t3o=o(" \u2014 "),Y$=a("a"),a3o=o("ReformerModelWithLMHead"),n3o=o(" (Reformer model)"),s3o=l(),Ou=a("li"),Dae=a("strong"),l3o=o("rembert"),i3o=o(" \u2014 "),K$=a("a"),d3o=o("RemBertForCausalLM"),c3o=o(" (RemBERT model)"),f3o=l(),Vu=a("li"),Gae=a("strong"),m3o=o("roberta"),g3o=o(" \u2014 "),Z$=a("a"),h3o=o("RobertaForCausalLM"),p3o=o(" (RoBERTa model)"),_3o=l(),Xu=a("li"),Oae=a("strong"),u3o=o("roformer"),b3o=o(" \u2014 "),eI=a("a"),F3o=o("RoFormerForCausalLM"),v3o=o(" (RoFormer model)"),T3o=l(),zu=a("li"),Vae=a("strong"),M3o=o("speech_to_text_2"),E3o=o(" \u2014 "),oI=a("a"),C3o=o("Speech2Text2ForCausalLM"),w3o=o(" (Speech2Text2 model)"),A3o=l(),Qu=a("li"),Xae=a("strong"),y3o=o("transfo-xl"),L3o=o(" \u2014 "),rI=a("a"),x3o=o("TransfoXLLMHeadModel"),k3o=o(" (Transformer-XL model)"),S3o=l(),Wu=a("li"),zae=a("strong"),R3o=o("trocr"),B3o=o(" \u2014 "),tI=a("a"),P3o=o("TrOCRForCausalLM"),$3o=o(" (TrOCR model)"),I3o=l(),Hu=a("li"),Qae=a("strong"),q3o=o("xglm"),N3o=o(" \u2014 "),aI=a("a"),j3o=o("XGLMForCausalLM"),D3o=o(" (XGLM model)"),G3o=l(),Uu=a("li"),Wae=a("strong"),O3o=o("xlm"),V3o=o(" \u2014 "),nI=a("a"),X3o=o("XLMWithLMHeadModel"),z3o=o(" (XLM model)"),Q3o=l(),Ju=a("li"),Hae=a("strong"),W3o=o("xlm-prophetnet"),H3o=o(" \u2014 "),sI=a("a"),U3o=o("XLMProphetNetForCausalLM"),J3o=o(" (XLMProphetNet model)"),Y3o=l(),Yu=a("li"),Uae=a("strong"),K3o=o("xlm-roberta"),Z3o=o(" \u2014 "),lI=a("a"),e2o=o("XLMRobertaForCausalLM"),o2o=o(" (XLM-RoBERTa model)"),r2o=l(),Ku=a("li"),Jae=a("strong"),t2o=o("xlm-roberta-xl"),a2o=o(" \u2014 "),iI=a("a"),n2o=o("XLMRobertaXLForCausalLM"),s2o=o(" (XLM-RoBERTa-XL model)"),l2o=l(),Zu=a("li"),Yae=a("strong"),i2o=o("xlnet"),d2o=o(" \u2014 "),dI=a("a"),c2o=o("XLNetLMHeadModel"),f2o=o(" (XLNet model)"),m2o=l(),e1=a("p"),g2o=o("The model is set in evaluation mode by default using "),Kae=a("code"),h2o=o("model.eval()"),p2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=a("code"),_2o=o("model.train()"),u2o=l(),ene=a("p"),b2o=o("Examples:"),F2o=l(),f(_5.$$.fragment),sRe=l(),nd=a("h2"),o1=a("a"),one=a("span"),f(u5.$$.fragment),v2o=l(),rne=a("span"),T2o=o("AutoModelForMaskedLM"),lRe=l(),Zo=a("div"),f(b5.$$.fragment),M2o=l(),sd=a("p"),E2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cI=a("a"),C2o=o("from_pretrained()"),w2o=o(" class method or the "),fI=a("a"),A2o=o("from_config()"),y2o=o(` class
method.`),L2o=l(),F5=a("p"),x2o=o("This class cannot be instantiated directly using "),tne=a("code"),k2o=o("__init__()"),S2o=o(" (throws an error)."),R2o=l(),Wr=a("div"),f(v5.$$.fragment),B2o=l(),ane=a("p"),P2o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$2o=l(),ld=a("p"),I2o=o(`Note:
Loading a model from its configuration file does `),nne=a("strong"),q2o=o("not"),N2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mI=a("a"),j2o=o("from_pretrained()"),D2o=o(" to load the model weights."),G2o=l(),sne=a("p"),O2o=o("Examples:"),V2o=l(),f(T5.$$.fragment),X2o=l(),De=a("div"),f(M5.$$.fragment),z2o=l(),lne=a("p"),Q2o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W2o=l(),Wa=a("p"),H2o=o("The model class to instantiate is selected based on the "),ine=a("code"),U2o=o("model_type"),J2o=o(` property of the config object (either
passed as an argument or loaded from `),dne=a("code"),Y2o=o("pretrained_model_name_or_path"),K2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=a("code"),Z2o=o("pretrained_model_name_or_path"),eFo=o(":"),oFo=l(),I=a("ul"),r1=a("li"),fne=a("strong"),rFo=o("albert"),tFo=o(" \u2014 "),gI=a("a"),aFo=o("AlbertForMaskedLM"),nFo=o(" (ALBERT model)"),sFo=l(),t1=a("li"),mne=a("strong"),lFo=o("bart"),iFo=o(" \u2014 "),hI=a("a"),dFo=o("BartForConditionalGeneration"),cFo=o(" (BART model)"),fFo=l(),a1=a("li"),gne=a("strong"),mFo=o("bert"),gFo=o(" \u2014 "),pI=a("a"),hFo=o("BertForMaskedLM"),pFo=o(" (BERT model)"),_Fo=l(),n1=a("li"),hne=a("strong"),uFo=o("big_bird"),bFo=o(" \u2014 "),_I=a("a"),FFo=o("BigBirdForMaskedLM"),vFo=o(" (BigBird model)"),TFo=l(),s1=a("li"),pne=a("strong"),MFo=o("camembert"),EFo=o(" \u2014 "),uI=a("a"),CFo=o("CamembertForMaskedLM"),wFo=o(" (CamemBERT model)"),AFo=l(),l1=a("li"),_ne=a("strong"),yFo=o("convbert"),LFo=o(" \u2014 "),bI=a("a"),xFo=o("ConvBertForMaskedLM"),kFo=o(" (ConvBERT model)"),SFo=l(),i1=a("li"),une=a("strong"),RFo=o("data2vec-text"),BFo=o(" \u2014 "),FI=a("a"),PFo=o("Data2VecTextForMaskedLM"),$Fo=o(" (Data2VecText model)"),IFo=l(),d1=a("li"),bne=a("strong"),qFo=o("deberta"),NFo=o(" \u2014 "),vI=a("a"),jFo=o("DebertaForMaskedLM"),DFo=o(" (DeBERTa model)"),GFo=l(),c1=a("li"),Fne=a("strong"),OFo=o("deberta-v2"),VFo=o(" \u2014 "),TI=a("a"),XFo=o("DebertaV2ForMaskedLM"),zFo=o(" (DeBERTa-v2 model)"),QFo=l(),f1=a("li"),vne=a("strong"),WFo=o("distilbert"),HFo=o(" \u2014 "),MI=a("a"),UFo=o("DistilBertForMaskedLM"),JFo=o(" (DistilBERT model)"),YFo=l(),m1=a("li"),Tne=a("strong"),KFo=o("electra"),ZFo=o(" \u2014 "),EI=a("a"),evo=o("ElectraForMaskedLM"),ovo=o(" (ELECTRA model)"),rvo=l(),g1=a("li"),Mne=a("strong"),tvo=o("flaubert"),avo=o(" \u2014 "),CI=a("a"),nvo=o("FlaubertWithLMHeadModel"),svo=o(" (FlauBERT model)"),lvo=l(),h1=a("li"),Ene=a("strong"),ivo=o("fnet"),dvo=o(" \u2014 "),wI=a("a"),cvo=o("FNetForMaskedLM"),fvo=o(" (FNet model)"),mvo=l(),p1=a("li"),Cne=a("strong"),gvo=o("funnel"),hvo=o(" \u2014 "),AI=a("a"),pvo=o("FunnelForMaskedLM"),_vo=o(" (Funnel Transformer model)"),uvo=l(),_1=a("li"),wne=a("strong"),bvo=o("ibert"),Fvo=o(" \u2014 "),yI=a("a"),vvo=o("IBertForMaskedLM"),Tvo=o(" (I-BERT model)"),Mvo=l(),u1=a("li"),Ane=a("strong"),Evo=o("layoutlm"),Cvo=o(" \u2014 "),LI=a("a"),wvo=o("LayoutLMForMaskedLM"),Avo=o(" (LayoutLM model)"),yvo=l(),b1=a("li"),yne=a("strong"),Lvo=o("longformer"),xvo=o(" \u2014 "),xI=a("a"),kvo=o("LongformerForMaskedLM"),Svo=o(" (Longformer model)"),Rvo=l(),F1=a("li"),Lne=a("strong"),Bvo=o("mbart"),Pvo=o(" \u2014 "),kI=a("a"),$vo=o("MBartForConditionalGeneration"),Ivo=o(" (mBART model)"),qvo=l(),v1=a("li"),xne=a("strong"),Nvo=o("megatron-bert"),jvo=o(" \u2014 "),SI=a("a"),Dvo=o("MegatronBertForMaskedLM"),Gvo=o(" (MegatronBert model)"),Ovo=l(),T1=a("li"),kne=a("strong"),Vvo=o("mobilebert"),Xvo=o(" \u2014 "),RI=a("a"),zvo=o("MobileBertForMaskedLM"),Qvo=o(" (MobileBERT model)"),Wvo=l(),M1=a("li"),Sne=a("strong"),Hvo=o("mpnet"),Uvo=o(" \u2014 "),BI=a("a"),Jvo=o("MPNetForMaskedLM"),Yvo=o(" (MPNet model)"),Kvo=l(),E1=a("li"),Rne=a("strong"),Zvo=o("nystromformer"),e6o=o(" \u2014 "),PI=a("a"),o6o=o("NystromformerForMaskedLM"),r6o=o(" (Nystromformer model)"),t6o=l(),C1=a("li"),Bne=a("strong"),a6o=o("perceiver"),n6o=o(" \u2014 "),$I=a("a"),s6o=o("PerceiverForMaskedLM"),l6o=o(" (Perceiver model)"),i6o=l(),w1=a("li"),Pne=a("strong"),d6o=o("qdqbert"),c6o=o(" \u2014 "),II=a("a"),f6o=o("QDQBertForMaskedLM"),m6o=o(" (QDQBert model)"),g6o=l(),A1=a("li"),$ne=a("strong"),h6o=o("reformer"),p6o=o(" \u2014 "),qI=a("a"),_6o=o("ReformerForMaskedLM"),u6o=o(" (Reformer model)"),b6o=l(),y1=a("li"),Ine=a("strong"),F6o=o("rembert"),v6o=o(" \u2014 "),NI=a("a"),T6o=o("RemBertForMaskedLM"),M6o=o(" (RemBERT model)"),E6o=l(),L1=a("li"),qne=a("strong"),C6o=o("roberta"),w6o=o(" \u2014 "),jI=a("a"),A6o=o("RobertaForMaskedLM"),y6o=o(" (RoBERTa model)"),L6o=l(),x1=a("li"),Nne=a("strong"),x6o=o("roformer"),k6o=o(" \u2014 "),DI=a("a"),S6o=o("RoFormerForMaskedLM"),R6o=o(" (RoFormer model)"),B6o=l(),k1=a("li"),jne=a("strong"),P6o=o("squeezebert"),$6o=o(" \u2014 "),GI=a("a"),I6o=o("SqueezeBertForMaskedLM"),q6o=o(" (SqueezeBERT model)"),N6o=l(),S1=a("li"),Dne=a("strong"),j6o=o("tapas"),D6o=o(" \u2014 "),OI=a("a"),G6o=o("TapasForMaskedLM"),O6o=o(" (TAPAS model)"),V6o=l(),R1=a("li"),Gne=a("strong"),X6o=o("wav2vec2"),z6o=o(" \u2014 "),One=a("code"),Q6o=o("Wav2Vec2ForMaskedLM"),W6o=o("(Wav2Vec2 model)"),H6o=l(),B1=a("li"),Vne=a("strong"),U6o=o("xlm"),J6o=o(" \u2014 "),VI=a("a"),Y6o=o("XLMWithLMHeadModel"),K6o=o(" (XLM model)"),Z6o=l(),P1=a("li"),Xne=a("strong"),eTo=o("xlm-roberta"),oTo=o(" \u2014 "),XI=a("a"),rTo=o("XLMRobertaForMaskedLM"),tTo=o(" (XLM-RoBERTa model)"),aTo=l(),$1=a("li"),zne=a("strong"),nTo=o("xlm-roberta-xl"),sTo=o(" \u2014 "),zI=a("a"),lTo=o("XLMRobertaXLForMaskedLM"),iTo=o(" (XLM-RoBERTa-XL model)"),dTo=l(),I1=a("li"),Qne=a("strong"),cTo=o("yoso"),fTo=o(" \u2014 "),QI=a("a"),mTo=o("YosoForMaskedLM"),gTo=o(" (YOSO model)"),hTo=l(),q1=a("p"),pTo=o("The model is set in evaluation mode by default using "),Wne=a("code"),_To=o("model.eval()"),uTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=a("code"),bTo=o("model.train()"),FTo=l(),Une=a("p"),vTo=o("Examples:"),TTo=l(),f(E5.$$.fragment),iRe=l(),id=a("h2"),N1=a("a"),Jne=a("span"),f(C5.$$.fragment),MTo=l(),Yne=a("span"),ETo=o("AutoModelForSeq2SeqLM"),dRe=l(),er=a("div"),f(w5.$$.fragment),CTo=l(),dd=a("p"),wTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WI=a("a"),ATo=o("from_pretrained()"),yTo=o(" class method or the "),HI=a("a"),LTo=o("from_config()"),xTo=o(` class
method.`),kTo=l(),A5=a("p"),STo=o("This class cannot be instantiated directly using "),Kne=a("code"),RTo=o("__init__()"),BTo=o(" (throws an error)."),PTo=l(),Hr=a("div"),f(y5.$$.fragment),$To=l(),Zne=a("p"),ITo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qTo=l(),cd=a("p"),NTo=o(`Note:
Loading a model from its configuration file does `),ese=a("strong"),jTo=o("not"),DTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=a("a"),GTo=o("from_pretrained()"),OTo=o(" to load the model weights."),VTo=l(),ose=a("p"),XTo=o("Examples:"),zTo=l(),f(L5.$$.fragment),QTo=l(),Ge=a("div"),f(x5.$$.fragment),WTo=l(),rse=a("p"),HTo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),UTo=l(),Ha=a("p"),JTo=o("The model class to instantiate is selected based on the "),tse=a("code"),YTo=o("model_type"),KTo=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),ZTo=o("pretrained_model_name_or_path"),e7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),o7o=o("pretrained_model_name_or_path"),r7o=o(":"),t7o=l(),se=a("ul"),j1=a("li"),sse=a("strong"),a7o=o("bart"),n7o=o(" \u2014 "),JI=a("a"),s7o=o("BartForConditionalGeneration"),l7o=o(" (BART model)"),i7o=l(),D1=a("li"),lse=a("strong"),d7o=o("bigbird_pegasus"),c7o=o(" \u2014 "),YI=a("a"),f7o=o("BigBirdPegasusForConditionalGeneration"),m7o=o(" (BigBirdPegasus model)"),g7o=l(),G1=a("li"),ise=a("strong"),h7o=o("blenderbot"),p7o=o(" \u2014 "),KI=a("a"),_7o=o("BlenderbotForConditionalGeneration"),u7o=o(" (Blenderbot model)"),b7o=l(),O1=a("li"),dse=a("strong"),F7o=o("blenderbot-small"),v7o=o(" \u2014 "),ZI=a("a"),T7o=o("BlenderbotSmallForConditionalGeneration"),M7o=o(" (BlenderbotSmall model)"),E7o=l(),V1=a("li"),cse=a("strong"),C7o=o("encoder-decoder"),w7o=o(" \u2014 "),eq=a("a"),A7o=o("EncoderDecoderModel"),y7o=o(" (Encoder decoder model)"),L7o=l(),X1=a("li"),fse=a("strong"),x7o=o("fsmt"),k7o=o(" \u2014 "),oq=a("a"),S7o=o("FSMTForConditionalGeneration"),R7o=o(" (FairSeq Machine-Translation model)"),B7o=l(),z1=a("li"),mse=a("strong"),P7o=o("led"),$7o=o(" \u2014 "),rq=a("a"),I7o=o("LEDForConditionalGeneration"),q7o=o(" (LED model)"),N7o=l(),Q1=a("li"),gse=a("strong"),j7o=o("m2m_100"),D7o=o(" \u2014 "),tq=a("a"),G7o=o("M2M100ForConditionalGeneration"),O7o=o(" (M2M100 model)"),V7o=l(),W1=a("li"),hse=a("strong"),X7o=o("marian"),z7o=o(" \u2014 "),aq=a("a"),Q7o=o("MarianMTModel"),W7o=o(" (Marian model)"),H7o=l(),H1=a("li"),pse=a("strong"),U7o=o("mbart"),J7o=o(" \u2014 "),nq=a("a"),Y7o=o("MBartForConditionalGeneration"),K7o=o(" (mBART model)"),Z7o=l(),U1=a("li"),_se=a("strong"),eMo=o("mt5"),oMo=o(" \u2014 "),sq=a("a"),rMo=o("MT5ForConditionalGeneration"),tMo=o(" (mT5 model)"),aMo=l(),J1=a("li"),use=a("strong"),nMo=o("pegasus"),sMo=o(" \u2014 "),lq=a("a"),lMo=o("PegasusForConditionalGeneration"),iMo=o(" (Pegasus model)"),dMo=l(),Y1=a("li"),bse=a("strong"),cMo=o("plbart"),fMo=o(" \u2014 "),iq=a("a"),mMo=o("PLBartForConditionalGeneration"),gMo=o(" (PLBart model)"),hMo=l(),K1=a("li"),Fse=a("strong"),pMo=o("prophetnet"),_Mo=o(" \u2014 "),dq=a("a"),uMo=o("ProphetNetForConditionalGeneration"),bMo=o(" (ProphetNet model)"),FMo=l(),Z1=a("li"),vse=a("strong"),vMo=o("t5"),TMo=o(" \u2014 "),cq=a("a"),MMo=o("T5ForConditionalGeneration"),EMo=o(" (T5 model)"),CMo=l(),e4=a("li"),Tse=a("strong"),wMo=o("xlm-prophetnet"),AMo=o(" \u2014 "),fq=a("a"),yMo=o("XLMProphetNetForConditionalGeneration"),LMo=o(" (XLMProphetNet model)"),xMo=l(),o4=a("p"),kMo=o("The model is set in evaluation mode by default using "),Mse=a("code"),SMo=o("model.eval()"),RMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),BMo=o("model.train()"),PMo=l(),Cse=a("p"),$Mo=o("Examples:"),IMo=l(),f(k5.$$.fragment),cRe=l(),fd=a("h2"),r4=a("a"),wse=a("span"),f(S5.$$.fragment),qMo=l(),Ase=a("span"),NMo=o("AutoModelForSequenceClassification"),fRe=l(),or=a("div"),f(R5.$$.fragment),jMo=l(),md=a("p"),DMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mq=a("a"),GMo=o("from_pretrained()"),OMo=o(" class method or the "),gq=a("a"),VMo=o("from_config()"),XMo=o(` class
method.`),zMo=l(),B5=a("p"),QMo=o("This class cannot be instantiated directly using "),yse=a("code"),WMo=o("__init__()"),HMo=o(" (throws an error)."),UMo=l(),Ur=a("div"),f(P5.$$.fragment),JMo=l(),Lse=a("p"),YMo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),KMo=l(),gd=a("p"),ZMo=o(`Note:
Loading a model from its configuration file does `),xse=a("strong"),eEo=o("not"),oEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=a("a"),rEo=o("from_pretrained()"),tEo=o(" to load the model weights."),aEo=l(),kse=a("p"),nEo=o("Examples:"),sEo=l(),f($5.$$.fragment),lEo=l(),Oe=a("div"),f(I5.$$.fragment),iEo=l(),Sse=a("p"),dEo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cEo=l(),Ua=a("p"),fEo=o("The model class to instantiate is selected based on the "),Rse=a("code"),mEo=o("model_type"),gEo=o(` property of the config object (either
passed as an argument or loaded from `),Bse=a("code"),hEo=o("pretrained_model_name_or_path"),pEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=a("code"),_Eo=o("pretrained_model_name_or_path"),uEo=o(":"),bEo=l(),y=a("ul"),t4=a("li"),$se=a("strong"),FEo=o("albert"),vEo=o(" \u2014 "),pq=a("a"),TEo=o("AlbertForSequenceClassification"),MEo=o(" (ALBERT model)"),EEo=l(),a4=a("li"),Ise=a("strong"),CEo=o("bart"),wEo=o(" \u2014 "),_q=a("a"),AEo=o("BartForSequenceClassification"),yEo=o(" (BART model)"),LEo=l(),n4=a("li"),qse=a("strong"),xEo=o("bert"),kEo=o(" \u2014 "),uq=a("a"),SEo=o("BertForSequenceClassification"),REo=o(" (BERT model)"),BEo=l(),s4=a("li"),Nse=a("strong"),PEo=o("big_bird"),$Eo=o(" \u2014 "),bq=a("a"),IEo=o("BigBirdForSequenceClassification"),qEo=o(" (BigBird model)"),NEo=l(),l4=a("li"),jse=a("strong"),jEo=o("bigbird_pegasus"),DEo=o(" \u2014 "),Fq=a("a"),GEo=o("BigBirdPegasusForSequenceClassification"),OEo=o(" (BigBirdPegasus model)"),VEo=l(),i4=a("li"),Dse=a("strong"),XEo=o("camembert"),zEo=o(" \u2014 "),vq=a("a"),QEo=o("CamembertForSequenceClassification"),WEo=o(" (CamemBERT model)"),HEo=l(),d4=a("li"),Gse=a("strong"),UEo=o("canine"),JEo=o(" \u2014 "),Tq=a("a"),YEo=o("CanineForSequenceClassification"),KEo=o(" (Canine model)"),ZEo=l(),c4=a("li"),Ose=a("strong"),eCo=o("convbert"),oCo=o(" \u2014 "),Mq=a("a"),rCo=o("ConvBertForSequenceClassification"),tCo=o(" (ConvBERT model)"),aCo=l(),f4=a("li"),Vse=a("strong"),nCo=o("ctrl"),sCo=o(" \u2014 "),Eq=a("a"),lCo=o("CTRLForSequenceClassification"),iCo=o(" (CTRL model)"),dCo=l(),m4=a("li"),Xse=a("strong"),cCo=o("data2vec-text"),fCo=o(" \u2014 "),Cq=a("a"),mCo=o("Data2VecTextForSequenceClassification"),gCo=o(" (Data2VecText model)"),hCo=l(),g4=a("li"),zse=a("strong"),pCo=o("deberta"),_Co=o(" \u2014 "),wq=a("a"),uCo=o("DebertaForSequenceClassification"),bCo=o(" (DeBERTa model)"),FCo=l(),h4=a("li"),Qse=a("strong"),vCo=o("deberta-v2"),TCo=o(" \u2014 "),Aq=a("a"),MCo=o("DebertaV2ForSequenceClassification"),ECo=o(" (DeBERTa-v2 model)"),CCo=l(),p4=a("li"),Wse=a("strong"),wCo=o("distilbert"),ACo=o(" \u2014 "),yq=a("a"),yCo=o("DistilBertForSequenceClassification"),LCo=o(" (DistilBERT model)"),xCo=l(),_4=a("li"),Hse=a("strong"),kCo=o("electra"),SCo=o(" \u2014 "),Lq=a("a"),RCo=o("ElectraForSequenceClassification"),BCo=o(" (ELECTRA model)"),PCo=l(),u4=a("li"),Use=a("strong"),$Co=o("flaubert"),ICo=o(" \u2014 "),xq=a("a"),qCo=o("FlaubertForSequenceClassification"),NCo=o(" (FlauBERT model)"),jCo=l(),b4=a("li"),Jse=a("strong"),DCo=o("fnet"),GCo=o(" \u2014 "),kq=a("a"),OCo=o("FNetForSequenceClassification"),VCo=o(" (FNet model)"),XCo=l(),F4=a("li"),Yse=a("strong"),zCo=o("funnel"),QCo=o(" \u2014 "),Sq=a("a"),WCo=o("FunnelForSequenceClassification"),HCo=o(" (Funnel Transformer model)"),UCo=l(),v4=a("li"),Kse=a("strong"),JCo=o("gpt2"),YCo=o(" \u2014 "),Rq=a("a"),KCo=o("GPT2ForSequenceClassification"),ZCo=o(" (OpenAI GPT-2 model)"),e5o=l(),T4=a("li"),Zse=a("strong"),o5o=o("gpt_neo"),r5o=o(" \u2014 "),Bq=a("a"),t5o=o("GPTNeoForSequenceClassification"),a5o=o(" (GPT Neo model)"),n5o=l(),M4=a("li"),ele=a("strong"),s5o=o("gptj"),l5o=o(" \u2014 "),Pq=a("a"),i5o=o("GPTJForSequenceClassification"),d5o=o(" (GPT-J model)"),c5o=l(),E4=a("li"),ole=a("strong"),f5o=o("ibert"),m5o=o(" \u2014 "),$q=a("a"),g5o=o("IBertForSequenceClassification"),h5o=o(" (I-BERT model)"),p5o=l(),C4=a("li"),rle=a("strong"),_5o=o("layoutlm"),u5o=o(" \u2014 "),Iq=a("a"),b5o=o("LayoutLMForSequenceClassification"),F5o=o(" (LayoutLM model)"),v5o=l(),w4=a("li"),tle=a("strong"),T5o=o("layoutlmv2"),M5o=o(" \u2014 "),qq=a("a"),E5o=o("LayoutLMv2ForSequenceClassification"),C5o=o(" (LayoutLMv2 model)"),w5o=l(),A4=a("li"),ale=a("strong"),A5o=o("led"),y5o=o(" \u2014 "),Nq=a("a"),L5o=o("LEDForSequenceClassification"),x5o=o(" (LED model)"),k5o=l(),y4=a("li"),nle=a("strong"),S5o=o("longformer"),R5o=o(" \u2014 "),jq=a("a"),B5o=o("LongformerForSequenceClassification"),P5o=o(" (Longformer model)"),$5o=l(),L4=a("li"),sle=a("strong"),I5o=o("mbart"),q5o=o(" \u2014 "),Dq=a("a"),N5o=o("MBartForSequenceClassification"),j5o=o(" (mBART model)"),D5o=l(),x4=a("li"),lle=a("strong"),G5o=o("megatron-bert"),O5o=o(" \u2014 "),Gq=a("a"),V5o=o("MegatronBertForSequenceClassification"),X5o=o(" (MegatronBert model)"),z5o=l(),k4=a("li"),ile=a("strong"),Q5o=o("mobilebert"),W5o=o(" \u2014 "),Oq=a("a"),H5o=o("MobileBertForSequenceClassification"),U5o=o(" (MobileBERT model)"),J5o=l(),S4=a("li"),dle=a("strong"),Y5o=o("mpnet"),K5o=o(" \u2014 "),Vq=a("a"),Z5o=o("MPNetForSequenceClassification"),ewo=o(" (MPNet model)"),owo=l(),R4=a("li"),cle=a("strong"),rwo=o("nystromformer"),two=o(" \u2014 "),Xq=a("a"),awo=o("NystromformerForSequenceClassification"),nwo=o(" (Nystromformer model)"),swo=l(),B4=a("li"),fle=a("strong"),lwo=o("openai-gpt"),iwo=o(" \u2014 "),zq=a("a"),dwo=o("OpenAIGPTForSequenceClassification"),cwo=o(" (OpenAI GPT model)"),fwo=l(),P4=a("li"),mle=a("strong"),mwo=o("perceiver"),gwo=o(" \u2014 "),Qq=a("a"),hwo=o("PerceiverForSequenceClassification"),pwo=o(" (Perceiver model)"),_wo=l(),$4=a("li"),gle=a("strong"),uwo=o("plbart"),bwo=o(" \u2014 "),Wq=a("a"),Fwo=o("PLBartForSequenceClassification"),vwo=o(" (PLBart model)"),Two=l(),I4=a("li"),hle=a("strong"),Mwo=o("qdqbert"),Ewo=o(" \u2014 "),Hq=a("a"),Cwo=o("QDQBertForSequenceClassification"),wwo=o(" (QDQBert model)"),Awo=l(),q4=a("li"),ple=a("strong"),ywo=o("reformer"),Lwo=o(" \u2014 "),Uq=a("a"),xwo=o("ReformerForSequenceClassification"),kwo=o(" (Reformer model)"),Swo=l(),N4=a("li"),_le=a("strong"),Rwo=o("rembert"),Bwo=o(" \u2014 "),Jq=a("a"),Pwo=o("RemBertForSequenceClassification"),$wo=o(" (RemBERT model)"),Iwo=l(),j4=a("li"),ule=a("strong"),qwo=o("roberta"),Nwo=o(" \u2014 "),Yq=a("a"),jwo=o("RobertaForSequenceClassification"),Dwo=o(" (RoBERTa model)"),Gwo=l(),D4=a("li"),ble=a("strong"),Owo=o("roformer"),Vwo=o(" \u2014 "),Kq=a("a"),Xwo=o("RoFormerForSequenceClassification"),zwo=o(" (RoFormer model)"),Qwo=l(),G4=a("li"),Fle=a("strong"),Wwo=o("squeezebert"),Hwo=o(" \u2014 "),Zq=a("a"),Uwo=o("SqueezeBertForSequenceClassification"),Jwo=o(" (SqueezeBERT model)"),Ywo=l(),O4=a("li"),vle=a("strong"),Kwo=o("tapas"),Zwo=o(" \u2014 "),eN=a("a"),eAo=o("TapasForSequenceClassification"),oAo=o(" (TAPAS model)"),rAo=l(),V4=a("li"),Tle=a("strong"),tAo=o("transfo-xl"),aAo=o(" \u2014 "),oN=a("a"),nAo=o("TransfoXLForSequenceClassification"),sAo=o(" (Transformer-XL model)"),lAo=l(),X4=a("li"),Mle=a("strong"),iAo=o("xlm"),dAo=o(" \u2014 "),rN=a("a"),cAo=o("XLMForSequenceClassification"),fAo=o(" (XLM model)"),mAo=l(),z4=a("li"),Ele=a("strong"),gAo=o("xlm-roberta"),hAo=o(" \u2014 "),tN=a("a"),pAo=o("XLMRobertaForSequenceClassification"),_Ao=o(" (XLM-RoBERTa model)"),uAo=l(),Q4=a("li"),Cle=a("strong"),bAo=o("xlm-roberta-xl"),FAo=o(" \u2014 "),aN=a("a"),vAo=o("XLMRobertaXLForSequenceClassification"),TAo=o(" (XLM-RoBERTa-XL model)"),MAo=l(),W4=a("li"),wle=a("strong"),EAo=o("xlnet"),CAo=o(" \u2014 "),nN=a("a"),wAo=o("XLNetForSequenceClassification"),AAo=o(" (XLNet model)"),yAo=l(),H4=a("li"),Ale=a("strong"),LAo=o("yoso"),xAo=o(" \u2014 "),sN=a("a"),kAo=o("YosoForSequenceClassification"),SAo=o(" (YOSO model)"),RAo=l(),U4=a("p"),BAo=o("The model is set in evaluation mode by default using "),yle=a("code"),PAo=o("model.eval()"),$Ao=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=a("code"),IAo=o("model.train()"),qAo=l(),xle=a("p"),NAo=o("Examples:"),jAo=l(),f(q5.$$.fragment),mRe=l(),hd=a("h2"),J4=a("a"),kle=a("span"),f(N5.$$.fragment),DAo=l(),Sle=a("span"),GAo=o("AutoModelForMultipleChoice"),gRe=l(),rr=a("div"),f(j5.$$.fragment),OAo=l(),pd=a("p"),VAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lN=a("a"),XAo=o("from_pretrained()"),zAo=o(" class method or the "),iN=a("a"),QAo=o("from_config()"),WAo=o(` class
method.`),HAo=l(),D5=a("p"),UAo=o("This class cannot be instantiated directly using "),Rle=a("code"),JAo=o("__init__()"),YAo=o(" (throws an error)."),KAo=l(),Jr=a("div"),f(G5.$$.fragment),ZAo=l(),Ble=a("p"),e0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o0o=l(),_d=a("p"),r0o=o(`Note:
Loading a model from its configuration file does `),Ple=a("strong"),t0o=o("not"),a0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=a("a"),n0o=o("from_pretrained()"),s0o=o(" to load the model weights."),l0o=l(),$le=a("p"),i0o=o("Examples:"),d0o=l(),f(O5.$$.fragment),c0o=l(),Ve=a("div"),f(V5.$$.fragment),f0o=l(),Ile=a("p"),m0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),g0o=l(),Ja=a("p"),h0o=o("The model class to instantiate is selected based on the "),qle=a("code"),p0o=o("model_type"),_0o=o(` property of the config object (either
passed as an argument or loaded from `),Nle=a("code"),u0o=o("pretrained_model_name_or_path"),b0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=a("code"),F0o=o("pretrained_model_name_or_path"),v0o=o(":"),T0o=l(),G=a("ul"),Y4=a("li"),Dle=a("strong"),M0o=o("albert"),E0o=o(" \u2014 "),cN=a("a"),C0o=o("AlbertForMultipleChoice"),w0o=o(" (ALBERT model)"),A0o=l(),K4=a("li"),Gle=a("strong"),y0o=o("bert"),L0o=o(" \u2014 "),fN=a("a"),x0o=o("BertForMultipleChoice"),k0o=o(" (BERT model)"),S0o=l(),Z4=a("li"),Ole=a("strong"),R0o=o("big_bird"),B0o=o(" \u2014 "),mN=a("a"),P0o=o("BigBirdForMultipleChoice"),$0o=o(" (BigBird model)"),I0o=l(),eb=a("li"),Vle=a("strong"),q0o=o("camembert"),N0o=o(" \u2014 "),gN=a("a"),j0o=o("CamembertForMultipleChoice"),D0o=o(" (CamemBERT model)"),G0o=l(),ob=a("li"),Xle=a("strong"),O0o=o("canine"),V0o=o(" \u2014 "),hN=a("a"),X0o=o("CanineForMultipleChoice"),z0o=o(" (Canine model)"),Q0o=l(),rb=a("li"),zle=a("strong"),W0o=o("convbert"),H0o=o(" \u2014 "),pN=a("a"),U0o=o("ConvBertForMultipleChoice"),J0o=o(" (ConvBERT model)"),Y0o=l(),tb=a("li"),Qle=a("strong"),K0o=o("data2vec-text"),Z0o=o(" \u2014 "),_N=a("a"),eyo=o("Data2VecTextForMultipleChoice"),oyo=o(" (Data2VecText model)"),ryo=l(),ab=a("li"),Wle=a("strong"),tyo=o("distilbert"),ayo=o(" \u2014 "),uN=a("a"),nyo=o("DistilBertForMultipleChoice"),syo=o(" (DistilBERT model)"),lyo=l(),nb=a("li"),Hle=a("strong"),iyo=o("electra"),dyo=o(" \u2014 "),bN=a("a"),cyo=o("ElectraForMultipleChoice"),fyo=o(" (ELECTRA model)"),myo=l(),sb=a("li"),Ule=a("strong"),gyo=o("flaubert"),hyo=o(" \u2014 "),FN=a("a"),pyo=o("FlaubertForMultipleChoice"),_yo=o(" (FlauBERT model)"),uyo=l(),lb=a("li"),Jle=a("strong"),byo=o("fnet"),Fyo=o(" \u2014 "),vN=a("a"),vyo=o("FNetForMultipleChoice"),Tyo=o(" (FNet model)"),Myo=l(),ib=a("li"),Yle=a("strong"),Eyo=o("funnel"),Cyo=o(" \u2014 "),TN=a("a"),wyo=o("FunnelForMultipleChoice"),Ayo=o(" (Funnel Transformer model)"),yyo=l(),db=a("li"),Kle=a("strong"),Lyo=o("ibert"),xyo=o(" \u2014 "),MN=a("a"),kyo=o("IBertForMultipleChoice"),Syo=o(" (I-BERT model)"),Ryo=l(),cb=a("li"),Zle=a("strong"),Byo=o("longformer"),Pyo=o(" \u2014 "),EN=a("a"),$yo=o("LongformerForMultipleChoice"),Iyo=o(" (Longformer model)"),qyo=l(),fb=a("li"),eie=a("strong"),Nyo=o("megatron-bert"),jyo=o(" \u2014 "),CN=a("a"),Dyo=o("MegatronBertForMultipleChoice"),Gyo=o(" (MegatronBert model)"),Oyo=l(),mb=a("li"),oie=a("strong"),Vyo=o("mobilebert"),Xyo=o(" \u2014 "),wN=a("a"),zyo=o("MobileBertForMultipleChoice"),Qyo=o(" (MobileBERT model)"),Wyo=l(),gb=a("li"),rie=a("strong"),Hyo=o("mpnet"),Uyo=o(" \u2014 "),AN=a("a"),Jyo=o("MPNetForMultipleChoice"),Yyo=o(" (MPNet model)"),Kyo=l(),hb=a("li"),tie=a("strong"),Zyo=o("nystromformer"),eLo=o(" \u2014 "),yN=a("a"),oLo=o("NystromformerForMultipleChoice"),rLo=o(" (Nystromformer model)"),tLo=l(),pb=a("li"),aie=a("strong"),aLo=o("qdqbert"),nLo=o(" \u2014 "),LN=a("a"),sLo=o("QDQBertForMultipleChoice"),lLo=o(" (QDQBert model)"),iLo=l(),_b=a("li"),nie=a("strong"),dLo=o("rembert"),cLo=o(" \u2014 "),xN=a("a"),fLo=o("RemBertForMultipleChoice"),mLo=o(" (RemBERT model)"),gLo=l(),ub=a("li"),sie=a("strong"),hLo=o("roberta"),pLo=o(" \u2014 "),kN=a("a"),_Lo=o("RobertaForMultipleChoice"),uLo=o(" (RoBERTa model)"),bLo=l(),bb=a("li"),lie=a("strong"),FLo=o("roformer"),vLo=o(" \u2014 "),SN=a("a"),TLo=o("RoFormerForMultipleChoice"),MLo=o(" (RoFormer model)"),ELo=l(),Fb=a("li"),iie=a("strong"),CLo=o("squeezebert"),wLo=o(" \u2014 "),RN=a("a"),ALo=o("SqueezeBertForMultipleChoice"),yLo=o(" (SqueezeBERT model)"),LLo=l(),vb=a("li"),die=a("strong"),xLo=o("xlm"),kLo=o(" \u2014 "),BN=a("a"),SLo=o("XLMForMultipleChoice"),RLo=o(" (XLM model)"),BLo=l(),Tb=a("li"),cie=a("strong"),PLo=o("xlm-roberta"),$Lo=o(" \u2014 "),PN=a("a"),ILo=o("XLMRobertaForMultipleChoice"),qLo=o(" (XLM-RoBERTa model)"),NLo=l(),Mb=a("li"),fie=a("strong"),jLo=o("xlm-roberta-xl"),DLo=o(" \u2014 "),$N=a("a"),GLo=o("XLMRobertaXLForMultipleChoice"),OLo=o(" (XLM-RoBERTa-XL model)"),VLo=l(),Eb=a("li"),mie=a("strong"),XLo=o("xlnet"),zLo=o(" \u2014 "),IN=a("a"),QLo=o("XLNetForMultipleChoice"),WLo=o(" (XLNet model)"),HLo=l(),Cb=a("li"),gie=a("strong"),ULo=o("yoso"),JLo=o(" \u2014 "),qN=a("a"),YLo=o("YosoForMultipleChoice"),KLo=o(" (YOSO model)"),ZLo=l(),wb=a("p"),e8o=o("The model is set in evaluation mode by default using "),hie=a("code"),o8o=o("model.eval()"),r8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=a("code"),t8o=o("model.train()"),a8o=l(),_ie=a("p"),n8o=o("Examples:"),s8o=l(),f(X5.$$.fragment),hRe=l(),ud=a("h2"),Ab=a("a"),uie=a("span"),f(z5.$$.fragment),l8o=l(),bie=a("span"),i8o=o("AutoModelForNextSentencePrediction"),pRe=l(),tr=a("div"),f(Q5.$$.fragment),d8o=l(),bd=a("p"),c8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NN=a("a"),f8o=o("from_pretrained()"),m8o=o(" class method or the "),jN=a("a"),g8o=o("from_config()"),h8o=o(` class
method.`),p8o=l(),W5=a("p"),_8o=o("This class cannot be instantiated directly using "),Fie=a("code"),u8o=o("__init__()"),b8o=o(" (throws an error)."),F8o=l(),Yr=a("div"),f(H5.$$.fragment),v8o=l(),vie=a("p"),T8o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),M8o=l(),Fd=a("p"),E8o=o(`Note:
Loading a model from its configuration file does `),Tie=a("strong"),C8o=o("not"),w8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=a("a"),A8o=o("from_pretrained()"),y8o=o(" to load the model weights."),L8o=l(),Mie=a("p"),x8o=o("Examples:"),k8o=l(),f(U5.$$.fragment),S8o=l(),Xe=a("div"),f(J5.$$.fragment),R8o=l(),Eie=a("p"),B8o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),P8o=l(),Ya=a("p"),$8o=o("The model class to instantiate is selected based on the "),Cie=a("code"),I8o=o("model_type"),q8o=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),N8o=o("pretrained_model_name_or_path"),j8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),D8o=o("pretrained_model_name_or_path"),G8o=o(":"),O8o=l(),da=a("ul"),yb=a("li"),yie=a("strong"),V8o=o("bert"),X8o=o(" \u2014 "),GN=a("a"),z8o=o("BertForNextSentencePrediction"),Q8o=o(" (BERT model)"),W8o=l(),Lb=a("li"),Lie=a("strong"),H8o=o("fnet"),U8o=o(" \u2014 "),ON=a("a"),J8o=o("FNetForNextSentencePrediction"),Y8o=o(" (FNet model)"),K8o=l(),xb=a("li"),xie=a("strong"),Z8o=o("megatron-bert"),e9o=o(" \u2014 "),VN=a("a"),o9o=o("MegatronBertForNextSentencePrediction"),r9o=o(" (MegatronBert model)"),t9o=l(),kb=a("li"),kie=a("strong"),a9o=o("mobilebert"),n9o=o(" \u2014 "),XN=a("a"),s9o=o("MobileBertForNextSentencePrediction"),l9o=o(" (MobileBERT model)"),i9o=l(),Sb=a("li"),Sie=a("strong"),d9o=o("qdqbert"),c9o=o(" \u2014 "),zN=a("a"),f9o=o("QDQBertForNextSentencePrediction"),m9o=o(" (QDQBert model)"),g9o=l(),Rb=a("p"),h9o=o("The model is set in evaluation mode by default using "),Rie=a("code"),p9o=o("model.eval()"),_9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=a("code"),u9o=o("model.train()"),b9o=l(),Pie=a("p"),F9o=o("Examples:"),v9o=l(),f(Y5.$$.fragment),_Re=l(),vd=a("h2"),Bb=a("a"),$ie=a("span"),f(K5.$$.fragment),T9o=l(),Iie=a("span"),M9o=o("AutoModelForTokenClassification"),uRe=l(),ar=a("div"),f(Z5.$$.fragment),E9o=l(),Td=a("p"),C9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QN=a("a"),w9o=o("from_pretrained()"),A9o=o(" class method or the "),WN=a("a"),y9o=o("from_config()"),L9o=o(` class
method.`),x9o=l(),ew=a("p"),k9o=o("This class cannot be instantiated directly using "),qie=a("code"),S9o=o("__init__()"),R9o=o(" (throws an error)."),B9o=l(),Kr=a("div"),f(ow.$$.fragment),P9o=l(),Nie=a("p"),$9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I9o=l(),Md=a("p"),q9o=o(`Note:
Loading a model from its configuration file does `),jie=a("strong"),N9o=o("not"),j9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=a("a"),D9o=o("from_pretrained()"),G9o=o(" to load the model weights."),O9o=l(),Die=a("p"),V9o=o("Examples:"),X9o=l(),f(rw.$$.fragment),z9o=l(),ze=a("div"),f(tw.$$.fragment),Q9o=l(),Gie=a("p"),W9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),H9o=l(),Ka=a("p"),U9o=o("The model class to instantiate is selected based on the "),Oie=a("code"),J9o=o("model_type"),Y9o=o(` property of the config object (either
passed as an argument or loaded from `),Vie=a("code"),K9o=o("pretrained_model_name_or_path"),Z9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=a("code"),exo=o("pretrained_model_name_or_path"),oxo=o(":"),rxo=l(),j=a("ul"),Pb=a("li"),zie=a("strong"),txo=o("albert"),axo=o(" \u2014 "),UN=a("a"),nxo=o("AlbertForTokenClassification"),sxo=o(" (ALBERT model)"),lxo=l(),$b=a("li"),Qie=a("strong"),ixo=o("bert"),dxo=o(" \u2014 "),JN=a("a"),cxo=o("BertForTokenClassification"),fxo=o(" (BERT model)"),mxo=l(),Ib=a("li"),Wie=a("strong"),gxo=o("big_bird"),hxo=o(" \u2014 "),YN=a("a"),pxo=o("BigBirdForTokenClassification"),_xo=o(" (BigBird model)"),uxo=l(),qb=a("li"),Hie=a("strong"),bxo=o("camembert"),Fxo=o(" \u2014 "),KN=a("a"),vxo=o("CamembertForTokenClassification"),Txo=o(" (CamemBERT model)"),Mxo=l(),Nb=a("li"),Uie=a("strong"),Exo=o("canine"),Cxo=o(" \u2014 "),ZN=a("a"),wxo=o("CanineForTokenClassification"),Axo=o(" (Canine model)"),yxo=l(),jb=a("li"),Jie=a("strong"),Lxo=o("convbert"),xxo=o(" \u2014 "),ej=a("a"),kxo=o("ConvBertForTokenClassification"),Sxo=o(" (ConvBERT model)"),Rxo=l(),Db=a("li"),Yie=a("strong"),Bxo=o("data2vec-text"),Pxo=o(" \u2014 "),oj=a("a"),$xo=o("Data2VecTextForTokenClassification"),Ixo=o(" (Data2VecText model)"),qxo=l(),Gb=a("li"),Kie=a("strong"),Nxo=o("deberta"),jxo=o(" \u2014 "),rj=a("a"),Dxo=o("DebertaForTokenClassification"),Gxo=o(" (DeBERTa model)"),Oxo=l(),Ob=a("li"),Zie=a("strong"),Vxo=o("deberta-v2"),Xxo=o(" \u2014 "),tj=a("a"),zxo=o("DebertaV2ForTokenClassification"),Qxo=o(" (DeBERTa-v2 model)"),Wxo=l(),Vb=a("li"),ede=a("strong"),Hxo=o("distilbert"),Uxo=o(" \u2014 "),aj=a("a"),Jxo=o("DistilBertForTokenClassification"),Yxo=o(" (DistilBERT model)"),Kxo=l(),Xb=a("li"),ode=a("strong"),Zxo=o("electra"),eko=o(" \u2014 "),nj=a("a"),oko=o("ElectraForTokenClassification"),rko=o(" (ELECTRA model)"),tko=l(),zb=a("li"),rde=a("strong"),ako=o("flaubert"),nko=o(" \u2014 "),sj=a("a"),sko=o("FlaubertForTokenClassification"),lko=o(" (FlauBERT model)"),iko=l(),Qb=a("li"),tde=a("strong"),dko=o("fnet"),cko=o(" \u2014 "),lj=a("a"),fko=o("FNetForTokenClassification"),mko=o(" (FNet model)"),gko=l(),Wb=a("li"),ade=a("strong"),hko=o("funnel"),pko=o(" \u2014 "),ij=a("a"),_ko=o("FunnelForTokenClassification"),uko=o(" (Funnel Transformer model)"),bko=l(),Hb=a("li"),nde=a("strong"),Fko=o("gpt2"),vko=o(" \u2014 "),dj=a("a"),Tko=o("GPT2ForTokenClassification"),Mko=o(" (OpenAI GPT-2 model)"),Eko=l(),Ub=a("li"),sde=a("strong"),Cko=o("ibert"),wko=o(" \u2014 "),cj=a("a"),Ako=o("IBertForTokenClassification"),yko=o(" (I-BERT model)"),Lko=l(),Jb=a("li"),lde=a("strong"),xko=o("layoutlm"),kko=o(" \u2014 "),fj=a("a"),Sko=o("LayoutLMForTokenClassification"),Rko=o(" (LayoutLM model)"),Bko=l(),Yb=a("li"),ide=a("strong"),Pko=o("layoutlmv2"),$ko=o(" \u2014 "),mj=a("a"),Iko=o("LayoutLMv2ForTokenClassification"),qko=o(" (LayoutLMv2 model)"),Nko=l(),Kb=a("li"),dde=a("strong"),jko=o("longformer"),Dko=o(" \u2014 "),gj=a("a"),Gko=o("LongformerForTokenClassification"),Oko=o(" (Longformer model)"),Vko=l(),Zb=a("li"),cde=a("strong"),Xko=o("megatron-bert"),zko=o(" \u2014 "),hj=a("a"),Qko=o("MegatronBertForTokenClassification"),Wko=o(" (MegatronBert model)"),Hko=l(),e3=a("li"),fde=a("strong"),Uko=o("mobilebert"),Jko=o(" \u2014 "),pj=a("a"),Yko=o("MobileBertForTokenClassification"),Kko=o(" (MobileBERT model)"),Zko=l(),o3=a("li"),mde=a("strong"),eSo=o("mpnet"),oSo=o(" \u2014 "),_j=a("a"),rSo=o("MPNetForTokenClassification"),tSo=o(" (MPNet model)"),aSo=l(),r3=a("li"),gde=a("strong"),nSo=o("nystromformer"),sSo=o(" \u2014 "),uj=a("a"),lSo=o("NystromformerForTokenClassification"),iSo=o(" (Nystromformer model)"),dSo=l(),t3=a("li"),hde=a("strong"),cSo=o("qdqbert"),fSo=o(" \u2014 "),bj=a("a"),mSo=o("QDQBertForTokenClassification"),gSo=o(" (QDQBert model)"),hSo=l(),a3=a("li"),pde=a("strong"),pSo=o("rembert"),_So=o(" \u2014 "),Fj=a("a"),uSo=o("RemBertForTokenClassification"),bSo=o(" (RemBERT model)"),FSo=l(),n3=a("li"),_de=a("strong"),vSo=o("roberta"),TSo=o(" \u2014 "),vj=a("a"),MSo=o("RobertaForTokenClassification"),ESo=o(" (RoBERTa model)"),CSo=l(),s3=a("li"),ude=a("strong"),wSo=o("roformer"),ASo=o(" \u2014 "),Tj=a("a"),ySo=o("RoFormerForTokenClassification"),LSo=o(" (RoFormer model)"),xSo=l(),l3=a("li"),bde=a("strong"),kSo=o("squeezebert"),SSo=o(" \u2014 "),Mj=a("a"),RSo=o("SqueezeBertForTokenClassification"),BSo=o(" (SqueezeBERT model)"),PSo=l(),i3=a("li"),Fde=a("strong"),$So=o("xlm"),ISo=o(" \u2014 "),Ej=a("a"),qSo=o("XLMForTokenClassification"),NSo=o(" (XLM model)"),jSo=l(),d3=a("li"),vde=a("strong"),DSo=o("xlm-roberta"),GSo=o(" \u2014 "),Cj=a("a"),OSo=o("XLMRobertaForTokenClassification"),VSo=o(" (XLM-RoBERTa model)"),XSo=l(),c3=a("li"),Tde=a("strong"),zSo=o("xlm-roberta-xl"),QSo=o(" \u2014 "),wj=a("a"),WSo=o("XLMRobertaXLForTokenClassification"),HSo=o(" (XLM-RoBERTa-XL model)"),USo=l(),f3=a("li"),Mde=a("strong"),JSo=o("xlnet"),YSo=o(" \u2014 "),Aj=a("a"),KSo=o("XLNetForTokenClassification"),ZSo=o(" (XLNet model)"),eRo=l(),m3=a("li"),Ede=a("strong"),oRo=o("yoso"),rRo=o(" \u2014 "),yj=a("a"),tRo=o("YosoForTokenClassification"),aRo=o(" (YOSO model)"),nRo=l(),g3=a("p"),sRo=o("The model is set in evaluation mode by default using "),Cde=a("code"),lRo=o("model.eval()"),iRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=a("code"),dRo=o("model.train()"),cRo=l(),Ade=a("p"),fRo=o("Examples:"),mRo=l(),f(aw.$$.fragment),bRe=l(),Ed=a("h2"),h3=a("a"),yde=a("span"),f(nw.$$.fragment),gRo=l(),Lde=a("span"),hRo=o("AutoModelForQuestionAnswering"),FRe=l(),nr=a("div"),f(sw.$$.fragment),pRo=l(),Cd=a("p"),_Ro=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lj=a("a"),uRo=o("from_pretrained()"),bRo=o(" class method or the "),xj=a("a"),FRo=o("from_config()"),vRo=o(` class
method.`),TRo=l(),lw=a("p"),MRo=o("This class cannot be instantiated directly using "),xde=a("code"),ERo=o("__init__()"),CRo=o(" (throws an error)."),wRo=l(),Zr=a("div"),f(iw.$$.fragment),ARo=l(),kde=a("p"),yRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LRo=l(),wd=a("p"),xRo=o(`Note:
Loading a model from its configuration file does `),Sde=a("strong"),kRo=o("not"),SRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=a("a"),RRo=o("from_pretrained()"),BRo=o(" to load the model weights."),PRo=l(),Rde=a("p"),$Ro=o("Examples:"),IRo=l(),f(dw.$$.fragment),qRo=l(),Qe=a("div"),f(cw.$$.fragment),NRo=l(),Bde=a("p"),jRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),DRo=l(),Za=a("p"),GRo=o("The model class to instantiate is selected based on the "),Pde=a("code"),ORo=o("model_type"),VRo=o(` property of the config object (either
passed as an argument or loaded from `),$de=a("code"),XRo=o("pretrained_model_name_or_path"),zRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=a("code"),QRo=o("pretrained_model_name_or_path"),WRo=o(":"),HRo=l(),R=a("ul"),p3=a("li"),qde=a("strong"),URo=o("albert"),JRo=o(" \u2014 "),Sj=a("a"),YRo=o("AlbertForQuestionAnswering"),KRo=o(" (ALBERT model)"),ZRo=l(),_3=a("li"),Nde=a("strong"),eBo=o("bart"),oBo=o(" \u2014 "),Rj=a("a"),rBo=o("BartForQuestionAnswering"),tBo=o(" (BART model)"),aBo=l(),u3=a("li"),jde=a("strong"),nBo=o("bert"),sBo=o(" \u2014 "),Bj=a("a"),lBo=o("BertForQuestionAnswering"),iBo=o(" (BERT model)"),dBo=l(),b3=a("li"),Dde=a("strong"),cBo=o("big_bird"),fBo=o(" \u2014 "),Pj=a("a"),mBo=o("BigBirdForQuestionAnswering"),gBo=o(" (BigBird model)"),hBo=l(),F3=a("li"),Gde=a("strong"),pBo=o("bigbird_pegasus"),_Bo=o(" \u2014 "),$j=a("a"),uBo=o("BigBirdPegasusForQuestionAnswering"),bBo=o(" (BigBirdPegasus model)"),FBo=l(),v3=a("li"),Ode=a("strong"),vBo=o("camembert"),TBo=o(" \u2014 "),Ij=a("a"),MBo=o("CamembertForQuestionAnswering"),EBo=o(" (CamemBERT model)"),CBo=l(),T3=a("li"),Vde=a("strong"),wBo=o("canine"),ABo=o(" \u2014 "),qj=a("a"),yBo=o("CanineForQuestionAnswering"),LBo=o(" (Canine model)"),xBo=l(),M3=a("li"),Xde=a("strong"),kBo=o("convbert"),SBo=o(" \u2014 "),Nj=a("a"),RBo=o("ConvBertForQuestionAnswering"),BBo=o(" (ConvBERT model)"),PBo=l(),E3=a("li"),zde=a("strong"),$Bo=o("data2vec-text"),IBo=o(" \u2014 "),jj=a("a"),qBo=o("Data2VecTextForQuestionAnswering"),NBo=o(" (Data2VecText model)"),jBo=l(),C3=a("li"),Qde=a("strong"),DBo=o("deberta"),GBo=o(" \u2014 "),Dj=a("a"),OBo=o("DebertaForQuestionAnswering"),VBo=o(" (DeBERTa model)"),XBo=l(),w3=a("li"),Wde=a("strong"),zBo=o("deberta-v2"),QBo=o(" \u2014 "),Gj=a("a"),WBo=o("DebertaV2ForQuestionAnswering"),HBo=o(" (DeBERTa-v2 model)"),UBo=l(),A3=a("li"),Hde=a("strong"),JBo=o("distilbert"),YBo=o(" \u2014 "),Oj=a("a"),KBo=o("DistilBertForQuestionAnswering"),ZBo=o(" (DistilBERT model)"),ePo=l(),y3=a("li"),Ude=a("strong"),oPo=o("electra"),rPo=o(" \u2014 "),Vj=a("a"),tPo=o("ElectraForQuestionAnswering"),aPo=o(" (ELECTRA model)"),nPo=l(),L3=a("li"),Jde=a("strong"),sPo=o("flaubert"),lPo=o(" \u2014 "),Xj=a("a"),iPo=o("FlaubertForQuestionAnsweringSimple"),dPo=o(" (FlauBERT model)"),cPo=l(),x3=a("li"),Yde=a("strong"),fPo=o("fnet"),mPo=o(" \u2014 "),zj=a("a"),gPo=o("FNetForQuestionAnswering"),hPo=o(" (FNet model)"),pPo=l(),k3=a("li"),Kde=a("strong"),_Po=o("funnel"),uPo=o(" \u2014 "),Qj=a("a"),bPo=o("FunnelForQuestionAnswering"),FPo=o(" (Funnel Transformer model)"),vPo=l(),S3=a("li"),Zde=a("strong"),TPo=o("gptj"),MPo=o(" \u2014 "),Wj=a("a"),EPo=o("GPTJForQuestionAnswering"),CPo=o(" (GPT-J model)"),wPo=l(),R3=a("li"),ece=a("strong"),APo=o("ibert"),yPo=o(" \u2014 "),Hj=a("a"),LPo=o("IBertForQuestionAnswering"),xPo=o(" (I-BERT model)"),kPo=l(),B3=a("li"),oce=a("strong"),SPo=o("layoutlmv2"),RPo=o(" \u2014 "),Uj=a("a"),BPo=o("LayoutLMv2ForQuestionAnswering"),PPo=o(" (LayoutLMv2 model)"),$Po=l(),P3=a("li"),rce=a("strong"),IPo=o("led"),qPo=o(" \u2014 "),Jj=a("a"),NPo=o("LEDForQuestionAnswering"),jPo=o(" (LED model)"),DPo=l(),$3=a("li"),tce=a("strong"),GPo=o("longformer"),OPo=o(" \u2014 "),Yj=a("a"),VPo=o("LongformerForQuestionAnswering"),XPo=o(" (Longformer model)"),zPo=l(),I3=a("li"),ace=a("strong"),QPo=o("lxmert"),WPo=o(" \u2014 "),Kj=a("a"),HPo=o("LxmertForQuestionAnswering"),UPo=o(" (LXMERT model)"),JPo=l(),q3=a("li"),nce=a("strong"),YPo=o("mbart"),KPo=o(" \u2014 "),Zj=a("a"),ZPo=o("MBartForQuestionAnswering"),e$o=o(" (mBART model)"),o$o=l(),N3=a("li"),sce=a("strong"),r$o=o("megatron-bert"),t$o=o(" \u2014 "),eD=a("a"),a$o=o("MegatronBertForQuestionAnswering"),n$o=o(" (MegatronBert model)"),s$o=l(),j3=a("li"),lce=a("strong"),l$o=o("mobilebert"),i$o=o(" \u2014 "),oD=a("a"),d$o=o("MobileBertForQuestionAnswering"),c$o=o(" (MobileBERT model)"),f$o=l(),D3=a("li"),ice=a("strong"),m$o=o("mpnet"),g$o=o(" \u2014 "),rD=a("a"),h$o=o("MPNetForQuestionAnswering"),p$o=o(" (MPNet model)"),_$o=l(),G3=a("li"),dce=a("strong"),u$o=o("nystromformer"),b$o=o(" \u2014 "),tD=a("a"),F$o=o("NystromformerForQuestionAnswering"),v$o=o(" (Nystromformer model)"),T$o=l(),O3=a("li"),cce=a("strong"),M$o=o("qdqbert"),E$o=o(" \u2014 "),aD=a("a"),C$o=o("QDQBertForQuestionAnswering"),w$o=o(" (QDQBert model)"),A$o=l(),V3=a("li"),fce=a("strong"),y$o=o("reformer"),L$o=o(" \u2014 "),nD=a("a"),x$o=o("ReformerForQuestionAnswering"),k$o=o(" (Reformer model)"),S$o=l(),X3=a("li"),mce=a("strong"),R$o=o("rembert"),B$o=o(" \u2014 "),sD=a("a"),P$o=o("RemBertForQuestionAnswering"),$$o=o(" (RemBERT model)"),I$o=l(),z3=a("li"),gce=a("strong"),q$o=o("roberta"),N$o=o(" \u2014 "),lD=a("a"),j$o=o("RobertaForQuestionAnswering"),D$o=o(" (RoBERTa model)"),G$o=l(),Q3=a("li"),hce=a("strong"),O$o=o("roformer"),V$o=o(" \u2014 "),iD=a("a"),X$o=o("RoFormerForQuestionAnswering"),z$o=o(" (RoFormer model)"),Q$o=l(),W3=a("li"),pce=a("strong"),W$o=o("splinter"),H$o=o(" \u2014 "),dD=a("a"),U$o=o("SplinterForQuestionAnswering"),J$o=o(" (Splinter model)"),Y$o=l(),H3=a("li"),_ce=a("strong"),K$o=o("squeezebert"),Z$o=o(" \u2014 "),cD=a("a"),eIo=o("SqueezeBertForQuestionAnswering"),oIo=o(" (SqueezeBERT model)"),rIo=l(),U3=a("li"),uce=a("strong"),tIo=o("xlm"),aIo=o(" \u2014 "),fD=a("a"),nIo=o("XLMForQuestionAnsweringSimple"),sIo=o(" (XLM model)"),lIo=l(),J3=a("li"),bce=a("strong"),iIo=o("xlm-roberta"),dIo=o(" \u2014 "),mD=a("a"),cIo=o("XLMRobertaForQuestionAnswering"),fIo=o(" (XLM-RoBERTa model)"),mIo=l(),Y3=a("li"),Fce=a("strong"),gIo=o("xlm-roberta-xl"),hIo=o(" \u2014 "),gD=a("a"),pIo=o("XLMRobertaXLForQuestionAnswering"),_Io=o(" (XLM-RoBERTa-XL model)"),uIo=l(),K3=a("li"),vce=a("strong"),bIo=o("xlnet"),FIo=o(" \u2014 "),hD=a("a"),vIo=o("XLNetForQuestionAnsweringSimple"),TIo=o(" (XLNet model)"),MIo=l(),Z3=a("li"),Tce=a("strong"),EIo=o("yoso"),CIo=o(" \u2014 "),pD=a("a"),wIo=o("YosoForQuestionAnswering"),AIo=o(" (YOSO model)"),yIo=l(),e2=a("p"),LIo=o("The model is set in evaluation mode by default using "),Mce=a("code"),xIo=o("model.eval()"),kIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=a("code"),SIo=o("model.train()"),RIo=l(),Cce=a("p"),BIo=o("Examples:"),PIo=l(),f(fw.$$.fragment),vRe=l(),Ad=a("h2"),o2=a("a"),wce=a("span"),f(mw.$$.fragment),$Io=l(),Ace=a("span"),IIo=o("AutoModelForTableQuestionAnswering"),TRe=l(),sr=a("div"),f(gw.$$.fragment),qIo=l(),yd=a("p"),NIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_D=a("a"),jIo=o("from_pretrained()"),DIo=o(" class method or the "),uD=a("a"),GIo=o("from_config()"),OIo=o(` class
method.`),VIo=l(),hw=a("p"),XIo=o("This class cannot be instantiated directly using "),yce=a("code"),zIo=o("__init__()"),QIo=o(" (throws an error)."),WIo=l(),et=a("div"),f(pw.$$.fragment),HIo=l(),Lce=a("p"),UIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JIo=l(),Ld=a("p"),YIo=o(`Note:
Loading a model from its configuration file does `),xce=a("strong"),KIo=o("not"),ZIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=a("a"),eqo=o("from_pretrained()"),oqo=o(" to load the model weights."),rqo=l(),kce=a("p"),tqo=o("Examples:"),aqo=l(),f(_w.$$.fragment),nqo=l(),We=a("div"),f(uw.$$.fragment),sqo=l(),Sce=a("p"),lqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iqo=l(),en=a("p"),dqo=o("The model class to instantiate is selected based on the "),Rce=a("code"),cqo=o("model_type"),fqo=o(` property of the config object (either
passed as an argument or loaded from `),Bce=a("code"),mqo=o("pretrained_model_name_or_path"),gqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=a("code"),hqo=o("pretrained_model_name_or_path"),pqo=o(":"),_qo=l(),$ce=a("ul"),r2=a("li"),Ice=a("strong"),uqo=o("tapas"),bqo=o(" \u2014 "),FD=a("a"),Fqo=o("TapasForQuestionAnswering"),vqo=o(" (TAPAS model)"),Tqo=l(),t2=a("p"),Mqo=o("The model is set in evaluation mode by default using "),qce=a("code"),Eqo=o("model.eval()"),Cqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=a("code"),wqo=o("model.train()"),Aqo=l(),jce=a("p"),yqo=o("Examples:"),Lqo=l(),f(bw.$$.fragment),MRe=l(),xd=a("h2"),a2=a("a"),Dce=a("span"),f(Fw.$$.fragment),xqo=l(),Gce=a("span"),kqo=o("AutoModelForImageClassification"),ERe=l(),lr=a("div"),f(vw.$$.fragment),Sqo=l(),kd=a("p"),Rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=a("a"),Bqo=o("from_pretrained()"),Pqo=o(" class method or the "),TD=a("a"),$qo=o("from_config()"),Iqo=o(` class
method.`),qqo=l(),Tw=a("p"),Nqo=o("This class cannot be instantiated directly using "),Oce=a("code"),jqo=o("__init__()"),Dqo=o(" (throws an error)."),Gqo=l(),ot=a("div"),f(Mw.$$.fragment),Oqo=l(),Vce=a("p"),Vqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Xqo=l(),Sd=a("p"),zqo=o(`Note:
Loading a model from its configuration file does `),Xce=a("strong"),Qqo=o("not"),Wqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=a("a"),Hqo=o("from_pretrained()"),Uqo=o(" to load the model weights."),Jqo=l(),zce=a("p"),Yqo=o("Examples:"),Kqo=l(),f(Ew.$$.fragment),Zqo=l(),He=a("div"),f(Cw.$$.fragment),eNo=l(),Qce=a("p"),oNo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rNo=l(),on=a("p"),tNo=o("The model class to instantiate is selected based on the "),Wce=a("code"),aNo=o("model_type"),nNo=o(` property of the config object (either
passed as an argument or loaded from `),Hce=a("code"),sNo=o("pretrained_model_name_or_path"),lNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(":"),cNo=l(),ge=a("ul"),n2=a("li"),Jce=a("strong"),fNo=o("beit"),mNo=o(" \u2014 "),ED=a("a"),gNo=o("BeitForImageClassification"),hNo=o(" (BEiT model)"),pNo=l(),s2=a("li"),Yce=a("strong"),_No=o("convnext"),uNo=o(" \u2014 "),CD=a("a"),bNo=o("ConvNextForImageClassification"),FNo=o(" (ConvNext model)"),vNo=l(),Ds=a("li"),Kce=a("strong"),TNo=o("deit"),MNo=o(" \u2014 "),wD=a("a"),ENo=o("DeiTForImageClassification"),CNo=o(" or "),AD=a("a"),wNo=o("DeiTForImageClassificationWithTeacher"),ANo=o(" (DeiT model)"),yNo=l(),l2=a("li"),Zce=a("strong"),LNo=o("imagegpt"),xNo=o(" \u2014 "),yD=a("a"),kNo=o("ImageGPTForImageClassification"),SNo=o(" (ImageGPT model)"),RNo=l(),ma=a("li"),efe=a("strong"),BNo=o("perceiver"),PNo=o(" \u2014 "),LD=a("a"),$No=o("PerceiverForImageClassificationLearned"),INo=o(" or "),xD=a("a"),qNo=o("PerceiverForImageClassificationFourier"),NNo=o(" or "),kD=a("a"),jNo=o("PerceiverForImageClassificationConvProcessing"),DNo=o(" (Perceiver model)"),GNo=l(),i2=a("li"),ofe=a("strong"),ONo=o("poolformer"),VNo=o(" \u2014 "),SD=a("a"),XNo=o("PoolFormerForImageClassification"),zNo=o(" (PoolFormer model)"),QNo=l(),d2=a("li"),rfe=a("strong"),WNo=o("resnet"),HNo=o(" \u2014 "),RD=a("a"),UNo=o("ResNetForImageClassification"),JNo=o(" (ResNet model)"),YNo=l(),c2=a("li"),tfe=a("strong"),KNo=o("segformer"),ZNo=o(" \u2014 "),BD=a("a"),ejo=o("SegformerForImageClassification"),ojo=o(" (SegFormer model)"),rjo=l(),f2=a("li"),afe=a("strong"),tjo=o("swin"),ajo=o(" \u2014 "),PD=a("a"),njo=o("SwinForImageClassification"),sjo=o(" (Swin model)"),ljo=l(),m2=a("li"),nfe=a("strong"),ijo=o("van"),djo=o(" \u2014 "),$D=a("a"),cjo=o("VanForImageClassification"),fjo=o(" (VAN model)"),mjo=l(),g2=a("li"),sfe=a("strong"),gjo=o("vit"),hjo=o(" \u2014 "),ID=a("a"),pjo=o("ViTForImageClassification"),_jo=o(" (ViT model)"),ujo=l(),h2=a("p"),bjo=o("The model is set in evaluation mode by default using "),lfe=a("code"),Fjo=o("model.eval()"),vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),Tjo=o("model.train()"),Mjo=l(),dfe=a("p"),Ejo=o("Examples:"),Cjo=l(),f(ww.$$.fragment),CRe=l(),Rd=a("h2"),p2=a("a"),cfe=a("span"),f(Aw.$$.fragment),wjo=l(),ffe=a("span"),Ajo=o("AutoModelForVision2Seq"),wRe=l(),ir=a("div"),f(yw.$$.fragment),yjo=l(),Bd=a("p"),Ljo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qD=a("a"),xjo=o("from_pretrained()"),kjo=o(" class method or the "),ND=a("a"),Sjo=o("from_config()"),Rjo=o(` class
method.`),Bjo=l(),Lw=a("p"),Pjo=o("This class cannot be instantiated directly using "),mfe=a("code"),$jo=o("__init__()"),Ijo=o(" (throws an error)."),qjo=l(),rt=a("div"),f(xw.$$.fragment),Njo=l(),gfe=a("p"),jjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Djo=l(),Pd=a("p"),Gjo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),Ojo=o("not"),Vjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=a("a"),Xjo=o("from_pretrained()"),zjo=o(" to load the model weights."),Qjo=l(),pfe=a("p"),Wjo=o("Examples:"),Hjo=l(),f(kw.$$.fragment),Ujo=l(),Ue=a("div"),f(Sw.$$.fragment),Jjo=l(),_fe=a("p"),Yjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Kjo=l(),rn=a("p"),Zjo=o("The model class to instantiate is selected based on the "),ufe=a("code"),eDo=o("model_type"),oDo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),rDo=o("pretrained_model_name_or_path"),tDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=a("code"),aDo=o("pretrained_model_name_or_path"),nDo=o(":"),sDo=l(),vfe=a("ul"),_2=a("li"),Tfe=a("strong"),lDo=o("vision-encoder-decoder"),iDo=o(" \u2014 "),DD=a("a"),dDo=o("VisionEncoderDecoderModel"),cDo=o(" (Vision Encoder decoder model)"),fDo=l(),u2=a("p"),mDo=o("The model is set in evaluation mode by default using "),Mfe=a("code"),gDo=o("model.eval()"),hDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),pDo=o("model.train()"),_Do=l(),Cfe=a("p"),uDo=o("Examples:"),bDo=l(),f(Rw.$$.fragment),ARe=l(),$d=a("h2"),b2=a("a"),wfe=a("span"),f(Bw.$$.fragment),FDo=l(),Afe=a("span"),vDo=o("AutoModelForAudioClassification"),yRe=l(),dr=a("div"),f(Pw.$$.fragment),TDo=l(),Id=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GD=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),OD=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),yDo=l(),$w=a("p"),LDo=o("This class cannot be instantiated directly using "),yfe=a("code"),xDo=o("__init__()"),kDo=o(" (throws an error)."),SDo=l(),tt=a("div"),f(Iw.$$.fragment),RDo=l(),Lfe=a("p"),BDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PDo=l(),qd=a("p"),$Do=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),IDo=o("not"),qDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),NDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),kfe=a("p"),GDo=o("Examples:"),ODo=l(),f(qw.$$.fragment),VDo=l(),Je=a("div"),f(Nw.$$.fragment),XDo=l(),Sfe=a("p"),zDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),QDo=l(),tn=a("p"),WDo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),HDo=o("model_type"),UDo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),KDo=o("pretrained_model_name_or_path"),ZDo=o(":"),eGo=l(),Se=a("ul"),F2=a("li"),$fe=a("strong"),oGo=o("data2vec-audio"),rGo=o(" \u2014 "),XD=a("a"),tGo=o("Data2VecAudioForSequenceClassification"),aGo=o(" (Data2VecAudio model)"),nGo=l(),v2=a("li"),Ife=a("strong"),sGo=o("hubert"),lGo=o(" \u2014 "),zD=a("a"),iGo=o("HubertForSequenceClassification"),dGo=o(" (Hubert model)"),cGo=l(),T2=a("li"),qfe=a("strong"),fGo=o("sew"),mGo=o(" \u2014 "),QD=a("a"),gGo=o("SEWForSequenceClassification"),hGo=o(" (SEW model)"),pGo=l(),M2=a("li"),Nfe=a("strong"),_Go=o("sew-d"),uGo=o(" \u2014 "),WD=a("a"),bGo=o("SEWDForSequenceClassification"),FGo=o(" (SEW-D model)"),vGo=l(),E2=a("li"),jfe=a("strong"),TGo=o("unispeech"),MGo=o(" \u2014 "),HD=a("a"),EGo=o("UniSpeechForSequenceClassification"),CGo=o(" (UniSpeech model)"),wGo=l(),C2=a("li"),Dfe=a("strong"),AGo=o("unispeech-sat"),yGo=o(" \u2014 "),UD=a("a"),LGo=o("UniSpeechSatForSequenceClassification"),xGo=o(" (UniSpeechSat model)"),kGo=l(),w2=a("li"),Gfe=a("strong"),SGo=o("wav2vec2"),RGo=o(" \u2014 "),JD=a("a"),BGo=o("Wav2Vec2ForSequenceClassification"),PGo=o(" (Wav2Vec2 model)"),$Go=l(),A2=a("li"),Ofe=a("strong"),IGo=o("wavlm"),qGo=o(" \u2014 "),YD=a("a"),NGo=o("WavLMForSequenceClassification"),jGo=o(" (WavLM model)"),DGo=l(),y2=a("p"),GGo=o("The model is set in evaluation mode by default using "),Vfe=a("code"),OGo=o("model.eval()"),VGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=a("code"),XGo=o("model.train()"),zGo=l(),zfe=a("p"),QGo=o("Examples:"),WGo=l(),f(jw.$$.fragment),LRe=l(),Nd=a("h2"),L2=a("a"),Qfe=a("span"),f(Dw.$$.fragment),HGo=l(),Wfe=a("span"),UGo=o("AutoModelForAudioFrameClassification"),xRe=l(),cr=a("div"),f(Gw.$$.fragment),JGo=l(),jd=a("p"),YGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KD=a("a"),KGo=o("from_pretrained()"),ZGo=o(" class method or the "),ZD=a("a"),eOo=o("from_config()"),oOo=o(` class
method.`),rOo=l(),Ow=a("p"),tOo=o("This class cannot be instantiated directly using "),Hfe=a("code"),aOo=o("__init__()"),nOo=o(" (throws an error)."),sOo=l(),at=a("div"),f(Vw.$$.fragment),lOo=l(),Ufe=a("p"),iOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),dOo=l(),Dd=a("p"),cOo=o(`Note:
Loading a model from its configuration file does `),Jfe=a("strong"),fOo=o("not"),mOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=a("a"),gOo=o("from_pretrained()"),hOo=o(" to load the model weights."),pOo=l(),Yfe=a("p"),_Oo=o("Examples:"),uOo=l(),f(Xw.$$.fragment),bOo=l(),Ye=a("div"),f(zw.$$.fragment),FOo=l(),Kfe=a("p"),vOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),TOo=l(),an=a("p"),MOo=o("The model class to instantiate is selected based on the "),Zfe=a("code"),EOo=o("model_type"),COo=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),wOo=o("pretrained_model_name_or_path"),AOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),yOo=o("pretrained_model_name_or_path"),LOo=o(":"),xOo=l(),nn=a("ul"),x2=a("li"),rme=a("strong"),kOo=o("data2vec-audio"),SOo=o(" \u2014 "),oG=a("a"),ROo=o("Data2VecAudioForAudioFrameClassification"),BOo=o(" (Data2VecAudio model)"),POo=l(),k2=a("li"),tme=a("strong"),$Oo=o("unispeech-sat"),IOo=o(" \u2014 "),rG=a("a"),qOo=o("UniSpeechSatForAudioFrameClassification"),NOo=o(" (UniSpeechSat model)"),jOo=l(),S2=a("li"),ame=a("strong"),DOo=o("wav2vec2"),GOo=o(" \u2014 "),tG=a("a"),OOo=o("Wav2Vec2ForAudioFrameClassification"),VOo=o(" (Wav2Vec2 model)"),XOo=l(),R2=a("li"),nme=a("strong"),zOo=o("wavlm"),QOo=o(" \u2014 "),aG=a("a"),WOo=o("WavLMForAudioFrameClassification"),HOo=o(" (WavLM model)"),UOo=l(),B2=a("p"),JOo=o("The model is set in evaluation mode by default using "),sme=a("code"),YOo=o("model.eval()"),KOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),ZOo=o("model.train()"),eVo=l(),ime=a("p"),oVo=o("Examples:"),rVo=l(),f(Qw.$$.fragment),kRe=l(),Gd=a("h2"),P2=a("a"),dme=a("span"),f(Ww.$$.fragment),tVo=l(),cme=a("span"),aVo=o("AutoModelForCTC"),SRe=l(),fr=a("div"),f(Hw.$$.fragment),nVo=l(),Od=a("p"),sVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nG=a("a"),lVo=o("from_pretrained()"),iVo=o(" class method or the "),sG=a("a"),dVo=o("from_config()"),cVo=o(` class
method.`),fVo=l(),Uw=a("p"),mVo=o("This class cannot be instantiated directly using "),fme=a("code"),gVo=o("__init__()"),hVo=o(" (throws an error)."),pVo=l(),nt=a("div"),f(Jw.$$.fragment),_Vo=l(),mme=a("p"),uVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),bVo=l(),Vd=a("p"),FVo=o(`Note:
Loading a model from its configuration file does `),gme=a("strong"),vVo=o("not"),TVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),MVo=o("from_pretrained()"),EVo=o(" to load the model weights."),CVo=l(),hme=a("p"),wVo=o("Examples:"),AVo=l(),f(Yw.$$.fragment),yVo=l(),Ke=a("div"),f(Kw.$$.fragment),LVo=l(),pme=a("p"),xVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kVo=l(),sn=a("p"),SVo=o("The model class to instantiate is selected based on the "),_me=a("code"),RVo=o("model_type"),BVo=o(` property of the config object (either
passed as an argument or loaded from `),ume=a("code"),PVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=a("code"),IVo=o("pretrained_model_name_or_path"),qVo=o(":"),NVo=l(),Re=a("ul"),$2=a("li"),Fme=a("strong"),jVo=o("data2vec-audio"),DVo=o(" \u2014 "),iG=a("a"),GVo=o("Data2VecAudioForCTC"),OVo=o(" (Data2VecAudio model)"),VVo=l(),I2=a("li"),vme=a("strong"),XVo=o("hubert"),zVo=o(" \u2014 "),dG=a("a"),QVo=o("HubertForCTC"),WVo=o(" (Hubert model)"),HVo=l(),q2=a("li"),Tme=a("strong"),UVo=o("sew"),JVo=o(" \u2014 "),cG=a("a"),YVo=o("SEWForCTC"),KVo=o(" (SEW model)"),ZVo=l(),N2=a("li"),Mme=a("strong"),eXo=o("sew-d"),oXo=o(" \u2014 "),fG=a("a"),rXo=o("SEWDForCTC"),tXo=o(" (SEW-D model)"),aXo=l(),j2=a("li"),Eme=a("strong"),nXo=o("unispeech"),sXo=o(" \u2014 "),mG=a("a"),lXo=o("UniSpeechForCTC"),iXo=o(" (UniSpeech model)"),dXo=l(),D2=a("li"),Cme=a("strong"),cXo=o("unispeech-sat"),fXo=o(" \u2014 "),gG=a("a"),mXo=o("UniSpeechSatForCTC"),gXo=o(" (UniSpeechSat model)"),hXo=l(),G2=a("li"),wme=a("strong"),pXo=o("wav2vec2"),_Xo=o(" \u2014 "),hG=a("a"),uXo=o("Wav2Vec2ForCTC"),bXo=o(" (Wav2Vec2 model)"),FXo=l(),O2=a("li"),Ame=a("strong"),vXo=o("wavlm"),TXo=o(" \u2014 "),pG=a("a"),MXo=o("WavLMForCTC"),EXo=o(" (WavLM model)"),CXo=l(),V2=a("p"),wXo=o("The model is set in evaluation mode by default using "),yme=a("code"),AXo=o("model.eval()"),yXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),LXo=o("model.train()"),xXo=l(),xme=a("p"),kXo=o("Examples:"),SXo=l(),f(Zw.$$.fragment),RRe=l(),Xd=a("h2"),X2=a("a"),kme=a("span"),f(eA.$$.fragment),RXo=l(),Sme=a("span"),BXo=o("AutoModelForSpeechSeq2Seq"),BRe=l(),mr=a("div"),f(oA.$$.fragment),PXo=l(),zd=a("p"),$Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_G=a("a"),IXo=o("from_pretrained()"),qXo=o(" class method or the "),uG=a("a"),NXo=o("from_config()"),jXo=o(` class
method.`),DXo=l(),rA=a("p"),GXo=o("This class cannot be instantiated directly using "),Rme=a("code"),OXo=o("__init__()"),VXo=o(" (throws an error)."),XXo=l(),st=a("div"),f(tA.$$.fragment),zXo=l(),Bme=a("p"),QXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WXo=l(),Qd=a("p"),HXo=o(`Note:
Loading a model from its configuration file does `),Pme=a("strong"),UXo=o("not"),JXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),YXo=o("from_pretrained()"),KXo=o(" to load the model weights."),ZXo=l(),$me=a("p"),ezo=o("Examples:"),ozo=l(),f(aA.$$.fragment),rzo=l(),Ze=a("div"),f(nA.$$.fragment),tzo=l(),Ime=a("p"),azo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),nzo=l(),ln=a("p"),szo=o("The model class to instantiate is selected based on the "),qme=a("code"),lzo=o("model_type"),izo=o(` property of the config object (either
passed as an argument or loaded from `),Nme=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=a("code"),fzo=o("pretrained_model_name_or_path"),mzo=o(":"),gzo=l(),sA=a("ul"),z2=a("li"),Dme=a("strong"),hzo=o("speech-encoder-decoder"),pzo=o(" \u2014 "),FG=a("a"),_zo=o("SpeechEncoderDecoderModel"),uzo=o(" (Speech Encoder decoder model)"),bzo=l(),Q2=a("li"),Gme=a("strong"),Fzo=o("speech_to_text"),vzo=o(" \u2014 "),vG=a("a"),Tzo=o("Speech2TextForConditionalGeneration"),Mzo=o(" (Speech2Text model)"),Ezo=l(),W2=a("p"),Czo=o("The model is set in evaluation mode by default using "),Ome=a("code"),wzo=o("model.eval()"),Azo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=a("code"),yzo=o("model.train()"),Lzo=l(),Xme=a("p"),xzo=o("Examples:"),kzo=l(),f(lA.$$.fragment),PRe=l(),Wd=a("h2"),H2=a("a"),zme=a("span"),f(iA.$$.fragment),Szo=l(),Qme=a("span"),Rzo=o("AutoModelForAudioXVector"),$Re=l(),gr=a("div"),f(dA.$$.fragment),Bzo=l(),Hd=a("p"),Pzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TG=a("a"),$zo=o("from_pretrained()"),Izo=o(" class method or the "),MG=a("a"),qzo=o("from_config()"),Nzo=o(` class
method.`),jzo=l(),cA=a("p"),Dzo=o("This class cannot be instantiated directly using "),Wme=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),lt=a("div"),f(fA.$$.fragment),Xzo=l(),Hme=a("p"),zzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Qzo=l(),Ud=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),Ume=a("strong"),Hzo=o("not"),Uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),Jme=a("p"),Zzo=o("Examples:"),eQo=l(),f(mA.$$.fragment),oQo=l(),eo=a("div"),f(gA.$$.fragment),rQo=l(),Yme=a("p"),tQo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aQo=l(),dn=a("p"),nQo=o("The model class to instantiate is selected based on the "),Kme=a("code"),sQo=o("model_type"),lQo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),cQo=o("pretrained_model_name_or_path"),fQo=o(":"),mQo=l(),cn=a("ul"),U2=a("li"),oge=a("strong"),gQo=o("data2vec-audio"),hQo=o(" \u2014 "),CG=a("a"),pQo=o("Data2VecAudioForXVector"),_Qo=o(" (Data2VecAudio model)"),uQo=l(),J2=a("li"),rge=a("strong"),bQo=o("unispeech-sat"),FQo=o(" \u2014 "),wG=a("a"),vQo=o("UniSpeechSatForXVector"),TQo=o(" (UniSpeechSat model)"),MQo=l(),Y2=a("li"),tge=a("strong"),EQo=o("wav2vec2"),CQo=o(" \u2014 "),AG=a("a"),wQo=o("Wav2Vec2ForXVector"),AQo=o(" (Wav2Vec2 model)"),yQo=l(),K2=a("li"),age=a("strong"),LQo=o("wavlm"),xQo=o(" \u2014 "),yG=a("a"),kQo=o("WavLMForXVector"),SQo=o(" (WavLM model)"),RQo=l(),Z2=a("p"),BQo=o("The model is set in evaluation mode by default using "),nge=a("code"),PQo=o("model.eval()"),$Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),IQo=o("model.train()"),qQo=l(),lge=a("p"),NQo=o("Examples:"),jQo=l(),f(hA.$$.fragment),IRe=l(),Jd=a("h2"),eF=a("a"),ige=a("span"),f(pA.$$.fragment),DQo=l(),dge=a("span"),GQo=o("AutoModelForMaskedImageModeling"),qRe=l(),hr=a("div"),f(_A.$$.fragment),OQo=l(),Yd=a("p"),VQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LG=a("a"),XQo=o("from_pretrained()"),zQo=o(" class method or the "),xG=a("a"),QQo=o("from_config()"),WQo=o(` class
method.`),HQo=l(),uA=a("p"),UQo=o("This class cannot be instantiated directly using "),cge=a("code"),JQo=o("__init__()"),YQo=o(" (throws an error)."),KQo=l(),it=a("div"),f(bA.$$.fragment),ZQo=l(),fge=a("p"),eWo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oWo=l(),Kd=a("p"),rWo=o(`Note:
Loading a model from its configuration file does `),mge=a("strong"),tWo=o("not"),aWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=a("a"),nWo=o("from_pretrained()"),sWo=o(" to load the model weights."),lWo=l(),gge=a("p"),iWo=o("Examples:"),dWo=l(),f(FA.$$.fragment),cWo=l(),oo=a("div"),f(vA.$$.fragment),fWo=l(),hge=a("p"),mWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),gWo=l(),fn=a("p"),hWo=o("The model class to instantiate is selected based on the "),pge=a("code"),pWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),_ge=a("code"),uWo=o("pretrained_model_name_or_path"),bWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=a("code"),FWo=o("pretrained_model_name_or_path"),vWo=o(":"),TWo=l(),Zd=a("ul"),oF=a("li"),bge=a("strong"),MWo=o("deit"),EWo=o(" \u2014 "),SG=a("a"),CWo=o("DeiTForMaskedImageModeling"),wWo=o(" (DeiT model)"),AWo=l(),rF=a("li"),Fge=a("strong"),yWo=o("swin"),LWo=o(" \u2014 "),RG=a("a"),xWo=o("SwinForMaskedImageModeling"),kWo=o(" (Swin model)"),SWo=l(),tF=a("li"),vge=a("strong"),RWo=o("vit"),BWo=o(" \u2014 "),BG=a("a"),PWo=o("ViTForMaskedImageModeling"),$Wo=o(" (ViT model)"),IWo=l(),aF=a("p"),qWo=o("The model is set in evaluation mode by default using "),Tge=a("code"),NWo=o("model.eval()"),jWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=a("code"),DWo=o("model.train()"),GWo=l(),Ege=a("p"),OWo=o("Examples:"),VWo=l(),f(TA.$$.fragment),NRe=l(),ec=a("h2"),nF=a("a"),Cge=a("span"),f(MA.$$.fragment),XWo=l(),wge=a("span"),zWo=o("AutoModelForObjectDetection"),jRe=l(),pr=a("div"),f(EA.$$.fragment),QWo=l(),oc=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PG=a("a"),HWo=o("from_pretrained()"),UWo=o(" class method or the "),$G=a("a"),JWo=o("from_config()"),YWo=o(` class
method.`),KWo=l(),CA=a("p"),ZWo=o("This class cannot be instantiated directly using "),Age=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),dt=a("div"),f(wA.$$.fragment),tHo=l(),yge=a("p"),aHo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nHo=l(),rc=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),Lge=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),xge=a("p"),mHo=o("Examples:"),gHo=l(),f(AA.$$.fragment),hHo=l(),ro=a("div"),f(yA.$$.fragment),pHo=l(),kge=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),uHo=l(),mn=a("p"),bHo=o("The model class to instantiate is selected based on the "),Sge=a("code"),FHo=o("model_type"),vHo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=a("code"),EHo=o("pretrained_model_name_or_path"),CHo=o(":"),wHo=l(),Pge=a("ul"),sF=a("li"),$ge=a("strong"),AHo=o("detr"),yHo=o(" \u2014 "),qG=a("a"),LHo=o("DetrForObjectDetection"),xHo=o(" (DETR model)"),kHo=l(),lF=a("p"),SHo=o("The model is set in evaluation mode by default using "),Ige=a("code"),RHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),PHo=o("model.train()"),$Ho=l(),Nge=a("p"),IHo=o("Examples:"),qHo=l(),f(LA.$$.fragment),DRe=l(),tc=a("h2"),iF=a("a"),jge=a("span"),f(xA.$$.fragment),NHo=l(),Dge=a("span"),jHo=o("AutoModelForImageSegmentation"),GRe=l(),_r=a("div"),f(kA.$$.fragment),DHo=l(),ac=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NG=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),jG=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),SA=a("p"),WHo=o("This class cannot be instantiated directly using "),Gge=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ct=a("div"),f(RA.$$.fragment),YHo=l(),Oge=a("p"),KHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),ZHo=l(),nc=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),Vge=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),Xge=a("p"),sUo=o("Examples:"),lUo=l(),f(BA.$$.fragment),iUo=l(),to=a("div"),f(PA.$$.fragment),dUo=l(),zge=a("p"),cUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),fUo=l(),gn=a("p"),mUo=o("The model class to instantiate is selected based on the "),Qge=a("code"),gUo=o("model_type"),hUo=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(":"),FUo=l(),Uge=a("ul"),dF=a("li"),Jge=a("strong"),vUo=o("detr"),TUo=o(" \u2014 "),GG=a("a"),MUo=o("DetrForSegmentation"),EUo=o(" (DETR model)"),CUo=l(),cF=a("p"),wUo=o("The model is set in evaluation mode by default using "),Yge=a("code"),AUo=o("model.eval()"),yUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=a("code"),LUo=o("model.train()"),xUo=l(),Zge=a("p"),kUo=o("Examples:"),SUo=l(),f($A.$$.fragment),ORe=l(),sc=a("h2"),fF=a("a"),ehe=a("span"),f(IA.$$.fragment),RUo=l(),ohe=a("span"),BUo=o("AutoModelForSemanticSegmentation"),VRe=l(),ur=a("div"),f(qA.$$.fragment),PUo=l(),lc=a("p"),$Uo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OG=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),VG=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),NA=a("p"),GUo=o("This class cannot be instantiated directly using "),rhe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),ft=a("div"),f(jA.$$.fragment),zUo=l(),the=a("p"),QUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),WUo=l(),ic=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),ahe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),nhe=a("p"),eJo=o("Examples:"),oJo=l(),f(DA.$$.fragment),rJo=l(),ao=a("div"),f(GA.$$.fragment),tJo=l(),she=a("p"),aJo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nJo=l(),hn=a("p"),sJo=o("The model class to instantiate is selected based on the "),lhe=a("code"),lJo=o("model_type"),iJo=o(` property of the config object (either
passed as an argument or loaded from `),ihe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=a("code"),fJo=o("pretrained_model_name_or_path"),mJo=o(":"),gJo=l(),dc=a("ul"),mF=a("li"),che=a("strong"),hJo=o("beit"),pJo=o(" \u2014 "),zG=a("a"),_Jo=o("BeitForSemanticSegmentation"),uJo=o(" (BEiT model)"),bJo=l(),gF=a("li"),fhe=a("strong"),FJo=o("dpt"),vJo=o(" \u2014 "),QG=a("a"),TJo=o("DPTForSemanticSegmentation"),MJo=o(" (DPT model)"),EJo=l(),hF=a("li"),mhe=a("strong"),CJo=o("segformer"),wJo=o(" \u2014 "),WG=a("a"),AJo=o("SegformerForSemanticSegmentation"),yJo=o(" (SegFormer model)"),LJo=l(),pF=a("p"),xJo=o("The model is set in evaluation mode by default using "),ghe=a("code"),kJo=o("model.eval()"),SJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=a("code"),RJo=o("model.train()"),BJo=l(),phe=a("p"),PJo=o("Examples:"),$Jo=l(),f(OA.$$.fragment),XRe=l(),cc=a("h2"),_F=a("a"),_he=a("span"),f(VA.$$.fragment),IJo=l(),uhe=a("span"),qJo=o("AutoModelForInstanceSegmentation"),zRe=l(),br=a("div"),f(XA.$$.fragment),NJo=l(),fc=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HG=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),UG=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),zA=a("p"),zJo=o("This class cannot be instantiated directly using "),bhe=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),mt=a("div"),f(QA.$$.fragment),UJo=l(),Fhe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),YJo=l(),mc=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),vhe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),The=a("p"),aYo=o("Examples:"),nYo=l(),f(WA.$$.fragment),sYo=l(),no=a("div"),f(HA.$$.fragment),lYo=l(),Mhe=a("p"),iYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),dYo=l(),pn=a("p"),cYo=o("The model class to instantiate is selected based on the "),Ehe=a("code"),fYo=o("model_type"),mYo=o(` property of the config object (either
passed as an argument or loaded from `),Che=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=a("code"),pYo=o("pretrained_model_name_or_path"),_Yo=o(":"),uYo=l(),Ahe=a("ul"),uF=a("li"),yhe=a("strong"),bYo=o("maskformer"),FYo=o(" \u2014 "),YG=a("a"),vYo=o("MaskFormerForInstanceSegmentation"),TYo=o(" (MaskFormer model)"),MYo=l(),bF=a("p"),EYo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),CYo=o("model.eval()"),wYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),AYo=o("model.train()"),yYo=l(),khe=a("p"),LYo=o("Examples:"),xYo=l(),f(UA.$$.fragment),QRe=l(),gc=a("h2"),FF=a("a"),She=a("span"),f(JA.$$.fragment),kYo=l(),Rhe=a("span"),SYo=o("TFAutoModel"),WRe=l(),Fr=a("div"),f(YA.$$.fragment),RYo=l(),hc=a("p"),BYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KG=a("a"),PYo=o("from_pretrained()"),$Yo=o(" class method or the "),ZG=a("a"),IYo=o("from_config()"),qYo=o(` class
method.`),NYo=l(),KA=a("p"),jYo=o("This class cannot be instantiated directly using "),Bhe=a("code"),DYo=o("__init__()"),GYo=o(" (throws an error)."),OYo=l(),gt=a("div"),f(ZA.$$.fragment),VYo=l(),Phe=a("p"),XYo=o("Instantiates one of the base model classes of the library from a configuration."),zYo=l(),pc=a("p"),QYo=o(`Note:
Loading a model from its configuration file does `),$he=a("strong"),WYo=o("not"),HYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),UYo=o("from_pretrained()"),JYo=o(" to load the model weights."),YYo=l(),Ihe=a("p"),KYo=o("Examples:"),ZYo=l(),f(e0.$$.fragment),eKo=l(),ho=a("div"),f(o0.$$.fragment),oKo=l(),qhe=a("p"),rKo=o("Instantiate one of the base model classes of the library from a pretrained model."),tKo=l(),_n=a("p"),aKo=o("The model class to instantiate is selected based on the "),Nhe=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),jhe=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),x=a("ul"),vF=a("li"),Ghe=a("strong"),mKo=o("albert"),gKo=o(" \u2014 "),oO=a("a"),hKo=o("TFAlbertModel"),pKo=o(" (ALBERT model)"),_Ko=l(),TF=a("li"),Ohe=a("strong"),uKo=o("bart"),bKo=o(" \u2014 "),rO=a("a"),FKo=o("TFBartModel"),vKo=o(" (BART model)"),TKo=l(),MF=a("li"),Vhe=a("strong"),MKo=o("bert"),EKo=o(" \u2014 "),tO=a("a"),CKo=o("TFBertModel"),wKo=o(" (BERT model)"),AKo=l(),EF=a("li"),Xhe=a("strong"),yKo=o("blenderbot"),LKo=o(" \u2014 "),aO=a("a"),xKo=o("TFBlenderbotModel"),kKo=o(" (Blenderbot model)"),SKo=l(),CF=a("li"),zhe=a("strong"),RKo=o("blenderbot-small"),BKo=o(" \u2014 "),nO=a("a"),PKo=o("TFBlenderbotSmallModel"),$Ko=o(" (BlenderbotSmall model)"),IKo=l(),wF=a("li"),Qhe=a("strong"),qKo=o("camembert"),NKo=o(" \u2014 "),sO=a("a"),jKo=o("TFCamembertModel"),DKo=o(" (CamemBERT model)"),GKo=l(),AF=a("li"),Whe=a("strong"),OKo=o("clip"),VKo=o(" \u2014 "),lO=a("a"),XKo=o("TFCLIPModel"),zKo=o(" (CLIP model)"),QKo=l(),yF=a("li"),Hhe=a("strong"),WKo=o("convbert"),HKo=o(" \u2014 "),iO=a("a"),UKo=o("TFConvBertModel"),JKo=o(" (ConvBERT model)"),YKo=l(),LF=a("li"),Uhe=a("strong"),KKo=o("convnext"),ZKo=o(" \u2014 "),dO=a("a"),eZo=o("TFConvNextModel"),oZo=o(" (ConvNext model)"),rZo=l(),xF=a("li"),Jhe=a("strong"),tZo=o("ctrl"),aZo=o(" \u2014 "),cO=a("a"),nZo=o("TFCTRLModel"),sZo=o(" (CTRL model)"),lZo=l(),kF=a("li"),Yhe=a("strong"),iZo=o("deberta"),dZo=o(" \u2014 "),fO=a("a"),cZo=o("TFDebertaModel"),fZo=o(" (DeBERTa model)"),mZo=l(),SF=a("li"),Khe=a("strong"),gZo=o("deberta-v2"),hZo=o(" \u2014 "),mO=a("a"),pZo=o("TFDebertaV2Model"),_Zo=o(" (DeBERTa-v2 model)"),uZo=l(),RF=a("li"),Zhe=a("strong"),bZo=o("distilbert"),FZo=o(" \u2014 "),gO=a("a"),vZo=o("TFDistilBertModel"),TZo=o(" (DistilBERT model)"),MZo=l(),BF=a("li"),epe=a("strong"),EZo=o("dpr"),CZo=o(" \u2014 "),hO=a("a"),wZo=o("TFDPRQuestionEncoder"),AZo=o(" (DPR model)"),yZo=l(),PF=a("li"),ope=a("strong"),LZo=o("electra"),xZo=o(" \u2014 "),pO=a("a"),kZo=o("TFElectraModel"),SZo=o(" (ELECTRA model)"),RZo=l(),$F=a("li"),rpe=a("strong"),BZo=o("flaubert"),PZo=o(" \u2014 "),_O=a("a"),$Zo=o("TFFlaubertModel"),IZo=o(" (FlauBERT model)"),qZo=l(),Gs=a("li"),tpe=a("strong"),NZo=o("funnel"),jZo=o(" \u2014 "),uO=a("a"),DZo=o("TFFunnelModel"),GZo=o(" or "),bO=a("a"),OZo=o("TFFunnelBaseModel"),VZo=o(" (Funnel Transformer model)"),XZo=l(),IF=a("li"),ape=a("strong"),zZo=o("gpt2"),QZo=o(" \u2014 "),FO=a("a"),WZo=o("TFGPT2Model"),HZo=o(" (OpenAI GPT-2 model)"),UZo=l(),qF=a("li"),npe=a("strong"),JZo=o("gptj"),YZo=o(" \u2014 "),vO=a("a"),KZo=o("TFGPTJModel"),ZZo=o(" (GPT-J model)"),eer=l(),NF=a("li"),spe=a("strong"),oer=o("hubert"),rer=o(" \u2014 "),TO=a("a"),ter=o("TFHubertModel"),aer=o(" (Hubert model)"),ner=l(),jF=a("li"),lpe=a("strong"),ser=o("layoutlm"),ler=o(" \u2014 "),MO=a("a"),ier=o("TFLayoutLMModel"),der=o(" (LayoutLM model)"),cer=l(),DF=a("li"),ipe=a("strong"),fer=o("led"),mer=o(" \u2014 "),EO=a("a"),ger=o("TFLEDModel"),her=o(" (LED model)"),per=l(),GF=a("li"),dpe=a("strong"),_er=o("longformer"),uer=o(" \u2014 "),CO=a("a"),ber=o("TFLongformerModel"),Fer=o(" (Longformer model)"),ver=l(),OF=a("li"),cpe=a("strong"),Ter=o("lxmert"),Mer=o(" \u2014 "),wO=a("a"),Eer=o("TFLxmertModel"),Cer=o(" (LXMERT model)"),wer=l(),VF=a("li"),fpe=a("strong"),Aer=o("marian"),yer=o(" \u2014 "),AO=a("a"),Ler=o("TFMarianModel"),xer=o(" (Marian model)"),ker=l(),XF=a("li"),mpe=a("strong"),Ser=o("mbart"),Rer=o(" \u2014 "),yO=a("a"),Ber=o("TFMBartModel"),Per=o(" (mBART model)"),$er=l(),zF=a("li"),gpe=a("strong"),Ier=o("mobilebert"),qer=o(" \u2014 "),LO=a("a"),Ner=o("TFMobileBertModel"),jer=o(" (MobileBERT model)"),Der=l(),QF=a("li"),hpe=a("strong"),Ger=o("mpnet"),Oer=o(" \u2014 "),xO=a("a"),Ver=o("TFMPNetModel"),Xer=o(" (MPNet model)"),zer=l(),WF=a("li"),ppe=a("strong"),Qer=o("mt5"),Wer=o(" \u2014 "),kO=a("a"),Her=o("TFMT5Model"),Uer=o(" (mT5 model)"),Jer=l(),HF=a("li"),_pe=a("strong"),Yer=o("openai-gpt"),Ker=o(" \u2014 "),SO=a("a"),Zer=o("TFOpenAIGPTModel"),eor=o(" (OpenAI GPT model)"),oor=l(),UF=a("li"),upe=a("strong"),ror=o("pegasus"),tor=o(" \u2014 "),RO=a("a"),aor=o("TFPegasusModel"),nor=o(" (Pegasus model)"),sor=l(),JF=a("li"),bpe=a("strong"),lor=o("rembert"),ior=o(" \u2014 "),BO=a("a"),dor=o("TFRemBertModel"),cor=o(" (RemBERT model)"),mor=l(),YF=a("li"),Fpe=a("strong"),gor=o("roberta"),hor=o(" \u2014 "),PO=a("a"),por=o("TFRobertaModel"),_or=o(" (RoBERTa model)"),uor=l(),KF=a("li"),vpe=a("strong"),bor=o("roformer"),For=o(" \u2014 "),$O=a("a"),vor=o("TFRoFormerModel"),Tor=o(" (RoFormer model)"),Mor=l(),ZF=a("li"),Tpe=a("strong"),Eor=o("speech_to_text"),Cor=o(" \u2014 "),IO=a("a"),wor=o("TFSpeech2TextModel"),Aor=o(" (Speech2Text model)"),yor=l(),ev=a("li"),Mpe=a("strong"),Lor=o("t5"),xor=o(" \u2014 "),qO=a("a"),kor=o("TFT5Model"),Sor=o(" (T5 model)"),Ror=l(),ov=a("li"),Epe=a("strong"),Bor=o("tapas"),Por=o(" \u2014 "),NO=a("a"),$or=o("TFTapasModel"),Ior=o(" (TAPAS model)"),qor=l(),rv=a("li"),Cpe=a("strong"),Nor=o("transfo-xl"),jor=o(" \u2014 "),jO=a("a"),Dor=o("TFTransfoXLModel"),Gor=o(" (Transformer-XL model)"),Oor=l(),tv=a("li"),wpe=a("strong"),Vor=o("vit"),Xor=o(" \u2014 "),DO=a("a"),zor=o("TFViTModel"),Qor=o(" (ViT model)"),Wor=l(),av=a("li"),Ape=a("strong"),Hor=o("vit_mae"),Uor=o(" \u2014 "),GO=a("a"),Jor=o("TFViTMAEModel"),Yor=o(" (ViTMAE model)"),Kor=l(),nv=a("li"),ype=a("strong"),Zor=o("wav2vec2"),err=o(" \u2014 "),OO=a("a"),orr=o("TFWav2Vec2Model"),rrr=o(" (Wav2Vec2 model)"),trr=l(),sv=a("li"),Lpe=a("strong"),arr=o("xlm"),nrr=o(" \u2014 "),VO=a("a"),srr=o("TFXLMModel"),lrr=o(" (XLM model)"),irr=l(),lv=a("li"),xpe=a("strong"),drr=o("xlm-roberta"),crr=o(" \u2014 "),XO=a("a"),frr=o("TFXLMRobertaModel"),mrr=o(" (XLM-RoBERTa model)"),grr=l(),iv=a("li"),kpe=a("strong"),hrr=o("xlnet"),prr=o(" \u2014 "),zO=a("a"),_rr=o("TFXLNetModel"),urr=o(" (XLNet model)"),brr=l(),Spe=a("p"),Frr=o("Examples:"),vrr=l(),f(r0.$$.fragment),HRe=l(),_c=a("h2"),dv=a("a"),Rpe=a("span"),f(t0.$$.fragment),Trr=l(),Bpe=a("span"),Mrr=o("TFAutoModelForPreTraining"),URe=l(),vr=a("div"),f(a0.$$.fragment),Err=l(),uc=a("p"),Crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QO=a("a"),wrr=o("from_pretrained()"),Arr=o(" class method or the "),WO=a("a"),yrr=o("from_config()"),Lrr=o(` class
method.`),xrr=l(),n0=a("p"),krr=o("This class cannot be instantiated directly using "),Ppe=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Brr=l(),ht=a("div"),f(s0.$$.fragment),Prr=l(),$pe=a("p"),$rr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Irr=l(),bc=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),Nrr=o("not"),jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=a("a"),Drr=o("from_pretrained()"),Grr=o(" to load the model weights."),Orr=l(),qpe=a("p"),Vrr=o("Examples:"),Xrr=l(),f(l0.$$.fragment),zrr=l(),po=a("div"),f(i0.$$.fragment),Qrr=l(),Npe=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Hrr=l(),un=a("p"),Urr=o("The model class to instantiate is selected based on the "),jpe=a("code"),Jrr=o("model_type"),Yrr=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(":"),rtr=l(),H=a("ul"),cv=a("li"),Ope=a("strong"),ttr=o("albert"),atr=o(" \u2014 "),UO=a("a"),ntr=o("TFAlbertForPreTraining"),str=o(" (ALBERT model)"),ltr=l(),fv=a("li"),Vpe=a("strong"),itr=o("bart"),dtr=o(" \u2014 "),JO=a("a"),ctr=o("TFBartForConditionalGeneration"),ftr=o(" (BART model)"),mtr=l(),mv=a("li"),Xpe=a("strong"),gtr=o("bert"),htr=o(" \u2014 "),YO=a("a"),ptr=o("TFBertForPreTraining"),_tr=o(" (BERT model)"),utr=l(),gv=a("li"),zpe=a("strong"),btr=o("camembert"),Ftr=o(" \u2014 "),KO=a("a"),vtr=o("TFCamembertForMaskedLM"),Ttr=o(" (CamemBERT model)"),Mtr=l(),hv=a("li"),Qpe=a("strong"),Etr=o("ctrl"),Ctr=o(" \u2014 "),ZO=a("a"),wtr=o("TFCTRLLMHeadModel"),Atr=o(" (CTRL model)"),ytr=l(),pv=a("li"),Wpe=a("strong"),Ltr=o("distilbert"),xtr=o(" \u2014 "),eV=a("a"),ktr=o("TFDistilBertForMaskedLM"),Str=o(" (DistilBERT model)"),Rtr=l(),_v=a("li"),Hpe=a("strong"),Btr=o("electra"),Ptr=o(" \u2014 "),oV=a("a"),$tr=o("TFElectraForPreTraining"),Itr=o(" (ELECTRA model)"),qtr=l(),uv=a("li"),Upe=a("strong"),Ntr=o("flaubert"),jtr=o(" \u2014 "),rV=a("a"),Dtr=o("TFFlaubertWithLMHeadModel"),Gtr=o(" (FlauBERT model)"),Otr=l(),bv=a("li"),Jpe=a("strong"),Vtr=o("funnel"),Xtr=o(" \u2014 "),tV=a("a"),ztr=o("TFFunnelForPreTraining"),Qtr=o(" (Funnel Transformer model)"),Wtr=l(),Fv=a("li"),Ype=a("strong"),Htr=o("gpt2"),Utr=o(" \u2014 "),aV=a("a"),Jtr=o("TFGPT2LMHeadModel"),Ytr=o(" (OpenAI GPT-2 model)"),Ktr=l(),vv=a("li"),Kpe=a("strong"),Ztr=o("layoutlm"),ear=o(" \u2014 "),nV=a("a"),oar=o("TFLayoutLMForMaskedLM"),rar=o(" (LayoutLM model)"),tar=l(),Tv=a("li"),Zpe=a("strong"),aar=o("lxmert"),nar=o(" \u2014 "),sV=a("a"),sar=o("TFLxmertForPreTraining"),lar=o(" (LXMERT model)"),iar=l(),Mv=a("li"),e_e=a("strong"),dar=o("mobilebert"),car=o(" \u2014 "),lV=a("a"),far=o("TFMobileBertForPreTraining"),mar=o(" (MobileBERT model)"),gar=l(),Ev=a("li"),o_e=a("strong"),har=o("mpnet"),par=o(" \u2014 "),iV=a("a"),_ar=o("TFMPNetForMaskedLM"),uar=o(" (MPNet model)"),bar=l(),Cv=a("li"),r_e=a("strong"),Far=o("openai-gpt"),Tar=o(" \u2014 "),dV=a("a"),Mar=o("TFOpenAIGPTLMHeadModel"),Ear=o(" (OpenAI GPT model)"),Car=l(),wv=a("li"),t_e=a("strong"),war=o("roberta"),Aar=o(" \u2014 "),cV=a("a"),yar=o("TFRobertaForMaskedLM"),Lar=o(" (RoBERTa model)"),xar=l(),Av=a("li"),a_e=a("strong"),kar=o("t5"),Sar=o(" \u2014 "),fV=a("a"),Rar=o("TFT5ForConditionalGeneration"),Bar=o(" (T5 model)"),Par=l(),yv=a("li"),n_e=a("strong"),$ar=o("tapas"),Iar=o(" \u2014 "),mV=a("a"),qar=o("TFTapasForMaskedLM"),Nar=o(" (TAPAS model)"),jar=l(),Lv=a("li"),s_e=a("strong"),Dar=o("transfo-xl"),Gar=o(" \u2014 "),gV=a("a"),Oar=o("TFTransfoXLLMHeadModel"),Var=o(" (Transformer-XL model)"),Xar=l(),xv=a("li"),l_e=a("strong"),zar=o("vit_mae"),Qar=o(" \u2014 "),hV=a("a"),War=o("TFViTMAEForPreTraining"),Har=o(" (ViTMAE model)"),Uar=l(),kv=a("li"),i_e=a("strong"),Jar=o("xlm"),Yar=o(" \u2014 "),pV=a("a"),Kar=o("TFXLMWithLMHeadModel"),Zar=o(" (XLM model)"),enr=l(),Sv=a("li"),d_e=a("strong"),onr=o("xlm-roberta"),rnr=o(" \u2014 "),_V=a("a"),tnr=o("TFXLMRobertaForMaskedLM"),anr=o(" (XLM-RoBERTa model)"),nnr=l(),Rv=a("li"),c_e=a("strong"),snr=o("xlnet"),lnr=o(" \u2014 "),uV=a("a"),inr=o("TFXLNetLMHeadModel"),dnr=o(" (XLNet model)"),cnr=l(),f_e=a("p"),fnr=o("Examples:"),mnr=l(),f(d0.$$.fragment),JRe=l(),Fc=a("h2"),Bv=a("a"),m_e=a("span"),f(c0.$$.fragment),gnr=l(),g_e=a("span"),hnr=o("TFAutoModelForCausalLM"),YRe=l(),Tr=a("div"),f(f0.$$.fragment),pnr=l(),vc=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bV=a("a"),unr=o("from_pretrained()"),bnr=o(" class method or the "),FV=a("a"),Fnr=o("from_config()"),vnr=o(` class
method.`),Tnr=l(),m0=a("p"),Mnr=o("This class cannot be instantiated directly using "),h_e=a("code"),Enr=o("__init__()"),Cnr=o(" (throws an error)."),wnr=l(),pt=a("div"),f(g0.$$.fragment),Anr=l(),p_e=a("p"),ynr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lnr=l(),Tc=a("p"),xnr=o(`Note:
Loading a model from its configuration file does `),__e=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),Rnr=o("from_pretrained()"),Bnr=o(" to load the model weights."),Pnr=l(),u_e=a("p"),$nr=o("Examples:"),Inr=l(),f(h0.$$.fragment),qnr=l(),_o=a("div"),f(p0.$$.fragment),Nnr=l(),b_e=a("p"),jnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dnr=l(),bn=a("p"),Gnr=o("The model class to instantiate is selected based on the "),F_e=a("code"),Onr=o("model_type"),Vnr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),Xnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Qnr=o("pretrained_model_name_or_path"),Wnr=o(":"),Hnr=l(),ce=a("ul"),Pv=a("li"),M_e=a("strong"),Unr=o("bert"),Jnr=o(" \u2014 "),TV=a("a"),Ynr=o("TFBertLMHeadModel"),Knr=o(" (BERT model)"),Znr=l(),$v=a("li"),E_e=a("strong"),esr=o("camembert"),osr=o(" \u2014 "),MV=a("a"),rsr=o("TFCamembertForCausalLM"),tsr=o(" (CamemBERT model)"),asr=l(),Iv=a("li"),C_e=a("strong"),nsr=o("ctrl"),ssr=o(" \u2014 "),EV=a("a"),lsr=o("TFCTRLLMHeadModel"),isr=o(" (CTRL model)"),dsr=l(),qv=a("li"),w_e=a("strong"),csr=o("gpt2"),fsr=o(" \u2014 "),CV=a("a"),msr=o("TFGPT2LMHeadModel"),gsr=o(" (OpenAI GPT-2 model)"),hsr=l(),Nv=a("li"),A_e=a("strong"),psr=o("gptj"),_sr=o(" \u2014 "),wV=a("a"),usr=o("TFGPTJForCausalLM"),bsr=o(" (GPT-J model)"),Fsr=l(),jv=a("li"),y_e=a("strong"),vsr=o("openai-gpt"),Tsr=o(" \u2014 "),AV=a("a"),Msr=o("TFOpenAIGPTLMHeadModel"),Esr=o(" (OpenAI GPT model)"),Csr=l(),Dv=a("li"),L_e=a("strong"),wsr=o("rembert"),Asr=o(" \u2014 "),yV=a("a"),ysr=o("TFRemBertForCausalLM"),Lsr=o(" (RemBERT model)"),xsr=l(),Gv=a("li"),x_e=a("strong"),ksr=o("roberta"),Ssr=o(" \u2014 "),LV=a("a"),Rsr=o("TFRobertaForCausalLM"),Bsr=o(" (RoBERTa model)"),Psr=l(),Ov=a("li"),k_e=a("strong"),$sr=o("roformer"),Isr=o(" \u2014 "),xV=a("a"),qsr=o("TFRoFormerForCausalLM"),Nsr=o(" (RoFormer model)"),jsr=l(),Vv=a("li"),S_e=a("strong"),Dsr=o("transfo-xl"),Gsr=o(" \u2014 "),kV=a("a"),Osr=o("TFTransfoXLLMHeadModel"),Vsr=o(" (Transformer-XL model)"),Xsr=l(),Xv=a("li"),R_e=a("strong"),zsr=o("xlm"),Qsr=o(" \u2014 "),SV=a("a"),Wsr=o("TFXLMWithLMHeadModel"),Hsr=o(" (XLM model)"),Usr=l(),zv=a("li"),B_e=a("strong"),Jsr=o("xlnet"),Ysr=o(" \u2014 "),RV=a("a"),Ksr=o("TFXLNetLMHeadModel"),Zsr=o(" (XLNet model)"),elr=l(),P_e=a("p"),olr=o("Examples:"),rlr=l(),f(_0.$$.fragment),KRe=l(),Mc=a("h2"),Qv=a("a"),$_e=a("span"),f(u0.$$.fragment),tlr=l(),I_e=a("span"),alr=o("TFAutoModelForImageClassification"),ZRe=l(),Mr=a("div"),f(b0.$$.fragment),nlr=l(),Ec=a("p"),slr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BV=a("a"),llr=o("from_pretrained()"),ilr=o(" class method or the "),PV=a("a"),dlr=o("from_config()"),clr=o(` class
method.`),flr=l(),F0=a("p"),mlr=o("This class cannot be instantiated directly using "),q_e=a("code"),glr=o("__init__()"),hlr=o(" (throws an error)."),plr=l(),_t=a("div"),f(v0.$$.fragment),_lr=l(),N_e=a("p"),ulr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),blr=l(),Cc=a("p"),Flr=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),vlr=o("not"),Tlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=a("a"),Mlr=o("from_pretrained()"),Elr=o(" to load the model weights."),Clr=l(),D_e=a("p"),wlr=o("Examples:"),Alr=l(),f(T0.$$.fragment),ylr=l(),uo=a("div"),f(M0.$$.fragment),Llr=l(),G_e=a("p"),xlr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),klr=l(),Fn=a("p"),Slr=o("The model class to instantiate is selected based on the "),O_e=a("code"),Rlr=o("model_type"),Blr=o(` property of the config object (either
passed as an argument or loaded from `),V_e=a("code"),Plr=o("pretrained_model_name_or_path"),$lr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=a("code"),Ilr=o("pretrained_model_name_or_path"),qlr=o(":"),Nlr=l(),E0=a("ul"),Wv=a("li"),z_e=a("strong"),jlr=o("convnext"),Dlr=o(" \u2014 "),IV=a("a"),Glr=o("TFConvNextForImageClassification"),Olr=o(" (ConvNext model)"),Vlr=l(),Hv=a("li"),Q_e=a("strong"),Xlr=o("vit"),zlr=o(" \u2014 "),qV=a("a"),Qlr=o("TFViTForImageClassification"),Wlr=o(" (ViT model)"),Hlr=l(),W_e=a("p"),Ulr=o("Examples:"),Jlr=l(),f(C0.$$.fragment),eBe=l(),wc=a("h2"),Uv=a("a"),H_e=a("span"),f(w0.$$.fragment),Ylr=l(),U_e=a("span"),Klr=o("TFAutoModelForMaskedLM"),oBe=l(),Er=a("div"),f(A0.$$.fragment),Zlr=l(),Ac=a("p"),eir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NV=a("a"),oir=o("from_pretrained()"),rir=o(" class method or the "),jV=a("a"),tir=o("from_config()"),air=o(` class
method.`),nir=l(),y0=a("p"),sir=o("This class cannot be instantiated directly using "),J_e=a("code"),lir=o("__init__()"),iir=o(" (throws an error)."),dir=l(),ut=a("div"),f(L0.$$.fragment),cir=l(),Y_e=a("p"),fir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mir=l(),yc=a("p"),gir=o(`Note:
Loading a model from its configuration file does `),K_e=a("strong"),hir=o("not"),pir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=a("a"),_ir=o("from_pretrained()"),uir=o(" to load the model weights."),bir=l(),Z_e=a("p"),Fir=o("Examples:"),vir=l(),f(x0.$$.fragment),Tir=l(),bo=a("div"),f(k0.$$.fragment),Mir=l(),eue=a("p"),Eir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cir=l(),vn=a("p"),wir=o("The model class to instantiate is selected based on the "),oue=a("code"),Air=o("model_type"),yir=o(` property of the config object (either
passed as an argument or loaded from `),rue=a("code"),Lir=o("pretrained_model_name_or_path"),xir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=a("code"),kir=o("pretrained_model_name_or_path"),Sir=o(":"),Rir=l(),J=a("ul"),Jv=a("li"),aue=a("strong"),Bir=o("albert"),Pir=o(" \u2014 "),GV=a("a"),$ir=o("TFAlbertForMaskedLM"),Iir=o(" (ALBERT model)"),qir=l(),Yv=a("li"),nue=a("strong"),Nir=o("bert"),jir=o(" \u2014 "),OV=a("a"),Dir=o("TFBertForMaskedLM"),Gir=o(" (BERT model)"),Oir=l(),Kv=a("li"),sue=a("strong"),Vir=o("camembert"),Xir=o(" \u2014 "),VV=a("a"),zir=o("TFCamembertForMaskedLM"),Qir=o(" (CamemBERT model)"),Wir=l(),Zv=a("li"),lue=a("strong"),Hir=o("convbert"),Uir=o(" \u2014 "),XV=a("a"),Jir=o("TFConvBertForMaskedLM"),Yir=o(" (ConvBERT model)"),Kir=l(),e6=a("li"),iue=a("strong"),Zir=o("deberta"),edr=o(" \u2014 "),zV=a("a"),odr=o("TFDebertaForMaskedLM"),rdr=o(" (DeBERTa model)"),tdr=l(),o6=a("li"),due=a("strong"),adr=o("deberta-v2"),ndr=o(" \u2014 "),QV=a("a"),sdr=o("TFDebertaV2ForMaskedLM"),ldr=o(" (DeBERTa-v2 model)"),idr=l(),r6=a("li"),cue=a("strong"),ddr=o("distilbert"),cdr=o(" \u2014 "),WV=a("a"),fdr=o("TFDistilBertForMaskedLM"),mdr=o(" (DistilBERT model)"),gdr=l(),t6=a("li"),fue=a("strong"),hdr=o("electra"),pdr=o(" \u2014 "),HV=a("a"),_dr=o("TFElectraForMaskedLM"),udr=o(" (ELECTRA model)"),bdr=l(),a6=a("li"),mue=a("strong"),Fdr=o("flaubert"),vdr=o(" \u2014 "),UV=a("a"),Tdr=o("TFFlaubertWithLMHeadModel"),Mdr=o(" (FlauBERT model)"),Edr=l(),n6=a("li"),gue=a("strong"),Cdr=o("funnel"),wdr=o(" \u2014 "),JV=a("a"),Adr=o("TFFunnelForMaskedLM"),ydr=o(" (Funnel Transformer model)"),Ldr=l(),s6=a("li"),hue=a("strong"),xdr=o("layoutlm"),kdr=o(" \u2014 "),YV=a("a"),Sdr=o("TFLayoutLMForMaskedLM"),Rdr=o(" (LayoutLM model)"),Bdr=l(),l6=a("li"),pue=a("strong"),Pdr=o("longformer"),$dr=o(" \u2014 "),KV=a("a"),Idr=o("TFLongformerForMaskedLM"),qdr=o(" (Longformer model)"),Ndr=l(),i6=a("li"),_ue=a("strong"),jdr=o("mobilebert"),Ddr=o(" \u2014 "),ZV=a("a"),Gdr=o("TFMobileBertForMaskedLM"),Odr=o(" (MobileBERT model)"),Vdr=l(),d6=a("li"),uue=a("strong"),Xdr=o("mpnet"),zdr=o(" \u2014 "),eX=a("a"),Qdr=o("TFMPNetForMaskedLM"),Wdr=o(" (MPNet model)"),Hdr=l(),c6=a("li"),bue=a("strong"),Udr=o("rembert"),Jdr=o(" \u2014 "),oX=a("a"),Ydr=o("TFRemBertForMaskedLM"),Kdr=o(" (RemBERT model)"),Zdr=l(),f6=a("li"),Fue=a("strong"),ecr=o("roberta"),ocr=o(" \u2014 "),rX=a("a"),rcr=o("TFRobertaForMaskedLM"),tcr=o(" (RoBERTa model)"),acr=l(),m6=a("li"),vue=a("strong"),ncr=o("roformer"),scr=o(" \u2014 "),tX=a("a"),lcr=o("TFRoFormerForMaskedLM"),icr=o(" (RoFormer model)"),dcr=l(),g6=a("li"),Tue=a("strong"),ccr=o("tapas"),fcr=o(" \u2014 "),aX=a("a"),mcr=o("TFTapasForMaskedLM"),gcr=o(" (TAPAS model)"),hcr=l(),h6=a("li"),Mue=a("strong"),pcr=o("xlm"),_cr=o(" \u2014 "),nX=a("a"),ucr=o("TFXLMWithLMHeadModel"),bcr=o(" (XLM model)"),Fcr=l(),p6=a("li"),Eue=a("strong"),vcr=o("xlm-roberta"),Tcr=o(" \u2014 "),sX=a("a"),Mcr=o("TFXLMRobertaForMaskedLM"),Ecr=o(" (XLM-RoBERTa model)"),Ccr=l(),Cue=a("p"),wcr=o("Examples:"),Acr=l(),f(S0.$$.fragment),rBe=l(),Lc=a("h2"),_6=a("a"),wue=a("span"),f(R0.$$.fragment),ycr=l(),Aue=a("span"),Lcr=o("TFAutoModelForSeq2SeqLM"),tBe=l(),Cr=a("div"),f(B0.$$.fragment),xcr=l(),xc=a("p"),kcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=a("a"),Scr=o("from_pretrained()"),Rcr=o(" class method or the "),iX=a("a"),Bcr=o("from_config()"),Pcr=o(` class
method.`),$cr=l(),P0=a("p"),Icr=o("This class cannot be instantiated directly using "),yue=a("code"),qcr=o("__init__()"),Ncr=o(" (throws an error)."),jcr=l(),bt=a("div"),f($0.$$.fragment),Dcr=l(),Lue=a("p"),Gcr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ocr=l(),kc=a("p"),Vcr=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Xcr=o("not"),zcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),Qcr=o("from_pretrained()"),Wcr=o(" to load the model weights."),Hcr=l(),kue=a("p"),Ucr=o("Examples:"),Jcr=l(),f(I0.$$.fragment),Ycr=l(),Fo=a("div"),f(q0.$$.fragment),Kcr=l(),Sue=a("p"),Zcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),efr=l(),Tn=a("p"),ofr=o("The model class to instantiate is selected based on the "),Rue=a("code"),rfr=o("model_type"),tfr=o(` property of the config object (either
passed as an argument or loaded from `),Bue=a("code"),afr=o("pretrained_model_name_or_path"),nfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),sfr=o("pretrained_model_name_or_path"),lfr=o(":"),ifr=l(),ue=a("ul"),u6=a("li"),$ue=a("strong"),dfr=o("bart"),cfr=o(" \u2014 "),cX=a("a"),ffr=o("TFBartForConditionalGeneration"),mfr=o(" (BART model)"),gfr=l(),b6=a("li"),Iue=a("strong"),hfr=o("blenderbot"),pfr=o(" \u2014 "),fX=a("a"),_fr=o("TFBlenderbotForConditionalGeneration"),ufr=o(" (Blenderbot model)"),bfr=l(),F6=a("li"),que=a("strong"),Ffr=o("blenderbot-small"),vfr=o(" \u2014 "),mX=a("a"),Tfr=o("TFBlenderbotSmallForConditionalGeneration"),Mfr=o(" (BlenderbotSmall model)"),Efr=l(),v6=a("li"),Nue=a("strong"),Cfr=o("encoder-decoder"),wfr=o(" \u2014 "),gX=a("a"),Afr=o("TFEncoderDecoderModel"),yfr=o(" (Encoder decoder model)"),Lfr=l(),T6=a("li"),jue=a("strong"),xfr=o("led"),kfr=o(" \u2014 "),hX=a("a"),Sfr=o("TFLEDForConditionalGeneration"),Rfr=o(" (LED model)"),Bfr=l(),M6=a("li"),Due=a("strong"),Pfr=o("marian"),$fr=o(" \u2014 "),pX=a("a"),Ifr=o("TFMarianMTModel"),qfr=o(" (Marian model)"),Nfr=l(),E6=a("li"),Gue=a("strong"),jfr=o("mbart"),Dfr=o(" \u2014 "),_X=a("a"),Gfr=o("TFMBartForConditionalGeneration"),Ofr=o(" (mBART model)"),Vfr=l(),C6=a("li"),Oue=a("strong"),Xfr=o("mt5"),zfr=o(" \u2014 "),uX=a("a"),Qfr=o("TFMT5ForConditionalGeneration"),Wfr=o(" (mT5 model)"),Hfr=l(),w6=a("li"),Vue=a("strong"),Ufr=o("pegasus"),Jfr=o(" \u2014 "),bX=a("a"),Yfr=o("TFPegasusForConditionalGeneration"),Kfr=o(" (Pegasus model)"),Zfr=l(),A6=a("li"),Xue=a("strong"),emr=o("t5"),omr=o(" \u2014 "),FX=a("a"),rmr=o("TFT5ForConditionalGeneration"),tmr=o(" (T5 model)"),amr=l(),zue=a("p"),nmr=o("Examples:"),smr=l(),f(N0.$$.fragment),aBe=l(),Sc=a("h2"),y6=a("a"),Que=a("span"),f(j0.$$.fragment),lmr=l(),Wue=a("span"),imr=o("TFAutoModelForSequenceClassification"),nBe=l(),wr=a("div"),f(D0.$$.fragment),dmr=l(),Rc=a("p"),cmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=a("a"),fmr=o("from_pretrained()"),mmr=o(" class method or the "),TX=a("a"),gmr=o("from_config()"),hmr=o(` class
method.`),pmr=l(),G0=a("p"),_mr=o("This class cannot be instantiated directly using "),Hue=a("code"),umr=o("__init__()"),bmr=o(" (throws an error)."),Fmr=l(),Ft=a("div"),f(O0.$$.fragment),vmr=l(),Uue=a("p"),Tmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mmr=l(),Bc=a("p"),Emr=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Cmr=o("not"),wmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),Amr=o("from_pretrained()"),ymr=o(" to load the model weights."),Lmr=l(),Yue=a("p"),xmr=o("Examples:"),kmr=l(),f(V0.$$.fragment),Smr=l(),vo=a("div"),f(X0.$$.fragment),Rmr=l(),Kue=a("p"),Bmr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Pmr=l(),Mn=a("p"),$mr=o("The model class to instantiate is selected based on the "),Zue=a("code"),Imr=o("model_type"),qmr=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Nmr=o("pretrained_model_name_or_path"),jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),Dmr=o("pretrained_model_name_or_path"),Gmr=o(":"),Omr=l(),V=a("ul"),L6=a("li"),r1e=a("strong"),Vmr=o("albert"),Xmr=o(" \u2014 "),EX=a("a"),zmr=o("TFAlbertForSequenceClassification"),Qmr=o(" (ALBERT model)"),Wmr=l(),x6=a("li"),t1e=a("strong"),Hmr=o("bert"),Umr=o(" \u2014 "),CX=a("a"),Jmr=o("TFBertForSequenceClassification"),Ymr=o(" (BERT model)"),Kmr=l(),k6=a("li"),a1e=a("strong"),Zmr=o("camembert"),egr=o(" \u2014 "),wX=a("a"),ogr=o("TFCamembertForSequenceClassification"),rgr=o(" (CamemBERT model)"),tgr=l(),S6=a("li"),n1e=a("strong"),agr=o("convbert"),ngr=o(" \u2014 "),AX=a("a"),sgr=o("TFConvBertForSequenceClassification"),lgr=o(" (ConvBERT model)"),igr=l(),R6=a("li"),s1e=a("strong"),dgr=o("ctrl"),cgr=o(" \u2014 "),yX=a("a"),fgr=o("TFCTRLForSequenceClassification"),mgr=o(" (CTRL model)"),ggr=l(),B6=a("li"),l1e=a("strong"),hgr=o("deberta"),pgr=o(" \u2014 "),LX=a("a"),_gr=o("TFDebertaForSequenceClassification"),ugr=o(" (DeBERTa model)"),bgr=l(),P6=a("li"),i1e=a("strong"),Fgr=o("deberta-v2"),vgr=o(" \u2014 "),xX=a("a"),Tgr=o("TFDebertaV2ForSequenceClassification"),Mgr=o(" (DeBERTa-v2 model)"),Egr=l(),$6=a("li"),d1e=a("strong"),Cgr=o("distilbert"),wgr=o(" \u2014 "),kX=a("a"),Agr=o("TFDistilBertForSequenceClassification"),ygr=o(" (DistilBERT model)"),Lgr=l(),I6=a("li"),c1e=a("strong"),xgr=o("electra"),kgr=o(" \u2014 "),SX=a("a"),Sgr=o("TFElectraForSequenceClassification"),Rgr=o(" (ELECTRA model)"),Bgr=l(),q6=a("li"),f1e=a("strong"),Pgr=o("flaubert"),$gr=o(" \u2014 "),RX=a("a"),Igr=o("TFFlaubertForSequenceClassification"),qgr=o(" (FlauBERT model)"),Ngr=l(),N6=a("li"),m1e=a("strong"),jgr=o("funnel"),Dgr=o(" \u2014 "),BX=a("a"),Ggr=o("TFFunnelForSequenceClassification"),Ogr=o(" (Funnel Transformer model)"),Vgr=l(),j6=a("li"),g1e=a("strong"),Xgr=o("gpt2"),zgr=o(" \u2014 "),PX=a("a"),Qgr=o("TFGPT2ForSequenceClassification"),Wgr=o(" (OpenAI GPT-2 model)"),Hgr=l(),D6=a("li"),h1e=a("strong"),Ugr=o("gptj"),Jgr=o(" \u2014 "),$X=a("a"),Ygr=o("TFGPTJForSequenceClassification"),Kgr=o(" (GPT-J model)"),Zgr=l(),G6=a("li"),p1e=a("strong"),ehr=o("layoutlm"),ohr=o(" \u2014 "),IX=a("a"),rhr=o("TFLayoutLMForSequenceClassification"),thr=o(" (LayoutLM model)"),ahr=l(),O6=a("li"),_1e=a("strong"),nhr=o("longformer"),shr=o(" \u2014 "),qX=a("a"),lhr=o("TFLongformerForSequenceClassification"),ihr=o(" (Longformer model)"),dhr=l(),V6=a("li"),u1e=a("strong"),chr=o("mobilebert"),fhr=o(" \u2014 "),NX=a("a"),mhr=o("TFMobileBertForSequenceClassification"),ghr=o(" (MobileBERT model)"),hhr=l(),X6=a("li"),b1e=a("strong"),phr=o("mpnet"),_hr=o(" \u2014 "),jX=a("a"),uhr=o("TFMPNetForSequenceClassification"),bhr=o(" (MPNet model)"),Fhr=l(),z6=a("li"),F1e=a("strong"),vhr=o("openai-gpt"),Thr=o(" \u2014 "),DX=a("a"),Mhr=o("TFOpenAIGPTForSequenceClassification"),Ehr=o(" (OpenAI GPT model)"),Chr=l(),Q6=a("li"),v1e=a("strong"),whr=o("rembert"),Ahr=o(" \u2014 "),GX=a("a"),yhr=o("TFRemBertForSequenceClassification"),Lhr=o(" (RemBERT model)"),xhr=l(),W6=a("li"),T1e=a("strong"),khr=o("roberta"),Shr=o(" \u2014 "),OX=a("a"),Rhr=o("TFRobertaForSequenceClassification"),Bhr=o(" (RoBERTa model)"),Phr=l(),H6=a("li"),M1e=a("strong"),$hr=o("roformer"),Ihr=o(" \u2014 "),VX=a("a"),qhr=o("TFRoFormerForSequenceClassification"),Nhr=o(" (RoFormer model)"),jhr=l(),U6=a("li"),E1e=a("strong"),Dhr=o("tapas"),Ghr=o(" \u2014 "),XX=a("a"),Ohr=o("TFTapasForSequenceClassification"),Vhr=o(" (TAPAS model)"),Xhr=l(),J6=a("li"),C1e=a("strong"),zhr=o("transfo-xl"),Qhr=o(" \u2014 "),zX=a("a"),Whr=o("TFTransfoXLForSequenceClassification"),Hhr=o(" (Transformer-XL model)"),Uhr=l(),Y6=a("li"),w1e=a("strong"),Jhr=o("xlm"),Yhr=o(" \u2014 "),QX=a("a"),Khr=o("TFXLMForSequenceClassification"),Zhr=o(" (XLM model)"),epr=l(),K6=a("li"),A1e=a("strong"),opr=o("xlm-roberta"),rpr=o(" \u2014 "),WX=a("a"),tpr=o("TFXLMRobertaForSequenceClassification"),apr=o(" (XLM-RoBERTa model)"),npr=l(),Z6=a("li"),y1e=a("strong"),spr=o("xlnet"),lpr=o(" \u2014 "),HX=a("a"),ipr=o("TFXLNetForSequenceClassification"),dpr=o(" (XLNet model)"),cpr=l(),L1e=a("p"),fpr=o("Examples:"),mpr=l(),f(z0.$$.fragment),sBe=l(),Pc=a("h2"),eT=a("a"),x1e=a("span"),f(Q0.$$.fragment),gpr=l(),k1e=a("span"),hpr=o("TFAutoModelForMultipleChoice"),lBe=l(),Ar=a("div"),f(W0.$$.fragment),ppr=l(),$c=a("p"),_pr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UX=a("a"),upr=o("from_pretrained()"),bpr=o(" class method or the "),JX=a("a"),Fpr=o("from_config()"),vpr=o(` class
method.`),Tpr=l(),H0=a("p"),Mpr=o("This class cannot be instantiated directly using "),S1e=a("code"),Epr=o("__init__()"),Cpr=o(" (throws an error)."),wpr=l(),vt=a("div"),f(U0.$$.fragment),Apr=l(),R1e=a("p"),ypr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lpr=l(),Ic=a("p"),xpr=o(`Note:
Loading a model from its configuration file does `),B1e=a("strong"),kpr=o("not"),Spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Rpr=o("from_pretrained()"),Bpr=o(" to load the model weights."),Ppr=l(),P1e=a("p"),$pr=o("Examples:"),Ipr=l(),f(J0.$$.fragment),qpr=l(),To=a("div"),f(Y0.$$.fragment),Npr=l(),$1e=a("p"),jpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Dpr=l(),En=a("p"),Gpr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Opr=o("model_type"),Vpr=o(` property of the config object (either
passed as an argument or loaded from `),q1e=a("code"),Xpr=o("pretrained_model_name_or_path"),zpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Qpr=o("pretrained_model_name_or_path"),Wpr=o(":"),Hpr=l(),ae=a("ul"),oT=a("li"),j1e=a("strong"),Upr=o("albert"),Jpr=o(" \u2014 "),KX=a("a"),Ypr=o("TFAlbertForMultipleChoice"),Kpr=o(" (ALBERT model)"),Zpr=l(),rT=a("li"),D1e=a("strong"),e_r=o("bert"),o_r=o(" \u2014 "),ZX=a("a"),r_r=o("TFBertForMultipleChoice"),t_r=o(" (BERT model)"),a_r=l(),tT=a("li"),G1e=a("strong"),n_r=o("camembert"),s_r=o(" \u2014 "),ez=a("a"),l_r=o("TFCamembertForMultipleChoice"),i_r=o(" (CamemBERT model)"),d_r=l(),aT=a("li"),O1e=a("strong"),c_r=o("convbert"),f_r=o(" \u2014 "),oz=a("a"),m_r=o("TFConvBertForMultipleChoice"),g_r=o(" (ConvBERT model)"),h_r=l(),nT=a("li"),V1e=a("strong"),p_r=o("distilbert"),__r=o(" \u2014 "),rz=a("a"),u_r=o("TFDistilBertForMultipleChoice"),b_r=o(" (DistilBERT model)"),F_r=l(),sT=a("li"),X1e=a("strong"),v_r=o("electra"),T_r=o(" \u2014 "),tz=a("a"),M_r=o("TFElectraForMultipleChoice"),E_r=o(" (ELECTRA model)"),C_r=l(),lT=a("li"),z1e=a("strong"),w_r=o("flaubert"),A_r=o(" \u2014 "),az=a("a"),y_r=o("TFFlaubertForMultipleChoice"),L_r=o(" (FlauBERT model)"),x_r=l(),iT=a("li"),Q1e=a("strong"),k_r=o("funnel"),S_r=o(" \u2014 "),nz=a("a"),R_r=o("TFFunnelForMultipleChoice"),B_r=o(" (Funnel Transformer model)"),P_r=l(),dT=a("li"),W1e=a("strong"),$_r=o("longformer"),I_r=o(" \u2014 "),sz=a("a"),q_r=o("TFLongformerForMultipleChoice"),N_r=o(" (Longformer model)"),j_r=l(),cT=a("li"),H1e=a("strong"),D_r=o("mobilebert"),G_r=o(" \u2014 "),lz=a("a"),O_r=o("TFMobileBertForMultipleChoice"),V_r=o(" (MobileBERT model)"),X_r=l(),fT=a("li"),U1e=a("strong"),z_r=o("mpnet"),Q_r=o(" \u2014 "),iz=a("a"),W_r=o("TFMPNetForMultipleChoice"),H_r=o(" (MPNet model)"),U_r=l(),mT=a("li"),J1e=a("strong"),J_r=o("rembert"),Y_r=o(" \u2014 "),dz=a("a"),K_r=o("TFRemBertForMultipleChoice"),Z_r=o(" (RemBERT model)"),eur=l(),gT=a("li"),Y1e=a("strong"),our=o("roberta"),rur=o(" \u2014 "),cz=a("a"),tur=o("TFRobertaForMultipleChoice"),aur=o(" (RoBERTa model)"),nur=l(),hT=a("li"),K1e=a("strong"),sur=o("roformer"),lur=o(" \u2014 "),fz=a("a"),iur=o("TFRoFormerForMultipleChoice"),dur=o(" (RoFormer model)"),cur=l(),pT=a("li"),Z1e=a("strong"),fur=o("xlm"),mur=o(" \u2014 "),mz=a("a"),gur=o("TFXLMForMultipleChoice"),hur=o(" (XLM model)"),pur=l(),_T=a("li"),e4e=a("strong"),_ur=o("xlm-roberta"),uur=o(" \u2014 "),gz=a("a"),bur=o("TFXLMRobertaForMultipleChoice"),Fur=o(" (XLM-RoBERTa model)"),vur=l(),uT=a("li"),o4e=a("strong"),Tur=o("xlnet"),Mur=o(" \u2014 "),hz=a("a"),Eur=o("TFXLNetForMultipleChoice"),Cur=o(" (XLNet model)"),wur=l(),r4e=a("p"),Aur=o("Examples:"),yur=l(),f(K0.$$.fragment),iBe=l(),qc=a("h2"),bT=a("a"),t4e=a("span"),f(Z0.$$.fragment),Lur=l(),a4e=a("span"),xur=o("TFAutoModelForTableQuestionAnswering"),dBe=l(),yr=a("div"),f(ey.$$.fragment),kur=l(),Nc=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pz=a("a"),Rur=o("from_pretrained()"),Bur=o(" class method or the "),_z=a("a"),Pur=o("from_config()"),$ur=o(` class
method.`),Iur=l(),oy=a("p"),qur=o("This class cannot be instantiated directly using "),n4e=a("code"),Nur=o("__init__()"),jur=o(" (throws an error)."),Dur=l(),Tt=a("div"),f(ry.$$.fragment),Gur=l(),s4e=a("p"),Our=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vur=l(),jc=a("p"),Xur=o(`Note:
Loading a model from its configuration file does `),l4e=a("strong"),zur=o("not"),Qur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=a("a"),Wur=o("from_pretrained()"),Hur=o(" to load the model weights."),Uur=l(),i4e=a("p"),Jur=o("Examples:"),Yur=l(),f(ty.$$.fragment),Kur=l(),Mo=a("div"),f(ay.$$.fragment),Zur=l(),d4e=a("p"),e1r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o1r=l(),Cn=a("p"),r1r=o("The model class to instantiate is selected based on the "),c4e=a("code"),t1r=o("model_type"),a1r=o(` property of the config object (either
passed as an argument or loaded from `),f4e=a("code"),n1r=o("pretrained_model_name_or_path"),s1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=a("code"),l1r=o("pretrained_model_name_or_path"),i1r=o(":"),d1r=l(),g4e=a("ul"),FT=a("li"),h4e=a("strong"),c1r=o("tapas"),f1r=o(" \u2014 "),bz=a("a"),m1r=o("TFTapasForQuestionAnswering"),g1r=o(" (TAPAS model)"),h1r=l(),p4e=a("p"),p1r=o("Examples:"),_1r=l(),f(ny.$$.fragment),cBe=l(),Dc=a("h2"),vT=a("a"),_4e=a("span"),f(sy.$$.fragment),u1r=l(),u4e=a("span"),b1r=o("TFAutoModelForTokenClassification"),fBe=l(),Lr=a("div"),f(ly.$$.fragment),F1r=l(),Gc=a("p"),v1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fz=a("a"),T1r=o("from_pretrained()"),M1r=o(" class method or the "),vz=a("a"),E1r=o("from_config()"),C1r=o(` class
method.`),w1r=l(),iy=a("p"),A1r=o("This class cannot be instantiated directly using "),b4e=a("code"),y1r=o("__init__()"),L1r=o(" (throws an error)."),x1r=l(),Mt=a("div"),f(dy.$$.fragment),k1r=l(),F4e=a("p"),S1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),R1r=l(),Oc=a("p"),B1r=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),P1r=o("not"),$1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),I1r=o("from_pretrained()"),q1r=o(" to load the model weights."),N1r=l(),T4e=a("p"),j1r=o("Examples:"),D1r=l(),f(cy.$$.fragment),G1r=l(),Eo=a("div"),f(fy.$$.fragment),O1r=l(),M4e=a("p"),V1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X1r=l(),wn=a("p"),z1r=o("The model class to instantiate is selected based on the "),E4e=a("code"),Q1r=o("model_type"),W1r=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),H1r=o("pretrained_model_name_or_path"),U1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(":"),K1r=l(),Y=a("ul"),TT=a("li"),A4e=a("strong"),Z1r=o("albert"),e4r=o(" \u2014 "),Mz=a("a"),o4r=o("TFAlbertForTokenClassification"),r4r=o(" (ALBERT model)"),t4r=l(),MT=a("li"),y4e=a("strong"),a4r=o("bert"),n4r=o(" \u2014 "),Ez=a("a"),s4r=o("TFBertForTokenClassification"),l4r=o(" (BERT model)"),i4r=l(),ET=a("li"),L4e=a("strong"),d4r=o("camembert"),c4r=o(" \u2014 "),Cz=a("a"),f4r=o("TFCamembertForTokenClassification"),m4r=o(" (CamemBERT model)"),g4r=l(),CT=a("li"),x4e=a("strong"),h4r=o("convbert"),p4r=o(" \u2014 "),wz=a("a"),_4r=o("TFConvBertForTokenClassification"),u4r=o(" (ConvBERT model)"),b4r=l(),wT=a("li"),k4e=a("strong"),F4r=o("deberta"),v4r=o(" \u2014 "),Az=a("a"),T4r=o("TFDebertaForTokenClassification"),M4r=o(" (DeBERTa model)"),E4r=l(),AT=a("li"),S4e=a("strong"),C4r=o("deberta-v2"),w4r=o(" \u2014 "),yz=a("a"),A4r=o("TFDebertaV2ForTokenClassification"),y4r=o(" (DeBERTa-v2 model)"),L4r=l(),yT=a("li"),R4e=a("strong"),x4r=o("distilbert"),k4r=o(" \u2014 "),Lz=a("a"),S4r=o("TFDistilBertForTokenClassification"),R4r=o(" (DistilBERT model)"),B4r=l(),LT=a("li"),B4e=a("strong"),P4r=o("electra"),$4r=o(" \u2014 "),xz=a("a"),I4r=o("TFElectraForTokenClassification"),q4r=o(" (ELECTRA model)"),N4r=l(),xT=a("li"),P4e=a("strong"),j4r=o("flaubert"),D4r=o(" \u2014 "),kz=a("a"),G4r=o("TFFlaubertForTokenClassification"),O4r=o(" (FlauBERT model)"),V4r=l(),kT=a("li"),$4e=a("strong"),X4r=o("funnel"),z4r=o(" \u2014 "),Sz=a("a"),Q4r=o("TFFunnelForTokenClassification"),W4r=o(" (Funnel Transformer model)"),H4r=l(),ST=a("li"),I4e=a("strong"),U4r=o("layoutlm"),J4r=o(" \u2014 "),Rz=a("a"),Y4r=o("TFLayoutLMForTokenClassification"),K4r=o(" (LayoutLM model)"),Z4r=l(),RT=a("li"),q4e=a("strong"),ebr=o("longformer"),obr=o(" \u2014 "),Bz=a("a"),rbr=o("TFLongformerForTokenClassification"),tbr=o(" (Longformer model)"),abr=l(),BT=a("li"),N4e=a("strong"),nbr=o("mobilebert"),sbr=o(" \u2014 "),Pz=a("a"),lbr=o("TFMobileBertForTokenClassification"),ibr=o(" (MobileBERT model)"),dbr=l(),PT=a("li"),j4e=a("strong"),cbr=o("mpnet"),fbr=o(" \u2014 "),$z=a("a"),mbr=o("TFMPNetForTokenClassification"),gbr=o(" (MPNet model)"),hbr=l(),$T=a("li"),D4e=a("strong"),pbr=o("rembert"),_br=o(" \u2014 "),Iz=a("a"),ubr=o("TFRemBertForTokenClassification"),bbr=o(" (RemBERT model)"),Fbr=l(),IT=a("li"),G4e=a("strong"),vbr=o("roberta"),Tbr=o(" \u2014 "),qz=a("a"),Mbr=o("TFRobertaForTokenClassification"),Ebr=o(" (RoBERTa model)"),Cbr=l(),qT=a("li"),O4e=a("strong"),wbr=o("roformer"),Abr=o(" \u2014 "),Nz=a("a"),ybr=o("TFRoFormerForTokenClassification"),Lbr=o(" (RoFormer model)"),xbr=l(),NT=a("li"),V4e=a("strong"),kbr=o("xlm"),Sbr=o(" \u2014 "),jz=a("a"),Rbr=o("TFXLMForTokenClassification"),Bbr=o(" (XLM model)"),Pbr=l(),jT=a("li"),X4e=a("strong"),$br=o("xlm-roberta"),Ibr=o(" \u2014 "),Dz=a("a"),qbr=o("TFXLMRobertaForTokenClassification"),Nbr=o(" (XLM-RoBERTa model)"),jbr=l(),DT=a("li"),z4e=a("strong"),Dbr=o("xlnet"),Gbr=o(" \u2014 "),Gz=a("a"),Obr=o("TFXLNetForTokenClassification"),Vbr=o(" (XLNet model)"),Xbr=l(),Q4e=a("p"),zbr=o("Examples:"),Qbr=l(),f(my.$$.fragment),mBe=l(),Vc=a("h2"),GT=a("a"),W4e=a("span"),f(gy.$$.fragment),Wbr=l(),H4e=a("span"),Hbr=o("TFAutoModelForQuestionAnswering"),gBe=l(),xr=a("div"),f(hy.$$.fragment),Ubr=l(),Xc=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oz=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),Vz=a("a"),Zbr=o("from_config()"),e3r=o(` class
method.`),o3r=l(),py=a("p"),r3r=o("This class cannot be instantiated directly using "),U4e=a("code"),t3r=o("__init__()"),a3r=o(" (throws an error)."),n3r=l(),Et=a("div"),f(_y.$$.fragment),s3r=l(),J4e=a("p"),l3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),i3r=l(),zc=a("p"),d3r=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),c3r=o("not"),f3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),m3r=o("from_pretrained()"),g3r=o(" to load the model weights."),h3r=l(),K4e=a("p"),p3r=o("Examples:"),_3r=l(),f(uy.$$.fragment),u3r=l(),Co=a("div"),f(by.$$.fragment),b3r=l(),Z4e=a("p"),F3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v3r=l(),An=a("p"),T3r=o("The model class to instantiate is selected based on the "),ebe=a("code"),M3r=o("model_type"),E3r=o(` property of the config object (either
passed as an argument or loaded from `),obe=a("code"),C3r=o("pretrained_model_name_or_path"),w3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=a("code"),A3r=o("pretrained_model_name_or_path"),y3r=o(":"),L3r=l(),K=a("ul"),OT=a("li"),tbe=a("strong"),x3r=o("albert"),k3r=o(" \u2014 "),zz=a("a"),S3r=o("TFAlbertForQuestionAnswering"),R3r=o(" (ALBERT model)"),B3r=l(),VT=a("li"),abe=a("strong"),P3r=o("bert"),$3r=o(" \u2014 "),Qz=a("a"),I3r=o("TFBertForQuestionAnswering"),q3r=o(" (BERT model)"),N3r=l(),XT=a("li"),nbe=a("strong"),j3r=o("camembert"),D3r=o(" \u2014 "),Wz=a("a"),G3r=o("TFCamembertForQuestionAnswering"),O3r=o(" (CamemBERT model)"),V3r=l(),zT=a("li"),sbe=a("strong"),X3r=o("convbert"),z3r=o(" \u2014 "),Hz=a("a"),Q3r=o("TFConvBertForQuestionAnswering"),W3r=o(" (ConvBERT model)"),H3r=l(),QT=a("li"),lbe=a("strong"),U3r=o("deberta"),J3r=o(" \u2014 "),Uz=a("a"),Y3r=o("TFDebertaForQuestionAnswering"),K3r=o(" (DeBERTa model)"),Z3r=l(),WT=a("li"),ibe=a("strong"),e2r=o("deberta-v2"),o2r=o(" \u2014 "),Jz=a("a"),r2r=o("TFDebertaV2ForQuestionAnswering"),t2r=o(" (DeBERTa-v2 model)"),a2r=l(),HT=a("li"),dbe=a("strong"),n2r=o("distilbert"),s2r=o(" \u2014 "),Yz=a("a"),l2r=o("TFDistilBertForQuestionAnswering"),i2r=o(" (DistilBERT model)"),d2r=l(),UT=a("li"),cbe=a("strong"),c2r=o("electra"),f2r=o(" \u2014 "),Kz=a("a"),m2r=o("TFElectraForQuestionAnswering"),g2r=o(" (ELECTRA model)"),h2r=l(),JT=a("li"),fbe=a("strong"),p2r=o("flaubert"),_2r=o(" \u2014 "),Zz=a("a"),u2r=o("TFFlaubertForQuestionAnsweringSimple"),b2r=o(" (FlauBERT model)"),F2r=l(),YT=a("li"),mbe=a("strong"),v2r=o("funnel"),T2r=o(" \u2014 "),eQ=a("a"),M2r=o("TFFunnelForQuestionAnswering"),E2r=o(" (Funnel Transformer model)"),C2r=l(),KT=a("li"),gbe=a("strong"),w2r=o("gptj"),A2r=o(" \u2014 "),oQ=a("a"),y2r=o("TFGPTJForQuestionAnswering"),L2r=o(" (GPT-J model)"),x2r=l(),ZT=a("li"),hbe=a("strong"),k2r=o("longformer"),S2r=o(" \u2014 "),rQ=a("a"),R2r=o("TFLongformerForQuestionAnswering"),B2r=o(" (Longformer model)"),P2r=l(),e7=a("li"),pbe=a("strong"),$2r=o("mobilebert"),I2r=o(" \u2014 "),tQ=a("a"),q2r=o("TFMobileBertForQuestionAnswering"),N2r=o(" (MobileBERT model)"),j2r=l(),o7=a("li"),_be=a("strong"),D2r=o("mpnet"),G2r=o(" \u2014 "),aQ=a("a"),O2r=o("TFMPNetForQuestionAnswering"),V2r=o(" (MPNet model)"),X2r=l(),r7=a("li"),ube=a("strong"),z2r=o("rembert"),Q2r=o(" \u2014 "),nQ=a("a"),W2r=o("TFRemBertForQuestionAnswering"),H2r=o(" (RemBERT model)"),U2r=l(),t7=a("li"),bbe=a("strong"),J2r=o("roberta"),Y2r=o(" \u2014 "),sQ=a("a"),K2r=o("TFRobertaForQuestionAnswering"),Z2r=o(" (RoBERTa model)"),eFr=l(),a7=a("li"),Fbe=a("strong"),oFr=o("roformer"),rFr=o(" \u2014 "),lQ=a("a"),tFr=o("TFRoFormerForQuestionAnswering"),aFr=o(" (RoFormer model)"),nFr=l(),n7=a("li"),vbe=a("strong"),sFr=o("xlm"),lFr=o(" \u2014 "),iQ=a("a"),iFr=o("TFXLMForQuestionAnsweringSimple"),dFr=o(" (XLM model)"),cFr=l(),s7=a("li"),Tbe=a("strong"),fFr=o("xlm-roberta"),mFr=o(" \u2014 "),dQ=a("a"),gFr=o("TFXLMRobertaForQuestionAnswering"),hFr=o(" (XLM-RoBERTa model)"),pFr=l(),l7=a("li"),Mbe=a("strong"),_Fr=o("xlnet"),uFr=o(" \u2014 "),cQ=a("a"),bFr=o("TFXLNetForQuestionAnsweringSimple"),FFr=o(" (XLNet model)"),vFr=l(),Ebe=a("p"),TFr=o("Examples:"),MFr=l(),f(Fy.$$.fragment),hBe=l(),Qc=a("h2"),i7=a("a"),Cbe=a("span"),f(vy.$$.fragment),EFr=l(),wbe=a("span"),CFr=o("TFAutoModelForVision2Seq"),pBe=l(),kr=a("div"),f(Ty.$$.fragment),wFr=l(),Wc=a("p"),AFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fQ=a("a"),yFr=o("from_pretrained()"),LFr=o(" class method or the "),mQ=a("a"),xFr=o("from_config()"),kFr=o(` class
method.`),SFr=l(),My=a("p"),RFr=o("This class cannot be instantiated directly using "),Abe=a("code"),BFr=o("__init__()"),PFr=o(" (throws an error)."),$Fr=l(),Ct=a("div"),f(Ey.$$.fragment),IFr=l(),ybe=a("p"),qFr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NFr=l(),Hc=a("p"),jFr=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),DFr=o("not"),GFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),OFr=o("from_pretrained()"),VFr=o(" to load the model weights."),XFr=l(),xbe=a("p"),zFr=o("Examples:"),QFr=l(),f(Cy.$$.fragment),WFr=l(),wo=a("div"),f(wy.$$.fragment),HFr=l(),kbe=a("p"),UFr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JFr=l(),yn=a("p"),YFr=o("The model class to instantiate is selected based on the "),Sbe=a("code"),KFr=o("model_type"),ZFr=o(` property of the config object (either
passed as an argument or loaded from `),Rbe=a("code"),evr=o("pretrained_model_name_or_path"),ovr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=a("code"),rvr=o("pretrained_model_name_or_path"),tvr=o(":"),avr=l(),Pbe=a("ul"),d7=a("li"),$be=a("strong"),nvr=o("vision-encoder-decoder"),svr=o(" \u2014 "),hQ=a("a"),lvr=o("TFVisionEncoderDecoderModel"),ivr=o(" (Vision Encoder decoder model)"),dvr=l(),Ibe=a("p"),cvr=o("Examples:"),fvr=l(),f(Ay.$$.fragment),_Be=l(),Uc=a("h2"),c7=a("a"),qbe=a("span"),f(yy.$$.fragment),mvr=l(),Nbe=a("span"),gvr=o("TFAutoModelForSpeechSeq2Seq"),uBe=l(),Sr=a("div"),f(Ly.$$.fragment),hvr=l(),Jc=a("p"),pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pQ=a("a"),_vr=o("from_pretrained()"),uvr=o(" class method or the "),_Q=a("a"),bvr=o("from_config()"),Fvr=o(` class
method.`),vvr=l(),xy=a("p"),Tvr=o("This class cannot be instantiated directly using "),jbe=a("code"),Mvr=o("__init__()"),Evr=o(" (throws an error)."),Cvr=l(),wt=a("div"),f(ky.$$.fragment),wvr=l(),Dbe=a("p"),Avr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yvr=l(),Yc=a("p"),Lvr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),xvr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=a("a"),Svr=o("from_pretrained()"),Rvr=o(" to load the model weights."),Bvr=l(),Obe=a("p"),Pvr=o("Examples:"),$vr=l(),f(Sy.$$.fragment),Ivr=l(),Ao=a("div"),f(Ry.$$.fragment),qvr=l(),Vbe=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jvr=l(),Ln=a("p"),Dvr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),Gvr=o("model_type"),Ovr=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),Vvr=o("pretrained_model_name_or_path"),Xvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),zvr=o("pretrained_model_name_or_path"),Qvr=o(":"),Wvr=l(),Wbe=a("ul"),f7=a("li"),Hbe=a("strong"),Hvr=o("speech_to_text"),Uvr=o(" \u2014 "),bQ=a("a"),Jvr=o("TFSpeech2TextForConditionalGeneration"),Yvr=o(" (Speech2Text model)"),Kvr=l(),Ube=a("p"),Zvr=o("Examples:"),e6r=l(),f(By.$$.fragment),bBe=l(),Kc=a("h2"),m7=a("a"),Jbe=a("span"),f(Py.$$.fragment),o6r=l(),Ybe=a("span"),r6r=o("FlaxAutoModel"),FBe=l(),Rr=a("div"),f($y.$$.fragment),t6r=l(),Zc=a("p"),a6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FQ=a("a"),n6r=o("from_pretrained()"),s6r=o(" class method or the "),vQ=a("a"),l6r=o("from_config()"),i6r=o(` class
method.`),d6r=l(),Iy=a("p"),c6r=o("This class cannot be instantiated directly using "),Kbe=a("code"),f6r=o("__init__()"),m6r=o(" (throws an error)."),g6r=l(),At=a("div"),f(qy.$$.fragment),h6r=l(),Zbe=a("p"),p6r=o("Instantiates one of the base model classes of the library from a configuration."),_6r=l(),ef=a("p"),u6r=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),b6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),v6r=o("from_pretrained()"),T6r=o(" to load the model weights."),M6r=l(),o3e=a("p"),E6r=o("Examples:"),C6r=l(),f(Ny.$$.fragment),w6r=l(),yo=a("div"),f(jy.$$.fragment),A6r=l(),r3e=a("p"),y6r=o("Instantiate one of the base model classes of the library from a pretrained model."),L6r=l(),xn=a("p"),x6r=o("The model class to instantiate is selected based on the "),t3e=a("code"),k6r=o("model_type"),S6r=o(` property of the config object (either
passed as an argument or loaded from `),a3e=a("code"),R6r=o("pretrained_model_name_or_path"),B6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=a("code"),P6r=o("pretrained_model_name_or_path"),$6r=o(":"),I6r=l(),z=a("ul"),g7=a("li"),s3e=a("strong"),q6r=o("albert"),N6r=o(" \u2014 "),MQ=a("a"),j6r=o("FlaxAlbertModel"),D6r=o(" (ALBERT model)"),G6r=l(),h7=a("li"),l3e=a("strong"),O6r=o("bart"),V6r=o(" \u2014 "),EQ=a("a"),X6r=o("FlaxBartModel"),z6r=o(" (BART model)"),Q6r=l(),p7=a("li"),i3e=a("strong"),W6r=o("beit"),H6r=o(" \u2014 "),CQ=a("a"),U6r=o("FlaxBeitModel"),J6r=o(" (BEiT model)"),Y6r=l(),_7=a("li"),d3e=a("strong"),K6r=o("bert"),Z6r=o(" \u2014 "),wQ=a("a"),eTr=o("FlaxBertModel"),oTr=o(" (BERT model)"),rTr=l(),u7=a("li"),c3e=a("strong"),tTr=o("big_bird"),aTr=o(" \u2014 "),AQ=a("a"),nTr=o("FlaxBigBirdModel"),sTr=o(" (BigBird model)"),lTr=l(),b7=a("li"),f3e=a("strong"),iTr=o("blenderbot"),dTr=o(" \u2014 "),yQ=a("a"),cTr=o("FlaxBlenderbotModel"),fTr=o(" (Blenderbot model)"),mTr=l(),F7=a("li"),m3e=a("strong"),gTr=o("blenderbot-small"),hTr=o(" \u2014 "),LQ=a("a"),pTr=o("FlaxBlenderbotSmallModel"),_Tr=o(" (BlenderbotSmall model)"),uTr=l(),v7=a("li"),g3e=a("strong"),bTr=o("clip"),FTr=o(" \u2014 "),xQ=a("a"),vTr=o("FlaxCLIPModel"),TTr=o(" (CLIP model)"),MTr=l(),T7=a("li"),h3e=a("strong"),ETr=o("distilbert"),CTr=o(" \u2014 "),kQ=a("a"),wTr=o("FlaxDistilBertModel"),ATr=o(" (DistilBERT model)"),yTr=l(),M7=a("li"),p3e=a("strong"),LTr=o("electra"),xTr=o(" \u2014 "),SQ=a("a"),kTr=o("FlaxElectraModel"),STr=o(" (ELECTRA model)"),RTr=l(),E7=a("li"),_3e=a("strong"),BTr=o("gpt2"),PTr=o(" \u2014 "),RQ=a("a"),$Tr=o("FlaxGPT2Model"),ITr=o(" (OpenAI GPT-2 model)"),qTr=l(),C7=a("li"),u3e=a("strong"),NTr=o("gpt_neo"),jTr=o(" \u2014 "),BQ=a("a"),DTr=o("FlaxGPTNeoModel"),GTr=o(" (GPT Neo model)"),OTr=l(),w7=a("li"),b3e=a("strong"),VTr=o("gptj"),XTr=o(" \u2014 "),PQ=a("a"),zTr=o("FlaxGPTJModel"),QTr=o(" (GPT-J model)"),WTr=l(),A7=a("li"),F3e=a("strong"),HTr=o("marian"),UTr=o(" \u2014 "),$Q=a("a"),JTr=o("FlaxMarianModel"),YTr=o(" (Marian model)"),KTr=l(),y7=a("li"),v3e=a("strong"),ZTr=o("mbart"),e7r=o(" \u2014 "),IQ=a("a"),o7r=o("FlaxMBartModel"),r7r=o(" (mBART model)"),t7r=l(),L7=a("li"),T3e=a("strong"),a7r=o("mt5"),n7r=o(" \u2014 "),qQ=a("a"),s7r=o("FlaxMT5Model"),l7r=o(" (mT5 model)"),i7r=l(),x7=a("li"),M3e=a("strong"),d7r=o("pegasus"),c7r=o(" \u2014 "),NQ=a("a"),f7r=o("FlaxPegasusModel"),m7r=o(" (Pegasus model)"),g7r=l(),k7=a("li"),E3e=a("strong"),h7r=o("roberta"),p7r=o(" \u2014 "),jQ=a("a"),_7r=o("FlaxRobertaModel"),u7r=o(" (RoBERTa model)"),b7r=l(),S7=a("li"),C3e=a("strong"),F7r=o("roformer"),v7r=o(" \u2014 "),DQ=a("a"),T7r=o("FlaxRoFormerModel"),M7r=o(" (RoFormer model)"),E7r=l(),R7=a("li"),w3e=a("strong"),C7r=o("t5"),w7r=o(" \u2014 "),GQ=a("a"),A7r=o("FlaxT5Model"),y7r=o(" (T5 model)"),L7r=l(),B7=a("li"),A3e=a("strong"),x7r=o("vision-text-dual-encoder"),k7r=o(" \u2014 "),OQ=a("a"),S7r=o("FlaxVisionTextDualEncoderModel"),R7r=o(" (VisionTextDualEncoder model)"),B7r=l(),P7=a("li"),y3e=a("strong"),P7r=o("vit"),$7r=o(" \u2014 "),VQ=a("a"),I7r=o("FlaxViTModel"),q7r=o(" (ViT model)"),N7r=l(),$7=a("li"),L3e=a("strong"),j7r=o("wav2vec2"),D7r=o(" \u2014 "),XQ=a("a"),G7r=o("FlaxWav2Vec2Model"),O7r=o(" (Wav2Vec2 model)"),V7r=l(),I7=a("li"),x3e=a("strong"),X7r=o("xglm"),z7r=o(" \u2014 "),zQ=a("a"),Q7r=o("FlaxXGLMModel"),W7r=o(" (XGLM model)"),H7r=l(),q7=a("li"),k3e=a("strong"),U7r=o("xlm-roberta"),J7r=o(" \u2014 "),QQ=a("a"),Y7r=o("FlaxXLMRobertaModel"),K7r=o(" (XLM-RoBERTa model)"),Z7r=l(),S3e=a("p"),eMr=o("Examples:"),oMr=l(),f(Dy.$$.fragment),vBe=l(),of=a("h2"),N7=a("a"),R3e=a("span"),f(Gy.$$.fragment),rMr=l(),B3e=a("span"),tMr=o("FlaxAutoModelForCausalLM"),TBe=l(),Br=a("div"),f(Oy.$$.fragment),aMr=l(),rf=a("p"),nMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WQ=a("a"),sMr=o("from_pretrained()"),lMr=o(" class method or the "),HQ=a("a"),iMr=o("from_config()"),dMr=o(` class
method.`),cMr=l(),Vy=a("p"),fMr=o("This class cannot be instantiated directly using "),P3e=a("code"),mMr=o("__init__()"),gMr=o(" (throws an error)."),hMr=l(),yt=a("div"),f(Xy.$$.fragment),pMr=l(),$3e=a("p"),_Mr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uMr=l(),tf=a("p"),bMr=o(`Note:
Loading a model from its configuration file does `),I3e=a("strong"),FMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),TMr=o("from_pretrained()"),MMr=o(" to load the model weights."),EMr=l(),q3e=a("p"),CMr=o("Examples:"),wMr=l(),f(zy.$$.fragment),AMr=l(),Lo=a("div"),f(Qy.$$.fragment),yMr=l(),N3e=a("p"),LMr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xMr=l(),kn=a("p"),kMr=o("The model class to instantiate is selected based on the "),j3e=a("code"),SMr=o("model_type"),RMr=o(` property of the config object (either
passed as an argument or loaded from `),D3e=a("code"),BMr=o("pretrained_model_name_or_path"),PMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=a("code"),$Mr=o("pretrained_model_name_or_path"),IMr=o(":"),qMr=l(),ca=a("ul"),j7=a("li"),O3e=a("strong"),NMr=o("bart"),jMr=o(" \u2014 "),JQ=a("a"),DMr=o("FlaxBartForCausalLM"),GMr=o(" (BART model)"),OMr=l(),D7=a("li"),V3e=a("strong"),VMr=o("gpt2"),XMr=o(" \u2014 "),YQ=a("a"),zMr=o("FlaxGPT2LMHeadModel"),QMr=o(" (OpenAI GPT-2 model)"),WMr=l(),G7=a("li"),X3e=a("strong"),HMr=o("gpt_neo"),UMr=o(" \u2014 "),KQ=a("a"),JMr=o("FlaxGPTNeoForCausalLM"),YMr=o(" (GPT Neo model)"),KMr=l(),O7=a("li"),z3e=a("strong"),ZMr=o("gptj"),eEr=o(" \u2014 "),ZQ=a("a"),oEr=o("FlaxGPTJForCausalLM"),rEr=o(" (GPT-J model)"),tEr=l(),V7=a("li"),Q3e=a("strong"),aEr=o("xglm"),nEr=o(" \u2014 "),eW=a("a"),sEr=o("FlaxXGLMForCausalLM"),lEr=o(" (XGLM model)"),iEr=l(),W3e=a("p"),dEr=o("Examples:"),cEr=l(),f(Wy.$$.fragment),MBe=l(),af=a("h2"),X7=a("a"),H3e=a("span"),f(Hy.$$.fragment),fEr=l(),U3e=a("span"),mEr=o("FlaxAutoModelForPreTraining"),EBe=l(),Pr=a("div"),f(Uy.$$.fragment),gEr=l(),nf=a("p"),hEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oW=a("a"),pEr=o("from_pretrained()"),_Er=o(" class method or the "),rW=a("a"),uEr=o("from_config()"),bEr=o(` class
method.`),FEr=l(),Jy=a("p"),vEr=o("This class cannot be instantiated directly using "),J3e=a("code"),TEr=o("__init__()"),MEr=o(" (throws an error)."),EEr=l(),Lt=a("div"),f(Yy.$$.fragment),CEr=l(),Y3e=a("p"),wEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),AEr=l(),sf=a("p"),yEr=o(`Note:
Loading a model from its configuration file does `),K3e=a("strong"),LEr=o("not"),xEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),kEr=o("from_pretrained()"),SEr=o(" to load the model weights."),REr=l(),Z3e=a("p"),BEr=o("Examples:"),PEr=l(),f(Ky.$$.fragment),$Er=l(),xo=a("div"),f(Zy.$$.fragment),IEr=l(),e2e=a("p"),qEr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NEr=l(),Sn=a("p"),jEr=o("The model class to instantiate is selected based on the "),o2e=a("code"),DEr=o("model_type"),GEr=o(` property of the config object (either
passed as an argument or loaded from `),r2e=a("code"),OEr=o("pretrained_model_name_or_path"),VEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=a("code"),XEr=o("pretrained_model_name_or_path"),zEr=o(":"),QEr=l(),fe=a("ul"),z7=a("li"),a2e=a("strong"),WEr=o("albert"),HEr=o(" \u2014 "),aW=a("a"),UEr=o("FlaxAlbertForPreTraining"),JEr=o(" (ALBERT model)"),YEr=l(),Q7=a("li"),n2e=a("strong"),KEr=o("bart"),ZEr=o(" \u2014 "),nW=a("a"),eCr=o("FlaxBartForConditionalGeneration"),oCr=o(" (BART model)"),rCr=l(),W7=a("li"),s2e=a("strong"),tCr=o("bert"),aCr=o(" \u2014 "),sW=a("a"),nCr=o("FlaxBertForPreTraining"),sCr=o(" (BERT model)"),lCr=l(),H7=a("li"),l2e=a("strong"),iCr=o("big_bird"),dCr=o(" \u2014 "),lW=a("a"),cCr=o("FlaxBigBirdForPreTraining"),fCr=o(" (BigBird model)"),mCr=l(),U7=a("li"),i2e=a("strong"),gCr=o("electra"),hCr=o(" \u2014 "),iW=a("a"),pCr=o("FlaxElectraForPreTraining"),_Cr=o(" (ELECTRA model)"),uCr=l(),J7=a("li"),d2e=a("strong"),bCr=o("mbart"),FCr=o(" \u2014 "),dW=a("a"),vCr=o("FlaxMBartForConditionalGeneration"),TCr=o(" (mBART model)"),MCr=l(),Y7=a("li"),c2e=a("strong"),ECr=o("mt5"),CCr=o(" \u2014 "),cW=a("a"),wCr=o("FlaxMT5ForConditionalGeneration"),ACr=o(" (mT5 model)"),yCr=l(),K7=a("li"),f2e=a("strong"),LCr=o("roberta"),xCr=o(" \u2014 "),fW=a("a"),kCr=o("FlaxRobertaForMaskedLM"),SCr=o(" (RoBERTa model)"),RCr=l(),Z7=a("li"),m2e=a("strong"),BCr=o("roformer"),PCr=o(" \u2014 "),mW=a("a"),$Cr=o("FlaxRoFormerForMaskedLM"),ICr=o(" (RoFormer model)"),qCr=l(),eM=a("li"),g2e=a("strong"),NCr=o("t5"),jCr=o(" \u2014 "),gW=a("a"),DCr=o("FlaxT5ForConditionalGeneration"),GCr=o(" (T5 model)"),OCr=l(),oM=a("li"),h2e=a("strong"),VCr=o("wav2vec2"),XCr=o(" \u2014 "),hW=a("a"),zCr=o("FlaxWav2Vec2ForPreTraining"),QCr=o(" (Wav2Vec2 model)"),WCr=l(),rM=a("li"),p2e=a("strong"),HCr=o("xlm-roberta"),UCr=o(" \u2014 "),pW=a("a"),JCr=o("FlaxXLMRobertaForMaskedLM"),YCr=o(" (XLM-RoBERTa model)"),KCr=l(),_2e=a("p"),ZCr=o("Examples:"),e5r=l(),f(eL.$$.fragment),CBe=l(),lf=a("h2"),tM=a("a"),u2e=a("span"),f(oL.$$.fragment),o5r=l(),b2e=a("span"),r5r=o("FlaxAutoModelForMaskedLM"),wBe=l(),$r=a("div"),f(rL.$$.fragment),t5r=l(),df=a("p"),a5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_W=a("a"),n5r=o("from_pretrained()"),s5r=o(" class method or the "),uW=a("a"),l5r=o("from_config()"),i5r=o(` class
method.`),d5r=l(),tL=a("p"),c5r=o("This class cannot be instantiated directly using "),F2e=a("code"),f5r=o("__init__()"),m5r=o(" (throws an error)."),g5r=l(),xt=a("div"),f(aL.$$.fragment),h5r=l(),v2e=a("p"),p5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_5r=l(),cf=a("p"),u5r=o(`Note:
Loading a model from its configuration file does `),T2e=a("strong"),b5r=o("not"),F5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),v5r=o("from_pretrained()"),T5r=o(" to load the model weights."),M5r=l(),M2e=a("p"),E5r=o("Examples:"),C5r=l(),f(nL.$$.fragment),w5r=l(),ko=a("div"),f(sL.$$.fragment),A5r=l(),E2e=a("p"),y5r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L5r=l(),Rn=a("p"),x5r=o("The model class to instantiate is selected based on the "),C2e=a("code"),k5r=o("model_type"),S5r=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),R5r=o("pretrained_model_name_or_path"),B5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),P5r=o("pretrained_model_name_or_path"),$5r=o(":"),I5r=l(),be=a("ul"),aM=a("li"),y2e=a("strong"),q5r=o("albert"),N5r=o(" \u2014 "),FW=a("a"),j5r=o("FlaxAlbertForMaskedLM"),D5r=o(" (ALBERT model)"),G5r=l(),nM=a("li"),L2e=a("strong"),O5r=o("bart"),V5r=o(" \u2014 "),vW=a("a"),X5r=o("FlaxBartForConditionalGeneration"),z5r=o(" (BART model)"),Q5r=l(),sM=a("li"),x2e=a("strong"),W5r=o("bert"),H5r=o(" \u2014 "),TW=a("a"),U5r=o("FlaxBertForMaskedLM"),J5r=o(" (BERT model)"),Y5r=l(),lM=a("li"),k2e=a("strong"),K5r=o("big_bird"),Z5r=o(" \u2014 "),MW=a("a"),ewr=o("FlaxBigBirdForMaskedLM"),owr=o(" (BigBird model)"),rwr=l(),iM=a("li"),S2e=a("strong"),twr=o("distilbert"),awr=o(" \u2014 "),EW=a("a"),nwr=o("FlaxDistilBertForMaskedLM"),swr=o(" (DistilBERT model)"),lwr=l(),dM=a("li"),R2e=a("strong"),iwr=o("electra"),dwr=o(" \u2014 "),CW=a("a"),cwr=o("FlaxElectraForMaskedLM"),fwr=o(" (ELECTRA model)"),mwr=l(),cM=a("li"),B2e=a("strong"),gwr=o("mbart"),hwr=o(" \u2014 "),wW=a("a"),pwr=o("FlaxMBartForConditionalGeneration"),_wr=o(" (mBART model)"),uwr=l(),fM=a("li"),P2e=a("strong"),bwr=o("roberta"),Fwr=o(" \u2014 "),AW=a("a"),vwr=o("FlaxRobertaForMaskedLM"),Twr=o(" (RoBERTa model)"),Mwr=l(),mM=a("li"),$2e=a("strong"),Ewr=o("roformer"),Cwr=o(" \u2014 "),yW=a("a"),wwr=o("FlaxRoFormerForMaskedLM"),Awr=o(" (RoFormer model)"),ywr=l(),gM=a("li"),I2e=a("strong"),Lwr=o("xlm-roberta"),xwr=o(" \u2014 "),LW=a("a"),kwr=o("FlaxXLMRobertaForMaskedLM"),Swr=o(" (XLM-RoBERTa model)"),Rwr=l(),q2e=a("p"),Bwr=o("Examples:"),Pwr=l(),f(lL.$$.fragment),ABe=l(),ff=a("h2"),hM=a("a"),N2e=a("span"),f(iL.$$.fragment),$wr=l(),j2e=a("span"),Iwr=o("FlaxAutoModelForSeq2SeqLM"),yBe=l(),Ir=a("div"),f(dL.$$.fragment),qwr=l(),mf=a("p"),Nwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xW=a("a"),jwr=o("from_pretrained()"),Dwr=o(" class method or the "),kW=a("a"),Gwr=o("from_config()"),Owr=o(` class
method.`),Vwr=l(),cL=a("p"),Xwr=o("This class cannot be instantiated directly using "),D2e=a("code"),zwr=o("__init__()"),Qwr=o(" (throws an error)."),Wwr=l(),kt=a("div"),f(fL.$$.fragment),Hwr=l(),G2e=a("p"),Uwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jwr=l(),gf=a("p"),Ywr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),Kwr=o("not"),Zwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=a("a"),eAr=o("from_pretrained()"),oAr=o(" to load the model weights."),rAr=l(),V2e=a("p"),tAr=o("Examples:"),aAr=l(),f(mL.$$.fragment),nAr=l(),So=a("div"),f(gL.$$.fragment),sAr=l(),X2e=a("p"),lAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iAr=l(),Bn=a("p"),dAr=o("The model class to instantiate is selected based on the "),z2e=a("code"),cAr=o("model_type"),fAr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),mAr=o("pretrained_model_name_or_path"),gAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),hAr=o("pretrained_model_name_or_path"),pAr=o(":"),_Ar=l(),Ee=a("ul"),pM=a("li"),H2e=a("strong"),uAr=o("bart"),bAr=o(" \u2014 "),RW=a("a"),FAr=o("FlaxBartForConditionalGeneration"),vAr=o(" (BART model)"),TAr=l(),_M=a("li"),U2e=a("strong"),MAr=o("blenderbot"),EAr=o(" \u2014 "),BW=a("a"),CAr=o("FlaxBlenderbotForConditionalGeneration"),wAr=o(" (Blenderbot model)"),AAr=l(),uM=a("li"),J2e=a("strong"),yAr=o("blenderbot-small"),LAr=o(" \u2014 "),PW=a("a"),xAr=o("FlaxBlenderbotSmallForConditionalGeneration"),kAr=o(" (BlenderbotSmall model)"),SAr=l(),bM=a("li"),Y2e=a("strong"),RAr=o("encoder-decoder"),BAr=o(" \u2014 "),$W=a("a"),PAr=o("FlaxEncoderDecoderModel"),$Ar=o(" (Encoder decoder model)"),IAr=l(),FM=a("li"),K2e=a("strong"),qAr=o("marian"),NAr=o(" \u2014 "),IW=a("a"),jAr=o("FlaxMarianMTModel"),DAr=o(" (Marian model)"),GAr=l(),vM=a("li"),Z2e=a("strong"),OAr=o("mbart"),VAr=o(" \u2014 "),qW=a("a"),XAr=o("FlaxMBartForConditionalGeneration"),zAr=o(" (mBART model)"),QAr=l(),TM=a("li"),eFe=a("strong"),WAr=o("mt5"),HAr=o(" \u2014 "),NW=a("a"),UAr=o("FlaxMT5ForConditionalGeneration"),JAr=o(" (mT5 model)"),YAr=l(),MM=a("li"),oFe=a("strong"),KAr=o("pegasus"),ZAr=o(" \u2014 "),jW=a("a"),e0r=o("FlaxPegasusForConditionalGeneration"),o0r=o(" (Pegasus model)"),r0r=l(),EM=a("li"),rFe=a("strong"),t0r=o("t5"),a0r=o(" \u2014 "),DW=a("a"),n0r=o("FlaxT5ForConditionalGeneration"),s0r=o(" (T5 model)"),l0r=l(),tFe=a("p"),i0r=o("Examples:"),d0r=l(),f(hL.$$.fragment),LBe=l(),hf=a("h2"),CM=a("a"),aFe=a("span"),f(pL.$$.fragment),c0r=l(),nFe=a("span"),f0r=o("FlaxAutoModelForSequenceClassification"),xBe=l(),qr=a("div"),f(_L.$$.fragment),m0r=l(),pf=a("p"),g0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GW=a("a"),h0r=o("from_pretrained()"),p0r=o(" class method or the "),OW=a("a"),_0r=o("from_config()"),u0r=o(` class
method.`),b0r=l(),uL=a("p"),F0r=o("This class cannot be instantiated directly using "),sFe=a("code"),v0r=o("__init__()"),T0r=o(" (throws an error)."),M0r=l(),St=a("div"),f(bL.$$.fragment),E0r=l(),lFe=a("p"),C0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),w0r=l(),_f=a("p"),A0r=o(`Note:
Loading a model from its configuration file does `),iFe=a("strong"),y0r=o("not"),L0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),x0r=o("from_pretrained()"),k0r=o(" to load the model weights."),S0r=l(),dFe=a("p"),R0r=o("Examples:"),B0r=l(),f(FL.$$.fragment),P0r=l(),Ro=a("div"),f(vL.$$.fragment),$0r=l(),cFe=a("p"),I0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q0r=l(),Pn=a("p"),N0r=o("The model class to instantiate is selected based on the "),fFe=a("code"),j0r=o("model_type"),D0r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),G0r=o("pretrained_model_name_or_path"),O0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=a("code"),V0r=o("pretrained_model_name_or_path"),X0r=o(":"),z0r=l(),Fe=a("ul"),wM=a("li"),hFe=a("strong"),Q0r=o("albert"),W0r=o(" \u2014 "),XW=a("a"),H0r=o("FlaxAlbertForSequenceClassification"),U0r=o(" (ALBERT model)"),J0r=l(),AM=a("li"),pFe=a("strong"),Y0r=o("bart"),K0r=o(" \u2014 "),zW=a("a"),Z0r=o("FlaxBartForSequenceClassification"),eyr=o(" (BART model)"),oyr=l(),yM=a("li"),_Fe=a("strong"),ryr=o("bert"),tyr=o(" \u2014 "),QW=a("a"),ayr=o("FlaxBertForSequenceClassification"),nyr=o(" (BERT model)"),syr=l(),LM=a("li"),uFe=a("strong"),lyr=o("big_bird"),iyr=o(" \u2014 "),WW=a("a"),dyr=o("FlaxBigBirdForSequenceClassification"),cyr=o(" (BigBird model)"),fyr=l(),xM=a("li"),bFe=a("strong"),myr=o("distilbert"),gyr=o(" \u2014 "),HW=a("a"),hyr=o("FlaxDistilBertForSequenceClassification"),pyr=o(" (DistilBERT model)"),_yr=l(),kM=a("li"),FFe=a("strong"),uyr=o("electra"),byr=o(" \u2014 "),UW=a("a"),Fyr=o("FlaxElectraForSequenceClassification"),vyr=o(" (ELECTRA model)"),Tyr=l(),SM=a("li"),vFe=a("strong"),Myr=o("mbart"),Eyr=o(" \u2014 "),JW=a("a"),Cyr=o("FlaxMBartForSequenceClassification"),wyr=o(" (mBART model)"),Ayr=l(),RM=a("li"),TFe=a("strong"),yyr=o("roberta"),Lyr=o(" \u2014 "),YW=a("a"),xyr=o("FlaxRobertaForSequenceClassification"),kyr=o(" (RoBERTa model)"),Syr=l(),BM=a("li"),MFe=a("strong"),Ryr=o("roformer"),Byr=o(" \u2014 "),KW=a("a"),Pyr=o("FlaxRoFormerForSequenceClassification"),$yr=o(" (RoFormer model)"),Iyr=l(),PM=a("li"),EFe=a("strong"),qyr=o("xlm-roberta"),Nyr=o(" \u2014 "),ZW=a("a"),jyr=o("FlaxXLMRobertaForSequenceClassification"),Dyr=o(" (XLM-RoBERTa model)"),Gyr=l(),CFe=a("p"),Oyr=o("Examples:"),Vyr=l(),f(TL.$$.fragment),kBe=l(),uf=a("h2"),$M=a("a"),wFe=a("span"),f(ML.$$.fragment),Xyr=l(),AFe=a("span"),zyr=o("FlaxAutoModelForQuestionAnswering"),SBe=l(),Nr=a("div"),f(EL.$$.fragment),Qyr=l(),bf=a("p"),Wyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" class method or the "),oH=a("a"),Jyr=o("from_config()"),Yyr=o(` class
method.`),Kyr=l(),CL=a("p"),Zyr=o("This class cannot be instantiated directly using "),yFe=a("code"),eLr=o("__init__()"),oLr=o(" (throws an error)."),rLr=l(),Rt=a("div"),f(wL.$$.fragment),tLr=l(),LFe=a("p"),aLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nLr=l(),Ff=a("p"),sLr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),lLr=o("not"),iLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),dLr=o("from_pretrained()"),cLr=o(" to load the model weights."),fLr=l(),kFe=a("p"),mLr=o("Examples:"),gLr=l(),f(AL.$$.fragment),hLr=l(),Bo=a("div"),f(yL.$$.fragment),pLr=l(),SFe=a("p"),_Lr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),uLr=l(),$n=a("p"),bLr=o("The model class to instantiate is selected based on the "),RFe=a("code"),FLr=o("model_type"),vLr=o(` property of the config object (either
passed as an argument or loaded from `),BFe=a("code"),TLr=o("pretrained_model_name_or_path"),MLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(":"),wLr=l(),ve=a("ul"),IM=a("li"),$Fe=a("strong"),ALr=o("albert"),yLr=o(" \u2014 "),tH=a("a"),LLr=o("FlaxAlbertForQuestionAnswering"),xLr=o(" (ALBERT model)"),kLr=l(),qM=a("li"),IFe=a("strong"),SLr=o("bart"),RLr=o(" \u2014 "),aH=a("a"),BLr=o("FlaxBartForQuestionAnswering"),PLr=o(" (BART model)"),$Lr=l(),NM=a("li"),qFe=a("strong"),ILr=o("bert"),qLr=o(" \u2014 "),nH=a("a"),NLr=o("FlaxBertForQuestionAnswering"),jLr=o(" (BERT model)"),DLr=l(),jM=a("li"),NFe=a("strong"),GLr=o("big_bird"),OLr=o(" \u2014 "),sH=a("a"),VLr=o("FlaxBigBirdForQuestionAnswering"),XLr=o(" (BigBird model)"),zLr=l(),DM=a("li"),jFe=a("strong"),QLr=o("distilbert"),WLr=o(" \u2014 "),lH=a("a"),HLr=o("FlaxDistilBertForQuestionAnswering"),ULr=o(" (DistilBERT model)"),JLr=l(),GM=a("li"),DFe=a("strong"),YLr=o("electra"),KLr=o(" \u2014 "),iH=a("a"),ZLr=o("FlaxElectraForQuestionAnswering"),e8r=o(" (ELECTRA model)"),o8r=l(),OM=a("li"),GFe=a("strong"),r8r=o("mbart"),t8r=o(" \u2014 "),dH=a("a"),a8r=o("FlaxMBartForQuestionAnswering"),n8r=o(" (mBART model)"),s8r=l(),VM=a("li"),OFe=a("strong"),l8r=o("roberta"),i8r=o(" \u2014 "),cH=a("a"),d8r=o("FlaxRobertaForQuestionAnswering"),c8r=o(" (RoBERTa model)"),f8r=l(),XM=a("li"),VFe=a("strong"),m8r=o("roformer"),g8r=o(" \u2014 "),fH=a("a"),h8r=o("FlaxRoFormerForQuestionAnswering"),p8r=o(" (RoFormer model)"),_8r=l(),zM=a("li"),XFe=a("strong"),u8r=o("xlm-roberta"),b8r=o(" \u2014 "),mH=a("a"),F8r=o("FlaxXLMRobertaForQuestionAnswering"),v8r=o(" (XLM-RoBERTa model)"),T8r=l(),zFe=a("p"),M8r=o("Examples:"),E8r=l(),f(LL.$$.fragment),RBe=l(),vf=a("h2"),QM=a("a"),QFe=a("span"),f(xL.$$.fragment),C8r=l(),WFe=a("span"),w8r=o("FlaxAutoModelForTokenClassification"),BBe=l(),jr=a("div"),f(kL.$$.fragment),A8r=l(),Tf=a("p"),y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gH=a("a"),L8r=o("from_pretrained()"),x8r=o(" class method or the "),hH=a("a"),k8r=o("from_config()"),S8r=o(` class
method.`),R8r=l(),SL=a("p"),B8r=o("This class cannot be instantiated directly using "),HFe=a("code"),P8r=o("__init__()"),$8r=o(" (throws an error)."),I8r=l(),Bt=a("div"),f(RL.$$.fragment),q8r=l(),UFe=a("p"),N8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),j8r=l(),Mf=a("p"),D8r=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),G8r=o("not"),O8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),V8r=o("from_pretrained()"),X8r=o(" to load the model weights."),z8r=l(),YFe=a("p"),Q8r=o("Examples:"),W8r=l(),f(BL.$$.fragment),H8r=l(),Po=a("div"),f(PL.$$.fragment),U8r=l(),KFe=a("p"),J8r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y8r=l(),In=a("p"),K8r=o("The model class to instantiate is selected based on the "),ZFe=a("code"),Z8r=o("model_type"),e9r=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),o9r=o("pretrained_model_name_or_path"),r9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),t9r=o("pretrained_model_name_or_path"),a9r=o(":"),n9r=l(),Be=a("ul"),WM=a("li"),rve=a("strong"),s9r=o("albert"),l9r=o(" \u2014 "),_H=a("a"),i9r=o("FlaxAlbertForTokenClassification"),d9r=o(" (ALBERT model)"),c9r=l(),HM=a("li"),tve=a("strong"),f9r=o("bert"),m9r=o(" \u2014 "),uH=a("a"),g9r=o("FlaxBertForTokenClassification"),h9r=o(" (BERT model)"),p9r=l(),UM=a("li"),ave=a("strong"),_9r=o("big_bird"),u9r=o(" \u2014 "),bH=a("a"),b9r=o("FlaxBigBirdForTokenClassification"),F9r=o(" (BigBird model)"),v9r=l(),JM=a("li"),nve=a("strong"),T9r=o("distilbert"),M9r=o(" \u2014 "),FH=a("a"),E9r=o("FlaxDistilBertForTokenClassification"),C9r=o(" (DistilBERT model)"),w9r=l(),YM=a("li"),sve=a("strong"),A9r=o("electra"),y9r=o(" \u2014 "),vH=a("a"),L9r=o("FlaxElectraForTokenClassification"),x9r=o(" (ELECTRA model)"),k9r=l(),KM=a("li"),lve=a("strong"),S9r=o("roberta"),R9r=o(" \u2014 "),TH=a("a"),B9r=o("FlaxRobertaForTokenClassification"),P9r=o(" (RoBERTa model)"),$9r=l(),ZM=a("li"),ive=a("strong"),I9r=o("roformer"),q9r=o(" \u2014 "),MH=a("a"),N9r=o("FlaxRoFormerForTokenClassification"),j9r=o(" (RoFormer model)"),D9r=l(),eE=a("li"),dve=a("strong"),G9r=o("xlm-roberta"),O9r=o(" \u2014 "),EH=a("a"),V9r=o("FlaxXLMRobertaForTokenClassification"),X9r=o(" (XLM-RoBERTa model)"),z9r=l(),cve=a("p"),Q9r=o("Examples:"),W9r=l(),f($L.$$.fragment),PBe=l(),Ef=a("h2"),oE=a("a"),fve=a("span"),f(IL.$$.fragment),H9r=l(),mve=a("span"),U9r=o("FlaxAutoModelForMultipleChoice"),$Be=l(),Dr=a("div"),f(qL.$$.fragment),J9r=l(),Cf=a("p"),Y9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=a("a"),K9r=o("from_pretrained()"),Z9r=o(" class method or the "),wH=a("a"),exr=o("from_config()"),oxr=o(` class
method.`),rxr=l(),NL=a("p"),txr=o("This class cannot be instantiated directly using "),gve=a("code"),axr=o("__init__()"),nxr=o(" (throws an error)."),sxr=l(),Pt=a("div"),f(jL.$$.fragment),lxr=l(),hve=a("p"),ixr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dxr=l(),wf=a("p"),cxr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),fxr=o("not"),mxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),gxr=o("from_pretrained()"),hxr=o(" to load the model weights."),pxr=l(),_ve=a("p"),_xr=o("Examples:"),uxr=l(),f(DL.$$.fragment),bxr=l(),$o=a("div"),f(GL.$$.fragment),Fxr=l(),uve=a("p"),vxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Txr=l(),qn=a("p"),Mxr=o("The model class to instantiate is selected based on the "),bve=a("code"),Exr=o("model_type"),Cxr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),wxr=o("pretrained_model_name_or_path"),Axr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=a("code"),yxr=o("pretrained_model_name_or_path"),Lxr=o(":"),xxr=l(),Pe=a("ul"),rE=a("li"),Tve=a("strong"),kxr=o("albert"),Sxr=o(" \u2014 "),yH=a("a"),Rxr=o("FlaxAlbertForMultipleChoice"),Bxr=o(" (ALBERT model)"),Pxr=l(),tE=a("li"),Mve=a("strong"),$xr=o("bert"),Ixr=o(" \u2014 "),LH=a("a"),qxr=o("FlaxBertForMultipleChoice"),Nxr=o(" (BERT model)"),jxr=l(),aE=a("li"),Eve=a("strong"),Dxr=o("big_bird"),Gxr=o(" \u2014 "),xH=a("a"),Oxr=o("FlaxBigBirdForMultipleChoice"),Vxr=o(" (BigBird model)"),Xxr=l(),nE=a("li"),Cve=a("strong"),zxr=o("distilbert"),Qxr=o(" \u2014 "),kH=a("a"),Wxr=o("FlaxDistilBertForMultipleChoice"),Hxr=o(" (DistilBERT model)"),Uxr=l(),sE=a("li"),wve=a("strong"),Jxr=o("electra"),Yxr=o(" \u2014 "),SH=a("a"),Kxr=o("FlaxElectraForMultipleChoice"),Zxr=o(" (ELECTRA model)"),ekr=l(),lE=a("li"),Ave=a("strong"),okr=o("roberta"),rkr=o(" \u2014 "),RH=a("a"),tkr=o("FlaxRobertaForMultipleChoice"),akr=o(" (RoBERTa model)"),nkr=l(),iE=a("li"),yve=a("strong"),skr=o("roformer"),lkr=o(" \u2014 "),BH=a("a"),ikr=o("FlaxRoFormerForMultipleChoice"),dkr=o(" (RoFormer model)"),ckr=l(),dE=a("li"),Lve=a("strong"),fkr=o("xlm-roberta"),mkr=o(" \u2014 "),PH=a("a"),gkr=o("FlaxXLMRobertaForMultipleChoice"),hkr=o(" (XLM-RoBERTa model)"),pkr=l(),xve=a("p"),_kr=o("Examples:"),ukr=l(),f(OL.$$.fragment),IBe=l(),Af=a("h2"),cE=a("a"),kve=a("span"),f(VL.$$.fragment),bkr=l(),Sve=a("span"),Fkr=o("FlaxAutoModelForNextSentencePrediction"),qBe=l(),Gr=a("div"),f(XL.$$.fragment),vkr=l(),yf=a("p"),Tkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$H=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" class method or the "),IH=a("a"),Ckr=o("from_config()"),wkr=o(` class
method.`),Akr=l(),zL=a("p"),ykr=o("This class cannot be instantiated directly using "),Rve=a("code"),Lkr=o("__init__()"),xkr=o(" (throws an error)."),kkr=l(),$t=a("div"),f(QL.$$.fragment),Skr=l(),Bve=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bkr=l(),Lf=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),$kr=o("not"),Ikr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=a("a"),qkr=o("from_pretrained()"),Nkr=o(" to load the model weights."),jkr=l(),$ve=a("p"),Dkr=o("Examples:"),Gkr=l(),f(WL.$$.fragment),Okr=l(),Io=a("div"),f(HL.$$.fragment),Vkr=l(),Ive=a("p"),Xkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),zkr=l(),Nn=a("p"),Qkr=o("The model class to instantiate is selected based on the "),qve=a("code"),Wkr=o("model_type"),Hkr=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),Ukr=o("pretrained_model_name_or_path"),Jkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),Ykr=o("pretrained_model_name_or_path"),Kkr=o(":"),Zkr=l(),Dve=a("ul"),fE=a("li"),Gve=a("strong"),eSr=o("bert"),oSr=o(" \u2014 "),NH=a("a"),rSr=o("FlaxBertForNextSentencePrediction"),tSr=o(" (BERT model)"),aSr=l(),Ove=a("p"),nSr=o("Examples:"),sSr=l(),f(UL.$$.fragment),NBe=l(),xf=a("h2"),mE=a("a"),Vve=a("span"),f(JL.$$.fragment),lSr=l(),Xve=a("span"),iSr=o("FlaxAutoModelForImageClassification"),jBe=l(),Or=a("div"),f(YL.$$.fragment),dSr=l(),kf=a("p"),cSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jH=a("a"),fSr=o("from_pretrained()"),mSr=o(" class method or the "),DH=a("a"),gSr=o("from_config()"),hSr=o(` class
method.`),pSr=l(),KL=a("p"),_Sr=o("This class cannot be instantiated directly using "),zve=a("code"),uSr=o("__init__()"),bSr=o(" (throws an error)."),FSr=l(),It=a("div"),f(ZL.$$.fragment),vSr=l(),Qve=a("p"),TSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),MSr=l(),Sf=a("p"),ESr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),CSr=o("not"),wSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=a("a"),ASr=o("from_pretrained()"),ySr=o(" to load the model weights."),LSr=l(),Hve=a("p"),xSr=o("Examples:"),kSr=l(),f(e8.$$.fragment),SSr=l(),qo=a("div"),f(o8.$$.fragment),RSr=l(),Uve=a("p"),BSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PSr=l(),jn=a("p"),$Sr=o("The model class to instantiate is selected based on the "),Jve=a("code"),ISr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),r8=a("ul"),gE=a("li"),Zve=a("strong"),VSr=o("beit"),XSr=o(" \u2014 "),OH=a("a"),zSr=o("FlaxBeitForImageClassification"),QSr=o(" (BEiT model)"),WSr=l(),hE=a("li"),e6e=a("strong"),HSr=o("vit"),USr=o(" \u2014 "),VH=a("a"),JSr=o("FlaxViTForImageClassification"),YSr=o(" (ViT model)"),KSr=l(),o6e=a("p"),ZSr=o("Examples:"),eRr=l(),f(t8.$$.fragment),DBe=l(),Rf=a("h2"),pE=a("a"),r6e=a("span"),f(a8.$$.fragment),oRr=l(),t6e=a("span"),rRr=o("FlaxAutoModelForVision2Seq"),GBe=l(),Vr=a("div"),f(n8.$$.fragment),tRr=l(),Bf=a("p"),aRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XH=a("a"),nRr=o("from_pretrained()"),sRr=o(" class method or the "),zH=a("a"),lRr=o("from_config()"),iRr=o(` class
method.`),dRr=l(),s8=a("p"),cRr=o("This class cannot be instantiated directly using "),a6e=a("code"),fRr=o("__init__()"),mRr=o(" (throws an error)."),gRr=l(),qt=a("div"),f(l8.$$.fragment),hRr=l(),n6e=a("p"),pRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_Rr=l(),Pf=a("p"),uRr=o(`Note:
Loading a model from its configuration file does `),s6e=a("strong"),bRr=o("not"),FRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),vRr=o("from_pretrained()"),TRr=o(" to load the model weights."),MRr=l(),l6e=a("p"),ERr=o("Examples:"),CRr=l(),f(i8.$$.fragment),wRr=l(),No=a("div"),f(d8.$$.fragment),ARr=l(),i6e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),LRr=l(),Dn=a("p"),xRr=o("The model class to instantiate is selected based on the "),d6e=a("code"),kRr=o("model_type"),SRr=o(` property of the config object (either
passed as an argument or loaded from `),c6e=a("code"),RRr=o("pretrained_model_name_or_path"),BRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=a("code"),PRr=o("pretrained_model_name_or_path"),$Rr=o(":"),IRr=l(),m6e=a("ul"),_E=a("li"),g6e=a("strong"),qRr=o("vision-encoder-decoder"),NRr=o(" \u2014 "),WH=a("a"),jRr=o("FlaxVisionEncoderDecoderModel"),DRr=o(" (Vision Encoder decoder model)"),GRr=l(),h6e=a("p"),ORr=o("Examples:"),VRr=l(),f(c8.$$.fragment),this.h()},l(c){const u=cEt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var f8=s(de);Ce=n(f8,"A",{id:!0,class:!0,href:!0});var p6e=s(Ce);lo=n(p6e,"SPAN",{});var _6e=s(lo);m(me.$$.fragment,_6e),_6e.forEach(t),p6e.forEach(t),Me=i(f8),Xo=n(f8,"SPAN",{});var zRr=s(Xo);Ii=r(zRr,"Auto Classes"),zRr.forEach(t),f8.forEach(t),qf=i(c),fa=n(c,"P",{});var VBe=s(fa);qi=r(VBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ni=n(VBe,"CODE",{});var QRr=s(Ni);_C=r(QRr,"from_pretrained()"),QRr.forEach(t),Nf=r(VBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),VBe.forEach(t),xe=i(c),co=n(c,"P",{});var uE=s(co);ji=r(uE,"Instantiating one of "),Gn=n(uE,"A",{href:!0});var WRr=s(Gn);uC=r(WRr,"AutoConfig"),WRr.forEach(t),On=r(uE,", "),Vn=n(uE,"A",{href:!0});var HRr=s(Vn);bC=r(HRr,"AutoModel"),HRr.forEach(t),Di=r(uE,`, and
`),Xn=n(uE,"A",{href:!0});var URr=s(Xn);FC=r(URr,"AutoTokenizer"),URr.forEach(t),Gi=r(uE," will directly create a class of the relevant architecture. For instance"),uE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var XBe=s(_e);i9=r(XBe,"will create a model that is an instance of "),Oi=n(XBe,"A",{href:!0});var JRr=s(Oi);d9=r(JRr,"BertModel"),JRr.forEach(t),c9=r(XBe,"."),XBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var zBe=s(Ga);f9=r(zBe,"There is one class of "),Df=n(zBe,"CODE",{});var YRr=s(Df);m9=r(YRr,"AutoModel"),YRr.forEach(t),eIe=r(zBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),zBe.forEach(t),GSe=i(c),Vi=n(c,"H2",{class:!0});var QBe=s(Vi);Gf=n(QBe,"A",{id:!0,class:!0,href:!0});var KRr=s(Gf);GJ=n(KRr,"SPAN",{});var ZRr=s(GJ);m(vC.$$.fragment,ZRr),ZRr.forEach(t),KRr.forEach(t),oIe=i(QBe),OJ=n(QBe,"SPAN",{});var eBr=s(OJ);rIe=r(eBr,"Extending the Auto Classes"),eBr.forEach(t),QBe.forEach(t),OSe=i(c),zn=n(c,"P",{});var HH=s(zn);tIe=r(HH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),VJ=n(HH,"CODE",{});var oBr=s(VJ);aIe=r(oBr,"NewModel"),oBr.forEach(t),nIe=r(HH,", make sure you have a "),XJ=n(HH,"CODE",{});var rBr=s(XJ);sIe=r(rBr,"NewModelConfig"),rBr.forEach(t),lIe=r(HH,` then you can add those to the auto
classes like this:`),HH.forEach(t),VSe=i(c),m(TC.$$.fragment,c),XSe=i(c),g9=n(c,"P",{});var tBr=s(g9);iIe=r(tBr,"You will then be able to use the auto classes like you would usually do!"),tBr.forEach(t),zSe=i(c),m(Of.$$.fragment,c),QSe=i(c),Xi=n(c,"H2",{class:!0});var WBe=s(Xi);Vf=n(WBe,"A",{id:!0,class:!0,href:!0});var aBr=s(Vf);zJ=n(aBr,"SPAN",{});var nBr=s(zJ);m(MC.$$.fragment,nBr),nBr.forEach(t),aBr.forEach(t),dIe=i(WBe),QJ=n(WBe,"SPAN",{});var sBr=s(QJ);cIe=r(sBr,"AutoConfig"),sBr.forEach(t),WBe.forEach(t),WSe=i(c),Qo=n(c,"DIV",{class:!0});var Os=s(Qo);m(EC.$$.fragment,Os),fIe=i(Os),CC=n(Os,"P",{});var HBe=s(CC);mIe=r(HBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h9=n(HBe,"A",{href:!0});var lBr=s(h9);gIe=r(lBr,"from_pretrained()"),lBr.forEach(t),hIe=r(HBe," class method."),HBe.forEach(t),pIe=i(Os),wC=n(Os,"P",{});var UBe=s(wC);_Ie=r(UBe,"This class cannot be instantiated directly using "),WJ=n(UBe,"CODE",{});var iBr=s(WJ);uIe=r(iBr,"__init__()"),iBr.forEach(t),bIe=r(UBe," (throws an error)."),UBe.forEach(t),FIe=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(AC.$$.fragment,ga),vIe=i(ga),HJ=n(ga,"P",{});var dBr=s(HJ);TIe=r(dBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dBr.forEach(t),MIe=i(ga),zi=n(ga,"P",{});var UH=s(zi);EIe=r(UH,"The configuration class to instantiate is selected based on the "),UJ=n(UH,"CODE",{});var cBr=s(UJ);CIe=r(cBr,"model_type"),cBr.forEach(t),wIe=r(UH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),JJ=n(UH,"CODE",{});var fBr=s(JJ);AIe=r(fBr,"pretrained_model_name_or_path"),fBr.forEach(t),yIe=r(UH,":"),UH.forEach(t),LIe=i(ga),F=n(ga,"UL",{});var v=s(F);Xf=n(v,"LI",{});var u6e=s(Xf);YJ=n(u6e,"STRONG",{});var mBr=s(YJ);xIe=r(mBr,"albert"),mBr.forEach(t),kIe=r(u6e," \u2014 "),p9=n(u6e,"A",{href:!0});var gBr=s(p9);SIe=r(gBr,"AlbertConfig"),gBr.forEach(t),RIe=r(u6e," (ALBERT model)"),u6e.forEach(t),BIe=i(v),zf=n(v,"LI",{});var b6e=s(zf);KJ=n(b6e,"STRONG",{});var hBr=s(KJ);PIe=r(hBr,"bart"),hBr.forEach(t),$Ie=r(b6e," \u2014 "),_9=n(b6e,"A",{href:!0});var pBr=s(_9);IIe=r(pBr,"BartConfig"),pBr.forEach(t),qIe=r(b6e," (BART model)"),b6e.forEach(t),NIe=i(v),Qf=n(v,"LI",{});var F6e=s(Qf);ZJ=n(F6e,"STRONG",{});var _Br=s(ZJ);jIe=r(_Br,"beit"),_Br.forEach(t),DIe=r(F6e," \u2014 "),u9=n(F6e,"A",{href:!0});var uBr=s(u9);GIe=r(uBr,"BeitConfig"),uBr.forEach(t),OIe=r(F6e," (BEiT model)"),F6e.forEach(t),VIe=i(v),Wf=n(v,"LI",{});var v6e=s(Wf);eY=n(v6e,"STRONG",{});var bBr=s(eY);XIe=r(bBr,"bert"),bBr.forEach(t),zIe=r(v6e," \u2014 "),b9=n(v6e,"A",{href:!0});var FBr=s(b9);QIe=r(FBr,"BertConfig"),FBr.forEach(t),WIe=r(v6e," (BERT model)"),v6e.forEach(t),HIe=i(v),Hf=n(v,"LI",{});var T6e=s(Hf);oY=n(T6e,"STRONG",{});var vBr=s(oY);UIe=r(vBr,"bert-generation"),vBr.forEach(t),JIe=r(T6e," \u2014 "),F9=n(T6e,"A",{href:!0});var TBr=s(F9);YIe=r(TBr,"BertGenerationConfig"),TBr.forEach(t),KIe=r(T6e," (Bert Generation model)"),T6e.forEach(t),ZIe=i(v),Uf=n(v,"LI",{});var M6e=s(Uf);rY=n(M6e,"STRONG",{});var MBr=s(rY);eqe=r(MBr,"big_bird"),MBr.forEach(t),oqe=r(M6e," \u2014 "),v9=n(M6e,"A",{href:!0});var EBr=s(v9);rqe=r(EBr,"BigBirdConfig"),EBr.forEach(t),tqe=r(M6e," (BigBird model)"),M6e.forEach(t),aqe=i(v),Jf=n(v,"LI",{});var E6e=s(Jf);tY=n(E6e,"STRONG",{});var CBr=s(tY);nqe=r(CBr,"bigbird_pegasus"),CBr.forEach(t),sqe=r(E6e," \u2014 "),T9=n(E6e,"A",{href:!0});var wBr=s(T9);lqe=r(wBr,"BigBirdPegasusConfig"),wBr.forEach(t),iqe=r(E6e," (BigBirdPegasus model)"),E6e.forEach(t),dqe=i(v),Yf=n(v,"LI",{});var C6e=s(Yf);aY=n(C6e,"STRONG",{});var ABr=s(aY);cqe=r(ABr,"blenderbot"),ABr.forEach(t),fqe=r(C6e," \u2014 "),M9=n(C6e,"A",{href:!0});var yBr=s(M9);mqe=r(yBr,"BlenderbotConfig"),yBr.forEach(t),gqe=r(C6e," (Blenderbot model)"),C6e.forEach(t),hqe=i(v),Kf=n(v,"LI",{});var w6e=s(Kf);nY=n(w6e,"STRONG",{});var LBr=s(nY);pqe=r(LBr,"blenderbot-small"),LBr.forEach(t),_qe=r(w6e," \u2014 "),E9=n(w6e,"A",{href:!0});var xBr=s(E9);uqe=r(xBr,"BlenderbotSmallConfig"),xBr.forEach(t),bqe=r(w6e," (BlenderbotSmall model)"),w6e.forEach(t),Fqe=i(v),Zf=n(v,"LI",{});var A6e=s(Zf);sY=n(A6e,"STRONG",{});var kBr=s(sY);vqe=r(kBr,"camembert"),kBr.forEach(t),Tqe=r(A6e," \u2014 "),C9=n(A6e,"A",{href:!0});var SBr=s(C9);Mqe=r(SBr,"CamembertConfig"),SBr.forEach(t),Eqe=r(A6e," (CamemBERT model)"),A6e.forEach(t),Cqe=i(v),em=n(v,"LI",{});var y6e=s(em);lY=n(y6e,"STRONG",{});var RBr=s(lY);wqe=r(RBr,"canine"),RBr.forEach(t),Aqe=r(y6e," \u2014 "),w9=n(y6e,"A",{href:!0});var BBr=s(w9);yqe=r(BBr,"CanineConfig"),BBr.forEach(t),Lqe=r(y6e," (Canine model)"),y6e.forEach(t),xqe=i(v),om=n(v,"LI",{});var L6e=s(om);iY=n(L6e,"STRONG",{});var PBr=s(iY);kqe=r(PBr,"clip"),PBr.forEach(t),Sqe=r(L6e," \u2014 "),A9=n(L6e,"A",{href:!0});var $Br=s(A9);Rqe=r($Br,"CLIPConfig"),$Br.forEach(t),Bqe=r(L6e," (CLIP model)"),L6e.forEach(t),Pqe=i(v),rm=n(v,"LI",{});var x6e=s(rm);dY=n(x6e,"STRONG",{});var IBr=s(dY);$qe=r(IBr,"convbert"),IBr.forEach(t),Iqe=r(x6e," \u2014 "),y9=n(x6e,"A",{href:!0});var qBr=s(y9);qqe=r(qBr,"ConvBertConfig"),qBr.forEach(t),Nqe=r(x6e," (ConvBERT model)"),x6e.forEach(t),jqe=i(v),tm=n(v,"LI",{});var k6e=s(tm);cY=n(k6e,"STRONG",{});var NBr=s(cY);Dqe=r(NBr,"convnext"),NBr.forEach(t),Gqe=r(k6e," \u2014 "),L9=n(k6e,"A",{href:!0});var jBr=s(L9);Oqe=r(jBr,"ConvNextConfig"),jBr.forEach(t),Vqe=r(k6e," (ConvNext model)"),k6e.forEach(t),Xqe=i(v),am=n(v,"LI",{});var S6e=s(am);fY=n(S6e,"STRONG",{});var DBr=s(fY);zqe=r(DBr,"ctrl"),DBr.forEach(t),Qqe=r(S6e," \u2014 "),x9=n(S6e,"A",{href:!0});var GBr=s(x9);Wqe=r(GBr,"CTRLConfig"),GBr.forEach(t),Hqe=r(S6e," (CTRL model)"),S6e.forEach(t),Uqe=i(v),nm=n(v,"LI",{});var R6e=s(nm);mY=n(R6e,"STRONG",{});var OBr=s(mY);Jqe=r(OBr,"data2vec-audio"),OBr.forEach(t),Yqe=r(R6e," \u2014 "),k9=n(R6e,"A",{href:!0});var VBr=s(k9);Kqe=r(VBr,"Data2VecAudioConfig"),VBr.forEach(t),Zqe=r(R6e," (Data2VecAudio model)"),R6e.forEach(t),eNe=i(v),sm=n(v,"LI",{});var B6e=s(sm);gY=n(B6e,"STRONG",{});var XBr=s(gY);oNe=r(XBr,"data2vec-text"),XBr.forEach(t),rNe=r(B6e," \u2014 "),S9=n(B6e,"A",{href:!0});var zBr=s(S9);tNe=r(zBr,"Data2VecTextConfig"),zBr.forEach(t),aNe=r(B6e," (Data2VecText model)"),B6e.forEach(t),nNe=i(v),lm=n(v,"LI",{});var P6e=s(lm);hY=n(P6e,"STRONG",{});var QBr=s(hY);sNe=r(QBr,"deberta"),QBr.forEach(t),lNe=r(P6e," \u2014 "),R9=n(P6e,"A",{href:!0});var WBr=s(R9);iNe=r(WBr,"DebertaConfig"),WBr.forEach(t),dNe=r(P6e," (DeBERTa model)"),P6e.forEach(t),cNe=i(v),im=n(v,"LI",{});var $6e=s(im);pY=n($6e,"STRONG",{});var HBr=s(pY);fNe=r(HBr,"deberta-v2"),HBr.forEach(t),mNe=r($6e," \u2014 "),B9=n($6e,"A",{href:!0});var UBr=s(B9);gNe=r(UBr,"DebertaV2Config"),UBr.forEach(t),hNe=r($6e," (DeBERTa-v2 model)"),$6e.forEach(t),pNe=i(v),dm=n(v,"LI",{});var I6e=s(dm);_Y=n(I6e,"STRONG",{});var JBr=s(_Y);_Ne=r(JBr,"decision_transformer"),JBr.forEach(t),uNe=r(I6e," \u2014 "),P9=n(I6e,"A",{href:!0});var YBr=s(P9);bNe=r(YBr,"DecisionTransformerConfig"),YBr.forEach(t),FNe=r(I6e," (Decision Transformer model)"),I6e.forEach(t),vNe=i(v),cm=n(v,"LI",{});var q6e=s(cm);uY=n(q6e,"STRONG",{});var KBr=s(uY);TNe=r(KBr,"deit"),KBr.forEach(t),MNe=r(q6e," \u2014 "),$9=n(q6e,"A",{href:!0});var ZBr=s($9);ENe=r(ZBr,"DeiTConfig"),ZBr.forEach(t),CNe=r(q6e," (DeiT model)"),q6e.forEach(t),wNe=i(v),fm=n(v,"LI",{});var N6e=s(fm);bY=n(N6e,"STRONG",{});var ePr=s(bY);ANe=r(ePr,"detr"),ePr.forEach(t),yNe=r(N6e," \u2014 "),I9=n(N6e,"A",{href:!0});var oPr=s(I9);LNe=r(oPr,"DetrConfig"),oPr.forEach(t),xNe=r(N6e," (DETR model)"),N6e.forEach(t),kNe=i(v),mm=n(v,"LI",{});var j6e=s(mm);FY=n(j6e,"STRONG",{});var rPr=s(FY);SNe=r(rPr,"distilbert"),rPr.forEach(t),RNe=r(j6e," \u2014 "),q9=n(j6e,"A",{href:!0});var tPr=s(q9);BNe=r(tPr,"DistilBertConfig"),tPr.forEach(t),PNe=r(j6e," (DistilBERT model)"),j6e.forEach(t),$Ne=i(v),gm=n(v,"LI",{});var D6e=s(gm);vY=n(D6e,"STRONG",{});var aPr=s(vY);INe=r(aPr,"dpr"),aPr.forEach(t),qNe=r(D6e," \u2014 "),N9=n(D6e,"A",{href:!0});var nPr=s(N9);NNe=r(nPr,"DPRConfig"),nPr.forEach(t),jNe=r(D6e," (DPR model)"),D6e.forEach(t),DNe=i(v),hm=n(v,"LI",{});var G6e=s(hm);TY=n(G6e,"STRONG",{});var sPr=s(TY);GNe=r(sPr,"dpt"),sPr.forEach(t),ONe=r(G6e," \u2014 "),j9=n(G6e,"A",{href:!0});var lPr=s(j9);VNe=r(lPr,"DPTConfig"),lPr.forEach(t),XNe=r(G6e," (DPT model)"),G6e.forEach(t),zNe=i(v),pm=n(v,"LI",{});var O6e=s(pm);MY=n(O6e,"STRONG",{});var iPr=s(MY);QNe=r(iPr,"electra"),iPr.forEach(t),WNe=r(O6e," \u2014 "),D9=n(O6e,"A",{href:!0});var dPr=s(D9);HNe=r(dPr,"ElectraConfig"),dPr.forEach(t),UNe=r(O6e," (ELECTRA model)"),O6e.forEach(t),JNe=i(v),_m=n(v,"LI",{});var V6e=s(_m);EY=n(V6e,"STRONG",{});var cPr=s(EY);YNe=r(cPr,"encoder-decoder"),cPr.forEach(t),KNe=r(V6e," \u2014 "),G9=n(V6e,"A",{href:!0});var fPr=s(G9);ZNe=r(fPr,"EncoderDecoderConfig"),fPr.forEach(t),eje=r(V6e," (Encoder decoder model)"),V6e.forEach(t),oje=i(v),um=n(v,"LI",{});var X6e=s(um);CY=n(X6e,"STRONG",{});var mPr=s(CY);rje=r(mPr,"flaubert"),mPr.forEach(t),tje=r(X6e," \u2014 "),O9=n(X6e,"A",{href:!0});var gPr=s(O9);aje=r(gPr,"FlaubertConfig"),gPr.forEach(t),nje=r(X6e," (FlauBERT model)"),X6e.forEach(t),sje=i(v),bm=n(v,"LI",{});var z6e=s(bm);wY=n(z6e,"STRONG",{});var hPr=s(wY);lje=r(hPr,"fnet"),hPr.forEach(t),ije=r(z6e," \u2014 "),V9=n(z6e,"A",{href:!0});var pPr=s(V9);dje=r(pPr,"FNetConfig"),pPr.forEach(t),cje=r(z6e," (FNet model)"),z6e.forEach(t),fje=i(v),Fm=n(v,"LI",{});var Q6e=s(Fm);AY=n(Q6e,"STRONG",{});var _Pr=s(AY);mje=r(_Pr,"fsmt"),_Pr.forEach(t),gje=r(Q6e," \u2014 "),X9=n(Q6e,"A",{href:!0});var uPr=s(X9);hje=r(uPr,"FSMTConfig"),uPr.forEach(t),pje=r(Q6e," (FairSeq Machine-Translation model)"),Q6e.forEach(t),_je=i(v),vm=n(v,"LI",{});var W6e=s(vm);yY=n(W6e,"STRONG",{});var bPr=s(yY);uje=r(bPr,"funnel"),bPr.forEach(t),bje=r(W6e," \u2014 "),z9=n(W6e,"A",{href:!0});var FPr=s(z9);Fje=r(FPr,"FunnelConfig"),FPr.forEach(t),vje=r(W6e," (Funnel Transformer model)"),W6e.forEach(t),Tje=i(v),Tm=n(v,"LI",{});var H6e=s(Tm);LY=n(H6e,"STRONG",{});var vPr=s(LY);Mje=r(vPr,"glpn"),vPr.forEach(t),Eje=r(H6e," \u2014 "),Q9=n(H6e,"A",{href:!0});var TPr=s(Q9);Cje=r(TPr,"GLPNConfig"),TPr.forEach(t),wje=r(H6e," (GLPN model)"),H6e.forEach(t),Aje=i(v),Mm=n(v,"LI",{});var U6e=s(Mm);xY=n(U6e,"STRONG",{});var MPr=s(xY);yje=r(MPr,"gpt2"),MPr.forEach(t),Lje=r(U6e," \u2014 "),W9=n(U6e,"A",{href:!0});var EPr=s(W9);xje=r(EPr,"GPT2Config"),EPr.forEach(t),kje=r(U6e," (OpenAI GPT-2 model)"),U6e.forEach(t),Sje=i(v),Em=n(v,"LI",{});var J6e=s(Em);kY=n(J6e,"STRONG",{});var CPr=s(kY);Rje=r(CPr,"gpt_neo"),CPr.forEach(t),Bje=r(J6e," \u2014 "),H9=n(J6e,"A",{href:!0});var wPr=s(H9);Pje=r(wPr,"GPTNeoConfig"),wPr.forEach(t),$je=r(J6e," (GPT Neo model)"),J6e.forEach(t),Ije=i(v),Cm=n(v,"LI",{});var Y6e=s(Cm);SY=n(Y6e,"STRONG",{});var APr=s(SY);qje=r(APr,"gptj"),APr.forEach(t),Nje=r(Y6e," \u2014 "),U9=n(Y6e,"A",{href:!0});var yPr=s(U9);jje=r(yPr,"GPTJConfig"),yPr.forEach(t),Dje=r(Y6e," (GPT-J model)"),Y6e.forEach(t),Gje=i(v),wm=n(v,"LI",{});var K6e=s(wm);RY=n(K6e,"STRONG",{});var LPr=s(RY);Oje=r(LPr,"hubert"),LPr.forEach(t),Vje=r(K6e," \u2014 "),J9=n(K6e,"A",{href:!0});var xPr=s(J9);Xje=r(xPr,"HubertConfig"),xPr.forEach(t),zje=r(K6e," (Hubert model)"),K6e.forEach(t),Qje=i(v),Am=n(v,"LI",{});var Z6e=s(Am);BY=n(Z6e,"STRONG",{});var kPr=s(BY);Wje=r(kPr,"ibert"),kPr.forEach(t),Hje=r(Z6e," \u2014 "),Y9=n(Z6e,"A",{href:!0});var SPr=s(Y9);Uje=r(SPr,"IBertConfig"),SPr.forEach(t),Jje=r(Z6e," (I-BERT model)"),Z6e.forEach(t),Yje=i(v),ym=n(v,"LI",{});var eTe=s(ym);PY=n(eTe,"STRONG",{});var RPr=s(PY);Kje=r(RPr,"imagegpt"),RPr.forEach(t),Zje=r(eTe," \u2014 "),K9=n(eTe,"A",{href:!0});var BPr=s(K9);eDe=r(BPr,"ImageGPTConfig"),BPr.forEach(t),oDe=r(eTe," (ImageGPT model)"),eTe.forEach(t),rDe=i(v),Lm=n(v,"LI",{});var oTe=s(Lm);$Y=n(oTe,"STRONG",{});var PPr=s($Y);tDe=r(PPr,"layoutlm"),PPr.forEach(t),aDe=r(oTe," \u2014 "),Z9=n(oTe,"A",{href:!0});var $Pr=s(Z9);nDe=r($Pr,"LayoutLMConfig"),$Pr.forEach(t),sDe=r(oTe," (LayoutLM model)"),oTe.forEach(t),lDe=i(v),xm=n(v,"LI",{});var rTe=s(xm);IY=n(rTe,"STRONG",{});var IPr=s(IY);iDe=r(IPr,"layoutlmv2"),IPr.forEach(t),dDe=r(rTe," \u2014 "),ex=n(rTe,"A",{href:!0});var qPr=s(ex);cDe=r(qPr,"LayoutLMv2Config"),qPr.forEach(t),fDe=r(rTe," (LayoutLMv2 model)"),rTe.forEach(t),mDe=i(v),km=n(v,"LI",{});var tTe=s(km);qY=n(tTe,"STRONG",{});var NPr=s(qY);gDe=r(NPr,"led"),NPr.forEach(t),hDe=r(tTe," \u2014 "),ox=n(tTe,"A",{href:!0});var jPr=s(ox);pDe=r(jPr,"LEDConfig"),jPr.forEach(t),_De=r(tTe," (LED model)"),tTe.forEach(t),uDe=i(v),Sm=n(v,"LI",{});var aTe=s(Sm);NY=n(aTe,"STRONG",{});var DPr=s(NY);bDe=r(DPr,"longformer"),DPr.forEach(t),FDe=r(aTe," \u2014 "),rx=n(aTe,"A",{href:!0});var GPr=s(rx);vDe=r(GPr,"LongformerConfig"),GPr.forEach(t),TDe=r(aTe," (Longformer model)"),aTe.forEach(t),MDe=i(v),Rm=n(v,"LI",{});var nTe=s(Rm);jY=n(nTe,"STRONG",{});var OPr=s(jY);EDe=r(OPr,"luke"),OPr.forEach(t),CDe=r(nTe," \u2014 "),tx=n(nTe,"A",{href:!0});var VPr=s(tx);wDe=r(VPr,"LukeConfig"),VPr.forEach(t),ADe=r(nTe," (LUKE model)"),nTe.forEach(t),yDe=i(v),Bm=n(v,"LI",{});var sTe=s(Bm);DY=n(sTe,"STRONG",{});var XPr=s(DY);LDe=r(XPr,"lxmert"),XPr.forEach(t),xDe=r(sTe," \u2014 "),ax=n(sTe,"A",{href:!0});var zPr=s(ax);kDe=r(zPr,"LxmertConfig"),zPr.forEach(t),SDe=r(sTe," (LXMERT model)"),sTe.forEach(t),RDe=i(v),Pm=n(v,"LI",{});var lTe=s(Pm);GY=n(lTe,"STRONG",{});var QPr=s(GY);BDe=r(QPr,"m2m_100"),QPr.forEach(t),PDe=r(lTe," \u2014 "),nx=n(lTe,"A",{href:!0});var WPr=s(nx);$De=r(WPr,"M2M100Config"),WPr.forEach(t),IDe=r(lTe," (M2M100 model)"),lTe.forEach(t),qDe=i(v),$m=n(v,"LI",{});var iTe=s($m);OY=n(iTe,"STRONG",{});var HPr=s(OY);NDe=r(HPr,"marian"),HPr.forEach(t),jDe=r(iTe," \u2014 "),sx=n(iTe,"A",{href:!0});var UPr=s(sx);DDe=r(UPr,"MarianConfig"),UPr.forEach(t),GDe=r(iTe," (Marian model)"),iTe.forEach(t),ODe=i(v),Im=n(v,"LI",{});var dTe=s(Im);VY=n(dTe,"STRONG",{});var JPr=s(VY);VDe=r(JPr,"maskformer"),JPr.forEach(t),XDe=r(dTe," \u2014 "),lx=n(dTe,"A",{href:!0});var YPr=s(lx);zDe=r(YPr,"MaskFormerConfig"),YPr.forEach(t),QDe=r(dTe," (MaskFormer model)"),dTe.forEach(t),WDe=i(v),qm=n(v,"LI",{});var cTe=s(qm);XY=n(cTe,"STRONG",{});var KPr=s(XY);HDe=r(KPr,"mbart"),KPr.forEach(t),UDe=r(cTe," \u2014 "),ix=n(cTe,"A",{href:!0});var ZPr=s(ix);JDe=r(ZPr,"MBartConfig"),ZPr.forEach(t),YDe=r(cTe," (mBART model)"),cTe.forEach(t),KDe=i(v),Nm=n(v,"LI",{});var fTe=s(Nm);zY=n(fTe,"STRONG",{});var e$r=s(zY);ZDe=r(e$r,"megatron-bert"),e$r.forEach(t),eGe=r(fTe," \u2014 "),dx=n(fTe,"A",{href:!0});var o$r=s(dx);oGe=r(o$r,"MegatronBertConfig"),o$r.forEach(t),rGe=r(fTe," (MegatronBert model)"),fTe.forEach(t),tGe=i(v),jm=n(v,"LI",{});var mTe=s(jm);QY=n(mTe,"STRONG",{});var r$r=s(QY);aGe=r(r$r,"mobilebert"),r$r.forEach(t),nGe=r(mTe," \u2014 "),cx=n(mTe,"A",{href:!0});var t$r=s(cx);sGe=r(t$r,"MobileBertConfig"),t$r.forEach(t),lGe=r(mTe," (MobileBERT model)"),mTe.forEach(t),iGe=i(v),Dm=n(v,"LI",{});var gTe=s(Dm);WY=n(gTe,"STRONG",{});var a$r=s(WY);dGe=r(a$r,"mpnet"),a$r.forEach(t),cGe=r(gTe," \u2014 "),fx=n(gTe,"A",{href:!0});var n$r=s(fx);fGe=r(n$r,"MPNetConfig"),n$r.forEach(t),mGe=r(gTe," (MPNet model)"),gTe.forEach(t),gGe=i(v),Gm=n(v,"LI",{});var hTe=s(Gm);HY=n(hTe,"STRONG",{});var s$r=s(HY);hGe=r(s$r,"mt5"),s$r.forEach(t),pGe=r(hTe," \u2014 "),mx=n(hTe,"A",{href:!0});var l$r=s(mx);_Ge=r(l$r,"MT5Config"),l$r.forEach(t),uGe=r(hTe," (mT5 model)"),hTe.forEach(t),bGe=i(v),Om=n(v,"LI",{});var pTe=s(Om);UY=n(pTe,"STRONG",{});var i$r=s(UY);FGe=r(i$r,"nystromformer"),i$r.forEach(t),vGe=r(pTe," \u2014 "),gx=n(pTe,"A",{href:!0});var d$r=s(gx);TGe=r(d$r,"NystromformerConfig"),d$r.forEach(t),MGe=r(pTe," (Nystromformer model)"),pTe.forEach(t),EGe=i(v),Vm=n(v,"LI",{});var _Te=s(Vm);JY=n(_Te,"STRONG",{});var c$r=s(JY);CGe=r(c$r,"openai-gpt"),c$r.forEach(t),wGe=r(_Te," \u2014 "),hx=n(_Te,"A",{href:!0});var f$r=s(hx);AGe=r(f$r,"OpenAIGPTConfig"),f$r.forEach(t),yGe=r(_Te," (OpenAI GPT model)"),_Te.forEach(t),LGe=i(v),Xm=n(v,"LI",{});var uTe=s(Xm);YY=n(uTe,"STRONG",{});var m$r=s(YY);xGe=r(m$r,"pegasus"),m$r.forEach(t),kGe=r(uTe," \u2014 "),px=n(uTe,"A",{href:!0});var g$r=s(px);SGe=r(g$r,"PegasusConfig"),g$r.forEach(t),RGe=r(uTe," (Pegasus model)"),uTe.forEach(t),BGe=i(v),zm=n(v,"LI",{});var bTe=s(zm);KY=n(bTe,"STRONG",{});var h$r=s(KY);PGe=r(h$r,"perceiver"),h$r.forEach(t),$Ge=r(bTe," \u2014 "),_x=n(bTe,"A",{href:!0});var p$r=s(_x);IGe=r(p$r,"PerceiverConfig"),p$r.forEach(t),qGe=r(bTe," (Perceiver model)"),bTe.forEach(t),NGe=i(v),Qm=n(v,"LI",{});var FTe=s(Qm);ZY=n(FTe,"STRONG",{});var _$r=s(ZY);jGe=r(_$r,"plbart"),_$r.forEach(t),DGe=r(FTe," \u2014 "),ux=n(FTe,"A",{href:!0});var u$r=s(ux);GGe=r(u$r,"PLBartConfig"),u$r.forEach(t),OGe=r(FTe," (PLBart model)"),FTe.forEach(t),VGe=i(v),Wm=n(v,"LI",{});var vTe=s(Wm);eK=n(vTe,"STRONG",{});var b$r=s(eK);XGe=r(b$r,"poolformer"),b$r.forEach(t),zGe=r(vTe," \u2014 "),bx=n(vTe,"A",{href:!0});var F$r=s(bx);QGe=r(F$r,"PoolFormerConfig"),F$r.forEach(t),WGe=r(vTe," (PoolFormer model)"),vTe.forEach(t),HGe=i(v),Hm=n(v,"LI",{});var TTe=s(Hm);oK=n(TTe,"STRONG",{});var v$r=s(oK);UGe=r(v$r,"prophetnet"),v$r.forEach(t),JGe=r(TTe," \u2014 "),Fx=n(TTe,"A",{href:!0});var T$r=s(Fx);YGe=r(T$r,"ProphetNetConfig"),T$r.forEach(t),KGe=r(TTe," (ProphetNet model)"),TTe.forEach(t),ZGe=i(v),Um=n(v,"LI",{});var MTe=s(Um);rK=n(MTe,"STRONG",{});var M$r=s(rK);eOe=r(M$r,"qdqbert"),M$r.forEach(t),oOe=r(MTe," \u2014 "),vx=n(MTe,"A",{href:!0});var E$r=s(vx);rOe=r(E$r,"QDQBertConfig"),E$r.forEach(t),tOe=r(MTe," (QDQBert model)"),MTe.forEach(t),aOe=i(v),Jm=n(v,"LI",{});var ETe=s(Jm);tK=n(ETe,"STRONG",{});var C$r=s(tK);nOe=r(C$r,"rag"),C$r.forEach(t),sOe=r(ETe," \u2014 "),Tx=n(ETe,"A",{href:!0});var w$r=s(Tx);lOe=r(w$r,"RagConfig"),w$r.forEach(t),iOe=r(ETe," (RAG model)"),ETe.forEach(t),dOe=i(v),Ym=n(v,"LI",{});var CTe=s(Ym);aK=n(CTe,"STRONG",{});var A$r=s(aK);cOe=r(A$r,"realm"),A$r.forEach(t),fOe=r(CTe," \u2014 "),Mx=n(CTe,"A",{href:!0});var y$r=s(Mx);mOe=r(y$r,"RealmConfig"),y$r.forEach(t),gOe=r(CTe," (Realm model)"),CTe.forEach(t),hOe=i(v),Km=n(v,"LI",{});var wTe=s(Km);nK=n(wTe,"STRONG",{});var L$r=s(nK);pOe=r(L$r,"reformer"),L$r.forEach(t),_Oe=r(wTe," \u2014 "),Ex=n(wTe,"A",{href:!0});var x$r=s(Ex);uOe=r(x$r,"ReformerConfig"),x$r.forEach(t),bOe=r(wTe," (Reformer model)"),wTe.forEach(t),FOe=i(v),Zm=n(v,"LI",{});var ATe=s(Zm);sK=n(ATe,"STRONG",{});var k$r=s(sK);vOe=r(k$r,"rembert"),k$r.forEach(t),TOe=r(ATe," \u2014 "),Cx=n(ATe,"A",{href:!0});var S$r=s(Cx);MOe=r(S$r,"RemBertConfig"),S$r.forEach(t),EOe=r(ATe," (RemBERT model)"),ATe.forEach(t),COe=i(v),eg=n(v,"LI",{});var yTe=s(eg);lK=n(yTe,"STRONG",{});var R$r=s(lK);wOe=r(R$r,"resnet"),R$r.forEach(t),AOe=r(yTe," \u2014 "),wx=n(yTe,"A",{href:!0});var B$r=s(wx);yOe=r(B$r,"ResNetConfig"),B$r.forEach(t),LOe=r(yTe," (ResNet model)"),yTe.forEach(t),xOe=i(v),og=n(v,"LI",{});var LTe=s(og);iK=n(LTe,"STRONG",{});var P$r=s(iK);kOe=r(P$r,"retribert"),P$r.forEach(t),SOe=r(LTe," \u2014 "),Ax=n(LTe,"A",{href:!0});var $$r=s(Ax);ROe=r($$r,"RetriBertConfig"),$$r.forEach(t),BOe=r(LTe," (RetriBERT model)"),LTe.forEach(t),POe=i(v),rg=n(v,"LI",{});var xTe=s(rg);dK=n(xTe,"STRONG",{});var I$r=s(dK);$Oe=r(I$r,"roberta"),I$r.forEach(t),IOe=r(xTe," \u2014 "),yx=n(xTe,"A",{href:!0});var q$r=s(yx);qOe=r(q$r,"RobertaConfig"),q$r.forEach(t),NOe=r(xTe," (RoBERTa model)"),xTe.forEach(t),jOe=i(v),tg=n(v,"LI",{});var kTe=s(tg);cK=n(kTe,"STRONG",{});var N$r=s(cK);DOe=r(N$r,"roformer"),N$r.forEach(t),GOe=r(kTe," \u2014 "),Lx=n(kTe,"A",{href:!0});var j$r=s(Lx);OOe=r(j$r,"RoFormerConfig"),j$r.forEach(t),VOe=r(kTe," (RoFormer model)"),kTe.forEach(t),XOe=i(v),ag=n(v,"LI",{});var STe=s(ag);fK=n(STe,"STRONG",{});var D$r=s(fK);zOe=r(D$r,"segformer"),D$r.forEach(t),QOe=r(STe," \u2014 "),xx=n(STe,"A",{href:!0});var G$r=s(xx);WOe=r(G$r,"SegformerConfig"),G$r.forEach(t),HOe=r(STe," (SegFormer model)"),STe.forEach(t),UOe=i(v),ng=n(v,"LI",{});var RTe=s(ng);mK=n(RTe,"STRONG",{});var O$r=s(mK);JOe=r(O$r,"sew"),O$r.forEach(t),YOe=r(RTe," \u2014 "),kx=n(RTe,"A",{href:!0});var V$r=s(kx);KOe=r(V$r,"SEWConfig"),V$r.forEach(t),ZOe=r(RTe," (SEW model)"),RTe.forEach(t),eVe=i(v),sg=n(v,"LI",{});var BTe=s(sg);gK=n(BTe,"STRONG",{});var X$r=s(gK);oVe=r(X$r,"sew-d"),X$r.forEach(t),rVe=r(BTe," \u2014 "),Sx=n(BTe,"A",{href:!0});var z$r=s(Sx);tVe=r(z$r,"SEWDConfig"),z$r.forEach(t),aVe=r(BTe," (SEW-D model)"),BTe.forEach(t),nVe=i(v),lg=n(v,"LI",{});var PTe=s(lg);hK=n(PTe,"STRONG",{});var Q$r=s(hK);sVe=r(Q$r,"speech-encoder-decoder"),Q$r.forEach(t),lVe=r(PTe," \u2014 "),Rx=n(PTe,"A",{href:!0});var W$r=s(Rx);iVe=r(W$r,"SpeechEncoderDecoderConfig"),W$r.forEach(t),dVe=r(PTe," (Speech Encoder decoder model)"),PTe.forEach(t),cVe=i(v),ig=n(v,"LI",{});var $Te=s(ig);pK=n($Te,"STRONG",{});var H$r=s(pK);fVe=r(H$r,"speech_to_text"),H$r.forEach(t),mVe=r($Te," \u2014 "),Bx=n($Te,"A",{href:!0});var U$r=s(Bx);gVe=r(U$r,"Speech2TextConfig"),U$r.forEach(t),hVe=r($Te," (Speech2Text model)"),$Te.forEach(t),pVe=i(v),dg=n(v,"LI",{});var ITe=s(dg);_K=n(ITe,"STRONG",{});var J$r=s(_K);_Ve=r(J$r,"speech_to_text_2"),J$r.forEach(t),uVe=r(ITe," \u2014 "),Px=n(ITe,"A",{href:!0});var Y$r=s(Px);bVe=r(Y$r,"Speech2Text2Config"),Y$r.forEach(t),FVe=r(ITe," (Speech2Text2 model)"),ITe.forEach(t),vVe=i(v),cg=n(v,"LI",{});var qTe=s(cg);uK=n(qTe,"STRONG",{});var K$r=s(uK);TVe=r(K$r,"splinter"),K$r.forEach(t),MVe=r(qTe," \u2014 "),$x=n(qTe,"A",{href:!0});var Z$r=s($x);EVe=r(Z$r,"SplinterConfig"),Z$r.forEach(t),CVe=r(qTe," (Splinter model)"),qTe.forEach(t),wVe=i(v),fg=n(v,"LI",{});var NTe=s(fg);bK=n(NTe,"STRONG",{});var eIr=s(bK);AVe=r(eIr,"squeezebert"),eIr.forEach(t),yVe=r(NTe," \u2014 "),Ix=n(NTe,"A",{href:!0});var oIr=s(Ix);LVe=r(oIr,"SqueezeBertConfig"),oIr.forEach(t),xVe=r(NTe," (SqueezeBERT model)"),NTe.forEach(t),kVe=i(v),mg=n(v,"LI",{});var jTe=s(mg);FK=n(jTe,"STRONG",{});var rIr=s(FK);SVe=r(rIr,"swin"),rIr.forEach(t),RVe=r(jTe," \u2014 "),qx=n(jTe,"A",{href:!0});var tIr=s(qx);BVe=r(tIr,"SwinConfig"),tIr.forEach(t),PVe=r(jTe," (Swin model)"),jTe.forEach(t),$Ve=i(v),gg=n(v,"LI",{});var DTe=s(gg);vK=n(DTe,"STRONG",{});var aIr=s(vK);IVe=r(aIr,"t5"),aIr.forEach(t),qVe=r(DTe," \u2014 "),Nx=n(DTe,"A",{href:!0});var nIr=s(Nx);NVe=r(nIr,"T5Config"),nIr.forEach(t),jVe=r(DTe," (T5 model)"),DTe.forEach(t),DVe=i(v),hg=n(v,"LI",{});var GTe=s(hg);TK=n(GTe,"STRONG",{});var sIr=s(TK);GVe=r(sIr,"tapas"),sIr.forEach(t),OVe=r(GTe," \u2014 "),jx=n(GTe,"A",{href:!0});var lIr=s(jx);VVe=r(lIr,"TapasConfig"),lIr.forEach(t),XVe=r(GTe," (TAPAS model)"),GTe.forEach(t),zVe=i(v),pg=n(v,"LI",{});var OTe=s(pg);MK=n(OTe,"STRONG",{});var iIr=s(MK);QVe=r(iIr,"transfo-xl"),iIr.forEach(t),WVe=r(OTe," \u2014 "),Dx=n(OTe,"A",{href:!0});var dIr=s(Dx);HVe=r(dIr,"TransfoXLConfig"),dIr.forEach(t),UVe=r(OTe," (Transformer-XL model)"),OTe.forEach(t),JVe=i(v),_g=n(v,"LI",{});var VTe=s(_g);EK=n(VTe,"STRONG",{});var cIr=s(EK);YVe=r(cIr,"trocr"),cIr.forEach(t),KVe=r(VTe," \u2014 "),Gx=n(VTe,"A",{href:!0});var fIr=s(Gx);ZVe=r(fIr,"TrOCRConfig"),fIr.forEach(t),eXe=r(VTe," (TrOCR model)"),VTe.forEach(t),oXe=i(v),ug=n(v,"LI",{});var XTe=s(ug);CK=n(XTe,"STRONG",{});var mIr=s(CK);rXe=r(mIr,"unispeech"),mIr.forEach(t),tXe=r(XTe," \u2014 "),Ox=n(XTe,"A",{href:!0});var gIr=s(Ox);aXe=r(gIr,"UniSpeechConfig"),gIr.forEach(t),nXe=r(XTe," (UniSpeech model)"),XTe.forEach(t),sXe=i(v),bg=n(v,"LI",{});var zTe=s(bg);wK=n(zTe,"STRONG",{});var hIr=s(wK);lXe=r(hIr,"unispeech-sat"),hIr.forEach(t),iXe=r(zTe," \u2014 "),Vx=n(zTe,"A",{href:!0});var pIr=s(Vx);dXe=r(pIr,"UniSpeechSatConfig"),pIr.forEach(t),cXe=r(zTe," (UniSpeechSat model)"),zTe.forEach(t),fXe=i(v),Fg=n(v,"LI",{});var QTe=s(Fg);AK=n(QTe,"STRONG",{});var _Ir=s(AK);mXe=r(_Ir,"van"),_Ir.forEach(t),gXe=r(QTe," \u2014 "),Xx=n(QTe,"A",{href:!0});var uIr=s(Xx);hXe=r(uIr,"VanConfig"),uIr.forEach(t),pXe=r(QTe," (VAN model)"),QTe.forEach(t),_Xe=i(v),vg=n(v,"LI",{});var WTe=s(vg);yK=n(WTe,"STRONG",{});var bIr=s(yK);uXe=r(bIr,"vilt"),bIr.forEach(t),bXe=r(WTe," \u2014 "),zx=n(WTe,"A",{href:!0});var FIr=s(zx);FXe=r(FIr,"ViltConfig"),FIr.forEach(t),vXe=r(WTe," (ViLT model)"),WTe.forEach(t),TXe=i(v),Tg=n(v,"LI",{});var HTe=s(Tg);LK=n(HTe,"STRONG",{});var vIr=s(LK);MXe=r(vIr,"vision-encoder-decoder"),vIr.forEach(t),EXe=r(HTe," \u2014 "),Qx=n(HTe,"A",{href:!0});var TIr=s(Qx);CXe=r(TIr,"VisionEncoderDecoderConfig"),TIr.forEach(t),wXe=r(HTe," (Vision Encoder decoder model)"),HTe.forEach(t),AXe=i(v),Mg=n(v,"LI",{});var UTe=s(Mg);xK=n(UTe,"STRONG",{});var MIr=s(xK);yXe=r(MIr,"vision-text-dual-encoder"),MIr.forEach(t),LXe=r(UTe," \u2014 "),Wx=n(UTe,"A",{href:!0});var EIr=s(Wx);xXe=r(EIr,"VisionTextDualEncoderConfig"),EIr.forEach(t),kXe=r(UTe," (VisionTextDualEncoder model)"),UTe.forEach(t),SXe=i(v),Eg=n(v,"LI",{});var JTe=s(Eg);kK=n(JTe,"STRONG",{});var CIr=s(kK);RXe=r(CIr,"visual_bert"),CIr.forEach(t),BXe=r(JTe," \u2014 "),Hx=n(JTe,"A",{href:!0});var wIr=s(Hx);PXe=r(wIr,"VisualBertConfig"),wIr.forEach(t),$Xe=r(JTe," (VisualBert model)"),JTe.forEach(t),IXe=i(v),Cg=n(v,"LI",{});var YTe=s(Cg);SK=n(YTe,"STRONG",{});var AIr=s(SK);qXe=r(AIr,"vit"),AIr.forEach(t),NXe=r(YTe," \u2014 "),Ux=n(YTe,"A",{href:!0});var yIr=s(Ux);jXe=r(yIr,"ViTConfig"),yIr.forEach(t),DXe=r(YTe," (ViT model)"),YTe.forEach(t),GXe=i(v),wg=n(v,"LI",{});var KTe=s(wg);RK=n(KTe,"STRONG",{});var LIr=s(RK);OXe=r(LIr,"vit_mae"),LIr.forEach(t),VXe=r(KTe," \u2014 "),Jx=n(KTe,"A",{href:!0});var xIr=s(Jx);XXe=r(xIr,"ViTMAEConfig"),xIr.forEach(t),zXe=r(KTe," (ViTMAE model)"),KTe.forEach(t),QXe=i(v),Ag=n(v,"LI",{});var ZTe=s(Ag);BK=n(ZTe,"STRONG",{});var kIr=s(BK);WXe=r(kIr,"wav2vec2"),kIr.forEach(t),HXe=r(ZTe," \u2014 "),Yx=n(ZTe,"A",{href:!0});var SIr=s(Yx);UXe=r(SIr,"Wav2Vec2Config"),SIr.forEach(t),JXe=r(ZTe," (Wav2Vec2 model)"),ZTe.forEach(t),YXe=i(v),yg=n(v,"LI",{});var e7e=s(yg);PK=n(e7e,"STRONG",{});var RIr=s(PK);KXe=r(RIr,"wavlm"),RIr.forEach(t),ZXe=r(e7e," \u2014 "),Kx=n(e7e,"A",{href:!0});var BIr=s(Kx);eze=r(BIr,"WavLMConfig"),BIr.forEach(t),oze=r(e7e," (WavLM model)"),e7e.forEach(t),rze=i(v),Lg=n(v,"LI",{});var o7e=s(Lg);$K=n(o7e,"STRONG",{});var PIr=s($K);tze=r(PIr,"xglm"),PIr.forEach(t),aze=r(o7e," \u2014 "),Zx=n(o7e,"A",{href:!0});var $Ir=s(Zx);nze=r($Ir,"XGLMConfig"),$Ir.forEach(t),sze=r(o7e," (XGLM model)"),o7e.forEach(t),lze=i(v),xg=n(v,"LI",{});var r7e=s(xg);IK=n(r7e,"STRONG",{});var IIr=s(IK);ize=r(IIr,"xlm"),IIr.forEach(t),dze=r(r7e," \u2014 "),ek=n(r7e,"A",{href:!0});var qIr=s(ek);cze=r(qIr,"XLMConfig"),qIr.forEach(t),fze=r(r7e," (XLM model)"),r7e.forEach(t),mze=i(v),kg=n(v,"LI",{});var t7e=s(kg);qK=n(t7e,"STRONG",{});var NIr=s(qK);gze=r(NIr,"xlm-prophetnet"),NIr.forEach(t),hze=r(t7e," \u2014 "),ok=n(t7e,"A",{href:!0});var jIr=s(ok);pze=r(jIr,"XLMProphetNetConfig"),jIr.forEach(t),_ze=r(t7e," (XLMProphetNet model)"),t7e.forEach(t),uze=i(v),Sg=n(v,"LI",{});var a7e=s(Sg);NK=n(a7e,"STRONG",{});var DIr=s(NK);bze=r(DIr,"xlm-roberta"),DIr.forEach(t),Fze=r(a7e," \u2014 "),rk=n(a7e,"A",{href:!0});var GIr=s(rk);vze=r(GIr,"XLMRobertaConfig"),GIr.forEach(t),Tze=r(a7e," (XLM-RoBERTa model)"),a7e.forEach(t),Mze=i(v),Rg=n(v,"LI",{});var n7e=s(Rg);jK=n(n7e,"STRONG",{});var OIr=s(jK);Eze=r(OIr,"xlm-roberta-xl"),OIr.forEach(t),Cze=r(n7e," \u2014 "),tk=n(n7e,"A",{href:!0});var VIr=s(tk);wze=r(VIr,"XLMRobertaXLConfig"),VIr.forEach(t),Aze=r(n7e," (XLM-RoBERTa-XL model)"),n7e.forEach(t),yze=i(v),Bg=n(v,"LI",{});var s7e=s(Bg);DK=n(s7e,"STRONG",{});var XIr=s(DK);Lze=r(XIr,"xlnet"),XIr.forEach(t),xze=r(s7e," \u2014 "),ak=n(s7e,"A",{href:!0});var zIr=s(ak);kze=r(zIr,"XLNetConfig"),zIr.forEach(t),Sze=r(s7e," (XLNet model)"),s7e.forEach(t),Rze=i(v),Pg=n(v,"LI",{});var l7e=s(Pg);GK=n(l7e,"STRONG",{});var QIr=s(GK);Bze=r(QIr,"yoso"),QIr.forEach(t),Pze=r(l7e," \u2014 "),nk=n(l7e,"A",{href:!0});var WIr=s(nk);$ze=r(WIr,"YosoConfig"),WIr.forEach(t),Ize=r(l7e," (YOSO model)"),l7e.forEach(t),v.forEach(t),qze=i(ga),OK=n(ga,"P",{});var HIr=s(OK);Nze=r(HIr,"Examples:"),HIr.forEach(t),jze=i(ga),m(yC.$$.fragment,ga),ga.forEach(t),Dze=i(Os),$g=n(Os,"DIV",{class:!0});var JBe=s($g);m(LC.$$.fragment,JBe),Gze=i(JBe),VK=n(JBe,"P",{});var UIr=s(VK);Oze=r(UIr,"Register a new configuration for this class."),UIr.forEach(t),JBe.forEach(t),Os.forEach(t),HSe=i(c),Qi=n(c,"H2",{class:!0});var YBe=s(Qi);Ig=n(YBe,"A",{id:!0,class:!0,href:!0});var JIr=s(Ig);XK=n(JIr,"SPAN",{});var YIr=s(XK);m(xC.$$.fragment,YIr),YIr.forEach(t),JIr.forEach(t),Vze=i(YBe),zK=n(YBe,"SPAN",{});var KIr=s(zK);Xze=r(KIr,"AutoTokenizer"),KIr.forEach(t),YBe.forEach(t),USe=i(c),Wo=n(c,"DIV",{class:!0});var Vs=s(Wo);m(kC.$$.fragment,Vs),zze=i(Vs),SC=n(Vs,"P",{});var KBe=s(SC);Qze=r(KBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sk=n(KBe,"A",{href:!0});var ZIr=s(sk);Wze=r(ZIr,"AutoTokenizer.from_pretrained()"),ZIr.forEach(t),Hze=r(KBe," class method."),KBe.forEach(t),Uze=i(Vs),RC=n(Vs,"P",{});var ZBe=s(RC);Jze=r(ZBe,"This class cannot be instantiated directly using "),QK=n(ZBe,"CODE",{});var eqr=s(QK);Yze=r(eqr,"__init__()"),eqr.forEach(t),Kze=r(ZBe," (throws an error)."),ZBe.forEach(t),Zze=i(Vs),go=n(Vs,"DIV",{class:!0});var ha=s(go);m(BC.$$.fragment,ha),eQe=i(ha),WK=n(ha,"P",{});var oqr=s(WK);oQe=r(oqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oqr.forEach(t),rQe=i(ha),Oa=n(ha,"P",{});var bE=s(Oa);tQe=r(bE,"The tokenizer class to instantiate is selected based on the "),HK=n(bE,"CODE",{});var rqr=s(HK);aQe=r(rqr,"model_type"),rqr.forEach(t),nQe=r(bE,` property of the config object (either
passed as an argument or loaded from `),UK=n(bE,"CODE",{});var tqr=s(UK);sQe=r(tqr,"pretrained_model_name_or_path"),tqr.forEach(t),lQe=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JK=n(bE,"CODE",{});var aqr=s(JK);iQe=r(aqr,"pretrained_model_name_or_path"),aqr.forEach(t),dQe=r(bE,":"),bE.forEach(t),cQe=i(ha),E=n(ha,"UL",{});var w=s(E);Qn=n(w,"LI",{});var m8=s(Qn);YK=n(m8,"STRONG",{});var nqr=s(YK);fQe=r(nqr,"albert"),nqr.forEach(t),mQe=r(m8," \u2014 "),lk=n(m8,"A",{href:!0});var sqr=s(lk);gQe=r(sqr,"AlbertTokenizer"),sqr.forEach(t),hQe=r(m8," or "),ik=n(m8,"A",{href:!0});var lqr=s(ik);pQe=r(lqr,"AlbertTokenizerFast"),lqr.forEach(t),_Qe=r(m8," (ALBERT model)"),m8.forEach(t),uQe=i(w),Wn=n(w,"LI",{});var g8=s(Wn);KK=n(g8,"STRONG",{});var iqr=s(KK);bQe=r(iqr,"bart"),iqr.forEach(t),FQe=r(g8," \u2014 "),dk=n(g8,"A",{href:!0});var dqr=s(dk);vQe=r(dqr,"BartTokenizer"),dqr.forEach(t),TQe=r(g8," or "),ck=n(g8,"A",{href:!0});var cqr=s(ck);MQe=r(cqr,"BartTokenizerFast"),cqr.forEach(t),EQe=r(g8," (BART model)"),g8.forEach(t),CQe=i(w),Hn=n(w,"LI",{});var h8=s(Hn);ZK=n(h8,"STRONG",{});var fqr=s(ZK);wQe=r(fqr,"barthez"),fqr.forEach(t),AQe=r(h8," \u2014 "),fk=n(h8,"A",{href:!0});var mqr=s(fk);yQe=r(mqr,"BarthezTokenizer"),mqr.forEach(t),LQe=r(h8," or "),mk=n(h8,"A",{href:!0});var gqr=s(mk);xQe=r(gqr,"BarthezTokenizerFast"),gqr.forEach(t),kQe=r(h8," (BARThez model)"),h8.forEach(t),SQe=i(w),qg=n(w,"LI",{});var i7e=s(qg);eZ=n(i7e,"STRONG",{});var hqr=s(eZ);RQe=r(hqr,"bartpho"),hqr.forEach(t),BQe=r(i7e," \u2014 "),gk=n(i7e,"A",{href:!0});var pqr=s(gk);PQe=r(pqr,"BartphoTokenizer"),pqr.forEach(t),$Qe=r(i7e," (BARTpho model)"),i7e.forEach(t),IQe=i(w),Un=n(w,"LI",{});var p8=s(Un);oZ=n(p8,"STRONG",{});var _qr=s(oZ);qQe=r(_qr,"bert"),_qr.forEach(t),NQe=r(p8," \u2014 "),hk=n(p8,"A",{href:!0});var uqr=s(hk);jQe=r(uqr,"BertTokenizer"),uqr.forEach(t),DQe=r(p8," or "),pk=n(p8,"A",{href:!0});var bqr=s(pk);GQe=r(bqr,"BertTokenizerFast"),bqr.forEach(t),OQe=r(p8," (BERT model)"),p8.forEach(t),VQe=i(w),Ng=n(w,"LI",{});var d7e=s(Ng);rZ=n(d7e,"STRONG",{});var Fqr=s(rZ);XQe=r(Fqr,"bert-generation"),Fqr.forEach(t),zQe=r(d7e," \u2014 "),_k=n(d7e,"A",{href:!0});var vqr=s(_k);QQe=r(vqr,"BertGenerationTokenizer"),vqr.forEach(t),WQe=r(d7e," (Bert Generation model)"),d7e.forEach(t),HQe=i(w),jg=n(w,"LI",{});var c7e=s(jg);tZ=n(c7e,"STRONG",{});var Tqr=s(tZ);UQe=r(Tqr,"bert-japanese"),Tqr.forEach(t),JQe=r(c7e," \u2014 "),uk=n(c7e,"A",{href:!0});var Mqr=s(uk);YQe=r(Mqr,"BertJapaneseTokenizer"),Mqr.forEach(t),KQe=r(c7e," (BertJapanese model)"),c7e.forEach(t),ZQe=i(w),Dg=n(w,"LI",{});var f7e=s(Dg);aZ=n(f7e,"STRONG",{});var Eqr=s(aZ);eWe=r(Eqr,"bertweet"),Eqr.forEach(t),oWe=r(f7e," \u2014 "),bk=n(f7e,"A",{href:!0});var Cqr=s(bk);rWe=r(Cqr,"BertweetTokenizer"),Cqr.forEach(t),tWe=r(f7e," (Bertweet model)"),f7e.forEach(t),aWe=i(w),Jn=n(w,"LI",{});var _8=s(Jn);nZ=n(_8,"STRONG",{});var wqr=s(nZ);nWe=r(wqr,"big_bird"),wqr.forEach(t),sWe=r(_8," \u2014 "),Fk=n(_8,"A",{href:!0});var Aqr=s(Fk);lWe=r(Aqr,"BigBirdTokenizer"),Aqr.forEach(t),iWe=r(_8," or "),vk=n(_8,"A",{href:!0});var yqr=s(vk);dWe=r(yqr,"BigBirdTokenizerFast"),yqr.forEach(t),cWe=r(_8," (BigBird model)"),_8.forEach(t),fWe=i(w),Yn=n(w,"LI",{});var u8=s(Yn);sZ=n(u8,"STRONG",{});var Lqr=s(sZ);mWe=r(Lqr,"bigbird_pegasus"),Lqr.forEach(t),gWe=r(u8," \u2014 "),Tk=n(u8,"A",{href:!0});var xqr=s(Tk);hWe=r(xqr,"PegasusTokenizer"),xqr.forEach(t),pWe=r(u8," or "),Mk=n(u8,"A",{href:!0});var kqr=s(Mk);_We=r(kqr,"PegasusTokenizerFast"),kqr.forEach(t),uWe=r(u8," (BigBirdPegasus model)"),u8.forEach(t),bWe=i(w),Kn=n(w,"LI",{});var b8=s(Kn);lZ=n(b8,"STRONG",{});var Sqr=s(lZ);FWe=r(Sqr,"blenderbot"),Sqr.forEach(t),vWe=r(b8," \u2014 "),Ek=n(b8,"A",{href:!0});var Rqr=s(Ek);TWe=r(Rqr,"BlenderbotTokenizer"),Rqr.forEach(t),MWe=r(b8," or "),Ck=n(b8,"A",{href:!0});var Bqr=s(Ck);EWe=r(Bqr,"BlenderbotTokenizerFast"),Bqr.forEach(t),CWe=r(b8," (Blenderbot model)"),b8.forEach(t),wWe=i(w),Gg=n(w,"LI",{});var m7e=s(Gg);iZ=n(m7e,"STRONG",{});var Pqr=s(iZ);AWe=r(Pqr,"blenderbot-small"),Pqr.forEach(t),yWe=r(m7e," \u2014 "),wk=n(m7e,"A",{href:!0});var $qr=s(wk);LWe=r($qr,"BlenderbotSmallTokenizer"),$qr.forEach(t),xWe=r(m7e," (BlenderbotSmall model)"),m7e.forEach(t),kWe=i(w),Og=n(w,"LI",{});var g7e=s(Og);dZ=n(g7e,"STRONG",{});var Iqr=s(dZ);SWe=r(Iqr,"byt5"),Iqr.forEach(t),RWe=r(g7e," \u2014 "),Ak=n(g7e,"A",{href:!0});var qqr=s(Ak);BWe=r(qqr,"ByT5Tokenizer"),qqr.forEach(t),PWe=r(g7e," (ByT5 model)"),g7e.forEach(t),$We=i(w),Zn=n(w,"LI",{});var F8=s(Zn);cZ=n(F8,"STRONG",{});var Nqr=s(cZ);IWe=r(Nqr,"camembert"),Nqr.forEach(t),qWe=r(F8," \u2014 "),yk=n(F8,"A",{href:!0});var jqr=s(yk);NWe=r(jqr,"CamembertTokenizer"),jqr.forEach(t),jWe=r(F8," or "),Lk=n(F8,"A",{href:!0});var Dqr=s(Lk);DWe=r(Dqr,"CamembertTokenizerFast"),Dqr.forEach(t),GWe=r(F8," (CamemBERT model)"),F8.forEach(t),OWe=i(w),Vg=n(w,"LI",{});var h7e=s(Vg);fZ=n(h7e,"STRONG",{});var Gqr=s(fZ);VWe=r(Gqr,"canine"),Gqr.forEach(t),XWe=r(h7e," \u2014 "),xk=n(h7e,"A",{href:!0});var Oqr=s(xk);zWe=r(Oqr,"CanineTokenizer"),Oqr.forEach(t),QWe=r(h7e," (Canine model)"),h7e.forEach(t),WWe=i(w),es=n(w,"LI",{});var v8=s(es);mZ=n(v8,"STRONG",{});var Vqr=s(mZ);HWe=r(Vqr,"clip"),Vqr.forEach(t),UWe=r(v8," \u2014 "),kk=n(v8,"A",{href:!0});var Xqr=s(kk);JWe=r(Xqr,"CLIPTokenizer"),Xqr.forEach(t),YWe=r(v8," or "),Sk=n(v8,"A",{href:!0});var zqr=s(Sk);KWe=r(zqr,"CLIPTokenizerFast"),zqr.forEach(t),ZWe=r(v8," (CLIP model)"),v8.forEach(t),eHe=i(w),os=n(w,"LI",{});var T8=s(os);gZ=n(T8,"STRONG",{});var Qqr=s(gZ);oHe=r(Qqr,"convbert"),Qqr.forEach(t),rHe=r(T8," \u2014 "),Rk=n(T8,"A",{href:!0});var Wqr=s(Rk);tHe=r(Wqr,"ConvBertTokenizer"),Wqr.forEach(t),aHe=r(T8," or "),Bk=n(T8,"A",{href:!0});var Hqr=s(Bk);nHe=r(Hqr,"ConvBertTokenizerFast"),Hqr.forEach(t),sHe=r(T8," (ConvBERT model)"),T8.forEach(t),lHe=i(w),rs=n(w,"LI",{});var M8=s(rs);hZ=n(M8,"STRONG",{});var Uqr=s(hZ);iHe=r(Uqr,"cpm"),Uqr.forEach(t),dHe=r(M8," \u2014 "),Pk=n(M8,"A",{href:!0});var Jqr=s(Pk);cHe=r(Jqr,"CpmTokenizer"),Jqr.forEach(t),fHe=r(M8," or "),pZ=n(M8,"CODE",{});var Yqr=s(pZ);mHe=r(Yqr,"CpmTokenizerFast"),Yqr.forEach(t),gHe=r(M8," (CPM model)"),M8.forEach(t),hHe=i(w),Xg=n(w,"LI",{});var p7e=s(Xg);_Z=n(p7e,"STRONG",{});var Kqr=s(_Z);pHe=r(Kqr,"ctrl"),Kqr.forEach(t),_He=r(p7e," \u2014 "),$k=n(p7e,"A",{href:!0});var Zqr=s($k);uHe=r(Zqr,"CTRLTokenizer"),Zqr.forEach(t),bHe=r(p7e," (CTRL model)"),p7e.forEach(t),FHe=i(w),ts=n(w,"LI",{});var E8=s(ts);uZ=n(E8,"STRONG",{});var eNr=s(uZ);vHe=r(eNr,"deberta"),eNr.forEach(t),THe=r(E8," \u2014 "),Ik=n(E8,"A",{href:!0});var oNr=s(Ik);MHe=r(oNr,"DebertaTokenizer"),oNr.forEach(t),EHe=r(E8," or "),qk=n(E8,"A",{href:!0});var rNr=s(qk);CHe=r(rNr,"DebertaTokenizerFast"),rNr.forEach(t),wHe=r(E8," (DeBERTa model)"),E8.forEach(t),AHe=i(w),zg=n(w,"LI",{});var _7e=s(zg);bZ=n(_7e,"STRONG",{});var tNr=s(bZ);yHe=r(tNr,"deberta-v2"),tNr.forEach(t),LHe=r(_7e," \u2014 "),Nk=n(_7e,"A",{href:!0});var aNr=s(Nk);xHe=r(aNr,"DebertaV2Tokenizer"),aNr.forEach(t),kHe=r(_7e," (DeBERTa-v2 model)"),_7e.forEach(t),SHe=i(w),as=n(w,"LI",{});var C8=s(as);FZ=n(C8,"STRONG",{});var nNr=s(FZ);RHe=r(nNr,"distilbert"),nNr.forEach(t),BHe=r(C8," \u2014 "),jk=n(C8,"A",{href:!0});var sNr=s(jk);PHe=r(sNr,"DistilBertTokenizer"),sNr.forEach(t),$He=r(C8," or "),Dk=n(C8,"A",{href:!0});var lNr=s(Dk);IHe=r(lNr,"DistilBertTokenizerFast"),lNr.forEach(t),qHe=r(C8," (DistilBERT model)"),C8.forEach(t),NHe=i(w),ns=n(w,"LI",{});var w8=s(ns);vZ=n(w8,"STRONG",{});var iNr=s(vZ);jHe=r(iNr,"dpr"),iNr.forEach(t),DHe=r(w8," \u2014 "),Gk=n(w8,"A",{href:!0});var dNr=s(Gk);GHe=r(dNr,"DPRQuestionEncoderTokenizer"),dNr.forEach(t),OHe=r(w8," or "),Ok=n(w8,"A",{href:!0});var cNr=s(Ok);VHe=r(cNr,"DPRQuestionEncoderTokenizerFast"),cNr.forEach(t),XHe=r(w8," (DPR model)"),w8.forEach(t),zHe=i(w),ss=n(w,"LI",{});var A8=s(ss);TZ=n(A8,"STRONG",{});var fNr=s(TZ);QHe=r(fNr,"electra"),fNr.forEach(t),WHe=r(A8," \u2014 "),Vk=n(A8,"A",{href:!0});var mNr=s(Vk);HHe=r(mNr,"ElectraTokenizer"),mNr.forEach(t),UHe=r(A8," or "),Xk=n(A8,"A",{href:!0});var gNr=s(Xk);JHe=r(gNr,"ElectraTokenizerFast"),gNr.forEach(t),YHe=r(A8," (ELECTRA model)"),A8.forEach(t),KHe=i(w),Qg=n(w,"LI",{});var u7e=s(Qg);MZ=n(u7e,"STRONG",{});var hNr=s(MZ);ZHe=r(hNr,"flaubert"),hNr.forEach(t),eUe=r(u7e," \u2014 "),zk=n(u7e,"A",{href:!0});var pNr=s(zk);oUe=r(pNr,"FlaubertTokenizer"),pNr.forEach(t),rUe=r(u7e," (FlauBERT model)"),u7e.forEach(t),tUe=i(w),ls=n(w,"LI",{});var y8=s(ls);EZ=n(y8,"STRONG",{});var _Nr=s(EZ);aUe=r(_Nr,"fnet"),_Nr.forEach(t),nUe=r(y8," \u2014 "),Qk=n(y8,"A",{href:!0});var uNr=s(Qk);sUe=r(uNr,"FNetTokenizer"),uNr.forEach(t),lUe=r(y8," or "),Wk=n(y8,"A",{href:!0});var bNr=s(Wk);iUe=r(bNr,"FNetTokenizerFast"),bNr.forEach(t),dUe=r(y8," (FNet model)"),y8.forEach(t),cUe=i(w),Wg=n(w,"LI",{});var b7e=s(Wg);CZ=n(b7e,"STRONG",{});var FNr=s(CZ);fUe=r(FNr,"fsmt"),FNr.forEach(t),mUe=r(b7e," \u2014 "),Hk=n(b7e,"A",{href:!0});var vNr=s(Hk);gUe=r(vNr,"FSMTTokenizer"),vNr.forEach(t),hUe=r(b7e," (FairSeq Machine-Translation model)"),b7e.forEach(t),pUe=i(w),is=n(w,"LI",{});var L8=s(is);wZ=n(L8,"STRONG",{});var TNr=s(wZ);_Ue=r(TNr,"funnel"),TNr.forEach(t),uUe=r(L8," \u2014 "),Uk=n(L8,"A",{href:!0});var MNr=s(Uk);bUe=r(MNr,"FunnelTokenizer"),MNr.forEach(t),FUe=r(L8," or "),Jk=n(L8,"A",{href:!0});var ENr=s(Jk);vUe=r(ENr,"FunnelTokenizerFast"),ENr.forEach(t),TUe=r(L8," (Funnel Transformer model)"),L8.forEach(t),MUe=i(w),ds=n(w,"LI",{});var x8=s(ds);AZ=n(x8,"STRONG",{});var CNr=s(AZ);EUe=r(CNr,"gpt2"),CNr.forEach(t),CUe=r(x8," \u2014 "),Yk=n(x8,"A",{href:!0});var wNr=s(Yk);wUe=r(wNr,"GPT2Tokenizer"),wNr.forEach(t),AUe=r(x8," or "),Kk=n(x8,"A",{href:!0});var ANr=s(Kk);yUe=r(ANr,"GPT2TokenizerFast"),ANr.forEach(t),LUe=r(x8," (OpenAI GPT-2 model)"),x8.forEach(t),xUe=i(w),cs=n(w,"LI",{});var k8=s(cs);yZ=n(k8,"STRONG",{});var yNr=s(yZ);kUe=r(yNr,"gpt_neo"),yNr.forEach(t),SUe=r(k8," \u2014 "),Zk=n(k8,"A",{href:!0});var LNr=s(Zk);RUe=r(LNr,"GPT2Tokenizer"),LNr.forEach(t),BUe=r(k8," or "),eS=n(k8,"A",{href:!0});var xNr=s(eS);PUe=r(xNr,"GPT2TokenizerFast"),xNr.forEach(t),$Ue=r(k8," (GPT Neo model)"),k8.forEach(t),IUe=i(w),fs=n(w,"LI",{});var S8=s(fs);LZ=n(S8,"STRONG",{});var kNr=s(LZ);qUe=r(kNr,"herbert"),kNr.forEach(t),NUe=r(S8," \u2014 "),oS=n(S8,"A",{href:!0});var SNr=s(oS);jUe=r(SNr,"HerbertTokenizer"),SNr.forEach(t),DUe=r(S8," or "),rS=n(S8,"A",{href:!0});var RNr=s(rS);GUe=r(RNr,"HerbertTokenizerFast"),RNr.forEach(t),OUe=r(S8," (HerBERT model)"),S8.forEach(t),VUe=i(w),Hg=n(w,"LI",{});var F7e=s(Hg);xZ=n(F7e,"STRONG",{});var BNr=s(xZ);XUe=r(BNr,"hubert"),BNr.forEach(t),zUe=r(F7e," \u2014 "),tS=n(F7e,"A",{href:!0});var PNr=s(tS);QUe=r(PNr,"Wav2Vec2CTCTokenizer"),PNr.forEach(t),WUe=r(F7e," (Hubert model)"),F7e.forEach(t),HUe=i(w),ms=n(w,"LI",{});var R8=s(ms);kZ=n(R8,"STRONG",{});var $Nr=s(kZ);UUe=r($Nr,"ibert"),$Nr.forEach(t),JUe=r(R8," \u2014 "),aS=n(R8,"A",{href:!0});var INr=s(aS);YUe=r(INr,"RobertaTokenizer"),INr.forEach(t),KUe=r(R8," or "),nS=n(R8,"A",{href:!0});var qNr=s(nS);ZUe=r(qNr,"RobertaTokenizerFast"),qNr.forEach(t),eJe=r(R8," (I-BERT model)"),R8.forEach(t),oJe=i(w),gs=n(w,"LI",{});var B8=s(gs);SZ=n(B8,"STRONG",{});var NNr=s(SZ);rJe=r(NNr,"layoutlm"),NNr.forEach(t),tJe=r(B8," \u2014 "),sS=n(B8,"A",{href:!0});var jNr=s(sS);aJe=r(jNr,"LayoutLMTokenizer"),jNr.forEach(t),nJe=r(B8," or "),lS=n(B8,"A",{href:!0});var DNr=s(lS);sJe=r(DNr,"LayoutLMTokenizerFast"),DNr.forEach(t),lJe=r(B8," (LayoutLM model)"),B8.forEach(t),iJe=i(w),hs=n(w,"LI",{});var P8=s(hs);RZ=n(P8,"STRONG",{});var GNr=s(RZ);dJe=r(GNr,"layoutlmv2"),GNr.forEach(t),cJe=r(P8," \u2014 "),iS=n(P8,"A",{href:!0});var ONr=s(iS);fJe=r(ONr,"LayoutLMv2Tokenizer"),ONr.forEach(t),mJe=r(P8," or "),dS=n(P8,"A",{href:!0});var VNr=s(dS);gJe=r(VNr,"LayoutLMv2TokenizerFast"),VNr.forEach(t),hJe=r(P8," (LayoutLMv2 model)"),P8.forEach(t),pJe=i(w),ps=n(w,"LI",{});var $8=s(ps);BZ=n($8,"STRONG",{});var XNr=s(BZ);_Je=r(XNr,"layoutxlm"),XNr.forEach(t),uJe=r($8," \u2014 "),cS=n($8,"A",{href:!0});var zNr=s(cS);bJe=r(zNr,"LayoutXLMTokenizer"),zNr.forEach(t),FJe=r($8," or "),fS=n($8,"A",{href:!0});var QNr=s(fS);vJe=r(QNr,"LayoutXLMTokenizerFast"),QNr.forEach(t),TJe=r($8," (LayoutXLM model)"),$8.forEach(t),MJe=i(w),_s=n(w,"LI",{});var I8=s(_s);PZ=n(I8,"STRONG",{});var WNr=s(PZ);EJe=r(WNr,"led"),WNr.forEach(t),CJe=r(I8," \u2014 "),mS=n(I8,"A",{href:!0});var HNr=s(mS);wJe=r(HNr,"LEDTokenizer"),HNr.forEach(t),AJe=r(I8," or "),gS=n(I8,"A",{href:!0});var UNr=s(gS);yJe=r(UNr,"LEDTokenizerFast"),UNr.forEach(t),LJe=r(I8," (LED model)"),I8.forEach(t),xJe=i(w),us=n(w,"LI",{});var q8=s(us);$Z=n(q8,"STRONG",{});var JNr=s($Z);kJe=r(JNr,"longformer"),JNr.forEach(t),SJe=r(q8," \u2014 "),hS=n(q8,"A",{href:!0});var YNr=s(hS);RJe=r(YNr,"LongformerTokenizer"),YNr.forEach(t),BJe=r(q8," or "),pS=n(q8,"A",{href:!0});var KNr=s(pS);PJe=r(KNr,"LongformerTokenizerFast"),KNr.forEach(t),$Je=r(q8," (Longformer model)"),q8.forEach(t),IJe=i(w),Ug=n(w,"LI",{});var v7e=s(Ug);IZ=n(v7e,"STRONG",{});var ZNr=s(IZ);qJe=r(ZNr,"luke"),ZNr.forEach(t),NJe=r(v7e," \u2014 "),_S=n(v7e,"A",{href:!0});var ejr=s(_S);jJe=r(ejr,"LukeTokenizer"),ejr.forEach(t),DJe=r(v7e," (LUKE model)"),v7e.forEach(t),GJe=i(w),bs=n(w,"LI",{});var N8=s(bs);qZ=n(N8,"STRONG",{});var ojr=s(qZ);OJe=r(ojr,"lxmert"),ojr.forEach(t),VJe=r(N8," \u2014 "),uS=n(N8,"A",{href:!0});var rjr=s(uS);XJe=r(rjr,"LxmertTokenizer"),rjr.forEach(t),zJe=r(N8," or "),bS=n(N8,"A",{href:!0});var tjr=s(bS);QJe=r(tjr,"LxmertTokenizerFast"),tjr.forEach(t),WJe=r(N8," (LXMERT model)"),N8.forEach(t),HJe=i(w),Jg=n(w,"LI",{});var T7e=s(Jg);NZ=n(T7e,"STRONG",{});var ajr=s(NZ);UJe=r(ajr,"m2m_100"),ajr.forEach(t),JJe=r(T7e," \u2014 "),FS=n(T7e,"A",{href:!0});var njr=s(FS);YJe=r(njr,"M2M100Tokenizer"),njr.forEach(t),KJe=r(T7e," (M2M100 model)"),T7e.forEach(t),ZJe=i(w),Yg=n(w,"LI",{});var M7e=s(Yg);jZ=n(M7e,"STRONG",{});var sjr=s(jZ);eYe=r(sjr,"marian"),sjr.forEach(t),oYe=r(M7e," \u2014 "),vS=n(M7e,"A",{href:!0});var ljr=s(vS);rYe=r(ljr,"MarianTokenizer"),ljr.forEach(t),tYe=r(M7e," (Marian model)"),M7e.forEach(t),aYe=i(w),Fs=n(w,"LI",{});var j8=s(Fs);DZ=n(j8,"STRONG",{});var ijr=s(DZ);nYe=r(ijr,"mbart"),ijr.forEach(t),sYe=r(j8," \u2014 "),TS=n(j8,"A",{href:!0});var djr=s(TS);lYe=r(djr,"MBartTokenizer"),djr.forEach(t),iYe=r(j8," or "),MS=n(j8,"A",{href:!0});var cjr=s(MS);dYe=r(cjr,"MBartTokenizerFast"),cjr.forEach(t),cYe=r(j8," (mBART model)"),j8.forEach(t),fYe=i(w),vs=n(w,"LI",{});var D8=s(vs);GZ=n(D8,"STRONG",{});var fjr=s(GZ);mYe=r(fjr,"mbart50"),fjr.forEach(t),gYe=r(D8," \u2014 "),ES=n(D8,"A",{href:!0});var mjr=s(ES);hYe=r(mjr,"MBart50Tokenizer"),mjr.forEach(t),pYe=r(D8," or "),CS=n(D8,"A",{href:!0});var gjr=s(CS);_Ye=r(gjr,"MBart50TokenizerFast"),gjr.forEach(t),uYe=r(D8," (mBART-50 model)"),D8.forEach(t),bYe=i(w),Kg=n(w,"LI",{});var E7e=s(Kg);OZ=n(E7e,"STRONG",{});var hjr=s(OZ);FYe=r(hjr,"mluke"),hjr.forEach(t),vYe=r(E7e," \u2014 "),wS=n(E7e,"A",{href:!0});var pjr=s(wS);TYe=r(pjr,"MLukeTokenizer"),pjr.forEach(t),MYe=r(E7e," (mLUKE model)"),E7e.forEach(t),EYe=i(w),Ts=n(w,"LI",{});var G8=s(Ts);VZ=n(G8,"STRONG",{});var _jr=s(VZ);CYe=r(_jr,"mobilebert"),_jr.forEach(t),wYe=r(G8," \u2014 "),AS=n(G8,"A",{href:!0});var ujr=s(AS);AYe=r(ujr,"MobileBertTokenizer"),ujr.forEach(t),yYe=r(G8," or "),yS=n(G8,"A",{href:!0});var bjr=s(yS);LYe=r(bjr,"MobileBertTokenizerFast"),bjr.forEach(t),xYe=r(G8," (MobileBERT model)"),G8.forEach(t),kYe=i(w),Ms=n(w,"LI",{});var O8=s(Ms);XZ=n(O8,"STRONG",{});var Fjr=s(XZ);SYe=r(Fjr,"mpnet"),Fjr.forEach(t),RYe=r(O8," \u2014 "),LS=n(O8,"A",{href:!0});var vjr=s(LS);BYe=r(vjr,"MPNetTokenizer"),vjr.forEach(t),PYe=r(O8," or "),xS=n(O8,"A",{href:!0});var Tjr=s(xS);$Ye=r(Tjr,"MPNetTokenizerFast"),Tjr.forEach(t),IYe=r(O8," (MPNet model)"),O8.forEach(t),qYe=i(w),Es=n(w,"LI",{});var V8=s(Es);zZ=n(V8,"STRONG",{});var Mjr=s(zZ);NYe=r(Mjr,"mt5"),Mjr.forEach(t),jYe=r(V8," \u2014 "),kS=n(V8,"A",{href:!0});var Ejr=s(kS);DYe=r(Ejr,"MT5Tokenizer"),Ejr.forEach(t),GYe=r(V8," or "),SS=n(V8,"A",{href:!0});var Cjr=s(SS);OYe=r(Cjr,"MT5TokenizerFast"),Cjr.forEach(t),VYe=r(V8," (mT5 model)"),V8.forEach(t),XYe=i(w),Cs=n(w,"LI",{});var X8=s(Cs);QZ=n(X8,"STRONG",{});var wjr=s(QZ);zYe=r(wjr,"openai-gpt"),wjr.forEach(t),QYe=r(X8," \u2014 "),RS=n(X8,"A",{href:!0});var Ajr=s(RS);WYe=r(Ajr,"OpenAIGPTTokenizer"),Ajr.forEach(t),HYe=r(X8," or "),BS=n(X8,"A",{href:!0});var yjr=s(BS);UYe=r(yjr,"OpenAIGPTTokenizerFast"),yjr.forEach(t),JYe=r(X8," (OpenAI GPT model)"),X8.forEach(t),YYe=i(w),ws=n(w,"LI",{});var z8=s(ws);WZ=n(z8,"STRONG",{});var Ljr=s(WZ);KYe=r(Ljr,"pegasus"),Ljr.forEach(t),ZYe=r(z8," \u2014 "),PS=n(z8,"A",{href:!0});var xjr=s(PS);eKe=r(xjr,"PegasusTokenizer"),xjr.forEach(t),oKe=r(z8," or "),$S=n(z8,"A",{href:!0});var kjr=s($S);rKe=r(kjr,"PegasusTokenizerFast"),kjr.forEach(t),tKe=r(z8," (Pegasus model)"),z8.forEach(t),aKe=i(w),Zg=n(w,"LI",{});var C7e=s(Zg);HZ=n(C7e,"STRONG",{});var Sjr=s(HZ);nKe=r(Sjr,"perceiver"),Sjr.forEach(t),sKe=r(C7e," \u2014 "),IS=n(C7e,"A",{href:!0});var Rjr=s(IS);lKe=r(Rjr,"PerceiverTokenizer"),Rjr.forEach(t),iKe=r(C7e," (Perceiver model)"),C7e.forEach(t),dKe=i(w),eh=n(w,"LI",{});var w7e=s(eh);UZ=n(w7e,"STRONG",{});var Bjr=s(UZ);cKe=r(Bjr,"phobert"),Bjr.forEach(t),fKe=r(w7e," \u2014 "),qS=n(w7e,"A",{href:!0});var Pjr=s(qS);mKe=r(Pjr,"PhobertTokenizer"),Pjr.forEach(t),gKe=r(w7e," (PhoBERT model)"),w7e.forEach(t),hKe=i(w),oh=n(w,"LI",{});var A7e=s(oh);JZ=n(A7e,"STRONG",{});var $jr=s(JZ);pKe=r($jr,"plbart"),$jr.forEach(t),_Ke=r(A7e," \u2014 "),NS=n(A7e,"A",{href:!0});var Ijr=s(NS);uKe=r(Ijr,"PLBartTokenizer"),Ijr.forEach(t),bKe=r(A7e," (PLBart model)"),A7e.forEach(t),FKe=i(w),rh=n(w,"LI",{});var y7e=s(rh);YZ=n(y7e,"STRONG",{});var qjr=s(YZ);vKe=r(qjr,"prophetnet"),qjr.forEach(t),TKe=r(y7e," \u2014 "),jS=n(y7e,"A",{href:!0});var Njr=s(jS);MKe=r(Njr,"ProphetNetTokenizer"),Njr.forEach(t),EKe=r(y7e," (ProphetNet model)"),y7e.forEach(t),CKe=i(w),As=n(w,"LI",{});var Q8=s(As);KZ=n(Q8,"STRONG",{});var jjr=s(KZ);wKe=r(jjr,"qdqbert"),jjr.forEach(t),AKe=r(Q8," \u2014 "),DS=n(Q8,"A",{href:!0});var Djr=s(DS);yKe=r(Djr,"BertTokenizer"),Djr.forEach(t),LKe=r(Q8," or "),GS=n(Q8,"A",{href:!0});var Gjr=s(GS);xKe=r(Gjr,"BertTokenizerFast"),Gjr.forEach(t),kKe=r(Q8," (QDQBert model)"),Q8.forEach(t),SKe=i(w),th=n(w,"LI",{});var L7e=s(th);ZZ=n(L7e,"STRONG",{});var Ojr=s(ZZ);RKe=r(Ojr,"rag"),Ojr.forEach(t),BKe=r(L7e," \u2014 "),OS=n(L7e,"A",{href:!0});var Vjr=s(OS);PKe=r(Vjr,"RagTokenizer"),Vjr.forEach(t),$Ke=r(L7e," (RAG model)"),L7e.forEach(t),IKe=i(w),ys=n(w,"LI",{});var W8=s(ys);eee=n(W8,"STRONG",{});var Xjr=s(eee);qKe=r(Xjr,"realm"),Xjr.forEach(t),NKe=r(W8," \u2014 "),VS=n(W8,"A",{href:!0});var zjr=s(VS);jKe=r(zjr,"RealmTokenizer"),zjr.forEach(t),DKe=r(W8," or "),XS=n(W8,"A",{href:!0});var Qjr=s(XS);GKe=r(Qjr,"RealmTokenizerFast"),Qjr.forEach(t),OKe=r(W8," (Realm model)"),W8.forEach(t),VKe=i(w),Ls=n(w,"LI",{});var H8=s(Ls);oee=n(H8,"STRONG",{});var Wjr=s(oee);XKe=r(Wjr,"reformer"),Wjr.forEach(t),zKe=r(H8," \u2014 "),zS=n(H8,"A",{href:!0});var Hjr=s(zS);QKe=r(Hjr,"ReformerTokenizer"),Hjr.forEach(t),WKe=r(H8," or "),QS=n(H8,"A",{href:!0});var Ujr=s(QS);HKe=r(Ujr,"ReformerTokenizerFast"),Ujr.forEach(t),UKe=r(H8," (Reformer model)"),H8.forEach(t),JKe=i(w),xs=n(w,"LI",{});var U8=s(xs);ree=n(U8,"STRONG",{});var Jjr=s(ree);YKe=r(Jjr,"rembert"),Jjr.forEach(t),KKe=r(U8," \u2014 "),WS=n(U8,"A",{href:!0});var Yjr=s(WS);ZKe=r(Yjr,"RemBertTokenizer"),Yjr.forEach(t),eZe=r(U8," or "),HS=n(U8,"A",{href:!0});var Kjr=s(HS);oZe=r(Kjr,"RemBertTokenizerFast"),Kjr.forEach(t),rZe=r(U8," (RemBERT model)"),U8.forEach(t),tZe=i(w),ks=n(w,"LI",{});var J8=s(ks);tee=n(J8,"STRONG",{});var Zjr=s(tee);aZe=r(Zjr,"retribert"),Zjr.forEach(t),nZe=r(J8," \u2014 "),US=n(J8,"A",{href:!0});var eDr=s(US);sZe=r(eDr,"RetriBertTokenizer"),eDr.forEach(t),lZe=r(J8," or "),JS=n(J8,"A",{href:!0});var oDr=s(JS);iZe=r(oDr,"RetriBertTokenizerFast"),oDr.forEach(t),dZe=r(J8," (RetriBERT model)"),J8.forEach(t),cZe=i(w),Ss=n(w,"LI",{});var Y8=s(Ss);aee=n(Y8,"STRONG",{});var rDr=s(aee);fZe=r(rDr,"roberta"),rDr.forEach(t),mZe=r(Y8," \u2014 "),YS=n(Y8,"A",{href:!0});var tDr=s(YS);gZe=r(tDr,"RobertaTokenizer"),tDr.forEach(t),hZe=r(Y8," or "),KS=n(Y8,"A",{href:!0});var aDr=s(KS);pZe=r(aDr,"RobertaTokenizerFast"),aDr.forEach(t),_Ze=r(Y8," (RoBERTa model)"),Y8.forEach(t),uZe=i(w),Rs=n(w,"LI",{});var K8=s(Rs);nee=n(K8,"STRONG",{});var nDr=s(nee);bZe=r(nDr,"roformer"),nDr.forEach(t),FZe=r(K8," \u2014 "),ZS=n(K8,"A",{href:!0});var sDr=s(ZS);vZe=r(sDr,"RoFormerTokenizer"),sDr.forEach(t),TZe=r(K8," or "),eR=n(K8,"A",{href:!0});var lDr=s(eR);MZe=r(lDr,"RoFormerTokenizerFast"),lDr.forEach(t),EZe=r(K8," (RoFormer model)"),K8.forEach(t),CZe=i(w),ah=n(w,"LI",{});var x7e=s(ah);see=n(x7e,"STRONG",{});var iDr=s(see);wZe=r(iDr,"speech_to_text"),iDr.forEach(t),AZe=r(x7e," \u2014 "),oR=n(x7e,"A",{href:!0});var dDr=s(oR);yZe=r(dDr,"Speech2TextTokenizer"),dDr.forEach(t),LZe=r(x7e," (Speech2Text model)"),x7e.forEach(t),xZe=i(w),nh=n(w,"LI",{});var k7e=s(nh);lee=n(k7e,"STRONG",{});var cDr=s(lee);kZe=r(cDr,"speech_to_text_2"),cDr.forEach(t),SZe=r(k7e," \u2014 "),rR=n(k7e,"A",{href:!0});var fDr=s(rR);RZe=r(fDr,"Speech2Text2Tokenizer"),fDr.forEach(t),BZe=r(k7e," (Speech2Text2 model)"),k7e.forEach(t),PZe=i(w),Bs=n(w,"LI",{});var Z8=s(Bs);iee=n(Z8,"STRONG",{});var mDr=s(iee);$Ze=r(mDr,"splinter"),mDr.forEach(t),IZe=r(Z8," \u2014 "),tR=n(Z8,"A",{href:!0});var gDr=s(tR);qZe=r(gDr,"SplinterTokenizer"),gDr.forEach(t),NZe=r(Z8," or "),aR=n(Z8,"A",{href:!0});var hDr=s(aR);jZe=r(hDr,"SplinterTokenizerFast"),hDr.forEach(t),DZe=r(Z8," (Splinter model)"),Z8.forEach(t),GZe=i(w),Ps=n(w,"LI",{});var e9=s(Ps);dee=n(e9,"STRONG",{});var pDr=s(dee);OZe=r(pDr,"squeezebert"),pDr.forEach(t),VZe=r(e9," \u2014 "),nR=n(e9,"A",{href:!0});var _Dr=s(nR);XZe=r(_Dr,"SqueezeBertTokenizer"),_Dr.forEach(t),zZe=r(e9," or "),sR=n(e9,"A",{href:!0});var uDr=s(sR);QZe=r(uDr,"SqueezeBertTokenizerFast"),uDr.forEach(t),WZe=r(e9," (SqueezeBERT model)"),e9.forEach(t),HZe=i(w),$s=n(w,"LI",{});var o9=s($s);cee=n(o9,"STRONG",{});var bDr=s(cee);UZe=r(bDr,"t5"),bDr.forEach(t),JZe=r(o9," \u2014 "),lR=n(o9,"A",{href:!0});var FDr=s(lR);YZe=r(FDr,"T5Tokenizer"),FDr.forEach(t),KZe=r(o9," or "),iR=n(o9,"A",{href:!0});var vDr=s(iR);ZZe=r(vDr,"T5TokenizerFast"),vDr.forEach(t),eeo=r(o9," (T5 model)"),o9.forEach(t),oeo=i(w),sh=n(w,"LI",{});var S7e=s(sh);fee=n(S7e,"STRONG",{});var TDr=s(fee);reo=r(TDr,"tapas"),TDr.forEach(t),teo=r(S7e," \u2014 "),dR=n(S7e,"A",{href:!0});var MDr=s(dR);aeo=r(MDr,"TapasTokenizer"),MDr.forEach(t),neo=r(S7e," (TAPAS model)"),S7e.forEach(t),seo=i(w),lh=n(w,"LI",{});var R7e=s(lh);mee=n(R7e,"STRONG",{});var EDr=s(mee);leo=r(EDr,"tapex"),EDr.forEach(t),ieo=r(R7e," \u2014 "),cR=n(R7e,"A",{href:!0});var CDr=s(cR);deo=r(CDr,"TapexTokenizer"),CDr.forEach(t),ceo=r(R7e," (TAPEX model)"),R7e.forEach(t),feo=i(w),ih=n(w,"LI",{});var B7e=s(ih);gee=n(B7e,"STRONG",{});var wDr=s(gee);meo=r(wDr,"transfo-xl"),wDr.forEach(t),geo=r(B7e," \u2014 "),fR=n(B7e,"A",{href:!0});var ADr=s(fR);heo=r(ADr,"TransfoXLTokenizer"),ADr.forEach(t),peo=r(B7e," (Transformer-XL model)"),B7e.forEach(t),_eo=i(w),dh=n(w,"LI",{});var P7e=s(dh);hee=n(P7e,"STRONG",{});var yDr=s(hee);ueo=r(yDr,"wav2vec2"),yDr.forEach(t),beo=r(P7e," \u2014 "),mR=n(P7e,"A",{href:!0});var LDr=s(mR);Feo=r(LDr,"Wav2Vec2CTCTokenizer"),LDr.forEach(t),veo=r(P7e," (Wav2Vec2 model)"),P7e.forEach(t),Teo=i(w),ch=n(w,"LI",{});var $7e=s(ch);pee=n($7e,"STRONG",{});var xDr=s(pee);Meo=r(xDr,"wav2vec2_phoneme"),xDr.forEach(t),Eeo=r($7e," \u2014 "),gR=n($7e,"A",{href:!0});var kDr=s(gR);Ceo=r(kDr,"Wav2Vec2PhonemeCTCTokenizer"),kDr.forEach(t),weo=r($7e," (Wav2Vec2Phoneme model)"),$7e.forEach(t),Aeo=i(w),Is=n(w,"LI",{});var r9=s(Is);_ee=n(r9,"STRONG",{});var SDr=s(_ee);yeo=r(SDr,"xglm"),SDr.forEach(t),Leo=r(r9," \u2014 "),hR=n(r9,"A",{href:!0});var RDr=s(hR);xeo=r(RDr,"XGLMTokenizer"),RDr.forEach(t),keo=r(r9," or "),pR=n(r9,"A",{href:!0});var BDr=s(pR);Seo=r(BDr,"XGLMTokenizerFast"),BDr.forEach(t),Reo=r(r9," (XGLM model)"),r9.forEach(t),Beo=i(w),fh=n(w,"LI",{});var I7e=s(fh);uee=n(I7e,"STRONG",{});var PDr=s(uee);Peo=r(PDr,"xlm"),PDr.forEach(t),$eo=r(I7e," \u2014 "),_R=n(I7e,"A",{href:!0});var $Dr=s(_R);Ieo=r($Dr,"XLMTokenizer"),$Dr.forEach(t),qeo=r(I7e," (XLM model)"),I7e.forEach(t),Neo=i(w),mh=n(w,"LI",{});var q7e=s(mh);bee=n(q7e,"STRONG",{});var IDr=s(bee);jeo=r(IDr,"xlm-prophetnet"),IDr.forEach(t),Deo=r(q7e," \u2014 "),uR=n(q7e,"A",{href:!0});var qDr=s(uR);Geo=r(qDr,"XLMProphetNetTokenizer"),qDr.forEach(t),Oeo=r(q7e," (XLMProphetNet model)"),q7e.forEach(t),Veo=i(w),qs=n(w,"LI",{});var t9=s(qs);Fee=n(t9,"STRONG",{});var NDr=s(Fee);Xeo=r(NDr,"xlm-roberta"),NDr.forEach(t),zeo=r(t9," \u2014 "),bR=n(t9,"A",{href:!0});var jDr=s(bR);Qeo=r(jDr,"XLMRobertaTokenizer"),jDr.forEach(t),Weo=r(t9," or "),FR=n(t9,"A",{href:!0});var DDr=s(FR);Heo=r(DDr,"XLMRobertaTokenizerFast"),DDr.forEach(t),Ueo=r(t9," (XLM-RoBERTa model)"),t9.forEach(t),Jeo=i(w),Ns=n(w,"LI",{});var a9=s(Ns);vee=n(a9,"STRONG",{});var GDr=s(vee);Yeo=r(GDr,"xlnet"),GDr.forEach(t),Keo=r(a9," \u2014 "),vR=n(a9,"A",{href:!0});var ODr=s(vR);Zeo=r(ODr,"XLNetTokenizer"),ODr.forEach(t),eoo=r(a9," or "),TR=n(a9,"A",{href:!0});var VDr=s(TR);ooo=r(VDr,"XLNetTokenizerFast"),VDr.forEach(t),roo=r(a9," (XLNet model)"),a9.forEach(t),w.forEach(t),too=i(ha),Tee=n(ha,"P",{});var XDr=s(Tee);aoo=r(XDr,"Examples:"),XDr.forEach(t),noo=i(ha),m(PC.$$.fragment,ha),ha.forEach(t),soo=i(Vs),gh=n(Vs,"DIV",{class:!0});var ePe=s(gh);m($C.$$.fragment,ePe),loo=i(ePe),Mee=n(ePe,"P",{});var zDr=s(Mee);ioo=r(zDr,"Register a new tokenizer in this mapping."),zDr.forEach(t),ePe.forEach(t),Vs.forEach(t),JSe=i(c),Wi=n(c,"H2",{class:!0});var oPe=s(Wi);hh=n(oPe,"A",{id:!0,class:!0,href:!0});var QDr=s(hh);Eee=n(QDr,"SPAN",{});var WDr=s(Eee);m(IC.$$.fragment,WDr),WDr.forEach(t),QDr.forEach(t),doo=i(oPe),Cee=n(oPe,"SPAN",{});var HDr=s(Cee);coo=r(HDr,"AutoFeatureExtractor"),HDr.forEach(t),oPe.forEach(t),YSe=i(c),Ho=n(c,"DIV",{class:!0});var Xs=s(Ho);m(qC.$$.fragment,Xs),foo=i(Xs),NC=n(Xs,"P",{});var rPe=s(NC);moo=r(rPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MR=n(rPe,"A",{href:!0});var UDr=s(MR);goo=r(UDr,"AutoFeatureExtractor.from_pretrained()"),UDr.forEach(t),hoo=r(rPe," class method."),rPe.forEach(t),poo=i(Xs),jC=n(Xs,"P",{});var tPe=s(jC);_oo=r(tPe,"This class cannot be instantiated directly using "),wee=n(tPe,"CODE",{});var JDr=s(wee);uoo=r(JDr,"__init__()"),JDr.forEach(t),boo=r(tPe," (throws an error)."),tPe.forEach(t),Foo=i(Xs),$e=n(Xs,"DIV",{class:!0});var Nt=s($e);m(DC.$$.fragment,Nt),voo=i(Nt),Aee=n(Nt,"P",{});var YDr=s(Aee);Too=r(YDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),YDr.forEach(t),Moo=i(Nt),Va=n(Nt,"P",{});var FE=s(Va);Eoo=r(FE,"The feature extractor class to instantiate is selected based on the "),yee=n(FE,"CODE",{});var KDr=s(yee);Coo=r(KDr,"model_type"),KDr.forEach(t),woo=r(FE,` property of the config object
(either passed as an argument or loaded from `),Lee=n(FE,"CODE",{});var ZDr=s(Lee);Aoo=r(ZDr,"pretrained_model_name_or_path"),ZDr.forEach(t),yoo=r(FE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),xee=n(FE,"CODE",{});var eGr=s(xee);Loo=r(eGr,"pretrained_model_name_or_path"),eGr.forEach(t),xoo=r(FE,":"),FE.forEach(t),koo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);ph=n(ne,"LI",{});var N7e=s(ph);kee=n(N7e,"STRONG",{});var oGr=s(kee);Soo=r(oGr,"beit"),oGr.forEach(t),Roo=r(N7e," \u2014 "),ER=n(N7e,"A",{href:!0});var rGr=s(ER);Boo=r(rGr,"BeitFeatureExtractor"),rGr.forEach(t),Poo=r(N7e," (BEiT model)"),N7e.forEach(t),$oo=i(ne),_h=n(ne,"LI",{});var j7e=s(_h);See=n(j7e,"STRONG",{});var tGr=s(See);Ioo=r(tGr,"clip"),tGr.forEach(t),qoo=r(j7e," \u2014 "),CR=n(j7e,"A",{href:!0});var aGr=s(CR);Noo=r(aGr,"CLIPFeatureExtractor"),aGr.forEach(t),joo=r(j7e," (CLIP model)"),j7e.forEach(t),Doo=i(ne),uh=n(ne,"LI",{});var D7e=s(uh);Ree=n(D7e,"STRONG",{});var nGr=s(Ree);Goo=r(nGr,"convnext"),nGr.forEach(t),Ooo=r(D7e," \u2014 "),wR=n(D7e,"A",{href:!0});var sGr=s(wR);Voo=r(sGr,"ConvNextFeatureExtractor"),sGr.forEach(t),Xoo=r(D7e," (ConvNext model)"),D7e.forEach(t),zoo=i(ne),bh=n(ne,"LI",{});var G7e=s(bh);Bee=n(G7e,"STRONG",{});var lGr=s(Bee);Qoo=r(lGr,"deit"),lGr.forEach(t),Woo=r(G7e," \u2014 "),AR=n(G7e,"A",{href:!0});var iGr=s(AR);Hoo=r(iGr,"DeiTFeatureExtractor"),iGr.forEach(t),Uoo=r(G7e," (DeiT model)"),G7e.forEach(t),Joo=i(ne),Fh=n(ne,"LI",{});var O7e=s(Fh);Pee=n(O7e,"STRONG",{});var dGr=s(Pee);Yoo=r(dGr,"detr"),dGr.forEach(t),Koo=r(O7e," \u2014 "),yR=n(O7e,"A",{href:!0});var cGr=s(yR);Zoo=r(cGr,"DetrFeatureExtractor"),cGr.forEach(t),ero=r(O7e," (DETR model)"),O7e.forEach(t),oro=i(ne),vh=n(ne,"LI",{});var V7e=s(vh);$ee=n(V7e,"STRONG",{});var fGr=s($ee);rro=r(fGr,"hubert"),fGr.forEach(t),tro=r(V7e," \u2014 "),LR=n(V7e,"A",{href:!0});var mGr=s(LR);aro=r(mGr,"Wav2Vec2FeatureExtractor"),mGr.forEach(t),nro=r(V7e," (Hubert model)"),V7e.forEach(t),sro=i(ne),Th=n(ne,"LI",{});var X7e=s(Th);Iee=n(X7e,"STRONG",{});var gGr=s(Iee);lro=r(gGr,"layoutlmv2"),gGr.forEach(t),iro=r(X7e," \u2014 "),xR=n(X7e,"A",{href:!0});var hGr=s(xR);dro=r(hGr,"LayoutLMv2FeatureExtractor"),hGr.forEach(t),cro=r(X7e," (LayoutLMv2 model)"),X7e.forEach(t),fro=i(ne),Mh=n(ne,"LI",{});var z7e=s(Mh);qee=n(z7e,"STRONG",{});var pGr=s(qee);mro=r(pGr,"maskformer"),pGr.forEach(t),gro=r(z7e," \u2014 "),kR=n(z7e,"A",{href:!0});var _Gr=s(kR);hro=r(_Gr,"MaskFormerFeatureExtractor"),_Gr.forEach(t),pro=r(z7e," (MaskFormer model)"),z7e.forEach(t),_ro=i(ne),Eh=n(ne,"LI",{});var Q7e=s(Eh);Nee=n(Q7e,"STRONG",{});var uGr=s(Nee);uro=r(uGr,"perceiver"),uGr.forEach(t),bro=r(Q7e," \u2014 "),SR=n(Q7e,"A",{href:!0});var bGr=s(SR);Fro=r(bGr,"PerceiverFeatureExtractor"),bGr.forEach(t),vro=r(Q7e," (Perceiver model)"),Q7e.forEach(t),Tro=i(ne),Ch=n(ne,"LI",{});var W7e=s(Ch);jee=n(W7e,"STRONG",{});var FGr=s(jee);Mro=r(FGr,"poolformer"),FGr.forEach(t),Ero=r(W7e," \u2014 "),RR=n(W7e,"A",{href:!0});var vGr=s(RR);Cro=r(vGr,"PoolFormerFeatureExtractor"),vGr.forEach(t),wro=r(W7e," (PoolFormer model)"),W7e.forEach(t),Aro=i(ne),wh=n(ne,"LI",{});var H7e=s(wh);Dee=n(H7e,"STRONG",{});var TGr=s(Dee);yro=r(TGr,"resnet"),TGr.forEach(t),Lro=r(H7e," \u2014 "),BR=n(H7e,"A",{href:!0});var MGr=s(BR);xro=r(MGr,"ConvNextFeatureExtractor"),MGr.forEach(t),kro=r(H7e," (ResNet model)"),H7e.forEach(t),Sro=i(ne),Ah=n(ne,"LI",{});var U7e=s(Ah);Gee=n(U7e,"STRONG",{});var EGr=s(Gee);Rro=r(EGr,"segformer"),EGr.forEach(t),Bro=r(U7e," \u2014 "),PR=n(U7e,"A",{href:!0});var CGr=s(PR);Pro=r(CGr,"SegformerFeatureExtractor"),CGr.forEach(t),$ro=r(U7e," (SegFormer model)"),U7e.forEach(t),Iro=i(ne),yh=n(ne,"LI",{});var J7e=s(yh);Oee=n(J7e,"STRONG",{});var wGr=s(Oee);qro=r(wGr,"speech_to_text"),wGr.forEach(t),Nro=r(J7e," \u2014 "),$R=n(J7e,"A",{href:!0});var AGr=s($R);jro=r(AGr,"Speech2TextFeatureExtractor"),AGr.forEach(t),Dro=r(J7e," (Speech2Text model)"),J7e.forEach(t),Gro=i(ne),Lh=n(ne,"LI",{});var Y7e=s(Lh);Vee=n(Y7e,"STRONG",{});var yGr=s(Vee);Oro=r(yGr,"swin"),yGr.forEach(t),Vro=r(Y7e," \u2014 "),IR=n(Y7e,"A",{href:!0});var LGr=s(IR);Xro=r(LGr,"ViTFeatureExtractor"),LGr.forEach(t),zro=r(Y7e," (Swin model)"),Y7e.forEach(t),Qro=i(ne),xh=n(ne,"LI",{});var K7e=s(xh);Xee=n(K7e,"STRONG",{});var xGr=s(Xee);Wro=r(xGr,"van"),xGr.forEach(t),Hro=r(K7e," \u2014 "),qR=n(K7e,"A",{href:!0});var kGr=s(qR);Uro=r(kGr,"ConvNextFeatureExtractor"),kGr.forEach(t),Jro=r(K7e," (VAN model)"),K7e.forEach(t),Yro=i(ne),kh=n(ne,"LI",{});var Z7e=s(kh);zee=n(Z7e,"STRONG",{});var SGr=s(zee);Kro=r(SGr,"vit"),SGr.forEach(t),Zro=r(Z7e," \u2014 "),NR=n(Z7e,"A",{href:!0});var RGr=s(NR);eto=r(RGr,"ViTFeatureExtractor"),RGr.forEach(t),oto=r(Z7e," (ViT model)"),Z7e.forEach(t),rto=i(ne),Sh=n(ne,"LI",{});var eMe=s(Sh);Qee=n(eMe,"STRONG",{});var BGr=s(Qee);tto=r(BGr,"vit_mae"),BGr.forEach(t),ato=r(eMe," \u2014 "),jR=n(eMe,"A",{href:!0});var PGr=s(jR);nto=r(PGr,"ViTFeatureExtractor"),PGr.forEach(t),sto=r(eMe," (ViTMAE model)"),eMe.forEach(t),lto=i(ne),Rh=n(ne,"LI",{});var oMe=s(Rh);Wee=n(oMe,"STRONG",{});var $Gr=s(Wee);ito=r($Gr,"wav2vec2"),$Gr.forEach(t),dto=r(oMe," \u2014 "),DR=n(oMe,"A",{href:!0});var IGr=s(DR);cto=r(IGr,"Wav2Vec2FeatureExtractor"),IGr.forEach(t),fto=r(oMe," (Wav2Vec2 model)"),oMe.forEach(t),ne.forEach(t),mto=i(Nt),m(Bh.$$.fragment,Nt),gto=i(Nt),Hee=n(Nt,"P",{});var qGr=s(Hee);hto=r(qGr,"Examples:"),qGr.forEach(t),pto=i(Nt),m(GC.$$.fragment,Nt),Nt.forEach(t),_to=i(Xs),Ph=n(Xs,"DIV",{class:!0});var aPe=s(Ph);m(OC.$$.fragment,aPe),uto=i(aPe),Uee=n(aPe,"P",{});var NGr=s(Uee);bto=r(NGr,"Register a new feature extractor for this class."),NGr.forEach(t),aPe.forEach(t),Xs.forEach(t),KSe=i(c),Hi=n(c,"H2",{class:!0});var nPe=s(Hi);$h=n(nPe,"A",{id:!0,class:!0,href:!0});var jGr=s($h);Jee=n(jGr,"SPAN",{});var DGr=s(Jee);m(VC.$$.fragment,DGr),DGr.forEach(t),jGr.forEach(t),Fto=i(nPe),Yee=n(nPe,"SPAN",{});var GGr=s(Yee);vto=r(GGr,"AutoProcessor"),GGr.forEach(t),nPe.forEach(t),ZSe=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(XC.$$.fragment,zs),Tto=i(zs),zC=n(zs,"P",{});var sPe=s(zC);Mto=r(sPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),GR=n(sPe,"A",{href:!0});var OGr=s(GR);Eto=r(OGr,"AutoProcessor.from_pretrained()"),OGr.forEach(t),Cto=r(sPe," class method."),sPe.forEach(t),wto=i(zs),QC=n(zs,"P",{});var lPe=s(QC);Ato=r(lPe,"This class cannot be instantiated directly using "),Kee=n(lPe,"CODE",{});var VGr=s(Kee);yto=r(VGr,"__init__()"),VGr.forEach(t),Lto=r(lPe," (throws an error)."),lPe.forEach(t),xto=i(zs),Ie=n(zs,"DIV",{class:!0});var jt=s(Ie);m(WC.$$.fragment,jt),kto=i(jt),Zee=n(jt,"P",{});var XGr=s(Zee);Sto=r(XGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XGr.forEach(t),Rto=i(jt),Ui=n(jt,"P",{});var JH=s(Ui);Bto=r(JH,"The processor class to instantiate is selected based on the "),eoe=n(JH,"CODE",{});var zGr=s(eoe);Pto=r(zGr,"model_type"),zGr.forEach(t),$to=r(JH,` property of the config object (either
passed as an argument or loaded from `),ooe=n(JH,"CODE",{});var QGr=s(ooe);Ito=r(QGr,"pretrained_model_name_or_path"),QGr.forEach(t),qto=r(JH," if possible):"),JH.forEach(t),Nto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Ih=n(jo,"LI",{});var rMe=s(Ih);roe=n(rMe,"STRONG",{});var WGr=s(roe);jto=r(WGr,"clip"),WGr.forEach(t),Dto=r(rMe," \u2014 "),OR=n(rMe,"A",{href:!0});var HGr=s(OR);Gto=r(HGr,"CLIPProcessor"),HGr.forEach(t),Oto=r(rMe," (CLIP model)"),rMe.forEach(t),Vto=i(jo),qh=n(jo,"LI",{});var tMe=s(qh);toe=n(tMe,"STRONG",{});var UGr=s(toe);Xto=r(UGr,"layoutlmv2"),UGr.forEach(t),zto=r(tMe," \u2014 "),VR=n(tMe,"A",{href:!0});var JGr=s(VR);Qto=r(JGr,"LayoutLMv2Processor"),JGr.forEach(t),Wto=r(tMe," (LayoutLMv2 model)"),tMe.forEach(t),Hto=i(jo),Nh=n(jo,"LI",{});var aMe=s(Nh);aoe=n(aMe,"STRONG",{});var YGr=s(aoe);Uto=r(YGr,"layoutxlm"),YGr.forEach(t),Jto=r(aMe," \u2014 "),XR=n(aMe,"A",{href:!0});var KGr=s(XR);Yto=r(KGr,"LayoutXLMProcessor"),KGr.forEach(t),Kto=r(aMe," (LayoutXLM model)"),aMe.forEach(t),Zto=i(jo),jh=n(jo,"LI",{});var nMe=s(jh);noe=n(nMe,"STRONG",{});var ZGr=s(noe);eao=r(ZGr,"speech_to_text"),ZGr.forEach(t),oao=r(nMe," \u2014 "),zR=n(nMe,"A",{href:!0});var eOr=s(zR);rao=r(eOr,"Speech2TextProcessor"),eOr.forEach(t),tao=r(nMe," (Speech2Text model)"),nMe.forEach(t),aao=i(jo),Dh=n(jo,"LI",{});var sMe=s(Dh);soe=n(sMe,"STRONG",{});var oOr=s(soe);nao=r(oOr,"speech_to_text_2"),oOr.forEach(t),sao=r(sMe," \u2014 "),QR=n(sMe,"A",{href:!0});var rOr=s(QR);lao=r(rOr,"Speech2Text2Processor"),rOr.forEach(t),iao=r(sMe," (Speech2Text2 model)"),sMe.forEach(t),dao=i(jo),Gh=n(jo,"LI",{});var lMe=s(Gh);loe=n(lMe,"STRONG",{});var tOr=s(loe);cao=r(tOr,"trocr"),tOr.forEach(t),fao=r(lMe," \u2014 "),WR=n(lMe,"A",{href:!0});var aOr=s(WR);mao=r(aOr,"TrOCRProcessor"),aOr.forEach(t),gao=r(lMe," (TrOCR model)"),lMe.forEach(t),hao=i(jo),Oh=n(jo,"LI",{});var iMe=s(Oh);ioe=n(iMe,"STRONG",{});var nOr=s(ioe);pao=r(nOr,"vision-text-dual-encoder"),nOr.forEach(t),_ao=r(iMe," \u2014 "),HR=n(iMe,"A",{href:!0});var sOr=s(HR);uao=r(sOr,"VisionTextDualEncoderProcessor"),sOr.forEach(t),bao=r(iMe," (VisionTextDualEncoder model)"),iMe.forEach(t),Fao=i(jo),Vh=n(jo,"LI",{});var dMe=s(Vh);doe=n(dMe,"STRONG",{});var lOr=s(doe);vao=r(lOr,"wav2vec2"),lOr.forEach(t),Tao=r(dMe," \u2014 "),UR=n(dMe,"A",{href:!0});var iOr=s(UR);Mao=r(iOr,"Wav2Vec2Processor"),iOr.forEach(t),Eao=r(dMe," (Wav2Vec2 model)"),dMe.forEach(t),jo.forEach(t),Cao=i(jt),m(Xh.$$.fragment,jt),wao=i(jt),coe=n(jt,"P",{});var dOr=s(coe);Aao=r(dOr,"Examples:"),dOr.forEach(t),yao=i(jt),m(HC.$$.fragment,jt),jt.forEach(t),Lao=i(zs),zh=n(zs,"DIV",{class:!0});var iPe=s(zh);m(UC.$$.fragment,iPe),xao=i(iPe),foe=n(iPe,"P",{});var cOr=s(foe);kao=r(cOr,"Register a new processor for this class."),cOr.forEach(t),iPe.forEach(t),zs.forEach(t),eRe=i(c),Ji=n(c,"H2",{class:!0});var dPe=s(Ji);Qh=n(dPe,"A",{id:!0,class:!0,href:!0});var fOr=s(Qh);moe=n(fOr,"SPAN",{});var mOr=s(moe);m(JC.$$.fragment,mOr),mOr.forEach(t),fOr.forEach(t),Sao=i(dPe),goe=n(dPe,"SPAN",{});var gOr=s(goe);Rao=r(gOr,"AutoModel"),gOr.forEach(t),dPe.forEach(t),oRe=i(c),Jo=n(c,"DIV",{class:!0});var Qs=s(Jo);m(YC.$$.fragment,Qs),Bao=i(Qs),Yi=n(Qs,"P",{});var YH=s(Yi);Pao=r(YH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JR=n(YH,"A",{href:!0});var hOr=s(JR);$ao=r(hOr,"from_pretrained()"),hOr.forEach(t),Iao=r(YH," class method or the "),YR=n(YH,"A",{href:!0});var pOr=s(YR);qao=r(pOr,"from_config()"),pOr.forEach(t),Nao=r(YH,` class
method.`),YH.forEach(t),jao=i(Qs),KC=n(Qs,"P",{});var cPe=s(KC);Dao=r(cPe,"This class cannot be instantiated directly using "),hoe=n(cPe,"CODE",{});var _Or=s(hoe);Gao=r(_Or,"__init__()"),_Or.forEach(t),Oao=r(cPe," (throws an error)."),cPe.forEach(t),Vao=i(Qs),Xr=n(Qs,"DIV",{class:!0});var Ws=s(Xr);m(ZC.$$.fragment,Ws),Xao=i(Ws),poe=n(Ws,"P",{});var uOr=s(poe);zao=r(uOr,"Instantiates one of the base model classes of the library from a configuration."),uOr.forEach(t),Qao=i(Ws),Ki=n(Ws,"P",{});var KH=s(Ki);Wao=r(KH,`Note:
Loading a model from its configuration file does `),_oe=n(KH,"STRONG",{});var bOr=s(_oe);Hao=r(bOr,"not"),bOr.forEach(t),Uao=r(KH,` load the model weights. It only affects the
model\u2019s configuration. Use `),KR=n(KH,"A",{href:!0});var FOr=s(KR);Jao=r(FOr,"from_pretrained()"),FOr.forEach(t),Yao=r(KH," to load the model weights."),KH.forEach(t),Kao=i(Ws),uoe=n(Ws,"P",{});var vOr=s(uoe);Zao=r(vOr,"Examples:"),vOr.forEach(t),eno=i(Ws),m(e5.$$.fragment,Ws),Ws.forEach(t),ono=i(Qs),qe=n(Qs,"DIV",{class:!0});var Dt=s(qe);m(o5.$$.fragment,Dt),rno=i(Dt),boe=n(Dt,"P",{});var TOr=s(boe);tno=r(TOr,"Instantiate one of the base model classes of the library from a pretrained model."),TOr.forEach(t),ano=i(Dt),Xa=n(Dt,"P",{});var vE=s(Xa);nno=r(vE,"The model class to instantiate is selected based on the "),Foe=n(vE,"CODE",{});var MOr=s(Foe);sno=r(MOr,"model_type"),MOr.forEach(t),lno=r(vE,` property of the config object (either
passed as an argument or loaded from `),voe=n(vE,"CODE",{});var EOr=s(voe);ino=r(EOr,"pretrained_model_name_or_path"),EOr.forEach(t),dno=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Toe=n(vE,"CODE",{});var COr=s(Toe);cno=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),fno=r(vE,":"),vE.forEach(t),mno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Wh=n(M,"LI",{});var cMe=s(Wh);Moe=n(cMe,"STRONG",{});var wOr=s(Moe);gno=r(wOr,"albert"),wOr.forEach(t),hno=r(cMe," \u2014 "),ZR=n(cMe,"A",{href:!0});var AOr=s(ZR);pno=r(AOr,"AlbertModel"),AOr.forEach(t),_no=r(cMe," (ALBERT model)"),cMe.forEach(t),uno=i(M),Hh=n(M,"LI",{});var fMe=s(Hh);Eoe=n(fMe,"STRONG",{});var yOr=s(Eoe);bno=r(yOr,"bart"),yOr.forEach(t),Fno=r(fMe," \u2014 "),eB=n(fMe,"A",{href:!0});var LOr=s(eB);vno=r(LOr,"BartModel"),LOr.forEach(t),Tno=r(fMe," (BART model)"),fMe.forEach(t),Mno=i(M),Uh=n(M,"LI",{});var mMe=s(Uh);Coe=n(mMe,"STRONG",{});var xOr=s(Coe);Eno=r(xOr,"beit"),xOr.forEach(t),Cno=r(mMe," \u2014 "),oB=n(mMe,"A",{href:!0});var kOr=s(oB);wno=r(kOr,"BeitModel"),kOr.forEach(t),Ano=r(mMe," (BEiT model)"),mMe.forEach(t),yno=i(M),Jh=n(M,"LI",{});var gMe=s(Jh);woe=n(gMe,"STRONG",{});var SOr=s(woe);Lno=r(SOr,"bert"),SOr.forEach(t),xno=r(gMe," \u2014 "),rB=n(gMe,"A",{href:!0});var ROr=s(rB);kno=r(ROr,"BertModel"),ROr.forEach(t),Sno=r(gMe," (BERT model)"),gMe.forEach(t),Rno=i(M),Yh=n(M,"LI",{});var hMe=s(Yh);Aoe=n(hMe,"STRONG",{});var BOr=s(Aoe);Bno=r(BOr,"bert-generation"),BOr.forEach(t),Pno=r(hMe," \u2014 "),tB=n(hMe,"A",{href:!0});var POr=s(tB);$no=r(POr,"BertGenerationEncoder"),POr.forEach(t),Ino=r(hMe," (Bert Generation model)"),hMe.forEach(t),qno=i(M),Kh=n(M,"LI",{});var pMe=s(Kh);yoe=n(pMe,"STRONG",{});var $Or=s(yoe);Nno=r($Or,"big_bird"),$Or.forEach(t),jno=r(pMe," \u2014 "),aB=n(pMe,"A",{href:!0});var IOr=s(aB);Dno=r(IOr,"BigBirdModel"),IOr.forEach(t),Gno=r(pMe," (BigBird model)"),pMe.forEach(t),Ono=i(M),Zh=n(M,"LI",{});var _Me=s(Zh);Loe=n(_Me,"STRONG",{});var qOr=s(Loe);Vno=r(qOr,"bigbird_pegasus"),qOr.forEach(t),Xno=r(_Me," \u2014 "),nB=n(_Me,"A",{href:!0});var NOr=s(nB);zno=r(NOr,"BigBirdPegasusModel"),NOr.forEach(t),Qno=r(_Me," (BigBirdPegasus model)"),_Me.forEach(t),Wno=i(M),ep=n(M,"LI",{});var uMe=s(ep);xoe=n(uMe,"STRONG",{});var jOr=s(xoe);Hno=r(jOr,"blenderbot"),jOr.forEach(t),Uno=r(uMe," \u2014 "),sB=n(uMe,"A",{href:!0});var DOr=s(sB);Jno=r(DOr,"BlenderbotModel"),DOr.forEach(t),Yno=r(uMe," (Blenderbot model)"),uMe.forEach(t),Kno=i(M),op=n(M,"LI",{});var bMe=s(op);koe=n(bMe,"STRONG",{});var GOr=s(koe);Zno=r(GOr,"blenderbot-small"),GOr.forEach(t),eso=r(bMe," \u2014 "),lB=n(bMe,"A",{href:!0});var OOr=s(lB);oso=r(OOr,"BlenderbotSmallModel"),OOr.forEach(t),rso=r(bMe," (BlenderbotSmall model)"),bMe.forEach(t),tso=i(M),rp=n(M,"LI",{});var FMe=s(rp);Soe=n(FMe,"STRONG",{});var VOr=s(Soe);aso=r(VOr,"camembert"),VOr.forEach(t),nso=r(FMe," \u2014 "),iB=n(FMe,"A",{href:!0});var XOr=s(iB);sso=r(XOr,"CamembertModel"),XOr.forEach(t),lso=r(FMe," (CamemBERT model)"),FMe.forEach(t),iso=i(M),tp=n(M,"LI",{});var vMe=s(tp);Roe=n(vMe,"STRONG",{});var zOr=s(Roe);dso=r(zOr,"canine"),zOr.forEach(t),cso=r(vMe," \u2014 "),dB=n(vMe,"A",{href:!0});var QOr=s(dB);fso=r(QOr,"CanineModel"),QOr.forEach(t),mso=r(vMe," (Canine model)"),vMe.forEach(t),gso=i(M),ap=n(M,"LI",{});var TMe=s(ap);Boe=n(TMe,"STRONG",{});var WOr=s(Boe);hso=r(WOr,"clip"),WOr.forEach(t),pso=r(TMe," \u2014 "),cB=n(TMe,"A",{href:!0});var HOr=s(cB);_so=r(HOr,"CLIPModel"),HOr.forEach(t),uso=r(TMe," (CLIP model)"),TMe.forEach(t),bso=i(M),np=n(M,"LI",{});var MMe=s(np);Poe=n(MMe,"STRONG",{});var UOr=s(Poe);Fso=r(UOr,"convbert"),UOr.forEach(t),vso=r(MMe," \u2014 "),fB=n(MMe,"A",{href:!0});var JOr=s(fB);Tso=r(JOr,"ConvBertModel"),JOr.forEach(t),Mso=r(MMe," (ConvBERT model)"),MMe.forEach(t),Eso=i(M),sp=n(M,"LI",{});var EMe=s(sp);$oe=n(EMe,"STRONG",{});var YOr=s($oe);Cso=r(YOr,"convnext"),YOr.forEach(t),wso=r(EMe," \u2014 "),mB=n(EMe,"A",{href:!0});var KOr=s(mB);Aso=r(KOr,"ConvNextModel"),KOr.forEach(t),yso=r(EMe," (ConvNext model)"),EMe.forEach(t),Lso=i(M),lp=n(M,"LI",{});var CMe=s(lp);Ioe=n(CMe,"STRONG",{});var ZOr=s(Ioe);xso=r(ZOr,"ctrl"),ZOr.forEach(t),kso=r(CMe," \u2014 "),gB=n(CMe,"A",{href:!0});var eVr=s(gB);Sso=r(eVr,"CTRLModel"),eVr.forEach(t),Rso=r(CMe," (CTRL model)"),CMe.forEach(t),Bso=i(M),ip=n(M,"LI",{});var wMe=s(ip);qoe=n(wMe,"STRONG",{});var oVr=s(qoe);Pso=r(oVr,"data2vec-audio"),oVr.forEach(t),$so=r(wMe," \u2014 "),hB=n(wMe,"A",{href:!0});var rVr=s(hB);Iso=r(rVr,"Data2VecAudioModel"),rVr.forEach(t),qso=r(wMe," (Data2VecAudio model)"),wMe.forEach(t),Nso=i(M),dp=n(M,"LI",{});var AMe=s(dp);Noe=n(AMe,"STRONG",{});var tVr=s(Noe);jso=r(tVr,"data2vec-text"),tVr.forEach(t),Dso=r(AMe," \u2014 "),pB=n(AMe,"A",{href:!0});var aVr=s(pB);Gso=r(aVr,"Data2VecTextModel"),aVr.forEach(t),Oso=r(AMe," (Data2VecText model)"),AMe.forEach(t),Vso=i(M),cp=n(M,"LI",{});var yMe=s(cp);joe=n(yMe,"STRONG",{});var nVr=s(joe);Xso=r(nVr,"deberta"),nVr.forEach(t),zso=r(yMe," \u2014 "),_B=n(yMe,"A",{href:!0});var sVr=s(_B);Qso=r(sVr,"DebertaModel"),sVr.forEach(t),Wso=r(yMe," (DeBERTa model)"),yMe.forEach(t),Hso=i(M),fp=n(M,"LI",{});var LMe=s(fp);Doe=n(LMe,"STRONG",{});var lVr=s(Doe);Uso=r(lVr,"deberta-v2"),lVr.forEach(t),Jso=r(LMe," \u2014 "),uB=n(LMe,"A",{href:!0});var iVr=s(uB);Yso=r(iVr,"DebertaV2Model"),iVr.forEach(t),Kso=r(LMe," (DeBERTa-v2 model)"),LMe.forEach(t),Zso=i(M),mp=n(M,"LI",{});var xMe=s(mp);Goe=n(xMe,"STRONG",{});var dVr=s(Goe);elo=r(dVr,"decision_transformer"),dVr.forEach(t),olo=r(xMe," \u2014 "),bB=n(xMe,"A",{href:!0});var cVr=s(bB);rlo=r(cVr,"DecisionTransformerModel"),cVr.forEach(t),tlo=r(xMe," (Decision Transformer model)"),xMe.forEach(t),alo=i(M),gp=n(M,"LI",{});var kMe=s(gp);Ooe=n(kMe,"STRONG",{});var fVr=s(Ooe);nlo=r(fVr,"deit"),fVr.forEach(t),slo=r(kMe," \u2014 "),FB=n(kMe,"A",{href:!0});var mVr=s(FB);llo=r(mVr,"DeiTModel"),mVr.forEach(t),ilo=r(kMe," (DeiT model)"),kMe.forEach(t),dlo=i(M),hp=n(M,"LI",{});var SMe=s(hp);Voe=n(SMe,"STRONG",{});var gVr=s(Voe);clo=r(gVr,"detr"),gVr.forEach(t),flo=r(SMe," \u2014 "),vB=n(SMe,"A",{href:!0});var hVr=s(vB);mlo=r(hVr,"DetrModel"),hVr.forEach(t),glo=r(SMe," (DETR model)"),SMe.forEach(t),hlo=i(M),pp=n(M,"LI",{});var RMe=s(pp);Xoe=n(RMe,"STRONG",{});var pVr=s(Xoe);plo=r(pVr,"distilbert"),pVr.forEach(t),_lo=r(RMe," \u2014 "),TB=n(RMe,"A",{href:!0});var _Vr=s(TB);ulo=r(_Vr,"DistilBertModel"),_Vr.forEach(t),blo=r(RMe," (DistilBERT model)"),RMe.forEach(t),Flo=i(M),_p=n(M,"LI",{});var BMe=s(_p);zoe=n(BMe,"STRONG",{});var uVr=s(zoe);vlo=r(uVr,"dpr"),uVr.forEach(t),Tlo=r(BMe," \u2014 "),MB=n(BMe,"A",{href:!0});var bVr=s(MB);Mlo=r(bVr,"DPRQuestionEncoder"),bVr.forEach(t),Elo=r(BMe," (DPR model)"),BMe.forEach(t),Clo=i(M),up=n(M,"LI",{});var PMe=s(up);Qoe=n(PMe,"STRONG",{});var FVr=s(Qoe);wlo=r(FVr,"dpt"),FVr.forEach(t),Alo=r(PMe," \u2014 "),EB=n(PMe,"A",{href:!0});var vVr=s(EB);ylo=r(vVr,"DPTModel"),vVr.forEach(t),Llo=r(PMe," (DPT model)"),PMe.forEach(t),xlo=i(M),bp=n(M,"LI",{});var $Me=s(bp);Woe=n($Me,"STRONG",{});var TVr=s(Woe);klo=r(TVr,"electra"),TVr.forEach(t),Slo=r($Me," \u2014 "),CB=n($Me,"A",{href:!0});var MVr=s(CB);Rlo=r(MVr,"ElectraModel"),MVr.forEach(t),Blo=r($Me," (ELECTRA model)"),$Me.forEach(t),Plo=i(M),Fp=n(M,"LI",{});var IMe=s(Fp);Hoe=n(IMe,"STRONG",{});var EVr=s(Hoe);$lo=r(EVr,"flaubert"),EVr.forEach(t),Ilo=r(IMe," \u2014 "),wB=n(IMe,"A",{href:!0});var CVr=s(wB);qlo=r(CVr,"FlaubertModel"),CVr.forEach(t),Nlo=r(IMe," (FlauBERT model)"),IMe.forEach(t),jlo=i(M),vp=n(M,"LI",{});var qMe=s(vp);Uoe=n(qMe,"STRONG",{});var wVr=s(Uoe);Dlo=r(wVr,"fnet"),wVr.forEach(t),Glo=r(qMe," \u2014 "),AB=n(qMe,"A",{href:!0});var AVr=s(AB);Olo=r(AVr,"FNetModel"),AVr.forEach(t),Vlo=r(qMe," (FNet model)"),qMe.forEach(t),Xlo=i(M),Tp=n(M,"LI",{});var NMe=s(Tp);Joe=n(NMe,"STRONG",{});var yVr=s(Joe);zlo=r(yVr,"fsmt"),yVr.forEach(t),Qlo=r(NMe," \u2014 "),yB=n(NMe,"A",{href:!0});var LVr=s(yB);Wlo=r(LVr,"FSMTModel"),LVr.forEach(t),Hlo=r(NMe," (FairSeq Machine-Translation model)"),NMe.forEach(t),Ulo=i(M),js=n(M,"LI",{});var n9=s(js);Yoe=n(n9,"STRONG",{});var xVr=s(Yoe);Jlo=r(xVr,"funnel"),xVr.forEach(t),Ylo=r(n9," \u2014 "),LB=n(n9,"A",{href:!0});var kVr=s(LB);Klo=r(kVr,"FunnelModel"),kVr.forEach(t),Zlo=r(n9," or "),xB=n(n9,"A",{href:!0});var SVr=s(xB);eio=r(SVr,"FunnelBaseModel"),SVr.forEach(t),oio=r(n9," (Funnel Transformer model)"),n9.forEach(t),rio=i(M),Mp=n(M,"LI",{});var jMe=s(Mp);Koe=n(jMe,"STRONG",{});var RVr=s(Koe);tio=r(RVr,"glpn"),RVr.forEach(t),aio=r(jMe," \u2014 "),kB=n(jMe,"A",{href:!0});var BVr=s(kB);nio=r(BVr,"GLPNModel"),BVr.forEach(t),sio=r(jMe," (GLPN model)"),jMe.forEach(t),lio=i(M),Ep=n(M,"LI",{});var DMe=s(Ep);Zoe=n(DMe,"STRONG",{});var PVr=s(Zoe);iio=r(PVr,"gpt2"),PVr.forEach(t),dio=r(DMe," \u2014 "),SB=n(DMe,"A",{href:!0});var $Vr=s(SB);cio=r($Vr,"GPT2Model"),$Vr.forEach(t),fio=r(DMe," (OpenAI GPT-2 model)"),DMe.forEach(t),mio=i(M),Cp=n(M,"LI",{});var GMe=s(Cp);ere=n(GMe,"STRONG",{});var IVr=s(ere);gio=r(IVr,"gpt_neo"),IVr.forEach(t),hio=r(GMe," \u2014 "),RB=n(GMe,"A",{href:!0});var qVr=s(RB);pio=r(qVr,"GPTNeoModel"),qVr.forEach(t),_io=r(GMe," (GPT Neo model)"),GMe.forEach(t),uio=i(M),wp=n(M,"LI",{});var OMe=s(wp);ore=n(OMe,"STRONG",{});var NVr=s(ore);bio=r(NVr,"gptj"),NVr.forEach(t),Fio=r(OMe," \u2014 "),BB=n(OMe,"A",{href:!0});var jVr=s(BB);vio=r(jVr,"GPTJModel"),jVr.forEach(t),Tio=r(OMe," (GPT-J model)"),OMe.forEach(t),Mio=i(M),Ap=n(M,"LI",{});var VMe=s(Ap);rre=n(VMe,"STRONG",{});var DVr=s(rre);Eio=r(DVr,"hubert"),DVr.forEach(t),Cio=r(VMe," \u2014 "),PB=n(VMe,"A",{href:!0});var GVr=s(PB);wio=r(GVr,"HubertModel"),GVr.forEach(t),Aio=r(VMe," (Hubert model)"),VMe.forEach(t),yio=i(M),yp=n(M,"LI",{});var XMe=s(yp);tre=n(XMe,"STRONG",{});var OVr=s(tre);Lio=r(OVr,"ibert"),OVr.forEach(t),xio=r(XMe," \u2014 "),$B=n(XMe,"A",{href:!0});var VVr=s($B);kio=r(VVr,"IBertModel"),VVr.forEach(t),Sio=r(XMe," (I-BERT model)"),XMe.forEach(t),Rio=i(M),Lp=n(M,"LI",{});var zMe=s(Lp);are=n(zMe,"STRONG",{});var XVr=s(are);Bio=r(XVr,"imagegpt"),XVr.forEach(t),Pio=r(zMe," \u2014 "),IB=n(zMe,"A",{href:!0});var zVr=s(IB);$io=r(zVr,"ImageGPTModel"),zVr.forEach(t),Iio=r(zMe," (ImageGPT model)"),zMe.forEach(t),qio=i(M),xp=n(M,"LI",{});var QMe=s(xp);nre=n(QMe,"STRONG",{});var QVr=s(nre);Nio=r(QVr,"layoutlm"),QVr.forEach(t),jio=r(QMe," \u2014 "),qB=n(QMe,"A",{href:!0});var WVr=s(qB);Dio=r(WVr,"LayoutLMModel"),WVr.forEach(t),Gio=r(QMe," (LayoutLM model)"),QMe.forEach(t),Oio=i(M),kp=n(M,"LI",{});var WMe=s(kp);sre=n(WMe,"STRONG",{});var HVr=s(sre);Vio=r(HVr,"layoutlmv2"),HVr.forEach(t),Xio=r(WMe," \u2014 "),NB=n(WMe,"A",{href:!0});var UVr=s(NB);zio=r(UVr,"LayoutLMv2Model"),UVr.forEach(t),Qio=r(WMe," (LayoutLMv2 model)"),WMe.forEach(t),Wio=i(M),Sp=n(M,"LI",{});var HMe=s(Sp);lre=n(HMe,"STRONG",{});var JVr=s(lre);Hio=r(JVr,"led"),JVr.forEach(t),Uio=r(HMe," \u2014 "),jB=n(HMe,"A",{href:!0});var YVr=s(jB);Jio=r(YVr,"LEDModel"),YVr.forEach(t),Yio=r(HMe," (LED model)"),HMe.forEach(t),Kio=i(M),Rp=n(M,"LI",{});var UMe=s(Rp);ire=n(UMe,"STRONG",{});var KVr=s(ire);Zio=r(KVr,"longformer"),KVr.forEach(t),edo=r(UMe," \u2014 "),DB=n(UMe,"A",{href:!0});var ZVr=s(DB);odo=r(ZVr,"LongformerModel"),ZVr.forEach(t),rdo=r(UMe," (Longformer model)"),UMe.forEach(t),tdo=i(M),Bp=n(M,"LI",{});var JMe=s(Bp);dre=n(JMe,"STRONG",{});var eXr=s(dre);ado=r(eXr,"luke"),eXr.forEach(t),ndo=r(JMe," \u2014 "),GB=n(JMe,"A",{href:!0});var oXr=s(GB);sdo=r(oXr,"LukeModel"),oXr.forEach(t),ldo=r(JMe," (LUKE model)"),JMe.forEach(t),ido=i(M),Pp=n(M,"LI",{});var YMe=s(Pp);cre=n(YMe,"STRONG",{});var rXr=s(cre);ddo=r(rXr,"lxmert"),rXr.forEach(t),cdo=r(YMe," \u2014 "),OB=n(YMe,"A",{href:!0});var tXr=s(OB);fdo=r(tXr,"LxmertModel"),tXr.forEach(t),mdo=r(YMe," (LXMERT model)"),YMe.forEach(t),gdo=i(M),$p=n(M,"LI",{});var KMe=s($p);fre=n(KMe,"STRONG",{});var aXr=s(fre);hdo=r(aXr,"m2m_100"),aXr.forEach(t),pdo=r(KMe," \u2014 "),VB=n(KMe,"A",{href:!0});var nXr=s(VB);_do=r(nXr,"M2M100Model"),nXr.forEach(t),udo=r(KMe," (M2M100 model)"),KMe.forEach(t),bdo=i(M),Ip=n(M,"LI",{});var ZMe=s(Ip);mre=n(ZMe,"STRONG",{});var sXr=s(mre);Fdo=r(sXr,"marian"),sXr.forEach(t),vdo=r(ZMe," \u2014 "),XB=n(ZMe,"A",{href:!0});var lXr=s(XB);Tdo=r(lXr,"MarianModel"),lXr.forEach(t),Mdo=r(ZMe," (Marian model)"),ZMe.forEach(t),Edo=i(M),qp=n(M,"LI",{});var eEe=s(qp);gre=n(eEe,"STRONG",{});var iXr=s(gre);Cdo=r(iXr,"maskformer"),iXr.forEach(t),wdo=r(eEe," \u2014 "),zB=n(eEe,"A",{href:!0});var dXr=s(zB);Ado=r(dXr,"MaskFormerModel"),dXr.forEach(t),ydo=r(eEe," (MaskFormer model)"),eEe.forEach(t),Ldo=i(M),Np=n(M,"LI",{});var oEe=s(Np);hre=n(oEe,"STRONG",{});var cXr=s(hre);xdo=r(cXr,"mbart"),cXr.forEach(t),kdo=r(oEe," \u2014 "),QB=n(oEe,"A",{href:!0});var fXr=s(QB);Sdo=r(fXr,"MBartModel"),fXr.forEach(t),Rdo=r(oEe," (mBART model)"),oEe.forEach(t),Bdo=i(M),jp=n(M,"LI",{});var rEe=s(jp);pre=n(rEe,"STRONG",{});var mXr=s(pre);Pdo=r(mXr,"megatron-bert"),mXr.forEach(t),$do=r(rEe," \u2014 "),WB=n(rEe,"A",{href:!0});var gXr=s(WB);Ido=r(gXr,"MegatronBertModel"),gXr.forEach(t),qdo=r(rEe," (MegatronBert model)"),rEe.forEach(t),Ndo=i(M),Dp=n(M,"LI",{});var tEe=s(Dp);_re=n(tEe,"STRONG",{});var hXr=s(_re);jdo=r(hXr,"mobilebert"),hXr.forEach(t),Ddo=r(tEe," \u2014 "),HB=n(tEe,"A",{href:!0});var pXr=s(HB);Gdo=r(pXr,"MobileBertModel"),pXr.forEach(t),Odo=r(tEe," (MobileBERT model)"),tEe.forEach(t),Vdo=i(M),Gp=n(M,"LI",{});var aEe=s(Gp);ure=n(aEe,"STRONG",{});var _Xr=s(ure);Xdo=r(_Xr,"mpnet"),_Xr.forEach(t),zdo=r(aEe," \u2014 "),UB=n(aEe,"A",{href:!0});var uXr=s(UB);Qdo=r(uXr,"MPNetModel"),uXr.forEach(t),Wdo=r(aEe," (MPNet model)"),aEe.forEach(t),Hdo=i(M),Op=n(M,"LI",{});var nEe=s(Op);bre=n(nEe,"STRONG",{});var bXr=s(bre);Udo=r(bXr,"mt5"),bXr.forEach(t),Jdo=r(nEe," \u2014 "),JB=n(nEe,"A",{href:!0});var FXr=s(JB);Ydo=r(FXr,"MT5Model"),FXr.forEach(t),Kdo=r(nEe," (mT5 model)"),nEe.forEach(t),Zdo=i(M),Vp=n(M,"LI",{});var sEe=s(Vp);Fre=n(sEe,"STRONG",{});var vXr=s(Fre);eco=r(vXr,"nystromformer"),vXr.forEach(t),oco=r(sEe," \u2014 "),YB=n(sEe,"A",{href:!0});var TXr=s(YB);rco=r(TXr,"NystromformerModel"),TXr.forEach(t),tco=r(sEe," (Nystromformer model)"),sEe.forEach(t),aco=i(M),Xp=n(M,"LI",{});var lEe=s(Xp);vre=n(lEe,"STRONG",{});var MXr=s(vre);nco=r(MXr,"openai-gpt"),MXr.forEach(t),sco=r(lEe," \u2014 "),KB=n(lEe,"A",{href:!0});var EXr=s(KB);lco=r(EXr,"OpenAIGPTModel"),EXr.forEach(t),ico=r(lEe," (OpenAI GPT model)"),lEe.forEach(t),dco=i(M),zp=n(M,"LI",{});var iEe=s(zp);Tre=n(iEe,"STRONG",{});var CXr=s(Tre);cco=r(CXr,"pegasus"),CXr.forEach(t),fco=r(iEe," \u2014 "),ZB=n(iEe,"A",{href:!0});var wXr=s(ZB);mco=r(wXr,"PegasusModel"),wXr.forEach(t),gco=r(iEe," (Pegasus model)"),iEe.forEach(t),hco=i(M),Qp=n(M,"LI",{});var dEe=s(Qp);Mre=n(dEe,"STRONG",{});var AXr=s(Mre);pco=r(AXr,"perceiver"),AXr.forEach(t),_co=r(dEe," \u2014 "),eP=n(dEe,"A",{href:!0});var yXr=s(eP);uco=r(yXr,"PerceiverModel"),yXr.forEach(t),bco=r(dEe," (Perceiver model)"),dEe.forEach(t),Fco=i(M),Wp=n(M,"LI",{});var cEe=s(Wp);Ere=n(cEe,"STRONG",{});var LXr=s(Ere);vco=r(LXr,"plbart"),LXr.forEach(t),Tco=r(cEe," \u2014 "),oP=n(cEe,"A",{href:!0});var xXr=s(oP);Mco=r(xXr,"PLBartModel"),xXr.forEach(t),Eco=r(cEe," (PLBart model)"),cEe.forEach(t),Cco=i(M),Hp=n(M,"LI",{});var fEe=s(Hp);Cre=n(fEe,"STRONG",{});var kXr=s(Cre);wco=r(kXr,"poolformer"),kXr.forEach(t),Aco=r(fEe," \u2014 "),rP=n(fEe,"A",{href:!0});var SXr=s(rP);yco=r(SXr,"PoolFormerModel"),SXr.forEach(t),Lco=r(fEe," (PoolFormer model)"),fEe.forEach(t),xco=i(M),Up=n(M,"LI",{});var mEe=s(Up);wre=n(mEe,"STRONG",{});var RXr=s(wre);kco=r(RXr,"prophetnet"),RXr.forEach(t),Sco=r(mEe," \u2014 "),tP=n(mEe,"A",{href:!0});var BXr=s(tP);Rco=r(BXr,"ProphetNetModel"),BXr.forEach(t),Bco=r(mEe," (ProphetNet model)"),mEe.forEach(t),Pco=i(M),Jp=n(M,"LI",{});var gEe=s(Jp);Are=n(gEe,"STRONG",{});var PXr=s(Are);$co=r(PXr,"qdqbert"),PXr.forEach(t),Ico=r(gEe," \u2014 "),aP=n(gEe,"A",{href:!0});var $Xr=s(aP);qco=r($Xr,"QDQBertModel"),$Xr.forEach(t),Nco=r(gEe," (QDQBert model)"),gEe.forEach(t),jco=i(M),Yp=n(M,"LI",{});var hEe=s(Yp);yre=n(hEe,"STRONG",{});var IXr=s(yre);Dco=r(IXr,"reformer"),IXr.forEach(t),Gco=r(hEe," \u2014 "),nP=n(hEe,"A",{href:!0});var qXr=s(nP);Oco=r(qXr,"ReformerModel"),qXr.forEach(t),Vco=r(hEe," (Reformer model)"),hEe.forEach(t),Xco=i(M),Kp=n(M,"LI",{});var pEe=s(Kp);Lre=n(pEe,"STRONG",{});var NXr=s(Lre);zco=r(NXr,"rembert"),NXr.forEach(t),Qco=r(pEe," \u2014 "),sP=n(pEe,"A",{href:!0});var jXr=s(sP);Wco=r(jXr,"RemBertModel"),jXr.forEach(t),Hco=r(pEe," (RemBERT model)"),pEe.forEach(t),Uco=i(M),Zp=n(M,"LI",{});var _Ee=s(Zp);xre=n(_Ee,"STRONG",{});var DXr=s(xre);Jco=r(DXr,"resnet"),DXr.forEach(t),Yco=r(_Ee," \u2014 "),lP=n(_Ee,"A",{href:!0});var GXr=s(lP);Kco=r(GXr,"ResNetModel"),GXr.forEach(t),Zco=r(_Ee," (ResNet model)"),_Ee.forEach(t),efo=i(M),e_=n(M,"LI",{});var uEe=s(e_);kre=n(uEe,"STRONG",{});var OXr=s(kre);ofo=r(OXr,"retribert"),OXr.forEach(t),rfo=r(uEe," \u2014 "),iP=n(uEe,"A",{href:!0});var VXr=s(iP);tfo=r(VXr,"RetriBertModel"),VXr.forEach(t),afo=r(uEe," (RetriBERT model)"),uEe.forEach(t),nfo=i(M),o_=n(M,"LI",{});var bEe=s(o_);Sre=n(bEe,"STRONG",{});var XXr=s(Sre);sfo=r(XXr,"roberta"),XXr.forEach(t),lfo=r(bEe," \u2014 "),dP=n(bEe,"A",{href:!0});var zXr=s(dP);ifo=r(zXr,"RobertaModel"),zXr.forEach(t),dfo=r(bEe," (RoBERTa model)"),bEe.forEach(t),cfo=i(M),r_=n(M,"LI",{});var FEe=s(r_);Rre=n(FEe,"STRONG",{});var QXr=s(Rre);ffo=r(QXr,"roformer"),QXr.forEach(t),mfo=r(FEe," \u2014 "),cP=n(FEe,"A",{href:!0});var WXr=s(cP);gfo=r(WXr,"RoFormerModel"),WXr.forEach(t),hfo=r(FEe," (RoFormer model)"),FEe.forEach(t),pfo=i(M),t_=n(M,"LI",{});var vEe=s(t_);Bre=n(vEe,"STRONG",{});var HXr=s(Bre);_fo=r(HXr,"segformer"),HXr.forEach(t),ufo=r(vEe," \u2014 "),fP=n(vEe,"A",{href:!0});var UXr=s(fP);bfo=r(UXr,"SegformerModel"),UXr.forEach(t),Ffo=r(vEe," (SegFormer model)"),vEe.forEach(t),vfo=i(M),a_=n(M,"LI",{});var TEe=s(a_);Pre=n(TEe,"STRONG",{});var JXr=s(Pre);Tfo=r(JXr,"sew"),JXr.forEach(t),Mfo=r(TEe," \u2014 "),mP=n(TEe,"A",{href:!0});var YXr=s(mP);Efo=r(YXr,"SEWModel"),YXr.forEach(t),Cfo=r(TEe," (SEW model)"),TEe.forEach(t),wfo=i(M),n_=n(M,"LI",{});var MEe=s(n_);$re=n(MEe,"STRONG",{});var KXr=s($re);Afo=r(KXr,"sew-d"),KXr.forEach(t),yfo=r(MEe," \u2014 "),gP=n(MEe,"A",{href:!0});var ZXr=s(gP);Lfo=r(ZXr,"SEWDModel"),ZXr.forEach(t),xfo=r(MEe," (SEW-D model)"),MEe.forEach(t),kfo=i(M),s_=n(M,"LI",{});var EEe=s(s_);Ire=n(EEe,"STRONG",{});var ezr=s(Ire);Sfo=r(ezr,"speech_to_text"),ezr.forEach(t),Rfo=r(EEe," \u2014 "),hP=n(EEe,"A",{href:!0});var ozr=s(hP);Bfo=r(ozr,"Speech2TextModel"),ozr.forEach(t),Pfo=r(EEe," (Speech2Text model)"),EEe.forEach(t),$fo=i(M),l_=n(M,"LI",{});var CEe=s(l_);qre=n(CEe,"STRONG",{});var rzr=s(qre);Ifo=r(rzr,"splinter"),rzr.forEach(t),qfo=r(CEe," \u2014 "),pP=n(CEe,"A",{href:!0});var tzr=s(pP);Nfo=r(tzr,"SplinterModel"),tzr.forEach(t),jfo=r(CEe," (Splinter model)"),CEe.forEach(t),Dfo=i(M),i_=n(M,"LI",{});var wEe=s(i_);Nre=n(wEe,"STRONG",{});var azr=s(Nre);Gfo=r(azr,"squeezebert"),azr.forEach(t),Ofo=r(wEe," \u2014 "),_P=n(wEe,"A",{href:!0});var nzr=s(_P);Vfo=r(nzr,"SqueezeBertModel"),nzr.forEach(t),Xfo=r(wEe," (SqueezeBERT model)"),wEe.forEach(t),zfo=i(M),d_=n(M,"LI",{});var AEe=s(d_);jre=n(AEe,"STRONG",{});var szr=s(jre);Qfo=r(szr,"swin"),szr.forEach(t),Wfo=r(AEe," \u2014 "),uP=n(AEe,"A",{href:!0});var lzr=s(uP);Hfo=r(lzr,"SwinModel"),lzr.forEach(t),Ufo=r(AEe," (Swin model)"),AEe.forEach(t),Jfo=i(M),c_=n(M,"LI",{});var yEe=s(c_);Dre=n(yEe,"STRONG",{});var izr=s(Dre);Yfo=r(izr,"t5"),izr.forEach(t),Kfo=r(yEe," \u2014 "),bP=n(yEe,"A",{href:!0});var dzr=s(bP);Zfo=r(dzr,"T5Model"),dzr.forEach(t),emo=r(yEe," (T5 model)"),yEe.forEach(t),omo=i(M),f_=n(M,"LI",{});var LEe=s(f_);Gre=n(LEe,"STRONG",{});var czr=s(Gre);rmo=r(czr,"tapas"),czr.forEach(t),tmo=r(LEe," \u2014 "),FP=n(LEe,"A",{href:!0});var fzr=s(FP);amo=r(fzr,"TapasModel"),fzr.forEach(t),nmo=r(LEe," (TAPAS model)"),LEe.forEach(t),smo=i(M),m_=n(M,"LI",{});var xEe=s(m_);Ore=n(xEe,"STRONG",{});var mzr=s(Ore);lmo=r(mzr,"transfo-xl"),mzr.forEach(t),imo=r(xEe," \u2014 "),vP=n(xEe,"A",{href:!0});var gzr=s(vP);dmo=r(gzr,"TransfoXLModel"),gzr.forEach(t),cmo=r(xEe," (Transformer-XL model)"),xEe.forEach(t),fmo=i(M),g_=n(M,"LI",{});var kEe=s(g_);Vre=n(kEe,"STRONG",{});var hzr=s(Vre);mmo=r(hzr,"unispeech"),hzr.forEach(t),gmo=r(kEe," \u2014 "),TP=n(kEe,"A",{href:!0});var pzr=s(TP);hmo=r(pzr,"UniSpeechModel"),pzr.forEach(t),pmo=r(kEe," (UniSpeech model)"),kEe.forEach(t),_mo=i(M),h_=n(M,"LI",{});var SEe=s(h_);Xre=n(SEe,"STRONG",{});var _zr=s(Xre);umo=r(_zr,"unispeech-sat"),_zr.forEach(t),bmo=r(SEe," \u2014 "),MP=n(SEe,"A",{href:!0});var uzr=s(MP);Fmo=r(uzr,"UniSpeechSatModel"),uzr.forEach(t),vmo=r(SEe," (UniSpeechSat model)"),SEe.forEach(t),Tmo=i(M),p_=n(M,"LI",{});var REe=s(p_);zre=n(REe,"STRONG",{});var bzr=s(zre);Mmo=r(bzr,"van"),bzr.forEach(t),Emo=r(REe," \u2014 "),EP=n(REe,"A",{href:!0});var Fzr=s(EP);Cmo=r(Fzr,"VanModel"),Fzr.forEach(t),wmo=r(REe," (VAN model)"),REe.forEach(t),Amo=i(M),__=n(M,"LI",{});var BEe=s(__);Qre=n(BEe,"STRONG",{});var vzr=s(Qre);ymo=r(vzr,"vilt"),vzr.forEach(t),Lmo=r(BEe," \u2014 "),CP=n(BEe,"A",{href:!0});var Tzr=s(CP);xmo=r(Tzr,"ViltModel"),Tzr.forEach(t),kmo=r(BEe," (ViLT model)"),BEe.forEach(t),Smo=i(M),u_=n(M,"LI",{});var PEe=s(u_);Wre=n(PEe,"STRONG",{});var Mzr=s(Wre);Rmo=r(Mzr,"vision-text-dual-encoder"),Mzr.forEach(t),Bmo=r(PEe," \u2014 "),wP=n(PEe,"A",{href:!0});var Ezr=s(wP);Pmo=r(Ezr,"VisionTextDualEncoderModel"),Ezr.forEach(t),$mo=r(PEe," (VisionTextDualEncoder model)"),PEe.forEach(t),Imo=i(M),b_=n(M,"LI",{});var $Ee=s(b_);Hre=n($Ee,"STRONG",{});var Czr=s(Hre);qmo=r(Czr,"visual_bert"),Czr.forEach(t),Nmo=r($Ee," \u2014 "),AP=n($Ee,"A",{href:!0});var wzr=s(AP);jmo=r(wzr,"VisualBertModel"),wzr.forEach(t),Dmo=r($Ee," (VisualBert model)"),$Ee.forEach(t),Gmo=i(M),F_=n(M,"LI",{});var IEe=s(F_);Ure=n(IEe,"STRONG",{});var Azr=s(Ure);Omo=r(Azr,"vit"),Azr.forEach(t),Vmo=r(IEe," \u2014 "),yP=n(IEe,"A",{href:!0});var yzr=s(yP);Xmo=r(yzr,"ViTModel"),yzr.forEach(t),zmo=r(IEe," (ViT model)"),IEe.forEach(t),Qmo=i(M),v_=n(M,"LI",{});var qEe=s(v_);Jre=n(qEe,"STRONG",{});var Lzr=s(Jre);Wmo=r(Lzr,"vit_mae"),Lzr.forEach(t),Hmo=r(qEe," \u2014 "),LP=n(qEe,"A",{href:!0});var xzr=s(LP);Umo=r(xzr,"ViTMAEModel"),xzr.forEach(t),Jmo=r(qEe," (ViTMAE model)"),qEe.forEach(t),Ymo=i(M),T_=n(M,"LI",{});var NEe=s(T_);Yre=n(NEe,"STRONG",{});var kzr=s(Yre);Kmo=r(kzr,"wav2vec2"),kzr.forEach(t),Zmo=r(NEe," \u2014 "),xP=n(NEe,"A",{href:!0});var Szr=s(xP);ego=r(Szr,"Wav2Vec2Model"),Szr.forEach(t),ogo=r(NEe," (Wav2Vec2 model)"),NEe.forEach(t),rgo=i(M),M_=n(M,"LI",{});var jEe=s(M_);Kre=n(jEe,"STRONG",{});var Rzr=s(Kre);tgo=r(Rzr,"wavlm"),Rzr.forEach(t),ago=r(jEe," \u2014 "),kP=n(jEe,"A",{href:!0});var Bzr=s(kP);ngo=r(Bzr,"WavLMModel"),Bzr.forEach(t),sgo=r(jEe," (WavLM model)"),jEe.forEach(t),lgo=i(M),E_=n(M,"LI",{});var DEe=s(E_);Zre=n(DEe,"STRONG",{});var Pzr=s(Zre);igo=r(Pzr,"xglm"),Pzr.forEach(t),dgo=r(DEe," \u2014 "),SP=n(DEe,"A",{href:!0});var $zr=s(SP);cgo=r($zr,"XGLMModel"),$zr.forEach(t),fgo=r(DEe," (XGLM model)"),DEe.forEach(t),mgo=i(M),C_=n(M,"LI",{});var GEe=s(C_);ete=n(GEe,"STRONG",{});var Izr=s(ete);ggo=r(Izr,"xlm"),Izr.forEach(t),hgo=r(GEe," \u2014 "),RP=n(GEe,"A",{href:!0});var qzr=s(RP);pgo=r(qzr,"XLMModel"),qzr.forEach(t),_go=r(GEe," (XLM model)"),GEe.forEach(t),ugo=i(M),w_=n(M,"LI",{});var OEe=s(w_);ote=n(OEe,"STRONG",{});var Nzr=s(ote);bgo=r(Nzr,"xlm-prophetnet"),Nzr.forEach(t),Fgo=r(OEe," \u2014 "),BP=n(OEe,"A",{href:!0});var jzr=s(BP);vgo=r(jzr,"XLMProphetNetModel"),jzr.forEach(t),Tgo=r(OEe," (XLMProphetNet model)"),OEe.forEach(t),Mgo=i(M),A_=n(M,"LI",{});var VEe=s(A_);rte=n(VEe,"STRONG",{});var Dzr=s(rte);Ego=r(Dzr,"xlm-roberta"),Dzr.forEach(t),Cgo=r(VEe," \u2014 "),PP=n(VEe,"A",{href:!0});var Gzr=s(PP);wgo=r(Gzr,"XLMRobertaModel"),Gzr.forEach(t),Ago=r(VEe," (XLM-RoBERTa model)"),VEe.forEach(t),ygo=i(M),y_=n(M,"LI",{});var XEe=s(y_);tte=n(XEe,"STRONG",{});var Ozr=s(tte);Lgo=r(Ozr,"xlm-roberta-xl"),Ozr.forEach(t),xgo=r(XEe," \u2014 "),$P=n(XEe,"A",{href:!0});var Vzr=s($P);kgo=r(Vzr,"XLMRobertaXLModel"),Vzr.forEach(t),Sgo=r(XEe," (XLM-RoBERTa-XL model)"),XEe.forEach(t),Rgo=i(M),L_=n(M,"LI",{});var zEe=s(L_);ate=n(zEe,"STRONG",{});var Xzr=s(ate);Bgo=r(Xzr,"xlnet"),Xzr.forEach(t),Pgo=r(zEe," \u2014 "),IP=n(zEe,"A",{href:!0});var zzr=s(IP);$go=r(zzr,"XLNetModel"),zzr.forEach(t),Igo=r(zEe," (XLNet model)"),zEe.forEach(t),qgo=i(M),x_=n(M,"LI",{});var QEe=s(x_);nte=n(QEe,"STRONG",{});var Qzr=s(nte);Ngo=r(Qzr,"yoso"),Qzr.forEach(t),jgo=r(QEe," \u2014 "),qP=n(QEe,"A",{href:!0});var Wzr=s(qP);Dgo=r(Wzr,"YosoModel"),Wzr.forEach(t),Ggo=r(QEe," (YOSO model)"),QEe.forEach(t),M.forEach(t),Ogo=i(Dt),k_=n(Dt,"P",{});var WEe=s(k_);Vgo=r(WEe,"The model is set in evaluation mode by default using "),ste=n(WEe,"CODE",{});var Hzr=s(ste);Xgo=r(Hzr,"model.eval()"),Hzr.forEach(t),zgo=r(WEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lte=n(WEe,"CODE",{});var Uzr=s(lte);Qgo=r(Uzr,"model.train()"),Uzr.forEach(t),WEe.forEach(t),Wgo=i(Dt),ite=n(Dt,"P",{});var Jzr=s(ite);Hgo=r(Jzr,"Examples:"),Jzr.forEach(t),Ugo=i(Dt),m(r5.$$.fragment,Dt),Dt.forEach(t),Qs.forEach(t),rRe=i(c),Zi=n(c,"H2",{class:!0});var fPe=s(Zi);S_=n(fPe,"A",{id:!0,class:!0,href:!0});var Yzr=s(S_);dte=n(Yzr,"SPAN",{});var Kzr=s(dte);m(t5.$$.fragment,Kzr),Kzr.forEach(t),Yzr.forEach(t),Jgo=i(fPe),cte=n(fPe,"SPAN",{});var Zzr=s(cte);Ygo=r(Zzr,"AutoModelForPreTraining"),Zzr.forEach(t),fPe.forEach(t),tRe=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(a5.$$.fragment,Hs),Kgo=i(Hs),ed=n(Hs,"P",{});var ZH=s(ed);Zgo=r(ZH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),NP=n(ZH,"A",{href:!0});var eQr=s(NP);eho=r(eQr,"from_pretrained()"),eQr.forEach(t),oho=r(ZH," class method or the "),jP=n(ZH,"A",{href:!0});var oQr=s(jP);rho=r(oQr,"from_config()"),oQr.forEach(t),tho=r(ZH,` class
method.`),ZH.forEach(t),aho=i(Hs),n5=n(Hs,"P",{});var mPe=s(n5);nho=r(mPe,"This class cannot be instantiated directly using "),fte=n(mPe,"CODE",{});var rQr=s(fte);sho=r(rQr,"__init__()"),rQr.forEach(t),lho=r(mPe," (throws an error)."),mPe.forEach(t),iho=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(s5.$$.fragment,Us),dho=i(Us),mte=n(Us,"P",{});var tQr=s(mte);cho=r(tQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),tQr.forEach(t),fho=i(Us),od=n(Us,"P",{});var eU=s(od);mho=r(eU,`Note:
Loading a model from its configuration file does `),gte=n(eU,"STRONG",{});var aQr=s(gte);gho=r(aQr,"not"),aQr.forEach(t),hho=r(eU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DP=n(eU,"A",{href:!0});var nQr=s(DP);pho=r(nQr,"from_pretrained()"),nQr.forEach(t),_ho=r(eU," to load the model weights."),eU.forEach(t),uho=i(Us),hte=n(Us,"P",{});var sQr=s(hte);bho=r(sQr,"Examples:"),sQr.forEach(t),Fho=i(Us),m(l5.$$.fragment,Us),Us.forEach(t),vho=i(Hs),Ne=n(Hs,"DIV",{class:!0});var Gt=s(Ne);m(i5.$$.fragment,Gt),Tho=i(Gt),pte=n(Gt,"P",{});var lQr=s(pte);Mho=r(lQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lQr.forEach(t),Eho=i(Gt),za=n(Gt,"P",{});var TE=s(za);Cho=r(TE,"The model class to instantiate is selected based on the "),_te=n(TE,"CODE",{});var iQr=s(_te);who=r(iQr,"model_type"),iQr.forEach(t),Aho=r(TE,` property of the config object (either
passed as an argument or loaded from `),ute=n(TE,"CODE",{});var dQr=s(ute);yho=r(dQr,"pretrained_model_name_or_path"),dQr.forEach(t),Lho=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bte=n(TE,"CODE",{});var cQr=s(bte);xho=r(cQr,"pretrained_model_name_or_path"),cQr.forEach(t),kho=r(TE,":"),TE.forEach(t),Sho=i(Gt),S=n(Gt,"UL",{});var B=s(S);R_=n(B,"LI",{});var HEe=s(R_);Fte=n(HEe,"STRONG",{});var fQr=s(Fte);Rho=r(fQr,"albert"),fQr.forEach(t),Bho=r(HEe," \u2014 "),GP=n(HEe,"A",{href:!0});var mQr=s(GP);Pho=r(mQr,"AlbertForPreTraining"),mQr.forEach(t),$ho=r(HEe," (ALBERT model)"),HEe.forEach(t),Iho=i(B),B_=n(B,"LI",{});var UEe=s(B_);vte=n(UEe,"STRONG",{});var gQr=s(vte);qho=r(gQr,"bart"),gQr.forEach(t),Nho=r(UEe," \u2014 "),OP=n(UEe,"A",{href:!0});var hQr=s(OP);jho=r(hQr,"BartForConditionalGeneration"),hQr.forEach(t),Dho=r(UEe," (BART model)"),UEe.forEach(t),Gho=i(B),P_=n(B,"LI",{});var JEe=s(P_);Tte=n(JEe,"STRONG",{});var pQr=s(Tte);Oho=r(pQr,"bert"),pQr.forEach(t),Vho=r(JEe," \u2014 "),VP=n(JEe,"A",{href:!0});var _Qr=s(VP);Xho=r(_Qr,"BertForPreTraining"),_Qr.forEach(t),zho=r(JEe," (BERT model)"),JEe.forEach(t),Qho=i(B),$_=n(B,"LI",{});var YEe=s($_);Mte=n(YEe,"STRONG",{});var uQr=s(Mte);Who=r(uQr,"big_bird"),uQr.forEach(t),Hho=r(YEe," \u2014 "),XP=n(YEe,"A",{href:!0});var bQr=s(XP);Uho=r(bQr,"BigBirdForPreTraining"),bQr.forEach(t),Jho=r(YEe," (BigBird model)"),YEe.forEach(t),Yho=i(B),I_=n(B,"LI",{});var KEe=s(I_);Ete=n(KEe,"STRONG",{});var FQr=s(Ete);Kho=r(FQr,"camembert"),FQr.forEach(t),Zho=r(KEe," \u2014 "),zP=n(KEe,"A",{href:!0});var vQr=s(zP);epo=r(vQr,"CamembertForMaskedLM"),vQr.forEach(t),opo=r(KEe," (CamemBERT model)"),KEe.forEach(t),rpo=i(B),q_=n(B,"LI",{});var ZEe=s(q_);Cte=n(ZEe,"STRONG",{});var TQr=s(Cte);tpo=r(TQr,"ctrl"),TQr.forEach(t),apo=r(ZEe," \u2014 "),QP=n(ZEe,"A",{href:!0});var MQr=s(QP);npo=r(MQr,"CTRLLMHeadModel"),MQr.forEach(t),spo=r(ZEe," (CTRL model)"),ZEe.forEach(t),lpo=i(B),N_=n(B,"LI",{});var eCe=s(N_);wte=n(eCe,"STRONG",{});var EQr=s(wte);ipo=r(EQr,"data2vec-text"),EQr.forEach(t),dpo=r(eCe," \u2014 "),WP=n(eCe,"A",{href:!0});var CQr=s(WP);cpo=r(CQr,"Data2VecTextForMaskedLM"),CQr.forEach(t),fpo=r(eCe," (Data2VecText model)"),eCe.forEach(t),mpo=i(B),j_=n(B,"LI",{});var oCe=s(j_);Ate=n(oCe,"STRONG",{});var wQr=s(Ate);gpo=r(wQr,"deberta"),wQr.forEach(t),hpo=r(oCe," \u2014 "),HP=n(oCe,"A",{href:!0});var AQr=s(HP);ppo=r(AQr,"DebertaForMaskedLM"),AQr.forEach(t),_po=r(oCe," (DeBERTa model)"),oCe.forEach(t),upo=i(B),D_=n(B,"LI",{});var rCe=s(D_);yte=n(rCe,"STRONG",{});var yQr=s(yte);bpo=r(yQr,"deberta-v2"),yQr.forEach(t),Fpo=r(rCe," \u2014 "),UP=n(rCe,"A",{href:!0});var LQr=s(UP);vpo=r(LQr,"DebertaV2ForMaskedLM"),LQr.forEach(t),Tpo=r(rCe," (DeBERTa-v2 model)"),rCe.forEach(t),Mpo=i(B),G_=n(B,"LI",{});var tCe=s(G_);Lte=n(tCe,"STRONG",{});var xQr=s(Lte);Epo=r(xQr,"distilbert"),xQr.forEach(t),Cpo=r(tCe," \u2014 "),JP=n(tCe,"A",{href:!0});var kQr=s(JP);wpo=r(kQr,"DistilBertForMaskedLM"),kQr.forEach(t),Apo=r(tCe," (DistilBERT model)"),tCe.forEach(t),ypo=i(B),O_=n(B,"LI",{});var aCe=s(O_);xte=n(aCe,"STRONG",{});var SQr=s(xte);Lpo=r(SQr,"electra"),SQr.forEach(t),xpo=r(aCe," \u2014 "),YP=n(aCe,"A",{href:!0});var RQr=s(YP);kpo=r(RQr,"ElectraForPreTraining"),RQr.forEach(t),Spo=r(aCe," (ELECTRA model)"),aCe.forEach(t),Rpo=i(B),V_=n(B,"LI",{});var nCe=s(V_);kte=n(nCe,"STRONG",{});var BQr=s(kte);Bpo=r(BQr,"flaubert"),BQr.forEach(t),Ppo=r(nCe," \u2014 "),KP=n(nCe,"A",{href:!0});var PQr=s(KP);$po=r(PQr,"FlaubertWithLMHeadModel"),PQr.forEach(t),Ipo=r(nCe," (FlauBERT model)"),nCe.forEach(t),qpo=i(B),X_=n(B,"LI",{});var sCe=s(X_);Ste=n(sCe,"STRONG",{});var $Qr=s(Ste);Npo=r($Qr,"fnet"),$Qr.forEach(t),jpo=r(sCe," \u2014 "),ZP=n(sCe,"A",{href:!0});var IQr=s(ZP);Dpo=r(IQr,"FNetForPreTraining"),IQr.forEach(t),Gpo=r(sCe," (FNet model)"),sCe.forEach(t),Opo=i(B),z_=n(B,"LI",{});var lCe=s(z_);Rte=n(lCe,"STRONG",{});var qQr=s(Rte);Vpo=r(qQr,"fsmt"),qQr.forEach(t),Xpo=r(lCe," \u2014 "),e$=n(lCe,"A",{href:!0});var NQr=s(e$);zpo=r(NQr,"FSMTForConditionalGeneration"),NQr.forEach(t),Qpo=r(lCe," (FairSeq Machine-Translation model)"),lCe.forEach(t),Wpo=i(B),Q_=n(B,"LI",{});var iCe=s(Q_);Bte=n(iCe,"STRONG",{});var jQr=s(Bte);Hpo=r(jQr,"funnel"),jQr.forEach(t),Upo=r(iCe," \u2014 "),o$=n(iCe,"A",{href:!0});var DQr=s(o$);Jpo=r(DQr,"FunnelForPreTraining"),DQr.forEach(t),Ypo=r(iCe," (Funnel Transformer model)"),iCe.forEach(t),Kpo=i(B),W_=n(B,"LI",{});var dCe=s(W_);Pte=n(dCe,"STRONG",{});var GQr=s(Pte);Zpo=r(GQr,"gpt2"),GQr.forEach(t),e_o=r(dCe," \u2014 "),r$=n(dCe,"A",{href:!0});var OQr=s(r$);o_o=r(OQr,"GPT2LMHeadModel"),OQr.forEach(t),r_o=r(dCe," (OpenAI GPT-2 model)"),dCe.forEach(t),t_o=i(B),H_=n(B,"LI",{});var cCe=s(H_);$te=n(cCe,"STRONG",{});var VQr=s($te);a_o=r(VQr,"ibert"),VQr.forEach(t),n_o=r(cCe," \u2014 "),t$=n(cCe,"A",{href:!0});var XQr=s(t$);s_o=r(XQr,"IBertForMaskedLM"),XQr.forEach(t),l_o=r(cCe," (I-BERT model)"),cCe.forEach(t),i_o=i(B),U_=n(B,"LI",{});var fCe=s(U_);Ite=n(fCe,"STRONG",{});var zQr=s(Ite);d_o=r(zQr,"layoutlm"),zQr.forEach(t),c_o=r(fCe," \u2014 "),a$=n(fCe,"A",{href:!0});var QQr=s(a$);f_o=r(QQr,"LayoutLMForMaskedLM"),QQr.forEach(t),m_o=r(fCe," (LayoutLM model)"),fCe.forEach(t),g_o=i(B),J_=n(B,"LI",{});var mCe=s(J_);qte=n(mCe,"STRONG",{});var WQr=s(qte);h_o=r(WQr,"longformer"),WQr.forEach(t),p_o=r(mCe," \u2014 "),n$=n(mCe,"A",{href:!0});var HQr=s(n$);__o=r(HQr,"LongformerForMaskedLM"),HQr.forEach(t),u_o=r(mCe," (Longformer model)"),mCe.forEach(t),b_o=i(B),Y_=n(B,"LI",{});var gCe=s(Y_);Nte=n(gCe,"STRONG",{});var UQr=s(Nte);F_o=r(UQr,"lxmert"),UQr.forEach(t),v_o=r(gCe," \u2014 "),s$=n(gCe,"A",{href:!0});var JQr=s(s$);T_o=r(JQr,"LxmertForPreTraining"),JQr.forEach(t),M_o=r(gCe," (LXMERT model)"),gCe.forEach(t),E_o=i(B),K_=n(B,"LI",{});var hCe=s(K_);jte=n(hCe,"STRONG",{});var YQr=s(jte);C_o=r(YQr,"megatron-bert"),YQr.forEach(t),w_o=r(hCe," \u2014 "),l$=n(hCe,"A",{href:!0});var KQr=s(l$);A_o=r(KQr,"MegatronBertForPreTraining"),KQr.forEach(t),y_o=r(hCe," (MegatronBert model)"),hCe.forEach(t),L_o=i(B),Z_=n(B,"LI",{});var pCe=s(Z_);Dte=n(pCe,"STRONG",{});var ZQr=s(Dte);x_o=r(ZQr,"mobilebert"),ZQr.forEach(t),k_o=r(pCe," \u2014 "),i$=n(pCe,"A",{href:!0});var eWr=s(i$);S_o=r(eWr,"MobileBertForPreTraining"),eWr.forEach(t),R_o=r(pCe," (MobileBERT model)"),pCe.forEach(t),B_o=i(B),eu=n(B,"LI",{});var _Ce=s(eu);Gte=n(_Ce,"STRONG",{});var oWr=s(Gte);P_o=r(oWr,"mpnet"),oWr.forEach(t),$_o=r(_Ce," \u2014 "),d$=n(_Ce,"A",{href:!0});var rWr=s(d$);I_o=r(rWr,"MPNetForMaskedLM"),rWr.forEach(t),q_o=r(_Ce," (MPNet model)"),_Ce.forEach(t),N_o=i(B),ou=n(B,"LI",{});var uCe=s(ou);Ote=n(uCe,"STRONG",{});var tWr=s(Ote);j_o=r(tWr,"openai-gpt"),tWr.forEach(t),D_o=r(uCe," \u2014 "),c$=n(uCe,"A",{href:!0});var aWr=s(c$);G_o=r(aWr,"OpenAIGPTLMHeadModel"),aWr.forEach(t),O_o=r(uCe," (OpenAI GPT model)"),uCe.forEach(t),V_o=i(B),ru=n(B,"LI",{});var bCe=s(ru);Vte=n(bCe,"STRONG",{});var nWr=s(Vte);X_o=r(nWr,"retribert"),nWr.forEach(t),z_o=r(bCe," \u2014 "),f$=n(bCe,"A",{href:!0});var sWr=s(f$);Q_o=r(sWr,"RetriBertModel"),sWr.forEach(t),W_o=r(bCe," (RetriBERT model)"),bCe.forEach(t),H_o=i(B),tu=n(B,"LI",{});var FCe=s(tu);Xte=n(FCe,"STRONG",{});var lWr=s(Xte);U_o=r(lWr,"roberta"),lWr.forEach(t),J_o=r(FCe," \u2014 "),m$=n(FCe,"A",{href:!0});var iWr=s(m$);Y_o=r(iWr,"RobertaForMaskedLM"),iWr.forEach(t),K_o=r(FCe," (RoBERTa model)"),FCe.forEach(t),Z_o=i(B),au=n(B,"LI",{});var vCe=s(au);zte=n(vCe,"STRONG",{});var dWr=s(zte);euo=r(dWr,"squeezebert"),dWr.forEach(t),ouo=r(vCe," \u2014 "),g$=n(vCe,"A",{href:!0});var cWr=s(g$);ruo=r(cWr,"SqueezeBertForMaskedLM"),cWr.forEach(t),tuo=r(vCe," (SqueezeBERT model)"),vCe.forEach(t),auo=i(B),nu=n(B,"LI",{});var TCe=s(nu);Qte=n(TCe,"STRONG",{});var fWr=s(Qte);nuo=r(fWr,"t5"),fWr.forEach(t),suo=r(TCe," \u2014 "),h$=n(TCe,"A",{href:!0});var mWr=s(h$);luo=r(mWr,"T5ForConditionalGeneration"),mWr.forEach(t),iuo=r(TCe," (T5 model)"),TCe.forEach(t),duo=i(B),su=n(B,"LI",{});var MCe=s(su);Wte=n(MCe,"STRONG",{});var gWr=s(Wte);cuo=r(gWr,"tapas"),gWr.forEach(t),fuo=r(MCe," \u2014 "),p$=n(MCe,"A",{href:!0});var hWr=s(p$);muo=r(hWr,"TapasForMaskedLM"),hWr.forEach(t),guo=r(MCe," (TAPAS model)"),MCe.forEach(t),huo=i(B),lu=n(B,"LI",{});var ECe=s(lu);Hte=n(ECe,"STRONG",{});var pWr=s(Hte);puo=r(pWr,"transfo-xl"),pWr.forEach(t),_uo=r(ECe," \u2014 "),_$=n(ECe,"A",{href:!0});var _Wr=s(_$);uuo=r(_Wr,"TransfoXLLMHeadModel"),_Wr.forEach(t),buo=r(ECe," (Transformer-XL model)"),ECe.forEach(t),Fuo=i(B),iu=n(B,"LI",{});var CCe=s(iu);Ute=n(CCe,"STRONG",{});var uWr=s(Ute);vuo=r(uWr,"unispeech"),uWr.forEach(t),Tuo=r(CCe," \u2014 "),u$=n(CCe,"A",{href:!0});var bWr=s(u$);Muo=r(bWr,"UniSpeechForPreTraining"),bWr.forEach(t),Euo=r(CCe," (UniSpeech model)"),CCe.forEach(t),Cuo=i(B),du=n(B,"LI",{});var wCe=s(du);Jte=n(wCe,"STRONG",{});var FWr=s(Jte);wuo=r(FWr,"unispeech-sat"),FWr.forEach(t),Auo=r(wCe," \u2014 "),b$=n(wCe,"A",{href:!0});var vWr=s(b$);yuo=r(vWr,"UniSpeechSatForPreTraining"),vWr.forEach(t),Luo=r(wCe," (UniSpeechSat model)"),wCe.forEach(t),xuo=i(B),cu=n(B,"LI",{});var ACe=s(cu);Yte=n(ACe,"STRONG",{});var TWr=s(Yte);kuo=r(TWr,"visual_bert"),TWr.forEach(t),Suo=r(ACe," \u2014 "),F$=n(ACe,"A",{href:!0});var MWr=s(F$);Ruo=r(MWr,"VisualBertForPreTraining"),MWr.forEach(t),Buo=r(ACe," (VisualBert model)"),ACe.forEach(t),Puo=i(B),fu=n(B,"LI",{});var yCe=s(fu);Kte=n(yCe,"STRONG",{});var EWr=s(Kte);$uo=r(EWr,"vit_mae"),EWr.forEach(t),Iuo=r(yCe," \u2014 "),v$=n(yCe,"A",{href:!0});var CWr=s(v$);quo=r(CWr,"ViTMAEForPreTraining"),CWr.forEach(t),Nuo=r(yCe," (ViTMAE model)"),yCe.forEach(t),juo=i(B),mu=n(B,"LI",{});var LCe=s(mu);Zte=n(LCe,"STRONG",{});var wWr=s(Zte);Duo=r(wWr,"wav2vec2"),wWr.forEach(t),Guo=r(LCe," \u2014 "),T$=n(LCe,"A",{href:!0});var AWr=s(T$);Ouo=r(AWr,"Wav2Vec2ForPreTraining"),AWr.forEach(t),Vuo=r(LCe," (Wav2Vec2 model)"),LCe.forEach(t),Xuo=i(B),gu=n(B,"LI",{});var xCe=s(gu);eae=n(xCe,"STRONG",{});var yWr=s(eae);zuo=r(yWr,"xlm"),yWr.forEach(t),Quo=r(xCe," \u2014 "),M$=n(xCe,"A",{href:!0});var LWr=s(M$);Wuo=r(LWr,"XLMWithLMHeadModel"),LWr.forEach(t),Huo=r(xCe," (XLM model)"),xCe.forEach(t),Uuo=i(B),hu=n(B,"LI",{});var kCe=s(hu);oae=n(kCe,"STRONG",{});var xWr=s(oae);Juo=r(xWr,"xlm-roberta"),xWr.forEach(t),Yuo=r(kCe," \u2014 "),E$=n(kCe,"A",{href:!0});var kWr=s(E$);Kuo=r(kWr,"XLMRobertaForMaskedLM"),kWr.forEach(t),Zuo=r(kCe," (XLM-RoBERTa model)"),kCe.forEach(t),e1o=i(B),pu=n(B,"LI",{});var SCe=s(pu);rae=n(SCe,"STRONG",{});var SWr=s(rae);o1o=r(SWr,"xlm-roberta-xl"),SWr.forEach(t),r1o=r(SCe," \u2014 "),C$=n(SCe,"A",{href:!0});var RWr=s(C$);t1o=r(RWr,"XLMRobertaXLForMaskedLM"),RWr.forEach(t),a1o=r(SCe," (XLM-RoBERTa-XL model)"),SCe.forEach(t),n1o=i(B),_u=n(B,"LI",{});var RCe=s(_u);tae=n(RCe,"STRONG",{});var BWr=s(tae);s1o=r(BWr,"xlnet"),BWr.forEach(t),l1o=r(RCe," \u2014 "),w$=n(RCe,"A",{href:!0});var PWr=s(w$);i1o=r(PWr,"XLNetLMHeadModel"),PWr.forEach(t),d1o=r(RCe," (XLNet model)"),RCe.forEach(t),B.forEach(t),c1o=i(Gt),uu=n(Gt,"P",{});var BCe=s(uu);f1o=r(BCe,"The model is set in evaluation mode by default using "),aae=n(BCe,"CODE",{});var $Wr=s(aae);m1o=r($Wr,"model.eval()"),$Wr.forEach(t),g1o=r(BCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nae=n(BCe,"CODE",{});var IWr=s(nae);h1o=r(IWr,"model.train()"),IWr.forEach(t),BCe.forEach(t),p1o=i(Gt),sae=n(Gt,"P",{});var qWr=s(sae);_1o=r(qWr,"Examples:"),qWr.forEach(t),u1o=i(Gt),m(d5.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),aRe=i(c),rd=n(c,"H2",{class:!0});var gPe=s(rd);bu=n(gPe,"A",{id:!0,class:!0,href:!0});var NWr=s(bu);lae=n(NWr,"SPAN",{});var jWr=s(lae);m(c5.$$.fragment,jWr),jWr.forEach(t),NWr.forEach(t),b1o=i(gPe),iae=n(gPe,"SPAN",{});var DWr=s(iae);F1o=r(DWr,"AutoModelForCausalLM"),DWr.forEach(t),gPe.forEach(t),nRe=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(f5.$$.fragment,Js),v1o=i(Js),td=n(Js,"P",{});var oU=s(td);T1o=r(oU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),A$=n(oU,"A",{href:!0});var GWr=s(A$);M1o=r(GWr,"from_pretrained()"),GWr.forEach(t),E1o=r(oU," class method or the "),y$=n(oU,"A",{href:!0});var OWr=s(y$);C1o=r(OWr,"from_config()"),OWr.forEach(t),w1o=r(oU,` class
method.`),oU.forEach(t),A1o=i(Js),m5=n(Js,"P",{});var hPe=s(m5);y1o=r(hPe,"This class cannot be instantiated directly using "),dae=n(hPe,"CODE",{});var VWr=s(dae);L1o=r(VWr,"__init__()"),VWr.forEach(t),x1o=r(hPe," (throws an error)."),hPe.forEach(t),k1o=i(Js),Qr=n(Js,"DIV",{class:!0});var Ys=s(Qr);m(g5.$$.fragment,Ys),S1o=i(Ys),cae=n(Ys,"P",{});var XWr=s(cae);R1o=r(XWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),XWr.forEach(t),B1o=i(Ys),ad=n(Ys,"P",{});var rU=s(ad);P1o=r(rU,`Note:
Loading a model from its configuration file does `),fae=n(rU,"STRONG",{});var zWr=s(fae);$1o=r(zWr,"not"),zWr.forEach(t),I1o=r(rU,` load the model weights. It only affects the
model\u2019s configuration. Use `),L$=n(rU,"A",{href:!0});var QWr=s(L$);q1o=r(QWr,"from_pretrained()"),QWr.forEach(t),N1o=r(rU," to load the model weights."),rU.forEach(t),j1o=i(Ys),mae=n(Ys,"P",{});var WWr=s(mae);D1o=r(WWr,"Examples:"),WWr.forEach(t),G1o=i(Ys),m(h5.$$.fragment,Ys),Ys.forEach(t),O1o=i(Js),je=n(Js,"DIV",{class:!0});var Ot=s(je);m(p5.$$.fragment,Ot),V1o=i(Ot),gae=n(Ot,"P",{});var HWr=s(gae);X1o=r(HWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),HWr.forEach(t),z1o=i(Ot),Qa=n(Ot,"P",{});var ME=s(Qa);Q1o=r(ME,"The model class to instantiate is selected based on the "),hae=n(ME,"CODE",{});var UWr=s(hae);W1o=r(UWr,"model_type"),UWr.forEach(t),H1o=r(ME,` property of the config object (either
passed as an argument or loaded from `),pae=n(ME,"CODE",{});var JWr=s(pae);U1o=r(JWr,"pretrained_model_name_or_path"),JWr.forEach(t),J1o=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ae=n(ME,"CODE",{});var YWr=s(_ae);Y1o=r(YWr,"pretrained_model_name_or_path"),YWr.forEach(t),K1o=r(ME,":"),ME.forEach(t),Z1o=i(Ot),$=n(Ot,"UL",{});var q=s($);Fu=n(q,"LI",{});var PCe=s(Fu);uae=n(PCe,"STRONG",{});var KWr=s(uae);e4o=r(KWr,"bart"),KWr.forEach(t),o4o=r(PCe," \u2014 "),x$=n(PCe,"A",{href:!0});var ZWr=s(x$);r4o=r(ZWr,"BartForCausalLM"),ZWr.forEach(t),t4o=r(PCe," (BART model)"),PCe.forEach(t),a4o=i(q),vu=n(q,"LI",{});var $Ce=s(vu);bae=n($Ce,"STRONG",{});var eHr=s(bae);n4o=r(eHr,"bert"),eHr.forEach(t),s4o=r($Ce," \u2014 "),k$=n($Ce,"A",{href:!0});var oHr=s(k$);l4o=r(oHr,"BertLMHeadModel"),oHr.forEach(t),i4o=r($Ce," (BERT model)"),$Ce.forEach(t),d4o=i(q),Tu=n(q,"LI",{});var ICe=s(Tu);Fae=n(ICe,"STRONG",{});var rHr=s(Fae);c4o=r(rHr,"bert-generation"),rHr.forEach(t),f4o=r(ICe," \u2014 "),S$=n(ICe,"A",{href:!0});var tHr=s(S$);m4o=r(tHr,"BertGenerationDecoder"),tHr.forEach(t),g4o=r(ICe," (Bert Generation model)"),ICe.forEach(t),h4o=i(q),Mu=n(q,"LI",{});var qCe=s(Mu);vae=n(qCe,"STRONG",{});var aHr=s(vae);p4o=r(aHr,"big_bird"),aHr.forEach(t),_4o=r(qCe," \u2014 "),R$=n(qCe,"A",{href:!0});var nHr=s(R$);u4o=r(nHr,"BigBirdForCausalLM"),nHr.forEach(t),b4o=r(qCe," (BigBird model)"),qCe.forEach(t),F4o=i(q),Eu=n(q,"LI",{});var NCe=s(Eu);Tae=n(NCe,"STRONG",{});var sHr=s(Tae);v4o=r(sHr,"bigbird_pegasus"),sHr.forEach(t),T4o=r(NCe," \u2014 "),B$=n(NCe,"A",{href:!0});var lHr=s(B$);M4o=r(lHr,"BigBirdPegasusForCausalLM"),lHr.forEach(t),E4o=r(NCe," (BigBirdPegasus model)"),NCe.forEach(t),C4o=i(q),Cu=n(q,"LI",{});var jCe=s(Cu);Mae=n(jCe,"STRONG",{});var iHr=s(Mae);w4o=r(iHr,"blenderbot"),iHr.forEach(t),A4o=r(jCe," \u2014 "),P$=n(jCe,"A",{href:!0});var dHr=s(P$);y4o=r(dHr,"BlenderbotForCausalLM"),dHr.forEach(t),L4o=r(jCe," (Blenderbot model)"),jCe.forEach(t),x4o=i(q),wu=n(q,"LI",{});var DCe=s(wu);Eae=n(DCe,"STRONG",{});var cHr=s(Eae);k4o=r(cHr,"blenderbot-small"),cHr.forEach(t),S4o=r(DCe," \u2014 "),$$=n(DCe,"A",{href:!0});var fHr=s($$);R4o=r(fHr,"BlenderbotSmallForCausalLM"),fHr.forEach(t),B4o=r(DCe," (BlenderbotSmall model)"),DCe.forEach(t),P4o=i(q),Au=n(q,"LI",{});var GCe=s(Au);Cae=n(GCe,"STRONG",{});var mHr=s(Cae);$4o=r(mHr,"camembert"),mHr.forEach(t),I4o=r(GCe," \u2014 "),I$=n(GCe,"A",{href:!0});var gHr=s(I$);q4o=r(gHr,"CamembertForCausalLM"),gHr.forEach(t),N4o=r(GCe," (CamemBERT model)"),GCe.forEach(t),j4o=i(q),yu=n(q,"LI",{});var OCe=s(yu);wae=n(OCe,"STRONG",{});var hHr=s(wae);D4o=r(hHr,"ctrl"),hHr.forEach(t),G4o=r(OCe," \u2014 "),q$=n(OCe,"A",{href:!0});var pHr=s(q$);O4o=r(pHr,"CTRLLMHeadModel"),pHr.forEach(t),V4o=r(OCe," (CTRL model)"),OCe.forEach(t),X4o=i(q),Lu=n(q,"LI",{});var VCe=s(Lu);Aae=n(VCe,"STRONG",{});var _Hr=s(Aae);z4o=r(_Hr,"data2vec-text"),_Hr.forEach(t),Q4o=r(VCe," \u2014 "),N$=n(VCe,"A",{href:!0});var uHr=s(N$);W4o=r(uHr,"Data2VecTextForCausalLM"),uHr.forEach(t),H4o=r(VCe," (Data2VecText model)"),VCe.forEach(t),U4o=i(q),xu=n(q,"LI",{});var XCe=s(xu);yae=n(XCe,"STRONG",{});var bHr=s(yae);J4o=r(bHr,"electra"),bHr.forEach(t),Y4o=r(XCe," \u2014 "),j$=n(XCe,"A",{href:!0});var FHr=s(j$);K4o=r(FHr,"ElectraForCausalLM"),FHr.forEach(t),Z4o=r(XCe," (ELECTRA model)"),XCe.forEach(t),ebo=i(q),ku=n(q,"LI",{});var zCe=s(ku);Lae=n(zCe,"STRONG",{});var vHr=s(Lae);obo=r(vHr,"gpt2"),vHr.forEach(t),rbo=r(zCe," \u2014 "),D$=n(zCe,"A",{href:!0});var THr=s(D$);tbo=r(THr,"GPT2LMHeadModel"),THr.forEach(t),abo=r(zCe," (OpenAI GPT-2 model)"),zCe.forEach(t),nbo=i(q),Su=n(q,"LI",{});var QCe=s(Su);xae=n(QCe,"STRONG",{});var MHr=s(xae);sbo=r(MHr,"gpt_neo"),MHr.forEach(t),lbo=r(QCe," \u2014 "),G$=n(QCe,"A",{href:!0});var EHr=s(G$);ibo=r(EHr,"GPTNeoForCausalLM"),EHr.forEach(t),dbo=r(QCe," (GPT Neo model)"),QCe.forEach(t),cbo=i(q),Ru=n(q,"LI",{});var WCe=s(Ru);kae=n(WCe,"STRONG",{});var CHr=s(kae);fbo=r(CHr,"gptj"),CHr.forEach(t),mbo=r(WCe," \u2014 "),O$=n(WCe,"A",{href:!0});var wHr=s(O$);gbo=r(wHr,"GPTJForCausalLM"),wHr.forEach(t),hbo=r(WCe," (GPT-J model)"),WCe.forEach(t),pbo=i(q),Bu=n(q,"LI",{});var HCe=s(Bu);Sae=n(HCe,"STRONG",{});var AHr=s(Sae);_bo=r(AHr,"marian"),AHr.forEach(t),ubo=r(HCe," \u2014 "),V$=n(HCe,"A",{href:!0});var yHr=s(V$);bbo=r(yHr,"MarianForCausalLM"),yHr.forEach(t),Fbo=r(HCe," (Marian model)"),HCe.forEach(t),vbo=i(q),Pu=n(q,"LI",{});var UCe=s(Pu);Rae=n(UCe,"STRONG",{});var LHr=s(Rae);Tbo=r(LHr,"mbart"),LHr.forEach(t),Mbo=r(UCe," \u2014 "),X$=n(UCe,"A",{href:!0});var xHr=s(X$);Ebo=r(xHr,"MBartForCausalLM"),xHr.forEach(t),Cbo=r(UCe," (mBART model)"),UCe.forEach(t),wbo=i(q),$u=n(q,"LI",{});var JCe=s($u);Bae=n(JCe,"STRONG",{});var kHr=s(Bae);Abo=r(kHr,"megatron-bert"),kHr.forEach(t),ybo=r(JCe," \u2014 "),z$=n(JCe,"A",{href:!0});var SHr=s(z$);Lbo=r(SHr,"MegatronBertForCausalLM"),SHr.forEach(t),xbo=r(JCe," (MegatronBert model)"),JCe.forEach(t),kbo=i(q),Iu=n(q,"LI",{});var YCe=s(Iu);Pae=n(YCe,"STRONG",{});var RHr=s(Pae);Sbo=r(RHr,"openai-gpt"),RHr.forEach(t),Rbo=r(YCe," \u2014 "),Q$=n(YCe,"A",{href:!0});var BHr=s(Q$);Bbo=r(BHr,"OpenAIGPTLMHeadModel"),BHr.forEach(t),Pbo=r(YCe," (OpenAI GPT model)"),YCe.forEach(t),$bo=i(q),qu=n(q,"LI",{});var KCe=s(qu);$ae=n(KCe,"STRONG",{});var PHr=s($ae);Ibo=r(PHr,"pegasus"),PHr.forEach(t),qbo=r(KCe," \u2014 "),W$=n(KCe,"A",{href:!0});var $Hr=s(W$);Nbo=r($Hr,"PegasusForCausalLM"),$Hr.forEach(t),jbo=r(KCe," (Pegasus model)"),KCe.forEach(t),Dbo=i(q),Nu=n(q,"LI",{});var ZCe=s(Nu);Iae=n(ZCe,"STRONG",{});var IHr=s(Iae);Gbo=r(IHr,"plbart"),IHr.forEach(t),Obo=r(ZCe," \u2014 "),H$=n(ZCe,"A",{href:!0});var qHr=s(H$);Vbo=r(qHr,"PLBartForCausalLM"),qHr.forEach(t),Xbo=r(ZCe," (PLBart model)"),ZCe.forEach(t),zbo=i(q),ju=n(q,"LI",{});var e5e=s(ju);qae=n(e5e,"STRONG",{});var NHr=s(qae);Qbo=r(NHr,"prophetnet"),NHr.forEach(t),Wbo=r(e5e," \u2014 "),U$=n(e5e,"A",{href:!0});var jHr=s(U$);Hbo=r(jHr,"ProphetNetForCausalLM"),jHr.forEach(t),Ubo=r(e5e," (ProphetNet model)"),e5e.forEach(t),Jbo=i(q),Du=n(q,"LI",{});var o5e=s(Du);Nae=n(o5e,"STRONG",{});var DHr=s(Nae);Ybo=r(DHr,"qdqbert"),DHr.forEach(t),Kbo=r(o5e," \u2014 "),J$=n(o5e,"A",{href:!0});var GHr=s(J$);Zbo=r(GHr,"QDQBertLMHeadModel"),GHr.forEach(t),e3o=r(o5e," (QDQBert model)"),o5e.forEach(t),o3o=i(q),Gu=n(q,"LI",{});var r5e=s(Gu);jae=n(r5e,"STRONG",{});var OHr=s(jae);r3o=r(OHr,"reformer"),OHr.forEach(t),t3o=r(r5e," \u2014 "),Y$=n(r5e,"A",{href:!0});var VHr=s(Y$);a3o=r(VHr,"ReformerModelWithLMHead"),VHr.forEach(t),n3o=r(r5e," (Reformer model)"),r5e.forEach(t),s3o=i(q),Ou=n(q,"LI",{});var t5e=s(Ou);Dae=n(t5e,"STRONG",{});var XHr=s(Dae);l3o=r(XHr,"rembert"),XHr.forEach(t),i3o=r(t5e," \u2014 "),K$=n(t5e,"A",{href:!0});var zHr=s(K$);d3o=r(zHr,"RemBertForCausalLM"),zHr.forEach(t),c3o=r(t5e," (RemBERT model)"),t5e.forEach(t),f3o=i(q),Vu=n(q,"LI",{});var a5e=s(Vu);Gae=n(a5e,"STRONG",{});var QHr=s(Gae);m3o=r(QHr,"roberta"),QHr.forEach(t),g3o=r(a5e," \u2014 "),Z$=n(a5e,"A",{href:!0});var WHr=s(Z$);h3o=r(WHr,"RobertaForCausalLM"),WHr.forEach(t),p3o=r(a5e," (RoBERTa model)"),a5e.forEach(t),_3o=i(q),Xu=n(q,"LI",{});var n5e=s(Xu);Oae=n(n5e,"STRONG",{});var HHr=s(Oae);u3o=r(HHr,"roformer"),HHr.forEach(t),b3o=r(n5e," \u2014 "),eI=n(n5e,"A",{href:!0});var UHr=s(eI);F3o=r(UHr,"RoFormerForCausalLM"),UHr.forEach(t),v3o=r(n5e," (RoFormer model)"),n5e.forEach(t),T3o=i(q),zu=n(q,"LI",{});var s5e=s(zu);Vae=n(s5e,"STRONG",{});var JHr=s(Vae);M3o=r(JHr,"speech_to_text_2"),JHr.forEach(t),E3o=r(s5e," \u2014 "),oI=n(s5e,"A",{href:!0});var YHr=s(oI);C3o=r(YHr,"Speech2Text2ForCausalLM"),YHr.forEach(t),w3o=r(s5e," (Speech2Text2 model)"),s5e.forEach(t),A3o=i(q),Qu=n(q,"LI",{});var l5e=s(Qu);Xae=n(l5e,"STRONG",{});var KHr=s(Xae);y3o=r(KHr,"transfo-xl"),KHr.forEach(t),L3o=r(l5e," \u2014 "),rI=n(l5e,"A",{href:!0});var ZHr=s(rI);x3o=r(ZHr,"TransfoXLLMHeadModel"),ZHr.forEach(t),k3o=r(l5e," (Transformer-XL model)"),l5e.forEach(t),S3o=i(q),Wu=n(q,"LI",{});var i5e=s(Wu);zae=n(i5e,"STRONG",{});var eUr=s(zae);R3o=r(eUr,"trocr"),eUr.forEach(t),B3o=r(i5e," \u2014 "),tI=n(i5e,"A",{href:!0});var oUr=s(tI);P3o=r(oUr,"TrOCRForCausalLM"),oUr.forEach(t),$3o=r(i5e," (TrOCR model)"),i5e.forEach(t),I3o=i(q),Hu=n(q,"LI",{});var d5e=s(Hu);Qae=n(d5e,"STRONG",{});var rUr=s(Qae);q3o=r(rUr,"xglm"),rUr.forEach(t),N3o=r(d5e," \u2014 "),aI=n(d5e,"A",{href:!0});var tUr=s(aI);j3o=r(tUr,"XGLMForCausalLM"),tUr.forEach(t),D3o=r(d5e," (XGLM model)"),d5e.forEach(t),G3o=i(q),Uu=n(q,"LI",{});var c5e=s(Uu);Wae=n(c5e,"STRONG",{});var aUr=s(Wae);O3o=r(aUr,"xlm"),aUr.forEach(t),V3o=r(c5e," \u2014 "),nI=n(c5e,"A",{href:!0});var nUr=s(nI);X3o=r(nUr,"XLMWithLMHeadModel"),nUr.forEach(t),z3o=r(c5e," (XLM model)"),c5e.forEach(t),Q3o=i(q),Ju=n(q,"LI",{});var f5e=s(Ju);Hae=n(f5e,"STRONG",{});var sUr=s(Hae);W3o=r(sUr,"xlm-prophetnet"),sUr.forEach(t),H3o=r(f5e," \u2014 "),sI=n(f5e,"A",{href:!0});var lUr=s(sI);U3o=r(lUr,"XLMProphetNetForCausalLM"),lUr.forEach(t),J3o=r(f5e," (XLMProphetNet model)"),f5e.forEach(t),Y3o=i(q),Yu=n(q,"LI",{});var m5e=s(Yu);Uae=n(m5e,"STRONG",{});var iUr=s(Uae);K3o=r(iUr,"xlm-roberta"),iUr.forEach(t),Z3o=r(m5e," \u2014 "),lI=n(m5e,"A",{href:!0});var dUr=s(lI);e2o=r(dUr,"XLMRobertaForCausalLM"),dUr.forEach(t),o2o=r(m5e," (XLM-RoBERTa model)"),m5e.forEach(t),r2o=i(q),Ku=n(q,"LI",{});var g5e=s(Ku);Jae=n(g5e,"STRONG",{});var cUr=s(Jae);t2o=r(cUr,"xlm-roberta-xl"),cUr.forEach(t),a2o=r(g5e," \u2014 "),iI=n(g5e,"A",{href:!0});var fUr=s(iI);n2o=r(fUr,"XLMRobertaXLForCausalLM"),fUr.forEach(t),s2o=r(g5e," (XLM-RoBERTa-XL model)"),g5e.forEach(t),l2o=i(q),Zu=n(q,"LI",{});var h5e=s(Zu);Yae=n(h5e,"STRONG",{});var mUr=s(Yae);i2o=r(mUr,"xlnet"),mUr.forEach(t),d2o=r(h5e," \u2014 "),dI=n(h5e,"A",{href:!0});var gUr=s(dI);c2o=r(gUr,"XLNetLMHeadModel"),gUr.forEach(t),f2o=r(h5e," (XLNet model)"),h5e.forEach(t),q.forEach(t),m2o=i(Ot),e1=n(Ot,"P",{});var p5e=s(e1);g2o=r(p5e,"The model is set in evaluation mode by default using "),Kae=n(p5e,"CODE",{});var hUr=s(Kae);h2o=r(hUr,"model.eval()"),hUr.forEach(t),p2o=r(p5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zae=n(p5e,"CODE",{});var pUr=s(Zae);_2o=r(pUr,"model.train()"),pUr.forEach(t),p5e.forEach(t),u2o=i(Ot),ene=n(Ot,"P",{});var _Ur=s(ene);b2o=r(_Ur,"Examples:"),_Ur.forEach(t),F2o=i(Ot),m(_5.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),sRe=i(c),nd=n(c,"H2",{class:!0});var pPe=s(nd);o1=n(pPe,"A",{id:!0,class:!0,href:!0});var uUr=s(o1);one=n(uUr,"SPAN",{});var bUr=s(one);m(u5.$$.fragment,bUr),bUr.forEach(t),uUr.forEach(t),v2o=i(pPe),rne=n(pPe,"SPAN",{});var FUr=s(rne);T2o=r(FUr,"AutoModelForMaskedLM"),FUr.forEach(t),pPe.forEach(t),lRe=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(b5.$$.fragment,Ks),M2o=i(Ks),sd=n(Ks,"P",{});var tU=s(sd);E2o=r(tU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cI=n(tU,"A",{href:!0});var vUr=s(cI);C2o=r(vUr,"from_pretrained()"),vUr.forEach(t),w2o=r(tU," class method or the "),fI=n(tU,"A",{href:!0});var TUr=s(fI);A2o=r(TUr,"from_config()"),TUr.forEach(t),y2o=r(tU,` class
method.`),tU.forEach(t),L2o=i(Ks),F5=n(Ks,"P",{});var _Pe=s(F5);x2o=r(_Pe,"This class cannot be instantiated directly using "),tne=n(_Pe,"CODE",{});var MUr=s(tne);k2o=r(MUr,"__init__()"),MUr.forEach(t),S2o=r(_Pe," (throws an error)."),_Pe.forEach(t),R2o=i(Ks),Wr=n(Ks,"DIV",{class:!0});var Zs=s(Wr);m(v5.$$.fragment,Zs),B2o=i(Zs),ane=n(Zs,"P",{});var EUr=s(ane);P2o=r(EUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),EUr.forEach(t),$2o=i(Zs),ld=n(Zs,"P",{});var aU=s(ld);I2o=r(aU,`Note:
Loading a model from its configuration file does `),nne=n(aU,"STRONG",{});var CUr=s(nne);q2o=r(CUr,"not"),CUr.forEach(t),N2o=r(aU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mI=n(aU,"A",{href:!0});var wUr=s(mI);j2o=r(wUr,"from_pretrained()"),wUr.forEach(t),D2o=r(aU," to load the model weights."),aU.forEach(t),G2o=i(Zs),sne=n(Zs,"P",{});var AUr=s(sne);O2o=r(AUr,"Examples:"),AUr.forEach(t),V2o=i(Zs),m(T5.$$.fragment,Zs),Zs.forEach(t),X2o=i(Ks),De=n(Ks,"DIV",{class:!0});var Vt=s(De);m(M5.$$.fragment,Vt),z2o=i(Vt),lne=n(Vt,"P",{});var yUr=s(lne);Q2o=r(yUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yUr.forEach(t),W2o=i(Vt),Wa=n(Vt,"P",{});var EE=s(Wa);H2o=r(EE,"The model class to instantiate is selected based on the "),ine=n(EE,"CODE",{});var LUr=s(ine);U2o=r(LUr,"model_type"),LUr.forEach(t),J2o=r(EE,` property of the config object (either
passed as an argument or loaded from `),dne=n(EE,"CODE",{});var xUr=s(dne);Y2o=r(xUr,"pretrained_model_name_or_path"),xUr.forEach(t),K2o=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cne=n(EE,"CODE",{});var kUr=s(cne);Z2o=r(kUr,"pretrained_model_name_or_path"),kUr.forEach(t),eFo=r(EE,":"),EE.forEach(t),oFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);r1=n(N,"LI",{});var _5e=s(r1);fne=n(_5e,"STRONG",{});var SUr=s(fne);rFo=r(SUr,"albert"),SUr.forEach(t),tFo=r(_5e," \u2014 "),gI=n(_5e,"A",{href:!0});var RUr=s(gI);aFo=r(RUr,"AlbertForMaskedLM"),RUr.forEach(t),nFo=r(_5e," (ALBERT model)"),_5e.forEach(t),sFo=i(N),t1=n(N,"LI",{});var u5e=s(t1);mne=n(u5e,"STRONG",{});var BUr=s(mne);lFo=r(BUr,"bart"),BUr.forEach(t),iFo=r(u5e," \u2014 "),hI=n(u5e,"A",{href:!0});var PUr=s(hI);dFo=r(PUr,"BartForConditionalGeneration"),PUr.forEach(t),cFo=r(u5e," (BART model)"),u5e.forEach(t),fFo=i(N),a1=n(N,"LI",{});var b5e=s(a1);gne=n(b5e,"STRONG",{});var $Ur=s(gne);mFo=r($Ur,"bert"),$Ur.forEach(t),gFo=r(b5e," \u2014 "),pI=n(b5e,"A",{href:!0});var IUr=s(pI);hFo=r(IUr,"BertForMaskedLM"),IUr.forEach(t),pFo=r(b5e," (BERT model)"),b5e.forEach(t),_Fo=i(N),n1=n(N,"LI",{});var F5e=s(n1);hne=n(F5e,"STRONG",{});var qUr=s(hne);uFo=r(qUr,"big_bird"),qUr.forEach(t),bFo=r(F5e," \u2014 "),_I=n(F5e,"A",{href:!0});var NUr=s(_I);FFo=r(NUr,"BigBirdForMaskedLM"),NUr.forEach(t),vFo=r(F5e," (BigBird model)"),F5e.forEach(t),TFo=i(N),s1=n(N,"LI",{});var v5e=s(s1);pne=n(v5e,"STRONG",{});var jUr=s(pne);MFo=r(jUr,"camembert"),jUr.forEach(t),EFo=r(v5e," \u2014 "),uI=n(v5e,"A",{href:!0});var DUr=s(uI);CFo=r(DUr,"CamembertForMaskedLM"),DUr.forEach(t),wFo=r(v5e," (CamemBERT model)"),v5e.forEach(t),AFo=i(N),l1=n(N,"LI",{});var T5e=s(l1);_ne=n(T5e,"STRONG",{});var GUr=s(_ne);yFo=r(GUr,"convbert"),GUr.forEach(t),LFo=r(T5e," \u2014 "),bI=n(T5e,"A",{href:!0});var OUr=s(bI);xFo=r(OUr,"ConvBertForMaskedLM"),OUr.forEach(t),kFo=r(T5e," (ConvBERT model)"),T5e.forEach(t),SFo=i(N),i1=n(N,"LI",{});var M5e=s(i1);une=n(M5e,"STRONG",{});var VUr=s(une);RFo=r(VUr,"data2vec-text"),VUr.forEach(t),BFo=r(M5e," \u2014 "),FI=n(M5e,"A",{href:!0});var XUr=s(FI);PFo=r(XUr,"Data2VecTextForMaskedLM"),XUr.forEach(t),$Fo=r(M5e," (Data2VecText model)"),M5e.forEach(t),IFo=i(N),d1=n(N,"LI",{});var E5e=s(d1);bne=n(E5e,"STRONG",{});var zUr=s(bne);qFo=r(zUr,"deberta"),zUr.forEach(t),NFo=r(E5e," \u2014 "),vI=n(E5e,"A",{href:!0});var QUr=s(vI);jFo=r(QUr,"DebertaForMaskedLM"),QUr.forEach(t),DFo=r(E5e," (DeBERTa model)"),E5e.forEach(t),GFo=i(N),c1=n(N,"LI",{});var C5e=s(c1);Fne=n(C5e,"STRONG",{});var WUr=s(Fne);OFo=r(WUr,"deberta-v2"),WUr.forEach(t),VFo=r(C5e," \u2014 "),TI=n(C5e,"A",{href:!0});var HUr=s(TI);XFo=r(HUr,"DebertaV2ForMaskedLM"),HUr.forEach(t),zFo=r(C5e," (DeBERTa-v2 model)"),C5e.forEach(t),QFo=i(N),f1=n(N,"LI",{});var w5e=s(f1);vne=n(w5e,"STRONG",{});var UUr=s(vne);WFo=r(UUr,"distilbert"),UUr.forEach(t),HFo=r(w5e," \u2014 "),MI=n(w5e,"A",{href:!0});var JUr=s(MI);UFo=r(JUr,"DistilBertForMaskedLM"),JUr.forEach(t),JFo=r(w5e," (DistilBERT model)"),w5e.forEach(t),YFo=i(N),m1=n(N,"LI",{});var A5e=s(m1);Tne=n(A5e,"STRONG",{});var YUr=s(Tne);KFo=r(YUr,"electra"),YUr.forEach(t),ZFo=r(A5e," \u2014 "),EI=n(A5e,"A",{href:!0});var KUr=s(EI);evo=r(KUr,"ElectraForMaskedLM"),KUr.forEach(t),ovo=r(A5e," (ELECTRA model)"),A5e.forEach(t),rvo=i(N),g1=n(N,"LI",{});var y5e=s(g1);Mne=n(y5e,"STRONG",{});var ZUr=s(Mne);tvo=r(ZUr,"flaubert"),ZUr.forEach(t),avo=r(y5e," \u2014 "),CI=n(y5e,"A",{href:!0});var eJr=s(CI);nvo=r(eJr,"FlaubertWithLMHeadModel"),eJr.forEach(t),svo=r(y5e," (FlauBERT model)"),y5e.forEach(t),lvo=i(N),h1=n(N,"LI",{});var L5e=s(h1);Ene=n(L5e,"STRONG",{});var oJr=s(Ene);ivo=r(oJr,"fnet"),oJr.forEach(t),dvo=r(L5e," \u2014 "),wI=n(L5e,"A",{href:!0});var rJr=s(wI);cvo=r(rJr,"FNetForMaskedLM"),rJr.forEach(t),fvo=r(L5e," (FNet model)"),L5e.forEach(t),mvo=i(N),p1=n(N,"LI",{});var x5e=s(p1);Cne=n(x5e,"STRONG",{});var tJr=s(Cne);gvo=r(tJr,"funnel"),tJr.forEach(t),hvo=r(x5e," \u2014 "),AI=n(x5e,"A",{href:!0});var aJr=s(AI);pvo=r(aJr,"FunnelForMaskedLM"),aJr.forEach(t),_vo=r(x5e," (Funnel Transformer model)"),x5e.forEach(t),uvo=i(N),_1=n(N,"LI",{});var k5e=s(_1);wne=n(k5e,"STRONG",{});var nJr=s(wne);bvo=r(nJr,"ibert"),nJr.forEach(t),Fvo=r(k5e," \u2014 "),yI=n(k5e,"A",{href:!0});var sJr=s(yI);vvo=r(sJr,"IBertForMaskedLM"),sJr.forEach(t),Tvo=r(k5e," (I-BERT model)"),k5e.forEach(t),Mvo=i(N),u1=n(N,"LI",{});var S5e=s(u1);Ane=n(S5e,"STRONG",{});var lJr=s(Ane);Evo=r(lJr,"layoutlm"),lJr.forEach(t),Cvo=r(S5e," \u2014 "),LI=n(S5e,"A",{href:!0});var iJr=s(LI);wvo=r(iJr,"LayoutLMForMaskedLM"),iJr.forEach(t),Avo=r(S5e," (LayoutLM model)"),S5e.forEach(t),yvo=i(N),b1=n(N,"LI",{});var R5e=s(b1);yne=n(R5e,"STRONG",{});var dJr=s(yne);Lvo=r(dJr,"longformer"),dJr.forEach(t),xvo=r(R5e," \u2014 "),xI=n(R5e,"A",{href:!0});var cJr=s(xI);kvo=r(cJr,"LongformerForMaskedLM"),cJr.forEach(t),Svo=r(R5e," (Longformer model)"),R5e.forEach(t),Rvo=i(N),F1=n(N,"LI",{});var B5e=s(F1);Lne=n(B5e,"STRONG",{});var fJr=s(Lne);Bvo=r(fJr,"mbart"),fJr.forEach(t),Pvo=r(B5e," \u2014 "),kI=n(B5e,"A",{href:!0});var mJr=s(kI);$vo=r(mJr,"MBartForConditionalGeneration"),mJr.forEach(t),Ivo=r(B5e," (mBART model)"),B5e.forEach(t),qvo=i(N),v1=n(N,"LI",{});var P5e=s(v1);xne=n(P5e,"STRONG",{});var gJr=s(xne);Nvo=r(gJr,"megatron-bert"),gJr.forEach(t),jvo=r(P5e," \u2014 "),SI=n(P5e,"A",{href:!0});var hJr=s(SI);Dvo=r(hJr,"MegatronBertForMaskedLM"),hJr.forEach(t),Gvo=r(P5e," (MegatronBert model)"),P5e.forEach(t),Ovo=i(N),T1=n(N,"LI",{});var $5e=s(T1);kne=n($5e,"STRONG",{});var pJr=s(kne);Vvo=r(pJr,"mobilebert"),pJr.forEach(t),Xvo=r($5e," \u2014 "),RI=n($5e,"A",{href:!0});var _Jr=s(RI);zvo=r(_Jr,"MobileBertForMaskedLM"),_Jr.forEach(t),Qvo=r($5e," (MobileBERT model)"),$5e.forEach(t),Wvo=i(N),M1=n(N,"LI",{});var I5e=s(M1);Sne=n(I5e,"STRONG",{});var uJr=s(Sne);Hvo=r(uJr,"mpnet"),uJr.forEach(t),Uvo=r(I5e," \u2014 "),BI=n(I5e,"A",{href:!0});var bJr=s(BI);Jvo=r(bJr,"MPNetForMaskedLM"),bJr.forEach(t),Yvo=r(I5e," (MPNet model)"),I5e.forEach(t),Kvo=i(N),E1=n(N,"LI",{});var q5e=s(E1);Rne=n(q5e,"STRONG",{});var FJr=s(Rne);Zvo=r(FJr,"nystromformer"),FJr.forEach(t),e6o=r(q5e," \u2014 "),PI=n(q5e,"A",{href:!0});var vJr=s(PI);o6o=r(vJr,"NystromformerForMaskedLM"),vJr.forEach(t),r6o=r(q5e," (Nystromformer model)"),q5e.forEach(t),t6o=i(N),C1=n(N,"LI",{});var N5e=s(C1);Bne=n(N5e,"STRONG",{});var TJr=s(Bne);a6o=r(TJr,"perceiver"),TJr.forEach(t),n6o=r(N5e," \u2014 "),$I=n(N5e,"A",{href:!0});var MJr=s($I);s6o=r(MJr,"PerceiverForMaskedLM"),MJr.forEach(t),l6o=r(N5e," (Perceiver model)"),N5e.forEach(t),i6o=i(N),w1=n(N,"LI",{});var j5e=s(w1);Pne=n(j5e,"STRONG",{});var EJr=s(Pne);d6o=r(EJr,"qdqbert"),EJr.forEach(t),c6o=r(j5e," \u2014 "),II=n(j5e,"A",{href:!0});var CJr=s(II);f6o=r(CJr,"QDQBertForMaskedLM"),CJr.forEach(t),m6o=r(j5e," (QDQBert model)"),j5e.forEach(t),g6o=i(N),A1=n(N,"LI",{});var D5e=s(A1);$ne=n(D5e,"STRONG",{});var wJr=s($ne);h6o=r(wJr,"reformer"),wJr.forEach(t),p6o=r(D5e," \u2014 "),qI=n(D5e,"A",{href:!0});var AJr=s(qI);_6o=r(AJr,"ReformerForMaskedLM"),AJr.forEach(t),u6o=r(D5e," (Reformer model)"),D5e.forEach(t),b6o=i(N),y1=n(N,"LI",{});var G5e=s(y1);Ine=n(G5e,"STRONG",{});var yJr=s(Ine);F6o=r(yJr,"rembert"),yJr.forEach(t),v6o=r(G5e," \u2014 "),NI=n(G5e,"A",{href:!0});var LJr=s(NI);T6o=r(LJr,"RemBertForMaskedLM"),LJr.forEach(t),M6o=r(G5e," (RemBERT model)"),G5e.forEach(t),E6o=i(N),L1=n(N,"LI",{});var O5e=s(L1);qne=n(O5e,"STRONG",{});var xJr=s(qne);C6o=r(xJr,"roberta"),xJr.forEach(t),w6o=r(O5e," \u2014 "),jI=n(O5e,"A",{href:!0});var kJr=s(jI);A6o=r(kJr,"RobertaForMaskedLM"),kJr.forEach(t),y6o=r(O5e," (RoBERTa model)"),O5e.forEach(t),L6o=i(N),x1=n(N,"LI",{});var V5e=s(x1);Nne=n(V5e,"STRONG",{});var SJr=s(Nne);x6o=r(SJr,"roformer"),SJr.forEach(t),k6o=r(V5e," \u2014 "),DI=n(V5e,"A",{href:!0});var RJr=s(DI);S6o=r(RJr,"RoFormerForMaskedLM"),RJr.forEach(t),R6o=r(V5e," (RoFormer model)"),V5e.forEach(t),B6o=i(N),k1=n(N,"LI",{});var X5e=s(k1);jne=n(X5e,"STRONG",{});var BJr=s(jne);P6o=r(BJr,"squeezebert"),BJr.forEach(t),$6o=r(X5e," \u2014 "),GI=n(X5e,"A",{href:!0});var PJr=s(GI);I6o=r(PJr,"SqueezeBertForMaskedLM"),PJr.forEach(t),q6o=r(X5e," (SqueezeBERT model)"),X5e.forEach(t),N6o=i(N),S1=n(N,"LI",{});var z5e=s(S1);Dne=n(z5e,"STRONG",{});var $Jr=s(Dne);j6o=r($Jr,"tapas"),$Jr.forEach(t),D6o=r(z5e," \u2014 "),OI=n(z5e,"A",{href:!0});var IJr=s(OI);G6o=r(IJr,"TapasForMaskedLM"),IJr.forEach(t),O6o=r(z5e," (TAPAS model)"),z5e.forEach(t),V6o=i(N),R1=n(N,"LI",{});var Q5e=s(R1);Gne=n(Q5e,"STRONG",{});var qJr=s(Gne);X6o=r(qJr,"wav2vec2"),qJr.forEach(t),z6o=r(Q5e," \u2014 "),One=n(Q5e,"CODE",{});var NJr=s(One);Q6o=r(NJr,"Wav2Vec2ForMaskedLM"),NJr.forEach(t),W6o=r(Q5e,"(Wav2Vec2 model)"),Q5e.forEach(t),H6o=i(N),B1=n(N,"LI",{});var W5e=s(B1);Vne=n(W5e,"STRONG",{});var jJr=s(Vne);U6o=r(jJr,"xlm"),jJr.forEach(t),J6o=r(W5e," \u2014 "),VI=n(W5e,"A",{href:!0});var DJr=s(VI);Y6o=r(DJr,"XLMWithLMHeadModel"),DJr.forEach(t),K6o=r(W5e," (XLM model)"),W5e.forEach(t),Z6o=i(N),P1=n(N,"LI",{});var H5e=s(P1);Xne=n(H5e,"STRONG",{});var GJr=s(Xne);eTo=r(GJr,"xlm-roberta"),GJr.forEach(t),oTo=r(H5e," \u2014 "),XI=n(H5e,"A",{href:!0});var OJr=s(XI);rTo=r(OJr,"XLMRobertaForMaskedLM"),OJr.forEach(t),tTo=r(H5e," (XLM-RoBERTa model)"),H5e.forEach(t),aTo=i(N),$1=n(N,"LI",{});var U5e=s($1);zne=n(U5e,"STRONG",{});var VJr=s(zne);nTo=r(VJr,"xlm-roberta-xl"),VJr.forEach(t),sTo=r(U5e," \u2014 "),zI=n(U5e,"A",{href:!0});var XJr=s(zI);lTo=r(XJr,"XLMRobertaXLForMaskedLM"),XJr.forEach(t),iTo=r(U5e," (XLM-RoBERTa-XL model)"),U5e.forEach(t),dTo=i(N),I1=n(N,"LI",{});var J5e=s(I1);Qne=n(J5e,"STRONG",{});var zJr=s(Qne);cTo=r(zJr,"yoso"),zJr.forEach(t),fTo=r(J5e," \u2014 "),QI=n(J5e,"A",{href:!0});var QJr=s(QI);mTo=r(QJr,"YosoForMaskedLM"),QJr.forEach(t),gTo=r(J5e," (YOSO model)"),J5e.forEach(t),N.forEach(t),hTo=i(Vt),q1=n(Vt,"P",{});var Y5e=s(q1);pTo=r(Y5e,"The model is set in evaluation mode by default using "),Wne=n(Y5e,"CODE",{});var WJr=s(Wne);_To=r(WJr,"model.eval()"),WJr.forEach(t),uTo=r(Y5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hne=n(Y5e,"CODE",{});var HJr=s(Hne);bTo=r(HJr,"model.train()"),HJr.forEach(t),Y5e.forEach(t),FTo=i(Vt),Une=n(Vt,"P",{});var UJr=s(Une);vTo=r(UJr,"Examples:"),UJr.forEach(t),TTo=i(Vt),m(E5.$$.fragment,Vt),Vt.forEach(t),Ks.forEach(t),iRe=i(c),id=n(c,"H2",{class:!0});var uPe=s(id);N1=n(uPe,"A",{id:!0,class:!0,href:!0});var JJr=s(N1);Jne=n(JJr,"SPAN",{});var YJr=s(Jne);m(C5.$$.fragment,YJr),YJr.forEach(t),JJr.forEach(t),MTo=i(uPe),Yne=n(uPe,"SPAN",{});var KJr=s(Yne);ETo=r(KJr,"AutoModelForSeq2SeqLM"),KJr.forEach(t),uPe.forEach(t),dRe=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(w5.$$.fragment,el),CTo=i(el),dd=n(el,"P",{});var nU=s(dd);wTo=r(nU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WI=n(nU,"A",{href:!0});var ZJr=s(WI);ATo=r(ZJr,"from_pretrained()"),ZJr.forEach(t),yTo=r(nU," class method or the "),HI=n(nU,"A",{href:!0});var eYr=s(HI);LTo=r(eYr,"from_config()"),eYr.forEach(t),xTo=r(nU,` class
method.`),nU.forEach(t),kTo=i(el),A5=n(el,"P",{});var bPe=s(A5);STo=r(bPe,"This class cannot be instantiated directly using "),Kne=n(bPe,"CODE",{});var oYr=s(Kne);RTo=r(oYr,"__init__()"),oYr.forEach(t),BTo=r(bPe," (throws an error)."),bPe.forEach(t),PTo=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(y5.$$.fragment,ol),$To=i(ol),Zne=n(ol,"P",{});var rYr=s(Zne);ITo=r(rYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rYr.forEach(t),qTo=i(ol),cd=n(ol,"P",{});var sU=s(cd);NTo=r(sU,`Note:
Loading a model from its configuration file does `),ese=n(sU,"STRONG",{});var tYr=s(ese);jTo=r(tYr,"not"),tYr.forEach(t),DTo=r(sU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UI=n(sU,"A",{href:!0});var aYr=s(UI);GTo=r(aYr,"from_pretrained()"),aYr.forEach(t),OTo=r(sU," to load the model weights."),sU.forEach(t),VTo=i(ol),ose=n(ol,"P",{});var nYr=s(ose);XTo=r(nYr,"Examples:"),nYr.forEach(t),zTo=i(ol),m(L5.$$.fragment,ol),ol.forEach(t),QTo=i(el),Ge=n(el,"DIV",{class:!0});var Xt=s(Ge);m(x5.$$.fragment,Xt),WTo=i(Xt),rse=n(Xt,"P",{});var sYr=s(rse);HTo=r(sYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sYr.forEach(t),UTo=i(Xt),Ha=n(Xt,"P",{});var CE=s(Ha);JTo=r(CE,"The model class to instantiate is selected based on the "),tse=n(CE,"CODE",{});var lYr=s(tse);YTo=r(lYr,"model_type"),lYr.forEach(t),KTo=r(CE,` property of the config object (either
passed as an argument or loaded from `),ase=n(CE,"CODE",{});var iYr=s(ase);ZTo=r(iYr,"pretrained_model_name_or_path"),iYr.forEach(t),e7o=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(CE,"CODE",{});var dYr=s(nse);o7o=r(dYr,"pretrained_model_name_or_path"),dYr.forEach(t),r7o=r(CE,":"),CE.forEach(t),t7o=i(Xt),se=n(Xt,"UL",{});var ie=s(se);j1=n(ie,"LI",{});var K5e=s(j1);sse=n(K5e,"STRONG",{});var cYr=s(sse);a7o=r(cYr,"bart"),cYr.forEach(t),n7o=r(K5e," \u2014 "),JI=n(K5e,"A",{href:!0});var fYr=s(JI);s7o=r(fYr,"BartForConditionalGeneration"),fYr.forEach(t),l7o=r(K5e," (BART model)"),K5e.forEach(t),i7o=i(ie),D1=n(ie,"LI",{});var Z5e=s(D1);lse=n(Z5e,"STRONG",{});var mYr=s(lse);d7o=r(mYr,"bigbird_pegasus"),mYr.forEach(t),c7o=r(Z5e," \u2014 "),YI=n(Z5e,"A",{href:!0});var gYr=s(YI);f7o=r(gYr,"BigBirdPegasusForConditionalGeneration"),gYr.forEach(t),m7o=r(Z5e," (BigBirdPegasus model)"),Z5e.forEach(t),g7o=i(ie),G1=n(ie,"LI",{});var ewe=s(G1);ise=n(ewe,"STRONG",{});var hYr=s(ise);h7o=r(hYr,"blenderbot"),hYr.forEach(t),p7o=r(ewe," \u2014 "),KI=n(ewe,"A",{href:!0});var pYr=s(KI);_7o=r(pYr,"BlenderbotForConditionalGeneration"),pYr.forEach(t),u7o=r(ewe," (Blenderbot model)"),ewe.forEach(t),b7o=i(ie),O1=n(ie,"LI",{});var owe=s(O1);dse=n(owe,"STRONG",{});var _Yr=s(dse);F7o=r(_Yr,"blenderbot-small"),_Yr.forEach(t),v7o=r(owe," \u2014 "),ZI=n(owe,"A",{href:!0});var uYr=s(ZI);T7o=r(uYr,"BlenderbotSmallForConditionalGeneration"),uYr.forEach(t),M7o=r(owe," (BlenderbotSmall model)"),owe.forEach(t),E7o=i(ie),V1=n(ie,"LI",{});var rwe=s(V1);cse=n(rwe,"STRONG",{});var bYr=s(cse);C7o=r(bYr,"encoder-decoder"),bYr.forEach(t),w7o=r(rwe," \u2014 "),eq=n(rwe,"A",{href:!0});var FYr=s(eq);A7o=r(FYr,"EncoderDecoderModel"),FYr.forEach(t),y7o=r(rwe," (Encoder decoder model)"),rwe.forEach(t),L7o=i(ie),X1=n(ie,"LI",{});var twe=s(X1);fse=n(twe,"STRONG",{});var vYr=s(fse);x7o=r(vYr,"fsmt"),vYr.forEach(t),k7o=r(twe," \u2014 "),oq=n(twe,"A",{href:!0});var TYr=s(oq);S7o=r(TYr,"FSMTForConditionalGeneration"),TYr.forEach(t),R7o=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),B7o=i(ie),z1=n(ie,"LI",{});var awe=s(z1);mse=n(awe,"STRONG",{});var MYr=s(mse);P7o=r(MYr,"led"),MYr.forEach(t),$7o=r(awe," \u2014 "),rq=n(awe,"A",{href:!0});var EYr=s(rq);I7o=r(EYr,"LEDForConditionalGeneration"),EYr.forEach(t),q7o=r(awe," (LED model)"),awe.forEach(t),N7o=i(ie),Q1=n(ie,"LI",{});var nwe=s(Q1);gse=n(nwe,"STRONG",{});var CYr=s(gse);j7o=r(CYr,"m2m_100"),CYr.forEach(t),D7o=r(nwe," \u2014 "),tq=n(nwe,"A",{href:!0});var wYr=s(tq);G7o=r(wYr,"M2M100ForConditionalGeneration"),wYr.forEach(t),O7o=r(nwe," (M2M100 model)"),nwe.forEach(t),V7o=i(ie),W1=n(ie,"LI",{});var swe=s(W1);hse=n(swe,"STRONG",{});var AYr=s(hse);X7o=r(AYr,"marian"),AYr.forEach(t),z7o=r(swe," \u2014 "),aq=n(swe,"A",{href:!0});var yYr=s(aq);Q7o=r(yYr,"MarianMTModel"),yYr.forEach(t),W7o=r(swe," (Marian model)"),swe.forEach(t),H7o=i(ie),H1=n(ie,"LI",{});var lwe=s(H1);pse=n(lwe,"STRONG",{});var LYr=s(pse);U7o=r(LYr,"mbart"),LYr.forEach(t),J7o=r(lwe," \u2014 "),nq=n(lwe,"A",{href:!0});var xYr=s(nq);Y7o=r(xYr,"MBartForConditionalGeneration"),xYr.forEach(t),K7o=r(lwe," (mBART model)"),lwe.forEach(t),Z7o=i(ie),U1=n(ie,"LI",{});var iwe=s(U1);_se=n(iwe,"STRONG",{});var kYr=s(_se);eMo=r(kYr,"mt5"),kYr.forEach(t),oMo=r(iwe," \u2014 "),sq=n(iwe,"A",{href:!0});var SYr=s(sq);rMo=r(SYr,"MT5ForConditionalGeneration"),SYr.forEach(t),tMo=r(iwe," (mT5 model)"),iwe.forEach(t),aMo=i(ie),J1=n(ie,"LI",{});var dwe=s(J1);use=n(dwe,"STRONG",{});var RYr=s(use);nMo=r(RYr,"pegasus"),RYr.forEach(t),sMo=r(dwe," \u2014 "),lq=n(dwe,"A",{href:!0});var BYr=s(lq);lMo=r(BYr,"PegasusForConditionalGeneration"),BYr.forEach(t),iMo=r(dwe," (Pegasus model)"),dwe.forEach(t),dMo=i(ie),Y1=n(ie,"LI",{});var cwe=s(Y1);bse=n(cwe,"STRONG",{});var PYr=s(bse);cMo=r(PYr,"plbart"),PYr.forEach(t),fMo=r(cwe," \u2014 "),iq=n(cwe,"A",{href:!0});var $Yr=s(iq);mMo=r($Yr,"PLBartForConditionalGeneration"),$Yr.forEach(t),gMo=r(cwe," (PLBart model)"),cwe.forEach(t),hMo=i(ie),K1=n(ie,"LI",{});var fwe=s(K1);Fse=n(fwe,"STRONG",{});var IYr=s(Fse);pMo=r(IYr,"prophetnet"),IYr.forEach(t),_Mo=r(fwe," \u2014 "),dq=n(fwe,"A",{href:!0});var qYr=s(dq);uMo=r(qYr,"ProphetNetForConditionalGeneration"),qYr.forEach(t),bMo=r(fwe," (ProphetNet model)"),fwe.forEach(t),FMo=i(ie),Z1=n(ie,"LI",{});var mwe=s(Z1);vse=n(mwe,"STRONG",{});var NYr=s(vse);vMo=r(NYr,"t5"),NYr.forEach(t),TMo=r(mwe," \u2014 "),cq=n(mwe,"A",{href:!0});var jYr=s(cq);MMo=r(jYr,"T5ForConditionalGeneration"),jYr.forEach(t),EMo=r(mwe," (T5 model)"),mwe.forEach(t),CMo=i(ie),e4=n(ie,"LI",{});var gwe=s(e4);Tse=n(gwe,"STRONG",{});var DYr=s(Tse);wMo=r(DYr,"xlm-prophetnet"),DYr.forEach(t),AMo=r(gwe," \u2014 "),fq=n(gwe,"A",{href:!0});var GYr=s(fq);yMo=r(GYr,"XLMProphetNetForConditionalGeneration"),GYr.forEach(t),LMo=r(gwe," (XLMProphetNet model)"),gwe.forEach(t),ie.forEach(t),xMo=i(Xt),o4=n(Xt,"P",{});var hwe=s(o4);kMo=r(hwe,"The model is set in evaluation mode by default using "),Mse=n(hwe,"CODE",{});var OYr=s(Mse);SMo=r(OYr,"model.eval()"),OYr.forEach(t),RMo=r(hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(hwe,"CODE",{});var VYr=s(Ese);BMo=r(VYr,"model.train()"),VYr.forEach(t),hwe.forEach(t),PMo=i(Xt),Cse=n(Xt,"P",{});var XYr=s(Cse);$Mo=r(XYr,"Examples:"),XYr.forEach(t),IMo=i(Xt),m(k5.$$.fragment,Xt),Xt.forEach(t),el.forEach(t),cRe=i(c),fd=n(c,"H2",{class:!0});var FPe=s(fd);r4=n(FPe,"A",{id:!0,class:!0,href:!0});var zYr=s(r4);wse=n(zYr,"SPAN",{});var QYr=s(wse);m(S5.$$.fragment,QYr),QYr.forEach(t),zYr.forEach(t),qMo=i(FPe),Ase=n(FPe,"SPAN",{});var WYr=s(Ase);NMo=r(WYr,"AutoModelForSequenceClassification"),WYr.forEach(t),FPe.forEach(t),fRe=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(R5.$$.fragment,rl),jMo=i(rl),md=n(rl,"P",{});var lU=s(md);DMo=r(lU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mq=n(lU,"A",{href:!0});var HYr=s(mq);GMo=r(HYr,"from_pretrained()"),HYr.forEach(t),OMo=r(lU," class method or the "),gq=n(lU,"A",{href:!0});var UYr=s(gq);VMo=r(UYr,"from_config()"),UYr.forEach(t),XMo=r(lU,` class
method.`),lU.forEach(t),zMo=i(rl),B5=n(rl,"P",{});var vPe=s(B5);QMo=r(vPe,"This class cannot be instantiated directly using "),yse=n(vPe,"CODE",{});var JYr=s(yse);WMo=r(JYr,"__init__()"),JYr.forEach(t),HMo=r(vPe," (throws an error)."),vPe.forEach(t),UMo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(P5.$$.fragment,tl),JMo=i(tl),Lse=n(tl,"P",{});var YYr=s(Lse);YMo=r(YYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YYr.forEach(t),KMo=i(tl),gd=n(tl,"P",{});var iU=s(gd);ZMo=r(iU,`Note:
Loading a model from its configuration file does `),xse=n(iU,"STRONG",{});var KYr=s(xse);eEo=r(KYr,"not"),KYr.forEach(t),oEo=r(iU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hq=n(iU,"A",{href:!0});var ZYr=s(hq);rEo=r(ZYr,"from_pretrained()"),ZYr.forEach(t),tEo=r(iU," to load the model weights."),iU.forEach(t),aEo=i(tl),kse=n(tl,"P",{});var eKr=s(kse);nEo=r(eKr,"Examples:"),eKr.forEach(t),sEo=i(tl),m($5.$$.fragment,tl),tl.forEach(t),lEo=i(rl),Oe=n(rl,"DIV",{class:!0});var zt=s(Oe);m(I5.$$.fragment,zt),iEo=i(zt),Sse=n(zt,"P",{});var oKr=s(Sse);dEo=r(oKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oKr.forEach(t),cEo=i(zt),Ua=n(zt,"P",{});var wE=s(Ua);fEo=r(wE,"The model class to instantiate is selected based on the "),Rse=n(wE,"CODE",{});var rKr=s(Rse);mEo=r(rKr,"model_type"),rKr.forEach(t),gEo=r(wE,` property of the config object (either
passed as an argument or loaded from `),Bse=n(wE,"CODE",{});var tKr=s(Bse);hEo=r(tKr,"pretrained_model_name_or_path"),tKr.forEach(t),pEo=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pse=n(wE,"CODE",{});var aKr=s(Pse);_Eo=r(aKr,"pretrained_model_name_or_path"),aKr.forEach(t),uEo=r(wE,":"),wE.forEach(t),bEo=i(zt),y=n(zt,"UL",{});var L=s(y);t4=n(L,"LI",{});var pwe=s(t4);$se=n(pwe,"STRONG",{});var nKr=s($se);FEo=r(nKr,"albert"),nKr.forEach(t),vEo=r(pwe," \u2014 "),pq=n(pwe,"A",{href:!0});var sKr=s(pq);TEo=r(sKr,"AlbertForSequenceClassification"),sKr.forEach(t),MEo=r(pwe," (ALBERT model)"),pwe.forEach(t),EEo=i(L),a4=n(L,"LI",{});var _we=s(a4);Ise=n(_we,"STRONG",{});var lKr=s(Ise);CEo=r(lKr,"bart"),lKr.forEach(t),wEo=r(_we," \u2014 "),_q=n(_we,"A",{href:!0});var iKr=s(_q);AEo=r(iKr,"BartForSequenceClassification"),iKr.forEach(t),yEo=r(_we," (BART model)"),_we.forEach(t),LEo=i(L),n4=n(L,"LI",{});var uwe=s(n4);qse=n(uwe,"STRONG",{});var dKr=s(qse);xEo=r(dKr,"bert"),dKr.forEach(t),kEo=r(uwe," \u2014 "),uq=n(uwe,"A",{href:!0});var cKr=s(uq);SEo=r(cKr,"BertForSequenceClassification"),cKr.forEach(t),REo=r(uwe," (BERT model)"),uwe.forEach(t),BEo=i(L),s4=n(L,"LI",{});var bwe=s(s4);Nse=n(bwe,"STRONG",{});var fKr=s(Nse);PEo=r(fKr,"big_bird"),fKr.forEach(t),$Eo=r(bwe," \u2014 "),bq=n(bwe,"A",{href:!0});var mKr=s(bq);IEo=r(mKr,"BigBirdForSequenceClassification"),mKr.forEach(t),qEo=r(bwe," (BigBird model)"),bwe.forEach(t),NEo=i(L),l4=n(L,"LI",{});var Fwe=s(l4);jse=n(Fwe,"STRONG",{});var gKr=s(jse);jEo=r(gKr,"bigbird_pegasus"),gKr.forEach(t),DEo=r(Fwe," \u2014 "),Fq=n(Fwe,"A",{href:!0});var hKr=s(Fq);GEo=r(hKr,"BigBirdPegasusForSequenceClassification"),hKr.forEach(t),OEo=r(Fwe," (BigBirdPegasus model)"),Fwe.forEach(t),VEo=i(L),i4=n(L,"LI",{});var vwe=s(i4);Dse=n(vwe,"STRONG",{});var pKr=s(Dse);XEo=r(pKr,"camembert"),pKr.forEach(t),zEo=r(vwe," \u2014 "),vq=n(vwe,"A",{href:!0});var _Kr=s(vq);QEo=r(_Kr,"CamembertForSequenceClassification"),_Kr.forEach(t),WEo=r(vwe," (CamemBERT model)"),vwe.forEach(t),HEo=i(L),d4=n(L,"LI",{});var Twe=s(d4);Gse=n(Twe,"STRONG",{});var uKr=s(Gse);UEo=r(uKr,"canine"),uKr.forEach(t),JEo=r(Twe," \u2014 "),Tq=n(Twe,"A",{href:!0});var bKr=s(Tq);YEo=r(bKr,"CanineForSequenceClassification"),bKr.forEach(t),KEo=r(Twe," (Canine model)"),Twe.forEach(t),ZEo=i(L),c4=n(L,"LI",{});var Mwe=s(c4);Ose=n(Mwe,"STRONG",{});var FKr=s(Ose);eCo=r(FKr,"convbert"),FKr.forEach(t),oCo=r(Mwe," \u2014 "),Mq=n(Mwe,"A",{href:!0});var vKr=s(Mq);rCo=r(vKr,"ConvBertForSequenceClassification"),vKr.forEach(t),tCo=r(Mwe," (ConvBERT model)"),Mwe.forEach(t),aCo=i(L),f4=n(L,"LI",{});var Ewe=s(f4);Vse=n(Ewe,"STRONG",{});var TKr=s(Vse);nCo=r(TKr,"ctrl"),TKr.forEach(t),sCo=r(Ewe," \u2014 "),Eq=n(Ewe,"A",{href:!0});var MKr=s(Eq);lCo=r(MKr,"CTRLForSequenceClassification"),MKr.forEach(t),iCo=r(Ewe," (CTRL model)"),Ewe.forEach(t),dCo=i(L),m4=n(L,"LI",{});var Cwe=s(m4);Xse=n(Cwe,"STRONG",{});var EKr=s(Xse);cCo=r(EKr,"data2vec-text"),EKr.forEach(t),fCo=r(Cwe," \u2014 "),Cq=n(Cwe,"A",{href:!0});var CKr=s(Cq);mCo=r(CKr,"Data2VecTextForSequenceClassification"),CKr.forEach(t),gCo=r(Cwe," (Data2VecText model)"),Cwe.forEach(t),hCo=i(L),g4=n(L,"LI",{});var wwe=s(g4);zse=n(wwe,"STRONG",{});var wKr=s(zse);pCo=r(wKr,"deberta"),wKr.forEach(t),_Co=r(wwe," \u2014 "),wq=n(wwe,"A",{href:!0});var AKr=s(wq);uCo=r(AKr,"DebertaForSequenceClassification"),AKr.forEach(t),bCo=r(wwe," (DeBERTa model)"),wwe.forEach(t),FCo=i(L),h4=n(L,"LI",{});var Awe=s(h4);Qse=n(Awe,"STRONG",{});var yKr=s(Qse);vCo=r(yKr,"deberta-v2"),yKr.forEach(t),TCo=r(Awe," \u2014 "),Aq=n(Awe,"A",{href:!0});var LKr=s(Aq);MCo=r(LKr,"DebertaV2ForSequenceClassification"),LKr.forEach(t),ECo=r(Awe," (DeBERTa-v2 model)"),Awe.forEach(t),CCo=i(L),p4=n(L,"LI",{});var ywe=s(p4);Wse=n(ywe,"STRONG",{});var xKr=s(Wse);wCo=r(xKr,"distilbert"),xKr.forEach(t),ACo=r(ywe," \u2014 "),yq=n(ywe,"A",{href:!0});var kKr=s(yq);yCo=r(kKr,"DistilBertForSequenceClassification"),kKr.forEach(t),LCo=r(ywe," (DistilBERT model)"),ywe.forEach(t),xCo=i(L),_4=n(L,"LI",{});var Lwe=s(_4);Hse=n(Lwe,"STRONG",{});var SKr=s(Hse);kCo=r(SKr,"electra"),SKr.forEach(t),SCo=r(Lwe," \u2014 "),Lq=n(Lwe,"A",{href:!0});var RKr=s(Lq);RCo=r(RKr,"ElectraForSequenceClassification"),RKr.forEach(t),BCo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),PCo=i(L),u4=n(L,"LI",{});var xwe=s(u4);Use=n(xwe,"STRONG",{});var BKr=s(Use);$Co=r(BKr,"flaubert"),BKr.forEach(t),ICo=r(xwe," \u2014 "),xq=n(xwe,"A",{href:!0});var PKr=s(xq);qCo=r(PKr,"FlaubertForSequenceClassification"),PKr.forEach(t),NCo=r(xwe," (FlauBERT model)"),xwe.forEach(t),jCo=i(L),b4=n(L,"LI",{});var kwe=s(b4);Jse=n(kwe,"STRONG",{});var $Kr=s(Jse);DCo=r($Kr,"fnet"),$Kr.forEach(t),GCo=r(kwe," \u2014 "),kq=n(kwe,"A",{href:!0});var IKr=s(kq);OCo=r(IKr,"FNetForSequenceClassification"),IKr.forEach(t),VCo=r(kwe," (FNet model)"),kwe.forEach(t),XCo=i(L),F4=n(L,"LI",{});var Swe=s(F4);Yse=n(Swe,"STRONG",{});var qKr=s(Yse);zCo=r(qKr,"funnel"),qKr.forEach(t),QCo=r(Swe," \u2014 "),Sq=n(Swe,"A",{href:!0});var NKr=s(Sq);WCo=r(NKr,"FunnelForSequenceClassification"),NKr.forEach(t),HCo=r(Swe," (Funnel Transformer model)"),Swe.forEach(t),UCo=i(L),v4=n(L,"LI",{});var Rwe=s(v4);Kse=n(Rwe,"STRONG",{});var jKr=s(Kse);JCo=r(jKr,"gpt2"),jKr.forEach(t),YCo=r(Rwe," \u2014 "),Rq=n(Rwe,"A",{href:!0});var DKr=s(Rq);KCo=r(DKr,"GPT2ForSequenceClassification"),DKr.forEach(t),ZCo=r(Rwe," (OpenAI GPT-2 model)"),Rwe.forEach(t),e5o=i(L),T4=n(L,"LI",{});var Bwe=s(T4);Zse=n(Bwe,"STRONG",{});var GKr=s(Zse);o5o=r(GKr,"gpt_neo"),GKr.forEach(t),r5o=r(Bwe," \u2014 "),Bq=n(Bwe,"A",{href:!0});var OKr=s(Bq);t5o=r(OKr,"GPTNeoForSequenceClassification"),OKr.forEach(t),a5o=r(Bwe," (GPT Neo model)"),Bwe.forEach(t),n5o=i(L),M4=n(L,"LI",{});var Pwe=s(M4);ele=n(Pwe,"STRONG",{});var VKr=s(ele);s5o=r(VKr,"gptj"),VKr.forEach(t),l5o=r(Pwe," \u2014 "),Pq=n(Pwe,"A",{href:!0});var XKr=s(Pq);i5o=r(XKr,"GPTJForSequenceClassification"),XKr.forEach(t),d5o=r(Pwe," (GPT-J model)"),Pwe.forEach(t),c5o=i(L),E4=n(L,"LI",{});var $we=s(E4);ole=n($we,"STRONG",{});var zKr=s(ole);f5o=r(zKr,"ibert"),zKr.forEach(t),m5o=r($we," \u2014 "),$q=n($we,"A",{href:!0});var QKr=s($q);g5o=r(QKr,"IBertForSequenceClassification"),QKr.forEach(t),h5o=r($we," (I-BERT model)"),$we.forEach(t),p5o=i(L),C4=n(L,"LI",{});var Iwe=s(C4);rle=n(Iwe,"STRONG",{});var WKr=s(rle);_5o=r(WKr,"layoutlm"),WKr.forEach(t),u5o=r(Iwe," \u2014 "),Iq=n(Iwe,"A",{href:!0});var HKr=s(Iq);b5o=r(HKr,"LayoutLMForSequenceClassification"),HKr.forEach(t),F5o=r(Iwe," (LayoutLM model)"),Iwe.forEach(t),v5o=i(L),w4=n(L,"LI",{});var qwe=s(w4);tle=n(qwe,"STRONG",{});var UKr=s(tle);T5o=r(UKr,"layoutlmv2"),UKr.forEach(t),M5o=r(qwe," \u2014 "),qq=n(qwe,"A",{href:!0});var JKr=s(qq);E5o=r(JKr,"LayoutLMv2ForSequenceClassification"),JKr.forEach(t),C5o=r(qwe," (LayoutLMv2 model)"),qwe.forEach(t),w5o=i(L),A4=n(L,"LI",{});var Nwe=s(A4);ale=n(Nwe,"STRONG",{});var YKr=s(ale);A5o=r(YKr,"led"),YKr.forEach(t),y5o=r(Nwe," \u2014 "),Nq=n(Nwe,"A",{href:!0});var KKr=s(Nq);L5o=r(KKr,"LEDForSequenceClassification"),KKr.forEach(t),x5o=r(Nwe," (LED model)"),Nwe.forEach(t),k5o=i(L),y4=n(L,"LI",{});var jwe=s(y4);nle=n(jwe,"STRONG",{});var ZKr=s(nle);S5o=r(ZKr,"longformer"),ZKr.forEach(t),R5o=r(jwe," \u2014 "),jq=n(jwe,"A",{href:!0});var eZr=s(jq);B5o=r(eZr,"LongformerForSequenceClassification"),eZr.forEach(t),P5o=r(jwe," (Longformer model)"),jwe.forEach(t),$5o=i(L),L4=n(L,"LI",{});var Dwe=s(L4);sle=n(Dwe,"STRONG",{});var oZr=s(sle);I5o=r(oZr,"mbart"),oZr.forEach(t),q5o=r(Dwe," \u2014 "),Dq=n(Dwe,"A",{href:!0});var rZr=s(Dq);N5o=r(rZr,"MBartForSequenceClassification"),rZr.forEach(t),j5o=r(Dwe," (mBART model)"),Dwe.forEach(t),D5o=i(L),x4=n(L,"LI",{});var Gwe=s(x4);lle=n(Gwe,"STRONG",{});var tZr=s(lle);G5o=r(tZr,"megatron-bert"),tZr.forEach(t),O5o=r(Gwe," \u2014 "),Gq=n(Gwe,"A",{href:!0});var aZr=s(Gq);V5o=r(aZr,"MegatronBertForSequenceClassification"),aZr.forEach(t),X5o=r(Gwe," (MegatronBert model)"),Gwe.forEach(t),z5o=i(L),k4=n(L,"LI",{});var Owe=s(k4);ile=n(Owe,"STRONG",{});var nZr=s(ile);Q5o=r(nZr,"mobilebert"),nZr.forEach(t),W5o=r(Owe," \u2014 "),Oq=n(Owe,"A",{href:!0});var sZr=s(Oq);H5o=r(sZr,"MobileBertForSequenceClassification"),sZr.forEach(t),U5o=r(Owe," (MobileBERT model)"),Owe.forEach(t),J5o=i(L),S4=n(L,"LI",{});var Vwe=s(S4);dle=n(Vwe,"STRONG",{});var lZr=s(dle);Y5o=r(lZr,"mpnet"),lZr.forEach(t),K5o=r(Vwe," \u2014 "),Vq=n(Vwe,"A",{href:!0});var iZr=s(Vq);Z5o=r(iZr,"MPNetForSequenceClassification"),iZr.forEach(t),ewo=r(Vwe," (MPNet model)"),Vwe.forEach(t),owo=i(L),R4=n(L,"LI",{});var Xwe=s(R4);cle=n(Xwe,"STRONG",{});var dZr=s(cle);rwo=r(dZr,"nystromformer"),dZr.forEach(t),two=r(Xwe," \u2014 "),Xq=n(Xwe,"A",{href:!0});var cZr=s(Xq);awo=r(cZr,"NystromformerForSequenceClassification"),cZr.forEach(t),nwo=r(Xwe," (Nystromformer model)"),Xwe.forEach(t),swo=i(L),B4=n(L,"LI",{});var zwe=s(B4);fle=n(zwe,"STRONG",{});var fZr=s(fle);lwo=r(fZr,"openai-gpt"),fZr.forEach(t),iwo=r(zwe," \u2014 "),zq=n(zwe,"A",{href:!0});var mZr=s(zq);dwo=r(mZr,"OpenAIGPTForSequenceClassification"),mZr.forEach(t),cwo=r(zwe," (OpenAI GPT model)"),zwe.forEach(t),fwo=i(L),P4=n(L,"LI",{});var Qwe=s(P4);mle=n(Qwe,"STRONG",{});var gZr=s(mle);mwo=r(gZr,"perceiver"),gZr.forEach(t),gwo=r(Qwe," \u2014 "),Qq=n(Qwe,"A",{href:!0});var hZr=s(Qq);hwo=r(hZr,"PerceiverForSequenceClassification"),hZr.forEach(t),pwo=r(Qwe," (Perceiver model)"),Qwe.forEach(t),_wo=i(L),$4=n(L,"LI",{});var Wwe=s($4);gle=n(Wwe,"STRONG",{});var pZr=s(gle);uwo=r(pZr,"plbart"),pZr.forEach(t),bwo=r(Wwe," \u2014 "),Wq=n(Wwe,"A",{href:!0});var _Zr=s(Wq);Fwo=r(_Zr,"PLBartForSequenceClassification"),_Zr.forEach(t),vwo=r(Wwe," (PLBart model)"),Wwe.forEach(t),Two=i(L),I4=n(L,"LI",{});var Hwe=s(I4);hle=n(Hwe,"STRONG",{});var uZr=s(hle);Mwo=r(uZr,"qdqbert"),uZr.forEach(t),Ewo=r(Hwe," \u2014 "),Hq=n(Hwe,"A",{href:!0});var bZr=s(Hq);Cwo=r(bZr,"QDQBertForSequenceClassification"),bZr.forEach(t),wwo=r(Hwe," (QDQBert model)"),Hwe.forEach(t),Awo=i(L),q4=n(L,"LI",{});var Uwe=s(q4);ple=n(Uwe,"STRONG",{});var FZr=s(ple);ywo=r(FZr,"reformer"),FZr.forEach(t),Lwo=r(Uwe," \u2014 "),Uq=n(Uwe,"A",{href:!0});var vZr=s(Uq);xwo=r(vZr,"ReformerForSequenceClassification"),vZr.forEach(t),kwo=r(Uwe," (Reformer model)"),Uwe.forEach(t),Swo=i(L),N4=n(L,"LI",{});var Jwe=s(N4);_le=n(Jwe,"STRONG",{});var TZr=s(_le);Rwo=r(TZr,"rembert"),TZr.forEach(t),Bwo=r(Jwe," \u2014 "),Jq=n(Jwe,"A",{href:!0});var MZr=s(Jq);Pwo=r(MZr,"RemBertForSequenceClassification"),MZr.forEach(t),$wo=r(Jwe," (RemBERT model)"),Jwe.forEach(t),Iwo=i(L),j4=n(L,"LI",{});var Ywe=s(j4);ule=n(Ywe,"STRONG",{});var EZr=s(ule);qwo=r(EZr,"roberta"),EZr.forEach(t),Nwo=r(Ywe," \u2014 "),Yq=n(Ywe,"A",{href:!0});var CZr=s(Yq);jwo=r(CZr,"RobertaForSequenceClassification"),CZr.forEach(t),Dwo=r(Ywe," (RoBERTa model)"),Ywe.forEach(t),Gwo=i(L),D4=n(L,"LI",{});var Kwe=s(D4);ble=n(Kwe,"STRONG",{});var wZr=s(ble);Owo=r(wZr,"roformer"),wZr.forEach(t),Vwo=r(Kwe," \u2014 "),Kq=n(Kwe,"A",{href:!0});var AZr=s(Kq);Xwo=r(AZr,"RoFormerForSequenceClassification"),AZr.forEach(t),zwo=r(Kwe," (RoFormer model)"),Kwe.forEach(t),Qwo=i(L),G4=n(L,"LI",{});var Zwe=s(G4);Fle=n(Zwe,"STRONG",{});var yZr=s(Fle);Wwo=r(yZr,"squeezebert"),yZr.forEach(t),Hwo=r(Zwe," \u2014 "),Zq=n(Zwe,"A",{href:!0});var LZr=s(Zq);Uwo=r(LZr,"SqueezeBertForSequenceClassification"),LZr.forEach(t),Jwo=r(Zwe," (SqueezeBERT model)"),Zwe.forEach(t),Ywo=i(L),O4=n(L,"LI",{});var eAe=s(O4);vle=n(eAe,"STRONG",{});var xZr=s(vle);Kwo=r(xZr,"tapas"),xZr.forEach(t),Zwo=r(eAe," \u2014 "),eN=n(eAe,"A",{href:!0});var kZr=s(eN);eAo=r(kZr,"TapasForSequenceClassification"),kZr.forEach(t),oAo=r(eAe," (TAPAS model)"),eAe.forEach(t),rAo=i(L),V4=n(L,"LI",{});var oAe=s(V4);Tle=n(oAe,"STRONG",{});var SZr=s(Tle);tAo=r(SZr,"transfo-xl"),SZr.forEach(t),aAo=r(oAe," \u2014 "),oN=n(oAe,"A",{href:!0});var RZr=s(oN);nAo=r(RZr,"TransfoXLForSequenceClassification"),RZr.forEach(t),sAo=r(oAe," (Transformer-XL model)"),oAe.forEach(t),lAo=i(L),X4=n(L,"LI",{});var rAe=s(X4);Mle=n(rAe,"STRONG",{});var BZr=s(Mle);iAo=r(BZr,"xlm"),BZr.forEach(t),dAo=r(rAe," \u2014 "),rN=n(rAe,"A",{href:!0});var PZr=s(rN);cAo=r(PZr,"XLMForSequenceClassification"),PZr.forEach(t),fAo=r(rAe," (XLM model)"),rAe.forEach(t),mAo=i(L),z4=n(L,"LI",{});var tAe=s(z4);Ele=n(tAe,"STRONG",{});var $Zr=s(Ele);gAo=r($Zr,"xlm-roberta"),$Zr.forEach(t),hAo=r(tAe," \u2014 "),tN=n(tAe,"A",{href:!0});var IZr=s(tN);pAo=r(IZr,"XLMRobertaForSequenceClassification"),IZr.forEach(t),_Ao=r(tAe," (XLM-RoBERTa model)"),tAe.forEach(t),uAo=i(L),Q4=n(L,"LI",{});var aAe=s(Q4);Cle=n(aAe,"STRONG",{});var qZr=s(Cle);bAo=r(qZr,"xlm-roberta-xl"),qZr.forEach(t),FAo=r(aAe," \u2014 "),aN=n(aAe,"A",{href:!0});var NZr=s(aN);vAo=r(NZr,"XLMRobertaXLForSequenceClassification"),NZr.forEach(t),TAo=r(aAe," (XLM-RoBERTa-XL model)"),aAe.forEach(t),MAo=i(L),W4=n(L,"LI",{});var nAe=s(W4);wle=n(nAe,"STRONG",{});var jZr=s(wle);EAo=r(jZr,"xlnet"),jZr.forEach(t),CAo=r(nAe," \u2014 "),nN=n(nAe,"A",{href:!0});var DZr=s(nN);wAo=r(DZr,"XLNetForSequenceClassification"),DZr.forEach(t),AAo=r(nAe," (XLNet model)"),nAe.forEach(t),yAo=i(L),H4=n(L,"LI",{});var sAe=s(H4);Ale=n(sAe,"STRONG",{});var GZr=s(Ale);LAo=r(GZr,"yoso"),GZr.forEach(t),xAo=r(sAe," \u2014 "),sN=n(sAe,"A",{href:!0});var OZr=s(sN);kAo=r(OZr,"YosoForSequenceClassification"),OZr.forEach(t),SAo=r(sAe," (YOSO model)"),sAe.forEach(t),L.forEach(t),RAo=i(zt),U4=n(zt,"P",{});var lAe=s(U4);BAo=r(lAe,"The model is set in evaluation mode by default using "),yle=n(lAe,"CODE",{});var VZr=s(yle);PAo=r(VZr,"model.eval()"),VZr.forEach(t),$Ao=r(lAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lle=n(lAe,"CODE",{});var XZr=s(Lle);IAo=r(XZr,"model.train()"),XZr.forEach(t),lAe.forEach(t),qAo=i(zt),xle=n(zt,"P",{});var zZr=s(xle);NAo=r(zZr,"Examples:"),zZr.forEach(t),jAo=i(zt),m(q5.$$.fragment,zt),zt.forEach(t),rl.forEach(t),mRe=i(c),hd=n(c,"H2",{class:!0});var TPe=s(hd);J4=n(TPe,"A",{id:!0,class:!0,href:!0});var QZr=s(J4);kle=n(QZr,"SPAN",{});var WZr=s(kle);m(N5.$$.fragment,WZr),WZr.forEach(t),QZr.forEach(t),DAo=i(TPe),Sle=n(TPe,"SPAN",{});var HZr=s(Sle);GAo=r(HZr,"AutoModelForMultipleChoice"),HZr.forEach(t),TPe.forEach(t),gRe=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(j5.$$.fragment,al),OAo=i(al),pd=n(al,"P",{});var dU=s(pd);VAo=r(dU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),lN=n(dU,"A",{href:!0});var UZr=s(lN);XAo=r(UZr,"from_pretrained()"),UZr.forEach(t),zAo=r(dU," class method or the "),iN=n(dU,"A",{href:!0});var JZr=s(iN);QAo=r(JZr,"from_config()"),JZr.forEach(t),WAo=r(dU,` class
method.`),dU.forEach(t),HAo=i(al),D5=n(al,"P",{});var MPe=s(D5);UAo=r(MPe,"This class cannot be instantiated directly using "),Rle=n(MPe,"CODE",{});var YZr=s(Rle);JAo=r(YZr,"__init__()"),YZr.forEach(t),YAo=r(MPe," (throws an error)."),MPe.forEach(t),KAo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(G5.$$.fragment,nl),ZAo=i(nl),Ble=n(nl,"P",{});var KZr=s(Ble);e0o=r(KZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KZr.forEach(t),o0o=i(nl),_d=n(nl,"P",{});var cU=s(_d);r0o=r(cU,`Note:
Loading a model from its configuration file does `),Ple=n(cU,"STRONG",{});var ZZr=s(Ple);t0o=r(ZZr,"not"),ZZr.forEach(t),a0o=r(cU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dN=n(cU,"A",{href:!0});var eet=s(dN);n0o=r(eet,"from_pretrained()"),eet.forEach(t),s0o=r(cU," to load the model weights."),cU.forEach(t),l0o=i(nl),$le=n(nl,"P",{});var oet=s($le);i0o=r(oet,"Examples:"),oet.forEach(t),d0o=i(nl),m(O5.$$.fragment,nl),nl.forEach(t),c0o=i(al),Ve=n(al,"DIV",{class:!0});var Qt=s(Ve);m(V5.$$.fragment,Qt),f0o=i(Qt),Ile=n(Qt,"P",{});var ret=s(Ile);m0o=r(ret,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ret.forEach(t),g0o=i(Qt),Ja=n(Qt,"P",{});var AE=s(Ja);h0o=r(AE,"The model class to instantiate is selected based on the "),qle=n(AE,"CODE",{});var tet=s(qle);p0o=r(tet,"model_type"),tet.forEach(t),_0o=r(AE,` property of the config object (either
passed as an argument or loaded from `),Nle=n(AE,"CODE",{});var aet=s(Nle);u0o=r(aet,"pretrained_model_name_or_path"),aet.forEach(t),b0o=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jle=n(AE,"CODE",{});var net=s(jle);F0o=r(net,"pretrained_model_name_or_path"),net.forEach(t),v0o=r(AE,":"),AE.forEach(t),T0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);Y4=n(O,"LI",{});var iAe=s(Y4);Dle=n(iAe,"STRONG",{});var set=s(Dle);M0o=r(set,"albert"),set.forEach(t),E0o=r(iAe," \u2014 "),cN=n(iAe,"A",{href:!0});var iet=s(cN);C0o=r(iet,"AlbertForMultipleChoice"),iet.forEach(t),w0o=r(iAe," (ALBERT model)"),iAe.forEach(t),A0o=i(O),K4=n(O,"LI",{});var dAe=s(K4);Gle=n(dAe,"STRONG",{});var det=s(Gle);y0o=r(det,"bert"),det.forEach(t),L0o=r(dAe," \u2014 "),fN=n(dAe,"A",{href:!0});var cet=s(fN);x0o=r(cet,"BertForMultipleChoice"),cet.forEach(t),k0o=r(dAe," (BERT model)"),dAe.forEach(t),S0o=i(O),Z4=n(O,"LI",{});var cAe=s(Z4);Ole=n(cAe,"STRONG",{});var fet=s(Ole);R0o=r(fet,"big_bird"),fet.forEach(t),B0o=r(cAe," \u2014 "),mN=n(cAe,"A",{href:!0});var met=s(mN);P0o=r(met,"BigBirdForMultipleChoice"),met.forEach(t),$0o=r(cAe," (BigBird model)"),cAe.forEach(t),I0o=i(O),eb=n(O,"LI",{});var fAe=s(eb);Vle=n(fAe,"STRONG",{});var get=s(Vle);q0o=r(get,"camembert"),get.forEach(t),N0o=r(fAe," \u2014 "),gN=n(fAe,"A",{href:!0});var het=s(gN);j0o=r(het,"CamembertForMultipleChoice"),het.forEach(t),D0o=r(fAe," (CamemBERT model)"),fAe.forEach(t),G0o=i(O),ob=n(O,"LI",{});var mAe=s(ob);Xle=n(mAe,"STRONG",{});var pet=s(Xle);O0o=r(pet,"canine"),pet.forEach(t),V0o=r(mAe," \u2014 "),hN=n(mAe,"A",{href:!0});var _et=s(hN);X0o=r(_et,"CanineForMultipleChoice"),_et.forEach(t),z0o=r(mAe," (Canine model)"),mAe.forEach(t),Q0o=i(O),rb=n(O,"LI",{});var gAe=s(rb);zle=n(gAe,"STRONG",{});var uet=s(zle);W0o=r(uet,"convbert"),uet.forEach(t),H0o=r(gAe," \u2014 "),pN=n(gAe,"A",{href:!0});var bet=s(pN);U0o=r(bet,"ConvBertForMultipleChoice"),bet.forEach(t),J0o=r(gAe," (ConvBERT model)"),gAe.forEach(t),Y0o=i(O),tb=n(O,"LI",{});var hAe=s(tb);Qle=n(hAe,"STRONG",{});var Fet=s(Qle);K0o=r(Fet,"data2vec-text"),Fet.forEach(t),Z0o=r(hAe," \u2014 "),_N=n(hAe,"A",{href:!0});var vet=s(_N);eyo=r(vet,"Data2VecTextForMultipleChoice"),vet.forEach(t),oyo=r(hAe," (Data2VecText model)"),hAe.forEach(t),ryo=i(O),ab=n(O,"LI",{});var pAe=s(ab);Wle=n(pAe,"STRONG",{});var Tet=s(Wle);tyo=r(Tet,"distilbert"),Tet.forEach(t),ayo=r(pAe," \u2014 "),uN=n(pAe,"A",{href:!0});var Met=s(uN);nyo=r(Met,"DistilBertForMultipleChoice"),Met.forEach(t),syo=r(pAe," (DistilBERT model)"),pAe.forEach(t),lyo=i(O),nb=n(O,"LI",{});var _Ae=s(nb);Hle=n(_Ae,"STRONG",{});var Eet=s(Hle);iyo=r(Eet,"electra"),Eet.forEach(t),dyo=r(_Ae," \u2014 "),bN=n(_Ae,"A",{href:!0});var Cet=s(bN);cyo=r(Cet,"ElectraForMultipleChoice"),Cet.forEach(t),fyo=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),myo=i(O),sb=n(O,"LI",{});var uAe=s(sb);Ule=n(uAe,"STRONG",{});var wet=s(Ule);gyo=r(wet,"flaubert"),wet.forEach(t),hyo=r(uAe," \u2014 "),FN=n(uAe,"A",{href:!0});var Aet=s(FN);pyo=r(Aet,"FlaubertForMultipleChoice"),Aet.forEach(t),_yo=r(uAe," (FlauBERT model)"),uAe.forEach(t),uyo=i(O),lb=n(O,"LI",{});var bAe=s(lb);Jle=n(bAe,"STRONG",{});var yet=s(Jle);byo=r(yet,"fnet"),yet.forEach(t),Fyo=r(bAe," \u2014 "),vN=n(bAe,"A",{href:!0});var Let=s(vN);vyo=r(Let,"FNetForMultipleChoice"),Let.forEach(t),Tyo=r(bAe," (FNet model)"),bAe.forEach(t),Myo=i(O),ib=n(O,"LI",{});var FAe=s(ib);Yle=n(FAe,"STRONG",{});var xet=s(Yle);Eyo=r(xet,"funnel"),xet.forEach(t),Cyo=r(FAe," \u2014 "),TN=n(FAe,"A",{href:!0});var ket=s(TN);wyo=r(ket,"FunnelForMultipleChoice"),ket.forEach(t),Ayo=r(FAe," (Funnel Transformer model)"),FAe.forEach(t),yyo=i(O),db=n(O,"LI",{});var vAe=s(db);Kle=n(vAe,"STRONG",{});var Set=s(Kle);Lyo=r(Set,"ibert"),Set.forEach(t),xyo=r(vAe," \u2014 "),MN=n(vAe,"A",{href:!0});var Ret=s(MN);kyo=r(Ret,"IBertForMultipleChoice"),Ret.forEach(t),Syo=r(vAe," (I-BERT model)"),vAe.forEach(t),Ryo=i(O),cb=n(O,"LI",{});var TAe=s(cb);Zle=n(TAe,"STRONG",{});var Bet=s(Zle);Byo=r(Bet,"longformer"),Bet.forEach(t),Pyo=r(TAe," \u2014 "),EN=n(TAe,"A",{href:!0});var Pet=s(EN);$yo=r(Pet,"LongformerForMultipleChoice"),Pet.forEach(t),Iyo=r(TAe," (Longformer model)"),TAe.forEach(t),qyo=i(O),fb=n(O,"LI",{});var MAe=s(fb);eie=n(MAe,"STRONG",{});var $et=s(eie);Nyo=r($et,"megatron-bert"),$et.forEach(t),jyo=r(MAe," \u2014 "),CN=n(MAe,"A",{href:!0});var Iet=s(CN);Dyo=r(Iet,"MegatronBertForMultipleChoice"),Iet.forEach(t),Gyo=r(MAe," (MegatronBert model)"),MAe.forEach(t),Oyo=i(O),mb=n(O,"LI",{});var EAe=s(mb);oie=n(EAe,"STRONG",{});var qet=s(oie);Vyo=r(qet,"mobilebert"),qet.forEach(t),Xyo=r(EAe," \u2014 "),wN=n(EAe,"A",{href:!0});var Net=s(wN);zyo=r(Net,"MobileBertForMultipleChoice"),Net.forEach(t),Qyo=r(EAe," (MobileBERT model)"),EAe.forEach(t),Wyo=i(O),gb=n(O,"LI",{});var CAe=s(gb);rie=n(CAe,"STRONG",{});var jet=s(rie);Hyo=r(jet,"mpnet"),jet.forEach(t),Uyo=r(CAe," \u2014 "),AN=n(CAe,"A",{href:!0});var Det=s(AN);Jyo=r(Det,"MPNetForMultipleChoice"),Det.forEach(t),Yyo=r(CAe," (MPNet model)"),CAe.forEach(t),Kyo=i(O),hb=n(O,"LI",{});var wAe=s(hb);tie=n(wAe,"STRONG",{});var Get=s(tie);Zyo=r(Get,"nystromformer"),Get.forEach(t),eLo=r(wAe," \u2014 "),yN=n(wAe,"A",{href:!0});var Oet=s(yN);oLo=r(Oet,"NystromformerForMultipleChoice"),Oet.forEach(t),rLo=r(wAe," (Nystromformer model)"),wAe.forEach(t),tLo=i(O),pb=n(O,"LI",{});var AAe=s(pb);aie=n(AAe,"STRONG",{});var Vet=s(aie);aLo=r(Vet,"qdqbert"),Vet.forEach(t),nLo=r(AAe," \u2014 "),LN=n(AAe,"A",{href:!0});var Xet=s(LN);sLo=r(Xet,"QDQBertForMultipleChoice"),Xet.forEach(t),lLo=r(AAe," (QDQBert model)"),AAe.forEach(t),iLo=i(O),_b=n(O,"LI",{});var yAe=s(_b);nie=n(yAe,"STRONG",{});var zet=s(nie);dLo=r(zet,"rembert"),zet.forEach(t),cLo=r(yAe," \u2014 "),xN=n(yAe,"A",{href:!0});var Qet=s(xN);fLo=r(Qet,"RemBertForMultipleChoice"),Qet.forEach(t),mLo=r(yAe," (RemBERT model)"),yAe.forEach(t),gLo=i(O),ub=n(O,"LI",{});var LAe=s(ub);sie=n(LAe,"STRONG",{});var Wet=s(sie);hLo=r(Wet,"roberta"),Wet.forEach(t),pLo=r(LAe," \u2014 "),kN=n(LAe,"A",{href:!0});var Het=s(kN);_Lo=r(Het,"RobertaForMultipleChoice"),Het.forEach(t),uLo=r(LAe," (RoBERTa model)"),LAe.forEach(t),bLo=i(O),bb=n(O,"LI",{});var xAe=s(bb);lie=n(xAe,"STRONG",{});var Uet=s(lie);FLo=r(Uet,"roformer"),Uet.forEach(t),vLo=r(xAe," \u2014 "),SN=n(xAe,"A",{href:!0});var Jet=s(SN);TLo=r(Jet,"RoFormerForMultipleChoice"),Jet.forEach(t),MLo=r(xAe," (RoFormer model)"),xAe.forEach(t),ELo=i(O),Fb=n(O,"LI",{});var kAe=s(Fb);iie=n(kAe,"STRONG",{});var Yet=s(iie);CLo=r(Yet,"squeezebert"),Yet.forEach(t),wLo=r(kAe," \u2014 "),RN=n(kAe,"A",{href:!0});var Ket=s(RN);ALo=r(Ket,"SqueezeBertForMultipleChoice"),Ket.forEach(t),yLo=r(kAe," (SqueezeBERT model)"),kAe.forEach(t),LLo=i(O),vb=n(O,"LI",{});var SAe=s(vb);die=n(SAe,"STRONG",{});var Zet=s(die);xLo=r(Zet,"xlm"),Zet.forEach(t),kLo=r(SAe," \u2014 "),BN=n(SAe,"A",{href:!0});var eot=s(BN);SLo=r(eot,"XLMForMultipleChoice"),eot.forEach(t),RLo=r(SAe," (XLM model)"),SAe.forEach(t),BLo=i(O),Tb=n(O,"LI",{});var RAe=s(Tb);cie=n(RAe,"STRONG",{});var oot=s(cie);PLo=r(oot,"xlm-roberta"),oot.forEach(t),$Lo=r(RAe," \u2014 "),PN=n(RAe,"A",{href:!0});var rot=s(PN);ILo=r(rot,"XLMRobertaForMultipleChoice"),rot.forEach(t),qLo=r(RAe," (XLM-RoBERTa model)"),RAe.forEach(t),NLo=i(O),Mb=n(O,"LI",{});var BAe=s(Mb);fie=n(BAe,"STRONG",{});var tot=s(fie);jLo=r(tot,"xlm-roberta-xl"),tot.forEach(t),DLo=r(BAe," \u2014 "),$N=n(BAe,"A",{href:!0});var aot=s($N);GLo=r(aot,"XLMRobertaXLForMultipleChoice"),aot.forEach(t),OLo=r(BAe," (XLM-RoBERTa-XL model)"),BAe.forEach(t),VLo=i(O),Eb=n(O,"LI",{});var PAe=s(Eb);mie=n(PAe,"STRONG",{});var not=s(mie);XLo=r(not,"xlnet"),not.forEach(t),zLo=r(PAe," \u2014 "),IN=n(PAe,"A",{href:!0});var sot=s(IN);QLo=r(sot,"XLNetForMultipleChoice"),sot.forEach(t),WLo=r(PAe," (XLNet model)"),PAe.forEach(t),HLo=i(O),Cb=n(O,"LI",{});var $Ae=s(Cb);gie=n($Ae,"STRONG",{});var lot=s(gie);ULo=r(lot,"yoso"),lot.forEach(t),JLo=r($Ae," \u2014 "),qN=n($Ae,"A",{href:!0});var iot=s(qN);YLo=r(iot,"YosoForMultipleChoice"),iot.forEach(t),KLo=r($Ae," (YOSO model)"),$Ae.forEach(t),O.forEach(t),ZLo=i(Qt),wb=n(Qt,"P",{});var IAe=s(wb);e8o=r(IAe,"The model is set in evaluation mode by default using "),hie=n(IAe,"CODE",{});var dot=s(hie);o8o=r(dot,"model.eval()"),dot.forEach(t),r8o=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pie=n(IAe,"CODE",{});var cot=s(pie);t8o=r(cot,"model.train()"),cot.forEach(t),IAe.forEach(t),a8o=i(Qt),_ie=n(Qt,"P",{});var fot=s(_ie);n8o=r(fot,"Examples:"),fot.forEach(t),s8o=i(Qt),m(X5.$$.fragment,Qt),Qt.forEach(t),al.forEach(t),hRe=i(c),ud=n(c,"H2",{class:!0});var EPe=s(ud);Ab=n(EPe,"A",{id:!0,class:!0,href:!0});var mot=s(Ab);uie=n(mot,"SPAN",{});var got=s(uie);m(z5.$$.fragment,got),got.forEach(t),mot.forEach(t),l8o=i(EPe),bie=n(EPe,"SPAN",{});var hot=s(bie);i8o=r(hot,"AutoModelForNextSentencePrediction"),hot.forEach(t),EPe.forEach(t),pRe=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Q5.$$.fragment,sl),d8o=i(sl),bd=n(sl,"P",{});var fU=s(bd);c8o=r(fU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),NN=n(fU,"A",{href:!0});var pot=s(NN);f8o=r(pot,"from_pretrained()"),pot.forEach(t),m8o=r(fU," class method or the "),jN=n(fU,"A",{href:!0});var _ot=s(jN);g8o=r(_ot,"from_config()"),_ot.forEach(t),h8o=r(fU,` class
method.`),fU.forEach(t),p8o=i(sl),W5=n(sl,"P",{});var CPe=s(W5);_8o=r(CPe,"This class cannot be instantiated directly using "),Fie=n(CPe,"CODE",{});var uot=s(Fie);u8o=r(uot,"__init__()"),uot.forEach(t),b8o=r(CPe," (throws an error)."),CPe.forEach(t),F8o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m(H5.$$.fragment,ll),v8o=i(ll),vie=n(ll,"P",{});var bot=s(vie);T8o=r(bot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),bot.forEach(t),M8o=i(ll),Fd=n(ll,"P",{});var mU=s(Fd);E8o=r(mU,`Note:
Loading a model from its configuration file does `),Tie=n(mU,"STRONG",{});var Fot=s(Tie);C8o=r(Fot,"not"),Fot.forEach(t),w8o=r(mU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DN=n(mU,"A",{href:!0});var vot=s(DN);A8o=r(vot,"from_pretrained()"),vot.forEach(t),y8o=r(mU," to load the model weights."),mU.forEach(t),L8o=i(ll),Mie=n(ll,"P",{});var Tot=s(Mie);x8o=r(Tot,"Examples:"),Tot.forEach(t),k8o=i(ll),m(U5.$$.fragment,ll),ll.forEach(t),S8o=i(sl),Xe=n(sl,"DIV",{class:!0});var Wt=s(Xe);m(J5.$$.fragment,Wt),R8o=i(Wt),Eie=n(Wt,"P",{});var Mot=s(Eie);B8o=r(Mot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mot.forEach(t),P8o=i(Wt),Ya=n(Wt,"P",{});var yE=s(Ya);$8o=r(yE,"The model class to instantiate is selected based on the "),Cie=n(yE,"CODE",{});var Eot=s(Cie);I8o=r(Eot,"model_type"),Eot.forEach(t),q8o=r(yE,` property of the config object (either
passed as an argument or loaded from `),wie=n(yE,"CODE",{});var Cot=s(wie);N8o=r(Cot,"pretrained_model_name_or_path"),Cot.forEach(t),j8o=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(yE,"CODE",{});var wot=s(Aie);D8o=r(wot,"pretrained_model_name_or_path"),wot.forEach(t),G8o=r(yE,":"),yE.forEach(t),O8o=i(Wt),da=n(Wt,"UL",{});var il=s(da);yb=n(il,"LI",{});var qAe=s(yb);yie=n(qAe,"STRONG",{});var Aot=s(yie);V8o=r(Aot,"bert"),Aot.forEach(t),X8o=r(qAe," \u2014 "),GN=n(qAe,"A",{href:!0});var yot=s(GN);z8o=r(yot,"BertForNextSentencePrediction"),yot.forEach(t),Q8o=r(qAe," (BERT model)"),qAe.forEach(t),W8o=i(il),Lb=n(il,"LI",{});var NAe=s(Lb);Lie=n(NAe,"STRONG",{});var Lot=s(Lie);H8o=r(Lot,"fnet"),Lot.forEach(t),U8o=r(NAe," \u2014 "),ON=n(NAe,"A",{href:!0});var xot=s(ON);J8o=r(xot,"FNetForNextSentencePrediction"),xot.forEach(t),Y8o=r(NAe," (FNet model)"),NAe.forEach(t),K8o=i(il),xb=n(il,"LI",{});var jAe=s(xb);xie=n(jAe,"STRONG",{});var kot=s(xie);Z8o=r(kot,"megatron-bert"),kot.forEach(t),e9o=r(jAe," \u2014 "),VN=n(jAe,"A",{href:!0});var Sot=s(VN);o9o=r(Sot,"MegatronBertForNextSentencePrediction"),Sot.forEach(t),r9o=r(jAe," (MegatronBert model)"),jAe.forEach(t),t9o=i(il),kb=n(il,"LI",{});var DAe=s(kb);kie=n(DAe,"STRONG",{});var Rot=s(kie);a9o=r(Rot,"mobilebert"),Rot.forEach(t),n9o=r(DAe," \u2014 "),XN=n(DAe,"A",{href:!0});var Bot=s(XN);s9o=r(Bot,"MobileBertForNextSentencePrediction"),Bot.forEach(t),l9o=r(DAe," (MobileBERT model)"),DAe.forEach(t),i9o=i(il),Sb=n(il,"LI",{});var GAe=s(Sb);Sie=n(GAe,"STRONG",{});var Pot=s(Sie);d9o=r(Pot,"qdqbert"),Pot.forEach(t),c9o=r(GAe," \u2014 "),zN=n(GAe,"A",{href:!0});var $ot=s(zN);f9o=r($ot,"QDQBertForNextSentencePrediction"),$ot.forEach(t),m9o=r(GAe," (QDQBert model)"),GAe.forEach(t),il.forEach(t),g9o=i(Wt),Rb=n(Wt,"P",{});var OAe=s(Rb);h9o=r(OAe,"The model is set in evaluation mode by default using "),Rie=n(OAe,"CODE",{});var Iot=s(Rie);p9o=r(Iot,"model.eval()"),Iot.forEach(t),_9o=r(OAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bie=n(OAe,"CODE",{});var qot=s(Bie);u9o=r(qot,"model.train()"),qot.forEach(t),OAe.forEach(t),b9o=i(Wt),Pie=n(Wt,"P",{});var Not=s(Pie);F9o=r(Not,"Examples:"),Not.forEach(t),v9o=i(Wt),m(Y5.$$.fragment,Wt),Wt.forEach(t),sl.forEach(t),_Re=i(c),vd=n(c,"H2",{class:!0});var wPe=s(vd);Bb=n(wPe,"A",{id:!0,class:!0,href:!0});var jot=s(Bb);$ie=n(jot,"SPAN",{});var Dot=s($ie);m(K5.$$.fragment,Dot),Dot.forEach(t),jot.forEach(t),T9o=i(wPe),Iie=n(wPe,"SPAN",{});var Got=s(Iie);M9o=r(Got,"AutoModelForTokenClassification"),Got.forEach(t),wPe.forEach(t),uRe=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(Z5.$$.fragment,dl),E9o=i(dl),Td=n(dl,"P",{});var gU=s(Td);C9o=r(gU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QN=n(gU,"A",{href:!0});var Oot=s(QN);w9o=r(Oot,"from_pretrained()"),Oot.forEach(t),A9o=r(gU," class method or the "),WN=n(gU,"A",{href:!0});var Vot=s(WN);y9o=r(Vot,"from_config()"),Vot.forEach(t),L9o=r(gU,` class
method.`),gU.forEach(t),x9o=i(dl),ew=n(dl,"P",{});var APe=s(ew);k9o=r(APe,"This class cannot be instantiated directly using "),qie=n(APe,"CODE",{});var Xot=s(qie);S9o=r(Xot,"__init__()"),Xot.forEach(t),R9o=r(APe," (throws an error)."),APe.forEach(t),B9o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(ow.$$.fragment,cl),P9o=i(cl),Nie=n(cl,"P",{});var zot=s(Nie);$9o=r(zot,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zot.forEach(t),I9o=i(cl),Md=n(cl,"P",{});var hU=s(Md);q9o=r(hU,`Note:
Loading a model from its configuration file does `),jie=n(hU,"STRONG",{});var Qot=s(jie);N9o=r(Qot,"not"),Qot.forEach(t),j9o=r(hU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HN=n(hU,"A",{href:!0});var Wot=s(HN);D9o=r(Wot,"from_pretrained()"),Wot.forEach(t),G9o=r(hU," to load the model weights."),hU.forEach(t),O9o=i(cl),Die=n(cl,"P",{});var Hot=s(Die);V9o=r(Hot,"Examples:"),Hot.forEach(t),X9o=i(cl),m(rw.$$.fragment,cl),cl.forEach(t),z9o=i(dl),ze=n(dl,"DIV",{class:!0});var Ht=s(ze);m(tw.$$.fragment,Ht),Q9o=i(Ht),Gie=n(Ht,"P",{});var Uot=s(Gie);W9o=r(Uot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Uot.forEach(t),H9o=i(Ht),Ka=n(Ht,"P",{});var LE=s(Ka);U9o=r(LE,"The model class to instantiate is selected based on the "),Oie=n(LE,"CODE",{});var Jot=s(Oie);J9o=r(Jot,"model_type"),Jot.forEach(t),Y9o=r(LE,` property of the config object (either
passed as an argument or loaded from `),Vie=n(LE,"CODE",{});var Yot=s(Vie);K9o=r(Yot,"pretrained_model_name_or_path"),Yot.forEach(t),Z9o=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xie=n(LE,"CODE",{});var Kot=s(Xie);exo=r(Kot,"pretrained_model_name_or_path"),Kot.forEach(t),oxo=r(LE,":"),LE.forEach(t),rxo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Pb=n(D,"LI",{});var VAe=s(Pb);zie=n(VAe,"STRONG",{});var Zot=s(zie);txo=r(Zot,"albert"),Zot.forEach(t),axo=r(VAe," \u2014 "),UN=n(VAe,"A",{href:!0});var ert=s(UN);nxo=r(ert,"AlbertForTokenClassification"),ert.forEach(t),sxo=r(VAe," (ALBERT model)"),VAe.forEach(t),lxo=i(D),$b=n(D,"LI",{});var XAe=s($b);Qie=n(XAe,"STRONG",{});var ort=s(Qie);ixo=r(ort,"bert"),ort.forEach(t),dxo=r(XAe," \u2014 "),JN=n(XAe,"A",{href:!0});var rrt=s(JN);cxo=r(rrt,"BertForTokenClassification"),rrt.forEach(t),fxo=r(XAe," (BERT model)"),XAe.forEach(t),mxo=i(D),Ib=n(D,"LI",{});var zAe=s(Ib);Wie=n(zAe,"STRONG",{});var trt=s(Wie);gxo=r(trt,"big_bird"),trt.forEach(t),hxo=r(zAe," \u2014 "),YN=n(zAe,"A",{href:!0});var art=s(YN);pxo=r(art,"BigBirdForTokenClassification"),art.forEach(t),_xo=r(zAe," (BigBird model)"),zAe.forEach(t),uxo=i(D),qb=n(D,"LI",{});var QAe=s(qb);Hie=n(QAe,"STRONG",{});var nrt=s(Hie);bxo=r(nrt,"camembert"),nrt.forEach(t),Fxo=r(QAe," \u2014 "),KN=n(QAe,"A",{href:!0});var srt=s(KN);vxo=r(srt,"CamembertForTokenClassification"),srt.forEach(t),Txo=r(QAe," (CamemBERT model)"),QAe.forEach(t),Mxo=i(D),Nb=n(D,"LI",{});var WAe=s(Nb);Uie=n(WAe,"STRONG",{});var lrt=s(Uie);Exo=r(lrt,"canine"),lrt.forEach(t),Cxo=r(WAe," \u2014 "),ZN=n(WAe,"A",{href:!0});var irt=s(ZN);wxo=r(irt,"CanineForTokenClassification"),irt.forEach(t),Axo=r(WAe," (Canine model)"),WAe.forEach(t),yxo=i(D),jb=n(D,"LI",{});var HAe=s(jb);Jie=n(HAe,"STRONG",{});var drt=s(Jie);Lxo=r(drt,"convbert"),drt.forEach(t),xxo=r(HAe," \u2014 "),ej=n(HAe,"A",{href:!0});var crt=s(ej);kxo=r(crt,"ConvBertForTokenClassification"),crt.forEach(t),Sxo=r(HAe," (ConvBERT model)"),HAe.forEach(t),Rxo=i(D),Db=n(D,"LI",{});var UAe=s(Db);Yie=n(UAe,"STRONG",{});var frt=s(Yie);Bxo=r(frt,"data2vec-text"),frt.forEach(t),Pxo=r(UAe," \u2014 "),oj=n(UAe,"A",{href:!0});var mrt=s(oj);$xo=r(mrt,"Data2VecTextForTokenClassification"),mrt.forEach(t),Ixo=r(UAe," (Data2VecText model)"),UAe.forEach(t),qxo=i(D),Gb=n(D,"LI",{});var JAe=s(Gb);Kie=n(JAe,"STRONG",{});var grt=s(Kie);Nxo=r(grt,"deberta"),grt.forEach(t),jxo=r(JAe," \u2014 "),rj=n(JAe,"A",{href:!0});var hrt=s(rj);Dxo=r(hrt,"DebertaForTokenClassification"),hrt.forEach(t),Gxo=r(JAe," (DeBERTa model)"),JAe.forEach(t),Oxo=i(D),Ob=n(D,"LI",{});var YAe=s(Ob);Zie=n(YAe,"STRONG",{});var prt=s(Zie);Vxo=r(prt,"deberta-v2"),prt.forEach(t),Xxo=r(YAe," \u2014 "),tj=n(YAe,"A",{href:!0});var _rt=s(tj);zxo=r(_rt,"DebertaV2ForTokenClassification"),_rt.forEach(t),Qxo=r(YAe," (DeBERTa-v2 model)"),YAe.forEach(t),Wxo=i(D),Vb=n(D,"LI",{});var KAe=s(Vb);ede=n(KAe,"STRONG",{});var urt=s(ede);Hxo=r(urt,"distilbert"),urt.forEach(t),Uxo=r(KAe," \u2014 "),aj=n(KAe,"A",{href:!0});var brt=s(aj);Jxo=r(brt,"DistilBertForTokenClassification"),brt.forEach(t),Yxo=r(KAe," (DistilBERT model)"),KAe.forEach(t),Kxo=i(D),Xb=n(D,"LI",{});var ZAe=s(Xb);ode=n(ZAe,"STRONG",{});var Frt=s(ode);Zxo=r(Frt,"electra"),Frt.forEach(t),eko=r(ZAe," \u2014 "),nj=n(ZAe,"A",{href:!0});var vrt=s(nj);oko=r(vrt,"ElectraForTokenClassification"),vrt.forEach(t),rko=r(ZAe," (ELECTRA model)"),ZAe.forEach(t),tko=i(D),zb=n(D,"LI",{});var e0e=s(zb);rde=n(e0e,"STRONG",{});var Trt=s(rde);ako=r(Trt,"flaubert"),Trt.forEach(t),nko=r(e0e," \u2014 "),sj=n(e0e,"A",{href:!0});var Mrt=s(sj);sko=r(Mrt,"FlaubertForTokenClassification"),Mrt.forEach(t),lko=r(e0e," (FlauBERT model)"),e0e.forEach(t),iko=i(D),Qb=n(D,"LI",{});var o0e=s(Qb);tde=n(o0e,"STRONG",{});var Ert=s(tde);dko=r(Ert,"fnet"),Ert.forEach(t),cko=r(o0e," \u2014 "),lj=n(o0e,"A",{href:!0});var Crt=s(lj);fko=r(Crt,"FNetForTokenClassification"),Crt.forEach(t),mko=r(o0e," (FNet model)"),o0e.forEach(t),gko=i(D),Wb=n(D,"LI",{});var r0e=s(Wb);ade=n(r0e,"STRONG",{});var wrt=s(ade);hko=r(wrt,"funnel"),wrt.forEach(t),pko=r(r0e," \u2014 "),ij=n(r0e,"A",{href:!0});var Art=s(ij);_ko=r(Art,"FunnelForTokenClassification"),Art.forEach(t),uko=r(r0e," (Funnel Transformer model)"),r0e.forEach(t),bko=i(D),Hb=n(D,"LI",{});var t0e=s(Hb);nde=n(t0e,"STRONG",{});var yrt=s(nde);Fko=r(yrt,"gpt2"),yrt.forEach(t),vko=r(t0e," \u2014 "),dj=n(t0e,"A",{href:!0});var Lrt=s(dj);Tko=r(Lrt,"GPT2ForTokenClassification"),Lrt.forEach(t),Mko=r(t0e," (OpenAI GPT-2 model)"),t0e.forEach(t),Eko=i(D),Ub=n(D,"LI",{});var a0e=s(Ub);sde=n(a0e,"STRONG",{});var xrt=s(sde);Cko=r(xrt,"ibert"),xrt.forEach(t),wko=r(a0e," \u2014 "),cj=n(a0e,"A",{href:!0});var krt=s(cj);Ako=r(krt,"IBertForTokenClassification"),krt.forEach(t),yko=r(a0e," (I-BERT model)"),a0e.forEach(t),Lko=i(D),Jb=n(D,"LI",{});var n0e=s(Jb);lde=n(n0e,"STRONG",{});var Srt=s(lde);xko=r(Srt,"layoutlm"),Srt.forEach(t),kko=r(n0e," \u2014 "),fj=n(n0e,"A",{href:!0});var Rrt=s(fj);Sko=r(Rrt,"LayoutLMForTokenClassification"),Rrt.forEach(t),Rko=r(n0e," (LayoutLM model)"),n0e.forEach(t),Bko=i(D),Yb=n(D,"LI",{});var s0e=s(Yb);ide=n(s0e,"STRONG",{});var Brt=s(ide);Pko=r(Brt,"layoutlmv2"),Brt.forEach(t),$ko=r(s0e," \u2014 "),mj=n(s0e,"A",{href:!0});var Prt=s(mj);Iko=r(Prt,"LayoutLMv2ForTokenClassification"),Prt.forEach(t),qko=r(s0e," (LayoutLMv2 model)"),s0e.forEach(t),Nko=i(D),Kb=n(D,"LI",{});var l0e=s(Kb);dde=n(l0e,"STRONG",{});var $rt=s(dde);jko=r($rt,"longformer"),$rt.forEach(t),Dko=r(l0e," \u2014 "),gj=n(l0e,"A",{href:!0});var Irt=s(gj);Gko=r(Irt,"LongformerForTokenClassification"),Irt.forEach(t),Oko=r(l0e," (Longformer model)"),l0e.forEach(t),Vko=i(D),Zb=n(D,"LI",{});var i0e=s(Zb);cde=n(i0e,"STRONG",{});var qrt=s(cde);Xko=r(qrt,"megatron-bert"),qrt.forEach(t),zko=r(i0e," \u2014 "),hj=n(i0e,"A",{href:!0});var Nrt=s(hj);Qko=r(Nrt,"MegatronBertForTokenClassification"),Nrt.forEach(t),Wko=r(i0e," (MegatronBert model)"),i0e.forEach(t),Hko=i(D),e3=n(D,"LI",{});var d0e=s(e3);fde=n(d0e,"STRONG",{});var jrt=s(fde);Uko=r(jrt,"mobilebert"),jrt.forEach(t),Jko=r(d0e," \u2014 "),pj=n(d0e,"A",{href:!0});var Drt=s(pj);Yko=r(Drt,"MobileBertForTokenClassification"),Drt.forEach(t),Kko=r(d0e," (MobileBERT model)"),d0e.forEach(t),Zko=i(D),o3=n(D,"LI",{});var c0e=s(o3);mde=n(c0e,"STRONG",{});var Grt=s(mde);eSo=r(Grt,"mpnet"),Grt.forEach(t),oSo=r(c0e," \u2014 "),_j=n(c0e,"A",{href:!0});var Ort=s(_j);rSo=r(Ort,"MPNetForTokenClassification"),Ort.forEach(t),tSo=r(c0e," (MPNet model)"),c0e.forEach(t),aSo=i(D),r3=n(D,"LI",{});var f0e=s(r3);gde=n(f0e,"STRONG",{});var Vrt=s(gde);nSo=r(Vrt,"nystromformer"),Vrt.forEach(t),sSo=r(f0e," \u2014 "),uj=n(f0e,"A",{href:!0});var Xrt=s(uj);lSo=r(Xrt,"NystromformerForTokenClassification"),Xrt.forEach(t),iSo=r(f0e," (Nystromformer model)"),f0e.forEach(t),dSo=i(D),t3=n(D,"LI",{});var m0e=s(t3);hde=n(m0e,"STRONG",{});var zrt=s(hde);cSo=r(zrt,"qdqbert"),zrt.forEach(t),fSo=r(m0e," \u2014 "),bj=n(m0e,"A",{href:!0});var Qrt=s(bj);mSo=r(Qrt,"QDQBertForTokenClassification"),Qrt.forEach(t),gSo=r(m0e," (QDQBert model)"),m0e.forEach(t),hSo=i(D),a3=n(D,"LI",{});var g0e=s(a3);pde=n(g0e,"STRONG",{});var Wrt=s(pde);pSo=r(Wrt,"rembert"),Wrt.forEach(t),_So=r(g0e," \u2014 "),Fj=n(g0e,"A",{href:!0});var Hrt=s(Fj);uSo=r(Hrt,"RemBertForTokenClassification"),Hrt.forEach(t),bSo=r(g0e," (RemBERT model)"),g0e.forEach(t),FSo=i(D),n3=n(D,"LI",{});var h0e=s(n3);_de=n(h0e,"STRONG",{});var Urt=s(_de);vSo=r(Urt,"roberta"),Urt.forEach(t),TSo=r(h0e," \u2014 "),vj=n(h0e,"A",{href:!0});var Jrt=s(vj);MSo=r(Jrt,"RobertaForTokenClassification"),Jrt.forEach(t),ESo=r(h0e," (RoBERTa model)"),h0e.forEach(t),CSo=i(D),s3=n(D,"LI",{});var p0e=s(s3);ude=n(p0e,"STRONG",{});var Yrt=s(ude);wSo=r(Yrt,"roformer"),Yrt.forEach(t),ASo=r(p0e," \u2014 "),Tj=n(p0e,"A",{href:!0});var Krt=s(Tj);ySo=r(Krt,"RoFormerForTokenClassification"),Krt.forEach(t),LSo=r(p0e," (RoFormer model)"),p0e.forEach(t),xSo=i(D),l3=n(D,"LI",{});var _0e=s(l3);bde=n(_0e,"STRONG",{});var Zrt=s(bde);kSo=r(Zrt,"squeezebert"),Zrt.forEach(t),SSo=r(_0e," \u2014 "),Mj=n(_0e,"A",{href:!0});var ett=s(Mj);RSo=r(ett,"SqueezeBertForTokenClassification"),ett.forEach(t),BSo=r(_0e," (SqueezeBERT model)"),_0e.forEach(t),PSo=i(D),i3=n(D,"LI",{});var u0e=s(i3);Fde=n(u0e,"STRONG",{});var ott=s(Fde);$So=r(ott,"xlm"),ott.forEach(t),ISo=r(u0e," \u2014 "),Ej=n(u0e,"A",{href:!0});var rtt=s(Ej);qSo=r(rtt,"XLMForTokenClassification"),rtt.forEach(t),NSo=r(u0e," (XLM model)"),u0e.forEach(t),jSo=i(D),d3=n(D,"LI",{});var b0e=s(d3);vde=n(b0e,"STRONG",{});var ttt=s(vde);DSo=r(ttt,"xlm-roberta"),ttt.forEach(t),GSo=r(b0e," \u2014 "),Cj=n(b0e,"A",{href:!0});var att=s(Cj);OSo=r(att,"XLMRobertaForTokenClassification"),att.forEach(t),VSo=r(b0e," (XLM-RoBERTa model)"),b0e.forEach(t),XSo=i(D),c3=n(D,"LI",{});var F0e=s(c3);Tde=n(F0e,"STRONG",{});var ntt=s(Tde);zSo=r(ntt,"xlm-roberta-xl"),ntt.forEach(t),QSo=r(F0e," \u2014 "),wj=n(F0e,"A",{href:!0});var stt=s(wj);WSo=r(stt,"XLMRobertaXLForTokenClassification"),stt.forEach(t),HSo=r(F0e," (XLM-RoBERTa-XL model)"),F0e.forEach(t),USo=i(D),f3=n(D,"LI",{});var v0e=s(f3);Mde=n(v0e,"STRONG",{});var ltt=s(Mde);JSo=r(ltt,"xlnet"),ltt.forEach(t),YSo=r(v0e," \u2014 "),Aj=n(v0e,"A",{href:!0});var itt=s(Aj);KSo=r(itt,"XLNetForTokenClassification"),itt.forEach(t),ZSo=r(v0e," (XLNet model)"),v0e.forEach(t),eRo=i(D),m3=n(D,"LI",{});var T0e=s(m3);Ede=n(T0e,"STRONG",{});var dtt=s(Ede);oRo=r(dtt,"yoso"),dtt.forEach(t),rRo=r(T0e," \u2014 "),yj=n(T0e,"A",{href:!0});var ctt=s(yj);tRo=r(ctt,"YosoForTokenClassification"),ctt.forEach(t),aRo=r(T0e," (YOSO model)"),T0e.forEach(t),D.forEach(t),nRo=i(Ht),g3=n(Ht,"P",{});var M0e=s(g3);sRo=r(M0e,"The model is set in evaluation mode by default using "),Cde=n(M0e,"CODE",{});var ftt=s(Cde);lRo=r(ftt,"model.eval()"),ftt.forEach(t),iRo=r(M0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wde=n(M0e,"CODE",{});var mtt=s(wde);dRo=r(mtt,"model.train()"),mtt.forEach(t),M0e.forEach(t),cRo=i(Ht),Ade=n(Ht,"P",{});var gtt=s(Ade);fRo=r(gtt,"Examples:"),gtt.forEach(t),mRo=i(Ht),m(aw.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),bRe=i(c),Ed=n(c,"H2",{class:!0});var yPe=s(Ed);h3=n(yPe,"A",{id:!0,class:!0,href:!0});var htt=s(h3);yde=n(htt,"SPAN",{});var ptt=s(yde);m(nw.$$.fragment,ptt),ptt.forEach(t),htt.forEach(t),gRo=i(yPe),Lde=n(yPe,"SPAN",{});var _tt=s(Lde);hRo=r(_tt,"AutoModelForQuestionAnswering"),_tt.forEach(t),yPe.forEach(t),FRe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(sw.$$.fragment,fl),pRo=i(fl),Cd=n(fl,"P",{});var pU=s(Cd);_Ro=r(pU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Lj=n(pU,"A",{href:!0});var utt=s(Lj);uRo=r(utt,"from_pretrained()"),utt.forEach(t),bRo=r(pU," class method or the "),xj=n(pU,"A",{href:!0});var btt=s(xj);FRo=r(btt,"from_config()"),btt.forEach(t),vRo=r(pU,` class
method.`),pU.forEach(t),TRo=i(fl),lw=n(fl,"P",{});var LPe=s(lw);MRo=r(LPe,"This class cannot be instantiated directly using "),xde=n(LPe,"CODE",{});var Ftt=s(xde);ERo=r(Ftt,"__init__()"),Ftt.forEach(t),CRo=r(LPe," (throws an error)."),LPe.forEach(t),wRo=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(iw.$$.fragment,ml),ARo=i(ml),kde=n(ml,"P",{});var vtt=s(kde);yRo=r(vtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vtt.forEach(t),LRo=i(ml),wd=n(ml,"P",{});var _U=s(wd);xRo=r(_U,`Note:
Loading a model from its configuration file does `),Sde=n(_U,"STRONG",{});var Ttt=s(Sde);kRo=r(Ttt,"not"),Ttt.forEach(t),SRo=r(_U,` load the model weights. It only affects the
model\u2019s configuration. Use `),kj=n(_U,"A",{href:!0});var Mtt=s(kj);RRo=r(Mtt,"from_pretrained()"),Mtt.forEach(t),BRo=r(_U," to load the model weights."),_U.forEach(t),PRo=i(ml),Rde=n(ml,"P",{});var Ett=s(Rde);$Ro=r(Ett,"Examples:"),Ett.forEach(t),IRo=i(ml),m(dw.$$.fragment,ml),ml.forEach(t),qRo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(cw.$$.fragment,Ut),NRo=i(Ut),Bde=n(Ut,"P",{});var Ctt=s(Bde);jRo=r(Ctt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ctt.forEach(t),DRo=i(Ut),Za=n(Ut,"P",{});var xE=s(Za);GRo=r(xE,"The model class to instantiate is selected based on the "),Pde=n(xE,"CODE",{});var wtt=s(Pde);ORo=r(wtt,"model_type"),wtt.forEach(t),VRo=r(xE,` property of the config object (either
passed as an argument or loaded from `),$de=n(xE,"CODE",{});var Att=s($de);XRo=r(Att,"pretrained_model_name_or_path"),Att.forEach(t),zRo=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ide=n(xE,"CODE",{});var ytt=s(Ide);QRo=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),WRo=r(xE,":"),xE.forEach(t),HRo=i(Ut),R=n(Ut,"UL",{});var P=s(R);p3=n(P,"LI",{});var E0e=s(p3);qde=n(E0e,"STRONG",{});var Ltt=s(qde);URo=r(Ltt,"albert"),Ltt.forEach(t),JRo=r(E0e," \u2014 "),Sj=n(E0e,"A",{href:!0});var xtt=s(Sj);YRo=r(xtt,"AlbertForQuestionAnswering"),xtt.forEach(t),KRo=r(E0e," (ALBERT model)"),E0e.forEach(t),ZRo=i(P),_3=n(P,"LI",{});var C0e=s(_3);Nde=n(C0e,"STRONG",{});var ktt=s(Nde);eBo=r(ktt,"bart"),ktt.forEach(t),oBo=r(C0e," \u2014 "),Rj=n(C0e,"A",{href:!0});var Stt=s(Rj);rBo=r(Stt,"BartForQuestionAnswering"),Stt.forEach(t),tBo=r(C0e," (BART model)"),C0e.forEach(t),aBo=i(P),u3=n(P,"LI",{});var w0e=s(u3);jde=n(w0e,"STRONG",{});var Rtt=s(jde);nBo=r(Rtt,"bert"),Rtt.forEach(t),sBo=r(w0e," \u2014 "),Bj=n(w0e,"A",{href:!0});var Btt=s(Bj);lBo=r(Btt,"BertForQuestionAnswering"),Btt.forEach(t),iBo=r(w0e," (BERT model)"),w0e.forEach(t),dBo=i(P),b3=n(P,"LI",{});var A0e=s(b3);Dde=n(A0e,"STRONG",{});var Ptt=s(Dde);cBo=r(Ptt,"big_bird"),Ptt.forEach(t),fBo=r(A0e," \u2014 "),Pj=n(A0e,"A",{href:!0});var $tt=s(Pj);mBo=r($tt,"BigBirdForQuestionAnswering"),$tt.forEach(t),gBo=r(A0e," (BigBird model)"),A0e.forEach(t),hBo=i(P),F3=n(P,"LI",{});var y0e=s(F3);Gde=n(y0e,"STRONG",{});var Itt=s(Gde);pBo=r(Itt,"bigbird_pegasus"),Itt.forEach(t),_Bo=r(y0e," \u2014 "),$j=n(y0e,"A",{href:!0});var qtt=s($j);uBo=r(qtt,"BigBirdPegasusForQuestionAnswering"),qtt.forEach(t),bBo=r(y0e," (BigBirdPegasus model)"),y0e.forEach(t),FBo=i(P),v3=n(P,"LI",{});var L0e=s(v3);Ode=n(L0e,"STRONG",{});var Ntt=s(Ode);vBo=r(Ntt,"camembert"),Ntt.forEach(t),TBo=r(L0e," \u2014 "),Ij=n(L0e,"A",{href:!0});var jtt=s(Ij);MBo=r(jtt,"CamembertForQuestionAnswering"),jtt.forEach(t),EBo=r(L0e," (CamemBERT model)"),L0e.forEach(t),CBo=i(P),T3=n(P,"LI",{});var x0e=s(T3);Vde=n(x0e,"STRONG",{});var Dtt=s(Vde);wBo=r(Dtt,"canine"),Dtt.forEach(t),ABo=r(x0e," \u2014 "),qj=n(x0e,"A",{href:!0});var Gtt=s(qj);yBo=r(Gtt,"CanineForQuestionAnswering"),Gtt.forEach(t),LBo=r(x0e," (Canine model)"),x0e.forEach(t),xBo=i(P),M3=n(P,"LI",{});var k0e=s(M3);Xde=n(k0e,"STRONG",{});var Ott=s(Xde);kBo=r(Ott,"convbert"),Ott.forEach(t),SBo=r(k0e," \u2014 "),Nj=n(k0e,"A",{href:!0});var Vtt=s(Nj);RBo=r(Vtt,"ConvBertForQuestionAnswering"),Vtt.forEach(t),BBo=r(k0e," (ConvBERT model)"),k0e.forEach(t),PBo=i(P),E3=n(P,"LI",{});var S0e=s(E3);zde=n(S0e,"STRONG",{});var Xtt=s(zde);$Bo=r(Xtt,"data2vec-text"),Xtt.forEach(t),IBo=r(S0e," \u2014 "),jj=n(S0e,"A",{href:!0});var ztt=s(jj);qBo=r(ztt,"Data2VecTextForQuestionAnswering"),ztt.forEach(t),NBo=r(S0e," (Data2VecText model)"),S0e.forEach(t),jBo=i(P),C3=n(P,"LI",{});var R0e=s(C3);Qde=n(R0e,"STRONG",{});var Qtt=s(Qde);DBo=r(Qtt,"deberta"),Qtt.forEach(t),GBo=r(R0e," \u2014 "),Dj=n(R0e,"A",{href:!0});var Wtt=s(Dj);OBo=r(Wtt,"DebertaForQuestionAnswering"),Wtt.forEach(t),VBo=r(R0e," (DeBERTa model)"),R0e.forEach(t),XBo=i(P),w3=n(P,"LI",{});var B0e=s(w3);Wde=n(B0e,"STRONG",{});var Htt=s(Wde);zBo=r(Htt,"deberta-v2"),Htt.forEach(t),QBo=r(B0e," \u2014 "),Gj=n(B0e,"A",{href:!0});var Utt=s(Gj);WBo=r(Utt,"DebertaV2ForQuestionAnswering"),Utt.forEach(t),HBo=r(B0e," (DeBERTa-v2 model)"),B0e.forEach(t),UBo=i(P),A3=n(P,"LI",{});var P0e=s(A3);Hde=n(P0e,"STRONG",{});var Jtt=s(Hde);JBo=r(Jtt,"distilbert"),Jtt.forEach(t),YBo=r(P0e," \u2014 "),Oj=n(P0e,"A",{href:!0});var Ytt=s(Oj);KBo=r(Ytt,"DistilBertForQuestionAnswering"),Ytt.forEach(t),ZBo=r(P0e," (DistilBERT model)"),P0e.forEach(t),ePo=i(P),y3=n(P,"LI",{});var $0e=s(y3);Ude=n($0e,"STRONG",{});var Ktt=s(Ude);oPo=r(Ktt,"electra"),Ktt.forEach(t),rPo=r($0e," \u2014 "),Vj=n($0e,"A",{href:!0});var Ztt=s(Vj);tPo=r(Ztt,"ElectraForQuestionAnswering"),Ztt.forEach(t),aPo=r($0e," (ELECTRA model)"),$0e.forEach(t),nPo=i(P),L3=n(P,"LI",{});var I0e=s(L3);Jde=n(I0e,"STRONG",{});var eat=s(Jde);sPo=r(eat,"flaubert"),eat.forEach(t),lPo=r(I0e," \u2014 "),Xj=n(I0e,"A",{href:!0});var oat=s(Xj);iPo=r(oat,"FlaubertForQuestionAnsweringSimple"),oat.forEach(t),dPo=r(I0e," (FlauBERT model)"),I0e.forEach(t),cPo=i(P),x3=n(P,"LI",{});var q0e=s(x3);Yde=n(q0e,"STRONG",{});var rat=s(Yde);fPo=r(rat,"fnet"),rat.forEach(t),mPo=r(q0e," \u2014 "),zj=n(q0e,"A",{href:!0});var tat=s(zj);gPo=r(tat,"FNetForQuestionAnswering"),tat.forEach(t),hPo=r(q0e," (FNet model)"),q0e.forEach(t),pPo=i(P),k3=n(P,"LI",{});var N0e=s(k3);Kde=n(N0e,"STRONG",{});var aat=s(Kde);_Po=r(aat,"funnel"),aat.forEach(t),uPo=r(N0e," \u2014 "),Qj=n(N0e,"A",{href:!0});var nat=s(Qj);bPo=r(nat,"FunnelForQuestionAnswering"),nat.forEach(t),FPo=r(N0e," (Funnel Transformer model)"),N0e.forEach(t),vPo=i(P),S3=n(P,"LI",{});var j0e=s(S3);Zde=n(j0e,"STRONG",{});var sat=s(Zde);TPo=r(sat,"gptj"),sat.forEach(t),MPo=r(j0e," \u2014 "),Wj=n(j0e,"A",{href:!0});var lat=s(Wj);EPo=r(lat,"GPTJForQuestionAnswering"),lat.forEach(t),CPo=r(j0e," (GPT-J model)"),j0e.forEach(t),wPo=i(P),R3=n(P,"LI",{});var D0e=s(R3);ece=n(D0e,"STRONG",{});var iat=s(ece);APo=r(iat,"ibert"),iat.forEach(t),yPo=r(D0e," \u2014 "),Hj=n(D0e,"A",{href:!0});var dat=s(Hj);LPo=r(dat,"IBertForQuestionAnswering"),dat.forEach(t),xPo=r(D0e," (I-BERT model)"),D0e.forEach(t),kPo=i(P),B3=n(P,"LI",{});var G0e=s(B3);oce=n(G0e,"STRONG",{});var cat=s(oce);SPo=r(cat,"layoutlmv2"),cat.forEach(t),RPo=r(G0e," \u2014 "),Uj=n(G0e,"A",{href:!0});var fat=s(Uj);BPo=r(fat,"LayoutLMv2ForQuestionAnswering"),fat.forEach(t),PPo=r(G0e," (LayoutLMv2 model)"),G0e.forEach(t),$Po=i(P),P3=n(P,"LI",{});var O0e=s(P3);rce=n(O0e,"STRONG",{});var mat=s(rce);IPo=r(mat,"led"),mat.forEach(t),qPo=r(O0e," \u2014 "),Jj=n(O0e,"A",{href:!0});var gat=s(Jj);NPo=r(gat,"LEDForQuestionAnswering"),gat.forEach(t),jPo=r(O0e," (LED model)"),O0e.forEach(t),DPo=i(P),$3=n(P,"LI",{});var V0e=s($3);tce=n(V0e,"STRONG",{});var hat=s(tce);GPo=r(hat,"longformer"),hat.forEach(t),OPo=r(V0e," \u2014 "),Yj=n(V0e,"A",{href:!0});var pat=s(Yj);VPo=r(pat,"LongformerForQuestionAnswering"),pat.forEach(t),XPo=r(V0e," (Longformer model)"),V0e.forEach(t),zPo=i(P),I3=n(P,"LI",{});var X0e=s(I3);ace=n(X0e,"STRONG",{});var _at=s(ace);QPo=r(_at,"lxmert"),_at.forEach(t),WPo=r(X0e," \u2014 "),Kj=n(X0e,"A",{href:!0});var uat=s(Kj);HPo=r(uat,"LxmertForQuestionAnswering"),uat.forEach(t),UPo=r(X0e," (LXMERT model)"),X0e.forEach(t),JPo=i(P),q3=n(P,"LI",{});var z0e=s(q3);nce=n(z0e,"STRONG",{});var bat=s(nce);YPo=r(bat,"mbart"),bat.forEach(t),KPo=r(z0e," \u2014 "),Zj=n(z0e,"A",{href:!0});var Fat=s(Zj);ZPo=r(Fat,"MBartForQuestionAnswering"),Fat.forEach(t),e$o=r(z0e," (mBART model)"),z0e.forEach(t),o$o=i(P),N3=n(P,"LI",{});var Q0e=s(N3);sce=n(Q0e,"STRONG",{});var vat=s(sce);r$o=r(vat,"megatron-bert"),vat.forEach(t),t$o=r(Q0e," \u2014 "),eD=n(Q0e,"A",{href:!0});var Tat=s(eD);a$o=r(Tat,"MegatronBertForQuestionAnswering"),Tat.forEach(t),n$o=r(Q0e," (MegatronBert model)"),Q0e.forEach(t),s$o=i(P),j3=n(P,"LI",{});var W0e=s(j3);lce=n(W0e,"STRONG",{});var Mat=s(lce);l$o=r(Mat,"mobilebert"),Mat.forEach(t),i$o=r(W0e," \u2014 "),oD=n(W0e,"A",{href:!0});var Eat=s(oD);d$o=r(Eat,"MobileBertForQuestionAnswering"),Eat.forEach(t),c$o=r(W0e," (MobileBERT model)"),W0e.forEach(t),f$o=i(P),D3=n(P,"LI",{});var H0e=s(D3);ice=n(H0e,"STRONG",{});var Cat=s(ice);m$o=r(Cat,"mpnet"),Cat.forEach(t),g$o=r(H0e," \u2014 "),rD=n(H0e,"A",{href:!0});var wat=s(rD);h$o=r(wat,"MPNetForQuestionAnswering"),wat.forEach(t),p$o=r(H0e," (MPNet model)"),H0e.forEach(t),_$o=i(P),G3=n(P,"LI",{});var U0e=s(G3);dce=n(U0e,"STRONG",{});var Aat=s(dce);u$o=r(Aat,"nystromformer"),Aat.forEach(t),b$o=r(U0e," \u2014 "),tD=n(U0e,"A",{href:!0});var yat=s(tD);F$o=r(yat,"NystromformerForQuestionAnswering"),yat.forEach(t),v$o=r(U0e," (Nystromformer model)"),U0e.forEach(t),T$o=i(P),O3=n(P,"LI",{});var J0e=s(O3);cce=n(J0e,"STRONG",{});var Lat=s(cce);M$o=r(Lat,"qdqbert"),Lat.forEach(t),E$o=r(J0e," \u2014 "),aD=n(J0e,"A",{href:!0});var xat=s(aD);C$o=r(xat,"QDQBertForQuestionAnswering"),xat.forEach(t),w$o=r(J0e," (QDQBert model)"),J0e.forEach(t),A$o=i(P),V3=n(P,"LI",{});var Y0e=s(V3);fce=n(Y0e,"STRONG",{});var kat=s(fce);y$o=r(kat,"reformer"),kat.forEach(t),L$o=r(Y0e," \u2014 "),nD=n(Y0e,"A",{href:!0});var Sat=s(nD);x$o=r(Sat,"ReformerForQuestionAnswering"),Sat.forEach(t),k$o=r(Y0e," (Reformer model)"),Y0e.forEach(t),S$o=i(P),X3=n(P,"LI",{});var K0e=s(X3);mce=n(K0e,"STRONG",{});var Rat=s(mce);R$o=r(Rat,"rembert"),Rat.forEach(t),B$o=r(K0e," \u2014 "),sD=n(K0e,"A",{href:!0});var Bat=s(sD);P$o=r(Bat,"RemBertForQuestionAnswering"),Bat.forEach(t),$$o=r(K0e," (RemBERT model)"),K0e.forEach(t),I$o=i(P),z3=n(P,"LI",{});var Z0e=s(z3);gce=n(Z0e,"STRONG",{});var Pat=s(gce);q$o=r(Pat,"roberta"),Pat.forEach(t),N$o=r(Z0e," \u2014 "),lD=n(Z0e,"A",{href:!0});var $at=s(lD);j$o=r($at,"RobertaForQuestionAnswering"),$at.forEach(t),D$o=r(Z0e," (RoBERTa model)"),Z0e.forEach(t),G$o=i(P),Q3=n(P,"LI",{});var eye=s(Q3);hce=n(eye,"STRONG",{});var Iat=s(hce);O$o=r(Iat,"roformer"),Iat.forEach(t),V$o=r(eye," \u2014 "),iD=n(eye,"A",{href:!0});var qat=s(iD);X$o=r(qat,"RoFormerForQuestionAnswering"),qat.forEach(t),z$o=r(eye," (RoFormer model)"),eye.forEach(t),Q$o=i(P),W3=n(P,"LI",{});var oye=s(W3);pce=n(oye,"STRONG",{});var Nat=s(pce);W$o=r(Nat,"splinter"),Nat.forEach(t),H$o=r(oye," \u2014 "),dD=n(oye,"A",{href:!0});var jat=s(dD);U$o=r(jat,"SplinterForQuestionAnswering"),jat.forEach(t),J$o=r(oye," (Splinter model)"),oye.forEach(t),Y$o=i(P),H3=n(P,"LI",{});var rye=s(H3);_ce=n(rye,"STRONG",{});var Dat=s(_ce);K$o=r(Dat,"squeezebert"),Dat.forEach(t),Z$o=r(rye," \u2014 "),cD=n(rye,"A",{href:!0});var Gat=s(cD);eIo=r(Gat,"SqueezeBertForQuestionAnswering"),Gat.forEach(t),oIo=r(rye," (SqueezeBERT model)"),rye.forEach(t),rIo=i(P),U3=n(P,"LI",{});var tye=s(U3);uce=n(tye,"STRONG",{});var Oat=s(uce);tIo=r(Oat,"xlm"),Oat.forEach(t),aIo=r(tye," \u2014 "),fD=n(tye,"A",{href:!0});var Vat=s(fD);nIo=r(Vat,"XLMForQuestionAnsweringSimple"),Vat.forEach(t),sIo=r(tye," (XLM model)"),tye.forEach(t),lIo=i(P),J3=n(P,"LI",{});var aye=s(J3);bce=n(aye,"STRONG",{});var Xat=s(bce);iIo=r(Xat,"xlm-roberta"),Xat.forEach(t),dIo=r(aye," \u2014 "),mD=n(aye,"A",{href:!0});var zat=s(mD);cIo=r(zat,"XLMRobertaForQuestionAnswering"),zat.forEach(t),fIo=r(aye," (XLM-RoBERTa model)"),aye.forEach(t),mIo=i(P),Y3=n(P,"LI",{});var nye=s(Y3);Fce=n(nye,"STRONG",{});var Qat=s(Fce);gIo=r(Qat,"xlm-roberta-xl"),Qat.forEach(t),hIo=r(nye," \u2014 "),gD=n(nye,"A",{href:!0});var Wat=s(gD);pIo=r(Wat,"XLMRobertaXLForQuestionAnswering"),Wat.forEach(t),_Io=r(nye," (XLM-RoBERTa-XL model)"),nye.forEach(t),uIo=i(P),K3=n(P,"LI",{});var sye=s(K3);vce=n(sye,"STRONG",{});var Hat=s(vce);bIo=r(Hat,"xlnet"),Hat.forEach(t),FIo=r(sye," \u2014 "),hD=n(sye,"A",{href:!0});var Uat=s(hD);vIo=r(Uat,"XLNetForQuestionAnsweringSimple"),Uat.forEach(t),TIo=r(sye," (XLNet model)"),sye.forEach(t),MIo=i(P),Z3=n(P,"LI",{});var lye=s(Z3);Tce=n(lye,"STRONG",{});var Jat=s(Tce);EIo=r(Jat,"yoso"),Jat.forEach(t),CIo=r(lye," \u2014 "),pD=n(lye,"A",{href:!0});var Yat=s(pD);wIo=r(Yat,"YosoForQuestionAnswering"),Yat.forEach(t),AIo=r(lye," (YOSO model)"),lye.forEach(t),P.forEach(t),yIo=i(Ut),e2=n(Ut,"P",{});var iye=s(e2);LIo=r(iye,"The model is set in evaluation mode by default using "),Mce=n(iye,"CODE",{});var Kat=s(Mce);xIo=r(Kat,"model.eval()"),Kat.forEach(t),kIo=r(iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ece=n(iye,"CODE",{});var Zat=s(Ece);SIo=r(Zat,"model.train()"),Zat.forEach(t),iye.forEach(t),RIo=i(Ut),Cce=n(Ut,"P",{});var ent=s(Cce);BIo=r(ent,"Examples:"),ent.forEach(t),PIo=i(Ut),m(fw.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),vRe=i(c),Ad=n(c,"H2",{class:!0});var xPe=s(Ad);o2=n(xPe,"A",{id:!0,class:!0,href:!0});var ont=s(o2);wce=n(ont,"SPAN",{});var rnt=s(wce);m(mw.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),$Io=i(xPe),Ace=n(xPe,"SPAN",{});var tnt=s(Ace);IIo=r(tnt,"AutoModelForTableQuestionAnswering"),tnt.forEach(t),xPe.forEach(t),TRe=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(gw.$$.fragment,gl),qIo=i(gl),yd=n(gl,"P",{});var uU=s(yd);NIo=r(uU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_D=n(uU,"A",{href:!0});var ant=s(_D);jIo=r(ant,"from_pretrained()"),ant.forEach(t),DIo=r(uU," class method or the "),uD=n(uU,"A",{href:!0});var nnt=s(uD);GIo=r(nnt,"from_config()"),nnt.forEach(t),OIo=r(uU,` class
method.`),uU.forEach(t),VIo=i(gl),hw=n(gl,"P",{});var kPe=s(hw);XIo=r(kPe,"This class cannot be instantiated directly using "),yce=n(kPe,"CODE",{});var snt=s(yce);zIo=r(snt,"__init__()"),snt.forEach(t),QIo=r(kPe," (throws an error)."),kPe.forEach(t),WIo=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(pw.$$.fragment,hl),HIo=i(hl),Lce=n(hl,"P",{});var lnt=s(Lce);UIo=r(lnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lnt.forEach(t),JIo=i(hl),Ld=n(hl,"P",{});var bU=s(Ld);YIo=r(bU,`Note:
Loading a model from its configuration file does `),xce=n(bU,"STRONG",{});var int=s(xce);KIo=r(int,"not"),int.forEach(t),ZIo=r(bU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bD=n(bU,"A",{href:!0});var dnt=s(bD);eqo=r(dnt,"from_pretrained()"),dnt.forEach(t),oqo=r(bU," to load the model weights."),bU.forEach(t),rqo=i(hl),kce=n(hl,"P",{});var cnt=s(kce);tqo=r(cnt,"Examples:"),cnt.forEach(t),aqo=i(hl),m(_w.$$.fragment,hl),hl.forEach(t),nqo=i(gl),We=n(gl,"DIV",{class:!0});var Jt=s(We);m(uw.$$.fragment,Jt),sqo=i(Jt),Sce=n(Jt,"P",{});var fnt=s(Sce);lqo=r(fnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fnt.forEach(t),iqo=i(Jt),en=n(Jt,"P",{});var kE=s(en);dqo=r(kE,"The model class to instantiate is selected based on the "),Rce=n(kE,"CODE",{});var mnt=s(Rce);cqo=r(mnt,"model_type"),mnt.forEach(t),fqo=r(kE,` property of the config object (either
passed as an argument or loaded from `),Bce=n(kE,"CODE",{});var gnt=s(Bce);mqo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),gqo=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pce=n(kE,"CODE",{});var hnt=s(Pce);hqo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),pqo=r(kE,":"),kE.forEach(t),_qo=i(Jt),$ce=n(Jt,"UL",{});var pnt=s($ce);r2=n(pnt,"LI",{});var dye=s(r2);Ice=n(dye,"STRONG",{});var _nt=s(Ice);uqo=r(_nt,"tapas"),_nt.forEach(t),bqo=r(dye," \u2014 "),FD=n(dye,"A",{href:!0});var unt=s(FD);Fqo=r(unt,"TapasForQuestionAnswering"),unt.forEach(t),vqo=r(dye," (TAPAS model)"),dye.forEach(t),pnt.forEach(t),Tqo=i(Jt),t2=n(Jt,"P",{});var cye=s(t2);Mqo=r(cye,"The model is set in evaluation mode by default using "),qce=n(cye,"CODE",{});var bnt=s(qce);Eqo=r(bnt,"model.eval()"),bnt.forEach(t),Cqo=r(cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nce=n(cye,"CODE",{});var Fnt=s(Nce);wqo=r(Fnt,"model.train()"),Fnt.forEach(t),cye.forEach(t),Aqo=i(Jt),jce=n(Jt,"P",{});var vnt=s(jce);yqo=r(vnt,"Examples:"),vnt.forEach(t),Lqo=i(Jt),m(bw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),MRe=i(c),xd=n(c,"H2",{class:!0});var SPe=s(xd);a2=n(SPe,"A",{id:!0,class:!0,href:!0});var Tnt=s(a2);Dce=n(Tnt,"SPAN",{});var Mnt=s(Dce);m(Fw.$$.fragment,Mnt),Mnt.forEach(t),Tnt.forEach(t),xqo=i(SPe),Gce=n(SPe,"SPAN",{});var Ent=s(Gce);kqo=r(Ent,"AutoModelForImageClassification"),Ent.forEach(t),SPe.forEach(t),ERe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(vw.$$.fragment,pl),Sqo=i(pl),kd=n(pl,"P",{});var FU=s(kd);Rqo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vD=n(FU,"A",{href:!0});var Cnt=s(vD);Bqo=r(Cnt,"from_pretrained()"),Cnt.forEach(t),Pqo=r(FU," class method or the "),TD=n(FU,"A",{href:!0});var wnt=s(TD);$qo=r(wnt,"from_config()"),wnt.forEach(t),Iqo=r(FU,` class
method.`),FU.forEach(t),qqo=i(pl),Tw=n(pl,"P",{});var RPe=s(Tw);Nqo=r(RPe,"This class cannot be instantiated directly using "),Oce=n(RPe,"CODE",{});var Ant=s(Oce);jqo=r(Ant,"__init__()"),Ant.forEach(t),Dqo=r(RPe," (throws an error)."),RPe.forEach(t),Gqo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(Mw.$$.fragment,_l),Oqo=i(_l),Vce=n(_l,"P",{});var ynt=s(Vce);Vqo=r(ynt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ynt.forEach(t),Xqo=i(_l),Sd=n(_l,"P",{});var vU=s(Sd);zqo=r(vU,`Note:
Loading a model from its configuration file does `),Xce=n(vU,"STRONG",{});var Lnt=s(Xce);Qqo=r(Lnt,"not"),Lnt.forEach(t),Wqo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MD=n(vU,"A",{href:!0});var xnt=s(MD);Hqo=r(xnt,"from_pretrained()"),xnt.forEach(t),Uqo=r(vU," to load the model weights."),vU.forEach(t),Jqo=i(_l),zce=n(_l,"P",{});var knt=s(zce);Yqo=r(knt,"Examples:"),knt.forEach(t),Kqo=i(_l),m(Ew.$$.fragment,_l),_l.forEach(t),Zqo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);m(Cw.$$.fragment,Yt),eNo=i(Yt),Qce=n(Yt,"P",{});var Snt=s(Qce);oNo=r(Snt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Snt.forEach(t),rNo=i(Yt),on=n(Yt,"P",{});var SE=s(on);tNo=r(SE,"The model class to instantiate is selected based on the "),Wce=n(SE,"CODE",{});var Rnt=s(Wce);aNo=r(Rnt,"model_type"),Rnt.forEach(t),nNo=r(SE,` property of the config object (either
passed as an argument or loaded from `),Hce=n(SE,"CODE",{});var Bnt=s(Hce);sNo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),lNo=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uce=n(SE,"CODE",{});var Pnt=s(Uce);iNo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),dNo=r(SE,":"),SE.forEach(t),cNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);n2=n(Te,"LI",{});var fye=s(n2);Jce=n(fye,"STRONG",{});var $nt=s(Jce);fNo=r($nt,"beit"),$nt.forEach(t),mNo=r(fye," \u2014 "),ED=n(fye,"A",{href:!0});var Int=s(ED);gNo=r(Int,"BeitForImageClassification"),Int.forEach(t),hNo=r(fye," (BEiT model)"),fye.forEach(t),pNo=i(Te),s2=n(Te,"LI",{});var mye=s(s2);Yce=n(mye,"STRONG",{});var qnt=s(Yce);_No=r(qnt,"convnext"),qnt.forEach(t),uNo=r(mye," \u2014 "),CD=n(mye,"A",{href:!0});var Nnt=s(CD);bNo=r(Nnt,"ConvNextForImageClassification"),Nnt.forEach(t),FNo=r(mye," (ConvNext model)"),mye.forEach(t),vNo=i(Te),Ds=n(Te,"LI",{});var s9=s(Ds);Kce=n(s9,"STRONG",{});var jnt=s(Kce);TNo=r(jnt,"deit"),jnt.forEach(t),MNo=r(s9," \u2014 "),wD=n(s9,"A",{href:!0});var Dnt=s(wD);ENo=r(Dnt,"DeiTForImageClassification"),Dnt.forEach(t),CNo=r(s9," or "),AD=n(s9,"A",{href:!0});var Gnt=s(AD);wNo=r(Gnt,"DeiTForImageClassificationWithTeacher"),Gnt.forEach(t),ANo=r(s9," (DeiT model)"),s9.forEach(t),yNo=i(Te),l2=n(Te,"LI",{});var gye=s(l2);Zce=n(gye,"STRONG",{});var Ont=s(Zce);LNo=r(Ont,"imagegpt"),Ont.forEach(t),xNo=r(gye," \u2014 "),yD=n(gye,"A",{href:!0});var Vnt=s(yD);kNo=r(Vnt,"ImageGPTForImageClassification"),Vnt.forEach(t),SNo=r(gye," (ImageGPT model)"),gye.forEach(t),RNo=i(Te),ma=n(Te,"LI",{});var $f=s(ma);efe=n($f,"STRONG",{});var Xnt=s(efe);BNo=r(Xnt,"perceiver"),Xnt.forEach(t),PNo=r($f," \u2014 "),LD=n($f,"A",{href:!0});var znt=s(LD);$No=r(znt,"PerceiverForImageClassificationLearned"),znt.forEach(t),INo=r($f," or "),xD=n($f,"A",{href:!0});var Qnt=s(xD);qNo=r(Qnt,"PerceiverForImageClassificationFourier"),Qnt.forEach(t),NNo=r($f," or "),kD=n($f,"A",{href:!0});var Wnt=s(kD);jNo=r(Wnt,"PerceiverForImageClassificationConvProcessing"),Wnt.forEach(t),DNo=r($f," (Perceiver model)"),$f.forEach(t),GNo=i(Te),i2=n(Te,"LI",{});var hye=s(i2);ofe=n(hye,"STRONG",{});var Hnt=s(ofe);ONo=r(Hnt,"poolformer"),Hnt.forEach(t),VNo=r(hye," \u2014 "),SD=n(hye,"A",{href:!0});var Unt=s(SD);XNo=r(Unt,"PoolFormerForImageClassification"),Unt.forEach(t),zNo=r(hye," (PoolFormer model)"),hye.forEach(t),QNo=i(Te),d2=n(Te,"LI",{});var pye=s(d2);rfe=n(pye,"STRONG",{});var Jnt=s(rfe);WNo=r(Jnt,"resnet"),Jnt.forEach(t),HNo=r(pye," \u2014 "),RD=n(pye,"A",{href:!0});var Ynt=s(RD);UNo=r(Ynt,"ResNetForImageClassification"),Ynt.forEach(t),JNo=r(pye," (ResNet model)"),pye.forEach(t),YNo=i(Te),c2=n(Te,"LI",{});var _ye=s(c2);tfe=n(_ye,"STRONG",{});var Knt=s(tfe);KNo=r(Knt,"segformer"),Knt.forEach(t),ZNo=r(_ye," \u2014 "),BD=n(_ye,"A",{href:!0});var Znt=s(BD);ejo=r(Znt,"SegformerForImageClassification"),Znt.forEach(t),ojo=r(_ye," (SegFormer model)"),_ye.forEach(t),rjo=i(Te),f2=n(Te,"LI",{});var uye=s(f2);afe=n(uye,"STRONG",{});var est=s(afe);tjo=r(est,"swin"),est.forEach(t),ajo=r(uye," \u2014 "),PD=n(uye,"A",{href:!0});var ost=s(PD);njo=r(ost,"SwinForImageClassification"),ost.forEach(t),sjo=r(uye," (Swin model)"),uye.forEach(t),ljo=i(Te),m2=n(Te,"LI",{});var bye=s(m2);nfe=n(bye,"STRONG",{});var rst=s(nfe);ijo=r(rst,"van"),rst.forEach(t),djo=r(bye," \u2014 "),$D=n(bye,"A",{href:!0});var tst=s($D);cjo=r(tst,"VanForImageClassification"),tst.forEach(t),fjo=r(bye," (VAN model)"),bye.forEach(t),mjo=i(Te),g2=n(Te,"LI",{});var Fye=s(g2);sfe=n(Fye,"STRONG",{});var ast=s(sfe);gjo=r(ast,"vit"),ast.forEach(t),hjo=r(Fye," \u2014 "),ID=n(Fye,"A",{href:!0});var nst=s(ID);pjo=r(nst,"ViTForImageClassification"),nst.forEach(t),_jo=r(Fye," (ViT model)"),Fye.forEach(t),Te.forEach(t),ujo=i(Yt),h2=n(Yt,"P",{});var vye=s(h2);bjo=r(vye,"The model is set in evaluation mode by default using "),lfe=n(vye,"CODE",{});var sst=s(lfe);Fjo=r(sst,"model.eval()"),sst.forEach(t),vjo=r(vye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(vye,"CODE",{});var lst=s(ife);Tjo=r(lst,"model.train()"),lst.forEach(t),vye.forEach(t),Mjo=i(Yt),dfe=n(Yt,"P",{});var ist=s(dfe);Ejo=r(ist,"Examples:"),ist.forEach(t),Cjo=i(Yt),m(ww.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),CRe=i(c),Rd=n(c,"H2",{class:!0});var BPe=s(Rd);p2=n(BPe,"A",{id:!0,class:!0,href:!0});var dst=s(p2);cfe=n(dst,"SPAN",{});var cst=s(cfe);m(Aw.$$.fragment,cst),cst.forEach(t),dst.forEach(t),wjo=i(BPe),ffe=n(BPe,"SPAN",{});var fst=s(ffe);Ajo=r(fst,"AutoModelForVision2Seq"),fst.forEach(t),BPe.forEach(t),wRe=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(yw.$$.fragment,ul),yjo=i(ul),Bd=n(ul,"P",{});var TU=s(Bd);Ljo=r(TU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),qD=n(TU,"A",{href:!0});var mst=s(qD);xjo=r(mst,"from_pretrained()"),mst.forEach(t),kjo=r(TU," class method or the "),ND=n(TU,"A",{href:!0});var gst=s(ND);Sjo=r(gst,"from_config()"),gst.forEach(t),Rjo=r(TU,` class
method.`),TU.forEach(t),Bjo=i(ul),Lw=n(ul,"P",{});var PPe=s(Lw);Pjo=r(PPe,"This class cannot be instantiated directly using "),mfe=n(PPe,"CODE",{});var hst=s(mfe);$jo=r(hst,"__init__()"),hst.forEach(t),Ijo=r(PPe," (throws an error)."),PPe.forEach(t),qjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(xw.$$.fragment,bl),Njo=i(bl),gfe=n(bl,"P",{});var pst=s(gfe);jjo=r(pst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),pst.forEach(t),Djo=i(bl),Pd=n(bl,"P",{});var MU=s(Pd);Gjo=r(MU,`Note:
Loading a model from its configuration file does `),hfe=n(MU,"STRONG",{});var _st=s(hfe);Ojo=r(_st,"not"),_st.forEach(t),Vjo=r(MU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jD=n(MU,"A",{href:!0});var ust=s(jD);Xjo=r(ust,"from_pretrained()"),ust.forEach(t),zjo=r(MU," to load the model weights."),MU.forEach(t),Qjo=i(bl),pfe=n(bl,"P",{});var bst=s(pfe);Wjo=r(bst,"Examples:"),bst.forEach(t),Hjo=i(bl),m(kw.$$.fragment,bl),bl.forEach(t),Ujo=i(ul),Ue=n(ul,"DIV",{class:!0});var Kt=s(Ue);m(Sw.$$.fragment,Kt),Jjo=i(Kt),_fe=n(Kt,"P",{});var Fst=s(_fe);Yjo=r(Fst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fst.forEach(t),Kjo=i(Kt),rn=n(Kt,"P",{});var RE=s(rn);Zjo=r(RE,"The model class to instantiate is selected based on the "),ufe=n(RE,"CODE",{});var vst=s(ufe);eDo=r(vst,"model_type"),vst.forEach(t),oDo=r(RE,` property of the config object (either
passed as an argument or loaded from `),bfe=n(RE,"CODE",{});var Tst=s(bfe);rDo=r(Tst,"pretrained_model_name_or_path"),Tst.forEach(t),tDo=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ffe=n(RE,"CODE",{});var Mst=s(Ffe);aDo=r(Mst,"pretrained_model_name_or_path"),Mst.forEach(t),nDo=r(RE,":"),RE.forEach(t),sDo=i(Kt),vfe=n(Kt,"UL",{});var Est=s(vfe);_2=n(Est,"LI",{});var Tye=s(_2);Tfe=n(Tye,"STRONG",{});var Cst=s(Tfe);lDo=r(Cst,"vision-encoder-decoder"),Cst.forEach(t),iDo=r(Tye," \u2014 "),DD=n(Tye,"A",{href:!0});var wst=s(DD);dDo=r(wst,"VisionEncoderDecoderModel"),wst.forEach(t),cDo=r(Tye," (Vision Encoder decoder model)"),Tye.forEach(t),Est.forEach(t),fDo=i(Kt),u2=n(Kt,"P",{});var Mye=s(u2);mDo=r(Mye,"The model is set in evaluation mode by default using "),Mfe=n(Mye,"CODE",{});var Ast=s(Mfe);gDo=r(Ast,"model.eval()"),Ast.forEach(t),hDo=r(Mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(Mye,"CODE",{});var yst=s(Efe);pDo=r(yst,"model.train()"),yst.forEach(t),Mye.forEach(t),_Do=i(Kt),Cfe=n(Kt,"P",{});var Lst=s(Cfe);uDo=r(Lst,"Examples:"),Lst.forEach(t),bDo=i(Kt),m(Rw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),ARe=i(c),$d=n(c,"H2",{class:!0});var $Pe=s($d);b2=n($Pe,"A",{id:!0,class:!0,href:!0});var xst=s(b2);wfe=n(xst,"SPAN",{});var kst=s(wfe);m(Bw.$$.fragment,kst),kst.forEach(t),xst.forEach(t),FDo=i($Pe),Afe=n($Pe,"SPAN",{});var Sst=s(Afe);vDo=r(Sst,"AutoModelForAudioClassification"),Sst.forEach(t),$Pe.forEach(t),yRe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(Pw.$$.fragment,Fl),TDo=i(Fl),Id=n(Fl,"P",{});var EU=s(Id);MDo=r(EU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),GD=n(EU,"A",{href:!0});var Rst=s(GD);EDo=r(Rst,"from_pretrained()"),Rst.forEach(t),CDo=r(EU," class method or the "),OD=n(EU,"A",{href:!0});var Bst=s(OD);wDo=r(Bst,"from_config()"),Bst.forEach(t),ADo=r(EU,` class
method.`),EU.forEach(t),yDo=i(Fl),$w=n(Fl,"P",{});var IPe=s($w);LDo=r(IPe,"This class cannot be instantiated directly using "),yfe=n(IPe,"CODE",{});var Pst=s(yfe);xDo=r(Pst,"__init__()"),Pst.forEach(t),kDo=r(IPe," (throws an error)."),IPe.forEach(t),SDo=i(Fl),tt=n(Fl,"DIV",{class:!0});var vl=s(tt);m(Iw.$$.fragment,vl),RDo=i(vl),Lfe=n(vl,"P",{});var $st=s(Lfe);BDo=r($st,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),$st.forEach(t),PDo=i(vl),qd=n(vl,"P",{});var CU=s(qd);$Do=r(CU,`Note:
Loading a model from its configuration file does `),xfe=n(CU,"STRONG",{});var Ist=s(xfe);IDo=r(Ist,"not"),Ist.forEach(t),qDo=r(CU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(CU,"A",{href:!0});var qst=s(VD);NDo=r(qst,"from_pretrained()"),qst.forEach(t),jDo=r(CU," to load the model weights."),CU.forEach(t),DDo=i(vl),kfe=n(vl,"P",{});var Nst=s(kfe);GDo=r(Nst,"Examples:"),Nst.forEach(t),ODo=i(vl),m(qw.$$.fragment,vl),vl.forEach(t),VDo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Nw.$$.fragment,Zt),XDo=i(Zt),Sfe=n(Zt,"P",{});var jst=s(Sfe);zDo=r(jst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),jst.forEach(t),QDo=i(Zt),tn=n(Zt,"P",{});var BE=s(tn);WDo=r(BE,"The model class to instantiate is selected based on the "),Rfe=n(BE,"CODE",{});var Dst=s(Rfe);HDo=r(Dst,"model_type"),Dst.forEach(t),UDo=r(BE,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(BE,"CODE",{});var Gst=s(Bfe);JDo=r(Gst,"pretrained_model_name_or_path"),Gst.forEach(t),YDo=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(BE,"CODE",{});var Ost=s(Pfe);KDo=r(Ost,"pretrained_model_name_or_path"),Ost.forEach(t),ZDo=r(BE,":"),BE.forEach(t),eGo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);F2=n(Do,"LI",{});var Eye=s(F2);$fe=n(Eye,"STRONG",{});var Vst=s($fe);oGo=r(Vst,"data2vec-audio"),Vst.forEach(t),rGo=r(Eye," \u2014 "),XD=n(Eye,"A",{href:!0});var Xst=s(XD);tGo=r(Xst,"Data2VecAudioForSequenceClassification"),Xst.forEach(t),aGo=r(Eye," (Data2VecAudio model)"),Eye.forEach(t),nGo=i(Do),v2=n(Do,"LI",{});var Cye=s(v2);Ife=n(Cye,"STRONG",{});var zst=s(Ife);sGo=r(zst,"hubert"),zst.forEach(t),lGo=r(Cye," \u2014 "),zD=n(Cye,"A",{href:!0});var Qst=s(zD);iGo=r(Qst,"HubertForSequenceClassification"),Qst.forEach(t),dGo=r(Cye," (Hubert model)"),Cye.forEach(t),cGo=i(Do),T2=n(Do,"LI",{});var wye=s(T2);qfe=n(wye,"STRONG",{});var Wst=s(qfe);fGo=r(Wst,"sew"),Wst.forEach(t),mGo=r(wye," \u2014 "),QD=n(wye,"A",{href:!0});var Hst=s(QD);gGo=r(Hst,"SEWForSequenceClassification"),Hst.forEach(t),hGo=r(wye," (SEW model)"),wye.forEach(t),pGo=i(Do),M2=n(Do,"LI",{});var Aye=s(M2);Nfe=n(Aye,"STRONG",{});var Ust=s(Nfe);_Go=r(Ust,"sew-d"),Ust.forEach(t),uGo=r(Aye," \u2014 "),WD=n(Aye,"A",{href:!0});var Jst=s(WD);bGo=r(Jst,"SEWDForSequenceClassification"),Jst.forEach(t),FGo=r(Aye," (SEW-D model)"),Aye.forEach(t),vGo=i(Do),E2=n(Do,"LI",{});var yye=s(E2);jfe=n(yye,"STRONG",{});var Yst=s(jfe);TGo=r(Yst,"unispeech"),Yst.forEach(t),MGo=r(yye," \u2014 "),HD=n(yye,"A",{href:!0});var Kst=s(HD);EGo=r(Kst,"UniSpeechForSequenceClassification"),Kst.forEach(t),CGo=r(yye," (UniSpeech model)"),yye.forEach(t),wGo=i(Do),C2=n(Do,"LI",{});var Lye=s(C2);Dfe=n(Lye,"STRONG",{});var Zst=s(Dfe);AGo=r(Zst,"unispeech-sat"),Zst.forEach(t),yGo=r(Lye," \u2014 "),UD=n(Lye,"A",{href:!0});var elt=s(UD);LGo=r(elt,"UniSpeechSatForSequenceClassification"),elt.forEach(t),xGo=r(Lye," (UniSpeechSat model)"),Lye.forEach(t),kGo=i(Do),w2=n(Do,"LI",{});var xye=s(w2);Gfe=n(xye,"STRONG",{});var olt=s(Gfe);SGo=r(olt,"wav2vec2"),olt.forEach(t),RGo=r(xye," \u2014 "),JD=n(xye,"A",{href:!0});var rlt=s(JD);BGo=r(rlt,"Wav2Vec2ForSequenceClassification"),rlt.forEach(t),PGo=r(xye," (Wav2Vec2 model)"),xye.forEach(t),$Go=i(Do),A2=n(Do,"LI",{});var kye=s(A2);Ofe=n(kye,"STRONG",{});var tlt=s(Ofe);IGo=r(tlt,"wavlm"),tlt.forEach(t),qGo=r(kye," \u2014 "),YD=n(kye,"A",{href:!0});var alt=s(YD);NGo=r(alt,"WavLMForSequenceClassification"),alt.forEach(t),jGo=r(kye," (WavLM model)"),kye.forEach(t),Do.forEach(t),DGo=i(Zt),y2=n(Zt,"P",{});var Sye=s(y2);GGo=r(Sye,"The model is set in evaluation mode by default using "),Vfe=n(Sye,"CODE",{});var nlt=s(Vfe);OGo=r(nlt,"model.eval()"),nlt.forEach(t),VGo=r(Sye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xfe=n(Sye,"CODE",{});var slt=s(Xfe);XGo=r(slt,"model.train()"),slt.forEach(t),Sye.forEach(t),zGo=i(Zt),zfe=n(Zt,"P",{});var llt=s(zfe);QGo=r(llt,"Examples:"),llt.forEach(t),WGo=i(Zt),m(jw.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),LRe=i(c),Nd=n(c,"H2",{class:!0});var qPe=s(Nd);L2=n(qPe,"A",{id:!0,class:!0,href:!0});var ilt=s(L2);Qfe=n(ilt,"SPAN",{});var dlt=s(Qfe);m(Dw.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),HGo=i(qPe),Wfe=n(qPe,"SPAN",{});var clt=s(Wfe);UGo=r(clt,"AutoModelForAudioFrameClassification"),clt.forEach(t),qPe.forEach(t),xRe=i(c),cr=n(c,"DIV",{class:!0});var Tl=s(cr);m(Gw.$$.fragment,Tl),JGo=i(Tl),jd=n(Tl,"P",{});var wU=s(jd);YGo=r(wU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),KD=n(wU,"A",{href:!0});var flt=s(KD);KGo=r(flt,"from_pretrained()"),flt.forEach(t),ZGo=r(wU," class method or the "),ZD=n(wU,"A",{href:!0});var mlt=s(ZD);eOo=r(mlt,"from_config()"),mlt.forEach(t),oOo=r(wU,` class
method.`),wU.forEach(t),rOo=i(Tl),Ow=n(Tl,"P",{});var NPe=s(Ow);tOo=r(NPe,"This class cannot be instantiated directly using "),Hfe=n(NPe,"CODE",{});var glt=s(Hfe);aOo=r(glt,"__init__()"),glt.forEach(t),nOo=r(NPe," (throws an error)."),NPe.forEach(t),sOo=i(Tl),at=n(Tl,"DIV",{class:!0});var Ml=s(at);m(Vw.$$.fragment,Ml),lOo=i(Ml),Ufe=n(Ml,"P",{});var hlt=s(Ufe);iOo=r(hlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),hlt.forEach(t),dOo=i(Ml),Dd=n(Ml,"P",{});var AU=s(Dd);cOo=r(AU,`Note:
Loading a model from its configuration file does `),Jfe=n(AU,"STRONG",{});var plt=s(Jfe);fOo=r(plt,"not"),plt.forEach(t),mOo=r(AU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eG=n(AU,"A",{href:!0});var _lt=s(eG);gOo=r(_lt,"from_pretrained()"),_lt.forEach(t),hOo=r(AU," to load the model weights."),AU.forEach(t),pOo=i(Ml),Yfe=n(Ml,"P",{});var ult=s(Yfe);_Oo=r(ult,"Examples:"),ult.forEach(t),uOo=i(Ml),m(Xw.$$.fragment,Ml),Ml.forEach(t),bOo=i(Tl),Ye=n(Tl,"DIV",{class:!0});var ea=s(Ye);m(zw.$$.fragment,ea),FOo=i(ea),Kfe=n(ea,"P",{});var blt=s(Kfe);vOo=r(blt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),blt.forEach(t),TOo=i(ea),an=n(ea,"P",{});var PE=s(an);MOo=r(PE,"The model class to instantiate is selected based on the "),Zfe=n(PE,"CODE",{});var Flt=s(Zfe);EOo=r(Flt,"model_type"),Flt.forEach(t),COo=r(PE,` property of the config object (either
passed as an argument or loaded from `),eme=n(PE,"CODE",{});var vlt=s(eme);wOo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),AOo=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(PE,"CODE",{});var Tlt=s(ome);yOo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),LOo=r(PE,":"),PE.forEach(t),xOo=i(ea),nn=n(ea,"UL",{});var $E=s(nn);x2=n($E,"LI",{});var Rye=s(x2);rme=n(Rye,"STRONG",{});var Mlt=s(rme);kOo=r(Mlt,"data2vec-audio"),Mlt.forEach(t),SOo=r(Rye," \u2014 "),oG=n(Rye,"A",{href:!0});var Elt=s(oG);ROo=r(Elt,"Data2VecAudioForAudioFrameClassification"),Elt.forEach(t),BOo=r(Rye," (Data2VecAudio model)"),Rye.forEach(t),POo=i($E),k2=n($E,"LI",{});var Bye=s(k2);tme=n(Bye,"STRONG",{});var Clt=s(tme);$Oo=r(Clt,"unispeech-sat"),Clt.forEach(t),IOo=r(Bye," \u2014 "),rG=n(Bye,"A",{href:!0});var wlt=s(rG);qOo=r(wlt,"UniSpeechSatForAudioFrameClassification"),wlt.forEach(t),NOo=r(Bye," (UniSpeechSat model)"),Bye.forEach(t),jOo=i($E),S2=n($E,"LI",{});var Pye=s(S2);ame=n(Pye,"STRONG",{});var Alt=s(ame);DOo=r(Alt,"wav2vec2"),Alt.forEach(t),GOo=r(Pye," \u2014 "),tG=n(Pye,"A",{href:!0});var ylt=s(tG);OOo=r(ylt,"Wav2Vec2ForAudioFrameClassification"),ylt.forEach(t),VOo=r(Pye," (Wav2Vec2 model)"),Pye.forEach(t),XOo=i($E),R2=n($E,"LI",{});var $ye=s(R2);nme=n($ye,"STRONG",{});var Llt=s(nme);zOo=r(Llt,"wavlm"),Llt.forEach(t),QOo=r($ye," \u2014 "),aG=n($ye,"A",{href:!0});var xlt=s(aG);WOo=r(xlt,"WavLMForAudioFrameClassification"),xlt.forEach(t),HOo=r($ye," (WavLM model)"),$ye.forEach(t),$E.forEach(t),UOo=i(ea),B2=n(ea,"P",{});var Iye=s(B2);JOo=r(Iye,"The model is set in evaluation mode by default using "),sme=n(Iye,"CODE",{});var klt=s(sme);YOo=r(klt,"model.eval()"),klt.forEach(t),KOo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(Iye,"CODE",{});var Slt=s(lme);ZOo=r(Slt,"model.train()"),Slt.forEach(t),Iye.forEach(t),eVo=i(ea),ime=n(ea,"P",{});var Rlt=s(ime);oVo=r(Rlt,"Examples:"),Rlt.forEach(t),rVo=i(ea),m(Qw.$$.fragment,ea),ea.forEach(t),Tl.forEach(t),kRe=i(c),Gd=n(c,"H2",{class:!0});var jPe=s(Gd);P2=n(jPe,"A",{id:!0,class:!0,href:!0});var Blt=s(P2);dme=n(Blt,"SPAN",{});var Plt=s(dme);m(Ww.$$.fragment,Plt),Plt.forEach(t),Blt.forEach(t),tVo=i(jPe),cme=n(jPe,"SPAN",{});var $lt=s(cme);aVo=r($lt,"AutoModelForCTC"),$lt.forEach(t),jPe.forEach(t),SRe=i(c),fr=n(c,"DIV",{class:!0});var El=s(fr);m(Hw.$$.fragment,El),nVo=i(El),Od=n(El,"P",{});var yU=s(Od);sVo=r(yU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nG=n(yU,"A",{href:!0});var Ilt=s(nG);lVo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),iVo=r(yU," class method or the "),sG=n(yU,"A",{href:!0});var qlt=s(sG);dVo=r(qlt,"from_config()"),qlt.forEach(t),cVo=r(yU,` class
method.`),yU.forEach(t),fVo=i(El),Uw=n(El,"P",{});var DPe=s(Uw);mVo=r(DPe,"This class cannot be instantiated directly using "),fme=n(DPe,"CODE",{});var Nlt=s(fme);gVo=r(Nlt,"__init__()"),Nlt.forEach(t),hVo=r(DPe," (throws an error)."),DPe.forEach(t),pVo=i(El),nt=n(El,"DIV",{class:!0});var Cl=s(nt);m(Jw.$$.fragment,Cl),_Vo=i(Cl),mme=n(Cl,"P",{});var jlt=s(mme);uVo=r(jlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),jlt.forEach(t),bVo=i(Cl),Vd=n(Cl,"P",{});var LU=s(Vd);FVo=r(LU,`Note:
Loading a model from its configuration file does `),gme=n(LU,"STRONG",{});var Dlt=s(gme);vVo=r(Dlt,"not"),Dlt.forEach(t),TVo=r(LU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(LU,"A",{href:!0});var Glt=s(lG);MVo=r(Glt,"from_pretrained()"),Glt.forEach(t),EVo=r(LU," to load the model weights."),LU.forEach(t),CVo=i(Cl),hme=n(Cl,"P",{});var Olt=s(hme);wVo=r(Olt,"Examples:"),Olt.forEach(t),AVo=i(Cl),m(Yw.$$.fragment,Cl),Cl.forEach(t),yVo=i(El),Ke=n(El,"DIV",{class:!0});var oa=s(Ke);m(Kw.$$.fragment,oa),LVo=i(oa),pme=n(oa,"P",{});var Vlt=s(pme);xVo=r(Vlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vlt.forEach(t),kVo=i(oa),sn=n(oa,"P",{});var IE=s(sn);SVo=r(IE,"The model class to instantiate is selected based on the "),_me=n(IE,"CODE",{});var Xlt=s(_me);RVo=r(Xlt,"model_type"),Xlt.forEach(t),BVo=r(IE,` property of the config object (either
passed as an argument or loaded from `),ume=n(IE,"CODE",{});var zlt=s(ume);PVo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),$Vo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bme=n(IE,"CODE",{});var Qlt=s(bme);IVo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),qVo=r(IE,":"),IE.forEach(t),NVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);$2=n(Go,"LI",{});var qye=s($2);Fme=n(qye,"STRONG",{});var Wlt=s(Fme);jVo=r(Wlt,"data2vec-audio"),Wlt.forEach(t),DVo=r(qye," \u2014 "),iG=n(qye,"A",{href:!0});var Hlt=s(iG);GVo=r(Hlt,"Data2VecAudioForCTC"),Hlt.forEach(t),OVo=r(qye," (Data2VecAudio model)"),qye.forEach(t),VVo=i(Go),I2=n(Go,"LI",{});var Nye=s(I2);vme=n(Nye,"STRONG",{});var Ult=s(vme);XVo=r(Ult,"hubert"),Ult.forEach(t),zVo=r(Nye," \u2014 "),dG=n(Nye,"A",{href:!0});var Jlt=s(dG);QVo=r(Jlt,"HubertForCTC"),Jlt.forEach(t),WVo=r(Nye," (Hubert model)"),Nye.forEach(t),HVo=i(Go),q2=n(Go,"LI",{});var jye=s(q2);Tme=n(jye,"STRONG",{});var Ylt=s(Tme);UVo=r(Ylt,"sew"),Ylt.forEach(t),JVo=r(jye," \u2014 "),cG=n(jye,"A",{href:!0});var Klt=s(cG);YVo=r(Klt,"SEWForCTC"),Klt.forEach(t),KVo=r(jye," (SEW model)"),jye.forEach(t),ZVo=i(Go),N2=n(Go,"LI",{});var Dye=s(N2);Mme=n(Dye,"STRONG",{});var Zlt=s(Mme);eXo=r(Zlt,"sew-d"),Zlt.forEach(t),oXo=r(Dye," \u2014 "),fG=n(Dye,"A",{href:!0});var eit=s(fG);rXo=r(eit,"SEWDForCTC"),eit.forEach(t),tXo=r(Dye," (SEW-D model)"),Dye.forEach(t),aXo=i(Go),j2=n(Go,"LI",{});var Gye=s(j2);Eme=n(Gye,"STRONG",{});var oit=s(Eme);nXo=r(oit,"unispeech"),oit.forEach(t),sXo=r(Gye," \u2014 "),mG=n(Gye,"A",{href:!0});var rit=s(mG);lXo=r(rit,"UniSpeechForCTC"),rit.forEach(t),iXo=r(Gye," (UniSpeech model)"),Gye.forEach(t),dXo=i(Go),D2=n(Go,"LI",{});var Oye=s(D2);Cme=n(Oye,"STRONG",{});var tit=s(Cme);cXo=r(tit,"unispeech-sat"),tit.forEach(t),fXo=r(Oye," \u2014 "),gG=n(Oye,"A",{href:!0});var ait=s(gG);mXo=r(ait,"UniSpeechSatForCTC"),ait.forEach(t),gXo=r(Oye," (UniSpeechSat model)"),Oye.forEach(t),hXo=i(Go),G2=n(Go,"LI",{});var Vye=s(G2);wme=n(Vye,"STRONG",{});var nit=s(wme);pXo=r(nit,"wav2vec2"),nit.forEach(t),_Xo=r(Vye," \u2014 "),hG=n(Vye,"A",{href:!0});var sit=s(hG);uXo=r(sit,"Wav2Vec2ForCTC"),sit.forEach(t),bXo=r(Vye," (Wav2Vec2 model)"),Vye.forEach(t),FXo=i(Go),O2=n(Go,"LI",{});var Xye=s(O2);Ame=n(Xye,"STRONG",{});var lit=s(Ame);vXo=r(lit,"wavlm"),lit.forEach(t),TXo=r(Xye," \u2014 "),pG=n(Xye,"A",{href:!0});var iit=s(pG);MXo=r(iit,"WavLMForCTC"),iit.forEach(t),EXo=r(Xye," (WavLM model)"),Xye.forEach(t),Go.forEach(t),CXo=i(oa),V2=n(oa,"P",{});var zye=s(V2);wXo=r(zye,"The model is set in evaluation mode by default using "),yme=n(zye,"CODE",{});var dit=s(yme);AXo=r(dit,"model.eval()"),dit.forEach(t),yXo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n(zye,"CODE",{});var cit=s(Lme);LXo=r(cit,"model.train()"),cit.forEach(t),zye.forEach(t),xXo=i(oa),xme=n(oa,"P",{});var fit=s(xme);kXo=r(fit,"Examples:"),fit.forEach(t),SXo=i(oa),m(Zw.$$.fragment,oa),oa.forEach(t),El.forEach(t),RRe=i(c),Xd=n(c,"H2",{class:!0});var GPe=s(Xd);X2=n(GPe,"A",{id:!0,class:!0,href:!0});var mit=s(X2);kme=n(mit,"SPAN",{});var git=s(kme);m(eA.$$.fragment,git),git.forEach(t),mit.forEach(t),RXo=i(GPe),Sme=n(GPe,"SPAN",{});var hit=s(Sme);BXo=r(hit,"AutoModelForSpeechSeq2Seq"),hit.forEach(t),GPe.forEach(t),BRe=i(c),mr=n(c,"DIV",{class:!0});var wl=s(mr);m(oA.$$.fragment,wl),PXo=i(wl),zd=n(wl,"P",{});var xU=s(zd);$Xo=r(xU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),_G=n(xU,"A",{href:!0});var pit=s(_G);IXo=r(pit,"from_pretrained()"),pit.forEach(t),qXo=r(xU," class method or the "),uG=n(xU,"A",{href:!0});var _it=s(uG);NXo=r(_it,"from_config()"),_it.forEach(t),jXo=r(xU,` class
method.`),xU.forEach(t),DXo=i(wl),rA=n(wl,"P",{});var OPe=s(rA);GXo=r(OPe,"This class cannot be instantiated directly using "),Rme=n(OPe,"CODE",{});var uit=s(Rme);OXo=r(uit,"__init__()"),uit.forEach(t),VXo=r(OPe," (throws an error)."),OPe.forEach(t),XXo=i(wl),st=n(wl,"DIV",{class:!0});var Al=s(st);m(tA.$$.fragment,Al),zXo=i(Al),Bme=n(Al,"P",{});var bit=s(Bme);QXo=r(bit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bit.forEach(t),WXo=i(Al),Qd=n(Al,"P",{});var kU=s(Qd);HXo=r(kU,`Note:
Loading a model from its configuration file does `),Pme=n(kU,"STRONG",{});var Fit=s(Pme);UXo=r(Fit,"not"),Fit.forEach(t),JXo=r(kU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(kU,"A",{href:!0});var vit=s(bG);YXo=r(vit,"from_pretrained()"),vit.forEach(t),KXo=r(kU," to load the model weights."),kU.forEach(t),ZXo=i(Al),$me=n(Al,"P",{});var Tit=s($me);ezo=r(Tit,"Examples:"),Tit.forEach(t),ozo=i(Al),m(aA.$$.fragment,Al),Al.forEach(t),rzo=i(wl),Ze=n(wl,"DIV",{class:!0});var ra=s(Ze);m(nA.$$.fragment,ra),tzo=i(ra),Ime=n(ra,"P",{});var Mit=s(Ime);azo=r(Mit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Mit.forEach(t),nzo=i(ra),ln=n(ra,"P",{});var qE=s(ln);szo=r(qE,"The model class to instantiate is selected based on the "),qme=n(qE,"CODE",{});var Eit=s(qme);lzo=r(Eit,"model_type"),Eit.forEach(t),izo=r(qE,` property of the config object (either
passed as an argument or loaded from `),Nme=n(qE,"CODE",{});var Cit=s(Nme);dzo=r(Cit,"pretrained_model_name_or_path"),Cit.forEach(t),czo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jme=n(qE,"CODE",{});var wit=s(jme);fzo=r(wit,"pretrained_model_name_or_path"),wit.forEach(t),mzo=r(qE,":"),qE.forEach(t),gzo=i(ra),sA=n(ra,"UL",{});var VPe=s(sA);z2=n(VPe,"LI",{});var Qye=s(z2);Dme=n(Qye,"STRONG",{});var Ait=s(Dme);hzo=r(Ait,"speech-encoder-decoder"),Ait.forEach(t),pzo=r(Qye," \u2014 "),FG=n(Qye,"A",{href:!0});var yit=s(FG);_zo=r(yit,"SpeechEncoderDecoderModel"),yit.forEach(t),uzo=r(Qye," (Speech Encoder decoder model)"),Qye.forEach(t),bzo=i(VPe),Q2=n(VPe,"LI",{});var Wye=s(Q2);Gme=n(Wye,"STRONG",{});var Lit=s(Gme);Fzo=r(Lit,"speech_to_text"),Lit.forEach(t),vzo=r(Wye," \u2014 "),vG=n(Wye,"A",{href:!0});var xit=s(vG);Tzo=r(xit,"Speech2TextForConditionalGeneration"),xit.forEach(t),Mzo=r(Wye," (Speech2Text model)"),Wye.forEach(t),VPe.forEach(t),Ezo=i(ra),W2=n(ra,"P",{});var Hye=s(W2);Czo=r(Hye,"The model is set in evaluation mode by default using "),Ome=n(Hye,"CODE",{});var kit=s(Ome);wzo=r(kit,"model.eval()"),kit.forEach(t),Azo=r(Hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vme=n(Hye,"CODE",{});var Sit=s(Vme);yzo=r(Sit,"model.train()"),Sit.forEach(t),Hye.forEach(t),Lzo=i(ra),Xme=n(ra,"P",{});var Rit=s(Xme);xzo=r(Rit,"Examples:"),Rit.forEach(t),kzo=i(ra),m(lA.$$.fragment,ra),ra.forEach(t),wl.forEach(t),PRe=i(c),Wd=n(c,"H2",{class:!0});var XPe=s(Wd);H2=n(XPe,"A",{id:!0,class:!0,href:!0});var Bit=s(H2);zme=n(Bit,"SPAN",{});var Pit=s(zme);m(iA.$$.fragment,Pit),Pit.forEach(t),Bit.forEach(t),Szo=i(XPe),Qme=n(XPe,"SPAN",{});var $it=s(Qme);Rzo=r($it,"AutoModelForAudioXVector"),$it.forEach(t),XPe.forEach(t),$Re=i(c),gr=n(c,"DIV",{class:!0});var yl=s(gr);m(dA.$$.fragment,yl),Bzo=i(yl),Hd=n(yl,"P",{});var SU=s(Hd);Pzo=r(SU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),TG=n(SU,"A",{href:!0});var Iit=s(TG);$zo=r(Iit,"from_pretrained()"),Iit.forEach(t),Izo=r(SU," class method or the "),MG=n(SU,"A",{href:!0});var qit=s(MG);qzo=r(qit,"from_config()"),qit.forEach(t),Nzo=r(SU,` class
method.`),SU.forEach(t),jzo=i(yl),cA=n(yl,"P",{});var zPe=s(cA);Dzo=r(zPe,"This class cannot be instantiated directly using "),Wme=n(zPe,"CODE",{});var Nit=s(Wme);Gzo=r(Nit,"__init__()"),Nit.forEach(t),Ozo=r(zPe," (throws an error)."),zPe.forEach(t),Vzo=i(yl),lt=n(yl,"DIV",{class:!0});var Ll=s(lt);m(fA.$$.fragment,Ll),Xzo=i(Ll),Hme=n(Ll,"P",{});var jit=s(Hme);zzo=r(jit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),jit.forEach(t),Qzo=i(Ll),Ud=n(Ll,"P",{});var RU=s(Ud);Wzo=r(RU,`Note:
Loading a model from its configuration file does `),Ume=n(RU,"STRONG",{});var Dit=s(Ume);Hzo=r(Dit,"not"),Dit.forEach(t),Uzo=r(RU,` load the model weights. It only affects the
model\u2019s configuration. Use `),EG=n(RU,"A",{href:!0});var Git=s(EG);Jzo=r(Git,"from_pretrained()"),Git.forEach(t),Yzo=r(RU," to load the model weights."),RU.forEach(t),Kzo=i(Ll),Jme=n(Ll,"P",{});var Oit=s(Jme);Zzo=r(Oit,"Examples:"),Oit.forEach(t),eQo=i(Ll),m(mA.$$.fragment,Ll),Ll.forEach(t),oQo=i(yl),eo=n(yl,"DIV",{class:!0});var ta=s(eo);m(gA.$$.fragment,ta),rQo=i(ta),Yme=n(ta,"P",{});var Vit=s(Yme);tQo=r(Vit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Vit.forEach(t),aQo=i(ta),dn=n(ta,"P",{});var NE=s(dn);nQo=r(NE,"The model class to instantiate is selected based on the "),Kme=n(NE,"CODE",{});var Xit=s(Kme);sQo=r(Xit,"model_type"),Xit.forEach(t),lQo=r(NE,` property of the config object (either
passed as an argument or loaded from `),Zme=n(NE,"CODE",{});var zit=s(Zme);iQo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),dQo=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(NE,"CODE",{});var Qit=s(ege);cQo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),fQo=r(NE,":"),NE.forEach(t),mQo=i(ta),cn=n(ta,"UL",{});var jE=s(cn);U2=n(jE,"LI",{});var Uye=s(U2);oge=n(Uye,"STRONG",{});var Wit=s(oge);gQo=r(Wit,"data2vec-audio"),Wit.forEach(t),hQo=r(Uye," \u2014 "),CG=n(Uye,"A",{href:!0});var Hit=s(CG);pQo=r(Hit,"Data2VecAudioForXVector"),Hit.forEach(t),_Qo=r(Uye," (Data2VecAudio model)"),Uye.forEach(t),uQo=i(jE),J2=n(jE,"LI",{});var Jye=s(J2);rge=n(Jye,"STRONG",{});var Uit=s(rge);bQo=r(Uit,"unispeech-sat"),Uit.forEach(t),FQo=r(Jye," \u2014 "),wG=n(Jye,"A",{href:!0});var Jit=s(wG);vQo=r(Jit,"UniSpeechSatForXVector"),Jit.forEach(t),TQo=r(Jye," (UniSpeechSat model)"),Jye.forEach(t),MQo=i(jE),Y2=n(jE,"LI",{});var Yye=s(Y2);tge=n(Yye,"STRONG",{});var Yit=s(tge);EQo=r(Yit,"wav2vec2"),Yit.forEach(t),CQo=r(Yye," \u2014 "),AG=n(Yye,"A",{href:!0});var Kit=s(AG);wQo=r(Kit,"Wav2Vec2ForXVector"),Kit.forEach(t),AQo=r(Yye," (Wav2Vec2 model)"),Yye.forEach(t),yQo=i(jE),K2=n(jE,"LI",{});var Kye=s(K2);age=n(Kye,"STRONG",{});var Zit=s(age);LQo=r(Zit,"wavlm"),Zit.forEach(t),xQo=r(Kye," \u2014 "),yG=n(Kye,"A",{href:!0});var edt=s(yG);kQo=r(edt,"WavLMForXVector"),edt.forEach(t),SQo=r(Kye," (WavLM model)"),Kye.forEach(t),jE.forEach(t),RQo=i(ta),Z2=n(ta,"P",{});var Zye=s(Z2);BQo=r(Zye,"The model is set in evaluation mode by default using "),nge=n(Zye,"CODE",{});var odt=s(nge);PQo=r(odt,"model.eval()"),odt.forEach(t),$Qo=r(Zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(Zye,"CODE",{});var rdt=s(sge);IQo=r(rdt,"model.train()"),rdt.forEach(t),Zye.forEach(t),qQo=i(ta),lge=n(ta,"P",{});var tdt=s(lge);NQo=r(tdt,"Examples:"),tdt.forEach(t),jQo=i(ta),m(hA.$$.fragment,ta),ta.forEach(t),yl.forEach(t),IRe=i(c),Jd=n(c,"H2",{class:!0});var QPe=s(Jd);eF=n(QPe,"A",{id:!0,class:!0,href:!0});var adt=s(eF);ige=n(adt,"SPAN",{});var ndt=s(ige);m(pA.$$.fragment,ndt),ndt.forEach(t),adt.forEach(t),DQo=i(QPe),dge=n(QPe,"SPAN",{});var sdt=s(dge);GQo=r(sdt,"AutoModelForMaskedImageModeling"),sdt.forEach(t),QPe.forEach(t),qRe=i(c),hr=n(c,"DIV",{class:!0});var xl=s(hr);m(_A.$$.fragment,xl),OQo=i(xl),Yd=n(xl,"P",{});var BU=s(Yd);VQo=r(BU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),LG=n(BU,"A",{href:!0});var ldt=s(LG);XQo=r(ldt,"from_pretrained()"),ldt.forEach(t),zQo=r(BU," class method or the "),xG=n(BU,"A",{href:!0});var idt=s(xG);QQo=r(idt,"from_config()"),idt.forEach(t),WQo=r(BU,` class
method.`),BU.forEach(t),HQo=i(xl),uA=n(xl,"P",{});var WPe=s(uA);UQo=r(WPe,"This class cannot be instantiated directly using "),cge=n(WPe,"CODE",{});var ddt=s(cge);JQo=r(ddt,"__init__()"),ddt.forEach(t),YQo=r(WPe," (throws an error)."),WPe.forEach(t),KQo=i(xl),it=n(xl,"DIV",{class:!0});var kl=s(it);m(bA.$$.fragment,kl),ZQo=i(kl),fge=n(kl,"P",{});var cdt=s(fge);eWo=r(cdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cdt.forEach(t),oWo=i(kl),Kd=n(kl,"P",{});var PU=s(Kd);rWo=r(PU,`Note:
Loading a model from its configuration file does `),mge=n(PU,"STRONG",{});var fdt=s(mge);tWo=r(fdt,"not"),fdt.forEach(t),aWo=r(PU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kG=n(PU,"A",{href:!0});var mdt=s(kG);nWo=r(mdt,"from_pretrained()"),mdt.forEach(t),sWo=r(PU," to load the model weights."),PU.forEach(t),lWo=i(kl),gge=n(kl,"P",{});var gdt=s(gge);iWo=r(gdt,"Examples:"),gdt.forEach(t),dWo=i(kl),m(FA.$$.fragment,kl),kl.forEach(t),cWo=i(xl),oo=n(xl,"DIV",{class:!0});var aa=s(oo);m(vA.$$.fragment,aa),fWo=i(aa),hge=n(aa,"P",{});var hdt=s(hge);mWo=r(hdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),hdt.forEach(t),gWo=i(aa),fn=n(aa,"P",{});var DE=s(fn);hWo=r(DE,"The model class to instantiate is selected based on the "),pge=n(DE,"CODE",{});var pdt=s(pge);pWo=r(pdt,"model_type"),pdt.forEach(t),_Wo=r(DE,` property of the config object (either
passed as an argument or loaded from `),_ge=n(DE,"CODE",{});var _dt=s(_ge);uWo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),bWo=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uge=n(DE,"CODE",{});var udt=s(uge);FWo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),vWo=r(DE,":"),DE.forEach(t),TWo=i(aa),Zd=n(aa,"UL",{});var $U=s(Zd);oF=n($U,"LI",{});var eLe=s(oF);bge=n(eLe,"STRONG",{});var bdt=s(bge);MWo=r(bdt,"deit"),bdt.forEach(t),EWo=r(eLe," \u2014 "),SG=n(eLe,"A",{href:!0});var Fdt=s(SG);CWo=r(Fdt,"DeiTForMaskedImageModeling"),Fdt.forEach(t),wWo=r(eLe," (DeiT model)"),eLe.forEach(t),AWo=i($U),rF=n($U,"LI",{});var oLe=s(rF);Fge=n(oLe,"STRONG",{});var vdt=s(Fge);yWo=r(vdt,"swin"),vdt.forEach(t),LWo=r(oLe," \u2014 "),RG=n(oLe,"A",{href:!0});var Tdt=s(RG);xWo=r(Tdt,"SwinForMaskedImageModeling"),Tdt.forEach(t),kWo=r(oLe," (Swin model)"),oLe.forEach(t),SWo=i($U),tF=n($U,"LI",{});var rLe=s(tF);vge=n(rLe,"STRONG",{});var Mdt=s(vge);RWo=r(Mdt,"vit"),Mdt.forEach(t),BWo=r(rLe," \u2014 "),BG=n(rLe,"A",{href:!0});var Edt=s(BG);PWo=r(Edt,"ViTForMaskedImageModeling"),Edt.forEach(t),$Wo=r(rLe," (ViT model)"),rLe.forEach(t),$U.forEach(t),IWo=i(aa),aF=n(aa,"P",{});var tLe=s(aF);qWo=r(tLe,"The model is set in evaluation mode by default using "),Tge=n(tLe,"CODE",{});var Cdt=s(Tge);NWo=r(Cdt,"model.eval()"),Cdt.forEach(t),jWo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mge=n(tLe,"CODE",{});var wdt=s(Mge);DWo=r(wdt,"model.train()"),wdt.forEach(t),tLe.forEach(t),GWo=i(aa),Ege=n(aa,"P",{});var Adt=s(Ege);OWo=r(Adt,"Examples:"),Adt.forEach(t),VWo=i(aa),m(TA.$$.fragment,aa),aa.forEach(t),xl.forEach(t),NRe=i(c),ec=n(c,"H2",{class:!0});var HPe=s(ec);nF=n(HPe,"A",{id:!0,class:!0,href:!0});var ydt=s(nF);Cge=n(ydt,"SPAN",{});var Ldt=s(Cge);m(MA.$$.fragment,Ldt),Ldt.forEach(t),ydt.forEach(t),XWo=i(HPe),wge=n(HPe,"SPAN",{});var xdt=s(wge);zWo=r(xdt,"AutoModelForObjectDetection"),xdt.forEach(t),HPe.forEach(t),jRe=i(c),pr=n(c,"DIV",{class:!0});var Sl=s(pr);m(EA.$$.fragment,Sl),QWo=i(Sl),oc=n(Sl,"P",{});var IU=s(oc);WWo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),PG=n(IU,"A",{href:!0});var kdt=s(PG);HWo=r(kdt,"from_pretrained()"),kdt.forEach(t),UWo=r(IU," class method or the "),$G=n(IU,"A",{href:!0});var Sdt=s($G);JWo=r(Sdt,"from_config()"),Sdt.forEach(t),YWo=r(IU,` class
method.`),IU.forEach(t),KWo=i(Sl),CA=n(Sl,"P",{});var UPe=s(CA);ZWo=r(UPe,"This class cannot be instantiated directly using "),Age=n(UPe,"CODE",{});var Rdt=s(Age);eHo=r(Rdt,"__init__()"),Rdt.forEach(t),oHo=r(UPe," (throws an error)."),UPe.forEach(t),rHo=i(Sl),dt=n(Sl,"DIV",{class:!0});var Rl=s(dt);m(wA.$$.fragment,Rl),tHo=i(Rl),yge=n(Rl,"P",{});var Bdt=s(yge);aHo=r(Bdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bdt.forEach(t),nHo=i(Rl),rc=n(Rl,"P",{});var qU=s(rc);sHo=r(qU,`Note:
Loading a model from its configuration file does `),Lge=n(qU,"STRONG",{});var Pdt=s(Lge);lHo=r(Pdt,"not"),Pdt.forEach(t),iHo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(qU,"A",{href:!0});var $dt=s(IG);dHo=r($dt,"from_pretrained()"),$dt.forEach(t),cHo=r(qU," to load the model weights."),qU.forEach(t),fHo=i(Rl),xge=n(Rl,"P",{});var Idt=s(xge);mHo=r(Idt,"Examples:"),Idt.forEach(t),gHo=i(Rl),m(AA.$$.fragment,Rl),Rl.forEach(t),hHo=i(Sl),ro=n(Sl,"DIV",{class:!0});var na=s(ro);m(yA.$$.fragment,na),pHo=i(na),kge=n(na,"P",{});var qdt=s(kge);_Ho=r(qdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),qdt.forEach(t),uHo=i(na),mn=n(na,"P",{});var GE=s(mn);bHo=r(GE,"The model class to instantiate is selected based on the "),Sge=n(GE,"CODE",{});var Ndt=s(Sge);FHo=r(Ndt,"model_type"),Ndt.forEach(t),vHo=r(GE,` property of the config object (either
passed as an argument or loaded from `),Rge=n(GE,"CODE",{});var jdt=s(Rge);THo=r(jdt,"pretrained_model_name_or_path"),jdt.forEach(t),MHo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bge=n(GE,"CODE",{});var Ddt=s(Bge);EHo=r(Ddt,"pretrained_model_name_or_path"),Ddt.forEach(t),CHo=r(GE,":"),GE.forEach(t),wHo=i(na),Pge=n(na,"UL",{});var Gdt=s(Pge);sF=n(Gdt,"LI",{});var aLe=s(sF);$ge=n(aLe,"STRONG",{});var Odt=s($ge);AHo=r(Odt,"detr"),Odt.forEach(t),yHo=r(aLe," \u2014 "),qG=n(aLe,"A",{href:!0});var Vdt=s(qG);LHo=r(Vdt,"DetrForObjectDetection"),Vdt.forEach(t),xHo=r(aLe," (DETR model)"),aLe.forEach(t),Gdt.forEach(t),kHo=i(na),lF=n(na,"P",{});var nLe=s(lF);SHo=r(nLe,"The model is set in evaluation mode by default using "),Ige=n(nLe,"CODE",{});var Xdt=s(Ige);RHo=r(Xdt,"model.eval()"),Xdt.forEach(t),BHo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(nLe,"CODE",{});var zdt=s(qge);PHo=r(zdt,"model.train()"),zdt.forEach(t),nLe.forEach(t),$Ho=i(na),Nge=n(na,"P",{});var Qdt=s(Nge);IHo=r(Qdt,"Examples:"),Qdt.forEach(t),qHo=i(na),m(LA.$$.fragment,na),na.forEach(t),Sl.forEach(t),DRe=i(c),tc=n(c,"H2",{class:!0});var JPe=s(tc);iF=n(JPe,"A",{id:!0,class:!0,href:!0});var Wdt=s(iF);jge=n(Wdt,"SPAN",{});var Hdt=s(jge);m(xA.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),NHo=i(JPe),Dge=n(JPe,"SPAN",{});var Udt=s(Dge);jHo=r(Udt,"AutoModelForImageSegmentation"),Udt.forEach(t),JPe.forEach(t),GRe=i(c),_r=n(c,"DIV",{class:!0});var Bl=s(_r);m(kA.$$.fragment,Bl),DHo=i(Bl),ac=n(Bl,"P",{});var NU=s(ac);GHo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),NG=n(NU,"A",{href:!0});var Jdt=s(NG);OHo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),VHo=r(NU," class method or the "),jG=n(NU,"A",{href:!0});var Ydt=s(jG);XHo=r(Ydt,"from_config()"),Ydt.forEach(t),zHo=r(NU,` class
method.`),NU.forEach(t),QHo=i(Bl),SA=n(Bl,"P",{});var YPe=s(SA);WHo=r(YPe,"This class cannot be instantiated directly using "),Gge=n(YPe,"CODE",{});var Kdt=s(Gge);HHo=r(Kdt,"__init__()"),Kdt.forEach(t),UHo=r(YPe," (throws an error)."),YPe.forEach(t),JHo=i(Bl),ct=n(Bl,"DIV",{class:!0});var Pl=s(ct);m(RA.$$.fragment,Pl),YHo=i(Pl),Oge=n(Pl,"P",{});var Zdt=s(Oge);KHo=r(Zdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Zdt.forEach(t),ZHo=i(Pl),nc=n(Pl,"P",{});var jU=s(nc);eUo=r(jU,`Note:
Loading a model from its configuration file does `),Vge=n(jU,"STRONG",{});var ect=s(Vge);oUo=r(ect,"not"),ect.forEach(t),rUo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(jU,"A",{href:!0});var oct=s(DG);tUo=r(oct,"from_pretrained()"),oct.forEach(t),aUo=r(jU," to load the model weights."),jU.forEach(t),nUo=i(Pl),Xge=n(Pl,"P",{});var rct=s(Xge);sUo=r(rct,"Examples:"),rct.forEach(t),lUo=i(Pl),m(BA.$$.fragment,Pl),Pl.forEach(t),iUo=i(Bl),to=n(Bl,"DIV",{class:!0});var sa=s(to);m(PA.$$.fragment,sa),dUo=i(sa),zge=n(sa,"P",{});var tct=s(zge);cUo=r(tct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),tct.forEach(t),fUo=i(sa),gn=n(sa,"P",{});var OE=s(gn);mUo=r(OE,"The model class to instantiate is selected based on the "),Qge=n(OE,"CODE",{});var act=s(Qge);gUo=r(act,"model_type"),act.forEach(t),hUo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Wge=n(OE,"CODE",{});var nct=s(Wge);pUo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),_Uo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hge=n(OE,"CODE",{});var sct=s(Hge);uUo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),bUo=r(OE,":"),OE.forEach(t),FUo=i(sa),Uge=n(sa,"UL",{});var lct=s(Uge);dF=n(lct,"LI",{});var sLe=s(dF);Jge=n(sLe,"STRONG",{});var ict=s(Jge);vUo=r(ict,"detr"),ict.forEach(t),TUo=r(sLe," \u2014 "),GG=n(sLe,"A",{href:!0});var dct=s(GG);MUo=r(dct,"DetrForSegmentation"),dct.forEach(t),EUo=r(sLe," (DETR model)"),sLe.forEach(t),lct.forEach(t),CUo=i(sa),cF=n(sa,"P",{});var lLe=s(cF);wUo=r(lLe,"The model is set in evaluation mode by default using "),Yge=n(lLe,"CODE",{});var cct=s(Yge);AUo=r(cct,"model.eval()"),cct.forEach(t),yUo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kge=n(lLe,"CODE",{});var fct=s(Kge);LUo=r(fct,"model.train()"),fct.forEach(t),lLe.forEach(t),xUo=i(sa),Zge=n(sa,"P",{});var mct=s(Zge);kUo=r(mct,"Examples:"),mct.forEach(t),SUo=i(sa),m($A.$$.fragment,sa),sa.forEach(t),Bl.forEach(t),ORe=i(c),sc=n(c,"H2",{class:!0});var KPe=s(sc);fF=n(KPe,"A",{id:!0,class:!0,href:!0});var gct=s(fF);ehe=n(gct,"SPAN",{});var hct=s(ehe);m(IA.$$.fragment,hct),hct.forEach(t),gct.forEach(t),RUo=i(KPe),ohe=n(KPe,"SPAN",{});var pct=s(ohe);BUo=r(pct,"AutoModelForSemanticSegmentation"),pct.forEach(t),KPe.forEach(t),VRe=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(qA.$$.fragment,$l),PUo=i($l),lc=n($l,"P",{});var DU=s(lc);$Uo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),OG=n(DU,"A",{href:!0});var _ct=s(OG);IUo=r(_ct,"from_pretrained()"),_ct.forEach(t),qUo=r(DU," class method or the "),VG=n(DU,"A",{href:!0});var uct=s(VG);NUo=r(uct,"from_config()"),uct.forEach(t),jUo=r(DU,` class
method.`),DU.forEach(t),DUo=i($l),NA=n($l,"P",{});var ZPe=s(NA);GUo=r(ZPe,"This class cannot be instantiated directly using "),rhe=n(ZPe,"CODE",{});var bct=s(rhe);OUo=r(bct,"__init__()"),bct.forEach(t),VUo=r(ZPe," (throws an error)."),ZPe.forEach(t),XUo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(jA.$$.fragment,Il),zUo=i(Il),the=n(Il,"P",{});var Fct=s(the);QUo=r(Fct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fct.forEach(t),WUo=i(Il),ic=n(Il,"P",{});var GU=s(ic);HUo=r(GU,`Note:
Loading a model from its configuration file does `),ahe=n(GU,"STRONG",{});var vct=s(ahe);UUo=r(vct,"not"),vct.forEach(t),JUo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XG=n(GU,"A",{href:!0});var Tct=s(XG);YUo=r(Tct,"from_pretrained()"),Tct.forEach(t),KUo=r(GU," to load the model weights."),GU.forEach(t),ZUo=i(Il),nhe=n(Il,"P",{});var Mct=s(nhe);eJo=r(Mct,"Examples:"),Mct.forEach(t),oJo=i(Il),m(DA.$$.fragment,Il),Il.forEach(t),rJo=i($l),ao=n($l,"DIV",{class:!0});var la=s(ao);m(GA.$$.fragment,la),tJo=i(la),she=n(la,"P",{});var Ect=s(she);aJo=r(Ect,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ect.forEach(t),nJo=i(la),hn=n(la,"P",{});var VE=s(hn);sJo=r(VE,"The model class to instantiate is selected based on the "),lhe=n(VE,"CODE",{});var Cct=s(lhe);lJo=r(Cct,"model_type"),Cct.forEach(t),iJo=r(VE,` property of the config object (either
passed as an argument or loaded from `),ihe=n(VE,"CODE",{});var wct=s(ihe);dJo=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),cJo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dhe=n(VE,"CODE",{});var Act=s(dhe);fJo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),mJo=r(VE,":"),VE.forEach(t),gJo=i(la),dc=n(la,"UL",{});var OU=s(dc);mF=n(OU,"LI",{});var iLe=s(mF);che=n(iLe,"STRONG",{});var yct=s(che);hJo=r(yct,"beit"),yct.forEach(t),pJo=r(iLe," \u2014 "),zG=n(iLe,"A",{href:!0});var Lct=s(zG);_Jo=r(Lct,"BeitForSemanticSegmentation"),Lct.forEach(t),uJo=r(iLe," (BEiT model)"),iLe.forEach(t),bJo=i(OU),gF=n(OU,"LI",{});var dLe=s(gF);fhe=n(dLe,"STRONG",{});var xct=s(fhe);FJo=r(xct,"dpt"),xct.forEach(t),vJo=r(dLe," \u2014 "),QG=n(dLe,"A",{href:!0});var kct=s(QG);TJo=r(kct,"DPTForSemanticSegmentation"),kct.forEach(t),MJo=r(dLe," (DPT model)"),dLe.forEach(t),EJo=i(OU),hF=n(OU,"LI",{});var cLe=s(hF);mhe=n(cLe,"STRONG",{});var Sct=s(mhe);CJo=r(Sct,"segformer"),Sct.forEach(t),wJo=r(cLe," \u2014 "),WG=n(cLe,"A",{href:!0});var Rct=s(WG);AJo=r(Rct,"SegformerForSemanticSegmentation"),Rct.forEach(t),yJo=r(cLe," (SegFormer model)"),cLe.forEach(t),OU.forEach(t),LJo=i(la),pF=n(la,"P",{});var fLe=s(pF);xJo=r(fLe,"The model is set in evaluation mode by default using "),ghe=n(fLe,"CODE",{});var Bct=s(ghe);kJo=r(Bct,"model.eval()"),Bct.forEach(t),SJo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hhe=n(fLe,"CODE",{});var Pct=s(hhe);RJo=r(Pct,"model.train()"),Pct.forEach(t),fLe.forEach(t),BJo=i(la),phe=n(la,"P",{});var $ct=s(phe);PJo=r($ct,"Examples:"),$ct.forEach(t),$Jo=i(la),m(OA.$$.fragment,la),la.forEach(t),$l.forEach(t),XRe=i(c),cc=n(c,"H2",{class:!0});var e$e=s(cc);_F=n(e$e,"A",{id:!0,class:!0,href:!0});var Ict=s(_F);_he=n(Ict,"SPAN",{});var qct=s(_he);m(VA.$$.fragment,qct),qct.forEach(t),Ict.forEach(t),IJo=i(e$e),uhe=n(e$e,"SPAN",{});var Nct=s(uhe);qJo=r(Nct,"AutoModelForInstanceSegmentation"),Nct.forEach(t),e$e.forEach(t),zRe=i(c),br=n(c,"DIV",{class:!0});var ql=s(br);m(XA.$$.fragment,ql),NJo=i(ql),fc=n(ql,"P",{});var VU=s(fc);jJo=r(VU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),HG=n(VU,"A",{href:!0});var jct=s(HG);DJo=r(jct,"from_pretrained()"),jct.forEach(t),GJo=r(VU," class method or the "),UG=n(VU,"A",{href:!0});var Dct=s(UG);OJo=r(Dct,"from_config()"),Dct.forEach(t),VJo=r(VU,` class
method.`),VU.forEach(t),XJo=i(ql),zA=n(ql,"P",{});var o$e=s(zA);zJo=r(o$e,"This class cannot be instantiated directly using "),bhe=n(o$e,"CODE",{});var Gct=s(bhe);QJo=r(Gct,"__init__()"),Gct.forEach(t),WJo=r(o$e," (throws an error)."),o$e.forEach(t),HJo=i(ql),mt=n(ql,"DIV",{class:!0});var Nl=s(mt);m(QA.$$.fragment,Nl),UJo=i(Nl),Fhe=n(Nl,"P",{});var Oct=s(Fhe);JJo=r(Oct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Oct.forEach(t),YJo=i(Nl),mc=n(Nl,"P",{});var XU=s(mc);KJo=r(XU,`Note:
Loading a model from its configuration file does `),vhe=n(XU,"STRONG",{});var Vct=s(vhe);ZJo=r(Vct,"not"),Vct.forEach(t),eYo=r(XU,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(XU,"A",{href:!0});var Xct=s(JG);oYo=r(Xct,"from_pretrained()"),Xct.forEach(t),rYo=r(XU," to load the model weights."),XU.forEach(t),tYo=i(Nl),The=n(Nl,"P",{});var zct=s(The);aYo=r(zct,"Examples:"),zct.forEach(t),nYo=i(Nl),m(WA.$$.fragment,Nl),Nl.forEach(t),sYo=i(ql),no=n(ql,"DIV",{class:!0});var ia=s(no);m(HA.$$.fragment,ia),lYo=i(ia),Mhe=n(ia,"P",{});var Qct=s(Mhe);iYo=r(Qct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Qct.forEach(t),dYo=i(ia),pn=n(ia,"P",{});var XE=s(pn);cYo=r(XE,"The model class to instantiate is selected based on the "),Ehe=n(XE,"CODE",{});var Wct=s(Ehe);fYo=r(Wct,"model_type"),Wct.forEach(t),mYo=r(XE,` property of the config object (either
passed as an argument or loaded from `),Che=n(XE,"CODE",{});var Hct=s(Che);gYo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),hYo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),whe=n(XE,"CODE",{});var Uct=s(whe);pYo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),_Yo=r(XE,":"),XE.forEach(t),uYo=i(ia),Ahe=n(ia,"UL",{});var Jct=s(Ahe);uF=n(Jct,"LI",{});var mLe=s(uF);yhe=n(mLe,"STRONG",{});var Yct=s(yhe);bYo=r(Yct,"maskformer"),Yct.forEach(t),FYo=r(mLe," \u2014 "),YG=n(mLe,"A",{href:!0});var Kct=s(YG);vYo=r(Kct,"MaskFormerForInstanceSegmentation"),Kct.forEach(t),TYo=r(mLe," (MaskFormer model)"),mLe.forEach(t),Jct.forEach(t),MYo=i(ia),bF=n(ia,"P",{});var gLe=s(bF);EYo=r(gLe,"The model is set in evaluation mode by default using "),Lhe=n(gLe,"CODE",{});var Zct=s(Lhe);CYo=r(Zct,"model.eval()"),Zct.forEach(t),wYo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(gLe,"CODE",{});var eft=s(xhe);AYo=r(eft,"model.train()"),eft.forEach(t),gLe.forEach(t),yYo=i(ia),khe=n(ia,"P",{});var oft=s(khe);LYo=r(oft,"Examples:"),oft.forEach(t),xYo=i(ia),m(UA.$$.fragment,ia),ia.forEach(t),ql.forEach(t),QRe=i(c),gc=n(c,"H2",{class:!0});var r$e=s(gc);FF=n(r$e,"A",{id:!0,class:!0,href:!0});var rft=s(FF);She=n(rft,"SPAN",{});var tft=s(She);m(JA.$$.fragment,tft),tft.forEach(t),rft.forEach(t),kYo=i(r$e),Rhe=n(r$e,"SPAN",{});var aft=s(Rhe);SYo=r(aft,"TFAutoModel"),aft.forEach(t),r$e.forEach(t),WRe=i(c),Fr=n(c,"DIV",{class:!0});var jl=s(Fr);m(YA.$$.fragment,jl),RYo=i(jl),hc=n(jl,"P",{});var zU=s(hc);BYo=r(zU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KG=n(zU,"A",{href:!0});var nft=s(KG);PYo=r(nft,"from_pretrained()"),nft.forEach(t),$Yo=r(zU," class method or the "),ZG=n(zU,"A",{href:!0});var sft=s(ZG);IYo=r(sft,"from_config()"),sft.forEach(t),qYo=r(zU,` class
method.`),zU.forEach(t),NYo=i(jl),KA=n(jl,"P",{});var t$e=s(KA);jYo=r(t$e,"This class cannot be instantiated directly using "),Bhe=n(t$e,"CODE",{});var lft=s(Bhe);DYo=r(lft,"__init__()"),lft.forEach(t),GYo=r(t$e," (throws an error)."),t$e.forEach(t),OYo=i(jl),gt=n(jl,"DIV",{class:!0});var Dl=s(gt);m(ZA.$$.fragment,Dl),VYo=i(Dl),Phe=n(Dl,"P",{});var ift=s(Phe);XYo=r(ift,"Instantiates one of the base model classes of the library from a configuration."),ift.forEach(t),zYo=i(Dl),pc=n(Dl,"P",{});var QU=s(pc);QYo=r(QU,`Note:
Loading a model from its configuration file does `),$he=n(QU,"STRONG",{});var dft=s($he);WYo=r(dft,"not"),dft.forEach(t),HYo=r(QU,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(QU,"A",{href:!0});var cft=s(eO);UYo=r(cft,"from_pretrained()"),cft.forEach(t),JYo=r(QU," to load the model weights."),QU.forEach(t),YYo=i(Dl),Ihe=n(Dl,"P",{});var fft=s(Ihe);KYo=r(fft,"Examples:"),fft.forEach(t),ZYo=i(Dl),m(e0.$$.fragment,Dl),Dl.forEach(t),eKo=i(jl),ho=n(jl,"DIV",{class:!0});var pa=s(ho);m(o0.$$.fragment,pa),oKo=i(pa),qhe=n(pa,"P",{});var mft=s(qhe);rKo=r(mft,"Instantiate one of the base model classes of the library from a pretrained model."),mft.forEach(t),tKo=i(pa),_n=n(pa,"P",{});var zE=s(_n);aKo=r(zE,"The model class to instantiate is selected based on the "),Nhe=n(zE,"CODE",{});var gft=s(Nhe);nKo=r(gft,"model_type"),gft.forEach(t),sKo=r(zE,` property of the config object (either
passed as an argument or loaded from `),jhe=n(zE,"CODE",{});var hft=s(jhe);lKo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),iKo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dhe=n(zE,"CODE",{});var pft=s(Dhe);dKo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),cKo=r(zE,":"),zE.forEach(t),fKo=i(pa),x=n(pa,"UL",{});var k=s(x);vF=n(k,"LI",{});var hLe=s(vF);Ghe=n(hLe,"STRONG",{});var _ft=s(Ghe);mKo=r(_ft,"albert"),_ft.forEach(t),gKo=r(hLe," \u2014 "),oO=n(hLe,"A",{href:!0});var uft=s(oO);hKo=r(uft,"TFAlbertModel"),uft.forEach(t),pKo=r(hLe," (ALBERT model)"),hLe.forEach(t),_Ko=i(k),TF=n(k,"LI",{});var pLe=s(TF);Ohe=n(pLe,"STRONG",{});var bft=s(Ohe);uKo=r(bft,"bart"),bft.forEach(t),bKo=r(pLe," \u2014 "),rO=n(pLe,"A",{href:!0});var Fft=s(rO);FKo=r(Fft,"TFBartModel"),Fft.forEach(t),vKo=r(pLe," (BART model)"),pLe.forEach(t),TKo=i(k),MF=n(k,"LI",{});var _Le=s(MF);Vhe=n(_Le,"STRONG",{});var vft=s(Vhe);MKo=r(vft,"bert"),vft.forEach(t),EKo=r(_Le," \u2014 "),tO=n(_Le,"A",{href:!0});var Tft=s(tO);CKo=r(Tft,"TFBertModel"),Tft.forEach(t),wKo=r(_Le," (BERT model)"),_Le.forEach(t),AKo=i(k),EF=n(k,"LI",{});var uLe=s(EF);Xhe=n(uLe,"STRONG",{});var Mft=s(Xhe);yKo=r(Mft,"blenderbot"),Mft.forEach(t),LKo=r(uLe," \u2014 "),aO=n(uLe,"A",{href:!0});var Eft=s(aO);xKo=r(Eft,"TFBlenderbotModel"),Eft.forEach(t),kKo=r(uLe," (Blenderbot model)"),uLe.forEach(t),SKo=i(k),CF=n(k,"LI",{});var bLe=s(CF);zhe=n(bLe,"STRONG",{});var Cft=s(zhe);RKo=r(Cft,"blenderbot-small"),Cft.forEach(t),BKo=r(bLe," \u2014 "),nO=n(bLe,"A",{href:!0});var wft=s(nO);PKo=r(wft,"TFBlenderbotSmallModel"),wft.forEach(t),$Ko=r(bLe," (BlenderbotSmall model)"),bLe.forEach(t),IKo=i(k),wF=n(k,"LI",{});var FLe=s(wF);Qhe=n(FLe,"STRONG",{});var Aft=s(Qhe);qKo=r(Aft,"camembert"),Aft.forEach(t),NKo=r(FLe," \u2014 "),sO=n(FLe,"A",{href:!0});var yft=s(sO);jKo=r(yft,"TFCamembertModel"),yft.forEach(t),DKo=r(FLe," (CamemBERT model)"),FLe.forEach(t),GKo=i(k),AF=n(k,"LI",{});var vLe=s(AF);Whe=n(vLe,"STRONG",{});var Lft=s(Whe);OKo=r(Lft,"clip"),Lft.forEach(t),VKo=r(vLe," \u2014 "),lO=n(vLe,"A",{href:!0});var xft=s(lO);XKo=r(xft,"TFCLIPModel"),xft.forEach(t),zKo=r(vLe," (CLIP model)"),vLe.forEach(t),QKo=i(k),yF=n(k,"LI",{});var TLe=s(yF);Hhe=n(TLe,"STRONG",{});var kft=s(Hhe);WKo=r(kft,"convbert"),kft.forEach(t),HKo=r(TLe," \u2014 "),iO=n(TLe,"A",{href:!0});var Sft=s(iO);UKo=r(Sft,"TFConvBertModel"),Sft.forEach(t),JKo=r(TLe," (ConvBERT model)"),TLe.forEach(t),YKo=i(k),LF=n(k,"LI",{});var MLe=s(LF);Uhe=n(MLe,"STRONG",{});var Rft=s(Uhe);KKo=r(Rft,"convnext"),Rft.forEach(t),ZKo=r(MLe," \u2014 "),dO=n(MLe,"A",{href:!0});var Bft=s(dO);eZo=r(Bft,"TFConvNextModel"),Bft.forEach(t),oZo=r(MLe," (ConvNext model)"),MLe.forEach(t),rZo=i(k),xF=n(k,"LI",{});var ELe=s(xF);Jhe=n(ELe,"STRONG",{});var Pft=s(Jhe);tZo=r(Pft,"ctrl"),Pft.forEach(t),aZo=r(ELe," \u2014 "),cO=n(ELe,"A",{href:!0});var $ft=s(cO);nZo=r($ft,"TFCTRLModel"),$ft.forEach(t),sZo=r(ELe," (CTRL model)"),ELe.forEach(t),lZo=i(k),kF=n(k,"LI",{});var CLe=s(kF);Yhe=n(CLe,"STRONG",{});var Ift=s(Yhe);iZo=r(Ift,"deberta"),Ift.forEach(t),dZo=r(CLe," \u2014 "),fO=n(CLe,"A",{href:!0});var qft=s(fO);cZo=r(qft,"TFDebertaModel"),qft.forEach(t),fZo=r(CLe," (DeBERTa model)"),CLe.forEach(t),mZo=i(k),SF=n(k,"LI",{});var wLe=s(SF);Khe=n(wLe,"STRONG",{});var Nft=s(Khe);gZo=r(Nft,"deberta-v2"),Nft.forEach(t),hZo=r(wLe," \u2014 "),mO=n(wLe,"A",{href:!0});var jft=s(mO);pZo=r(jft,"TFDebertaV2Model"),jft.forEach(t),_Zo=r(wLe," (DeBERTa-v2 model)"),wLe.forEach(t),uZo=i(k),RF=n(k,"LI",{});var ALe=s(RF);Zhe=n(ALe,"STRONG",{});var Dft=s(Zhe);bZo=r(Dft,"distilbert"),Dft.forEach(t),FZo=r(ALe," \u2014 "),gO=n(ALe,"A",{href:!0});var Gft=s(gO);vZo=r(Gft,"TFDistilBertModel"),Gft.forEach(t),TZo=r(ALe," (DistilBERT model)"),ALe.forEach(t),MZo=i(k),BF=n(k,"LI",{});var yLe=s(BF);epe=n(yLe,"STRONG",{});var Oft=s(epe);EZo=r(Oft,"dpr"),Oft.forEach(t),CZo=r(yLe," \u2014 "),hO=n(yLe,"A",{href:!0});var Vft=s(hO);wZo=r(Vft,"TFDPRQuestionEncoder"),Vft.forEach(t),AZo=r(yLe," (DPR model)"),yLe.forEach(t),yZo=i(k),PF=n(k,"LI",{});var LLe=s(PF);ope=n(LLe,"STRONG",{});var Xft=s(ope);LZo=r(Xft,"electra"),Xft.forEach(t),xZo=r(LLe," \u2014 "),pO=n(LLe,"A",{href:!0});var zft=s(pO);kZo=r(zft,"TFElectraModel"),zft.forEach(t),SZo=r(LLe," (ELECTRA model)"),LLe.forEach(t),RZo=i(k),$F=n(k,"LI",{});var xLe=s($F);rpe=n(xLe,"STRONG",{});var Qft=s(rpe);BZo=r(Qft,"flaubert"),Qft.forEach(t),PZo=r(xLe," \u2014 "),_O=n(xLe,"A",{href:!0});var Wft=s(_O);$Zo=r(Wft,"TFFlaubertModel"),Wft.forEach(t),IZo=r(xLe," (FlauBERT model)"),xLe.forEach(t),qZo=i(k),Gs=n(k,"LI",{});var l9=s(Gs);tpe=n(l9,"STRONG",{});var Hft=s(tpe);NZo=r(Hft,"funnel"),Hft.forEach(t),jZo=r(l9," \u2014 "),uO=n(l9,"A",{href:!0});var Uft=s(uO);DZo=r(Uft,"TFFunnelModel"),Uft.forEach(t),GZo=r(l9," or "),bO=n(l9,"A",{href:!0});var Jft=s(bO);OZo=r(Jft,"TFFunnelBaseModel"),Jft.forEach(t),VZo=r(l9," (Funnel Transformer model)"),l9.forEach(t),XZo=i(k),IF=n(k,"LI",{});var kLe=s(IF);ape=n(kLe,"STRONG",{});var Yft=s(ape);zZo=r(Yft,"gpt2"),Yft.forEach(t),QZo=r(kLe," \u2014 "),FO=n(kLe,"A",{href:!0});var Kft=s(FO);WZo=r(Kft,"TFGPT2Model"),Kft.forEach(t),HZo=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),UZo=i(k),qF=n(k,"LI",{});var SLe=s(qF);npe=n(SLe,"STRONG",{});var Zft=s(npe);JZo=r(Zft,"gptj"),Zft.forEach(t),YZo=r(SLe," \u2014 "),vO=n(SLe,"A",{href:!0});var emt=s(vO);KZo=r(emt,"TFGPTJModel"),emt.forEach(t),ZZo=r(SLe," (GPT-J model)"),SLe.forEach(t),eer=i(k),NF=n(k,"LI",{});var RLe=s(NF);spe=n(RLe,"STRONG",{});var omt=s(spe);oer=r(omt,"hubert"),omt.forEach(t),rer=r(RLe," \u2014 "),TO=n(RLe,"A",{href:!0});var rmt=s(TO);ter=r(rmt,"TFHubertModel"),rmt.forEach(t),aer=r(RLe," (Hubert model)"),RLe.forEach(t),ner=i(k),jF=n(k,"LI",{});var BLe=s(jF);lpe=n(BLe,"STRONG",{});var tmt=s(lpe);ser=r(tmt,"layoutlm"),tmt.forEach(t),ler=r(BLe," \u2014 "),MO=n(BLe,"A",{href:!0});var amt=s(MO);ier=r(amt,"TFLayoutLMModel"),amt.forEach(t),der=r(BLe," (LayoutLM model)"),BLe.forEach(t),cer=i(k),DF=n(k,"LI",{});var PLe=s(DF);ipe=n(PLe,"STRONG",{});var nmt=s(ipe);fer=r(nmt,"led"),nmt.forEach(t),mer=r(PLe," \u2014 "),EO=n(PLe,"A",{href:!0});var smt=s(EO);ger=r(smt,"TFLEDModel"),smt.forEach(t),her=r(PLe," (LED model)"),PLe.forEach(t),per=i(k),GF=n(k,"LI",{});var $Le=s(GF);dpe=n($Le,"STRONG",{});var lmt=s(dpe);_er=r(lmt,"longformer"),lmt.forEach(t),uer=r($Le," \u2014 "),CO=n($Le,"A",{href:!0});var imt=s(CO);ber=r(imt,"TFLongformerModel"),imt.forEach(t),Fer=r($Le," (Longformer model)"),$Le.forEach(t),ver=i(k),OF=n(k,"LI",{});var ILe=s(OF);cpe=n(ILe,"STRONG",{});var dmt=s(cpe);Ter=r(dmt,"lxmert"),dmt.forEach(t),Mer=r(ILe," \u2014 "),wO=n(ILe,"A",{href:!0});var cmt=s(wO);Eer=r(cmt,"TFLxmertModel"),cmt.forEach(t),Cer=r(ILe," (LXMERT model)"),ILe.forEach(t),wer=i(k),VF=n(k,"LI",{});var qLe=s(VF);fpe=n(qLe,"STRONG",{});var fmt=s(fpe);Aer=r(fmt,"marian"),fmt.forEach(t),yer=r(qLe," \u2014 "),AO=n(qLe,"A",{href:!0});var mmt=s(AO);Ler=r(mmt,"TFMarianModel"),mmt.forEach(t),xer=r(qLe," (Marian model)"),qLe.forEach(t),ker=i(k),XF=n(k,"LI",{});var NLe=s(XF);mpe=n(NLe,"STRONG",{});var gmt=s(mpe);Ser=r(gmt,"mbart"),gmt.forEach(t),Rer=r(NLe," \u2014 "),yO=n(NLe,"A",{href:!0});var hmt=s(yO);Ber=r(hmt,"TFMBartModel"),hmt.forEach(t),Per=r(NLe," (mBART model)"),NLe.forEach(t),$er=i(k),zF=n(k,"LI",{});var jLe=s(zF);gpe=n(jLe,"STRONG",{});var pmt=s(gpe);Ier=r(pmt,"mobilebert"),pmt.forEach(t),qer=r(jLe," \u2014 "),LO=n(jLe,"A",{href:!0});var _mt=s(LO);Ner=r(_mt,"TFMobileBertModel"),_mt.forEach(t),jer=r(jLe," (MobileBERT model)"),jLe.forEach(t),Der=i(k),QF=n(k,"LI",{});var DLe=s(QF);hpe=n(DLe,"STRONG",{});var umt=s(hpe);Ger=r(umt,"mpnet"),umt.forEach(t),Oer=r(DLe," \u2014 "),xO=n(DLe,"A",{href:!0});var bmt=s(xO);Ver=r(bmt,"TFMPNetModel"),bmt.forEach(t),Xer=r(DLe," (MPNet model)"),DLe.forEach(t),zer=i(k),WF=n(k,"LI",{});var GLe=s(WF);ppe=n(GLe,"STRONG",{});var Fmt=s(ppe);Qer=r(Fmt,"mt5"),Fmt.forEach(t),Wer=r(GLe," \u2014 "),kO=n(GLe,"A",{href:!0});var vmt=s(kO);Her=r(vmt,"TFMT5Model"),vmt.forEach(t),Uer=r(GLe," (mT5 model)"),GLe.forEach(t),Jer=i(k),HF=n(k,"LI",{});var OLe=s(HF);_pe=n(OLe,"STRONG",{});var Tmt=s(_pe);Yer=r(Tmt,"openai-gpt"),Tmt.forEach(t),Ker=r(OLe," \u2014 "),SO=n(OLe,"A",{href:!0});var Mmt=s(SO);Zer=r(Mmt,"TFOpenAIGPTModel"),Mmt.forEach(t),eor=r(OLe," (OpenAI GPT model)"),OLe.forEach(t),oor=i(k),UF=n(k,"LI",{});var VLe=s(UF);upe=n(VLe,"STRONG",{});var Emt=s(upe);ror=r(Emt,"pegasus"),Emt.forEach(t),tor=r(VLe," \u2014 "),RO=n(VLe,"A",{href:!0});var Cmt=s(RO);aor=r(Cmt,"TFPegasusModel"),Cmt.forEach(t),nor=r(VLe," (Pegasus model)"),VLe.forEach(t),sor=i(k),JF=n(k,"LI",{});var XLe=s(JF);bpe=n(XLe,"STRONG",{});var wmt=s(bpe);lor=r(wmt,"rembert"),wmt.forEach(t),ior=r(XLe," \u2014 "),BO=n(XLe,"A",{href:!0});var Amt=s(BO);dor=r(Amt,"TFRemBertModel"),Amt.forEach(t),cor=r(XLe," (RemBERT model)"),XLe.forEach(t),mor=i(k),YF=n(k,"LI",{});var zLe=s(YF);Fpe=n(zLe,"STRONG",{});var ymt=s(Fpe);gor=r(ymt,"roberta"),ymt.forEach(t),hor=r(zLe," \u2014 "),PO=n(zLe,"A",{href:!0});var Lmt=s(PO);por=r(Lmt,"TFRobertaModel"),Lmt.forEach(t),_or=r(zLe," (RoBERTa model)"),zLe.forEach(t),uor=i(k),KF=n(k,"LI",{});var QLe=s(KF);vpe=n(QLe,"STRONG",{});var xmt=s(vpe);bor=r(xmt,"roformer"),xmt.forEach(t),For=r(QLe," \u2014 "),$O=n(QLe,"A",{href:!0});var kmt=s($O);vor=r(kmt,"TFRoFormerModel"),kmt.forEach(t),Tor=r(QLe," (RoFormer model)"),QLe.forEach(t),Mor=i(k),ZF=n(k,"LI",{});var WLe=s(ZF);Tpe=n(WLe,"STRONG",{});var Smt=s(Tpe);Eor=r(Smt,"speech_to_text"),Smt.forEach(t),Cor=r(WLe," \u2014 "),IO=n(WLe,"A",{href:!0});var Rmt=s(IO);wor=r(Rmt,"TFSpeech2TextModel"),Rmt.forEach(t),Aor=r(WLe," (Speech2Text model)"),WLe.forEach(t),yor=i(k),ev=n(k,"LI",{});var HLe=s(ev);Mpe=n(HLe,"STRONG",{});var Bmt=s(Mpe);Lor=r(Bmt,"t5"),Bmt.forEach(t),xor=r(HLe," \u2014 "),qO=n(HLe,"A",{href:!0});var Pmt=s(qO);kor=r(Pmt,"TFT5Model"),Pmt.forEach(t),Sor=r(HLe," (T5 model)"),HLe.forEach(t),Ror=i(k),ov=n(k,"LI",{});var ULe=s(ov);Epe=n(ULe,"STRONG",{});var $mt=s(Epe);Bor=r($mt,"tapas"),$mt.forEach(t),Por=r(ULe," \u2014 "),NO=n(ULe,"A",{href:!0});var Imt=s(NO);$or=r(Imt,"TFTapasModel"),Imt.forEach(t),Ior=r(ULe," (TAPAS model)"),ULe.forEach(t),qor=i(k),rv=n(k,"LI",{});var JLe=s(rv);Cpe=n(JLe,"STRONG",{});var qmt=s(Cpe);Nor=r(qmt,"transfo-xl"),qmt.forEach(t),jor=r(JLe," \u2014 "),jO=n(JLe,"A",{href:!0});var Nmt=s(jO);Dor=r(Nmt,"TFTransfoXLModel"),Nmt.forEach(t),Gor=r(JLe," (Transformer-XL model)"),JLe.forEach(t),Oor=i(k),tv=n(k,"LI",{});var YLe=s(tv);wpe=n(YLe,"STRONG",{});var jmt=s(wpe);Vor=r(jmt,"vit"),jmt.forEach(t),Xor=r(YLe," \u2014 "),DO=n(YLe,"A",{href:!0});var Dmt=s(DO);zor=r(Dmt,"TFViTModel"),Dmt.forEach(t),Qor=r(YLe," (ViT model)"),YLe.forEach(t),Wor=i(k),av=n(k,"LI",{});var KLe=s(av);Ape=n(KLe,"STRONG",{});var Gmt=s(Ape);Hor=r(Gmt,"vit_mae"),Gmt.forEach(t),Uor=r(KLe," \u2014 "),GO=n(KLe,"A",{href:!0});var Omt=s(GO);Jor=r(Omt,"TFViTMAEModel"),Omt.forEach(t),Yor=r(KLe," (ViTMAE model)"),KLe.forEach(t),Kor=i(k),nv=n(k,"LI",{});var ZLe=s(nv);ype=n(ZLe,"STRONG",{});var Vmt=s(ype);Zor=r(Vmt,"wav2vec2"),Vmt.forEach(t),err=r(ZLe," \u2014 "),OO=n(ZLe,"A",{href:!0});var Xmt=s(OO);orr=r(Xmt,"TFWav2Vec2Model"),Xmt.forEach(t),rrr=r(ZLe," (Wav2Vec2 model)"),ZLe.forEach(t),trr=i(k),sv=n(k,"LI",{});var e8e=s(sv);Lpe=n(e8e,"STRONG",{});var zmt=s(Lpe);arr=r(zmt,"xlm"),zmt.forEach(t),nrr=r(e8e," \u2014 "),VO=n(e8e,"A",{href:!0});var Qmt=s(VO);srr=r(Qmt,"TFXLMModel"),Qmt.forEach(t),lrr=r(e8e," (XLM model)"),e8e.forEach(t),irr=i(k),lv=n(k,"LI",{});var o8e=s(lv);xpe=n(o8e,"STRONG",{});var Wmt=s(xpe);drr=r(Wmt,"xlm-roberta"),Wmt.forEach(t),crr=r(o8e," \u2014 "),XO=n(o8e,"A",{href:!0});var Hmt=s(XO);frr=r(Hmt,"TFXLMRobertaModel"),Hmt.forEach(t),mrr=r(o8e," (XLM-RoBERTa model)"),o8e.forEach(t),grr=i(k),iv=n(k,"LI",{});var r8e=s(iv);kpe=n(r8e,"STRONG",{});var Umt=s(kpe);hrr=r(Umt,"xlnet"),Umt.forEach(t),prr=r(r8e," \u2014 "),zO=n(r8e,"A",{href:!0});var Jmt=s(zO);_rr=r(Jmt,"TFXLNetModel"),Jmt.forEach(t),urr=r(r8e," (XLNet model)"),r8e.forEach(t),k.forEach(t),brr=i(pa),Spe=n(pa,"P",{});var Ymt=s(Spe);Frr=r(Ymt,"Examples:"),Ymt.forEach(t),vrr=i(pa),m(r0.$$.fragment,pa),pa.forEach(t),jl.forEach(t),HRe=i(c),_c=n(c,"H2",{class:!0});var a$e=s(_c);dv=n(a$e,"A",{id:!0,class:!0,href:!0});var Kmt=s(dv);Rpe=n(Kmt,"SPAN",{});var Zmt=s(Rpe);m(t0.$$.fragment,Zmt),Zmt.forEach(t),Kmt.forEach(t),Trr=i(a$e),Bpe=n(a$e,"SPAN",{});var egt=s(Bpe);Mrr=r(egt,"TFAutoModelForPreTraining"),egt.forEach(t),a$e.forEach(t),URe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(a0.$$.fragment,Gl),Err=i(Gl),uc=n(Gl,"P",{});var WU=s(uc);Crr=r(WU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),QO=n(WU,"A",{href:!0});var ogt=s(QO);wrr=r(ogt,"from_pretrained()"),ogt.forEach(t),Arr=r(WU," class method or the "),WO=n(WU,"A",{href:!0});var rgt=s(WO);yrr=r(rgt,"from_config()"),rgt.forEach(t),Lrr=r(WU,` class
method.`),WU.forEach(t),xrr=i(Gl),n0=n(Gl,"P",{});var n$e=s(n0);krr=r(n$e,"This class cannot be instantiated directly using "),Ppe=n(n$e,"CODE",{});var tgt=s(Ppe);Srr=r(tgt,"__init__()"),tgt.forEach(t),Rrr=r(n$e," (throws an error)."),n$e.forEach(t),Brr=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(s0.$$.fragment,Ol),Prr=i(Ol),$pe=n(Ol,"P",{});var agt=s($pe);$rr=r(agt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),agt.forEach(t),Irr=i(Ol),bc=n(Ol,"P",{});var HU=s(bc);qrr=r(HU,`Note:
Loading a model from its configuration file does `),Ipe=n(HU,"STRONG",{});var ngt=s(Ipe);Nrr=r(ngt,"not"),ngt.forEach(t),jrr=r(HU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HO=n(HU,"A",{href:!0});var sgt=s(HO);Drr=r(sgt,"from_pretrained()"),sgt.forEach(t),Grr=r(HU," to load the model weights."),HU.forEach(t),Orr=i(Ol),qpe=n(Ol,"P",{});var lgt=s(qpe);Vrr=r(lgt,"Examples:"),lgt.forEach(t),Xrr=i(Ol),m(l0.$$.fragment,Ol),Ol.forEach(t),zrr=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(i0.$$.fragment,_a),Qrr=i(_a),Npe=n(_a,"P",{});var igt=s(Npe);Wrr=r(igt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),igt.forEach(t),Hrr=i(_a),un=n(_a,"P",{});var QE=s(un);Urr=r(QE,"The model class to instantiate is selected based on the "),jpe=n(QE,"CODE",{});var dgt=s(jpe);Jrr=r(dgt,"model_type"),dgt.forEach(t),Yrr=r(QE,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(QE,"CODE",{});var cgt=s(Dpe);Krr=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),Zrr=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(QE,"CODE",{});var fgt=s(Gpe);etr=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),otr=r(QE,":"),QE.forEach(t),rtr=i(_a),H=n(_a,"UL",{});var U=s(H);cv=n(U,"LI",{});var t8e=s(cv);Ope=n(t8e,"STRONG",{});var mgt=s(Ope);ttr=r(mgt,"albert"),mgt.forEach(t),atr=r(t8e," \u2014 "),UO=n(t8e,"A",{href:!0});var ggt=s(UO);ntr=r(ggt,"TFAlbertForPreTraining"),ggt.forEach(t),str=r(t8e," (ALBERT model)"),t8e.forEach(t),ltr=i(U),fv=n(U,"LI",{});var a8e=s(fv);Vpe=n(a8e,"STRONG",{});var hgt=s(Vpe);itr=r(hgt,"bart"),hgt.forEach(t),dtr=r(a8e," \u2014 "),JO=n(a8e,"A",{href:!0});var pgt=s(JO);ctr=r(pgt,"TFBartForConditionalGeneration"),pgt.forEach(t),ftr=r(a8e," (BART model)"),a8e.forEach(t),mtr=i(U),mv=n(U,"LI",{});var n8e=s(mv);Xpe=n(n8e,"STRONG",{});var _gt=s(Xpe);gtr=r(_gt,"bert"),_gt.forEach(t),htr=r(n8e," \u2014 "),YO=n(n8e,"A",{href:!0});var ugt=s(YO);ptr=r(ugt,"TFBertForPreTraining"),ugt.forEach(t),_tr=r(n8e," (BERT model)"),n8e.forEach(t),utr=i(U),gv=n(U,"LI",{});var s8e=s(gv);zpe=n(s8e,"STRONG",{});var bgt=s(zpe);btr=r(bgt,"camembert"),bgt.forEach(t),Ftr=r(s8e," \u2014 "),KO=n(s8e,"A",{href:!0});var Fgt=s(KO);vtr=r(Fgt,"TFCamembertForMaskedLM"),Fgt.forEach(t),Ttr=r(s8e," (CamemBERT model)"),s8e.forEach(t),Mtr=i(U),hv=n(U,"LI",{});var l8e=s(hv);Qpe=n(l8e,"STRONG",{});var vgt=s(Qpe);Etr=r(vgt,"ctrl"),vgt.forEach(t),Ctr=r(l8e," \u2014 "),ZO=n(l8e,"A",{href:!0});var Tgt=s(ZO);wtr=r(Tgt,"TFCTRLLMHeadModel"),Tgt.forEach(t),Atr=r(l8e," (CTRL model)"),l8e.forEach(t),ytr=i(U),pv=n(U,"LI",{});var i8e=s(pv);Wpe=n(i8e,"STRONG",{});var Mgt=s(Wpe);Ltr=r(Mgt,"distilbert"),Mgt.forEach(t),xtr=r(i8e," \u2014 "),eV=n(i8e,"A",{href:!0});var Egt=s(eV);ktr=r(Egt,"TFDistilBertForMaskedLM"),Egt.forEach(t),Str=r(i8e," (DistilBERT model)"),i8e.forEach(t),Rtr=i(U),_v=n(U,"LI",{});var d8e=s(_v);Hpe=n(d8e,"STRONG",{});var Cgt=s(Hpe);Btr=r(Cgt,"electra"),Cgt.forEach(t),Ptr=r(d8e," \u2014 "),oV=n(d8e,"A",{href:!0});var wgt=s(oV);$tr=r(wgt,"TFElectraForPreTraining"),wgt.forEach(t),Itr=r(d8e," (ELECTRA model)"),d8e.forEach(t),qtr=i(U),uv=n(U,"LI",{});var c8e=s(uv);Upe=n(c8e,"STRONG",{});var Agt=s(Upe);Ntr=r(Agt,"flaubert"),Agt.forEach(t),jtr=r(c8e," \u2014 "),rV=n(c8e,"A",{href:!0});var ygt=s(rV);Dtr=r(ygt,"TFFlaubertWithLMHeadModel"),ygt.forEach(t),Gtr=r(c8e," (FlauBERT model)"),c8e.forEach(t),Otr=i(U),bv=n(U,"LI",{});var f8e=s(bv);Jpe=n(f8e,"STRONG",{});var Lgt=s(Jpe);Vtr=r(Lgt,"funnel"),Lgt.forEach(t),Xtr=r(f8e," \u2014 "),tV=n(f8e,"A",{href:!0});var xgt=s(tV);ztr=r(xgt,"TFFunnelForPreTraining"),xgt.forEach(t),Qtr=r(f8e," (Funnel Transformer model)"),f8e.forEach(t),Wtr=i(U),Fv=n(U,"LI",{});var m8e=s(Fv);Ype=n(m8e,"STRONG",{});var kgt=s(Ype);Htr=r(kgt,"gpt2"),kgt.forEach(t),Utr=r(m8e," \u2014 "),aV=n(m8e,"A",{href:!0});var Sgt=s(aV);Jtr=r(Sgt,"TFGPT2LMHeadModel"),Sgt.forEach(t),Ytr=r(m8e," (OpenAI GPT-2 model)"),m8e.forEach(t),Ktr=i(U),vv=n(U,"LI",{});var g8e=s(vv);Kpe=n(g8e,"STRONG",{});var Rgt=s(Kpe);Ztr=r(Rgt,"layoutlm"),Rgt.forEach(t),ear=r(g8e," \u2014 "),nV=n(g8e,"A",{href:!0});var Bgt=s(nV);oar=r(Bgt,"TFLayoutLMForMaskedLM"),Bgt.forEach(t),rar=r(g8e," (LayoutLM model)"),g8e.forEach(t),tar=i(U),Tv=n(U,"LI",{});var h8e=s(Tv);Zpe=n(h8e,"STRONG",{});var Pgt=s(Zpe);aar=r(Pgt,"lxmert"),Pgt.forEach(t),nar=r(h8e," \u2014 "),sV=n(h8e,"A",{href:!0});var $gt=s(sV);sar=r($gt,"TFLxmertForPreTraining"),$gt.forEach(t),lar=r(h8e," (LXMERT model)"),h8e.forEach(t),iar=i(U),Mv=n(U,"LI",{});var p8e=s(Mv);e_e=n(p8e,"STRONG",{});var Igt=s(e_e);dar=r(Igt,"mobilebert"),Igt.forEach(t),car=r(p8e," \u2014 "),lV=n(p8e,"A",{href:!0});var qgt=s(lV);far=r(qgt,"TFMobileBertForPreTraining"),qgt.forEach(t),mar=r(p8e," (MobileBERT model)"),p8e.forEach(t),gar=i(U),Ev=n(U,"LI",{});var _8e=s(Ev);o_e=n(_8e,"STRONG",{});var Ngt=s(o_e);har=r(Ngt,"mpnet"),Ngt.forEach(t),par=r(_8e," \u2014 "),iV=n(_8e,"A",{href:!0});var jgt=s(iV);_ar=r(jgt,"TFMPNetForMaskedLM"),jgt.forEach(t),uar=r(_8e," (MPNet model)"),_8e.forEach(t),bar=i(U),Cv=n(U,"LI",{});var u8e=s(Cv);r_e=n(u8e,"STRONG",{});var Dgt=s(r_e);Far=r(Dgt,"openai-gpt"),Dgt.forEach(t),Tar=r(u8e," \u2014 "),dV=n(u8e,"A",{href:!0});var Ggt=s(dV);Mar=r(Ggt,"TFOpenAIGPTLMHeadModel"),Ggt.forEach(t),Ear=r(u8e," (OpenAI GPT model)"),u8e.forEach(t),Car=i(U),wv=n(U,"LI",{});var b8e=s(wv);t_e=n(b8e,"STRONG",{});var Ogt=s(t_e);war=r(Ogt,"roberta"),Ogt.forEach(t),Aar=r(b8e," \u2014 "),cV=n(b8e,"A",{href:!0});var Vgt=s(cV);yar=r(Vgt,"TFRobertaForMaskedLM"),Vgt.forEach(t),Lar=r(b8e," (RoBERTa model)"),b8e.forEach(t),xar=i(U),Av=n(U,"LI",{});var F8e=s(Av);a_e=n(F8e,"STRONG",{});var Xgt=s(a_e);kar=r(Xgt,"t5"),Xgt.forEach(t),Sar=r(F8e," \u2014 "),fV=n(F8e,"A",{href:!0});var zgt=s(fV);Rar=r(zgt,"TFT5ForConditionalGeneration"),zgt.forEach(t),Bar=r(F8e," (T5 model)"),F8e.forEach(t),Par=i(U),yv=n(U,"LI",{});var v8e=s(yv);n_e=n(v8e,"STRONG",{});var Qgt=s(n_e);$ar=r(Qgt,"tapas"),Qgt.forEach(t),Iar=r(v8e," \u2014 "),mV=n(v8e,"A",{href:!0});var Wgt=s(mV);qar=r(Wgt,"TFTapasForMaskedLM"),Wgt.forEach(t),Nar=r(v8e," (TAPAS model)"),v8e.forEach(t),jar=i(U),Lv=n(U,"LI",{});var T8e=s(Lv);s_e=n(T8e,"STRONG",{});var Hgt=s(s_e);Dar=r(Hgt,"transfo-xl"),Hgt.forEach(t),Gar=r(T8e," \u2014 "),gV=n(T8e,"A",{href:!0});var Ugt=s(gV);Oar=r(Ugt,"TFTransfoXLLMHeadModel"),Ugt.forEach(t),Var=r(T8e," (Transformer-XL model)"),T8e.forEach(t),Xar=i(U),xv=n(U,"LI",{});var M8e=s(xv);l_e=n(M8e,"STRONG",{});var Jgt=s(l_e);zar=r(Jgt,"vit_mae"),Jgt.forEach(t),Qar=r(M8e," \u2014 "),hV=n(M8e,"A",{href:!0});var Ygt=s(hV);War=r(Ygt,"TFViTMAEForPreTraining"),Ygt.forEach(t),Har=r(M8e," (ViTMAE model)"),M8e.forEach(t),Uar=i(U),kv=n(U,"LI",{});var E8e=s(kv);i_e=n(E8e,"STRONG",{});var Kgt=s(i_e);Jar=r(Kgt,"xlm"),Kgt.forEach(t),Yar=r(E8e," \u2014 "),pV=n(E8e,"A",{href:!0});var Zgt=s(pV);Kar=r(Zgt,"TFXLMWithLMHeadModel"),Zgt.forEach(t),Zar=r(E8e," (XLM model)"),E8e.forEach(t),enr=i(U),Sv=n(U,"LI",{});var C8e=s(Sv);d_e=n(C8e,"STRONG",{});var eht=s(d_e);onr=r(eht,"xlm-roberta"),eht.forEach(t),rnr=r(C8e," \u2014 "),_V=n(C8e,"A",{href:!0});var oht=s(_V);tnr=r(oht,"TFXLMRobertaForMaskedLM"),oht.forEach(t),anr=r(C8e," (XLM-RoBERTa model)"),C8e.forEach(t),nnr=i(U),Rv=n(U,"LI",{});var w8e=s(Rv);c_e=n(w8e,"STRONG",{});var rht=s(c_e);snr=r(rht,"xlnet"),rht.forEach(t),lnr=r(w8e," \u2014 "),uV=n(w8e,"A",{href:!0});var tht=s(uV);inr=r(tht,"TFXLNetLMHeadModel"),tht.forEach(t),dnr=r(w8e," (XLNet model)"),w8e.forEach(t),U.forEach(t),cnr=i(_a),f_e=n(_a,"P",{});var aht=s(f_e);fnr=r(aht,"Examples:"),aht.forEach(t),mnr=i(_a),m(d0.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),JRe=i(c),Fc=n(c,"H2",{class:!0});var s$e=s(Fc);Bv=n(s$e,"A",{id:!0,class:!0,href:!0});var nht=s(Bv);m_e=n(nht,"SPAN",{});var sht=s(m_e);m(c0.$$.fragment,sht),sht.forEach(t),nht.forEach(t),gnr=i(s$e),g_e=n(s$e,"SPAN",{});var lht=s(g_e);hnr=r(lht,"TFAutoModelForCausalLM"),lht.forEach(t),s$e.forEach(t),YRe=i(c),Tr=n(c,"DIV",{class:!0});var Vl=s(Tr);m(f0.$$.fragment,Vl),pnr=i(Vl),vc=n(Vl,"P",{});var UU=s(vc);_nr=r(UU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bV=n(UU,"A",{href:!0});var iht=s(bV);unr=r(iht,"from_pretrained()"),iht.forEach(t),bnr=r(UU," class method or the "),FV=n(UU,"A",{href:!0});var dht=s(FV);Fnr=r(dht,"from_config()"),dht.forEach(t),vnr=r(UU,` class
method.`),UU.forEach(t),Tnr=i(Vl),m0=n(Vl,"P",{});var l$e=s(m0);Mnr=r(l$e,"This class cannot be instantiated directly using "),h_e=n(l$e,"CODE",{});var cht=s(h_e);Enr=r(cht,"__init__()"),cht.forEach(t),Cnr=r(l$e," (throws an error)."),l$e.forEach(t),wnr=i(Vl),pt=n(Vl,"DIV",{class:!0});var Xl=s(pt);m(g0.$$.fragment,Xl),Anr=i(Xl),p_e=n(Xl,"P",{});var fht=s(p_e);ynr=r(fht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fht.forEach(t),Lnr=i(Xl),Tc=n(Xl,"P",{});var JU=s(Tc);xnr=r(JU,`Note:
Loading a model from its configuration file does `),__e=n(JU,"STRONG",{});var mht=s(__e);knr=r(mht,"not"),mht.forEach(t),Snr=r(JU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(JU,"A",{href:!0});var ght=s(vV);Rnr=r(ght,"from_pretrained()"),ght.forEach(t),Bnr=r(JU," to load the model weights."),JU.forEach(t),Pnr=i(Xl),u_e=n(Xl,"P",{});var hht=s(u_e);$nr=r(hht,"Examples:"),hht.forEach(t),Inr=i(Xl),m(h0.$$.fragment,Xl),Xl.forEach(t),qnr=i(Vl),_o=n(Vl,"DIV",{class:!0});var ua=s(_o);m(p0.$$.fragment,ua),Nnr=i(ua),b_e=n(ua,"P",{});var pht=s(b_e);jnr=r(pht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pht.forEach(t),Dnr=i(ua),bn=n(ua,"P",{});var WE=s(bn);Gnr=r(WE,"The model class to instantiate is selected based on the "),F_e=n(WE,"CODE",{});var _ht=s(F_e);Onr=r(_ht,"model_type"),_ht.forEach(t),Vnr=r(WE,` property of the config object (either
passed as an argument or loaded from `),v_e=n(WE,"CODE",{});var uht=s(v_e);Xnr=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),znr=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(WE,"CODE",{});var bht=s(T_e);Qnr=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),Wnr=r(WE,":"),WE.forEach(t),Hnr=i(ua),ce=n(ua,"UL",{});var he=s(ce);Pv=n(he,"LI",{});var A8e=s(Pv);M_e=n(A8e,"STRONG",{});var Fht=s(M_e);Unr=r(Fht,"bert"),Fht.forEach(t),Jnr=r(A8e," \u2014 "),TV=n(A8e,"A",{href:!0});var vht=s(TV);Ynr=r(vht,"TFBertLMHeadModel"),vht.forEach(t),Knr=r(A8e," (BERT model)"),A8e.forEach(t),Znr=i(he),$v=n(he,"LI",{});var y8e=s($v);E_e=n(y8e,"STRONG",{});var Tht=s(E_e);esr=r(Tht,"camembert"),Tht.forEach(t),osr=r(y8e," \u2014 "),MV=n(y8e,"A",{href:!0});var Mht=s(MV);rsr=r(Mht,"TFCamembertForCausalLM"),Mht.forEach(t),tsr=r(y8e," (CamemBERT model)"),y8e.forEach(t),asr=i(he),Iv=n(he,"LI",{});var L8e=s(Iv);C_e=n(L8e,"STRONG",{});var Eht=s(C_e);nsr=r(Eht,"ctrl"),Eht.forEach(t),ssr=r(L8e," \u2014 "),EV=n(L8e,"A",{href:!0});var Cht=s(EV);lsr=r(Cht,"TFCTRLLMHeadModel"),Cht.forEach(t),isr=r(L8e," (CTRL model)"),L8e.forEach(t),dsr=i(he),qv=n(he,"LI",{});var x8e=s(qv);w_e=n(x8e,"STRONG",{});var wht=s(w_e);csr=r(wht,"gpt2"),wht.forEach(t),fsr=r(x8e," \u2014 "),CV=n(x8e,"A",{href:!0});var Aht=s(CV);msr=r(Aht,"TFGPT2LMHeadModel"),Aht.forEach(t),gsr=r(x8e," (OpenAI GPT-2 model)"),x8e.forEach(t),hsr=i(he),Nv=n(he,"LI",{});var k8e=s(Nv);A_e=n(k8e,"STRONG",{});var yht=s(A_e);psr=r(yht,"gptj"),yht.forEach(t),_sr=r(k8e," \u2014 "),wV=n(k8e,"A",{href:!0});var Lht=s(wV);usr=r(Lht,"TFGPTJForCausalLM"),Lht.forEach(t),bsr=r(k8e," (GPT-J model)"),k8e.forEach(t),Fsr=i(he),jv=n(he,"LI",{});var S8e=s(jv);y_e=n(S8e,"STRONG",{});var xht=s(y_e);vsr=r(xht,"openai-gpt"),xht.forEach(t),Tsr=r(S8e," \u2014 "),AV=n(S8e,"A",{href:!0});var kht=s(AV);Msr=r(kht,"TFOpenAIGPTLMHeadModel"),kht.forEach(t),Esr=r(S8e," (OpenAI GPT model)"),S8e.forEach(t),Csr=i(he),Dv=n(he,"LI",{});var R8e=s(Dv);L_e=n(R8e,"STRONG",{});var Sht=s(L_e);wsr=r(Sht,"rembert"),Sht.forEach(t),Asr=r(R8e," \u2014 "),yV=n(R8e,"A",{href:!0});var Rht=s(yV);ysr=r(Rht,"TFRemBertForCausalLM"),Rht.forEach(t),Lsr=r(R8e," (RemBERT model)"),R8e.forEach(t),xsr=i(he),Gv=n(he,"LI",{});var B8e=s(Gv);x_e=n(B8e,"STRONG",{});var Bht=s(x_e);ksr=r(Bht,"roberta"),Bht.forEach(t),Ssr=r(B8e," \u2014 "),LV=n(B8e,"A",{href:!0});var Pht=s(LV);Rsr=r(Pht,"TFRobertaForCausalLM"),Pht.forEach(t),Bsr=r(B8e," (RoBERTa model)"),B8e.forEach(t),Psr=i(he),Ov=n(he,"LI",{});var P8e=s(Ov);k_e=n(P8e,"STRONG",{});var $ht=s(k_e);$sr=r($ht,"roformer"),$ht.forEach(t),Isr=r(P8e," \u2014 "),xV=n(P8e,"A",{href:!0});var Iht=s(xV);qsr=r(Iht,"TFRoFormerForCausalLM"),Iht.forEach(t),Nsr=r(P8e," (RoFormer model)"),P8e.forEach(t),jsr=i(he),Vv=n(he,"LI",{});var $8e=s(Vv);S_e=n($8e,"STRONG",{});var qht=s(S_e);Dsr=r(qht,"transfo-xl"),qht.forEach(t),Gsr=r($8e," \u2014 "),kV=n($8e,"A",{href:!0});var Nht=s(kV);Osr=r(Nht,"TFTransfoXLLMHeadModel"),Nht.forEach(t),Vsr=r($8e," (Transformer-XL model)"),$8e.forEach(t),Xsr=i(he),Xv=n(he,"LI",{});var I8e=s(Xv);R_e=n(I8e,"STRONG",{});var jht=s(R_e);zsr=r(jht,"xlm"),jht.forEach(t),Qsr=r(I8e," \u2014 "),SV=n(I8e,"A",{href:!0});var Dht=s(SV);Wsr=r(Dht,"TFXLMWithLMHeadModel"),Dht.forEach(t),Hsr=r(I8e," (XLM model)"),I8e.forEach(t),Usr=i(he),zv=n(he,"LI",{});var q8e=s(zv);B_e=n(q8e,"STRONG",{});var Ght=s(B_e);Jsr=r(Ght,"xlnet"),Ght.forEach(t),Ysr=r(q8e," \u2014 "),RV=n(q8e,"A",{href:!0});var Oht=s(RV);Ksr=r(Oht,"TFXLNetLMHeadModel"),Oht.forEach(t),Zsr=r(q8e," (XLNet model)"),q8e.forEach(t),he.forEach(t),elr=i(ua),P_e=n(ua,"P",{});var Vht=s(P_e);olr=r(Vht,"Examples:"),Vht.forEach(t),rlr=i(ua),m(_0.$$.fragment,ua),ua.forEach(t),Vl.forEach(t),KRe=i(c),Mc=n(c,"H2",{class:!0});var i$e=s(Mc);Qv=n(i$e,"A",{id:!0,class:!0,href:!0});var Xht=s(Qv);$_e=n(Xht,"SPAN",{});var zht=s($_e);m(u0.$$.fragment,zht),zht.forEach(t),Xht.forEach(t),tlr=i(i$e),I_e=n(i$e,"SPAN",{});var Qht=s(I_e);alr=r(Qht,"TFAutoModelForImageClassification"),Qht.forEach(t),i$e.forEach(t),ZRe=i(c),Mr=n(c,"DIV",{class:!0});var zl=s(Mr);m(b0.$$.fragment,zl),nlr=i(zl),Ec=n(zl,"P",{});var YU=s(Ec);slr=r(YU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),BV=n(YU,"A",{href:!0});var Wht=s(BV);llr=r(Wht,"from_pretrained()"),Wht.forEach(t),ilr=r(YU," class method or the "),PV=n(YU,"A",{href:!0});var Hht=s(PV);dlr=r(Hht,"from_config()"),Hht.forEach(t),clr=r(YU,` class
method.`),YU.forEach(t),flr=i(zl),F0=n(zl,"P",{});var d$e=s(F0);mlr=r(d$e,"This class cannot be instantiated directly using "),q_e=n(d$e,"CODE",{});var Uht=s(q_e);glr=r(Uht,"__init__()"),Uht.forEach(t),hlr=r(d$e," (throws an error)."),d$e.forEach(t),plr=i(zl),_t=n(zl,"DIV",{class:!0});var Ql=s(_t);m(v0.$$.fragment,Ql),_lr=i(Ql),N_e=n(Ql,"P",{});var Jht=s(N_e);ulr=r(Jht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jht.forEach(t),blr=i(Ql),Cc=n(Ql,"P",{});var KU=s(Cc);Flr=r(KU,`Note:
Loading a model from its configuration file does `),j_e=n(KU,"STRONG",{});var Yht=s(j_e);vlr=r(Yht,"not"),Yht.forEach(t),Tlr=r(KU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$V=n(KU,"A",{href:!0});var Kht=s($V);Mlr=r(Kht,"from_pretrained()"),Kht.forEach(t),Elr=r(KU," to load the model weights."),KU.forEach(t),Clr=i(Ql),D_e=n(Ql,"P",{});var Zht=s(D_e);wlr=r(Zht,"Examples:"),Zht.forEach(t),Alr=i(Ql),m(T0.$$.fragment,Ql),Ql.forEach(t),ylr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(M0.$$.fragment,ba),Llr=i(ba),G_e=n(ba,"P",{});var ept=s(G_e);xlr=r(ept,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ept.forEach(t),klr=i(ba),Fn=n(ba,"P",{});var HE=s(Fn);Slr=r(HE,"The model class to instantiate is selected based on the "),O_e=n(HE,"CODE",{});var opt=s(O_e);Rlr=r(opt,"model_type"),opt.forEach(t),Blr=r(HE,` property of the config object (either
passed as an argument or loaded from `),V_e=n(HE,"CODE",{});var rpt=s(V_e);Plr=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),$lr=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X_e=n(HE,"CODE",{});var tpt=s(X_e);Ilr=r(tpt,"pretrained_model_name_or_path"),tpt.forEach(t),qlr=r(HE,":"),HE.forEach(t),Nlr=i(ba),E0=n(ba,"UL",{});var c$e=s(E0);Wv=n(c$e,"LI",{});var N8e=s(Wv);z_e=n(N8e,"STRONG",{});var apt=s(z_e);jlr=r(apt,"convnext"),apt.forEach(t),Dlr=r(N8e," \u2014 "),IV=n(N8e,"A",{href:!0});var npt=s(IV);Glr=r(npt,"TFConvNextForImageClassification"),npt.forEach(t),Olr=r(N8e," (ConvNext model)"),N8e.forEach(t),Vlr=i(c$e),Hv=n(c$e,"LI",{});var j8e=s(Hv);Q_e=n(j8e,"STRONG",{});var spt=s(Q_e);Xlr=r(spt,"vit"),spt.forEach(t),zlr=r(j8e," \u2014 "),qV=n(j8e,"A",{href:!0});var lpt=s(qV);Qlr=r(lpt,"TFViTForImageClassification"),lpt.forEach(t),Wlr=r(j8e," (ViT model)"),j8e.forEach(t),c$e.forEach(t),Hlr=i(ba),W_e=n(ba,"P",{});var ipt=s(W_e);Ulr=r(ipt,"Examples:"),ipt.forEach(t),Jlr=i(ba),m(C0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),eBe=i(c),wc=n(c,"H2",{class:!0});var f$e=s(wc);Uv=n(f$e,"A",{id:!0,class:!0,href:!0});var dpt=s(Uv);H_e=n(dpt,"SPAN",{});var cpt=s(H_e);m(w0.$$.fragment,cpt),cpt.forEach(t),dpt.forEach(t),Ylr=i(f$e),U_e=n(f$e,"SPAN",{});var fpt=s(U_e);Klr=r(fpt,"TFAutoModelForMaskedLM"),fpt.forEach(t),f$e.forEach(t),oBe=i(c),Er=n(c,"DIV",{class:!0});var Wl=s(Er);m(A0.$$.fragment,Wl),Zlr=i(Wl),Ac=n(Wl,"P",{});var ZU=s(Ac);eir=r(ZU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),NV=n(ZU,"A",{href:!0});var mpt=s(NV);oir=r(mpt,"from_pretrained()"),mpt.forEach(t),rir=r(ZU," class method or the "),jV=n(ZU,"A",{href:!0});var gpt=s(jV);tir=r(gpt,"from_config()"),gpt.forEach(t),air=r(ZU,` class
method.`),ZU.forEach(t),nir=i(Wl),y0=n(Wl,"P",{});var m$e=s(y0);sir=r(m$e,"This class cannot be instantiated directly using "),J_e=n(m$e,"CODE",{});var hpt=s(J_e);lir=r(hpt,"__init__()"),hpt.forEach(t),iir=r(m$e," (throws an error)."),m$e.forEach(t),dir=i(Wl),ut=n(Wl,"DIV",{class:!0});var Hl=s(ut);m(L0.$$.fragment,Hl),cir=i(Hl),Y_e=n(Hl,"P",{});var ppt=s(Y_e);fir=r(ppt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ppt.forEach(t),mir=i(Hl),yc=n(Hl,"P",{});var eJ=s(yc);gir=r(eJ,`Note:
Loading a model from its configuration file does `),K_e=n(eJ,"STRONG",{});var _pt=s(K_e);hir=r(_pt,"not"),_pt.forEach(t),pir=r(eJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DV=n(eJ,"A",{href:!0});var upt=s(DV);_ir=r(upt,"from_pretrained()"),upt.forEach(t),uir=r(eJ," to load the model weights."),eJ.forEach(t),bir=i(Hl),Z_e=n(Hl,"P",{});var bpt=s(Z_e);Fir=r(bpt,"Examples:"),bpt.forEach(t),vir=i(Hl),m(x0.$$.fragment,Hl),Hl.forEach(t),Tir=i(Wl),bo=n(Wl,"DIV",{class:!0});var Fa=s(bo);m(k0.$$.fragment,Fa),Mir=i(Fa),eue=n(Fa,"P",{});var Fpt=s(eue);Eir=r(Fpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fpt.forEach(t),Cir=i(Fa),vn=n(Fa,"P",{});var UE=s(vn);wir=r(UE,"The model class to instantiate is selected based on the "),oue=n(UE,"CODE",{});var vpt=s(oue);Air=r(vpt,"model_type"),vpt.forEach(t),yir=r(UE,` property of the config object (either
passed as an argument or loaded from `),rue=n(UE,"CODE",{});var Tpt=s(rue);Lir=r(Tpt,"pretrained_model_name_or_path"),Tpt.forEach(t),xir=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tue=n(UE,"CODE",{});var Mpt=s(tue);kir=r(Mpt,"pretrained_model_name_or_path"),Mpt.forEach(t),Sir=r(UE,":"),UE.forEach(t),Rir=i(Fa),J=n(Fa,"UL",{});var ee=s(J);Jv=n(ee,"LI",{});var D8e=s(Jv);aue=n(D8e,"STRONG",{});var Ept=s(aue);Bir=r(Ept,"albert"),Ept.forEach(t),Pir=r(D8e," \u2014 "),GV=n(D8e,"A",{href:!0});var Cpt=s(GV);$ir=r(Cpt,"TFAlbertForMaskedLM"),Cpt.forEach(t),Iir=r(D8e," (ALBERT model)"),D8e.forEach(t),qir=i(ee),Yv=n(ee,"LI",{});var G8e=s(Yv);nue=n(G8e,"STRONG",{});var wpt=s(nue);Nir=r(wpt,"bert"),wpt.forEach(t),jir=r(G8e," \u2014 "),OV=n(G8e,"A",{href:!0});var Apt=s(OV);Dir=r(Apt,"TFBertForMaskedLM"),Apt.forEach(t),Gir=r(G8e," (BERT model)"),G8e.forEach(t),Oir=i(ee),Kv=n(ee,"LI",{});var O8e=s(Kv);sue=n(O8e,"STRONG",{});var ypt=s(sue);Vir=r(ypt,"camembert"),ypt.forEach(t),Xir=r(O8e," \u2014 "),VV=n(O8e,"A",{href:!0});var Lpt=s(VV);zir=r(Lpt,"TFCamembertForMaskedLM"),Lpt.forEach(t),Qir=r(O8e," (CamemBERT model)"),O8e.forEach(t),Wir=i(ee),Zv=n(ee,"LI",{});var V8e=s(Zv);lue=n(V8e,"STRONG",{});var xpt=s(lue);Hir=r(xpt,"convbert"),xpt.forEach(t),Uir=r(V8e," \u2014 "),XV=n(V8e,"A",{href:!0});var kpt=s(XV);Jir=r(kpt,"TFConvBertForMaskedLM"),kpt.forEach(t),Yir=r(V8e," (ConvBERT model)"),V8e.forEach(t),Kir=i(ee),e6=n(ee,"LI",{});var X8e=s(e6);iue=n(X8e,"STRONG",{});var Spt=s(iue);Zir=r(Spt,"deberta"),Spt.forEach(t),edr=r(X8e," \u2014 "),zV=n(X8e,"A",{href:!0});var Rpt=s(zV);odr=r(Rpt,"TFDebertaForMaskedLM"),Rpt.forEach(t),rdr=r(X8e," (DeBERTa model)"),X8e.forEach(t),tdr=i(ee),o6=n(ee,"LI",{});var z8e=s(o6);due=n(z8e,"STRONG",{});var Bpt=s(due);adr=r(Bpt,"deberta-v2"),Bpt.forEach(t),ndr=r(z8e," \u2014 "),QV=n(z8e,"A",{href:!0});var Ppt=s(QV);sdr=r(Ppt,"TFDebertaV2ForMaskedLM"),Ppt.forEach(t),ldr=r(z8e," (DeBERTa-v2 model)"),z8e.forEach(t),idr=i(ee),r6=n(ee,"LI",{});var Q8e=s(r6);cue=n(Q8e,"STRONG",{});var $pt=s(cue);ddr=r($pt,"distilbert"),$pt.forEach(t),cdr=r(Q8e," \u2014 "),WV=n(Q8e,"A",{href:!0});var Ipt=s(WV);fdr=r(Ipt,"TFDistilBertForMaskedLM"),Ipt.forEach(t),mdr=r(Q8e," (DistilBERT model)"),Q8e.forEach(t),gdr=i(ee),t6=n(ee,"LI",{});var W8e=s(t6);fue=n(W8e,"STRONG",{});var qpt=s(fue);hdr=r(qpt,"electra"),qpt.forEach(t),pdr=r(W8e," \u2014 "),HV=n(W8e,"A",{href:!0});var Npt=s(HV);_dr=r(Npt,"TFElectraForMaskedLM"),Npt.forEach(t),udr=r(W8e," (ELECTRA model)"),W8e.forEach(t),bdr=i(ee),a6=n(ee,"LI",{});var H8e=s(a6);mue=n(H8e,"STRONG",{});var jpt=s(mue);Fdr=r(jpt,"flaubert"),jpt.forEach(t),vdr=r(H8e," \u2014 "),UV=n(H8e,"A",{href:!0});var Dpt=s(UV);Tdr=r(Dpt,"TFFlaubertWithLMHeadModel"),Dpt.forEach(t),Mdr=r(H8e," (FlauBERT model)"),H8e.forEach(t),Edr=i(ee),n6=n(ee,"LI",{});var U8e=s(n6);gue=n(U8e,"STRONG",{});var Gpt=s(gue);Cdr=r(Gpt,"funnel"),Gpt.forEach(t),wdr=r(U8e," \u2014 "),JV=n(U8e,"A",{href:!0});var Opt=s(JV);Adr=r(Opt,"TFFunnelForMaskedLM"),Opt.forEach(t),ydr=r(U8e," (Funnel Transformer model)"),U8e.forEach(t),Ldr=i(ee),s6=n(ee,"LI",{});var J8e=s(s6);hue=n(J8e,"STRONG",{});var Vpt=s(hue);xdr=r(Vpt,"layoutlm"),Vpt.forEach(t),kdr=r(J8e," \u2014 "),YV=n(J8e,"A",{href:!0});var Xpt=s(YV);Sdr=r(Xpt,"TFLayoutLMForMaskedLM"),Xpt.forEach(t),Rdr=r(J8e," (LayoutLM model)"),J8e.forEach(t),Bdr=i(ee),l6=n(ee,"LI",{});var Y8e=s(l6);pue=n(Y8e,"STRONG",{});var zpt=s(pue);Pdr=r(zpt,"longformer"),zpt.forEach(t),$dr=r(Y8e," \u2014 "),KV=n(Y8e,"A",{href:!0});var Qpt=s(KV);Idr=r(Qpt,"TFLongformerForMaskedLM"),Qpt.forEach(t),qdr=r(Y8e," (Longformer model)"),Y8e.forEach(t),Ndr=i(ee),i6=n(ee,"LI",{});var K8e=s(i6);_ue=n(K8e,"STRONG",{});var Wpt=s(_ue);jdr=r(Wpt,"mobilebert"),Wpt.forEach(t),Ddr=r(K8e," \u2014 "),ZV=n(K8e,"A",{href:!0});var Hpt=s(ZV);Gdr=r(Hpt,"TFMobileBertForMaskedLM"),Hpt.forEach(t),Odr=r(K8e," (MobileBERT model)"),K8e.forEach(t),Vdr=i(ee),d6=n(ee,"LI",{});var Z8e=s(d6);uue=n(Z8e,"STRONG",{});var Upt=s(uue);Xdr=r(Upt,"mpnet"),Upt.forEach(t),zdr=r(Z8e," \u2014 "),eX=n(Z8e,"A",{href:!0});var Jpt=s(eX);Qdr=r(Jpt,"TFMPNetForMaskedLM"),Jpt.forEach(t),Wdr=r(Z8e," (MPNet model)"),Z8e.forEach(t),Hdr=i(ee),c6=n(ee,"LI",{});var e9e=s(c6);bue=n(e9e,"STRONG",{});var Ypt=s(bue);Udr=r(Ypt,"rembert"),Ypt.forEach(t),Jdr=r(e9e," \u2014 "),oX=n(e9e,"A",{href:!0});var Kpt=s(oX);Ydr=r(Kpt,"TFRemBertForMaskedLM"),Kpt.forEach(t),Kdr=r(e9e," (RemBERT model)"),e9e.forEach(t),Zdr=i(ee),f6=n(ee,"LI",{});var o9e=s(f6);Fue=n(o9e,"STRONG",{});var Zpt=s(Fue);ecr=r(Zpt,"roberta"),Zpt.forEach(t),ocr=r(o9e," \u2014 "),rX=n(o9e,"A",{href:!0});var e_t=s(rX);rcr=r(e_t,"TFRobertaForMaskedLM"),e_t.forEach(t),tcr=r(o9e," (RoBERTa model)"),o9e.forEach(t),acr=i(ee),m6=n(ee,"LI",{});var r9e=s(m6);vue=n(r9e,"STRONG",{});var o_t=s(vue);ncr=r(o_t,"roformer"),o_t.forEach(t),scr=r(r9e," \u2014 "),tX=n(r9e,"A",{href:!0});var r_t=s(tX);lcr=r(r_t,"TFRoFormerForMaskedLM"),r_t.forEach(t),icr=r(r9e," (RoFormer model)"),r9e.forEach(t),dcr=i(ee),g6=n(ee,"LI",{});var t9e=s(g6);Tue=n(t9e,"STRONG",{});var t_t=s(Tue);ccr=r(t_t,"tapas"),t_t.forEach(t),fcr=r(t9e," \u2014 "),aX=n(t9e,"A",{href:!0});var a_t=s(aX);mcr=r(a_t,"TFTapasForMaskedLM"),a_t.forEach(t),gcr=r(t9e," (TAPAS model)"),t9e.forEach(t),hcr=i(ee),h6=n(ee,"LI",{});var a9e=s(h6);Mue=n(a9e,"STRONG",{});var n_t=s(Mue);pcr=r(n_t,"xlm"),n_t.forEach(t),_cr=r(a9e," \u2014 "),nX=n(a9e,"A",{href:!0});var s_t=s(nX);ucr=r(s_t,"TFXLMWithLMHeadModel"),s_t.forEach(t),bcr=r(a9e," (XLM model)"),a9e.forEach(t),Fcr=i(ee),p6=n(ee,"LI",{});var n9e=s(p6);Eue=n(n9e,"STRONG",{});var l_t=s(Eue);vcr=r(l_t,"xlm-roberta"),l_t.forEach(t),Tcr=r(n9e," \u2014 "),sX=n(n9e,"A",{href:!0});var i_t=s(sX);Mcr=r(i_t,"TFXLMRobertaForMaskedLM"),i_t.forEach(t),Ecr=r(n9e," (XLM-RoBERTa model)"),n9e.forEach(t),ee.forEach(t),Ccr=i(Fa),Cue=n(Fa,"P",{});var d_t=s(Cue);wcr=r(d_t,"Examples:"),d_t.forEach(t),Acr=i(Fa),m(S0.$$.fragment,Fa),Fa.forEach(t),Wl.forEach(t),rBe=i(c),Lc=n(c,"H2",{class:!0});var g$e=s(Lc);_6=n(g$e,"A",{id:!0,class:!0,href:!0});var c_t=s(_6);wue=n(c_t,"SPAN",{});var f_t=s(wue);m(R0.$$.fragment,f_t),f_t.forEach(t),c_t.forEach(t),ycr=i(g$e),Aue=n(g$e,"SPAN",{});var m_t=s(Aue);Lcr=r(m_t,"TFAutoModelForSeq2SeqLM"),m_t.forEach(t),g$e.forEach(t),tBe=i(c),Cr=n(c,"DIV",{class:!0});var Ul=s(Cr);m(B0.$$.fragment,Ul),xcr=i(Ul),xc=n(Ul,"P",{});var oJ=s(xc);kcr=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lX=n(oJ,"A",{href:!0});var g_t=s(lX);Scr=r(g_t,"from_pretrained()"),g_t.forEach(t),Rcr=r(oJ," class method or the "),iX=n(oJ,"A",{href:!0});var h_t=s(iX);Bcr=r(h_t,"from_config()"),h_t.forEach(t),Pcr=r(oJ,` class
method.`),oJ.forEach(t),$cr=i(Ul),P0=n(Ul,"P",{});var h$e=s(P0);Icr=r(h$e,"This class cannot be instantiated directly using "),yue=n(h$e,"CODE",{});var p_t=s(yue);qcr=r(p_t,"__init__()"),p_t.forEach(t),Ncr=r(h$e," (throws an error)."),h$e.forEach(t),jcr=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m($0.$$.fragment,Jl),Dcr=i(Jl),Lue=n(Jl,"P",{});var __t=s(Lue);Gcr=r(__t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),__t.forEach(t),Ocr=i(Jl),kc=n(Jl,"P",{});var rJ=s(kc);Vcr=r(rJ,`Note:
Loading a model from its configuration file does `),xue=n(rJ,"STRONG",{});var u_t=s(xue);Xcr=r(u_t,"not"),u_t.forEach(t),zcr=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(rJ,"A",{href:!0});var b_t=s(dX);Qcr=r(b_t,"from_pretrained()"),b_t.forEach(t),Wcr=r(rJ," to load the model weights."),rJ.forEach(t),Hcr=i(Jl),kue=n(Jl,"P",{});var F_t=s(kue);Ucr=r(F_t,"Examples:"),F_t.forEach(t),Jcr=i(Jl),m(I0.$$.fragment,Jl),Jl.forEach(t),Ycr=i(Ul),Fo=n(Ul,"DIV",{class:!0});var va=s(Fo);m(q0.$$.fragment,va),Kcr=i(va),Sue=n(va,"P",{});var v_t=s(Sue);Zcr=r(v_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),v_t.forEach(t),efr=i(va),Tn=n(va,"P",{});var JE=s(Tn);ofr=r(JE,"The model class to instantiate is selected based on the "),Rue=n(JE,"CODE",{});var T_t=s(Rue);rfr=r(T_t,"model_type"),T_t.forEach(t),tfr=r(JE,` property of the config object (either
passed as an argument or loaded from `),Bue=n(JE,"CODE",{});var M_t=s(Bue);afr=r(M_t,"pretrained_model_name_or_path"),M_t.forEach(t),nfr=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(JE,"CODE",{});var E_t=s(Pue);sfr=r(E_t,"pretrained_model_name_or_path"),E_t.forEach(t),lfr=r(JE,":"),JE.forEach(t),ifr=i(va),ue=n(va,"UL",{});var we=s(ue);u6=n(we,"LI",{});var s9e=s(u6);$ue=n(s9e,"STRONG",{});var C_t=s($ue);dfr=r(C_t,"bart"),C_t.forEach(t),cfr=r(s9e," \u2014 "),cX=n(s9e,"A",{href:!0});var w_t=s(cX);ffr=r(w_t,"TFBartForConditionalGeneration"),w_t.forEach(t),mfr=r(s9e," (BART model)"),s9e.forEach(t),gfr=i(we),b6=n(we,"LI",{});var l9e=s(b6);Iue=n(l9e,"STRONG",{});var A_t=s(Iue);hfr=r(A_t,"blenderbot"),A_t.forEach(t),pfr=r(l9e," \u2014 "),fX=n(l9e,"A",{href:!0});var y_t=s(fX);_fr=r(y_t,"TFBlenderbotForConditionalGeneration"),y_t.forEach(t),ufr=r(l9e," (Blenderbot model)"),l9e.forEach(t),bfr=i(we),F6=n(we,"LI",{});var i9e=s(F6);que=n(i9e,"STRONG",{});var L_t=s(que);Ffr=r(L_t,"blenderbot-small"),L_t.forEach(t),vfr=r(i9e," \u2014 "),mX=n(i9e,"A",{href:!0});var x_t=s(mX);Tfr=r(x_t,"TFBlenderbotSmallForConditionalGeneration"),x_t.forEach(t),Mfr=r(i9e," (BlenderbotSmall model)"),i9e.forEach(t),Efr=i(we),v6=n(we,"LI",{});var d9e=s(v6);Nue=n(d9e,"STRONG",{});var k_t=s(Nue);Cfr=r(k_t,"encoder-decoder"),k_t.forEach(t),wfr=r(d9e," \u2014 "),gX=n(d9e,"A",{href:!0});var S_t=s(gX);Afr=r(S_t,"TFEncoderDecoderModel"),S_t.forEach(t),yfr=r(d9e," (Encoder decoder model)"),d9e.forEach(t),Lfr=i(we),T6=n(we,"LI",{});var c9e=s(T6);jue=n(c9e,"STRONG",{});var R_t=s(jue);xfr=r(R_t,"led"),R_t.forEach(t),kfr=r(c9e," \u2014 "),hX=n(c9e,"A",{href:!0});var B_t=s(hX);Sfr=r(B_t,"TFLEDForConditionalGeneration"),B_t.forEach(t),Rfr=r(c9e," (LED model)"),c9e.forEach(t),Bfr=i(we),M6=n(we,"LI",{});var f9e=s(M6);Due=n(f9e,"STRONG",{});var P_t=s(Due);Pfr=r(P_t,"marian"),P_t.forEach(t),$fr=r(f9e," \u2014 "),pX=n(f9e,"A",{href:!0});var $_t=s(pX);Ifr=r($_t,"TFMarianMTModel"),$_t.forEach(t),qfr=r(f9e," (Marian model)"),f9e.forEach(t),Nfr=i(we),E6=n(we,"LI",{});var m9e=s(E6);Gue=n(m9e,"STRONG",{});var I_t=s(Gue);jfr=r(I_t,"mbart"),I_t.forEach(t),Dfr=r(m9e," \u2014 "),_X=n(m9e,"A",{href:!0});var q_t=s(_X);Gfr=r(q_t,"TFMBartForConditionalGeneration"),q_t.forEach(t),Ofr=r(m9e," (mBART model)"),m9e.forEach(t),Vfr=i(we),C6=n(we,"LI",{});var g9e=s(C6);Oue=n(g9e,"STRONG",{});var N_t=s(Oue);Xfr=r(N_t,"mt5"),N_t.forEach(t),zfr=r(g9e," \u2014 "),uX=n(g9e,"A",{href:!0});var j_t=s(uX);Qfr=r(j_t,"TFMT5ForConditionalGeneration"),j_t.forEach(t),Wfr=r(g9e," (mT5 model)"),g9e.forEach(t),Hfr=i(we),w6=n(we,"LI",{});var h9e=s(w6);Vue=n(h9e,"STRONG",{});var D_t=s(Vue);Ufr=r(D_t,"pegasus"),D_t.forEach(t),Jfr=r(h9e," \u2014 "),bX=n(h9e,"A",{href:!0});var G_t=s(bX);Yfr=r(G_t,"TFPegasusForConditionalGeneration"),G_t.forEach(t),Kfr=r(h9e," (Pegasus model)"),h9e.forEach(t),Zfr=i(we),A6=n(we,"LI",{});var p9e=s(A6);Xue=n(p9e,"STRONG",{});var O_t=s(Xue);emr=r(O_t,"t5"),O_t.forEach(t),omr=r(p9e," \u2014 "),FX=n(p9e,"A",{href:!0});var V_t=s(FX);rmr=r(V_t,"TFT5ForConditionalGeneration"),V_t.forEach(t),tmr=r(p9e," (T5 model)"),p9e.forEach(t),we.forEach(t),amr=i(va),zue=n(va,"P",{});var X_t=s(zue);nmr=r(X_t,"Examples:"),X_t.forEach(t),smr=i(va),m(N0.$$.fragment,va),va.forEach(t),Ul.forEach(t),aBe=i(c),Sc=n(c,"H2",{class:!0});var p$e=s(Sc);y6=n(p$e,"A",{id:!0,class:!0,href:!0});var z_t=s(y6);Que=n(z_t,"SPAN",{});var Q_t=s(Que);m(j0.$$.fragment,Q_t),Q_t.forEach(t),z_t.forEach(t),lmr=i(p$e),Wue=n(p$e,"SPAN",{});var W_t=s(Wue);imr=r(W_t,"TFAutoModelForSequenceClassification"),W_t.forEach(t),p$e.forEach(t),nBe=i(c),wr=n(c,"DIV",{class:!0});var Yl=s(wr);m(D0.$$.fragment,Yl),dmr=i(Yl),Rc=n(Yl,"P",{});var tJ=s(Rc);cmr=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),vX=n(tJ,"A",{href:!0});var H_t=s(vX);fmr=r(H_t,"from_pretrained()"),H_t.forEach(t),mmr=r(tJ," class method or the "),TX=n(tJ,"A",{href:!0});var U_t=s(TX);gmr=r(U_t,"from_config()"),U_t.forEach(t),hmr=r(tJ,` class
method.`),tJ.forEach(t),pmr=i(Yl),G0=n(Yl,"P",{});var _$e=s(G0);_mr=r(_$e,"This class cannot be instantiated directly using "),Hue=n(_$e,"CODE",{});var J_t=s(Hue);umr=r(J_t,"__init__()"),J_t.forEach(t),bmr=r(_$e," (throws an error)."),_$e.forEach(t),Fmr=i(Yl),Ft=n(Yl,"DIV",{class:!0});var Kl=s(Ft);m(O0.$$.fragment,Kl),vmr=i(Kl),Uue=n(Kl,"P",{});var Y_t=s(Uue);Tmr=r(Y_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Y_t.forEach(t),Mmr=i(Kl),Bc=n(Kl,"P",{});var aJ=s(Bc);Emr=r(aJ,`Note:
Loading a model from its configuration file does `),Jue=n(aJ,"STRONG",{});var K_t=s(Jue);Cmr=r(K_t,"not"),K_t.forEach(t),wmr=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(aJ,"A",{href:!0});var Z_t=s(MX);Amr=r(Z_t,"from_pretrained()"),Z_t.forEach(t),ymr=r(aJ," to load the model weights."),aJ.forEach(t),Lmr=i(Kl),Yue=n(Kl,"P",{});var eut=s(Yue);xmr=r(eut,"Examples:"),eut.forEach(t),kmr=i(Kl),m(V0.$$.fragment,Kl),Kl.forEach(t),Smr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Ta=s(vo);m(X0.$$.fragment,Ta),Rmr=i(Ta),Kue=n(Ta,"P",{});var out=s(Kue);Bmr=r(out,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),out.forEach(t),Pmr=i(Ta),Mn=n(Ta,"P",{});var YE=s(Mn);$mr=r(YE,"The model class to instantiate is selected based on the "),Zue=n(YE,"CODE",{});var rut=s(Zue);Imr=r(rut,"model_type"),rut.forEach(t),qmr=r(YE,` property of the config object (either
passed as an argument or loaded from `),e1e=n(YE,"CODE",{});var tut=s(e1e);Nmr=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),jmr=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(YE,"CODE",{});var aut=s(o1e);Dmr=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),Gmr=r(YE,":"),YE.forEach(t),Omr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);L6=n(Q,"LI",{});var _9e=s(L6);r1e=n(_9e,"STRONG",{});var nut=s(r1e);Vmr=r(nut,"albert"),nut.forEach(t),Xmr=r(_9e," \u2014 "),EX=n(_9e,"A",{href:!0});var sut=s(EX);zmr=r(sut,"TFAlbertForSequenceClassification"),sut.forEach(t),Qmr=r(_9e," (ALBERT model)"),_9e.forEach(t),Wmr=i(Q),x6=n(Q,"LI",{});var u9e=s(x6);t1e=n(u9e,"STRONG",{});var lut=s(t1e);Hmr=r(lut,"bert"),lut.forEach(t),Umr=r(u9e," \u2014 "),CX=n(u9e,"A",{href:!0});var iut=s(CX);Jmr=r(iut,"TFBertForSequenceClassification"),iut.forEach(t),Ymr=r(u9e," (BERT model)"),u9e.forEach(t),Kmr=i(Q),k6=n(Q,"LI",{});var b9e=s(k6);a1e=n(b9e,"STRONG",{});var dut=s(a1e);Zmr=r(dut,"camembert"),dut.forEach(t),egr=r(b9e," \u2014 "),wX=n(b9e,"A",{href:!0});var cut=s(wX);ogr=r(cut,"TFCamembertForSequenceClassification"),cut.forEach(t),rgr=r(b9e," (CamemBERT model)"),b9e.forEach(t),tgr=i(Q),S6=n(Q,"LI",{});var F9e=s(S6);n1e=n(F9e,"STRONG",{});var fut=s(n1e);agr=r(fut,"convbert"),fut.forEach(t),ngr=r(F9e," \u2014 "),AX=n(F9e,"A",{href:!0});var mut=s(AX);sgr=r(mut,"TFConvBertForSequenceClassification"),mut.forEach(t),lgr=r(F9e," (ConvBERT model)"),F9e.forEach(t),igr=i(Q),R6=n(Q,"LI",{});var v9e=s(R6);s1e=n(v9e,"STRONG",{});var gut=s(s1e);dgr=r(gut,"ctrl"),gut.forEach(t),cgr=r(v9e," \u2014 "),yX=n(v9e,"A",{href:!0});var hut=s(yX);fgr=r(hut,"TFCTRLForSequenceClassification"),hut.forEach(t),mgr=r(v9e," (CTRL model)"),v9e.forEach(t),ggr=i(Q),B6=n(Q,"LI",{});var T9e=s(B6);l1e=n(T9e,"STRONG",{});var put=s(l1e);hgr=r(put,"deberta"),put.forEach(t),pgr=r(T9e," \u2014 "),LX=n(T9e,"A",{href:!0});var _ut=s(LX);_gr=r(_ut,"TFDebertaForSequenceClassification"),_ut.forEach(t),ugr=r(T9e," (DeBERTa model)"),T9e.forEach(t),bgr=i(Q),P6=n(Q,"LI",{});var M9e=s(P6);i1e=n(M9e,"STRONG",{});var uut=s(i1e);Fgr=r(uut,"deberta-v2"),uut.forEach(t),vgr=r(M9e," \u2014 "),xX=n(M9e,"A",{href:!0});var but=s(xX);Tgr=r(but,"TFDebertaV2ForSequenceClassification"),but.forEach(t),Mgr=r(M9e," (DeBERTa-v2 model)"),M9e.forEach(t),Egr=i(Q),$6=n(Q,"LI",{});var E9e=s($6);d1e=n(E9e,"STRONG",{});var Fut=s(d1e);Cgr=r(Fut,"distilbert"),Fut.forEach(t),wgr=r(E9e," \u2014 "),kX=n(E9e,"A",{href:!0});var vut=s(kX);Agr=r(vut,"TFDistilBertForSequenceClassification"),vut.forEach(t),ygr=r(E9e," (DistilBERT model)"),E9e.forEach(t),Lgr=i(Q),I6=n(Q,"LI",{});var C9e=s(I6);c1e=n(C9e,"STRONG",{});var Tut=s(c1e);xgr=r(Tut,"electra"),Tut.forEach(t),kgr=r(C9e," \u2014 "),SX=n(C9e,"A",{href:!0});var Mut=s(SX);Sgr=r(Mut,"TFElectraForSequenceClassification"),Mut.forEach(t),Rgr=r(C9e," (ELECTRA model)"),C9e.forEach(t),Bgr=i(Q),q6=n(Q,"LI",{});var w9e=s(q6);f1e=n(w9e,"STRONG",{});var Eut=s(f1e);Pgr=r(Eut,"flaubert"),Eut.forEach(t),$gr=r(w9e," \u2014 "),RX=n(w9e,"A",{href:!0});var Cut=s(RX);Igr=r(Cut,"TFFlaubertForSequenceClassification"),Cut.forEach(t),qgr=r(w9e," (FlauBERT model)"),w9e.forEach(t),Ngr=i(Q),N6=n(Q,"LI",{});var A9e=s(N6);m1e=n(A9e,"STRONG",{});var wut=s(m1e);jgr=r(wut,"funnel"),wut.forEach(t),Dgr=r(A9e," \u2014 "),BX=n(A9e,"A",{href:!0});var Aut=s(BX);Ggr=r(Aut,"TFFunnelForSequenceClassification"),Aut.forEach(t),Ogr=r(A9e," (Funnel Transformer model)"),A9e.forEach(t),Vgr=i(Q),j6=n(Q,"LI",{});var y9e=s(j6);g1e=n(y9e,"STRONG",{});var yut=s(g1e);Xgr=r(yut,"gpt2"),yut.forEach(t),zgr=r(y9e," \u2014 "),PX=n(y9e,"A",{href:!0});var Lut=s(PX);Qgr=r(Lut,"TFGPT2ForSequenceClassification"),Lut.forEach(t),Wgr=r(y9e," (OpenAI GPT-2 model)"),y9e.forEach(t),Hgr=i(Q),D6=n(Q,"LI",{});var L9e=s(D6);h1e=n(L9e,"STRONG",{});var xut=s(h1e);Ugr=r(xut,"gptj"),xut.forEach(t),Jgr=r(L9e," \u2014 "),$X=n(L9e,"A",{href:!0});var kut=s($X);Ygr=r(kut,"TFGPTJForSequenceClassification"),kut.forEach(t),Kgr=r(L9e," (GPT-J model)"),L9e.forEach(t),Zgr=i(Q),G6=n(Q,"LI",{});var x9e=s(G6);p1e=n(x9e,"STRONG",{});var Sut=s(p1e);ehr=r(Sut,"layoutlm"),Sut.forEach(t),ohr=r(x9e," \u2014 "),IX=n(x9e,"A",{href:!0});var Rut=s(IX);rhr=r(Rut,"TFLayoutLMForSequenceClassification"),Rut.forEach(t),thr=r(x9e," (LayoutLM model)"),x9e.forEach(t),ahr=i(Q),O6=n(Q,"LI",{});var k9e=s(O6);_1e=n(k9e,"STRONG",{});var But=s(_1e);nhr=r(But,"longformer"),But.forEach(t),shr=r(k9e," \u2014 "),qX=n(k9e,"A",{href:!0});var Put=s(qX);lhr=r(Put,"TFLongformerForSequenceClassification"),Put.forEach(t),ihr=r(k9e," (Longformer model)"),k9e.forEach(t),dhr=i(Q),V6=n(Q,"LI",{});var S9e=s(V6);u1e=n(S9e,"STRONG",{});var $ut=s(u1e);chr=r($ut,"mobilebert"),$ut.forEach(t),fhr=r(S9e," \u2014 "),NX=n(S9e,"A",{href:!0});var Iut=s(NX);mhr=r(Iut,"TFMobileBertForSequenceClassification"),Iut.forEach(t),ghr=r(S9e," (MobileBERT model)"),S9e.forEach(t),hhr=i(Q),X6=n(Q,"LI",{});var R9e=s(X6);b1e=n(R9e,"STRONG",{});var qut=s(b1e);phr=r(qut,"mpnet"),qut.forEach(t),_hr=r(R9e," \u2014 "),jX=n(R9e,"A",{href:!0});var Nut=s(jX);uhr=r(Nut,"TFMPNetForSequenceClassification"),Nut.forEach(t),bhr=r(R9e," (MPNet model)"),R9e.forEach(t),Fhr=i(Q),z6=n(Q,"LI",{});var B9e=s(z6);F1e=n(B9e,"STRONG",{});var jut=s(F1e);vhr=r(jut,"openai-gpt"),jut.forEach(t),Thr=r(B9e," \u2014 "),DX=n(B9e,"A",{href:!0});var Dut=s(DX);Mhr=r(Dut,"TFOpenAIGPTForSequenceClassification"),Dut.forEach(t),Ehr=r(B9e," (OpenAI GPT model)"),B9e.forEach(t),Chr=i(Q),Q6=n(Q,"LI",{});var P9e=s(Q6);v1e=n(P9e,"STRONG",{});var Gut=s(v1e);whr=r(Gut,"rembert"),Gut.forEach(t),Ahr=r(P9e," \u2014 "),GX=n(P9e,"A",{href:!0});var Out=s(GX);yhr=r(Out,"TFRemBertForSequenceClassification"),Out.forEach(t),Lhr=r(P9e," (RemBERT model)"),P9e.forEach(t),xhr=i(Q),W6=n(Q,"LI",{});var $9e=s(W6);T1e=n($9e,"STRONG",{});var Vut=s(T1e);khr=r(Vut,"roberta"),Vut.forEach(t),Shr=r($9e," \u2014 "),OX=n($9e,"A",{href:!0});var Xut=s(OX);Rhr=r(Xut,"TFRobertaForSequenceClassification"),Xut.forEach(t),Bhr=r($9e," (RoBERTa model)"),$9e.forEach(t),Phr=i(Q),H6=n(Q,"LI",{});var I9e=s(H6);M1e=n(I9e,"STRONG",{});var zut=s(M1e);$hr=r(zut,"roformer"),zut.forEach(t),Ihr=r(I9e," \u2014 "),VX=n(I9e,"A",{href:!0});var Qut=s(VX);qhr=r(Qut,"TFRoFormerForSequenceClassification"),Qut.forEach(t),Nhr=r(I9e," (RoFormer model)"),I9e.forEach(t),jhr=i(Q),U6=n(Q,"LI",{});var q9e=s(U6);E1e=n(q9e,"STRONG",{});var Wut=s(E1e);Dhr=r(Wut,"tapas"),Wut.forEach(t),Ghr=r(q9e," \u2014 "),XX=n(q9e,"A",{href:!0});var Hut=s(XX);Ohr=r(Hut,"TFTapasForSequenceClassification"),Hut.forEach(t),Vhr=r(q9e," (TAPAS model)"),q9e.forEach(t),Xhr=i(Q),J6=n(Q,"LI",{});var N9e=s(J6);C1e=n(N9e,"STRONG",{});var Uut=s(C1e);zhr=r(Uut,"transfo-xl"),Uut.forEach(t),Qhr=r(N9e," \u2014 "),zX=n(N9e,"A",{href:!0});var Jut=s(zX);Whr=r(Jut,"TFTransfoXLForSequenceClassification"),Jut.forEach(t),Hhr=r(N9e," (Transformer-XL model)"),N9e.forEach(t),Uhr=i(Q),Y6=n(Q,"LI",{});var j9e=s(Y6);w1e=n(j9e,"STRONG",{});var Yut=s(w1e);Jhr=r(Yut,"xlm"),Yut.forEach(t),Yhr=r(j9e," \u2014 "),QX=n(j9e,"A",{href:!0});var Kut=s(QX);Khr=r(Kut,"TFXLMForSequenceClassification"),Kut.forEach(t),Zhr=r(j9e," (XLM model)"),j9e.forEach(t),epr=i(Q),K6=n(Q,"LI",{});var D9e=s(K6);A1e=n(D9e,"STRONG",{});var Zut=s(A1e);opr=r(Zut,"xlm-roberta"),Zut.forEach(t),rpr=r(D9e," \u2014 "),WX=n(D9e,"A",{href:!0});var e1t=s(WX);tpr=r(e1t,"TFXLMRobertaForSequenceClassification"),e1t.forEach(t),apr=r(D9e," (XLM-RoBERTa model)"),D9e.forEach(t),npr=i(Q),Z6=n(Q,"LI",{});var G9e=s(Z6);y1e=n(G9e,"STRONG",{});var o1t=s(y1e);spr=r(o1t,"xlnet"),o1t.forEach(t),lpr=r(G9e," \u2014 "),HX=n(G9e,"A",{href:!0});var r1t=s(HX);ipr=r(r1t,"TFXLNetForSequenceClassification"),r1t.forEach(t),dpr=r(G9e," (XLNet model)"),G9e.forEach(t),Q.forEach(t),cpr=i(Ta),L1e=n(Ta,"P",{});var t1t=s(L1e);fpr=r(t1t,"Examples:"),t1t.forEach(t),mpr=i(Ta),m(z0.$$.fragment,Ta),Ta.forEach(t),Yl.forEach(t),sBe=i(c),Pc=n(c,"H2",{class:!0});var u$e=s(Pc);eT=n(u$e,"A",{id:!0,class:!0,href:!0});var a1t=s(eT);x1e=n(a1t,"SPAN",{});var n1t=s(x1e);m(Q0.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),gpr=i(u$e),k1e=n(u$e,"SPAN",{});var s1t=s(k1e);hpr=r(s1t,"TFAutoModelForMultipleChoice"),s1t.forEach(t),u$e.forEach(t),lBe=i(c),Ar=n(c,"DIV",{class:!0});var Zl=s(Ar);m(W0.$$.fragment,Zl),ppr=i(Zl),$c=n(Zl,"P",{});var nJ=s($c);_pr=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UX=n(nJ,"A",{href:!0});var l1t=s(UX);upr=r(l1t,"from_pretrained()"),l1t.forEach(t),bpr=r(nJ," class method or the "),JX=n(nJ,"A",{href:!0});var i1t=s(JX);Fpr=r(i1t,"from_config()"),i1t.forEach(t),vpr=r(nJ,` class
method.`),nJ.forEach(t),Tpr=i(Zl),H0=n(Zl,"P",{});var b$e=s(H0);Mpr=r(b$e,"This class cannot be instantiated directly using "),S1e=n(b$e,"CODE",{});var d1t=s(S1e);Epr=r(d1t,"__init__()"),d1t.forEach(t),Cpr=r(b$e," (throws an error)."),b$e.forEach(t),wpr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(U0.$$.fragment,ei),Apr=i(ei),R1e=n(ei,"P",{});var c1t=s(R1e);ypr=r(c1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),c1t.forEach(t),Lpr=i(ei),Ic=n(ei,"P",{});var sJ=s(Ic);xpr=r(sJ,`Note:
Loading a model from its configuration file does `),B1e=n(sJ,"STRONG",{});var f1t=s(B1e);kpr=r(f1t,"not"),f1t.forEach(t),Spr=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(sJ,"A",{href:!0});var m1t=s(YX);Rpr=r(m1t,"from_pretrained()"),m1t.forEach(t),Bpr=r(sJ," to load the model weights."),sJ.forEach(t),Ppr=i(ei),P1e=n(ei,"P",{});var g1t=s(P1e);$pr=r(g1t,"Examples:"),g1t.forEach(t),Ipr=i(ei),m(J0.$$.fragment,ei),ei.forEach(t),qpr=i(Zl),To=n(Zl,"DIV",{class:!0});var Ma=s(To);m(Y0.$$.fragment,Ma),Npr=i(Ma),$1e=n(Ma,"P",{});var h1t=s($1e);jpr=r(h1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),h1t.forEach(t),Dpr=i(Ma),En=n(Ma,"P",{});var KE=s(En);Gpr=r(KE,"The model class to instantiate is selected based on the "),I1e=n(KE,"CODE",{});var p1t=s(I1e);Opr=r(p1t,"model_type"),p1t.forEach(t),Vpr=r(KE,` property of the config object (either
passed as an argument or loaded from `),q1e=n(KE,"CODE",{});var _1t=s(q1e);Xpr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),zpr=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(KE,"CODE",{});var u1t=s(N1e);Qpr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Wpr=r(KE,":"),KE.forEach(t),Hpr=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);oT=n(le,"LI",{});var O9e=s(oT);j1e=n(O9e,"STRONG",{});var b1t=s(j1e);Upr=r(b1t,"albert"),b1t.forEach(t),Jpr=r(O9e," \u2014 "),KX=n(O9e,"A",{href:!0});var F1t=s(KX);Ypr=r(F1t,"TFAlbertForMultipleChoice"),F1t.forEach(t),Kpr=r(O9e," (ALBERT model)"),O9e.forEach(t),Zpr=i(le),rT=n(le,"LI",{});var V9e=s(rT);D1e=n(V9e,"STRONG",{});var v1t=s(D1e);e_r=r(v1t,"bert"),v1t.forEach(t),o_r=r(V9e," \u2014 "),ZX=n(V9e,"A",{href:!0});var T1t=s(ZX);r_r=r(T1t,"TFBertForMultipleChoice"),T1t.forEach(t),t_r=r(V9e," (BERT model)"),V9e.forEach(t),a_r=i(le),tT=n(le,"LI",{});var X9e=s(tT);G1e=n(X9e,"STRONG",{});var M1t=s(G1e);n_r=r(M1t,"camembert"),M1t.forEach(t),s_r=r(X9e," \u2014 "),ez=n(X9e,"A",{href:!0});var E1t=s(ez);l_r=r(E1t,"TFCamembertForMultipleChoice"),E1t.forEach(t),i_r=r(X9e," (CamemBERT model)"),X9e.forEach(t),d_r=i(le),aT=n(le,"LI",{});var z9e=s(aT);O1e=n(z9e,"STRONG",{});var C1t=s(O1e);c_r=r(C1t,"convbert"),C1t.forEach(t),f_r=r(z9e," \u2014 "),oz=n(z9e,"A",{href:!0});var w1t=s(oz);m_r=r(w1t,"TFConvBertForMultipleChoice"),w1t.forEach(t),g_r=r(z9e," (ConvBERT model)"),z9e.forEach(t),h_r=i(le),nT=n(le,"LI",{});var Q9e=s(nT);V1e=n(Q9e,"STRONG",{});var A1t=s(V1e);p_r=r(A1t,"distilbert"),A1t.forEach(t),__r=r(Q9e," \u2014 "),rz=n(Q9e,"A",{href:!0});var y1t=s(rz);u_r=r(y1t,"TFDistilBertForMultipleChoice"),y1t.forEach(t),b_r=r(Q9e," (DistilBERT model)"),Q9e.forEach(t),F_r=i(le),sT=n(le,"LI",{});var W9e=s(sT);X1e=n(W9e,"STRONG",{});var L1t=s(X1e);v_r=r(L1t,"electra"),L1t.forEach(t),T_r=r(W9e," \u2014 "),tz=n(W9e,"A",{href:!0});var x1t=s(tz);M_r=r(x1t,"TFElectraForMultipleChoice"),x1t.forEach(t),E_r=r(W9e," (ELECTRA model)"),W9e.forEach(t),C_r=i(le),lT=n(le,"LI",{});var H9e=s(lT);z1e=n(H9e,"STRONG",{});var k1t=s(z1e);w_r=r(k1t,"flaubert"),k1t.forEach(t),A_r=r(H9e," \u2014 "),az=n(H9e,"A",{href:!0});var S1t=s(az);y_r=r(S1t,"TFFlaubertForMultipleChoice"),S1t.forEach(t),L_r=r(H9e," (FlauBERT model)"),H9e.forEach(t),x_r=i(le),iT=n(le,"LI",{});var U9e=s(iT);Q1e=n(U9e,"STRONG",{});var R1t=s(Q1e);k_r=r(R1t,"funnel"),R1t.forEach(t),S_r=r(U9e," \u2014 "),nz=n(U9e,"A",{href:!0});var B1t=s(nz);R_r=r(B1t,"TFFunnelForMultipleChoice"),B1t.forEach(t),B_r=r(U9e," (Funnel Transformer model)"),U9e.forEach(t),P_r=i(le),dT=n(le,"LI",{});var J9e=s(dT);W1e=n(J9e,"STRONG",{});var P1t=s(W1e);$_r=r(P1t,"longformer"),P1t.forEach(t),I_r=r(J9e," \u2014 "),sz=n(J9e,"A",{href:!0});var $1t=s(sz);q_r=r($1t,"TFLongformerForMultipleChoice"),$1t.forEach(t),N_r=r(J9e," (Longformer model)"),J9e.forEach(t),j_r=i(le),cT=n(le,"LI",{});var Y9e=s(cT);H1e=n(Y9e,"STRONG",{});var I1t=s(H1e);D_r=r(I1t,"mobilebert"),I1t.forEach(t),G_r=r(Y9e," \u2014 "),lz=n(Y9e,"A",{href:!0});var q1t=s(lz);O_r=r(q1t,"TFMobileBertForMultipleChoice"),q1t.forEach(t),V_r=r(Y9e," (MobileBERT model)"),Y9e.forEach(t),X_r=i(le),fT=n(le,"LI",{});var K9e=s(fT);U1e=n(K9e,"STRONG",{});var N1t=s(U1e);z_r=r(N1t,"mpnet"),N1t.forEach(t),Q_r=r(K9e," \u2014 "),iz=n(K9e,"A",{href:!0});var j1t=s(iz);W_r=r(j1t,"TFMPNetForMultipleChoice"),j1t.forEach(t),H_r=r(K9e," (MPNet model)"),K9e.forEach(t),U_r=i(le),mT=n(le,"LI",{});var Z9e=s(mT);J1e=n(Z9e,"STRONG",{});var D1t=s(J1e);J_r=r(D1t,"rembert"),D1t.forEach(t),Y_r=r(Z9e," \u2014 "),dz=n(Z9e,"A",{href:!0});var G1t=s(dz);K_r=r(G1t,"TFRemBertForMultipleChoice"),G1t.forEach(t),Z_r=r(Z9e," (RemBERT model)"),Z9e.forEach(t),eur=i(le),gT=n(le,"LI",{});var exe=s(gT);Y1e=n(exe,"STRONG",{});var O1t=s(Y1e);our=r(O1t,"roberta"),O1t.forEach(t),rur=r(exe," \u2014 "),cz=n(exe,"A",{href:!0});var V1t=s(cz);tur=r(V1t,"TFRobertaForMultipleChoice"),V1t.forEach(t),aur=r(exe," (RoBERTa model)"),exe.forEach(t),nur=i(le),hT=n(le,"LI",{});var oxe=s(hT);K1e=n(oxe,"STRONG",{});var X1t=s(K1e);sur=r(X1t,"roformer"),X1t.forEach(t),lur=r(oxe," \u2014 "),fz=n(oxe,"A",{href:!0});var z1t=s(fz);iur=r(z1t,"TFRoFormerForMultipleChoice"),z1t.forEach(t),dur=r(oxe," (RoFormer model)"),oxe.forEach(t),cur=i(le),pT=n(le,"LI",{});var rxe=s(pT);Z1e=n(rxe,"STRONG",{});var Q1t=s(Z1e);fur=r(Q1t,"xlm"),Q1t.forEach(t),mur=r(rxe," \u2014 "),mz=n(rxe,"A",{href:!0});var W1t=s(mz);gur=r(W1t,"TFXLMForMultipleChoice"),W1t.forEach(t),hur=r(rxe," (XLM model)"),rxe.forEach(t),pur=i(le),_T=n(le,"LI",{});var txe=s(_T);e4e=n(txe,"STRONG",{});var H1t=s(e4e);_ur=r(H1t,"xlm-roberta"),H1t.forEach(t),uur=r(txe," \u2014 "),gz=n(txe,"A",{href:!0});var U1t=s(gz);bur=r(U1t,"TFXLMRobertaForMultipleChoice"),U1t.forEach(t),Fur=r(txe," (XLM-RoBERTa model)"),txe.forEach(t),vur=i(le),uT=n(le,"LI",{});var axe=s(uT);o4e=n(axe,"STRONG",{});var J1t=s(o4e);Tur=r(J1t,"xlnet"),J1t.forEach(t),Mur=r(axe," \u2014 "),hz=n(axe,"A",{href:!0});var Y1t=s(hz);Eur=r(Y1t,"TFXLNetForMultipleChoice"),Y1t.forEach(t),Cur=r(axe," (XLNet model)"),axe.forEach(t),le.forEach(t),wur=i(Ma),r4e=n(Ma,"P",{});var K1t=s(r4e);Aur=r(K1t,"Examples:"),K1t.forEach(t),yur=i(Ma),m(K0.$$.fragment,Ma),Ma.forEach(t),Zl.forEach(t),iBe=i(c),qc=n(c,"H2",{class:!0});var F$e=s(qc);bT=n(F$e,"A",{id:!0,class:!0,href:!0});var Z1t=s(bT);t4e=n(Z1t,"SPAN",{});var e4t=s(t4e);m(Z0.$$.fragment,e4t),e4t.forEach(t),Z1t.forEach(t),Lur=i(F$e),a4e=n(F$e,"SPAN",{});var o4t=s(a4e);xur=r(o4t,"TFAutoModelForTableQuestionAnswering"),o4t.forEach(t),F$e.forEach(t),dBe=i(c),yr=n(c,"DIV",{class:!0});var oi=s(yr);m(ey.$$.fragment,oi),kur=i(oi),Nc=n(oi,"P",{});var lJ=s(Nc);Sur=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pz=n(lJ,"A",{href:!0});var r4t=s(pz);Rur=r(r4t,"from_pretrained()"),r4t.forEach(t),Bur=r(lJ," class method or the "),_z=n(lJ,"A",{href:!0});var t4t=s(_z);Pur=r(t4t,"from_config()"),t4t.forEach(t),$ur=r(lJ,` class
method.`),lJ.forEach(t),Iur=i(oi),oy=n(oi,"P",{});var v$e=s(oy);qur=r(v$e,"This class cannot be instantiated directly using "),n4e=n(v$e,"CODE",{});var a4t=s(n4e);Nur=r(a4t,"__init__()"),a4t.forEach(t),jur=r(v$e," (throws an error)."),v$e.forEach(t),Dur=i(oi),Tt=n(oi,"DIV",{class:!0});var ri=s(Tt);m(ry.$$.fragment,ri),Gur=i(ri),s4e=n(ri,"P",{});var n4t=s(s4e);Our=r(n4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n4t.forEach(t),Vur=i(ri),jc=n(ri,"P",{});var iJ=s(jc);Xur=r(iJ,`Note:
Loading a model from its configuration file does `),l4e=n(iJ,"STRONG",{});var s4t=s(l4e);zur=r(s4t,"not"),s4t.forEach(t),Qur=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uz=n(iJ,"A",{href:!0});var l4t=s(uz);Wur=r(l4t,"from_pretrained()"),l4t.forEach(t),Hur=r(iJ," to load the model weights."),iJ.forEach(t),Uur=i(ri),i4e=n(ri,"P",{});var i4t=s(i4e);Jur=r(i4t,"Examples:"),i4t.forEach(t),Yur=i(ri),m(ty.$$.fragment,ri),ri.forEach(t),Kur=i(oi),Mo=n(oi,"DIV",{class:!0});var Ea=s(Mo);m(ay.$$.fragment,Ea),Zur=i(Ea),d4e=n(Ea,"P",{});var d4t=s(d4e);e1r=r(d4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),d4t.forEach(t),o1r=i(Ea),Cn=n(Ea,"P",{});var ZE=s(Cn);r1r=r(ZE,"The model class to instantiate is selected based on the "),c4e=n(ZE,"CODE",{});var c4t=s(c4e);t1r=r(c4t,"model_type"),c4t.forEach(t),a1r=r(ZE,` property of the config object (either
passed as an argument or loaded from `),f4e=n(ZE,"CODE",{});var f4t=s(f4e);n1r=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),s1r=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m4e=n(ZE,"CODE",{});var m4t=s(m4e);l1r=r(m4t,"pretrained_model_name_or_path"),m4t.forEach(t),i1r=r(ZE,":"),ZE.forEach(t),d1r=i(Ea),g4e=n(Ea,"UL",{});var g4t=s(g4e);FT=n(g4t,"LI",{});var nxe=s(FT);h4e=n(nxe,"STRONG",{});var h4t=s(h4e);c1r=r(h4t,"tapas"),h4t.forEach(t),f1r=r(nxe," \u2014 "),bz=n(nxe,"A",{href:!0});var p4t=s(bz);m1r=r(p4t,"TFTapasForQuestionAnswering"),p4t.forEach(t),g1r=r(nxe," (TAPAS model)"),nxe.forEach(t),g4t.forEach(t),h1r=i(Ea),p4e=n(Ea,"P",{});var _4t=s(p4e);p1r=r(_4t,"Examples:"),_4t.forEach(t),_1r=i(Ea),m(ny.$$.fragment,Ea),Ea.forEach(t),oi.forEach(t),cBe=i(c),Dc=n(c,"H2",{class:!0});var T$e=s(Dc);vT=n(T$e,"A",{id:!0,class:!0,href:!0});var u4t=s(vT);_4e=n(u4t,"SPAN",{});var b4t=s(_4e);m(sy.$$.fragment,b4t),b4t.forEach(t),u4t.forEach(t),u1r=i(T$e),u4e=n(T$e,"SPAN",{});var F4t=s(u4e);b1r=r(F4t,"TFAutoModelForTokenClassification"),F4t.forEach(t),T$e.forEach(t),fBe=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(ly.$$.fragment,ti),F1r=i(ti),Gc=n(ti,"P",{});var dJ=s(Gc);v1r=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Fz=n(dJ,"A",{href:!0});var v4t=s(Fz);T1r=r(v4t,"from_pretrained()"),v4t.forEach(t),M1r=r(dJ," class method or the "),vz=n(dJ,"A",{href:!0});var T4t=s(vz);E1r=r(T4t,"from_config()"),T4t.forEach(t),C1r=r(dJ,` class
method.`),dJ.forEach(t),w1r=i(ti),iy=n(ti,"P",{});var M$e=s(iy);A1r=r(M$e,"This class cannot be instantiated directly using "),b4e=n(M$e,"CODE",{});var M4t=s(b4e);y1r=r(M4t,"__init__()"),M4t.forEach(t),L1r=r(M$e," (throws an error)."),M$e.forEach(t),x1r=i(ti),Mt=n(ti,"DIV",{class:!0});var ai=s(Mt);m(dy.$$.fragment,ai),k1r=i(ai),F4e=n(ai,"P",{});var E4t=s(F4e);S1r=r(E4t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),E4t.forEach(t),R1r=i(ai),Oc=n(ai,"P",{});var cJ=s(Oc);B1r=r(cJ,`Note:
Loading a model from its configuration file does `),v4e=n(cJ,"STRONG",{});var C4t=s(v4e);P1r=r(C4t,"not"),C4t.forEach(t),$1r=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(cJ,"A",{href:!0});var w4t=s(Tz);I1r=r(w4t,"from_pretrained()"),w4t.forEach(t),q1r=r(cJ," to load the model weights."),cJ.forEach(t),N1r=i(ai),T4e=n(ai,"P",{});var A4t=s(T4e);j1r=r(A4t,"Examples:"),A4t.forEach(t),D1r=i(ai),m(cy.$$.fragment,ai),ai.forEach(t),G1r=i(ti),Eo=n(ti,"DIV",{class:!0});var Ca=s(Eo);m(fy.$$.fragment,Ca),O1r=i(Ca),M4e=n(Ca,"P",{});var y4t=s(M4e);V1r=r(y4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),y4t.forEach(t),X1r=i(Ca),wn=n(Ca,"P",{});var eC=s(wn);z1r=r(eC,"The model class to instantiate is selected based on the "),E4e=n(eC,"CODE",{});var L4t=s(E4e);Q1r=r(L4t,"model_type"),L4t.forEach(t),W1r=r(eC,` property of the config object (either
passed as an argument or loaded from `),C4e=n(eC,"CODE",{});var x4t=s(C4e);H1r=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),U1r=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n(eC,"CODE",{});var k4t=s(w4e);J1r=r(k4t,"pretrained_model_name_or_path"),k4t.forEach(t),Y1r=r(eC,":"),eC.forEach(t),K1r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);TT=n(oe,"LI",{});var sxe=s(TT);A4e=n(sxe,"STRONG",{});var S4t=s(A4e);Z1r=r(S4t,"albert"),S4t.forEach(t),e4r=r(sxe," \u2014 "),Mz=n(sxe,"A",{href:!0});var R4t=s(Mz);o4r=r(R4t,"TFAlbertForTokenClassification"),R4t.forEach(t),r4r=r(sxe," (ALBERT model)"),sxe.forEach(t),t4r=i(oe),MT=n(oe,"LI",{});var lxe=s(MT);y4e=n(lxe,"STRONG",{});var B4t=s(y4e);a4r=r(B4t,"bert"),B4t.forEach(t),n4r=r(lxe," \u2014 "),Ez=n(lxe,"A",{href:!0});var P4t=s(Ez);s4r=r(P4t,"TFBertForTokenClassification"),P4t.forEach(t),l4r=r(lxe," (BERT model)"),lxe.forEach(t),i4r=i(oe),ET=n(oe,"LI",{});var ixe=s(ET);L4e=n(ixe,"STRONG",{});var $4t=s(L4e);d4r=r($4t,"camembert"),$4t.forEach(t),c4r=r(ixe," \u2014 "),Cz=n(ixe,"A",{href:!0});var I4t=s(Cz);f4r=r(I4t,"TFCamembertForTokenClassification"),I4t.forEach(t),m4r=r(ixe," (CamemBERT model)"),ixe.forEach(t),g4r=i(oe),CT=n(oe,"LI",{});var dxe=s(CT);x4e=n(dxe,"STRONG",{});var q4t=s(x4e);h4r=r(q4t,"convbert"),q4t.forEach(t),p4r=r(dxe," \u2014 "),wz=n(dxe,"A",{href:!0});var N4t=s(wz);_4r=r(N4t,"TFConvBertForTokenClassification"),N4t.forEach(t),u4r=r(dxe," (ConvBERT model)"),dxe.forEach(t),b4r=i(oe),wT=n(oe,"LI",{});var cxe=s(wT);k4e=n(cxe,"STRONG",{});var j4t=s(k4e);F4r=r(j4t,"deberta"),j4t.forEach(t),v4r=r(cxe," \u2014 "),Az=n(cxe,"A",{href:!0});var D4t=s(Az);T4r=r(D4t,"TFDebertaForTokenClassification"),D4t.forEach(t),M4r=r(cxe," (DeBERTa model)"),cxe.forEach(t),E4r=i(oe),AT=n(oe,"LI",{});var fxe=s(AT);S4e=n(fxe,"STRONG",{});var G4t=s(S4e);C4r=r(G4t,"deberta-v2"),G4t.forEach(t),w4r=r(fxe," \u2014 "),yz=n(fxe,"A",{href:!0});var O4t=s(yz);A4r=r(O4t,"TFDebertaV2ForTokenClassification"),O4t.forEach(t),y4r=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),L4r=i(oe),yT=n(oe,"LI",{});var mxe=s(yT);R4e=n(mxe,"STRONG",{});var V4t=s(R4e);x4r=r(V4t,"distilbert"),V4t.forEach(t),k4r=r(mxe," \u2014 "),Lz=n(mxe,"A",{href:!0});var X4t=s(Lz);S4r=r(X4t,"TFDistilBertForTokenClassification"),X4t.forEach(t),R4r=r(mxe," (DistilBERT model)"),mxe.forEach(t),B4r=i(oe),LT=n(oe,"LI",{});var gxe=s(LT);B4e=n(gxe,"STRONG",{});var z4t=s(B4e);P4r=r(z4t,"electra"),z4t.forEach(t),$4r=r(gxe," \u2014 "),xz=n(gxe,"A",{href:!0});var Q4t=s(xz);I4r=r(Q4t,"TFElectraForTokenClassification"),Q4t.forEach(t),q4r=r(gxe," (ELECTRA model)"),gxe.forEach(t),N4r=i(oe),xT=n(oe,"LI",{});var hxe=s(xT);P4e=n(hxe,"STRONG",{});var W4t=s(P4e);j4r=r(W4t,"flaubert"),W4t.forEach(t),D4r=r(hxe," \u2014 "),kz=n(hxe,"A",{href:!0});var H4t=s(kz);G4r=r(H4t,"TFFlaubertForTokenClassification"),H4t.forEach(t),O4r=r(hxe," (FlauBERT model)"),hxe.forEach(t),V4r=i(oe),kT=n(oe,"LI",{});var pxe=s(kT);$4e=n(pxe,"STRONG",{});var U4t=s($4e);X4r=r(U4t,"funnel"),U4t.forEach(t),z4r=r(pxe," \u2014 "),Sz=n(pxe,"A",{href:!0});var J4t=s(Sz);Q4r=r(J4t,"TFFunnelForTokenClassification"),J4t.forEach(t),W4r=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),H4r=i(oe),ST=n(oe,"LI",{});var _xe=s(ST);I4e=n(_xe,"STRONG",{});var Y4t=s(I4e);U4r=r(Y4t,"layoutlm"),Y4t.forEach(t),J4r=r(_xe," \u2014 "),Rz=n(_xe,"A",{href:!0});var K4t=s(Rz);Y4r=r(K4t,"TFLayoutLMForTokenClassification"),K4t.forEach(t),K4r=r(_xe," (LayoutLM model)"),_xe.forEach(t),Z4r=i(oe),RT=n(oe,"LI",{});var uxe=s(RT);q4e=n(uxe,"STRONG",{});var Z4t=s(q4e);ebr=r(Z4t,"longformer"),Z4t.forEach(t),obr=r(uxe," \u2014 "),Bz=n(uxe,"A",{href:!0});var ebt=s(Bz);rbr=r(ebt,"TFLongformerForTokenClassification"),ebt.forEach(t),tbr=r(uxe," (Longformer model)"),uxe.forEach(t),abr=i(oe),BT=n(oe,"LI",{});var bxe=s(BT);N4e=n(bxe,"STRONG",{});var obt=s(N4e);nbr=r(obt,"mobilebert"),obt.forEach(t),sbr=r(bxe," \u2014 "),Pz=n(bxe,"A",{href:!0});var rbt=s(Pz);lbr=r(rbt,"TFMobileBertForTokenClassification"),rbt.forEach(t),ibr=r(bxe," (MobileBERT model)"),bxe.forEach(t),dbr=i(oe),PT=n(oe,"LI",{});var Fxe=s(PT);j4e=n(Fxe,"STRONG",{});var tbt=s(j4e);cbr=r(tbt,"mpnet"),tbt.forEach(t),fbr=r(Fxe," \u2014 "),$z=n(Fxe,"A",{href:!0});var abt=s($z);mbr=r(abt,"TFMPNetForTokenClassification"),abt.forEach(t),gbr=r(Fxe," (MPNet model)"),Fxe.forEach(t),hbr=i(oe),$T=n(oe,"LI",{});var vxe=s($T);D4e=n(vxe,"STRONG",{});var nbt=s(D4e);pbr=r(nbt,"rembert"),nbt.forEach(t),_br=r(vxe," \u2014 "),Iz=n(vxe,"A",{href:!0});var sbt=s(Iz);ubr=r(sbt,"TFRemBertForTokenClassification"),sbt.forEach(t),bbr=r(vxe," (RemBERT model)"),vxe.forEach(t),Fbr=i(oe),IT=n(oe,"LI",{});var Txe=s(IT);G4e=n(Txe,"STRONG",{});var lbt=s(G4e);vbr=r(lbt,"roberta"),lbt.forEach(t),Tbr=r(Txe," \u2014 "),qz=n(Txe,"A",{href:!0});var ibt=s(qz);Mbr=r(ibt,"TFRobertaForTokenClassification"),ibt.forEach(t),Ebr=r(Txe," (RoBERTa model)"),Txe.forEach(t),Cbr=i(oe),qT=n(oe,"LI",{});var Mxe=s(qT);O4e=n(Mxe,"STRONG",{});var dbt=s(O4e);wbr=r(dbt,"roformer"),dbt.forEach(t),Abr=r(Mxe," \u2014 "),Nz=n(Mxe,"A",{href:!0});var cbt=s(Nz);ybr=r(cbt,"TFRoFormerForTokenClassification"),cbt.forEach(t),Lbr=r(Mxe," (RoFormer model)"),Mxe.forEach(t),xbr=i(oe),NT=n(oe,"LI",{});var Exe=s(NT);V4e=n(Exe,"STRONG",{});var fbt=s(V4e);kbr=r(fbt,"xlm"),fbt.forEach(t),Sbr=r(Exe," \u2014 "),jz=n(Exe,"A",{href:!0});var mbt=s(jz);Rbr=r(mbt,"TFXLMForTokenClassification"),mbt.forEach(t),Bbr=r(Exe," (XLM model)"),Exe.forEach(t),Pbr=i(oe),jT=n(oe,"LI",{});var Cxe=s(jT);X4e=n(Cxe,"STRONG",{});var gbt=s(X4e);$br=r(gbt,"xlm-roberta"),gbt.forEach(t),Ibr=r(Cxe," \u2014 "),Dz=n(Cxe,"A",{href:!0});var hbt=s(Dz);qbr=r(hbt,"TFXLMRobertaForTokenClassification"),hbt.forEach(t),Nbr=r(Cxe," (XLM-RoBERTa model)"),Cxe.forEach(t),jbr=i(oe),DT=n(oe,"LI",{});var wxe=s(DT);z4e=n(wxe,"STRONG",{});var pbt=s(z4e);Dbr=r(pbt,"xlnet"),pbt.forEach(t),Gbr=r(wxe," \u2014 "),Gz=n(wxe,"A",{href:!0});var _bt=s(Gz);Obr=r(_bt,"TFXLNetForTokenClassification"),_bt.forEach(t),Vbr=r(wxe," (XLNet model)"),wxe.forEach(t),oe.forEach(t),Xbr=i(Ca),Q4e=n(Ca,"P",{});var ubt=s(Q4e);zbr=r(ubt,"Examples:"),ubt.forEach(t),Qbr=i(Ca),m(my.$$.fragment,Ca),Ca.forEach(t),ti.forEach(t),mBe=i(c),Vc=n(c,"H2",{class:!0});var E$e=s(Vc);GT=n(E$e,"A",{id:!0,class:!0,href:!0});var bbt=s(GT);W4e=n(bbt,"SPAN",{});var Fbt=s(W4e);m(gy.$$.fragment,Fbt),Fbt.forEach(t),bbt.forEach(t),Wbr=i(E$e),H4e=n(E$e,"SPAN",{});var vbt=s(H4e);Hbr=r(vbt,"TFAutoModelForQuestionAnswering"),vbt.forEach(t),E$e.forEach(t),gBe=i(c),xr=n(c,"DIV",{class:!0});var ni=s(xr);m(hy.$$.fragment,ni),Ubr=i(ni),Xc=n(ni,"P",{});var fJ=s(Xc);Jbr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Oz=n(fJ,"A",{href:!0});var Tbt=s(Oz);Ybr=r(Tbt,"from_pretrained()"),Tbt.forEach(t),Kbr=r(fJ," class method or the "),Vz=n(fJ,"A",{href:!0});var Mbt=s(Vz);Zbr=r(Mbt,"from_config()"),Mbt.forEach(t),e3r=r(fJ,` class
method.`),fJ.forEach(t),o3r=i(ni),py=n(ni,"P",{});var C$e=s(py);r3r=r(C$e,"This class cannot be instantiated directly using "),U4e=n(C$e,"CODE",{});var Ebt=s(U4e);t3r=r(Ebt,"__init__()"),Ebt.forEach(t),a3r=r(C$e," (throws an error)."),C$e.forEach(t),n3r=i(ni),Et=n(ni,"DIV",{class:!0});var si=s(Et);m(_y.$$.fragment,si),s3r=i(si),J4e=n(si,"P",{});var Cbt=s(J4e);l3r=r(Cbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Cbt.forEach(t),i3r=i(si),zc=n(si,"P",{});var mJ=s(zc);d3r=r(mJ,`Note:
Loading a model from its configuration file does `),Y4e=n(mJ,"STRONG",{});var wbt=s(Y4e);c3r=r(wbt,"not"),wbt.forEach(t),f3r=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(mJ,"A",{href:!0});var Abt=s(Xz);m3r=r(Abt,"from_pretrained()"),Abt.forEach(t),g3r=r(mJ," to load the model weights."),mJ.forEach(t),h3r=i(si),K4e=n(si,"P",{});var ybt=s(K4e);p3r=r(ybt,"Examples:"),ybt.forEach(t),_3r=i(si),m(uy.$$.fragment,si),si.forEach(t),u3r=i(ni),Co=n(ni,"DIV",{class:!0});var wa=s(Co);m(by.$$.fragment,wa),b3r=i(wa),Z4e=n(wa,"P",{});var Lbt=s(Z4e);F3r=r(Lbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Lbt.forEach(t),v3r=i(wa),An=n(wa,"P",{});var oC=s(An);T3r=r(oC,"The model class to instantiate is selected based on the "),ebe=n(oC,"CODE",{});var xbt=s(ebe);M3r=r(xbt,"model_type"),xbt.forEach(t),E3r=r(oC,` property of the config object (either
passed as an argument or loaded from `),obe=n(oC,"CODE",{});var kbt=s(obe);C3r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),w3r=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rbe=n(oC,"CODE",{});var Sbt=s(rbe);A3r=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),y3r=r(oC,":"),oC.forEach(t),L3r=i(wa),K=n(wa,"UL",{});var re=s(K);OT=n(re,"LI",{});var Axe=s(OT);tbe=n(Axe,"STRONG",{});var Rbt=s(tbe);x3r=r(Rbt,"albert"),Rbt.forEach(t),k3r=r(Axe," \u2014 "),zz=n(Axe,"A",{href:!0});var Bbt=s(zz);S3r=r(Bbt,"TFAlbertForQuestionAnswering"),Bbt.forEach(t),R3r=r(Axe," (ALBERT model)"),Axe.forEach(t),B3r=i(re),VT=n(re,"LI",{});var yxe=s(VT);abe=n(yxe,"STRONG",{});var Pbt=s(abe);P3r=r(Pbt,"bert"),Pbt.forEach(t),$3r=r(yxe," \u2014 "),Qz=n(yxe,"A",{href:!0});var $bt=s(Qz);I3r=r($bt,"TFBertForQuestionAnswering"),$bt.forEach(t),q3r=r(yxe," (BERT model)"),yxe.forEach(t),N3r=i(re),XT=n(re,"LI",{});var Lxe=s(XT);nbe=n(Lxe,"STRONG",{});var Ibt=s(nbe);j3r=r(Ibt,"camembert"),Ibt.forEach(t),D3r=r(Lxe," \u2014 "),Wz=n(Lxe,"A",{href:!0});var qbt=s(Wz);G3r=r(qbt,"TFCamembertForQuestionAnswering"),qbt.forEach(t),O3r=r(Lxe," (CamemBERT model)"),Lxe.forEach(t),V3r=i(re),zT=n(re,"LI",{});var xxe=s(zT);sbe=n(xxe,"STRONG",{});var Nbt=s(sbe);X3r=r(Nbt,"convbert"),Nbt.forEach(t),z3r=r(xxe," \u2014 "),Hz=n(xxe,"A",{href:!0});var jbt=s(Hz);Q3r=r(jbt,"TFConvBertForQuestionAnswering"),jbt.forEach(t),W3r=r(xxe," (ConvBERT model)"),xxe.forEach(t),H3r=i(re),QT=n(re,"LI",{});var kxe=s(QT);lbe=n(kxe,"STRONG",{});var Dbt=s(lbe);U3r=r(Dbt,"deberta"),Dbt.forEach(t),J3r=r(kxe," \u2014 "),Uz=n(kxe,"A",{href:!0});var Gbt=s(Uz);Y3r=r(Gbt,"TFDebertaForQuestionAnswering"),Gbt.forEach(t),K3r=r(kxe," (DeBERTa model)"),kxe.forEach(t),Z3r=i(re),WT=n(re,"LI",{});var Sxe=s(WT);ibe=n(Sxe,"STRONG",{});var Obt=s(ibe);e2r=r(Obt,"deberta-v2"),Obt.forEach(t),o2r=r(Sxe," \u2014 "),Jz=n(Sxe,"A",{href:!0});var Vbt=s(Jz);r2r=r(Vbt,"TFDebertaV2ForQuestionAnswering"),Vbt.forEach(t),t2r=r(Sxe," (DeBERTa-v2 model)"),Sxe.forEach(t),a2r=i(re),HT=n(re,"LI",{});var Rxe=s(HT);dbe=n(Rxe,"STRONG",{});var Xbt=s(dbe);n2r=r(Xbt,"distilbert"),Xbt.forEach(t),s2r=r(Rxe," \u2014 "),Yz=n(Rxe,"A",{href:!0});var zbt=s(Yz);l2r=r(zbt,"TFDistilBertForQuestionAnswering"),zbt.forEach(t),i2r=r(Rxe," (DistilBERT model)"),Rxe.forEach(t),d2r=i(re),UT=n(re,"LI",{});var Bxe=s(UT);cbe=n(Bxe,"STRONG",{});var Qbt=s(cbe);c2r=r(Qbt,"electra"),Qbt.forEach(t),f2r=r(Bxe," \u2014 "),Kz=n(Bxe,"A",{href:!0});var Wbt=s(Kz);m2r=r(Wbt,"TFElectraForQuestionAnswering"),Wbt.forEach(t),g2r=r(Bxe," (ELECTRA model)"),Bxe.forEach(t),h2r=i(re),JT=n(re,"LI",{});var Pxe=s(JT);fbe=n(Pxe,"STRONG",{});var Hbt=s(fbe);p2r=r(Hbt,"flaubert"),Hbt.forEach(t),_2r=r(Pxe," \u2014 "),Zz=n(Pxe,"A",{href:!0});var Ubt=s(Zz);u2r=r(Ubt,"TFFlaubertForQuestionAnsweringSimple"),Ubt.forEach(t),b2r=r(Pxe," (FlauBERT model)"),Pxe.forEach(t),F2r=i(re),YT=n(re,"LI",{});var $xe=s(YT);mbe=n($xe,"STRONG",{});var Jbt=s(mbe);v2r=r(Jbt,"funnel"),Jbt.forEach(t),T2r=r($xe," \u2014 "),eQ=n($xe,"A",{href:!0});var Ybt=s(eQ);M2r=r(Ybt,"TFFunnelForQuestionAnswering"),Ybt.forEach(t),E2r=r($xe," (Funnel Transformer model)"),$xe.forEach(t),C2r=i(re),KT=n(re,"LI",{});var Ixe=s(KT);gbe=n(Ixe,"STRONG",{});var Kbt=s(gbe);w2r=r(Kbt,"gptj"),Kbt.forEach(t),A2r=r(Ixe," \u2014 "),oQ=n(Ixe,"A",{href:!0});var Zbt=s(oQ);y2r=r(Zbt,"TFGPTJForQuestionAnswering"),Zbt.forEach(t),L2r=r(Ixe," (GPT-J model)"),Ixe.forEach(t),x2r=i(re),ZT=n(re,"LI",{});var qxe=s(ZT);hbe=n(qxe,"STRONG",{});var e3t=s(hbe);k2r=r(e3t,"longformer"),e3t.forEach(t),S2r=r(qxe," \u2014 "),rQ=n(qxe,"A",{href:!0});var o3t=s(rQ);R2r=r(o3t,"TFLongformerForQuestionAnswering"),o3t.forEach(t),B2r=r(qxe," (Longformer model)"),qxe.forEach(t),P2r=i(re),e7=n(re,"LI",{});var Nxe=s(e7);pbe=n(Nxe,"STRONG",{});var r3t=s(pbe);$2r=r(r3t,"mobilebert"),r3t.forEach(t),I2r=r(Nxe," \u2014 "),tQ=n(Nxe,"A",{href:!0});var t3t=s(tQ);q2r=r(t3t,"TFMobileBertForQuestionAnswering"),t3t.forEach(t),N2r=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),j2r=i(re),o7=n(re,"LI",{});var jxe=s(o7);_be=n(jxe,"STRONG",{});var a3t=s(_be);D2r=r(a3t,"mpnet"),a3t.forEach(t),G2r=r(jxe," \u2014 "),aQ=n(jxe,"A",{href:!0});var n3t=s(aQ);O2r=r(n3t,"TFMPNetForQuestionAnswering"),n3t.forEach(t),V2r=r(jxe," (MPNet model)"),jxe.forEach(t),X2r=i(re),r7=n(re,"LI",{});var Dxe=s(r7);ube=n(Dxe,"STRONG",{});var s3t=s(ube);z2r=r(s3t,"rembert"),s3t.forEach(t),Q2r=r(Dxe," \u2014 "),nQ=n(Dxe,"A",{href:!0});var l3t=s(nQ);W2r=r(l3t,"TFRemBertForQuestionAnswering"),l3t.forEach(t),H2r=r(Dxe," (RemBERT model)"),Dxe.forEach(t),U2r=i(re),t7=n(re,"LI",{});var Gxe=s(t7);bbe=n(Gxe,"STRONG",{});var i3t=s(bbe);J2r=r(i3t,"roberta"),i3t.forEach(t),Y2r=r(Gxe," \u2014 "),sQ=n(Gxe,"A",{href:!0});var d3t=s(sQ);K2r=r(d3t,"TFRobertaForQuestionAnswering"),d3t.forEach(t),Z2r=r(Gxe," (RoBERTa model)"),Gxe.forEach(t),eFr=i(re),a7=n(re,"LI",{});var Oxe=s(a7);Fbe=n(Oxe,"STRONG",{});var c3t=s(Fbe);oFr=r(c3t,"roformer"),c3t.forEach(t),rFr=r(Oxe," \u2014 "),lQ=n(Oxe,"A",{href:!0});var f3t=s(lQ);tFr=r(f3t,"TFRoFormerForQuestionAnswering"),f3t.forEach(t),aFr=r(Oxe," (RoFormer model)"),Oxe.forEach(t),nFr=i(re),n7=n(re,"LI",{});var Vxe=s(n7);vbe=n(Vxe,"STRONG",{});var m3t=s(vbe);sFr=r(m3t,"xlm"),m3t.forEach(t),lFr=r(Vxe," \u2014 "),iQ=n(Vxe,"A",{href:!0});var g3t=s(iQ);iFr=r(g3t,"TFXLMForQuestionAnsweringSimple"),g3t.forEach(t),dFr=r(Vxe," (XLM model)"),Vxe.forEach(t),cFr=i(re),s7=n(re,"LI",{});var Xxe=s(s7);Tbe=n(Xxe,"STRONG",{});var h3t=s(Tbe);fFr=r(h3t,"xlm-roberta"),h3t.forEach(t),mFr=r(Xxe," \u2014 "),dQ=n(Xxe,"A",{href:!0});var p3t=s(dQ);gFr=r(p3t,"TFXLMRobertaForQuestionAnswering"),p3t.forEach(t),hFr=r(Xxe," (XLM-RoBERTa model)"),Xxe.forEach(t),pFr=i(re),l7=n(re,"LI",{});var zxe=s(l7);Mbe=n(zxe,"STRONG",{});var _3t=s(Mbe);_Fr=r(_3t,"xlnet"),_3t.forEach(t),uFr=r(zxe," \u2014 "),cQ=n(zxe,"A",{href:!0});var u3t=s(cQ);bFr=r(u3t,"TFXLNetForQuestionAnsweringSimple"),u3t.forEach(t),FFr=r(zxe," (XLNet model)"),zxe.forEach(t),re.forEach(t),vFr=i(wa),Ebe=n(wa,"P",{});var b3t=s(Ebe);TFr=r(b3t,"Examples:"),b3t.forEach(t),MFr=i(wa),m(Fy.$$.fragment,wa),wa.forEach(t),ni.forEach(t),hBe=i(c),Qc=n(c,"H2",{class:!0});var w$e=s(Qc);i7=n(w$e,"A",{id:!0,class:!0,href:!0});var F3t=s(i7);Cbe=n(F3t,"SPAN",{});var v3t=s(Cbe);m(vy.$$.fragment,v3t),v3t.forEach(t),F3t.forEach(t),EFr=i(w$e),wbe=n(w$e,"SPAN",{});var T3t=s(wbe);CFr=r(T3t,"TFAutoModelForVision2Seq"),T3t.forEach(t),w$e.forEach(t),pBe=i(c),kr=n(c,"DIV",{class:!0});var li=s(kr);m(Ty.$$.fragment,li),wFr=i(li),Wc=n(li,"P",{});var gJ=s(Wc);AFr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fQ=n(gJ,"A",{href:!0});var M3t=s(fQ);yFr=r(M3t,"from_pretrained()"),M3t.forEach(t),LFr=r(gJ," class method or the "),mQ=n(gJ,"A",{href:!0});var E3t=s(mQ);xFr=r(E3t,"from_config()"),E3t.forEach(t),kFr=r(gJ,` class
method.`),gJ.forEach(t),SFr=i(li),My=n(li,"P",{});var A$e=s(My);RFr=r(A$e,"This class cannot be instantiated directly using "),Abe=n(A$e,"CODE",{});var C3t=s(Abe);BFr=r(C3t,"__init__()"),C3t.forEach(t),PFr=r(A$e," (throws an error)."),A$e.forEach(t),$Fr=i(li),Ct=n(li,"DIV",{class:!0});var ii=s(Ct);m(Ey.$$.fragment,ii),IFr=i(ii),ybe=n(ii,"P",{});var w3t=s(ybe);qFr=r(w3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),w3t.forEach(t),NFr=i(ii),Hc=n(ii,"P",{});var hJ=s(Hc);jFr=r(hJ,`Note:
Loading a model from its configuration file does `),Lbe=n(hJ,"STRONG",{});var A3t=s(Lbe);DFr=r(A3t,"not"),A3t.forEach(t),GFr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(hJ,"A",{href:!0});var y3t=s(gQ);OFr=r(y3t,"from_pretrained()"),y3t.forEach(t),VFr=r(hJ," to load the model weights."),hJ.forEach(t),XFr=i(ii),xbe=n(ii,"P",{});var L3t=s(xbe);zFr=r(L3t,"Examples:"),L3t.forEach(t),QFr=i(ii),m(Cy.$$.fragment,ii),ii.forEach(t),WFr=i(li),wo=n(li,"DIV",{class:!0});var Aa=s(wo);m(wy.$$.fragment,Aa),HFr=i(Aa),kbe=n(Aa,"P",{});var x3t=s(kbe);UFr=r(x3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),x3t.forEach(t),JFr=i(Aa),yn=n(Aa,"P",{});var rC=s(yn);YFr=r(rC,"The model class to instantiate is selected based on the "),Sbe=n(rC,"CODE",{});var k3t=s(Sbe);KFr=r(k3t,"model_type"),k3t.forEach(t),ZFr=r(rC,` property of the config object (either
passed as an argument or loaded from `),Rbe=n(rC,"CODE",{});var S3t=s(Rbe);evr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),ovr=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bbe=n(rC,"CODE",{});var R3t=s(Bbe);rvr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),tvr=r(rC,":"),rC.forEach(t),avr=i(Aa),Pbe=n(Aa,"UL",{});var B3t=s(Pbe);d7=n(B3t,"LI",{});var Qxe=s(d7);$be=n(Qxe,"STRONG",{});var P3t=s($be);nvr=r(P3t,"vision-encoder-decoder"),P3t.forEach(t),svr=r(Qxe," \u2014 "),hQ=n(Qxe,"A",{href:!0});var $3t=s(hQ);lvr=r($3t,"TFVisionEncoderDecoderModel"),$3t.forEach(t),ivr=r(Qxe," (Vision Encoder decoder model)"),Qxe.forEach(t),B3t.forEach(t),dvr=i(Aa),Ibe=n(Aa,"P",{});var I3t=s(Ibe);cvr=r(I3t,"Examples:"),I3t.forEach(t),fvr=i(Aa),m(Ay.$$.fragment,Aa),Aa.forEach(t),li.forEach(t),_Be=i(c),Uc=n(c,"H2",{class:!0});var y$e=s(Uc);c7=n(y$e,"A",{id:!0,class:!0,href:!0});var q3t=s(c7);qbe=n(q3t,"SPAN",{});var N3t=s(qbe);m(yy.$$.fragment,N3t),N3t.forEach(t),q3t.forEach(t),mvr=i(y$e),Nbe=n(y$e,"SPAN",{});var j3t=s(Nbe);gvr=r(j3t,"TFAutoModelForSpeechSeq2Seq"),j3t.forEach(t),y$e.forEach(t),uBe=i(c),Sr=n(c,"DIV",{class:!0});var di=s(Sr);m(Ly.$$.fragment,di),hvr=i(di),Jc=n(di,"P",{});var pJ=s(Jc);pvr=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pQ=n(pJ,"A",{href:!0});var D3t=s(pQ);_vr=r(D3t,"from_pretrained()"),D3t.forEach(t),uvr=r(pJ," class method or the "),_Q=n(pJ,"A",{href:!0});var G3t=s(_Q);bvr=r(G3t,"from_config()"),G3t.forEach(t),Fvr=r(pJ,` class
method.`),pJ.forEach(t),vvr=i(di),xy=n(di,"P",{});var L$e=s(xy);Tvr=r(L$e,"This class cannot be instantiated directly using "),jbe=n(L$e,"CODE",{});var O3t=s(jbe);Mvr=r(O3t,"__init__()"),O3t.forEach(t),Evr=r(L$e," (throws an error)."),L$e.forEach(t),Cvr=i(di),wt=n(di,"DIV",{class:!0});var ci=s(wt);m(ky.$$.fragment,ci),wvr=i(ci),Dbe=n(ci,"P",{});var V3t=s(Dbe);Avr=r(V3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),V3t.forEach(t),yvr=i(ci),Yc=n(ci,"P",{});var _J=s(Yc);Lvr=r(_J,`Note:
Loading a model from its configuration file does `),Gbe=n(_J,"STRONG",{});var X3t=s(Gbe);xvr=r(X3t,"not"),X3t.forEach(t),kvr=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),uQ=n(_J,"A",{href:!0});var z3t=s(uQ);Svr=r(z3t,"from_pretrained()"),z3t.forEach(t),Rvr=r(_J," to load the model weights."),_J.forEach(t),Bvr=i(ci),Obe=n(ci,"P",{});var Q3t=s(Obe);Pvr=r(Q3t,"Examples:"),Q3t.forEach(t),$vr=i(ci),m(Sy.$$.fragment,ci),ci.forEach(t),Ivr=i(di),Ao=n(di,"DIV",{class:!0});var ya=s(Ao);m(Ry.$$.fragment,ya),qvr=i(ya),Vbe=n(ya,"P",{});var W3t=s(Vbe);Nvr=r(W3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W3t.forEach(t),jvr=i(ya),Ln=n(ya,"P",{});var tC=s(Ln);Dvr=r(tC,"The model class to instantiate is selected based on the "),Xbe=n(tC,"CODE",{});var H3t=s(Xbe);Gvr=r(H3t,"model_type"),H3t.forEach(t),Ovr=r(tC,` property of the config object (either
passed as an argument or loaded from `),zbe=n(tC,"CODE",{});var U3t=s(zbe);Vvr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),Xvr=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(tC,"CODE",{});var J3t=s(Qbe);zvr=r(J3t,"pretrained_model_name_or_path"),J3t.forEach(t),Qvr=r(tC,":"),tC.forEach(t),Wvr=i(ya),Wbe=n(ya,"UL",{});var Y3t=s(Wbe);f7=n(Y3t,"LI",{});var Wxe=s(f7);Hbe=n(Wxe,"STRONG",{});var K3t=s(Hbe);Hvr=r(K3t,"speech_to_text"),K3t.forEach(t),Uvr=r(Wxe," \u2014 "),bQ=n(Wxe,"A",{href:!0});var Z3t=s(bQ);Jvr=r(Z3t,"TFSpeech2TextForConditionalGeneration"),Z3t.forEach(t),Yvr=r(Wxe," (Speech2Text model)"),Wxe.forEach(t),Y3t.forEach(t),Kvr=i(ya),Ube=n(ya,"P",{});var e2t=s(Ube);Zvr=r(e2t,"Examples:"),e2t.forEach(t),e6r=i(ya),m(By.$$.fragment,ya),ya.forEach(t),di.forEach(t),bBe=i(c),Kc=n(c,"H2",{class:!0});var x$e=s(Kc);m7=n(x$e,"A",{id:!0,class:!0,href:!0});var o2t=s(m7);Jbe=n(o2t,"SPAN",{});var r2t=s(Jbe);m(Py.$$.fragment,r2t),r2t.forEach(t),o2t.forEach(t),o6r=i(x$e),Ybe=n(x$e,"SPAN",{});var t2t=s(Ybe);r6r=r(t2t,"FlaxAutoModel"),t2t.forEach(t),x$e.forEach(t),FBe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m($y.$$.fragment,fi),t6r=i(fi),Zc=n(fi,"P",{});var uJ=s(Zc);a6r=r(uJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),FQ=n(uJ,"A",{href:!0});var a2t=s(FQ);n6r=r(a2t,"from_pretrained()"),a2t.forEach(t),s6r=r(uJ," class method or the "),vQ=n(uJ,"A",{href:!0});var n2t=s(vQ);l6r=r(n2t,"from_config()"),n2t.forEach(t),i6r=r(uJ,` class
method.`),uJ.forEach(t),d6r=i(fi),Iy=n(fi,"P",{});var k$e=s(Iy);c6r=r(k$e,"This class cannot be instantiated directly using "),Kbe=n(k$e,"CODE",{});var s2t=s(Kbe);f6r=r(s2t,"__init__()"),s2t.forEach(t),m6r=r(k$e," (throws an error)."),k$e.forEach(t),g6r=i(fi),At=n(fi,"DIV",{class:!0});var mi=s(At);m(qy.$$.fragment,mi),h6r=i(mi),Zbe=n(mi,"P",{});var l2t=s(Zbe);p6r=r(l2t,"Instantiates one of the base model classes of the library from a configuration."),l2t.forEach(t),_6r=i(mi),ef=n(mi,"P",{});var bJ=s(ef);u6r=r(bJ,`Note:
Loading a model from its configuration file does `),e3e=n(bJ,"STRONG",{});var i2t=s(e3e);b6r=r(i2t,"not"),i2t.forEach(t),F6r=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(bJ,"A",{href:!0});var d2t=s(TQ);v6r=r(d2t,"from_pretrained()"),d2t.forEach(t),T6r=r(bJ," to load the model weights."),bJ.forEach(t),M6r=i(mi),o3e=n(mi,"P",{});var c2t=s(o3e);E6r=r(c2t,"Examples:"),c2t.forEach(t),C6r=i(mi),m(Ny.$$.fragment,mi),mi.forEach(t),w6r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);m(jy.$$.fragment,La),A6r=i(La),r3e=n(La,"P",{});var f2t=s(r3e);y6r=r(f2t,"Instantiate one of the base model classes of the library from a pretrained model."),f2t.forEach(t),L6r=i(La),xn=n(La,"P",{});var aC=s(xn);x6r=r(aC,"The model class to instantiate is selected based on the "),t3e=n(aC,"CODE",{});var m2t=s(t3e);k6r=r(m2t,"model_type"),m2t.forEach(t),S6r=r(aC,` property of the config object (either
passed as an argument or loaded from `),a3e=n(aC,"CODE",{});var g2t=s(a3e);R6r=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),B6r=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n3e=n(aC,"CODE",{});var h2t=s(n3e);P6r=r(h2t,"pretrained_model_name_or_path"),h2t.forEach(t),$6r=r(aC,":"),aC.forEach(t),I6r=i(La),z=n(La,"UL",{});var W=s(z);g7=n(W,"LI",{});var Hxe=s(g7);s3e=n(Hxe,"STRONG",{});var p2t=s(s3e);q6r=r(p2t,"albert"),p2t.forEach(t),N6r=r(Hxe," \u2014 "),MQ=n(Hxe,"A",{href:!0});var _2t=s(MQ);j6r=r(_2t,"FlaxAlbertModel"),_2t.forEach(t),D6r=r(Hxe," (ALBERT model)"),Hxe.forEach(t),G6r=i(W),h7=n(W,"LI",{});var Uxe=s(h7);l3e=n(Uxe,"STRONG",{});var u2t=s(l3e);O6r=r(u2t,"bart"),u2t.forEach(t),V6r=r(Uxe," \u2014 "),EQ=n(Uxe,"A",{href:!0});var b2t=s(EQ);X6r=r(b2t,"FlaxBartModel"),b2t.forEach(t),z6r=r(Uxe," (BART model)"),Uxe.forEach(t),Q6r=i(W),p7=n(W,"LI",{});var Jxe=s(p7);i3e=n(Jxe,"STRONG",{});var F2t=s(i3e);W6r=r(F2t,"beit"),F2t.forEach(t),H6r=r(Jxe," \u2014 "),CQ=n(Jxe,"A",{href:!0});var v2t=s(CQ);U6r=r(v2t,"FlaxBeitModel"),v2t.forEach(t),J6r=r(Jxe," (BEiT model)"),Jxe.forEach(t),Y6r=i(W),_7=n(W,"LI",{});var Yxe=s(_7);d3e=n(Yxe,"STRONG",{});var T2t=s(d3e);K6r=r(T2t,"bert"),T2t.forEach(t),Z6r=r(Yxe," \u2014 "),wQ=n(Yxe,"A",{href:!0});var M2t=s(wQ);eTr=r(M2t,"FlaxBertModel"),M2t.forEach(t),oTr=r(Yxe," (BERT model)"),Yxe.forEach(t),rTr=i(W),u7=n(W,"LI",{});var Kxe=s(u7);c3e=n(Kxe,"STRONG",{});var E2t=s(c3e);tTr=r(E2t,"big_bird"),E2t.forEach(t),aTr=r(Kxe," \u2014 "),AQ=n(Kxe,"A",{href:!0});var C2t=s(AQ);nTr=r(C2t,"FlaxBigBirdModel"),C2t.forEach(t),sTr=r(Kxe," (BigBird model)"),Kxe.forEach(t),lTr=i(W),b7=n(W,"LI",{});var Zxe=s(b7);f3e=n(Zxe,"STRONG",{});var w2t=s(f3e);iTr=r(w2t,"blenderbot"),w2t.forEach(t),dTr=r(Zxe," \u2014 "),yQ=n(Zxe,"A",{href:!0});var A2t=s(yQ);cTr=r(A2t,"FlaxBlenderbotModel"),A2t.forEach(t),fTr=r(Zxe," (Blenderbot model)"),Zxe.forEach(t),mTr=i(W),F7=n(W,"LI",{});var eke=s(F7);m3e=n(eke,"STRONG",{});var y2t=s(m3e);gTr=r(y2t,"blenderbot-small"),y2t.forEach(t),hTr=r(eke," \u2014 "),LQ=n(eke,"A",{href:!0});var L2t=s(LQ);pTr=r(L2t,"FlaxBlenderbotSmallModel"),L2t.forEach(t),_Tr=r(eke," (BlenderbotSmall model)"),eke.forEach(t),uTr=i(W),v7=n(W,"LI",{});var oke=s(v7);g3e=n(oke,"STRONG",{});var x2t=s(g3e);bTr=r(x2t,"clip"),x2t.forEach(t),FTr=r(oke," \u2014 "),xQ=n(oke,"A",{href:!0});var k2t=s(xQ);vTr=r(k2t,"FlaxCLIPModel"),k2t.forEach(t),TTr=r(oke," (CLIP model)"),oke.forEach(t),MTr=i(W),T7=n(W,"LI",{});var rke=s(T7);h3e=n(rke,"STRONG",{});var S2t=s(h3e);ETr=r(S2t,"distilbert"),S2t.forEach(t),CTr=r(rke," \u2014 "),kQ=n(rke,"A",{href:!0});var R2t=s(kQ);wTr=r(R2t,"FlaxDistilBertModel"),R2t.forEach(t),ATr=r(rke," (DistilBERT model)"),rke.forEach(t),yTr=i(W),M7=n(W,"LI",{});var tke=s(M7);p3e=n(tke,"STRONG",{});var B2t=s(p3e);LTr=r(B2t,"electra"),B2t.forEach(t),xTr=r(tke," \u2014 "),SQ=n(tke,"A",{href:!0});var P2t=s(SQ);kTr=r(P2t,"FlaxElectraModel"),P2t.forEach(t),STr=r(tke," (ELECTRA model)"),tke.forEach(t),RTr=i(W),E7=n(W,"LI",{});var ake=s(E7);_3e=n(ake,"STRONG",{});var $2t=s(_3e);BTr=r($2t,"gpt2"),$2t.forEach(t),PTr=r(ake," \u2014 "),RQ=n(ake,"A",{href:!0});var I2t=s(RQ);$Tr=r(I2t,"FlaxGPT2Model"),I2t.forEach(t),ITr=r(ake," (OpenAI GPT-2 model)"),ake.forEach(t),qTr=i(W),C7=n(W,"LI",{});var nke=s(C7);u3e=n(nke,"STRONG",{});var q2t=s(u3e);NTr=r(q2t,"gpt_neo"),q2t.forEach(t),jTr=r(nke," \u2014 "),BQ=n(nke,"A",{href:!0});var N2t=s(BQ);DTr=r(N2t,"FlaxGPTNeoModel"),N2t.forEach(t),GTr=r(nke," (GPT Neo model)"),nke.forEach(t),OTr=i(W),w7=n(W,"LI",{});var ske=s(w7);b3e=n(ske,"STRONG",{});var j2t=s(b3e);VTr=r(j2t,"gptj"),j2t.forEach(t),XTr=r(ske," \u2014 "),PQ=n(ske,"A",{href:!0});var D2t=s(PQ);zTr=r(D2t,"FlaxGPTJModel"),D2t.forEach(t),QTr=r(ske," (GPT-J model)"),ske.forEach(t),WTr=i(W),A7=n(W,"LI",{});var lke=s(A7);F3e=n(lke,"STRONG",{});var G2t=s(F3e);HTr=r(G2t,"marian"),G2t.forEach(t),UTr=r(lke," \u2014 "),$Q=n(lke,"A",{href:!0});var O2t=s($Q);JTr=r(O2t,"FlaxMarianModel"),O2t.forEach(t),YTr=r(lke," (Marian model)"),lke.forEach(t),KTr=i(W),y7=n(W,"LI",{});var ike=s(y7);v3e=n(ike,"STRONG",{});var V2t=s(v3e);ZTr=r(V2t,"mbart"),V2t.forEach(t),e7r=r(ike," \u2014 "),IQ=n(ike,"A",{href:!0});var X2t=s(IQ);o7r=r(X2t,"FlaxMBartModel"),X2t.forEach(t),r7r=r(ike," (mBART model)"),ike.forEach(t),t7r=i(W),L7=n(W,"LI",{});var dke=s(L7);T3e=n(dke,"STRONG",{});var z2t=s(T3e);a7r=r(z2t,"mt5"),z2t.forEach(t),n7r=r(dke," \u2014 "),qQ=n(dke,"A",{href:!0});var Q2t=s(qQ);s7r=r(Q2t,"FlaxMT5Model"),Q2t.forEach(t),l7r=r(dke," (mT5 model)"),dke.forEach(t),i7r=i(W),x7=n(W,"LI",{});var cke=s(x7);M3e=n(cke,"STRONG",{});var W2t=s(M3e);d7r=r(W2t,"pegasus"),W2t.forEach(t),c7r=r(cke," \u2014 "),NQ=n(cke,"A",{href:!0});var H2t=s(NQ);f7r=r(H2t,"FlaxPegasusModel"),H2t.forEach(t),m7r=r(cke," (Pegasus model)"),cke.forEach(t),g7r=i(W),k7=n(W,"LI",{});var fke=s(k7);E3e=n(fke,"STRONG",{});var U2t=s(E3e);h7r=r(U2t,"roberta"),U2t.forEach(t),p7r=r(fke," \u2014 "),jQ=n(fke,"A",{href:!0});var J2t=s(jQ);_7r=r(J2t,"FlaxRobertaModel"),J2t.forEach(t),u7r=r(fke," (RoBERTa model)"),fke.forEach(t),b7r=i(W),S7=n(W,"LI",{});var mke=s(S7);C3e=n(mke,"STRONG",{});var Y2t=s(C3e);F7r=r(Y2t,"roformer"),Y2t.forEach(t),v7r=r(mke," \u2014 "),DQ=n(mke,"A",{href:!0});var K2t=s(DQ);T7r=r(K2t,"FlaxRoFormerModel"),K2t.forEach(t),M7r=r(mke," (RoFormer model)"),mke.forEach(t),E7r=i(W),R7=n(W,"LI",{});var gke=s(R7);w3e=n(gke,"STRONG",{});var Z2t=s(w3e);C7r=r(Z2t,"t5"),Z2t.forEach(t),w7r=r(gke," \u2014 "),GQ=n(gke,"A",{href:!0});var eFt=s(GQ);A7r=r(eFt,"FlaxT5Model"),eFt.forEach(t),y7r=r(gke," (T5 model)"),gke.forEach(t),L7r=i(W),B7=n(W,"LI",{});var hke=s(B7);A3e=n(hke,"STRONG",{});var oFt=s(A3e);x7r=r(oFt,"vision-text-dual-encoder"),oFt.forEach(t),k7r=r(hke," \u2014 "),OQ=n(hke,"A",{href:!0});var rFt=s(OQ);S7r=r(rFt,"FlaxVisionTextDualEncoderModel"),rFt.forEach(t),R7r=r(hke," (VisionTextDualEncoder model)"),hke.forEach(t),B7r=i(W),P7=n(W,"LI",{});var pke=s(P7);y3e=n(pke,"STRONG",{});var tFt=s(y3e);P7r=r(tFt,"vit"),tFt.forEach(t),$7r=r(pke," \u2014 "),VQ=n(pke,"A",{href:!0});var aFt=s(VQ);I7r=r(aFt,"FlaxViTModel"),aFt.forEach(t),q7r=r(pke," (ViT model)"),pke.forEach(t),N7r=i(W),$7=n(W,"LI",{});var _ke=s($7);L3e=n(_ke,"STRONG",{});var nFt=s(L3e);j7r=r(nFt,"wav2vec2"),nFt.forEach(t),D7r=r(_ke," \u2014 "),XQ=n(_ke,"A",{href:!0});var sFt=s(XQ);G7r=r(sFt,"FlaxWav2Vec2Model"),sFt.forEach(t),O7r=r(_ke," (Wav2Vec2 model)"),_ke.forEach(t),V7r=i(W),I7=n(W,"LI",{});var uke=s(I7);x3e=n(uke,"STRONG",{});var lFt=s(x3e);X7r=r(lFt,"xglm"),lFt.forEach(t),z7r=r(uke," \u2014 "),zQ=n(uke,"A",{href:!0});var iFt=s(zQ);Q7r=r(iFt,"FlaxXGLMModel"),iFt.forEach(t),W7r=r(uke," (XGLM model)"),uke.forEach(t),H7r=i(W),q7=n(W,"LI",{});var bke=s(q7);k3e=n(bke,"STRONG",{});var dFt=s(k3e);U7r=r(dFt,"xlm-roberta"),dFt.forEach(t),J7r=r(bke," \u2014 "),QQ=n(bke,"A",{href:!0});var cFt=s(QQ);Y7r=r(cFt,"FlaxXLMRobertaModel"),cFt.forEach(t),K7r=r(bke," (XLM-RoBERTa model)"),bke.forEach(t),W.forEach(t),Z7r=i(La),S3e=n(La,"P",{});var fFt=s(S3e);eMr=r(fFt,"Examples:"),fFt.forEach(t),oMr=i(La),m(Dy.$$.fragment,La),La.forEach(t),fi.forEach(t),vBe=i(c),of=n(c,"H2",{class:!0});var S$e=s(of);N7=n(S$e,"A",{id:!0,class:!0,href:!0});var mFt=s(N7);R3e=n(mFt,"SPAN",{});var gFt=s(R3e);m(Gy.$$.fragment,gFt),gFt.forEach(t),mFt.forEach(t),rMr=i(S$e),B3e=n(S$e,"SPAN",{});var hFt=s(B3e);tMr=r(hFt,"FlaxAutoModelForCausalLM"),hFt.forEach(t),S$e.forEach(t),TBe=i(c),Br=n(c,"DIV",{class:!0});var gi=s(Br);m(Oy.$$.fragment,gi),aMr=i(gi),rf=n(gi,"P",{});var FJ=s(rf);nMr=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WQ=n(FJ,"A",{href:!0});var pFt=s(WQ);sMr=r(pFt,"from_pretrained()"),pFt.forEach(t),lMr=r(FJ," class method or the "),HQ=n(FJ,"A",{href:!0});var _Ft=s(HQ);iMr=r(_Ft,"from_config()"),_Ft.forEach(t),dMr=r(FJ,` class
method.`),FJ.forEach(t),cMr=i(gi),Vy=n(gi,"P",{});var R$e=s(Vy);fMr=r(R$e,"This class cannot be instantiated directly using "),P3e=n(R$e,"CODE",{});var uFt=s(P3e);mMr=r(uFt,"__init__()"),uFt.forEach(t),gMr=r(R$e," (throws an error)."),R$e.forEach(t),hMr=i(gi),yt=n(gi,"DIV",{class:!0});var hi=s(yt);m(Xy.$$.fragment,hi),pMr=i(hi),$3e=n(hi,"P",{});var bFt=s($3e);_Mr=r(bFt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),bFt.forEach(t),uMr=i(hi),tf=n(hi,"P",{});var vJ=s(tf);bMr=r(vJ,`Note:
Loading a model from its configuration file does `),I3e=n(vJ,"STRONG",{});var FFt=s(I3e);FMr=r(FFt,"not"),FFt.forEach(t),vMr=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(vJ,"A",{href:!0});var vFt=s(UQ);TMr=r(vFt,"from_pretrained()"),vFt.forEach(t),MMr=r(vJ," to load the model weights."),vJ.forEach(t),EMr=i(hi),q3e=n(hi,"P",{});var TFt=s(q3e);CMr=r(TFt,"Examples:"),TFt.forEach(t),wMr=i(hi),m(zy.$$.fragment,hi),hi.forEach(t),AMr=i(gi),Lo=n(gi,"DIV",{class:!0});var xa=s(Lo);m(Qy.$$.fragment,xa),yMr=i(xa),N3e=n(xa,"P",{});var MFt=s(N3e);LMr=r(MFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),MFt.forEach(t),xMr=i(xa),kn=n(xa,"P",{});var nC=s(kn);kMr=r(nC,"The model class to instantiate is selected based on the "),j3e=n(nC,"CODE",{});var EFt=s(j3e);SMr=r(EFt,"model_type"),EFt.forEach(t),RMr=r(nC,` property of the config object (either
passed as an argument or loaded from `),D3e=n(nC,"CODE",{});var CFt=s(D3e);BMr=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),PMr=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G3e=n(nC,"CODE",{});var wFt=s(G3e);$Mr=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),IMr=r(nC,":"),nC.forEach(t),qMr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);j7=n(pi,"LI",{});var Fke=s(j7);O3e=n(Fke,"STRONG",{});var AFt=s(O3e);NMr=r(AFt,"bart"),AFt.forEach(t),jMr=r(Fke," \u2014 "),JQ=n(Fke,"A",{href:!0});var yFt=s(JQ);DMr=r(yFt,"FlaxBartForCausalLM"),yFt.forEach(t),GMr=r(Fke," (BART model)"),Fke.forEach(t),OMr=i(pi),D7=n(pi,"LI",{});var vke=s(D7);V3e=n(vke,"STRONG",{});var LFt=s(V3e);VMr=r(LFt,"gpt2"),LFt.forEach(t),XMr=r(vke," \u2014 "),YQ=n(vke,"A",{href:!0});var xFt=s(YQ);zMr=r(xFt,"FlaxGPT2LMHeadModel"),xFt.forEach(t),QMr=r(vke," (OpenAI GPT-2 model)"),vke.forEach(t),WMr=i(pi),G7=n(pi,"LI",{});var Tke=s(G7);X3e=n(Tke,"STRONG",{});var kFt=s(X3e);HMr=r(kFt,"gpt_neo"),kFt.forEach(t),UMr=r(Tke," \u2014 "),KQ=n(Tke,"A",{href:!0});var SFt=s(KQ);JMr=r(SFt,"FlaxGPTNeoForCausalLM"),SFt.forEach(t),YMr=r(Tke," (GPT Neo model)"),Tke.forEach(t),KMr=i(pi),O7=n(pi,"LI",{});var Mke=s(O7);z3e=n(Mke,"STRONG",{});var RFt=s(z3e);ZMr=r(RFt,"gptj"),RFt.forEach(t),eEr=r(Mke," \u2014 "),ZQ=n(Mke,"A",{href:!0});var BFt=s(ZQ);oEr=r(BFt,"FlaxGPTJForCausalLM"),BFt.forEach(t),rEr=r(Mke," (GPT-J model)"),Mke.forEach(t),tEr=i(pi),V7=n(pi,"LI",{});var Eke=s(V7);Q3e=n(Eke,"STRONG",{});var PFt=s(Q3e);aEr=r(PFt,"xglm"),PFt.forEach(t),nEr=r(Eke," \u2014 "),eW=n(Eke,"A",{href:!0});var $Ft=s(eW);sEr=r($Ft,"FlaxXGLMForCausalLM"),$Ft.forEach(t),lEr=r(Eke," (XGLM model)"),Eke.forEach(t),pi.forEach(t),iEr=i(xa),W3e=n(xa,"P",{});var IFt=s(W3e);dEr=r(IFt,"Examples:"),IFt.forEach(t),cEr=i(xa),m(Wy.$$.fragment,xa),xa.forEach(t),gi.forEach(t),MBe=i(c),af=n(c,"H2",{class:!0});var B$e=s(af);X7=n(B$e,"A",{id:!0,class:!0,href:!0});var qFt=s(X7);H3e=n(qFt,"SPAN",{});var NFt=s(H3e);m(Hy.$$.fragment,NFt),NFt.forEach(t),qFt.forEach(t),fEr=i(B$e),U3e=n(B$e,"SPAN",{});var jFt=s(U3e);mEr=r(jFt,"FlaxAutoModelForPreTraining"),jFt.forEach(t),B$e.forEach(t),EBe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(Uy.$$.fragment,_i),gEr=i(_i),nf=n(_i,"P",{});var TJ=s(nf);hEr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oW=n(TJ,"A",{href:!0});var DFt=s(oW);pEr=r(DFt,"from_pretrained()"),DFt.forEach(t),_Er=r(TJ," class method or the "),rW=n(TJ,"A",{href:!0});var GFt=s(rW);uEr=r(GFt,"from_config()"),GFt.forEach(t),bEr=r(TJ,` class
method.`),TJ.forEach(t),FEr=i(_i),Jy=n(_i,"P",{});var P$e=s(Jy);vEr=r(P$e,"This class cannot be instantiated directly using "),J3e=n(P$e,"CODE",{});var OFt=s(J3e);TEr=r(OFt,"__init__()"),OFt.forEach(t),MEr=r(P$e," (throws an error)."),P$e.forEach(t),EEr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(Yy.$$.fragment,ui),CEr=i(ui),Y3e=n(ui,"P",{});var VFt=s(Y3e);wEr=r(VFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VFt.forEach(t),AEr=i(ui),sf=n(ui,"P",{});var MJ=s(sf);yEr=r(MJ,`Note:
Loading a model from its configuration file does `),K3e=n(MJ,"STRONG",{});var XFt=s(K3e);LEr=r(XFt,"not"),XFt.forEach(t),xEr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(MJ,"A",{href:!0});var zFt=s(tW);kEr=r(zFt,"from_pretrained()"),zFt.forEach(t),SEr=r(MJ," to load the model weights."),MJ.forEach(t),REr=i(ui),Z3e=n(ui,"P",{});var QFt=s(Z3e);BEr=r(QFt,"Examples:"),QFt.forEach(t),PEr=i(ui),m(Ky.$$.fragment,ui),ui.forEach(t),$Er=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);m(Zy.$$.fragment,ka),IEr=i(ka),e2e=n(ka,"P",{});var WFt=s(e2e);qEr=r(WFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WFt.forEach(t),NEr=i(ka),Sn=n(ka,"P",{});var sC=s(Sn);jEr=r(sC,"The model class to instantiate is selected based on the "),o2e=n(sC,"CODE",{});var HFt=s(o2e);DEr=r(HFt,"model_type"),HFt.forEach(t),GEr=r(sC,` property of the config object (either
passed as an argument or loaded from `),r2e=n(sC,"CODE",{});var UFt=s(r2e);OEr=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),VEr=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t2e=n(sC,"CODE",{});var JFt=s(t2e);XEr=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),zEr=r(sC,":"),sC.forEach(t),QEr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);z7=n(pe,"LI",{});var Cke=s(z7);a2e=n(Cke,"STRONG",{});var YFt=s(a2e);WEr=r(YFt,"albert"),YFt.forEach(t),HEr=r(Cke," \u2014 "),aW=n(Cke,"A",{href:!0});var KFt=s(aW);UEr=r(KFt,"FlaxAlbertForPreTraining"),KFt.forEach(t),JEr=r(Cke," (ALBERT model)"),Cke.forEach(t),YEr=i(pe),Q7=n(pe,"LI",{});var wke=s(Q7);n2e=n(wke,"STRONG",{});var ZFt=s(n2e);KEr=r(ZFt,"bart"),ZFt.forEach(t),ZEr=r(wke," \u2014 "),nW=n(wke,"A",{href:!0});var evt=s(nW);eCr=r(evt,"FlaxBartForConditionalGeneration"),evt.forEach(t),oCr=r(wke," (BART model)"),wke.forEach(t),rCr=i(pe),W7=n(pe,"LI",{});var Ake=s(W7);s2e=n(Ake,"STRONG",{});var ovt=s(s2e);tCr=r(ovt,"bert"),ovt.forEach(t),aCr=r(Ake," \u2014 "),sW=n(Ake,"A",{href:!0});var rvt=s(sW);nCr=r(rvt,"FlaxBertForPreTraining"),rvt.forEach(t),sCr=r(Ake," (BERT model)"),Ake.forEach(t),lCr=i(pe),H7=n(pe,"LI",{});var yke=s(H7);l2e=n(yke,"STRONG",{});var tvt=s(l2e);iCr=r(tvt,"big_bird"),tvt.forEach(t),dCr=r(yke," \u2014 "),lW=n(yke,"A",{href:!0});var avt=s(lW);cCr=r(avt,"FlaxBigBirdForPreTraining"),avt.forEach(t),fCr=r(yke," (BigBird model)"),yke.forEach(t),mCr=i(pe),U7=n(pe,"LI",{});var Lke=s(U7);i2e=n(Lke,"STRONG",{});var nvt=s(i2e);gCr=r(nvt,"electra"),nvt.forEach(t),hCr=r(Lke," \u2014 "),iW=n(Lke,"A",{href:!0});var svt=s(iW);pCr=r(svt,"FlaxElectraForPreTraining"),svt.forEach(t),_Cr=r(Lke," (ELECTRA model)"),Lke.forEach(t),uCr=i(pe),J7=n(pe,"LI",{});var xke=s(J7);d2e=n(xke,"STRONG",{});var lvt=s(d2e);bCr=r(lvt,"mbart"),lvt.forEach(t),FCr=r(xke," \u2014 "),dW=n(xke,"A",{href:!0});var ivt=s(dW);vCr=r(ivt,"FlaxMBartForConditionalGeneration"),ivt.forEach(t),TCr=r(xke," (mBART model)"),xke.forEach(t),MCr=i(pe),Y7=n(pe,"LI",{});var kke=s(Y7);c2e=n(kke,"STRONG",{});var dvt=s(c2e);ECr=r(dvt,"mt5"),dvt.forEach(t),CCr=r(kke," \u2014 "),cW=n(kke,"A",{href:!0});var cvt=s(cW);wCr=r(cvt,"FlaxMT5ForConditionalGeneration"),cvt.forEach(t),ACr=r(kke," (mT5 model)"),kke.forEach(t),yCr=i(pe),K7=n(pe,"LI",{});var Ske=s(K7);f2e=n(Ske,"STRONG",{});var fvt=s(f2e);LCr=r(fvt,"roberta"),fvt.forEach(t),xCr=r(Ske," \u2014 "),fW=n(Ske,"A",{href:!0});var mvt=s(fW);kCr=r(mvt,"FlaxRobertaForMaskedLM"),mvt.forEach(t),SCr=r(Ske," (RoBERTa model)"),Ske.forEach(t),RCr=i(pe),Z7=n(pe,"LI",{});var Rke=s(Z7);m2e=n(Rke,"STRONG",{});var gvt=s(m2e);BCr=r(gvt,"roformer"),gvt.forEach(t),PCr=r(Rke," \u2014 "),mW=n(Rke,"A",{href:!0});var hvt=s(mW);$Cr=r(hvt,"FlaxRoFormerForMaskedLM"),hvt.forEach(t),ICr=r(Rke," (RoFormer model)"),Rke.forEach(t),qCr=i(pe),eM=n(pe,"LI",{});var Bke=s(eM);g2e=n(Bke,"STRONG",{});var pvt=s(g2e);NCr=r(pvt,"t5"),pvt.forEach(t),jCr=r(Bke," \u2014 "),gW=n(Bke,"A",{href:!0});var _vt=s(gW);DCr=r(_vt,"FlaxT5ForConditionalGeneration"),_vt.forEach(t),GCr=r(Bke," (T5 model)"),Bke.forEach(t),OCr=i(pe),oM=n(pe,"LI",{});var Pke=s(oM);h2e=n(Pke,"STRONG",{});var uvt=s(h2e);VCr=r(uvt,"wav2vec2"),uvt.forEach(t),XCr=r(Pke," \u2014 "),hW=n(Pke,"A",{href:!0});var bvt=s(hW);zCr=r(bvt,"FlaxWav2Vec2ForPreTraining"),bvt.forEach(t),QCr=r(Pke," (Wav2Vec2 model)"),Pke.forEach(t),WCr=i(pe),rM=n(pe,"LI",{});var $ke=s(rM);p2e=n($ke,"STRONG",{});var Fvt=s(p2e);HCr=r(Fvt,"xlm-roberta"),Fvt.forEach(t),UCr=r($ke," \u2014 "),pW=n($ke,"A",{href:!0});var vvt=s(pW);JCr=r(vvt,"FlaxXLMRobertaForMaskedLM"),vvt.forEach(t),YCr=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),pe.forEach(t),KCr=i(ka),_2e=n(ka,"P",{});var Tvt=s(_2e);ZCr=r(Tvt,"Examples:"),Tvt.forEach(t),e5r=i(ka),m(eL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),CBe=i(c),lf=n(c,"H2",{class:!0});var $$e=s(lf);tM=n($$e,"A",{id:!0,class:!0,href:!0});var Mvt=s(tM);u2e=n(Mvt,"SPAN",{});var Evt=s(u2e);m(oL.$$.fragment,Evt),Evt.forEach(t),Mvt.forEach(t),o5r=i($$e),b2e=n($$e,"SPAN",{});var Cvt=s(b2e);r5r=r(Cvt,"FlaxAutoModelForMaskedLM"),Cvt.forEach(t),$$e.forEach(t),wBe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(rL.$$.fragment,bi),t5r=i(bi),df=n(bi,"P",{});var EJ=s(df);a5r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_W=n(EJ,"A",{href:!0});var wvt=s(_W);n5r=r(wvt,"from_pretrained()"),wvt.forEach(t),s5r=r(EJ," class method or the "),uW=n(EJ,"A",{href:!0});var Avt=s(uW);l5r=r(Avt,"from_config()"),Avt.forEach(t),i5r=r(EJ,` class
method.`),EJ.forEach(t),d5r=i(bi),tL=n(bi,"P",{});var I$e=s(tL);c5r=r(I$e,"This class cannot be instantiated directly using "),F2e=n(I$e,"CODE",{});var yvt=s(F2e);f5r=r(yvt,"__init__()"),yvt.forEach(t),m5r=r(I$e," (throws an error)."),I$e.forEach(t),g5r=i(bi),xt=n(bi,"DIV",{class:!0});var Fi=s(xt);m(aL.$$.fragment,Fi),h5r=i(Fi),v2e=n(Fi,"P",{});var Lvt=s(v2e);p5r=r(Lvt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lvt.forEach(t),_5r=i(Fi),cf=n(Fi,"P",{});var CJ=s(cf);u5r=r(CJ,`Note:
Loading a model from its configuration file does `),T2e=n(CJ,"STRONG",{});var xvt=s(T2e);b5r=r(xvt,"not"),xvt.forEach(t),F5r=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(CJ,"A",{href:!0});var kvt=s(bW);v5r=r(kvt,"from_pretrained()"),kvt.forEach(t),T5r=r(CJ," to load the model weights."),CJ.forEach(t),M5r=i(Fi),M2e=n(Fi,"P",{});var Svt=s(M2e);E5r=r(Svt,"Examples:"),Svt.forEach(t),C5r=i(Fi),m(nL.$$.fragment,Fi),Fi.forEach(t),w5r=i(bi),ko=n(bi,"DIV",{class:!0});var Sa=s(ko);m(sL.$$.fragment,Sa),A5r=i(Sa),E2e=n(Sa,"P",{});var Rvt=s(E2e);y5r=r(Rvt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rvt.forEach(t),L5r=i(Sa),Rn=n(Sa,"P",{});var lC=s(Rn);x5r=r(lC,"The model class to instantiate is selected based on the "),C2e=n(lC,"CODE",{});var Bvt=s(C2e);k5r=r(Bvt,"model_type"),Bvt.forEach(t),S5r=r(lC,` property of the config object (either
passed as an argument or loaded from `),w2e=n(lC,"CODE",{});var Pvt=s(w2e);R5r=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),B5r=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(lC,"CODE",{});var $vt=s(A2e);P5r=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),$5r=r(lC,":"),lC.forEach(t),I5r=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);aM=n(Ae,"LI",{});var Ike=s(aM);y2e=n(Ike,"STRONG",{});var Ivt=s(y2e);q5r=r(Ivt,"albert"),Ivt.forEach(t),N5r=r(Ike," \u2014 "),FW=n(Ike,"A",{href:!0});var qvt=s(FW);j5r=r(qvt,"FlaxAlbertForMaskedLM"),qvt.forEach(t),D5r=r(Ike," (ALBERT model)"),Ike.forEach(t),G5r=i(Ae),nM=n(Ae,"LI",{});var qke=s(nM);L2e=n(qke,"STRONG",{});var Nvt=s(L2e);O5r=r(Nvt,"bart"),Nvt.forEach(t),V5r=r(qke," \u2014 "),vW=n(qke,"A",{href:!0});var jvt=s(vW);X5r=r(jvt,"FlaxBartForConditionalGeneration"),jvt.forEach(t),z5r=r(qke," (BART model)"),qke.forEach(t),Q5r=i(Ae),sM=n(Ae,"LI",{});var Nke=s(sM);x2e=n(Nke,"STRONG",{});var Dvt=s(x2e);W5r=r(Dvt,"bert"),Dvt.forEach(t),H5r=r(Nke," \u2014 "),TW=n(Nke,"A",{href:!0});var Gvt=s(TW);U5r=r(Gvt,"FlaxBertForMaskedLM"),Gvt.forEach(t),J5r=r(Nke," (BERT model)"),Nke.forEach(t),Y5r=i(Ae),lM=n(Ae,"LI",{});var jke=s(lM);k2e=n(jke,"STRONG",{});var Ovt=s(k2e);K5r=r(Ovt,"big_bird"),Ovt.forEach(t),Z5r=r(jke," \u2014 "),MW=n(jke,"A",{href:!0});var Vvt=s(MW);ewr=r(Vvt,"FlaxBigBirdForMaskedLM"),Vvt.forEach(t),owr=r(jke," (BigBird model)"),jke.forEach(t),rwr=i(Ae),iM=n(Ae,"LI",{});var Dke=s(iM);S2e=n(Dke,"STRONG",{});var Xvt=s(S2e);twr=r(Xvt,"distilbert"),Xvt.forEach(t),awr=r(Dke," \u2014 "),EW=n(Dke,"A",{href:!0});var zvt=s(EW);nwr=r(zvt,"FlaxDistilBertForMaskedLM"),zvt.forEach(t),swr=r(Dke," (DistilBERT model)"),Dke.forEach(t),lwr=i(Ae),dM=n(Ae,"LI",{});var Gke=s(dM);R2e=n(Gke,"STRONG",{});var Qvt=s(R2e);iwr=r(Qvt,"electra"),Qvt.forEach(t),dwr=r(Gke," \u2014 "),CW=n(Gke,"A",{href:!0});var Wvt=s(CW);cwr=r(Wvt,"FlaxElectraForMaskedLM"),Wvt.forEach(t),fwr=r(Gke," (ELECTRA model)"),Gke.forEach(t),mwr=i(Ae),cM=n(Ae,"LI",{});var Oke=s(cM);B2e=n(Oke,"STRONG",{});var Hvt=s(B2e);gwr=r(Hvt,"mbart"),Hvt.forEach(t),hwr=r(Oke," \u2014 "),wW=n(Oke,"A",{href:!0});var Uvt=s(wW);pwr=r(Uvt,"FlaxMBartForConditionalGeneration"),Uvt.forEach(t),_wr=r(Oke," (mBART model)"),Oke.forEach(t),uwr=i(Ae),fM=n(Ae,"LI",{});var Vke=s(fM);P2e=n(Vke,"STRONG",{});var Jvt=s(P2e);bwr=r(Jvt,"roberta"),Jvt.forEach(t),Fwr=r(Vke," \u2014 "),AW=n(Vke,"A",{href:!0});var Yvt=s(AW);vwr=r(Yvt,"FlaxRobertaForMaskedLM"),Yvt.forEach(t),Twr=r(Vke," (RoBERTa model)"),Vke.forEach(t),Mwr=i(Ae),mM=n(Ae,"LI",{});var Xke=s(mM);$2e=n(Xke,"STRONG",{});var Kvt=s($2e);Ewr=r(Kvt,"roformer"),Kvt.forEach(t),Cwr=r(Xke," \u2014 "),yW=n(Xke,"A",{href:!0});var Zvt=s(yW);wwr=r(Zvt,"FlaxRoFormerForMaskedLM"),Zvt.forEach(t),Awr=r(Xke," (RoFormer model)"),Xke.forEach(t),ywr=i(Ae),gM=n(Ae,"LI",{});var zke=s(gM);I2e=n(zke,"STRONG",{});var e6t=s(I2e);Lwr=r(e6t,"xlm-roberta"),e6t.forEach(t),xwr=r(zke," \u2014 "),LW=n(zke,"A",{href:!0});var o6t=s(LW);kwr=r(o6t,"FlaxXLMRobertaForMaskedLM"),o6t.forEach(t),Swr=r(zke," (XLM-RoBERTa model)"),zke.forEach(t),Ae.forEach(t),Rwr=i(Sa),q2e=n(Sa,"P",{});var r6t=s(q2e);Bwr=r(r6t,"Examples:"),r6t.forEach(t),Pwr=i(Sa),m(lL.$$.fragment,Sa),Sa.forEach(t),bi.forEach(t),ABe=i(c),ff=n(c,"H2",{class:!0});var q$e=s(ff);hM=n(q$e,"A",{id:!0,class:!0,href:!0});var t6t=s(hM);N2e=n(t6t,"SPAN",{});var a6t=s(N2e);m(iL.$$.fragment,a6t),a6t.forEach(t),t6t.forEach(t),$wr=i(q$e),j2e=n(q$e,"SPAN",{});var n6t=s(j2e);Iwr=r(n6t,"FlaxAutoModelForSeq2SeqLM"),n6t.forEach(t),q$e.forEach(t),yBe=i(c),Ir=n(c,"DIV",{class:!0});var vi=s(Ir);m(dL.$$.fragment,vi),qwr=i(vi),mf=n(vi,"P",{});var wJ=s(mf);Nwr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),xW=n(wJ,"A",{href:!0});var s6t=s(xW);jwr=r(s6t,"from_pretrained()"),s6t.forEach(t),Dwr=r(wJ," class method or the "),kW=n(wJ,"A",{href:!0});var l6t=s(kW);Gwr=r(l6t,"from_config()"),l6t.forEach(t),Owr=r(wJ,` class
method.`),wJ.forEach(t),Vwr=i(vi),cL=n(vi,"P",{});var N$e=s(cL);Xwr=r(N$e,"This class cannot be instantiated directly using "),D2e=n(N$e,"CODE",{});var i6t=s(D2e);zwr=r(i6t,"__init__()"),i6t.forEach(t),Qwr=r(N$e," (throws an error)."),N$e.forEach(t),Wwr=i(vi),kt=n(vi,"DIV",{class:!0});var Ti=s(kt);m(fL.$$.fragment,Ti),Hwr=i(Ti),G2e=n(Ti,"P",{});var d6t=s(G2e);Uwr=r(d6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d6t.forEach(t),Jwr=i(Ti),gf=n(Ti,"P",{});var AJ=s(gf);Ywr=r(AJ,`Note:
Loading a model from its configuration file does `),O2e=n(AJ,"STRONG",{});var c6t=s(O2e);Kwr=r(c6t,"not"),c6t.forEach(t),Zwr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SW=n(AJ,"A",{href:!0});var f6t=s(SW);eAr=r(f6t,"from_pretrained()"),f6t.forEach(t),oAr=r(AJ," to load the model weights."),AJ.forEach(t),rAr=i(Ti),V2e=n(Ti,"P",{});var m6t=s(V2e);tAr=r(m6t,"Examples:"),m6t.forEach(t),aAr=i(Ti),m(mL.$$.fragment,Ti),Ti.forEach(t),nAr=i(vi),So=n(vi,"DIV",{class:!0});var Ra=s(So);m(gL.$$.fragment,Ra),sAr=i(Ra),X2e=n(Ra,"P",{});var g6t=s(X2e);lAr=r(g6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g6t.forEach(t),iAr=i(Ra),Bn=n(Ra,"P",{});var iC=s(Bn);dAr=r(iC,"The model class to instantiate is selected based on the "),z2e=n(iC,"CODE",{});var h6t=s(z2e);cAr=r(h6t,"model_type"),h6t.forEach(t),fAr=r(iC,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(iC,"CODE",{});var p6t=s(Q2e);mAr=r(p6t,"pretrained_model_name_or_path"),p6t.forEach(t),gAr=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(iC,"CODE",{});var _6t=s(W2e);hAr=r(_6t,"pretrained_model_name_or_path"),_6t.forEach(t),pAr=r(iC,":"),iC.forEach(t),_Ar=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);pM=n(so,"LI",{});var Qke=s(pM);H2e=n(Qke,"STRONG",{});var u6t=s(H2e);uAr=r(u6t,"bart"),u6t.forEach(t),bAr=r(Qke," \u2014 "),RW=n(Qke,"A",{href:!0});var b6t=s(RW);FAr=r(b6t,"FlaxBartForConditionalGeneration"),b6t.forEach(t),vAr=r(Qke," (BART model)"),Qke.forEach(t),TAr=i(so),_M=n(so,"LI",{});var Wke=s(_M);U2e=n(Wke,"STRONG",{});var F6t=s(U2e);MAr=r(F6t,"blenderbot"),F6t.forEach(t),EAr=r(Wke," \u2014 "),BW=n(Wke,"A",{href:!0});var v6t=s(BW);CAr=r(v6t,"FlaxBlenderbotForConditionalGeneration"),v6t.forEach(t),wAr=r(Wke," (Blenderbot model)"),Wke.forEach(t),AAr=i(so),uM=n(so,"LI",{});var Hke=s(uM);J2e=n(Hke,"STRONG",{});var T6t=s(J2e);yAr=r(T6t,"blenderbot-small"),T6t.forEach(t),LAr=r(Hke," \u2014 "),PW=n(Hke,"A",{href:!0});var M6t=s(PW);xAr=r(M6t,"FlaxBlenderbotSmallForConditionalGeneration"),M6t.forEach(t),kAr=r(Hke," (BlenderbotSmall model)"),Hke.forEach(t),SAr=i(so),bM=n(so,"LI",{});var Uke=s(bM);Y2e=n(Uke,"STRONG",{});var E6t=s(Y2e);RAr=r(E6t,"encoder-decoder"),E6t.forEach(t),BAr=r(Uke," \u2014 "),$W=n(Uke,"A",{href:!0});var C6t=s($W);PAr=r(C6t,"FlaxEncoderDecoderModel"),C6t.forEach(t),$Ar=r(Uke," (Encoder decoder model)"),Uke.forEach(t),IAr=i(so),FM=n(so,"LI",{});var Jke=s(FM);K2e=n(Jke,"STRONG",{});var w6t=s(K2e);qAr=r(w6t,"marian"),w6t.forEach(t),NAr=r(Jke," \u2014 "),IW=n(Jke,"A",{href:!0});var A6t=s(IW);jAr=r(A6t,"FlaxMarianMTModel"),A6t.forEach(t),DAr=r(Jke," (Marian model)"),Jke.forEach(t),GAr=i(so),vM=n(so,"LI",{});var Yke=s(vM);Z2e=n(Yke,"STRONG",{});var y6t=s(Z2e);OAr=r(y6t,"mbart"),y6t.forEach(t),VAr=r(Yke," \u2014 "),qW=n(Yke,"A",{href:!0});var L6t=s(qW);XAr=r(L6t,"FlaxMBartForConditionalGeneration"),L6t.forEach(t),zAr=r(Yke," (mBART model)"),Yke.forEach(t),QAr=i(so),TM=n(so,"LI",{});var Kke=s(TM);eFe=n(Kke,"STRONG",{});var x6t=s(eFe);WAr=r(x6t,"mt5"),x6t.forEach(t),HAr=r(Kke," \u2014 "),NW=n(Kke,"A",{href:!0});var k6t=s(NW);UAr=r(k6t,"FlaxMT5ForConditionalGeneration"),k6t.forEach(t),JAr=r(Kke," (mT5 model)"),Kke.forEach(t),YAr=i(so),MM=n(so,"LI",{});var Zke=s(MM);oFe=n(Zke,"STRONG",{});var S6t=s(oFe);KAr=r(S6t,"pegasus"),S6t.forEach(t),ZAr=r(Zke," \u2014 "),jW=n(Zke,"A",{href:!0});var R6t=s(jW);e0r=r(R6t,"FlaxPegasusForConditionalGeneration"),R6t.forEach(t),o0r=r(Zke," (Pegasus model)"),Zke.forEach(t),r0r=i(so),EM=n(so,"LI",{});var eSe=s(EM);rFe=n(eSe,"STRONG",{});var B6t=s(rFe);t0r=r(B6t,"t5"),B6t.forEach(t),a0r=r(eSe," \u2014 "),DW=n(eSe,"A",{href:!0});var P6t=s(DW);n0r=r(P6t,"FlaxT5ForConditionalGeneration"),P6t.forEach(t),s0r=r(eSe," (T5 model)"),eSe.forEach(t),so.forEach(t),l0r=i(Ra),tFe=n(Ra,"P",{});var $6t=s(tFe);i0r=r($6t,"Examples:"),$6t.forEach(t),d0r=i(Ra),m(hL.$$.fragment,Ra),Ra.forEach(t),vi.forEach(t),LBe=i(c),hf=n(c,"H2",{class:!0});var j$e=s(hf);CM=n(j$e,"A",{id:!0,class:!0,href:!0});var I6t=s(CM);aFe=n(I6t,"SPAN",{});var q6t=s(aFe);m(pL.$$.fragment,q6t),q6t.forEach(t),I6t.forEach(t),c0r=i(j$e),nFe=n(j$e,"SPAN",{});var N6t=s(nFe);f0r=r(N6t,"FlaxAutoModelForSequenceClassification"),N6t.forEach(t),j$e.forEach(t),xBe=i(c),qr=n(c,"DIV",{class:!0});var Mi=s(qr);m(_L.$$.fragment,Mi),m0r=i(Mi),pf=n(Mi,"P",{});var yJ=s(pf);g0r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GW=n(yJ,"A",{href:!0});var j6t=s(GW);h0r=r(j6t,"from_pretrained()"),j6t.forEach(t),p0r=r(yJ," class method or the "),OW=n(yJ,"A",{href:!0});var D6t=s(OW);_0r=r(D6t,"from_config()"),D6t.forEach(t),u0r=r(yJ,` class
method.`),yJ.forEach(t),b0r=i(Mi),uL=n(Mi,"P",{});var D$e=s(uL);F0r=r(D$e,"This class cannot be instantiated directly using "),sFe=n(D$e,"CODE",{});var G6t=s(sFe);v0r=r(G6t,"__init__()"),G6t.forEach(t),T0r=r(D$e," (throws an error)."),D$e.forEach(t),M0r=i(Mi),St=n(Mi,"DIV",{class:!0});var Ei=s(St);m(bL.$$.fragment,Ei),E0r=i(Ei),lFe=n(Ei,"P",{});var O6t=s(lFe);C0r=r(O6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O6t.forEach(t),w0r=i(Ei),_f=n(Ei,"P",{});var LJ=s(_f);A0r=r(LJ,`Note:
Loading a model from its configuration file does `),iFe=n(LJ,"STRONG",{});var V6t=s(iFe);y0r=r(V6t,"not"),V6t.forEach(t),L0r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(LJ,"A",{href:!0});var X6t=s(VW);x0r=r(X6t,"from_pretrained()"),X6t.forEach(t),k0r=r(LJ," to load the model weights."),LJ.forEach(t),S0r=i(Ei),dFe=n(Ei,"P",{});var z6t=s(dFe);R0r=r(z6t,"Examples:"),z6t.forEach(t),B0r=i(Ei),m(FL.$$.fragment,Ei),Ei.forEach(t),P0r=i(Mi),Ro=n(Mi,"DIV",{class:!0});var Ba=s(Ro);m(vL.$$.fragment,Ba),$0r=i(Ba),cFe=n(Ba,"P",{});var Q6t=s(cFe);I0r=r(Q6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q6t.forEach(t),q0r=i(Ba),Pn=n(Ba,"P",{});var dC=s(Pn);N0r=r(dC,"The model class to instantiate is selected based on the "),fFe=n(dC,"CODE",{});var W6t=s(fFe);j0r=r(W6t,"model_type"),W6t.forEach(t),D0r=r(dC,` property of the config object (either
passed as an argument or loaded from `),mFe=n(dC,"CODE",{});var H6t=s(mFe);G0r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),O0r=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gFe=n(dC,"CODE",{});var U6t=s(gFe);V0r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),X0r=r(dC,":"),dC.forEach(t),z0r=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);wM=n(ye,"LI",{});var oSe=s(wM);hFe=n(oSe,"STRONG",{});var J6t=s(hFe);Q0r=r(J6t,"albert"),J6t.forEach(t),W0r=r(oSe," \u2014 "),XW=n(oSe,"A",{href:!0});var Y6t=s(XW);H0r=r(Y6t,"FlaxAlbertForSequenceClassification"),Y6t.forEach(t),U0r=r(oSe," (ALBERT model)"),oSe.forEach(t),J0r=i(ye),AM=n(ye,"LI",{});var rSe=s(AM);pFe=n(rSe,"STRONG",{});var K6t=s(pFe);Y0r=r(K6t,"bart"),K6t.forEach(t),K0r=r(rSe," \u2014 "),zW=n(rSe,"A",{href:!0});var Z6t=s(zW);Z0r=r(Z6t,"FlaxBartForSequenceClassification"),Z6t.forEach(t),eyr=r(rSe," (BART model)"),rSe.forEach(t),oyr=i(ye),yM=n(ye,"LI",{});var tSe=s(yM);_Fe=n(tSe,"STRONG",{});var eTt=s(_Fe);ryr=r(eTt,"bert"),eTt.forEach(t),tyr=r(tSe," \u2014 "),QW=n(tSe,"A",{href:!0});var oTt=s(QW);ayr=r(oTt,"FlaxBertForSequenceClassification"),oTt.forEach(t),nyr=r(tSe," (BERT model)"),tSe.forEach(t),syr=i(ye),LM=n(ye,"LI",{});var aSe=s(LM);uFe=n(aSe,"STRONG",{});var rTt=s(uFe);lyr=r(rTt,"big_bird"),rTt.forEach(t),iyr=r(aSe," \u2014 "),WW=n(aSe,"A",{href:!0});var tTt=s(WW);dyr=r(tTt,"FlaxBigBirdForSequenceClassification"),tTt.forEach(t),cyr=r(aSe," (BigBird model)"),aSe.forEach(t),fyr=i(ye),xM=n(ye,"LI",{});var nSe=s(xM);bFe=n(nSe,"STRONG",{});var aTt=s(bFe);myr=r(aTt,"distilbert"),aTt.forEach(t),gyr=r(nSe," \u2014 "),HW=n(nSe,"A",{href:!0});var nTt=s(HW);hyr=r(nTt,"FlaxDistilBertForSequenceClassification"),nTt.forEach(t),pyr=r(nSe," (DistilBERT model)"),nSe.forEach(t),_yr=i(ye),kM=n(ye,"LI",{});var sSe=s(kM);FFe=n(sSe,"STRONG",{});var sTt=s(FFe);uyr=r(sTt,"electra"),sTt.forEach(t),byr=r(sSe," \u2014 "),UW=n(sSe,"A",{href:!0});var lTt=s(UW);Fyr=r(lTt,"FlaxElectraForSequenceClassification"),lTt.forEach(t),vyr=r(sSe," (ELECTRA model)"),sSe.forEach(t),Tyr=i(ye),SM=n(ye,"LI",{});var lSe=s(SM);vFe=n(lSe,"STRONG",{});var iTt=s(vFe);Myr=r(iTt,"mbart"),iTt.forEach(t),Eyr=r(lSe," \u2014 "),JW=n(lSe,"A",{href:!0});var dTt=s(JW);Cyr=r(dTt,"FlaxMBartForSequenceClassification"),dTt.forEach(t),wyr=r(lSe," (mBART model)"),lSe.forEach(t),Ayr=i(ye),RM=n(ye,"LI",{});var iSe=s(RM);TFe=n(iSe,"STRONG",{});var cTt=s(TFe);yyr=r(cTt,"roberta"),cTt.forEach(t),Lyr=r(iSe," \u2014 "),YW=n(iSe,"A",{href:!0});var fTt=s(YW);xyr=r(fTt,"FlaxRobertaForSequenceClassification"),fTt.forEach(t),kyr=r(iSe," (RoBERTa model)"),iSe.forEach(t),Syr=i(ye),BM=n(ye,"LI",{});var dSe=s(BM);MFe=n(dSe,"STRONG",{});var mTt=s(MFe);Ryr=r(mTt,"roformer"),mTt.forEach(t),Byr=r(dSe," \u2014 "),KW=n(dSe,"A",{href:!0});var gTt=s(KW);Pyr=r(gTt,"FlaxRoFormerForSequenceClassification"),gTt.forEach(t),$yr=r(dSe," (RoFormer model)"),dSe.forEach(t),Iyr=i(ye),PM=n(ye,"LI",{});var cSe=s(PM);EFe=n(cSe,"STRONG",{});var hTt=s(EFe);qyr=r(hTt,"xlm-roberta"),hTt.forEach(t),Nyr=r(cSe," \u2014 "),ZW=n(cSe,"A",{href:!0});var pTt=s(ZW);jyr=r(pTt,"FlaxXLMRobertaForSequenceClassification"),pTt.forEach(t),Dyr=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),ye.forEach(t),Gyr=i(Ba),CFe=n(Ba,"P",{});var _Tt=s(CFe);Oyr=r(_Tt,"Examples:"),_Tt.forEach(t),Vyr=i(Ba),m(TL.$$.fragment,Ba),Ba.forEach(t),Mi.forEach(t),kBe=i(c),uf=n(c,"H2",{class:!0});var G$e=s(uf);$M=n(G$e,"A",{id:!0,class:!0,href:!0});var uTt=s($M);wFe=n(uTt,"SPAN",{});var bTt=s(wFe);m(ML.$$.fragment,bTt),bTt.forEach(t),uTt.forEach(t),Xyr=i(G$e),AFe=n(G$e,"SPAN",{});var FTt=s(AFe);zyr=r(FTt,"FlaxAutoModelForQuestionAnswering"),FTt.forEach(t),G$e.forEach(t),SBe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(EL.$$.fragment,Ci),Qyr=i(Ci),bf=n(Ci,"P",{});var xJ=s(bf);Wyr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eH=n(xJ,"A",{href:!0});var vTt=s(eH);Hyr=r(vTt,"from_pretrained()"),vTt.forEach(t),Uyr=r(xJ," class method or the "),oH=n(xJ,"A",{href:!0});var TTt=s(oH);Jyr=r(TTt,"from_config()"),TTt.forEach(t),Yyr=r(xJ,` class
method.`),xJ.forEach(t),Kyr=i(Ci),CL=n(Ci,"P",{});var O$e=s(CL);Zyr=r(O$e,"This class cannot be instantiated directly using "),yFe=n(O$e,"CODE",{});var MTt=s(yFe);eLr=r(MTt,"__init__()"),MTt.forEach(t),oLr=r(O$e," (throws an error)."),O$e.forEach(t),rLr=i(Ci),Rt=n(Ci,"DIV",{class:!0});var wi=s(Rt);m(wL.$$.fragment,wi),tLr=i(wi),LFe=n(wi,"P",{});var ETt=s(LFe);aLr=r(ETt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ETt.forEach(t),nLr=i(wi),Ff=n(wi,"P",{});var kJ=s(Ff);sLr=r(kJ,`Note:
Loading a model from its configuration file does `),xFe=n(kJ,"STRONG",{});var CTt=s(xFe);lLr=r(CTt,"not"),CTt.forEach(t),iLr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(kJ,"A",{href:!0});var wTt=s(rH);dLr=r(wTt,"from_pretrained()"),wTt.forEach(t),cLr=r(kJ," to load the model weights."),kJ.forEach(t),fLr=i(wi),kFe=n(wi,"P",{});var ATt=s(kFe);mLr=r(ATt,"Examples:"),ATt.forEach(t),gLr=i(wi),m(AL.$$.fragment,wi),wi.forEach(t),hLr=i(Ci),Bo=n(Ci,"DIV",{class:!0});var Pa=s(Bo);m(yL.$$.fragment,Pa),pLr=i(Pa),SFe=n(Pa,"P",{});var yTt=s(SFe);_Lr=r(yTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yTt.forEach(t),uLr=i(Pa),$n=n(Pa,"P",{});var cC=s($n);bLr=r(cC,"The model class to instantiate is selected based on the "),RFe=n(cC,"CODE",{});var LTt=s(RFe);FLr=r(LTt,"model_type"),LTt.forEach(t),vLr=r(cC,` property of the config object (either
passed as an argument or loaded from `),BFe=n(cC,"CODE",{});var xTt=s(BFe);TLr=r(xTt,"pretrained_model_name_or_path"),xTt.forEach(t),MLr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PFe=n(cC,"CODE",{});var kTt=s(PFe);ELr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),CLr=r(cC,":"),cC.forEach(t),wLr=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);IM=n(Le,"LI",{});var fSe=s(IM);$Fe=n(fSe,"STRONG",{});var STt=s($Fe);ALr=r(STt,"albert"),STt.forEach(t),yLr=r(fSe," \u2014 "),tH=n(fSe,"A",{href:!0});var RTt=s(tH);LLr=r(RTt,"FlaxAlbertForQuestionAnswering"),RTt.forEach(t),xLr=r(fSe," (ALBERT model)"),fSe.forEach(t),kLr=i(Le),qM=n(Le,"LI",{});var mSe=s(qM);IFe=n(mSe,"STRONG",{});var BTt=s(IFe);SLr=r(BTt,"bart"),BTt.forEach(t),RLr=r(mSe," \u2014 "),aH=n(mSe,"A",{href:!0});var PTt=s(aH);BLr=r(PTt,"FlaxBartForQuestionAnswering"),PTt.forEach(t),PLr=r(mSe," (BART model)"),mSe.forEach(t),$Lr=i(Le),NM=n(Le,"LI",{});var gSe=s(NM);qFe=n(gSe,"STRONG",{});var $Tt=s(qFe);ILr=r($Tt,"bert"),$Tt.forEach(t),qLr=r(gSe," \u2014 "),nH=n(gSe,"A",{href:!0});var ITt=s(nH);NLr=r(ITt,"FlaxBertForQuestionAnswering"),ITt.forEach(t),jLr=r(gSe," (BERT model)"),gSe.forEach(t),DLr=i(Le),jM=n(Le,"LI",{});var hSe=s(jM);NFe=n(hSe,"STRONG",{});var qTt=s(NFe);GLr=r(qTt,"big_bird"),qTt.forEach(t),OLr=r(hSe," \u2014 "),sH=n(hSe,"A",{href:!0});var NTt=s(sH);VLr=r(NTt,"FlaxBigBirdForQuestionAnswering"),NTt.forEach(t),XLr=r(hSe," (BigBird model)"),hSe.forEach(t),zLr=i(Le),DM=n(Le,"LI",{});var pSe=s(DM);jFe=n(pSe,"STRONG",{});var jTt=s(jFe);QLr=r(jTt,"distilbert"),jTt.forEach(t),WLr=r(pSe," \u2014 "),lH=n(pSe,"A",{href:!0});var DTt=s(lH);HLr=r(DTt,"FlaxDistilBertForQuestionAnswering"),DTt.forEach(t),ULr=r(pSe," (DistilBERT model)"),pSe.forEach(t),JLr=i(Le),GM=n(Le,"LI",{});var _Se=s(GM);DFe=n(_Se,"STRONG",{});var GTt=s(DFe);YLr=r(GTt,"electra"),GTt.forEach(t),KLr=r(_Se," \u2014 "),iH=n(_Se,"A",{href:!0});var OTt=s(iH);ZLr=r(OTt,"FlaxElectraForQuestionAnswering"),OTt.forEach(t),e8r=r(_Se," (ELECTRA model)"),_Se.forEach(t),o8r=i(Le),OM=n(Le,"LI",{});var uSe=s(OM);GFe=n(uSe,"STRONG",{});var VTt=s(GFe);r8r=r(VTt,"mbart"),VTt.forEach(t),t8r=r(uSe," \u2014 "),dH=n(uSe,"A",{href:!0});var XTt=s(dH);a8r=r(XTt,"FlaxMBartForQuestionAnswering"),XTt.forEach(t),n8r=r(uSe," (mBART model)"),uSe.forEach(t),s8r=i(Le),VM=n(Le,"LI",{});var bSe=s(VM);OFe=n(bSe,"STRONG",{});var zTt=s(OFe);l8r=r(zTt,"roberta"),zTt.forEach(t),i8r=r(bSe," \u2014 "),cH=n(bSe,"A",{href:!0});var QTt=s(cH);d8r=r(QTt,"FlaxRobertaForQuestionAnswering"),QTt.forEach(t),c8r=r(bSe," (RoBERTa model)"),bSe.forEach(t),f8r=i(Le),XM=n(Le,"LI",{});var FSe=s(XM);VFe=n(FSe,"STRONG",{});var WTt=s(VFe);m8r=r(WTt,"roformer"),WTt.forEach(t),g8r=r(FSe," \u2014 "),fH=n(FSe,"A",{href:!0});var HTt=s(fH);h8r=r(HTt,"FlaxRoFormerForQuestionAnswering"),HTt.forEach(t),p8r=r(FSe," (RoFormer model)"),FSe.forEach(t),_8r=i(Le),zM=n(Le,"LI",{});var vSe=s(zM);XFe=n(vSe,"STRONG",{});var UTt=s(XFe);u8r=r(UTt,"xlm-roberta"),UTt.forEach(t),b8r=r(vSe," \u2014 "),mH=n(vSe,"A",{href:!0});var JTt=s(mH);F8r=r(JTt,"FlaxXLMRobertaForQuestionAnswering"),JTt.forEach(t),v8r=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),Le.forEach(t),T8r=i(Pa),zFe=n(Pa,"P",{});var YTt=s(zFe);M8r=r(YTt,"Examples:"),YTt.forEach(t),E8r=i(Pa),m(LL.$$.fragment,Pa),Pa.forEach(t),Ci.forEach(t),RBe=i(c),vf=n(c,"H2",{class:!0});var V$e=s(vf);QM=n(V$e,"A",{id:!0,class:!0,href:!0});var KTt=s(QM);QFe=n(KTt,"SPAN",{});var ZTt=s(QFe);m(xL.$$.fragment,ZTt),ZTt.forEach(t),KTt.forEach(t),C8r=i(V$e),WFe=n(V$e,"SPAN",{});var e7t=s(WFe);w8r=r(e7t,"FlaxAutoModelForTokenClassification"),e7t.forEach(t),V$e.forEach(t),BBe=i(c),jr=n(c,"DIV",{class:!0});var Ai=s(jr);m(kL.$$.fragment,Ai),A8r=i(Ai),Tf=n(Ai,"P",{});var SJ=s(Tf);y8r=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),gH=n(SJ,"A",{href:!0});var o7t=s(gH);L8r=r(o7t,"from_pretrained()"),o7t.forEach(t),x8r=r(SJ," class method or the "),hH=n(SJ,"A",{href:!0});var r7t=s(hH);k8r=r(r7t,"from_config()"),r7t.forEach(t),S8r=r(SJ,` class
method.`),SJ.forEach(t),R8r=i(Ai),SL=n(Ai,"P",{});var X$e=s(SL);B8r=r(X$e,"This class cannot be instantiated directly using "),HFe=n(X$e,"CODE",{});var t7t=s(HFe);P8r=r(t7t,"__init__()"),t7t.forEach(t),$8r=r(X$e," (throws an error)."),X$e.forEach(t),I8r=i(Ai),Bt=n(Ai,"DIV",{class:!0});var yi=s(Bt);m(RL.$$.fragment,yi),q8r=i(yi),UFe=n(yi,"P",{});var a7t=s(UFe);N8r=r(a7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),a7t.forEach(t),j8r=i(yi),Mf=n(yi,"P",{});var RJ=s(Mf);D8r=r(RJ,`Note:
Loading a model from its configuration file does `),JFe=n(RJ,"STRONG",{});var n7t=s(JFe);G8r=r(n7t,"not"),n7t.forEach(t),O8r=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(RJ,"A",{href:!0});var s7t=s(pH);V8r=r(s7t,"from_pretrained()"),s7t.forEach(t),X8r=r(RJ," to load the model weights."),RJ.forEach(t),z8r=i(yi),YFe=n(yi,"P",{});var l7t=s(YFe);Q8r=r(l7t,"Examples:"),l7t.forEach(t),W8r=i(yi),m(BL.$$.fragment,yi),yi.forEach(t),H8r=i(Ai),Po=n(Ai,"DIV",{class:!0});var $a=s(Po);m(PL.$$.fragment,$a),U8r=i($a),KFe=n($a,"P",{});var i7t=s(KFe);J8r=r(i7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i7t.forEach(t),Y8r=i($a),In=n($a,"P",{});var fC=s(In);K8r=r(fC,"The model class to instantiate is selected based on the "),ZFe=n(fC,"CODE",{});var d7t=s(ZFe);Z8r=r(d7t,"model_type"),d7t.forEach(t),e9r=r(fC,` property of the config object (either
passed as an argument or loaded from `),eve=n(fC,"CODE",{});var c7t=s(eve);o9r=r(c7t,"pretrained_model_name_or_path"),c7t.forEach(t),r9r=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(fC,"CODE",{});var f7t=s(ove);t9r=r(f7t,"pretrained_model_name_or_path"),f7t.forEach(t),a9r=r(fC,":"),fC.forEach(t),n9r=i($a),Be=n($a,"UL",{});var Oo=s(Be);WM=n(Oo,"LI",{});var TSe=s(WM);rve=n(TSe,"STRONG",{});var m7t=s(rve);s9r=r(m7t,"albert"),m7t.forEach(t),l9r=r(TSe," \u2014 "),_H=n(TSe,"A",{href:!0});var g7t=s(_H);i9r=r(g7t,"FlaxAlbertForTokenClassification"),g7t.forEach(t),d9r=r(TSe," (ALBERT model)"),TSe.forEach(t),c9r=i(Oo),HM=n(Oo,"LI",{});var MSe=s(HM);tve=n(MSe,"STRONG",{});var h7t=s(tve);f9r=r(h7t,"bert"),h7t.forEach(t),m9r=r(MSe," \u2014 "),uH=n(MSe,"A",{href:!0});var p7t=s(uH);g9r=r(p7t,"FlaxBertForTokenClassification"),p7t.forEach(t),h9r=r(MSe," (BERT model)"),MSe.forEach(t),p9r=i(Oo),UM=n(Oo,"LI",{});var ESe=s(UM);ave=n(ESe,"STRONG",{});var _7t=s(ave);_9r=r(_7t,"big_bird"),_7t.forEach(t),u9r=r(ESe," \u2014 "),bH=n(ESe,"A",{href:!0});var u7t=s(bH);b9r=r(u7t,"FlaxBigBirdForTokenClassification"),u7t.forEach(t),F9r=r(ESe," (BigBird model)"),ESe.forEach(t),v9r=i(Oo),JM=n(Oo,"LI",{});var CSe=s(JM);nve=n(CSe,"STRONG",{});var b7t=s(nve);T9r=r(b7t,"distilbert"),b7t.forEach(t),M9r=r(CSe," \u2014 "),FH=n(CSe,"A",{href:!0});var F7t=s(FH);E9r=r(F7t,"FlaxDistilBertForTokenClassification"),F7t.forEach(t),C9r=r(CSe," (DistilBERT model)"),CSe.forEach(t),w9r=i(Oo),YM=n(Oo,"LI",{});var wSe=s(YM);sve=n(wSe,"STRONG",{});var v7t=s(sve);A9r=r(v7t,"electra"),v7t.forEach(t),y9r=r(wSe," \u2014 "),vH=n(wSe,"A",{href:!0});var T7t=s(vH);L9r=r(T7t,"FlaxElectraForTokenClassification"),T7t.forEach(t),x9r=r(wSe," (ELECTRA model)"),wSe.forEach(t),k9r=i(Oo),KM=n(Oo,"LI",{});var ASe=s(KM);lve=n(ASe,"STRONG",{});var M7t=s(lve);S9r=r(M7t,"roberta"),M7t.forEach(t),R9r=r(ASe," \u2014 "),TH=n(ASe,"A",{href:!0});var E7t=s(TH);B9r=r(E7t,"FlaxRobertaForTokenClassification"),E7t.forEach(t),P9r=r(ASe," (RoBERTa model)"),ASe.forEach(t),$9r=i(Oo),ZM=n(Oo,"LI",{});var ySe=s(ZM);ive=n(ySe,"STRONG",{});var C7t=s(ive);I9r=r(C7t,"roformer"),C7t.forEach(t),q9r=r(ySe," \u2014 "),MH=n(ySe,"A",{href:!0});var w7t=s(MH);N9r=r(w7t,"FlaxRoFormerForTokenClassification"),w7t.forEach(t),j9r=r(ySe," (RoFormer model)"),ySe.forEach(t),D9r=i(Oo),eE=n(Oo,"LI",{});var LSe=s(eE);dve=n(LSe,"STRONG",{});var A7t=s(dve);G9r=r(A7t,"xlm-roberta"),A7t.forEach(t),O9r=r(LSe," \u2014 "),EH=n(LSe,"A",{href:!0});var y7t=s(EH);V9r=r(y7t,"FlaxXLMRobertaForTokenClassification"),y7t.forEach(t),X9r=r(LSe," (XLM-RoBERTa model)"),LSe.forEach(t),Oo.forEach(t),z9r=i($a),cve=n($a,"P",{});var L7t=s(cve);Q9r=r(L7t,"Examples:"),L7t.forEach(t),W9r=i($a),m($L.$$.fragment,$a),$a.forEach(t),Ai.forEach(t),PBe=i(c),Ef=n(c,"H2",{class:!0});var z$e=s(Ef);oE=n(z$e,"A",{id:!0,class:!0,href:!0});var x7t=s(oE);fve=n(x7t,"SPAN",{});var k7t=s(fve);m(IL.$$.fragment,k7t),k7t.forEach(t),x7t.forEach(t),H9r=i(z$e),mve=n(z$e,"SPAN",{});var S7t=s(mve);U9r=r(S7t,"FlaxAutoModelForMultipleChoice"),S7t.forEach(t),z$e.forEach(t),$Be=i(c),Dr=n(c,"DIV",{class:!0});var Li=s(Dr);m(qL.$$.fragment,Li),J9r=i(Li),Cf=n(Li,"P",{});var BJ=s(Cf);Y9r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CH=n(BJ,"A",{href:!0});var R7t=s(CH);K9r=r(R7t,"from_pretrained()"),R7t.forEach(t),Z9r=r(BJ," class method or the "),wH=n(BJ,"A",{href:!0});var B7t=s(wH);exr=r(B7t,"from_config()"),B7t.forEach(t),oxr=r(BJ,` class
method.`),BJ.forEach(t),rxr=i(Li),NL=n(Li,"P",{});var Q$e=s(NL);txr=r(Q$e,"This class cannot be instantiated directly using "),gve=n(Q$e,"CODE",{});var P7t=s(gve);axr=r(P7t,"__init__()"),P7t.forEach(t),nxr=r(Q$e," (throws an error)."),Q$e.forEach(t),sxr=i(Li),Pt=n(Li,"DIV",{class:!0});var xi=s(Pt);m(jL.$$.fragment,xi),lxr=i(xi),hve=n(xi,"P",{});var $7t=s(hve);ixr=r($7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$7t.forEach(t),dxr=i(xi),wf=n(xi,"P",{});var PJ=s(wf);cxr=r(PJ,`Note:
Loading a model from its configuration file does `),pve=n(PJ,"STRONG",{});var I7t=s(pve);fxr=r(I7t,"not"),I7t.forEach(t),mxr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(PJ,"A",{href:!0});var q7t=s(AH);gxr=r(q7t,"from_pretrained()"),q7t.forEach(t),hxr=r(PJ," to load the model weights."),PJ.forEach(t),pxr=i(xi),_ve=n(xi,"P",{});var N7t=s(_ve);_xr=r(N7t,"Examples:"),N7t.forEach(t),uxr=i(xi),m(DL.$$.fragment,xi),xi.forEach(t),bxr=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(GL.$$.fragment,Ia),Fxr=i(Ia),uve=n(Ia,"P",{});var j7t=s(uve);vxr=r(j7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),j7t.forEach(t),Txr=i(Ia),qn=n(Ia,"P",{});var mC=s(qn);Mxr=r(mC,"The model class to instantiate is selected based on the "),bve=n(mC,"CODE",{});var D7t=s(bve);Exr=r(D7t,"model_type"),D7t.forEach(t),Cxr=r(mC,` property of the config object (either
passed as an argument or loaded from `),Fve=n(mC,"CODE",{});var G7t=s(Fve);wxr=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),Axr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vve=n(mC,"CODE",{});var O7t=s(vve);yxr=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),Lxr=r(mC,":"),mC.forEach(t),xxr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);rE=n(Vo,"LI",{});var xSe=s(rE);Tve=n(xSe,"STRONG",{});var V7t=s(Tve);kxr=r(V7t,"albert"),V7t.forEach(t),Sxr=r(xSe," \u2014 "),yH=n(xSe,"A",{href:!0});var X7t=s(yH);Rxr=r(X7t,"FlaxAlbertForMultipleChoice"),X7t.forEach(t),Bxr=r(xSe," (ALBERT model)"),xSe.forEach(t),Pxr=i(Vo),tE=n(Vo,"LI",{});var kSe=s(tE);Mve=n(kSe,"STRONG",{});var z7t=s(Mve);$xr=r(z7t,"bert"),z7t.forEach(t),Ixr=r(kSe," \u2014 "),LH=n(kSe,"A",{href:!0});var Q7t=s(LH);qxr=r(Q7t,"FlaxBertForMultipleChoice"),Q7t.forEach(t),Nxr=r(kSe," (BERT model)"),kSe.forEach(t),jxr=i(Vo),aE=n(Vo,"LI",{});var SSe=s(aE);Eve=n(SSe,"STRONG",{});var W7t=s(Eve);Dxr=r(W7t,"big_bird"),W7t.forEach(t),Gxr=r(SSe," \u2014 "),xH=n(SSe,"A",{href:!0});var H7t=s(xH);Oxr=r(H7t,"FlaxBigBirdForMultipleChoice"),H7t.forEach(t),Vxr=r(SSe," (BigBird model)"),SSe.forEach(t),Xxr=i(Vo),nE=n(Vo,"LI",{});var RSe=s(nE);Cve=n(RSe,"STRONG",{});var U7t=s(Cve);zxr=r(U7t,"distilbert"),U7t.forEach(t),Qxr=r(RSe," \u2014 "),kH=n(RSe,"A",{href:!0});var J7t=s(kH);Wxr=r(J7t,"FlaxDistilBertForMultipleChoice"),J7t.forEach(t),Hxr=r(RSe," (DistilBERT model)"),RSe.forEach(t),Uxr=i(Vo),sE=n(Vo,"LI",{});var BSe=s(sE);wve=n(BSe,"STRONG",{});var Y7t=s(wve);Jxr=r(Y7t,"electra"),Y7t.forEach(t),Yxr=r(BSe," \u2014 "),SH=n(BSe,"A",{href:!0});var K7t=s(SH);Kxr=r(K7t,"FlaxElectraForMultipleChoice"),K7t.forEach(t),Zxr=r(BSe," (ELECTRA model)"),BSe.forEach(t),ekr=i(Vo),lE=n(Vo,"LI",{});var PSe=s(lE);Ave=n(PSe,"STRONG",{});var Z7t=s(Ave);okr=r(Z7t,"roberta"),Z7t.forEach(t),rkr=r(PSe," \u2014 "),RH=n(PSe,"A",{href:!0});var eMt=s(RH);tkr=r(eMt,"FlaxRobertaForMultipleChoice"),eMt.forEach(t),akr=r(PSe," (RoBERTa model)"),PSe.forEach(t),nkr=i(Vo),iE=n(Vo,"LI",{});var $Se=s(iE);yve=n($Se,"STRONG",{});var oMt=s(yve);skr=r(oMt,"roformer"),oMt.forEach(t),lkr=r($Se," \u2014 "),BH=n($Se,"A",{href:!0});var rMt=s(BH);ikr=r(rMt,"FlaxRoFormerForMultipleChoice"),rMt.forEach(t),dkr=r($Se," (RoFormer model)"),$Se.forEach(t),ckr=i(Vo),dE=n(Vo,"LI",{});var ISe=s(dE);Lve=n(ISe,"STRONG",{});var tMt=s(Lve);fkr=r(tMt,"xlm-roberta"),tMt.forEach(t),mkr=r(ISe," \u2014 "),PH=n(ISe,"A",{href:!0});var aMt=s(PH);gkr=r(aMt,"FlaxXLMRobertaForMultipleChoice"),aMt.forEach(t),hkr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),Vo.forEach(t),pkr=i(Ia),xve=n(Ia,"P",{});var nMt=s(xve);_kr=r(nMt,"Examples:"),nMt.forEach(t),ukr=i(Ia),m(OL.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),IBe=i(c),Af=n(c,"H2",{class:!0});var W$e=s(Af);cE=n(W$e,"A",{id:!0,class:!0,href:!0});var sMt=s(cE);kve=n(sMt,"SPAN",{});var lMt=s(kve);m(VL.$$.fragment,lMt),lMt.forEach(t),sMt.forEach(t),bkr=i(W$e),Sve=n(W$e,"SPAN",{});var iMt=s(Sve);Fkr=r(iMt,"FlaxAutoModelForNextSentencePrediction"),iMt.forEach(t),W$e.forEach(t),qBe=i(c),Gr=n(c,"DIV",{class:!0});var ki=s(Gr);m(XL.$$.fragment,ki),vkr=i(ki),yf=n(ki,"P",{});var $J=s(yf);Tkr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$H=n($J,"A",{href:!0});var dMt=s($H);Mkr=r(dMt,"from_pretrained()"),dMt.forEach(t),Ekr=r($J," class method or the "),IH=n($J,"A",{href:!0});var cMt=s(IH);Ckr=r(cMt,"from_config()"),cMt.forEach(t),wkr=r($J,` class
method.`),$J.forEach(t),Akr=i(ki),zL=n(ki,"P",{});var H$e=s(zL);ykr=r(H$e,"This class cannot be instantiated directly using "),Rve=n(H$e,"CODE",{});var fMt=s(Rve);Lkr=r(fMt,"__init__()"),fMt.forEach(t),xkr=r(H$e," (throws an error)."),H$e.forEach(t),kkr=i(ki),$t=n(ki,"DIV",{class:!0});var Si=s($t);m(QL.$$.fragment,Si),Skr=i(Si),Bve=n(Si,"P",{});var mMt=s(Bve);Rkr=r(mMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mMt.forEach(t),Bkr=i(Si),Lf=n(Si,"P",{});var IJ=s(Lf);Pkr=r(IJ,`Note:
Loading a model from its configuration file does `),Pve=n(IJ,"STRONG",{});var gMt=s(Pve);$kr=r(gMt,"not"),gMt.forEach(t),Ikr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qH=n(IJ,"A",{href:!0});var hMt=s(qH);qkr=r(hMt,"from_pretrained()"),hMt.forEach(t),Nkr=r(IJ," to load the model weights."),IJ.forEach(t),jkr=i(Si),$ve=n(Si,"P",{});var pMt=s($ve);Dkr=r(pMt,"Examples:"),pMt.forEach(t),Gkr=i(Si),m(WL.$$.fragment,Si),Si.forEach(t),Okr=i(ki),Io=n(ki,"DIV",{class:!0});var qa=s(Io);m(HL.$$.fragment,qa),Vkr=i(qa),Ive=n(qa,"P",{});var _Mt=s(Ive);Xkr=r(_Mt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_Mt.forEach(t),zkr=i(qa),Nn=n(qa,"P",{});var gC=s(Nn);Qkr=r(gC,"The model class to instantiate is selected based on the "),qve=n(gC,"CODE",{});var uMt=s(qve);Wkr=r(uMt,"model_type"),uMt.forEach(t),Hkr=r(gC,` property of the config object (either
passed as an argument or loaded from `),Nve=n(gC,"CODE",{});var bMt=s(Nve);Ukr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),Jkr=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(gC,"CODE",{});var FMt=s(jve);Ykr=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),Kkr=r(gC,":"),gC.forEach(t),Zkr=i(qa),Dve=n(qa,"UL",{});var vMt=s(Dve);fE=n(vMt,"LI",{});var qSe=s(fE);Gve=n(qSe,"STRONG",{});var TMt=s(Gve);eSr=r(TMt,"bert"),TMt.forEach(t),oSr=r(qSe," \u2014 "),NH=n(qSe,"A",{href:!0});var MMt=s(NH);rSr=r(MMt,"FlaxBertForNextSentencePrediction"),MMt.forEach(t),tSr=r(qSe," (BERT model)"),qSe.forEach(t),vMt.forEach(t),aSr=i(qa),Ove=n(qa,"P",{});var EMt=s(Ove);nSr=r(EMt,"Examples:"),EMt.forEach(t),sSr=i(qa),m(UL.$$.fragment,qa),qa.forEach(t),ki.forEach(t),NBe=i(c),xf=n(c,"H2",{class:!0});var U$e=s(xf);mE=n(U$e,"A",{id:!0,class:!0,href:!0});var CMt=s(mE);Vve=n(CMt,"SPAN",{});var wMt=s(Vve);m(JL.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),lSr=i(U$e),Xve=n(U$e,"SPAN",{});var AMt=s(Xve);iSr=r(AMt,"FlaxAutoModelForImageClassification"),AMt.forEach(t),U$e.forEach(t),jBe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(YL.$$.fragment,Ri),dSr=i(Ri),kf=n(Ri,"P",{});var qJ=s(kf);cSr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),jH=n(qJ,"A",{href:!0});var yMt=s(jH);fSr=r(yMt,"from_pretrained()"),yMt.forEach(t),mSr=r(qJ," class method or the "),DH=n(qJ,"A",{href:!0});var LMt=s(DH);gSr=r(LMt,"from_config()"),LMt.forEach(t),hSr=r(qJ,` class
method.`),qJ.forEach(t),pSr=i(Ri),KL=n(Ri,"P",{});var J$e=s(KL);_Sr=r(J$e,"This class cannot be instantiated directly using "),zve=n(J$e,"CODE",{});var xMt=s(zve);uSr=r(xMt,"__init__()"),xMt.forEach(t),bSr=r(J$e," (throws an error)."),J$e.forEach(t),FSr=i(Ri),It=n(Ri,"DIV",{class:!0});var Bi=s(It);m(ZL.$$.fragment,Bi),vSr=i(Bi),Qve=n(Bi,"P",{});var kMt=s(Qve);TSr=r(kMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kMt.forEach(t),MSr=i(Bi),Sf=n(Bi,"P",{});var NJ=s(Sf);ESr=r(NJ,`Note:
Loading a model from its configuration file does `),Wve=n(NJ,"STRONG",{});var SMt=s(Wve);CSr=r(SMt,"not"),SMt.forEach(t),wSr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GH=n(NJ,"A",{href:!0});var RMt=s(GH);ASr=r(RMt,"from_pretrained()"),RMt.forEach(t),ySr=r(NJ," to load the model weights."),NJ.forEach(t),LSr=i(Bi),Hve=n(Bi,"P",{});var BMt=s(Hve);xSr=r(BMt,"Examples:"),BMt.forEach(t),kSr=i(Bi),m(e8.$$.fragment,Bi),Bi.forEach(t),SSr=i(Ri),qo=n(Ri,"DIV",{class:!0});var Na=s(qo);m(o8.$$.fragment,Na),RSr=i(Na),Uve=n(Na,"P",{});var PMt=s(Uve);BSr=r(PMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PMt.forEach(t),PSr=i(Na),jn=n(Na,"P",{});var hC=s(jn);$Sr=r(hC,"The model class to instantiate is selected based on the "),Jve=n(hC,"CODE",{});var $Mt=s(Jve);ISr=r($Mt,"model_type"),$Mt.forEach(t),qSr=r(hC,` property of the config object (either
passed as an argument or loaded from `),Yve=n(hC,"CODE",{});var IMt=s(Yve);NSr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),jSr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(hC,"CODE",{});var qMt=s(Kve);DSr=r(qMt,"pretrained_model_name_or_path"),qMt.forEach(t),GSr=r(hC,":"),hC.forEach(t),OSr=i(Na),r8=n(Na,"UL",{});var Y$e=s(r8);gE=n(Y$e,"LI",{});var NSe=s(gE);Zve=n(NSe,"STRONG",{});var NMt=s(Zve);VSr=r(NMt,"beit"),NMt.forEach(t),XSr=r(NSe," \u2014 "),OH=n(NSe,"A",{href:!0});var jMt=s(OH);zSr=r(jMt,"FlaxBeitForImageClassification"),jMt.forEach(t),QSr=r(NSe," (BEiT model)"),NSe.forEach(t),WSr=i(Y$e),hE=n(Y$e,"LI",{});var jSe=s(hE);e6e=n(jSe,"STRONG",{});var DMt=s(e6e);HSr=r(DMt,"vit"),DMt.forEach(t),USr=r(jSe," \u2014 "),VH=n(jSe,"A",{href:!0});var GMt=s(VH);JSr=r(GMt,"FlaxViTForImageClassification"),GMt.forEach(t),YSr=r(jSe," (ViT model)"),jSe.forEach(t),Y$e.forEach(t),KSr=i(Na),o6e=n(Na,"P",{});var OMt=s(o6e);ZSr=r(OMt,"Examples:"),OMt.forEach(t),eRr=i(Na),m(t8.$$.fragment,Na),Na.forEach(t),Ri.forEach(t),DBe=i(c),Rf=n(c,"H2",{class:!0});var K$e=s(Rf);pE=n(K$e,"A",{id:!0,class:!0,href:!0});var VMt=s(pE);r6e=n(VMt,"SPAN",{});var XMt=s(r6e);m(a8.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),oRr=i(K$e),t6e=n(K$e,"SPAN",{});var zMt=s(t6e);rRr=r(zMt,"FlaxAutoModelForVision2Seq"),zMt.forEach(t),K$e.forEach(t),GBe=i(c),Vr=n(c,"DIV",{class:!0});var Pi=s(Vr);m(n8.$$.fragment,Pi),tRr=i(Pi),Bf=n(Pi,"P",{});var jJ=s(Bf);aRr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),XH=n(jJ,"A",{href:!0});var QMt=s(XH);nRr=r(QMt,"from_pretrained()"),QMt.forEach(t),sRr=r(jJ," class method or the "),zH=n(jJ,"A",{href:!0});var WMt=s(zH);lRr=r(WMt,"from_config()"),WMt.forEach(t),iRr=r(jJ,` class
method.`),jJ.forEach(t),dRr=i(Pi),s8=n(Pi,"P",{});var Z$e=s(s8);cRr=r(Z$e,"This class cannot be instantiated directly using "),a6e=n(Z$e,"CODE",{});var HMt=s(a6e);fRr=r(HMt,"__init__()"),HMt.forEach(t),mRr=r(Z$e," (throws an error)."),Z$e.forEach(t),gRr=i(Pi),qt=n(Pi,"DIV",{class:!0});var $i=s(qt);m(l8.$$.fragment,$i),hRr=i($i),n6e=n($i,"P",{});var UMt=s(n6e);pRr=r(UMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),UMt.forEach(t),_Rr=i($i),Pf=n($i,"P",{});var DJ=s(Pf);uRr=r(DJ,`Note:
Loading a model from its configuration file does `),s6e=n(DJ,"STRONG",{});var JMt=s(s6e);bRr=r(JMt,"not"),JMt.forEach(t),FRr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(DJ,"A",{href:!0});var YMt=s(QH);vRr=r(YMt,"from_pretrained()"),YMt.forEach(t),TRr=r(DJ," to load the model weights."),DJ.forEach(t),MRr=i($i),l6e=n($i,"P",{});var KMt=s(l6e);ERr=r(KMt,"Examples:"),KMt.forEach(t),CRr=i($i),m(i8.$$.fragment,$i),$i.forEach(t),wRr=i(Pi),No=n(Pi,"DIV",{class:!0});var ja=s(No);m(d8.$$.fragment,ja),ARr=i(ja),i6e=n(ja,"P",{});var ZMt=s(i6e);yRr=r(ZMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZMt.forEach(t),LRr=i(ja),Dn=n(ja,"P",{});var pC=s(Dn);xRr=r(pC,"The model class to instantiate is selected based on the "),d6e=n(pC,"CODE",{});var eEt=s(d6e);kRr=r(eEt,"model_type"),eEt.forEach(t),SRr=r(pC,` property of the config object (either
passed as an argument or loaded from `),c6e=n(pC,"CODE",{});var oEt=s(c6e);RRr=r(oEt,"pretrained_model_name_or_path"),oEt.forEach(t),BRr=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f6e=n(pC,"CODE",{});var rEt=s(f6e);PRr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),$Rr=r(pC,":"),pC.forEach(t),IRr=i(ja),m6e=n(ja,"UL",{});var tEt=s(m6e);_E=n(tEt,"LI",{});var DSe=s(_E);g6e=n(DSe,"STRONG",{});var aEt=s(g6e);qRr=r(aEt,"vision-encoder-decoder"),aEt.forEach(t),NRr=r(DSe," \u2014 "),WH=n(DSe,"A",{href:!0});var nEt=s(WH);jRr=r(nEt,"FlaxVisionEncoderDecoderModel"),nEt.forEach(t),DRr=r(DSe," (Vision Encoder decoder model)"),DSe.forEach(t),tEt.forEach(t),GRr=i(ja),h6e=n(ja,"P",{});var sEt=s(h6e);ORr=r(sEt,"Examples:"),sEt.forEach(t),VRr=i(ja),m(c8.$$.fragment,ja),ja.forEach(t),Pi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(_Et)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer"),d(Oi,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(Xi,"class","relative group"),d(h9,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(p9,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertConfig"),d(_9,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartConfig"),d(u9,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitConfig"),d(b9,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertConfig"),d(F9,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(v9,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdConfig"),d(T9,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(M9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(E9,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(C9,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertConfig"),d(w9,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineConfig"),d(A9,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPConfig"),d(y9,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertConfig"),d(L9,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextConfig"),d(x9,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLConfig"),d(k9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(S9,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(R9,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaConfig"),d(B9,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(P9,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d($9,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTConfig"),d(I9,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrConfig"),d(q9,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertConfig"),d(N9,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRConfig"),d(j9,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTConfig"),d(D9,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraConfig"),d(G9,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(O9,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertConfig"),d(V9,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetConfig"),d(X9,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTConfig"),d(z9,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelConfig"),d(Q9,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNConfig"),d(W9,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Config"),d(H9,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(U9,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJConfig"),d(J9,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertConfig"),d(Y9,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertConfig"),d(K9,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Z9,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ex,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ox,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDConfig"),d(rx,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerConfig"),d(tx,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeConfig"),d(ax,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertConfig"),d(nx,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Config"),d(sx,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianConfig"),d(lx,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ix,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartConfig"),d(dx,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(cx,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(fx,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetConfig"),d(mx,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Config"),d(gx,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(hx,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(px,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusConfig"),d(_x,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverConfig"),d(ux,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartConfig"),d(bx,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Fx,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(vx,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Tx,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagConfig"),d(Mx,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmConfig"),d(Ex,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerConfig"),d(Cx,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertConfig"),d(wx,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetConfig"),d(Ax,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertConfig"),d(yx,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaConfig"),d(Lx,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerConfig"),d(xx,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerConfig"),d(kx,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWConfig"),d(Sx,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDConfig"),d(Rx,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Bx,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Px,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d($x,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterConfig"),d(Ix,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(qx,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinConfig"),d(Nx,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Config"),d(jx,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasConfig"),d(Dx,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Gx,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRConfig"),d(Ox,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Vx,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Xx,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanConfig"),d(zx,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltConfig"),d(Qx,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Wx,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Hx,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Ux,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTConfig"),d(Jx,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Yx,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Kx,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMConfig"),d(Zx,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMConfig"),d(ek,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMConfig"),d(ok,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(rk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(tk,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ak,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetConfig"),d(nk,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d($g,"class","docstring"),d(Qo,"class","docstring"),d(Ig,"id","transformers.AutoTokenizer"),d(Ig,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ig,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(sk,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(lk,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizer"),d(ik,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(dk,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizer"),d(ck,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartTokenizerFast"),d(fk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizer"),d(mk,"href","/docs/transformers/pr_16473/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(gk,"href","/docs/transformers/pr_16473/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(hk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(pk,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(_k,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(uk,"href","/docs/transformers/pr_16473/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(bk,"href","/docs/transformers/pr_16473/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Fk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(vk,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Mk,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ck,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(wk,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ak,"href","/docs/transformers/pr_16473/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(yk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Lk,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(xk,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineTokenizer"),d(kk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizer"),d(Sk,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Bk,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16473/en/model_doc/cpm#transformers.CpmTokenizer"),d($k,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Ik,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizer"),d(qk,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(jk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Dk,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Ok,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizer"),d(Xk,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(zk,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Qk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizer"),d(Wk,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Uk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Jk,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Kk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Zk,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(eS,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(oS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizer"),d(rS,"href","/docs/transformers/pr_16473/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(tS,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(aS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(nS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(sS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(lS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(iS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(dS,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(fS,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(mS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizer"),d(gS,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDTokenizerFast"),d(hS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizer"),d(pS,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(_S,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeTokenizer"),d(uS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(bS,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(FS,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(vS,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianTokenizer"),d(TS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizer"),d(MS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ES,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(CS,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(wS,"href","/docs/transformers/pr_16473/en/model_doc/mluke#transformers.MLukeTokenizer"),d(AS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(yS,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(LS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(xS,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(kS,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d(SS,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(RS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(BS,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(PS,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizer"),d($S,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(IS,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(qS,"href","/docs/transformers/pr_16473/en/model_doc/phobert#transformers.PhobertTokenizer"),d(NS,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartTokenizer"),d(jS,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(DS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizer"),d(GS,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertTokenizerFast"),d(OS,"href","/docs/transformers/pr_16473/en/model_doc/rag#transformers.RagTokenizer"),d(VS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizer"),d(XS,"href","/docs/transformers/pr_16473/en/model_doc/realm#transformers.RealmTokenizerFast"),d(zS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizer"),d(QS,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(WS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizer"),d(HS,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(JS,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(YS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizer"),d(KS,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(eR,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(oR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(rR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(tR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizer"),d(aR,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(nR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(sR,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(lR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Tokenizer"),d(iR,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5TokenizerFast"),d(dR,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasTokenizer"),d(cR,"href","/docs/transformers/pr_16473/en/model_doc/tapex#transformers.TapexTokenizer"),d(fR,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(mR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(gR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(hR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizer"),d(pR,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(_R,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMTokenizer"),d(uR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(bR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(FR,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(vR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(TR,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(gh,"class","docstring"),d(Wo,"class","docstring"),d(hh,"id","transformers.AutoFeatureExtractor"),d(hh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hh,"href","#transformers.AutoFeatureExtractor"),d(Wi,"class","relative group"),d(MR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(ER,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(LR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(kR,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d($R,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Ph,"class","docstring"),d(Ho,"class","docstring"),d($h,"id","transformers.AutoProcessor"),d($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($h,"href","#transformers.AutoProcessor"),d(Hi,"class","relative group"),d(GR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(OR,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPProcessor"),d(VR,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(XR,"href","/docs/transformers/pr_16473/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(zR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(QR,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(WR,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRProcessor"),d(HR,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(UR,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(zh,"class","docstring"),d(Uo,"class","docstring"),d(Qh,"id","transformers.AutoModel"),d(Qh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qh,"href","#transformers.AutoModel"),d(Ji,"class","relative group"),d(JR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KR,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(ZR,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertModel"),d(eB,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartModel"),d(oB,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitModel"),d(rB,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertModel"),d(tB,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(aB,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdModel"),d(nB,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(sB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(lB,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(iB,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertModel"),d(dB,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineModel"),d(cB,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.CLIPModel"),d(fB,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertModel"),d(mB,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextModel"),d(gB,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLModel"),d(hB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(pB,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(_B,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaModel"),d(uB,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(bB,"href","/docs/transformers/pr_16473/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(FB,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTModel"),d(vB,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrModel"),d(TB,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertModel"),d(MB,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(EB,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTModel"),d(CB,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraModel"),d(wB,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertModel"),d(AB,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetModel"),d(yB,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTModel"),d(LB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelModel"),d(xB,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelBaseModel"),d(kB,"href","/docs/transformers/pr_16473/en/model_doc/glpn#transformers.GLPNModel"),d(SB,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2Model"),d(RB,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(BB,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJModel"),d(PB,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertModel"),d($B,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertModel"),d(IB,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(qB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(NB,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(jB,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDModel"),d(DB,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerModel"),d(GB,"href","/docs/transformers/pr_16473/en/model_doc/luke#transformers.LukeModel"),d(OB,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertModel"),d(VB,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100Model"),d(XB,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianModel"),d(zB,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerModel"),d(QB,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartModel"),d(WB,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(HB,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertModel"),d(UB,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetModel"),d(JB,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5Model"),d(YB,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerModel"),d(KB,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(ZB,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusModel"),d(eP,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverModel"),d(oP,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartModel"),d(rP,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerModel"),d(tP,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(aP,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertModel"),d(nP,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModel"),d(sP,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertModel"),d(lP,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetModel"),d(iP,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(dP,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaModel"),d(cP,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerModel"),d(fP,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerModel"),d(mP,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWModel"),d(gP,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDModel"),d(hP,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(pP,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterModel"),d(_P,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(uP,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinModel"),d(bP,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5Model"),d(FP,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasModel"),d(vP,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(TP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechModel"),d(MP,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(EP,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanModel"),d(CP,"href","/docs/transformers/pr_16473/en/model_doc/vilt#transformers.ViltModel"),d(wP,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(AP,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertModel"),d(yP,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTModel"),d(LP,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(xP,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(kP,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMModel"),d(SP,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMModel"),d(RP,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMModel"),d(BP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(PP,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d($P,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(IP,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetModel"),d(qP,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(S_,"id","transformers.AutoModelForPreTraining"),d(S_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S_,"href","#transformers.AutoModelForPreTraining"),d(Zi,"class","relative group"),d(NP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DP,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(GP,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForPreTraining"),d(OP,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(VP,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForPreTraining"),d(XP,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(zP,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(QP,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(WP,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(HP,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(UP,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(JP,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(YP,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForPreTraining"),d(KP,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(ZP,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForPreTraining"),d(e$,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(o$,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(r$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(t$,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(a$,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(n$,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(s$,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(l$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(i$,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(d$,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(c$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(f$,"href","/docs/transformers/pr_16473/en/model_doc/retribert#transformers.RetriBertModel"),d(m$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(g$,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(h$,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(p$,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(_$,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(u$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(b$,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(F$,"href","/docs/transformers/pr_16473/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(v$,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(T$,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(M$,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(E$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(C$,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(w$,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(bu,"id","transformers.AutoModelForCausalLM"),d(bu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bu,"href","#transformers.AutoModelForCausalLM"),d(rd,"class","relative group"),d(A$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(y$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(L$,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(x$,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForCausalLM"),d(k$,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertLMHeadModel"),d(S$,"href","/docs/transformers/pr_16473/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(R$,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(B$,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(P$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d($$,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(I$,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(q$,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(N$,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(j$,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForCausalLM"),d(D$,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(G$,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(O$,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(V$,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianForCausalLM"),d(X$,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForCausalLM"),d(z$,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(Q$,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(W$,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(H$,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(U$,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(J$,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(K$,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(Z$,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(eI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(oI,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(rI,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(tI,"href","/docs/transformers/pr_16473/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(aI,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(nI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(lI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(iI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(dI,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(o1,"id","transformers.AutoModelForMaskedLM"),d(o1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o1,"href","#transformers.AutoModelForMaskedLM"),d(nd,"class","relative group"),d(cI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(gI,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(hI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(pI,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMaskedLM"),d(_I,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(uI,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(vI,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(TI,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(MI,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(EI,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(CI,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(wI,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(AI,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(yI,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(LI,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(xI,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(kI,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(PI,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d($I,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(II,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(NI,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(DI,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(GI,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(VI,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(XI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(zI,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(QI,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(N1,"id","transformers.AutoModelForSeq2SeqLM"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForSeq2SeqLM"),d(id,"class","relative group"),d(WI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UI,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(JI,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(eq,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(oq,"href","/docs/transformers/pr_16473/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16473/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(aq,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.MarianMTModel"),d(nq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16473/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16473/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(r4,"id","transformers.AutoModelForSequenceClassification"),d(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r4,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(mq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hq,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(pq,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d($q,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16473/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(J4,"id","transformers.AutoModelForMultipleChoice"),d(J4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J4,"href","#transformers.AutoModelForMultipleChoice"),d(hd,"class","relative group"),d(lN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(cN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d($N,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Ab,"id","transformers.AutoModelForNextSentencePrediction"),d(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ab,"href","#transformers.AutoModelForNextSentencePrediction"),d(ud,"class","relative group"),d(NN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(GN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(ON,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(XN,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(zN,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Bb,"id","transformers.AutoModelForTokenClassification"),d(Bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bb,"href","#transformers.AutoModelForTokenClassification"),d(vd,"class","relative group"),d(QN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HN,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(UN,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(JN,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForTokenClassification"),d(YN,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(KN,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForTokenClassification"),d(ej,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(oj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(rj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(tj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(aj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(nj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(sj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(lj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(ij,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(dj,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(cj,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(mj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(gj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(hj,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(_j,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(uj,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(bj,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(vj,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(wj,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(yj,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(h3,"id","transformers.AutoModelForQuestionAnswering"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Lj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kj,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(Sj,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16473/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16473/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(zj,"href","/docs/transformers/pr_16473/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16473/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16473/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16473/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16473/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16473/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16473/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16473/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16473/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(mD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(pD,"href","/docs/transformers/pr_16473/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(o2,"id","transformers.AutoModelForTableQuestionAnswering"),d(o2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o2,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(_D,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(FD,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(a2,"id","transformers.AutoModelForImageClassification"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(vD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(ED,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForImageClassification"),d(CD,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassification"),d(AD,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(yD,"href","/docs/transformers/pr_16473/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(LD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kD,"href","/docs/transformers/pr_16473/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(SD,"href","/docs/transformers/pr_16473/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(RD,"href","/docs/transformers/pr_16473/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(BD,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(PD,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForImageClassification"),d($D,"href","/docs/transformers/pr_16473/en/model_doc/van#transformers.VanForImageClassification"),d(ID,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(p2,"id","transformers.AutoModelForVision2Seq"),d(p2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p2,"href","#transformers.AutoModelForVision2Seq"),d(Rd,"class","relative group"),d(qD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ND,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(DD,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(b2,"id","transformers.AutoModelForAudioClassification"),d(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b2,"href","#transformers.AutoModelForAudioClassification"),d($d,"class","relative group"),d(GD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(XD,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(YD,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(L2,"id","transformers.AutoModelForAudioFrameClassification"),d(L2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L2,"href","#transformers.AutoModelForAudioFrameClassification"),d(Nd,"class","relative group"),d(KD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZD,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(oG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(rG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(tG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(aG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(P2,"id","transformers.AutoModelForCTC"),d(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P2,"href","#transformers.AutoModelForCTC"),d(Gd,"class","relative group"),d(nG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(iG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(dG,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.HubertForCTC"),d(cG,"href","/docs/transformers/pr_16473/en/model_doc/sew#transformers.SEWForCTC"),d(fG,"href","/docs/transformers/pr_16473/en/model_doc/sew-d#transformers.SEWDForCTC"),d(mG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(gG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(hG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(pG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(X2,"id","transformers.AutoModelForSpeechSeq2Seq"),d(X2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X2,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Xd,"class","relative group"),d(_G,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(FG,"href","/docs/transformers/pr_16473/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(vG,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(H2,"id","transformers.AutoModelForAudioXVector"),d(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H2,"href","#transformers.AutoModelForAudioXVector"),d(Wd,"class","relative group"),d(TG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(CG,"href","/docs/transformers/pr_16473/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(wG,"href","/docs/transformers/pr_16473/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(AG,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(yG,"href","/docs/transformers/pr_16473/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(eF,"id","transformers.AutoModelForMaskedImageModeling"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Jd,"class","relative group"),d(LG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(SG,"href","/docs/transformers/pr_16473/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(RG,"href","/docs/transformers/pr_16473/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(BG,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(nF,"id","transformers.AutoModelForObjectDetection"),d(nF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nF,"href","#transformers.AutoModelForObjectDetection"),d(ec,"class","relative group"),d(PG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(qG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(iF,"id","transformers.AutoModelForImageSegmentation"),d(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iF,"href","#transformers.AutoModelForImageSegmentation"),d(tc,"class","relative group"),d(NG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(GG,"href","/docs/transformers/pr_16473/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(fF,"id","transformers.AutoModelForSemanticSegmentation"),d(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fF,"href","#transformers.AutoModelForSemanticSegmentation"),d(sc,"class","relative group"),d(OG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(zG,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(QG,"href","/docs/transformers/pr_16473/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(WG,"href","/docs/transformers/pr_16473/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(_F,"id","transformers.AutoModelForInstanceSegmentation"),d(_F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_F,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(HG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(YG,"href","/docs/transformers/pr_16473/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(FF,"id","transformers.TFAutoModel"),d(FF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FF,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(oO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertModel"),d(rO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartModel"),d(tO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertModel"),d(aO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(nO,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(sO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertModel"),d(lO,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.TFCLIPModel"),d(iO,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertModel"),d(dO,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextModel"),d(cO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLModel"),d(fO,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaModel"),d(mO,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(gO,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(hO,"href","/docs/transformers/pr_16473/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(pO,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraModel"),d(_O,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(uO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelModel"),d(bO,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(FO,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2Model"),d(vO,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJModel"),d(TO,"href","/docs/transformers/pr_16473/en/model_doc/hubert#transformers.TFHubertModel"),d(MO,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(EO,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDModel"),d(CO,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerModel"),d(wO,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertModel"),d(AO,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianModel"),d(yO,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartModel"),d(LO,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(xO,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetModel"),d(kO,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5Model"),d(SO,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(RO,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusModel"),d(BO,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertModel"),d(PO,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaModel"),d($O,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerModel"),d(IO,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(qO,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5Model"),d(NO,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasModel"),d(jO,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(DO,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTModel"),d(GO,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(OO,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(VO,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMModel"),d(XO,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(zO,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(dv,"id","transformers.TFAutoModelForPreTraining"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(QO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HO,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(UO,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(JO,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(YO,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForPreTraining"),d(KO,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(ZO,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(eV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(oV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(rV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(tV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(aV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(nV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(sV,"href","/docs/transformers/pr_16473/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(lV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(iV,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(dV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(cV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(fV,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(mV,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(gV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(hV,"href","/docs/transformers/pr_16473/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(pV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(_V,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(uV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(Bv,"id","transformers.TFAutoModelForCausalLM"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(bV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(TV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(MV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(EV,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(CV,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(wV,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(AV,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(yV,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(LV,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(xV,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(kV,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(SV,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(RV,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(Qv,"id","transformers.TFAutoModelForImageClassification"),d(Qv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qv,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(BV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($V,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d(IV,"href","/docs/transformers/pr_16473/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(qV,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(Uv,"id","transformers.TFAutoModelForMaskedLM"),d(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uv,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(NV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DV,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(GV,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(VV,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(XV,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(zV,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(QV,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(WV,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(HV,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(UV,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(JV,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(YV,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(KV,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(eX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(oX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(rX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(tX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(aX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(nX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(sX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(_6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(lX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(cX,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(gX,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(hX,"href","/docs/transformers/pr_16473/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(pX,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.TFMarianMTModel"),d(_X,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(FX,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(y6,"id","transformers.TFAutoModelForSequenceClassification"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(vX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(EX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(wX,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16473/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d($X,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16473/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16473/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(eT,"id","transformers.TFAutoModelForMultipleChoice"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(UX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YX,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(KX,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(ZX,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(ez,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(az,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(hz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(bT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(pz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_z,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(bz,"href","/docs/transformers/pr_16473/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(vT,"id","transformers.TFAutoModelForTokenClassification"),d(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Fz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Tz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Mz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Az,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(yz,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(xz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(kz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16473/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d($z,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(qz,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(jz,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Gz,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(GT,"id","transformers.TFAutoModelForQuestionAnswering"),d(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(Oz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xz,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(zz,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(Qz,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_16473/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_16473/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16473/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16473/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Zz,"href","/docs/transformers/pr_16473/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(eQ,"href","/docs/transformers/pr_16473/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16473/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16473/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16473/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16473/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(iQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(dQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(cQ,"href","/docs/transformers/pr_16473/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(i7,"id","transformers.TFAutoModelForVision2Seq"),d(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i7,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(fQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(hQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(c7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(pQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_Q,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(bQ,"href","/docs/transformers/pr_16473/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(m7,"id","transformers.FlaxAutoModel"),d(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m7,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(FQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(MQ,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertModel"),d(EQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartModel"),d(CQ,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitModel"),d(wQ,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertModel"),d(AQ,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(yQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(LQ,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(xQ,"href","/docs/transformers/pr_16473/en/model_doc/clip#transformers.FlaxCLIPModel"),d(kQ,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(SQ,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraModel"),d(RQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(BQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(PQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJModel"),d($Q,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianModel"),d(IQ,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartModel"),d(qQ,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5Model"),d(NQ,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(jQ,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(DQ,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(GQ,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5Model"),d(OQ,"href","/docs/transformers/pr_16473/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(VQ,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTModel"),d(XQ,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(zQ,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(QQ,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(N7,"id","transformers.FlaxAutoModelForCausalLM"),d(N7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N7,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(WQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UQ,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(JQ,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(YQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(KQ,"href","/docs/transformers/pr_16473/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(ZQ,"href","/docs/transformers/pr_16473/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(eW,"href","/docs/transformers/pr_16473/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(X7,"id","transformers.FlaxAutoModelForPreTraining"),d(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X7,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(oW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(aW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(nW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(sW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(lW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(iW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(dW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(cW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(fW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(mW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(gW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(hW,"href","/docs/transformers/pr_16473/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(pW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(tM,"id","transformers.FlaxAutoModelForMaskedLM"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(_W,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(FW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(vW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(TW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(MW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(EW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(CW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(wW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(AW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(yW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(LW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(hM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(hM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(RW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_16473/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d($W,"href","/docs/transformers/pr_16473/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(IW,"href","/docs/transformers/pr_16473/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(qW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16473/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16473/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16473/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(CM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(GW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VW,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(XW,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(zW,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(QW,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(HW,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(JW,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(KW,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(ZW,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d($M,"id","transformers.FlaxAutoModelForQuestionAnswering"),d($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($M,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(eH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(tH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(aH,"href","/docs/transformers/pr_16473/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_16473/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(mH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(QM,"id","transformers.FlaxAutoModelForTokenClassification"),d(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(QM,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vf,"class","relative group"),d(gH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(_H,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(uH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(bH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(FH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(vH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(TH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(MH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(EH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(oE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(CH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(yH,"href","/docs/transformers/pr_16473/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(LH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(xH,"href","/docs/transformers/pr_16473/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(kH,"href","/docs/transformers/pr_16473/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(SH,"href","/docs/transformers/pr_16473/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(RH,"href","/docs/transformers/pr_16473/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(BH,"href","/docs/transformers/pr_16473/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(PH,"href","/docs/transformers/pr_16473/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(cE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d($H,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(NH,"href","/docs/transformers/pr_16473/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(mE,"id","transformers.FlaxAutoModelForImageClassification"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(jH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(OH,"href","/docs/transformers/pr_16473/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(VH,"href","/docs/transformers/pr_16473/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(pE,"id","transformers.FlaxAutoModelForVision2Seq"),d(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(XH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QH,"href","/docs/transformers/pr_16473/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(WH,"href","/docs/transformers/pr_16473/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,Ii),b(c,qf,u),b(c,fa,u),e(fa,qi),e(fa,Ni),e(Ni,_C),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,ji),e(co,Gn),e(Gn,uC),e(co,On),e(co,Vn),e(Vn,bC),e(co,Di),e(co,Xn),e(Xn,FC),e(co,Gi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,i9),e(_e,Oi),e(Oi,d9),e(_e,c9),b(c,zo,u),b(c,Ga,u),e(Ga,f9),e(Ga,Df),e(Df,m9),e(Ga,eIe),b(c,GSe,u),b(c,Vi,u),e(Vi,Gf),e(Gf,GJ),g(vC,GJ,null),e(Vi,oIe),e(Vi,OJ),e(OJ,rIe),b(c,OSe,u),b(c,zn,u),e(zn,tIe),e(zn,VJ),e(VJ,aIe),e(zn,nIe),e(zn,XJ),e(XJ,sIe),e(zn,lIe),b(c,VSe,u),g(TC,c,u),b(c,XSe,u),b(c,g9,u),e(g9,iIe),b(c,zSe,u),g(Of,c,u),b(c,QSe,u),b(c,Xi,u),e(Xi,Vf),e(Vf,zJ),g(MC,zJ,null),e(Xi,dIe),e(Xi,QJ),e(QJ,cIe),b(c,WSe,u),b(c,Qo,u),g(EC,Qo,null),e(Qo,fIe),e(Qo,CC),e(CC,mIe),e(CC,h9),e(h9,gIe),e(CC,hIe),e(Qo,pIe),e(Qo,wC),e(wC,_Ie),e(wC,WJ),e(WJ,uIe),e(wC,bIe),e(Qo,FIe),e(Qo,mo),g(AC,mo,null),e(mo,vIe),e(mo,HJ),e(HJ,TIe),e(mo,MIe),e(mo,zi),e(zi,EIe),e(zi,UJ),e(UJ,CIe),e(zi,wIe),e(zi,JJ),e(JJ,AIe),e(zi,yIe),e(mo,LIe),e(mo,F),e(F,Xf),e(Xf,YJ),e(YJ,xIe),e(Xf,kIe),e(Xf,p9),e(p9,SIe),e(Xf,RIe),e(F,BIe),e(F,zf),e(zf,KJ),e(KJ,PIe),e(zf,$Ie),e(zf,_9),e(_9,IIe),e(zf,qIe),e(F,NIe),e(F,Qf),e(Qf,ZJ),e(ZJ,jIe),e(Qf,DIe),e(Qf,u9),e(u9,GIe),e(Qf,OIe),e(F,VIe),e(F,Wf),e(Wf,eY),e(eY,XIe),e(Wf,zIe),e(Wf,b9),e(b9,QIe),e(Wf,WIe),e(F,HIe),e(F,Hf),e(Hf,oY),e(oY,UIe),e(Hf,JIe),e(Hf,F9),e(F9,YIe),e(Hf,KIe),e(F,ZIe),e(F,Uf),e(Uf,rY),e(rY,eqe),e(Uf,oqe),e(Uf,v9),e(v9,rqe),e(Uf,tqe),e(F,aqe),e(F,Jf),e(Jf,tY),e(tY,nqe),e(Jf,sqe),e(Jf,T9),e(T9,lqe),e(Jf,iqe),e(F,dqe),e(F,Yf),e(Yf,aY),e(aY,cqe),e(Yf,fqe),e(Yf,M9),e(M9,mqe),e(Yf,gqe),e(F,hqe),e(F,Kf),e(Kf,nY),e(nY,pqe),e(Kf,_qe),e(Kf,E9),e(E9,uqe),e(Kf,bqe),e(F,Fqe),e(F,Zf),e(Zf,sY),e(sY,vqe),e(Zf,Tqe),e(Zf,C9),e(C9,Mqe),e(Zf,Eqe),e(F,Cqe),e(F,em),e(em,lY),e(lY,wqe),e(em,Aqe),e(em,w9),e(w9,yqe),e(em,Lqe),e(F,xqe),e(F,om),e(om,iY),e(iY,kqe),e(om,Sqe),e(om,A9),e(A9,Rqe),e(om,Bqe),e(F,Pqe),e(F,rm),e(rm,dY),e(dY,$qe),e(rm,Iqe),e(rm,y9),e(y9,qqe),e(rm,Nqe),e(F,jqe),e(F,tm),e(tm,cY),e(cY,Dqe),e(tm,Gqe),e(tm,L9),e(L9,Oqe),e(tm,Vqe),e(F,Xqe),e(F,am),e(am,fY),e(fY,zqe),e(am,Qqe),e(am,x9),e(x9,Wqe),e(am,Hqe),e(F,Uqe),e(F,nm),e(nm,mY),e(mY,Jqe),e(nm,Yqe),e(nm,k9),e(k9,Kqe),e(nm,Zqe),e(F,eNe),e(F,sm),e(sm,gY),e(gY,oNe),e(sm,rNe),e(sm,S9),e(S9,tNe),e(sm,aNe),e(F,nNe),e(F,lm),e(lm,hY),e(hY,sNe),e(lm,lNe),e(lm,R9),e(R9,iNe),e(lm,dNe),e(F,cNe),e(F,im),e(im,pY),e(pY,fNe),e(im,mNe),e(im,B9),e(B9,gNe),e(im,hNe),e(F,pNe),e(F,dm),e(dm,_Y),e(_Y,_Ne),e(dm,uNe),e(dm,P9),e(P9,bNe),e(dm,FNe),e(F,vNe),e(F,cm),e(cm,uY),e(uY,TNe),e(cm,MNe),e(cm,$9),e($9,ENe),e(cm,CNe),e(F,wNe),e(F,fm),e(fm,bY),e(bY,ANe),e(fm,yNe),e(fm,I9),e(I9,LNe),e(fm,xNe),e(F,kNe),e(F,mm),e(mm,FY),e(FY,SNe),e(mm,RNe),e(mm,q9),e(q9,BNe),e(mm,PNe),e(F,$Ne),e(F,gm),e(gm,vY),e(vY,INe),e(gm,qNe),e(gm,N9),e(N9,NNe),e(gm,jNe),e(F,DNe),e(F,hm),e(hm,TY),e(TY,GNe),e(hm,ONe),e(hm,j9),e(j9,VNe),e(hm,XNe),e(F,zNe),e(F,pm),e(pm,MY),e(MY,QNe),e(pm,WNe),e(pm,D9),e(D9,HNe),e(pm,UNe),e(F,JNe),e(F,_m),e(_m,EY),e(EY,YNe),e(_m,KNe),e(_m,G9),e(G9,ZNe),e(_m,eje),e(F,oje),e(F,um),e(um,CY),e(CY,rje),e(um,tje),e(um,O9),e(O9,aje),e(um,nje),e(F,sje),e(F,bm),e(bm,wY),e(wY,lje),e(bm,ije),e(bm,V9),e(V9,dje),e(bm,cje),e(F,fje),e(F,Fm),e(Fm,AY),e(AY,mje),e(Fm,gje),e(Fm,X9),e(X9,hje),e(Fm,pje),e(F,_je),e(F,vm),e(vm,yY),e(yY,uje),e(vm,bje),e(vm,z9),e(z9,Fje),e(vm,vje),e(F,Tje),e(F,Tm),e(Tm,LY),e(LY,Mje),e(Tm,Eje),e(Tm,Q9),e(Q9,Cje),e(Tm,wje),e(F,Aje),e(F,Mm),e(Mm,xY),e(xY,yje),e(Mm,Lje),e(Mm,W9),e(W9,xje),e(Mm,kje),e(F,Sje),e(F,Em),e(Em,kY),e(kY,Rje),e(Em,Bje),e(Em,H9),e(H9,Pje),e(Em,$je),e(F,Ije),e(F,Cm),e(Cm,SY),e(SY,qje),e(Cm,Nje),e(Cm,U9),e(U9,jje),e(Cm,Dje),e(F,Gje),e(F,wm),e(wm,RY),e(RY,Oje),e(wm,Vje),e(wm,J9),e(J9,Xje),e(wm,zje),e(F,Qje),e(F,Am),e(Am,BY),e(BY,Wje),e(Am,Hje),e(Am,Y9),e(Y9,Uje),e(Am,Jje),e(F,Yje),e(F,ym),e(ym,PY),e(PY,Kje),e(ym,Zje),e(ym,K9),e(K9,eDe),e(ym,oDe),e(F,rDe),e(F,Lm),e(Lm,$Y),e($Y,tDe),e(Lm,aDe),e(Lm,Z9),e(Z9,nDe),e(Lm,sDe),e(F,lDe),e(F,xm),e(xm,IY),e(IY,iDe),e(xm,dDe),e(xm,ex),e(ex,cDe),e(xm,fDe),e(F,mDe),e(F,km),e(km,qY),e(qY,gDe),e(km,hDe),e(km,ox),e(ox,pDe),e(km,_De),e(F,uDe),e(F,Sm),e(Sm,NY),e(NY,bDe),e(Sm,FDe),e(Sm,rx),e(rx,vDe),e(Sm,TDe),e(F,MDe),e(F,Rm),e(Rm,jY),e(jY,EDe),e(Rm,CDe),e(Rm,tx),e(tx,wDe),e(Rm,ADe),e(F,yDe),e(F,Bm),e(Bm,DY),e(DY,LDe),e(Bm,xDe),e(Bm,ax),e(ax,kDe),e(Bm,SDe),e(F,RDe),e(F,Pm),e(Pm,GY),e(GY,BDe),e(Pm,PDe),e(Pm,nx),e(nx,$De),e(Pm,IDe),e(F,qDe),e(F,$m),e($m,OY),e(OY,NDe),e($m,jDe),e($m,sx),e(sx,DDe),e($m,GDe),e(F,ODe),e(F,Im),e(Im,VY),e(VY,VDe),e(Im,XDe),e(Im,lx),e(lx,zDe),e(Im,QDe),e(F,WDe),e(F,qm),e(qm,XY),e(XY,HDe),e(qm,UDe),e(qm,ix),e(ix,JDe),e(qm,YDe),e(F,KDe),e(F,Nm),e(Nm,zY),e(zY,ZDe),e(Nm,eGe),e(Nm,dx),e(dx,oGe),e(Nm,rGe),e(F,tGe),e(F,jm),e(jm,QY),e(QY,aGe),e(jm,nGe),e(jm,cx),e(cx,sGe),e(jm,lGe),e(F,iGe),e(F,Dm),e(Dm,WY),e(WY,dGe),e(Dm,cGe),e(Dm,fx),e(fx,fGe),e(Dm,mGe),e(F,gGe),e(F,Gm),e(Gm,HY),e(HY,hGe),e(Gm,pGe),e(Gm,mx),e(mx,_Ge),e(Gm,uGe),e(F,bGe),e(F,Om),e(Om,UY),e(UY,FGe),e(Om,vGe),e(Om,gx),e(gx,TGe),e(Om,MGe),e(F,EGe),e(F,Vm),e(Vm,JY),e(JY,CGe),e(Vm,wGe),e(Vm,hx),e(hx,AGe),e(Vm,yGe),e(F,LGe),e(F,Xm),e(Xm,YY),e(YY,xGe),e(Xm,kGe),e(Xm,px),e(px,SGe),e(Xm,RGe),e(F,BGe),e(F,zm),e(zm,KY),e(KY,PGe),e(zm,$Ge),e(zm,_x),e(_x,IGe),e(zm,qGe),e(F,NGe),e(F,Qm),e(Qm,ZY),e(ZY,jGe),e(Qm,DGe),e(Qm,ux),e(ux,GGe),e(Qm,OGe),e(F,VGe),e(F,Wm),e(Wm,eK),e(eK,XGe),e(Wm,zGe),e(Wm,bx),e(bx,QGe),e(Wm,WGe),e(F,HGe),e(F,Hm),e(Hm,oK),e(oK,UGe),e(Hm,JGe),e(Hm,Fx),e(Fx,YGe),e(Hm,KGe),e(F,ZGe),e(F,Um),e(Um,rK),e(rK,eOe),e(Um,oOe),e(Um,vx),e(vx,rOe),e(Um,tOe),e(F,aOe),e(F,Jm),e(Jm,tK),e(tK,nOe),e(Jm,sOe),e(Jm,Tx),e(Tx,lOe),e(Jm,iOe),e(F,dOe),e(F,Ym),e(Ym,aK),e(aK,cOe),e(Ym,fOe),e(Ym,Mx),e(Mx,mOe),e(Ym,gOe),e(F,hOe),e(F,Km),e(Km,nK),e(nK,pOe),e(Km,_Oe),e(Km,Ex),e(Ex,uOe),e(Km,bOe),e(F,FOe),e(F,Zm),e(Zm,sK),e(sK,vOe),e(Zm,TOe),e(Zm,Cx),e(Cx,MOe),e(Zm,EOe),e(F,COe),e(F,eg),e(eg,lK),e(lK,wOe),e(eg,AOe),e(eg,wx),e(wx,yOe),e(eg,LOe),e(F,xOe),e(F,og),e(og,iK),e(iK,kOe),e(og,SOe),e(og,Ax),e(Ax,ROe),e(og,BOe),e(F,POe),e(F,rg),e(rg,dK),e(dK,$Oe),e(rg,IOe),e(rg,yx),e(yx,qOe),e(rg,NOe),e(F,jOe),e(F,tg),e(tg,cK),e(cK,DOe),e(tg,GOe),e(tg,Lx),e(Lx,OOe),e(tg,VOe),e(F,XOe),e(F,ag),e(ag,fK),e(fK,zOe),e(ag,QOe),e(ag,xx),e(xx,WOe),e(ag,HOe),e(F,UOe),e(F,ng),e(ng,mK),e(mK,JOe),e(ng,YOe),e(ng,kx),e(kx,KOe),e(ng,ZOe),e(F,eVe),e(F,sg),e(sg,gK),e(gK,oVe),e(sg,rVe),e(sg,Sx),e(Sx,tVe),e(sg,aVe),e(F,nVe),e(F,lg),e(lg,hK),e(hK,sVe),e(lg,lVe),e(lg,Rx),e(Rx,iVe),e(lg,dVe),e(F,cVe),e(F,ig),e(ig,pK),e(pK,fVe),e(ig,mVe),e(ig,Bx),e(Bx,gVe),e(ig,hVe),e(F,pVe),e(F,dg),e(dg,_K),e(_K,_Ve),e(dg,uVe),e(dg,Px),e(Px,bVe),e(dg,FVe),e(F,vVe),e(F,cg),e(cg,uK),e(uK,TVe),e(cg,MVe),e(cg,$x),e($x,EVe),e(cg,CVe),e(F,wVe),e(F,fg),e(fg,bK),e(bK,AVe),e(fg,yVe),e(fg,Ix),e(Ix,LVe),e(fg,xVe),e(F,kVe),e(F,mg),e(mg,FK),e(FK,SVe),e(mg,RVe),e(mg,qx),e(qx,BVe),e(mg,PVe),e(F,$Ve),e(F,gg),e(gg,vK),e(vK,IVe),e(gg,qVe),e(gg,Nx),e(Nx,NVe),e(gg,jVe),e(F,DVe),e(F,hg),e(hg,TK),e(TK,GVe),e(hg,OVe),e(hg,jx),e(jx,VVe),e(hg,XVe),e(F,zVe),e(F,pg),e(pg,MK),e(MK,QVe),e(pg,WVe),e(pg,Dx),e(Dx,HVe),e(pg,UVe),e(F,JVe),e(F,_g),e(_g,EK),e(EK,YVe),e(_g,KVe),e(_g,Gx),e(Gx,ZVe),e(_g,eXe),e(F,oXe),e(F,ug),e(ug,CK),e(CK,rXe),e(ug,tXe),e(ug,Ox),e(Ox,aXe),e(ug,nXe),e(F,sXe),e(F,bg),e(bg,wK),e(wK,lXe),e(bg,iXe),e(bg,Vx),e(Vx,dXe),e(bg,cXe),e(F,fXe),e(F,Fg),e(Fg,AK),e(AK,mXe),e(Fg,gXe),e(Fg,Xx),e(Xx,hXe),e(Fg,pXe),e(F,_Xe),e(F,vg),e(vg,yK),e(yK,uXe),e(vg,bXe),e(vg,zx),e(zx,FXe),e(vg,vXe),e(F,TXe),e(F,Tg),e(Tg,LK),e(LK,MXe),e(Tg,EXe),e(Tg,Qx),e(Qx,CXe),e(Tg,wXe),e(F,AXe),e(F,Mg),e(Mg,xK),e(xK,yXe),e(Mg,LXe),e(Mg,Wx),e(Wx,xXe),e(Mg,kXe),e(F,SXe),e(F,Eg),e(Eg,kK),e(kK,RXe),e(Eg,BXe),e(Eg,Hx),e(Hx,PXe),e(Eg,$Xe),e(F,IXe),e(F,Cg),e(Cg,SK),e(SK,qXe),e(Cg,NXe),e(Cg,Ux),e(Ux,jXe),e(Cg,DXe),e(F,GXe),e(F,wg),e(wg,RK),e(RK,OXe),e(wg,VXe),e(wg,Jx),e(Jx,XXe),e(wg,zXe),e(F,QXe),e(F,Ag),e(Ag,BK),e(BK,WXe),e(Ag,HXe),e(Ag,Yx),e(Yx,UXe),e(Ag,JXe),e(F,YXe),e(F,yg),e(yg,PK),e(PK,KXe),e(yg,ZXe),e(yg,Kx),e(Kx,eze),e(yg,oze),e(F,rze),e(F,Lg),e(Lg,$K),e($K,tze),e(Lg,aze),e(Lg,Zx),e(Zx,nze),e(Lg,sze),e(F,lze),e(F,xg),e(xg,IK),e(IK,ize),e(xg,dze),e(xg,ek),e(ek,cze),e(xg,fze),e(F,mze),e(F,kg),e(kg,qK),e(qK,gze),e(kg,hze),e(kg,ok),e(ok,pze),e(kg,_ze),e(F,uze),e(F,Sg),e(Sg,NK),e(NK,bze),e(Sg,Fze),e(Sg,rk),e(rk,vze),e(Sg,Tze),e(F,Mze),e(F,Rg),e(Rg,jK),e(jK,Eze),e(Rg,Cze),e(Rg,tk),e(tk,wze),e(Rg,Aze),e(F,yze),e(F,Bg),e(Bg,DK),e(DK,Lze),e(Bg,xze),e(Bg,ak),e(ak,kze),e(Bg,Sze),e(F,Rze),e(F,Pg),e(Pg,GK),e(GK,Bze),e(Pg,Pze),e(Pg,nk),e(nk,$ze),e(Pg,Ize),e(mo,qze),e(mo,OK),e(OK,Nze),e(mo,jze),g(yC,mo,null),e(Qo,Dze),e(Qo,$g),g(LC,$g,null),e($g,Gze),e($g,VK),e(VK,Oze),b(c,HSe,u),b(c,Qi,u),e(Qi,Ig),e(Ig,XK),g(xC,XK,null),e(Qi,Vze),e(Qi,zK),e(zK,Xze),b(c,USe,u),b(c,Wo,u),g(kC,Wo,null),e(Wo,zze),e(Wo,SC),e(SC,Qze),e(SC,sk),e(sk,Wze),e(SC,Hze),e(Wo,Uze),e(Wo,RC),e(RC,Jze),e(RC,QK),e(QK,Yze),e(RC,Kze),e(Wo,Zze),e(Wo,go),g(BC,go,null),e(go,eQe),e(go,WK),e(WK,oQe),e(go,rQe),e(go,Oa),e(Oa,tQe),e(Oa,HK),e(HK,aQe),e(Oa,nQe),e(Oa,UK),e(UK,sQe),e(Oa,lQe),e(Oa,JK),e(JK,iQe),e(Oa,dQe),e(go,cQe),e(go,E),e(E,Qn),e(Qn,YK),e(YK,fQe),e(Qn,mQe),e(Qn,lk),e(lk,gQe),e(Qn,hQe),e(Qn,ik),e(ik,pQe),e(Qn,_Qe),e(E,uQe),e(E,Wn),e(Wn,KK),e(KK,bQe),e(Wn,FQe),e(Wn,dk),e(dk,vQe),e(Wn,TQe),e(Wn,ck),e(ck,MQe),e(Wn,EQe),e(E,CQe),e(E,Hn),e(Hn,ZK),e(ZK,wQe),e(Hn,AQe),e(Hn,fk),e(fk,yQe),e(Hn,LQe),e(Hn,mk),e(mk,xQe),e(Hn,kQe),e(E,SQe),e(E,qg),e(qg,eZ),e(eZ,RQe),e(qg,BQe),e(qg,gk),e(gk,PQe),e(qg,$Qe),e(E,IQe),e(E,Un),e(Un,oZ),e(oZ,qQe),e(Un,NQe),e(Un,hk),e(hk,jQe),e(Un,DQe),e(Un,pk),e(pk,GQe),e(Un,OQe),e(E,VQe),e(E,Ng),e(Ng,rZ),e(rZ,XQe),e(Ng,zQe),e(Ng,_k),e(_k,QQe),e(Ng,WQe),e(E,HQe),e(E,jg),e(jg,tZ),e(tZ,UQe),e(jg,JQe),e(jg,uk),e(uk,YQe),e(jg,KQe),e(E,ZQe),e(E,Dg),e(Dg,aZ),e(aZ,eWe),e(Dg,oWe),e(Dg,bk),e(bk,rWe),e(Dg,tWe),e(E,aWe),e(E,Jn),e(Jn,nZ),e(nZ,nWe),e(Jn,sWe),e(Jn,Fk),e(Fk,lWe),e(Jn,iWe),e(Jn,vk),e(vk,dWe),e(Jn,cWe),e(E,fWe),e(E,Yn),e(Yn,sZ),e(sZ,mWe),e(Yn,gWe),e(Yn,Tk),e(Tk,hWe),e(Yn,pWe),e(Yn,Mk),e(Mk,_We),e(Yn,uWe),e(E,bWe),e(E,Kn),e(Kn,lZ),e(lZ,FWe),e(Kn,vWe),e(Kn,Ek),e(Ek,TWe),e(Kn,MWe),e(Kn,Ck),e(Ck,EWe),e(Kn,CWe),e(E,wWe),e(E,Gg),e(Gg,iZ),e(iZ,AWe),e(Gg,yWe),e(Gg,wk),e(wk,LWe),e(Gg,xWe),e(E,kWe),e(E,Og),e(Og,dZ),e(dZ,SWe),e(Og,RWe),e(Og,Ak),e(Ak,BWe),e(Og,PWe),e(E,$We),e(E,Zn),e(Zn,cZ),e(cZ,IWe),e(Zn,qWe),e(Zn,yk),e(yk,NWe),e(Zn,jWe),e(Zn,Lk),e(Lk,DWe),e(Zn,GWe),e(E,OWe),e(E,Vg),e(Vg,fZ),e(fZ,VWe),e(Vg,XWe),e(Vg,xk),e(xk,zWe),e(Vg,QWe),e(E,WWe),e(E,es),e(es,mZ),e(mZ,HWe),e(es,UWe),e(es,kk),e(kk,JWe),e(es,YWe),e(es,Sk),e(Sk,KWe),e(es,ZWe),e(E,eHe),e(E,os),e(os,gZ),e(gZ,oHe),e(os,rHe),e(os,Rk),e(Rk,tHe),e(os,aHe),e(os,Bk),e(Bk,nHe),e(os,sHe),e(E,lHe),e(E,rs),e(rs,hZ),e(hZ,iHe),e(rs,dHe),e(rs,Pk),e(Pk,cHe),e(rs,fHe),e(rs,pZ),e(pZ,mHe),e(rs,gHe),e(E,hHe),e(E,Xg),e(Xg,_Z),e(_Z,pHe),e(Xg,_He),e(Xg,$k),e($k,uHe),e(Xg,bHe),e(E,FHe),e(E,ts),e(ts,uZ),e(uZ,vHe),e(ts,THe),e(ts,Ik),e(Ik,MHe),e(ts,EHe),e(ts,qk),e(qk,CHe),e(ts,wHe),e(E,AHe),e(E,zg),e(zg,bZ),e(bZ,yHe),e(zg,LHe),e(zg,Nk),e(Nk,xHe),e(zg,kHe),e(E,SHe),e(E,as),e(as,FZ),e(FZ,RHe),e(as,BHe),e(as,jk),e(jk,PHe),e(as,$He),e(as,Dk),e(Dk,IHe),e(as,qHe),e(E,NHe),e(E,ns),e(ns,vZ),e(vZ,jHe),e(ns,DHe),e(ns,Gk),e(Gk,GHe),e(ns,OHe),e(ns,Ok),e(Ok,VHe),e(ns,XHe),e(E,zHe),e(E,ss),e(ss,TZ),e(TZ,QHe),e(ss,WHe),e(ss,Vk),e(Vk,HHe),e(ss,UHe),e(ss,Xk),e(Xk,JHe),e(ss,YHe),e(E,KHe),e(E,Qg),e(Qg,MZ),e(MZ,ZHe),e(Qg,eUe),e(Qg,zk),e(zk,oUe),e(Qg,rUe),e(E,tUe),e(E,ls),e(ls,EZ),e(EZ,aUe),e(ls,nUe),e(ls,Qk),e(Qk,sUe),e(ls,lUe),e(ls,Wk),e(Wk,iUe),e(ls,dUe),e(E,cUe),e(E,Wg),e(Wg,CZ),e(CZ,fUe),e(Wg,mUe),e(Wg,Hk),e(Hk,gUe),e(Wg,hUe),e(E,pUe),e(E,is),e(is,wZ),e(wZ,_Ue),e(is,uUe),e(is,Uk),e(Uk,bUe),e(is,FUe),e(is,Jk),e(Jk,vUe),e(is,TUe),e(E,MUe),e(E,ds),e(ds,AZ),e(AZ,EUe),e(ds,CUe),e(ds,Yk),e(Yk,wUe),e(ds,AUe),e(ds,Kk),e(Kk,yUe),e(ds,LUe),e(E,xUe),e(E,cs),e(cs,yZ),e(yZ,kUe),e(cs,SUe),e(cs,Zk),e(Zk,RUe),e(cs,BUe),e(cs,eS),e(eS,PUe),e(cs,$Ue),e(E,IUe),e(E,fs),e(fs,LZ),e(LZ,qUe),e(fs,NUe),e(fs,oS),e(oS,jUe),e(fs,DUe),e(fs,rS),e(rS,GUe),e(fs,OUe),e(E,VUe),e(E,Hg),e(Hg,xZ),e(xZ,XUe),e(Hg,zUe),e(Hg,tS),e(tS,QUe),e(Hg,WUe),e(E,HUe),e(E,ms),e(ms,kZ),e(kZ,UUe),e(ms,JUe),e(ms,aS),e(aS,YUe),e(ms,KUe),e(ms,nS),e(nS,ZUe),e(ms,eJe),e(E,oJe),e(E,gs),e(gs,SZ),e(SZ,rJe),e(gs,tJe),e(gs,sS),e(sS,aJe),e(gs,nJe),e(gs,lS),e(lS,sJe),e(gs,lJe),e(E,iJe),e(E,hs),e(hs,RZ),e(RZ,dJe),e(hs,cJe),e(hs,iS),e(iS,fJe),e(hs,mJe),e(hs,dS),e(dS,gJe),e(hs,hJe),e(E,pJe),e(E,ps),e(ps,BZ),e(BZ,_Je),e(ps,uJe),e(ps,cS),e(cS,bJe),e(ps,FJe),e(ps,fS),e(fS,vJe),e(ps,TJe),e(E,MJe),e(E,_s),e(_s,PZ),e(PZ,EJe),e(_s,CJe),e(_s,mS),e(mS,wJe),e(_s,AJe),e(_s,gS),e(gS,yJe),e(_s,LJe),e(E,xJe),e(E,us),e(us,$Z),e($Z,kJe),e(us,SJe),e(us,hS),e(hS,RJe),e(us,BJe),e(us,pS),e(pS,PJe),e(us,$Je),e(E,IJe),e(E,Ug),e(Ug,IZ),e(IZ,qJe),e(Ug,NJe),e(Ug,_S),e(_S,jJe),e(Ug,DJe),e(E,GJe),e(E,bs),e(bs,qZ),e(qZ,OJe),e(bs,VJe),e(bs,uS),e(uS,XJe),e(bs,zJe),e(bs,bS),e(bS,QJe),e(bs,WJe),e(E,HJe),e(E,Jg),e(Jg,NZ),e(NZ,UJe),e(Jg,JJe),e(Jg,FS),e(FS,YJe),e(Jg,KJe),e(E,ZJe),e(E,Yg),e(Yg,jZ),e(jZ,eYe),e(Yg,oYe),e(Yg,vS),e(vS,rYe),e(Yg,tYe),e(E,aYe),e(E,Fs),e(Fs,DZ),e(DZ,nYe),e(Fs,sYe),e(Fs,TS),e(TS,lYe),e(Fs,iYe),e(Fs,MS),e(MS,dYe),e(Fs,cYe),e(E,fYe),e(E,vs),e(vs,GZ),e(GZ,mYe),e(vs,gYe),e(vs,ES),e(ES,hYe),e(vs,pYe),e(vs,CS),e(CS,_Ye),e(vs,uYe),e(E,bYe),e(E,Kg),e(Kg,OZ),e(OZ,FYe),e(Kg,vYe),e(Kg,wS),e(wS,TYe),e(Kg,MYe),e(E,EYe),e(E,Ts),e(Ts,VZ),e(VZ,CYe),e(Ts,wYe),e(Ts,AS),e(AS,AYe),e(Ts,yYe),e(Ts,yS),e(yS,LYe),e(Ts,xYe),e(E,kYe),e(E,Ms),e(Ms,XZ),e(XZ,SYe),e(Ms,RYe),e(Ms,LS),e(LS,BYe),e(Ms,PYe),e(Ms,xS),e(xS,$Ye),e(Ms,IYe),e(E,qYe),e(E,Es),e(Es,zZ),e(zZ,NYe),e(Es,jYe),e(Es,kS),e(kS,DYe),e(Es,GYe),e(Es,SS),e(SS,OYe),e(Es,VYe),e(E,XYe),e(E,Cs),e(Cs,QZ),e(QZ,zYe),e(Cs,QYe),e(Cs,RS),e(RS,WYe),e(Cs,HYe),e(Cs,BS),e(BS,UYe),e(Cs,JYe),e(E,YYe),e(E,ws),e(ws,WZ),e(WZ,KYe),e(ws,ZYe),e(ws,PS),e(PS,eKe),e(ws,oKe),e(ws,$S),e($S,rKe),e(ws,tKe),e(E,aKe),e(E,Zg),e(Zg,HZ),e(HZ,nKe),e(Zg,sKe),e(Zg,IS),e(IS,lKe),e(Zg,iKe),e(E,dKe),e(E,eh),e(eh,UZ),e(UZ,cKe),e(eh,fKe),e(eh,qS),e(qS,mKe),e(eh,gKe),e(E,hKe),e(E,oh),e(oh,JZ),e(JZ,pKe),e(oh,_Ke),e(oh,NS),e(NS,uKe),e(oh,bKe),e(E,FKe),e(E,rh),e(rh,YZ),e(YZ,vKe),e(rh,TKe),e(rh,jS),e(jS,MKe),e(rh,EKe),e(E,CKe),e(E,As),e(As,KZ),e(KZ,wKe),e(As,AKe),e(As,DS),e(DS,yKe),e(As,LKe),e(As,GS),e(GS,xKe),e(As,kKe),e(E,SKe),e(E,th),e(th,ZZ),e(ZZ,RKe),e(th,BKe),e(th,OS),e(OS,PKe),e(th,$Ke),e(E,IKe),e(E,ys),e(ys,eee),e(eee,qKe),e(ys,NKe),e(ys,VS),e(VS,jKe),e(ys,DKe),e(ys,XS),e(XS,GKe),e(ys,OKe),e(E,VKe),e(E,Ls),e(Ls,oee),e(oee,XKe),e(Ls,zKe),e(Ls,zS),e(zS,QKe),e(Ls,WKe),e(Ls,QS),e(QS,HKe),e(Ls,UKe),e(E,JKe),e(E,xs),e(xs,ree),e(ree,YKe),e(xs,KKe),e(xs,WS),e(WS,ZKe),e(xs,eZe),e(xs,HS),e(HS,oZe),e(xs,rZe),e(E,tZe),e(E,ks),e(ks,tee),e(tee,aZe),e(ks,nZe),e(ks,US),e(US,sZe),e(ks,lZe),e(ks,JS),e(JS,iZe),e(ks,dZe),e(E,cZe),e(E,Ss),e(Ss,aee),e(aee,fZe),e(Ss,mZe),e(Ss,YS),e(YS,gZe),e(Ss,hZe),e(Ss,KS),e(KS,pZe),e(Ss,_Ze),e(E,uZe),e(E,Rs),e(Rs,nee),e(nee,bZe),e(Rs,FZe),e(Rs,ZS),e(ZS,vZe),e(Rs,TZe),e(Rs,eR),e(eR,MZe),e(Rs,EZe),e(E,CZe),e(E,ah),e(ah,see),e(see,wZe),e(ah,AZe),e(ah,oR),e(oR,yZe),e(ah,LZe),e(E,xZe),e(E,nh),e(nh,lee),e(lee,kZe),e(nh,SZe),e(nh,rR),e(rR,RZe),e(nh,BZe),e(E,PZe),e(E,Bs),e(Bs,iee),e(iee,$Ze),e(Bs,IZe),e(Bs,tR),e(tR,qZe),e(Bs,NZe),e(Bs,aR),e(aR,jZe),e(Bs,DZe),e(E,GZe),e(E,Ps),e(Ps,dee),e(dee,OZe),e(Ps,VZe),e(Ps,nR),e(nR,XZe),e(Ps,zZe),e(Ps,sR),e(sR,QZe),e(Ps,WZe),e(E,HZe),e(E,$s),e($s,cee),e(cee,UZe),e($s,JZe),e($s,lR),e(lR,YZe),e($s,KZe),e($s,iR),e(iR,ZZe),e($s,eeo),e(E,oeo),e(E,sh),e(sh,fee),e(fee,reo),e(sh,teo),e(sh,dR),e(dR,aeo),e(sh,neo),e(E,seo),e(E,lh),e(lh,mee),e(mee,leo),e(lh,ieo),e(lh,cR),e(cR,deo),e(lh,ceo),e(E,feo),e(E,ih),e(ih,gee),e(gee,meo),e(ih,geo),e(ih,fR),e(fR,heo),e(ih,peo),e(E,_eo),e(E,dh),e(dh,hee),e(hee,ueo),e(dh,beo),e(dh,mR),e(mR,Feo),e(dh,veo),e(E,Teo),e(E,ch),e(ch,pee),e(pee,Meo),e(ch,Eeo),e(ch,gR),e(gR,Ceo),e(ch,weo),e(E,Aeo),e(E,Is),e(Is,_ee),e(_ee,yeo),e(Is,Leo),e(Is,hR),e(hR,xeo),e(Is,keo),e(Is,pR),e(pR,Seo),e(Is,Reo),e(E,Beo),e(E,fh),e(fh,uee),e(uee,Peo),e(fh,$eo),e(fh,_R),e(_R,Ieo),e(fh,qeo),e(E,Neo),e(E,mh),e(mh,bee),e(bee,jeo),e(mh,Deo),e(mh,uR),e(uR,Geo),e(mh,Oeo),e(E,Veo),e(E,qs),e(qs,Fee),e(Fee,Xeo),e(qs,zeo),e(qs,bR),e(bR,Qeo),e(qs,Weo),e(qs,FR),e(FR,Heo),e(qs,Ueo),e(E,Jeo),e(E,Ns),e(Ns,vee),e(vee,Yeo),e(Ns,Keo),e(Ns,vR),e(vR,Zeo),e(Ns,eoo),e(Ns,TR),e(TR,ooo),e(Ns,roo),e(go,too),e(go,Tee),e(Tee,aoo),e(go,noo),g(PC,go,null),e(Wo,soo),e(Wo,gh),g($C,gh,null),e(gh,loo),e(gh,Mee),e(Mee,ioo),b(c,JSe,u),b(c,Wi,u),e(Wi,hh),e(hh,Eee),g(IC,Eee,null),e(Wi,doo),e(Wi,Cee),e(Cee,coo),b(c,YSe,u),b(c,Ho,u),g(qC,Ho,null),e(Ho,foo),e(Ho,NC),e(NC,moo),e(NC,MR),e(MR,goo),e(NC,hoo),e(Ho,poo),e(Ho,jC),e(jC,_oo),e(jC,wee),e(wee,uoo),e(jC,boo),e(Ho,Foo),e(Ho,$e),g(DC,$e,null),e($e,voo),e($e,Aee),e(Aee,Too),e($e,Moo),e($e,Va),e(Va,Eoo),e(Va,yee),e(yee,Coo),e(Va,woo),e(Va,Lee),e(Lee,Aoo),e(Va,yoo),e(Va,xee),e(xee,Loo),e(Va,xoo),e($e,koo),e($e,te),e(te,ph),e(ph,kee),e(kee,Soo),e(ph,Roo),e(ph,ER),e(ER,Boo),e(ph,Poo),e(te,$oo),e(te,_h),e(_h,See),e(See,Ioo),e(_h,qoo),e(_h,CR),e(CR,Noo),e(_h,joo),e(te,Doo),e(te,uh),e(uh,Ree),e(Ree,Goo),e(uh,Ooo),e(uh,wR),e(wR,Voo),e(uh,Xoo),e(te,zoo),e(te,bh),e(bh,Bee),e(Bee,Qoo),e(bh,Woo),e(bh,AR),e(AR,Hoo),e(bh,Uoo),e(te,Joo),e(te,Fh),e(Fh,Pee),e(Pee,Yoo),e(Fh,Koo),e(Fh,yR),e(yR,Zoo),e(Fh,ero),e(te,oro),e(te,vh),e(vh,$ee),e($ee,rro),e(vh,tro),e(vh,LR),e(LR,aro),e(vh,nro),e(te,sro),e(te,Th),e(Th,Iee),e(Iee,lro),e(Th,iro),e(Th,xR),e(xR,dro),e(Th,cro),e(te,fro),e(te,Mh),e(Mh,qee),e(qee,mro),e(Mh,gro),e(Mh,kR),e(kR,hro),e(Mh,pro),e(te,_ro),e(te,Eh),e(Eh,Nee),e(Nee,uro),e(Eh,bro),e(Eh,SR),e(SR,Fro),e(Eh,vro),e(te,Tro),e(te,Ch),e(Ch,jee),e(jee,Mro),e(Ch,Ero),e(Ch,RR),e(RR,Cro),e(Ch,wro),e(te,Aro),e(te,wh),e(wh,Dee),e(Dee,yro),e(wh,Lro),e(wh,BR),e(BR,xro),e(wh,kro),e(te,Sro),e(te,Ah),e(Ah,Gee),e(Gee,Rro),e(Ah,Bro),e(Ah,PR),e(PR,Pro),e(Ah,$ro),e(te,Iro),e(te,yh),e(yh,Oee),e(Oee,qro),e(yh,Nro),e(yh,$R),e($R,jro),e(yh,Dro),e(te,Gro),e(te,Lh),e(Lh,Vee),e(Vee,Oro),e(Lh,Vro),e(Lh,IR),e(IR,Xro),e(Lh,zro),e(te,Qro),e(te,xh),e(xh,Xee),e(Xee,Wro),e(xh,Hro),e(xh,qR),e(qR,Uro),e(xh,Jro),e(te,Yro),e(te,kh),e(kh,zee),e(zee,Kro),e(kh,Zro),e(kh,NR),e(NR,eto),e(kh,oto),e(te,rto),e(te,Sh),e(Sh,Qee),e(Qee,tto),e(Sh,ato),e(Sh,jR),e(jR,nto),e(Sh,sto),e(te,lto),e(te,Rh),e(Rh,Wee),e(Wee,ito),e(Rh,dto),e(Rh,DR),e(DR,cto),e(Rh,fto),e($e,mto),g(Bh,$e,null),e($e,gto),e($e,Hee),e(Hee,hto),e($e,pto),g(GC,$e,null),e(Ho,_to),e(Ho,Ph),g(OC,Ph,null),e(Ph,uto),e(Ph,Uee),e(Uee,bto),b(c,KSe,u),b(c,Hi,u),e(Hi,$h),e($h,Jee),g(VC,Jee,null),e(Hi,Fto),e(Hi,Yee),e(Yee,vto),b(c,ZSe,u),b(c,Uo,u),g(XC,Uo,null),e(Uo,Tto),e(Uo,zC),e(zC,Mto),e(zC,GR),e(GR,Eto),e(zC,Cto),e(Uo,wto),e(Uo,QC),e(QC,Ato),e(QC,Kee),e(Kee,yto),e(QC,Lto),e(Uo,xto),e(Uo,Ie),g(WC,Ie,null),e(Ie,kto),e(Ie,Zee),e(Zee,Sto),e(Ie,Rto),e(Ie,Ui),e(Ui,Bto),e(Ui,eoe),e(eoe,Pto),e(Ui,$to),e(Ui,ooe),e(ooe,Ito),e(Ui,qto),e(Ie,Nto),e(Ie,ke),e(ke,Ih),e(Ih,roe),e(roe,jto),e(Ih,Dto),e(Ih,OR),e(OR,Gto),e(Ih,Oto),e(ke,Vto),e(ke,qh),e(qh,toe),e(toe,Xto),e(qh,zto),e(qh,VR),e(VR,Qto),e(qh,Wto),e(ke,Hto),e(ke,Nh),e(Nh,aoe),e(aoe,Uto),e(Nh,Jto),e(Nh,XR),e(XR,Yto),e(Nh,Kto),e(ke,Zto),e(ke,jh),e(jh,noe),e(noe,eao),e(jh,oao),e(jh,zR),e(zR,rao),e(jh,tao),e(ke,aao),e(ke,Dh),e(Dh,soe),e(soe,nao),e(Dh,sao),e(Dh,QR),e(QR,lao),e(Dh,iao),e(ke,dao),e(ke,Gh),e(Gh,loe),e(loe,cao),e(Gh,fao),e(Gh,WR),e(WR,mao),e(Gh,gao),e(ke,hao),e(ke,Oh),e(Oh,ioe),e(ioe,pao),e(Oh,_ao),e(Oh,HR),e(HR,uao),e(Oh,bao),e(ke,Fao),e(ke,Vh),e(Vh,doe),e(doe,vao),e(Vh,Tao),e(Vh,UR),e(UR,Mao),e(Vh,Eao),e(Ie,Cao),g(Xh,Ie,null),e(Ie,wao),e(Ie,coe),e(coe,Aao),e(Ie,yao),g(HC,Ie,null),e(Uo,Lao),e(Uo,zh),g(UC,zh,null),e(zh,xao),e(zh,foe),e(foe,kao),b(c,eRe,u),b(c,Ji,u),e(Ji,Qh),e(Qh,moe),g(JC,moe,null),e(Ji,Sao),e(Ji,goe),e(goe,Rao),b(c,oRe,u),b(c,Jo,u),g(YC,Jo,null),e(Jo,Bao),e(Jo,Yi),e(Yi,Pao),e(Yi,JR),e(JR,$ao),e(Yi,Iao),e(Yi,YR),e(YR,qao),e(Yi,Nao),e(Jo,jao),e(Jo,KC),e(KC,Dao),e(KC,hoe),e(hoe,Gao),e(KC,Oao),e(Jo,Vao),e(Jo,Xr),g(ZC,Xr,null),e(Xr,Xao),e(Xr,poe),e(poe,zao),e(Xr,Qao),e(Xr,Ki),e(Ki,Wao),e(Ki,_oe),e(_oe,Hao),e(Ki,Uao),e(Ki,KR),e(KR,Jao),e(Ki,Yao),e(Xr,Kao),e(Xr,uoe),e(uoe,Zao),e(Xr,eno),g(e5,Xr,null),e(Jo,ono),e(Jo,qe),g(o5,qe,null),e(qe,rno),e(qe,boe),e(boe,tno),e(qe,ano),e(qe,Xa),e(Xa,nno),e(Xa,Foe),e(Foe,sno),e(Xa,lno),e(Xa,voe),e(voe,ino),e(Xa,dno),e(Xa,Toe),e(Toe,cno),e(Xa,fno),e(qe,mno),e(qe,T),e(T,Wh),e(Wh,Moe),e(Moe,gno),e(Wh,hno),e(Wh,ZR),e(ZR,pno),e(Wh,_no),e(T,uno),e(T,Hh),e(Hh,Eoe),e(Eoe,bno),e(Hh,Fno),e(Hh,eB),e(eB,vno),e(Hh,Tno),e(T,Mno),e(T,Uh),e(Uh,Coe),e(Coe,Eno),e(Uh,Cno),e(Uh,oB),e(oB,wno),e(Uh,Ano),e(T,yno),e(T,Jh),e(Jh,woe),e(woe,Lno),e(Jh,xno),e(Jh,rB),e(rB,kno),e(Jh,Sno),e(T,Rno),e(T,Yh),e(Yh,Aoe),e(Aoe,Bno),e(Yh,Pno),e(Yh,tB),e(tB,$no),e(Yh,Ino),e(T,qno),e(T,Kh),e(Kh,yoe),e(yoe,Nno),e(Kh,jno),e(Kh,aB),e(aB,Dno),e(Kh,Gno),e(T,Ono),e(T,Zh),e(Zh,Loe),e(Loe,Vno),e(Zh,Xno),e(Zh,nB),e(nB,zno),e(Zh,Qno),e(T,Wno),e(T,ep),e(ep,xoe),e(xoe,Hno),e(ep,Uno),e(ep,sB),e(sB,Jno),e(ep,Yno),e(T,Kno),e(T,op),e(op,koe),e(koe,Zno),e(op,eso),e(op,lB),e(lB,oso),e(op,rso),e(T,tso),e(T,rp),e(rp,Soe),e(Soe,aso),e(rp,nso),e(rp,iB),e(iB,sso),e(rp,lso),e(T,iso),e(T,tp),e(tp,Roe),e(Roe,dso),e(tp,cso),e(tp,dB),e(dB,fso),e(tp,mso),e(T,gso),e(T,ap),e(ap,Boe),e(Boe,hso),e(ap,pso),e(ap,cB),e(cB,_so),e(ap,uso),e(T,bso),e(T,np),e(np,Poe),e(Poe,Fso),e(np,vso),e(np,fB),e(fB,Tso),e(np,Mso),e(T,Eso),e(T,sp),e(sp,$oe),e($oe,Cso),e(sp,wso),e(sp,mB),e(mB,Aso),e(sp,yso),e(T,Lso),e(T,lp),e(lp,Ioe),e(Ioe,xso),e(lp,kso),e(lp,gB),e(gB,Sso),e(lp,Rso),e(T,Bso),e(T,ip),e(ip,qoe),e(qoe,Pso),e(ip,$so),e(ip,hB),e(hB,Iso),e(ip,qso),e(T,Nso),e(T,dp),e(dp,Noe),e(Noe,jso),e(dp,Dso),e(dp,pB),e(pB,Gso),e(dp,Oso),e(T,Vso),e(T,cp),e(cp,joe),e(joe,Xso),e(cp,zso),e(cp,_B),e(_B,Qso),e(cp,Wso),e(T,Hso),e(T,fp),e(fp,Doe),e(Doe,Uso),e(fp,Jso),e(fp,uB),e(uB,Yso),e(fp,Kso),e(T,Zso),e(T,mp),e(mp,Goe),e(Goe,elo),e(mp,olo),e(mp,bB),e(bB,rlo),e(mp,tlo),e(T,alo),e(T,gp),e(gp,Ooe),e(Ooe,nlo),e(gp,slo),e(gp,FB),e(FB,llo),e(gp,ilo),e(T,dlo),e(T,hp),e(hp,Voe),e(Voe,clo),e(hp,flo),e(hp,vB),e(vB,mlo),e(hp,glo),e(T,hlo),e(T,pp),e(pp,Xoe),e(Xoe,plo),e(pp,_lo),e(pp,TB),e(TB,ulo),e(pp,blo),e(T,Flo),e(T,_p),e(_p,zoe),e(zoe,vlo),e(_p,Tlo),e(_p,MB),e(MB,Mlo),e(_p,Elo),e(T,Clo),e(T,up),e(up,Qoe),e(Qoe,wlo),e(up,Alo),e(up,EB),e(EB,ylo),e(up,Llo),e(T,xlo),e(T,bp),e(bp,Woe),e(Woe,klo),e(bp,Slo),e(bp,CB),e(CB,Rlo),e(bp,Blo),e(T,Plo),e(T,Fp),e(Fp,Hoe),e(Hoe,$lo),e(Fp,Ilo),e(Fp,wB),e(wB,qlo),e(Fp,Nlo),e(T,jlo),e(T,vp),e(vp,Uoe),e(Uoe,Dlo),e(vp,Glo),e(vp,AB),e(AB,Olo),e(vp,Vlo),e(T,Xlo),e(T,Tp),e(Tp,Joe),e(Joe,zlo),e(Tp,Qlo),e(Tp,yB),e(yB,Wlo),e(Tp,Hlo),e(T,Ulo),e(T,js),e(js,Yoe),e(Yoe,Jlo),e(js,Ylo),e(js,LB),e(LB,Klo),e(js,Zlo),e(js,xB),e(xB,eio),e(js,oio),e(T,rio),e(T,Mp),e(Mp,Koe),e(Koe,tio),e(Mp,aio),e(Mp,kB),e(kB,nio),e(Mp,sio),e(T,lio),e(T,Ep),e(Ep,Zoe),e(Zoe,iio),e(Ep,dio),e(Ep,SB),e(SB,cio),e(Ep,fio),e(T,mio),e(T,Cp),e(Cp,ere),e(ere,gio),e(Cp,hio),e(Cp,RB),e(RB,pio),e(Cp,_io),e(T,uio),e(T,wp),e(wp,ore),e(ore,bio),e(wp,Fio),e(wp,BB),e(BB,vio),e(wp,Tio),e(T,Mio),e(T,Ap),e(Ap,rre),e(rre,Eio),e(Ap,Cio),e(Ap,PB),e(PB,wio),e(Ap,Aio),e(T,yio),e(T,yp),e(yp,tre),e(tre,Lio),e(yp,xio),e(yp,$B),e($B,kio),e(yp,Sio),e(T,Rio),e(T,Lp),e(Lp,are),e(are,Bio),e(Lp,Pio),e(Lp,IB),e(IB,$io),e(Lp,Iio),e(T,qio),e(T,xp),e(xp,nre),e(nre,Nio),e(xp,jio),e(xp,qB),e(qB,Dio),e(xp,Gio),e(T,Oio),e(T,kp),e(kp,sre),e(sre,Vio),e(kp,Xio),e(kp,NB),e(NB,zio),e(kp,Qio),e(T,Wio),e(T,Sp),e(Sp,lre),e(lre,Hio),e(Sp,Uio),e(Sp,jB),e(jB,Jio),e(Sp,Yio),e(T,Kio),e(T,Rp),e(Rp,ire),e(ire,Zio),e(Rp,edo),e(Rp,DB),e(DB,odo),e(Rp,rdo),e(T,tdo),e(T,Bp),e(Bp,dre),e(dre,ado),e(Bp,ndo),e(Bp,GB),e(GB,sdo),e(Bp,ldo),e(T,ido),e(T,Pp),e(Pp,cre),e(cre,ddo),e(Pp,cdo),e(Pp,OB),e(OB,fdo),e(Pp,mdo),e(T,gdo),e(T,$p),e($p,fre),e(fre,hdo),e($p,pdo),e($p,VB),e(VB,_do),e($p,udo),e(T,bdo),e(T,Ip),e(Ip,mre),e(mre,Fdo),e(Ip,vdo),e(Ip,XB),e(XB,Tdo),e(Ip,Mdo),e(T,Edo),e(T,qp),e(qp,gre),e(gre,Cdo),e(qp,wdo),e(qp,zB),e(zB,Ado),e(qp,ydo),e(T,Ldo),e(T,Np),e(Np,hre),e(hre,xdo),e(Np,kdo),e(Np,QB),e(QB,Sdo),e(Np,Rdo),e(T,Bdo),e(T,jp),e(jp,pre),e(pre,Pdo),e(jp,$do),e(jp,WB),e(WB,Ido),e(jp,qdo),e(T,Ndo),e(T,Dp),e(Dp,_re),e(_re,jdo),e(Dp,Ddo),e(Dp,HB),e(HB,Gdo),e(Dp,Odo),e(T,Vdo),e(T,Gp),e(Gp,ure),e(ure,Xdo),e(Gp,zdo),e(Gp,UB),e(UB,Qdo),e(Gp,Wdo),e(T,Hdo),e(T,Op),e(Op,bre),e(bre,Udo),e(Op,Jdo),e(Op,JB),e(JB,Ydo),e(Op,Kdo),e(T,Zdo),e(T,Vp),e(Vp,Fre),e(Fre,eco),e(Vp,oco),e(Vp,YB),e(YB,rco),e(Vp,tco),e(T,aco),e(T,Xp),e(Xp,vre),e(vre,nco),e(Xp,sco),e(Xp,KB),e(KB,lco),e(Xp,ico),e(T,dco),e(T,zp),e(zp,Tre),e(Tre,cco),e(zp,fco),e(zp,ZB),e(ZB,mco),e(zp,gco),e(T,hco),e(T,Qp),e(Qp,Mre),e(Mre,pco),e(Qp,_co),e(Qp,eP),e(eP,uco),e(Qp,bco),e(T,Fco),e(T,Wp),e(Wp,Ere),e(Ere,vco),e(Wp,Tco),e(Wp,oP),e(oP,Mco),e(Wp,Eco),e(T,Cco),e(T,Hp),e(Hp,Cre),e(Cre,wco),e(Hp,Aco),e(Hp,rP),e(rP,yco),e(Hp,Lco),e(T,xco),e(T,Up),e(Up,wre),e(wre,kco),e(Up,Sco),e(Up,tP),e(tP,Rco),e(Up,Bco),e(T,Pco),e(T,Jp),e(Jp,Are),e(Are,$co),e(Jp,Ico),e(Jp,aP),e(aP,qco),e(Jp,Nco),e(T,jco),e(T,Yp),e(Yp,yre),e(yre,Dco),e(Yp,Gco),e(Yp,nP),e(nP,Oco),e(Yp,Vco),e(T,Xco),e(T,Kp),e(Kp,Lre),e(Lre,zco),e(Kp,Qco),e(Kp,sP),e(sP,Wco),e(Kp,Hco),e(T,Uco),e(T,Zp),e(Zp,xre),e(xre,Jco),e(Zp,Yco),e(Zp,lP),e(lP,Kco),e(Zp,Zco),e(T,efo),e(T,e_),e(e_,kre),e(kre,ofo),e(e_,rfo),e(e_,iP),e(iP,tfo),e(e_,afo),e(T,nfo),e(T,o_),e(o_,Sre),e(Sre,sfo),e(o_,lfo),e(o_,dP),e(dP,ifo),e(o_,dfo),e(T,cfo),e(T,r_),e(r_,Rre),e(Rre,ffo),e(r_,mfo),e(r_,cP),e(cP,gfo),e(r_,hfo),e(T,pfo),e(T,t_),e(t_,Bre),e(Bre,_fo),e(t_,ufo),e(t_,fP),e(fP,bfo),e(t_,Ffo),e(T,vfo),e(T,a_),e(a_,Pre),e(Pre,Tfo),e(a_,Mfo),e(a_,mP),e(mP,Efo),e(a_,Cfo),e(T,wfo),e(T,n_),e(n_,$re),e($re,Afo),e(n_,yfo),e(n_,gP),e(gP,Lfo),e(n_,xfo),e(T,kfo),e(T,s_),e(s_,Ire),e(Ire,Sfo),e(s_,Rfo),e(s_,hP),e(hP,Bfo),e(s_,Pfo),e(T,$fo),e(T,l_),e(l_,qre),e(qre,Ifo),e(l_,qfo),e(l_,pP),e(pP,Nfo),e(l_,jfo),e(T,Dfo),e(T,i_),e(i_,Nre),e(Nre,Gfo),e(i_,Ofo),e(i_,_P),e(_P,Vfo),e(i_,Xfo),e(T,zfo),e(T,d_),e(d_,jre),e(jre,Qfo),e(d_,Wfo),e(d_,uP),e(uP,Hfo),e(d_,Ufo),e(T,Jfo),e(T,c_),e(c_,Dre),e(Dre,Yfo),e(c_,Kfo),e(c_,bP),e(bP,Zfo),e(c_,emo),e(T,omo),e(T,f_),e(f_,Gre),e(Gre,rmo),e(f_,tmo),e(f_,FP),e(FP,amo),e(f_,nmo),e(T,smo),e(T,m_),e(m_,Ore),e(Ore,lmo),e(m_,imo),e(m_,vP),e(vP,dmo),e(m_,cmo),e(T,fmo),e(T,g_),e(g_,Vre),e(Vre,mmo),e(g_,gmo),e(g_,TP),e(TP,hmo),e(g_,pmo),e(T,_mo),e(T,h_),e(h_,Xre),e(Xre,umo),e(h_,bmo),e(h_,MP),e(MP,Fmo),e(h_,vmo),e(T,Tmo),e(T,p_),e(p_,zre),e(zre,Mmo),e(p_,Emo),e(p_,EP),e(EP,Cmo),e(p_,wmo),e(T,Amo),e(T,__),e(__,Qre),e(Qre,ymo),e(__,Lmo),e(__,CP),e(CP,xmo),e(__,kmo),e(T,Smo),e(T,u_),e(u_,Wre),e(Wre,Rmo),e(u_,Bmo),e(u_,wP),e(wP,Pmo),e(u_,$mo),e(T,Imo),e(T,b_),e(b_,Hre),e(Hre,qmo),e(b_,Nmo),e(b_,AP),e(AP,jmo),e(b_,Dmo),e(T,Gmo),e(T,F_),e(F_,Ure),e(Ure,Omo),e(F_,Vmo),e(F_,yP),e(yP,Xmo),e(F_,zmo),e(T,Qmo),e(T,v_),e(v_,Jre),e(Jre,Wmo),e(v_,Hmo),e(v_,LP),e(LP,Umo),e(v_,Jmo),e(T,Ymo),e(T,T_),e(T_,Yre),e(Yre,Kmo),e(T_,Zmo),e(T_,xP),e(xP,ego),e(T_,ogo),e(T,rgo),e(T,M_),e(M_,Kre),e(Kre,tgo),e(M_,ago),e(M_,kP),e(kP,ngo),e(M_,sgo),e(T,lgo),e(T,E_),e(E_,Zre),e(Zre,igo),e(E_,dgo),e(E_,SP),e(SP,cgo),e(E_,fgo),e(T,mgo),e(T,C_),e(C_,ete),e(ete,ggo),e(C_,hgo),e(C_,RP),e(RP,pgo),e(C_,_go),e(T,ugo),e(T,w_),e(w_,ote),e(ote,bgo),e(w_,Fgo),e(w_,BP),e(BP,vgo),e(w_,Tgo),e(T,Mgo),e(T,A_),e(A_,rte),e(rte,Ego),e(A_,Cgo),e(A_,PP),e(PP,wgo),e(A_,Ago),e(T,ygo),e(T,y_),e(y_,tte),e(tte,Lgo),e(y_,xgo),e(y_,$P),e($P,kgo),e(y_,Sgo),e(T,Rgo),e(T,L_),e(L_,ate),e(ate,Bgo),e(L_,Pgo),e(L_,IP),e(IP,$go),e(L_,Igo),e(T,qgo),e(T,x_),e(x_,nte),e(nte,Ngo),e(x_,jgo),e(x_,qP),e(qP,Dgo),e(x_,Ggo),e(qe,Ogo),e(qe,k_),e(k_,Vgo),e(k_,ste),e(ste,Xgo),e(k_,zgo),e(k_,lte),e(lte,Qgo),e(qe,Wgo),e(qe,ite),e(ite,Hgo),e(qe,Ugo),g(r5,qe,null),b(c,rRe,u),b(c,Zi,u),e(Zi,S_),e(S_,dte),g(t5,dte,null),e(Zi,Jgo),e(Zi,cte),e(cte,Ygo),b(c,tRe,u),b(c,Yo,u),g(a5,Yo,null),e(Yo,Kgo),e(Yo,ed),e(ed,Zgo),e(ed,NP),e(NP,eho),e(ed,oho),e(ed,jP),e(jP,rho),e(ed,tho),e(Yo,aho),e(Yo,n5),e(n5,nho),e(n5,fte),e(fte,sho),e(n5,lho),e(Yo,iho),e(Yo,zr),g(s5,zr,null),e(zr,dho),e(zr,mte),e(mte,cho),e(zr,fho),e(zr,od),e(od,mho),e(od,gte),e(gte,gho),e(od,hho),e(od,DP),e(DP,pho),e(od,_ho),e(zr,uho),e(zr,hte),e(hte,bho),e(zr,Fho),g(l5,zr,null),e(Yo,vho),e(Yo,Ne),g(i5,Ne,null),e(Ne,Tho),e(Ne,pte),e(pte,Mho),e(Ne,Eho),e(Ne,za),e(za,Cho),e(za,_te),e(_te,who),e(za,Aho),e(za,ute),e(ute,yho),e(za,Lho),e(za,bte),e(bte,xho),e(za,kho),e(Ne,Sho),e(Ne,S),e(S,R_),e(R_,Fte),e(Fte,Rho),e(R_,Bho),e(R_,GP),e(GP,Pho),e(R_,$ho),e(S,Iho),e(S,B_),e(B_,vte),e(vte,qho),e(B_,Nho),e(B_,OP),e(OP,jho),e(B_,Dho),e(S,Gho),e(S,P_),e(P_,Tte),e(Tte,Oho),e(P_,Vho),e(P_,VP),e(VP,Xho),e(P_,zho),e(S,Qho),e(S,$_),e($_,Mte),e(Mte,Who),e($_,Hho),e($_,XP),e(XP,Uho),e($_,Jho),e(S,Yho),e(S,I_),e(I_,Ete),e(Ete,Kho),e(I_,Zho),e(I_,zP),e(zP,epo),e(I_,opo),e(S,rpo),e(S,q_),e(q_,Cte),e(Cte,tpo),e(q_,apo),e(q_,QP),e(QP,npo),e(q_,spo),e(S,lpo),e(S,N_),e(N_,wte),e(wte,ipo),e(N_,dpo),e(N_,WP),e(WP,cpo),e(N_,fpo),e(S,mpo),e(S,j_),e(j_,Ate),e(Ate,gpo),e(j_,hpo),e(j_,HP),e(HP,ppo),e(j_,_po),e(S,upo),e(S,D_),e(D_,yte),e(yte,bpo),e(D_,Fpo),e(D_,UP),e(UP,vpo),e(D_,Tpo),e(S,Mpo),e(S,G_),e(G_,Lte),e(Lte,Epo),e(G_,Cpo),e(G_,JP),e(JP,wpo),e(G_,Apo),e(S,ypo),e(S,O_),e(O_,xte),e(xte,Lpo),e(O_,xpo),e(O_,YP),e(YP,kpo),e(O_,Spo),e(S,Rpo),e(S,V_),e(V_,kte),e(kte,Bpo),e(V_,Ppo),e(V_,KP),e(KP,$po),e(V_,Ipo),e(S,qpo),e(S,X_),e(X_,Ste),e(Ste,Npo),e(X_,jpo),e(X_,ZP),e(ZP,Dpo),e(X_,Gpo),e(S,Opo),e(S,z_),e(z_,Rte),e(Rte,Vpo),e(z_,Xpo),e(z_,e$),e(e$,zpo),e(z_,Qpo),e(S,Wpo),e(S,Q_),e(Q_,Bte),e(Bte,Hpo),e(Q_,Upo),e(Q_,o$),e(o$,Jpo),e(Q_,Ypo),e(S,Kpo),e(S,W_),e(W_,Pte),e(Pte,Zpo),e(W_,e_o),e(W_,r$),e(r$,o_o),e(W_,r_o),e(S,t_o),e(S,H_),e(H_,$te),e($te,a_o),e(H_,n_o),e(H_,t$),e(t$,s_o),e(H_,l_o),e(S,i_o),e(S,U_),e(U_,Ite),e(Ite,d_o),e(U_,c_o),e(U_,a$),e(a$,f_o),e(U_,m_o),e(S,g_o),e(S,J_),e(J_,qte),e(qte,h_o),e(J_,p_o),e(J_,n$),e(n$,__o),e(J_,u_o),e(S,b_o),e(S,Y_),e(Y_,Nte),e(Nte,F_o),e(Y_,v_o),e(Y_,s$),e(s$,T_o),e(Y_,M_o),e(S,E_o),e(S,K_),e(K_,jte),e(jte,C_o),e(K_,w_o),e(K_,l$),e(l$,A_o),e(K_,y_o),e(S,L_o),e(S,Z_),e(Z_,Dte),e(Dte,x_o),e(Z_,k_o),e(Z_,i$),e(i$,S_o),e(Z_,R_o),e(S,B_o),e(S,eu),e(eu,Gte),e(Gte,P_o),e(eu,$_o),e(eu,d$),e(d$,I_o),e(eu,q_o),e(S,N_o),e(S,ou),e(ou,Ote),e(Ote,j_o),e(ou,D_o),e(ou,c$),e(c$,G_o),e(ou,O_o),e(S,V_o),e(S,ru),e(ru,Vte),e(Vte,X_o),e(ru,z_o),e(ru,f$),e(f$,Q_o),e(ru,W_o),e(S,H_o),e(S,tu),e(tu,Xte),e(Xte,U_o),e(tu,J_o),e(tu,m$),e(m$,Y_o),e(tu,K_o),e(S,Z_o),e(S,au),e(au,zte),e(zte,euo),e(au,ouo),e(au,g$),e(g$,ruo),e(au,tuo),e(S,auo),e(S,nu),e(nu,Qte),e(Qte,nuo),e(nu,suo),e(nu,h$),e(h$,luo),e(nu,iuo),e(S,duo),e(S,su),e(su,Wte),e(Wte,cuo),e(su,fuo),e(su,p$),e(p$,muo),e(su,guo),e(S,huo),e(S,lu),e(lu,Hte),e(Hte,puo),e(lu,_uo),e(lu,_$),e(_$,uuo),e(lu,buo),e(S,Fuo),e(S,iu),e(iu,Ute),e(Ute,vuo),e(iu,Tuo),e(iu,u$),e(u$,Muo),e(iu,Euo),e(S,Cuo),e(S,du),e(du,Jte),e(Jte,wuo),e(du,Auo),e(du,b$),e(b$,yuo),e(du,Luo),e(S,xuo),e(S,cu),e(cu,Yte),e(Yte,kuo),e(cu,Suo),e(cu,F$),e(F$,Ruo),e(cu,Buo),e(S,Puo),e(S,fu),e(fu,Kte),e(Kte,$uo),e(fu,Iuo),e(fu,v$),e(v$,quo),e(fu,Nuo),e(S,juo),e(S,mu),e(mu,Zte),e(Zte,Duo),e(mu,Guo),e(mu,T$),e(T$,Ouo),e(mu,Vuo),e(S,Xuo),e(S,gu),e(gu,eae),e(eae,zuo),e(gu,Quo),e(gu,M$),e(M$,Wuo),e(gu,Huo),e(S,Uuo),e(S,hu),e(hu,oae),e(oae,Juo),e(hu,Yuo),e(hu,E$),e(E$,Kuo),e(hu,Zuo),e(S,e1o),e(S,pu),e(pu,rae),e(rae,o1o),e(pu,r1o),e(pu,C$),e(C$,t1o),e(pu,a1o),e(S,n1o),e(S,_u),e(_u,tae),e(tae,s1o),e(_u,l1o),e(_u,w$),e(w$,i1o),e(_u,d1o),e(Ne,c1o),e(Ne,uu),e(uu,f1o),e(uu,aae),e(aae,m1o),e(uu,g1o),e(uu,nae),e(nae,h1o),e(Ne,p1o),e(Ne,sae),e(sae,_1o),e(Ne,u1o),g(d5,Ne,null),b(c,aRe,u),b(c,rd,u),e(rd,bu),e(bu,lae),g(c5,lae,null),e(rd,b1o),e(rd,iae),e(iae,F1o),b(c,nRe,u),b(c,Ko,u),g(f5,Ko,null),e(Ko,v1o),e(Ko,td),e(td,T1o),e(td,A$),e(A$,M1o),e(td,E1o),e(td,y$),e(y$,C1o),e(td,w1o),e(Ko,A1o),e(Ko,m5),e(m5,y1o),e(m5,dae),e(dae,L1o),e(m5,x1o),e(Ko,k1o),e(Ko,Qr),g(g5,Qr,null),e(Qr,S1o),e(Qr,cae),e(cae,R1o),e(Qr,B1o),e(Qr,ad),e(ad,P1o),e(ad,fae),e(fae,$1o),e(ad,I1o),e(ad,L$),e(L$,q1o),e(ad,N1o),e(Qr,j1o),e(Qr,mae),e(mae,D1o),e(Qr,G1o),g(h5,Qr,null),e(Ko,O1o),e(Ko,je),g(p5,je,null),e(je,V1o),e(je,gae),e(gae,X1o),e(je,z1o),e(je,Qa),e(Qa,Q1o),e(Qa,hae),e(hae,W1o),e(Qa,H1o),e(Qa,pae),e(pae,U1o),e(Qa,J1o),e(Qa,_ae),e(_ae,Y1o),e(Qa,K1o),e(je,Z1o),e(je,$),e($,Fu),e(Fu,uae),e(uae,e4o),e(Fu,o4o),e(Fu,x$),e(x$,r4o),e(Fu,t4o),e($,a4o),e($,vu),e(vu,bae),e(bae,n4o),e(vu,s4o),e(vu,k$),e(k$,l4o),e(vu,i4o),e($,d4o),e($,Tu),e(Tu,Fae),e(Fae,c4o),e(Tu,f4o),e(Tu,S$),e(S$,m4o),e(Tu,g4o),e($,h4o),e($,Mu),e(Mu,vae),e(vae,p4o),e(Mu,_4o),e(Mu,R$),e(R$,u4o),e(Mu,b4o),e($,F4o),e($,Eu),e(Eu,Tae),e(Tae,v4o),e(Eu,T4o),e(Eu,B$),e(B$,M4o),e(Eu,E4o),e($,C4o),e($,Cu),e(Cu,Mae),e(Mae,w4o),e(Cu,A4o),e(Cu,P$),e(P$,y4o),e(Cu,L4o),e($,x4o),e($,wu),e(wu,Eae),e(Eae,k4o),e(wu,S4o),e(wu,$$),e($$,R4o),e(wu,B4o),e($,P4o),e($,Au),e(Au,Cae),e(Cae,$4o),e(Au,I4o),e(Au,I$),e(I$,q4o),e(Au,N4o),e($,j4o),e($,yu),e(yu,wae),e(wae,D4o),e(yu,G4o),e(yu,q$),e(q$,O4o),e(yu,V4o),e($,X4o),e($,Lu),e(Lu,Aae),e(Aae,z4o),e(Lu,Q4o),e(Lu,N$),e(N$,W4o),e(Lu,H4o),e($,U4o),e($,xu),e(xu,yae),e(yae,J4o),e(xu,Y4o),e(xu,j$),e(j$,K4o),e(xu,Z4o),e($,ebo),e($,ku),e(ku,Lae),e(Lae,obo),e(ku,rbo),e(ku,D$),e(D$,tbo),e(ku,abo),e($,nbo),e($,Su),e(Su,xae),e(xae,sbo),e(Su,lbo),e(Su,G$),e(G$,ibo),e(Su,dbo),e($,cbo),e($,Ru),e(Ru,kae),e(kae,fbo),e(Ru,mbo),e(Ru,O$),e(O$,gbo),e(Ru,hbo),e($,pbo),e($,Bu),e(Bu,Sae),e(Sae,_bo),e(Bu,ubo),e(Bu,V$),e(V$,bbo),e(Bu,Fbo),e($,vbo),e($,Pu),e(Pu,Rae),e(Rae,Tbo),e(Pu,Mbo),e(Pu,X$),e(X$,Ebo),e(Pu,Cbo),e($,wbo),e($,$u),e($u,Bae),e(Bae,Abo),e($u,ybo),e($u,z$),e(z$,Lbo),e($u,xbo),e($,kbo),e($,Iu),e(Iu,Pae),e(Pae,Sbo),e(Iu,Rbo),e(Iu,Q$),e(Q$,Bbo),e(Iu,Pbo),e($,$bo),e($,qu),e(qu,$ae),e($ae,Ibo),e(qu,qbo),e(qu,W$),e(W$,Nbo),e(qu,jbo),e($,Dbo),e($,Nu),e(Nu,Iae),e(Iae,Gbo),e(Nu,Obo),e(Nu,H$),e(H$,Vbo),e(Nu,Xbo),e($,zbo),e($,ju),e(ju,qae),e(qae,Qbo),e(ju,Wbo),e(ju,U$),e(U$,Hbo),e(ju,Ubo),e($,Jbo),e($,Du),e(Du,Nae),e(Nae,Ybo),e(Du,Kbo),e(Du,J$),e(J$,Zbo),e(Du,e3o),e($,o3o),e($,Gu),e(Gu,jae),e(jae,r3o),e(Gu,t3o),e(Gu,Y$),e(Y$,a3o),e(Gu,n3o),e($,s3o),e($,Ou),e(Ou,Dae),e(Dae,l3o),e(Ou,i3o),e(Ou,K$),e(K$,d3o),e(Ou,c3o),e($,f3o),e($,Vu),e(Vu,Gae),e(Gae,m3o),e(Vu,g3o),e(Vu,Z$),e(Z$,h3o),e(Vu,p3o),e($,_3o),e($,Xu),e(Xu,Oae),e(Oae,u3o),e(Xu,b3o),e(Xu,eI),e(eI,F3o),e(Xu,v3o),e($,T3o),e($,zu),e(zu,Vae),e(Vae,M3o),e(zu,E3o),e(zu,oI),e(oI,C3o),e(zu,w3o),e($,A3o),e($,Qu),e(Qu,Xae),e(Xae,y3o),e(Qu,L3o),e(Qu,rI),e(rI,x3o),e(Qu,k3o),e($,S3o),e($,Wu),e(Wu,zae),e(zae,R3o),e(Wu,B3o),e(Wu,tI),e(tI,P3o),e(Wu,$3o),e($,I3o),e($,Hu),e(Hu,Qae),e(Qae,q3o),e(Hu,N3o),e(Hu,aI),e(aI,j3o),e(Hu,D3o),e($,G3o),e($,Uu),e(Uu,Wae),e(Wae,O3o),e(Uu,V3o),e(Uu,nI),e(nI,X3o),e(Uu,z3o),e($,Q3o),e($,Ju),e(Ju,Hae),e(Hae,W3o),e(Ju,H3o),e(Ju,sI),e(sI,U3o),e(Ju,J3o),e($,Y3o),e($,Yu),e(Yu,Uae),e(Uae,K3o),e(Yu,Z3o),e(Yu,lI),e(lI,e2o),e(Yu,o2o),e($,r2o),e($,Ku),e(Ku,Jae),e(Jae,t2o),e(Ku,a2o),e(Ku,iI),e(iI,n2o),e(Ku,s2o),e($,l2o),e($,Zu),e(Zu,Yae),e(Yae,i2o),e(Zu,d2o),e(Zu,dI),e(dI,c2o),e(Zu,f2o),e(je,m2o),e(je,e1),e(e1,g2o),e(e1,Kae),e(Kae,h2o),e(e1,p2o),e(e1,Zae),e(Zae,_2o),e(je,u2o),e(je,ene),e(ene,b2o),e(je,F2o),g(_5,je,null),b(c,sRe,u),b(c,nd,u),e(nd,o1),e(o1,one),g(u5,one,null),e(nd,v2o),e(nd,rne),e(rne,T2o),b(c,lRe,u),b(c,Zo,u),g(b5,Zo,null),e(Zo,M2o),e(Zo,sd),e(sd,E2o),e(sd,cI),e(cI,C2o),e(sd,w2o),e(sd,fI),e(fI,A2o),e(sd,y2o),e(Zo,L2o),e(Zo,F5),e(F5,x2o),e(F5,tne),e(tne,k2o),e(F5,S2o),e(Zo,R2o),e(Zo,Wr),g(v5,Wr,null),e(Wr,B2o),e(Wr,ane),e(ane,P2o),e(Wr,$2o),e(Wr,ld),e(ld,I2o),e(ld,nne),e(nne,q2o),e(ld,N2o),e(ld,mI),e(mI,j2o),e(ld,D2o),e(Wr,G2o),e(Wr,sne),e(sne,O2o),e(Wr,V2o),g(T5,Wr,null),e(Zo,X2o),e(Zo,De),g(M5,De,null),e(De,z2o),e(De,lne),e(lne,Q2o),e(De,W2o),e(De,Wa),e(Wa,H2o),e(Wa,ine),e(ine,U2o),e(Wa,J2o),e(Wa,dne),e(dne,Y2o),e(Wa,K2o),e(Wa,cne),e(cne,Z2o),e(Wa,eFo),e(De,oFo),e(De,I),e(I,r1),e(r1,fne),e(fne,rFo),e(r1,tFo),e(r1,gI),e(gI,aFo),e(r1,nFo),e(I,sFo),e(I,t1),e(t1,mne),e(mne,lFo),e(t1,iFo),e(t1,hI),e(hI,dFo),e(t1,cFo),e(I,fFo),e(I,a1),e(a1,gne),e(gne,mFo),e(a1,gFo),e(a1,pI),e(pI,hFo),e(a1,pFo),e(I,_Fo),e(I,n1),e(n1,hne),e(hne,uFo),e(n1,bFo),e(n1,_I),e(_I,FFo),e(n1,vFo),e(I,TFo),e(I,s1),e(s1,pne),e(pne,MFo),e(s1,EFo),e(s1,uI),e(uI,CFo),e(s1,wFo),e(I,AFo),e(I,l1),e(l1,_ne),e(_ne,yFo),e(l1,LFo),e(l1,bI),e(bI,xFo),e(l1,kFo),e(I,SFo),e(I,i1),e(i1,une),e(une,RFo),e(i1,BFo),e(i1,FI),e(FI,PFo),e(i1,$Fo),e(I,IFo),e(I,d1),e(d1,bne),e(bne,qFo),e(d1,NFo),e(d1,vI),e(vI,jFo),e(d1,DFo),e(I,GFo),e(I,c1),e(c1,Fne),e(Fne,OFo),e(c1,VFo),e(c1,TI),e(TI,XFo),e(c1,zFo),e(I,QFo),e(I,f1),e(f1,vne),e(vne,WFo),e(f1,HFo),e(f1,MI),e(MI,UFo),e(f1,JFo),e(I,YFo),e(I,m1),e(m1,Tne),e(Tne,KFo),e(m1,ZFo),e(m1,EI),e(EI,evo),e(m1,ovo),e(I,rvo),e(I,g1),e(g1,Mne),e(Mne,tvo),e(g1,avo),e(g1,CI),e(CI,nvo),e(g1,svo),e(I,lvo),e(I,h1),e(h1,Ene),e(Ene,ivo),e(h1,dvo),e(h1,wI),e(wI,cvo),e(h1,fvo),e(I,mvo),e(I,p1),e(p1,Cne),e(Cne,gvo),e(p1,hvo),e(p1,AI),e(AI,pvo),e(p1,_vo),e(I,uvo),e(I,_1),e(_1,wne),e(wne,bvo),e(_1,Fvo),e(_1,yI),e(yI,vvo),e(_1,Tvo),e(I,Mvo),e(I,u1),e(u1,Ane),e(Ane,Evo),e(u1,Cvo),e(u1,LI),e(LI,wvo),e(u1,Avo),e(I,yvo),e(I,b1),e(b1,yne),e(yne,Lvo),e(b1,xvo),e(b1,xI),e(xI,kvo),e(b1,Svo),e(I,Rvo),e(I,F1),e(F1,Lne),e(Lne,Bvo),e(F1,Pvo),e(F1,kI),e(kI,$vo),e(F1,Ivo),e(I,qvo),e(I,v1),e(v1,xne),e(xne,Nvo),e(v1,jvo),e(v1,SI),e(SI,Dvo),e(v1,Gvo),e(I,Ovo),e(I,T1),e(T1,kne),e(kne,Vvo),e(T1,Xvo),e(T1,RI),e(RI,zvo),e(T1,Qvo),e(I,Wvo),e(I,M1),e(M1,Sne),e(Sne,Hvo),e(M1,Uvo),e(M1,BI),e(BI,Jvo),e(M1,Yvo),e(I,Kvo),e(I,E1),e(E1,Rne),e(Rne,Zvo),e(E1,e6o),e(E1,PI),e(PI,o6o),e(E1,r6o),e(I,t6o),e(I,C1),e(C1,Bne),e(Bne,a6o),e(C1,n6o),e(C1,$I),e($I,s6o),e(C1,l6o),e(I,i6o),e(I,w1),e(w1,Pne),e(Pne,d6o),e(w1,c6o),e(w1,II),e(II,f6o),e(w1,m6o),e(I,g6o),e(I,A1),e(A1,$ne),e($ne,h6o),e(A1,p6o),e(A1,qI),e(qI,_6o),e(A1,u6o),e(I,b6o),e(I,y1),e(y1,Ine),e(Ine,F6o),e(y1,v6o),e(y1,NI),e(NI,T6o),e(y1,M6o),e(I,E6o),e(I,L1),e(L1,qne),e(qne,C6o),e(L1,w6o),e(L1,jI),e(jI,A6o),e(L1,y6o),e(I,L6o),e(I,x1),e(x1,Nne),e(Nne,x6o),e(x1,k6o),e(x1,DI),e(DI,S6o),e(x1,R6o),e(I,B6o),e(I,k1),e(k1,jne),e(jne,P6o),e(k1,$6o),e(k1,GI),e(GI,I6o),e(k1,q6o),e(I,N6o),e(I,S1),e(S1,Dne),e(Dne,j6o),e(S1,D6o),e(S1,OI),e(OI,G6o),e(S1,O6o),e(I,V6o),e(I,R1),e(R1,Gne),e(Gne,X6o),e(R1,z6o),e(R1,One),e(One,Q6o),e(R1,W6o),e(I,H6o),e(I,B1),e(B1,Vne),e(Vne,U6o),e(B1,J6o),e(B1,VI),e(VI,Y6o),e(B1,K6o),e(I,Z6o),e(I,P1),e(P1,Xne),e(Xne,eTo),e(P1,oTo),e(P1,XI),e(XI,rTo),e(P1,tTo),e(I,aTo),e(I,$1),e($1,zne),e(zne,nTo),e($1,sTo),e($1,zI),e(zI,lTo),e($1,iTo),e(I,dTo),e(I,I1),e(I1,Qne),e(Qne,cTo),e(I1,fTo),e(I1,QI),e(QI,mTo),e(I1,gTo),e(De,hTo),e(De,q1),e(q1,pTo),e(q1,Wne),e(Wne,_To),e(q1,uTo),e(q1,Hne),e(Hne,bTo),e(De,FTo),e(De,Une),e(Une,vTo),e(De,TTo),g(E5,De,null),b(c,iRe,u),b(c,id,u),e(id,N1),e(N1,Jne),g(C5,Jne,null),e(id,MTo),e(id,Yne),e(Yne,ETo),b(c,dRe,u),b(c,er,u),g(w5,er,null),e(er,CTo),e(er,dd),e(dd,wTo),e(dd,WI),e(WI,ATo),e(dd,yTo),e(dd,HI),e(HI,LTo),e(dd,xTo),e(er,kTo),e(er,A5),e(A5,STo),e(A5,Kne),e(Kne,RTo),e(A5,BTo),e(er,PTo),e(er,Hr),g(y5,Hr,null),e(Hr,$To),e(Hr,Zne),e(Zne,ITo),e(Hr,qTo),e(Hr,cd),e(cd,NTo),e(cd,ese),e(ese,jTo),e(cd,DTo),e(cd,UI),e(UI,GTo),e(cd,OTo),e(Hr,VTo),e(Hr,ose),e(ose,XTo),e(Hr,zTo),g(L5,Hr,null),e(er,QTo),e(er,Ge),g(x5,Ge,null),e(Ge,WTo),e(Ge,rse),e(rse,HTo),e(Ge,UTo),e(Ge,Ha),e(Ha,JTo),e(Ha,tse),e(tse,YTo),e(Ha,KTo),e(Ha,ase),e(ase,ZTo),e(Ha,e7o),e(Ha,nse),e(nse,o7o),e(Ha,r7o),e(Ge,t7o),e(Ge,se),e(se,j1),e(j1,sse),e(sse,a7o),e(j1,n7o),e(j1,JI),e(JI,s7o),e(j1,l7o),e(se,i7o),e(se,D1),e(D1,lse),e(lse,d7o),e(D1,c7o),e(D1,YI),e(YI,f7o),e(D1,m7o),e(se,g7o),e(se,G1),e(G1,ise),e(ise,h7o),e(G1,p7o),e(G1,KI),e(KI,_7o),e(G1,u7o),e(se,b7o),e(se,O1),e(O1,dse),e(dse,F7o),e(O1,v7o),e(O1,ZI),e(ZI,T7o),e(O1,M7o),e(se,E7o),e(se,V1),e(V1,cse),e(cse,C7o),e(V1,w7o),e(V1,eq),e(eq,A7o),e(V1,y7o),e(se,L7o),e(se,X1),e(X1,fse),e(fse,x7o),e(X1,k7o),e(X1,oq),e(oq,S7o),e(X1,R7o),e(se,B7o),e(se,z1),e(z1,mse),e(mse,P7o),e(z1,$7o),e(z1,rq),e(rq,I7o),e(z1,q7o),e(se,N7o),e(se,Q1),e(Q1,gse),e(gse,j7o),e(Q1,D7o),e(Q1,tq),e(tq,G7o),e(Q1,O7o),e(se,V7o),e(se,W1),e(W1,hse),e(hse,X7o),e(W1,z7o),e(W1,aq),e(aq,Q7o),e(W1,W7o),e(se,H7o),e(se,H1),e(H1,pse),e(pse,U7o),e(H1,J7o),e(H1,nq),e(nq,Y7o),e(H1,K7o),e(se,Z7o),e(se,U1),e(U1,_se),e(_se,eMo),e(U1,oMo),e(U1,sq),e(sq,rMo),e(U1,tMo),e(se,aMo),e(se,J1),e(J1,use),e(use,nMo),e(J1,sMo),e(J1,lq),e(lq,lMo),e(J1,iMo),e(se,dMo),e(se,Y1),e(Y1,bse),e(bse,cMo),e(Y1,fMo),e(Y1,iq),e(iq,mMo),e(Y1,gMo),e(se,hMo),e(se,K1),e(K1,Fse),e(Fse,pMo),e(K1,_Mo),e(K1,dq),e(dq,uMo),e(K1,bMo),e(se,FMo),e(se,Z1),e(Z1,vse),e(vse,vMo),e(Z1,TMo),e(Z1,cq),e(cq,MMo),e(Z1,EMo),e(se,CMo),e(se,e4),e(e4,Tse),e(Tse,wMo),e(e4,AMo),e(e4,fq),e(fq,yMo),e(e4,LMo),e(Ge,xMo),e(Ge,o4),e(o4,kMo),e(o4,Mse),e(Mse,SMo),e(o4,RMo),e(o4,Ese),e(Ese,BMo),e(Ge,PMo),e(Ge,Cse),e(Cse,$Mo),e(Ge,IMo),g(k5,Ge,null),b(c,cRe,u),b(c,fd,u),e(fd,r4),e(r4,wse),g(S5,wse,null),e(fd,qMo),e(fd,Ase),e(Ase,NMo),b(c,fRe,u),b(c,or,u),g(R5,or,null),e(or,jMo),e(or,md),e(md,DMo),e(md,mq),e(mq,GMo),e(md,OMo),e(md,gq),e(gq,VMo),e(md,XMo),e(or,zMo),e(or,B5),e(B5,QMo),e(B5,yse),e(yse,WMo),e(B5,HMo),e(or,UMo),e(or,Ur),g(P5,Ur,null),e(Ur,JMo),e(Ur,Lse),e(Lse,YMo),e(Ur,KMo),e(Ur,gd),e(gd,ZMo),e(gd,xse),e(xse,eEo),e(gd,oEo),e(gd,hq),e(hq,rEo),e(gd,tEo),e(Ur,aEo),e(Ur,kse),e(kse,nEo),e(Ur,sEo),g($5,Ur,null),e(or,lEo),e(or,Oe),g(I5,Oe,null),e(Oe,iEo),e(Oe,Sse),e(Sse,dEo),e(Oe,cEo),e(Oe,Ua),e(Ua,fEo),e(Ua,Rse),e(Rse,mEo),e(Ua,gEo),e(Ua,Bse),e(Bse,hEo),e(Ua,pEo),e(Ua,Pse),e(Pse,_Eo),e(Ua,uEo),e(Oe,bEo),e(Oe,y),e(y,t4),e(t4,$se),e($se,FEo),e(t4,vEo),e(t4,pq),e(pq,TEo),e(t4,MEo),e(y,EEo),e(y,a4),e(a4,Ise),e(Ise,CEo),e(a4,wEo),e(a4,_q),e(_q,AEo),e(a4,yEo),e(y,LEo),e(y,n4),e(n4,qse),e(qse,xEo),e(n4,kEo),e(n4,uq),e(uq,SEo),e(n4,REo),e(y,BEo),e(y,s4),e(s4,Nse),e(Nse,PEo),e(s4,$Eo),e(s4,bq),e(bq,IEo),e(s4,qEo),e(y,NEo),e(y,l4),e(l4,jse),e(jse,jEo),e(l4,DEo),e(l4,Fq),e(Fq,GEo),e(l4,OEo),e(y,VEo),e(y,i4),e(i4,Dse),e(Dse,XEo),e(i4,zEo),e(i4,vq),e(vq,QEo),e(i4,WEo),e(y,HEo),e(y,d4),e(d4,Gse),e(Gse,UEo),e(d4,JEo),e(d4,Tq),e(Tq,YEo),e(d4,KEo),e(y,ZEo),e(y,c4),e(c4,Ose),e(Ose,eCo),e(c4,oCo),e(c4,Mq),e(Mq,rCo),e(c4,tCo),e(y,aCo),e(y,f4),e(f4,Vse),e(Vse,nCo),e(f4,sCo),e(f4,Eq),e(Eq,lCo),e(f4,iCo),e(y,dCo),e(y,m4),e(m4,Xse),e(Xse,cCo),e(m4,fCo),e(m4,Cq),e(Cq,mCo),e(m4,gCo),e(y,hCo),e(y,g4),e(g4,zse),e(zse,pCo),e(g4,_Co),e(g4,wq),e(wq,uCo),e(g4,bCo),e(y,FCo),e(y,h4),e(h4,Qse),e(Qse,vCo),e(h4,TCo),e(h4,Aq),e(Aq,MCo),e(h4,ECo),e(y,CCo),e(y,p4),e(p4,Wse),e(Wse,wCo),e(p4,ACo),e(p4,yq),e(yq,yCo),e(p4,LCo),e(y,xCo),e(y,_4),e(_4,Hse),e(Hse,kCo),e(_4,SCo),e(_4,Lq),e(Lq,RCo),e(_4,BCo),e(y,PCo),e(y,u4),e(u4,Use),e(Use,$Co),e(u4,ICo),e(u4,xq),e(xq,qCo),e(u4,NCo),e(y,jCo),e(y,b4),e(b4,Jse),e(Jse,DCo),e(b4,GCo),e(b4,kq),e(kq,OCo),e(b4,VCo),e(y,XCo),e(y,F4),e(F4,Yse),e(Yse,zCo),e(F4,QCo),e(F4,Sq),e(Sq,WCo),e(F4,HCo),e(y,UCo),e(y,v4),e(v4,Kse),e(Kse,JCo),e(v4,YCo),e(v4,Rq),e(Rq,KCo),e(v4,ZCo),e(y,e5o),e(y,T4),e(T4,Zse),e(Zse,o5o),e(T4,r5o),e(T4,Bq),e(Bq,t5o),e(T4,a5o),e(y,n5o),e(y,M4),e(M4,ele),e(ele,s5o),e(M4,l5o),e(M4,Pq),e(Pq,i5o),e(M4,d5o),e(y,c5o),e(y,E4),e(E4,ole),e(ole,f5o),e(E4,m5o),e(E4,$q),e($q,g5o),e(E4,h5o),e(y,p5o),e(y,C4),e(C4,rle),e(rle,_5o),e(C4,u5o),e(C4,Iq),e(Iq,b5o),e(C4,F5o),e(y,v5o),e(y,w4),e(w4,tle),e(tle,T5o),e(w4,M5o),e(w4,qq),e(qq,E5o),e(w4,C5o),e(y,w5o),e(y,A4),e(A4,ale),e(ale,A5o),e(A4,y5o),e(A4,Nq),e(Nq,L5o),e(A4,x5o),e(y,k5o),e(y,y4),e(y4,nle),e(nle,S5o),e(y4,R5o),e(y4,jq),e(jq,B5o),e(y4,P5o),e(y,$5o),e(y,L4),e(L4,sle),e(sle,I5o),e(L4,q5o),e(L4,Dq),e(Dq,N5o),e(L4,j5o),e(y,D5o),e(y,x4),e(x4,lle),e(lle,G5o),e(x4,O5o),e(x4,Gq),e(Gq,V5o),e(x4,X5o),e(y,z5o),e(y,k4),e(k4,ile),e(ile,Q5o),e(k4,W5o),e(k4,Oq),e(Oq,H5o),e(k4,U5o),e(y,J5o),e(y,S4),e(S4,dle),e(dle,Y5o),e(S4,K5o),e(S4,Vq),e(Vq,Z5o),e(S4,ewo),e(y,owo),e(y,R4),e(R4,cle),e(cle,rwo),e(R4,two),e(R4,Xq),e(Xq,awo),e(R4,nwo),e(y,swo),e(y,B4),e(B4,fle),e(fle,lwo),e(B4,iwo),e(B4,zq),e(zq,dwo),e(B4,cwo),e(y,fwo),e(y,P4),e(P4,mle),e(mle,mwo),e(P4,gwo),e(P4,Qq),e(Qq,hwo),e(P4,pwo),e(y,_wo),e(y,$4),e($4,gle),e(gle,uwo),e($4,bwo),e($4,Wq),e(Wq,Fwo),e($4,vwo),e(y,Two),e(y,I4),e(I4,hle),e(hle,Mwo),e(I4,Ewo),e(I4,Hq),e(Hq,Cwo),e(I4,wwo),e(y,Awo),e(y,q4),e(q4,ple),e(ple,ywo),e(q4,Lwo),e(q4,Uq),e(Uq,xwo),e(q4,kwo),e(y,Swo),e(y,N4),e(N4,_le),e(_le,Rwo),e(N4,Bwo),e(N4,Jq),e(Jq,Pwo),e(N4,$wo),e(y,Iwo),e(y,j4),e(j4,ule),e(ule,qwo),e(j4,Nwo),e(j4,Yq),e(Yq,jwo),e(j4,Dwo),e(y,Gwo),e(y,D4),e(D4,ble),e(ble,Owo),e(D4,Vwo),e(D4,Kq),e(Kq,Xwo),e(D4,zwo),e(y,Qwo),e(y,G4),e(G4,Fle),e(Fle,Wwo),e(G4,Hwo),e(G4,Zq),e(Zq,Uwo),e(G4,Jwo),e(y,Ywo),e(y,O4),e(O4,vle),e(vle,Kwo),e(O4,Zwo),e(O4,eN),e(eN,eAo),e(O4,oAo),e(y,rAo),e(y,V4),e(V4,Tle),e(Tle,tAo),e(V4,aAo),e(V4,oN),e(oN,nAo),e(V4,sAo),e(y,lAo),e(y,X4),e(X4,Mle),e(Mle,iAo),e(X4,dAo),e(X4,rN),e(rN,cAo),e(X4,fAo),e(y,mAo),e(y,z4),e(z4,Ele),e(Ele,gAo),e(z4,hAo),e(z4,tN),e(tN,pAo),e(z4,_Ao),e(y,uAo),e(y,Q4),e(Q4,Cle),e(Cle,bAo),e(Q4,FAo),e(Q4,aN),e(aN,vAo),e(Q4,TAo),e(y,MAo),e(y,W4),e(W4,wle),e(wle,EAo),e(W4,CAo),e(W4,nN),e(nN,wAo),e(W4,AAo),e(y,yAo),e(y,H4),e(H4,Ale),e(Ale,LAo),e(H4,xAo),e(H4,sN),e(sN,kAo),e(H4,SAo),e(Oe,RAo),e(Oe,U4),e(U4,BAo),e(U4,yle),e(yle,PAo),e(U4,$Ao),e(U4,Lle),e(Lle,IAo),e(Oe,qAo),e(Oe,xle),e(xle,NAo),e(Oe,jAo),g(q5,Oe,null),b(c,mRe,u),b(c,hd,u),e(hd,J4),e(J4,kle),g(N5,kle,null),e(hd,DAo),e(hd,Sle),e(Sle,GAo),b(c,gRe,u),b(c,rr,u),g(j5,rr,null),e(rr,OAo),e(rr,pd),e(pd,VAo),e(pd,lN),e(lN,XAo),e(pd,zAo),e(pd,iN),e(iN,QAo),e(pd,WAo),e(rr,HAo),e(rr,D5),e(D5,UAo),e(D5,Rle),e(Rle,JAo),e(D5,YAo),e(rr,KAo),e(rr,Jr),g(G5,Jr,null),e(Jr,ZAo),e(Jr,Ble),e(Ble,e0o),e(Jr,o0o),e(Jr,_d),e(_d,r0o),e(_d,Ple),e(Ple,t0o),e(_d,a0o),e(_d,dN),e(dN,n0o),e(_d,s0o),e(Jr,l0o),e(Jr,$le),e($le,i0o),e(Jr,d0o),g(O5,Jr,null),e(rr,c0o),e(rr,Ve),g(V5,Ve,null),e(Ve,f0o),e(Ve,Ile),e(Ile,m0o),e(Ve,g0o),e(Ve,Ja),e(Ja,h0o),e(Ja,qle),e(qle,p0o),e(Ja,_0o),e(Ja,Nle),e(Nle,u0o),e(Ja,b0o),e(Ja,jle),e(jle,F0o),e(Ja,v0o),e(Ve,T0o),e(Ve,G),e(G,Y4),e(Y4,Dle),e(Dle,M0o),e(Y4,E0o),e(Y4,cN),e(cN,C0o),e(Y4,w0o),e(G,A0o),e(G,K4),e(K4,Gle),e(Gle,y0o),e(K4,L0o),e(K4,fN),e(fN,x0o),e(K4,k0o),e(G,S0o),e(G,Z4),e(Z4,Ole),e(Ole,R0o),e(Z4,B0o),e(Z4,mN),e(mN,P0o),e(Z4,$0o),e(G,I0o),e(G,eb),e(eb,Vle),e(Vle,q0o),e(eb,N0o),e(eb,gN),e(gN,j0o),e(eb,D0o),e(G,G0o),e(G,ob),e(ob,Xle),e(Xle,O0o),e(ob,V0o),e(ob,hN),e(hN,X0o),e(ob,z0o),e(G,Q0o),e(G,rb),e(rb,zle),e(zle,W0o),e(rb,H0o),e(rb,pN),e(pN,U0o),e(rb,J0o),e(G,Y0o),e(G,tb),e(tb,Qle),e(Qle,K0o),e(tb,Z0o),e(tb,_N),e(_N,eyo),e(tb,oyo),e(G,ryo),e(G,ab),e(ab,Wle),e(Wle,tyo),e(ab,ayo),e(ab,uN),e(uN,nyo),e(ab,syo),e(G,lyo),e(G,nb),e(nb,Hle),e(Hle,iyo),e(nb,dyo),e(nb,bN),e(bN,cyo),e(nb,fyo),e(G,myo),e(G,sb),e(sb,Ule),e(Ule,gyo),e(sb,hyo),e(sb,FN),e(FN,pyo),e(sb,_yo),e(G,uyo),e(G,lb),e(lb,Jle),e(Jle,byo),e(lb,Fyo),e(lb,vN),e(vN,vyo),e(lb,Tyo),e(G,Myo),e(G,ib),e(ib,Yle),e(Yle,Eyo),e(ib,Cyo),e(ib,TN),e(TN,wyo),e(ib,Ayo),e(G,yyo),e(G,db),e(db,Kle),e(Kle,Lyo),e(db,xyo),e(db,MN),e(MN,kyo),e(db,Syo),e(G,Ryo),e(G,cb),e(cb,Zle),e(Zle,Byo),e(cb,Pyo),e(cb,EN),e(EN,$yo),e(cb,Iyo),e(G,qyo),e(G,fb),e(fb,eie),e(eie,Nyo),e(fb,jyo),e(fb,CN),e(CN,Dyo),e(fb,Gyo),e(G,Oyo),e(G,mb),e(mb,oie),e(oie,Vyo),e(mb,Xyo),e(mb,wN),e(wN,zyo),e(mb,Qyo),e(G,Wyo),e(G,gb),e(gb,rie),e(rie,Hyo),e(gb,Uyo),e(gb,AN),e(AN,Jyo),e(gb,Yyo),e(G,Kyo),e(G,hb),e(hb,tie),e(tie,Zyo),e(hb,eLo),e(hb,yN),e(yN,oLo),e(hb,rLo),e(G,tLo),e(G,pb),e(pb,aie),e(aie,aLo),e(pb,nLo),e(pb,LN),e(LN,sLo),e(pb,lLo),e(G,iLo),e(G,_b),e(_b,nie),e(nie,dLo),e(_b,cLo),e(_b,xN),e(xN,fLo),e(_b,mLo),e(G,gLo),e(G,ub),e(ub,sie),e(sie,hLo),e(ub,pLo),e(ub,kN),e(kN,_Lo),e(ub,uLo),e(G,bLo),e(G,bb),e(bb,lie),e(lie,FLo),e(bb,vLo),e(bb,SN),e(SN,TLo),e(bb,MLo),e(G,ELo),e(G,Fb),e(Fb,iie),e(iie,CLo),e(Fb,wLo),e(Fb,RN),e(RN,ALo),e(Fb,yLo),e(G,LLo),e(G,vb),e(vb,die),e(die,xLo),e(vb,kLo),e(vb,BN),e(BN,SLo),e(vb,RLo),e(G,BLo),e(G,Tb),e(Tb,cie),e(cie,PLo),e(Tb,$Lo),e(Tb,PN),e(PN,ILo),e(Tb,qLo),e(G,NLo),e(G,Mb),e(Mb,fie),e(fie,jLo),e(Mb,DLo),e(Mb,$N),e($N,GLo),e(Mb,OLo),e(G,VLo),e(G,Eb),e(Eb,mie),e(mie,XLo),e(Eb,zLo),e(Eb,IN),e(IN,QLo),e(Eb,WLo),e(G,HLo),e(G,Cb),e(Cb,gie),e(gie,ULo),e(Cb,JLo),e(Cb,qN),e(qN,YLo),e(Cb,KLo),e(Ve,ZLo),e(Ve,wb),e(wb,e8o),e(wb,hie),e(hie,o8o),e(wb,r8o),e(wb,pie),e(pie,t8o),e(Ve,a8o),e(Ve,_ie),e(_ie,n8o),e(Ve,s8o),g(X5,Ve,null),b(c,hRe,u),b(c,ud,u),e(ud,Ab),e(Ab,uie),g(z5,uie,null),e(ud,l8o),e(ud,bie),e(bie,i8o),b(c,pRe,u),b(c,tr,u),g(Q5,tr,null),e(tr,d8o),e(tr,bd),e(bd,c8o),e(bd,NN),e(NN,f8o),e(bd,m8o),e(bd,jN),e(jN,g8o),e(bd,h8o),e(tr,p8o),e(tr,W5),e(W5,_8o),e(W5,Fie),e(Fie,u8o),e(W5,b8o),e(tr,F8o),e(tr,Yr),g(H5,Yr,null),e(Yr,v8o),e(Yr,vie),e(vie,T8o),e(Yr,M8o),e(Yr,Fd),e(Fd,E8o),e(Fd,Tie),e(Tie,C8o),e(Fd,w8o),e(Fd,DN),e(DN,A8o),e(Fd,y8o),e(Yr,L8o),e(Yr,Mie),e(Mie,x8o),e(Yr,k8o),g(U5,Yr,null),e(tr,S8o),e(tr,Xe),g(J5,Xe,null),e(Xe,R8o),e(Xe,Eie),e(Eie,B8o),e(Xe,P8o),e(Xe,Ya),e(Ya,$8o),e(Ya,Cie),e(Cie,I8o),e(Ya,q8o),e(Ya,wie),e(wie,N8o),e(Ya,j8o),e(Ya,Aie),e(Aie,D8o),e(Ya,G8o),e(Xe,O8o),e(Xe,da),e(da,yb),e(yb,yie),e(yie,V8o),e(yb,X8o),e(yb,GN),e(GN,z8o),e(yb,Q8o),e(da,W8o),e(da,Lb),e(Lb,Lie),e(Lie,H8o),e(Lb,U8o),e(Lb,ON),e(ON,J8o),e(Lb,Y8o),e(da,K8o),e(da,xb),e(xb,xie),e(xie,Z8o),e(xb,e9o),e(xb,VN),e(VN,o9o),e(xb,r9o),e(da,t9o),e(da,kb),e(kb,kie),e(kie,a9o),e(kb,n9o),e(kb,XN),e(XN,s9o),e(kb,l9o),e(da,i9o),e(da,Sb),e(Sb,Sie),e(Sie,d9o),e(Sb,c9o),e(Sb,zN),e(zN,f9o),e(Sb,m9o),e(Xe,g9o),e(Xe,Rb),e(Rb,h9o),e(Rb,Rie),e(Rie,p9o),e(Rb,_9o),e(Rb,Bie),e(Bie,u9o),e(Xe,b9o),e(Xe,Pie),e(Pie,F9o),e(Xe,v9o),g(Y5,Xe,null),b(c,_Re,u),b(c,vd,u),e(vd,Bb),e(Bb,$ie),g(K5,$ie,null),e(vd,T9o),e(vd,Iie),e(Iie,M9o),b(c,uRe,u),b(c,ar,u),g(Z5,ar,null),e(ar,E9o),e(ar,Td),e(Td,C9o),e(Td,QN),e(QN,w9o),e(Td,A9o),e(Td,WN),e(WN,y9o),e(Td,L9o),e(ar,x9o),e(ar,ew),e(ew,k9o),e(ew,qie),e(qie,S9o),e(ew,R9o),e(ar,B9o),e(ar,Kr),g(ow,Kr,null),e(Kr,P9o),e(Kr,Nie),e(Nie,$9o),e(Kr,I9o),e(Kr,Md),e(Md,q9o),e(Md,jie),e(jie,N9o),e(Md,j9o),e(Md,HN),e(HN,D9o),e(Md,G9o),e(Kr,O9o),e(Kr,Die),e(Die,V9o),e(Kr,X9o),g(rw,Kr,null),e(ar,z9o),e(ar,ze),g(tw,ze,null),e(ze,Q9o),e(ze,Gie),e(Gie,W9o),e(ze,H9o),e(ze,Ka),e(Ka,U9o),e(Ka,Oie),e(Oie,J9o),e(Ka,Y9o),e(Ka,Vie),e(Vie,K9o),e(Ka,Z9o),e(Ka,Xie),e(Xie,exo),e(Ka,oxo),e(ze,rxo),e(ze,j),e(j,Pb),e(Pb,zie),e(zie,txo),e(Pb,axo),e(Pb,UN),e(UN,nxo),e(Pb,sxo),e(j,lxo),e(j,$b),e($b,Qie),e(Qie,ixo),e($b,dxo),e($b,JN),e(JN,cxo),e($b,fxo),e(j,mxo),e(j,Ib),e(Ib,Wie),e(Wie,gxo),e(Ib,hxo),e(Ib,YN),e(YN,pxo),e(Ib,_xo),e(j,uxo),e(j,qb),e(qb,Hie),e(Hie,bxo),e(qb,Fxo),e(qb,KN),e(KN,vxo),e(qb,Txo),e(j,Mxo),e(j,Nb),e(Nb,Uie),e(Uie,Exo),e(Nb,Cxo),e(Nb,ZN),e(ZN,wxo),e(Nb,Axo),e(j,yxo),e(j,jb),e(jb,Jie),e(Jie,Lxo),e(jb,xxo),e(jb,ej),e(ej,kxo),e(jb,Sxo),e(j,Rxo),e(j,Db),e(Db,Yie),e(Yie,Bxo),e(Db,Pxo),e(Db,oj),e(oj,$xo),e(Db,Ixo),e(j,qxo),e(j,Gb),e(Gb,Kie),e(Kie,Nxo),e(Gb,jxo),e(Gb,rj),e(rj,Dxo),e(Gb,Gxo),e(j,Oxo),e(j,Ob),e(Ob,Zie),e(Zie,Vxo),e(Ob,Xxo),e(Ob,tj),e(tj,zxo),e(Ob,Qxo),e(j,Wxo),e(j,Vb),e(Vb,ede),e(ede,Hxo),e(Vb,Uxo),e(Vb,aj),e(aj,Jxo),e(Vb,Yxo),e(j,Kxo),e(j,Xb),e(Xb,ode),e(ode,Zxo),e(Xb,eko),e(Xb,nj),e(nj,oko),e(Xb,rko),e(j,tko),e(j,zb),e(zb,rde),e(rde,ako),e(zb,nko),e(zb,sj),e(sj,sko),e(zb,lko),e(j,iko),e(j,Qb),e(Qb,tde),e(tde,dko),e(Qb,cko),e(Qb,lj),e(lj,fko),e(Qb,mko),e(j,gko),e(j,Wb),e(Wb,ade),e(ade,hko),e(Wb,pko),e(Wb,ij),e(ij,_ko),e(Wb,uko),e(j,bko),e(j,Hb),e(Hb,nde),e(nde,Fko),e(Hb,vko),e(Hb,dj),e(dj,Tko),e(Hb,Mko),e(j,Eko),e(j,Ub),e(Ub,sde),e(sde,Cko),e(Ub,wko),e(Ub,cj),e(cj,Ako),e(Ub,yko),e(j,Lko),e(j,Jb),e(Jb,lde),e(lde,xko),e(Jb,kko),e(Jb,fj),e(fj,Sko),e(Jb,Rko),e(j,Bko),e(j,Yb),e(Yb,ide),e(ide,Pko),e(Yb,$ko),e(Yb,mj),e(mj,Iko),e(Yb,qko),e(j,Nko),e(j,Kb),e(Kb,dde),e(dde,jko),e(Kb,Dko),e(Kb,gj),e(gj,Gko),e(Kb,Oko),e(j,Vko),e(j,Zb),e(Zb,cde),e(cde,Xko),e(Zb,zko),e(Zb,hj),e(hj,Qko),e(Zb,Wko),e(j,Hko),e(j,e3),e(e3,fde),e(fde,Uko),e(e3,Jko),e(e3,pj),e(pj,Yko),e(e3,Kko),e(j,Zko),e(j,o3),e(o3,mde),e(mde,eSo),e(o3,oSo),e(o3,_j),e(_j,rSo),e(o3,tSo),e(j,aSo),e(j,r3),e(r3,gde),e(gde,nSo),e(r3,sSo),e(r3,uj),e(uj,lSo),e(r3,iSo),e(j,dSo),e(j,t3),e(t3,hde),e(hde,cSo),e(t3,fSo),e(t3,bj),e(bj,mSo),e(t3,gSo),e(j,hSo),e(j,a3),e(a3,pde),e(pde,pSo),e(a3,_So),e(a3,Fj),e(Fj,uSo),e(a3,bSo),e(j,FSo),e(j,n3),e(n3,_de),e(_de,vSo),e(n3,TSo),e(n3,vj),e(vj,MSo),e(n3,ESo),e(j,CSo),e(j,s3),e(s3,ude),e(ude,wSo),e(s3,ASo),e(s3,Tj),e(Tj,ySo),e(s3,LSo),e(j,xSo),e(j,l3),e(l3,bde),e(bde,kSo),e(l3,SSo),e(l3,Mj),e(Mj,RSo),e(l3,BSo),e(j,PSo),e(j,i3),e(i3,Fde),e(Fde,$So),e(i3,ISo),e(i3,Ej),e(Ej,qSo),e(i3,NSo),e(j,jSo),e(j,d3),e(d3,vde),e(vde,DSo),e(d3,GSo),e(d3,Cj),e(Cj,OSo),e(d3,VSo),e(j,XSo),e(j,c3),e(c3,Tde),e(Tde,zSo),e(c3,QSo),e(c3,wj),e(wj,WSo),e(c3,HSo),e(j,USo),e(j,f3),e(f3,Mde),e(Mde,JSo),e(f3,YSo),e(f3,Aj),e(Aj,KSo),e(f3,ZSo),e(j,eRo),e(j,m3),e(m3,Ede),e(Ede,oRo),e(m3,rRo),e(m3,yj),e(yj,tRo),e(m3,aRo),e(ze,nRo),e(ze,g3),e(g3,sRo),e(g3,Cde),e(Cde,lRo),e(g3,iRo),e(g3,wde),e(wde,dRo),e(ze,cRo),e(ze,Ade),e(Ade,fRo),e(ze,mRo),g(aw,ze,null),b(c,bRe,u),b(c,Ed,u),e(Ed,h3),e(h3,yde),g(nw,yde,null),e(Ed,gRo),e(Ed,Lde),e(Lde,hRo),b(c,FRe,u),b(c,nr,u),g(sw,nr,null),e(nr,pRo),e(nr,Cd),e(Cd,_Ro),e(Cd,Lj),e(Lj,uRo),e(Cd,bRo),e(Cd,xj),e(xj,FRo),e(Cd,vRo),e(nr,TRo),e(nr,lw),e(lw,MRo),e(lw,xde),e(xde,ERo),e(lw,CRo),e(nr,wRo),e(nr,Zr),g(iw,Zr,null),e(Zr,ARo),e(Zr,kde),e(kde,yRo),e(Zr,LRo),e(Zr,wd),e(wd,xRo),e(wd,Sde),e(Sde,kRo),e(wd,SRo),e(wd,kj),e(kj,RRo),e(wd,BRo),e(Zr,PRo),e(Zr,Rde),e(Rde,$Ro),e(Zr,IRo),g(dw,Zr,null),e(nr,qRo),e(nr,Qe),g(cw,Qe,null),e(Qe,NRo),e(Qe,Bde),e(Bde,jRo),e(Qe,DRo),e(Qe,Za),e(Za,GRo),e(Za,Pde),e(Pde,ORo),e(Za,VRo),e(Za,$de),e($de,XRo),e(Za,zRo),e(Za,Ide),e(Ide,QRo),e(Za,WRo),e(Qe,HRo),e(Qe,R),e(R,p3),e(p3,qde),e(qde,URo),e(p3,JRo),e(p3,Sj),e(Sj,YRo),e(p3,KRo),e(R,ZRo),e(R,_3),e(_3,Nde),e(Nde,eBo),e(_3,oBo),e(_3,Rj),e(Rj,rBo),e(_3,tBo),e(R,aBo),e(R,u3),e(u3,jde),e(jde,nBo),e(u3,sBo),e(u3,Bj),e(Bj,lBo),e(u3,iBo),e(R,dBo),e(R,b3),e(b3,Dde),e(Dde,cBo),e(b3,fBo),e(b3,Pj),e(Pj,mBo),e(b3,gBo),e(R,hBo),e(R,F3),e(F3,Gde),e(Gde,pBo),e(F3,_Bo),e(F3,$j),e($j,uBo),e(F3,bBo),e(R,FBo),e(R,v3),e(v3,Ode),e(Ode,vBo),e(v3,TBo),e(v3,Ij),e(Ij,MBo),e(v3,EBo),e(R,CBo),e(R,T3),e(T3,Vde),e(Vde,wBo),e(T3,ABo),e(T3,qj),e(qj,yBo),e(T3,LBo),e(R,xBo),e(R,M3),e(M3,Xde),e(Xde,kBo),e(M3,SBo),e(M3,Nj),e(Nj,RBo),e(M3,BBo),e(R,PBo),e(R,E3),e(E3,zde),e(zde,$Bo),e(E3,IBo),e(E3,jj),e(jj,qBo),e(E3,NBo),e(R,jBo),e(R,C3),e(C3,Qde),e(Qde,DBo),e(C3,GBo),e(C3,Dj),e(Dj,OBo),e(C3,VBo),e(R,XBo),e(R,w3),e(w3,Wde),e(Wde,zBo),e(w3,QBo),e(w3,Gj),e(Gj,WBo),e(w3,HBo),e(R,UBo),e(R,A3),e(A3,Hde),e(Hde,JBo),e(A3,YBo),e(A3,Oj),e(Oj,KBo),e(A3,ZBo),e(R,ePo),e(R,y3),e(y3,Ude),e(Ude,oPo),e(y3,rPo),e(y3,Vj),e(Vj,tPo),e(y3,aPo),e(R,nPo),e(R,L3),e(L3,Jde),e(Jde,sPo),e(L3,lPo),e(L3,Xj),e(Xj,iPo),e(L3,dPo),e(R,cPo),e(R,x3),e(x3,Yde),e(Yde,fPo),e(x3,mPo),e(x3,zj),e(zj,gPo),e(x3,hPo),e(R,pPo),e(R,k3),e(k3,Kde),e(Kde,_Po),e(k3,uPo),e(k3,Qj),e(Qj,bPo),e(k3,FPo),e(R,vPo),e(R,S3),e(S3,Zde),e(Zde,TPo),e(S3,MPo),e(S3,Wj),e(Wj,EPo),e(S3,CPo),e(R,wPo),e(R,R3),e(R3,ece),e(ece,APo),e(R3,yPo),e(R3,Hj),e(Hj,LPo),e(R3,xPo),e(R,kPo),e(R,B3),e(B3,oce),e(oce,SPo),e(B3,RPo),e(B3,Uj),e(Uj,BPo),e(B3,PPo),e(R,$Po),e(R,P3),e(P3,rce),e(rce,IPo),e(P3,qPo),e(P3,Jj),e(Jj,NPo),e(P3,jPo),e(R,DPo),e(R,$3),e($3,tce),e(tce,GPo),e($3,OPo),e($3,Yj),e(Yj,VPo),e($3,XPo),e(R,zPo),e(R,I3),e(I3,ace),e(ace,QPo),e(I3,WPo),e(I3,Kj),e(Kj,HPo),e(I3,UPo),e(R,JPo),e(R,q3),e(q3,nce),e(nce,YPo),e(q3,KPo),e(q3,Zj),e(Zj,ZPo),e(q3,e$o),e(R,o$o),e(R,N3),e(N3,sce),e(sce,r$o),e(N3,t$o),e(N3,eD),e(eD,a$o),e(N3,n$o),e(R,s$o),e(R,j3),e(j3,lce),e(lce,l$o),e(j3,i$o),e(j3,oD),e(oD,d$o),e(j3,c$o),e(R,f$o),e(R,D3),e(D3,ice),e(ice,m$o),e(D3,g$o),e(D3,rD),e(rD,h$o),e(D3,p$o),e(R,_$o),e(R,G3),e(G3,dce),e(dce,u$o),e(G3,b$o),e(G3,tD),e(tD,F$o),e(G3,v$o),e(R,T$o),e(R,O3),e(O3,cce),e(cce,M$o),e(O3,E$o),e(O3,aD),e(aD,C$o),e(O3,w$o),e(R,A$o),e(R,V3),e(V3,fce),e(fce,y$o),e(V3,L$o),e(V3,nD),e(nD,x$o),e(V3,k$o),e(R,S$o),e(R,X3),e(X3,mce),e(mce,R$o),e(X3,B$o),e(X3,sD),e(sD,P$o),e(X3,$$o),e(R,I$o),e(R,z3),e(z3,gce),e(gce,q$o),e(z3,N$o),e(z3,lD),e(lD,j$o),e(z3,D$o),e(R,G$o),e(R,Q3),e(Q3,hce),e(hce,O$o),e(Q3,V$o),e(Q3,iD),e(iD,X$o),e(Q3,z$o),e(R,Q$o),e(R,W3),e(W3,pce),e(pce,W$o),e(W3,H$o),e(W3,dD),e(dD,U$o),e(W3,J$o),e(R,Y$o),e(R,H3),e(H3,_ce),e(_ce,K$o),e(H3,Z$o),e(H3,cD),e(cD,eIo),e(H3,oIo),e(R,rIo),e(R,U3),e(U3,uce),e(uce,tIo),e(U3,aIo),e(U3,fD),e(fD,nIo),e(U3,sIo),e(R,lIo),e(R,J3),e(J3,bce),e(bce,iIo),e(J3,dIo),e(J3,mD),e(mD,cIo),e(J3,fIo),e(R,mIo),e(R,Y3),e(Y3,Fce),e(Fce,gIo),e(Y3,hIo),e(Y3,gD),e(gD,pIo),e(Y3,_Io),e(R,uIo),e(R,K3),e(K3,vce),e(vce,bIo),e(K3,FIo),e(K3,hD),e(hD,vIo),e(K3,TIo),e(R,MIo),e(R,Z3),e(Z3,Tce),e(Tce,EIo),e(Z3,CIo),e(Z3,pD),e(pD,wIo),e(Z3,AIo),e(Qe,yIo),e(Qe,e2),e(e2,LIo),e(e2,Mce),e(Mce,xIo),e(e2,kIo),e(e2,Ece),e(Ece,SIo),e(Qe,RIo),e(Qe,Cce),e(Cce,BIo),e(Qe,PIo),g(fw,Qe,null),b(c,vRe,u),b(c,Ad,u),e(Ad,o2),e(o2,wce),g(mw,wce,null),e(Ad,$Io),e(Ad,Ace),e(Ace,IIo),b(c,TRe,u),b(c,sr,u),g(gw,sr,null),e(sr,qIo),e(sr,yd),e(yd,NIo),e(yd,_D),e(_D,jIo),e(yd,DIo),e(yd,uD),e(uD,GIo),e(yd,OIo),e(sr,VIo),e(sr,hw),e(hw,XIo),e(hw,yce),e(yce,zIo),e(hw,QIo),e(sr,WIo),e(sr,et),g(pw,et,null),e(et,HIo),e(et,Lce),e(Lce,UIo),e(et,JIo),e(et,Ld),e(Ld,YIo),e(Ld,xce),e(xce,KIo),e(Ld,ZIo),e(Ld,bD),e(bD,eqo),e(Ld,oqo),e(et,rqo),e(et,kce),e(kce,tqo),e(et,aqo),g(_w,et,null),e(sr,nqo),e(sr,We),g(uw,We,null),e(We,sqo),e(We,Sce),e(Sce,lqo),e(We,iqo),e(We,en),e(en,dqo),e(en,Rce),e(Rce,cqo),e(en,fqo),e(en,Bce),e(Bce,mqo),e(en,gqo),e(en,Pce),e(Pce,hqo),e(en,pqo),e(We,_qo),e(We,$ce),e($ce,r2),e(r2,Ice),e(Ice,uqo),e(r2,bqo),e(r2,FD),e(FD,Fqo),e(r2,vqo),e(We,Tqo),e(We,t2),e(t2,Mqo),e(t2,qce),e(qce,Eqo),e(t2,Cqo),e(t2,Nce),e(Nce,wqo),e(We,Aqo),e(We,jce),e(jce,yqo),e(We,Lqo),g(bw,We,null),b(c,MRe,u),b(c,xd,u),e(xd,a2),e(a2,Dce),g(Fw,Dce,null),e(xd,xqo),e(xd,Gce),e(Gce,kqo),b(c,ERe,u),b(c,lr,u),g(vw,lr,null),e(lr,Sqo),e(lr,kd),e(kd,Rqo),e(kd,vD),e(vD,Bqo),e(kd,Pqo),e(kd,TD),e(TD,$qo),e(kd,Iqo),e(lr,qqo),e(lr,Tw),e(Tw,Nqo),e(Tw,Oce),e(Oce,jqo),e(Tw,Dqo),e(lr,Gqo),e(lr,ot),g(Mw,ot,null),e(ot,Oqo),e(ot,Vce),e(Vce,Vqo),e(ot,Xqo),e(ot,Sd),e(Sd,zqo),e(Sd,Xce),e(Xce,Qqo),e(Sd,Wqo),e(Sd,MD),e(MD,Hqo),e(Sd,Uqo),e(ot,Jqo),e(ot,zce),e(zce,Yqo),e(ot,Kqo),g(Ew,ot,null),e(lr,Zqo),e(lr,He),g(Cw,He,null),e(He,eNo),e(He,Qce),e(Qce,oNo),e(He,rNo),e(He,on),e(on,tNo),e(on,Wce),e(Wce,aNo),e(on,nNo),e(on,Hce),e(Hce,sNo),e(on,lNo),e(on,Uce),e(Uce,iNo),e(on,dNo),e(He,cNo),e(He,ge),e(ge,n2),e(n2,Jce),e(Jce,fNo),e(n2,mNo),e(n2,ED),e(ED,gNo),e(n2,hNo),e(ge,pNo),e(ge,s2),e(s2,Yce),e(Yce,_No),e(s2,uNo),e(s2,CD),e(CD,bNo),e(s2,FNo),e(ge,vNo),e(ge,Ds),e(Ds,Kce),e(Kce,TNo),e(Ds,MNo),e(Ds,wD),e(wD,ENo),e(Ds,CNo),e(Ds,AD),e(AD,wNo),e(Ds,ANo),e(ge,yNo),e(ge,l2),e(l2,Zce),e(Zce,LNo),e(l2,xNo),e(l2,yD),e(yD,kNo),e(l2,SNo),e(ge,RNo),e(ge,ma),e(ma,efe),e(efe,BNo),e(ma,PNo),e(ma,LD),e(LD,$No),e(ma,INo),e(ma,xD),e(xD,qNo),e(ma,NNo),e(ma,kD),e(kD,jNo),e(ma,DNo),e(ge,GNo),e(ge,i2),e(i2,ofe),e(ofe,ONo),e(i2,VNo),e(i2,SD),e(SD,XNo),e(i2,zNo),e(ge,QNo),e(ge,d2),e(d2,rfe),e(rfe,WNo),e(d2,HNo),e(d2,RD),e(RD,UNo),e(d2,JNo),e(ge,YNo),e(ge,c2),e(c2,tfe),e(tfe,KNo),e(c2,ZNo),e(c2,BD),e(BD,ejo),e(c2,ojo),e(ge,rjo),e(ge,f2),e(f2,afe),e(afe,tjo),e(f2,ajo),e(f2,PD),e(PD,njo),e(f2,sjo),e(ge,ljo),e(ge,m2),e(m2,nfe),e(nfe,ijo),e(m2,djo),e(m2,$D),e($D,cjo),e(m2,fjo),e(ge,mjo),e(ge,g2),e(g2,sfe),e(sfe,gjo),e(g2,hjo),e(g2,ID),e(ID,pjo),e(g2,_jo),e(He,ujo),e(He,h2),e(h2,bjo),e(h2,lfe),e(lfe,Fjo),e(h2,vjo),e(h2,ife),e(ife,Tjo),e(He,Mjo),e(He,dfe),e(dfe,Ejo),e(He,Cjo),g(ww,He,null),b(c,CRe,u),b(c,Rd,u),e(Rd,p2),e(p2,cfe),g(Aw,cfe,null),e(Rd,wjo),e(Rd,ffe),e(ffe,Ajo),b(c,wRe,u),b(c,ir,u),g(yw,ir,null),e(ir,yjo),e(ir,Bd),e(Bd,Ljo),e(Bd,qD),e(qD,xjo),e(Bd,kjo),e(Bd,ND),e(ND,Sjo),e(Bd,Rjo),e(ir,Bjo),e(ir,Lw),e(Lw,Pjo),e(Lw,mfe),e(mfe,$jo),e(Lw,Ijo),e(ir,qjo),e(ir,rt),g(xw,rt,null),e(rt,Njo),e(rt,gfe),e(gfe,jjo),e(rt,Djo),e(rt,Pd),e(Pd,Gjo),e(Pd,hfe),e(hfe,Ojo),e(Pd,Vjo),e(Pd,jD),e(jD,Xjo),e(Pd,zjo),e(rt,Qjo),e(rt,pfe),e(pfe,Wjo),e(rt,Hjo),g(kw,rt,null),e(ir,Ujo),e(ir,Ue),g(Sw,Ue,null),e(Ue,Jjo),e(Ue,_fe),e(_fe,Yjo),e(Ue,Kjo),e(Ue,rn),e(rn,Zjo),e(rn,ufe),e(ufe,eDo),e(rn,oDo),e(rn,bfe),e(bfe,rDo),e(rn,tDo),e(rn,Ffe),e(Ffe,aDo),e(rn,nDo),e(Ue,sDo),e(Ue,vfe),e(vfe,_2),e(_2,Tfe),e(Tfe,lDo),e(_2,iDo),e(_2,DD),e(DD,dDo),e(_2,cDo),e(Ue,fDo),e(Ue,u2),e(u2,mDo),e(u2,Mfe),e(Mfe,gDo),e(u2,hDo),e(u2,Efe),e(Efe,pDo),e(Ue,_Do),e(Ue,Cfe),e(Cfe,uDo),e(Ue,bDo),g(Rw,Ue,null),b(c,ARe,u),b(c,$d,u),e($d,b2),e(b2,wfe),g(Bw,wfe,null),e($d,FDo),e($d,Afe),e(Afe,vDo),b(c,yRe,u),b(c,dr,u),g(Pw,dr,null),e(dr,TDo),e(dr,Id),e(Id,MDo),e(Id,GD),e(GD,EDo),e(Id,CDo),e(Id,OD),e(OD,wDo),e(Id,ADo),e(dr,yDo),e(dr,$w),e($w,LDo),e($w,yfe),e(yfe,xDo),e($w,kDo),e(dr,SDo),e(dr,tt),g(Iw,tt,null),e(tt,RDo),e(tt,Lfe),e(Lfe,BDo),e(tt,PDo),e(tt,qd),e(qd,$Do),e(qd,xfe),e(xfe,IDo),e(qd,qDo),e(qd,VD),e(VD,NDo),e(qd,jDo),e(tt,DDo),e(tt,kfe),e(kfe,GDo),e(tt,ODo),g(qw,tt,null),e(dr,VDo),e(dr,Je),g(Nw,Je,null),e(Je,XDo),e(Je,Sfe),e(Sfe,zDo),e(Je,QDo),e(Je,tn),e(tn,WDo),e(tn,Rfe),e(Rfe,HDo),e(tn,UDo),e(tn,Bfe),e(Bfe,JDo),e(tn,YDo),e(tn,Pfe),e(Pfe,KDo),e(tn,ZDo),e(Je,eGo),e(Je,Se),e(Se,F2),e(F2,$fe),e($fe,oGo),e(F2,rGo),e(F2,XD),e(XD,tGo),e(F2,aGo),e(Se,nGo),e(Se,v2),e(v2,Ife),e(Ife,sGo),e(v2,lGo),e(v2,zD),e(zD,iGo),e(v2,dGo),e(Se,cGo),e(Se,T2),e(T2,qfe),e(qfe,fGo),e(T2,mGo),e(T2,QD),e(QD,gGo),e(T2,hGo),e(Se,pGo),e(Se,M2),e(M2,Nfe),e(Nfe,_Go),e(M2,uGo),e(M2,WD),e(WD,bGo),e(M2,FGo),e(Se,vGo),e(Se,E2),e(E2,jfe),e(jfe,TGo),e(E2,MGo),e(E2,HD),e(HD,EGo),e(E2,CGo),e(Se,wGo),e(Se,C2),e(C2,Dfe),e(Dfe,AGo),e(C2,yGo),e(C2,UD),e(UD,LGo),e(C2,xGo),e(Se,kGo),e(Se,w2),e(w2,Gfe),e(Gfe,SGo),e(w2,RGo),e(w2,JD),e(JD,BGo),e(w2,PGo),e(Se,$Go),e(Se,A2),e(A2,Ofe),e(Ofe,IGo),e(A2,qGo),e(A2,YD),e(YD,NGo),e(A2,jGo),e(Je,DGo),e(Je,y2),e(y2,GGo),e(y2,Vfe),e(Vfe,OGo),e(y2,VGo),e(y2,Xfe),e(Xfe,XGo),e(Je,zGo),e(Je,zfe),e(zfe,QGo),e(Je,WGo),g(jw,Je,null),b(c,LRe,u),b(c,Nd,u),e(Nd,L2),e(L2,Qfe),g(Dw,Qfe,null),e(Nd,HGo),e(Nd,Wfe),e(Wfe,UGo),b(c,xRe,u),b(c,cr,u),g(Gw,cr,null),e(cr,JGo),e(cr,jd),e(jd,YGo),e(jd,KD),e(KD,KGo),e(jd,ZGo),e(jd,ZD),e(ZD,eOo),e(jd,oOo),e(cr,rOo),e(cr,Ow),e(Ow,tOo),e(Ow,Hfe),e(Hfe,aOo),e(Ow,nOo),e(cr,sOo),e(cr,at),g(Vw,at,null),e(at,lOo),e(at,Ufe),e(Ufe,iOo),e(at,dOo),e(at,Dd),e(Dd,cOo),e(Dd,Jfe),e(Jfe,fOo),e(Dd,mOo),e(Dd,eG),e(eG,gOo),e(Dd,hOo),e(at,pOo),e(at,Yfe),e(Yfe,_Oo),e(at,uOo),g(Xw,at,null),e(cr,bOo),e(cr,Ye),g(zw,Ye,null),e(Ye,FOo),e(Ye,Kfe),e(Kfe,vOo),e(Ye,TOo),e(Ye,an),e(an,MOo),e(an,Zfe),e(Zfe,EOo),e(an,COo),e(an,eme),e(eme,wOo),e(an,AOo),e(an,ome),e(ome,yOo),e(an,LOo),e(Ye,xOo),e(Ye,nn),e(nn,x2),e(x2,rme),e(rme,kOo),e(x2,SOo),e(x2,oG),e(oG,ROo),e(x2,BOo),e(nn,POo),e(nn,k2),e(k2,tme),e(tme,$Oo),e(k2,IOo),e(k2,rG),e(rG,qOo),e(k2,NOo),e(nn,jOo),e(nn,S2),e(S2,ame),e(ame,DOo),e(S2,GOo),e(S2,tG),e(tG,OOo),e(S2,VOo),e(nn,XOo),e(nn,R2),e(R2,nme),e(nme,zOo),e(R2,QOo),e(R2,aG),e(aG,WOo),e(R2,HOo),e(Ye,UOo),e(Ye,B2),e(B2,JOo),e(B2,sme),e(sme,YOo),e(B2,KOo),e(B2,lme),e(lme,ZOo),e(Ye,eVo),e(Ye,ime),e(ime,oVo),e(Ye,rVo),g(Qw,Ye,null),b(c,kRe,u),b(c,Gd,u),e(Gd,P2),e(P2,dme),g(Ww,dme,null),e(Gd,tVo),e(Gd,cme),e(cme,aVo),b(c,SRe,u),b(c,fr,u),g(Hw,fr,null),e(fr,nVo),e(fr,Od),e(Od,sVo),e(Od,nG),e(nG,lVo),e(Od,iVo),e(Od,sG),e(sG,dVo),e(Od,cVo),e(fr,fVo),e(fr,Uw),e(Uw,mVo),e(Uw,fme),e(fme,gVo),e(Uw,hVo),e(fr,pVo),e(fr,nt),g(Jw,nt,null),e(nt,_Vo),e(nt,mme),e(mme,uVo),e(nt,bVo),e(nt,Vd),e(Vd,FVo),e(Vd,gme),e(gme,vVo),e(Vd,TVo),e(Vd,lG),e(lG,MVo),e(Vd,EVo),e(nt,CVo),e(nt,hme),e(hme,wVo),e(nt,AVo),g(Yw,nt,null),e(fr,yVo),e(fr,Ke),g(Kw,Ke,null),e(Ke,LVo),e(Ke,pme),e(pme,xVo),e(Ke,kVo),e(Ke,sn),e(sn,SVo),e(sn,_me),e(_me,RVo),e(sn,BVo),e(sn,ume),e(ume,PVo),e(sn,$Vo),e(sn,bme),e(bme,IVo),e(sn,qVo),e(Ke,NVo),e(Ke,Re),e(Re,$2),e($2,Fme),e(Fme,jVo),e($2,DVo),e($2,iG),e(iG,GVo),e($2,OVo),e(Re,VVo),e(Re,I2),e(I2,vme),e(vme,XVo),e(I2,zVo),e(I2,dG),e(dG,QVo),e(I2,WVo),e(Re,HVo),e(Re,q2),e(q2,Tme),e(Tme,UVo),e(q2,JVo),e(q2,cG),e(cG,YVo),e(q2,KVo),e(Re,ZVo),e(Re,N2),e(N2,Mme),e(Mme,eXo),e(N2,oXo),e(N2,fG),e(fG,rXo),e(N2,tXo),e(Re,aXo),e(Re,j2),e(j2,Eme),e(Eme,nXo),e(j2,sXo),e(j2,mG),e(mG,lXo),e(j2,iXo),e(Re,dXo),e(Re,D2),e(D2,Cme),e(Cme,cXo),e(D2,fXo),e(D2,gG),e(gG,mXo),e(D2,gXo),e(Re,hXo),e(Re,G2),e(G2,wme),e(wme,pXo),e(G2,_Xo),e(G2,hG),e(hG,uXo),e(G2,bXo),e(Re,FXo),e(Re,O2),e(O2,Ame),e(Ame,vXo),e(O2,TXo),e(O2,pG),e(pG,MXo),e(O2,EXo),e(Ke,CXo),e(Ke,V2),e(V2,wXo),e(V2,yme),e(yme,AXo),e(V2,yXo),e(V2,Lme),e(Lme,LXo),e(Ke,xXo),e(Ke,xme),e(xme,kXo),e(Ke,SXo),g(Zw,Ke,null),b(c,RRe,u),b(c,Xd,u),e(Xd,X2),e(X2,kme),g(eA,kme,null),e(Xd,RXo),e(Xd,Sme),e(Sme,BXo),b(c,BRe,u),b(c,mr,u),g(oA,mr,null),e(mr,PXo),e(mr,zd),e(zd,$Xo),e(zd,_G),e(_G,IXo),e(zd,qXo),e(zd,uG),e(uG,NXo),e(zd,jXo),e(mr,DXo),e(mr,rA),e(rA,GXo),e(rA,Rme),e(Rme,OXo),e(rA,VXo),e(mr,XXo),e(mr,st),g(tA,st,null),e(st,zXo),e(st,Bme),e(Bme,QXo),e(st,WXo),e(st,Qd),e(Qd,HXo),e(Qd,Pme),e(Pme,UXo),e(Qd,JXo),e(Qd,bG),e(bG,YXo),e(Qd,KXo),e(st,ZXo),e(st,$me),e($me,ezo),e(st,ozo),g(aA,st,null),e(mr,rzo),e(mr,Ze),g(nA,Ze,null),e(Ze,tzo),e(Ze,Ime),e(Ime,azo),e(Ze,nzo),e(Ze,ln),e(ln,szo),e(ln,qme),e(qme,lzo),e(ln,izo),e(ln,Nme),e(Nme,dzo),e(ln,czo),e(ln,jme),e(jme,fzo),e(ln,mzo),e(Ze,gzo),e(Ze,sA),e(sA,z2),e(z2,Dme),e(Dme,hzo),e(z2,pzo),e(z2,FG),e(FG,_zo),e(z2,uzo),e(sA,bzo),e(sA,Q2),e(Q2,Gme),e(Gme,Fzo),e(Q2,vzo),e(Q2,vG),e(vG,Tzo),e(Q2,Mzo),e(Ze,Ezo),e(Ze,W2),e(W2,Czo),e(W2,Ome),e(Ome,wzo),e(W2,Azo),e(W2,Vme),e(Vme,yzo),e(Ze,Lzo),e(Ze,Xme),e(Xme,xzo),e(Ze,kzo),g(lA,Ze,null),b(c,PRe,u),b(c,Wd,u),e(Wd,H2),e(H2,zme),g(iA,zme,null),e(Wd,Szo),e(Wd,Qme),e(Qme,Rzo),b(c,$Re,u),b(c,gr,u),g(dA,gr,null),e(gr,Bzo),e(gr,Hd),e(Hd,Pzo),e(Hd,TG),e(TG,$zo),e(Hd,Izo),e(Hd,MG),e(MG,qzo),e(Hd,Nzo),e(gr,jzo),e(gr,cA),e(cA,Dzo),e(cA,Wme),e(Wme,Gzo),e(cA,Ozo),e(gr,Vzo),e(gr,lt),g(fA,lt,null),e(lt,Xzo),e(lt,Hme),e(Hme,zzo),e(lt,Qzo),e(lt,Ud),e(Ud,Wzo),e(Ud,Ume),e(Ume,Hzo),e(Ud,Uzo),e(Ud,EG),e(EG,Jzo),e(Ud,Yzo),e(lt,Kzo),e(lt,Jme),e(Jme,Zzo),e(lt,eQo),g(mA,lt,null),e(gr,oQo),e(gr,eo),g(gA,eo,null),e(eo,rQo),e(eo,Yme),e(Yme,tQo),e(eo,aQo),e(eo,dn),e(dn,nQo),e(dn,Kme),e(Kme,sQo),e(dn,lQo),e(dn,Zme),e(Zme,iQo),e(dn,dQo),e(dn,ege),e(ege,cQo),e(dn,fQo),e(eo,mQo),e(eo,cn),e(cn,U2),e(U2,oge),e(oge,gQo),e(U2,hQo),e(U2,CG),e(CG,pQo),e(U2,_Qo),e(cn,uQo),e(cn,J2),e(J2,rge),e(rge,bQo),e(J2,FQo),e(J2,wG),e(wG,vQo),e(J2,TQo),e(cn,MQo),e(cn,Y2),e(Y2,tge),e(tge,EQo),e(Y2,CQo),e(Y2,AG),e(AG,wQo),e(Y2,AQo),e(cn,yQo),e(cn,K2),e(K2,age),e(age,LQo),e(K2,xQo),e(K2,yG),e(yG,kQo),e(K2,SQo),e(eo,RQo),e(eo,Z2),e(Z2,BQo),e(Z2,nge),e(nge,PQo),e(Z2,$Qo),e(Z2,sge),e(sge,IQo),e(eo,qQo),e(eo,lge),e(lge,NQo),e(eo,jQo),g(hA,eo,null),b(c,IRe,u),b(c,Jd,u),e(Jd,eF),e(eF,ige),g(pA,ige,null),e(Jd,DQo),e(Jd,dge),e(dge,GQo),b(c,qRe,u),b(c,hr,u),g(_A,hr,null),e(hr,OQo),e(hr,Yd),e(Yd,VQo),e(Yd,LG),e(LG,XQo),e(Yd,zQo),e(Yd,xG),e(xG,QQo),e(Yd,WQo),e(hr,HQo),e(hr,uA),e(uA,UQo),e(uA,cge),e(cge,JQo),e(uA,YQo),e(hr,KQo),e(hr,it),g(bA,it,null),e(it,ZQo),e(it,fge),e(fge,eWo),e(it,oWo),e(it,Kd),e(Kd,rWo),e(Kd,mge),e(mge,tWo),e(Kd,aWo),e(Kd,kG),e(kG,nWo),e(Kd,sWo),e(it,lWo),e(it,gge),e(gge,iWo),e(it,dWo),g(FA,it,null),e(hr,cWo),e(hr,oo),g(vA,oo,null),e(oo,fWo),e(oo,hge),e(hge,mWo),e(oo,gWo),e(oo,fn),e(fn,hWo),e(fn,pge),e(pge,pWo),e(fn,_Wo),e(fn,_ge),e(_ge,uWo),e(fn,bWo),e(fn,uge),e(uge,FWo),e(fn,vWo),e(oo,TWo),e(oo,Zd),e(Zd,oF),e(oF,bge),e(bge,MWo),e(oF,EWo),e(oF,SG),e(SG,CWo),e(oF,wWo),e(Zd,AWo),e(Zd,rF),e(rF,Fge),e(Fge,yWo),e(rF,LWo),e(rF,RG),e(RG,xWo),e(rF,kWo),e(Zd,SWo),e(Zd,tF),e(tF,vge),e(vge,RWo),e(tF,BWo),e(tF,BG),e(BG,PWo),e(tF,$Wo),e(oo,IWo),e(oo,aF),e(aF,qWo),e(aF,Tge),e(Tge,NWo),e(aF,jWo),e(aF,Mge),e(Mge,DWo),e(oo,GWo),e(oo,Ege),e(Ege,OWo),e(oo,VWo),g(TA,oo,null),b(c,NRe,u),b(c,ec,u),e(ec,nF),e(nF,Cge),g(MA,Cge,null),e(ec,XWo),e(ec,wge),e(wge,zWo),b(c,jRe,u),b(c,pr,u),g(EA,pr,null),e(pr,QWo),e(pr,oc),e(oc,WWo),e(oc,PG),e(PG,HWo),e(oc,UWo),e(oc,$G),e($G,JWo),e(oc,YWo),e(pr,KWo),e(pr,CA),e(CA,ZWo),e(CA,Age),e(Age,eHo),e(CA,oHo),e(pr,rHo),e(pr,dt),g(wA,dt,null),e(dt,tHo),e(dt,yge),e(yge,aHo),e(dt,nHo),e(dt,rc),e(rc,sHo),e(rc,Lge),e(Lge,lHo),e(rc,iHo),e(rc,IG),e(IG,dHo),e(rc,cHo),e(dt,fHo),e(dt,xge),e(xge,mHo),e(dt,gHo),g(AA,dt,null),e(pr,hHo),e(pr,ro),g(yA,ro,null),e(ro,pHo),e(ro,kge),e(kge,_Ho),e(ro,uHo),e(ro,mn),e(mn,bHo),e(mn,Sge),e(Sge,FHo),e(mn,vHo),e(mn,Rge),e(Rge,THo),e(mn,MHo),e(mn,Bge),e(Bge,EHo),e(mn,CHo),e(ro,wHo),e(ro,Pge),e(Pge,sF),e(sF,$ge),e($ge,AHo),e(sF,yHo),e(sF,qG),e(qG,LHo),e(sF,xHo),e(ro,kHo),e(ro,lF),e(lF,SHo),e(lF,Ige),e(Ige,RHo),e(lF,BHo),e(lF,qge),e(qge,PHo),e(ro,$Ho),e(ro,Nge),e(Nge,IHo),e(ro,qHo),g(LA,ro,null),b(c,DRe,u),b(c,tc,u),e(tc,iF),e(iF,jge),g(xA,jge,null),e(tc,NHo),e(tc,Dge),e(Dge,jHo),b(c,GRe,u),b(c,_r,u),g(kA,_r,null),e(_r,DHo),e(_r,ac),e(ac,GHo),e(ac,NG),e(NG,OHo),e(ac,VHo),e(ac,jG),e(jG,XHo),e(ac,zHo),e(_r,QHo),e(_r,SA),e(SA,WHo),e(SA,Gge),e(Gge,HHo),e(SA,UHo),e(_r,JHo),e(_r,ct),g(RA,ct,null),e(ct,YHo),e(ct,Oge),e(Oge,KHo),e(ct,ZHo),e(ct,nc),e(nc,eUo),e(nc,Vge),e(Vge,oUo),e(nc,rUo),e(nc,DG),e(DG,tUo),e(nc,aUo),e(ct,nUo),e(ct,Xge),e(Xge,sUo),e(ct,lUo),g(BA,ct,null),e(_r,iUo),e(_r,to),g(PA,to,null),e(to,dUo),e(to,zge),e(zge,cUo),e(to,fUo),e(to,gn),e(gn,mUo),e(gn,Qge),e(Qge,gUo),e(gn,hUo),e(gn,Wge),e(Wge,pUo),e(gn,_Uo),e(gn,Hge),e(Hge,uUo),e(gn,bUo),e(to,FUo),e(to,Uge),e(Uge,dF),e(dF,Jge),e(Jge,vUo),e(dF,TUo),e(dF,GG),e(GG,MUo),e(dF,EUo),e(to,CUo),e(to,cF),e(cF,wUo),e(cF,Yge),e(Yge,AUo),e(cF,yUo),e(cF,Kge),e(Kge,LUo),e(to,xUo),e(to,Zge),e(Zge,kUo),e(to,SUo),g($A,to,null),b(c,ORe,u),b(c,sc,u),e(sc,fF),e(fF,ehe),g(IA,ehe,null),e(sc,RUo),e(sc,ohe),e(ohe,BUo),b(c,VRe,u),b(c,ur,u),g(qA,ur,null),e(ur,PUo),e(ur,lc),e(lc,$Uo),e(lc,OG),e(OG,IUo),e(lc,qUo),e(lc,VG),e(VG,NUo),e(lc,jUo),e(ur,DUo),e(ur,NA),e(NA,GUo),e(NA,rhe),e(rhe,OUo),e(NA,VUo),e(ur,XUo),e(ur,ft),g(jA,ft,null),e(ft,zUo),e(ft,the),e(the,QUo),e(ft,WUo),e(ft,ic),e(ic,HUo),e(ic,ahe),e(ahe,UUo),e(ic,JUo),e(ic,XG),e(XG,YUo),e(ic,KUo),e(ft,ZUo),e(ft,nhe),e(nhe,eJo),e(ft,oJo),g(DA,ft,null),e(ur,rJo),e(ur,ao),g(GA,ao,null),e(ao,tJo),e(ao,she),e(she,aJo),e(ao,nJo),e(ao,hn),e(hn,sJo),e(hn,lhe),e(lhe,lJo),e(hn,iJo),e(hn,ihe),e(ihe,dJo),e(hn,cJo),e(hn,dhe),e(dhe,fJo),e(hn,mJo),e(ao,gJo),e(ao,dc),e(dc,mF),e(mF,che),e(che,hJo),e(mF,pJo),e(mF,zG),e(zG,_Jo),e(mF,uJo),e(dc,bJo),e(dc,gF),e(gF,fhe),e(fhe,FJo),e(gF,vJo),e(gF,QG),e(QG,TJo),e(gF,MJo),e(dc,EJo),e(dc,hF),e(hF,mhe),e(mhe,CJo),e(hF,wJo),e(hF,WG),e(WG,AJo),e(hF,yJo),e(ao,LJo),e(ao,pF),e(pF,xJo),e(pF,ghe),e(ghe,kJo),e(pF,SJo),e(pF,hhe),e(hhe,RJo),e(ao,BJo),e(ao,phe),e(phe,PJo),e(ao,$Jo),g(OA,ao,null),b(c,XRe,u),b(c,cc,u),e(cc,_F),e(_F,_he),g(VA,_he,null),e(cc,IJo),e(cc,uhe),e(uhe,qJo),b(c,zRe,u),b(c,br,u),g(XA,br,null),e(br,NJo),e(br,fc),e(fc,jJo),e(fc,HG),e(HG,DJo),e(fc,GJo),e(fc,UG),e(UG,OJo),e(fc,VJo),e(br,XJo),e(br,zA),e(zA,zJo),e(zA,bhe),e(bhe,QJo),e(zA,WJo),e(br,HJo),e(br,mt),g(QA,mt,null),e(mt,UJo),e(mt,Fhe),e(Fhe,JJo),e(mt,YJo),e(mt,mc),e(mc,KJo),e(mc,vhe),e(vhe,ZJo),e(mc,eYo),e(mc,JG),e(JG,oYo),e(mc,rYo),e(mt,tYo),e(mt,The),e(The,aYo),e(mt,nYo),g(WA,mt,null),e(br,sYo),e(br,no),g(HA,no,null),e(no,lYo),e(no,Mhe),e(Mhe,iYo),e(no,dYo),e(no,pn),e(pn,cYo),e(pn,Ehe),e(Ehe,fYo),e(pn,mYo),e(pn,Che),e(Che,gYo),e(pn,hYo),e(pn,whe),e(whe,pYo),e(pn,_Yo),e(no,uYo),e(no,Ahe),e(Ahe,uF),e(uF,yhe),e(yhe,bYo),e(uF,FYo),e(uF,YG),e(YG,vYo),e(uF,TYo),e(no,MYo),e(no,bF),e(bF,EYo),e(bF,Lhe),e(Lhe,CYo),e(bF,wYo),e(bF,xhe),e(xhe,AYo),e(no,yYo),e(no,khe),e(khe,LYo),e(no,xYo),g(UA,no,null),b(c,QRe,u),b(c,gc,u),e(gc,FF),e(FF,She),g(JA,She,null),e(gc,kYo),e(gc,Rhe),e(Rhe,SYo),b(c,WRe,u),b(c,Fr,u),g(YA,Fr,null),e(Fr,RYo),e(Fr,hc),e(hc,BYo),e(hc,KG),e(KG,PYo),e(hc,$Yo),e(hc,ZG),e(ZG,IYo),e(hc,qYo),e(Fr,NYo),e(Fr,KA),e(KA,jYo),e(KA,Bhe),e(Bhe,DYo),e(KA,GYo),e(Fr,OYo),e(Fr,gt),g(ZA,gt,null),e(gt,VYo),e(gt,Phe),e(Phe,XYo),e(gt,zYo),e(gt,pc),e(pc,QYo),e(pc,$he),e($he,WYo),e(pc,HYo),e(pc,eO),e(eO,UYo),e(pc,JYo),e(gt,YYo),e(gt,Ihe),e(Ihe,KYo),e(gt,ZYo),g(e0,gt,null),e(Fr,eKo),e(Fr,ho),g(o0,ho,null),e(ho,oKo),e(ho,qhe),e(qhe,rKo),e(ho,tKo),e(ho,_n),e(_n,aKo),e(_n,Nhe),e(Nhe,nKo),e(_n,sKo),e(_n,jhe),e(jhe,lKo),e(_n,iKo),e(_n,Dhe),e(Dhe,dKo),e(_n,cKo),e(ho,fKo),e(ho,x),e(x,vF),e(vF,Ghe),e(Ghe,mKo),e(vF,gKo),e(vF,oO),e(oO,hKo),e(vF,pKo),e(x,_Ko),e(x,TF),e(TF,Ohe),e(Ohe,uKo),e(TF,bKo),e(TF,rO),e(rO,FKo),e(TF,vKo),e(x,TKo),e(x,MF),e(MF,Vhe),e(Vhe,MKo),e(MF,EKo),e(MF,tO),e(tO,CKo),e(MF,wKo),e(x,AKo),e(x,EF),e(EF,Xhe),e(Xhe,yKo),e(EF,LKo),e(EF,aO),e(aO,xKo),e(EF,kKo),e(x,SKo),e(x,CF),e(CF,zhe),e(zhe,RKo),e(CF,BKo),e(CF,nO),e(nO,PKo),e(CF,$Ko),e(x,IKo),e(x,wF),e(wF,Qhe),e(Qhe,qKo),e(wF,NKo),e(wF,sO),e(sO,jKo),e(wF,DKo),e(x,GKo),e(x,AF),e(AF,Whe),e(Whe,OKo),e(AF,VKo),e(AF,lO),e(lO,XKo),e(AF,zKo),e(x,QKo),e(x,yF),e(yF,Hhe),e(Hhe,WKo),e(yF,HKo),e(yF,iO),e(iO,UKo),e(yF,JKo),e(x,YKo),e(x,LF),e(LF,Uhe),e(Uhe,KKo),e(LF,ZKo),e(LF,dO),e(dO,eZo),e(LF,oZo),e(x,rZo),e(x,xF),e(xF,Jhe),e(Jhe,tZo),e(xF,aZo),e(xF,cO),e(cO,nZo),e(xF,sZo),e(x,lZo),e(x,kF),e(kF,Yhe),e(Yhe,iZo),e(kF,dZo),e(kF,fO),e(fO,cZo),e(kF,fZo),e(x,mZo),e(x,SF),e(SF,Khe),e(Khe,gZo),e(SF,hZo),e(SF,mO),e(mO,pZo),e(SF,_Zo),e(x,uZo),e(x,RF),e(RF,Zhe),e(Zhe,bZo),e(RF,FZo),e(RF,gO),e(gO,vZo),e(RF,TZo),e(x,MZo),e(x,BF),e(BF,epe),e(epe,EZo),e(BF,CZo),e(BF,hO),e(hO,wZo),e(BF,AZo),e(x,yZo),e(x,PF),e(PF,ope),e(ope,LZo),e(PF,xZo),e(PF,pO),e(pO,kZo),e(PF,SZo),e(x,RZo),e(x,$F),e($F,rpe),e(rpe,BZo),e($F,PZo),e($F,_O),e(_O,$Zo),e($F,IZo),e(x,qZo),e(x,Gs),e(Gs,tpe),e(tpe,NZo),e(Gs,jZo),e(Gs,uO),e(uO,DZo),e(Gs,GZo),e(Gs,bO),e(bO,OZo),e(Gs,VZo),e(x,XZo),e(x,IF),e(IF,ape),e(ape,zZo),e(IF,QZo),e(IF,FO),e(FO,WZo),e(IF,HZo),e(x,UZo),e(x,qF),e(qF,npe),e(npe,JZo),e(qF,YZo),e(qF,vO),e(vO,KZo),e(qF,ZZo),e(x,eer),e(x,NF),e(NF,spe),e(spe,oer),e(NF,rer),e(NF,TO),e(TO,ter),e(NF,aer),e(x,ner),e(x,jF),e(jF,lpe),e(lpe,ser),e(jF,ler),e(jF,MO),e(MO,ier),e(jF,der),e(x,cer),e(x,DF),e(DF,ipe),e(ipe,fer),e(DF,mer),e(DF,EO),e(EO,ger),e(DF,her),e(x,per),e(x,GF),e(GF,dpe),e(dpe,_er),e(GF,uer),e(GF,CO),e(CO,ber),e(GF,Fer),e(x,ver),e(x,OF),e(OF,cpe),e(cpe,Ter),e(OF,Mer),e(OF,wO),e(wO,Eer),e(OF,Cer),e(x,wer),e(x,VF),e(VF,fpe),e(fpe,Aer),e(VF,yer),e(VF,AO),e(AO,Ler),e(VF,xer),e(x,ker),e(x,XF),e(XF,mpe),e(mpe,Ser),e(XF,Rer),e(XF,yO),e(yO,Ber),e(XF,Per),e(x,$er),e(x,zF),e(zF,gpe),e(gpe,Ier),e(zF,qer),e(zF,LO),e(LO,Ner),e(zF,jer),e(x,Der),e(x,QF),e(QF,hpe),e(hpe,Ger),e(QF,Oer),e(QF,xO),e(xO,Ver),e(QF,Xer),e(x,zer),e(x,WF),e(WF,ppe),e(ppe,Qer),e(WF,Wer),e(WF,kO),e(kO,Her),e(WF,Uer),e(x,Jer),e(x,HF),e(HF,_pe),e(_pe,Yer),e(HF,Ker),e(HF,SO),e(SO,Zer),e(HF,eor),e(x,oor),e(x,UF),e(UF,upe),e(upe,ror),e(UF,tor),e(UF,RO),e(RO,aor),e(UF,nor),e(x,sor),e(x,JF),e(JF,bpe),e(bpe,lor),e(JF,ior),e(JF,BO),e(BO,dor),e(JF,cor),e(x,mor),e(x,YF),e(YF,Fpe),e(Fpe,gor),e(YF,hor),e(YF,PO),e(PO,por),e(YF,_or),e(x,uor),e(x,KF),e(KF,vpe),e(vpe,bor),e(KF,For),e(KF,$O),e($O,vor),e(KF,Tor),e(x,Mor),e(x,ZF),e(ZF,Tpe),e(Tpe,Eor),e(ZF,Cor),e(ZF,IO),e(IO,wor),e(ZF,Aor),e(x,yor),e(x,ev),e(ev,Mpe),e(Mpe,Lor),e(ev,xor),e(ev,qO),e(qO,kor),e(ev,Sor),e(x,Ror),e(x,ov),e(ov,Epe),e(Epe,Bor),e(ov,Por),e(ov,NO),e(NO,$or),e(ov,Ior),e(x,qor),e(x,rv),e(rv,Cpe),e(Cpe,Nor),e(rv,jor),e(rv,jO),e(jO,Dor),e(rv,Gor),e(x,Oor),e(x,tv),e(tv,wpe),e(wpe,Vor),e(tv,Xor),e(tv,DO),e(DO,zor),e(tv,Qor),e(x,Wor),e(x,av),e(av,Ape),e(Ape,Hor),e(av,Uor),e(av,GO),e(GO,Jor),e(av,Yor),e(x,Kor),e(x,nv),e(nv,ype),e(ype,Zor),e(nv,err),e(nv,OO),e(OO,orr),e(nv,rrr),e(x,trr),e(x,sv),e(sv,Lpe),e(Lpe,arr),e(sv,nrr),e(sv,VO),e(VO,srr),e(sv,lrr),e(x,irr),e(x,lv),e(lv,xpe),e(xpe,drr),e(lv,crr),e(lv,XO),e(XO,frr),e(lv,mrr),e(x,grr),e(x,iv),e(iv,kpe),e(kpe,hrr),e(iv,prr),e(iv,zO),e(zO,_rr),e(iv,urr),e(ho,brr),e(ho,Spe),e(Spe,Frr),e(ho,vrr),g(r0,ho,null),b(c,HRe,u),b(c,_c,u),e(_c,dv),e(dv,Rpe),g(t0,Rpe,null),e(_c,Trr),e(_c,Bpe),e(Bpe,Mrr),b(c,URe,u),b(c,vr,u),g(a0,vr,null),e(vr,Err),e(vr,uc),e(uc,Crr),e(uc,QO),e(QO,wrr),e(uc,Arr),e(uc,WO),e(WO,yrr),e(uc,Lrr),e(vr,xrr),e(vr,n0),e(n0,krr),e(n0,Ppe),e(Ppe,Srr),e(n0,Rrr),e(vr,Brr),e(vr,ht),g(s0,ht,null),e(ht,Prr),e(ht,$pe),e($pe,$rr),e(ht,Irr),e(ht,bc),e(bc,qrr),e(bc,Ipe),e(Ipe,Nrr),e(bc,jrr),e(bc,HO),e(HO,Drr),e(bc,Grr),e(ht,Orr),e(ht,qpe),e(qpe,Vrr),e(ht,Xrr),g(l0,ht,null),e(vr,zrr),e(vr,po),g(i0,po,null),e(po,Qrr),e(po,Npe),e(Npe,Wrr),e(po,Hrr),e(po,un),e(un,Urr),e(un,jpe),e(jpe,Jrr),e(un,Yrr),e(un,Dpe),e(Dpe,Krr),e(un,Zrr),e(un,Gpe),e(Gpe,etr),e(un,otr),e(po,rtr),e(po,H),e(H,cv),e(cv,Ope),e(Ope,ttr),e(cv,atr),e(cv,UO),e(UO,ntr),e(cv,str),e(H,ltr),e(H,fv),e(fv,Vpe),e(Vpe,itr),e(fv,dtr),e(fv,JO),e(JO,ctr),e(fv,ftr),e(H,mtr),e(H,mv),e(mv,Xpe),e(Xpe,gtr),e(mv,htr),e(mv,YO),e(YO,ptr),e(mv,_tr),e(H,utr),e(H,gv),e(gv,zpe),e(zpe,btr),e(gv,Ftr),e(gv,KO),e(KO,vtr),e(gv,Ttr),e(H,Mtr),e(H,hv),e(hv,Qpe),e(Qpe,Etr),e(hv,Ctr),e(hv,ZO),e(ZO,wtr),e(hv,Atr),e(H,ytr),e(H,pv),e(pv,Wpe),e(Wpe,Ltr),e(pv,xtr),e(pv,eV),e(eV,ktr),e(pv,Str),e(H,Rtr),e(H,_v),e(_v,Hpe),e(Hpe,Btr),e(_v,Ptr),e(_v,oV),e(oV,$tr),e(_v,Itr),e(H,qtr),e(H,uv),e(uv,Upe),e(Upe,Ntr),e(uv,jtr),e(uv,rV),e(rV,Dtr),e(uv,Gtr),e(H,Otr),e(H,bv),e(bv,Jpe),e(Jpe,Vtr),e(bv,Xtr),e(bv,tV),e(tV,ztr),e(bv,Qtr),e(H,Wtr),e(H,Fv),e(Fv,Ype),e(Ype,Htr),e(Fv,Utr),e(Fv,aV),e(aV,Jtr),e(Fv,Ytr),e(H,Ktr),e(H,vv),e(vv,Kpe),e(Kpe,Ztr),e(vv,ear),e(vv,nV),e(nV,oar),e(vv,rar),e(H,tar),e(H,Tv),e(Tv,Zpe),e(Zpe,aar),e(Tv,nar),e(Tv,sV),e(sV,sar),e(Tv,lar),e(H,iar),e(H,Mv),e(Mv,e_e),e(e_e,dar),e(Mv,car),e(Mv,lV),e(lV,far),e(Mv,mar),e(H,gar),e(H,Ev),e(Ev,o_e),e(o_e,har),e(Ev,par),e(Ev,iV),e(iV,_ar),e(Ev,uar),e(H,bar),e(H,Cv),e(Cv,r_e),e(r_e,Far),e(Cv,Tar),e(Cv,dV),e(dV,Mar),e(Cv,Ear),e(H,Car),e(H,wv),e(wv,t_e),e(t_e,war),e(wv,Aar),e(wv,cV),e(cV,yar),e(wv,Lar),e(H,xar),e(H,Av),e(Av,a_e),e(a_e,kar),e(Av,Sar),e(Av,fV),e(fV,Rar),e(Av,Bar),e(H,Par),e(H,yv),e(yv,n_e),e(n_e,$ar),e(yv,Iar),e(yv,mV),e(mV,qar),e(yv,Nar),e(H,jar),e(H,Lv),e(Lv,s_e),e(s_e,Dar),e(Lv,Gar),e(Lv,gV),e(gV,Oar),e(Lv,Var),e(H,Xar),e(H,xv),e(xv,l_e),e(l_e,zar),e(xv,Qar),e(xv,hV),e(hV,War),e(xv,Har),e(H,Uar),e(H,kv),e(kv,i_e),e(i_e,Jar),e(kv,Yar),e(kv,pV),e(pV,Kar),e(kv,Zar),e(H,enr),e(H,Sv),e(Sv,d_e),e(d_e,onr),e(Sv,rnr),e(Sv,_V),e(_V,tnr),e(Sv,anr),e(H,nnr),e(H,Rv),e(Rv,c_e),e(c_e,snr),e(Rv,lnr),e(Rv,uV),e(uV,inr),e(Rv,dnr),e(po,cnr),e(po,f_e),e(f_e,fnr),e(po,mnr),g(d0,po,null),b(c,JRe,u),b(c,Fc,u),e(Fc,Bv),e(Bv,m_e),g(c0,m_e,null),e(Fc,gnr),e(Fc,g_e),e(g_e,hnr),b(c,YRe,u),b(c,Tr,u),g(f0,Tr,null),e(Tr,pnr),e(Tr,vc),e(vc,_nr),e(vc,bV),e(bV,unr),e(vc,bnr),e(vc,FV),e(FV,Fnr),e(vc,vnr),e(Tr,Tnr),e(Tr,m0),e(m0,Mnr),e(m0,h_e),e(h_e,Enr),e(m0,Cnr),e(Tr,wnr),e(Tr,pt),g(g0,pt,null),e(pt,Anr),e(pt,p_e),e(p_e,ynr),e(pt,Lnr),e(pt,Tc),e(Tc,xnr),e(Tc,__e),e(__e,knr),e(Tc,Snr),e(Tc,vV),e(vV,Rnr),e(Tc,Bnr),e(pt,Pnr),e(pt,u_e),e(u_e,$nr),e(pt,Inr),g(h0,pt,null),e(Tr,qnr),e(Tr,_o),g(p0,_o,null),e(_o,Nnr),e(_o,b_e),e(b_e,jnr),e(_o,Dnr),e(_o,bn),e(bn,Gnr),e(bn,F_e),e(F_e,Onr),e(bn,Vnr),e(bn,v_e),e(v_e,Xnr),e(bn,znr),e(bn,T_e),e(T_e,Qnr),e(bn,Wnr),e(_o,Hnr),e(_o,ce),e(ce,Pv),e(Pv,M_e),e(M_e,Unr),e(Pv,Jnr),e(Pv,TV),e(TV,Ynr),e(Pv,Knr),e(ce,Znr),e(ce,$v),e($v,E_e),e(E_e,esr),e($v,osr),e($v,MV),e(MV,rsr),e($v,tsr),e(ce,asr),e(ce,Iv),e(Iv,C_e),e(C_e,nsr),e(Iv,ssr),e(Iv,EV),e(EV,lsr),e(Iv,isr),e(ce,dsr),e(ce,qv),e(qv,w_e),e(w_e,csr),e(qv,fsr),e(qv,CV),e(CV,msr),e(qv,gsr),e(ce,hsr),e(ce,Nv),e(Nv,A_e),e(A_e,psr),e(Nv,_sr),e(Nv,wV),e(wV,usr),e(Nv,bsr),e(ce,Fsr),e(ce,jv),e(jv,y_e),e(y_e,vsr),e(jv,Tsr),e(jv,AV),e(AV,Msr),e(jv,Esr),e(ce,Csr),e(ce,Dv),e(Dv,L_e),e(L_e,wsr),e(Dv,Asr),e(Dv,yV),e(yV,ysr),e(Dv,Lsr),e(ce,xsr),e(ce,Gv),e(Gv,x_e),e(x_e,ksr),e(Gv,Ssr),e(Gv,LV),e(LV,Rsr),e(Gv,Bsr),e(ce,Psr),e(ce,Ov),e(Ov,k_e),e(k_e,$sr),e(Ov,Isr),e(Ov,xV),e(xV,qsr),e(Ov,Nsr),e(ce,jsr),e(ce,Vv),e(Vv,S_e),e(S_e,Dsr),e(Vv,Gsr),e(Vv,kV),e(kV,Osr),e(Vv,Vsr),e(ce,Xsr),e(ce,Xv),e(Xv,R_e),e(R_e,zsr),e(Xv,Qsr),e(Xv,SV),e(SV,Wsr),e(Xv,Hsr),e(ce,Usr),e(ce,zv),e(zv,B_e),e(B_e,Jsr),e(zv,Ysr),e(zv,RV),e(RV,Ksr),e(zv,Zsr),e(_o,elr),e(_o,P_e),e(P_e,olr),e(_o,rlr),g(_0,_o,null),b(c,KRe,u),b(c,Mc,u),e(Mc,Qv),e(Qv,$_e),g(u0,$_e,null),e(Mc,tlr),e(Mc,I_e),e(I_e,alr),b(c,ZRe,u),b(c,Mr,u),g(b0,Mr,null),e(Mr,nlr),e(Mr,Ec),e(Ec,slr),e(Ec,BV),e(BV,llr),e(Ec,ilr),e(Ec,PV),e(PV,dlr),e(Ec,clr),e(Mr,flr),e(Mr,F0),e(F0,mlr),e(F0,q_e),e(q_e,glr),e(F0,hlr),e(Mr,plr),e(Mr,_t),g(v0,_t,null),e(_t,_lr),e(_t,N_e),e(N_e,ulr),e(_t,blr),e(_t,Cc),e(Cc,Flr),e(Cc,j_e),e(j_e,vlr),e(Cc,Tlr),e(Cc,$V),e($V,Mlr),e(Cc,Elr),e(_t,Clr),e(_t,D_e),e(D_e,wlr),e(_t,Alr),g(T0,_t,null),e(Mr,ylr),e(Mr,uo),g(M0,uo,null),e(uo,Llr),e(uo,G_e),e(G_e,xlr),e(uo,klr),e(uo,Fn),e(Fn,Slr),e(Fn,O_e),e(O_e,Rlr),e(Fn,Blr),e(Fn,V_e),e(V_e,Plr),e(Fn,$lr),e(Fn,X_e),e(X_e,Ilr),e(Fn,qlr),e(uo,Nlr),e(uo,E0),e(E0,Wv),e(Wv,z_e),e(z_e,jlr),e(Wv,Dlr),e(Wv,IV),e(IV,Glr),e(Wv,Olr),e(E0,Vlr),e(E0,Hv),e(Hv,Q_e),e(Q_e,Xlr),e(Hv,zlr),e(Hv,qV),e(qV,Qlr),e(Hv,Wlr),e(uo,Hlr),e(uo,W_e),e(W_e,Ulr),e(uo,Jlr),g(C0,uo,null),b(c,eBe,u),b(c,wc,u),e(wc,Uv),e(Uv,H_e),g(w0,H_e,null),e(wc,Ylr),e(wc,U_e),e(U_e,Klr),b(c,oBe,u),b(c,Er,u),g(A0,Er,null),e(Er,Zlr),e(Er,Ac),e(Ac,eir),e(Ac,NV),e(NV,oir),e(Ac,rir),e(Ac,jV),e(jV,tir),e(Ac,air),e(Er,nir),e(Er,y0),e(y0,sir),e(y0,J_e),e(J_e,lir),e(y0,iir),e(Er,dir),e(Er,ut),g(L0,ut,null),e(ut,cir),e(ut,Y_e),e(Y_e,fir),e(ut,mir),e(ut,yc),e(yc,gir),e(yc,K_e),e(K_e,hir),e(yc,pir),e(yc,DV),e(DV,_ir),e(yc,uir),e(ut,bir),e(ut,Z_e),e(Z_e,Fir),e(ut,vir),g(x0,ut,null),e(Er,Tir),e(Er,bo),g(k0,bo,null),e(bo,Mir),e(bo,eue),e(eue,Eir),e(bo,Cir),e(bo,vn),e(vn,wir),e(vn,oue),e(oue,Air),e(vn,yir),e(vn,rue),e(rue,Lir),e(vn,xir),e(vn,tue),e(tue,kir),e(vn,Sir),e(bo,Rir),e(bo,J),e(J,Jv),e(Jv,aue),e(aue,Bir),e(Jv,Pir),e(Jv,GV),e(GV,$ir),e(Jv,Iir),e(J,qir),e(J,Yv),e(Yv,nue),e(nue,Nir),e(Yv,jir),e(Yv,OV),e(OV,Dir),e(Yv,Gir),e(J,Oir),e(J,Kv),e(Kv,sue),e(sue,Vir),e(Kv,Xir),e(Kv,VV),e(VV,zir),e(Kv,Qir),e(J,Wir),e(J,Zv),e(Zv,lue),e(lue,Hir),e(Zv,Uir),e(Zv,XV),e(XV,Jir),e(Zv,Yir),e(J,Kir),e(J,e6),e(e6,iue),e(iue,Zir),e(e6,edr),e(e6,zV),e(zV,odr),e(e6,rdr),e(J,tdr),e(J,o6),e(o6,due),e(due,adr),e(o6,ndr),e(o6,QV),e(QV,sdr),e(o6,ldr),e(J,idr),e(J,r6),e(r6,cue),e(cue,ddr),e(r6,cdr),e(r6,WV),e(WV,fdr),e(r6,mdr),e(J,gdr),e(J,t6),e(t6,fue),e(fue,hdr),e(t6,pdr),e(t6,HV),e(HV,_dr),e(t6,udr),e(J,bdr),e(J,a6),e(a6,mue),e(mue,Fdr),e(a6,vdr),e(a6,UV),e(UV,Tdr),e(a6,Mdr),e(J,Edr),e(J,n6),e(n6,gue),e(gue,Cdr),e(n6,wdr),e(n6,JV),e(JV,Adr),e(n6,ydr),e(J,Ldr),e(J,s6),e(s6,hue),e(hue,xdr),e(s6,kdr),e(s6,YV),e(YV,Sdr),e(s6,Rdr),e(J,Bdr),e(J,l6),e(l6,pue),e(pue,Pdr),e(l6,$dr),e(l6,KV),e(KV,Idr),e(l6,qdr),e(J,Ndr),e(J,i6),e(i6,_ue),e(_ue,jdr),e(i6,Ddr),e(i6,ZV),e(ZV,Gdr),e(i6,Odr),e(J,Vdr),e(J,d6),e(d6,uue),e(uue,Xdr),e(d6,zdr),e(d6,eX),e(eX,Qdr),e(d6,Wdr),e(J,Hdr),e(J,c6),e(c6,bue),e(bue,Udr),e(c6,Jdr),e(c6,oX),e(oX,Ydr),e(c6,Kdr),e(J,Zdr),e(J,f6),e(f6,Fue),e(Fue,ecr),e(f6,ocr),e(f6,rX),e(rX,rcr),e(f6,tcr),e(J,acr),e(J,m6),e(m6,vue),e(vue,ncr),e(m6,scr),e(m6,tX),e(tX,lcr),e(m6,icr),e(J,dcr),e(J,g6),e(g6,Tue),e(Tue,ccr),e(g6,fcr),e(g6,aX),e(aX,mcr),e(g6,gcr),e(J,hcr),e(J,h6),e(h6,Mue),e(Mue,pcr),e(h6,_cr),e(h6,nX),e(nX,ucr),e(h6,bcr),e(J,Fcr),e(J,p6),e(p6,Eue),e(Eue,vcr),e(p6,Tcr),e(p6,sX),e(sX,Mcr),e(p6,Ecr),e(bo,Ccr),e(bo,Cue),e(Cue,wcr),e(bo,Acr),g(S0,bo,null),b(c,rBe,u),b(c,Lc,u),e(Lc,_6),e(_6,wue),g(R0,wue,null),e(Lc,ycr),e(Lc,Aue),e(Aue,Lcr),b(c,tBe,u),b(c,Cr,u),g(B0,Cr,null),e(Cr,xcr),e(Cr,xc),e(xc,kcr),e(xc,lX),e(lX,Scr),e(xc,Rcr),e(xc,iX),e(iX,Bcr),e(xc,Pcr),e(Cr,$cr),e(Cr,P0),e(P0,Icr),e(P0,yue),e(yue,qcr),e(P0,Ncr),e(Cr,jcr),e(Cr,bt),g($0,bt,null),e(bt,Dcr),e(bt,Lue),e(Lue,Gcr),e(bt,Ocr),e(bt,kc),e(kc,Vcr),e(kc,xue),e(xue,Xcr),e(kc,zcr),e(kc,dX),e(dX,Qcr),e(kc,Wcr),e(bt,Hcr),e(bt,kue),e(kue,Ucr),e(bt,Jcr),g(I0,bt,null),e(Cr,Ycr),e(Cr,Fo),g(q0,Fo,null),e(Fo,Kcr),e(Fo,Sue),e(Sue,Zcr),e(Fo,efr),e(Fo,Tn),e(Tn,ofr),e(Tn,Rue),e(Rue,rfr),e(Tn,tfr),e(Tn,Bue),e(Bue,afr),e(Tn,nfr),e(Tn,Pue),e(Pue,sfr),e(Tn,lfr),e(Fo,ifr),e(Fo,ue),e(ue,u6),e(u6,$ue),e($ue,dfr),e(u6,cfr),e(u6,cX),e(cX,ffr),e(u6,mfr),e(ue,gfr),e(ue,b6),e(b6,Iue),e(Iue,hfr),e(b6,pfr),e(b6,fX),e(fX,_fr),e(b6,ufr),e(ue,bfr),e(ue,F6),e(F6,que),e(que,Ffr),e(F6,vfr),e(F6,mX),e(mX,Tfr),e(F6,Mfr),e(ue,Efr),e(ue,v6),e(v6,Nue),e(Nue,Cfr),e(v6,wfr),e(v6,gX),e(gX,Afr),e(v6,yfr),e(ue,Lfr),e(ue,T6),e(T6,jue),e(jue,xfr),e(T6,kfr),e(T6,hX),e(hX,Sfr),e(T6,Rfr),e(ue,Bfr),e(ue,M6),e(M6,Due),e(Due,Pfr),e(M6,$fr),e(M6,pX),e(pX,Ifr),e(M6,qfr),e(ue,Nfr),e(ue,E6),e(E6,Gue),e(Gue,jfr),e(E6,Dfr),e(E6,_X),e(_X,Gfr),e(E6,Ofr),e(ue,Vfr),e(ue,C6),e(C6,Oue),e(Oue,Xfr),e(C6,zfr),e(C6,uX),e(uX,Qfr),e(C6,Wfr),e(ue,Hfr),e(ue,w6),e(w6,Vue),e(Vue,Ufr),e(w6,Jfr),e(w6,bX),e(bX,Yfr),e(w6,Kfr),e(ue,Zfr),e(ue,A6),e(A6,Xue),e(Xue,emr),e(A6,omr),e(A6,FX),e(FX,rmr),e(A6,tmr),e(Fo,amr),e(Fo,zue),e(zue,nmr),e(Fo,smr),g(N0,Fo,null),b(c,aBe,u),b(c,Sc,u),e(Sc,y6),e(y6,Que),g(j0,Que,null),e(Sc,lmr),e(Sc,Wue),e(Wue,imr),b(c,nBe,u),b(c,wr,u),g(D0,wr,null),e(wr,dmr),e(wr,Rc),e(Rc,cmr),e(Rc,vX),e(vX,fmr),e(Rc,mmr),e(Rc,TX),e(TX,gmr),e(Rc,hmr),e(wr,pmr),e(wr,G0),e(G0,_mr),e(G0,Hue),e(Hue,umr),e(G0,bmr),e(wr,Fmr),e(wr,Ft),g(O0,Ft,null),e(Ft,vmr),e(Ft,Uue),e(Uue,Tmr),e(Ft,Mmr),e(Ft,Bc),e(Bc,Emr),e(Bc,Jue),e(Jue,Cmr),e(Bc,wmr),e(Bc,MX),e(MX,Amr),e(Bc,ymr),e(Ft,Lmr),e(Ft,Yue),e(Yue,xmr),e(Ft,kmr),g(V0,Ft,null),e(wr,Smr),e(wr,vo),g(X0,vo,null),e(vo,Rmr),e(vo,Kue),e(Kue,Bmr),e(vo,Pmr),e(vo,Mn),e(Mn,$mr),e(Mn,Zue),e(Zue,Imr),e(Mn,qmr),e(Mn,e1e),e(e1e,Nmr),e(Mn,jmr),e(Mn,o1e),e(o1e,Dmr),e(Mn,Gmr),e(vo,Omr),e(vo,V),e(V,L6),e(L6,r1e),e(r1e,Vmr),e(L6,Xmr),e(L6,EX),e(EX,zmr),e(L6,Qmr),e(V,Wmr),e(V,x6),e(x6,t1e),e(t1e,Hmr),e(x6,Umr),e(x6,CX),e(CX,Jmr),e(x6,Ymr),e(V,Kmr),e(V,k6),e(k6,a1e),e(a1e,Zmr),e(k6,egr),e(k6,wX),e(wX,ogr),e(k6,rgr),e(V,tgr),e(V,S6),e(S6,n1e),e(n1e,agr),e(S6,ngr),e(S6,AX),e(AX,sgr),e(S6,lgr),e(V,igr),e(V,R6),e(R6,s1e),e(s1e,dgr),e(R6,cgr),e(R6,yX),e(yX,fgr),e(R6,mgr),e(V,ggr),e(V,B6),e(B6,l1e),e(l1e,hgr),e(B6,pgr),e(B6,LX),e(LX,_gr),e(B6,ugr),e(V,bgr),e(V,P6),e(P6,i1e),e(i1e,Fgr),e(P6,vgr),e(P6,xX),e(xX,Tgr),e(P6,Mgr),e(V,Egr),e(V,$6),e($6,d1e),e(d1e,Cgr),e($6,wgr),e($6,kX),e(kX,Agr),e($6,ygr),e(V,Lgr),e(V,I6),e(I6,c1e),e(c1e,xgr),e(I6,kgr),e(I6,SX),e(SX,Sgr),e(I6,Rgr),e(V,Bgr),e(V,q6),e(q6,f1e),e(f1e,Pgr),e(q6,$gr),e(q6,RX),e(RX,Igr),e(q6,qgr),e(V,Ngr),e(V,N6),e(N6,m1e),e(m1e,jgr),e(N6,Dgr),e(N6,BX),e(BX,Ggr),e(N6,Ogr),e(V,Vgr),e(V,j6),e(j6,g1e),e(g1e,Xgr),e(j6,zgr),e(j6,PX),e(PX,Qgr),e(j6,Wgr),e(V,Hgr),e(V,D6),e(D6,h1e),e(h1e,Ugr),e(D6,Jgr),e(D6,$X),e($X,Ygr),e(D6,Kgr),e(V,Zgr),e(V,G6),e(G6,p1e),e(p1e,ehr),e(G6,ohr),e(G6,IX),e(IX,rhr),e(G6,thr),e(V,ahr),e(V,O6),e(O6,_1e),e(_1e,nhr),e(O6,shr),e(O6,qX),e(qX,lhr),e(O6,ihr),e(V,dhr),e(V,V6),e(V6,u1e),e(u1e,chr),e(V6,fhr),e(V6,NX),e(NX,mhr),e(V6,ghr),e(V,hhr),e(V,X6),e(X6,b1e),e(b1e,phr),e(X6,_hr),e(X6,jX),e(jX,uhr),e(X6,bhr),e(V,Fhr),e(V,z6),e(z6,F1e),e(F1e,vhr),e(z6,Thr),e(z6,DX),e(DX,Mhr),e(z6,Ehr),e(V,Chr),e(V,Q6),e(Q6,v1e),e(v1e,whr),e(Q6,Ahr),e(Q6,GX),e(GX,yhr),e(Q6,Lhr),e(V,xhr),e(V,W6),e(W6,T1e),e(T1e,khr),e(W6,Shr),e(W6,OX),e(OX,Rhr),e(W6,Bhr),e(V,Phr),e(V,H6),e(H6,M1e),e(M1e,$hr),e(H6,Ihr),e(H6,VX),e(VX,qhr),e(H6,Nhr),e(V,jhr),e(V,U6),e(U6,E1e),e(E1e,Dhr),e(U6,Ghr),e(U6,XX),e(XX,Ohr),e(U6,Vhr),e(V,Xhr),e(V,J6),e(J6,C1e),e(C1e,zhr),e(J6,Qhr),e(J6,zX),e(zX,Whr),e(J6,Hhr),e(V,Uhr),e(V,Y6),e(Y6,w1e),e(w1e,Jhr),e(Y6,Yhr),e(Y6,QX),e(QX,Khr),e(Y6,Zhr),e(V,epr),e(V,K6),e(K6,A1e),e(A1e,opr),e(K6,rpr),e(K6,WX),e(WX,tpr),e(K6,apr),e(V,npr),e(V,Z6),e(Z6,y1e),e(y1e,spr),e(Z6,lpr),e(Z6,HX),e(HX,ipr),e(Z6,dpr),e(vo,cpr),e(vo,L1e),e(L1e,fpr),e(vo,mpr),g(z0,vo,null),b(c,sBe,u),b(c,Pc,u),e(Pc,eT),e(eT,x1e),g(Q0,x1e,null),e(Pc,gpr),e(Pc,k1e),e(k1e,hpr),b(c,lBe,u),b(c,Ar,u),g(W0,Ar,null),e(Ar,ppr),e(Ar,$c),e($c,_pr),e($c,UX),e(UX,upr),e($c,bpr),e($c,JX),e(JX,Fpr),e($c,vpr),e(Ar,Tpr),e(Ar,H0),e(H0,Mpr),e(H0,S1e),e(S1e,Epr),e(H0,Cpr),e(Ar,wpr),e(Ar,vt),g(U0,vt,null),e(vt,Apr),e(vt,R1e),e(R1e,ypr),e(vt,Lpr),e(vt,Ic),e(Ic,xpr),e(Ic,B1e),e(B1e,kpr),e(Ic,Spr),e(Ic,YX),e(YX,Rpr),e(Ic,Bpr),e(vt,Ppr),e(vt,P1e),e(P1e,$pr),e(vt,Ipr),g(J0,vt,null),e(Ar,qpr),e(Ar,To),g(Y0,To,null),e(To,Npr),e(To,$1e),e($1e,jpr),e(To,Dpr),e(To,En),e(En,Gpr),e(En,I1e),e(I1e,Opr),e(En,Vpr),e(En,q1e),e(q1e,Xpr),e(En,zpr),e(En,N1e),e(N1e,Qpr),e(En,Wpr),e(To,Hpr),e(To,ae),e(ae,oT),e(oT,j1e),e(j1e,Upr),e(oT,Jpr),e(oT,KX),e(KX,Ypr),e(oT,Kpr),e(ae,Zpr),e(ae,rT),e(rT,D1e),e(D1e,e_r),e(rT,o_r),e(rT,ZX),e(ZX,r_r),e(rT,t_r),e(ae,a_r),e(ae,tT),e(tT,G1e),e(G1e,n_r),e(tT,s_r),e(tT,ez),e(ez,l_r),e(tT,i_r),e(ae,d_r),e(ae,aT),e(aT,O1e),e(O1e,c_r),e(aT,f_r),e(aT,oz),e(oz,m_r),e(aT,g_r),e(ae,h_r),e(ae,nT),e(nT,V1e),e(V1e,p_r),e(nT,__r),e(nT,rz),e(rz,u_r),e(nT,b_r),e(ae,F_r),e(ae,sT),e(sT,X1e),e(X1e,v_r),e(sT,T_r),e(sT,tz),e(tz,M_r),e(sT,E_r),e(ae,C_r),e(ae,lT),e(lT,z1e),e(z1e,w_r),e(lT,A_r),e(lT,az),e(az,y_r),e(lT,L_r),e(ae,x_r),e(ae,iT),e(iT,Q1e),e(Q1e,k_r),e(iT,S_r),e(iT,nz),e(nz,R_r),e(iT,B_r),e(ae,P_r),e(ae,dT),e(dT,W1e),e(W1e,$_r),e(dT,I_r),e(dT,sz),e(sz,q_r),e(dT,N_r),e(ae,j_r),e(ae,cT),e(cT,H1e),e(H1e,D_r),e(cT,G_r),e(cT,lz),e(lz,O_r),e(cT,V_r),e(ae,X_r),e(ae,fT),e(fT,U1e),e(U1e,z_r),e(fT,Q_r),e(fT,iz),e(iz,W_r),e(fT,H_r),e(ae,U_r),e(ae,mT),e(mT,J1e),e(J1e,J_r),e(mT,Y_r),e(mT,dz),e(dz,K_r),e(mT,Z_r),e(ae,eur),e(ae,gT),e(gT,Y1e),e(Y1e,our),e(gT,rur),e(gT,cz),e(cz,tur),e(gT,aur),e(ae,nur),e(ae,hT),e(hT,K1e),e(K1e,sur),e(hT,lur),e(hT,fz),e(fz,iur),e(hT,dur),e(ae,cur),e(ae,pT),e(pT,Z1e),e(Z1e,fur),e(pT,mur),e(pT,mz),e(mz,gur),e(pT,hur),e(ae,pur),e(ae,_T),e(_T,e4e),e(e4e,_ur),e(_T,uur),e(_T,gz),e(gz,bur),e(_T,Fur),e(ae,vur),e(ae,uT),e(uT,o4e),e(o4e,Tur),e(uT,Mur),e(uT,hz),e(hz,Eur),e(uT,Cur),e(To,wur),e(To,r4e),e(r4e,Aur),e(To,yur),g(K0,To,null),b(c,iBe,u),b(c,qc,u),e(qc,bT),e(bT,t4e),g(Z0,t4e,null),e(qc,Lur),e(qc,a4e),e(a4e,xur),b(c,dBe,u),b(c,yr,u),g(ey,yr,null),e(yr,kur),e(yr,Nc),e(Nc,Sur),e(Nc,pz),e(pz,Rur),e(Nc,Bur),e(Nc,_z),e(_z,Pur),e(Nc,$ur),e(yr,Iur),e(yr,oy),e(oy,qur),e(oy,n4e),e(n4e,Nur),e(oy,jur),e(yr,Dur),e(yr,Tt),g(ry,Tt,null),e(Tt,Gur),e(Tt,s4e),e(s4e,Our),e(Tt,Vur),e(Tt,jc),e(jc,Xur),e(jc,l4e),e(l4e,zur),e(jc,Qur),e(jc,uz),e(uz,Wur),e(jc,Hur),e(Tt,Uur),e(Tt,i4e),e(i4e,Jur),e(Tt,Yur),g(ty,Tt,null),e(yr,Kur),e(yr,Mo),g(ay,Mo,null),e(Mo,Zur),e(Mo,d4e),e(d4e,e1r),e(Mo,o1r),e(Mo,Cn),e(Cn,r1r),e(Cn,c4e),e(c4e,t1r),e(Cn,a1r),e(Cn,f4e),e(f4e,n1r),e(Cn,s1r),e(Cn,m4e),e(m4e,l1r),e(Cn,i1r),e(Mo,d1r),e(Mo,g4e),e(g4e,FT),e(FT,h4e),e(h4e,c1r),e(FT,f1r),e(FT,bz),e(bz,m1r),e(FT,g1r),e(Mo,h1r),e(Mo,p4e),e(p4e,p1r),e(Mo,_1r),g(ny,Mo,null),b(c,cBe,u),b(c,Dc,u),e(Dc,vT),e(vT,_4e),g(sy,_4e,null),e(Dc,u1r),e(Dc,u4e),e(u4e,b1r),b(c,fBe,u),b(c,Lr,u),g(ly,Lr,null),e(Lr,F1r),e(Lr,Gc),e(Gc,v1r),e(Gc,Fz),e(Fz,T1r),e(Gc,M1r),e(Gc,vz),e(vz,E1r),e(Gc,C1r),e(Lr,w1r),e(Lr,iy),e(iy,A1r),e(iy,b4e),e(b4e,y1r),e(iy,L1r),e(Lr,x1r),e(Lr,Mt),g(dy,Mt,null),e(Mt,k1r),e(Mt,F4e),e(F4e,S1r),e(Mt,R1r),e(Mt,Oc),e(Oc,B1r),e(Oc,v4e),e(v4e,P1r),e(Oc,$1r),e(Oc,Tz),e(Tz,I1r),e(Oc,q1r),e(Mt,N1r),e(Mt,T4e),e(T4e,j1r),e(Mt,D1r),g(cy,Mt,null),e(Lr,G1r),e(Lr,Eo),g(fy,Eo,null),e(Eo,O1r),e(Eo,M4e),e(M4e,V1r),e(Eo,X1r),e(Eo,wn),e(wn,z1r),e(wn,E4e),e(E4e,Q1r),e(wn,W1r),e(wn,C4e),e(C4e,H1r),e(wn,U1r),e(wn,w4e),e(w4e,J1r),e(wn,Y1r),e(Eo,K1r),e(Eo,Y),e(Y,TT),e(TT,A4e),e(A4e,Z1r),e(TT,e4r),e(TT,Mz),e(Mz,o4r),e(TT,r4r),e(Y,t4r),e(Y,MT),e(MT,y4e),e(y4e,a4r),e(MT,n4r),e(MT,Ez),e(Ez,s4r),e(MT,l4r),e(Y,i4r),e(Y,ET),e(ET,L4e),e(L4e,d4r),e(ET,c4r),e(ET,Cz),e(Cz,f4r),e(ET,m4r),e(Y,g4r),e(Y,CT),e(CT,x4e),e(x4e,h4r),e(CT,p4r),e(CT,wz),e(wz,_4r),e(CT,u4r),e(Y,b4r),e(Y,wT),e(wT,k4e),e(k4e,F4r),e(wT,v4r),e(wT,Az),e(Az,T4r),e(wT,M4r),e(Y,E4r),e(Y,AT),e(AT,S4e),e(S4e,C4r),e(AT,w4r),e(AT,yz),e(yz,A4r),e(AT,y4r),e(Y,L4r),e(Y,yT),e(yT,R4e),e(R4e,x4r),e(yT,k4r),e(yT,Lz),e(Lz,S4r),e(yT,R4r),e(Y,B4r),e(Y,LT),e(LT,B4e),e(B4e,P4r),e(LT,$4r),e(LT,xz),e(xz,I4r),e(LT,q4r),e(Y,N4r),e(Y,xT),e(xT,P4e),e(P4e,j4r),e(xT,D4r),e(xT,kz),e(kz,G4r),e(xT,O4r),e(Y,V4r),e(Y,kT),e(kT,$4e),e($4e,X4r),e(kT,z4r),e(kT,Sz),e(Sz,Q4r),e(kT,W4r),e(Y,H4r),e(Y,ST),e(ST,I4e),e(I4e,U4r),e(ST,J4r),e(ST,Rz),e(Rz,Y4r),e(ST,K4r),e(Y,Z4r),e(Y,RT),e(RT,q4e),e(q4e,ebr),e(RT,obr),e(RT,Bz),e(Bz,rbr),e(RT,tbr),e(Y,abr),e(Y,BT),e(BT,N4e),e(N4e,nbr),e(BT,sbr),e(BT,Pz),e(Pz,lbr),e(BT,ibr),e(Y,dbr),e(Y,PT),e(PT,j4e),e(j4e,cbr),e(PT,fbr),e(PT,$z),e($z,mbr),e(PT,gbr),e(Y,hbr),e(Y,$T),e($T,D4e),e(D4e,pbr),e($T,_br),e($T,Iz),e(Iz,ubr),e($T,bbr),e(Y,Fbr),e(Y,IT),e(IT,G4e),e(G4e,vbr),e(IT,Tbr),e(IT,qz),e(qz,Mbr),e(IT,Ebr),e(Y,Cbr),e(Y,qT),e(qT,O4e),e(O4e,wbr),e(qT,Abr),e(qT,Nz),e(Nz,ybr),e(qT,Lbr),e(Y,xbr),e(Y,NT),e(NT,V4e),e(V4e,kbr),e(NT,Sbr),e(NT,jz),e(jz,Rbr),e(NT,Bbr),e(Y,Pbr),e(Y,jT),e(jT,X4e),e(X4e,$br),e(jT,Ibr),e(jT,Dz),e(Dz,qbr),e(jT,Nbr),e(Y,jbr),e(Y,DT),e(DT,z4e),e(z4e,Dbr),e(DT,Gbr),e(DT,Gz),e(Gz,Obr),e(DT,Vbr),e(Eo,Xbr),e(Eo,Q4e),e(Q4e,zbr),e(Eo,Qbr),g(my,Eo,null),b(c,mBe,u),b(c,Vc,u),e(Vc,GT),e(GT,W4e),g(gy,W4e,null),e(Vc,Wbr),e(Vc,H4e),e(H4e,Hbr),b(c,gBe,u),b(c,xr,u),g(hy,xr,null),e(xr,Ubr),e(xr,Xc),e(Xc,Jbr),e(Xc,Oz),e(Oz,Ybr),e(Xc,Kbr),e(Xc,Vz),e(Vz,Zbr),e(Xc,e3r),e(xr,o3r),e(xr,py),e(py,r3r),e(py,U4e),e(U4e,t3r),e(py,a3r),e(xr,n3r),e(xr,Et),g(_y,Et,null),e(Et,s3r),e(Et,J4e),e(J4e,l3r),e(Et,i3r),e(Et,zc),e(zc,d3r),e(zc,Y4e),e(Y4e,c3r),e(zc,f3r),e(zc,Xz),e(Xz,m3r),e(zc,g3r),e(Et,h3r),e(Et,K4e),e(K4e,p3r),e(Et,_3r),g(uy,Et,null),e(xr,u3r),e(xr,Co),g(by,Co,null),e(Co,b3r),e(Co,Z4e),e(Z4e,F3r),e(Co,v3r),e(Co,An),e(An,T3r),e(An,ebe),e(ebe,M3r),e(An,E3r),e(An,obe),e(obe,C3r),e(An,w3r),e(An,rbe),e(rbe,A3r),e(An,y3r),e(Co,L3r),e(Co,K),e(K,OT),e(OT,tbe),e(tbe,x3r),e(OT,k3r),e(OT,zz),e(zz,S3r),e(OT,R3r),e(K,B3r),e(K,VT),e(VT,abe),e(abe,P3r),e(VT,$3r),e(VT,Qz),e(Qz,I3r),e(VT,q3r),e(K,N3r),e(K,XT),e(XT,nbe),e(nbe,j3r),e(XT,D3r),e(XT,Wz),e(Wz,G3r),e(XT,O3r),e(K,V3r),e(K,zT),e(zT,sbe),e(sbe,X3r),e(zT,z3r),e(zT,Hz),e(Hz,Q3r),e(zT,W3r),e(K,H3r),e(K,QT),e(QT,lbe),e(lbe,U3r),e(QT,J3r),e(QT,Uz),e(Uz,Y3r),e(QT,K3r),e(K,Z3r),e(K,WT),e(WT,ibe),e(ibe,e2r),e(WT,o2r),e(WT,Jz),e(Jz,r2r),e(WT,t2r),e(K,a2r),e(K,HT),e(HT,dbe),e(dbe,n2r),e(HT,s2r),e(HT,Yz),e(Yz,l2r),e(HT,i2r),e(K,d2r),e(K,UT),e(UT,cbe),e(cbe,c2r),e(UT,f2r),e(UT,Kz),e(Kz,m2r),e(UT,g2r),e(K,h2r),e(K,JT),e(JT,fbe),e(fbe,p2r),e(JT,_2r),e(JT,Zz),e(Zz,u2r),e(JT,b2r),e(K,F2r),e(K,YT),e(YT,mbe),e(mbe,v2r),e(YT,T2r),e(YT,eQ),e(eQ,M2r),e(YT,E2r),e(K,C2r),e(K,KT),e(KT,gbe),e(gbe,w2r),e(KT,A2r),e(KT,oQ),e(oQ,y2r),e(KT,L2r),e(K,x2r),e(K,ZT),e(ZT,hbe),e(hbe,k2r),e(ZT,S2r),e(ZT,rQ),e(rQ,R2r),e(ZT,B2r),e(K,P2r),e(K,e7),e(e7,pbe),e(pbe,$2r),e(e7,I2r),e(e7,tQ),e(tQ,q2r),e(e7,N2r),e(K,j2r),e(K,o7),e(o7,_be),e(_be,D2r),e(o7,G2r),e(o7,aQ),e(aQ,O2r),e(o7,V2r),e(K,X2r),e(K,r7),e(r7,ube),e(ube,z2r),e(r7,Q2r),e(r7,nQ),e(nQ,W2r),e(r7,H2r),e(K,U2r),e(K,t7),e(t7,bbe),e(bbe,J2r),e(t7,Y2r),e(t7,sQ),e(sQ,K2r),e(t7,Z2r),e(K,eFr),e(K,a7),e(a7,Fbe),e(Fbe,oFr),e(a7,rFr),e(a7,lQ),e(lQ,tFr),e(a7,aFr),e(K,nFr),e(K,n7),e(n7,vbe),e(vbe,sFr),e(n7,lFr),e(n7,iQ),e(iQ,iFr),e(n7,dFr),e(K,cFr),e(K,s7),e(s7,Tbe),e(Tbe,fFr),e(s7,mFr),e(s7,dQ),e(dQ,gFr),e(s7,hFr),e(K,pFr),e(K,l7),e(l7,Mbe),e(Mbe,_Fr),e(l7,uFr),e(l7,cQ),e(cQ,bFr),e(l7,FFr),e(Co,vFr),e(Co,Ebe),e(Ebe,TFr),e(Co,MFr),g(Fy,Co,null),b(c,hBe,u),b(c,Qc,u),e(Qc,i7),e(i7,Cbe),g(vy,Cbe,null),e(Qc,EFr),e(Qc,wbe),e(wbe,CFr),b(c,pBe,u),b(c,kr,u),g(Ty,kr,null),e(kr,wFr),e(kr,Wc),e(Wc,AFr),e(Wc,fQ),e(fQ,yFr),e(Wc,LFr),e(Wc,mQ),e(mQ,xFr),e(Wc,kFr),e(kr,SFr),e(kr,My),e(My,RFr),e(My,Abe),e(Abe,BFr),e(My,PFr),e(kr,$Fr),e(kr,Ct),g(Ey,Ct,null),e(Ct,IFr),e(Ct,ybe),e(ybe,qFr),e(Ct,NFr),e(Ct,Hc),e(Hc,jFr),e(Hc,Lbe),e(Lbe,DFr),e(Hc,GFr),e(Hc,gQ),e(gQ,OFr),e(Hc,VFr),e(Ct,XFr),e(Ct,xbe),e(xbe,zFr),e(Ct,QFr),g(Cy,Ct,null),e(kr,WFr),e(kr,wo),g(wy,wo,null),e(wo,HFr),e(wo,kbe),e(kbe,UFr),e(wo,JFr),e(wo,yn),e(yn,YFr),e(yn,Sbe),e(Sbe,KFr),e(yn,ZFr),e(yn,Rbe),e(Rbe,evr),e(yn,ovr),e(yn,Bbe),e(Bbe,rvr),e(yn,tvr),e(wo,avr),e(wo,Pbe),e(Pbe,d7),e(d7,$be),e($be,nvr),e(d7,svr),e(d7,hQ),e(hQ,lvr),e(d7,ivr),e(wo,dvr),e(wo,Ibe),e(Ibe,cvr),e(wo,fvr),g(Ay,wo,null),b(c,_Be,u),b(c,Uc,u),e(Uc,c7),e(c7,qbe),g(yy,qbe,null),e(Uc,mvr),e(Uc,Nbe),e(Nbe,gvr),b(c,uBe,u),b(c,Sr,u),g(Ly,Sr,null),e(Sr,hvr),e(Sr,Jc),e(Jc,pvr),e(Jc,pQ),e(pQ,_vr),e(Jc,uvr),e(Jc,_Q),e(_Q,bvr),e(Jc,Fvr),e(Sr,vvr),e(Sr,xy),e(xy,Tvr),e(xy,jbe),e(jbe,Mvr),e(xy,Evr),e(Sr,Cvr),e(Sr,wt),g(ky,wt,null),e(wt,wvr),e(wt,Dbe),e(Dbe,Avr),e(wt,yvr),e(wt,Yc),e(Yc,Lvr),e(Yc,Gbe),e(Gbe,xvr),e(Yc,kvr),e(Yc,uQ),e(uQ,Svr),e(Yc,Rvr),e(wt,Bvr),e(wt,Obe),e(Obe,Pvr),e(wt,$vr),g(Sy,wt,null),e(Sr,Ivr),e(Sr,Ao),g(Ry,Ao,null),e(Ao,qvr),e(Ao,Vbe),e(Vbe,Nvr),e(Ao,jvr),e(Ao,Ln),e(Ln,Dvr),e(Ln,Xbe),e(Xbe,Gvr),e(Ln,Ovr),e(Ln,zbe),e(zbe,Vvr),e(Ln,Xvr),e(Ln,Qbe),e(Qbe,zvr),e(Ln,Qvr),e(Ao,Wvr),e(Ao,Wbe),e(Wbe,f7),e(f7,Hbe),e(Hbe,Hvr),e(f7,Uvr),e(f7,bQ),e(bQ,Jvr),e(f7,Yvr),e(Ao,Kvr),e(Ao,Ube),e(Ube,Zvr),e(Ao,e6r),g(By,Ao,null),b(c,bBe,u),b(c,Kc,u),e(Kc,m7),e(m7,Jbe),g(Py,Jbe,null),e(Kc,o6r),e(Kc,Ybe),e(Ybe,r6r),b(c,FBe,u),b(c,Rr,u),g($y,Rr,null),e(Rr,t6r),e(Rr,Zc),e(Zc,a6r),e(Zc,FQ),e(FQ,n6r),e(Zc,s6r),e(Zc,vQ),e(vQ,l6r),e(Zc,i6r),e(Rr,d6r),e(Rr,Iy),e(Iy,c6r),e(Iy,Kbe),e(Kbe,f6r),e(Iy,m6r),e(Rr,g6r),e(Rr,At),g(qy,At,null),e(At,h6r),e(At,Zbe),e(Zbe,p6r),e(At,_6r),e(At,ef),e(ef,u6r),e(ef,e3e),e(e3e,b6r),e(ef,F6r),e(ef,TQ),e(TQ,v6r),e(ef,T6r),e(At,M6r),e(At,o3e),e(o3e,E6r),e(At,C6r),g(Ny,At,null),e(Rr,w6r),e(Rr,yo),g(jy,yo,null),e(yo,A6r),e(yo,r3e),e(r3e,y6r),e(yo,L6r),e(yo,xn),e(xn,x6r),e(xn,t3e),e(t3e,k6r),e(xn,S6r),e(xn,a3e),e(a3e,R6r),e(xn,B6r),e(xn,n3e),e(n3e,P6r),e(xn,$6r),e(yo,I6r),e(yo,z),e(z,g7),e(g7,s3e),e(s3e,q6r),e(g7,N6r),e(g7,MQ),e(MQ,j6r),e(g7,D6r),e(z,G6r),e(z,h7),e(h7,l3e),e(l3e,O6r),e(h7,V6r),e(h7,EQ),e(EQ,X6r),e(h7,z6r),e(z,Q6r),e(z,p7),e(p7,i3e),e(i3e,W6r),e(p7,H6r),e(p7,CQ),e(CQ,U6r),e(p7,J6r),e(z,Y6r),e(z,_7),e(_7,d3e),e(d3e,K6r),e(_7,Z6r),e(_7,wQ),e(wQ,eTr),e(_7,oTr),e(z,rTr),e(z,u7),e(u7,c3e),e(c3e,tTr),e(u7,aTr),e(u7,AQ),e(AQ,nTr),e(u7,sTr),e(z,lTr),e(z,b7),e(b7,f3e),e(f3e,iTr),e(b7,dTr),e(b7,yQ),e(yQ,cTr),e(b7,fTr),e(z,mTr),e(z,F7),e(F7,m3e),e(m3e,gTr),e(F7,hTr),e(F7,LQ),e(LQ,pTr),e(F7,_Tr),e(z,uTr),e(z,v7),e(v7,g3e),e(g3e,bTr),e(v7,FTr),e(v7,xQ),e(xQ,vTr),e(v7,TTr),e(z,MTr),e(z,T7),e(T7,h3e),e(h3e,ETr),e(T7,CTr),e(T7,kQ),e(kQ,wTr),e(T7,ATr),e(z,yTr),e(z,M7),e(M7,p3e),e(p3e,LTr),e(M7,xTr),e(M7,SQ),e(SQ,kTr),e(M7,STr),e(z,RTr),e(z,E7),e(E7,_3e),e(_3e,BTr),e(E7,PTr),e(E7,RQ),e(RQ,$Tr),e(E7,ITr),e(z,qTr),e(z,C7),e(C7,u3e),e(u3e,NTr),e(C7,jTr),e(C7,BQ),e(BQ,DTr),e(C7,GTr),e(z,OTr),e(z,w7),e(w7,b3e),e(b3e,VTr),e(w7,XTr),e(w7,PQ),e(PQ,zTr),e(w7,QTr),e(z,WTr),e(z,A7),e(A7,F3e),e(F3e,HTr),e(A7,UTr),e(A7,$Q),e($Q,JTr),e(A7,YTr),e(z,KTr),e(z,y7),e(y7,v3e),e(v3e,ZTr),e(y7,e7r),e(y7,IQ),e(IQ,o7r),e(y7,r7r),e(z,t7r),e(z,L7),e(L7,T3e),e(T3e,a7r),e(L7,n7r),e(L7,qQ),e(qQ,s7r),e(L7,l7r),e(z,i7r),e(z,x7),e(x7,M3e),e(M3e,d7r),e(x7,c7r),e(x7,NQ),e(NQ,f7r),e(x7,m7r),e(z,g7r),e(z,k7),e(k7,E3e),e(E3e,h7r),e(k7,p7r),e(k7,jQ),e(jQ,_7r),e(k7,u7r),e(z,b7r),e(z,S7),e(S7,C3e),e(C3e,F7r),e(S7,v7r),e(S7,DQ),e(DQ,T7r),e(S7,M7r),e(z,E7r),e(z,R7),e(R7,w3e),e(w3e,C7r),e(R7,w7r),e(R7,GQ),e(GQ,A7r),e(R7,y7r),e(z,L7r),e(z,B7),e(B7,A3e),e(A3e,x7r),e(B7,k7r),e(B7,OQ),e(OQ,S7r),e(B7,R7r),e(z,B7r),e(z,P7),e(P7,y3e),e(y3e,P7r),e(P7,$7r),e(P7,VQ),e(VQ,I7r),e(P7,q7r),e(z,N7r),e(z,$7),e($7,L3e),e(L3e,j7r),e($7,D7r),e($7,XQ),e(XQ,G7r),e($7,O7r),e(z,V7r),e(z,I7),e(I7,x3e),e(x3e,X7r),e(I7,z7r),e(I7,zQ),e(zQ,Q7r),e(I7,W7r),e(z,H7r),e(z,q7),e(q7,k3e),e(k3e,U7r),e(q7,J7r),e(q7,QQ),e(QQ,Y7r),e(q7,K7r),e(yo,Z7r),e(yo,S3e),e(S3e,eMr),e(yo,oMr),g(Dy,yo,null),b(c,vBe,u),b(c,of,u),e(of,N7),e(N7,R3e),g(Gy,R3e,null),e(of,rMr),e(of,B3e),e(B3e,tMr),b(c,TBe,u),b(c,Br,u),g(Oy,Br,null),e(Br,aMr),e(Br,rf),e(rf,nMr),e(rf,WQ),e(WQ,sMr),e(rf,lMr),e(rf,HQ),e(HQ,iMr),e(rf,dMr),e(Br,cMr),e(Br,Vy),e(Vy,fMr),e(Vy,P3e),e(P3e,mMr),e(Vy,gMr),e(Br,hMr),e(Br,yt),g(Xy,yt,null),e(yt,pMr),e(yt,$3e),e($3e,_Mr),e(yt,uMr),e(yt,tf),e(tf,bMr),e(tf,I3e),e(I3e,FMr),e(tf,vMr),e(tf,UQ),e(UQ,TMr),e(tf,MMr),e(yt,EMr),e(yt,q3e),e(q3e,CMr),e(yt,wMr),g(zy,yt,null),e(Br,AMr),e(Br,Lo),g(Qy,Lo,null),e(Lo,yMr),e(Lo,N3e),e(N3e,LMr),e(Lo,xMr),e(Lo,kn),e(kn,kMr),e(kn,j3e),e(j3e,SMr),e(kn,RMr),e(kn,D3e),e(D3e,BMr),e(kn,PMr),e(kn,G3e),e(G3e,$Mr),e(kn,IMr),e(Lo,qMr),e(Lo,ca),e(ca,j7),e(j7,O3e),e(O3e,NMr),e(j7,jMr),e(j7,JQ),e(JQ,DMr),e(j7,GMr),e(ca,OMr),e(ca,D7),e(D7,V3e),e(V3e,VMr),e(D7,XMr),e(D7,YQ),e(YQ,zMr),e(D7,QMr),e(ca,WMr),e(ca,G7),e(G7,X3e),e(X3e,HMr),e(G7,UMr),e(G7,KQ),e(KQ,JMr),e(G7,YMr),e(ca,KMr),e(ca,O7),e(O7,z3e),e(z3e,ZMr),e(O7,eEr),e(O7,ZQ),e(ZQ,oEr),e(O7,rEr),e(ca,tEr),e(ca,V7),e(V7,Q3e),e(Q3e,aEr),e(V7,nEr),e(V7,eW),e(eW,sEr),e(V7,lEr),e(Lo,iEr),e(Lo,W3e),e(W3e,dEr),e(Lo,cEr),g(Wy,Lo,null),b(c,MBe,u),b(c,af,u),e(af,X7),e(X7,H3e),g(Hy,H3e,null),e(af,fEr),e(af,U3e),e(U3e,mEr),b(c,EBe,u),b(c,Pr,u),g(Uy,Pr,null),e(Pr,gEr),e(Pr,nf),e(nf,hEr),e(nf,oW),e(oW,pEr),e(nf,_Er),e(nf,rW),e(rW,uEr),e(nf,bEr),e(Pr,FEr),e(Pr,Jy),e(Jy,vEr),e(Jy,J3e),e(J3e,TEr),e(Jy,MEr),e(Pr,EEr),e(Pr,Lt),g(Yy,Lt,null),e(Lt,CEr),e(Lt,Y3e),e(Y3e,wEr),e(Lt,AEr),e(Lt,sf),e(sf,yEr),e(sf,K3e),e(K3e,LEr),e(sf,xEr),e(sf,tW),e(tW,kEr),e(sf,SEr),e(Lt,REr),e(Lt,Z3e),e(Z3e,BEr),e(Lt,PEr),g(Ky,Lt,null),e(Pr,$Er),e(Pr,xo),g(Zy,xo,null),e(xo,IEr),e(xo,e2e),e(e2e,qEr),e(xo,NEr),e(xo,Sn),e(Sn,jEr),e(Sn,o2e),e(o2e,DEr),e(Sn,GEr),e(Sn,r2e),e(r2e,OEr),e(Sn,VEr),e(Sn,t2e),e(t2e,XEr),e(Sn,zEr),e(xo,QEr),e(xo,fe),e(fe,z7),e(z7,a2e),e(a2e,WEr),e(z7,HEr),e(z7,aW),e(aW,UEr),e(z7,JEr),e(fe,YEr),e(fe,Q7),e(Q7,n2e),e(n2e,KEr),e(Q7,ZEr),e(Q7,nW),e(nW,eCr),e(Q7,oCr),e(fe,rCr),e(fe,W7),e(W7,s2e),e(s2e,tCr),e(W7,aCr),e(W7,sW),e(sW,nCr),e(W7,sCr),e(fe,lCr),e(fe,H7),e(H7,l2e),e(l2e,iCr),e(H7,dCr),e(H7,lW),e(lW,cCr),e(H7,fCr),e(fe,mCr),e(fe,U7),e(U7,i2e),e(i2e,gCr),e(U7,hCr),e(U7,iW),e(iW,pCr),e(U7,_Cr),e(fe,uCr),e(fe,J7),e(J7,d2e),e(d2e,bCr),e(J7,FCr),e(J7,dW),e(dW,vCr),e(J7,TCr),e(fe,MCr),e(fe,Y7),e(Y7,c2e),e(c2e,ECr),e(Y7,CCr),e(Y7,cW),e(cW,wCr),e(Y7,ACr),e(fe,yCr),e(fe,K7),e(K7,f2e),e(f2e,LCr),e(K7,xCr),e(K7,fW),e(fW,kCr),e(K7,SCr),e(fe,RCr),e(fe,Z7),e(Z7,m2e),e(m2e,BCr),e(Z7,PCr),e(Z7,mW),e(mW,$Cr),e(Z7,ICr),e(fe,qCr),e(fe,eM),e(eM,g2e),e(g2e,NCr),e(eM,jCr),e(eM,gW),e(gW,DCr),e(eM,GCr),e(fe,OCr),e(fe,oM),e(oM,h2e),e(h2e,VCr),e(oM,XCr),e(oM,hW),e(hW,zCr),e(oM,QCr),e(fe,WCr),e(fe,rM),e(rM,p2e),e(p2e,HCr),e(rM,UCr),e(rM,pW),e(pW,JCr),e(rM,YCr),e(xo,KCr),e(xo,_2e),e(_2e,ZCr),e(xo,e5r),g(eL,xo,null),b(c,CBe,u),b(c,lf,u),e(lf,tM),e(tM,u2e),g(oL,u2e,null),e(lf,o5r),e(lf,b2e),e(b2e,r5r),b(c,wBe,u),b(c,$r,u),g(rL,$r,null),e($r,t5r),e($r,df),e(df,a5r),e(df,_W),e(_W,n5r),e(df,s5r),e(df,uW),e(uW,l5r),e(df,i5r),e($r,d5r),e($r,tL),e(tL,c5r),e(tL,F2e),e(F2e,f5r),e(tL,m5r),e($r,g5r),e($r,xt),g(aL,xt,null),e(xt,h5r),e(xt,v2e),e(v2e,p5r),e(xt,_5r),e(xt,cf),e(cf,u5r),e(cf,T2e),e(T2e,b5r),e(cf,F5r),e(cf,bW),e(bW,v5r),e(cf,T5r),e(xt,M5r),e(xt,M2e),e(M2e,E5r),e(xt,C5r),g(nL,xt,null),e($r,w5r),e($r,ko),g(sL,ko,null),e(ko,A5r),e(ko,E2e),e(E2e,y5r),e(ko,L5r),e(ko,Rn),e(Rn,x5r),e(Rn,C2e),e(C2e,k5r),e(Rn,S5r),e(Rn,w2e),e(w2e,R5r),e(Rn,B5r),e(Rn,A2e),e(A2e,P5r),e(Rn,$5r),e(ko,I5r),e(ko,be),e(be,aM),e(aM,y2e),e(y2e,q5r),e(aM,N5r),e(aM,FW),e(FW,j5r),e(aM,D5r),e(be,G5r),e(be,nM),e(nM,L2e),e(L2e,O5r),e(nM,V5r),e(nM,vW),e(vW,X5r),e(nM,z5r),e(be,Q5r),e(be,sM),e(sM,x2e),e(x2e,W5r),e(sM,H5r),e(sM,TW),e(TW,U5r),e(sM,J5r),e(be,Y5r),e(be,lM),e(lM,k2e),e(k2e,K5r),e(lM,Z5r),e(lM,MW),e(MW,ewr),e(lM,owr),e(be,rwr),e(be,iM),e(iM,S2e),e(S2e,twr),e(iM,awr),e(iM,EW),e(EW,nwr),e(iM,swr),e(be,lwr),e(be,dM),e(dM,R2e),e(R2e,iwr),e(dM,dwr),e(dM,CW),e(CW,cwr),e(dM,fwr),e(be,mwr),e(be,cM),e(cM,B2e),e(B2e,gwr),e(cM,hwr),e(cM,wW),e(wW,pwr),e(cM,_wr),e(be,uwr),e(be,fM),e(fM,P2e),e(P2e,bwr),e(fM,Fwr),e(fM,AW),e(AW,vwr),e(fM,Twr),e(be,Mwr),e(be,mM),e(mM,$2e),e($2e,Ewr),e(mM,Cwr),e(mM,yW),e(yW,wwr),e(mM,Awr),e(be,ywr),e(be,gM),e(gM,I2e),e(I2e,Lwr),e(gM,xwr),e(gM,LW),e(LW,kwr),e(gM,Swr),e(ko,Rwr),e(ko,q2e),e(q2e,Bwr),e(ko,Pwr),g(lL,ko,null),b(c,ABe,u),b(c,ff,u),e(ff,hM),e(hM,N2e),g(iL,N2e,null),e(ff,$wr),e(ff,j2e),e(j2e,Iwr),b(c,yBe,u),b(c,Ir,u),g(dL,Ir,null),e(Ir,qwr),e(Ir,mf),e(mf,Nwr),e(mf,xW),e(xW,jwr),e(mf,Dwr),e(mf,kW),e(kW,Gwr),e(mf,Owr),e(Ir,Vwr),e(Ir,cL),e(cL,Xwr),e(cL,D2e),e(D2e,zwr),e(cL,Qwr),e(Ir,Wwr),e(Ir,kt),g(fL,kt,null),e(kt,Hwr),e(kt,G2e),e(G2e,Uwr),e(kt,Jwr),e(kt,gf),e(gf,Ywr),e(gf,O2e),e(O2e,Kwr),e(gf,Zwr),e(gf,SW),e(SW,eAr),e(gf,oAr),e(kt,rAr),e(kt,V2e),e(V2e,tAr),e(kt,aAr),g(mL,kt,null),e(Ir,nAr),e(Ir,So),g(gL,So,null),e(So,sAr),e(So,X2e),e(X2e,lAr),e(So,iAr),e(So,Bn),e(Bn,dAr),e(Bn,z2e),e(z2e,cAr),e(Bn,fAr),e(Bn,Q2e),e(Q2e,mAr),e(Bn,gAr),e(Bn,W2e),e(W2e,hAr),e(Bn,pAr),e(So,_Ar),e(So,Ee),e(Ee,pM),e(pM,H2e),e(H2e,uAr),e(pM,bAr),e(pM,RW),e(RW,FAr),e(pM,vAr),e(Ee,TAr),e(Ee,_M),e(_M,U2e),e(U2e,MAr),e(_M,EAr),e(_M,BW),e(BW,CAr),e(_M,wAr),e(Ee,AAr),e(Ee,uM),e(uM,J2e),e(J2e,yAr),e(uM,LAr),e(uM,PW),e(PW,xAr),e(uM,kAr),e(Ee,SAr),e(Ee,bM),e(bM,Y2e),e(Y2e,RAr),e(bM,BAr),e(bM,$W),e($W,PAr),e(bM,$Ar),e(Ee,IAr),e(Ee,FM),e(FM,K2e),e(K2e,qAr),e(FM,NAr),e(FM,IW),e(IW,jAr),e(FM,DAr),e(Ee,GAr),e(Ee,vM),e(vM,Z2e),e(Z2e,OAr),e(vM,VAr),e(vM,qW),e(qW,XAr),e(vM,zAr),e(Ee,QAr),e(Ee,TM),e(TM,eFe),e(eFe,WAr),e(TM,HAr),e(TM,NW),e(NW,UAr),e(TM,JAr),e(Ee,YAr),e(Ee,MM),e(MM,oFe),e(oFe,KAr),e(MM,ZAr),e(MM,jW),e(jW,e0r),e(MM,o0r),e(Ee,r0r),e(Ee,EM),e(EM,rFe),e(rFe,t0r),e(EM,a0r),e(EM,DW),e(DW,n0r),e(EM,s0r),e(So,l0r),e(So,tFe),e(tFe,i0r),e(So,d0r),g(hL,So,null),b(c,LBe,u),b(c,hf,u),e(hf,CM),e(CM,aFe),g(pL,aFe,null),e(hf,c0r),e(hf,nFe),e(nFe,f0r),b(c,xBe,u),b(c,qr,u),g(_L,qr,null),e(qr,m0r),e(qr,pf),e(pf,g0r),e(pf,GW),e(GW,h0r),e(pf,p0r),e(pf,OW),e(OW,_0r),e(pf,u0r),e(qr,b0r),e(qr,uL),e(uL,F0r),e(uL,sFe),e(sFe,v0r),e(uL,T0r),e(qr,M0r),e(qr,St),g(bL,St,null),e(St,E0r),e(St,lFe),e(lFe,C0r),e(St,w0r),e(St,_f),e(_f,A0r),e(_f,iFe),e(iFe,y0r),e(_f,L0r),e(_f,VW),e(VW,x0r),e(_f,k0r),e(St,S0r),e(St,dFe),e(dFe,R0r),e(St,B0r),g(FL,St,null),e(qr,P0r),e(qr,Ro),g(vL,Ro,null),e(Ro,$0r),e(Ro,cFe),e(cFe,I0r),e(Ro,q0r),e(Ro,Pn),e(Pn,N0r),e(Pn,fFe),e(fFe,j0r),e(Pn,D0r),e(Pn,mFe),e(mFe,G0r),e(Pn,O0r),e(Pn,gFe),e(gFe,V0r),e(Pn,X0r),e(Ro,z0r),e(Ro,Fe),e(Fe,wM),e(wM,hFe),e(hFe,Q0r),e(wM,W0r),e(wM,XW),e(XW,H0r),e(wM,U0r),e(Fe,J0r),e(Fe,AM),e(AM,pFe),e(pFe,Y0r),e(AM,K0r),e(AM,zW),e(zW,Z0r),e(AM,eyr),e(Fe,oyr),e(Fe,yM),e(yM,_Fe),e(_Fe,ryr),e(yM,tyr),e(yM,QW),e(QW,ayr),e(yM,nyr),e(Fe,syr),e(Fe,LM),e(LM,uFe),e(uFe,lyr),e(LM,iyr),e(LM,WW),e(WW,dyr),e(LM,cyr),e(Fe,fyr),e(Fe,xM),e(xM,bFe),e(bFe,myr),e(xM,gyr),e(xM,HW),e(HW,hyr),e(xM,pyr),e(Fe,_yr),e(Fe,kM),e(kM,FFe),e(FFe,uyr),e(kM,byr),e(kM,UW),e(UW,Fyr),e(kM,vyr),e(Fe,Tyr),e(Fe,SM),e(SM,vFe),e(vFe,Myr),e(SM,Eyr),e(SM,JW),e(JW,Cyr),e(SM,wyr),e(Fe,Ayr),e(Fe,RM),e(RM,TFe),e(TFe,yyr),e(RM,Lyr),e(RM,YW),e(YW,xyr),e(RM,kyr),e(Fe,Syr),e(Fe,BM),e(BM,MFe),e(MFe,Ryr),e(BM,Byr),e(BM,KW),e(KW,Pyr),e(BM,$yr),e(Fe,Iyr),e(Fe,PM),e(PM,EFe),e(EFe,qyr),e(PM,Nyr),e(PM,ZW),e(ZW,jyr),e(PM,Dyr),e(Ro,Gyr),e(Ro,CFe),e(CFe,Oyr),e(Ro,Vyr),g(TL,Ro,null),b(c,kBe,u),b(c,uf,u),e(uf,$M),e($M,wFe),g(ML,wFe,null),e(uf,Xyr),e(uf,AFe),e(AFe,zyr),b(c,SBe,u),b(c,Nr,u),g(EL,Nr,null),e(Nr,Qyr),e(Nr,bf),e(bf,Wyr),e(bf,eH),e(eH,Hyr),e(bf,Uyr),e(bf,oH),e(oH,Jyr),e(bf,Yyr),e(Nr,Kyr),e(Nr,CL),e(CL,Zyr),e(CL,yFe),e(yFe,eLr),e(CL,oLr),e(Nr,rLr),e(Nr,Rt),g(wL,Rt,null),e(Rt,tLr),e(Rt,LFe),e(LFe,aLr),e(Rt,nLr),e(Rt,Ff),e(Ff,sLr),e(Ff,xFe),e(xFe,lLr),e(Ff,iLr),e(Ff,rH),e(rH,dLr),e(Ff,cLr),e(Rt,fLr),e(Rt,kFe),e(kFe,mLr),e(Rt,gLr),g(AL,Rt,null),e(Nr,hLr),e(Nr,Bo),g(yL,Bo,null),e(Bo,pLr),e(Bo,SFe),e(SFe,_Lr),e(Bo,uLr),e(Bo,$n),e($n,bLr),e($n,RFe),e(RFe,FLr),e($n,vLr),e($n,BFe),e(BFe,TLr),e($n,MLr),e($n,PFe),e(PFe,ELr),e($n,CLr),e(Bo,wLr),e(Bo,ve),e(ve,IM),e(IM,$Fe),e($Fe,ALr),e(IM,yLr),e(IM,tH),e(tH,LLr),e(IM,xLr),e(ve,kLr),e(ve,qM),e(qM,IFe),e(IFe,SLr),e(qM,RLr),e(qM,aH),e(aH,BLr),e(qM,PLr),e(ve,$Lr),e(ve,NM),e(NM,qFe),e(qFe,ILr),e(NM,qLr),e(NM,nH),e(nH,NLr),e(NM,jLr),e(ve,DLr),e(ve,jM),e(jM,NFe),e(NFe,GLr),e(jM,OLr),e(jM,sH),e(sH,VLr),e(jM,XLr),e(ve,zLr),e(ve,DM),e(DM,jFe),e(jFe,QLr),e(DM,WLr),e(DM,lH),e(lH,HLr),e(DM,ULr),e(ve,JLr),e(ve,GM),e(GM,DFe),e(DFe,YLr),e(GM,KLr),e(GM,iH),e(iH,ZLr),e(GM,e8r),e(ve,o8r),e(ve,OM),e(OM,GFe),e(GFe,r8r),e(OM,t8r),e(OM,dH),e(dH,a8r),e(OM,n8r),e(ve,s8r),e(ve,VM),e(VM,OFe),e(OFe,l8r),e(VM,i8r),e(VM,cH),e(cH,d8r),e(VM,c8r),e(ve,f8r),e(ve,XM),e(XM,VFe),e(VFe,m8r),e(XM,g8r),e(XM,fH),e(fH,h8r),e(XM,p8r),e(ve,_8r),e(ve,zM),e(zM,XFe),e(XFe,u8r),e(zM,b8r),e(zM,mH),e(mH,F8r),e(zM,v8r),e(Bo,T8r),e(Bo,zFe),e(zFe,M8r),e(Bo,E8r),g(LL,Bo,null),b(c,RBe,u),b(c,vf,u),e(vf,QM),e(QM,QFe),g(xL,QFe,null),e(vf,C8r),e(vf,WFe),e(WFe,w8r),b(c,BBe,u),b(c,jr,u),g(kL,jr,null),e(jr,A8r),e(jr,Tf),e(Tf,y8r),e(Tf,gH),e(gH,L8r),e(Tf,x8r),e(Tf,hH),e(hH,k8r),e(Tf,S8r),e(jr,R8r),e(jr,SL),e(SL,B8r),e(SL,HFe),e(HFe,P8r),e(SL,$8r),e(jr,I8r),e(jr,Bt),g(RL,Bt,null),e(Bt,q8r),e(Bt,UFe),e(UFe,N8r),e(Bt,j8r),e(Bt,Mf),e(Mf,D8r),e(Mf,JFe),e(JFe,G8r),e(Mf,O8r),e(Mf,pH),e(pH,V8r),e(Mf,X8r),e(Bt,z8r),e(Bt,YFe),e(YFe,Q8r),e(Bt,W8r),g(BL,Bt,null),e(jr,H8r),e(jr,Po),g(PL,Po,null),e(Po,U8r),e(Po,KFe),e(KFe,J8r),e(Po,Y8r),e(Po,In),e(In,K8r),e(In,ZFe),e(ZFe,Z8r),e(In,e9r),e(In,eve),e(eve,o9r),e(In,r9r),e(In,ove),e(ove,t9r),e(In,a9r),e(Po,n9r),e(Po,Be),e(Be,WM),e(WM,rve),e(rve,s9r),e(WM,l9r),e(WM,_H),e(_H,i9r),e(WM,d9r),e(Be,c9r),e(Be,HM),e(HM,tve),e(tve,f9r),e(HM,m9r),e(HM,uH),e(uH,g9r),e(HM,h9r),e(Be,p9r),e(Be,UM),e(UM,ave),e(ave,_9r),e(UM,u9r),e(UM,bH),e(bH,b9r),e(UM,F9r),e(Be,v9r),e(Be,JM),e(JM,nve),e(nve,T9r),e(JM,M9r),e(JM,FH),e(FH,E9r),e(JM,C9r),e(Be,w9r),e(Be,YM),e(YM,sve),e(sve,A9r),e(YM,y9r),e(YM,vH),e(vH,L9r),e(YM,x9r),e(Be,k9r),e(Be,KM),e(KM,lve),e(lve,S9r),e(KM,R9r),e(KM,TH),e(TH,B9r),e(KM,P9r),e(Be,$9r),e(Be,ZM),e(ZM,ive),e(ive,I9r),e(ZM,q9r),e(ZM,MH),e(MH,N9r),e(ZM,j9r),e(Be,D9r),e(Be,eE),e(eE,dve),e(dve,G9r),e(eE,O9r),e(eE,EH),e(EH,V9r),e(eE,X9r),e(Po,z9r),e(Po,cve),e(cve,Q9r),e(Po,W9r),g($L,Po,null),b(c,PBe,u),b(c,Ef,u),e(Ef,oE),e(oE,fve),g(IL,fve,null),e(Ef,H9r),e(Ef,mve),e(mve,U9r),b(c,$Be,u),b(c,Dr,u),g(qL,Dr,null),e(Dr,J9r),e(Dr,Cf),e(Cf,Y9r),e(Cf,CH),e(CH,K9r),e(Cf,Z9r),e(Cf,wH),e(wH,exr),e(Cf,oxr),e(Dr,rxr),e(Dr,NL),e(NL,txr),e(NL,gve),e(gve,axr),e(NL,nxr),e(Dr,sxr),e(Dr,Pt),g(jL,Pt,null),e(Pt,lxr),e(Pt,hve),e(hve,ixr),e(Pt,dxr),e(Pt,wf),e(wf,cxr),e(wf,pve),e(pve,fxr),e(wf,mxr),e(wf,AH),e(AH,gxr),e(wf,hxr),e(Pt,pxr),e(Pt,_ve),e(_ve,_xr),e(Pt,uxr),g(DL,Pt,null),e(Dr,bxr),e(Dr,$o),g(GL,$o,null),e($o,Fxr),e($o,uve),e(uve,vxr),e($o,Txr),e($o,qn),e(qn,Mxr),e(qn,bve),e(bve,Exr),e(qn,Cxr),e(qn,Fve),e(Fve,wxr),e(qn,Axr),e(qn,vve),e(vve,yxr),e(qn,Lxr),e($o,xxr),e($o,Pe),e(Pe,rE),e(rE,Tve),e(Tve,kxr),e(rE,Sxr),e(rE,yH),e(yH,Rxr),e(rE,Bxr),e(Pe,Pxr),e(Pe,tE),e(tE,Mve),e(Mve,$xr),e(tE,Ixr),e(tE,LH),e(LH,qxr),e(tE,Nxr),e(Pe,jxr),e(Pe,aE),e(aE,Eve),e(Eve,Dxr),e(aE,Gxr),e(aE,xH),e(xH,Oxr),e(aE,Vxr),e(Pe,Xxr),e(Pe,nE),e(nE,Cve),e(Cve,zxr),e(nE,Qxr),e(nE,kH),e(kH,Wxr),e(nE,Hxr),e(Pe,Uxr),e(Pe,sE),e(sE,wve),e(wve,Jxr),e(sE,Yxr),e(sE,SH),e(SH,Kxr),e(sE,Zxr),e(Pe,ekr),e(Pe,lE),e(lE,Ave),e(Ave,okr),e(lE,rkr),e(lE,RH),e(RH,tkr),e(lE,akr),e(Pe,nkr),e(Pe,iE),e(iE,yve),e(yve,skr),e(iE,lkr),e(iE,BH),e(BH,ikr),e(iE,dkr),e(Pe,ckr),e(Pe,dE),e(dE,Lve),e(Lve,fkr),e(dE,mkr),e(dE,PH),e(PH,gkr),e(dE,hkr),e($o,pkr),e($o,xve),e(xve,_kr),e($o,ukr),g(OL,$o,null),b(c,IBe,u),b(c,Af,u),e(Af,cE),e(cE,kve),g(VL,kve,null),e(Af,bkr),e(Af,Sve),e(Sve,Fkr),b(c,qBe,u),b(c,Gr,u),g(XL,Gr,null),e(Gr,vkr),e(Gr,yf),e(yf,Tkr),e(yf,$H),e($H,Mkr),e(yf,Ekr),e(yf,IH),e(IH,Ckr),e(yf,wkr),e(Gr,Akr),e(Gr,zL),e(zL,ykr),e(zL,Rve),e(Rve,Lkr),e(zL,xkr),e(Gr,kkr),e(Gr,$t),g(QL,$t,null),e($t,Skr),e($t,Bve),e(Bve,Rkr),e($t,Bkr),e($t,Lf),e(Lf,Pkr),e(Lf,Pve),e(Pve,$kr),e(Lf,Ikr),e(Lf,qH),e(qH,qkr),e(Lf,Nkr),e($t,jkr),e($t,$ve),e($ve,Dkr),e($t,Gkr),g(WL,$t,null),e(Gr,Okr),e(Gr,Io),g(HL,Io,null),e(Io,Vkr),e(Io,Ive),e(Ive,Xkr),e(Io,zkr),e(Io,Nn),e(Nn,Qkr),e(Nn,qve),e(qve,Wkr),e(Nn,Hkr),e(Nn,Nve),e(Nve,Ukr),e(Nn,Jkr),e(Nn,jve),e(jve,Ykr),e(Nn,Kkr),e(Io,Zkr),e(Io,Dve),e(Dve,fE),e(fE,Gve),e(Gve,eSr),e(fE,oSr),e(fE,NH),e(NH,rSr),e(fE,tSr),e(Io,aSr),e(Io,Ove),e(Ove,nSr),e(Io,sSr),g(UL,Io,null),b(c,NBe,u),b(c,xf,u),e(xf,mE),e(mE,Vve),g(JL,Vve,null),e(xf,lSr),e(xf,Xve),e(Xve,iSr),b(c,jBe,u),b(c,Or,u),g(YL,Or,null),e(Or,dSr),e(Or,kf),e(kf,cSr),e(kf,jH),e(jH,fSr),e(kf,mSr),e(kf,DH),e(DH,gSr),e(kf,hSr),e(Or,pSr),e(Or,KL),e(KL,_Sr),e(KL,zve),e(zve,uSr),e(KL,bSr),e(Or,FSr),e(Or,It),g(ZL,It,null),e(It,vSr),e(It,Qve),e(Qve,TSr),e(It,MSr),e(It,Sf),e(Sf,ESr),e(Sf,Wve),e(Wve,CSr),e(Sf,wSr),e(Sf,GH),e(GH,ASr),e(Sf,ySr),e(It,LSr),e(It,Hve),e(Hve,xSr),e(It,kSr),g(e8,It,null),e(Or,SSr),e(Or,qo),g(o8,qo,null),e(qo,RSr),e(qo,Uve),e(Uve,BSr),e(qo,PSr),e(qo,jn),e(jn,$Sr),e(jn,Jve),e(Jve,ISr),e(jn,qSr),e(jn,Yve),e(Yve,NSr),e(jn,jSr),e(jn,Kve),e(Kve,DSr),e(jn,GSr),e(qo,OSr),e(qo,r8),e(r8,gE),e(gE,Zve),e(Zve,VSr),e(gE,XSr),e(gE,OH),e(OH,zSr),e(gE,QSr),e(r8,WSr),e(r8,hE),e(hE,e6e),e(e6e,HSr),e(hE,USr),e(hE,VH),e(VH,JSr),e(hE,YSr),e(qo,KSr),e(qo,o6e),e(o6e,ZSr),e(qo,eRr),g(t8,qo,null),b(c,DBe,u),b(c,Rf,u),e(Rf,pE),e(pE,r6e),g(a8,r6e,null),e(Rf,oRr),e(Rf,t6e),e(t6e,rRr),b(c,GBe,u),b(c,Vr,u),g(n8,Vr,null),e(Vr,tRr),e(Vr,Bf),e(Bf,aRr),e(Bf,XH),e(XH,nRr),e(Bf,sRr),e(Bf,zH),e(zH,lRr),e(Bf,iRr),e(Vr,dRr),e(Vr,s8),e(s8,cRr),e(s8,a6e),e(a6e,fRr),e(s8,mRr),e(Vr,gRr),e(Vr,qt),g(l8,qt,null),e(qt,hRr),e(qt,n6e),e(n6e,pRr),e(qt,_Rr),e(qt,Pf),e(Pf,uRr),e(Pf,s6e),e(s6e,bRr),e(Pf,FRr),e(Pf,QH),e(QH,vRr),e(Pf,TRr),e(qt,MRr),e(qt,l6e),e(l6e,ERr),e(qt,CRr),g(i8,qt,null),e(Vr,wRr),e(Vr,No),g(d8,No,null),e(No,ARr),e(No,i6e),e(i6e,yRr),e(No,LRr),e(No,Dn),e(Dn,xRr),e(Dn,d6e),e(d6e,kRr),e(Dn,SRr),e(Dn,c6e),e(c6e,RRr),e(Dn,BRr),e(Dn,f6e),e(f6e,PRr),e(Dn,$Rr),e(No,IRr),e(No,m6e),e(m6e,_E),e(_E,g6e),e(g6e,qRr),e(_E,NRr),e(_E,WH),e(WH,jRr),e(_E,DRr),e(No,GRr),e(No,h6e),e(h6e,ORr),e(No,VRr),g(c8,No,null),OBe=!0},p(c,[u]){const f8={};u&2&&(f8.$$scope={dirty:u,ctx:c}),Of.$set(f8);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:c}),Bh.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:c}),Xh.$set(_6e)},i(c){OBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(vC.$$.fragment,c),h(TC.$$.fragment,c),h(Of.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(DC.$$.fragment,c),h(Bh.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(WC.$$.fragment,c),h(Xh.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(ZC.$$.fragment,c),h(e5.$$.fragment,c),h(o5.$$.fragment,c),h(r5.$$.fragment,c),h(t5.$$.fragment,c),h(a5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(i5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(p5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(T5.$$.fragment,c),h(M5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(x5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(I5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),OBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(vC.$$.fragment,c),p(TC.$$.fragment,c),p(Of.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(DC.$$.fragment,c),p(Bh.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(WC.$$.fragment,c),p(Xh.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(ZC.$$.fragment,c),p(e5.$$.fragment,c),p(o5.$$.fragment,c),p(r5.$$.fragment,c),p(t5.$$.fragment,c),p(a5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(i5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(p5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(T5.$$.fragment,c),p(M5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(x5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(I5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),OBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(GSe),c&&t(Vi),_(vC),c&&t(OSe),c&&t(zn),c&&t(VSe),_(TC,c),c&&t(XSe),c&&t(g9),c&&t(zSe),_(Of,c),c&&t(QSe),c&&t(Xi),_(MC),c&&t(WSe),c&&t(Qo),_(EC),_(AC),_(yC),_(LC),c&&t(HSe),c&&t(Qi),_(xC),c&&t(USe),c&&t(Wo),_(kC),_(BC),_(PC),_($C),c&&t(JSe),c&&t(Wi),_(IC),c&&t(YSe),c&&t(Ho),_(qC),_(DC),_(Bh),_(GC),_(OC),c&&t(KSe),c&&t(Hi),_(VC),c&&t(ZSe),c&&t(Uo),_(XC),_(WC),_(Xh),_(HC),_(UC),c&&t(eRe),c&&t(Ji),_(JC),c&&t(oRe),c&&t(Jo),_(YC),_(ZC),_(e5),_(o5),_(r5),c&&t(rRe),c&&t(Zi),_(t5),c&&t(tRe),c&&t(Yo),_(a5),_(s5),_(l5),_(i5),_(d5),c&&t(aRe),c&&t(rd),_(c5),c&&t(nRe),c&&t(Ko),_(f5),_(g5),_(h5),_(p5),_(_5),c&&t(sRe),c&&t(nd),_(u5),c&&t(lRe),c&&t(Zo),_(b5),_(v5),_(T5),_(M5),_(E5),c&&t(iRe),c&&t(id),_(C5),c&&t(dRe),c&&t(er),_(w5),_(y5),_(L5),_(x5),_(k5),c&&t(cRe),c&&t(fd),_(S5),c&&t(fRe),c&&t(or),_(R5),_(P5),_($5),_(I5),_(q5),c&&t(mRe),c&&t(hd),_(N5),c&&t(gRe),c&&t(rr),_(j5),_(G5),_(O5),_(V5),_(X5),c&&t(hRe),c&&t(ud),_(z5),c&&t(pRe),c&&t(tr),_(Q5),_(H5),_(U5),_(J5),_(Y5),c&&t(_Re),c&&t(vd),_(K5),c&&t(uRe),c&&t(ar),_(Z5),_(ow),_(rw),_(tw),_(aw),c&&t(bRe),c&&t(Ed),_(nw),c&&t(FRe),c&&t(nr),_(sw),_(iw),_(dw),_(cw),_(fw),c&&t(vRe),c&&t(Ad),_(mw),c&&t(TRe),c&&t(sr),_(gw),_(pw),_(_w),_(uw),_(bw),c&&t(MRe),c&&t(xd),_(Fw),c&&t(ERe),c&&t(lr),_(vw),_(Mw),_(Ew),_(Cw),_(ww),c&&t(CRe),c&&t(Rd),_(Aw),c&&t(wRe),c&&t(ir),_(yw),_(xw),_(kw),_(Sw),_(Rw),c&&t(ARe),c&&t($d),_(Bw),c&&t(yRe),c&&t(dr),_(Pw),_(Iw),_(qw),_(Nw),_(jw),c&&t(LRe),c&&t(Nd),_(Dw),c&&t(xRe),c&&t(cr),_(Gw),_(Vw),_(Xw),_(zw),_(Qw),c&&t(kRe),c&&t(Gd),_(Ww),c&&t(SRe),c&&t(fr),_(Hw),_(Jw),_(Yw),_(Kw),_(Zw),c&&t(RRe),c&&t(Xd),_(eA),c&&t(BRe),c&&t(mr),_(oA),_(tA),_(aA),_(nA),_(lA),c&&t(PRe),c&&t(Wd),_(iA),c&&t($Re),c&&t(gr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(IRe),c&&t(Jd),_(pA),c&&t(qRe),c&&t(hr),_(_A),_(bA),_(FA),_(vA),_(TA),c&&t(NRe),c&&t(ec),_(MA),c&&t(jRe),c&&t(pr),_(EA),_(wA),_(AA),_(yA),_(LA),c&&t(DRe),c&&t(tc),_(xA),c&&t(GRe),c&&t(_r),_(kA),_(RA),_(BA),_(PA),_($A),c&&t(ORe),c&&t(sc),_(IA),c&&t(VRe),c&&t(ur),_(qA),_(jA),_(DA),_(GA),_(OA),c&&t(XRe),c&&t(cc),_(VA),c&&t(zRe),c&&t(br),_(XA),_(QA),_(WA),_(HA),_(UA),c&&t(QRe),c&&t(gc),_(JA),c&&t(WRe),c&&t(Fr),_(YA),_(ZA),_(e0),_(o0),_(r0),c&&t(HRe),c&&t(_c),_(t0),c&&t(URe),c&&t(vr),_(a0),_(s0),_(l0),_(i0),_(d0),c&&t(JRe),c&&t(Fc),_(c0),c&&t(YRe),c&&t(Tr),_(f0),_(g0),_(h0),_(p0),_(_0),c&&t(KRe),c&&t(Mc),_(u0),c&&t(ZRe),c&&t(Mr),_(b0),_(v0),_(T0),_(M0),_(C0),c&&t(eBe),c&&t(wc),_(w0),c&&t(oBe),c&&t(Er),_(A0),_(L0),_(x0),_(k0),_(S0),c&&t(rBe),c&&t(Lc),_(R0),c&&t(tBe),c&&t(Cr),_(B0),_($0),_(I0),_(q0),_(N0),c&&t(aBe),c&&t(Sc),_(j0),c&&t(nBe),c&&t(wr),_(D0),_(O0),_(V0),_(X0),_(z0),c&&t(sBe),c&&t(Pc),_(Q0),c&&t(lBe),c&&t(Ar),_(W0),_(U0),_(J0),_(Y0),_(K0),c&&t(iBe),c&&t(qc),_(Z0),c&&t(dBe),c&&t(yr),_(ey),_(ry),_(ty),_(ay),_(ny),c&&t(cBe),c&&t(Dc),_(sy),c&&t(fBe),c&&t(Lr),_(ly),_(dy),_(cy),_(fy),_(my),c&&t(mBe),c&&t(Vc),_(gy),c&&t(gBe),c&&t(xr),_(hy),_(_y),_(uy),_(by),_(Fy),c&&t(hBe),c&&t(Qc),_(vy),c&&t(pBe),c&&t(kr),_(Ty),_(Ey),_(Cy),_(wy),_(Ay),c&&t(_Be),c&&t(Uc),_(yy),c&&t(uBe),c&&t(Sr),_(Ly),_(ky),_(Sy),_(Ry),_(By),c&&t(bBe),c&&t(Kc),_(Py),c&&t(FBe),c&&t(Rr),_($y),_(qy),_(Ny),_(jy),_(Dy),c&&t(vBe),c&&t(of),_(Gy),c&&t(TBe),c&&t(Br),_(Oy),_(Xy),_(zy),_(Qy),_(Wy),c&&t(MBe),c&&t(af),_(Hy),c&&t(EBe),c&&t(Pr),_(Uy),_(Yy),_(Ky),_(Zy),_(eL),c&&t(CBe),c&&t(lf),_(oL),c&&t(wBe),c&&t($r),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(ABe),c&&t(ff),_(iL),c&&t(yBe),c&&t(Ir),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(LBe),c&&t(hf),_(pL),c&&t(xBe),c&&t(qr),_(_L),_(bL),_(FL),_(vL),_(TL),c&&t(kBe),c&&t(uf),_(ML),c&&t(SBe),c&&t(Nr),_(EL),_(wL),_(AL),_(yL),_(LL),c&&t(RBe),c&&t(vf),_(xL),c&&t(BBe),c&&t(jr),_(kL),_(RL),_(BL),_(PL),_($L),c&&t(PBe),c&&t(Ef),_(IL),c&&t($Be),c&&t(Dr),_(qL),_(jL),_(DL),_(GL),_(OL),c&&t(IBe),c&&t(Af),_(VL),c&&t(qBe),c&&t(Gr),_(XL),_(QL),_(WL),_(HL),_(UL),c&&t(NBe),c&&t(xf),_(JL),c&&t(jBe),c&&t(Or),_(YL),_(ZL),_(e8),_(o8),_(t8),c&&t(DBe),c&&t(Rf),_(a8),c&&t(GBe),c&&t(Vr),_(n8),_(l8),_(i8),_(d8),_(c8)}}}const _Et={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function uEt(If){return fEt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class EEt extends lEt{constructor(Z){super();iEt(this,Z,uEt,pEt,dEt,{})}}export{EEt as default,_Et as metadata};
