import{S as WMt,i as HMt,s as UMt,e as a,k as l,w as F,t as o,M as JMt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as YMt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as uBr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function KMt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,Ie,Oe,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),gA=o(")."),rf=l(),Ie=a("p"),Oe=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),hA=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),pA=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),uA=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var x9=s(p);m=r(x9,"NewModelConfig"),x9.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var $9=s(oi);of=r($9,"model_type"),$9.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var k9=s(ri);ti=r(k9,'"new-model"'),k9.forEach(t),gA=r(Ae,")."),Ae.forEach(t),rf=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var va=s(ai);Tn=r(va,"NewModel"),va.forEach(t),hA=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var S9=s(Mn);En=r(S9,"PreTrainedModel"),S9.forEach(t),pA=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);Cn=r(af,"config_class"),af.forEach(t),uA=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var R9=s(si);tf=r(R9,"NewModelConfig"),R9.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,gA),b(Ve,rf,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ai),e(ai,Tn),e(Ie,hA),e(Ie,Mn),e(Mn,En),e(Ie,pA),e(Ie,ni),e(ni,Cn),e(Ie,uA),e(Ie,si),e(si,tf),e(Ie,ba)},d(Ve){Ve&&t(g),Ve&&t(rf),Ve&&t(Ie)}}}function ZMt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function rEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function aEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(L){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,gA,rf,Ie,Oe,ai,Tn,hA,Mn,En,pA,ni,Cn,uA,si,tf,ba,Ve,Ae,x9,li,$9,k9,To,va,S9,af,R9,Jqe,VRe,ii,nf,QK,_A,Yqe,WK,Kqe,XRe,wn,Zqe,HK,eNe,oNe,UK,rNe,tNe,zRe,bA,QRe,B9,aNe,WRe,sf,HRe,di,lf,JK,vA,nNe,YK,sNe,URe,Mo,FA,lNe,TA,iNe,P9,dNe,cNe,fNe,MA,mNe,KK,gNe,hNe,pNe,Fr,EA,uNe,ZK,_Ne,bNe,ci,vNe,eZ,FNe,TNe,oZ,MNe,ENe,CNe,A,df,rZ,wNe,ANe,I9,yNe,LNe,xNe,cf,tZ,$Ne,kNe,q9,SNe,RNe,BNe,ff,aZ,PNe,INe,N9,qNe,NNe,jNe,mf,nZ,DNe,GNe,j9,ONe,VNe,XNe,gf,sZ,zNe,QNe,D9,WNe,HNe,UNe,hf,lZ,JNe,YNe,G9,KNe,ZNe,eje,pf,iZ,oje,rje,O9,tje,aje,nje,uf,dZ,sje,lje,V9,ije,dje,cje,_f,cZ,fje,mje,X9,gje,hje,pje,bf,fZ,uje,_je,z9,bje,vje,Fje,vf,mZ,Tje,Mje,Q9,Eje,Cje,wje,Ff,gZ,Aje,yje,W9,Lje,xje,$je,Tf,hZ,kje,Sje,H9,Rje,Bje,Pje,Mf,pZ,Ije,qje,U9,Nje,jje,Dje,Ef,uZ,Gje,Oje,J9,Vje,Xje,zje,Cf,_Z,Qje,Wje,Y9,Hje,Uje,Jje,wf,bZ,Yje,Kje,K9,Zje,eDe,oDe,Af,vZ,rDe,tDe,Z9,aDe,nDe,sDe,yf,FZ,lDe,iDe,e$,dDe,cDe,fDe,Lf,TZ,mDe,gDe,o$,hDe,pDe,uDe,xf,MZ,_De,bDe,r$,vDe,FDe,TDe,$f,EZ,MDe,EDe,t$,CDe,wDe,ADe,kf,CZ,yDe,LDe,a$,xDe,$De,kDe,Sf,wZ,SDe,RDe,n$,BDe,PDe,IDe,Rf,AZ,qDe,NDe,s$,jDe,DDe,GDe,Bf,yZ,ODe,VDe,l$,XDe,zDe,QDe,Pf,LZ,WDe,HDe,i$,UDe,JDe,YDe,If,xZ,KDe,ZDe,d$,eGe,oGe,rGe,qf,$Z,tGe,aGe,c$,nGe,sGe,lGe,Nf,kZ,iGe,dGe,f$,cGe,fGe,mGe,jf,SZ,gGe,hGe,m$,pGe,uGe,_Ge,Df,RZ,bGe,vGe,g$,FGe,TGe,MGe,Gf,BZ,EGe,CGe,h$,wGe,AGe,yGe,Of,PZ,LGe,xGe,p$,$Ge,kGe,SGe,Vf,IZ,RGe,BGe,u$,PGe,IGe,qGe,Xf,qZ,NGe,jGe,_$,DGe,GGe,OGe,zf,NZ,VGe,XGe,b$,zGe,QGe,WGe,Qf,jZ,HGe,UGe,v$,JGe,YGe,KGe,Wf,DZ,ZGe,eOe,F$,oOe,rOe,tOe,Hf,GZ,aOe,nOe,T$,sOe,lOe,iOe,Uf,OZ,dOe,cOe,M$,fOe,mOe,gOe,Jf,VZ,hOe,pOe,E$,uOe,_Oe,bOe,Yf,XZ,vOe,FOe,C$,TOe,MOe,EOe,Kf,zZ,COe,wOe,w$,AOe,yOe,LOe,Zf,QZ,xOe,$Oe,A$,kOe,SOe,ROe,em,WZ,BOe,POe,y$,IOe,qOe,NOe,om,HZ,jOe,DOe,L$,GOe,OOe,VOe,rm,UZ,XOe,zOe,x$,QOe,WOe,HOe,tm,JZ,UOe,JOe,$$,YOe,KOe,ZOe,am,YZ,eVe,oVe,k$,rVe,tVe,aVe,nm,KZ,nVe,sVe,S$,lVe,iVe,dVe,sm,ZZ,cVe,fVe,R$,mVe,gVe,hVe,lm,eee,pVe,uVe,B$,_Ve,bVe,vVe,im,oee,FVe,TVe,P$,MVe,EVe,CVe,dm,ree,wVe,AVe,I$,yVe,LVe,xVe,cm,tee,$Ve,kVe,q$,SVe,RVe,BVe,fm,aee,PVe,IVe,N$,qVe,NVe,jVe,mm,nee,DVe,GVe,j$,OVe,VVe,XVe,gm,see,zVe,QVe,D$,WVe,HVe,UVe,hm,lee,JVe,YVe,G$,KVe,ZVe,eXe,pm,iee,oXe,rXe,O$,tXe,aXe,nXe,um,dee,sXe,lXe,V$,iXe,dXe,cXe,_m,cee,fXe,mXe,X$,gXe,hXe,pXe,bm,fee,uXe,_Xe,z$,bXe,vXe,FXe,vm,mee,TXe,MXe,Q$,EXe,CXe,wXe,Fm,gee,AXe,yXe,W$,LXe,xXe,$Xe,Tm,hee,kXe,SXe,H$,RXe,BXe,PXe,Mm,pee,IXe,qXe,U$,NXe,jXe,DXe,Em,uee,GXe,OXe,J$,VXe,XXe,zXe,Cm,_ee,QXe,WXe,Y$,HXe,UXe,JXe,wm,bee,YXe,KXe,K$,ZXe,eze,oze,Am,vee,rze,tze,Z$,aze,nze,sze,ym,Fee,lze,ize,ek,dze,cze,fze,Lm,Tee,mze,gze,ok,hze,pze,uze,xm,Mee,_ze,bze,rk,vze,Fze,Tze,$m,Eee,Mze,Eze,tk,Cze,wze,Aze,km,Cee,yze,Lze,ak,xze,$ze,kze,Sm,wee,Sze,Rze,nk,Bze,Pze,Ize,Rm,Aee,qze,Nze,sk,jze,Dze,Gze,Bm,yee,Oze,Vze,lk,Xze,zze,Qze,Pm,Lee,Wze,Hze,ik,Uze,Jze,Yze,Im,xee,Kze,Zze,dk,eQe,oQe,rQe,qm,$ee,tQe,aQe,ck,nQe,sQe,lQe,Nm,kee,iQe,dQe,fk,cQe,fQe,mQe,jm,See,gQe,hQe,mk,pQe,uQe,_Qe,Dm,Ree,bQe,vQe,gk,FQe,TQe,MQe,Gm,Bee,EQe,CQe,hk,wQe,AQe,yQe,Om,Pee,LQe,xQe,pk,$Qe,kQe,SQe,Vm,Iee,RQe,BQe,uk,PQe,IQe,qQe,Xm,qee,NQe,jQe,_k,DQe,GQe,OQe,zm,Nee,VQe,XQe,bk,zQe,QQe,WQe,Qm,jee,HQe,UQe,vk,JQe,YQe,KQe,Wm,Dee,ZQe,eWe,Fk,oWe,rWe,tWe,Hm,Gee,aWe,nWe,Tk,sWe,lWe,iWe,Um,Oee,dWe,cWe,Mk,fWe,mWe,gWe,Jm,Vee,hWe,pWe,Ek,uWe,_We,bWe,Ym,Xee,vWe,FWe,Ck,TWe,MWe,EWe,Km,zee,CWe,wWe,wk,AWe,yWe,LWe,Zm,Qee,xWe,$We,Ak,kWe,SWe,RWe,eg,Wee,BWe,PWe,yk,IWe,qWe,NWe,og,Hee,jWe,DWe,Lk,GWe,OWe,VWe,rg,Uee,XWe,zWe,xk,QWe,WWe,HWe,tg,Jee,UWe,JWe,$k,YWe,KWe,ZWe,ag,eHe,ng,CA,oHe,Yee,rHe,JRe,fi,sg,Kee,wA,tHe,Zee,aHe,YRe,Eo,AA,nHe,yA,sHe,kk,lHe,iHe,dHe,LA,cHe,eoe,fHe,mHe,gHe,Tr,xA,hHe,ooe,pHe,uHe,Fa,_He,roe,bHe,vHe,toe,FHe,THe,aoe,MHe,EHe,CHe,k,An,noe,wHe,AHe,Sk,yHe,LHe,Rk,xHe,$He,kHe,yn,soe,SHe,RHe,Bk,BHe,PHe,Pk,IHe,qHe,NHe,Ln,loe,jHe,DHe,Ik,GHe,OHe,qk,VHe,XHe,zHe,lg,ioe,QHe,WHe,Nk,HHe,UHe,JHe,xn,doe,YHe,KHe,jk,ZHe,eUe,Dk,oUe,rUe,tUe,ig,coe,aUe,nUe,Gk,sUe,lUe,iUe,dg,foe,dUe,cUe,Ok,fUe,mUe,gUe,cg,moe,hUe,pUe,Vk,uUe,_Ue,bUe,$n,goe,vUe,FUe,Xk,TUe,MUe,zk,EUe,CUe,wUe,kn,hoe,AUe,yUe,Qk,LUe,xUe,Wk,$Ue,kUe,SUe,Sn,poe,RUe,BUe,Hk,PUe,IUe,Uk,qUe,NUe,jUe,fg,uoe,DUe,GUe,Jk,OUe,VUe,XUe,mg,_oe,zUe,QUe,Yk,WUe,HUe,UUe,Rn,boe,JUe,YUe,Kk,KUe,ZUe,Zk,eJe,oJe,rJe,gg,voe,tJe,aJe,eS,nJe,sJe,lJe,Bn,Foe,iJe,dJe,oS,cJe,fJe,rS,mJe,gJe,hJe,Pn,Toe,pJe,uJe,tS,_Je,bJe,aS,vJe,FJe,TJe,In,Moe,MJe,EJe,nS,CJe,wJe,sS,AJe,yJe,LJe,hg,Eoe,xJe,$Je,lS,kJe,SJe,RJe,qn,Coe,BJe,PJe,iS,IJe,qJe,dS,NJe,jJe,DJe,Nn,woe,GJe,OJe,cS,VJe,XJe,fS,zJe,QJe,WJe,jn,Aoe,HJe,UJe,mS,JJe,YJe,gS,KJe,ZJe,eYe,Dn,yoe,oYe,rYe,hS,tYe,aYe,pS,nYe,sYe,lYe,Gn,Loe,iYe,dYe,uS,cYe,fYe,_S,mYe,gYe,hYe,On,xoe,pYe,uYe,bS,_Ye,bYe,vS,vYe,FYe,TYe,pg,$oe,MYe,EYe,FS,CYe,wYe,AYe,Vn,koe,yYe,LYe,TS,xYe,$Ye,MS,kYe,SYe,RYe,ug,Soe,BYe,PYe,ES,IYe,qYe,NYe,Xn,Roe,jYe,DYe,CS,GYe,OYe,wS,VYe,XYe,zYe,zn,Boe,QYe,WYe,AS,HYe,UYe,yS,JYe,YYe,KYe,Qn,Poe,ZYe,eKe,LS,oKe,rKe,xS,tKe,aKe,nKe,Wn,Ioe,sKe,lKe,$S,iKe,dKe,kS,cKe,fKe,mKe,Hn,qoe,gKe,hKe,SS,pKe,uKe,RS,_Ke,bKe,vKe,_g,Noe,FKe,TKe,BS,MKe,EKe,CKe,Un,joe,wKe,AKe,PS,yKe,LKe,IS,xKe,$Ke,kKe,Jn,Doe,SKe,RKe,qS,BKe,PKe,NS,IKe,qKe,NKe,Yn,Goe,jKe,DKe,jS,GKe,OKe,DS,VKe,XKe,zKe,Kn,Ooe,QKe,WKe,GS,HKe,UKe,OS,JKe,YKe,KKe,Zn,Voe,ZKe,eZe,VS,oZe,rZe,XS,tZe,aZe,nZe,es,Xoe,sZe,lZe,zS,iZe,dZe,QS,cZe,fZe,mZe,bg,zoe,gZe,hZe,WS,pZe,uZe,_Ze,os,Qoe,bZe,vZe,HS,FZe,TZe,US,MZe,EZe,CZe,vg,Woe,wZe,AZe,JS,yZe,LZe,xZe,Fg,Hoe,$Ze,kZe,YS,SZe,RZe,BZe,rs,Uoe,PZe,IZe,KS,qZe,NZe,ZS,jZe,DZe,GZe,ts,Joe,OZe,VZe,eR,XZe,zZe,oR,QZe,WZe,HZe,as,Yoe,UZe,JZe,rR,YZe,KZe,tR,ZZe,eeo,oeo,Tg,Koe,reo,teo,aR,aeo,neo,seo,ns,Zoe,leo,ieo,nR,deo,ceo,sR,feo,meo,geo,ss,ere,heo,peo,lR,ueo,_eo,iR,beo,veo,Feo,ls,ore,Teo,Meo,dR,Eeo,Ceo,cR,weo,Aeo,yeo,is,rre,Leo,xeo,fR,$eo,keo,mR,Seo,Reo,Beo,ds,tre,Peo,Ieo,gR,qeo,Neo,hR,jeo,Deo,Geo,cs,are,Oeo,Veo,pR,Xeo,zeo,uR,Qeo,Weo,Heo,Mg,nre,Ueo,Jeo,_R,Yeo,Keo,Zeo,Eg,sre,eoo,ooo,bR,roo,too,aoo,Cg,lre,noo,soo,vR,loo,ioo,doo,wg,ire,coo,foo,FR,moo,goo,hoo,fs,dre,poo,uoo,TR,_oo,boo,MR,voo,Foo,Too,Ag,cre,Moo,Eoo,ER,Coo,woo,Aoo,ms,fre,yoo,Loo,CR,xoo,$oo,wR,koo,Soo,Roo,gs,mre,Boo,Poo,AR,Ioo,qoo,yR,Noo,joo,Doo,hs,gre,Goo,Ooo,LR,Voo,Xoo,xR,zoo,Qoo,Woo,ps,hre,Hoo,Uoo,$R,Joo,Yoo,kR,Koo,Zoo,ero,us,pre,oro,rro,SR,tro,aro,RR,nro,sro,lro,_s,ure,iro,dro,BR,cro,fro,PR,mro,gro,hro,yg,_re,pro,uro,IR,_ro,bro,vro,Lg,bre,Fro,Tro,qR,Mro,Ero,Cro,bs,vre,wro,Aro,NR,yro,Lro,jR,xro,$ro,kro,vs,Fre,Sro,Rro,DR,Bro,Pro,GR,Iro,qro,Nro,Fs,Tre,jro,Dro,OR,Gro,Oro,VR,Vro,Xro,zro,xg,Mre,Qro,Wro,XR,Hro,Uro,Jro,$g,Ere,Yro,Kro,zR,Zro,eto,oto,kg,Cre,rto,tto,QR,ato,nto,sto,Ts,wre,lto,ito,WR,dto,cto,HR,fto,mto,gto,Sg,Are,hto,pto,UR,uto,_to,bto,Rg,yre,vto,Fto,JR,Tto,Mto,Eto,Ms,Lre,Cto,wto,YR,Ato,yto,KR,Lto,xto,$to,Bg,xre,kto,Sto,ZR,Rto,Bto,Pto,Pg,$re,Ito,qto,eB,Nto,jto,Dto,Es,kre,Gto,Oto,oB,Vto,Xto,rB,zto,Qto,Wto,Cs,Sre,Hto,Uto,tB,Jto,Yto,aB,Kto,Zto,eao,ws,Rre,oao,rao,nB,tao,aao,sB,nao,sao,lao,As,Bre,iao,dao,lB,cao,fao,iB,mao,gao,hao,Ig,pao,qg,$A,uao,Pre,_ao,KRe,mi,Ng,Ire,kA,bao,qre,vao,ZRe,Co,SA,Fao,RA,Tao,dB,Mao,Eao,Cao,BA,wao,Nre,Aao,yao,Lao,Xe,PA,xao,jre,$ao,kao,Ta,Sao,Dre,Rao,Bao,Gre,Pao,Iao,Ore,qao,Nao,jao,te,jg,Vre,Dao,Gao,cB,Oao,Vao,Xao,Dg,Xre,zao,Qao,fB,Wao,Hao,Uao,Gg,zre,Jao,Yao,mB,Kao,Zao,eno,Og,Qre,ono,rno,gB,tno,ano,nno,Vg,Wre,sno,lno,hB,ino,dno,cno,Xg,Hre,fno,mno,pB,gno,hno,pno,zg,Ure,uno,_no,uB,bno,vno,Fno,Qg,Jre,Tno,Mno,_B,Eno,Cno,wno,Wg,Yre,Ano,yno,bB,Lno,xno,$no,Hg,Kre,kno,Sno,vB,Rno,Bno,Pno,Ug,Zre,Ino,qno,FB,Nno,jno,Dno,Jg,ete,Gno,Ono,TB,Vno,Xno,zno,Yg,ote,Qno,Wno,MB,Hno,Uno,Jno,Kg,rte,Yno,Kno,EB,Zno,eso,oso,Zg,tte,rso,tso,CB,aso,nso,sso,eh,ate,lso,iso,wB,dso,cso,fso,oh,nte,mso,gso,AB,hso,pso,uso,rh,ste,_so,bso,yB,vso,Fso,Tso,th,lte,Mso,Eso,LB,Cso,wso,Aso,ah,ite,yso,Lso,xB,xso,$so,kso,nh,dte,Sso,Rso,$B,Bso,Pso,Iso,sh,cte,qso,Nso,kB,jso,Dso,Gso,lh,fte,Oso,Vso,SB,Xso,zso,Qso,ih,mte,Wso,Hso,RB,Uso,Jso,Yso,dh,Kso,ch,Zso,fh,IA,elo,gte,olo,eBe,gi,mh,hte,qA,rlo,pte,tlo,oBe,wo,NA,alo,jA,nlo,BB,slo,llo,ilo,DA,dlo,ute,clo,flo,mlo,ze,GA,glo,_te,hlo,plo,hi,ulo,bte,_lo,blo,vte,vlo,Flo,Tlo,be,gh,Fte,Mlo,Elo,PB,Clo,wlo,Alo,hh,Tte,ylo,Llo,IB,xlo,$lo,klo,ph,Mte,Slo,Rlo,qB,Blo,Plo,Ilo,uh,Ete,qlo,Nlo,NB,jlo,Dlo,Glo,_h,Cte,Olo,Vlo,jB,Xlo,zlo,Qlo,bh,wte,Wlo,Hlo,DB,Ulo,Jlo,Ylo,vh,Ate,Klo,Zlo,GB,eio,oio,rio,Fh,yte,tio,aio,OB,nio,sio,lio,Th,Lte,iio,dio,VB,cio,fio,mio,Mh,xte,gio,hio,XB,pio,uio,_io,Eh,$te,bio,vio,zB,Fio,Tio,Mio,Ch,kte,Eio,Cio,QB,wio,Aio,yio,wh,Ste,Lio,xio,WB,$io,kio,Sio,Ah,Rte,Rio,Bio,HB,Pio,Iio,qio,yh,Nio,Lh,jio,xh,OA,Dio,Bte,Gio,rBe,pi,$h,Pte,VA,Oio,Ite,Vio,tBe,Ao,XA,Xio,ui,zio,UB,Qio,Wio,JB,Hio,Uio,Jio,zA,Yio,qte,Kio,Zio,edo,Kr,QA,odo,Nte,rdo,tdo,_i,ado,jte,ndo,sdo,YB,ldo,ido,ddo,kh,cdo,Qe,WA,fdo,Dte,mdo,gdo,Ma,hdo,Gte,pdo,udo,Ote,_do,bdo,Vte,vdo,Fdo,Tdo,x,Sh,Xte,Mdo,Edo,KB,Cdo,wdo,Ado,Rh,zte,ydo,Ldo,ZB,xdo,$do,kdo,Bh,Qte,Sdo,Rdo,eP,Bdo,Pdo,Ido,Ph,Wte,qdo,Ndo,oP,jdo,Ddo,Gdo,Ih,Hte,Odo,Vdo,rP,Xdo,zdo,Qdo,qh,Ute,Wdo,Hdo,tP,Udo,Jdo,Ydo,Nh,Jte,Kdo,Zdo,aP,eco,oco,rco,jh,Yte,tco,aco,nP,nco,sco,lco,Dh,Kte,ico,dco,sP,cco,fco,mco,Gh,Zte,gco,hco,lP,pco,uco,_co,Oh,eae,bco,vco,iP,Fco,Tco,Mco,Vh,oae,Eco,Cco,dP,wco,Aco,yco,Xh,rae,Lco,xco,cP,$co,kco,Sco,zh,tae,Rco,Bco,fP,Pco,Ico,qco,Qh,aae,Nco,jco,mP,Dco,Gco,Oco,Wh,nae,Vco,Xco,gP,zco,Qco,Wco,Hh,sae,Hco,Uco,hP,Jco,Yco,Kco,Uh,lae,Zco,efo,pP,ofo,rfo,tfo,Jh,iae,afo,nfo,uP,sfo,lfo,ifo,Yh,dae,dfo,cfo,_P,ffo,mfo,gfo,Kh,cae,hfo,pfo,bP,ufo,_fo,bfo,Zh,fae,vfo,Ffo,vP,Tfo,Mfo,Efo,ep,mae,Cfo,wfo,FP,Afo,yfo,Lfo,op,gae,xfo,$fo,TP,kfo,Sfo,Rfo,rp,hae,Bfo,Pfo,MP,Ifo,qfo,Nfo,tp,pae,jfo,Dfo,EP,Gfo,Ofo,Vfo,ap,uae,Xfo,zfo,CP,Qfo,Wfo,Hfo,np,_ae,Ufo,Jfo,wP,Yfo,Kfo,Zfo,sp,bae,emo,omo,AP,rmo,tmo,amo,lp,vae,nmo,smo,yP,lmo,imo,dmo,ys,Fae,cmo,fmo,LP,mmo,gmo,xP,hmo,pmo,umo,ip,Tae,_mo,bmo,$P,vmo,Fmo,Tmo,dp,Mae,Mmo,Emo,kP,Cmo,wmo,Amo,cp,Eae,ymo,Lmo,SP,xmo,$mo,kmo,fp,Cae,Smo,Rmo,RP,Bmo,Pmo,Imo,mp,wae,qmo,Nmo,BP,jmo,Dmo,Gmo,gp,Aae,Omo,Vmo,PP,Xmo,zmo,Qmo,hp,yae,Wmo,Hmo,IP,Umo,Jmo,Ymo,pp,Lae,Kmo,Zmo,qP,ego,ogo,rgo,up,xae,tgo,ago,NP,ngo,sgo,lgo,_p,$ae,igo,dgo,jP,cgo,fgo,mgo,bp,kae,ggo,hgo,DP,pgo,ugo,_go,vp,Sae,bgo,vgo,GP,Fgo,Tgo,Mgo,Fp,Rae,Ego,Cgo,OP,wgo,Ago,ygo,Tp,Bae,Lgo,xgo,VP,$go,kgo,Sgo,Mp,Pae,Rgo,Bgo,XP,Pgo,Igo,qgo,Ep,Iae,Ngo,jgo,zP,Dgo,Ggo,Ogo,Cp,qae,Vgo,Xgo,QP,zgo,Qgo,Wgo,wp,Nae,Hgo,Ugo,WP,Jgo,Ygo,Kgo,Ap,jae,Zgo,eho,HP,oho,rho,tho,yp,Dae,aho,nho,UP,sho,lho,iho,Lp,Gae,dho,cho,JP,fho,mho,gho,xp,Oae,hho,pho,YP,uho,_ho,bho,$p,Vae,vho,Fho,KP,Tho,Mho,Eho,kp,Xae,Cho,who,ZP,Aho,yho,Lho,Sp,zae,xho,$ho,eI,kho,Sho,Rho,Rp,Qae,Bho,Pho,oI,Iho,qho,Nho,Bp,Wae,jho,Dho,rI,Gho,Oho,Vho,Pp,Hae,Xho,zho,tI,Qho,Who,Hho,Ip,Uae,Uho,Jho,aI,Yho,Kho,Zho,qp,Jae,epo,opo,nI,rpo,tpo,apo,Np,Yae,npo,spo,sI,lpo,ipo,dpo,jp,Kae,cpo,fpo,lI,mpo,gpo,hpo,Dp,Zae,ppo,upo,iI,_po,bpo,vpo,Gp,ene,Fpo,Tpo,dI,Mpo,Epo,Cpo,Op,one,wpo,Apo,cI,ypo,Lpo,xpo,Vp,rne,$po,kpo,fI,Spo,Rpo,Bpo,Xp,tne,Ppo,Ipo,mI,qpo,Npo,jpo,zp,ane,Dpo,Gpo,gI,Opo,Vpo,Xpo,Qp,nne,zpo,Qpo,hI,Wpo,Hpo,Upo,Wp,sne,Jpo,Ypo,pI,Kpo,Zpo,euo,Hp,lne,ouo,ruo,uI,tuo,auo,nuo,Up,ine,suo,luo,_I,iuo,duo,cuo,Jp,dne,fuo,muo,bI,guo,huo,puo,Yp,cne,uuo,_uo,vI,buo,vuo,Fuo,Kp,fne,Tuo,Muo,FI,Euo,Cuo,wuo,Zp,mne,Auo,yuo,TI,Luo,xuo,$uo,eu,gne,kuo,Suo,MI,Ruo,Buo,Puo,ou,hne,Iuo,quo,EI,Nuo,juo,Duo,ru,pne,Guo,Ouo,CI,Vuo,Xuo,zuo,tu,une,Quo,Wuo,wI,Huo,Uuo,Juo,au,_ne,Yuo,Kuo,AI,Zuo,e_o,o_o,nu,bne,r_o,t_o,yI,a_o,n_o,s_o,su,vne,l_o,i_o,LI,d_o,c_o,f_o,lu,Fne,m_o,g_o,xI,h_o,p_o,u_o,iu,Tne,__o,b_o,$I,v_o,F_o,T_o,du,Mne,M_o,E_o,kI,C_o,w_o,A_o,cu,Ene,y_o,L_o,SI,x_o,$_o,k_o,fu,Cne,S_o,R_o,RI,B_o,P_o,I_o,mu,wne,q_o,N_o,BI,j_o,D_o,G_o,gu,Ane,O_o,V_o,PI,X_o,z_o,Q_o,hu,yne,W_o,H_o,II,U_o,J_o,Y_o,pu,Lne,K_o,Z_o,qI,e1o,o1o,r1o,uu,xne,t1o,a1o,NI,n1o,s1o,l1o,_u,$ne,i1o,d1o,jI,c1o,f1o,m1o,bu,g1o,kne,h1o,p1o,Sne,u1o,_1o,vu,aBe,bi,Fu,Rne,HA,b1o,Bne,v1o,nBe,yo,UA,F1o,vi,T1o,DI,M1o,E1o,GI,C1o,w1o,A1o,JA,y1o,Pne,L1o,x1o,$1o,Zr,YA,k1o,Ine,S1o,R1o,Fi,B1o,qne,P1o,I1o,OI,q1o,N1o,j1o,Tu,D1o,We,KA,G1o,Nne,O1o,V1o,Ea,X1o,jne,z1o,Q1o,Dne,W1o,H1o,Gne,U1o,J1o,Y1o,G,Mu,One,K1o,Z1o,VI,ebo,obo,rbo,Eu,Vne,tbo,abo,XI,nbo,sbo,lbo,Cu,Xne,ibo,dbo,zI,cbo,fbo,mbo,wu,zne,gbo,hbo,QI,pbo,ubo,_bo,Au,Qne,bbo,vbo,WI,Fbo,Tbo,Mbo,yu,Wne,Ebo,Cbo,HI,wbo,Abo,ybo,Lu,Hne,Lbo,xbo,UI,$bo,kbo,Sbo,xu,Une,Rbo,Bbo,JI,Pbo,Ibo,qbo,$u,Jne,Nbo,jbo,YI,Dbo,Gbo,Obo,ku,Yne,Vbo,Xbo,KI,zbo,Qbo,Wbo,Su,Kne,Hbo,Ubo,ZI,Jbo,Ybo,Kbo,Ru,Zne,Zbo,e4o,eq,o4o,r4o,t4o,Bu,ese,a4o,n4o,oq,s4o,l4o,i4o,Pu,ose,d4o,c4o,rq,f4o,m4o,g4o,Iu,rse,h4o,p4o,tq,u4o,_4o,b4o,qu,tse,v4o,F4o,aq,T4o,M4o,E4o,Nu,ase,C4o,w4o,nq,A4o,y4o,L4o,ju,nse,x4o,$4o,sq,k4o,S4o,R4o,Du,sse,B4o,P4o,lq,I4o,q4o,N4o,Gu,lse,j4o,D4o,iq,G4o,O4o,V4o,Ou,ise,X4o,z4o,dq,Q4o,W4o,H4o,Vu,dse,U4o,J4o,cq,Y4o,K4o,Z4o,Xu,cse,e2o,o2o,fq,r2o,t2o,a2o,zu,fse,n2o,s2o,mq,l2o,i2o,d2o,Qu,mse,c2o,f2o,gq,m2o,g2o,h2o,Wu,gse,p2o,u2o,hq,_2o,b2o,v2o,Hu,hse,F2o,T2o,pq,M2o,E2o,C2o,Uu,pse,w2o,A2o,uq,y2o,L2o,x2o,Ju,use,$2o,k2o,_q,S2o,R2o,B2o,Yu,_se,P2o,I2o,bq,q2o,N2o,j2o,Ku,bse,D2o,G2o,vq,O2o,V2o,X2o,Zu,vse,z2o,Q2o,Fq,W2o,H2o,U2o,e_,Fse,J2o,Y2o,Tq,K2o,Z2o,e5o,o_,Tse,o5o,r5o,Mq,t5o,a5o,n5o,r_,Mse,s5o,l5o,Eq,i5o,d5o,c5o,t_,Ese,f5o,m5o,Cq,g5o,h5o,p5o,a_,Cse,u5o,_5o,wq,b5o,v5o,F5o,n_,wse,T5o,M5o,Aq,E5o,C5o,w5o,s_,Ase,A5o,y5o,yq,L5o,x5o,$5o,l_,k5o,yse,S5o,R5o,Lse,B5o,P5o,i_,sBe,Ti,d_,xse,ZA,I5o,$se,q5o,lBe,Lo,e6,N5o,Mi,j5o,Lq,D5o,G5o,xq,O5o,V5o,X5o,o6,z5o,kse,Q5o,W5o,H5o,et,r6,U5o,Sse,J5o,Y5o,Ei,K5o,Rse,Z5o,evo,$q,ovo,rvo,tvo,c_,avo,He,t6,nvo,Bse,svo,lvo,Ca,ivo,Pse,dvo,cvo,Ise,fvo,mvo,qse,gvo,hvo,pvo,z,f_,Nse,uvo,_vo,kq,bvo,vvo,Fvo,m_,jse,Tvo,Mvo,Sq,Evo,Cvo,wvo,g_,Dse,Avo,yvo,Rq,Lvo,xvo,$vo,h_,Gse,kvo,Svo,Bq,Rvo,Bvo,Pvo,p_,Ose,Ivo,qvo,Pq,Nvo,jvo,Dvo,u_,Vse,Gvo,Ovo,Iq,Vvo,Xvo,zvo,__,Xse,Qvo,Wvo,qq,Hvo,Uvo,Jvo,b_,zse,Yvo,Kvo,Nq,Zvo,eFo,oFo,v_,Qse,rFo,tFo,jq,aFo,nFo,sFo,F_,Wse,lFo,iFo,Dq,dFo,cFo,fFo,T_,Hse,mFo,gFo,Gq,hFo,pFo,uFo,M_,Use,_Fo,bFo,Oq,vFo,FFo,TFo,E_,Jse,MFo,EFo,Vq,CFo,wFo,AFo,C_,Yse,yFo,LFo,Xq,xFo,$Fo,kFo,w_,Kse,SFo,RFo,zq,BFo,PFo,IFo,A_,Zse,qFo,NFo,Qq,jFo,DFo,GFo,y_,ele,OFo,VFo,Wq,XFo,zFo,QFo,L_,ole,WFo,HFo,Hq,UFo,JFo,YFo,x_,rle,KFo,ZFo,Uq,e0o,o0o,r0o,$_,tle,t0o,a0o,Jq,n0o,s0o,l0o,k_,ale,i0o,d0o,Yq,c0o,f0o,m0o,S_,nle,g0o,h0o,Kq,p0o,u0o,_0o,R_,sle,b0o,v0o,Zq,F0o,T0o,M0o,B_,lle,E0o,C0o,eN,w0o,A0o,y0o,P_,ile,L0o,x0o,oN,$0o,k0o,S0o,I_,dle,R0o,B0o,rN,P0o,I0o,q0o,q_,cle,N0o,j0o,tN,D0o,G0o,O0o,N_,fle,V0o,X0o,aN,z0o,Q0o,W0o,j_,mle,H0o,U0o,nN,J0o,Y0o,K0o,D_,gle,Z0o,eTo,sN,oTo,rTo,tTo,G_,hle,aTo,nTo,lN,sTo,lTo,iTo,O_,ple,dTo,cTo,iN,fTo,mTo,gTo,V_,ule,hTo,pTo,dN,uTo,_To,bTo,X_,_le,vTo,FTo,cN,TTo,MTo,ETo,z_,ble,CTo,wTo,fN,ATo,yTo,LTo,Q_,xTo,vle,$To,kTo,Fle,STo,RTo,W_,iBe,Ci,H_,Tle,a6,BTo,Mle,PTo,dBe,xo,n6,ITo,wi,qTo,mN,NTo,jTo,gN,DTo,GTo,OTo,s6,VTo,Ele,XTo,zTo,QTo,ot,l6,WTo,Cle,HTo,UTo,Ai,JTo,wle,YTo,KTo,hN,ZTo,e7o,o7o,U_,r7o,Ue,i6,t7o,Ale,a7o,n7o,wa,s7o,yle,l7o,i7o,Lle,d7o,c7o,xle,f7o,m7o,g7o,Q,J_,$le,h7o,p7o,pN,u7o,_7o,b7o,Y_,kle,v7o,F7o,uN,T7o,M7o,E7o,K_,Sle,C7o,w7o,_N,A7o,y7o,L7o,Z_,Rle,x7o,$7o,bN,k7o,S7o,R7o,e1,Ble,B7o,P7o,vN,I7o,q7o,N7o,o1,Ple,j7o,D7o,FN,G7o,O7o,V7o,r1,Ile,X7o,z7o,TN,Q7o,W7o,H7o,t1,qle,U7o,J7o,MN,Y7o,K7o,Z7o,a1,Nle,eMo,oMo,EN,rMo,tMo,aMo,n1,jle,nMo,sMo,CN,lMo,iMo,dMo,s1,Dle,cMo,fMo,wN,mMo,gMo,hMo,l1,Gle,pMo,uMo,AN,_Mo,bMo,vMo,i1,Ole,FMo,TMo,yN,MMo,EMo,CMo,d1,Vle,wMo,AMo,LN,yMo,LMo,xMo,c1,Xle,$Mo,kMo,xN,SMo,RMo,BMo,f1,zle,PMo,IMo,$N,qMo,NMo,jMo,m1,Qle,DMo,GMo,kN,OMo,VMo,XMo,g1,Wle,zMo,QMo,SN,WMo,HMo,UMo,h1,Hle,JMo,YMo,RN,KMo,ZMo,eEo,p1,Ule,oEo,rEo,BN,tEo,aEo,nEo,u1,Jle,sEo,lEo,PN,iEo,dEo,cEo,_1,Yle,fEo,mEo,IN,gEo,hEo,pEo,b1,Kle,uEo,_Eo,qN,bEo,vEo,FEo,v1,Zle,TEo,MEo,NN,EEo,CEo,wEo,F1,eie,AEo,yEo,jN,LEo,xEo,$Eo,T1,oie,kEo,SEo,DN,REo,BEo,PEo,M1,rie,IEo,qEo,GN,NEo,jEo,DEo,E1,tie,GEo,OEo,ON,VEo,XEo,zEo,C1,aie,QEo,WEo,VN,HEo,UEo,JEo,w1,nie,YEo,KEo,XN,ZEo,eCo,oCo,A1,sie,rCo,tCo,lie,aCo,nCo,sCo,y1,iie,lCo,iCo,zN,dCo,cCo,fCo,L1,die,mCo,gCo,QN,hCo,pCo,uCo,x1,cie,_Co,bCo,WN,vCo,FCo,TCo,$1,fie,MCo,ECo,HN,CCo,wCo,ACo,k1,yCo,mie,LCo,xCo,gie,$Co,kCo,S1,cBe,yi,R1,hie,d6,SCo,pie,RCo,fBe,$o,c6,BCo,Li,PCo,UN,ICo,qCo,JN,NCo,jCo,DCo,f6,GCo,uie,OCo,VCo,XCo,rt,m6,zCo,_ie,QCo,WCo,xi,HCo,bie,UCo,JCo,YN,YCo,KCo,ZCo,B1,e3o,Je,g6,o3o,vie,r3o,t3o,Aa,a3o,Fie,n3o,s3o,Tie,l3o,i3o,Mie,d3o,c3o,f3o,he,P1,Eie,m3o,g3o,KN,h3o,p3o,u3o,I1,Cie,_3o,b3o,ZN,v3o,F3o,T3o,q1,wie,M3o,E3o,ej,C3o,w3o,A3o,N1,Aie,y3o,L3o,oj,x3o,$3o,k3o,j1,yie,S3o,R3o,rj,B3o,P3o,I3o,D1,Lie,q3o,N3o,tj,j3o,D3o,G3o,G1,xie,O3o,V3o,aj,X3o,z3o,Q3o,O1,$ie,W3o,H3o,nj,U3o,J3o,Y3o,V1,kie,K3o,Z3o,sj,ewo,owo,rwo,X1,Sie,two,awo,lj,nwo,swo,lwo,z1,Rie,iwo,dwo,ij,cwo,fwo,mwo,Q1,Bie,gwo,hwo,dj,pwo,uwo,_wo,W1,Pie,bwo,vwo,cj,Fwo,Two,Mwo,H1,Iie,Ewo,Cwo,fj,wwo,Awo,ywo,U1,qie,Lwo,xwo,mj,$wo,kwo,Swo,J1,Nie,Rwo,Bwo,gj,Pwo,Iwo,qwo,Y1,jie,Nwo,jwo,hj,Dwo,Gwo,Owo,K1,Vwo,Die,Xwo,zwo,Gie,Qwo,Wwo,Z1,mBe,$i,eb,Oie,h6,Hwo,Vie,Uwo,gBe,ko,p6,Jwo,ki,Ywo,pj,Kwo,Zwo,uj,eAo,oAo,rAo,u6,tAo,Xie,aAo,nAo,sAo,tt,_6,lAo,zie,iAo,dAo,Si,cAo,Qie,fAo,mAo,_j,gAo,hAo,pAo,ob,uAo,Ye,b6,_Ao,Wie,bAo,vAo,ya,FAo,Hie,TAo,MAo,Uie,EAo,CAo,Jie,wAo,AAo,yAo,q,rb,Yie,LAo,xAo,bj,$Ao,kAo,SAo,tb,Kie,RAo,BAo,vj,PAo,IAo,qAo,ab,Zie,NAo,jAo,Fj,DAo,GAo,OAo,nb,ede,VAo,XAo,Tj,zAo,QAo,WAo,sb,ode,HAo,UAo,Mj,JAo,YAo,KAo,lb,rde,ZAo,e6o,Ej,o6o,r6o,t6o,ib,tde,a6o,n6o,Cj,s6o,l6o,i6o,db,ade,d6o,c6o,wj,f6o,m6o,g6o,cb,nde,h6o,p6o,Aj,u6o,_6o,b6o,fb,sde,v6o,F6o,yj,T6o,M6o,E6o,mb,lde,C6o,w6o,Lj,A6o,y6o,L6o,gb,ide,x6o,$6o,xj,k6o,S6o,R6o,hb,dde,B6o,P6o,$j,I6o,q6o,N6o,pb,cde,j6o,D6o,kj,G6o,O6o,V6o,ub,fde,X6o,z6o,Sj,Q6o,W6o,H6o,_b,mde,U6o,J6o,Rj,Y6o,K6o,Z6o,bb,gde,eyo,oyo,Bj,ryo,tyo,ayo,vb,hde,nyo,syo,Pj,lyo,iyo,dyo,Fb,pde,cyo,fyo,Ij,myo,gyo,hyo,Tb,ude,pyo,uyo,qj,_yo,byo,vyo,Mb,_de,Fyo,Tyo,Nj,Myo,Eyo,Cyo,Eb,bde,wyo,Ayo,jj,yyo,Lyo,xyo,Cb,vde,$yo,kyo,Dj,Syo,Ryo,Byo,wb,Fde,Pyo,Iyo,Gj,qyo,Nyo,jyo,Ab,Tde,Dyo,Gyo,Oj,Oyo,Vyo,Xyo,yb,Mde,zyo,Qyo,Vj,Wyo,Hyo,Uyo,Lb,Ede,Jyo,Yyo,Xj,Kyo,Zyo,eLo,xb,Cde,oLo,rLo,zj,tLo,aLo,nLo,$b,wde,sLo,lLo,Qj,iLo,dLo,cLo,kb,Ade,fLo,mLo,Wj,gLo,hLo,pLo,Sb,yde,uLo,_Lo,Hj,bLo,vLo,FLo,Rb,Lde,TLo,MLo,Uj,ELo,CLo,wLo,Bb,xde,ALo,yLo,Jj,LLo,xLo,$Lo,Pb,$de,kLo,SLo,Yj,RLo,BLo,PLo,Ib,kde,ILo,qLo,Kj,NLo,jLo,DLo,qb,Sde,GLo,OLo,Zj,VLo,XLo,zLo,Nb,Rde,QLo,WLo,eD,HLo,ULo,JLo,jb,Bde,YLo,KLo,oD,ZLo,e8o,o8o,Db,Pde,r8o,t8o,rD,a8o,n8o,s8o,Gb,Ide,l8o,i8o,tD,d8o,c8o,f8o,Ob,qde,m8o,g8o,aD,h8o,p8o,u8o,Vb,Nde,_8o,b8o,nD,v8o,F8o,T8o,Xb,jde,M8o,E8o,sD,C8o,w8o,A8o,zb,Dde,y8o,L8o,lD,x8o,$8o,k8o,Qb,Gde,S8o,R8o,iD,B8o,P8o,I8o,Wb,Ode,q8o,N8o,dD,j8o,D8o,G8o,Hb,Vde,O8o,V8o,cD,X8o,z8o,Q8o,Ub,W8o,Xde,H8o,U8o,zde,J8o,Y8o,Jb,hBe,Ri,Yb,Qde,v6,K8o,Wde,Z8o,pBe,So,F6,exo,Bi,oxo,fD,rxo,txo,mD,axo,nxo,sxo,T6,lxo,Hde,ixo,dxo,cxo,at,M6,fxo,Ude,mxo,gxo,Pi,hxo,Jde,pxo,uxo,gD,_xo,bxo,vxo,Kb,Fxo,Ke,E6,Txo,Yde,Mxo,Exo,La,Cxo,Kde,wxo,Axo,Zde,yxo,Lxo,ece,xxo,$xo,kxo,Y,Zb,oce,Sxo,Rxo,hD,Bxo,Pxo,Ixo,e4,rce,qxo,Nxo,pD,jxo,Dxo,Gxo,o4,tce,Oxo,Vxo,uD,Xxo,zxo,Qxo,r4,ace,Wxo,Hxo,_D,Uxo,Jxo,Yxo,t4,nce,Kxo,Zxo,bD,e9o,o9o,r9o,a4,sce,t9o,a9o,vD,n9o,s9o,l9o,n4,lce,i9o,d9o,FD,c9o,f9o,m9o,s4,ice,g9o,h9o,TD,p9o,u9o,_9o,l4,dce,b9o,v9o,MD,F9o,T9o,M9o,i4,cce,E9o,C9o,ED,w9o,A9o,y9o,d4,fce,L9o,x9o,CD,$9o,k9o,S9o,c4,mce,R9o,B9o,wD,P9o,I9o,q9o,f4,gce,N9o,j9o,AD,D9o,G9o,O9o,m4,hce,V9o,X9o,yD,z9o,Q9o,W9o,g4,pce,H9o,U9o,LD,J9o,Y9o,K9o,h4,uce,Z9o,e$o,xD,o$o,r$o,t$o,p4,_ce,a$o,n$o,$D,s$o,l$o,i$o,u4,bce,d$o,c$o,kD,f$o,m$o,g$o,_4,vce,h$o,p$o,SD,u$o,_$o,b$o,b4,Fce,v$o,F$o,RD,T$o,M$o,E$o,v4,Tce,C$o,w$o,BD,A$o,y$o,L$o,F4,Mce,x$o,$$o,PD,k$o,S$o,R$o,T4,Ece,B$o,P$o,ID,I$o,q$o,N$o,M4,Cce,j$o,D$o,qD,G$o,O$o,V$o,E4,wce,X$o,z$o,ND,Q$o,W$o,H$o,C4,Ace,U$o,J$o,jD,Y$o,K$o,Z$o,w4,yce,eko,oko,DD,rko,tko,ako,A4,Lce,nko,sko,GD,lko,iko,dko,y4,cko,xce,fko,mko,$ce,gko,hko,L4,uBe,Ii,x4,kce,C6,pko,Sce,uko,_Be,Ro,w6,_ko,qi,bko,OD,vko,Fko,VD,Tko,Mko,Eko,A6,Cko,Rce,wko,Ako,yko,nt,y6,Lko,Bce,xko,$ko,Ni,kko,Pce,Sko,Rko,XD,Bko,Pko,Iko,$4,qko,Ze,L6,Nko,Ice,jko,Dko,xa,Gko,qce,Oko,Vko,Nce,Xko,zko,jce,Qko,Wko,Hko,Wr,k4,Dce,Uko,Jko,zD,Yko,Kko,Zko,S4,Gce,eSo,oSo,QD,rSo,tSo,aSo,R4,Oce,nSo,sSo,WD,lSo,iSo,dSo,B4,Vce,cSo,fSo,HD,mSo,gSo,hSo,P4,Xce,pSo,uSo,UD,_So,bSo,vSo,I4,FSo,zce,TSo,MSo,Qce,ESo,CSo,q4,bBe,ji,N4,Wce,x6,wSo,Hce,ASo,vBe,Bo,$6,ySo,Di,LSo,JD,xSo,$So,YD,kSo,SSo,RSo,k6,BSo,Uce,PSo,ISo,qSo,st,S6,NSo,Jce,jSo,DSo,Gi,GSo,Yce,OSo,VSo,KD,XSo,zSo,QSo,j4,WSo,eo,R6,HSo,Kce,USo,JSo,$a,YSo,Zce,KSo,ZSo,efe,eRo,oRo,ofe,rRo,tRo,aRo,U,D4,rfe,nRo,sRo,ZD,lRo,iRo,dRo,G4,tfe,cRo,fRo,eG,mRo,gRo,hRo,O4,afe,pRo,uRo,oG,_Ro,bRo,vRo,V4,nfe,FRo,TRo,rG,MRo,ERo,CRo,X4,sfe,wRo,ARo,tG,yRo,LRo,xRo,z4,lfe,$Ro,kRo,aG,SRo,RRo,BRo,Q4,ife,PRo,IRo,nG,qRo,NRo,jRo,W4,dfe,DRo,GRo,sG,ORo,VRo,XRo,H4,cfe,zRo,QRo,lG,WRo,HRo,URo,U4,ffe,JRo,YRo,iG,KRo,ZRo,eBo,J4,mfe,oBo,rBo,dG,tBo,aBo,nBo,Y4,gfe,sBo,lBo,cG,iBo,dBo,cBo,K4,hfe,fBo,mBo,fG,gBo,hBo,pBo,Z4,pfe,uBo,_Bo,mG,bBo,vBo,FBo,e2,ufe,TBo,MBo,gG,EBo,CBo,wBo,o2,_fe,ABo,yBo,hG,LBo,xBo,$Bo,r2,bfe,kBo,SBo,pG,RBo,BBo,PBo,t2,vfe,IBo,qBo,uG,NBo,jBo,DBo,a2,Ffe,GBo,OBo,_G,VBo,XBo,zBo,n2,Tfe,QBo,WBo,bG,HBo,UBo,JBo,s2,Mfe,YBo,KBo,vG,ZBo,ePo,oPo,l2,Efe,rPo,tPo,FG,aPo,nPo,sPo,i2,Cfe,lPo,iPo,TG,dPo,cPo,fPo,d2,wfe,mPo,gPo,MG,hPo,pPo,uPo,c2,Afe,_Po,bPo,EG,vPo,FPo,TPo,f2,yfe,MPo,EPo,CG,CPo,wPo,APo,m2,Lfe,yPo,LPo,wG,xPo,$Po,kPo,g2,xfe,SPo,RPo,AG,BPo,PPo,IPo,h2,$fe,qPo,NPo,yG,jPo,DPo,GPo,p2,kfe,OPo,VPo,LG,XPo,zPo,QPo,u2,Sfe,WPo,HPo,xG,UPo,JPo,YPo,_2,Rfe,KPo,ZPo,$G,eIo,oIo,rIo,b2,Bfe,tIo,aIo,kG,nIo,sIo,lIo,v2,iIo,Pfe,dIo,cIo,Ife,fIo,mIo,F2,FBe,Oi,T2,qfe,B6,gIo,Nfe,hIo,TBe,Po,P6,pIo,Vi,uIo,SG,_Io,bIo,RG,vIo,FIo,TIo,I6,MIo,jfe,EIo,CIo,wIo,lt,q6,AIo,Dfe,yIo,LIo,Xi,xIo,Gfe,$Io,kIo,BG,SIo,RIo,BIo,M2,PIo,oo,N6,IIo,Ofe,qIo,NIo,ka,jIo,Vfe,DIo,GIo,Xfe,OIo,VIo,zfe,XIo,zIo,QIo,O,E2,Qfe,WIo,HIo,PG,UIo,JIo,YIo,C2,Wfe,KIo,ZIo,IG,eqo,oqo,rqo,w2,Hfe,tqo,aqo,qG,nqo,sqo,lqo,A2,Ufe,iqo,dqo,NG,cqo,fqo,mqo,y2,Jfe,gqo,hqo,jG,pqo,uqo,_qo,L2,Yfe,bqo,vqo,DG,Fqo,Tqo,Mqo,x2,Kfe,Eqo,Cqo,GG,wqo,Aqo,yqo,$2,Zfe,Lqo,xqo,OG,$qo,kqo,Sqo,k2,eme,Rqo,Bqo,VG,Pqo,Iqo,qqo,S2,ome,Nqo,jqo,XG,Dqo,Gqo,Oqo,R2,rme,Vqo,Xqo,zG,zqo,Qqo,Wqo,B2,tme,Hqo,Uqo,QG,Jqo,Yqo,Kqo,P2,ame,Zqo,eNo,WG,oNo,rNo,tNo,I2,nme,aNo,nNo,HG,sNo,lNo,iNo,q2,sme,dNo,cNo,UG,fNo,mNo,gNo,N2,lme,hNo,pNo,JG,uNo,_No,bNo,j2,ime,vNo,FNo,YG,TNo,MNo,ENo,D2,dme,CNo,wNo,KG,ANo,yNo,LNo,G2,cme,xNo,$No,ZG,kNo,SNo,RNo,O2,fme,BNo,PNo,eO,INo,qNo,NNo,V2,mme,jNo,DNo,oO,GNo,ONo,VNo,X2,gme,XNo,zNo,rO,QNo,WNo,HNo,z2,hme,UNo,JNo,tO,YNo,KNo,ZNo,Q2,pme,ejo,ojo,aO,rjo,tjo,ajo,W2,ume,njo,sjo,nO,ljo,ijo,djo,H2,_me,cjo,fjo,sO,mjo,gjo,hjo,U2,bme,pjo,ujo,lO,_jo,bjo,vjo,J2,vme,Fjo,Tjo,iO,Mjo,Ejo,Cjo,Y2,Fme,wjo,Ajo,dO,yjo,Ljo,xjo,K2,Tme,$jo,kjo,cO,Sjo,Rjo,Bjo,Z2,Mme,Pjo,Ijo,fO,qjo,Njo,jjo,e5,Eme,Djo,Gjo,mO,Ojo,Vjo,Xjo,o5,Cme,zjo,Qjo,gO,Wjo,Hjo,Ujo,r5,wme,Jjo,Yjo,hO,Kjo,Zjo,eDo,t5,Ame,oDo,rDo,pO,tDo,aDo,nDo,a5,yme,sDo,lDo,uO,iDo,dDo,cDo,n5,Lme,fDo,mDo,_O,gDo,hDo,pDo,s5,xme,uDo,_Do,bO,bDo,vDo,FDo,l5,$me,TDo,MDo,vO,EDo,CDo,wDo,i5,ADo,kme,yDo,LDo,Sme,xDo,$Do,d5,MBe,zi,c5,Rme,j6,kDo,Bme,SDo,EBe,Io,D6,RDo,Qi,BDo,FO,PDo,IDo,TO,qDo,NDo,jDo,G6,DDo,Pme,GDo,ODo,VDo,it,O6,XDo,Ime,zDo,QDo,Wi,WDo,qme,HDo,UDo,MO,JDo,YDo,KDo,f5,ZDo,ro,V6,eGo,Nme,oGo,rGo,Sa,tGo,jme,aGo,nGo,Dme,sGo,lGo,Gme,iGo,dGo,cGo,Ome,m5,Vme,fGo,mGo,EO,gGo,hGo,pGo,g5,uGo,Xme,_Go,bGo,zme,vGo,FGo,h5,CBe,Hi,p5,Qme,X6,TGo,Wme,MGo,wBe,qo,z6,EGo,Ui,CGo,CO,wGo,AGo,wO,yGo,LGo,xGo,Q6,$Go,Hme,kGo,SGo,RGo,dt,W6,BGo,Ume,PGo,IGo,Ji,qGo,Jme,NGo,jGo,AO,DGo,GGo,OGo,u5,VGo,to,H6,XGo,Yme,zGo,QGo,Ra,WGo,Kme,HGo,UGo,Zme,JGo,YGo,ege,KGo,ZGo,eOo,ve,_5,oge,oOo,rOo,yO,tOo,aOo,nOo,b5,rge,sOo,lOo,LO,iOo,dOo,cOo,v5,tge,fOo,mOo,xO,gOo,hOo,pOo,Ls,age,uOo,_Oo,$O,bOo,vOo,kO,FOo,TOo,MOo,F5,nge,EOo,COo,SO,wOo,AOo,yOo,ct,sge,LOo,xOo,RO,$Oo,kOo,BO,SOo,ROo,PO,BOo,POo,IOo,T5,lge,qOo,NOo,IO,jOo,DOo,GOo,M5,ige,OOo,VOo,qO,XOo,zOo,QOo,E5,dge,WOo,HOo,NO,UOo,JOo,YOo,C5,cge,KOo,ZOo,jO,eVo,oVo,rVo,w5,fge,tVo,aVo,DO,nVo,sVo,lVo,A5,mge,iVo,dVo,GO,cVo,fVo,mVo,y5,gge,gVo,hVo,OO,pVo,uVo,_Vo,L5,bVo,hge,vVo,FVo,pge,TVo,MVo,x5,ABe,Yi,$5,uge,U6,EVo,_ge,CVo,yBe,No,J6,wVo,Ki,AVo,VO,yVo,LVo,XO,xVo,$Vo,kVo,Y6,SVo,bge,RVo,BVo,PVo,ft,K6,IVo,vge,qVo,NVo,Zi,jVo,Fge,DVo,GVo,zO,OVo,VVo,XVo,k5,zVo,ao,Z6,QVo,Tge,WVo,HVo,Ba,UVo,Mge,JVo,YVo,Ege,KVo,ZVo,Cge,eXo,oXo,rXo,wge,S5,Age,tXo,aXo,QO,nXo,sXo,lXo,R5,iXo,yge,dXo,cXo,Lge,fXo,mXo,B5,LBe,ed,P5,xge,ey,gXo,$ge,hXo,xBe,jo,oy,pXo,od,uXo,WO,_Xo,bXo,HO,vXo,FXo,TXo,ry,MXo,kge,EXo,CXo,wXo,mt,ty,AXo,Sge,yXo,LXo,rd,xXo,Rge,$Xo,kXo,UO,SXo,RXo,BXo,I5,PXo,no,ay,IXo,Bge,qXo,NXo,Pa,jXo,Pge,DXo,GXo,Ige,OXo,VXo,qge,XXo,zXo,QXo,qe,q5,Nge,WXo,HXo,JO,UXo,JXo,YXo,N5,jge,KXo,ZXo,YO,ezo,ozo,rzo,j5,Dge,tzo,azo,KO,nzo,szo,lzo,D5,Gge,izo,dzo,ZO,czo,fzo,mzo,G5,Oge,gzo,hzo,eV,pzo,uzo,_zo,O5,Vge,bzo,vzo,oV,Fzo,Tzo,Mzo,V5,Xge,Ezo,Czo,rV,wzo,Azo,yzo,X5,zge,Lzo,xzo,tV,$zo,kzo,Szo,z5,Rzo,Qge,Bzo,Pzo,Wge,Izo,qzo,Q5,$Be,td,W5,Hge,ny,Nzo,Uge,jzo,kBe,Do,sy,Dzo,ad,Gzo,aV,Ozo,Vzo,nV,Xzo,zzo,Qzo,ly,Wzo,Jge,Hzo,Uzo,Jzo,gt,iy,Yzo,Yge,Kzo,Zzo,nd,eQo,Kge,oQo,rQo,sV,tQo,aQo,nQo,H5,sQo,so,dy,lQo,Zge,iQo,dQo,Ia,cQo,ehe,fQo,mQo,ohe,gQo,hQo,rhe,pQo,uQo,_Qo,qa,U5,the,bQo,vQo,lV,FQo,TQo,MQo,J5,ahe,EQo,CQo,iV,wQo,AQo,yQo,Y5,nhe,LQo,xQo,dV,$Qo,kQo,SQo,K5,she,RQo,BQo,cV,PQo,IQo,qQo,Z5,NQo,lhe,jQo,DQo,ihe,GQo,OQo,ev,SBe,sd,ov,dhe,cy,VQo,che,XQo,RBe,Go,fy,zQo,ld,QQo,fV,WQo,HQo,mV,UQo,JQo,YQo,my,KQo,fhe,ZQo,eWo,oWo,ht,gy,rWo,mhe,tWo,aWo,id,nWo,ghe,sWo,lWo,gV,iWo,dWo,cWo,rv,fWo,lo,hy,mWo,hhe,gWo,hWo,Na,pWo,phe,uWo,_Wo,uhe,bWo,vWo,_he,FWo,TWo,MWo,Ne,tv,bhe,EWo,CWo,hV,wWo,AWo,yWo,av,vhe,LWo,xWo,pV,$Wo,kWo,SWo,nv,Fhe,RWo,BWo,uV,PWo,IWo,qWo,sv,The,NWo,jWo,_V,DWo,GWo,OWo,lv,Mhe,VWo,XWo,bV,zWo,QWo,WWo,iv,Ehe,HWo,UWo,vV,JWo,YWo,KWo,dv,Che,ZWo,eHo,FV,oHo,rHo,tHo,cv,whe,aHo,nHo,TV,sHo,lHo,iHo,fv,dHo,Ahe,cHo,fHo,yhe,mHo,gHo,mv,BBe,dd,gv,Lhe,py,hHo,xhe,pHo,PBe,Oo,uy,uHo,cd,_Ho,MV,bHo,vHo,EV,FHo,THo,MHo,_y,EHo,$he,CHo,wHo,AHo,pt,by,yHo,khe,LHo,xHo,fd,$Ho,She,kHo,SHo,CV,RHo,BHo,PHo,hv,IHo,io,vy,qHo,Rhe,NHo,jHo,ja,DHo,Bhe,GHo,OHo,Phe,VHo,XHo,Ihe,zHo,QHo,WHo,Fy,pv,qhe,HHo,UHo,wV,JHo,YHo,KHo,uv,Nhe,ZHo,eUo,AV,oUo,rUo,tUo,_v,aUo,jhe,nUo,sUo,Dhe,lUo,iUo,bv,IBe,md,vv,Ghe,Ty,dUo,Ohe,cUo,qBe,Vo,My,fUo,gd,mUo,yV,gUo,hUo,LV,pUo,uUo,_Uo,Ey,bUo,Vhe,vUo,FUo,TUo,ut,Cy,MUo,Xhe,EUo,CUo,hd,wUo,zhe,AUo,yUo,xV,LUo,xUo,$Uo,Fv,kUo,co,wy,SUo,Qhe,RUo,BUo,Da,PUo,Whe,IUo,qUo,Hhe,NUo,jUo,Uhe,DUo,GUo,OUo,Ga,Tv,Jhe,VUo,XUo,$V,zUo,QUo,WUo,Mv,Yhe,HUo,UUo,kV,JUo,YUo,KUo,Ev,Khe,ZUo,eJo,SV,oJo,rJo,tJo,Cv,Zhe,aJo,nJo,RV,sJo,lJo,iJo,wv,dJo,epe,cJo,fJo,ope,mJo,gJo,Av,NBe,pd,yv,rpe,Ay,hJo,tpe,pJo,jBe,Xo,yy,uJo,ud,_Jo,BV,bJo,vJo,PV,FJo,TJo,MJo,Ly,EJo,ape,CJo,wJo,AJo,_t,xy,yJo,npe,LJo,xJo,_d,$Jo,spe,kJo,SJo,IV,RJo,BJo,PJo,Lv,IJo,fo,$y,qJo,lpe,NJo,jJo,Oa,DJo,ipe,GJo,OJo,dpe,VJo,XJo,cpe,zJo,QJo,WJo,bd,xv,fpe,HJo,UJo,qV,JJo,YJo,KJo,$v,mpe,ZJo,eYo,NV,oYo,rYo,tYo,kv,gpe,aYo,nYo,jV,sYo,lYo,iYo,Sv,dYo,hpe,cYo,fYo,ppe,mYo,gYo,Rv,DBe,vd,Bv,upe,ky,hYo,_pe,pYo,GBe,zo,Sy,uYo,Fd,_Yo,DV,bYo,vYo,GV,FYo,TYo,MYo,Ry,EYo,bpe,CYo,wYo,AYo,bt,By,yYo,vpe,LYo,xYo,Td,$Yo,Fpe,kYo,SYo,OV,RYo,BYo,PYo,Pv,IYo,mo,Py,qYo,Tpe,NYo,jYo,Va,DYo,Mpe,GYo,OYo,Epe,VYo,XYo,Cpe,zYo,QYo,WYo,Iy,Iv,wpe,HYo,UYo,VV,JYo,YYo,KYo,qv,Ape,ZYo,eKo,XV,oKo,rKo,tKo,Nv,aKo,ype,nKo,sKo,Lpe,lKo,iKo,jv,OBe,Md,Dv,xpe,qy,dKo,$pe,cKo,VBe,Qo,Ny,fKo,Ed,mKo,zV,gKo,hKo,QV,pKo,uKo,_Ko,jy,bKo,kpe,vKo,FKo,TKo,vt,Dy,MKo,Spe,EKo,CKo,Cd,wKo,Rpe,AKo,yKo,WV,LKo,xKo,$Ko,Gv,kKo,go,Gy,SKo,Bpe,RKo,BKo,Xa,PKo,Ppe,IKo,qKo,Ipe,NKo,jKo,qpe,DKo,GKo,OKo,Npe,Ov,jpe,VKo,XKo,HV,zKo,QKo,WKo,Vv,HKo,Dpe,UKo,JKo,Gpe,YKo,KKo,Xv,XBe,wd,zv,Ope,Oy,ZKo,Vpe,eZo,zBe,Wo,Vy,oZo,Ad,rZo,UV,tZo,aZo,JV,nZo,sZo,lZo,Xy,iZo,Xpe,dZo,cZo,fZo,Ft,zy,mZo,zpe,gZo,hZo,yd,pZo,Qpe,uZo,_Zo,YV,bZo,vZo,FZo,Qv,TZo,ho,Qy,MZo,Wpe,EZo,CZo,za,wZo,Hpe,AZo,yZo,Upe,LZo,xZo,Jpe,$Zo,kZo,SZo,Qa,Wv,Ype,RZo,BZo,KV,PZo,IZo,qZo,Hv,Kpe,NZo,jZo,ZV,DZo,GZo,OZo,Uv,Zpe,VZo,XZo,eX,zZo,QZo,WZo,Jv,eue,HZo,UZo,oX,JZo,YZo,KZo,Yv,ZZo,oue,eer,oer,rue,rer,ter,Kv,QBe,Ld,Zv,tue,Wy,aer,aue,ner,WBe,Ho,Hy,ser,xd,ler,rX,ier,der,tX,cer,fer,mer,Uy,ger,nue,her,per,uer,Tt,Jy,_er,sue,ber,ver,$d,Fer,lue,Ter,Mer,aX,Eer,Cer,wer,eF,Aer,po,Yy,yer,iue,Ler,xer,Wa,$er,due,ker,Ser,cue,Rer,Ber,fue,Per,Ier,qer,mue,oF,gue,Ner,jer,nX,Der,Ger,Oer,rF,Ver,hue,Xer,zer,pue,Qer,Wer,tF,HBe,kd,aF,uue,Ky,Her,_ue,Uer,UBe,Uo,Zy,Jer,Sd,Yer,sX,Ker,Zer,lX,eor,oor,ror,eL,tor,bue,aor,nor,sor,Mt,oL,lor,vue,ior,dor,Rd,cor,Fue,mor,gor,iX,hor,por,uor,nF,_or,Mr,rL,bor,Tue,vor,For,Ha,Tor,Mue,Mor,Eor,Eue,Cor,wor,Cue,Aor,yor,Lor,j,sF,wue,xor,$or,dX,kor,Sor,Ror,lF,Aue,Bor,Por,cX,Ior,qor,Nor,iF,yue,jor,Dor,fX,Gor,Oor,Vor,dF,Lue,Xor,zor,mX,Qor,Wor,Hor,cF,xue,Uor,Jor,gX,Yor,Kor,Zor,fF,$ue,err,orr,hX,rrr,trr,arr,mF,kue,nrr,srr,pX,lrr,irr,drr,gF,Sue,crr,frr,uX,mrr,grr,hrr,hF,Rue,prr,urr,_X,_rr,brr,vrr,pF,Bue,Frr,Trr,bX,Mrr,Err,Crr,uF,Pue,wrr,Arr,vX,yrr,Lrr,xrr,_F,Iue,$rr,krr,FX,Srr,Rrr,Brr,bF,que,Prr,Irr,TX,qrr,Nrr,jrr,vF,Nue,Drr,Grr,MX,Orr,Vrr,Xrr,FF,jue,zrr,Qrr,EX,Wrr,Hrr,Urr,TF,Due,Jrr,Yrr,CX,Krr,Zrr,etr,xs,Gue,otr,rtr,wX,ttr,atr,AX,ntr,str,ltr,MF,Oue,itr,dtr,yX,ctr,ftr,mtr,EF,Vue,gtr,htr,LX,ptr,utr,_tr,CF,Xue,btr,vtr,xX,Ftr,Ttr,Mtr,wF,zue,Etr,Ctr,$X,wtr,Atr,ytr,AF,Que,Ltr,xtr,kX,$tr,ktr,Str,yF,Wue,Rtr,Btr,SX,Ptr,Itr,qtr,LF,Hue,Ntr,jtr,RX,Dtr,Gtr,Otr,xF,Uue,Vtr,Xtr,BX,ztr,Qtr,Wtr,$F,Jue,Htr,Utr,PX,Jtr,Ytr,Ktr,kF,Yue,Ztr,ear,IX,oar,rar,tar,SF,Kue,aar,nar,qX,sar,lar,iar,RF,Zue,dar,car,NX,far,mar,gar,BF,e_e,har,par,jX,uar,_ar,bar,PF,o_e,Far,Tar,DX,Mar,Ear,Car,IF,r_e,war,Aar,GX,yar,Lar,xar,qF,t_e,$ar,kar,OX,Sar,Rar,Bar,NF,a_e,Par,Iar,VX,qar,Nar,jar,jF,n_e,Dar,Gar,XX,Oar,Var,Xar,DF,s_e,zar,Qar,zX,War,Har,Uar,GF,l_e,Jar,Yar,QX,Kar,Zar,enr,OF,i_e,onr,rnr,WX,tnr,anr,nnr,VF,d_e,snr,lnr,HX,inr,dnr,cnr,XF,c_e,fnr,mnr,UX,gnr,hnr,pnr,zF,f_e,unr,_nr,JX,bnr,vnr,Fnr,QF,m_e,Tnr,Mnr,YX,Enr,Cnr,wnr,WF,g_e,Anr,ynr,KX,Lnr,xnr,$nr,HF,h_e,knr,Snr,ZX,Rnr,Bnr,Pnr,UF,JBe,Bd,JF,p_e,tL,Inr,u_e,qnr,YBe,Jo,aL,Nnr,Pd,jnr,ez,Dnr,Gnr,oz,Onr,Vnr,Xnr,nL,znr,__e,Qnr,Wnr,Hnr,Et,sL,Unr,b_e,Jnr,Ynr,Id,Knr,v_e,Znr,esr,rz,osr,rsr,tsr,YF,asr,Er,lL,nsr,F_e,ssr,lsr,Ua,isr,T_e,dsr,csr,M_e,fsr,msr,E_e,gsr,hsr,psr,ne,KF,C_e,usr,_sr,tz,bsr,vsr,Fsr,ZF,w_e,Tsr,Msr,az,Esr,Csr,wsr,e0,A_e,Asr,ysr,nz,Lsr,xsr,$sr,o0,y_e,ksr,Ssr,sz,Rsr,Bsr,Psr,r0,L_e,Isr,qsr,lz,Nsr,jsr,Dsr,t0,x_e,Gsr,Osr,iz,Vsr,Xsr,zsr,a0,$_e,Qsr,Wsr,dz,Hsr,Usr,Jsr,n0,k_e,Ysr,Ksr,cz,Zsr,elr,olr,s0,S_e,rlr,tlr,fz,alr,nlr,slr,l0,R_e,llr,ilr,mz,dlr,clr,flr,i0,B_e,mlr,glr,gz,hlr,plr,ulr,d0,P_e,_lr,blr,hz,vlr,Flr,Tlr,c0,I_e,Mlr,Elr,pz,Clr,wlr,Alr,f0,q_e,ylr,Llr,uz,xlr,$lr,klr,m0,N_e,Slr,Rlr,_z,Blr,Plr,Ilr,g0,j_e,qlr,Nlr,bz,jlr,Dlr,Glr,h0,D_e,Olr,Vlr,vz,Xlr,zlr,Qlr,p0,G_e,Wlr,Hlr,Fz,Ulr,Jlr,Ylr,u0,O_e,Klr,Zlr,Tz,eir,oir,rir,_0,V_e,tir,air,Mz,nir,sir,lir,b0,X_e,iir,dir,Ez,cir,fir,mir,v0,z_e,gir,hir,Cz,pir,uir,_ir,F0,Q_e,bir,vir,wz,Fir,Tir,Mir,T0,KBe,qd,M0,W_e,iL,Eir,H_e,Cir,ZBe,Yo,dL,wir,Nd,Air,Az,yir,Lir,yz,xir,$ir,kir,cL,Sir,U_e,Rir,Bir,Pir,Ct,fL,Iir,J_e,qir,Nir,jd,jir,Y_e,Dir,Gir,Lz,Oir,Vir,Xir,E0,zir,Cr,mL,Qir,K_e,Wir,Hir,Ja,Uir,Z_e,Jir,Yir,e1e,Kir,Zir,o1e,edr,odr,rdr,Te,C0,r1e,tdr,adr,xz,ndr,sdr,ldr,w0,t1e,idr,ddr,$z,cdr,fdr,mdr,A0,a1e,gdr,hdr,kz,pdr,udr,_dr,y0,n1e,bdr,vdr,Sz,Fdr,Tdr,Mdr,L0,s1e,Edr,Cdr,Rz,wdr,Adr,ydr,x0,l1e,Ldr,xdr,Bz,$dr,kdr,Sdr,$0,i1e,Rdr,Bdr,Pz,Pdr,Idr,qdr,k0,d1e,Ndr,jdr,Iz,Ddr,Gdr,Odr,S0,c1e,Vdr,Xdr,qz,zdr,Qdr,Wdr,R0,f1e,Hdr,Udr,Nz,Jdr,Ydr,Kdr,B0,m1e,Zdr,ecr,jz,ocr,rcr,tcr,P0,g1e,acr,ncr,Dz,scr,lcr,icr,I0,ePe,Dd,q0,h1e,gL,dcr,p1e,ccr,oPe,Ko,hL,fcr,Gd,mcr,Gz,gcr,hcr,Oz,pcr,ucr,_cr,pL,bcr,u1e,vcr,Fcr,Tcr,wt,uL,Mcr,_1e,Ecr,Ccr,Od,wcr,b1e,Acr,ycr,Vz,Lcr,xcr,$cr,N0,kcr,wr,_L,Scr,v1e,Rcr,Bcr,Ya,Pcr,F1e,Icr,qcr,T1e,Ncr,jcr,M1e,Dcr,Gcr,Ocr,bL,j0,E1e,Vcr,Xcr,Xz,zcr,Qcr,Wcr,D0,C1e,Hcr,Ucr,zz,Jcr,Ycr,Kcr,G0,rPe,Vd,O0,w1e,vL,Zcr,A1e,efr,tPe,Zo,FL,ofr,Xd,rfr,Qz,tfr,afr,Wz,nfr,sfr,lfr,TL,ifr,y1e,dfr,cfr,ffr,At,ML,mfr,L1e,gfr,hfr,zd,pfr,x1e,ufr,_fr,Hz,bfr,vfr,Ffr,V0,Tfr,Ar,EL,Mfr,$1e,Efr,Cfr,Ka,wfr,k1e,Afr,yfr,S1e,Lfr,xfr,R1e,$fr,kfr,Sfr,ie,X0,B1e,Rfr,Bfr,Uz,Pfr,Ifr,qfr,z0,P1e,Nfr,jfr,Jz,Dfr,Gfr,Ofr,Q0,I1e,Vfr,Xfr,Yz,zfr,Qfr,Wfr,W0,q1e,Hfr,Ufr,Kz,Jfr,Yfr,Kfr,H0,N1e,Zfr,emr,Zz,omr,rmr,tmr,U0,j1e,amr,nmr,eQ,smr,lmr,imr,J0,D1e,dmr,cmr,oQ,fmr,mmr,gmr,Y0,G1e,hmr,pmr,rQ,umr,_mr,bmr,K0,O1e,vmr,Fmr,tQ,Tmr,Mmr,Emr,Z0,V1e,Cmr,wmr,aQ,Amr,ymr,Lmr,eT,X1e,xmr,$mr,nQ,kmr,Smr,Rmr,oT,z1e,Bmr,Pmr,sQ,Imr,qmr,Nmr,rT,Q1e,jmr,Dmr,lQ,Gmr,Omr,Vmr,tT,W1e,Xmr,zmr,iQ,Qmr,Wmr,Hmr,aT,H1e,Umr,Jmr,dQ,Ymr,Kmr,Zmr,nT,U1e,egr,ogr,cQ,rgr,tgr,agr,sT,J1e,ngr,sgr,fQ,lgr,igr,dgr,lT,Y1e,cgr,fgr,mQ,mgr,ggr,hgr,iT,K1e,pgr,ugr,gQ,_gr,bgr,vgr,dT,Z1e,Fgr,Tgr,hQ,Mgr,Egr,Cgr,cT,aPe,Qd,fT,ebe,CL,wgr,obe,Agr,nPe,er,wL,ygr,Wd,Lgr,pQ,xgr,$gr,uQ,kgr,Sgr,Rgr,AL,Bgr,rbe,Pgr,Igr,qgr,yt,yL,Ngr,tbe,jgr,Dgr,Hd,Ggr,abe,Ogr,Vgr,_Q,Xgr,zgr,Qgr,mT,Wgr,yr,LL,Hgr,nbe,Ugr,Jgr,Za,Ygr,sbe,Kgr,Zgr,lbe,ehr,ohr,ibe,rhr,thr,ahr,ye,gT,dbe,nhr,shr,bQ,lhr,ihr,dhr,hT,cbe,chr,fhr,vQ,mhr,ghr,hhr,pT,fbe,phr,uhr,FQ,_hr,bhr,vhr,uT,mbe,Fhr,Thr,TQ,Mhr,Ehr,Chr,_T,gbe,whr,Ahr,MQ,yhr,Lhr,xhr,bT,hbe,$hr,khr,EQ,Shr,Rhr,Bhr,vT,pbe,Phr,Ihr,CQ,qhr,Nhr,jhr,FT,ube,Dhr,Ghr,wQ,Ohr,Vhr,Xhr,TT,_be,zhr,Qhr,AQ,Whr,Hhr,Uhr,MT,bbe,Jhr,Yhr,yQ,Khr,Zhr,epr,ET,sPe,Ud,CT,vbe,xL,opr,Fbe,rpr,lPe,or,$L,tpr,Jd,apr,LQ,npr,spr,xQ,lpr,ipr,dpr,kL,cpr,Tbe,fpr,mpr,gpr,Lt,SL,hpr,Mbe,ppr,upr,Yd,_pr,Ebe,bpr,vpr,$Q,Fpr,Tpr,Mpr,wT,Epr,Lr,RL,Cpr,Cbe,wpr,Apr,en,ypr,wbe,Lpr,xpr,Abe,$pr,kpr,ybe,Spr,Rpr,Bpr,Z,AT,Lbe,Ppr,Ipr,kQ,qpr,Npr,jpr,yT,xbe,Dpr,Gpr,SQ,Opr,Vpr,Xpr,LT,$be,zpr,Qpr,RQ,Wpr,Hpr,Upr,xT,kbe,Jpr,Ypr,BQ,Kpr,Zpr,eur,$T,Sbe,our,rur,PQ,tur,aur,nur,kT,Rbe,sur,lur,IQ,iur,dur,cur,ST,Bbe,fur,mur,qQ,gur,hur,pur,RT,Pbe,uur,_ur,NQ,bur,vur,Fur,BT,Ibe,Tur,Mur,jQ,Eur,Cur,wur,PT,qbe,Aur,yur,DQ,Lur,xur,$ur,IT,Nbe,kur,Sur,GQ,Rur,Bur,Pur,qT,jbe,Iur,qur,OQ,Nur,jur,Dur,NT,Dbe,Gur,Our,VQ,Vur,Xur,zur,jT,Gbe,Qur,Wur,XQ,Hur,Uur,Jur,DT,Obe,Yur,Kur,zQ,Zur,e_r,o_r,GT,Vbe,r_r,t_r,QQ,a_r,n_r,s_r,OT,Xbe,l_r,i_r,WQ,d_r,c_r,f_r,VT,zbe,m_r,g_r,HQ,h_r,p_r,u_r,XT,Qbe,__r,b_r,UQ,v_r,F_r,T_r,zT,Wbe,M_r,E_r,JQ,C_r,w_r,A_r,QT,Hbe,y_r,L_r,YQ,x_r,$_r,k_r,WT,Ube,S_r,R_r,KQ,B_r,P_r,I_r,HT,Jbe,q_r,N_r,ZQ,j_r,D_r,G_r,UT,Ybe,O_r,V_r,eW,X_r,z_r,Q_r,JT,Kbe,W_r,H_r,oW,U_r,J_r,Y_r,YT,Zbe,K_r,Z_r,rW,e1r,o1r,r1r,KT,iPe,Kd,ZT,e4e,BL,t1r,o4e,a1r,dPe,rr,PL,n1r,Zd,s1r,tW,l1r,i1r,aW,d1r,c1r,f1r,IL,m1r,r4e,g1r,h1r,p1r,xt,qL,u1r,t4e,_1r,b1r,ec,v1r,a4e,F1r,T1r,nW,M1r,E1r,C1r,e7,w1r,xr,NL,A1r,n4e,y1r,L1r,on,x1r,s4e,$1r,k1r,l4e,S1r,R1r,i4e,B1r,P1r,I1r,pe,o7,d4e,q1r,N1r,sW,j1r,D1r,G1r,r7,c4e,O1r,V1r,lW,X1r,z1r,Q1r,t7,f4e,W1r,H1r,iW,U1r,J1r,Y1r,a7,m4e,K1r,Z1r,dW,ebr,obr,rbr,n7,g4e,tbr,abr,cW,nbr,sbr,lbr,s7,h4e,ibr,dbr,fW,cbr,fbr,mbr,l7,p4e,gbr,hbr,mW,pbr,ubr,_br,i7,u4e,bbr,vbr,gW,Fbr,Tbr,Mbr,d7,_4e,Ebr,Cbr,hW,wbr,Abr,ybr,c7,b4e,Lbr,xbr,pW,$br,kbr,Sbr,f7,v4e,Rbr,Bbr,uW,Pbr,Ibr,qbr,m7,F4e,Nbr,jbr,_W,Dbr,Gbr,Obr,g7,T4e,Vbr,Xbr,bW,zbr,Qbr,Wbr,h7,M4e,Hbr,Ubr,vW,Jbr,Ybr,Kbr,p7,E4e,Zbr,e4r,FW,o4r,r4r,t4r,u7,C4e,a4r,n4r,TW,s4r,l4r,i4r,_7,w4e,d4r,c4r,MW,f4r,m4r,g4r,b7,cPe,oc,v7,A4e,jL,h4r,y4e,p4r,fPe,tr,DL,u4r,rc,_4r,EW,b4r,v4r,CW,F4r,T4r,M4r,GL,E4r,L4e,C4r,w4r,A4r,$t,OL,y4r,x4e,L4r,x4r,tc,$4r,$4e,k4r,S4r,wW,R4r,B4r,P4r,F7,I4r,$r,VL,q4r,k4e,N4r,j4r,rn,D4r,S4e,G4r,O4r,R4e,V4r,X4r,B4e,z4r,Q4r,W4r,P4e,T7,I4e,H4r,U4r,AW,J4r,Y4r,K4r,M7,mPe,ac,E7,q4e,XL,Z4r,N4e,e2r,gPe,ar,zL,o2r,nc,r2r,yW,t2r,a2r,LW,n2r,s2r,l2r,QL,i2r,j4e,d2r,c2r,f2r,kt,WL,m2r,D4e,g2r,h2r,sc,p2r,G4e,u2r,_2r,xW,b2r,v2r,F2r,C7,T2r,kr,HL,M2r,O4e,E2r,C2r,tn,w2r,V4e,A2r,y2r,X4e,L2r,x2r,z4e,$2r,k2r,S2r,de,w7,Q4e,R2r,B2r,$W,P2r,I2r,q2r,A7,W4e,N2r,j2r,kW,D2r,G2r,O2r,y7,H4e,V2r,X2r,SW,z2r,Q2r,W2r,L7,U4e,H2r,U2r,RW,J2r,Y2r,K2r,x7,J4e,Z2r,e5r,BW,o5r,r5r,t5r,$7,Y4e,a5r,n5r,PW,s5r,l5r,i5r,k7,K4e,d5r,c5r,IW,f5r,m5r,g5r,S7,Z4e,h5r,p5r,qW,u5r,_5r,b5r,R7,e2e,v5r,F5r,NW,T5r,M5r,E5r,B7,o2e,C5r,w5r,jW,A5r,y5r,L5r,P7,r2e,x5r,$5r,DW,k5r,S5r,R5r,I7,t2e,B5r,P5r,GW,I5r,q5r,N5r,q7,a2e,j5r,D5r,OW,G5r,O5r,V5r,N7,n2e,X5r,z5r,VW,Q5r,W5r,H5r,j7,s2e,U5r,J5r,XW,Y5r,K5r,Z5r,D7,l2e,evr,ovr,zW,rvr,tvr,avr,G7,i2e,nvr,svr,QW,lvr,ivr,dvr,O7,d2e,cvr,fvr,WW,mvr,gvr,hvr,V7,c2e,pvr,uvr,HW,_vr,bvr,vvr,X7,f2e,Fvr,Tvr,UW,Mvr,Evr,Cvr,z7,hPe,lc,Q7,m2e,UL,wvr,g2e,Avr,pPe,nr,JL,yvr,ic,Lvr,JW,xvr,$vr,YW,kvr,Svr,Rvr,YL,Bvr,h2e,Pvr,Ivr,qvr,St,KL,Nvr,p2e,jvr,Dvr,dc,Gvr,u2e,Ovr,Vvr,KW,Xvr,zvr,Qvr,W7,Wvr,Sr,ZL,Hvr,_2e,Uvr,Jvr,an,Yvr,b2e,Kvr,Zvr,v2e,eFr,oFr,F2e,rFr,tFr,aFr,ce,H7,T2e,nFr,sFr,ZW,lFr,iFr,dFr,U7,M2e,cFr,fFr,eH,mFr,gFr,hFr,J7,E2e,pFr,uFr,oH,_Fr,bFr,vFr,Y7,C2e,FFr,TFr,rH,MFr,EFr,CFr,K7,w2e,wFr,AFr,tH,yFr,LFr,xFr,Z7,A2e,$Fr,kFr,aH,SFr,RFr,BFr,eM,y2e,PFr,IFr,nH,qFr,NFr,jFr,oM,L2e,DFr,GFr,sH,OFr,VFr,XFr,rM,x2e,zFr,QFr,lH,WFr,HFr,UFr,tM,$2e,JFr,YFr,iH,KFr,ZFr,e0r,aM,k2e,o0r,r0r,dH,t0r,a0r,n0r,nM,S2e,s0r,l0r,cH,i0r,d0r,c0r,sM,R2e,f0r,m0r,fH,g0r,h0r,p0r,lM,B2e,u0r,_0r,mH,b0r,v0r,F0r,iM,P2e,T0r,M0r,gH,E0r,C0r,w0r,dM,I2e,A0r,y0r,hH,L0r,x0r,$0r,cM,q2e,k0r,S0r,pH,R0r,B0r,P0r,fM,N2e,I0r,q0r,uH,N0r,j0r,D0r,mM,j2e,G0r,O0r,_H,V0r,X0r,z0r,gM,D2e,Q0r,W0r,bH,H0r,U0r,J0r,hM,uPe,cc,pM,G2e,e8,Y0r,O2e,K0r,_Pe,sr,o8,Z0r,fc,eTr,vH,oTr,rTr,FH,tTr,aTr,nTr,r8,sTr,V2e,lTr,iTr,dTr,Rt,t8,cTr,X2e,fTr,mTr,mc,gTr,z2e,hTr,pTr,TH,uTr,_Tr,bTr,uM,vTr,Rr,a8,FTr,Q2e,TTr,MTr,nn,ETr,W2e,CTr,wTr,H2e,ATr,yTr,U2e,LTr,xTr,$Tr,J2e,_M,Y2e,kTr,STr,MH,RTr,BTr,PTr,bM,bPe,gc,vM,K2e,n8,ITr,Z2e,qTr,vPe,lr,s8,NTr,hc,jTr,EH,DTr,GTr,CH,OTr,VTr,XTr,l8,zTr,e5e,QTr,WTr,HTr,Bt,i8,UTr,o5e,JTr,YTr,pc,KTr,r5e,ZTr,e7r,wH,o7r,r7r,t7r,FM,a7r,Br,d8,n7r,t5e,s7r,l7r,sn,i7r,a5e,d7r,c7r,n5e,f7r,m7r,s5e,g7r,h7r,p7r,l5e,TM,i5e,u7r,_7r,AH,b7r,v7r,F7r,MM,FPe,uc,EM,d5e,c8,T7r,c5e,M7r,TPe,ir,f8,E7r,_c,C7r,yH,w7r,A7r,LH,y7r,L7r,x7r,m8,$7r,f5e,k7r,S7r,R7r,Pt,g8,B7r,m5e,P7r,I7r,bc,q7r,g5e,N7r,j7r,xH,D7r,G7r,O7r,CM,V7r,Pr,h8,X7r,h5e,z7r,Q7r,ln,W7r,p5e,H7r,U7r,u5e,J7r,Y7r,_5e,K7r,Z7r,eMr,oe,wM,b5e,oMr,rMr,$H,tMr,aMr,nMr,AM,v5e,sMr,lMr,kH,iMr,dMr,cMr,yM,F5e,fMr,mMr,SH,gMr,hMr,pMr,LM,T5e,uMr,_Mr,RH,bMr,vMr,FMr,xM,M5e,TMr,MMr,BH,EMr,CMr,wMr,$M,E5e,AMr,yMr,PH,LMr,xMr,$Mr,kM,C5e,kMr,SMr,IH,RMr,BMr,PMr,SM,w5e,IMr,qMr,qH,NMr,jMr,DMr,RM,A5e,GMr,OMr,NH,VMr,XMr,zMr,BM,y5e,QMr,WMr,jH,HMr,UMr,JMr,PM,L5e,YMr,KMr,DH,ZMr,eEr,oEr,IM,x5e,rEr,tEr,GH,aEr,nEr,sEr,qM,$5e,lEr,iEr,OH,dEr,cEr,fEr,NM,k5e,mEr,gEr,VH,hEr,pEr,uEr,jM,S5e,_Er,bEr,XH,vEr,FEr,TEr,DM,R5e,MEr,EEr,zH,CEr,wEr,AEr,GM,B5e,yEr,LEr,QH,xEr,$Er,kEr,OM,P5e,SEr,REr,WH,BEr,PEr,IEr,VM,I5e,qEr,NEr,HH,jEr,DEr,GEr,XM,q5e,OEr,VEr,UH,XEr,zEr,QEr,zM,N5e,WEr,HEr,JH,UEr,JEr,YEr,QM,j5e,KEr,ZEr,YH,eCr,oCr,rCr,WM,D5e,tCr,aCr,KH,nCr,sCr,lCr,HM,G5e,iCr,dCr,ZH,cCr,fCr,mCr,UM,O5e,gCr,hCr,eU,pCr,uCr,_Cr,JM,MPe,vc,YM,V5e,p8,bCr,X5e,vCr,EPe,dr,u8,FCr,Fc,TCr,oU,MCr,ECr,rU,CCr,wCr,ACr,_8,yCr,z5e,LCr,xCr,$Cr,It,b8,kCr,Q5e,SCr,RCr,Tc,BCr,W5e,PCr,ICr,tU,qCr,NCr,jCr,KM,DCr,Ir,v8,GCr,H5e,OCr,VCr,dn,XCr,U5e,zCr,QCr,J5e,WCr,HCr,Y5e,UCr,JCr,YCr,Hr,ZM,K5e,KCr,ZCr,aU,e3r,o3r,r3r,eE,Z5e,t3r,a3r,nU,n3r,s3r,l3r,oE,eve,i3r,d3r,sU,c3r,f3r,m3r,rE,ove,g3r,h3r,lU,p3r,u3r,_3r,tE,rve,b3r,v3r,iU,F3r,T3r,M3r,aE,CPe,Mc,nE,tve,F8,E3r,ave,C3r,wPe,cr,T8,w3r,Ec,A3r,dU,y3r,L3r,cU,x3r,$3r,k3r,M8,S3r,nve,R3r,B3r,P3r,qt,E8,I3r,sve,q3r,N3r,Cc,j3r,lve,D3r,G3r,fU,O3r,V3r,X3r,sE,z3r,qr,C8,Q3r,ive,W3r,H3r,cn,U3r,dve,J3r,Y3r,cve,K3r,Z3r,fve,ewr,owr,rwr,Me,lE,mve,twr,awr,mU,nwr,swr,lwr,iE,gve,iwr,dwr,gU,cwr,fwr,mwr,dE,hve,gwr,hwr,hU,pwr,uwr,_wr,cE,pve,bwr,vwr,pU,Fwr,Twr,Mwr,fE,uve,Ewr,Cwr,uU,wwr,Awr,ywr,mE,_ve,Lwr,xwr,_U,$wr,kwr,Swr,gE,bve,Rwr,Bwr,bU,Pwr,Iwr,qwr,hE,vve,Nwr,jwr,vU,Dwr,Gwr,Owr,pE,Fve,Vwr,Xwr,FU,zwr,Qwr,Wwr,uE,Tve,Hwr,Uwr,TU,Jwr,Ywr,Kwr,_E,Mve,Zwr,eAr,MU,oAr,rAr,tAr,bE,Eve,aAr,nAr,EU,sAr,lAr,iAr,vE,APe,wc,FE,Cve,w8,dAr,wve,cAr,yPe,fr,A8,fAr,Ac,mAr,CU,gAr,hAr,wU,pAr,uAr,_Ar,y8,bAr,Ave,vAr,FAr,TAr,Nt,L8,MAr,yve,EAr,CAr,yc,wAr,Lve,AAr,yAr,AU,LAr,xAr,$Ar,TE,kAr,Nr,x8,SAr,xve,RAr,BAr,fn,PAr,$ve,IAr,qAr,kve,NAr,jAr,Sve,DAr,GAr,OAr,Le,ME,Rve,VAr,XAr,yU,zAr,QAr,WAr,EE,Bve,HAr,UAr,LU,JAr,YAr,KAr,CE,Pve,ZAr,e6r,xU,o6r,r6r,t6r,wE,Ive,a6r,n6r,$U,s6r,l6r,i6r,AE,qve,d6r,c6r,kU,f6r,m6r,g6r,yE,Nve,h6r,p6r,SU,u6r,_6r,b6r,LE,jve,v6r,F6r,RU,T6r,M6r,E6r,xE,Dve,C6r,w6r,BU,A6r,y6r,L6r,$E,Gve,x6r,$6r,PU,k6r,S6r,R6r,kE,Ove,B6r,P6r,IU,I6r,q6r,N6r,SE,LPe,Lc,RE,Vve,$8,j6r,Xve,D6r,xPe,mr,k8,G6r,xc,O6r,qU,V6r,X6r,NU,z6r,Q6r,W6r,S8,H6r,zve,U6r,J6r,Y6r,jt,R8,K6r,Qve,Z6r,eyr,$c,oyr,Wve,ryr,tyr,jU,ayr,nyr,syr,BE,lyr,jr,B8,iyr,Hve,dyr,cyr,mn,fyr,Uve,myr,gyr,Jve,hyr,pyr,Yve,uyr,_yr,byr,ke,PE,Kve,vyr,Fyr,DU,Tyr,Myr,Eyr,IE,Zve,Cyr,wyr,GU,Ayr,yyr,Lyr,qE,eFe,xyr,$yr,OU,kyr,Syr,Ryr,NE,oFe,Byr,Pyr,VU,Iyr,qyr,Nyr,jE,rFe,jyr,Dyr,XU,Gyr,Oyr,Vyr,DE,tFe,Xyr,zyr,zU,Qyr,Wyr,Hyr,GE,aFe,Uyr,Jyr,QU,Yyr,Kyr,Zyr,OE,nFe,eLr,oLr,WU,rLr,tLr,aLr,VE,sFe,nLr,sLr,HU,lLr,iLr,dLr,XE,$Pe,kc,zE,lFe,P8,cLr,iFe,fLr,kPe,gr,I8,mLr,Sc,gLr,UU,hLr,pLr,JU,uLr,_Lr,bLr,q8,vLr,dFe,FLr,TLr,MLr,Dt,N8,ELr,cFe,CLr,wLr,Rc,ALr,fFe,yLr,LLr,YU,xLr,$Lr,kLr,QE,SLr,Dr,j8,RLr,mFe,BLr,PLr,gn,ILr,gFe,qLr,NLr,hFe,jLr,DLr,pFe,GLr,OLr,VLr,xe,WE,uFe,XLr,zLr,KU,QLr,WLr,HLr,HE,_Fe,ULr,JLr,ZU,YLr,KLr,ZLr,UE,bFe,e8r,o8r,eJ,r8r,t8r,a8r,JE,vFe,n8r,s8r,oJ,l8r,i8r,d8r,YE,FFe,c8r,f8r,rJ,m8r,g8r,h8r,KE,TFe,p8r,u8r,tJ,_8r,b8r,v8r,ZE,MFe,F8r,T8r,aJ,M8r,E8r,C8r,eC,EFe,w8r,A8r,nJ,y8r,L8r,x8r,oC,CFe,$8r,k8r,sJ,S8r,R8r,B8r,rC,wFe,P8r,I8r,lJ,q8r,N8r,j8r,tC,SPe,Bc,aC,AFe,D8,D8r,yFe,G8r,RPe,hr,G8,O8r,Pc,V8r,iJ,X8r,z8r,dJ,Q8r,W8r,H8r,O8,U8r,LFe,J8r,Y8r,K8r,Gt,V8,Z8r,xFe,exr,oxr,Ic,rxr,$Fe,txr,axr,cJ,nxr,sxr,lxr,nC,ixr,Gr,X8,dxr,kFe,cxr,fxr,hn,mxr,SFe,gxr,hxr,RFe,pxr,uxr,BFe,_xr,bxr,vxr,$e,sC,PFe,Fxr,Txr,fJ,Mxr,Exr,Cxr,lC,IFe,wxr,Axr,mJ,yxr,Lxr,xxr,iC,qFe,$xr,kxr,gJ,Sxr,Rxr,Bxr,dC,NFe,Pxr,Ixr,hJ,qxr,Nxr,jxr,cC,jFe,Dxr,Gxr,pJ,Oxr,Vxr,Xxr,fC,DFe,zxr,Qxr,uJ,Wxr,Hxr,Uxr,mC,GFe,Jxr,Yxr,_J,Kxr,Zxr,e9r,gC,OFe,o9r,r9r,bJ,t9r,a9r,n9r,hC,VFe,s9r,l9r,vJ,i9r,d9r,c9r,pC,XFe,f9r,m9r,FJ,g9r,h9r,p9r,uC,BPe,qc,_C,zFe,z8,u9r,QFe,_9r,PPe,pr,Q8,b9r,Nc,v9r,TJ,F9r,T9r,MJ,M9r,E9r,C9r,W8,w9r,WFe,A9r,y9r,L9r,Ot,H8,x9r,HFe,$9r,k9r,jc,S9r,UFe,R9r,B9r,EJ,P9r,I9r,q9r,bC,N9r,Or,U8,j9r,JFe,D9r,G9r,pn,O9r,YFe,V9r,X9r,KFe,z9r,Q9r,ZFe,W9r,H9r,U9r,je,vC,e0e,J9r,Y9r,CJ,K9r,Z9r,e$r,FC,o0e,o$r,r$r,wJ,t$r,a$r,n$r,TC,r0e,s$r,l$r,AJ,i$r,d$r,c$r,MC,t0e,f$r,m$r,yJ,g$r,h$r,p$r,EC,a0e,u$r,_$r,LJ,b$r,v$r,F$r,CC,n0e,T$r,M$r,xJ,E$r,C$r,w$r,wC,s0e,A$r,y$r,$J,L$r,x$r,$$r,AC,l0e,k$r,S$r,kJ,R$r,B$r,P$r,yC,IPe,Dc,LC,i0e,J8,I$r,d0e,q$r,qPe,ur,Y8,N$r,Gc,j$r,SJ,D$r,G$r,RJ,O$r,V$r,X$r,K8,z$r,c0e,Q$r,W$r,H$r,Vt,Z8,U$r,f0e,J$r,Y$r,Oc,K$r,m0e,Z$r,ekr,BJ,okr,rkr,tkr,xC,akr,Vr,ex,nkr,g0e,skr,lkr,un,ikr,h0e,dkr,ckr,p0e,fkr,mkr,u0e,gkr,hkr,pkr,De,$C,_0e,ukr,_kr,PJ,bkr,vkr,Fkr,kC,b0e,Tkr,Mkr,IJ,Ekr,Ckr,wkr,SC,v0e,Akr,ykr,qJ,Lkr,xkr,$kr,RC,F0e,kkr,Skr,NJ,Rkr,Bkr,Pkr,BC,T0e,Ikr,qkr,jJ,Nkr,jkr,Dkr,PC,M0e,Gkr,Okr,DJ,Vkr,Xkr,zkr,IC,E0e,Qkr,Wkr,GJ,Hkr,Ukr,Jkr,qC,C0e,Ykr,Kkr,OJ,Zkr,eSr,oSr,NC,NPe,Vc,jC,w0e,ox,rSr,A0e,tSr,jPe,_r,rx,aSr,Xc,nSr,VJ,sSr,lSr,XJ,iSr,dSr,cSr,tx,fSr,y0e,mSr,gSr,hSr,Xt,ax,pSr,L0e,uSr,_Sr,zc,bSr,x0e,vSr,FSr,zJ,TSr,MSr,ESr,DC,CSr,Xr,nx,wSr,$0e,ASr,ySr,_n,LSr,k0e,xSr,$Sr,S0e,kSr,SSr,R0e,RSr,BSr,PSr,B0e,GC,P0e,ISr,qSr,QJ,NSr,jSr,DSr,OC,DPe,Qc,VC,I0e,sx,GSr,q0e,OSr,GPe,br,lx,VSr,Wc,XSr,WJ,zSr,QSr,HJ,WSr,HSr,USr,ix,JSr,N0e,YSr,KSr,ZSr,zt,dx,eRr,j0e,oRr,rRr,Hc,tRr,D0e,aRr,nRr,UJ,sRr,lRr,iRr,XC,dRr,zr,cx,cRr,G0e,fRr,mRr,bn,gRr,O0e,hRr,pRr,V0e,uRr,_Rr,X0e,bRr,vRr,FRr,fx,zC,z0e,TRr,MRr,JJ,ERr,CRr,wRr,QC,Q0e,ARr,yRr,YJ,LRr,xRr,$Rr,WC,OPe,Uc,HC,W0e,mx,kRr,H0e,SRr,VPe,vr,gx,RRr,Jc,BRr,KJ,PRr,IRr,ZJ,qRr,NRr,jRr,hx,DRr,U0e,GRr,ORr,VRr,Qt,px,XRr,J0e,zRr,QRr,Yc,WRr,Y0e,HRr,URr,eY,JRr,YRr,KRr,UC,ZRr,Qr,ux,eBr,K0e,oBr,rBr,vn,tBr,Z0e,aBr,nBr,eTe,sBr,lBr,oTe,iBr,dBr,cBr,rTe,JC,tTe,fBr,mBr,oY,gBr,hBr,pBr,YC,XPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_A=new ee({}),bA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new uBr({props:{warning:!0,$$slots:{default:[KMt]},$$scope:{ctx:L}}}),vA=new ee({}),FA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L563"}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L586"}}),ag=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[ZMt]},$$scope:{ctx:L}}}),CA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L708"}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L377"}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17054/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L391"}}),Ig=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[eEt]},$$scope:{ctx:L}}}),$A=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L587"}}),kA=new ee({}),SA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),PA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17054/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),dh=new uBr({props:{$$slots:{default:[oEt]},$$scope:{ctx:L}}}),ch=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[rEt]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),qA=new ee({}),NA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L76"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L90"}}),yh=new uBr({props:{$$slots:{default:[tEt]},$$scope:{ctx:L}}}),Lh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[aEt]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L243"}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L716"}}),QA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),kh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[nEt]},$$scope:{ctx:L}}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),vu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[sEt]},$$scope:{ctx:L}}}),HA=new ee({}),UA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L723"}}),YA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Tu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[lEt]},$$scope:{ctx:L}}}),KA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),i_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[iEt]},$$scope:{ctx:L}}}),ZA=new ee({}),e6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L738"}}),r6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),c_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[dEt]},$$scope:{ctx:L}}}),t6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),W_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[cEt]},$$scope:{ctx:L}}}),a6=new ee({}),n6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L745"}}),l6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),U_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[fEt]},$$scope:{ctx:L}}}),i6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),S1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[mEt]},$$scope:{ctx:L}}}),d6=new ee({}),c6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L752"}}),m6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),B1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[gEt]},$$scope:{ctx:L}}}),g6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Z1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[hEt]},$$scope:{ctx:L}}}),h6=new ee({}),p6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L761"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),ob=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[pEt]},$$scope:{ctx:L}}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uEt]},$$scope:{ctx:L}}}),v6=new ee({}),F6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L795"}}),M6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[_Et]},$$scope:{ctx:L}}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bEt]},$$scope:{ctx:L}}}),C6=new ee({}),w6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L802"}}),y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),$4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vEt]},$$scope:{ctx:L}}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FEt]},$$scope:{ctx:L}}}),x6=new ee({}),$6=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L788"}}),S6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),j4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[TEt]},$$scope:{ctx:L}}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[MEt]},$$scope:{ctx:L}}}),B6=new ee({}),P6=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L770"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[EEt]},$$scope:{ctx:L}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),d5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[CEt]},$$scope:{ctx:L}}}),j6=new ee({}),D6=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L777"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),f5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[wEt]},$$scope:{ctx:L}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),h5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[AEt]},$$scope:{ctx:L}}}),X6=new ee({}),z6=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L811"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[yEt]},$$scope:{ctx:L}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[LEt]},$$scope:{ctx:L}}}),U6=new ee({}),J6=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L850"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xEt]},$$scope:{ctx:L}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Et]},$$scope:{ctx:L}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L857"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kEt]},$$scope:{ctx:L}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Q5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[SEt]},$$scope:{ctx:L}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L880"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),H5=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[REt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[BEt]},$$scope:{ctx:L}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L864"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[PEt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),mv=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[IEt]},$$scope:{ctx:L}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L871"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),hv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[qEt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),bv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NEt]},$$scope:{ctx:L}}}),Ty=new ee({}),My=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L889"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Fv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jEt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[DEt]},$$scope:{ctx:L}}}),Ay=new ee({}),yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L896"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[GEt]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:L}}}),ky=new ee({}),Sy=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L843"}}),By=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Pv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[VEt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:L}}}),qy=new ee({}),Ny=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L818"}}),Dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zEt]},$$scope:{ctx:L}}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:L}}}),Oy=new ee({}),Vy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L825"}}),zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[WEt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Kv=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:L}}}),Wy=new ee({}),Hy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L834"}}),Jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),eF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:L}}}),Yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),tF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:L}}}),Ky=new ee({}),Zy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),oL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),nF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:L}}}),rL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:L}}}),tL=new ee({}),aL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),sL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:L}}}),lL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[eCt]},$$scope:{ctx:L}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),fL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[oCt]},$$scope:{ctx:L}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rCt]},$$scope:{ctx:L}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),uL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tCt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),G0=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aCt]},$$scope:{ctx:L}}}),vL=new ee({}),FL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),V0=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[nCt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),cT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sCt]},$$scope:{ctx:L}}}),CL=new ee({}),wL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),yL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),mT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[lCt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[iCt]},$$scope:{ctx:L}}}),xL=new ee({}),$L=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),SL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[dCt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),KT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cCt]},$$scope:{ctx:L}}}),BL=new ee({}),PL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),qL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[fCt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),b7=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[mCt]},$$scope:{ctx:L}}}),jL=new ee({}),DL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),OL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[gCt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[hCt]},$$scope:{ctx:L}}}),XL=new ee({}),zL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),WL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[pCt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),z7=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[uCt]},$$scope:{ctx:L}}}),UL=new ee({}),JL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),KL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),W7=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[_Ct]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[bCt]},$$scope:{ctx:L}}}),e8=new ee({}),o8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),t8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[vCt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[FCt]},$$scope:{ctx:L}}}),n8=new ee({}),s8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),i8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[TCt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),MM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:L}}}),c8=new ee({}),f8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),g8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),CM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[ECt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[CCt]},$$scope:{ctx:L}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),b8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[wCt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),aE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ACt]},$$scope:{ctx:L}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),E8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),sE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[yCt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LCt]},$$scope:{ctx:L}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),L8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[xCt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[$Ct]},$$scope:{ctx:L}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),R8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),BE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[kCt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[SCt]},$$scope:{ctx:L}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),N8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[RCt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[BCt]},$$scope:{ctx:L}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),V8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PCt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[ICt]},$$scope:{ctx:L}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[qCt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[NCt]},$$scope:{ctx:L}}}),J8=new ee({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[jCt]},$$scope:{ctx:L}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[DCt]},$$scope:{ctx:L}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[GCt]},$$scope:{ctx:L}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[OCt]},$$scope:{ctx:L}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),XC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[VCt]},$$scope:{ctx:L}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),WC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[XCt]},$$scope:{ctx:L}}}),mx=new ee({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[zCt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[QCt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),gA=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ai=o("Instantiating one of "),Tn=a("a"),hA=o("AutoConfig"),Mn=o(", "),En=a("a"),pA=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),uA=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Ve=l(),Ae=a("p"),x9=o("will create a model that is an instance of "),li=a("a"),$9=o("BertModel"),k9=o("."),To=l(),va=a("p"),S9=o("There is one class of "),af=a("code"),R9=o("AutoModel"),Jqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),ii=a("h2"),nf=a("a"),QK=a("span"),F(_A.$$.fragment),Yqe=l(),WK=a("span"),Kqe=o("Extending the Auto Classes"),XRe=l(),wn=a("p"),Zqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HK=a("code"),eNe=o("NewModel"),oNe=o(", make sure you have a "),UK=a("code"),rNe=o("NewModelConfig"),tNe=o(` then you can add those to the auto
classes like this:`),zRe=l(),F(bA.$$.fragment),QRe=l(),B9=a("p"),aNe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),F(sf.$$.fragment),HRe=l(),di=a("h2"),lf=a("a"),JK=a("span"),F(vA.$$.fragment),nNe=l(),YK=a("span"),sNe=o("AutoConfig"),URe=l(),Mo=a("div"),F(FA.$$.fragment),lNe=l(),TA=a("p"),iNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P9=a("a"),dNe=o("from_pretrained()"),cNe=o(" class method."),fNe=l(),MA=a("p"),mNe=o("This class cannot be instantiated directly using "),KK=a("code"),gNe=o("__init__()"),hNe=o(" (throws an error)."),pNe=l(),Fr=a("div"),F(EA.$$.fragment),uNe=l(),ZK=a("p"),_Ne=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),bNe=l(),ci=a("p"),vNe=o("The configuration class to instantiate is selected based on the "),eZ=a("code"),FNe=o("model_type"),TNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oZ=a("code"),MNe=o("pretrained_model_name_or_path"),ENe=o(":"),CNe=l(),A=a("ul"),df=a("li"),rZ=a("strong"),wNe=o("albert"),ANe=o(" \u2014 "),I9=a("a"),yNe=o("AlbertConfig"),LNe=o(" (ALBERT model)"),xNe=l(),cf=a("li"),tZ=a("strong"),$Ne=o("bart"),kNe=o(" \u2014 "),q9=a("a"),SNe=o("BartConfig"),RNe=o(" (BART model)"),BNe=l(),ff=a("li"),aZ=a("strong"),PNe=o("beit"),INe=o(" \u2014 "),N9=a("a"),qNe=o("BeitConfig"),NNe=o(" (BEiT model)"),jNe=l(),mf=a("li"),nZ=a("strong"),DNe=o("bert"),GNe=o(" \u2014 "),j9=a("a"),ONe=o("BertConfig"),VNe=o(" (BERT model)"),XNe=l(),gf=a("li"),sZ=a("strong"),zNe=o("bert-generation"),QNe=o(" \u2014 "),D9=a("a"),WNe=o("BertGenerationConfig"),HNe=o(" (Bert Generation model)"),UNe=l(),hf=a("li"),lZ=a("strong"),JNe=o("big_bird"),YNe=o(" \u2014 "),G9=a("a"),KNe=o("BigBirdConfig"),ZNe=o(" (BigBird model)"),eje=l(),pf=a("li"),iZ=a("strong"),oje=o("bigbird_pegasus"),rje=o(" \u2014 "),O9=a("a"),tje=o("BigBirdPegasusConfig"),aje=o(" (BigBirdPegasus model)"),nje=l(),uf=a("li"),dZ=a("strong"),sje=o("blenderbot"),lje=o(" \u2014 "),V9=a("a"),ije=o("BlenderbotConfig"),dje=o(" (Blenderbot model)"),cje=l(),_f=a("li"),cZ=a("strong"),fje=o("blenderbot-small"),mje=o(" \u2014 "),X9=a("a"),gje=o("BlenderbotSmallConfig"),hje=o(" (BlenderbotSmall model)"),pje=l(),bf=a("li"),fZ=a("strong"),uje=o("camembert"),_je=o(" \u2014 "),z9=a("a"),bje=o("CamembertConfig"),vje=o(" (CamemBERT model)"),Fje=l(),vf=a("li"),mZ=a("strong"),Tje=o("canine"),Mje=o(" \u2014 "),Q9=a("a"),Eje=o("CanineConfig"),Cje=o(" (Canine model)"),wje=l(),Ff=a("li"),gZ=a("strong"),Aje=o("clip"),yje=o(" \u2014 "),W9=a("a"),Lje=o("CLIPConfig"),xje=o(" (CLIP model)"),$je=l(),Tf=a("li"),hZ=a("strong"),kje=o("convbert"),Sje=o(" \u2014 "),H9=a("a"),Rje=o("ConvBertConfig"),Bje=o(" (ConvBERT model)"),Pje=l(),Mf=a("li"),pZ=a("strong"),Ije=o("convnext"),qje=o(" \u2014 "),U9=a("a"),Nje=o("ConvNextConfig"),jje=o(" (ConvNext model)"),Dje=l(),Ef=a("li"),uZ=a("strong"),Gje=o("ctrl"),Oje=o(" \u2014 "),J9=a("a"),Vje=o("CTRLConfig"),Xje=o(" (CTRL model)"),zje=l(),Cf=a("li"),_Z=a("strong"),Qje=o("data2vec-audio"),Wje=o(" \u2014 "),Y9=a("a"),Hje=o("Data2VecAudioConfig"),Uje=o(" (Data2VecAudio model)"),Jje=l(),wf=a("li"),bZ=a("strong"),Yje=o("data2vec-text"),Kje=o(" \u2014 "),K9=a("a"),Zje=o("Data2VecTextConfig"),eDe=o(" (Data2VecText model)"),oDe=l(),Af=a("li"),vZ=a("strong"),rDe=o("data2vec-vision"),tDe=o(" \u2014 "),Z9=a("a"),aDe=o("Data2VecVisionConfig"),nDe=o(" (Data2VecVision model)"),sDe=l(),yf=a("li"),FZ=a("strong"),lDe=o("deberta"),iDe=o(" \u2014 "),e$=a("a"),dDe=o("DebertaConfig"),cDe=o(" (DeBERTa model)"),fDe=l(),Lf=a("li"),TZ=a("strong"),mDe=o("deberta-v2"),gDe=o(" \u2014 "),o$=a("a"),hDe=o("DebertaV2Config"),pDe=o(" (DeBERTa-v2 model)"),uDe=l(),xf=a("li"),MZ=a("strong"),_De=o("decision_transformer"),bDe=o(" \u2014 "),r$=a("a"),vDe=o("DecisionTransformerConfig"),FDe=o(" (Decision Transformer model)"),TDe=l(),$f=a("li"),EZ=a("strong"),MDe=o("deit"),EDe=o(" \u2014 "),t$=a("a"),CDe=o("DeiTConfig"),wDe=o(" (DeiT model)"),ADe=l(),kf=a("li"),CZ=a("strong"),yDe=o("detr"),LDe=o(" \u2014 "),a$=a("a"),xDe=o("DetrConfig"),$De=o(" (DETR model)"),kDe=l(),Sf=a("li"),wZ=a("strong"),SDe=o("distilbert"),RDe=o(" \u2014 "),n$=a("a"),BDe=o("DistilBertConfig"),PDe=o(" (DistilBERT model)"),IDe=l(),Rf=a("li"),AZ=a("strong"),qDe=o("dpr"),NDe=o(" \u2014 "),s$=a("a"),jDe=o("DPRConfig"),DDe=o(" (DPR model)"),GDe=l(),Bf=a("li"),yZ=a("strong"),ODe=o("dpt"),VDe=o(" \u2014 "),l$=a("a"),XDe=o("DPTConfig"),zDe=o(" (DPT model)"),QDe=l(),Pf=a("li"),LZ=a("strong"),WDe=o("electra"),HDe=o(" \u2014 "),i$=a("a"),UDe=o("ElectraConfig"),JDe=o(" (ELECTRA model)"),YDe=l(),If=a("li"),xZ=a("strong"),KDe=o("encoder-decoder"),ZDe=o(" \u2014 "),d$=a("a"),eGe=o("EncoderDecoderConfig"),oGe=o(" (Encoder decoder model)"),rGe=l(),qf=a("li"),$Z=a("strong"),tGe=o("flaubert"),aGe=o(" \u2014 "),c$=a("a"),nGe=o("FlaubertConfig"),sGe=o(" (FlauBERT model)"),lGe=l(),Nf=a("li"),kZ=a("strong"),iGe=o("fnet"),dGe=o(" \u2014 "),f$=a("a"),cGe=o("FNetConfig"),fGe=o(" (FNet model)"),mGe=l(),jf=a("li"),SZ=a("strong"),gGe=o("fsmt"),hGe=o(" \u2014 "),m$=a("a"),pGe=o("FSMTConfig"),uGe=o(" (FairSeq Machine-Translation model)"),_Ge=l(),Df=a("li"),RZ=a("strong"),bGe=o("funnel"),vGe=o(" \u2014 "),g$=a("a"),FGe=o("FunnelConfig"),TGe=o(" (Funnel Transformer model)"),MGe=l(),Gf=a("li"),BZ=a("strong"),EGe=o("glpn"),CGe=o(" \u2014 "),h$=a("a"),wGe=o("GLPNConfig"),AGe=o(" (GLPN model)"),yGe=l(),Of=a("li"),PZ=a("strong"),LGe=o("gpt2"),xGe=o(" \u2014 "),p$=a("a"),$Ge=o("GPT2Config"),kGe=o(" (OpenAI GPT-2 model)"),SGe=l(),Vf=a("li"),IZ=a("strong"),RGe=o("gpt_neo"),BGe=o(" \u2014 "),u$=a("a"),PGe=o("GPTNeoConfig"),IGe=o(" (GPT Neo model)"),qGe=l(),Xf=a("li"),qZ=a("strong"),NGe=o("gptj"),jGe=o(" \u2014 "),_$=a("a"),DGe=o("GPTJConfig"),GGe=o(" (GPT-J model)"),OGe=l(),zf=a("li"),NZ=a("strong"),VGe=o("hubert"),XGe=o(" \u2014 "),b$=a("a"),zGe=o("HubertConfig"),QGe=o(" (Hubert model)"),WGe=l(),Qf=a("li"),jZ=a("strong"),HGe=o("ibert"),UGe=o(" \u2014 "),v$=a("a"),JGe=o("IBertConfig"),YGe=o(" (I-BERT model)"),KGe=l(),Wf=a("li"),DZ=a("strong"),ZGe=o("imagegpt"),eOe=o(" \u2014 "),F$=a("a"),oOe=o("ImageGPTConfig"),rOe=o(" (ImageGPT model)"),tOe=l(),Hf=a("li"),GZ=a("strong"),aOe=o("layoutlm"),nOe=o(" \u2014 "),T$=a("a"),sOe=o("LayoutLMConfig"),lOe=o(" (LayoutLM model)"),iOe=l(),Uf=a("li"),OZ=a("strong"),dOe=o("layoutlmv2"),cOe=o(" \u2014 "),M$=a("a"),fOe=o("LayoutLMv2Config"),mOe=o(" (LayoutLMv2 model)"),gOe=l(),Jf=a("li"),VZ=a("strong"),hOe=o("led"),pOe=o(" \u2014 "),E$=a("a"),uOe=o("LEDConfig"),_Oe=o(" (LED model)"),bOe=l(),Yf=a("li"),XZ=a("strong"),vOe=o("longformer"),FOe=o(" \u2014 "),C$=a("a"),TOe=o("LongformerConfig"),MOe=o(" (Longformer model)"),EOe=l(),Kf=a("li"),zZ=a("strong"),COe=o("luke"),wOe=o(" \u2014 "),w$=a("a"),AOe=o("LukeConfig"),yOe=o(" (LUKE model)"),LOe=l(),Zf=a("li"),QZ=a("strong"),xOe=o("lxmert"),$Oe=o(" \u2014 "),A$=a("a"),kOe=o("LxmertConfig"),SOe=o(" (LXMERT model)"),ROe=l(),em=a("li"),WZ=a("strong"),BOe=o("m2m_100"),POe=o(" \u2014 "),y$=a("a"),IOe=o("M2M100Config"),qOe=o(" (M2M100 model)"),NOe=l(),om=a("li"),HZ=a("strong"),jOe=o("marian"),DOe=o(" \u2014 "),L$=a("a"),GOe=o("MarianConfig"),OOe=o(" (Marian model)"),VOe=l(),rm=a("li"),UZ=a("strong"),XOe=o("maskformer"),zOe=o(" \u2014 "),x$=a("a"),QOe=o("MaskFormerConfig"),WOe=o(" (MaskFormer model)"),HOe=l(),tm=a("li"),JZ=a("strong"),UOe=o("mbart"),JOe=o(" \u2014 "),$$=a("a"),YOe=o("MBartConfig"),KOe=o(" (mBART model)"),ZOe=l(),am=a("li"),YZ=a("strong"),eVe=o("megatron-bert"),oVe=o(" \u2014 "),k$=a("a"),rVe=o("MegatronBertConfig"),tVe=o(" (MegatronBert model)"),aVe=l(),nm=a("li"),KZ=a("strong"),nVe=o("mobilebert"),sVe=o(" \u2014 "),S$=a("a"),lVe=o("MobileBertConfig"),iVe=o(" (MobileBERT model)"),dVe=l(),sm=a("li"),ZZ=a("strong"),cVe=o("mpnet"),fVe=o(" \u2014 "),R$=a("a"),mVe=o("MPNetConfig"),gVe=o(" (MPNet model)"),hVe=l(),lm=a("li"),eee=a("strong"),pVe=o("mt5"),uVe=o(" \u2014 "),B$=a("a"),_Ve=o("MT5Config"),bVe=o(" (mT5 model)"),vVe=l(),im=a("li"),oee=a("strong"),FVe=o("nystromformer"),TVe=o(" \u2014 "),P$=a("a"),MVe=o("NystromformerConfig"),EVe=o(" (Nystromformer model)"),CVe=l(),dm=a("li"),ree=a("strong"),wVe=o("openai-gpt"),AVe=o(" \u2014 "),I$=a("a"),yVe=o("OpenAIGPTConfig"),LVe=o(" (OpenAI GPT model)"),xVe=l(),cm=a("li"),tee=a("strong"),$Ve=o("pegasus"),kVe=o(" \u2014 "),q$=a("a"),SVe=o("PegasusConfig"),RVe=o(" (Pegasus model)"),BVe=l(),fm=a("li"),aee=a("strong"),PVe=o("perceiver"),IVe=o(" \u2014 "),N$=a("a"),qVe=o("PerceiverConfig"),NVe=o(" (Perceiver model)"),jVe=l(),mm=a("li"),nee=a("strong"),DVe=o("plbart"),GVe=o(" \u2014 "),j$=a("a"),OVe=o("PLBartConfig"),VVe=o(" (PLBart model)"),XVe=l(),gm=a("li"),see=a("strong"),zVe=o("poolformer"),QVe=o(" \u2014 "),D$=a("a"),WVe=o("PoolFormerConfig"),HVe=o(" (PoolFormer model)"),UVe=l(),hm=a("li"),lee=a("strong"),JVe=o("prophetnet"),YVe=o(" \u2014 "),G$=a("a"),KVe=o("ProphetNetConfig"),ZVe=o(" (ProphetNet model)"),eXe=l(),pm=a("li"),iee=a("strong"),oXe=o("qdqbert"),rXe=o(" \u2014 "),O$=a("a"),tXe=o("QDQBertConfig"),aXe=o(" (QDQBert model)"),nXe=l(),um=a("li"),dee=a("strong"),sXe=o("rag"),lXe=o(" \u2014 "),V$=a("a"),iXe=o("RagConfig"),dXe=o(" (RAG model)"),cXe=l(),_m=a("li"),cee=a("strong"),fXe=o("realm"),mXe=o(" \u2014 "),X$=a("a"),gXe=o("RealmConfig"),hXe=o(" (Realm model)"),pXe=l(),bm=a("li"),fee=a("strong"),uXe=o("reformer"),_Xe=o(" \u2014 "),z$=a("a"),bXe=o("ReformerConfig"),vXe=o(" (Reformer model)"),FXe=l(),vm=a("li"),mee=a("strong"),TXe=o("regnet"),MXe=o(" \u2014 "),Q$=a("a"),EXe=o("RegNetConfig"),CXe=o(" (RegNet model)"),wXe=l(),Fm=a("li"),gee=a("strong"),AXe=o("rembert"),yXe=o(" \u2014 "),W$=a("a"),LXe=o("RemBertConfig"),xXe=o(" (RemBERT model)"),$Xe=l(),Tm=a("li"),hee=a("strong"),kXe=o("resnet"),SXe=o(" \u2014 "),H$=a("a"),RXe=o("ResNetConfig"),BXe=o(" (ResNet model)"),PXe=l(),Mm=a("li"),pee=a("strong"),IXe=o("retribert"),qXe=o(" \u2014 "),U$=a("a"),NXe=o("RetriBertConfig"),jXe=o(" (RetriBERT model)"),DXe=l(),Em=a("li"),uee=a("strong"),GXe=o("roberta"),OXe=o(" \u2014 "),J$=a("a"),VXe=o("RobertaConfig"),XXe=o(" (RoBERTa model)"),zXe=l(),Cm=a("li"),_ee=a("strong"),QXe=o("roformer"),WXe=o(" \u2014 "),Y$=a("a"),HXe=o("RoFormerConfig"),UXe=o(" (RoFormer model)"),JXe=l(),wm=a("li"),bee=a("strong"),YXe=o("segformer"),KXe=o(" \u2014 "),K$=a("a"),ZXe=o("SegformerConfig"),eze=o(" (SegFormer model)"),oze=l(),Am=a("li"),vee=a("strong"),rze=o("sew"),tze=o(" \u2014 "),Z$=a("a"),aze=o("SEWConfig"),nze=o(" (SEW model)"),sze=l(),ym=a("li"),Fee=a("strong"),lze=o("sew-d"),ize=o(" \u2014 "),ek=a("a"),dze=o("SEWDConfig"),cze=o(" (SEW-D model)"),fze=l(),Lm=a("li"),Tee=a("strong"),mze=o("speech-encoder-decoder"),gze=o(" \u2014 "),ok=a("a"),hze=o("SpeechEncoderDecoderConfig"),pze=o(" (Speech Encoder decoder model)"),uze=l(),xm=a("li"),Mee=a("strong"),_ze=o("speech_to_text"),bze=o(" \u2014 "),rk=a("a"),vze=o("Speech2TextConfig"),Fze=o(" (Speech2Text model)"),Tze=l(),$m=a("li"),Eee=a("strong"),Mze=o("speech_to_text_2"),Eze=o(" \u2014 "),tk=a("a"),Cze=o("Speech2Text2Config"),wze=o(" (Speech2Text2 model)"),Aze=l(),km=a("li"),Cee=a("strong"),yze=o("splinter"),Lze=o(" \u2014 "),ak=a("a"),xze=o("SplinterConfig"),$ze=o(" (Splinter model)"),kze=l(),Sm=a("li"),wee=a("strong"),Sze=o("squeezebert"),Rze=o(" \u2014 "),nk=a("a"),Bze=o("SqueezeBertConfig"),Pze=o(" (SqueezeBERT model)"),Ize=l(),Rm=a("li"),Aee=a("strong"),qze=o("swin"),Nze=o(" \u2014 "),sk=a("a"),jze=o("SwinConfig"),Dze=o(" (Swin model)"),Gze=l(),Bm=a("li"),yee=a("strong"),Oze=o("t5"),Vze=o(" \u2014 "),lk=a("a"),Xze=o("T5Config"),zze=o(" (T5 model)"),Qze=l(),Pm=a("li"),Lee=a("strong"),Wze=o("tapas"),Hze=o(" \u2014 "),ik=a("a"),Uze=o("TapasConfig"),Jze=o(" (TAPAS model)"),Yze=l(),Im=a("li"),xee=a("strong"),Kze=o("tapex"),Zze=o(" \u2014 "),dk=a("a"),eQe=o("BartConfig"),oQe=o(" (TAPEX model)"),rQe=l(),qm=a("li"),$ee=a("strong"),tQe=o("transfo-xl"),aQe=o(" \u2014 "),ck=a("a"),nQe=o("TransfoXLConfig"),sQe=o(" (Transformer-XL model)"),lQe=l(),Nm=a("li"),kee=a("strong"),iQe=o("trocr"),dQe=o(" \u2014 "),fk=a("a"),cQe=o("TrOCRConfig"),fQe=o(" (TrOCR model)"),mQe=l(),jm=a("li"),See=a("strong"),gQe=o("unispeech"),hQe=o(" \u2014 "),mk=a("a"),pQe=o("UniSpeechConfig"),uQe=o(" (UniSpeech model)"),_Qe=l(),Dm=a("li"),Ree=a("strong"),bQe=o("unispeech-sat"),vQe=o(" \u2014 "),gk=a("a"),FQe=o("UniSpeechSatConfig"),TQe=o(" (UniSpeechSat model)"),MQe=l(),Gm=a("li"),Bee=a("strong"),EQe=o("van"),CQe=o(" \u2014 "),hk=a("a"),wQe=o("VanConfig"),AQe=o(" (VAN model)"),yQe=l(),Om=a("li"),Pee=a("strong"),LQe=o("vilt"),xQe=o(" \u2014 "),pk=a("a"),$Qe=o("ViltConfig"),kQe=o(" (ViLT model)"),SQe=l(),Vm=a("li"),Iee=a("strong"),RQe=o("vision-encoder-decoder"),BQe=o(" \u2014 "),uk=a("a"),PQe=o("VisionEncoderDecoderConfig"),IQe=o(" (Vision Encoder decoder model)"),qQe=l(),Xm=a("li"),qee=a("strong"),NQe=o("vision-text-dual-encoder"),jQe=o(" \u2014 "),_k=a("a"),DQe=o("VisionTextDualEncoderConfig"),GQe=o(" (VisionTextDualEncoder model)"),OQe=l(),zm=a("li"),Nee=a("strong"),VQe=o("visual_bert"),XQe=o(" \u2014 "),bk=a("a"),zQe=o("VisualBertConfig"),QQe=o(" (VisualBert model)"),WQe=l(),Qm=a("li"),jee=a("strong"),HQe=o("vit"),UQe=o(" \u2014 "),vk=a("a"),JQe=o("ViTConfig"),YQe=o(" (ViT model)"),KQe=l(),Wm=a("li"),Dee=a("strong"),ZQe=o("vit_mae"),eWe=o(" \u2014 "),Fk=a("a"),oWe=o("ViTMAEConfig"),rWe=o(" (ViTMAE model)"),tWe=l(),Hm=a("li"),Gee=a("strong"),aWe=o("wav2vec2"),nWe=o(" \u2014 "),Tk=a("a"),sWe=o("Wav2Vec2Config"),lWe=o(" (Wav2Vec2 model)"),iWe=l(),Um=a("li"),Oee=a("strong"),dWe=o("wavlm"),cWe=o(" \u2014 "),Mk=a("a"),fWe=o("WavLMConfig"),mWe=o(" (WavLM model)"),gWe=l(),Jm=a("li"),Vee=a("strong"),hWe=o("xglm"),pWe=o(" \u2014 "),Ek=a("a"),uWe=o("XGLMConfig"),_We=o(" (XGLM model)"),bWe=l(),Ym=a("li"),Xee=a("strong"),vWe=o("xlm"),FWe=o(" \u2014 "),Ck=a("a"),TWe=o("XLMConfig"),MWe=o(" (XLM model)"),EWe=l(),Km=a("li"),zee=a("strong"),CWe=o("xlm-prophetnet"),wWe=o(" \u2014 "),wk=a("a"),AWe=o("XLMProphetNetConfig"),yWe=o(" (XLMProphetNet model)"),LWe=l(),Zm=a("li"),Qee=a("strong"),xWe=o("xlm-roberta"),$We=o(" \u2014 "),Ak=a("a"),kWe=o("XLMRobertaConfig"),SWe=o(" (XLM-RoBERTa model)"),RWe=l(),eg=a("li"),Wee=a("strong"),BWe=o("xlm-roberta-xl"),PWe=o(" \u2014 "),yk=a("a"),IWe=o("XLMRobertaXLConfig"),qWe=o(" (XLM-RoBERTa-XL model)"),NWe=l(),og=a("li"),Hee=a("strong"),jWe=o("xlnet"),DWe=o(" \u2014 "),Lk=a("a"),GWe=o("XLNetConfig"),OWe=o(" (XLNet model)"),VWe=l(),rg=a("li"),Uee=a("strong"),XWe=o("yolos"),zWe=o(" \u2014 "),xk=a("a"),QWe=o("YolosConfig"),WWe=o(" (YOLOS model)"),HWe=l(),tg=a("li"),Jee=a("strong"),UWe=o("yoso"),JWe=o(" \u2014 "),$k=a("a"),YWe=o("YosoConfig"),KWe=o(" (YOSO model)"),ZWe=l(),F(ag.$$.fragment),eHe=l(),ng=a("div"),F(CA.$$.fragment),oHe=l(),Yee=a("p"),rHe=o("Register a new configuration for this class."),JRe=l(),fi=a("h2"),sg=a("a"),Kee=a("span"),F(wA.$$.fragment),tHe=l(),Zee=a("span"),aHe=o("AutoTokenizer"),YRe=l(),Eo=a("div"),F(AA.$$.fragment),nHe=l(),yA=a("p"),sHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=a("a"),lHe=o("AutoTokenizer.from_pretrained()"),iHe=o(" class method."),dHe=l(),LA=a("p"),cHe=o("This class cannot be instantiated directly using "),eoe=a("code"),fHe=o("__init__()"),mHe=o(" (throws an error)."),gHe=l(),Tr=a("div"),F(xA.$$.fragment),hHe=l(),ooe=a("p"),pHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uHe=l(),Fa=a("p"),_He=o("The tokenizer class to instantiate is selected based on the "),roe=a("code"),bHe=o("model_type"),vHe=o(` property of the config object (either
passed as an argument or loaded from `),toe=a("code"),FHe=o("pretrained_model_name_or_path"),THe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aoe=a("code"),MHe=o("pretrained_model_name_or_path"),EHe=o(":"),CHe=l(),k=a("ul"),An=a("li"),noe=a("strong"),wHe=o("albert"),AHe=o(" \u2014 "),Sk=a("a"),yHe=o("AlbertTokenizer"),LHe=o(" or "),Rk=a("a"),xHe=o("AlbertTokenizerFast"),$He=o(" (ALBERT model)"),kHe=l(),yn=a("li"),soe=a("strong"),SHe=o("bart"),RHe=o(" \u2014 "),Bk=a("a"),BHe=o("BartTokenizer"),PHe=o(" or "),Pk=a("a"),IHe=o("BartTokenizerFast"),qHe=o(" (BART model)"),NHe=l(),Ln=a("li"),loe=a("strong"),jHe=o("barthez"),DHe=o(" \u2014 "),Ik=a("a"),GHe=o("BarthezTokenizer"),OHe=o(" or "),qk=a("a"),VHe=o("BarthezTokenizerFast"),XHe=o(" (BARThez model)"),zHe=l(),lg=a("li"),ioe=a("strong"),QHe=o("bartpho"),WHe=o(" \u2014 "),Nk=a("a"),HHe=o("BartphoTokenizer"),UHe=o(" (BARTpho model)"),JHe=l(),xn=a("li"),doe=a("strong"),YHe=o("bert"),KHe=o(" \u2014 "),jk=a("a"),ZHe=o("BertTokenizer"),eUe=o(" or "),Dk=a("a"),oUe=o("BertTokenizerFast"),rUe=o(" (BERT model)"),tUe=l(),ig=a("li"),coe=a("strong"),aUe=o("bert-generation"),nUe=o(" \u2014 "),Gk=a("a"),sUe=o("BertGenerationTokenizer"),lUe=o(" (Bert Generation model)"),iUe=l(),dg=a("li"),foe=a("strong"),dUe=o("bert-japanese"),cUe=o(" \u2014 "),Ok=a("a"),fUe=o("BertJapaneseTokenizer"),mUe=o(" (BertJapanese model)"),gUe=l(),cg=a("li"),moe=a("strong"),hUe=o("bertweet"),pUe=o(" \u2014 "),Vk=a("a"),uUe=o("BertweetTokenizer"),_Ue=o(" (Bertweet model)"),bUe=l(),$n=a("li"),goe=a("strong"),vUe=o("big_bird"),FUe=o(" \u2014 "),Xk=a("a"),TUe=o("BigBirdTokenizer"),MUe=o(" or "),zk=a("a"),EUe=o("BigBirdTokenizerFast"),CUe=o(" (BigBird model)"),wUe=l(),kn=a("li"),hoe=a("strong"),AUe=o("bigbird_pegasus"),yUe=o(" \u2014 "),Qk=a("a"),LUe=o("PegasusTokenizer"),xUe=o(" or "),Wk=a("a"),$Ue=o("PegasusTokenizerFast"),kUe=o(" (BigBirdPegasus model)"),SUe=l(),Sn=a("li"),poe=a("strong"),RUe=o("blenderbot"),BUe=o(" \u2014 "),Hk=a("a"),PUe=o("BlenderbotTokenizer"),IUe=o(" or "),Uk=a("a"),qUe=o("BlenderbotTokenizerFast"),NUe=o(" (Blenderbot model)"),jUe=l(),fg=a("li"),uoe=a("strong"),DUe=o("blenderbot-small"),GUe=o(" \u2014 "),Jk=a("a"),OUe=o("BlenderbotSmallTokenizer"),VUe=o(" (BlenderbotSmall model)"),XUe=l(),mg=a("li"),_oe=a("strong"),zUe=o("byt5"),QUe=o(" \u2014 "),Yk=a("a"),WUe=o("ByT5Tokenizer"),HUe=o(" (ByT5 model)"),UUe=l(),Rn=a("li"),boe=a("strong"),JUe=o("camembert"),YUe=o(" \u2014 "),Kk=a("a"),KUe=o("CamembertTokenizer"),ZUe=o(" or "),Zk=a("a"),eJe=o("CamembertTokenizerFast"),oJe=o(" (CamemBERT model)"),rJe=l(),gg=a("li"),voe=a("strong"),tJe=o("canine"),aJe=o(" \u2014 "),eS=a("a"),nJe=o("CanineTokenizer"),sJe=o(" (Canine model)"),lJe=l(),Bn=a("li"),Foe=a("strong"),iJe=o("clip"),dJe=o(" \u2014 "),oS=a("a"),cJe=o("CLIPTokenizer"),fJe=o(" or "),rS=a("a"),mJe=o("CLIPTokenizerFast"),gJe=o(" (CLIP model)"),hJe=l(),Pn=a("li"),Toe=a("strong"),pJe=o("convbert"),uJe=o(" \u2014 "),tS=a("a"),_Je=o("ConvBertTokenizer"),bJe=o(" or "),aS=a("a"),vJe=o("ConvBertTokenizerFast"),FJe=o(" (ConvBERT model)"),TJe=l(),In=a("li"),Moe=a("strong"),MJe=o("cpm"),EJe=o(" \u2014 "),nS=a("a"),CJe=o("CpmTokenizer"),wJe=o(" or "),sS=a("a"),AJe=o("CpmTokenizerFast"),yJe=o(" (CPM model)"),LJe=l(),hg=a("li"),Eoe=a("strong"),xJe=o("ctrl"),$Je=o(" \u2014 "),lS=a("a"),kJe=o("CTRLTokenizer"),SJe=o(" (CTRL model)"),RJe=l(),qn=a("li"),Coe=a("strong"),BJe=o("data2vec-text"),PJe=o(" \u2014 "),iS=a("a"),IJe=o("RobertaTokenizer"),qJe=o(" or "),dS=a("a"),NJe=o("RobertaTokenizerFast"),jJe=o(" (Data2VecText model)"),DJe=l(),Nn=a("li"),woe=a("strong"),GJe=o("deberta"),OJe=o(" \u2014 "),cS=a("a"),VJe=o("DebertaTokenizer"),XJe=o(" or "),fS=a("a"),zJe=o("DebertaTokenizerFast"),QJe=o(" (DeBERTa model)"),WJe=l(),jn=a("li"),Aoe=a("strong"),HJe=o("deberta-v2"),UJe=o(" \u2014 "),mS=a("a"),JJe=o("DebertaV2Tokenizer"),YJe=o(" or "),gS=a("a"),KJe=o("DebertaV2TokenizerFast"),ZJe=o(" (DeBERTa-v2 model)"),eYe=l(),Dn=a("li"),yoe=a("strong"),oYe=o("distilbert"),rYe=o(" \u2014 "),hS=a("a"),tYe=o("DistilBertTokenizer"),aYe=o(" or "),pS=a("a"),nYe=o("DistilBertTokenizerFast"),sYe=o(" (DistilBERT model)"),lYe=l(),Gn=a("li"),Loe=a("strong"),iYe=o("dpr"),dYe=o(" \u2014 "),uS=a("a"),cYe=o("DPRQuestionEncoderTokenizer"),fYe=o(" or "),_S=a("a"),mYe=o("DPRQuestionEncoderTokenizerFast"),gYe=o(" (DPR model)"),hYe=l(),On=a("li"),xoe=a("strong"),pYe=o("electra"),uYe=o(" \u2014 "),bS=a("a"),_Ye=o("ElectraTokenizer"),bYe=o(" or "),vS=a("a"),vYe=o("ElectraTokenizerFast"),FYe=o(" (ELECTRA model)"),TYe=l(),pg=a("li"),$oe=a("strong"),MYe=o("flaubert"),EYe=o(" \u2014 "),FS=a("a"),CYe=o("FlaubertTokenizer"),wYe=o(" (FlauBERT model)"),AYe=l(),Vn=a("li"),koe=a("strong"),yYe=o("fnet"),LYe=o(" \u2014 "),TS=a("a"),xYe=o("FNetTokenizer"),$Ye=o(" or "),MS=a("a"),kYe=o("FNetTokenizerFast"),SYe=o(" (FNet model)"),RYe=l(),ug=a("li"),Soe=a("strong"),BYe=o("fsmt"),PYe=o(" \u2014 "),ES=a("a"),IYe=o("FSMTTokenizer"),qYe=o(" (FairSeq Machine-Translation model)"),NYe=l(),Xn=a("li"),Roe=a("strong"),jYe=o("funnel"),DYe=o(" \u2014 "),CS=a("a"),GYe=o("FunnelTokenizer"),OYe=o(" or "),wS=a("a"),VYe=o("FunnelTokenizerFast"),XYe=o(" (Funnel Transformer model)"),zYe=l(),zn=a("li"),Boe=a("strong"),QYe=o("gpt2"),WYe=o(" \u2014 "),AS=a("a"),HYe=o("GPT2Tokenizer"),UYe=o(" or "),yS=a("a"),JYe=o("GPT2TokenizerFast"),YYe=o(" (OpenAI GPT-2 model)"),KYe=l(),Qn=a("li"),Poe=a("strong"),ZYe=o("gpt_neo"),eKe=o(" \u2014 "),LS=a("a"),oKe=o("GPT2Tokenizer"),rKe=o(" or "),xS=a("a"),tKe=o("GPT2TokenizerFast"),aKe=o(" (GPT Neo model)"),nKe=l(),Wn=a("li"),Ioe=a("strong"),sKe=o("gptj"),lKe=o(" \u2014 "),$S=a("a"),iKe=o("GPT2Tokenizer"),dKe=o(" or "),kS=a("a"),cKe=o("GPT2TokenizerFast"),fKe=o(" (GPT-J model)"),mKe=l(),Hn=a("li"),qoe=a("strong"),gKe=o("herbert"),hKe=o(" \u2014 "),SS=a("a"),pKe=o("HerbertTokenizer"),uKe=o(" or "),RS=a("a"),_Ke=o("HerbertTokenizerFast"),bKe=o(" (HerBERT model)"),vKe=l(),_g=a("li"),Noe=a("strong"),FKe=o("hubert"),TKe=o(" \u2014 "),BS=a("a"),MKe=o("Wav2Vec2CTCTokenizer"),EKe=o(" (Hubert model)"),CKe=l(),Un=a("li"),joe=a("strong"),wKe=o("ibert"),AKe=o(" \u2014 "),PS=a("a"),yKe=o("RobertaTokenizer"),LKe=o(" or "),IS=a("a"),xKe=o("RobertaTokenizerFast"),$Ke=o(" (I-BERT model)"),kKe=l(),Jn=a("li"),Doe=a("strong"),SKe=o("layoutlm"),RKe=o(" \u2014 "),qS=a("a"),BKe=o("LayoutLMTokenizer"),PKe=o(" or "),NS=a("a"),IKe=o("LayoutLMTokenizerFast"),qKe=o(" (LayoutLM model)"),NKe=l(),Yn=a("li"),Goe=a("strong"),jKe=o("layoutlmv2"),DKe=o(" \u2014 "),jS=a("a"),GKe=o("LayoutLMv2Tokenizer"),OKe=o(" or "),DS=a("a"),VKe=o("LayoutLMv2TokenizerFast"),XKe=o(" (LayoutLMv2 model)"),zKe=l(),Kn=a("li"),Ooe=a("strong"),QKe=o("layoutxlm"),WKe=o(" \u2014 "),GS=a("a"),HKe=o("LayoutXLMTokenizer"),UKe=o(" or "),OS=a("a"),JKe=o("LayoutXLMTokenizerFast"),YKe=o(" (LayoutXLM model)"),KKe=l(),Zn=a("li"),Voe=a("strong"),ZKe=o("led"),eZe=o(" \u2014 "),VS=a("a"),oZe=o("LEDTokenizer"),rZe=o(" or "),XS=a("a"),tZe=o("LEDTokenizerFast"),aZe=o(" (LED model)"),nZe=l(),es=a("li"),Xoe=a("strong"),sZe=o("longformer"),lZe=o(" \u2014 "),zS=a("a"),iZe=o("LongformerTokenizer"),dZe=o(" or "),QS=a("a"),cZe=o("LongformerTokenizerFast"),fZe=o(" (Longformer model)"),mZe=l(),bg=a("li"),zoe=a("strong"),gZe=o("luke"),hZe=o(" \u2014 "),WS=a("a"),pZe=o("LukeTokenizer"),uZe=o(" (LUKE model)"),_Ze=l(),os=a("li"),Qoe=a("strong"),bZe=o("lxmert"),vZe=o(" \u2014 "),HS=a("a"),FZe=o("LxmertTokenizer"),TZe=o(" or "),US=a("a"),MZe=o("LxmertTokenizerFast"),EZe=o(" (LXMERT model)"),CZe=l(),vg=a("li"),Woe=a("strong"),wZe=o("m2m_100"),AZe=o(" \u2014 "),JS=a("a"),yZe=o("M2M100Tokenizer"),LZe=o(" (M2M100 model)"),xZe=l(),Fg=a("li"),Hoe=a("strong"),$Ze=o("marian"),kZe=o(" \u2014 "),YS=a("a"),SZe=o("MarianTokenizer"),RZe=o(" (Marian model)"),BZe=l(),rs=a("li"),Uoe=a("strong"),PZe=o("mbart"),IZe=o(" \u2014 "),KS=a("a"),qZe=o("MBartTokenizer"),NZe=o(" or "),ZS=a("a"),jZe=o("MBartTokenizerFast"),DZe=o(" (mBART model)"),GZe=l(),ts=a("li"),Joe=a("strong"),OZe=o("mbart50"),VZe=o(" \u2014 "),eR=a("a"),XZe=o("MBart50Tokenizer"),zZe=o(" or "),oR=a("a"),QZe=o("MBart50TokenizerFast"),WZe=o(" (mBART-50 model)"),HZe=l(),as=a("li"),Yoe=a("strong"),UZe=o("megatron-bert"),JZe=o(" \u2014 "),rR=a("a"),YZe=o("BertTokenizer"),KZe=o(" or "),tR=a("a"),ZZe=o("BertTokenizerFast"),eeo=o(" (MegatronBert model)"),oeo=l(),Tg=a("li"),Koe=a("strong"),reo=o("mluke"),teo=o(" \u2014 "),aR=a("a"),aeo=o("MLukeTokenizer"),neo=o(" (mLUKE model)"),seo=l(),ns=a("li"),Zoe=a("strong"),leo=o("mobilebert"),ieo=o(" \u2014 "),nR=a("a"),deo=o("MobileBertTokenizer"),ceo=o(" or "),sR=a("a"),feo=o("MobileBertTokenizerFast"),meo=o(" (MobileBERT model)"),geo=l(),ss=a("li"),ere=a("strong"),heo=o("mpnet"),peo=o(" \u2014 "),lR=a("a"),ueo=o("MPNetTokenizer"),_eo=o(" or "),iR=a("a"),beo=o("MPNetTokenizerFast"),veo=o(" (MPNet model)"),Feo=l(),ls=a("li"),ore=a("strong"),Teo=o("mt5"),Meo=o(" \u2014 "),dR=a("a"),Eeo=o("MT5Tokenizer"),Ceo=o(" or "),cR=a("a"),weo=o("MT5TokenizerFast"),Aeo=o(" (mT5 model)"),yeo=l(),is=a("li"),rre=a("strong"),Leo=o("nystromformer"),xeo=o(" \u2014 "),fR=a("a"),$eo=o("AlbertTokenizer"),keo=o(" or "),mR=a("a"),Seo=o("AlbertTokenizerFast"),Reo=o(" (Nystromformer model)"),Beo=l(),ds=a("li"),tre=a("strong"),Peo=o("openai-gpt"),Ieo=o(" \u2014 "),gR=a("a"),qeo=o("OpenAIGPTTokenizer"),Neo=o(" or "),hR=a("a"),jeo=o("OpenAIGPTTokenizerFast"),Deo=o(" (OpenAI GPT model)"),Geo=l(),cs=a("li"),are=a("strong"),Oeo=o("pegasus"),Veo=o(" \u2014 "),pR=a("a"),Xeo=o("PegasusTokenizer"),zeo=o(" or "),uR=a("a"),Qeo=o("PegasusTokenizerFast"),Weo=o(" (Pegasus model)"),Heo=l(),Mg=a("li"),nre=a("strong"),Ueo=o("perceiver"),Jeo=o(" \u2014 "),_R=a("a"),Yeo=o("PerceiverTokenizer"),Keo=o(" (Perceiver model)"),Zeo=l(),Eg=a("li"),sre=a("strong"),eoo=o("phobert"),ooo=o(" \u2014 "),bR=a("a"),roo=o("PhobertTokenizer"),too=o(" (PhoBERT model)"),aoo=l(),Cg=a("li"),lre=a("strong"),noo=o("plbart"),soo=o(" \u2014 "),vR=a("a"),loo=o("PLBartTokenizer"),ioo=o(" (PLBart model)"),doo=l(),wg=a("li"),ire=a("strong"),coo=o("prophetnet"),foo=o(" \u2014 "),FR=a("a"),moo=o("ProphetNetTokenizer"),goo=o(" (ProphetNet model)"),hoo=l(),fs=a("li"),dre=a("strong"),poo=o("qdqbert"),uoo=o(" \u2014 "),TR=a("a"),_oo=o("BertTokenizer"),boo=o(" or "),MR=a("a"),voo=o("BertTokenizerFast"),Foo=o(" (QDQBert model)"),Too=l(),Ag=a("li"),cre=a("strong"),Moo=o("rag"),Eoo=o(" \u2014 "),ER=a("a"),Coo=o("RagTokenizer"),woo=o(" (RAG model)"),Aoo=l(),ms=a("li"),fre=a("strong"),yoo=o("realm"),Loo=o(" \u2014 "),CR=a("a"),xoo=o("RealmTokenizer"),$oo=o(" or "),wR=a("a"),koo=o("RealmTokenizerFast"),Soo=o(" (Realm model)"),Roo=l(),gs=a("li"),mre=a("strong"),Boo=o("reformer"),Poo=o(" \u2014 "),AR=a("a"),Ioo=o("ReformerTokenizer"),qoo=o(" or "),yR=a("a"),Noo=o("ReformerTokenizerFast"),joo=o(" (Reformer model)"),Doo=l(),hs=a("li"),gre=a("strong"),Goo=o("rembert"),Ooo=o(" \u2014 "),LR=a("a"),Voo=o("RemBertTokenizer"),Xoo=o(" or "),xR=a("a"),zoo=o("RemBertTokenizerFast"),Qoo=o(" (RemBERT model)"),Woo=l(),ps=a("li"),hre=a("strong"),Hoo=o("retribert"),Uoo=o(" \u2014 "),$R=a("a"),Joo=o("RetriBertTokenizer"),Yoo=o(" or "),kR=a("a"),Koo=o("RetriBertTokenizerFast"),Zoo=o(" (RetriBERT model)"),ero=l(),us=a("li"),pre=a("strong"),oro=o("roberta"),rro=o(" \u2014 "),SR=a("a"),tro=o("RobertaTokenizer"),aro=o(" or "),RR=a("a"),nro=o("RobertaTokenizerFast"),sro=o(" (RoBERTa model)"),lro=l(),_s=a("li"),ure=a("strong"),iro=o("roformer"),dro=o(" \u2014 "),BR=a("a"),cro=o("RoFormerTokenizer"),fro=o(" or "),PR=a("a"),mro=o("RoFormerTokenizerFast"),gro=o(" (RoFormer model)"),hro=l(),yg=a("li"),_re=a("strong"),pro=o("speech_to_text"),uro=o(" \u2014 "),IR=a("a"),_ro=o("Speech2TextTokenizer"),bro=o(" (Speech2Text model)"),vro=l(),Lg=a("li"),bre=a("strong"),Fro=o("speech_to_text_2"),Tro=o(" \u2014 "),qR=a("a"),Mro=o("Speech2Text2Tokenizer"),Ero=o(" (Speech2Text2 model)"),Cro=l(),bs=a("li"),vre=a("strong"),wro=o("splinter"),Aro=o(" \u2014 "),NR=a("a"),yro=o("SplinterTokenizer"),Lro=o(" or "),jR=a("a"),xro=o("SplinterTokenizerFast"),$ro=o(" (Splinter model)"),kro=l(),vs=a("li"),Fre=a("strong"),Sro=o("squeezebert"),Rro=o(" \u2014 "),DR=a("a"),Bro=o("SqueezeBertTokenizer"),Pro=o(" or "),GR=a("a"),Iro=o("SqueezeBertTokenizerFast"),qro=o(" (SqueezeBERT model)"),Nro=l(),Fs=a("li"),Tre=a("strong"),jro=o("t5"),Dro=o(" \u2014 "),OR=a("a"),Gro=o("T5Tokenizer"),Oro=o(" or "),VR=a("a"),Vro=o("T5TokenizerFast"),Xro=o(" (T5 model)"),zro=l(),xg=a("li"),Mre=a("strong"),Qro=o("tapas"),Wro=o(" \u2014 "),XR=a("a"),Hro=o("TapasTokenizer"),Uro=o(" (TAPAS model)"),Jro=l(),$g=a("li"),Ere=a("strong"),Yro=o("tapex"),Kro=o(" \u2014 "),zR=a("a"),Zro=o("TapexTokenizer"),eto=o(" (TAPEX model)"),oto=l(),kg=a("li"),Cre=a("strong"),rto=o("transfo-xl"),tto=o(" \u2014 "),QR=a("a"),ato=o("TransfoXLTokenizer"),nto=o(" (Transformer-XL model)"),sto=l(),Ts=a("li"),wre=a("strong"),lto=o("visual_bert"),ito=o(" \u2014 "),WR=a("a"),dto=o("BertTokenizer"),cto=o(" or "),HR=a("a"),fto=o("BertTokenizerFast"),mto=o(" (VisualBert model)"),gto=l(),Sg=a("li"),Are=a("strong"),hto=o("wav2vec2"),pto=o(" \u2014 "),UR=a("a"),uto=o("Wav2Vec2CTCTokenizer"),_to=o(" (Wav2Vec2 model)"),bto=l(),Rg=a("li"),yre=a("strong"),vto=o("wav2vec2_phoneme"),Fto=o(" \u2014 "),JR=a("a"),Tto=o("Wav2Vec2PhonemeCTCTokenizer"),Mto=o(" (Wav2Vec2Phoneme model)"),Eto=l(),Ms=a("li"),Lre=a("strong"),Cto=o("xglm"),wto=o(" \u2014 "),YR=a("a"),Ato=o("XGLMTokenizer"),yto=o(" or "),KR=a("a"),Lto=o("XGLMTokenizerFast"),xto=o(" (XGLM model)"),$to=l(),Bg=a("li"),xre=a("strong"),kto=o("xlm"),Sto=o(" \u2014 "),ZR=a("a"),Rto=o("XLMTokenizer"),Bto=o(" (XLM model)"),Pto=l(),Pg=a("li"),$re=a("strong"),Ito=o("xlm-prophetnet"),qto=o(" \u2014 "),eB=a("a"),Nto=o("XLMProphetNetTokenizer"),jto=o(" (XLMProphetNet model)"),Dto=l(),Es=a("li"),kre=a("strong"),Gto=o("xlm-roberta"),Oto=o(" \u2014 "),oB=a("a"),Vto=o("XLMRobertaTokenizer"),Xto=o(" or "),rB=a("a"),zto=o("XLMRobertaTokenizerFast"),Qto=o(" (XLM-RoBERTa model)"),Wto=l(),Cs=a("li"),Sre=a("strong"),Hto=o("xlm-roberta-xl"),Uto=o(" \u2014 "),tB=a("a"),Jto=o("RobertaTokenizer"),Yto=o(" or "),aB=a("a"),Kto=o("RobertaTokenizerFast"),Zto=o(" (XLM-RoBERTa-XL model)"),eao=l(),ws=a("li"),Rre=a("strong"),oao=o("xlnet"),rao=o(" \u2014 "),nB=a("a"),tao=o("XLNetTokenizer"),aao=o(" or "),sB=a("a"),nao=o("XLNetTokenizerFast"),sao=o(" (XLNet model)"),lao=l(),As=a("li"),Bre=a("strong"),iao=o("yoso"),dao=o(" \u2014 "),lB=a("a"),cao=o("AlbertTokenizer"),fao=o(" or "),iB=a("a"),mao=o("AlbertTokenizerFast"),gao=o(" (YOSO model)"),hao=l(),F(Ig.$$.fragment),pao=l(),qg=a("div"),F($A.$$.fragment),uao=l(),Pre=a("p"),_ao=o("Register a new tokenizer in this mapping."),KRe=l(),mi=a("h2"),Ng=a("a"),Ire=a("span"),F(kA.$$.fragment),bao=l(),qre=a("span"),vao=o("AutoFeatureExtractor"),ZRe=l(),Co=a("div"),F(SA.$$.fragment),Fao=l(),RA=a("p"),Tao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=a("a"),Mao=o("AutoFeatureExtractor.from_pretrained()"),Eao=o(" class method."),Cao=l(),BA=a("p"),wao=o("This class cannot be instantiated directly using "),Nre=a("code"),Aao=o("__init__()"),yao=o(" (throws an error)."),Lao=l(),Xe=a("div"),F(PA.$$.fragment),xao=l(),jre=a("p"),$ao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kao=l(),Ta=a("p"),Sao=o("The feature extractor class to instantiate is selected based on the "),Dre=a("code"),Rao=o("model_type"),Bao=o(` property of the config object
(either passed as an argument or loaded from `),Gre=a("code"),Pao=o("pretrained_model_name_or_path"),Iao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=a("code"),qao=o("pretrained_model_name_or_path"),Nao=o(":"),jao=l(),te=a("ul"),jg=a("li"),Vre=a("strong"),Dao=o("beit"),Gao=o(" \u2014 "),cB=a("a"),Oao=o("BeitFeatureExtractor"),Vao=o(" (BEiT model)"),Xao=l(),Dg=a("li"),Xre=a("strong"),zao=o("clip"),Qao=o(" \u2014 "),fB=a("a"),Wao=o("CLIPFeatureExtractor"),Hao=o(" (CLIP model)"),Uao=l(),Gg=a("li"),zre=a("strong"),Jao=o("convnext"),Yao=o(" \u2014 "),mB=a("a"),Kao=o("ConvNextFeatureExtractor"),Zao=o(" (ConvNext model)"),eno=l(),Og=a("li"),Qre=a("strong"),ono=o("data2vec-audio"),rno=o(" \u2014 "),gB=a("a"),tno=o("Wav2Vec2FeatureExtractor"),ano=o(" (Data2VecAudio model)"),nno=l(),Vg=a("li"),Wre=a("strong"),sno=o("data2vec-vision"),lno=o(" \u2014 "),hB=a("a"),ino=o("BeitFeatureExtractor"),dno=o(" (Data2VecVision model)"),cno=l(),Xg=a("li"),Hre=a("strong"),fno=o("deit"),mno=o(" \u2014 "),pB=a("a"),gno=o("DeiTFeatureExtractor"),hno=o(" (DeiT model)"),pno=l(),zg=a("li"),Ure=a("strong"),uno=o("detr"),_no=o(" \u2014 "),uB=a("a"),bno=o("DetrFeatureExtractor"),vno=o(" (DETR model)"),Fno=l(),Qg=a("li"),Jre=a("strong"),Tno=o("dpt"),Mno=o(" \u2014 "),_B=a("a"),Eno=o("DPTFeatureExtractor"),Cno=o(" (DPT model)"),wno=l(),Wg=a("li"),Yre=a("strong"),Ano=o("glpn"),yno=o(" \u2014 "),bB=a("a"),Lno=o("GLPNFeatureExtractor"),xno=o(" (GLPN model)"),$no=l(),Hg=a("li"),Kre=a("strong"),kno=o("hubert"),Sno=o(" \u2014 "),vB=a("a"),Rno=o("Wav2Vec2FeatureExtractor"),Bno=o(" (Hubert model)"),Pno=l(),Ug=a("li"),Zre=a("strong"),Ino=o("layoutlmv2"),qno=o(" \u2014 "),FB=a("a"),Nno=o("LayoutLMv2FeatureExtractor"),jno=o(" (LayoutLMv2 model)"),Dno=l(),Jg=a("li"),ete=a("strong"),Gno=o("maskformer"),Ono=o(" \u2014 "),TB=a("a"),Vno=o("MaskFormerFeatureExtractor"),Xno=o(" (MaskFormer model)"),zno=l(),Yg=a("li"),ote=a("strong"),Qno=o("perceiver"),Wno=o(" \u2014 "),MB=a("a"),Hno=o("PerceiverFeatureExtractor"),Uno=o(" (Perceiver model)"),Jno=l(),Kg=a("li"),rte=a("strong"),Yno=o("poolformer"),Kno=o(" \u2014 "),EB=a("a"),Zno=o("PoolFormerFeatureExtractor"),eso=o(" (PoolFormer model)"),oso=l(),Zg=a("li"),tte=a("strong"),rso=o("regnet"),tso=o(" \u2014 "),CB=a("a"),aso=o("ConvNextFeatureExtractor"),nso=o(" (RegNet model)"),sso=l(),eh=a("li"),ate=a("strong"),lso=o("resnet"),iso=o(" \u2014 "),wB=a("a"),dso=o("ConvNextFeatureExtractor"),cso=o(" (ResNet model)"),fso=l(),oh=a("li"),nte=a("strong"),mso=o("segformer"),gso=o(" \u2014 "),AB=a("a"),hso=o("SegformerFeatureExtractor"),pso=o(" (SegFormer model)"),uso=l(),rh=a("li"),ste=a("strong"),_so=o("speech_to_text"),bso=o(" \u2014 "),yB=a("a"),vso=o("Speech2TextFeatureExtractor"),Fso=o(" (Speech2Text model)"),Tso=l(),th=a("li"),lte=a("strong"),Mso=o("swin"),Eso=o(" \u2014 "),LB=a("a"),Cso=o("ViTFeatureExtractor"),wso=o(" (Swin model)"),Aso=l(),ah=a("li"),ite=a("strong"),yso=o("van"),Lso=o(" \u2014 "),xB=a("a"),xso=o("ConvNextFeatureExtractor"),$so=o(" (VAN model)"),kso=l(),nh=a("li"),dte=a("strong"),Sso=o("vit"),Rso=o(" \u2014 "),$B=a("a"),Bso=o("ViTFeatureExtractor"),Pso=o(" (ViT model)"),Iso=l(),sh=a("li"),cte=a("strong"),qso=o("vit_mae"),Nso=o(" \u2014 "),kB=a("a"),jso=o("ViTFeatureExtractor"),Dso=o(" (ViTMAE model)"),Gso=l(),lh=a("li"),fte=a("strong"),Oso=o("wav2vec2"),Vso=o(" \u2014 "),SB=a("a"),Xso=o("Wav2Vec2FeatureExtractor"),zso=o(" (Wav2Vec2 model)"),Qso=l(),ih=a("li"),mte=a("strong"),Wso=o("yolos"),Hso=o(" \u2014 "),RB=a("a"),Uso=o("YolosFeatureExtractor"),Jso=o(" (YOLOS model)"),Yso=l(),F(dh.$$.fragment),Kso=l(),F(ch.$$.fragment),Zso=l(),fh=a("div"),F(IA.$$.fragment),elo=l(),gte=a("p"),olo=o("Register a new feature extractor for this class."),eBe=l(),gi=a("h2"),mh=a("a"),hte=a("span"),F(qA.$$.fragment),rlo=l(),pte=a("span"),tlo=o("AutoProcessor"),oBe=l(),wo=a("div"),F(NA.$$.fragment),alo=l(),jA=a("p"),nlo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=a("a"),slo=o("AutoProcessor.from_pretrained()"),llo=o(" class method."),ilo=l(),DA=a("p"),dlo=o("This class cannot be instantiated directly using "),ute=a("code"),clo=o("__init__()"),flo=o(" (throws an error)."),mlo=l(),ze=a("div"),F(GA.$$.fragment),glo=l(),_te=a("p"),hlo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),plo=l(),hi=a("p"),ulo=o("The processor class to instantiate is selected based on the "),bte=a("code"),_lo=o("model_type"),blo=o(` property of the config object (either
passed as an argument or loaded from `),vte=a("code"),vlo=o("pretrained_model_name_or_path"),Flo=o(" if possible):"),Tlo=l(),be=a("ul"),gh=a("li"),Fte=a("strong"),Mlo=o("clip"),Elo=o(" \u2014 "),PB=a("a"),Clo=o("CLIPProcessor"),wlo=o(" (CLIP model)"),Alo=l(),hh=a("li"),Tte=a("strong"),ylo=o("layoutlmv2"),Llo=o(" \u2014 "),IB=a("a"),xlo=o("LayoutLMv2Processor"),$lo=o(" (LayoutLMv2 model)"),klo=l(),ph=a("li"),Mte=a("strong"),Slo=o("layoutxlm"),Rlo=o(" \u2014 "),qB=a("a"),Blo=o("LayoutXLMProcessor"),Plo=o(" (LayoutXLM model)"),Ilo=l(),uh=a("li"),Ete=a("strong"),qlo=o("sew"),Nlo=o(" \u2014 "),NB=a("a"),jlo=o("Wav2Vec2Processor"),Dlo=o(" (SEW model)"),Glo=l(),_h=a("li"),Cte=a("strong"),Olo=o("sew-d"),Vlo=o(" \u2014 "),jB=a("a"),Xlo=o("Wav2Vec2Processor"),zlo=o(" (SEW-D model)"),Qlo=l(),bh=a("li"),wte=a("strong"),Wlo=o("speech_to_text"),Hlo=o(" \u2014 "),DB=a("a"),Ulo=o("Speech2TextProcessor"),Jlo=o(" (Speech2Text model)"),Ylo=l(),vh=a("li"),Ate=a("strong"),Klo=o("speech_to_text_2"),Zlo=o(" \u2014 "),GB=a("a"),eio=o("Speech2Text2Processor"),oio=o(" (Speech2Text2 model)"),rio=l(),Fh=a("li"),yte=a("strong"),tio=o("trocr"),aio=o(" \u2014 "),OB=a("a"),nio=o("TrOCRProcessor"),sio=o(" (TrOCR model)"),lio=l(),Th=a("li"),Lte=a("strong"),iio=o("unispeech"),dio=o(" \u2014 "),VB=a("a"),cio=o("Wav2Vec2Processor"),fio=o(" (UniSpeech model)"),mio=l(),Mh=a("li"),xte=a("strong"),gio=o("unispeech-sat"),hio=o(" \u2014 "),XB=a("a"),pio=o("Wav2Vec2Processor"),uio=o(" (UniSpeechSat model)"),_io=l(),Eh=a("li"),$te=a("strong"),bio=o("vilt"),vio=o(" \u2014 "),zB=a("a"),Fio=o("ViltProcessor"),Tio=o(" (ViLT model)"),Mio=l(),Ch=a("li"),kte=a("strong"),Eio=o("vision-text-dual-encoder"),Cio=o(" \u2014 "),QB=a("a"),wio=o("VisionTextDualEncoderProcessor"),Aio=o(" (VisionTextDualEncoder model)"),yio=l(),wh=a("li"),Ste=a("strong"),Lio=o("wav2vec2"),xio=o(" \u2014 "),WB=a("a"),$io=o("Wav2Vec2Processor"),kio=o(" (Wav2Vec2 model)"),Sio=l(),Ah=a("li"),Rte=a("strong"),Rio=o("wavlm"),Bio=o(" \u2014 "),HB=a("a"),Pio=o("Wav2Vec2Processor"),Iio=o(" (WavLM model)"),qio=l(),F(yh.$$.fragment),Nio=l(),F(Lh.$$.fragment),jio=l(),xh=a("div"),F(OA.$$.fragment),Dio=l(),Bte=a("p"),Gio=o("Register a new processor for this class."),rBe=l(),pi=a("h2"),$h=a("a"),Pte=a("span"),F(VA.$$.fragment),Oio=l(),Ite=a("span"),Vio=o("AutoModel"),tBe=l(),Ao=a("div"),F(XA.$$.fragment),Xio=l(),ui=a("p"),zio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UB=a("a"),Qio=o("from_pretrained()"),Wio=o(" class method or the "),JB=a("a"),Hio=o("from_config()"),Uio=o(` class
method.`),Jio=l(),zA=a("p"),Yio=o("This class cannot be instantiated directly using "),qte=a("code"),Kio=o("__init__()"),Zio=o(" (throws an error)."),edo=l(),Kr=a("div"),F(QA.$$.fragment),odo=l(),Nte=a("p"),rdo=o("Instantiates one of the base model classes of the library from a configuration."),tdo=l(),_i=a("p"),ado=o(`Note:
Loading a model from its configuration file does `),jte=a("strong"),ndo=o("not"),sdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YB=a("a"),ldo=o("from_pretrained()"),ido=o(" to load the model weights."),ddo=l(),F(kh.$$.fragment),cdo=l(),Qe=a("div"),F(WA.$$.fragment),fdo=l(),Dte=a("p"),mdo=o("Instantiate one of the base model classes of the library from a pretrained model."),gdo=l(),Ma=a("p"),hdo=o("The model class to instantiate is selected based on the "),Gte=a("code"),pdo=o("model_type"),udo=o(` property of the config object (either
passed as an argument or loaded from `),Ote=a("code"),_do=o("pretrained_model_name_or_path"),bdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=a("code"),vdo=o("pretrained_model_name_or_path"),Fdo=o(":"),Tdo=l(),x=a("ul"),Sh=a("li"),Xte=a("strong"),Mdo=o("albert"),Edo=o(" \u2014 "),KB=a("a"),Cdo=o("AlbertModel"),wdo=o(" (ALBERT model)"),Ado=l(),Rh=a("li"),zte=a("strong"),ydo=o("bart"),Ldo=o(" \u2014 "),ZB=a("a"),xdo=o("BartModel"),$do=o(" (BART model)"),kdo=l(),Bh=a("li"),Qte=a("strong"),Sdo=o("beit"),Rdo=o(" \u2014 "),eP=a("a"),Bdo=o("BeitModel"),Pdo=o(" (BEiT model)"),Ido=l(),Ph=a("li"),Wte=a("strong"),qdo=o("bert"),Ndo=o(" \u2014 "),oP=a("a"),jdo=o("BertModel"),Ddo=o(" (BERT model)"),Gdo=l(),Ih=a("li"),Hte=a("strong"),Odo=o("bert-generation"),Vdo=o(" \u2014 "),rP=a("a"),Xdo=o("BertGenerationEncoder"),zdo=o(" (Bert Generation model)"),Qdo=l(),qh=a("li"),Ute=a("strong"),Wdo=o("big_bird"),Hdo=o(" \u2014 "),tP=a("a"),Udo=o("BigBirdModel"),Jdo=o(" (BigBird model)"),Ydo=l(),Nh=a("li"),Jte=a("strong"),Kdo=o("bigbird_pegasus"),Zdo=o(" \u2014 "),aP=a("a"),eco=o("BigBirdPegasusModel"),oco=o(" (BigBirdPegasus model)"),rco=l(),jh=a("li"),Yte=a("strong"),tco=o("blenderbot"),aco=o(" \u2014 "),nP=a("a"),nco=o("BlenderbotModel"),sco=o(" (Blenderbot model)"),lco=l(),Dh=a("li"),Kte=a("strong"),ico=o("blenderbot-small"),dco=o(" \u2014 "),sP=a("a"),cco=o("BlenderbotSmallModel"),fco=o(" (BlenderbotSmall model)"),mco=l(),Gh=a("li"),Zte=a("strong"),gco=o("camembert"),hco=o(" \u2014 "),lP=a("a"),pco=o("CamembertModel"),uco=o(" (CamemBERT model)"),_co=l(),Oh=a("li"),eae=a("strong"),bco=o("canine"),vco=o(" \u2014 "),iP=a("a"),Fco=o("CanineModel"),Tco=o(" (Canine model)"),Mco=l(),Vh=a("li"),oae=a("strong"),Eco=o("clip"),Cco=o(" \u2014 "),dP=a("a"),wco=o("CLIPModel"),Aco=o(" (CLIP model)"),yco=l(),Xh=a("li"),rae=a("strong"),Lco=o("convbert"),xco=o(" \u2014 "),cP=a("a"),$co=o("ConvBertModel"),kco=o(" (ConvBERT model)"),Sco=l(),zh=a("li"),tae=a("strong"),Rco=o("convnext"),Bco=o(" \u2014 "),fP=a("a"),Pco=o("ConvNextModel"),Ico=o(" (ConvNext model)"),qco=l(),Qh=a("li"),aae=a("strong"),Nco=o("ctrl"),jco=o(" \u2014 "),mP=a("a"),Dco=o("CTRLModel"),Gco=o(" (CTRL model)"),Oco=l(),Wh=a("li"),nae=a("strong"),Vco=o("data2vec-audio"),Xco=o(" \u2014 "),gP=a("a"),zco=o("Data2VecAudioModel"),Qco=o(" (Data2VecAudio model)"),Wco=l(),Hh=a("li"),sae=a("strong"),Hco=o("data2vec-text"),Uco=o(" \u2014 "),hP=a("a"),Jco=o("Data2VecTextModel"),Yco=o(" (Data2VecText model)"),Kco=l(),Uh=a("li"),lae=a("strong"),Zco=o("data2vec-vision"),efo=o(" \u2014 "),pP=a("a"),ofo=o("Data2VecVisionModel"),rfo=o(" (Data2VecVision model)"),tfo=l(),Jh=a("li"),iae=a("strong"),afo=o("deberta"),nfo=o(" \u2014 "),uP=a("a"),sfo=o("DebertaModel"),lfo=o(" (DeBERTa model)"),ifo=l(),Yh=a("li"),dae=a("strong"),dfo=o("deberta-v2"),cfo=o(" \u2014 "),_P=a("a"),ffo=o("DebertaV2Model"),mfo=o(" (DeBERTa-v2 model)"),gfo=l(),Kh=a("li"),cae=a("strong"),hfo=o("decision_transformer"),pfo=o(" \u2014 "),bP=a("a"),ufo=o("DecisionTransformerModel"),_fo=o(" (Decision Transformer model)"),bfo=l(),Zh=a("li"),fae=a("strong"),vfo=o("deit"),Ffo=o(" \u2014 "),vP=a("a"),Tfo=o("DeiTModel"),Mfo=o(" (DeiT model)"),Efo=l(),ep=a("li"),mae=a("strong"),Cfo=o("detr"),wfo=o(" \u2014 "),FP=a("a"),Afo=o("DetrModel"),yfo=o(" (DETR model)"),Lfo=l(),op=a("li"),gae=a("strong"),xfo=o("distilbert"),$fo=o(" \u2014 "),TP=a("a"),kfo=o("DistilBertModel"),Sfo=o(" (DistilBERT model)"),Rfo=l(),rp=a("li"),hae=a("strong"),Bfo=o("dpr"),Pfo=o(" \u2014 "),MP=a("a"),Ifo=o("DPRQuestionEncoder"),qfo=o(" (DPR model)"),Nfo=l(),tp=a("li"),pae=a("strong"),jfo=o("dpt"),Dfo=o(" \u2014 "),EP=a("a"),Gfo=o("DPTModel"),Ofo=o(" (DPT model)"),Vfo=l(),ap=a("li"),uae=a("strong"),Xfo=o("electra"),zfo=o(" \u2014 "),CP=a("a"),Qfo=o("ElectraModel"),Wfo=o(" (ELECTRA model)"),Hfo=l(),np=a("li"),_ae=a("strong"),Ufo=o("flaubert"),Jfo=o(" \u2014 "),wP=a("a"),Yfo=o("FlaubertModel"),Kfo=o(" (FlauBERT model)"),Zfo=l(),sp=a("li"),bae=a("strong"),emo=o("fnet"),omo=o(" \u2014 "),AP=a("a"),rmo=o("FNetModel"),tmo=o(" (FNet model)"),amo=l(),lp=a("li"),vae=a("strong"),nmo=o("fsmt"),smo=o(" \u2014 "),yP=a("a"),lmo=o("FSMTModel"),imo=o(" (FairSeq Machine-Translation model)"),dmo=l(),ys=a("li"),Fae=a("strong"),cmo=o("funnel"),fmo=o(" \u2014 "),LP=a("a"),mmo=o("FunnelModel"),gmo=o(" or "),xP=a("a"),hmo=o("FunnelBaseModel"),pmo=o(" (Funnel Transformer model)"),umo=l(),ip=a("li"),Tae=a("strong"),_mo=o("glpn"),bmo=o(" \u2014 "),$P=a("a"),vmo=o("GLPNModel"),Fmo=o(" (GLPN model)"),Tmo=l(),dp=a("li"),Mae=a("strong"),Mmo=o("gpt2"),Emo=o(" \u2014 "),kP=a("a"),Cmo=o("GPT2Model"),wmo=o(" (OpenAI GPT-2 model)"),Amo=l(),cp=a("li"),Eae=a("strong"),ymo=o("gpt_neo"),Lmo=o(" \u2014 "),SP=a("a"),xmo=o("GPTNeoModel"),$mo=o(" (GPT Neo model)"),kmo=l(),fp=a("li"),Cae=a("strong"),Smo=o("gptj"),Rmo=o(" \u2014 "),RP=a("a"),Bmo=o("GPTJModel"),Pmo=o(" (GPT-J model)"),Imo=l(),mp=a("li"),wae=a("strong"),qmo=o("hubert"),Nmo=o(" \u2014 "),BP=a("a"),jmo=o("HubertModel"),Dmo=o(" (Hubert model)"),Gmo=l(),gp=a("li"),Aae=a("strong"),Omo=o("ibert"),Vmo=o(" \u2014 "),PP=a("a"),Xmo=o("IBertModel"),zmo=o(" (I-BERT model)"),Qmo=l(),hp=a("li"),yae=a("strong"),Wmo=o("imagegpt"),Hmo=o(" \u2014 "),IP=a("a"),Umo=o("ImageGPTModel"),Jmo=o(" (ImageGPT model)"),Ymo=l(),pp=a("li"),Lae=a("strong"),Kmo=o("layoutlm"),Zmo=o(" \u2014 "),qP=a("a"),ego=o("LayoutLMModel"),ogo=o(" (LayoutLM model)"),rgo=l(),up=a("li"),xae=a("strong"),tgo=o("layoutlmv2"),ago=o(" \u2014 "),NP=a("a"),ngo=o("LayoutLMv2Model"),sgo=o(" (LayoutLMv2 model)"),lgo=l(),_p=a("li"),$ae=a("strong"),igo=o("led"),dgo=o(" \u2014 "),jP=a("a"),cgo=o("LEDModel"),fgo=o(" (LED model)"),mgo=l(),bp=a("li"),kae=a("strong"),ggo=o("longformer"),hgo=o(" \u2014 "),DP=a("a"),pgo=o("LongformerModel"),ugo=o(" (Longformer model)"),_go=l(),vp=a("li"),Sae=a("strong"),bgo=o("luke"),vgo=o(" \u2014 "),GP=a("a"),Fgo=o("LukeModel"),Tgo=o(" (LUKE model)"),Mgo=l(),Fp=a("li"),Rae=a("strong"),Ego=o("lxmert"),Cgo=o(" \u2014 "),OP=a("a"),wgo=o("LxmertModel"),Ago=o(" (LXMERT model)"),ygo=l(),Tp=a("li"),Bae=a("strong"),Lgo=o("m2m_100"),xgo=o(" \u2014 "),VP=a("a"),$go=o("M2M100Model"),kgo=o(" (M2M100 model)"),Sgo=l(),Mp=a("li"),Pae=a("strong"),Rgo=o("marian"),Bgo=o(" \u2014 "),XP=a("a"),Pgo=o("MarianModel"),Igo=o(" (Marian model)"),qgo=l(),Ep=a("li"),Iae=a("strong"),Ngo=o("maskformer"),jgo=o(" \u2014 "),zP=a("a"),Dgo=o("MaskFormerModel"),Ggo=o(" (MaskFormer model)"),Ogo=l(),Cp=a("li"),qae=a("strong"),Vgo=o("mbart"),Xgo=o(" \u2014 "),QP=a("a"),zgo=o("MBartModel"),Qgo=o(" (mBART model)"),Wgo=l(),wp=a("li"),Nae=a("strong"),Hgo=o("megatron-bert"),Ugo=o(" \u2014 "),WP=a("a"),Jgo=o("MegatronBertModel"),Ygo=o(" (MegatronBert model)"),Kgo=l(),Ap=a("li"),jae=a("strong"),Zgo=o("mobilebert"),eho=o(" \u2014 "),HP=a("a"),oho=o("MobileBertModel"),rho=o(" (MobileBERT model)"),tho=l(),yp=a("li"),Dae=a("strong"),aho=o("mpnet"),nho=o(" \u2014 "),UP=a("a"),sho=o("MPNetModel"),lho=o(" (MPNet model)"),iho=l(),Lp=a("li"),Gae=a("strong"),dho=o("mt5"),cho=o(" \u2014 "),JP=a("a"),fho=o("MT5Model"),mho=o(" (mT5 model)"),gho=l(),xp=a("li"),Oae=a("strong"),hho=o("nystromformer"),pho=o(" \u2014 "),YP=a("a"),uho=o("NystromformerModel"),_ho=o(" (Nystromformer model)"),bho=l(),$p=a("li"),Vae=a("strong"),vho=o("openai-gpt"),Fho=o(" \u2014 "),KP=a("a"),Tho=o("OpenAIGPTModel"),Mho=o(" (OpenAI GPT model)"),Eho=l(),kp=a("li"),Xae=a("strong"),Cho=o("pegasus"),who=o(" \u2014 "),ZP=a("a"),Aho=o("PegasusModel"),yho=o(" (Pegasus model)"),Lho=l(),Sp=a("li"),zae=a("strong"),xho=o("perceiver"),$ho=o(" \u2014 "),eI=a("a"),kho=o("PerceiverModel"),Sho=o(" (Perceiver model)"),Rho=l(),Rp=a("li"),Qae=a("strong"),Bho=o("plbart"),Pho=o(" \u2014 "),oI=a("a"),Iho=o("PLBartModel"),qho=o(" (PLBart model)"),Nho=l(),Bp=a("li"),Wae=a("strong"),jho=o("poolformer"),Dho=o(" \u2014 "),rI=a("a"),Gho=o("PoolFormerModel"),Oho=o(" (PoolFormer model)"),Vho=l(),Pp=a("li"),Hae=a("strong"),Xho=o("prophetnet"),zho=o(" \u2014 "),tI=a("a"),Qho=o("ProphetNetModel"),Who=o(" (ProphetNet model)"),Hho=l(),Ip=a("li"),Uae=a("strong"),Uho=o("qdqbert"),Jho=o(" \u2014 "),aI=a("a"),Yho=o("QDQBertModel"),Kho=o(" (QDQBert model)"),Zho=l(),qp=a("li"),Jae=a("strong"),epo=o("reformer"),opo=o(" \u2014 "),nI=a("a"),rpo=o("ReformerModel"),tpo=o(" (Reformer model)"),apo=l(),Np=a("li"),Yae=a("strong"),npo=o("regnet"),spo=o(" \u2014 "),sI=a("a"),lpo=o("RegNetModel"),ipo=o(" (RegNet model)"),dpo=l(),jp=a("li"),Kae=a("strong"),cpo=o("rembert"),fpo=o(" \u2014 "),lI=a("a"),mpo=o("RemBertModel"),gpo=o(" (RemBERT model)"),hpo=l(),Dp=a("li"),Zae=a("strong"),ppo=o("resnet"),upo=o(" \u2014 "),iI=a("a"),_po=o("ResNetModel"),bpo=o(" (ResNet model)"),vpo=l(),Gp=a("li"),ene=a("strong"),Fpo=o("retribert"),Tpo=o(" \u2014 "),dI=a("a"),Mpo=o("RetriBertModel"),Epo=o(" (RetriBERT model)"),Cpo=l(),Op=a("li"),one=a("strong"),wpo=o("roberta"),Apo=o(" \u2014 "),cI=a("a"),ypo=o("RobertaModel"),Lpo=o(" (RoBERTa model)"),xpo=l(),Vp=a("li"),rne=a("strong"),$po=o("roformer"),kpo=o(" \u2014 "),fI=a("a"),Spo=o("RoFormerModel"),Rpo=o(" (RoFormer model)"),Bpo=l(),Xp=a("li"),tne=a("strong"),Ppo=o("segformer"),Ipo=o(" \u2014 "),mI=a("a"),qpo=o("SegformerModel"),Npo=o(" (SegFormer model)"),jpo=l(),zp=a("li"),ane=a("strong"),Dpo=o("sew"),Gpo=o(" \u2014 "),gI=a("a"),Opo=o("SEWModel"),Vpo=o(" (SEW model)"),Xpo=l(),Qp=a("li"),nne=a("strong"),zpo=o("sew-d"),Qpo=o(" \u2014 "),hI=a("a"),Wpo=o("SEWDModel"),Hpo=o(" (SEW-D model)"),Upo=l(),Wp=a("li"),sne=a("strong"),Jpo=o("speech_to_text"),Ypo=o(" \u2014 "),pI=a("a"),Kpo=o("Speech2TextModel"),Zpo=o(" (Speech2Text model)"),euo=l(),Hp=a("li"),lne=a("strong"),ouo=o("splinter"),ruo=o(" \u2014 "),uI=a("a"),tuo=o("SplinterModel"),auo=o(" (Splinter model)"),nuo=l(),Up=a("li"),ine=a("strong"),suo=o("squeezebert"),luo=o(" \u2014 "),_I=a("a"),iuo=o("SqueezeBertModel"),duo=o(" (SqueezeBERT model)"),cuo=l(),Jp=a("li"),dne=a("strong"),fuo=o("swin"),muo=o(" \u2014 "),bI=a("a"),guo=o("SwinModel"),huo=o(" (Swin model)"),puo=l(),Yp=a("li"),cne=a("strong"),uuo=o("t5"),_uo=o(" \u2014 "),vI=a("a"),buo=o("T5Model"),vuo=o(" (T5 model)"),Fuo=l(),Kp=a("li"),fne=a("strong"),Tuo=o("tapas"),Muo=o(" \u2014 "),FI=a("a"),Euo=o("TapasModel"),Cuo=o(" (TAPAS model)"),wuo=l(),Zp=a("li"),mne=a("strong"),Auo=o("transfo-xl"),yuo=o(" \u2014 "),TI=a("a"),Luo=o("TransfoXLModel"),xuo=o(" (Transformer-XL model)"),$uo=l(),eu=a("li"),gne=a("strong"),kuo=o("unispeech"),Suo=o(" \u2014 "),MI=a("a"),Ruo=o("UniSpeechModel"),Buo=o(" (UniSpeech model)"),Puo=l(),ou=a("li"),hne=a("strong"),Iuo=o("unispeech-sat"),quo=o(" \u2014 "),EI=a("a"),Nuo=o("UniSpeechSatModel"),juo=o(" (UniSpeechSat model)"),Duo=l(),ru=a("li"),pne=a("strong"),Guo=o("van"),Ouo=o(" \u2014 "),CI=a("a"),Vuo=o("VanModel"),Xuo=o(" (VAN model)"),zuo=l(),tu=a("li"),une=a("strong"),Quo=o("vilt"),Wuo=o(" \u2014 "),wI=a("a"),Huo=o("ViltModel"),Uuo=o(" (ViLT model)"),Juo=l(),au=a("li"),_ne=a("strong"),Yuo=o("vision-text-dual-encoder"),Kuo=o(" \u2014 "),AI=a("a"),Zuo=o("VisionTextDualEncoderModel"),e_o=o(" (VisionTextDualEncoder model)"),o_o=l(),nu=a("li"),bne=a("strong"),r_o=o("visual_bert"),t_o=o(" \u2014 "),yI=a("a"),a_o=o("VisualBertModel"),n_o=o(" (VisualBert model)"),s_o=l(),su=a("li"),vne=a("strong"),l_o=o("vit"),i_o=o(" \u2014 "),LI=a("a"),d_o=o("ViTModel"),c_o=o(" (ViT model)"),f_o=l(),lu=a("li"),Fne=a("strong"),m_o=o("vit_mae"),g_o=o(" \u2014 "),xI=a("a"),h_o=o("ViTMAEModel"),p_o=o(" (ViTMAE model)"),u_o=l(),iu=a("li"),Tne=a("strong"),__o=o("wav2vec2"),b_o=o(" \u2014 "),$I=a("a"),v_o=o("Wav2Vec2Model"),F_o=o(" (Wav2Vec2 model)"),T_o=l(),du=a("li"),Mne=a("strong"),M_o=o("wavlm"),E_o=o(" \u2014 "),kI=a("a"),C_o=o("WavLMModel"),w_o=o(" (WavLM model)"),A_o=l(),cu=a("li"),Ene=a("strong"),y_o=o("xglm"),L_o=o(" \u2014 "),SI=a("a"),x_o=o("XGLMModel"),$_o=o(" (XGLM model)"),k_o=l(),fu=a("li"),Cne=a("strong"),S_o=o("xlm"),R_o=o(" \u2014 "),RI=a("a"),B_o=o("XLMModel"),P_o=o(" (XLM model)"),I_o=l(),mu=a("li"),wne=a("strong"),q_o=o("xlm-prophetnet"),N_o=o(" \u2014 "),BI=a("a"),j_o=o("XLMProphetNetModel"),D_o=o(" (XLMProphetNet model)"),G_o=l(),gu=a("li"),Ane=a("strong"),O_o=o("xlm-roberta"),V_o=o(" \u2014 "),PI=a("a"),X_o=o("XLMRobertaModel"),z_o=o(" (XLM-RoBERTa model)"),Q_o=l(),hu=a("li"),yne=a("strong"),W_o=o("xlm-roberta-xl"),H_o=o(" \u2014 "),II=a("a"),U_o=o("XLMRobertaXLModel"),J_o=o(" (XLM-RoBERTa-XL model)"),Y_o=l(),pu=a("li"),Lne=a("strong"),K_o=o("xlnet"),Z_o=o(" \u2014 "),qI=a("a"),e1o=o("XLNetModel"),o1o=o(" (XLNet model)"),r1o=l(),uu=a("li"),xne=a("strong"),t1o=o("yolos"),a1o=o(" \u2014 "),NI=a("a"),n1o=o("YolosModel"),s1o=o(" (YOLOS model)"),l1o=l(),_u=a("li"),$ne=a("strong"),i1o=o("yoso"),d1o=o(" \u2014 "),jI=a("a"),c1o=o("YosoModel"),f1o=o(" (YOSO model)"),m1o=l(),bu=a("p"),g1o=o("The model is set in evaluation mode by default using "),kne=a("code"),h1o=o("model.eval()"),p1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=a("code"),u1o=o("model.train()"),_1o=l(),F(vu.$$.fragment),aBe=l(),bi=a("h2"),Fu=a("a"),Rne=a("span"),F(HA.$$.fragment),b1o=l(),Bne=a("span"),v1o=o("AutoModelForPreTraining"),nBe=l(),yo=a("div"),F(UA.$$.fragment),F1o=l(),vi=a("p"),T1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DI=a("a"),M1o=o("from_pretrained()"),E1o=o(" class method or the "),GI=a("a"),C1o=o("from_config()"),w1o=o(` class
method.`),A1o=l(),JA=a("p"),y1o=o("This class cannot be instantiated directly using "),Pne=a("code"),L1o=o("__init__()"),x1o=o(" (throws an error)."),$1o=l(),Zr=a("div"),F(YA.$$.fragment),k1o=l(),Ine=a("p"),S1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),R1o=l(),Fi=a("p"),B1o=o(`Note:
Loading a model from its configuration file does `),qne=a("strong"),P1o=o("not"),I1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=a("a"),q1o=o("from_pretrained()"),N1o=o(" to load the model weights."),j1o=l(),F(Tu.$$.fragment),D1o=l(),We=a("div"),F(KA.$$.fragment),G1o=l(),Nne=a("p"),O1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),V1o=l(),Ea=a("p"),X1o=o("The model class to instantiate is selected based on the "),jne=a("code"),z1o=o("model_type"),Q1o=o(` property of the config object (either
passed as an argument or loaded from `),Dne=a("code"),W1o=o("pretrained_model_name_or_path"),H1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=a("code"),U1o=o("pretrained_model_name_or_path"),J1o=o(":"),Y1o=l(),G=a("ul"),Mu=a("li"),One=a("strong"),K1o=o("albert"),Z1o=o(" \u2014 "),VI=a("a"),ebo=o("AlbertForPreTraining"),obo=o(" (ALBERT model)"),rbo=l(),Eu=a("li"),Vne=a("strong"),tbo=o("bart"),abo=o(" \u2014 "),XI=a("a"),nbo=o("BartForConditionalGeneration"),sbo=o(" (BART model)"),lbo=l(),Cu=a("li"),Xne=a("strong"),ibo=o("bert"),dbo=o(" \u2014 "),zI=a("a"),cbo=o("BertForPreTraining"),fbo=o(" (BERT model)"),mbo=l(),wu=a("li"),zne=a("strong"),gbo=o("big_bird"),hbo=o(" \u2014 "),QI=a("a"),pbo=o("BigBirdForPreTraining"),ubo=o(" (BigBird model)"),_bo=l(),Au=a("li"),Qne=a("strong"),bbo=o("camembert"),vbo=o(" \u2014 "),WI=a("a"),Fbo=o("CamembertForMaskedLM"),Tbo=o(" (CamemBERT model)"),Mbo=l(),yu=a("li"),Wne=a("strong"),Ebo=o("ctrl"),Cbo=o(" \u2014 "),HI=a("a"),wbo=o("CTRLLMHeadModel"),Abo=o(" (CTRL model)"),ybo=l(),Lu=a("li"),Hne=a("strong"),Lbo=o("data2vec-text"),xbo=o(" \u2014 "),UI=a("a"),$bo=o("Data2VecTextForMaskedLM"),kbo=o(" (Data2VecText model)"),Sbo=l(),xu=a("li"),Une=a("strong"),Rbo=o("deberta"),Bbo=o(" \u2014 "),JI=a("a"),Pbo=o("DebertaForMaskedLM"),Ibo=o(" (DeBERTa model)"),qbo=l(),$u=a("li"),Jne=a("strong"),Nbo=o("deberta-v2"),jbo=o(" \u2014 "),YI=a("a"),Dbo=o("DebertaV2ForMaskedLM"),Gbo=o(" (DeBERTa-v2 model)"),Obo=l(),ku=a("li"),Yne=a("strong"),Vbo=o("distilbert"),Xbo=o(" \u2014 "),KI=a("a"),zbo=o("DistilBertForMaskedLM"),Qbo=o(" (DistilBERT model)"),Wbo=l(),Su=a("li"),Kne=a("strong"),Hbo=o("electra"),Ubo=o(" \u2014 "),ZI=a("a"),Jbo=o("ElectraForPreTraining"),Ybo=o(" (ELECTRA model)"),Kbo=l(),Ru=a("li"),Zne=a("strong"),Zbo=o("flaubert"),e4o=o(" \u2014 "),eq=a("a"),o4o=o("FlaubertWithLMHeadModel"),r4o=o(" (FlauBERT model)"),t4o=l(),Bu=a("li"),ese=a("strong"),a4o=o("fnet"),n4o=o(" \u2014 "),oq=a("a"),s4o=o("FNetForPreTraining"),l4o=o(" (FNet model)"),i4o=l(),Pu=a("li"),ose=a("strong"),d4o=o("fsmt"),c4o=o(" \u2014 "),rq=a("a"),f4o=o("FSMTForConditionalGeneration"),m4o=o(" (FairSeq Machine-Translation model)"),g4o=l(),Iu=a("li"),rse=a("strong"),h4o=o("funnel"),p4o=o(" \u2014 "),tq=a("a"),u4o=o("FunnelForPreTraining"),_4o=o(" (Funnel Transformer model)"),b4o=l(),qu=a("li"),tse=a("strong"),v4o=o("gpt2"),F4o=o(" \u2014 "),aq=a("a"),T4o=o("GPT2LMHeadModel"),M4o=o(" (OpenAI GPT-2 model)"),E4o=l(),Nu=a("li"),ase=a("strong"),C4o=o("ibert"),w4o=o(" \u2014 "),nq=a("a"),A4o=o("IBertForMaskedLM"),y4o=o(" (I-BERT model)"),L4o=l(),ju=a("li"),nse=a("strong"),x4o=o("layoutlm"),$4o=o(" \u2014 "),sq=a("a"),k4o=o("LayoutLMForMaskedLM"),S4o=o(" (LayoutLM model)"),R4o=l(),Du=a("li"),sse=a("strong"),B4o=o("longformer"),P4o=o(" \u2014 "),lq=a("a"),I4o=o("LongformerForMaskedLM"),q4o=o(" (Longformer model)"),N4o=l(),Gu=a("li"),lse=a("strong"),j4o=o("lxmert"),D4o=o(" \u2014 "),iq=a("a"),G4o=o("LxmertForPreTraining"),O4o=o(" (LXMERT model)"),V4o=l(),Ou=a("li"),ise=a("strong"),X4o=o("megatron-bert"),z4o=o(" \u2014 "),dq=a("a"),Q4o=o("MegatronBertForPreTraining"),W4o=o(" (MegatronBert model)"),H4o=l(),Vu=a("li"),dse=a("strong"),U4o=o("mobilebert"),J4o=o(" \u2014 "),cq=a("a"),Y4o=o("MobileBertForPreTraining"),K4o=o(" (MobileBERT model)"),Z4o=l(),Xu=a("li"),cse=a("strong"),e2o=o("mpnet"),o2o=o(" \u2014 "),fq=a("a"),r2o=o("MPNetForMaskedLM"),t2o=o(" (MPNet model)"),a2o=l(),zu=a("li"),fse=a("strong"),n2o=o("openai-gpt"),s2o=o(" \u2014 "),mq=a("a"),l2o=o("OpenAIGPTLMHeadModel"),i2o=o(" (OpenAI GPT model)"),d2o=l(),Qu=a("li"),mse=a("strong"),c2o=o("retribert"),f2o=o(" \u2014 "),gq=a("a"),m2o=o("RetriBertModel"),g2o=o(" (RetriBERT model)"),h2o=l(),Wu=a("li"),gse=a("strong"),p2o=o("roberta"),u2o=o(" \u2014 "),hq=a("a"),_2o=o("RobertaForMaskedLM"),b2o=o(" (RoBERTa model)"),v2o=l(),Hu=a("li"),hse=a("strong"),F2o=o("squeezebert"),T2o=o(" \u2014 "),pq=a("a"),M2o=o("SqueezeBertForMaskedLM"),E2o=o(" (SqueezeBERT model)"),C2o=l(),Uu=a("li"),pse=a("strong"),w2o=o("t5"),A2o=o(" \u2014 "),uq=a("a"),y2o=o("T5ForConditionalGeneration"),L2o=o(" (T5 model)"),x2o=l(),Ju=a("li"),use=a("strong"),$2o=o("tapas"),k2o=o(" \u2014 "),_q=a("a"),S2o=o("TapasForMaskedLM"),R2o=o(" (TAPAS model)"),B2o=l(),Yu=a("li"),_se=a("strong"),P2o=o("transfo-xl"),I2o=o(" \u2014 "),bq=a("a"),q2o=o("TransfoXLLMHeadModel"),N2o=o(" (Transformer-XL model)"),j2o=l(),Ku=a("li"),bse=a("strong"),D2o=o("unispeech"),G2o=o(" \u2014 "),vq=a("a"),O2o=o("UniSpeechForPreTraining"),V2o=o(" (UniSpeech model)"),X2o=l(),Zu=a("li"),vse=a("strong"),z2o=o("unispeech-sat"),Q2o=o(" \u2014 "),Fq=a("a"),W2o=o("UniSpeechSatForPreTraining"),H2o=o(" (UniSpeechSat model)"),U2o=l(),e_=a("li"),Fse=a("strong"),J2o=o("visual_bert"),Y2o=o(" \u2014 "),Tq=a("a"),K2o=o("VisualBertForPreTraining"),Z2o=o(" (VisualBert model)"),e5o=l(),o_=a("li"),Tse=a("strong"),o5o=o("vit_mae"),r5o=o(" \u2014 "),Mq=a("a"),t5o=o("ViTMAEForPreTraining"),a5o=o(" (ViTMAE model)"),n5o=l(),r_=a("li"),Mse=a("strong"),s5o=o("wav2vec2"),l5o=o(" \u2014 "),Eq=a("a"),i5o=o("Wav2Vec2ForPreTraining"),d5o=o(" (Wav2Vec2 model)"),c5o=l(),t_=a("li"),Ese=a("strong"),f5o=o("xlm"),m5o=o(" \u2014 "),Cq=a("a"),g5o=o("XLMWithLMHeadModel"),h5o=o(" (XLM model)"),p5o=l(),a_=a("li"),Cse=a("strong"),u5o=o("xlm-roberta"),_5o=o(" \u2014 "),wq=a("a"),b5o=o("XLMRobertaForMaskedLM"),v5o=o(" (XLM-RoBERTa model)"),F5o=l(),n_=a("li"),wse=a("strong"),T5o=o("xlm-roberta-xl"),M5o=o(" \u2014 "),Aq=a("a"),E5o=o("XLMRobertaXLForMaskedLM"),C5o=o(" (XLM-RoBERTa-XL model)"),w5o=l(),s_=a("li"),Ase=a("strong"),A5o=o("xlnet"),y5o=o(" \u2014 "),yq=a("a"),L5o=o("XLNetLMHeadModel"),x5o=o(" (XLNet model)"),$5o=l(),l_=a("p"),k5o=o("The model is set in evaluation mode by default using "),yse=a("code"),S5o=o("model.eval()"),R5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=a("code"),B5o=o("model.train()"),P5o=l(),F(i_.$$.fragment),sBe=l(),Ti=a("h2"),d_=a("a"),xse=a("span"),F(ZA.$$.fragment),I5o=l(),$se=a("span"),q5o=o("AutoModelForCausalLM"),lBe=l(),Lo=a("div"),F(e6.$$.fragment),N5o=l(),Mi=a("p"),j5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lq=a("a"),D5o=o("from_pretrained()"),G5o=o(" class method or the "),xq=a("a"),O5o=o("from_config()"),V5o=o(` class
method.`),X5o=l(),o6=a("p"),z5o=o("This class cannot be instantiated directly using "),kse=a("code"),Q5o=o("__init__()"),W5o=o(" (throws an error)."),H5o=l(),et=a("div"),F(r6.$$.fragment),U5o=l(),Sse=a("p"),J5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Y5o=l(),Ei=a("p"),K5o=o(`Note:
Loading a model from its configuration file does `),Rse=a("strong"),Z5o=o("not"),evo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),ovo=o("from_pretrained()"),rvo=o(" to load the model weights."),tvo=l(),F(c_.$$.fragment),avo=l(),He=a("div"),F(t6.$$.fragment),nvo=l(),Bse=a("p"),svo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lvo=l(),Ca=a("p"),ivo=o("The model class to instantiate is selected based on the "),Pse=a("code"),dvo=o("model_type"),cvo=o(` property of the config object (either
passed as an argument or loaded from `),Ise=a("code"),fvo=o("pretrained_model_name_or_path"),mvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=a("code"),gvo=o("pretrained_model_name_or_path"),hvo=o(":"),pvo=l(),z=a("ul"),f_=a("li"),Nse=a("strong"),uvo=o("bart"),_vo=o(" \u2014 "),kq=a("a"),bvo=o("BartForCausalLM"),vvo=o(" (BART model)"),Fvo=l(),m_=a("li"),jse=a("strong"),Tvo=o("bert"),Mvo=o(" \u2014 "),Sq=a("a"),Evo=o("BertLMHeadModel"),Cvo=o(" (BERT model)"),wvo=l(),g_=a("li"),Dse=a("strong"),Avo=o("bert-generation"),yvo=o(" \u2014 "),Rq=a("a"),Lvo=o("BertGenerationDecoder"),xvo=o(" (Bert Generation model)"),$vo=l(),h_=a("li"),Gse=a("strong"),kvo=o("big_bird"),Svo=o(" \u2014 "),Bq=a("a"),Rvo=o("BigBirdForCausalLM"),Bvo=o(" (BigBird model)"),Pvo=l(),p_=a("li"),Ose=a("strong"),Ivo=o("bigbird_pegasus"),qvo=o(" \u2014 "),Pq=a("a"),Nvo=o("BigBirdPegasusForCausalLM"),jvo=o(" (BigBirdPegasus model)"),Dvo=l(),u_=a("li"),Vse=a("strong"),Gvo=o("blenderbot"),Ovo=o(" \u2014 "),Iq=a("a"),Vvo=o("BlenderbotForCausalLM"),Xvo=o(" (Blenderbot model)"),zvo=l(),__=a("li"),Xse=a("strong"),Qvo=o("blenderbot-small"),Wvo=o(" \u2014 "),qq=a("a"),Hvo=o("BlenderbotSmallForCausalLM"),Uvo=o(" (BlenderbotSmall model)"),Jvo=l(),b_=a("li"),zse=a("strong"),Yvo=o("camembert"),Kvo=o(" \u2014 "),Nq=a("a"),Zvo=o("CamembertForCausalLM"),eFo=o(" (CamemBERT model)"),oFo=l(),v_=a("li"),Qse=a("strong"),rFo=o("ctrl"),tFo=o(" \u2014 "),jq=a("a"),aFo=o("CTRLLMHeadModel"),nFo=o(" (CTRL model)"),sFo=l(),F_=a("li"),Wse=a("strong"),lFo=o("data2vec-text"),iFo=o(" \u2014 "),Dq=a("a"),dFo=o("Data2VecTextForCausalLM"),cFo=o(" (Data2VecText model)"),fFo=l(),T_=a("li"),Hse=a("strong"),mFo=o("electra"),gFo=o(" \u2014 "),Gq=a("a"),hFo=o("ElectraForCausalLM"),pFo=o(" (ELECTRA model)"),uFo=l(),M_=a("li"),Use=a("strong"),_Fo=o("gpt2"),bFo=o(" \u2014 "),Oq=a("a"),vFo=o("GPT2LMHeadModel"),FFo=o(" (OpenAI GPT-2 model)"),TFo=l(),E_=a("li"),Jse=a("strong"),MFo=o("gpt_neo"),EFo=o(" \u2014 "),Vq=a("a"),CFo=o("GPTNeoForCausalLM"),wFo=o(" (GPT Neo model)"),AFo=l(),C_=a("li"),Yse=a("strong"),yFo=o("gptj"),LFo=o(" \u2014 "),Xq=a("a"),xFo=o("GPTJForCausalLM"),$Fo=o(" (GPT-J model)"),kFo=l(),w_=a("li"),Kse=a("strong"),SFo=o("marian"),RFo=o(" \u2014 "),zq=a("a"),BFo=o("MarianForCausalLM"),PFo=o(" (Marian model)"),IFo=l(),A_=a("li"),Zse=a("strong"),qFo=o("mbart"),NFo=o(" \u2014 "),Qq=a("a"),jFo=o("MBartForCausalLM"),DFo=o(" (mBART model)"),GFo=l(),y_=a("li"),ele=a("strong"),OFo=o("megatron-bert"),VFo=o(" \u2014 "),Wq=a("a"),XFo=o("MegatronBertForCausalLM"),zFo=o(" (MegatronBert model)"),QFo=l(),L_=a("li"),ole=a("strong"),WFo=o("openai-gpt"),HFo=o(" \u2014 "),Hq=a("a"),UFo=o("OpenAIGPTLMHeadModel"),JFo=o(" (OpenAI GPT model)"),YFo=l(),x_=a("li"),rle=a("strong"),KFo=o("pegasus"),ZFo=o(" \u2014 "),Uq=a("a"),e0o=o("PegasusForCausalLM"),o0o=o(" (Pegasus model)"),r0o=l(),$_=a("li"),tle=a("strong"),t0o=o("plbart"),a0o=o(" \u2014 "),Jq=a("a"),n0o=o("PLBartForCausalLM"),s0o=o(" (PLBart model)"),l0o=l(),k_=a("li"),ale=a("strong"),i0o=o("prophetnet"),d0o=o(" \u2014 "),Yq=a("a"),c0o=o("ProphetNetForCausalLM"),f0o=o(" (ProphetNet model)"),m0o=l(),S_=a("li"),nle=a("strong"),g0o=o("qdqbert"),h0o=o(" \u2014 "),Kq=a("a"),p0o=o("QDQBertLMHeadModel"),u0o=o(" (QDQBert model)"),_0o=l(),R_=a("li"),sle=a("strong"),b0o=o("reformer"),v0o=o(" \u2014 "),Zq=a("a"),F0o=o("ReformerModelWithLMHead"),T0o=o(" (Reformer model)"),M0o=l(),B_=a("li"),lle=a("strong"),E0o=o("rembert"),C0o=o(" \u2014 "),eN=a("a"),w0o=o("RemBertForCausalLM"),A0o=o(" (RemBERT model)"),y0o=l(),P_=a("li"),ile=a("strong"),L0o=o("roberta"),x0o=o(" \u2014 "),oN=a("a"),$0o=o("RobertaForCausalLM"),k0o=o(" (RoBERTa model)"),S0o=l(),I_=a("li"),dle=a("strong"),R0o=o("roformer"),B0o=o(" \u2014 "),rN=a("a"),P0o=o("RoFormerForCausalLM"),I0o=o(" (RoFormer model)"),q0o=l(),q_=a("li"),cle=a("strong"),N0o=o("speech_to_text_2"),j0o=o(" \u2014 "),tN=a("a"),D0o=o("Speech2Text2ForCausalLM"),G0o=o(" (Speech2Text2 model)"),O0o=l(),N_=a("li"),fle=a("strong"),V0o=o("transfo-xl"),X0o=o(" \u2014 "),aN=a("a"),z0o=o("TransfoXLLMHeadModel"),Q0o=o(" (Transformer-XL model)"),W0o=l(),j_=a("li"),mle=a("strong"),H0o=o("trocr"),U0o=o(" \u2014 "),nN=a("a"),J0o=o("TrOCRForCausalLM"),Y0o=o(" (TrOCR model)"),K0o=l(),D_=a("li"),gle=a("strong"),Z0o=o("xglm"),eTo=o(" \u2014 "),sN=a("a"),oTo=o("XGLMForCausalLM"),rTo=o(" (XGLM model)"),tTo=l(),G_=a("li"),hle=a("strong"),aTo=o("xlm"),nTo=o(" \u2014 "),lN=a("a"),sTo=o("XLMWithLMHeadModel"),lTo=o(" (XLM model)"),iTo=l(),O_=a("li"),ple=a("strong"),dTo=o("xlm-prophetnet"),cTo=o(" \u2014 "),iN=a("a"),fTo=o("XLMProphetNetForCausalLM"),mTo=o(" (XLMProphetNet model)"),gTo=l(),V_=a("li"),ule=a("strong"),hTo=o("xlm-roberta"),pTo=o(" \u2014 "),dN=a("a"),uTo=o("XLMRobertaForCausalLM"),_To=o(" (XLM-RoBERTa model)"),bTo=l(),X_=a("li"),_le=a("strong"),vTo=o("xlm-roberta-xl"),FTo=o(" \u2014 "),cN=a("a"),TTo=o("XLMRobertaXLForCausalLM"),MTo=o(" (XLM-RoBERTa-XL model)"),ETo=l(),z_=a("li"),ble=a("strong"),CTo=o("xlnet"),wTo=o(" \u2014 "),fN=a("a"),ATo=o("XLNetLMHeadModel"),yTo=o(" (XLNet model)"),LTo=l(),Q_=a("p"),xTo=o("The model is set in evaluation mode by default using "),vle=a("code"),$To=o("model.eval()"),kTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=a("code"),STo=o("model.train()"),RTo=l(),F(W_.$$.fragment),iBe=l(),Ci=a("h2"),H_=a("a"),Tle=a("span"),F(a6.$$.fragment),BTo=l(),Mle=a("span"),PTo=o("AutoModelForMaskedLM"),dBe=l(),xo=a("div"),F(n6.$$.fragment),ITo=l(),wi=a("p"),qTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mN=a("a"),NTo=o("from_pretrained()"),jTo=o(" class method or the "),gN=a("a"),DTo=o("from_config()"),GTo=o(` class
method.`),OTo=l(),s6=a("p"),VTo=o("This class cannot be instantiated directly using "),Ele=a("code"),XTo=o("__init__()"),zTo=o(" (throws an error)."),QTo=l(),ot=a("div"),F(l6.$$.fragment),WTo=l(),Cle=a("p"),HTo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),UTo=l(),Ai=a("p"),JTo=o(`Note:
Loading a model from its configuration file does `),wle=a("strong"),YTo=o("not"),KTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=a("a"),ZTo=o("from_pretrained()"),e7o=o(" to load the model weights."),o7o=l(),F(U_.$$.fragment),r7o=l(),Ue=a("div"),F(i6.$$.fragment),t7o=l(),Ale=a("p"),a7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n7o=l(),wa=a("p"),s7o=o("The model class to instantiate is selected based on the "),yle=a("code"),l7o=o("model_type"),i7o=o(` property of the config object (either
passed as an argument or loaded from `),Lle=a("code"),d7o=o("pretrained_model_name_or_path"),c7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=a("code"),f7o=o("pretrained_model_name_or_path"),m7o=o(":"),g7o=l(),Q=a("ul"),J_=a("li"),$le=a("strong"),h7o=o("albert"),p7o=o(" \u2014 "),pN=a("a"),u7o=o("AlbertForMaskedLM"),_7o=o(" (ALBERT model)"),b7o=l(),Y_=a("li"),kle=a("strong"),v7o=o("bart"),F7o=o(" \u2014 "),uN=a("a"),T7o=o("BartForConditionalGeneration"),M7o=o(" (BART model)"),E7o=l(),K_=a("li"),Sle=a("strong"),C7o=o("bert"),w7o=o(" \u2014 "),_N=a("a"),A7o=o("BertForMaskedLM"),y7o=o(" (BERT model)"),L7o=l(),Z_=a("li"),Rle=a("strong"),x7o=o("big_bird"),$7o=o(" \u2014 "),bN=a("a"),k7o=o("BigBirdForMaskedLM"),S7o=o(" (BigBird model)"),R7o=l(),e1=a("li"),Ble=a("strong"),B7o=o("camembert"),P7o=o(" \u2014 "),vN=a("a"),I7o=o("CamembertForMaskedLM"),q7o=o(" (CamemBERT model)"),N7o=l(),o1=a("li"),Ple=a("strong"),j7o=o("convbert"),D7o=o(" \u2014 "),FN=a("a"),G7o=o("ConvBertForMaskedLM"),O7o=o(" (ConvBERT model)"),V7o=l(),r1=a("li"),Ile=a("strong"),X7o=o("data2vec-text"),z7o=o(" \u2014 "),TN=a("a"),Q7o=o("Data2VecTextForMaskedLM"),W7o=o(" (Data2VecText model)"),H7o=l(),t1=a("li"),qle=a("strong"),U7o=o("deberta"),J7o=o(" \u2014 "),MN=a("a"),Y7o=o("DebertaForMaskedLM"),K7o=o(" (DeBERTa model)"),Z7o=l(),a1=a("li"),Nle=a("strong"),eMo=o("deberta-v2"),oMo=o(" \u2014 "),EN=a("a"),rMo=o("DebertaV2ForMaskedLM"),tMo=o(" (DeBERTa-v2 model)"),aMo=l(),n1=a("li"),jle=a("strong"),nMo=o("distilbert"),sMo=o(" \u2014 "),CN=a("a"),lMo=o("DistilBertForMaskedLM"),iMo=o(" (DistilBERT model)"),dMo=l(),s1=a("li"),Dle=a("strong"),cMo=o("electra"),fMo=o(" \u2014 "),wN=a("a"),mMo=o("ElectraForMaskedLM"),gMo=o(" (ELECTRA model)"),hMo=l(),l1=a("li"),Gle=a("strong"),pMo=o("flaubert"),uMo=o(" \u2014 "),AN=a("a"),_Mo=o("FlaubertWithLMHeadModel"),bMo=o(" (FlauBERT model)"),vMo=l(),i1=a("li"),Ole=a("strong"),FMo=o("fnet"),TMo=o(" \u2014 "),yN=a("a"),MMo=o("FNetForMaskedLM"),EMo=o(" (FNet model)"),CMo=l(),d1=a("li"),Vle=a("strong"),wMo=o("funnel"),AMo=o(" \u2014 "),LN=a("a"),yMo=o("FunnelForMaskedLM"),LMo=o(" (Funnel Transformer model)"),xMo=l(),c1=a("li"),Xle=a("strong"),$Mo=o("ibert"),kMo=o(" \u2014 "),xN=a("a"),SMo=o("IBertForMaskedLM"),RMo=o(" (I-BERT model)"),BMo=l(),f1=a("li"),zle=a("strong"),PMo=o("layoutlm"),IMo=o(" \u2014 "),$N=a("a"),qMo=o("LayoutLMForMaskedLM"),NMo=o(" (LayoutLM model)"),jMo=l(),m1=a("li"),Qle=a("strong"),DMo=o("longformer"),GMo=o(" \u2014 "),kN=a("a"),OMo=o("LongformerForMaskedLM"),VMo=o(" (Longformer model)"),XMo=l(),g1=a("li"),Wle=a("strong"),zMo=o("mbart"),QMo=o(" \u2014 "),SN=a("a"),WMo=o("MBartForConditionalGeneration"),HMo=o(" (mBART model)"),UMo=l(),h1=a("li"),Hle=a("strong"),JMo=o("megatron-bert"),YMo=o(" \u2014 "),RN=a("a"),KMo=o("MegatronBertForMaskedLM"),ZMo=o(" (MegatronBert model)"),eEo=l(),p1=a("li"),Ule=a("strong"),oEo=o("mobilebert"),rEo=o(" \u2014 "),BN=a("a"),tEo=o("MobileBertForMaskedLM"),aEo=o(" (MobileBERT model)"),nEo=l(),u1=a("li"),Jle=a("strong"),sEo=o("mpnet"),lEo=o(" \u2014 "),PN=a("a"),iEo=o("MPNetForMaskedLM"),dEo=o(" (MPNet model)"),cEo=l(),_1=a("li"),Yle=a("strong"),fEo=o("nystromformer"),mEo=o(" \u2014 "),IN=a("a"),gEo=o("NystromformerForMaskedLM"),hEo=o(" (Nystromformer model)"),pEo=l(),b1=a("li"),Kle=a("strong"),uEo=o("perceiver"),_Eo=o(" \u2014 "),qN=a("a"),bEo=o("PerceiverForMaskedLM"),vEo=o(" (Perceiver model)"),FEo=l(),v1=a("li"),Zle=a("strong"),TEo=o("qdqbert"),MEo=o(" \u2014 "),NN=a("a"),EEo=o("QDQBertForMaskedLM"),CEo=o(" (QDQBert model)"),wEo=l(),F1=a("li"),eie=a("strong"),AEo=o("reformer"),yEo=o(" \u2014 "),jN=a("a"),LEo=o("ReformerForMaskedLM"),xEo=o(" (Reformer model)"),$Eo=l(),T1=a("li"),oie=a("strong"),kEo=o("rembert"),SEo=o(" \u2014 "),DN=a("a"),REo=o("RemBertForMaskedLM"),BEo=o(" (RemBERT model)"),PEo=l(),M1=a("li"),rie=a("strong"),IEo=o("roberta"),qEo=o(" \u2014 "),GN=a("a"),NEo=o("RobertaForMaskedLM"),jEo=o(" (RoBERTa model)"),DEo=l(),E1=a("li"),tie=a("strong"),GEo=o("roformer"),OEo=o(" \u2014 "),ON=a("a"),VEo=o("RoFormerForMaskedLM"),XEo=o(" (RoFormer model)"),zEo=l(),C1=a("li"),aie=a("strong"),QEo=o("squeezebert"),WEo=o(" \u2014 "),VN=a("a"),HEo=o("SqueezeBertForMaskedLM"),UEo=o(" (SqueezeBERT model)"),JEo=l(),w1=a("li"),nie=a("strong"),YEo=o("tapas"),KEo=o(" \u2014 "),XN=a("a"),ZEo=o("TapasForMaskedLM"),eCo=o(" (TAPAS model)"),oCo=l(),A1=a("li"),sie=a("strong"),rCo=o("wav2vec2"),tCo=o(" \u2014 "),lie=a("code"),aCo=o("Wav2Vec2ForMaskedLM"),nCo=o(" (Wav2Vec2 model)"),sCo=l(),y1=a("li"),iie=a("strong"),lCo=o("xlm"),iCo=o(" \u2014 "),zN=a("a"),dCo=o("XLMWithLMHeadModel"),cCo=o(" (XLM model)"),fCo=l(),L1=a("li"),die=a("strong"),mCo=o("xlm-roberta"),gCo=o(" \u2014 "),QN=a("a"),hCo=o("XLMRobertaForMaskedLM"),pCo=o(" (XLM-RoBERTa model)"),uCo=l(),x1=a("li"),cie=a("strong"),_Co=o("xlm-roberta-xl"),bCo=o(" \u2014 "),WN=a("a"),vCo=o("XLMRobertaXLForMaskedLM"),FCo=o(" (XLM-RoBERTa-XL model)"),TCo=l(),$1=a("li"),fie=a("strong"),MCo=o("yoso"),ECo=o(" \u2014 "),HN=a("a"),CCo=o("YosoForMaskedLM"),wCo=o(" (YOSO model)"),ACo=l(),k1=a("p"),yCo=o("The model is set in evaluation mode by default using "),mie=a("code"),LCo=o("model.eval()"),xCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),$Co=o("model.train()"),kCo=l(),F(S1.$$.fragment),cBe=l(),yi=a("h2"),R1=a("a"),hie=a("span"),F(d6.$$.fragment),SCo=l(),pie=a("span"),RCo=o("AutoModelForSeq2SeqLM"),fBe=l(),$o=a("div"),F(c6.$$.fragment),BCo=l(),Li=a("p"),PCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UN=a("a"),ICo=o("from_pretrained()"),qCo=o(" class method or the "),JN=a("a"),NCo=o("from_config()"),jCo=o(` class
method.`),DCo=l(),f6=a("p"),GCo=o("This class cannot be instantiated directly using "),uie=a("code"),OCo=o("__init__()"),VCo=o(" (throws an error)."),XCo=l(),rt=a("div"),F(m6.$$.fragment),zCo=l(),_ie=a("p"),QCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WCo=l(),xi=a("p"),HCo=o(`Note:
Loading a model from its configuration file does `),bie=a("strong"),UCo=o("not"),JCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=a("a"),YCo=o("from_pretrained()"),KCo=o(" to load the model weights."),ZCo=l(),F(B1.$$.fragment),e3o=l(),Je=a("div"),F(g6.$$.fragment),o3o=l(),vie=a("p"),r3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t3o=l(),Aa=a("p"),a3o=o("The model class to instantiate is selected based on the "),Fie=a("code"),n3o=o("model_type"),s3o=o(` property of the config object (either
passed as an argument or loaded from `),Tie=a("code"),l3o=o("pretrained_model_name_or_path"),i3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=a("code"),d3o=o("pretrained_model_name_or_path"),c3o=o(":"),f3o=l(),he=a("ul"),P1=a("li"),Eie=a("strong"),m3o=o("bart"),g3o=o(" \u2014 "),KN=a("a"),h3o=o("BartForConditionalGeneration"),p3o=o(" (BART model)"),u3o=l(),I1=a("li"),Cie=a("strong"),_3o=o("bigbird_pegasus"),b3o=o(" \u2014 "),ZN=a("a"),v3o=o("BigBirdPegasusForConditionalGeneration"),F3o=o(" (BigBirdPegasus model)"),T3o=l(),q1=a("li"),wie=a("strong"),M3o=o("blenderbot"),E3o=o(" \u2014 "),ej=a("a"),C3o=o("BlenderbotForConditionalGeneration"),w3o=o(" (Blenderbot model)"),A3o=l(),N1=a("li"),Aie=a("strong"),y3o=o("blenderbot-small"),L3o=o(" \u2014 "),oj=a("a"),x3o=o("BlenderbotSmallForConditionalGeneration"),$3o=o(" (BlenderbotSmall model)"),k3o=l(),j1=a("li"),yie=a("strong"),S3o=o("encoder-decoder"),R3o=o(" \u2014 "),rj=a("a"),B3o=o("EncoderDecoderModel"),P3o=o(" (Encoder decoder model)"),I3o=l(),D1=a("li"),Lie=a("strong"),q3o=o("fsmt"),N3o=o(" \u2014 "),tj=a("a"),j3o=o("FSMTForConditionalGeneration"),D3o=o(" (FairSeq Machine-Translation model)"),G3o=l(),G1=a("li"),xie=a("strong"),O3o=o("led"),V3o=o(" \u2014 "),aj=a("a"),X3o=o("LEDForConditionalGeneration"),z3o=o(" (LED model)"),Q3o=l(),O1=a("li"),$ie=a("strong"),W3o=o("m2m_100"),H3o=o(" \u2014 "),nj=a("a"),U3o=o("M2M100ForConditionalGeneration"),J3o=o(" (M2M100 model)"),Y3o=l(),V1=a("li"),kie=a("strong"),K3o=o("marian"),Z3o=o(" \u2014 "),sj=a("a"),ewo=o("MarianMTModel"),owo=o(" (Marian model)"),rwo=l(),X1=a("li"),Sie=a("strong"),two=o("mbart"),awo=o(" \u2014 "),lj=a("a"),nwo=o("MBartForConditionalGeneration"),swo=o(" (mBART model)"),lwo=l(),z1=a("li"),Rie=a("strong"),iwo=o("mt5"),dwo=o(" \u2014 "),ij=a("a"),cwo=o("MT5ForConditionalGeneration"),fwo=o(" (mT5 model)"),mwo=l(),Q1=a("li"),Bie=a("strong"),gwo=o("pegasus"),hwo=o(" \u2014 "),dj=a("a"),pwo=o("PegasusForConditionalGeneration"),uwo=o(" (Pegasus model)"),_wo=l(),W1=a("li"),Pie=a("strong"),bwo=o("plbart"),vwo=o(" \u2014 "),cj=a("a"),Fwo=o("PLBartForConditionalGeneration"),Two=o(" (PLBart model)"),Mwo=l(),H1=a("li"),Iie=a("strong"),Ewo=o("prophetnet"),Cwo=o(" \u2014 "),fj=a("a"),wwo=o("ProphetNetForConditionalGeneration"),Awo=o(" (ProphetNet model)"),ywo=l(),U1=a("li"),qie=a("strong"),Lwo=o("t5"),xwo=o(" \u2014 "),mj=a("a"),$wo=o("T5ForConditionalGeneration"),kwo=o(" (T5 model)"),Swo=l(),J1=a("li"),Nie=a("strong"),Rwo=o("tapex"),Bwo=o(" \u2014 "),gj=a("a"),Pwo=o("BartForConditionalGeneration"),Iwo=o(" (TAPEX model)"),qwo=l(),Y1=a("li"),jie=a("strong"),Nwo=o("xlm-prophetnet"),jwo=o(" \u2014 "),hj=a("a"),Dwo=o("XLMProphetNetForConditionalGeneration"),Gwo=o(" (XLMProphetNet model)"),Owo=l(),K1=a("p"),Vwo=o("The model is set in evaluation mode by default using "),Die=a("code"),Xwo=o("model.eval()"),zwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=a("code"),Qwo=o("model.train()"),Wwo=l(),F(Z1.$$.fragment),mBe=l(),$i=a("h2"),eb=a("a"),Oie=a("span"),F(h6.$$.fragment),Hwo=l(),Vie=a("span"),Uwo=o("AutoModelForSequenceClassification"),gBe=l(),ko=a("div"),F(p6.$$.fragment),Jwo=l(),ki=a("p"),Ywo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pj=a("a"),Kwo=o("from_pretrained()"),Zwo=o(" class method or the "),uj=a("a"),eAo=o("from_config()"),oAo=o(` class
method.`),rAo=l(),u6=a("p"),tAo=o("This class cannot be instantiated directly using "),Xie=a("code"),aAo=o("__init__()"),nAo=o(" (throws an error)."),sAo=l(),tt=a("div"),F(_6.$$.fragment),lAo=l(),zie=a("p"),iAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),dAo=l(),Si=a("p"),cAo=o(`Note:
Loading a model from its configuration file does `),Qie=a("strong"),fAo=o("not"),mAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),gAo=o("from_pretrained()"),hAo=o(" to load the model weights."),pAo=l(),F(ob.$$.fragment),uAo=l(),Ye=a("div"),F(b6.$$.fragment),_Ao=l(),Wie=a("p"),bAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vAo=l(),ya=a("p"),FAo=o("The model class to instantiate is selected based on the "),Hie=a("code"),TAo=o("model_type"),MAo=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),EAo=o("pretrained_model_name_or_path"),CAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),wAo=o("pretrained_model_name_or_path"),AAo=o(":"),yAo=l(),q=a("ul"),rb=a("li"),Yie=a("strong"),LAo=o("albert"),xAo=o(" \u2014 "),bj=a("a"),$Ao=o("AlbertForSequenceClassification"),kAo=o(" (ALBERT model)"),SAo=l(),tb=a("li"),Kie=a("strong"),RAo=o("bart"),BAo=o(" \u2014 "),vj=a("a"),PAo=o("BartForSequenceClassification"),IAo=o(" (BART model)"),qAo=l(),ab=a("li"),Zie=a("strong"),NAo=o("bert"),jAo=o(" \u2014 "),Fj=a("a"),DAo=o("BertForSequenceClassification"),GAo=o(" (BERT model)"),OAo=l(),nb=a("li"),ede=a("strong"),VAo=o("big_bird"),XAo=o(" \u2014 "),Tj=a("a"),zAo=o("BigBirdForSequenceClassification"),QAo=o(" (BigBird model)"),WAo=l(),sb=a("li"),ode=a("strong"),HAo=o("bigbird_pegasus"),UAo=o(" \u2014 "),Mj=a("a"),JAo=o("BigBirdPegasusForSequenceClassification"),YAo=o(" (BigBirdPegasus model)"),KAo=l(),lb=a("li"),rde=a("strong"),ZAo=o("camembert"),e6o=o(" \u2014 "),Ej=a("a"),o6o=o("CamembertForSequenceClassification"),r6o=o(" (CamemBERT model)"),t6o=l(),ib=a("li"),tde=a("strong"),a6o=o("canine"),n6o=o(" \u2014 "),Cj=a("a"),s6o=o("CanineForSequenceClassification"),l6o=o(" (Canine model)"),i6o=l(),db=a("li"),ade=a("strong"),d6o=o("convbert"),c6o=o(" \u2014 "),wj=a("a"),f6o=o("ConvBertForSequenceClassification"),m6o=o(" (ConvBERT model)"),g6o=l(),cb=a("li"),nde=a("strong"),h6o=o("ctrl"),p6o=o(" \u2014 "),Aj=a("a"),u6o=o("CTRLForSequenceClassification"),_6o=o(" (CTRL model)"),b6o=l(),fb=a("li"),sde=a("strong"),v6o=o("data2vec-text"),F6o=o(" \u2014 "),yj=a("a"),T6o=o("Data2VecTextForSequenceClassification"),M6o=o(" (Data2VecText model)"),E6o=l(),mb=a("li"),lde=a("strong"),C6o=o("deberta"),w6o=o(" \u2014 "),Lj=a("a"),A6o=o("DebertaForSequenceClassification"),y6o=o(" (DeBERTa model)"),L6o=l(),gb=a("li"),ide=a("strong"),x6o=o("deberta-v2"),$6o=o(" \u2014 "),xj=a("a"),k6o=o("DebertaV2ForSequenceClassification"),S6o=o(" (DeBERTa-v2 model)"),R6o=l(),hb=a("li"),dde=a("strong"),B6o=o("distilbert"),P6o=o(" \u2014 "),$j=a("a"),I6o=o("DistilBertForSequenceClassification"),q6o=o(" (DistilBERT model)"),N6o=l(),pb=a("li"),cde=a("strong"),j6o=o("electra"),D6o=o(" \u2014 "),kj=a("a"),G6o=o("ElectraForSequenceClassification"),O6o=o(" (ELECTRA model)"),V6o=l(),ub=a("li"),fde=a("strong"),X6o=o("flaubert"),z6o=o(" \u2014 "),Sj=a("a"),Q6o=o("FlaubertForSequenceClassification"),W6o=o(" (FlauBERT model)"),H6o=l(),_b=a("li"),mde=a("strong"),U6o=o("fnet"),J6o=o(" \u2014 "),Rj=a("a"),Y6o=o("FNetForSequenceClassification"),K6o=o(" (FNet model)"),Z6o=l(),bb=a("li"),gde=a("strong"),eyo=o("funnel"),oyo=o(" \u2014 "),Bj=a("a"),ryo=o("FunnelForSequenceClassification"),tyo=o(" (Funnel Transformer model)"),ayo=l(),vb=a("li"),hde=a("strong"),nyo=o("gpt2"),syo=o(" \u2014 "),Pj=a("a"),lyo=o("GPT2ForSequenceClassification"),iyo=o(" (OpenAI GPT-2 model)"),dyo=l(),Fb=a("li"),pde=a("strong"),cyo=o("gpt_neo"),fyo=o(" \u2014 "),Ij=a("a"),myo=o("GPTNeoForSequenceClassification"),gyo=o(" (GPT Neo model)"),hyo=l(),Tb=a("li"),ude=a("strong"),pyo=o("gptj"),uyo=o(" \u2014 "),qj=a("a"),_yo=o("GPTJForSequenceClassification"),byo=o(" (GPT-J model)"),vyo=l(),Mb=a("li"),_de=a("strong"),Fyo=o("ibert"),Tyo=o(" \u2014 "),Nj=a("a"),Myo=o("IBertForSequenceClassification"),Eyo=o(" (I-BERT model)"),Cyo=l(),Eb=a("li"),bde=a("strong"),wyo=o("layoutlm"),Ayo=o(" \u2014 "),jj=a("a"),yyo=o("LayoutLMForSequenceClassification"),Lyo=o(" (LayoutLM model)"),xyo=l(),Cb=a("li"),vde=a("strong"),$yo=o("layoutlmv2"),kyo=o(" \u2014 "),Dj=a("a"),Syo=o("LayoutLMv2ForSequenceClassification"),Ryo=o(" (LayoutLMv2 model)"),Byo=l(),wb=a("li"),Fde=a("strong"),Pyo=o("led"),Iyo=o(" \u2014 "),Gj=a("a"),qyo=o("LEDForSequenceClassification"),Nyo=o(" (LED model)"),jyo=l(),Ab=a("li"),Tde=a("strong"),Dyo=o("longformer"),Gyo=o(" \u2014 "),Oj=a("a"),Oyo=o("LongformerForSequenceClassification"),Vyo=o(" (Longformer model)"),Xyo=l(),yb=a("li"),Mde=a("strong"),zyo=o("mbart"),Qyo=o(" \u2014 "),Vj=a("a"),Wyo=o("MBartForSequenceClassification"),Hyo=o(" (mBART model)"),Uyo=l(),Lb=a("li"),Ede=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),Xj=a("a"),Kyo=o("MegatronBertForSequenceClassification"),Zyo=o(" (MegatronBert model)"),eLo=l(),xb=a("li"),Cde=a("strong"),oLo=o("mobilebert"),rLo=o(" \u2014 "),zj=a("a"),tLo=o("MobileBertForSequenceClassification"),aLo=o(" (MobileBERT model)"),nLo=l(),$b=a("li"),wde=a("strong"),sLo=o("mpnet"),lLo=o(" \u2014 "),Qj=a("a"),iLo=o("MPNetForSequenceClassification"),dLo=o(" (MPNet model)"),cLo=l(),kb=a("li"),Ade=a("strong"),fLo=o("nystromformer"),mLo=o(" \u2014 "),Wj=a("a"),gLo=o("NystromformerForSequenceClassification"),hLo=o(" (Nystromformer model)"),pLo=l(),Sb=a("li"),yde=a("strong"),uLo=o("openai-gpt"),_Lo=o(" \u2014 "),Hj=a("a"),bLo=o("OpenAIGPTForSequenceClassification"),vLo=o(" (OpenAI GPT model)"),FLo=l(),Rb=a("li"),Lde=a("strong"),TLo=o("perceiver"),MLo=o(" \u2014 "),Uj=a("a"),ELo=o("PerceiverForSequenceClassification"),CLo=o(" (Perceiver model)"),wLo=l(),Bb=a("li"),xde=a("strong"),ALo=o("plbart"),yLo=o(" \u2014 "),Jj=a("a"),LLo=o("PLBartForSequenceClassification"),xLo=o(" (PLBart model)"),$Lo=l(),Pb=a("li"),$de=a("strong"),kLo=o("qdqbert"),SLo=o(" \u2014 "),Yj=a("a"),RLo=o("QDQBertForSequenceClassification"),BLo=o(" (QDQBert model)"),PLo=l(),Ib=a("li"),kde=a("strong"),ILo=o("reformer"),qLo=o(" \u2014 "),Kj=a("a"),NLo=o("ReformerForSequenceClassification"),jLo=o(" (Reformer model)"),DLo=l(),qb=a("li"),Sde=a("strong"),GLo=o("rembert"),OLo=o(" \u2014 "),Zj=a("a"),VLo=o("RemBertForSequenceClassification"),XLo=o(" (RemBERT model)"),zLo=l(),Nb=a("li"),Rde=a("strong"),QLo=o("roberta"),WLo=o(" \u2014 "),eD=a("a"),HLo=o("RobertaForSequenceClassification"),ULo=o(" (RoBERTa model)"),JLo=l(),jb=a("li"),Bde=a("strong"),YLo=o("roformer"),KLo=o(" \u2014 "),oD=a("a"),ZLo=o("RoFormerForSequenceClassification"),e8o=o(" (RoFormer model)"),o8o=l(),Db=a("li"),Pde=a("strong"),r8o=o("squeezebert"),t8o=o(" \u2014 "),rD=a("a"),a8o=o("SqueezeBertForSequenceClassification"),n8o=o(" (SqueezeBERT model)"),s8o=l(),Gb=a("li"),Ide=a("strong"),l8o=o("tapas"),i8o=o(" \u2014 "),tD=a("a"),d8o=o("TapasForSequenceClassification"),c8o=o(" (TAPAS model)"),f8o=l(),Ob=a("li"),qde=a("strong"),m8o=o("tapex"),g8o=o(" \u2014 "),aD=a("a"),h8o=o("BartForSequenceClassification"),p8o=o(" (TAPEX model)"),u8o=l(),Vb=a("li"),Nde=a("strong"),_8o=o("transfo-xl"),b8o=o(" \u2014 "),nD=a("a"),v8o=o("TransfoXLForSequenceClassification"),F8o=o(" (Transformer-XL model)"),T8o=l(),Xb=a("li"),jde=a("strong"),M8o=o("xlm"),E8o=o(" \u2014 "),sD=a("a"),C8o=o("XLMForSequenceClassification"),w8o=o(" (XLM model)"),A8o=l(),zb=a("li"),Dde=a("strong"),y8o=o("xlm-roberta"),L8o=o(" \u2014 "),lD=a("a"),x8o=o("XLMRobertaForSequenceClassification"),$8o=o(" (XLM-RoBERTa model)"),k8o=l(),Qb=a("li"),Gde=a("strong"),S8o=o("xlm-roberta-xl"),R8o=o(" \u2014 "),iD=a("a"),B8o=o("XLMRobertaXLForSequenceClassification"),P8o=o(" (XLM-RoBERTa-XL model)"),I8o=l(),Wb=a("li"),Ode=a("strong"),q8o=o("xlnet"),N8o=o(" \u2014 "),dD=a("a"),j8o=o("XLNetForSequenceClassification"),D8o=o(" (XLNet model)"),G8o=l(),Hb=a("li"),Vde=a("strong"),O8o=o("yoso"),V8o=o(" \u2014 "),cD=a("a"),X8o=o("YosoForSequenceClassification"),z8o=o(" (YOSO model)"),Q8o=l(),Ub=a("p"),W8o=o("The model is set in evaluation mode by default using "),Xde=a("code"),H8o=o("model.eval()"),U8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=a("code"),J8o=o("model.train()"),Y8o=l(),F(Jb.$$.fragment),hBe=l(),Ri=a("h2"),Yb=a("a"),Qde=a("span"),F(v6.$$.fragment),K8o=l(),Wde=a("span"),Z8o=o("AutoModelForMultipleChoice"),pBe=l(),So=a("div"),F(F6.$$.fragment),exo=l(),Bi=a("p"),oxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fD=a("a"),rxo=o("from_pretrained()"),txo=o(" class method or the "),mD=a("a"),axo=o("from_config()"),nxo=o(` class
method.`),sxo=l(),T6=a("p"),lxo=o("This class cannot be instantiated directly using "),Hde=a("code"),ixo=o("__init__()"),dxo=o(" (throws an error)."),cxo=l(),at=a("div"),F(M6.$$.fragment),fxo=l(),Ude=a("p"),mxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),gxo=l(),Pi=a("p"),hxo=o(`Note:
Loading a model from its configuration file does `),Jde=a("strong"),pxo=o("not"),uxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),_xo=o("from_pretrained()"),bxo=o(" to load the model weights."),vxo=l(),F(Kb.$$.fragment),Fxo=l(),Ke=a("div"),F(E6.$$.fragment),Txo=l(),Yde=a("p"),Mxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Exo=l(),La=a("p"),Cxo=o("The model class to instantiate is selected based on the "),Kde=a("code"),wxo=o("model_type"),Axo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),yxo=o("pretrained_model_name_or_path"),Lxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(":"),kxo=l(),Y=a("ul"),Zb=a("li"),oce=a("strong"),Sxo=o("albert"),Rxo=o(" \u2014 "),hD=a("a"),Bxo=o("AlbertForMultipleChoice"),Pxo=o(" (ALBERT model)"),Ixo=l(),e4=a("li"),rce=a("strong"),qxo=o("bert"),Nxo=o(" \u2014 "),pD=a("a"),jxo=o("BertForMultipleChoice"),Dxo=o(" (BERT model)"),Gxo=l(),o4=a("li"),tce=a("strong"),Oxo=o("big_bird"),Vxo=o(" \u2014 "),uD=a("a"),Xxo=o("BigBirdForMultipleChoice"),zxo=o(" (BigBird model)"),Qxo=l(),r4=a("li"),ace=a("strong"),Wxo=o("camembert"),Hxo=o(" \u2014 "),_D=a("a"),Uxo=o("CamembertForMultipleChoice"),Jxo=o(" (CamemBERT model)"),Yxo=l(),t4=a("li"),nce=a("strong"),Kxo=o("canine"),Zxo=o(" \u2014 "),bD=a("a"),e9o=o("CanineForMultipleChoice"),o9o=o(" (Canine model)"),r9o=l(),a4=a("li"),sce=a("strong"),t9o=o("convbert"),a9o=o(" \u2014 "),vD=a("a"),n9o=o("ConvBertForMultipleChoice"),s9o=o(" (ConvBERT model)"),l9o=l(),n4=a("li"),lce=a("strong"),i9o=o("data2vec-text"),d9o=o(" \u2014 "),FD=a("a"),c9o=o("Data2VecTextForMultipleChoice"),f9o=o(" (Data2VecText model)"),m9o=l(),s4=a("li"),ice=a("strong"),g9o=o("distilbert"),h9o=o(" \u2014 "),TD=a("a"),p9o=o("DistilBertForMultipleChoice"),u9o=o(" (DistilBERT model)"),_9o=l(),l4=a("li"),dce=a("strong"),b9o=o("electra"),v9o=o(" \u2014 "),MD=a("a"),F9o=o("ElectraForMultipleChoice"),T9o=o(" (ELECTRA model)"),M9o=l(),i4=a("li"),cce=a("strong"),E9o=o("flaubert"),C9o=o(" \u2014 "),ED=a("a"),w9o=o("FlaubertForMultipleChoice"),A9o=o(" (FlauBERT model)"),y9o=l(),d4=a("li"),fce=a("strong"),L9o=o("fnet"),x9o=o(" \u2014 "),CD=a("a"),$9o=o("FNetForMultipleChoice"),k9o=o(" (FNet model)"),S9o=l(),c4=a("li"),mce=a("strong"),R9o=o("funnel"),B9o=o(" \u2014 "),wD=a("a"),P9o=o("FunnelForMultipleChoice"),I9o=o(" (Funnel Transformer model)"),q9o=l(),f4=a("li"),gce=a("strong"),N9o=o("ibert"),j9o=o(" \u2014 "),AD=a("a"),D9o=o("IBertForMultipleChoice"),G9o=o(" (I-BERT model)"),O9o=l(),m4=a("li"),hce=a("strong"),V9o=o("longformer"),X9o=o(" \u2014 "),yD=a("a"),z9o=o("LongformerForMultipleChoice"),Q9o=o(" (Longformer model)"),W9o=l(),g4=a("li"),pce=a("strong"),H9o=o("megatron-bert"),U9o=o(" \u2014 "),LD=a("a"),J9o=o("MegatronBertForMultipleChoice"),Y9o=o(" (MegatronBert model)"),K9o=l(),h4=a("li"),uce=a("strong"),Z9o=o("mobilebert"),e$o=o(" \u2014 "),xD=a("a"),o$o=o("MobileBertForMultipleChoice"),r$o=o(" (MobileBERT model)"),t$o=l(),p4=a("li"),_ce=a("strong"),a$o=o("mpnet"),n$o=o(" \u2014 "),$D=a("a"),s$o=o("MPNetForMultipleChoice"),l$o=o(" (MPNet model)"),i$o=l(),u4=a("li"),bce=a("strong"),d$o=o("nystromformer"),c$o=o(" \u2014 "),kD=a("a"),f$o=o("NystromformerForMultipleChoice"),m$o=o(" (Nystromformer model)"),g$o=l(),_4=a("li"),vce=a("strong"),h$o=o("qdqbert"),p$o=o(" \u2014 "),SD=a("a"),u$o=o("QDQBertForMultipleChoice"),_$o=o(" (QDQBert model)"),b$o=l(),b4=a("li"),Fce=a("strong"),v$o=o("rembert"),F$o=o(" \u2014 "),RD=a("a"),T$o=o("RemBertForMultipleChoice"),M$o=o(" (RemBERT model)"),E$o=l(),v4=a("li"),Tce=a("strong"),C$o=o("roberta"),w$o=o(" \u2014 "),BD=a("a"),A$o=o("RobertaForMultipleChoice"),y$o=o(" (RoBERTa model)"),L$o=l(),F4=a("li"),Mce=a("strong"),x$o=o("roformer"),$$o=o(" \u2014 "),PD=a("a"),k$o=o("RoFormerForMultipleChoice"),S$o=o(" (RoFormer model)"),R$o=l(),T4=a("li"),Ece=a("strong"),B$o=o("squeezebert"),P$o=o(" \u2014 "),ID=a("a"),I$o=o("SqueezeBertForMultipleChoice"),q$o=o(" (SqueezeBERT model)"),N$o=l(),M4=a("li"),Cce=a("strong"),j$o=o("xlm"),D$o=o(" \u2014 "),qD=a("a"),G$o=o("XLMForMultipleChoice"),O$o=o(" (XLM model)"),V$o=l(),E4=a("li"),wce=a("strong"),X$o=o("xlm-roberta"),z$o=o(" \u2014 "),ND=a("a"),Q$o=o("XLMRobertaForMultipleChoice"),W$o=o(" (XLM-RoBERTa model)"),H$o=l(),C4=a("li"),Ace=a("strong"),U$o=o("xlm-roberta-xl"),J$o=o(" \u2014 "),jD=a("a"),Y$o=o("XLMRobertaXLForMultipleChoice"),K$o=o(" (XLM-RoBERTa-XL model)"),Z$o=l(),w4=a("li"),yce=a("strong"),eko=o("xlnet"),oko=o(" \u2014 "),DD=a("a"),rko=o("XLNetForMultipleChoice"),tko=o(" (XLNet model)"),ako=l(),A4=a("li"),Lce=a("strong"),nko=o("yoso"),sko=o(" \u2014 "),GD=a("a"),lko=o("YosoForMultipleChoice"),iko=o(" (YOSO model)"),dko=l(),y4=a("p"),cko=o("The model is set in evaluation mode by default using "),xce=a("code"),fko=o("model.eval()"),mko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),gko=o("model.train()"),hko=l(),F(L4.$$.fragment),uBe=l(),Ii=a("h2"),x4=a("a"),kce=a("span"),F(C6.$$.fragment),pko=l(),Sce=a("span"),uko=o("AutoModelForNextSentencePrediction"),_Be=l(),Ro=a("div"),F(w6.$$.fragment),_ko=l(),qi=a("p"),bko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OD=a("a"),vko=o("from_pretrained()"),Fko=o(" class method or the "),VD=a("a"),Tko=o("from_config()"),Mko=o(` class
method.`),Eko=l(),A6=a("p"),Cko=o("This class cannot be instantiated directly using "),Rce=a("code"),wko=o("__init__()"),Ako=o(" (throws an error)."),yko=l(),nt=a("div"),F(y6.$$.fragment),Lko=l(),Bce=a("p"),xko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),$ko=l(),Ni=a("p"),kko=o(`Note:
Loading a model from its configuration file does `),Pce=a("strong"),Sko=o("not"),Rko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),Bko=o("from_pretrained()"),Pko=o(" to load the model weights."),Iko=l(),F($4.$$.fragment),qko=l(),Ze=a("div"),F(L6.$$.fragment),Nko=l(),Ice=a("p"),jko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Dko=l(),xa=a("p"),Gko=o("The model class to instantiate is selected based on the "),qce=a("code"),Oko=o("model_type"),Vko=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),Xko=o("pretrained_model_name_or_path"),zko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),Qko=o("pretrained_model_name_or_path"),Wko=o(":"),Hko=l(),Wr=a("ul"),k4=a("li"),Dce=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),zD=a("a"),Yko=o("BertForNextSentencePrediction"),Kko=o(" (BERT model)"),Zko=l(),S4=a("li"),Gce=a("strong"),eSo=o("fnet"),oSo=o(" \u2014 "),QD=a("a"),rSo=o("FNetForNextSentencePrediction"),tSo=o(" (FNet model)"),aSo=l(),R4=a("li"),Oce=a("strong"),nSo=o("megatron-bert"),sSo=o(" \u2014 "),WD=a("a"),lSo=o("MegatronBertForNextSentencePrediction"),iSo=o(" (MegatronBert model)"),dSo=l(),B4=a("li"),Vce=a("strong"),cSo=o("mobilebert"),fSo=o(" \u2014 "),HD=a("a"),mSo=o("MobileBertForNextSentencePrediction"),gSo=o(" (MobileBERT model)"),hSo=l(),P4=a("li"),Xce=a("strong"),pSo=o("qdqbert"),uSo=o(" \u2014 "),UD=a("a"),_So=o("QDQBertForNextSentencePrediction"),bSo=o(" (QDQBert model)"),vSo=l(),I4=a("p"),FSo=o("The model is set in evaluation mode by default using "),zce=a("code"),TSo=o("model.eval()"),MSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=a("code"),ESo=o("model.train()"),CSo=l(),F(q4.$$.fragment),bBe=l(),ji=a("h2"),N4=a("a"),Wce=a("span"),F(x6.$$.fragment),wSo=l(),Hce=a("span"),ASo=o("AutoModelForTokenClassification"),vBe=l(),Bo=a("div"),F($6.$$.fragment),ySo=l(),Di=a("p"),LSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JD=a("a"),xSo=o("from_pretrained()"),$So=o(" class method or the "),YD=a("a"),kSo=o("from_config()"),SSo=o(` class
method.`),RSo=l(),k6=a("p"),BSo=o("This class cannot be instantiated directly using "),Uce=a("code"),PSo=o("__init__()"),ISo=o(" (throws an error)."),qSo=l(),st=a("div"),F(S6.$$.fragment),NSo=l(),Jce=a("p"),jSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DSo=l(),Gi=a("p"),GSo=o(`Note:
Loading a model from its configuration file does `),Yce=a("strong"),OSo=o("not"),VSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=a("a"),XSo=o("from_pretrained()"),zSo=o(" to load the model weights."),QSo=l(),F(j4.$$.fragment),WSo=l(),eo=a("div"),F(R6.$$.fragment),HSo=l(),Kce=a("p"),USo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JSo=l(),$a=a("p"),YSo=o("The model class to instantiate is selected based on the "),Zce=a("code"),KSo=o("model_type"),ZSo=o(` property of the config object (either
passed as an argument or loaded from `),efe=a("code"),eRo=o("pretrained_model_name_or_path"),oRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=a("code"),rRo=o("pretrained_model_name_or_path"),tRo=o(":"),aRo=l(),U=a("ul"),D4=a("li"),rfe=a("strong"),nRo=o("albert"),sRo=o(" \u2014 "),ZD=a("a"),lRo=o("AlbertForTokenClassification"),iRo=o(" (ALBERT model)"),dRo=l(),G4=a("li"),tfe=a("strong"),cRo=o("bert"),fRo=o(" \u2014 "),eG=a("a"),mRo=o("BertForTokenClassification"),gRo=o(" (BERT model)"),hRo=l(),O4=a("li"),afe=a("strong"),pRo=o("big_bird"),uRo=o(" \u2014 "),oG=a("a"),_Ro=o("BigBirdForTokenClassification"),bRo=o(" (BigBird model)"),vRo=l(),V4=a("li"),nfe=a("strong"),FRo=o("camembert"),TRo=o(" \u2014 "),rG=a("a"),MRo=o("CamembertForTokenClassification"),ERo=o(" (CamemBERT model)"),CRo=l(),X4=a("li"),sfe=a("strong"),wRo=o("canine"),ARo=o(" \u2014 "),tG=a("a"),yRo=o("CanineForTokenClassification"),LRo=o(" (Canine model)"),xRo=l(),z4=a("li"),lfe=a("strong"),$Ro=o("convbert"),kRo=o(" \u2014 "),aG=a("a"),SRo=o("ConvBertForTokenClassification"),RRo=o(" (ConvBERT model)"),BRo=l(),Q4=a("li"),ife=a("strong"),PRo=o("data2vec-text"),IRo=o(" \u2014 "),nG=a("a"),qRo=o("Data2VecTextForTokenClassification"),NRo=o(" (Data2VecText model)"),jRo=l(),W4=a("li"),dfe=a("strong"),DRo=o("deberta"),GRo=o(" \u2014 "),sG=a("a"),ORo=o("DebertaForTokenClassification"),VRo=o(" (DeBERTa model)"),XRo=l(),H4=a("li"),cfe=a("strong"),zRo=o("deberta-v2"),QRo=o(" \u2014 "),lG=a("a"),WRo=o("DebertaV2ForTokenClassification"),HRo=o(" (DeBERTa-v2 model)"),URo=l(),U4=a("li"),ffe=a("strong"),JRo=o("distilbert"),YRo=o(" \u2014 "),iG=a("a"),KRo=o("DistilBertForTokenClassification"),ZRo=o(" (DistilBERT model)"),eBo=l(),J4=a("li"),mfe=a("strong"),oBo=o("electra"),rBo=o(" \u2014 "),dG=a("a"),tBo=o("ElectraForTokenClassification"),aBo=o(" (ELECTRA model)"),nBo=l(),Y4=a("li"),gfe=a("strong"),sBo=o("flaubert"),lBo=o(" \u2014 "),cG=a("a"),iBo=o("FlaubertForTokenClassification"),dBo=o(" (FlauBERT model)"),cBo=l(),K4=a("li"),hfe=a("strong"),fBo=o("fnet"),mBo=o(" \u2014 "),fG=a("a"),gBo=o("FNetForTokenClassification"),hBo=o(" (FNet model)"),pBo=l(),Z4=a("li"),pfe=a("strong"),uBo=o("funnel"),_Bo=o(" \u2014 "),mG=a("a"),bBo=o("FunnelForTokenClassification"),vBo=o(" (Funnel Transformer model)"),FBo=l(),e2=a("li"),ufe=a("strong"),TBo=o("gpt2"),MBo=o(" \u2014 "),gG=a("a"),EBo=o("GPT2ForTokenClassification"),CBo=o(" (OpenAI GPT-2 model)"),wBo=l(),o2=a("li"),_fe=a("strong"),ABo=o("ibert"),yBo=o(" \u2014 "),hG=a("a"),LBo=o("IBertForTokenClassification"),xBo=o(" (I-BERT model)"),$Bo=l(),r2=a("li"),bfe=a("strong"),kBo=o("layoutlm"),SBo=o(" \u2014 "),pG=a("a"),RBo=o("LayoutLMForTokenClassification"),BBo=o(" (LayoutLM model)"),PBo=l(),t2=a("li"),vfe=a("strong"),IBo=o("layoutlmv2"),qBo=o(" \u2014 "),uG=a("a"),NBo=o("LayoutLMv2ForTokenClassification"),jBo=o(" (LayoutLMv2 model)"),DBo=l(),a2=a("li"),Ffe=a("strong"),GBo=o("longformer"),OBo=o(" \u2014 "),_G=a("a"),VBo=o("LongformerForTokenClassification"),XBo=o(" (Longformer model)"),zBo=l(),n2=a("li"),Tfe=a("strong"),QBo=o("megatron-bert"),WBo=o(" \u2014 "),bG=a("a"),HBo=o("MegatronBertForTokenClassification"),UBo=o(" (MegatronBert model)"),JBo=l(),s2=a("li"),Mfe=a("strong"),YBo=o("mobilebert"),KBo=o(" \u2014 "),vG=a("a"),ZBo=o("MobileBertForTokenClassification"),ePo=o(" (MobileBERT model)"),oPo=l(),l2=a("li"),Efe=a("strong"),rPo=o("mpnet"),tPo=o(" \u2014 "),FG=a("a"),aPo=o("MPNetForTokenClassification"),nPo=o(" (MPNet model)"),sPo=l(),i2=a("li"),Cfe=a("strong"),lPo=o("nystromformer"),iPo=o(" \u2014 "),TG=a("a"),dPo=o("NystromformerForTokenClassification"),cPo=o(" (Nystromformer model)"),fPo=l(),d2=a("li"),wfe=a("strong"),mPo=o("qdqbert"),gPo=o(" \u2014 "),MG=a("a"),hPo=o("QDQBertForTokenClassification"),pPo=o(" (QDQBert model)"),uPo=l(),c2=a("li"),Afe=a("strong"),_Po=o("rembert"),bPo=o(" \u2014 "),EG=a("a"),vPo=o("RemBertForTokenClassification"),FPo=o(" (RemBERT model)"),TPo=l(),f2=a("li"),yfe=a("strong"),MPo=o("roberta"),EPo=o(" \u2014 "),CG=a("a"),CPo=o("RobertaForTokenClassification"),wPo=o(" (RoBERTa model)"),APo=l(),m2=a("li"),Lfe=a("strong"),yPo=o("roformer"),LPo=o(" \u2014 "),wG=a("a"),xPo=o("RoFormerForTokenClassification"),$Po=o(" (RoFormer model)"),kPo=l(),g2=a("li"),xfe=a("strong"),SPo=o("squeezebert"),RPo=o(" \u2014 "),AG=a("a"),BPo=o("SqueezeBertForTokenClassification"),PPo=o(" (SqueezeBERT model)"),IPo=l(),h2=a("li"),$fe=a("strong"),qPo=o("xlm"),NPo=o(" \u2014 "),yG=a("a"),jPo=o("XLMForTokenClassification"),DPo=o(" (XLM model)"),GPo=l(),p2=a("li"),kfe=a("strong"),OPo=o("xlm-roberta"),VPo=o(" \u2014 "),LG=a("a"),XPo=o("XLMRobertaForTokenClassification"),zPo=o(" (XLM-RoBERTa model)"),QPo=l(),u2=a("li"),Sfe=a("strong"),WPo=o("xlm-roberta-xl"),HPo=o(" \u2014 "),xG=a("a"),UPo=o("XLMRobertaXLForTokenClassification"),JPo=o(" (XLM-RoBERTa-XL model)"),YPo=l(),_2=a("li"),Rfe=a("strong"),KPo=o("xlnet"),ZPo=o(" \u2014 "),$G=a("a"),eIo=o("XLNetForTokenClassification"),oIo=o(" (XLNet model)"),rIo=l(),b2=a("li"),Bfe=a("strong"),tIo=o("yoso"),aIo=o(" \u2014 "),kG=a("a"),nIo=o("YosoForTokenClassification"),sIo=o(" (YOSO model)"),lIo=l(),v2=a("p"),iIo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),dIo=o("model.eval()"),cIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=a("code"),fIo=o("model.train()"),mIo=l(),F(F2.$$.fragment),FBe=l(),Oi=a("h2"),T2=a("a"),qfe=a("span"),F(B6.$$.fragment),gIo=l(),Nfe=a("span"),hIo=o("AutoModelForQuestionAnswering"),TBe=l(),Po=a("div"),F(P6.$$.fragment),pIo=l(),Vi=a("p"),uIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SG=a("a"),_Io=o("from_pretrained()"),bIo=o(" class method or the "),RG=a("a"),vIo=o("from_config()"),FIo=o(` class
method.`),TIo=l(),I6=a("p"),MIo=o("This class cannot be instantiated directly using "),jfe=a("code"),EIo=o("__init__()"),CIo=o(" (throws an error)."),wIo=l(),lt=a("div"),F(q6.$$.fragment),AIo=l(),Dfe=a("p"),yIo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),LIo=l(),Xi=a("p"),xIo=o(`Note:
Loading a model from its configuration file does `),Gfe=a("strong"),$Io=o("not"),kIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=a("a"),SIo=o("from_pretrained()"),RIo=o(" to load the model weights."),BIo=l(),F(M2.$$.fragment),PIo=l(),oo=a("div"),F(N6.$$.fragment),IIo=l(),Ofe=a("p"),qIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),NIo=l(),ka=a("p"),jIo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),DIo=o("model_type"),GIo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),OIo=o("pretrained_model_name_or_path"),VIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),XIo=o("pretrained_model_name_or_path"),zIo=o(":"),QIo=l(),O=a("ul"),E2=a("li"),Qfe=a("strong"),WIo=o("albert"),HIo=o(" \u2014 "),PG=a("a"),UIo=o("AlbertForQuestionAnswering"),JIo=o(" (ALBERT model)"),YIo=l(),C2=a("li"),Wfe=a("strong"),KIo=o("bart"),ZIo=o(" \u2014 "),IG=a("a"),eqo=o("BartForQuestionAnswering"),oqo=o(" (BART model)"),rqo=l(),w2=a("li"),Hfe=a("strong"),tqo=o("bert"),aqo=o(" \u2014 "),qG=a("a"),nqo=o("BertForQuestionAnswering"),sqo=o(" (BERT model)"),lqo=l(),A2=a("li"),Ufe=a("strong"),iqo=o("big_bird"),dqo=o(" \u2014 "),NG=a("a"),cqo=o("BigBirdForQuestionAnswering"),fqo=o(" (BigBird model)"),mqo=l(),y2=a("li"),Jfe=a("strong"),gqo=o("bigbird_pegasus"),hqo=o(" \u2014 "),jG=a("a"),pqo=o("BigBirdPegasusForQuestionAnswering"),uqo=o(" (BigBirdPegasus model)"),_qo=l(),L2=a("li"),Yfe=a("strong"),bqo=o("camembert"),vqo=o(" \u2014 "),DG=a("a"),Fqo=o("CamembertForQuestionAnswering"),Tqo=o(" (CamemBERT model)"),Mqo=l(),x2=a("li"),Kfe=a("strong"),Eqo=o("canine"),Cqo=o(" \u2014 "),GG=a("a"),wqo=o("CanineForQuestionAnswering"),Aqo=o(" (Canine model)"),yqo=l(),$2=a("li"),Zfe=a("strong"),Lqo=o("convbert"),xqo=o(" \u2014 "),OG=a("a"),$qo=o("ConvBertForQuestionAnswering"),kqo=o(" (ConvBERT model)"),Sqo=l(),k2=a("li"),eme=a("strong"),Rqo=o("data2vec-text"),Bqo=o(" \u2014 "),VG=a("a"),Pqo=o("Data2VecTextForQuestionAnswering"),Iqo=o(" (Data2VecText model)"),qqo=l(),S2=a("li"),ome=a("strong"),Nqo=o("deberta"),jqo=o(" \u2014 "),XG=a("a"),Dqo=o("DebertaForQuestionAnswering"),Gqo=o(" (DeBERTa model)"),Oqo=l(),R2=a("li"),rme=a("strong"),Vqo=o("deberta-v2"),Xqo=o(" \u2014 "),zG=a("a"),zqo=o("DebertaV2ForQuestionAnswering"),Qqo=o(" (DeBERTa-v2 model)"),Wqo=l(),B2=a("li"),tme=a("strong"),Hqo=o("distilbert"),Uqo=o(" \u2014 "),QG=a("a"),Jqo=o("DistilBertForQuestionAnswering"),Yqo=o(" (DistilBERT model)"),Kqo=l(),P2=a("li"),ame=a("strong"),Zqo=o("electra"),eNo=o(" \u2014 "),WG=a("a"),oNo=o("ElectraForQuestionAnswering"),rNo=o(" (ELECTRA model)"),tNo=l(),I2=a("li"),nme=a("strong"),aNo=o("flaubert"),nNo=o(" \u2014 "),HG=a("a"),sNo=o("FlaubertForQuestionAnsweringSimple"),lNo=o(" (FlauBERT model)"),iNo=l(),q2=a("li"),sme=a("strong"),dNo=o("fnet"),cNo=o(" \u2014 "),UG=a("a"),fNo=o("FNetForQuestionAnswering"),mNo=o(" (FNet model)"),gNo=l(),N2=a("li"),lme=a("strong"),hNo=o("funnel"),pNo=o(" \u2014 "),JG=a("a"),uNo=o("FunnelForQuestionAnswering"),_No=o(" (Funnel Transformer model)"),bNo=l(),j2=a("li"),ime=a("strong"),vNo=o("gptj"),FNo=o(" \u2014 "),YG=a("a"),TNo=o("GPTJForQuestionAnswering"),MNo=o(" (GPT-J model)"),ENo=l(),D2=a("li"),dme=a("strong"),CNo=o("ibert"),wNo=o(" \u2014 "),KG=a("a"),ANo=o("IBertForQuestionAnswering"),yNo=o(" (I-BERT model)"),LNo=l(),G2=a("li"),cme=a("strong"),xNo=o("layoutlmv2"),$No=o(" \u2014 "),ZG=a("a"),kNo=o("LayoutLMv2ForQuestionAnswering"),SNo=o(" (LayoutLMv2 model)"),RNo=l(),O2=a("li"),fme=a("strong"),BNo=o("led"),PNo=o(" \u2014 "),eO=a("a"),INo=o("LEDForQuestionAnswering"),qNo=o(" (LED model)"),NNo=l(),V2=a("li"),mme=a("strong"),jNo=o("longformer"),DNo=o(" \u2014 "),oO=a("a"),GNo=o("LongformerForQuestionAnswering"),ONo=o(" (Longformer model)"),VNo=l(),X2=a("li"),gme=a("strong"),XNo=o("lxmert"),zNo=o(" \u2014 "),rO=a("a"),QNo=o("LxmertForQuestionAnswering"),WNo=o(" (LXMERT model)"),HNo=l(),z2=a("li"),hme=a("strong"),UNo=o("mbart"),JNo=o(" \u2014 "),tO=a("a"),YNo=o("MBartForQuestionAnswering"),KNo=o(" (mBART model)"),ZNo=l(),Q2=a("li"),pme=a("strong"),ejo=o("megatron-bert"),ojo=o(" \u2014 "),aO=a("a"),rjo=o("MegatronBertForQuestionAnswering"),tjo=o(" (MegatronBert model)"),ajo=l(),W2=a("li"),ume=a("strong"),njo=o("mobilebert"),sjo=o(" \u2014 "),nO=a("a"),ljo=o("MobileBertForQuestionAnswering"),ijo=o(" (MobileBERT model)"),djo=l(),H2=a("li"),_me=a("strong"),cjo=o("mpnet"),fjo=o(" \u2014 "),sO=a("a"),mjo=o("MPNetForQuestionAnswering"),gjo=o(" (MPNet model)"),hjo=l(),U2=a("li"),bme=a("strong"),pjo=o("nystromformer"),ujo=o(" \u2014 "),lO=a("a"),_jo=o("NystromformerForQuestionAnswering"),bjo=o(" (Nystromformer model)"),vjo=l(),J2=a("li"),vme=a("strong"),Fjo=o("qdqbert"),Tjo=o(" \u2014 "),iO=a("a"),Mjo=o("QDQBertForQuestionAnswering"),Ejo=o(" (QDQBert model)"),Cjo=l(),Y2=a("li"),Fme=a("strong"),wjo=o("reformer"),Ajo=o(" \u2014 "),dO=a("a"),yjo=o("ReformerForQuestionAnswering"),Ljo=o(" (Reformer model)"),xjo=l(),K2=a("li"),Tme=a("strong"),$jo=o("rembert"),kjo=o(" \u2014 "),cO=a("a"),Sjo=o("RemBertForQuestionAnswering"),Rjo=o(" (RemBERT model)"),Bjo=l(),Z2=a("li"),Mme=a("strong"),Pjo=o("roberta"),Ijo=o(" \u2014 "),fO=a("a"),qjo=o("RobertaForQuestionAnswering"),Njo=o(" (RoBERTa model)"),jjo=l(),e5=a("li"),Eme=a("strong"),Djo=o("roformer"),Gjo=o(" \u2014 "),mO=a("a"),Ojo=o("RoFormerForQuestionAnswering"),Vjo=o(" (RoFormer model)"),Xjo=l(),o5=a("li"),Cme=a("strong"),zjo=o("splinter"),Qjo=o(" \u2014 "),gO=a("a"),Wjo=o("SplinterForQuestionAnswering"),Hjo=o(" (Splinter model)"),Ujo=l(),r5=a("li"),wme=a("strong"),Jjo=o("squeezebert"),Yjo=o(" \u2014 "),hO=a("a"),Kjo=o("SqueezeBertForQuestionAnswering"),Zjo=o(" (SqueezeBERT model)"),eDo=l(),t5=a("li"),Ame=a("strong"),oDo=o("xlm"),rDo=o(" \u2014 "),pO=a("a"),tDo=o("XLMForQuestionAnsweringSimple"),aDo=o(" (XLM model)"),nDo=l(),a5=a("li"),yme=a("strong"),sDo=o("xlm-roberta"),lDo=o(" \u2014 "),uO=a("a"),iDo=o("XLMRobertaForQuestionAnswering"),dDo=o(" (XLM-RoBERTa model)"),cDo=l(),n5=a("li"),Lme=a("strong"),fDo=o("xlm-roberta-xl"),mDo=o(" \u2014 "),_O=a("a"),gDo=o("XLMRobertaXLForQuestionAnswering"),hDo=o(" (XLM-RoBERTa-XL model)"),pDo=l(),s5=a("li"),xme=a("strong"),uDo=o("xlnet"),_Do=o(" \u2014 "),bO=a("a"),bDo=o("XLNetForQuestionAnsweringSimple"),vDo=o(" (XLNet model)"),FDo=l(),l5=a("li"),$me=a("strong"),TDo=o("yoso"),MDo=o(" \u2014 "),vO=a("a"),EDo=o("YosoForQuestionAnswering"),CDo=o(" (YOSO model)"),wDo=l(),i5=a("p"),ADo=o("The model is set in evaluation mode by default using "),kme=a("code"),yDo=o("model.eval()"),LDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),xDo=o("model.train()"),$Do=l(),F(d5.$$.fragment),MBe=l(),zi=a("h2"),c5=a("a"),Rme=a("span"),F(j6.$$.fragment),kDo=l(),Bme=a("span"),SDo=o("AutoModelForTableQuestionAnswering"),EBe=l(),Io=a("div"),F(D6.$$.fragment),RDo=l(),Qi=a("p"),BDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FO=a("a"),PDo=o("from_pretrained()"),IDo=o(" class method or the "),TO=a("a"),qDo=o("from_config()"),NDo=o(` class
method.`),jDo=l(),G6=a("p"),DDo=o("This class cannot be instantiated directly using "),Pme=a("code"),GDo=o("__init__()"),ODo=o(" (throws an error)."),VDo=l(),it=a("div"),F(O6.$$.fragment),XDo=l(),Ime=a("p"),zDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),QDo=l(),Wi=a("p"),WDo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),HDo=o("not"),UDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=a("a"),JDo=o("from_pretrained()"),YDo=o(" to load the model weights."),KDo=l(),F(f5.$$.fragment),ZDo=l(),ro=a("div"),F(V6.$$.fragment),eGo=l(),Nme=a("p"),oGo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rGo=l(),Sa=a("p"),tGo=o("The model class to instantiate is selected based on the "),jme=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),Ome=a("ul"),m5=a("li"),Vme=a("strong"),fGo=o("tapas"),mGo=o(" \u2014 "),EO=a("a"),gGo=o("TapasForQuestionAnswering"),hGo=o(" (TAPAS model)"),pGo=l(),g5=a("p"),uGo=o("The model is set in evaluation mode by default using "),Xme=a("code"),_Go=o("model.eval()"),bGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=a("code"),vGo=o("model.train()"),FGo=l(),F(h5.$$.fragment),CBe=l(),Hi=a("h2"),p5=a("a"),Qme=a("span"),F(X6.$$.fragment),TGo=l(),Wme=a("span"),MGo=o("AutoModelForImageClassification"),wBe=l(),qo=a("div"),F(z6.$$.fragment),EGo=l(),Ui=a("p"),CGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CO=a("a"),wGo=o("from_pretrained()"),AGo=o(" class method or the "),wO=a("a"),yGo=o("from_config()"),LGo=o(` class
method.`),xGo=l(),Q6=a("p"),$Go=o("This class cannot be instantiated directly using "),Hme=a("code"),kGo=o("__init__()"),SGo=o(" (throws an error)."),RGo=l(),dt=a("div"),F(W6.$$.fragment),BGo=l(),Ume=a("p"),PGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),IGo=l(),Ji=a("p"),qGo=o(`Note:
Loading a model from its configuration file does `),Jme=a("strong"),NGo=o("not"),jGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),DGo=o("from_pretrained()"),GGo=o(" to load the model weights."),OGo=l(),F(u5.$$.fragment),VGo=l(),to=a("div"),F(H6.$$.fragment),XGo=l(),Yme=a("p"),zGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),QGo=l(),Ra=a("p"),WGo=o("The model class to instantiate is selected based on the "),Kme=a("code"),HGo=o("model_type"),UGo=o(` property of the config object (either
passed as an argument or loaded from `),Zme=a("code"),JGo=o("pretrained_model_name_or_path"),YGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=a("code"),KGo=o("pretrained_model_name_or_path"),ZGo=o(":"),eOo=l(),ve=a("ul"),_5=a("li"),oge=a("strong"),oOo=o("beit"),rOo=o(" \u2014 "),yO=a("a"),tOo=o("BeitForImageClassification"),aOo=o(" (BEiT model)"),nOo=l(),b5=a("li"),rge=a("strong"),sOo=o("convnext"),lOo=o(" \u2014 "),LO=a("a"),iOo=o("ConvNextForImageClassification"),dOo=o(" (ConvNext model)"),cOo=l(),v5=a("li"),tge=a("strong"),fOo=o("data2vec-vision"),mOo=o(" \u2014 "),xO=a("a"),gOo=o("Data2VecVisionForImageClassification"),hOo=o(" (Data2VecVision model)"),pOo=l(),Ls=a("li"),age=a("strong"),uOo=o("deit"),_Oo=o(" \u2014 "),$O=a("a"),bOo=o("DeiTForImageClassification"),vOo=o(" or "),kO=a("a"),FOo=o("DeiTForImageClassificationWithTeacher"),TOo=o(" (DeiT model)"),MOo=l(),F5=a("li"),nge=a("strong"),EOo=o("imagegpt"),COo=o(" \u2014 "),SO=a("a"),wOo=o("ImageGPTForImageClassification"),AOo=o(" (ImageGPT model)"),yOo=l(),ct=a("li"),sge=a("strong"),LOo=o("perceiver"),xOo=o(" \u2014 "),RO=a("a"),$Oo=o("PerceiverForImageClassificationLearned"),kOo=o(" or "),BO=a("a"),SOo=o("PerceiverForImageClassificationFourier"),ROo=o(" or "),PO=a("a"),BOo=o("PerceiverForImageClassificationConvProcessing"),POo=o(" (Perceiver model)"),IOo=l(),T5=a("li"),lge=a("strong"),qOo=o("poolformer"),NOo=o(" \u2014 "),IO=a("a"),jOo=o("PoolFormerForImageClassification"),DOo=o(" (PoolFormer model)"),GOo=l(),M5=a("li"),ige=a("strong"),OOo=o("regnet"),VOo=o(" \u2014 "),qO=a("a"),XOo=o("RegNetForImageClassification"),zOo=o(" (RegNet model)"),QOo=l(),E5=a("li"),dge=a("strong"),WOo=o("resnet"),HOo=o(" \u2014 "),NO=a("a"),UOo=o("ResNetForImageClassification"),JOo=o(" (ResNet model)"),YOo=l(),C5=a("li"),cge=a("strong"),KOo=o("segformer"),ZOo=o(" \u2014 "),jO=a("a"),eVo=o("SegformerForImageClassification"),oVo=o(" (SegFormer model)"),rVo=l(),w5=a("li"),fge=a("strong"),tVo=o("swin"),aVo=o(" \u2014 "),DO=a("a"),nVo=o("SwinForImageClassification"),sVo=o(" (Swin model)"),lVo=l(),A5=a("li"),mge=a("strong"),iVo=o("van"),dVo=o(" \u2014 "),GO=a("a"),cVo=o("VanForImageClassification"),fVo=o(" (VAN model)"),mVo=l(),y5=a("li"),gge=a("strong"),gVo=o("vit"),hVo=o(" \u2014 "),OO=a("a"),pVo=o("ViTForImageClassification"),uVo=o(" (ViT model)"),_Vo=l(),L5=a("p"),bVo=o("The model is set in evaluation mode by default using "),hge=a("code"),vVo=o("model.eval()"),FVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),TVo=o("model.train()"),MVo=l(),F(x5.$$.fragment),ABe=l(),Yi=a("h2"),$5=a("a"),uge=a("span"),F(U6.$$.fragment),EVo=l(),_ge=a("span"),CVo=o("AutoModelForVision2Seq"),yBe=l(),No=a("div"),F(J6.$$.fragment),wVo=l(),Ki=a("p"),AVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VO=a("a"),yVo=o("from_pretrained()"),LVo=o(" class method or the "),XO=a("a"),xVo=o("from_config()"),$Vo=o(` class
method.`),kVo=l(),Y6=a("p"),SVo=o("This class cannot be instantiated directly using "),bge=a("code"),RVo=o("__init__()"),BVo=o(" (throws an error)."),PVo=l(),ft=a("div"),F(K6.$$.fragment),IVo=l(),vge=a("p"),qVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NVo=l(),Zi=a("p"),jVo=o(`Note:
Loading a model from its configuration file does `),Fge=a("strong"),DVo=o("not"),GVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=a("a"),OVo=o("from_pretrained()"),VVo=o(" to load the model weights."),XVo=l(),F(k5.$$.fragment),zVo=l(),ao=a("div"),F(Z6.$$.fragment),QVo=l(),Tge=a("p"),WVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),HVo=l(),Ba=a("p"),UVo=o("The model class to instantiate is selected based on the "),Mge=a("code"),JVo=o("model_type"),YVo=o(` property of the config object (either
passed as an argument or loaded from `),Ege=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=a("code"),eXo=o("pretrained_model_name_or_path"),oXo=o(":"),rXo=l(),wge=a("ul"),S5=a("li"),Age=a("strong"),tXo=o("vision-encoder-decoder"),aXo=o(" \u2014 "),QO=a("a"),nXo=o("VisionEncoderDecoderModel"),sXo=o(" (Vision Encoder decoder model)"),lXo=l(),R5=a("p"),iXo=o("The model is set in evaluation mode by default using "),yge=a("code"),dXo=o("model.eval()"),cXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=a("code"),fXo=o("model.train()"),mXo=l(),F(B5.$$.fragment),LBe=l(),ed=a("h2"),P5=a("a"),xge=a("span"),F(ey.$$.fragment),gXo=l(),$ge=a("span"),hXo=o("AutoModelForAudioClassification"),xBe=l(),jo=a("div"),F(oy.$$.fragment),pXo=l(),od=a("p"),uXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WO=a("a"),_Xo=o("from_pretrained()"),bXo=o(" class method or the "),HO=a("a"),vXo=o("from_config()"),FXo=o(` class
method.`),TXo=l(),ry=a("p"),MXo=o("This class cannot be instantiated directly using "),kge=a("code"),EXo=o("__init__()"),CXo=o(" (throws an error)."),wXo=l(),mt=a("div"),F(ty.$$.fragment),AXo=l(),Sge=a("p"),yXo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LXo=l(),rd=a("p"),xXo=o(`Note:
Loading a model from its configuration file does `),Rge=a("strong"),$Xo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=a("a"),SXo=o("from_pretrained()"),RXo=o(" to load the model weights."),BXo=l(),F(I5.$$.fragment),PXo=l(),no=a("div"),F(ay.$$.fragment),IXo=l(),Bge=a("p"),qXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),NXo=l(),Pa=a("p"),jXo=o("The model class to instantiate is selected based on the "),Pge=a("code"),DXo=o("model_type"),GXo=o(` property of the config object (either
passed as an argument or loaded from `),Ige=a("code"),OXo=o("pretrained_model_name_or_path"),VXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),XXo=o("pretrained_model_name_or_path"),zXo=o(":"),QXo=l(),qe=a("ul"),q5=a("li"),Nge=a("strong"),WXo=o("data2vec-audio"),HXo=o(" \u2014 "),JO=a("a"),UXo=o("Data2VecAudioForSequenceClassification"),JXo=o(" (Data2VecAudio model)"),YXo=l(),N5=a("li"),jge=a("strong"),KXo=o("hubert"),ZXo=o(" \u2014 "),YO=a("a"),ezo=o("HubertForSequenceClassification"),ozo=o(" (Hubert model)"),rzo=l(),j5=a("li"),Dge=a("strong"),tzo=o("sew"),azo=o(" \u2014 "),KO=a("a"),nzo=o("SEWForSequenceClassification"),szo=o(" (SEW model)"),lzo=l(),D5=a("li"),Gge=a("strong"),izo=o("sew-d"),dzo=o(" \u2014 "),ZO=a("a"),czo=o("SEWDForSequenceClassification"),fzo=o(" (SEW-D model)"),mzo=l(),G5=a("li"),Oge=a("strong"),gzo=o("unispeech"),hzo=o(" \u2014 "),eV=a("a"),pzo=o("UniSpeechForSequenceClassification"),uzo=o(" (UniSpeech model)"),_zo=l(),O5=a("li"),Vge=a("strong"),bzo=o("unispeech-sat"),vzo=o(" \u2014 "),oV=a("a"),Fzo=o("UniSpeechSatForSequenceClassification"),Tzo=o(" (UniSpeechSat model)"),Mzo=l(),V5=a("li"),Xge=a("strong"),Ezo=o("wav2vec2"),Czo=o(" \u2014 "),rV=a("a"),wzo=o("Wav2Vec2ForSequenceClassification"),Azo=o(" (Wav2Vec2 model)"),yzo=l(),X5=a("li"),zge=a("strong"),Lzo=o("wavlm"),xzo=o(" \u2014 "),tV=a("a"),$zo=o("WavLMForSequenceClassification"),kzo=o(" (WavLM model)"),Szo=l(),z5=a("p"),Rzo=o("The model is set in evaluation mode by default using "),Qge=a("code"),Bzo=o("model.eval()"),Pzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),Izo=o("model.train()"),qzo=l(),F(Q5.$$.fragment),$Be=l(),td=a("h2"),W5=a("a"),Hge=a("span"),F(ny.$$.fragment),Nzo=l(),Uge=a("span"),jzo=o("AutoModelForAudioFrameClassification"),kBe=l(),Do=a("div"),F(sy.$$.fragment),Dzo=l(),ad=a("p"),Gzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aV=a("a"),Ozo=o("from_pretrained()"),Vzo=o(" class method or the "),nV=a("a"),Xzo=o("from_config()"),zzo=o(` class
method.`),Qzo=l(),ly=a("p"),Wzo=o("This class cannot be instantiated directly using "),Jge=a("code"),Hzo=o("__init__()"),Uzo=o(" (throws an error)."),Jzo=l(),gt=a("div"),F(iy.$$.fragment),Yzo=l(),Yge=a("p"),Kzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Zzo=l(),nd=a("p"),eQo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),oQo=o("not"),rQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),tQo=o("from_pretrained()"),aQo=o(" to load the model weights."),nQo=l(),F(H5.$$.fragment),sQo=l(),so=a("div"),F(dy.$$.fragment),lQo=l(),Zge=a("p"),iQo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),dQo=l(),Ia=a("p"),cQo=o("The model class to instantiate is selected based on the "),ehe=a("code"),fQo=o("model_type"),mQo=o(` property of the config object (either
passed as an argument or loaded from `),ohe=a("code"),gQo=o("pretrained_model_name_or_path"),hQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=a("code"),pQo=o("pretrained_model_name_or_path"),uQo=o(":"),_Qo=l(),qa=a("ul"),U5=a("li"),the=a("strong"),bQo=o("data2vec-audio"),vQo=o(" \u2014 "),lV=a("a"),FQo=o("Data2VecAudioForAudioFrameClassification"),TQo=o(" (Data2VecAudio model)"),MQo=l(),J5=a("li"),ahe=a("strong"),EQo=o("unispeech-sat"),CQo=o(" \u2014 "),iV=a("a"),wQo=o("UniSpeechSatForAudioFrameClassification"),AQo=o(" (UniSpeechSat model)"),yQo=l(),Y5=a("li"),nhe=a("strong"),LQo=o("wav2vec2"),xQo=o(" \u2014 "),dV=a("a"),$Qo=o("Wav2Vec2ForAudioFrameClassification"),kQo=o(" (Wav2Vec2 model)"),SQo=l(),K5=a("li"),she=a("strong"),RQo=o("wavlm"),BQo=o(" \u2014 "),cV=a("a"),PQo=o("WavLMForAudioFrameClassification"),IQo=o(" (WavLM model)"),qQo=l(),Z5=a("p"),NQo=o("The model is set in evaluation mode by default using "),lhe=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=a("code"),GQo=o("model.train()"),OQo=l(),F(ev.$$.fragment),SBe=l(),sd=a("h2"),ov=a("a"),dhe=a("span"),F(cy.$$.fragment),VQo=l(),che=a("span"),XQo=o("AutoModelForCTC"),RBe=l(),Go=a("div"),F(fy.$$.fragment),zQo=l(),ld=a("p"),QQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fV=a("a"),WQo=o("from_pretrained()"),HQo=o(" class method or the "),mV=a("a"),UQo=o("from_config()"),JQo=o(` class
method.`),YQo=l(),my=a("p"),KQo=o("This class cannot be instantiated directly using "),fhe=a("code"),ZQo=o("__init__()"),eWo=o(" (throws an error)."),oWo=l(),ht=a("div"),F(gy.$$.fragment),rWo=l(),mhe=a("p"),tWo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),aWo=l(),id=a("p"),nWo=o(`Note:
Loading a model from its configuration file does `),ghe=a("strong"),sWo=o("not"),lWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),iWo=o("from_pretrained()"),dWo=o(" to load the model weights."),cWo=l(),F(rv.$$.fragment),fWo=l(),lo=a("div"),F(hy.$$.fragment),mWo=l(),hhe=a("p"),gWo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hWo=l(),Na=a("p"),pWo=o("The model class to instantiate is selected based on the "),phe=a("code"),uWo=o("model_type"),_Wo=o(` property of the config object (either
passed as an argument or loaded from `),uhe=a("code"),bWo=o("pretrained_model_name_or_path"),vWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=a("code"),FWo=o("pretrained_model_name_or_path"),TWo=o(":"),MWo=l(),Ne=a("ul"),tv=a("li"),bhe=a("strong"),EWo=o("data2vec-audio"),CWo=o(" \u2014 "),hV=a("a"),wWo=o("Data2VecAudioForCTC"),AWo=o(" (Data2VecAudio model)"),yWo=l(),av=a("li"),vhe=a("strong"),LWo=o("hubert"),xWo=o(" \u2014 "),pV=a("a"),$Wo=o("HubertForCTC"),kWo=o(" (Hubert model)"),SWo=l(),nv=a("li"),Fhe=a("strong"),RWo=o("sew"),BWo=o(" \u2014 "),uV=a("a"),PWo=o("SEWForCTC"),IWo=o(" (SEW model)"),qWo=l(),sv=a("li"),The=a("strong"),NWo=o("sew-d"),jWo=o(" \u2014 "),_V=a("a"),DWo=o("SEWDForCTC"),GWo=o(" (SEW-D model)"),OWo=l(),lv=a("li"),Mhe=a("strong"),VWo=o("unispeech"),XWo=o(" \u2014 "),bV=a("a"),zWo=o("UniSpeechForCTC"),QWo=o(" (UniSpeech model)"),WWo=l(),iv=a("li"),Ehe=a("strong"),HWo=o("unispeech-sat"),UWo=o(" \u2014 "),vV=a("a"),JWo=o("UniSpeechSatForCTC"),YWo=o(" (UniSpeechSat model)"),KWo=l(),dv=a("li"),Che=a("strong"),ZWo=o("wav2vec2"),eHo=o(" \u2014 "),FV=a("a"),oHo=o("Wav2Vec2ForCTC"),rHo=o(" (Wav2Vec2 model)"),tHo=l(),cv=a("li"),whe=a("strong"),aHo=o("wavlm"),nHo=o(" \u2014 "),TV=a("a"),sHo=o("WavLMForCTC"),lHo=o(" (WavLM model)"),iHo=l(),fv=a("p"),dHo=o("The model is set in evaluation mode by default using "),Ahe=a("code"),cHo=o("model.eval()"),fHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=a("code"),mHo=o("model.train()"),gHo=l(),F(mv.$$.fragment),BBe=l(),dd=a("h2"),gv=a("a"),Lhe=a("span"),F(py.$$.fragment),hHo=l(),xhe=a("span"),pHo=o("AutoModelForSpeechSeq2Seq"),PBe=l(),Oo=a("div"),F(uy.$$.fragment),uHo=l(),cd=a("p"),_Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MV=a("a"),bHo=o("from_pretrained()"),vHo=o(" class method or the "),EV=a("a"),FHo=o("from_config()"),THo=o(` class
method.`),MHo=l(),_y=a("p"),EHo=o("This class cannot be instantiated directly using "),$he=a("code"),CHo=o("__init__()"),wHo=o(" (throws an error)."),AHo=l(),pt=a("div"),F(by.$$.fragment),yHo=l(),khe=a("p"),LHo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xHo=l(),fd=a("p"),$Ho=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),kHo=o("not"),SHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),RHo=o("from_pretrained()"),BHo=o(" to load the model weights."),PHo=l(),F(hv.$$.fragment),IHo=l(),io=a("div"),F(vy.$$.fragment),qHo=l(),Rhe=a("p"),NHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jHo=l(),ja=a("p"),DHo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),GHo=o("model_type"),OHo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),VHo=o("pretrained_model_name_or_path"),XHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(":"),WHo=l(),Fy=a("ul"),pv=a("li"),qhe=a("strong"),HHo=o("speech-encoder-decoder"),UHo=o(" \u2014 "),wV=a("a"),JHo=o("SpeechEncoderDecoderModel"),YHo=o(" (Speech Encoder decoder model)"),KHo=l(),uv=a("li"),Nhe=a("strong"),ZHo=o("speech_to_text"),eUo=o(" \u2014 "),AV=a("a"),oUo=o("Speech2TextForConditionalGeneration"),rUo=o(" (Speech2Text model)"),tUo=l(),_v=a("p"),aUo=o("The model is set in evaluation mode by default using "),jhe=a("code"),nUo=o("model.eval()"),sUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),lUo=o("model.train()"),iUo=l(),F(bv.$$.fragment),IBe=l(),md=a("h2"),vv=a("a"),Ghe=a("span"),F(Ty.$$.fragment),dUo=l(),Ohe=a("span"),cUo=o("AutoModelForAudioXVector"),qBe=l(),Vo=a("div"),F(My.$$.fragment),fUo=l(),gd=a("p"),mUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yV=a("a"),gUo=o("from_pretrained()"),hUo=o(" class method or the "),LV=a("a"),pUo=o("from_config()"),uUo=o(` class
method.`),_Uo=l(),Ey=a("p"),bUo=o("This class cannot be instantiated directly using "),Vhe=a("code"),vUo=o("__init__()"),FUo=o(" (throws an error)."),TUo=l(),ut=a("div"),F(Cy.$$.fragment),MUo=l(),Xhe=a("p"),EUo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),CUo=l(),hd=a("p"),wUo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),AUo=o("not"),yUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),LUo=o("from_pretrained()"),xUo=o(" to load the model weights."),$Uo=l(),F(Fv.$$.fragment),kUo=l(),co=a("div"),F(wy.$$.fragment),SUo=l(),Qhe=a("p"),RUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),BUo=l(),Da=a("p"),PUo=o("The model class to instantiate is selected based on the "),Whe=a("code"),IUo=o("model_type"),qUo=o(` property of the config object (either
passed as an argument or loaded from `),Hhe=a("code"),NUo=o("pretrained_model_name_or_path"),jUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=a("code"),DUo=o("pretrained_model_name_or_path"),GUo=o(":"),OUo=l(),Ga=a("ul"),Tv=a("li"),Jhe=a("strong"),VUo=o("data2vec-audio"),XUo=o(" \u2014 "),$V=a("a"),zUo=o("Data2VecAudioForXVector"),QUo=o(" (Data2VecAudio model)"),WUo=l(),Mv=a("li"),Yhe=a("strong"),HUo=o("unispeech-sat"),UUo=o(" \u2014 "),kV=a("a"),JUo=o("UniSpeechSatForXVector"),YUo=o(" (UniSpeechSat model)"),KUo=l(),Ev=a("li"),Khe=a("strong"),ZUo=o("wav2vec2"),eJo=o(" \u2014 "),SV=a("a"),oJo=o("Wav2Vec2ForXVector"),rJo=o(" (Wav2Vec2 model)"),tJo=l(),Cv=a("li"),Zhe=a("strong"),aJo=o("wavlm"),nJo=o(" \u2014 "),RV=a("a"),sJo=o("WavLMForXVector"),lJo=o(" (WavLM model)"),iJo=l(),wv=a("p"),dJo=o("The model is set in evaluation mode by default using "),epe=a("code"),cJo=o("model.eval()"),fJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),mJo=o("model.train()"),gJo=l(),F(Av.$$.fragment),NBe=l(),pd=a("h2"),yv=a("a"),rpe=a("span"),F(Ay.$$.fragment),hJo=l(),tpe=a("span"),pJo=o("AutoModelForMaskedImageModeling"),jBe=l(),Xo=a("div"),F(yy.$$.fragment),uJo=l(),ud=a("p"),_Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BV=a("a"),bJo=o("from_pretrained()"),vJo=o(" class method or the "),PV=a("a"),FJo=o("from_config()"),TJo=o(` class
method.`),MJo=l(),Ly=a("p"),EJo=o("This class cannot be instantiated directly using "),ape=a("code"),CJo=o("__init__()"),wJo=o(" (throws an error)."),AJo=l(),_t=a("div"),F(xy.$$.fragment),yJo=l(),npe=a("p"),LJo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),xJo=l(),_d=a("p"),$Jo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),kJo=o("not"),SJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=a("a"),RJo=o("from_pretrained()"),BJo=o(" to load the model weights."),PJo=l(),F(Lv.$$.fragment),IJo=l(),fo=a("div"),F($y.$$.fragment),qJo=l(),lpe=a("p"),NJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jJo=l(),Oa=a("p"),DJo=o("The model class to instantiate is selected based on the "),ipe=a("code"),GJo=o("model_type"),OJo=o(` property of the config object (either
passed as an argument or loaded from `),dpe=a("code"),VJo=o("pretrained_model_name_or_path"),XJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=a("code"),zJo=o("pretrained_model_name_or_path"),QJo=o(":"),WJo=l(),bd=a("ul"),xv=a("li"),fpe=a("strong"),HJo=o("deit"),UJo=o(" \u2014 "),qV=a("a"),JJo=o("DeiTForMaskedImageModeling"),YJo=o(" (DeiT model)"),KJo=l(),$v=a("li"),mpe=a("strong"),ZJo=o("swin"),eYo=o(" \u2014 "),NV=a("a"),oYo=o("SwinForMaskedImageModeling"),rYo=o(" (Swin model)"),tYo=l(),kv=a("li"),gpe=a("strong"),aYo=o("vit"),nYo=o(" \u2014 "),jV=a("a"),sYo=o("ViTForMaskedImageModeling"),lYo=o(" (ViT model)"),iYo=l(),Sv=a("p"),dYo=o("The model is set in evaluation mode by default using "),hpe=a("code"),cYo=o("model.eval()"),fYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=a("code"),mYo=o("model.train()"),gYo=l(),F(Rv.$$.fragment),DBe=l(),vd=a("h2"),Bv=a("a"),upe=a("span"),F(ky.$$.fragment),hYo=l(),_pe=a("span"),pYo=o("AutoModelForObjectDetection"),GBe=l(),zo=a("div"),F(Sy.$$.fragment),uYo=l(),Fd=a("p"),_Yo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DV=a("a"),bYo=o("from_pretrained()"),vYo=o(" class method or the "),GV=a("a"),FYo=o("from_config()"),TYo=o(` class
method.`),MYo=l(),Ry=a("p"),EYo=o("This class cannot be instantiated directly using "),bpe=a("code"),CYo=o("__init__()"),wYo=o(" (throws an error)."),AYo=l(),bt=a("div"),F(By.$$.fragment),yYo=l(),vpe=a("p"),LYo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),xYo=l(),Td=a("p"),$Yo=o(`Note:
Loading a model from its configuration file does `),Fpe=a("strong"),kYo=o("not"),SYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),RYo=o("from_pretrained()"),BYo=o(" to load the model weights."),PYo=l(),F(Pv.$$.fragment),IYo=l(),mo=a("div"),F(Py.$$.fragment),qYo=l(),Tpe=a("p"),NYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jYo=l(),Va=a("p"),DYo=o("The model class to instantiate is selected based on the "),Mpe=a("code"),GYo=o("model_type"),OYo=o(` property of the config object (either
passed as an argument or loaded from `),Epe=a("code"),VYo=o("pretrained_model_name_or_path"),XYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=a("code"),zYo=o("pretrained_model_name_or_path"),QYo=o(":"),WYo=l(),Iy=a("ul"),Iv=a("li"),wpe=a("strong"),HYo=o("detr"),UYo=o(" \u2014 "),VV=a("a"),JYo=o("DetrForObjectDetection"),YYo=o(" (DETR model)"),KYo=l(),qv=a("li"),Ape=a("strong"),ZYo=o("yolos"),eKo=o(" \u2014 "),XV=a("a"),oKo=o("YolosForObjectDetection"),rKo=o(" (YOLOS model)"),tKo=l(),Nv=a("p"),aKo=o("The model is set in evaluation mode by default using "),ype=a("code"),nKo=o("model.eval()"),sKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=a("code"),lKo=o("model.train()"),iKo=l(),F(jv.$$.fragment),OBe=l(),Md=a("h2"),Dv=a("a"),xpe=a("span"),F(qy.$$.fragment),dKo=l(),$pe=a("span"),cKo=o("AutoModelForImageSegmentation"),VBe=l(),Qo=a("div"),F(Ny.$$.fragment),fKo=l(),Ed=a("p"),mKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zV=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),QV=a("a"),pKo=o("from_config()"),uKo=o(` class
method.`),_Ko=l(),jy=a("p"),bKo=o("This class cannot be instantiated directly using "),kpe=a("code"),vKo=o("__init__()"),FKo=o(" (throws an error)."),TKo=l(),vt=a("div"),F(Dy.$$.fragment),MKo=l(),Spe=a("p"),EKo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),CKo=l(),Cd=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),Rpe=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),$Ko=l(),F(Gv.$$.fragment),kKo=l(),go=a("div"),F(Gy.$$.fragment),SKo=l(),Bpe=a("p"),RKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),BKo=l(),Xa=a("p"),PKo=o("The model class to instantiate is selected based on the "),Ppe=a("code"),IKo=o("model_type"),qKo=o(` property of the config object (either
passed as an argument or loaded from `),Ipe=a("code"),NKo=o("pretrained_model_name_or_path"),jKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(":"),OKo=l(),Npe=a("ul"),Ov=a("li"),jpe=a("strong"),VKo=o("detr"),XKo=o(" \u2014 "),HV=a("a"),zKo=o("DetrForSegmentation"),QKo=o(" (DETR model)"),WKo=l(),Vv=a("p"),HKo=o("The model is set in evaluation mode by default using "),Dpe=a("code"),UKo=o("model.eval()"),JKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=a("code"),YKo=o("model.train()"),KKo=l(),F(Xv.$$.fragment),XBe=l(),wd=a("h2"),zv=a("a"),Ope=a("span"),F(Oy.$$.fragment),ZKo=l(),Vpe=a("span"),eZo=o("AutoModelForSemanticSegmentation"),zBe=l(),Wo=a("div"),F(Vy.$$.fragment),oZo=l(),Ad=a("p"),rZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UV=a("a"),tZo=o("from_pretrained()"),aZo=o(" class method or the "),JV=a("a"),nZo=o("from_config()"),sZo=o(` class
method.`),lZo=l(),Xy=a("p"),iZo=o("This class cannot be instantiated directly using "),Xpe=a("code"),dZo=o("__init__()"),cZo=o(" (throws an error)."),fZo=l(),Ft=a("div"),F(zy.$$.fragment),mZo=l(),zpe=a("p"),gZo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hZo=l(),yd=a("p"),pZo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),uZo=o("not"),_Zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),bZo=o("from_pretrained()"),vZo=o(" to load the model weights."),FZo=l(),F(Qv.$$.fragment),TZo=l(),ho=a("div"),F(Qy.$$.fragment),MZo=l(),Wpe=a("p"),EZo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),CZo=l(),za=a("p"),wZo=o("The model class to instantiate is selected based on the "),Hpe=a("code"),AZo=o("model_type"),yZo=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),LZo=o("pretrained_model_name_or_path"),xZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),$Zo=o("pretrained_model_name_or_path"),kZo=o(":"),SZo=l(),Qa=a("ul"),Wv=a("li"),Ype=a("strong"),RZo=o("beit"),BZo=o(" \u2014 "),KV=a("a"),PZo=o("BeitForSemanticSegmentation"),IZo=o(" (BEiT model)"),qZo=l(),Hv=a("li"),Kpe=a("strong"),NZo=o("data2vec-vision"),jZo=o(" \u2014 "),ZV=a("a"),DZo=o("Data2VecVisionForSemanticSegmentation"),GZo=o(" (Data2VecVision model)"),OZo=l(),Uv=a("li"),Zpe=a("strong"),VZo=o("dpt"),XZo=o(" \u2014 "),eX=a("a"),zZo=o("DPTForSemanticSegmentation"),QZo=o(" (DPT model)"),WZo=l(),Jv=a("li"),eue=a("strong"),HZo=o("segformer"),UZo=o(" \u2014 "),oX=a("a"),JZo=o("SegformerForSemanticSegmentation"),YZo=o(" (SegFormer model)"),KZo=l(),Yv=a("p"),ZZo=o("The model is set in evaluation mode by default using "),oue=a("code"),eer=o("model.eval()"),oer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=a("code"),rer=o("model.train()"),ter=l(),F(Kv.$$.fragment),QBe=l(),Ld=a("h2"),Zv=a("a"),tue=a("span"),F(Wy.$$.fragment),aer=l(),aue=a("span"),ner=o("AutoModelForInstanceSegmentation"),WBe=l(),Ho=a("div"),F(Hy.$$.fragment),ser=l(),xd=a("p"),ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rX=a("a"),ier=o("from_pretrained()"),der=o(" class method or the "),tX=a("a"),cer=o("from_config()"),fer=o(` class
method.`),mer=l(),Uy=a("p"),ger=o("This class cannot be instantiated directly using "),nue=a("code"),her=o("__init__()"),per=o(" (throws an error)."),uer=l(),Tt=a("div"),F(Jy.$$.fragment),_er=l(),sue=a("p"),ber=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ver=l(),$d=a("p"),Fer=o(`Note:
Loading a model from its configuration file does `),lue=a("strong"),Ter=o("not"),Mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),Eer=o("from_pretrained()"),Cer=o(" to load the model weights."),wer=l(),F(eF.$$.fragment),Aer=l(),po=a("div"),F(Yy.$$.fragment),yer=l(),iue=a("p"),Ler=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xer=l(),Wa=a("p"),$er=o("The model class to instantiate is selected based on the "),due=a("code"),ker=o("model_type"),Ser=o(` property of the config object (either
passed as an argument or loaded from `),cue=a("code"),Rer=o("pretrained_model_name_or_path"),Ber=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=a("code"),Per=o("pretrained_model_name_or_path"),Ier=o(":"),qer=l(),mue=a("ul"),oF=a("li"),gue=a("strong"),Ner=o("maskformer"),jer=o(" \u2014 "),nX=a("a"),Der=o("MaskFormerForInstanceSegmentation"),Ger=o(" (MaskFormer model)"),Oer=l(),rF=a("p"),Ver=o("The model is set in evaluation mode by default using "),hue=a("code"),Xer=o("model.eval()"),zer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=a("code"),Qer=o("model.train()"),Wer=l(),F(tF.$$.fragment),HBe=l(),kd=a("h2"),aF=a("a"),uue=a("span"),F(Ky.$$.fragment),Her=l(),_ue=a("span"),Uer=o("TFAutoModel"),UBe=l(),Uo=a("div"),F(Zy.$$.fragment),Jer=l(),Sd=a("p"),Yer=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sX=a("a"),Ker=o("from_pretrained()"),Zer=o(" class method or the "),lX=a("a"),eor=o("from_config()"),oor=o(` class
method.`),ror=l(),eL=a("p"),tor=o("This class cannot be instantiated directly using "),bue=a("code"),aor=o("__init__()"),nor=o(" (throws an error)."),sor=l(),Mt=a("div"),F(oL.$$.fragment),lor=l(),vue=a("p"),ior=o("Instantiates one of the base model classes of the library from a configuration."),dor=l(),Rd=a("p"),cor=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),mor=o("not"),gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),hor=o("from_pretrained()"),por=o(" to load the model weights."),uor=l(),F(nF.$$.fragment),_or=l(),Mr=a("div"),F(rL.$$.fragment),bor=l(),Tue=a("p"),vor=o("Instantiate one of the base model classes of the library from a pretrained model."),For=l(),Ha=a("p"),Tor=o("The model class to instantiate is selected based on the "),Mue=a("code"),Mor=o("model_type"),Eor=o(` property of the config object (either
passed as an argument or loaded from `),Eue=a("code"),Cor=o("pretrained_model_name_or_path"),wor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=a("code"),Aor=o("pretrained_model_name_or_path"),yor=o(":"),Lor=l(),j=a("ul"),sF=a("li"),wue=a("strong"),xor=o("albert"),$or=o(" \u2014 "),dX=a("a"),kor=o("TFAlbertModel"),Sor=o(" (ALBERT model)"),Ror=l(),lF=a("li"),Aue=a("strong"),Bor=o("bart"),Por=o(" \u2014 "),cX=a("a"),Ior=o("TFBartModel"),qor=o(" (BART model)"),Nor=l(),iF=a("li"),yue=a("strong"),jor=o("bert"),Dor=o(" \u2014 "),fX=a("a"),Gor=o("TFBertModel"),Oor=o(" (BERT model)"),Vor=l(),dF=a("li"),Lue=a("strong"),Xor=o("blenderbot"),zor=o(" \u2014 "),mX=a("a"),Qor=o("TFBlenderbotModel"),Wor=o(" (Blenderbot model)"),Hor=l(),cF=a("li"),xue=a("strong"),Uor=o("blenderbot-small"),Jor=o(" \u2014 "),gX=a("a"),Yor=o("TFBlenderbotSmallModel"),Kor=o(" (BlenderbotSmall model)"),Zor=l(),fF=a("li"),$ue=a("strong"),err=o("camembert"),orr=o(" \u2014 "),hX=a("a"),rrr=o("TFCamembertModel"),trr=o(" (CamemBERT model)"),arr=l(),mF=a("li"),kue=a("strong"),nrr=o("clip"),srr=o(" \u2014 "),pX=a("a"),lrr=o("TFCLIPModel"),irr=o(" (CLIP model)"),drr=l(),gF=a("li"),Sue=a("strong"),crr=o("convbert"),frr=o(" \u2014 "),uX=a("a"),mrr=o("TFConvBertModel"),grr=o(" (ConvBERT model)"),hrr=l(),hF=a("li"),Rue=a("strong"),prr=o("convnext"),urr=o(" \u2014 "),_X=a("a"),_rr=o("TFConvNextModel"),brr=o(" (ConvNext model)"),vrr=l(),pF=a("li"),Bue=a("strong"),Frr=o("ctrl"),Trr=o(" \u2014 "),bX=a("a"),Mrr=o("TFCTRLModel"),Err=o(" (CTRL model)"),Crr=l(),uF=a("li"),Pue=a("strong"),wrr=o("deberta"),Arr=o(" \u2014 "),vX=a("a"),yrr=o("TFDebertaModel"),Lrr=o(" (DeBERTa model)"),xrr=l(),_F=a("li"),Iue=a("strong"),$rr=o("deberta-v2"),krr=o(" \u2014 "),FX=a("a"),Srr=o("TFDebertaV2Model"),Rrr=o(" (DeBERTa-v2 model)"),Brr=l(),bF=a("li"),que=a("strong"),Prr=o("distilbert"),Irr=o(" \u2014 "),TX=a("a"),qrr=o("TFDistilBertModel"),Nrr=o(" (DistilBERT model)"),jrr=l(),vF=a("li"),Nue=a("strong"),Drr=o("dpr"),Grr=o(" \u2014 "),MX=a("a"),Orr=o("TFDPRQuestionEncoder"),Vrr=o(" (DPR model)"),Xrr=l(),FF=a("li"),jue=a("strong"),zrr=o("electra"),Qrr=o(" \u2014 "),EX=a("a"),Wrr=o("TFElectraModel"),Hrr=o(" (ELECTRA model)"),Urr=l(),TF=a("li"),Due=a("strong"),Jrr=o("flaubert"),Yrr=o(" \u2014 "),CX=a("a"),Krr=o("TFFlaubertModel"),Zrr=o(" (FlauBERT model)"),etr=l(),xs=a("li"),Gue=a("strong"),otr=o("funnel"),rtr=o(" \u2014 "),wX=a("a"),ttr=o("TFFunnelModel"),atr=o(" or "),AX=a("a"),ntr=o("TFFunnelBaseModel"),str=o(" (Funnel Transformer model)"),ltr=l(),MF=a("li"),Oue=a("strong"),itr=o("gpt2"),dtr=o(" \u2014 "),yX=a("a"),ctr=o("TFGPT2Model"),ftr=o(" (OpenAI GPT-2 model)"),mtr=l(),EF=a("li"),Vue=a("strong"),gtr=o("gptj"),htr=o(" \u2014 "),LX=a("a"),ptr=o("TFGPTJModel"),utr=o(" (GPT-J model)"),_tr=l(),CF=a("li"),Xue=a("strong"),btr=o("hubert"),vtr=o(" \u2014 "),xX=a("a"),Ftr=o("TFHubertModel"),Ttr=o(" (Hubert model)"),Mtr=l(),wF=a("li"),zue=a("strong"),Etr=o("layoutlm"),Ctr=o(" \u2014 "),$X=a("a"),wtr=o("TFLayoutLMModel"),Atr=o(" (LayoutLM model)"),ytr=l(),AF=a("li"),Que=a("strong"),Ltr=o("led"),xtr=o(" \u2014 "),kX=a("a"),$tr=o("TFLEDModel"),ktr=o(" (LED model)"),Str=l(),yF=a("li"),Wue=a("strong"),Rtr=o("longformer"),Btr=o(" \u2014 "),SX=a("a"),Ptr=o("TFLongformerModel"),Itr=o(" (Longformer model)"),qtr=l(),LF=a("li"),Hue=a("strong"),Ntr=o("lxmert"),jtr=o(" \u2014 "),RX=a("a"),Dtr=o("TFLxmertModel"),Gtr=o(" (LXMERT model)"),Otr=l(),xF=a("li"),Uue=a("strong"),Vtr=o("marian"),Xtr=o(" \u2014 "),BX=a("a"),ztr=o("TFMarianModel"),Qtr=o(" (Marian model)"),Wtr=l(),$F=a("li"),Jue=a("strong"),Htr=o("mbart"),Utr=o(" \u2014 "),PX=a("a"),Jtr=o("TFMBartModel"),Ytr=o(" (mBART model)"),Ktr=l(),kF=a("li"),Yue=a("strong"),Ztr=o("mobilebert"),ear=o(" \u2014 "),IX=a("a"),oar=o("TFMobileBertModel"),rar=o(" (MobileBERT model)"),tar=l(),SF=a("li"),Kue=a("strong"),aar=o("mpnet"),nar=o(" \u2014 "),qX=a("a"),sar=o("TFMPNetModel"),lar=o(" (MPNet model)"),iar=l(),RF=a("li"),Zue=a("strong"),dar=o("mt5"),car=o(" \u2014 "),NX=a("a"),far=o("TFMT5Model"),mar=o(" (mT5 model)"),gar=l(),BF=a("li"),e_e=a("strong"),har=o("openai-gpt"),par=o(" \u2014 "),jX=a("a"),uar=o("TFOpenAIGPTModel"),_ar=o(" (OpenAI GPT model)"),bar=l(),PF=a("li"),o_e=a("strong"),Far=o("pegasus"),Tar=o(" \u2014 "),DX=a("a"),Mar=o("TFPegasusModel"),Ear=o(" (Pegasus model)"),Car=l(),IF=a("li"),r_e=a("strong"),war=o("rembert"),Aar=o(" \u2014 "),GX=a("a"),yar=o("TFRemBertModel"),Lar=o(" (RemBERT model)"),xar=l(),qF=a("li"),t_e=a("strong"),$ar=o("roberta"),kar=o(" \u2014 "),OX=a("a"),Sar=o("TFRobertaModel"),Rar=o(" (RoBERTa model)"),Bar=l(),NF=a("li"),a_e=a("strong"),Par=o("roformer"),Iar=o(" \u2014 "),VX=a("a"),qar=o("TFRoFormerModel"),Nar=o(" (RoFormer model)"),jar=l(),jF=a("li"),n_e=a("strong"),Dar=o("speech_to_text"),Gar=o(" \u2014 "),XX=a("a"),Oar=o("TFSpeech2TextModel"),Var=o(" (Speech2Text model)"),Xar=l(),DF=a("li"),s_e=a("strong"),zar=o("t5"),Qar=o(" \u2014 "),zX=a("a"),War=o("TFT5Model"),Har=o(" (T5 model)"),Uar=l(),GF=a("li"),l_e=a("strong"),Jar=o("tapas"),Yar=o(" \u2014 "),QX=a("a"),Kar=o("TFTapasModel"),Zar=o(" (TAPAS model)"),enr=l(),OF=a("li"),i_e=a("strong"),onr=o("transfo-xl"),rnr=o(" \u2014 "),WX=a("a"),tnr=o("TFTransfoXLModel"),anr=o(" (Transformer-XL model)"),nnr=l(),VF=a("li"),d_e=a("strong"),snr=o("vit"),lnr=o(" \u2014 "),HX=a("a"),inr=o("TFViTModel"),dnr=o(" (ViT model)"),cnr=l(),XF=a("li"),c_e=a("strong"),fnr=o("vit_mae"),mnr=o(" \u2014 "),UX=a("a"),gnr=o("TFViTMAEModel"),hnr=o(" (ViTMAE model)"),pnr=l(),zF=a("li"),f_e=a("strong"),unr=o("wav2vec2"),_nr=o(" \u2014 "),JX=a("a"),bnr=o("TFWav2Vec2Model"),vnr=o(" (Wav2Vec2 model)"),Fnr=l(),QF=a("li"),m_e=a("strong"),Tnr=o("xlm"),Mnr=o(" \u2014 "),YX=a("a"),Enr=o("TFXLMModel"),Cnr=o(" (XLM model)"),wnr=l(),WF=a("li"),g_e=a("strong"),Anr=o("xlm-roberta"),ynr=o(" \u2014 "),KX=a("a"),Lnr=o("TFXLMRobertaModel"),xnr=o(" (XLM-RoBERTa model)"),$nr=l(),HF=a("li"),h_e=a("strong"),knr=o("xlnet"),Snr=o(" \u2014 "),ZX=a("a"),Rnr=o("TFXLNetModel"),Bnr=o(" (XLNet model)"),Pnr=l(),F(UF.$$.fragment),JBe=l(),Bd=a("h2"),JF=a("a"),p_e=a("span"),F(tL.$$.fragment),Inr=l(),u_e=a("span"),qnr=o("TFAutoModelForPreTraining"),YBe=l(),Jo=a("div"),F(aL.$$.fragment),Nnr=l(),Pd=a("p"),jnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ez=a("a"),Dnr=o("from_pretrained()"),Gnr=o(" class method or the "),oz=a("a"),Onr=o("from_config()"),Vnr=o(` class
method.`),Xnr=l(),nL=a("p"),znr=o("This class cannot be instantiated directly using "),__e=a("code"),Qnr=o("__init__()"),Wnr=o(" (throws an error)."),Hnr=l(),Et=a("div"),F(sL.$$.fragment),Unr=l(),b_e=a("p"),Jnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ynr=l(),Id=a("p"),Knr=o(`Note:
Loading a model from its configuration file does `),v_e=a("strong"),Znr=o("not"),esr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),osr=o("from_pretrained()"),rsr=o(" to load the model weights."),tsr=l(),F(YF.$$.fragment),asr=l(),Er=a("div"),F(lL.$$.fragment),nsr=l(),F_e=a("p"),ssr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lsr=l(),Ua=a("p"),isr=o("The model class to instantiate is selected based on the "),T_e=a("code"),dsr=o("model_type"),csr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),fsr=o("pretrained_model_name_or_path"),msr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),gsr=o("pretrained_model_name_or_path"),hsr=o(":"),psr=l(),ne=a("ul"),KF=a("li"),C_e=a("strong"),usr=o("albert"),_sr=o(" \u2014 "),tz=a("a"),bsr=o("TFAlbertForPreTraining"),vsr=o(" (ALBERT model)"),Fsr=l(),ZF=a("li"),w_e=a("strong"),Tsr=o("bart"),Msr=o(" \u2014 "),az=a("a"),Esr=o("TFBartForConditionalGeneration"),Csr=o(" (BART model)"),wsr=l(),e0=a("li"),A_e=a("strong"),Asr=o("bert"),ysr=o(" \u2014 "),nz=a("a"),Lsr=o("TFBertForPreTraining"),xsr=o(" (BERT model)"),$sr=l(),o0=a("li"),y_e=a("strong"),ksr=o("camembert"),Ssr=o(" \u2014 "),sz=a("a"),Rsr=o("TFCamembertForMaskedLM"),Bsr=o(" (CamemBERT model)"),Psr=l(),r0=a("li"),L_e=a("strong"),Isr=o("ctrl"),qsr=o(" \u2014 "),lz=a("a"),Nsr=o("TFCTRLLMHeadModel"),jsr=o(" (CTRL model)"),Dsr=l(),t0=a("li"),x_e=a("strong"),Gsr=o("distilbert"),Osr=o(" \u2014 "),iz=a("a"),Vsr=o("TFDistilBertForMaskedLM"),Xsr=o(" (DistilBERT model)"),zsr=l(),a0=a("li"),$_e=a("strong"),Qsr=o("electra"),Wsr=o(" \u2014 "),dz=a("a"),Hsr=o("TFElectraForPreTraining"),Usr=o(" (ELECTRA model)"),Jsr=l(),n0=a("li"),k_e=a("strong"),Ysr=o("flaubert"),Ksr=o(" \u2014 "),cz=a("a"),Zsr=o("TFFlaubertWithLMHeadModel"),elr=o(" (FlauBERT model)"),olr=l(),s0=a("li"),S_e=a("strong"),rlr=o("funnel"),tlr=o(" \u2014 "),fz=a("a"),alr=o("TFFunnelForPreTraining"),nlr=o(" (Funnel Transformer model)"),slr=l(),l0=a("li"),R_e=a("strong"),llr=o("gpt2"),ilr=o(" \u2014 "),mz=a("a"),dlr=o("TFGPT2LMHeadModel"),clr=o(" (OpenAI GPT-2 model)"),flr=l(),i0=a("li"),B_e=a("strong"),mlr=o("layoutlm"),glr=o(" \u2014 "),gz=a("a"),hlr=o("TFLayoutLMForMaskedLM"),plr=o(" (LayoutLM model)"),ulr=l(),d0=a("li"),P_e=a("strong"),_lr=o("lxmert"),blr=o(" \u2014 "),hz=a("a"),vlr=o("TFLxmertForPreTraining"),Flr=o(" (LXMERT model)"),Tlr=l(),c0=a("li"),I_e=a("strong"),Mlr=o("mobilebert"),Elr=o(" \u2014 "),pz=a("a"),Clr=o("TFMobileBertForPreTraining"),wlr=o(" (MobileBERT model)"),Alr=l(),f0=a("li"),q_e=a("strong"),ylr=o("mpnet"),Llr=o(" \u2014 "),uz=a("a"),xlr=o("TFMPNetForMaskedLM"),$lr=o(" (MPNet model)"),klr=l(),m0=a("li"),N_e=a("strong"),Slr=o("openai-gpt"),Rlr=o(" \u2014 "),_z=a("a"),Blr=o("TFOpenAIGPTLMHeadModel"),Plr=o(" (OpenAI GPT model)"),Ilr=l(),g0=a("li"),j_e=a("strong"),qlr=o("roberta"),Nlr=o(" \u2014 "),bz=a("a"),jlr=o("TFRobertaForMaskedLM"),Dlr=o(" (RoBERTa model)"),Glr=l(),h0=a("li"),D_e=a("strong"),Olr=o("t5"),Vlr=o(" \u2014 "),vz=a("a"),Xlr=o("TFT5ForConditionalGeneration"),zlr=o(" (T5 model)"),Qlr=l(),p0=a("li"),G_e=a("strong"),Wlr=o("tapas"),Hlr=o(" \u2014 "),Fz=a("a"),Ulr=o("TFTapasForMaskedLM"),Jlr=o(" (TAPAS model)"),Ylr=l(),u0=a("li"),O_e=a("strong"),Klr=o("transfo-xl"),Zlr=o(" \u2014 "),Tz=a("a"),eir=o("TFTransfoXLLMHeadModel"),oir=o(" (Transformer-XL model)"),rir=l(),_0=a("li"),V_e=a("strong"),tir=o("vit_mae"),air=o(" \u2014 "),Mz=a("a"),nir=o("TFViTMAEForPreTraining"),sir=o(" (ViTMAE model)"),lir=l(),b0=a("li"),X_e=a("strong"),iir=o("xlm"),dir=o(" \u2014 "),Ez=a("a"),cir=o("TFXLMWithLMHeadModel"),fir=o(" (XLM model)"),mir=l(),v0=a("li"),z_e=a("strong"),gir=o("xlm-roberta"),hir=o(" \u2014 "),Cz=a("a"),pir=o("TFXLMRobertaForMaskedLM"),uir=o(" (XLM-RoBERTa model)"),_ir=l(),F0=a("li"),Q_e=a("strong"),bir=o("xlnet"),vir=o(" \u2014 "),wz=a("a"),Fir=o("TFXLNetLMHeadModel"),Tir=o(" (XLNet model)"),Mir=l(),F(T0.$$.fragment),KBe=l(),qd=a("h2"),M0=a("a"),W_e=a("span"),F(iL.$$.fragment),Eir=l(),H_e=a("span"),Cir=o("TFAutoModelForCausalLM"),ZBe=l(),Yo=a("div"),F(dL.$$.fragment),wir=l(),Nd=a("p"),Air=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Az=a("a"),yir=o("from_pretrained()"),Lir=o(" class method or the "),yz=a("a"),xir=o("from_config()"),$ir=o(` class
method.`),kir=l(),cL=a("p"),Sir=o("This class cannot be instantiated directly using "),U_e=a("code"),Rir=o("__init__()"),Bir=o(" (throws an error)."),Pir=l(),Ct=a("div"),F(fL.$$.fragment),Iir=l(),J_e=a("p"),qir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nir=l(),jd=a("p"),jir=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Dir=o("not"),Gir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),Oir=o("from_pretrained()"),Vir=o(" to load the model weights."),Xir=l(),F(E0.$$.fragment),zir=l(),Cr=a("div"),F(mL.$$.fragment),Qir=l(),K_e=a("p"),Wir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Hir=l(),Ja=a("p"),Uir=o("The model class to instantiate is selected based on the "),Z_e=a("code"),Jir=o("model_type"),Yir=o(` property of the config object (either
passed as an argument or loaded from `),e1e=a("code"),Kir=o("pretrained_model_name_or_path"),Zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=a("code"),edr=o("pretrained_model_name_or_path"),odr=o(":"),rdr=l(),Te=a("ul"),C0=a("li"),r1e=a("strong"),tdr=o("bert"),adr=o(" \u2014 "),xz=a("a"),ndr=o("TFBertLMHeadModel"),sdr=o(" (BERT model)"),ldr=l(),w0=a("li"),t1e=a("strong"),idr=o("camembert"),ddr=o(" \u2014 "),$z=a("a"),cdr=o("TFCamembertForCausalLM"),fdr=o(" (CamemBERT model)"),mdr=l(),A0=a("li"),a1e=a("strong"),gdr=o("ctrl"),hdr=o(" \u2014 "),kz=a("a"),pdr=o("TFCTRLLMHeadModel"),udr=o(" (CTRL model)"),_dr=l(),y0=a("li"),n1e=a("strong"),bdr=o("gpt2"),vdr=o(" \u2014 "),Sz=a("a"),Fdr=o("TFGPT2LMHeadModel"),Tdr=o(" (OpenAI GPT-2 model)"),Mdr=l(),L0=a("li"),s1e=a("strong"),Edr=o("gptj"),Cdr=o(" \u2014 "),Rz=a("a"),wdr=o("TFGPTJForCausalLM"),Adr=o(" (GPT-J model)"),ydr=l(),x0=a("li"),l1e=a("strong"),Ldr=o("openai-gpt"),xdr=o(" \u2014 "),Bz=a("a"),$dr=o("TFOpenAIGPTLMHeadModel"),kdr=o(" (OpenAI GPT model)"),Sdr=l(),$0=a("li"),i1e=a("strong"),Rdr=o("rembert"),Bdr=o(" \u2014 "),Pz=a("a"),Pdr=o("TFRemBertForCausalLM"),Idr=o(" (RemBERT model)"),qdr=l(),k0=a("li"),d1e=a("strong"),Ndr=o("roberta"),jdr=o(" \u2014 "),Iz=a("a"),Ddr=o("TFRobertaForCausalLM"),Gdr=o(" (RoBERTa model)"),Odr=l(),S0=a("li"),c1e=a("strong"),Vdr=o("roformer"),Xdr=o(" \u2014 "),qz=a("a"),zdr=o("TFRoFormerForCausalLM"),Qdr=o(" (RoFormer model)"),Wdr=l(),R0=a("li"),f1e=a("strong"),Hdr=o("transfo-xl"),Udr=o(" \u2014 "),Nz=a("a"),Jdr=o("TFTransfoXLLMHeadModel"),Ydr=o(" (Transformer-XL model)"),Kdr=l(),B0=a("li"),m1e=a("strong"),Zdr=o("xlm"),ecr=o(" \u2014 "),jz=a("a"),ocr=o("TFXLMWithLMHeadModel"),rcr=o(" (XLM model)"),tcr=l(),P0=a("li"),g1e=a("strong"),acr=o("xlnet"),ncr=o(" \u2014 "),Dz=a("a"),scr=o("TFXLNetLMHeadModel"),lcr=o(" (XLNet model)"),icr=l(),F(I0.$$.fragment),ePe=l(),Dd=a("h2"),q0=a("a"),h1e=a("span"),F(gL.$$.fragment),dcr=l(),p1e=a("span"),ccr=o("TFAutoModelForImageClassification"),oPe=l(),Ko=a("div"),F(hL.$$.fragment),fcr=l(),Gd=a("p"),mcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=a("a"),gcr=o("from_pretrained()"),hcr=o(" class method or the "),Oz=a("a"),pcr=o("from_config()"),ucr=o(` class
method.`),_cr=l(),pL=a("p"),bcr=o("This class cannot be instantiated directly using "),u1e=a("code"),vcr=o("__init__()"),Fcr=o(" (throws an error)."),Tcr=l(),wt=a("div"),F(uL.$$.fragment),Mcr=l(),_1e=a("p"),Ecr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ccr=l(),Od=a("p"),wcr=o(`Note:
Loading a model from its configuration file does `),b1e=a("strong"),Acr=o("not"),ycr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Lcr=o("from_pretrained()"),xcr=o(" to load the model weights."),$cr=l(),F(N0.$$.fragment),kcr=l(),wr=a("div"),F(_L.$$.fragment),Scr=l(),v1e=a("p"),Rcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Bcr=l(),Ya=a("p"),Pcr=o("The model class to instantiate is selected based on the "),F1e=a("code"),Icr=o("model_type"),qcr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Ncr=o("pretrained_model_name_or_path"),jcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Dcr=o("pretrained_model_name_or_path"),Gcr=o(":"),Ocr=l(),bL=a("ul"),j0=a("li"),E1e=a("strong"),Vcr=o("convnext"),Xcr=o(" \u2014 "),Xz=a("a"),zcr=o("TFConvNextForImageClassification"),Qcr=o(" (ConvNext model)"),Wcr=l(),D0=a("li"),C1e=a("strong"),Hcr=o("vit"),Ucr=o(" \u2014 "),zz=a("a"),Jcr=o("TFViTForImageClassification"),Ycr=o(" (ViT model)"),Kcr=l(),F(G0.$$.fragment),rPe=l(),Vd=a("h2"),O0=a("a"),w1e=a("span"),F(vL.$$.fragment),Zcr=l(),A1e=a("span"),efr=o("TFAutoModelForMaskedLM"),tPe=l(),Zo=a("div"),F(FL.$$.fragment),ofr=l(),Xd=a("p"),rfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qz=a("a"),tfr=o("from_pretrained()"),afr=o(" class method or the "),Wz=a("a"),nfr=o("from_config()"),sfr=o(` class
method.`),lfr=l(),TL=a("p"),ifr=o("This class cannot be instantiated directly using "),y1e=a("code"),dfr=o("__init__()"),cfr=o(" (throws an error)."),ffr=l(),At=a("div"),F(ML.$$.fragment),mfr=l(),L1e=a("p"),gfr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),hfr=l(),zd=a("p"),pfr=o(`Note:
Loading a model from its configuration file does `),x1e=a("strong"),ufr=o("not"),_fr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),bfr=o("from_pretrained()"),vfr=o(" to load the model weights."),Ffr=l(),F(V0.$$.fragment),Tfr=l(),Ar=a("div"),F(EL.$$.fragment),Mfr=l(),$1e=a("p"),Efr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cfr=l(),Ka=a("p"),wfr=o("The model class to instantiate is selected based on the "),k1e=a("code"),Afr=o("model_type"),yfr=o(` property of the config object (either
passed as an argument or loaded from `),S1e=a("code"),Lfr=o("pretrained_model_name_or_path"),xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),$fr=o("pretrained_model_name_or_path"),kfr=o(":"),Sfr=l(),ie=a("ul"),X0=a("li"),B1e=a("strong"),Rfr=o("albert"),Bfr=o(" \u2014 "),Uz=a("a"),Pfr=o("TFAlbertForMaskedLM"),Ifr=o(" (ALBERT model)"),qfr=l(),z0=a("li"),P1e=a("strong"),Nfr=o("bert"),jfr=o(" \u2014 "),Jz=a("a"),Dfr=o("TFBertForMaskedLM"),Gfr=o(" (BERT model)"),Ofr=l(),Q0=a("li"),I1e=a("strong"),Vfr=o("camembert"),Xfr=o(" \u2014 "),Yz=a("a"),zfr=o("TFCamembertForMaskedLM"),Qfr=o(" (CamemBERT model)"),Wfr=l(),W0=a("li"),q1e=a("strong"),Hfr=o("convbert"),Ufr=o(" \u2014 "),Kz=a("a"),Jfr=o("TFConvBertForMaskedLM"),Yfr=o(" (ConvBERT model)"),Kfr=l(),H0=a("li"),N1e=a("strong"),Zfr=o("deberta"),emr=o(" \u2014 "),Zz=a("a"),omr=o("TFDebertaForMaskedLM"),rmr=o(" (DeBERTa model)"),tmr=l(),U0=a("li"),j1e=a("strong"),amr=o("deberta-v2"),nmr=o(" \u2014 "),eQ=a("a"),smr=o("TFDebertaV2ForMaskedLM"),lmr=o(" (DeBERTa-v2 model)"),imr=l(),J0=a("li"),D1e=a("strong"),dmr=o("distilbert"),cmr=o(" \u2014 "),oQ=a("a"),fmr=o("TFDistilBertForMaskedLM"),mmr=o(" (DistilBERT model)"),gmr=l(),Y0=a("li"),G1e=a("strong"),hmr=o("electra"),pmr=o(" \u2014 "),rQ=a("a"),umr=o("TFElectraForMaskedLM"),_mr=o(" (ELECTRA model)"),bmr=l(),K0=a("li"),O1e=a("strong"),vmr=o("flaubert"),Fmr=o(" \u2014 "),tQ=a("a"),Tmr=o("TFFlaubertWithLMHeadModel"),Mmr=o(" (FlauBERT model)"),Emr=l(),Z0=a("li"),V1e=a("strong"),Cmr=o("funnel"),wmr=o(" \u2014 "),aQ=a("a"),Amr=o("TFFunnelForMaskedLM"),ymr=o(" (Funnel Transformer model)"),Lmr=l(),eT=a("li"),X1e=a("strong"),xmr=o("layoutlm"),$mr=o(" \u2014 "),nQ=a("a"),kmr=o("TFLayoutLMForMaskedLM"),Smr=o(" (LayoutLM model)"),Rmr=l(),oT=a("li"),z1e=a("strong"),Bmr=o("longformer"),Pmr=o(" \u2014 "),sQ=a("a"),Imr=o("TFLongformerForMaskedLM"),qmr=o(" (Longformer model)"),Nmr=l(),rT=a("li"),Q1e=a("strong"),jmr=o("mobilebert"),Dmr=o(" \u2014 "),lQ=a("a"),Gmr=o("TFMobileBertForMaskedLM"),Omr=o(" (MobileBERT model)"),Vmr=l(),tT=a("li"),W1e=a("strong"),Xmr=o("mpnet"),zmr=o(" \u2014 "),iQ=a("a"),Qmr=o("TFMPNetForMaskedLM"),Wmr=o(" (MPNet model)"),Hmr=l(),aT=a("li"),H1e=a("strong"),Umr=o("rembert"),Jmr=o(" \u2014 "),dQ=a("a"),Ymr=o("TFRemBertForMaskedLM"),Kmr=o(" (RemBERT model)"),Zmr=l(),nT=a("li"),U1e=a("strong"),egr=o("roberta"),ogr=o(" \u2014 "),cQ=a("a"),rgr=o("TFRobertaForMaskedLM"),tgr=o(" (RoBERTa model)"),agr=l(),sT=a("li"),J1e=a("strong"),ngr=o("roformer"),sgr=o(" \u2014 "),fQ=a("a"),lgr=o("TFRoFormerForMaskedLM"),igr=o(" (RoFormer model)"),dgr=l(),lT=a("li"),Y1e=a("strong"),cgr=o("tapas"),fgr=o(" \u2014 "),mQ=a("a"),mgr=o("TFTapasForMaskedLM"),ggr=o(" (TAPAS model)"),hgr=l(),iT=a("li"),K1e=a("strong"),pgr=o("xlm"),ugr=o(" \u2014 "),gQ=a("a"),_gr=o("TFXLMWithLMHeadModel"),bgr=o(" (XLM model)"),vgr=l(),dT=a("li"),Z1e=a("strong"),Fgr=o("xlm-roberta"),Tgr=o(" \u2014 "),hQ=a("a"),Mgr=o("TFXLMRobertaForMaskedLM"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),F(cT.$$.fragment),aPe=l(),Qd=a("h2"),fT=a("a"),ebe=a("span"),F(CL.$$.fragment),wgr=l(),obe=a("span"),Agr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),er=a("div"),F(wL.$$.fragment),ygr=l(),Wd=a("p"),Lgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pQ=a("a"),xgr=o("from_pretrained()"),$gr=o(" class method or the "),uQ=a("a"),kgr=o("from_config()"),Sgr=o(` class
method.`),Rgr=l(),AL=a("p"),Bgr=o("This class cannot be instantiated directly using "),rbe=a("code"),Pgr=o("__init__()"),Igr=o(" (throws an error)."),qgr=l(),yt=a("div"),F(yL.$$.fragment),Ngr=l(),tbe=a("p"),jgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dgr=l(),Hd=a("p"),Ggr=o(`Note:
Loading a model from its configuration file does `),abe=a("strong"),Ogr=o("not"),Vgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Xgr=o("from_pretrained()"),zgr=o(" to load the model weights."),Qgr=l(),F(mT.$$.fragment),Wgr=l(),yr=a("div"),F(LL.$$.fragment),Hgr=l(),nbe=a("p"),Ugr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Jgr=l(),Za=a("p"),Ygr=o("The model class to instantiate is selected based on the "),sbe=a("code"),Kgr=o("model_type"),Zgr=o(` property of the config object (either
passed as an argument or loaded from `),lbe=a("code"),ehr=o("pretrained_model_name_or_path"),ohr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=a("code"),rhr=o("pretrained_model_name_or_path"),thr=o(":"),ahr=l(),ye=a("ul"),gT=a("li"),dbe=a("strong"),nhr=o("bart"),shr=o(" \u2014 "),bQ=a("a"),lhr=o("TFBartForConditionalGeneration"),ihr=o(" (BART model)"),dhr=l(),hT=a("li"),cbe=a("strong"),chr=o("blenderbot"),fhr=o(" \u2014 "),vQ=a("a"),mhr=o("TFBlenderbotForConditionalGeneration"),ghr=o(" (Blenderbot model)"),hhr=l(),pT=a("li"),fbe=a("strong"),phr=o("blenderbot-small"),uhr=o(" \u2014 "),FQ=a("a"),_hr=o("TFBlenderbotSmallForConditionalGeneration"),bhr=o(" (BlenderbotSmall model)"),vhr=l(),uT=a("li"),mbe=a("strong"),Fhr=o("encoder-decoder"),Thr=o(" \u2014 "),TQ=a("a"),Mhr=o("TFEncoderDecoderModel"),Ehr=o(" (Encoder decoder model)"),Chr=l(),_T=a("li"),gbe=a("strong"),whr=o("led"),Ahr=o(" \u2014 "),MQ=a("a"),yhr=o("TFLEDForConditionalGeneration"),Lhr=o(" (LED model)"),xhr=l(),bT=a("li"),hbe=a("strong"),$hr=o("marian"),khr=o(" \u2014 "),EQ=a("a"),Shr=o("TFMarianMTModel"),Rhr=o(" (Marian model)"),Bhr=l(),vT=a("li"),pbe=a("strong"),Phr=o("mbart"),Ihr=o(" \u2014 "),CQ=a("a"),qhr=o("TFMBartForConditionalGeneration"),Nhr=o(" (mBART model)"),jhr=l(),FT=a("li"),ube=a("strong"),Dhr=o("mt5"),Ghr=o(" \u2014 "),wQ=a("a"),Ohr=o("TFMT5ForConditionalGeneration"),Vhr=o(" (mT5 model)"),Xhr=l(),TT=a("li"),_be=a("strong"),zhr=o("pegasus"),Qhr=o(" \u2014 "),AQ=a("a"),Whr=o("TFPegasusForConditionalGeneration"),Hhr=o(" (Pegasus model)"),Uhr=l(),MT=a("li"),bbe=a("strong"),Jhr=o("t5"),Yhr=o(" \u2014 "),yQ=a("a"),Khr=o("TFT5ForConditionalGeneration"),Zhr=o(" (T5 model)"),epr=l(),F(ET.$$.fragment),sPe=l(),Ud=a("h2"),CT=a("a"),vbe=a("span"),F(xL.$$.fragment),opr=l(),Fbe=a("span"),rpr=o("TFAutoModelForSequenceClassification"),lPe=l(),or=a("div"),F($L.$$.fragment),tpr=l(),Jd=a("p"),apr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LQ=a("a"),npr=o("from_pretrained()"),spr=o(" class method or the "),xQ=a("a"),lpr=o("from_config()"),ipr=o(` class
method.`),dpr=l(),kL=a("p"),cpr=o("This class cannot be instantiated directly using "),Tbe=a("code"),fpr=o("__init__()"),mpr=o(" (throws an error)."),gpr=l(),Lt=a("div"),F(SL.$$.fragment),hpr=l(),Mbe=a("p"),ppr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),upr=l(),Yd=a("p"),_pr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),bpr=o("not"),vpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),Fpr=o("from_pretrained()"),Tpr=o(" to load the model weights."),Mpr=l(),F(wT.$$.fragment),Epr=l(),Lr=a("div"),F(RL.$$.fragment),Cpr=l(),Cbe=a("p"),wpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Apr=l(),en=a("p"),ypr=o("The model class to instantiate is selected based on the "),wbe=a("code"),Lpr=o("model_type"),xpr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),$pr=o("pretrained_model_name_or_path"),kpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),Spr=o("pretrained_model_name_or_path"),Rpr=o(":"),Bpr=l(),Z=a("ul"),AT=a("li"),Lbe=a("strong"),Ppr=o("albert"),Ipr=o(" \u2014 "),kQ=a("a"),qpr=o("TFAlbertForSequenceClassification"),Npr=o(" (ALBERT model)"),jpr=l(),yT=a("li"),xbe=a("strong"),Dpr=o("bert"),Gpr=o(" \u2014 "),SQ=a("a"),Opr=o("TFBertForSequenceClassification"),Vpr=o(" (BERT model)"),Xpr=l(),LT=a("li"),$be=a("strong"),zpr=o("camembert"),Qpr=o(" \u2014 "),RQ=a("a"),Wpr=o("TFCamembertForSequenceClassification"),Hpr=o(" (CamemBERT model)"),Upr=l(),xT=a("li"),kbe=a("strong"),Jpr=o("convbert"),Ypr=o(" \u2014 "),BQ=a("a"),Kpr=o("TFConvBertForSequenceClassification"),Zpr=o(" (ConvBERT model)"),eur=l(),$T=a("li"),Sbe=a("strong"),our=o("ctrl"),rur=o(" \u2014 "),PQ=a("a"),tur=o("TFCTRLForSequenceClassification"),aur=o(" (CTRL model)"),nur=l(),kT=a("li"),Rbe=a("strong"),sur=o("deberta"),lur=o(" \u2014 "),IQ=a("a"),iur=o("TFDebertaForSequenceClassification"),dur=o(" (DeBERTa model)"),cur=l(),ST=a("li"),Bbe=a("strong"),fur=o("deberta-v2"),mur=o(" \u2014 "),qQ=a("a"),gur=o("TFDebertaV2ForSequenceClassification"),hur=o(" (DeBERTa-v2 model)"),pur=l(),RT=a("li"),Pbe=a("strong"),uur=o("distilbert"),_ur=o(" \u2014 "),NQ=a("a"),bur=o("TFDistilBertForSequenceClassification"),vur=o(" (DistilBERT model)"),Fur=l(),BT=a("li"),Ibe=a("strong"),Tur=o("electra"),Mur=o(" \u2014 "),jQ=a("a"),Eur=o("TFElectraForSequenceClassification"),Cur=o(" (ELECTRA model)"),wur=l(),PT=a("li"),qbe=a("strong"),Aur=o("flaubert"),yur=o(" \u2014 "),DQ=a("a"),Lur=o("TFFlaubertForSequenceClassification"),xur=o(" (FlauBERT model)"),$ur=l(),IT=a("li"),Nbe=a("strong"),kur=o("funnel"),Sur=o(" \u2014 "),GQ=a("a"),Rur=o("TFFunnelForSequenceClassification"),Bur=o(" (Funnel Transformer model)"),Pur=l(),qT=a("li"),jbe=a("strong"),Iur=o("gpt2"),qur=o(" \u2014 "),OQ=a("a"),Nur=o("TFGPT2ForSequenceClassification"),jur=o(" (OpenAI GPT-2 model)"),Dur=l(),NT=a("li"),Dbe=a("strong"),Gur=o("gptj"),Our=o(" \u2014 "),VQ=a("a"),Vur=o("TFGPTJForSequenceClassification"),Xur=o(" (GPT-J model)"),zur=l(),jT=a("li"),Gbe=a("strong"),Qur=o("layoutlm"),Wur=o(" \u2014 "),XQ=a("a"),Hur=o("TFLayoutLMForSequenceClassification"),Uur=o(" (LayoutLM model)"),Jur=l(),DT=a("li"),Obe=a("strong"),Yur=o("longformer"),Kur=o(" \u2014 "),zQ=a("a"),Zur=o("TFLongformerForSequenceClassification"),e_r=o(" (Longformer model)"),o_r=l(),GT=a("li"),Vbe=a("strong"),r_r=o("mobilebert"),t_r=o(" \u2014 "),QQ=a("a"),a_r=o("TFMobileBertForSequenceClassification"),n_r=o(" (MobileBERT model)"),s_r=l(),OT=a("li"),Xbe=a("strong"),l_r=o("mpnet"),i_r=o(" \u2014 "),WQ=a("a"),d_r=o("TFMPNetForSequenceClassification"),c_r=o(" (MPNet model)"),f_r=l(),VT=a("li"),zbe=a("strong"),m_r=o("openai-gpt"),g_r=o(" \u2014 "),HQ=a("a"),h_r=o("TFOpenAIGPTForSequenceClassification"),p_r=o(" (OpenAI GPT model)"),u_r=l(),XT=a("li"),Qbe=a("strong"),__r=o("rembert"),b_r=o(" \u2014 "),UQ=a("a"),v_r=o("TFRemBertForSequenceClassification"),F_r=o(" (RemBERT model)"),T_r=l(),zT=a("li"),Wbe=a("strong"),M_r=o("roberta"),E_r=o(" \u2014 "),JQ=a("a"),C_r=o("TFRobertaForSequenceClassification"),w_r=o(" (RoBERTa model)"),A_r=l(),QT=a("li"),Hbe=a("strong"),y_r=o("roformer"),L_r=o(" \u2014 "),YQ=a("a"),x_r=o("TFRoFormerForSequenceClassification"),$_r=o(" (RoFormer model)"),k_r=l(),WT=a("li"),Ube=a("strong"),S_r=o("tapas"),R_r=o(" \u2014 "),KQ=a("a"),B_r=o("TFTapasForSequenceClassification"),P_r=o(" (TAPAS model)"),I_r=l(),HT=a("li"),Jbe=a("strong"),q_r=o("transfo-xl"),N_r=o(" \u2014 "),ZQ=a("a"),j_r=o("TFTransfoXLForSequenceClassification"),D_r=o(" (Transformer-XL model)"),G_r=l(),UT=a("li"),Ybe=a("strong"),O_r=o("xlm"),V_r=o(" \u2014 "),eW=a("a"),X_r=o("TFXLMForSequenceClassification"),z_r=o(" (XLM model)"),Q_r=l(),JT=a("li"),Kbe=a("strong"),W_r=o("xlm-roberta"),H_r=o(" \u2014 "),oW=a("a"),U_r=o("TFXLMRobertaForSequenceClassification"),J_r=o(" (XLM-RoBERTa model)"),Y_r=l(),YT=a("li"),Zbe=a("strong"),K_r=o("xlnet"),Z_r=o(" \u2014 "),rW=a("a"),e1r=o("TFXLNetForSequenceClassification"),o1r=o(" (XLNet model)"),r1r=l(),F(KT.$$.fragment),iPe=l(),Kd=a("h2"),ZT=a("a"),e4e=a("span"),F(BL.$$.fragment),t1r=l(),o4e=a("span"),a1r=o("TFAutoModelForMultipleChoice"),dPe=l(),rr=a("div"),F(PL.$$.fragment),n1r=l(),Zd=a("p"),s1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tW=a("a"),l1r=o("from_pretrained()"),i1r=o(" class method or the "),aW=a("a"),d1r=o("from_config()"),c1r=o(` class
method.`),f1r=l(),IL=a("p"),m1r=o("This class cannot be instantiated directly using "),r4e=a("code"),g1r=o("__init__()"),h1r=o(" (throws an error)."),p1r=l(),xt=a("div"),F(qL.$$.fragment),u1r=l(),t4e=a("p"),_1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),b1r=l(),ec=a("p"),v1r=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),F1r=o("not"),T1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),M1r=o("from_pretrained()"),E1r=o(" to load the model weights."),C1r=l(),F(e7.$$.fragment),w1r=l(),xr=a("div"),F(NL.$$.fragment),A1r=l(),n4e=a("p"),y1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L1r=l(),on=a("p"),x1r=o("The model class to instantiate is selected based on the "),s4e=a("code"),$1r=o("model_type"),k1r=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),S1r=o("pretrained_model_name_or_path"),R1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),B1r=o("pretrained_model_name_or_path"),P1r=o(":"),I1r=l(),pe=a("ul"),o7=a("li"),d4e=a("strong"),q1r=o("albert"),N1r=o(" \u2014 "),sW=a("a"),j1r=o("TFAlbertForMultipleChoice"),D1r=o(" (ALBERT model)"),G1r=l(),r7=a("li"),c4e=a("strong"),O1r=o("bert"),V1r=o(" \u2014 "),lW=a("a"),X1r=o("TFBertForMultipleChoice"),z1r=o(" (BERT model)"),Q1r=l(),t7=a("li"),f4e=a("strong"),W1r=o("camembert"),H1r=o(" \u2014 "),iW=a("a"),U1r=o("TFCamembertForMultipleChoice"),J1r=o(" (CamemBERT model)"),Y1r=l(),a7=a("li"),m4e=a("strong"),K1r=o("convbert"),Z1r=o(" \u2014 "),dW=a("a"),ebr=o("TFConvBertForMultipleChoice"),obr=o(" (ConvBERT model)"),rbr=l(),n7=a("li"),g4e=a("strong"),tbr=o("distilbert"),abr=o(" \u2014 "),cW=a("a"),nbr=o("TFDistilBertForMultipleChoice"),sbr=o(" (DistilBERT model)"),lbr=l(),s7=a("li"),h4e=a("strong"),ibr=o("electra"),dbr=o(" \u2014 "),fW=a("a"),cbr=o("TFElectraForMultipleChoice"),fbr=o(" (ELECTRA model)"),mbr=l(),l7=a("li"),p4e=a("strong"),gbr=o("flaubert"),hbr=o(" \u2014 "),mW=a("a"),pbr=o("TFFlaubertForMultipleChoice"),ubr=o(" (FlauBERT model)"),_br=l(),i7=a("li"),u4e=a("strong"),bbr=o("funnel"),vbr=o(" \u2014 "),gW=a("a"),Fbr=o("TFFunnelForMultipleChoice"),Tbr=o(" (Funnel Transformer model)"),Mbr=l(),d7=a("li"),_4e=a("strong"),Ebr=o("longformer"),Cbr=o(" \u2014 "),hW=a("a"),wbr=o("TFLongformerForMultipleChoice"),Abr=o(" (Longformer model)"),ybr=l(),c7=a("li"),b4e=a("strong"),Lbr=o("mobilebert"),xbr=o(" \u2014 "),pW=a("a"),$br=o("TFMobileBertForMultipleChoice"),kbr=o(" (MobileBERT model)"),Sbr=l(),f7=a("li"),v4e=a("strong"),Rbr=o("mpnet"),Bbr=o(" \u2014 "),uW=a("a"),Pbr=o("TFMPNetForMultipleChoice"),Ibr=o(" (MPNet model)"),qbr=l(),m7=a("li"),F4e=a("strong"),Nbr=o("rembert"),jbr=o(" \u2014 "),_W=a("a"),Dbr=o("TFRemBertForMultipleChoice"),Gbr=o(" (RemBERT model)"),Obr=l(),g7=a("li"),T4e=a("strong"),Vbr=o("roberta"),Xbr=o(" \u2014 "),bW=a("a"),zbr=o("TFRobertaForMultipleChoice"),Qbr=o(" (RoBERTa model)"),Wbr=l(),h7=a("li"),M4e=a("strong"),Hbr=o("roformer"),Ubr=o(" \u2014 "),vW=a("a"),Jbr=o("TFRoFormerForMultipleChoice"),Ybr=o(" (RoFormer model)"),Kbr=l(),p7=a("li"),E4e=a("strong"),Zbr=o("xlm"),e4r=o(" \u2014 "),FW=a("a"),o4r=o("TFXLMForMultipleChoice"),r4r=o(" (XLM model)"),t4r=l(),u7=a("li"),C4e=a("strong"),a4r=o("xlm-roberta"),n4r=o(" \u2014 "),TW=a("a"),s4r=o("TFXLMRobertaForMultipleChoice"),l4r=o(" (XLM-RoBERTa model)"),i4r=l(),_7=a("li"),w4e=a("strong"),d4r=o("xlnet"),c4r=o(" \u2014 "),MW=a("a"),f4r=o("TFXLNetForMultipleChoice"),m4r=o(" (XLNet model)"),g4r=l(),F(b7.$$.fragment),cPe=l(),oc=a("h2"),v7=a("a"),A4e=a("span"),F(jL.$$.fragment),h4r=l(),y4e=a("span"),p4r=o("TFAutoModelForTableQuestionAnswering"),fPe=l(),tr=a("div"),F(DL.$$.fragment),u4r=l(),rc=a("p"),_4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EW=a("a"),b4r=o("from_pretrained()"),v4r=o(" class method or the "),CW=a("a"),F4r=o("from_config()"),T4r=o(` class
method.`),M4r=l(),GL=a("p"),E4r=o("This class cannot be instantiated directly using "),L4e=a("code"),C4r=o("__init__()"),w4r=o(" (throws an error)."),A4r=l(),$t=a("div"),F(OL.$$.fragment),y4r=l(),x4e=a("p"),L4r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),x4r=l(),tc=a("p"),$4r=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),k4r=o("not"),S4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),R4r=o("from_pretrained()"),B4r=o(" to load the model weights."),P4r=l(),F(F7.$$.fragment),I4r=l(),$r=a("div"),F(VL.$$.fragment),q4r=l(),k4e=a("p"),N4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),j4r=l(),rn=a("p"),D4r=o("The model class to instantiate is selected based on the "),S4e=a("code"),G4r=o("model_type"),O4r=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),V4r=o("pretrained_model_name_or_path"),X4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(":"),W4r=l(),P4e=a("ul"),T7=a("li"),I4e=a("strong"),H4r=o("tapas"),U4r=o(" \u2014 "),AW=a("a"),J4r=o("TFTapasForQuestionAnswering"),Y4r=o(" (TAPAS model)"),K4r=l(),F(M7.$$.fragment),mPe=l(),ac=a("h2"),E7=a("a"),q4e=a("span"),F(XL.$$.fragment),Z4r=l(),N4e=a("span"),e2r=o("TFAutoModelForTokenClassification"),gPe=l(),ar=a("div"),F(zL.$$.fragment),o2r=l(),nc=a("p"),r2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yW=a("a"),t2r=o("from_pretrained()"),a2r=o(" class method or the "),LW=a("a"),n2r=o("from_config()"),s2r=o(` class
method.`),l2r=l(),QL=a("p"),i2r=o("This class cannot be instantiated directly using "),j4e=a("code"),d2r=o("__init__()"),c2r=o(" (throws an error)."),f2r=l(),kt=a("div"),F(WL.$$.fragment),m2r=l(),D4e=a("p"),g2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h2r=l(),sc=a("p"),p2r=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),u2r=o("not"),_2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=a("a"),b2r=o("from_pretrained()"),v2r=o(" to load the model weights."),F2r=l(),F(C7.$$.fragment),T2r=l(),kr=a("div"),F(HL.$$.fragment),M2r=l(),O4e=a("p"),E2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C2r=l(),tn=a("p"),w2r=o("The model class to instantiate is selected based on the "),V4e=a("code"),A2r=o("model_type"),y2r=o(` property of the config object (either
passed as an argument or loaded from `),X4e=a("code"),L2r=o("pretrained_model_name_or_path"),x2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=a("code"),$2r=o("pretrained_model_name_or_path"),k2r=o(":"),S2r=l(),de=a("ul"),w7=a("li"),Q4e=a("strong"),R2r=o("albert"),B2r=o(" \u2014 "),$W=a("a"),P2r=o("TFAlbertForTokenClassification"),I2r=o(" (ALBERT model)"),q2r=l(),A7=a("li"),W4e=a("strong"),N2r=o("bert"),j2r=o(" \u2014 "),kW=a("a"),D2r=o("TFBertForTokenClassification"),G2r=o(" (BERT model)"),O2r=l(),y7=a("li"),H4e=a("strong"),V2r=o("camembert"),X2r=o(" \u2014 "),SW=a("a"),z2r=o("TFCamembertForTokenClassification"),Q2r=o(" (CamemBERT model)"),W2r=l(),L7=a("li"),U4e=a("strong"),H2r=o("convbert"),U2r=o(" \u2014 "),RW=a("a"),J2r=o("TFConvBertForTokenClassification"),Y2r=o(" (ConvBERT model)"),K2r=l(),x7=a("li"),J4e=a("strong"),Z2r=o("deberta"),e5r=o(" \u2014 "),BW=a("a"),o5r=o("TFDebertaForTokenClassification"),r5r=o(" (DeBERTa model)"),t5r=l(),$7=a("li"),Y4e=a("strong"),a5r=o("deberta-v2"),n5r=o(" \u2014 "),PW=a("a"),s5r=o("TFDebertaV2ForTokenClassification"),l5r=o(" (DeBERTa-v2 model)"),i5r=l(),k7=a("li"),K4e=a("strong"),d5r=o("distilbert"),c5r=o(" \u2014 "),IW=a("a"),f5r=o("TFDistilBertForTokenClassification"),m5r=o(" (DistilBERT model)"),g5r=l(),S7=a("li"),Z4e=a("strong"),h5r=o("electra"),p5r=o(" \u2014 "),qW=a("a"),u5r=o("TFElectraForTokenClassification"),_5r=o(" (ELECTRA model)"),b5r=l(),R7=a("li"),e2e=a("strong"),v5r=o("flaubert"),F5r=o(" \u2014 "),NW=a("a"),T5r=o("TFFlaubertForTokenClassification"),M5r=o(" (FlauBERT model)"),E5r=l(),B7=a("li"),o2e=a("strong"),C5r=o("funnel"),w5r=o(" \u2014 "),jW=a("a"),A5r=o("TFFunnelForTokenClassification"),y5r=o(" (Funnel Transformer model)"),L5r=l(),P7=a("li"),r2e=a("strong"),x5r=o("layoutlm"),$5r=o(" \u2014 "),DW=a("a"),k5r=o("TFLayoutLMForTokenClassification"),S5r=o(" (LayoutLM model)"),R5r=l(),I7=a("li"),t2e=a("strong"),B5r=o("longformer"),P5r=o(" \u2014 "),GW=a("a"),I5r=o("TFLongformerForTokenClassification"),q5r=o(" (Longformer model)"),N5r=l(),q7=a("li"),a2e=a("strong"),j5r=o("mobilebert"),D5r=o(" \u2014 "),OW=a("a"),G5r=o("TFMobileBertForTokenClassification"),O5r=o(" (MobileBERT model)"),V5r=l(),N7=a("li"),n2e=a("strong"),X5r=o("mpnet"),z5r=o(" \u2014 "),VW=a("a"),Q5r=o("TFMPNetForTokenClassification"),W5r=o(" (MPNet model)"),H5r=l(),j7=a("li"),s2e=a("strong"),U5r=o("rembert"),J5r=o(" \u2014 "),XW=a("a"),Y5r=o("TFRemBertForTokenClassification"),K5r=o(" (RemBERT model)"),Z5r=l(),D7=a("li"),l2e=a("strong"),evr=o("roberta"),ovr=o(" \u2014 "),zW=a("a"),rvr=o("TFRobertaForTokenClassification"),tvr=o(" (RoBERTa model)"),avr=l(),G7=a("li"),i2e=a("strong"),nvr=o("roformer"),svr=o(" \u2014 "),QW=a("a"),lvr=o("TFRoFormerForTokenClassification"),ivr=o(" (RoFormer model)"),dvr=l(),O7=a("li"),d2e=a("strong"),cvr=o("xlm"),fvr=o(" \u2014 "),WW=a("a"),mvr=o("TFXLMForTokenClassification"),gvr=o(" (XLM model)"),hvr=l(),V7=a("li"),c2e=a("strong"),pvr=o("xlm-roberta"),uvr=o(" \u2014 "),HW=a("a"),_vr=o("TFXLMRobertaForTokenClassification"),bvr=o(" (XLM-RoBERTa model)"),vvr=l(),X7=a("li"),f2e=a("strong"),Fvr=o("xlnet"),Tvr=o(" \u2014 "),UW=a("a"),Mvr=o("TFXLNetForTokenClassification"),Evr=o(" (XLNet model)"),Cvr=l(),F(z7.$$.fragment),hPe=l(),lc=a("h2"),Q7=a("a"),m2e=a("span"),F(UL.$$.fragment),wvr=l(),g2e=a("span"),Avr=o("TFAutoModelForQuestionAnswering"),pPe=l(),nr=a("div"),F(JL.$$.fragment),yvr=l(),ic=a("p"),Lvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=a("a"),xvr=o("from_pretrained()"),$vr=o(" class method or the "),YW=a("a"),kvr=o("from_config()"),Svr=o(` class
method.`),Rvr=l(),YL=a("p"),Bvr=o("This class cannot be instantiated directly using "),h2e=a("code"),Pvr=o("__init__()"),Ivr=o(" (throws an error)."),qvr=l(),St=a("div"),F(KL.$$.fragment),Nvr=l(),p2e=a("p"),jvr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Dvr=l(),dc=a("p"),Gvr=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),Ovr=o("not"),Vvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Xvr=o("from_pretrained()"),zvr=o(" to load the model weights."),Qvr=l(),F(W7.$$.fragment),Wvr=l(),Sr=a("div"),F(ZL.$$.fragment),Hvr=l(),_2e=a("p"),Uvr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Jvr=l(),an=a("p"),Yvr=o("The model class to instantiate is selected based on the "),b2e=a("code"),Kvr=o("model_type"),Zvr=o(` property of the config object (either
passed as an argument or loaded from `),v2e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=a("code"),rFr=o("pretrained_model_name_or_path"),tFr=o(":"),aFr=l(),ce=a("ul"),H7=a("li"),T2e=a("strong"),nFr=o("albert"),sFr=o(" \u2014 "),ZW=a("a"),lFr=o("TFAlbertForQuestionAnswering"),iFr=o(" (ALBERT model)"),dFr=l(),U7=a("li"),M2e=a("strong"),cFr=o("bert"),fFr=o(" \u2014 "),eH=a("a"),mFr=o("TFBertForQuestionAnswering"),gFr=o(" (BERT model)"),hFr=l(),J7=a("li"),E2e=a("strong"),pFr=o("camembert"),uFr=o(" \u2014 "),oH=a("a"),_Fr=o("TFCamembertForQuestionAnswering"),bFr=o(" (CamemBERT model)"),vFr=l(),Y7=a("li"),C2e=a("strong"),FFr=o("convbert"),TFr=o(" \u2014 "),rH=a("a"),MFr=o("TFConvBertForQuestionAnswering"),EFr=o(" (ConvBERT model)"),CFr=l(),K7=a("li"),w2e=a("strong"),wFr=o("deberta"),AFr=o(" \u2014 "),tH=a("a"),yFr=o("TFDebertaForQuestionAnswering"),LFr=o(" (DeBERTa model)"),xFr=l(),Z7=a("li"),A2e=a("strong"),$Fr=o("deberta-v2"),kFr=o(" \u2014 "),aH=a("a"),SFr=o("TFDebertaV2ForQuestionAnswering"),RFr=o(" (DeBERTa-v2 model)"),BFr=l(),eM=a("li"),y2e=a("strong"),PFr=o("distilbert"),IFr=o(" \u2014 "),nH=a("a"),qFr=o("TFDistilBertForQuestionAnswering"),NFr=o(" (DistilBERT model)"),jFr=l(),oM=a("li"),L2e=a("strong"),DFr=o("electra"),GFr=o(" \u2014 "),sH=a("a"),OFr=o("TFElectraForQuestionAnswering"),VFr=o(" (ELECTRA model)"),XFr=l(),rM=a("li"),x2e=a("strong"),zFr=o("flaubert"),QFr=o(" \u2014 "),lH=a("a"),WFr=o("TFFlaubertForQuestionAnsweringSimple"),HFr=o(" (FlauBERT model)"),UFr=l(),tM=a("li"),$2e=a("strong"),JFr=o("funnel"),YFr=o(" \u2014 "),iH=a("a"),KFr=o("TFFunnelForQuestionAnswering"),ZFr=o(" (Funnel Transformer model)"),e0r=l(),aM=a("li"),k2e=a("strong"),o0r=o("gptj"),r0r=o(" \u2014 "),dH=a("a"),t0r=o("TFGPTJForQuestionAnswering"),a0r=o(" (GPT-J model)"),n0r=l(),nM=a("li"),S2e=a("strong"),s0r=o("longformer"),l0r=o(" \u2014 "),cH=a("a"),i0r=o("TFLongformerForQuestionAnswering"),d0r=o(" (Longformer model)"),c0r=l(),sM=a("li"),R2e=a("strong"),f0r=o("mobilebert"),m0r=o(" \u2014 "),fH=a("a"),g0r=o("TFMobileBertForQuestionAnswering"),h0r=o(" (MobileBERT model)"),p0r=l(),lM=a("li"),B2e=a("strong"),u0r=o("mpnet"),_0r=o(" \u2014 "),mH=a("a"),b0r=o("TFMPNetForQuestionAnswering"),v0r=o(" (MPNet model)"),F0r=l(),iM=a("li"),P2e=a("strong"),T0r=o("rembert"),M0r=o(" \u2014 "),gH=a("a"),E0r=o("TFRemBertForQuestionAnswering"),C0r=o(" (RemBERT model)"),w0r=l(),dM=a("li"),I2e=a("strong"),A0r=o("roberta"),y0r=o(" \u2014 "),hH=a("a"),L0r=o("TFRobertaForQuestionAnswering"),x0r=o(" (RoBERTa model)"),$0r=l(),cM=a("li"),q2e=a("strong"),k0r=o("roformer"),S0r=o(" \u2014 "),pH=a("a"),R0r=o("TFRoFormerForQuestionAnswering"),B0r=o(" (RoFormer model)"),P0r=l(),fM=a("li"),N2e=a("strong"),I0r=o("xlm"),q0r=o(" \u2014 "),uH=a("a"),N0r=o("TFXLMForQuestionAnsweringSimple"),j0r=o(" (XLM model)"),D0r=l(),mM=a("li"),j2e=a("strong"),G0r=o("xlm-roberta"),O0r=o(" \u2014 "),_H=a("a"),V0r=o("TFXLMRobertaForQuestionAnswering"),X0r=o(" (XLM-RoBERTa model)"),z0r=l(),gM=a("li"),D2e=a("strong"),Q0r=o("xlnet"),W0r=o(" \u2014 "),bH=a("a"),H0r=o("TFXLNetForQuestionAnsweringSimple"),U0r=o(" (XLNet model)"),J0r=l(),F(hM.$$.fragment),uPe=l(),cc=a("h2"),pM=a("a"),G2e=a("span"),F(e8.$$.fragment),Y0r=l(),O2e=a("span"),K0r=o("TFAutoModelForVision2Seq"),_Pe=l(),sr=a("div"),F(o8.$$.fragment),Z0r=l(),fc=a("p"),eTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vH=a("a"),oTr=o("from_pretrained()"),rTr=o(" class method or the "),FH=a("a"),tTr=o("from_config()"),aTr=o(` class
method.`),nTr=l(),r8=a("p"),sTr=o("This class cannot be instantiated directly using "),V2e=a("code"),lTr=o("__init__()"),iTr=o(" (throws an error)."),dTr=l(),Rt=a("div"),F(t8.$$.fragment),cTr=l(),X2e=a("p"),fTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),mTr=l(),mc=a("p"),gTr=o(`Note:
Loading a model from its configuration file does `),z2e=a("strong"),hTr=o("not"),pTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),uTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),bTr=l(),F(uM.$$.fragment),vTr=l(),Rr=a("div"),F(a8.$$.fragment),FTr=l(),Q2e=a("p"),TTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MTr=l(),nn=a("p"),ETr=o("The model class to instantiate is selected based on the "),W2e=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),H2e=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(":"),$Tr=l(),J2e=a("ul"),_M=a("li"),Y2e=a("strong"),kTr=o("vision-encoder-decoder"),STr=o(" \u2014 "),MH=a("a"),RTr=o("TFVisionEncoderDecoderModel"),BTr=o(" (Vision Encoder decoder model)"),PTr=l(),F(bM.$$.fragment),bPe=l(),gc=a("h2"),vM=a("a"),K2e=a("span"),F(n8.$$.fragment),ITr=l(),Z2e=a("span"),qTr=o("TFAutoModelForSpeechSeq2Seq"),vPe=l(),lr=a("div"),F(s8.$$.fragment),NTr=l(),hc=a("p"),jTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=a("a"),DTr=o("from_pretrained()"),GTr=o(" class method or the "),CH=a("a"),OTr=o("from_config()"),VTr=o(` class
method.`),XTr=l(),l8=a("p"),zTr=o("This class cannot be instantiated directly using "),e5e=a("code"),QTr=o("__init__()"),WTr=o(" (throws an error)."),HTr=l(),Bt=a("div"),F(i8.$$.fragment),UTr=l(),o5e=a("p"),JTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YTr=l(),pc=a("p"),KTr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),ZTr=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),o7r=o("from_pretrained()"),r7r=o(" to load the model weights."),t7r=l(),F(FM.$$.fragment),a7r=l(),Br=a("div"),F(d8.$$.fragment),n7r=l(),t5e=a("p"),s7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),l7r=l(),sn=a("p"),i7r=o("The model class to instantiate is selected based on the "),a5e=a("code"),d7r=o("model_type"),c7r=o(` property of the config object (either
passed as an argument or loaded from `),n5e=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(":"),p7r=l(),l5e=a("ul"),TM=a("li"),i5e=a("strong"),u7r=o("speech_to_text"),_7r=o(" \u2014 "),AH=a("a"),b7r=o("TFSpeech2TextForConditionalGeneration"),v7r=o(" (Speech2Text model)"),F7r=l(),F(MM.$$.fragment),FPe=l(),uc=a("h2"),EM=a("a"),d5e=a("span"),F(c8.$$.fragment),T7r=l(),c5e=a("span"),M7r=o("FlaxAutoModel"),TPe=l(),ir=a("div"),F(f8.$$.fragment),E7r=l(),_c=a("p"),C7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=a("a"),w7r=o("from_pretrained()"),A7r=o(" class method or the "),LH=a("a"),y7r=o("from_config()"),L7r=o(` class
method.`),x7r=l(),m8=a("p"),$7r=o("This class cannot be instantiated directly using "),f5e=a("code"),k7r=o("__init__()"),S7r=o(" (throws an error)."),R7r=l(),Pt=a("div"),F(g8.$$.fragment),B7r=l(),m5e=a("p"),P7r=o("Instantiates one of the base model classes of the library from a configuration."),I7r=l(),bc=a("p"),q7r=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),N7r=o("not"),j7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),D7r=o("from_pretrained()"),G7r=o(" to load the model weights."),O7r=l(),F(CM.$$.fragment),V7r=l(),Pr=a("div"),F(h8.$$.fragment),X7r=l(),h5e=a("p"),z7r=o("Instantiate one of the base model classes of the library from a pretrained model."),Q7r=l(),ln=a("p"),W7r=o("The model class to instantiate is selected based on the "),p5e=a("code"),H7r=o("model_type"),U7r=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),J7r=o("pretrained_model_name_or_path"),Y7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),K7r=o("pretrained_model_name_or_path"),Z7r=o(":"),eMr=l(),oe=a("ul"),wM=a("li"),b5e=a("strong"),oMr=o("albert"),rMr=o(" \u2014 "),$H=a("a"),tMr=o("FlaxAlbertModel"),aMr=o(" (ALBERT model)"),nMr=l(),AM=a("li"),v5e=a("strong"),sMr=o("bart"),lMr=o(" \u2014 "),kH=a("a"),iMr=o("FlaxBartModel"),dMr=o(" (BART model)"),cMr=l(),yM=a("li"),F5e=a("strong"),fMr=o("beit"),mMr=o(" \u2014 "),SH=a("a"),gMr=o("FlaxBeitModel"),hMr=o(" (BEiT model)"),pMr=l(),LM=a("li"),T5e=a("strong"),uMr=o("bert"),_Mr=o(" \u2014 "),RH=a("a"),bMr=o("FlaxBertModel"),vMr=o(" (BERT model)"),FMr=l(),xM=a("li"),M5e=a("strong"),TMr=o("big_bird"),MMr=o(" \u2014 "),BH=a("a"),EMr=o("FlaxBigBirdModel"),CMr=o(" (BigBird model)"),wMr=l(),$M=a("li"),E5e=a("strong"),AMr=o("blenderbot"),yMr=o(" \u2014 "),PH=a("a"),LMr=o("FlaxBlenderbotModel"),xMr=o(" (Blenderbot model)"),$Mr=l(),kM=a("li"),C5e=a("strong"),kMr=o("blenderbot-small"),SMr=o(" \u2014 "),IH=a("a"),RMr=o("FlaxBlenderbotSmallModel"),BMr=o(" (BlenderbotSmall model)"),PMr=l(),SM=a("li"),w5e=a("strong"),IMr=o("clip"),qMr=o(" \u2014 "),qH=a("a"),NMr=o("FlaxCLIPModel"),jMr=o(" (CLIP model)"),DMr=l(),RM=a("li"),A5e=a("strong"),GMr=o("distilbert"),OMr=o(" \u2014 "),NH=a("a"),VMr=o("FlaxDistilBertModel"),XMr=o(" (DistilBERT model)"),zMr=l(),BM=a("li"),y5e=a("strong"),QMr=o("electra"),WMr=o(" \u2014 "),jH=a("a"),HMr=o("FlaxElectraModel"),UMr=o(" (ELECTRA model)"),JMr=l(),PM=a("li"),L5e=a("strong"),YMr=o("gpt2"),KMr=o(" \u2014 "),DH=a("a"),ZMr=o("FlaxGPT2Model"),eEr=o(" (OpenAI GPT-2 model)"),oEr=l(),IM=a("li"),x5e=a("strong"),rEr=o("gpt_neo"),tEr=o(" \u2014 "),GH=a("a"),aEr=o("FlaxGPTNeoModel"),nEr=o(" (GPT Neo model)"),sEr=l(),qM=a("li"),$5e=a("strong"),lEr=o("gptj"),iEr=o(" \u2014 "),OH=a("a"),dEr=o("FlaxGPTJModel"),cEr=o(" (GPT-J model)"),fEr=l(),NM=a("li"),k5e=a("strong"),mEr=o("marian"),gEr=o(" \u2014 "),VH=a("a"),hEr=o("FlaxMarianModel"),pEr=o(" (Marian model)"),uEr=l(),jM=a("li"),S5e=a("strong"),_Er=o("mbart"),bEr=o(" \u2014 "),XH=a("a"),vEr=o("FlaxMBartModel"),FEr=o(" (mBART model)"),TEr=l(),DM=a("li"),R5e=a("strong"),MEr=o("mt5"),EEr=o(" \u2014 "),zH=a("a"),CEr=o("FlaxMT5Model"),wEr=o(" (mT5 model)"),AEr=l(),GM=a("li"),B5e=a("strong"),yEr=o("pegasus"),LEr=o(" \u2014 "),QH=a("a"),xEr=o("FlaxPegasusModel"),$Er=o(" (Pegasus model)"),kEr=l(),OM=a("li"),P5e=a("strong"),SEr=o("roberta"),REr=o(" \u2014 "),WH=a("a"),BEr=o("FlaxRobertaModel"),PEr=o(" (RoBERTa model)"),IEr=l(),VM=a("li"),I5e=a("strong"),qEr=o("roformer"),NEr=o(" \u2014 "),HH=a("a"),jEr=o("FlaxRoFormerModel"),DEr=o(" (RoFormer model)"),GEr=l(),XM=a("li"),q5e=a("strong"),OEr=o("t5"),VEr=o(" \u2014 "),UH=a("a"),XEr=o("FlaxT5Model"),zEr=o(" (T5 model)"),QEr=l(),zM=a("li"),N5e=a("strong"),WEr=o("vision-text-dual-encoder"),HEr=o(" \u2014 "),JH=a("a"),UEr=o("FlaxVisionTextDualEncoderModel"),JEr=o(" (VisionTextDualEncoder model)"),YEr=l(),QM=a("li"),j5e=a("strong"),KEr=o("vit"),ZEr=o(" \u2014 "),YH=a("a"),eCr=o("FlaxViTModel"),oCr=o(" (ViT model)"),rCr=l(),WM=a("li"),D5e=a("strong"),tCr=o("wav2vec2"),aCr=o(" \u2014 "),KH=a("a"),nCr=o("FlaxWav2Vec2Model"),sCr=o(" (Wav2Vec2 model)"),lCr=l(),HM=a("li"),G5e=a("strong"),iCr=o("xglm"),dCr=o(" \u2014 "),ZH=a("a"),cCr=o("FlaxXGLMModel"),fCr=o(" (XGLM model)"),mCr=l(),UM=a("li"),O5e=a("strong"),gCr=o("xlm-roberta"),hCr=o(" \u2014 "),eU=a("a"),pCr=o("FlaxXLMRobertaModel"),uCr=o(" (XLM-RoBERTa model)"),_Cr=l(),F(JM.$$.fragment),MPe=l(),vc=a("h2"),YM=a("a"),V5e=a("span"),F(p8.$$.fragment),bCr=l(),X5e=a("span"),vCr=o("FlaxAutoModelForCausalLM"),EPe=l(),dr=a("div"),F(u8.$$.fragment),FCr=l(),Fc=a("p"),TCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oU=a("a"),MCr=o("from_pretrained()"),ECr=o(" class method or the "),rU=a("a"),CCr=o("from_config()"),wCr=o(` class
method.`),ACr=l(),_8=a("p"),yCr=o("This class cannot be instantiated directly using "),z5e=a("code"),LCr=o("__init__()"),xCr=o(" (throws an error)."),$Cr=l(),It=a("div"),F(b8.$$.fragment),kCr=l(),Q5e=a("p"),SCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RCr=l(),Tc=a("p"),BCr=o(`Note:
Loading a model from its configuration file does `),W5e=a("strong"),PCr=o("not"),ICr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),qCr=o("from_pretrained()"),NCr=o(" to load the model weights."),jCr=l(),F(KM.$$.fragment),DCr=l(),Ir=a("div"),F(v8.$$.fragment),GCr=l(),H5e=a("p"),OCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VCr=l(),dn=a("p"),XCr=o("The model class to instantiate is selected based on the "),U5e=a("code"),zCr=o("model_type"),QCr=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),WCr=o("pretrained_model_name_or_path"),HCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(":"),YCr=l(),Hr=a("ul"),ZM=a("li"),K5e=a("strong"),KCr=o("bart"),ZCr=o(" \u2014 "),aU=a("a"),e3r=o("FlaxBartForCausalLM"),o3r=o(" (BART model)"),r3r=l(),eE=a("li"),Z5e=a("strong"),t3r=o("gpt2"),a3r=o(" \u2014 "),nU=a("a"),n3r=o("FlaxGPT2LMHeadModel"),s3r=o(" (OpenAI GPT-2 model)"),l3r=l(),oE=a("li"),eve=a("strong"),i3r=o("gpt_neo"),d3r=o(" \u2014 "),sU=a("a"),c3r=o("FlaxGPTNeoForCausalLM"),f3r=o(" (GPT Neo model)"),m3r=l(),rE=a("li"),ove=a("strong"),g3r=o("gptj"),h3r=o(" \u2014 "),lU=a("a"),p3r=o("FlaxGPTJForCausalLM"),u3r=o(" (GPT-J model)"),_3r=l(),tE=a("li"),rve=a("strong"),b3r=o("xglm"),v3r=o(" \u2014 "),iU=a("a"),F3r=o("FlaxXGLMForCausalLM"),T3r=o(" (XGLM model)"),M3r=l(),F(aE.$$.fragment),CPe=l(),Mc=a("h2"),nE=a("a"),tve=a("span"),F(F8.$$.fragment),E3r=l(),ave=a("span"),C3r=o("FlaxAutoModelForPreTraining"),wPe=l(),cr=a("div"),F(T8.$$.fragment),w3r=l(),Ec=a("p"),A3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=a("a"),y3r=o("from_pretrained()"),L3r=o(" class method or the "),cU=a("a"),x3r=o("from_config()"),$3r=o(` class
method.`),k3r=l(),M8=a("p"),S3r=o("This class cannot be instantiated directly using "),nve=a("code"),R3r=o("__init__()"),B3r=o(" (throws an error)."),P3r=l(),qt=a("div"),F(E8.$$.fragment),I3r=l(),sve=a("p"),q3r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),N3r=l(),Cc=a("p"),j3r=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),D3r=o("not"),G3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),O3r=o("from_pretrained()"),V3r=o(" to load the model weights."),X3r=l(),F(sE.$$.fragment),z3r=l(),qr=a("div"),F(C8.$$.fragment),Q3r=l(),ive=a("p"),W3r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),H3r=l(),cn=a("p"),U3r=o("The model class to instantiate is selected based on the "),dve=a("code"),J3r=o("model_type"),Y3r=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),K3r=o("pretrained_model_name_or_path"),Z3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),ewr=o("pretrained_model_name_or_path"),owr=o(":"),rwr=l(),Me=a("ul"),lE=a("li"),mve=a("strong"),twr=o("albert"),awr=o(" \u2014 "),mU=a("a"),nwr=o("FlaxAlbertForPreTraining"),swr=o(" (ALBERT model)"),lwr=l(),iE=a("li"),gve=a("strong"),iwr=o("bart"),dwr=o(" \u2014 "),gU=a("a"),cwr=o("FlaxBartForConditionalGeneration"),fwr=o(" (BART model)"),mwr=l(),dE=a("li"),hve=a("strong"),gwr=o("bert"),hwr=o(" \u2014 "),hU=a("a"),pwr=o("FlaxBertForPreTraining"),uwr=o(" (BERT model)"),_wr=l(),cE=a("li"),pve=a("strong"),bwr=o("big_bird"),vwr=o(" \u2014 "),pU=a("a"),Fwr=o("FlaxBigBirdForPreTraining"),Twr=o(" (BigBird model)"),Mwr=l(),fE=a("li"),uve=a("strong"),Ewr=o("electra"),Cwr=o(" \u2014 "),uU=a("a"),wwr=o("FlaxElectraForPreTraining"),Awr=o(" (ELECTRA model)"),ywr=l(),mE=a("li"),_ve=a("strong"),Lwr=o("mbart"),xwr=o(" \u2014 "),_U=a("a"),$wr=o("FlaxMBartForConditionalGeneration"),kwr=o(" (mBART model)"),Swr=l(),gE=a("li"),bve=a("strong"),Rwr=o("mt5"),Bwr=o(" \u2014 "),bU=a("a"),Pwr=o("FlaxMT5ForConditionalGeneration"),Iwr=o(" (mT5 model)"),qwr=l(),hE=a("li"),vve=a("strong"),Nwr=o("roberta"),jwr=o(" \u2014 "),vU=a("a"),Dwr=o("FlaxRobertaForMaskedLM"),Gwr=o(" (RoBERTa model)"),Owr=l(),pE=a("li"),Fve=a("strong"),Vwr=o("roformer"),Xwr=o(" \u2014 "),FU=a("a"),zwr=o("FlaxRoFormerForMaskedLM"),Qwr=o(" (RoFormer model)"),Wwr=l(),uE=a("li"),Tve=a("strong"),Hwr=o("t5"),Uwr=o(" \u2014 "),TU=a("a"),Jwr=o("FlaxT5ForConditionalGeneration"),Ywr=o(" (T5 model)"),Kwr=l(),_E=a("li"),Mve=a("strong"),Zwr=o("wav2vec2"),eAr=o(" \u2014 "),MU=a("a"),oAr=o("FlaxWav2Vec2ForPreTraining"),rAr=o(" (Wav2Vec2 model)"),tAr=l(),bE=a("li"),Eve=a("strong"),aAr=o("xlm-roberta"),nAr=o(" \u2014 "),EU=a("a"),sAr=o("FlaxXLMRobertaForMaskedLM"),lAr=o(" (XLM-RoBERTa model)"),iAr=l(),F(vE.$$.fragment),APe=l(),wc=a("h2"),FE=a("a"),Cve=a("span"),F(w8.$$.fragment),dAr=l(),wve=a("span"),cAr=o("FlaxAutoModelForMaskedLM"),yPe=l(),fr=a("div"),F(A8.$$.fragment),fAr=l(),Ac=a("p"),mAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CU=a("a"),gAr=o("from_pretrained()"),hAr=o(" class method or the "),wU=a("a"),pAr=o("from_config()"),uAr=o(` class
method.`),_Ar=l(),y8=a("p"),bAr=o("This class cannot be instantiated directly using "),Ave=a("code"),vAr=o("__init__()"),FAr=o(" (throws an error)."),TAr=l(),Nt=a("div"),F(L8.$$.fragment),MAr=l(),yve=a("p"),EAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),CAr=l(),yc=a("p"),wAr=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),AAr=o("not"),yAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),LAr=o("from_pretrained()"),xAr=o(" to load the model weights."),$Ar=l(),F(TE.$$.fragment),kAr=l(),Nr=a("div"),F(x8.$$.fragment),SAr=l(),xve=a("p"),RAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),BAr=l(),fn=a("p"),PAr=o("The model class to instantiate is selected based on the "),$ve=a("code"),IAr=o("model_type"),qAr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),NAr=o("pretrained_model_name_or_path"),jAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),DAr=o("pretrained_model_name_or_path"),GAr=o(":"),OAr=l(),Le=a("ul"),ME=a("li"),Rve=a("strong"),VAr=o("albert"),XAr=o(" \u2014 "),yU=a("a"),zAr=o("FlaxAlbertForMaskedLM"),QAr=o(" (ALBERT model)"),WAr=l(),EE=a("li"),Bve=a("strong"),HAr=o("bart"),UAr=o(" \u2014 "),LU=a("a"),JAr=o("FlaxBartForConditionalGeneration"),YAr=o(" (BART model)"),KAr=l(),CE=a("li"),Pve=a("strong"),ZAr=o("bert"),e6r=o(" \u2014 "),xU=a("a"),o6r=o("FlaxBertForMaskedLM"),r6r=o(" (BERT model)"),t6r=l(),wE=a("li"),Ive=a("strong"),a6r=o("big_bird"),n6r=o(" \u2014 "),$U=a("a"),s6r=o("FlaxBigBirdForMaskedLM"),l6r=o(" (BigBird model)"),i6r=l(),AE=a("li"),qve=a("strong"),d6r=o("distilbert"),c6r=o(" \u2014 "),kU=a("a"),f6r=o("FlaxDistilBertForMaskedLM"),m6r=o(" (DistilBERT model)"),g6r=l(),yE=a("li"),Nve=a("strong"),h6r=o("electra"),p6r=o(" \u2014 "),SU=a("a"),u6r=o("FlaxElectraForMaskedLM"),_6r=o(" (ELECTRA model)"),b6r=l(),LE=a("li"),jve=a("strong"),v6r=o("mbart"),F6r=o(" \u2014 "),RU=a("a"),T6r=o("FlaxMBartForConditionalGeneration"),M6r=o(" (mBART model)"),E6r=l(),xE=a("li"),Dve=a("strong"),C6r=o("roberta"),w6r=o(" \u2014 "),BU=a("a"),A6r=o("FlaxRobertaForMaskedLM"),y6r=o(" (RoBERTa model)"),L6r=l(),$E=a("li"),Gve=a("strong"),x6r=o("roformer"),$6r=o(" \u2014 "),PU=a("a"),k6r=o("FlaxRoFormerForMaskedLM"),S6r=o(" (RoFormer model)"),R6r=l(),kE=a("li"),Ove=a("strong"),B6r=o("xlm-roberta"),P6r=o(" \u2014 "),IU=a("a"),I6r=o("FlaxXLMRobertaForMaskedLM"),q6r=o(" (XLM-RoBERTa model)"),N6r=l(),F(SE.$$.fragment),LPe=l(),Lc=a("h2"),RE=a("a"),Vve=a("span"),F($8.$$.fragment),j6r=l(),Xve=a("span"),D6r=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),mr=a("div"),F(k8.$$.fragment),G6r=l(),xc=a("p"),O6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qU=a("a"),V6r=o("from_pretrained()"),X6r=o(" class method or the "),NU=a("a"),z6r=o("from_config()"),Q6r=o(` class
method.`),W6r=l(),S8=a("p"),H6r=o("This class cannot be instantiated directly using "),zve=a("code"),U6r=o("__init__()"),J6r=o(" (throws an error)."),Y6r=l(),jt=a("div"),F(R8.$$.fragment),K6r=l(),Qve=a("p"),Z6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),eyr=l(),$c=a("p"),oyr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),ryr=o("not"),tyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),ayr=o("from_pretrained()"),nyr=o(" to load the model weights."),syr=l(),F(BE.$$.fragment),lyr=l(),jr=a("div"),F(B8.$$.fragment),iyr=l(),Hve=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cyr=l(),mn=a("p"),fyr=o("The model class to instantiate is selected based on the "),Uve=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),uyr=o("pretrained_model_name_or_path"),_yr=o(":"),byr=l(),ke=a("ul"),PE=a("li"),Kve=a("strong"),vyr=o("bart"),Fyr=o(" \u2014 "),DU=a("a"),Tyr=o("FlaxBartForConditionalGeneration"),Myr=o(" (BART model)"),Eyr=l(),IE=a("li"),Zve=a("strong"),Cyr=o("blenderbot"),wyr=o(" \u2014 "),GU=a("a"),Ayr=o("FlaxBlenderbotForConditionalGeneration"),yyr=o(" (Blenderbot model)"),Lyr=l(),qE=a("li"),eFe=a("strong"),xyr=o("blenderbot-small"),$yr=o(" \u2014 "),OU=a("a"),kyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Syr=o(" (BlenderbotSmall model)"),Ryr=l(),NE=a("li"),oFe=a("strong"),Byr=o("encoder-decoder"),Pyr=o(" \u2014 "),VU=a("a"),Iyr=o("FlaxEncoderDecoderModel"),qyr=o(" (Encoder decoder model)"),Nyr=l(),jE=a("li"),rFe=a("strong"),jyr=o("marian"),Dyr=o(" \u2014 "),XU=a("a"),Gyr=o("FlaxMarianMTModel"),Oyr=o(" (Marian model)"),Vyr=l(),DE=a("li"),tFe=a("strong"),Xyr=o("mbart"),zyr=o(" \u2014 "),zU=a("a"),Qyr=o("FlaxMBartForConditionalGeneration"),Wyr=o(" (mBART model)"),Hyr=l(),GE=a("li"),aFe=a("strong"),Uyr=o("mt5"),Jyr=o(" \u2014 "),QU=a("a"),Yyr=o("FlaxMT5ForConditionalGeneration"),Kyr=o(" (mT5 model)"),Zyr=l(),OE=a("li"),nFe=a("strong"),eLr=o("pegasus"),oLr=o(" \u2014 "),WU=a("a"),rLr=o("FlaxPegasusForConditionalGeneration"),tLr=o(" (Pegasus model)"),aLr=l(),VE=a("li"),sFe=a("strong"),nLr=o("t5"),sLr=o(" \u2014 "),HU=a("a"),lLr=o("FlaxT5ForConditionalGeneration"),iLr=o(" (T5 model)"),dLr=l(),F(XE.$$.fragment),$Pe=l(),kc=a("h2"),zE=a("a"),lFe=a("span"),F(P8.$$.fragment),cLr=l(),iFe=a("span"),fLr=o("FlaxAutoModelForSequenceClassification"),kPe=l(),gr=a("div"),F(I8.$$.fragment),mLr=l(),Sc=a("p"),gLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=a("a"),hLr=o("from_pretrained()"),pLr=o(" class method or the "),JU=a("a"),uLr=o("from_config()"),_Lr=o(` class
method.`),bLr=l(),q8=a("p"),vLr=o("This class cannot be instantiated directly using "),dFe=a("code"),FLr=o("__init__()"),TLr=o(" (throws an error)."),MLr=l(),Dt=a("div"),F(N8.$$.fragment),ELr=l(),cFe=a("p"),CLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),wLr=l(),Rc=a("p"),ALr=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),yLr=o("not"),LLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),xLr=o("from_pretrained()"),$Lr=o(" to load the model weights."),kLr=l(),F(QE.$$.fragment),SLr=l(),Dr=a("div"),F(j8.$$.fragment),RLr=l(),mFe=a("p"),BLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PLr=l(),gn=a("p"),ILr=o("The model class to instantiate is selected based on the "),gFe=a("code"),qLr=o("model_type"),NLr=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),jLr=o("pretrained_model_name_or_path"),DLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(":"),VLr=l(),xe=a("ul"),WE=a("li"),uFe=a("strong"),XLr=o("albert"),zLr=o(" \u2014 "),KU=a("a"),QLr=o("FlaxAlbertForSequenceClassification"),WLr=o(" (ALBERT model)"),HLr=l(),HE=a("li"),_Fe=a("strong"),ULr=o("bart"),JLr=o(" \u2014 "),ZU=a("a"),YLr=o("FlaxBartForSequenceClassification"),KLr=o(" (BART model)"),ZLr=l(),UE=a("li"),bFe=a("strong"),e8r=o("bert"),o8r=o(" \u2014 "),eJ=a("a"),r8r=o("FlaxBertForSequenceClassification"),t8r=o(" (BERT model)"),a8r=l(),JE=a("li"),vFe=a("strong"),n8r=o("big_bird"),s8r=o(" \u2014 "),oJ=a("a"),l8r=o("FlaxBigBirdForSequenceClassification"),i8r=o(" (BigBird model)"),d8r=l(),YE=a("li"),FFe=a("strong"),c8r=o("distilbert"),f8r=o(" \u2014 "),rJ=a("a"),m8r=o("FlaxDistilBertForSequenceClassification"),g8r=o(" (DistilBERT model)"),h8r=l(),KE=a("li"),TFe=a("strong"),p8r=o("electra"),u8r=o(" \u2014 "),tJ=a("a"),_8r=o("FlaxElectraForSequenceClassification"),b8r=o(" (ELECTRA model)"),v8r=l(),ZE=a("li"),MFe=a("strong"),F8r=o("mbart"),T8r=o(" \u2014 "),aJ=a("a"),M8r=o("FlaxMBartForSequenceClassification"),E8r=o(" (mBART model)"),C8r=l(),eC=a("li"),EFe=a("strong"),w8r=o("roberta"),A8r=o(" \u2014 "),nJ=a("a"),y8r=o("FlaxRobertaForSequenceClassification"),L8r=o(" (RoBERTa model)"),x8r=l(),oC=a("li"),CFe=a("strong"),$8r=o("roformer"),k8r=o(" \u2014 "),sJ=a("a"),S8r=o("FlaxRoFormerForSequenceClassification"),R8r=o(" (RoFormer model)"),B8r=l(),rC=a("li"),wFe=a("strong"),P8r=o("xlm-roberta"),I8r=o(" \u2014 "),lJ=a("a"),q8r=o("FlaxXLMRobertaForSequenceClassification"),N8r=o(" (XLM-RoBERTa model)"),j8r=l(),F(tC.$$.fragment),SPe=l(),Bc=a("h2"),aC=a("a"),AFe=a("span"),F(D8.$$.fragment),D8r=l(),yFe=a("span"),G8r=o("FlaxAutoModelForQuestionAnswering"),RPe=l(),hr=a("div"),F(G8.$$.fragment),O8r=l(),Pc=a("p"),V8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),X8r=o("from_pretrained()"),z8r=o(" class method or the "),dJ=a("a"),Q8r=o("from_config()"),W8r=o(` class
method.`),H8r=l(),O8=a("p"),U8r=o("This class cannot be instantiated directly using "),LFe=a("code"),J8r=o("__init__()"),Y8r=o(" (throws an error)."),K8r=l(),Gt=a("div"),F(V8.$$.fragment),Z8r=l(),xFe=a("p"),exr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oxr=l(),Ic=a("p"),rxr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),txr=o("not"),axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),nxr=o("from_pretrained()"),sxr=o(" to load the model weights."),lxr=l(),F(nC.$$.fragment),ixr=l(),Gr=a("div"),F(X8.$$.fragment),dxr=l(),kFe=a("p"),cxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fxr=l(),hn=a("p"),mxr=o("The model class to instantiate is selected based on the "),SFe=a("code"),gxr=o("model_type"),hxr=o(` property of the config object (either
passed as an argument or loaded from `),RFe=a("code"),pxr=o("pretrained_model_name_or_path"),uxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),_xr=o("pretrained_model_name_or_path"),bxr=o(":"),vxr=l(),$e=a("ul"),sC=a("li"),PFe=a("strong"),Fxr=o("albert"),Txr=o(" \u2014 "),fJ=a("a"),Mxr=o("FlaxAlbertForQuestionAnswering"),Exr=o(" (ALBERT model)"),Cxr=l(),lC=a("li"),IFe=a("strong"),wxr=o("bart"),Axr=o(" \u2014 "),mJ=a("a"),yxr=o("FlaxBartForQuestionAnswering"),Lxr=o(" (BART model)"),xxr=l(),iC=a("li"),qFe=a("strong"),$xr=o("bert"),kxr=o(" \u2014 "),gJ=a("a"),Sxr=o("FlaxBertForQuestionAnswering"),Rxr=o(" (BERT model)"),Bxr=l(),dC=a("li"),NFe=a("strong"),Pxr=o("big_bird"),Ixr=o(" \u2014 "),hJ=a("a"),qxr=o("FlaxBigBirdForQuestionAnswering"),Nxr=o(" (BigBird model)"),jxr=l(),cC=a("li"),jFe=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),pJ=a("a"),Oxr=o("FlaxDistilBertForQuestionAnswering"),Vxr=o(" (DistilBERT model)"),Xxr=l(),fC=a("li"),DFe=a("strong"),zxr=o("electra"),Qxr=o(" \u2014 "),uJ=a("a"),Wxr=o("FlaxElectraForQuestionAnswering"),Hxr=o(" (ELECTRA model)"),Uxr=l(),mC=a("li"),GFe=a("strong"),Jxr=o("mbart"),Yxr=o(" \u2014 "),_J=a("a"),Kxr=o("FlaxMBartForQuestionAnswering"),Zxr=o(" (mBART model)"),e9r=l(),gC=a("li"),OFe=a("strong"),o9r=o("roberta"),r9r=o(" \u2014 "),bJ=a("a"),t9r=o("FlaxRobertaForQuestionAnswering"),a9r=o(" (RoBERTa model)"),n9r=l(),hC=a("li"),VFe=a("strong"),s9r=o("roformer"),l9r=o(" \u2014 "),vJ=a("a"),i9r=o("FlaxRoFormerForQuestionAnswering"),d9r=o(" (RoFormer model)"),c9r=l(),pC=a("li"),XFe=a("strong"),f9r=o("xlm-roberta"),m9r=o(" \u2014 "),FJ=a("a"),g9r=o("FlaxXLMRobertaForQuestionAnswering"),h9r=o(" (XLM-RoBERTa model)"),p9r=l(),F(uC.$$.fragment),BPe=l(),qc=a("h2"),_C=a("a"),zFe=a("span"),F(z8.$$.fragment),u9r=l(),QFe=a("span"),_9r=o("FlaxAutoModelForTokenClassification"),PPe=l(),pr=a("div"),F(Q8.$$.fragment),b9r=l(),Nc=a("p"),v9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=a("a"),F9r=o("from_pretrained()"),T9r=o(" class method or the "),MJ=a("a"),M9r=o("from_config()"),E9r=o(` class
method.`),C9r=l(),W8=a("p"),w9r=o("This class cannot be instantiated directly using "),WFe=a("code"),A9r=o("__init__()"),y9r=o(" (throws an error)."),L9r=l(),Ot=a("div"),F(H8.$$.fragment),x9r=l(),HFe=a("p"),$9r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k9r=l(),jc=a("p"),S9r=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),R9r=o("not"),B9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=a("a"),P9r=o("from_pretrained()"),I9r=o(" to load the model weights."),q9r=l(),F(bC.$$.fragment),N9r=l(),Or=a("div"),F(U8.$$.fragment),j9r=l(),JFe=a("p"),D9r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G9r=l(),pn=a("p"),O9r=o("The model class to instantiate is selected based on the "),YFe=a("code"),V9r=o("model_type"),X9r=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),z9r=o("pretrained_model_name_or_path"),Q9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),W9r=o("pretrained_model_name_or_path"),H9r=o(":"),U9r=l(),je=a("ul"),vC=a("li"),e0e=a("strong"),J9r=o("albert"),Y9r=o(" \u2014 "),CJ=a("a"),K9r=o("FlaxAlbertForTokenClassification"),Z9r=o(" (ALBERT model)"),e$r=l(),FC=a("li"),o0e=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),wJ=a("a"),t$r=o("FlaxBertForTokenClassification"),a$r=o(" (BERT model)"),n$r=l(),TC=a("li"),r0e=a("strong"),s$r=o("big_bird"),l$r=o(" \u2014 "),AJ=a("a"),i$r=o("FlaxBigBirdForTokenClassification"),d$r=o(" (BigBird model)"),c$r=l(),MC=a("li"),t0e=a("strong"),f$r=o("distilbert"),m$r=o(" \u2014 "),yJ=a("a"),g$r=o("FlaxDistilBertForTokenClassification"),h$r=o(" (DistilBERT model)"),p$r=l(),EC=a("li"),a0e=a("strong"),u$r=o("electra"),_$r=o(" \u2014 "),LJ=a("a"),b$r=o("FlaxElectraForTokenClassification"),v$r=o(" (ELECTRA model)"),F$r=l(),CC=a("li"),n0e=a("strong"),T$r=o("roberta"),M$r=o(" \u2014 "),xJ=a("a"),E$r=o("FlaxRobertaForTokenClassification"),C$r=o(" (RoBERTa model)"),w$r=l(),wC=a("li"),s0e=a("strong"),A$r=o("roformer"),y$r=o(" \u2014 "),$J=a("a"),L$r=o("FlaxRoFormerForTokenClassification"),x$r=o(" (RoFormer model)"),$$r=l(),AC=a("li"),l0e=a("strong"),k$r=o("xlm-roberta"),S$r=o(" \u2014 "),kJ=a("a"),R$r=o("FlaxXLMRobertaForTokenClassification"),B$r=o(" (XLM-RoBERTa model)"),P$r=l(),F(yC.$$.fragment),IPe=l(),Dc=a("h2"),LC=a("a"),i0e=a("span"),F(J8.$$.fragment),I$r=l(),d0e=a("span"),q$r=o("FlaxAutoModelForMultipleChoice"),qPe=l(),ur=a("div"),F(Y8.$$.fragment),N$r=l(),Gc=a("p"),j$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SJ=a("a"),D$r=o("from_pretrained()"),G$r=o(" class method or the "),RJ=a("a"),O$r=o("from_config()"),V$r=o(` class
method.`),X$r=l(),K8=a("p"),z$r=o("This class cannot be instantiated directly using "),c0e=a("code"),Q$r=o("__init__()"),W$r=o(" (throws an error)."),H$r=l(),Vt=a("div"),F(Z8.$$.fragment),U$r=l(),f0e=a("p"),J$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Y$r=l(),Oc=a("p"),K$r=o(`Note:
Loading a model from its configuration file does `),m0e=a("strong"),Z$r=o("not"),ekr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),okr=o("from_pretrained()"),rkr=o(" to load the model weights."),tkr=l(),F(xC.$$.fragment),akr=l(),Vr=a("div"),F(ex.$$.fragment),nkr=l(),g0e=a("p"),skr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lkr=l(),un=a("p"),ikr=o("The model class to instantiate is selected based on the "),h0e=a("code"),dkr=o("model_type"),ckr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),fkr=o("pretrained_model_name_or_path"),mkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=a("code"),gkr=o("pretrained_model_name_or_path"),hkr=o(":"),pkr=l(),De=a("ul"),$C=a("li"),_0e=a("strong"),ukr=o("albert"),_kr=o(" \u2014 "),PJ=a("a"),bkr=o("FlaxAlbertForMultipleChoice"),vkr=o(" (ALBERT model)"),Fkr=l(),kC=a("li"),b0e=a("strong"),Tkr=o("bert"),Mkr=o(" \u2014 "),IJ=a("a"),Ekr=o("FlaxBertForMultipleChoice"),Ckr=o(" (BERT model)"),wkr=l(),SC=a("li"),v0e=a("strong"),Akr=o("big_bird"),ykr=o(" \u2014 "),qJ=a("a"),Lkr=o("FlaxBigBirdForMultipleChoice"),xkr=o(" (BigBird model)"),$kr=l(),RC=a("li"),F0e=a("strong"),kkr=o("distilbert"),Skr=o(" \u2014 "),NJ=a("a"),Rkr=o("FlaxDistilBertForMultipleChoice"),Bkr=o(" (DistilBERT model)"),Pkr=l(),BC=a("li"),T0e=a("strong"),Ikr=o("electra"),qkr=o(" \u2014 "),jJ=a("a"),Nkr=o("FlaxElectraForMultipleChoice"),jkr=o(" (ELECTRA model)"),Dkr=l(),PC=a("li"),M0e=a("strong"),Gkr=o("roberta"),Okr=o(" \u2014 "),DJ=a("a"),Vkr=o("FlaxRobertaForMultipleChoice"),Xkr=o(" (RoBERTa model)"),zkr=l(),IC=a("li"),E0e=a("strong"),Qkr=o("roformer"),Wkr=o(" \u2014 "),GJ=a("a"),Hkr=o("FlaxRoFormerForMultipleChoice"),Ukr=o(" (RoFormer model)"),Jkr=l(),qC=a("li"),C0e=a("strong"),Ykr=o("xlm-roberta"),Kkr=o(" \u2014 "),OJ=a("a"),Zkr=o("FlaxXLMRobertaForMultipleChoice"),eSr=o(" (XLM-RoBERTa model)"),oSr=l(),F(NC.$$.fragment),NPe=l(),Vc=a("h2"),jC=a("a"),w0e=a("span"),F(ox.$$.fragment),rSr=l(),A0e=a("span"),tSr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),_r=a("div"),F(rx.$$.fragment),aSr=l(),Xc=a("p"),nSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VJ=a("a"),sSr=o("from_pretrained()"),lSr=o(" class method or the "),XJ=a("a"),iSr=o("from_config()"),dSr=o(` class
method.`),cSr=l(),tx=a("p"),fSr=o("This class cannot be instantiated directly using "),y0e=a("code"),mSr=o("__init__()"),gSr=o(" (throws an error)."),hSr=l(),Xt=a("div"),F(ax.$$.fragment),pSr=l(),L0e=a("p"),uSr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_Sr=l(),zc=a("p"),bSr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),vSr=o("not"),FSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=a("a"),TSr=o("from_pretrained()"),MSr=o(" to load the model weights."),ESr=l(),F(DC.$$.fragment),CSr=l(),Xr=a("div"),F(nx.$$.fragment),wSr=l(),$0e=a("p"),ASr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ySr=l(),_n=a("p"),LSr=o("The model class to instantiate is selected based on the "),k0e=a("code"),xSr=o("model_type"),$Sr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),RSr=o("pretrained_model_name_or_path"),BSr=o(":"),PSr=l(),B0e=a("ul"),GC=a("li"),P0e=a("strong"),ISr=o("bert"),qSr=o(" \u2014 "),QJ=a("a"),NSr=o("FlaxBertForNextSentencePrediction"),jSr=o(" (BERT model)"),DSr=l(),F(OC.$$.fragment),DPe=l(),Qc=a("h2"),VC=a("a"),I0e=a("span"),F(sx.$$.fragment),GSr=l(),q0e=a("span"),OSr=o("FlaxAutoModelForImageClassification"),GPe=l(),br=a("div"),F(lx.$$.fragment),VSr=l(),Wc=a("p"),XSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=a("a"),zSr=o("from_pretrained()"),QSr=o(" class method or the "),HJ=a("a"),WSr=o("from_config()"),HSr=o(` class
method.`),USr=l(),ix=a("p"),JSr=o("This class cannot be instantiated directly using "),N0e=a("code"),YSr=o("__init__()"),KSr=o(" (throws an error)."),ZSr=l(),zt=a("div"),F(dx.$$.fragment),eRr=l(),j0e=a("p"),oRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rRr=l(),Hc=a("p"),tRr=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),aRr=o("not"),nRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=a("a"),sRr=o("from_pretrained()"),lRr=o(" to load the model weights."),iRr=l(),F(XC.$$.fragment),dRr=l(),zr=a("div"),F(cx.$$.fragment),cRr=l(),G0e=a("p"),fRr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mRr=l(),bn=a("p"),gRr=o("The model class to instantiate is selected based on the "),O0e=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),uRr=o("pretrained_model_name_or_path"),_Rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),bRr=o("pretrained_model_name_or_path"),vRr=o(":"),FRr=l(),fx=a("ul"),zC=a("li"),z0e=a("strong"),TRr=o("beit"),MRr=o(" \u2014 "),JJ=a("a"),ERr=o("FlaxBeitForImageClassification"),CRr=o(" (BEiT model)"),wRr=l(),QC=a("li"),Q0e=a("strong"),ARr=o("vit"),yRr=o(" \u2014 "),YJ=a("a"),LRr=o("FlaxViTForImageClassification"),xRr=o(" (ViT model)"),$Rr=l(),F(WC.$$.fragment),OPe=l(),Uc=a("h2"),HC=a("a"),W0e=a("span"),F(mx.$$.fragment),kRr=l(),H0e=a("span"),SRr=o("FlaxAutoModelForVision2Seq"),VPe=l(),vr=a("div"),F(gx.$$.fragment),RRr=l(),Jc=a("p"),BRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KJ=a("a"),PRr=o("from_pretrained()"),IRr=o(" class method or the "),ZJ=a("a"),qRr=o("from_config()"),NRr=o(` class
method.`),jRr=l(),hx=a("p"),DRr=o("This class cannot be instantiated directly using "),U0e=a("code"),GRr=o("__init__()"),ORr=o(" (throws an error)."),VRr=l(),Qt=a("div"),F(px.$$.fragment),XRr=l(),J0e=a("p"),zRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QRr=l(),Yc=a("p"),WRr=o(`Note:
Loading a model from its configuration file does `),Y0e=a("strong"),HRr=o("not"),URr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),JRr=o("from_pretrained()"),YRr=o(" to load the model weights."),KRr=l(),F(UC.$$.fragment),ZRr=l(),Qr=a("div"),F(ux.$$.fragment),eBr=l(),K0e=a("p"),oBr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rBr=l(),vn=a("p"),tBr=o("The model class to instantiate is selected based on the "),Z0e=a("code"),aBr=o("model_type"),nBr=o(` property of the config object (either
passed as an argument or loaded from `),eTe=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=a("code"),iBr=o("pretrained_model_name_or_path"),dBr=o(":"),cBr=l(),rTe=a("ul"),JC=a("li"),tTe=a("strong"),fBr=o("vision-encoder-decoder"),mBr=o(" \u2014 "),oY=a("a"),gBr=o("FlaxVisionEncoderDecoderModel"),hBr=o(" (Vision Encoder decoder model)"),pBr=l(),F(YC.$$.fragment),this.h()},l(f){const _=JMt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var _x=s(p);m=n(_x,"A",{id:!0,class:!0,href:!0});var aTe=s(m);u=n(aTe,"SPAN",{});var nTe=s(u);T(d.$$.fragment,nTe),nTe.forEach(t),aTe.forEach(t),h=i(_x),Fo=n(_x,"SPAN",{});var sTe=s(Fo);oi=r(sTe,"Auto Classes"),sTe.forEach(t),_x.forEach(t),of=i(f),Yr=n(f,"P",{});var bx=s(Yr);ri=r(bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(bx,"CODE",{});var lTe=s(ti);gA=r(lTe,"from_pretrained()"),lTe.forEach(t),rf=r(bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),bx.forEach(t),Ie=i(f),Oe=n(f,"P",{});var Fn=s(Oe);ai=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var iTe=s(Tn);hA=r(iTe,"AutoConfig"),iTe.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var dTe=s(En);pA=r(dTe,"AutoModel"),dTe.forEach(t),ni=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var cTe=s(Cn);uA=r(cTe,"AutoTokenizer"),cTe.forEach(t),si=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Ve=i(f),Ae=n(f,"P",{});var vx=s(Ae);x9=r(vx,"will create a model that is an instance of "),li=n(vx,"A",{href:!0});var fTe=s(li);$9=r(fTe,"BertModel"),fTe.forEach(t),k9=r(vx,"."),vx.forEach(t),To=i(f),va=n(f,"P",{});var Fx=s(va);S9=r(Fx,"There is one class of "),af=n(Fx,"CODE",{});var mTe=s(af);R9=r(mTe,"AutoModel"),mTe.forEach(t),Jqe=r(Fx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Fx.forEach(t),VRe=i(f),ii=n(f,"H2",{class:!0});var Tx=s(ii);nf=n(Tx,"A",{id:!0,class:!0,href:!0});var gTe=s(nf);QK=n(gTe,"SPAN",{});var hTe=s(QK);T(_A.$$.fragment,hTe),hTe.forEach(t),gTe.forEach(t),Yqe=i(Tx),WK=n(Tx,"SPAN",{});var pTe=s(WK);Kqe=r(pTe,"Extending the Auto Classes"),pTe.forEach(t),Tx.forEach(t),XRe=i(f),wn=n(f,"P",{});var Kc=s(wn);Zqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),HK=n(Kc,"CODE",{});var uTe=s(HK);eNe=r(uTe,"NewModel"),uTe.forEach(t),oNe=r(Kc,", make sure you have a "),UK=n(Kc,"CODE",{});var _Te=s(UK);rNe=r(_Te,"NewModelConfig"),_Te.forEach(t),tNe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),zRe=i(f),T(bA.$$.fragment,f),QRe=i(f),B9=n(f,"P",{});var bTe=s(B9);aNe=r(bTe,"You will then be able to use the auto classes like you would usually do!"),bTe.forEach(t),WRe=i(f),T(sf.$$.fragment,f),HRe=i(f),di=n(f,"H2",{class:!0});var Mx=s(di);lf=n(Mx,"A",{id:!0,class:!0,href:!0});var vTe=s(lf);JK=n(vTe,"SPAN",{});var FTe=s(JK);T(vA.$$.fragment,FTe),FTe.forEach(t),vTe.forEach(t),nNe=i(Mx),YK=n(Mx,"SPAN",{});var TTe=s(YK);sNe=r(TTe,"AutoConfig"),TTe.forEach(t),Mx.forEach(t),URe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(FA.$$.fragment,Ur),lNe=i(Ur),TA=n(Ur,"P",{});var Ex=s(TA);iNe=r(Ex,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),P9=n(Ex,"A",{href:!0});var MTe=s(P9);dNe=r(MTe,"from_pretrained()"),MTe.forEach(t),cNe=r(Ex," class method."),Ex.forEach(t),fNe=i(Ur),MA=n(Ur,"P",{});var Cx=s(MA);mNe=r(Cx,"This class cannot be instantiated directly using "),KK=n(Cx,"CODE",{});var ETe=s(KK);gNe=r(ETe,"__init__()"),ETe.forEach(t),hNe=r(Cx," (throws an error)."),Cx.forEach(t),pNe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(EA.$$.fragment,Jr),uNe=i(Jr),ZK=n(Jr,"P",{});var CTe=s(ZK);_Ne=r(CTe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CTe.forEach(t),bNe=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);vNe=r(Zc,"The configuration class to instantiate is selected based on the "),eZ=n(Zc,"CODE",{});var wTe=s(eZ);FNe=r(wTe,"model_type"),wTe.forEach(t),TNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),oZ=n(Zc,"CODE",{});var ATe=s(oZ);MNe=r(ATe,"pretrained_model_name_or_path"),ATe.forEach(t),ENe=r(Zc,":"),Zc.forEach(t),CNe=i(Jr),A=n(Jr,"UL",{});var y=s(A);df=n(y,"LI",{});var KC=s(df);rZ=n(KC,"STRONG",{});var yTe=s(rZ);wNe=r(yTe,"albert"),yTe.forEach(t),ANe=r(KC," \u2014 "),I9=n(KC,"A",{href:!0});var LTe=s(I9);yNe=r(LTe,"AlbertConfig"),LTe.forEach(t),LNe=r(KC," (ALBERT model)"),KC.forEach(t),xNe=i(y),cf=n(y,"LI",{});var ZC=s(cf);tZ=n(ZC,"STRONG",{});var xTe=s(tZ);$Ne=r(xTe,"bart"),xTe.forEach(t),kNe=r(ZC," \u2014 "),q9=n(ZC,"A",{href:!0});var $Te=s(q9);SNe=r($Te,"BartConfig"),$Te.forEach(t),RNe=r(ZC," (BART model)"),ZC.forEach(t),BNe=i(y),ff=n(y,"LI",{});var e3=s(ff);aZ=n(e3,"STRONG",{});var kTe=s(aZ);PNe=r(kTe,"beit"),kTe.forEach(t),INe=r(e3," \u2014 "),N9=n(e3,"A",{href:!0});var STe=s(N9);qNe=r(STe,"BeitConfig"),STe.forEach(t),NNe=r(e3," (BEiT model)"),e3.forEach(t),jNe=i(y),mf=n(y,"LI",{});var o3=s(mf);nZ=n(o3,"STRONG",{});var RTe=s(nZ);DNe=r(RTe,"bert"),RTe.forEach(t),GNe=r(o3," \u2014 "),j9=n(o3,"A",{href:!0});var BTe=s(j9);ONe=r(BTe,"BertConfig"),BTe.forEach(t),VNe=r(o3," (BERT model)"),o3.forEach(t),XNe=i(y),gf=n(y,"LI",{});var r3=s(gf);sZ=n(r3,"STRONG",{});var PTe=s(sZ);zNe=r(PTe,"bert-generation"),PTe.forEach(t),QNe=r(r3," \u2014 "),D9=n(r3,"A",{href:!0});var ITe=s(D9);WNe=r(ITe,"BertGenerationConfig"),ITe.forEach(t),HNe=r(r3," (Bert Generation model)"),r3.forEach(t),UNe=i(y),hf=n(y,"LI",{});var t3=s(hf);lZ=n(t3,"STRONG",{});var qTe=s(lZ);JNe=r(qTe,"big_bird"),qTe.forEach(t),YNe=r(t3," \u2014 "),G9=n(t3,"A",{href:!0});var NTe=s(G9);KNe=r(NTe,"BigBirdConfig"),NTe.forEach(t),ZNe=r(t3," (BigBird model)"),t3.forEach(t),eje=i(y),pf=n(y,"LI",{});var a3=s(pf);iZ=n(a3,"STRONG",{});var jTe=s(iZ);oje=r(jTe,"bigbird_pegasus"),jTe.forEach(t),rje=r(a3," \u2014 "),O9=n(a3,"A",{href:!0});var DTe=s(O9);tje=r(DTe,"BigBirdPegasusConfig"),DTe.forEach(t),aje=r(a3," (BigBirdPegasus model)"),a3.forEach(t),nje=i(y),uf=n(y,"LI",{});var n3=s(uf);dZ=n(n3,"STRONG",{});var GTe=s(dZ);sje=r(GTe,"blenderbot"),GTe.forEach(t),lje=r(n3," \u2014 "),V9=n(n3,"A",{href:!0});var OTe=s(V9);ije=r(OTe,"BlenderbotConfig"),OTe.forEach(t),dje=r(n3," (Blenderbot model)"),n3.forEach(t),cje=i(y),_f=n(y,"LI",{});var s3=s(_f);cZ=n(s3,"STRONG",{});var VTe=s(cZ);fje=r(VTe,"blenderbot-small"),VTe.forEach(t),mje=r(s3," \u2014 "),X9=n(s3,"A",{href:!0});var XTe=s(X9);gje=r(XTe,"BlenderbotSmallConfig"),XTe.forEach(t),hje=r(s3," (BlenderbotSmall model)"),s3.forEach(t),pje=i(y),bf=n(y,"LI",{});var l3=s(bf);fZ=n(l3,"STRONG",{});var zTe=s(fZ);uje=r(zTe,"camembert"),zTe.forEach(t),_je=r(l3," \u2014 "),z9=n(l3,"A",{href:!0});var QTe=s(z9);bje=r(QTe,"CamembertConfig"),QTe.forEach(t),vje=r(l3," (CamemBERT model)"),l3.forEach(t),Fje=i(y),vf=n(y,"LI",{});var i3=s(vf);mZ=n(i3,"STRONG",{});var WTe=s(mZ);Tje=r(WTe,"canine"),WTe.forEach(t),Mje=r(i3," \u2014 "),Q9=n(i3,"A",{href:!0});var HTe=s(Q9);Eje=r(HTe,"CanineConfig"),HTe.forEach(t),Cje=r(i3," (Canine model)"),i3.forEach(t),wje=i(y),Ff=n(y,"LI",{});var d3=s(Ff);gZ=n(d3,"STRONG",{});var UTe=s(gZ);Aje=r(UTe,"clip"),UTe.forEach(t),yje=r(d3," \u2014 "),W9=n(d3,"A",{href:!0});var JTe=s(W9);Lje=r(JTe,"CLIPConfig"),JTe.forEach(t),xje=r(d3," (CLIP model)"),d3.forEach(t),$je=i(y),Tf=n(y,"LI",{});var c3=s(Tf);hZ=n(c3,"STRONG",{});var YTe=s(hZ);kje=r(YTe,"convbert"),YTe.forEach(t),Sje=r(c3," \u2014 "),H9=n(c3,"A",{href:!0});var KTe=s(H9);Rje=r(KTe,"ConvBertConfig"),KTe.forEach(t),Bje=r(c3," (ConvBERT model)"),c3.forEach(t),Pje=i(y),Mf=n(y,"LI",{});var f3=s(Mf);pZ=n(f3,"STRONG",{});var ZTe=s(pZ);Ije=r(ZTe,"convnext"),ZTe.forEach(t),qje=r(f3," \u2014 "),U9=n(f3,"A",{href:!0});var e7e=s(U9);Nje=r(e7e,"ConvNextConfig"),e7e.forEach(t),jje=r(f3," (ConvNext model)"),f3.forEach(t),Dje=i(y),Ef=n(y,"LI",{});var m3=s(Ef);uZ=n(m3,"STRONG",{});var o7e=s(uZ);Gje=r(o7e,"ctrl"),o7e.forEach(t),Oje=r(m3," \u2014 "),J9=n(m3,"A",{href:!0});var r7e=s(J9);Vje=r(r7e,"CTRLConfig"),r7e.forEach(t),Xje=r(m3," (CTRL model)"),m3.forEach(t),zje=i(y),Cf=n(y,"LI",{});var g3=s(Cf);_Z=n(g3,"STRONG",{});var t7e=s(_Z);Qje=r(t7e,"data2vec-audio"),t7e.forEach(t),Wje=r(g3," \u2014 "),Y9=n(g3,"A",{href:!0});var a7e=s(Y9);Hje=r(a7e,"Data2VecAudioConfig"),a7e.forEach(t),Uje=r(g3," (Data2VecAudio model)"),g3.forEach(t),Jje=i(y),wf=n(y,"LI",{});var h3=s(wf);bZ=n(h3,"STRONG",{});var n7e=s(bZ);Yje=r(n7e,"data2vec-text"),n7e.forEach(t),Kje=r(h3," \u2014 "),K9=n(h3,"A",{href:!0});var s7e=s(K9);Zje=r(s7e,"Data2VecTextConfig"),s7e.forEach(t),eDe=r(h3," (Data2VecText model)"),h3.forEach(t),oDe=i(y),Af=n(y,"LI",{});var p3=s(Af);vZ=n(p3,"STRONG",{});var l7e=s(vZ);rDe=r(l7e,"data2vec-vision"),l7e.forEach(t),tDe=r(p3," \u2014 "),Z9=n(p3,"A",{href:!0});var i7e=s(Z9);aDe=r(i7e,"Data2VecVisionConfig"),i7e.forEach(t),nDe=r(p3," (Data2VecVision model)"),p3.forEach(t),sDe=i(y),yf=n(y,"LI",{});var u3=s(yf);FZ=n(u3,"STRONG",{});var d7e=s(FZ);lDe=r(d7e,"deberta"),d7e.forEach(t),iDe=r(u3," \u2014 "),e$=n(u3,"A",{href:!0});var c7e=s(e$);dDe=r(c7e,"DebertaConfig"),c7e.forEach(t),cDe=r(u3," (DeBERTa model)"),u3.forEach(t),fDe=i(y),Lf=n(y,"LI",{});var _3=s(Lf);TZ=n(_3,"STRONG",{});var f7e=s(TZ);mDe=r(f7e,"deberta-v2"),f7e.forEach(t),gDe=r(_3," \u2014 "),o$=n(_3,"A",{href:!0});var m7e=s(o$);hDe=r(m7e,"DebertaV2Config"),m7e.forEach(t),pDe=r(_3," (DeBERTa-v2 model)"),_3.forEach(t),uDe=i(y),xf=n(y,"LI",{});var b3=s(xf);MZ=n(b3,"STRONG",{});var g7e=s(MZ);_De=r(g7e,"decision_transformer"),g7e.forEach(t),bDe=r(b3," \u2014 "),r$=n(b3,"A",{href:!0});var h7e=s(r$);vDe=r(h7e,"DecisionTransformerConfig"),h7e.forEach(t),FDe=r(b3," (Decision Transformer model)"),b3.forEach(t),TDe=i(y),$f=n(y,"LI",{});var v3=s($f);EZ=n(v3,"STRONG",{});var p7e=s(EZ);MDe=r(p7e,"deit"),p7e.forEach(t),EDe=r(v3," \u2014 "),t$=n(v3,"A",{href:!0});var u7e=s(t$);CDe=r(u7e,"DeiTConfig"),u7e.forEach(t),wDe=r(v3," (DeiT model)"),v3.forEach(t),ADe=i(y),kf=n(y,"LI",{});var _7e=s(kf);CZ=n(_7e,"STRONG",{});var _Br=s(CZ);yDe=r(_Br,"detr"),_Br.forEach(t),LDe=r(_7e," \u2014 "),a$=n(_7e,"A",{href:!0});var bBr=s(a$);xDe=r(bBr,"DetrConfig"),bBr.forEach(t),$De=r(_7e," (DETR model)"),_7e.forEach(t),kDe=i(y),Sf=n(y,"LI",{});var b7e=s(Sf);wZ=n(b7e,"STRONG",{});var vBr=s(wZ);SDe=r(vBr,"distilbert"),vBr.forEach(t),RDe=r(b7e," \u2014 "),n$=n(b7e,"A",{href:!0});var FBr=s(n$);BDe=r(FBr,"DistilBertConfig"),FBr.forEach(t),PDe=r(b7e," (DistilBERT model)"),b7e.forEach(t),IDe=i(y),Rf=n(y,"LI",{});var v7e=s(Rf);AZ=n(v7e,"STRONG",{});var TBr=s(AZ);qDe=r(TBr,"dpr"),TBr.forEach(t),NDe=r(v7e," \u2014 "),s$=n(v7e,"A",{href:!0});var MBr=s(s$);jDe=r(MBr,"DPRConfig"),MBr.forEach(t),DDe=r(v7e," (DPR model)"),v7e.forEach(t),GDe=i(y),Bf=n(y,"LI",{});var F7e=s(Bf);yZ=n(F7e,"STRONG",{});var EBr=s(yZ);ODe=r(EBr,"dpt"),EBr.forEach(t),VDe=r(F7e," \u2014 "),l$=n(F7e,"A",{href:!0});var CBr=s(l$);XDe=r(CBr,"DPTConfig"),CBr.forEach(t),zDe=r(F7e," (DPT model)"),F7e.forEach(t),QDe=i(y),Pf=n(y,"LI",{});var T7e=s(Pf);LZ=n(T7e,"STRONG",{});var wBr=s(LZ);WDe=r(wBr,"electra"),wBr.forEach(t),HDe=r(T7e," \u2014 "),i$=n(T7e,"A",{href:!0});var ABr=s(i$);UDe=r(ABr,"ElectraConfig"),ABr.forEach(t),JDe=r(T7e," (ELECTRA model)"),T7e.forEach(t),YDe=i(y),If=n(y,"LI",{});var M7e=s(If);xZ=n(M7e,"STRONG",{});var yBr=s(xZ);KDe=r(yBr,"encoder-decoder"),yBr.forEach(t),ZDe=r(M7e," \u2014 "),d$=n(M7e,"A",{href:!0});var LBr=s(d$);eGe=r(LBr,"EncoderDecoderConfig"),LBr.forEach(t),oGe=r(M7e," (Encoder decoder model)"),M7e.forEach(t),rGe=i(y),qf=n(y,"LI",{});var E7e=s(qf);$Z=n(E7e,"STRONG",{});var xBr=s($Z);tGe=r(xBr,"flaubert"),xBr.forEach(t),aGe=r(E7e," \u2014 "),c$=n(E7e,"A",{href:!0});var $Br=s(c$);nGe=r($Br,"FlaubertConfig"),$Br.forEach(t),sGe=r(E7e," (FlauBERT model)"),E7e.forEach(t),lGe=i(y),Nf=n(y,"LI",{});var C7e=s(Nf);kZ=n(C7e,"STRONG",{});var kBr=s(kZ);iGe=r(kBr,"fnet"),kBr.forEach(t),dGe=r(C7e," \u2014 "),f$=n(C7e,"A",{href:!0});var SBr=s(f$);cGe=r(SBr,"FNetConfig"),SBr.forEach(t),fGe=r(C7e," (FNet model)"),C7e.forEach(t),mGe=i(y),jf=n(y,"LI",{});var w7e=s(jf);SZ=n(w7e,"STRONG",{});var RBr=s(SZ);gGe=r(RBr,"fsmt"),RBr.forEach(t),hGe=r(w7e," \u2014 "),m$=n(w7e,"A",{href:!0});var BBr=s(m$);pGe=r(BBr,"FSMTConfig"),BBr.forEach(t),uGe=r(w7e," (FairSeq Machine-Translation model)"),w7e.forEach(t),_Ge=i(y),Df=n(y,"LI",{});var A7e=s(Df);RZ=n(A7e,"STRONG",{});var PBr=s(RZ);bGe=r(PBr,"funnel"),PBr.forEach(t),vGe=r(A7e," \u2014 "),g$=n(A7e,"A",{href:!0});var IBr=s(g$);FGe=r(IBr,"FunnelConfig"),IBr.forEach(t),TGe=r(A7e," (Funnel Transformer model)"),A7e.forEach(t),MGe=i(y),Gf=n(y,"LI",{});var y7e=s(Gf);BZ=n(y7e,"STRONG",{});var qBr=s(BZ);EGe=r(qBr,"glpn"),qBr.forEach(t),CGe=r(y7e," \u2014 "),h$=n(y7e,"A",{href:!0});var NBr=s(h$);wGe=r(NBr,"GLPNConfig"),NBr.forEach(t),AGe=r(y7e," (GLPN model)"),y7e.forEach(t),yGe=i(y),Of=n(y,"LI",{});var L7e=s(Of);PZ=n(L7e,"STRONG",{});var jBr=s(PZ);LGe=r(jBr,"gpt2"),jBr.forEach(t),xGe=r(L7e," \u2014 "),p$=n(L7e,"A",{href:!0});var DBr=s(p$);$Ge=r(DBr,"GPT2Config"),DBr.forEach(t),kGe=r(L7e," (OpenAI GPT-2 model)"),L7e.forEach(t),SGe=i(y),Vf=n(y,"LI",{});var x7e=s(Vf);IZ=n(x7e,"STRONG",{});var GBr=s(IZ);RGe=r(GBr,"gpt_neo"),GBr.forEach(t),BGe=r(x7e," \u2014 "),u$=n(x7e,"A",{href:!0});var OBr=s(u$);PGe=r(OBr,"GPTNeoConfig"),OBr.forEach(t),IGe=r(x7e," (GPT Neo model)"),x7e.forEach(t),qGe=i(y),Xf=n(y,"LI",{});var $7e=s(Xf);qZ=n($7e,"STRONG",{});var VBr=s(qZ);NGe=r(VBr,"gptj"),VBr.forEach(t),jGe=r($7e," \u2014 "),_$=n($7e,"A",{href:!0});var XBr=s(_$);DGe=r(XBr,"GPTJConfig"),XBr.forEach(t),GGe=r($7e," (GPT-J model)"),$7e.forEach(t),OGe=i(y),zf=n(y,"LI",{});var k7e=s(zf);NZ=n(k7e,"STRONG",{});var zBr=s(NZ);VGe=r(zBr,"hubert"),zBr.forEach(t),XGe=r(k7e," \u2014 "),b$=n(k7e,"A",{href:!0});var QBr=s(b$);zGe=r(QBr,"HubertConfig"),QBr.forEach(t),QGe=r(k7e," (Hubert model)"),k7e.forEach(t),WGe=i(y),Qf=n(y,"LI",{});var S7e=s(Qf);jZ=n(S7e,"STRONG",{});var WBr=s(jZ);HGe=r(WBr,"ibert"),WBr.forEach(t),UGe=r(S7e," \u2014 "),v$=n(S7e,"A",{href:!0});var HBr=s(v$);JGe=r(HBr,"IBertConfig"),HBr.forEach(t),YGe=r(S7e," (I-BERT model)"),S7e.forEach(t),KGe=i(y),Wf=n(y,"LI",{});var R7e=s(Wf);DZ=n(R7e,"STRONG",{});var UBr=s(DZ);ZGe=r(UBr,"imagegpt"),UBr.forEach(t),eOe=r(R7e," \u2014 "),F$=n(R7e,"A",{href:!0});var JBr=s(F$);oOe=r(JBr,"ImageGPTConfig"),JBr.forEach(t),rOe=r(R7e," (ImageGPT model)"),R7e.forEach(t),tOe=i(y),Hf=n(y,"LI",{});var B7e=s(Hf);GZ=n(B7e,"STRONG",{});var YBr=s(GZ);aOe=r(YBr,"layoutlm"),YBr.forEach(t),nOe=r(B7e," \u2014 "),T$=n(B7e,"A",{href:!0});var KBr=s(T$);sOe=r(KBr,"LayoutLMConfig"),KBr.forEach(t),lOe=r(B7e," (LayoutLM model)"),B7e.forEach(t),iOe=i(y),Uf=n(y,"LI",{});var P7e=s(Uf);OZ=n(P7e,"STRONG",{});var ZBr=s(OZ);dOe=r(ZBr,"layoutlmv2"),ZBr.forEach(t),cOe=r(P7e," \u2014 "),M$=n(P7e,"A",{href:!0});var ePr=s(M$);fOe=r(ePr,"LayoutLMv2Config"),ePr.forEach(t),mOe=r(P7e," (LayoutLMv2 model)"),P7e.forEach(t),gOe=i(y),Jf=n(y,"LI",{});var I7e=s(Jf);VZ=n(I7e,"STRONG",{});var oPr=s(VZ);hOe=r(oPr,"led"),oPr.forEach(t),pOe=r(I7e," \u2014 "),E$=n(I7e,"A",{href:!0});var rPr=s(E$);uOe=r(rPr,"LEDConfig"),rPr.forEach(t),_Oe=r(I7e," (LED model)"),I7e.forEach(t),bOe=i(y),Yf=n(y,"LI",{});var q7e=s(Yf);XZ=n(q7e,"STRONG",{});var tPr=s(XZ);vOe=r(tPr,"longformer"),tPr.forEach(t),FOe=r(q7e," \u2014 "),C$=n(q7e,"A",{href:!0});var aPr=s(C$);TOe=r(aPr,"LongformerConfig"),aPr.forEach(t),MOe=r(q7e," (Longformer model)"),q7e.forEach(t),EOe=i(y),Kf=n(y,"LI",{});var N7e=s(Kf);zZ=n(N7e,"STRONG",{});var nPr=s(zZ);COe=r(nPr,"luke"),nPr.forEach(t),wOe=r(N7e," \u2014 "),w$=n(N7e,"A",{href:!0});var sPr=s(w$);AOe=r(sPr,"LukeConfig"),sPr.forEach(t),yOe=r(N7e," (LUKE model)"),N7e.forEach(t),LOe=i(y),Zf=n(y,"LI",{});var j7e=s(Zf);QZ=n(j7e,"STRONG",{});var lPr=s(QZ);xOe=r(lPr,"lxmert"),lPr.forEach(t),$Oe=r(j7e," \u2014 "),A$=n(j7e,"A",{href:!0});var iPr=s(A$);kOe=r(iPr,"LxmertConfig"),iPr.forEach(t),SOe=r(j7e," (LXMERT model)"),j7e.forEach(t),ROe=i(y),em=n(y,"LI",{});var D7e=s(em);WZ=n(D7e,"STRONG",{});var dPr=s(WZ);BOe=r(dPr,"m2m_100"),dPr.forEach(t),POe=r(D7e," \u2014 "),y$=n(D7e,"A",{href:!0});var cPr=s(y$);IOe=r(cPr,"M2M100Config"),cPr.forEach(t),qOe=r(D7e," (M2M100 model)"),D7e.forEach(t),NOe=i(y),om=n(y,"LI",{});var G7e=s(om);HZ=n(G7e,"STRONG",{});var fPr=s(HZ);jOe=r(fPr,"marian"),fPr.forEach(t),DOe=r(G7e," \u2014 "),L$=n(G7e,"A",{href:!0});var mPr=s(L$);GOe=r(mPr,"MarianConfig"),mPr.forEach(t),OOe=r(G7e," (Marian model)"),G7e.forEach(t),VOe=i(y),rm=n(y,"LI",{});var O7e=s(rm);UZ=n(O7e,"STRONG",{});var gPr=s(UZ);XOe=r(gPr,"maskformer"),gPr.forEach(t),zOe=r(O7e," \u2014 "),x$=n(O7e,"A",{href:!0});var hPr=s(x$);QOe=r(hPr,"MaskFormerConfig"),hPr.forEach(t),WOe=r(O7e," (MaskFormer model)"),O7e.forEach(t),HOe=i(y),tm=n(y,"LI",{});var V7e=s(tm);JZ=n(V7e,"STRONG",{});var pPr=s(JZ);UOe=r(pPr,"mbart"),pPr.forEach(t),JOe=r(V7e," \u2014 "),$$=n(V7e,"A",{href:!0});var uPr=s($$);YOe=r(uPr,"MBartConfig"),uPr.forEach(t),KOe=r(V7e," (mBART model)"),V7e.forEach(t),ZOe=i(y),am=n(y,"LI",{});var X7e=s(am);YZ=n(X7e,"STRONG",{});var _Pr=s(YZ);eVe=r(_Pr,"megatron-bert"),_Pr.forEach(t),oVe=r(X7e," \u2014 "),k$=n(X7e,"A",{href:!0});var bPr=s(k$);rVe=r(bPr,"MegatronBertConfig"),bPr.forEach(t),tVe=r(X7e," (MegatronBert model)"),X7e.forEach(t),aVe=i(y),nm=n(y,"LI",{});var z7e=s(nm);KZ=n(z7e,"STRONG",{});var vPr=s(KZ);nVe=r(vPr,"mobilebert"),vPr.forEach(t),sVe=r(z7e," \u2014 "),S$=n(z7e,"A",{href:!0});var FPr=s(S$);lVe=r(FPr,"MobileBertConfig"),FPr.forEach(t),iVe=r(z7e," (MobileBERT model)"),z7e.forEach(t),dVe=i(y),sm=n(y,"LI",{});var Q7e=s(sm);ZZ=n(Q7e,"STRONG",{});var TPr=s(ZZ);cVe=r(TPr,"mpnet"),TPr.forEach(t),fVe=r(Q7e," \u2014 "),R$=n(Q7e,"A",{href:!0});var MPr=s(R$);mVe=r(MPr,"MPNetConfig"),MPr.forEach(t),gVe=r(Q7e," (MPNet model)"),Q7e.forEach(t),hVe=i(y),lm=n(y,"LI",{});var W7e=s(lm);eee=n(W7e,"STRONG",{});var EPr=s(eee);pVe=r(EPr,"mt5"),EPr.forEach(t),uVe=r(W7e," \u2014 "),B$=n(W7e,"A",{href:!0});var CPr=s(B$);_Ve=r(CPr,"MT5Config"),CPr.forEach(t),bVe=r(W7e," (mT5 model)"),W7e.forEach(t),vVe=i(y),im=n(y,"LI",{});var H7e=s(im);oee=n(H7e,"STRONG",{});var wPr=s(oee);FVe=r(wPr,"nystromformer"),wPr.forEach(t),TVe=r(H7e," \u2014 "),P$=n(H7e,"A",{href:!0});var APr=s(P$);MVe=r(APr,"NystromformerConfig"),APr.forEach(t),EVe=r(H7e," (Nystromformer model)"),H7e.forEach(t),CVe=i(y),dm=n(y,"LI",{});var U7e=s(dm);ree=n(U7e,"STRONG",{});var yPr=s(ree);wVe=r(yPr,"openai-gpt"),yPr.forEach(t),AVe=r(U7e," \u2014 "),I$=n(U7e,"A",{href:!0});var LPr=s(I$);yVe=r(LPr,"OpenAIGPTConfig"),LPr.forEach(t),LVe=r(U7e," (OpenAI GPT model)"),U7e.forEach(t),xVe=i(y),cm=n(y,"LI",{});var J7e=s(cm);tee=n(J7e,"STRONG",{});var xPr=s(tee);$Ve=r(xPr,"pegasus"),xPr.forEach(t),kVe=r(J7e," \u2014 "),q$=n(J7e,"A",{href:!0});var $Pr=s(q$);SVe=r($Pr,"PegasusConfig"),$Pr.forEach(t),RVe=r(J7e," (Pegasus model)"),J7e.forEach(t),BVe=i(y),fm=n(y,"LI",{});var Y7e=s(fm);aee=n(Y7e,"STRONG",{});var kPr=s(aee);PVe=r(kPr,"perceiver"),kPr.forEach(t),IVe=r(Y7e," \u2014 "),N$=n(Y7e,"A",{href:!0});var SPr=s(N$);qVe=r(SPr,"PerceiverConfig"),SPr.forEach(t),NVe=r(Y7e," (Perceiver model)"),Y7e.forEach(t),jVe=i(y),mm=n(y,"LI",{});var K7e=s(mm);nee=n(K7e,"STRONG",{});var RPr=s(nee);DVe=r(RPr,"plbart"),RPr.forEach(t),GVe=r(K7e," \u2014 "),j$=n(K7e,"A",{href:!0});var BPr=s(j$);OVe=r(BPr,"PLBartConfig"),BPr.forEach(t),VVe=r(K7e," (PLBart model)"),K7e.forEach(t),XVe=i(y),gm=n(y,"LI",{});var Z7e=s(gm);see=n(Z7e,"STRONG",{});var PPr=s(see);zVe=r(PPr,"poolformer"),PPr.forEach(t),QVe=r(Z7e," \u2014 "),D$=n(Z7e,"A",{href:!0});var IPr=s(D$);WVe=r(IPr,"PoolFormerConfig"),IPr.forEach(t),HVe=r(Z7e," (PoolFormer model)"),Z7e.forEach(t),UVe=i(y),hm=n(y,"LI",{});var eMe=s(hm);lee=n(eMe,"STRONG",{});var qPr=s(lee);JVe=r(qPr,"prophetnet"),qPr.forEach(t),YVe=r(eMe," \u2014 "),G$=n(eMe,"A",{href:!0});var NPr=s(G$);KVe=r(NPr,"ProphetNetConfig"),NPr.forEach(t),ZVe=r(eMe," (ProphetNet model)"),eMe.forEach(t),eXe=i(y),pm=n(y,"LI",{});var oMe=s(pm);iee=n(oMe,"STRONG",{});var jPr=s(iee);oXe=r(jPr,"qdqbert"),jPr.forEach(t),rXe=r(oMe," \u2014 "),O$=n(oMe,"A",{href:!0});var DPr=s(O$);tXe=r(DPr,"QDQBertConfig"),DPr.forEach(t),aXe=r(oMe," (QDQBert model)"),oMe.forEach(t),nXe=i(y),um=n(y,"LI",{});var rMe=s(um);dee=n(rMe,"STRONG",{});var GPr=s(dee);sXe=r(GPr,"rag"),GPr.forEach(t),lXe=r(rMe," \u2014 "),V$=n(rMe,"A",{href:!0});var OPr=s(V$);iXe=r(OPr,"RagConfig"),OPr.forEach(t),dXe=r(rMe," (RAG model)"),rMe.forEach(t),cXe=i(y),_m=n(y,"LI",{});var tMe=s(_m);cee=n(tMe,"STRONG",{});var VPr=s(cee);fXe=r(VPr,"realm"),VPr.forEach(t),mXe=r(tMe," \u2014 "),X$=n(tMe,"A",{href:!0});var XPr=s(X$);gXe=r(XPr,"RealmConfig"),XPr.forEach(t),hXe=r(tMe," (Realm model)"),tMe.forEach(t),pXe=i(y),bm=n(y,"LI",{});var aMe=s(bm);fee=n(aMe,"STRONG",{});var zPr=s(fee);uXe=r(zPr,"reformer"),zPr.forEach(t),_Xe=r(aMe," \u2014 "),z$=n(aMe,"A",{href:!0});var QPr=s(z$);bXe=r(QPr,"ReformerConfig"),QPr.forEach(t),vXe=r(aMe," (Reformer model)"),aMe.forEach(t),FXe=i(y),vm=n(y,"LI",{});var nMe=s(vm);mee=n(nMe,"STRONG",{});var WPr=s(mee);TXe=r(WPr,"regnet"),WPr.forEach(t),MXe=r(nMe," \u2014 "),Q$=n(nMe,"A",{href:!0});var HPr=s(Q$);EXe=r(HPr,"RegNetConfig"),HPr.forEach(t),CXe=r(nMe," (RegNet model)"),nMe.forEach(t),wXe=i(y),Fm=n(y,"LI",{});var sMe=s(Fm);gee=n(sMe,"STRONG",{});var UPr=s(gee);AXe=r(UPr,"rembert"),UPr.forEach(t),yXe=r(sMe," \u2014 "),W$=n(sMe,"A",{href:!0});var JPr=s(W$);LXe=r(JPr,"RemBertConfig"),JPr.forEach(t),xXe=r(sMe," (RemBERT model)"),sMe.forEach(t),$Xe=i(y),Tm=n(y,"LI",{});var lMe=s(Tm);hee=n(lMe,"STRONG",{});var YPr=s(hee);kXe=r(YPr,"resnet"),YPr.forEach(t),SXe=r(lMe," \u2014 "),H$=n(lMe,"A",{href:!0});var KPr=s(H$);RXe=r(KPr,"ResNetConfig"),KPr.forEach(t),BXe=r(lMe," (ResNet model)"),lMe.forEach(t),PXe=i(y),Mm=n(y,"LI",{});var iMe=s(Mm);pee=n(iMe,"STRONG",{});var ZPr=s(pee);IXe=r(ZPr,"retribert"),ZPr.forEach(t),qXe=r(iMe," \u2014 "),U$=n(iMe,"A",{href:!0});var eIr=s(U$);NXe=r(eIr,"RetriBertConfig"),eIr.forEach(t),jXe=r(iMe," (RetriBERT model)"),iMe.forEach(t),DXe=i(y),Em=n(y,"LI",{});var dMe=s(Em);uee=n(dMe,"STRONG",{});var oIr=s(uee);GXe=r(oIr,"roberta"),oIr.forEach(t),OXe=r(dMe," \u2014 "),J$=n(dMe,"A",{href:!0});var rIr=s(J$);VXe=r(rIr,"RobertaConfig"),rIr.forEach(t),XXe=r(dMe," (RoBERTa model)"),dMe.forEach(t),zXe=i(y),Cm=n(y,"LI",{});var cMe=s(Cm);_ee=n(cMe,"STRONG",{});var tIr=s(_ee);QXe=r(tIr,"roformer"),tIr.forEach(t),WXe=r(cMe," \u2014 "),Y$=n(cMe,"A",{href:!0});var aIr=s(Y$);HXe=r(aIr,"RoFormerConfig"),aIr.forEach(t),UXe=r(cMe," (RoFormer model)"),cMe.forEach(t),JXe=i(y),wm=n(y,"LI",{});var fMe=s(wm);bee=n(fMe,"STRONG",{});var nIr=s(bee);YXe=r(nIr,"segformer"),nIr.forEach(t),KXe=r(fMe," \u2014 "),K$=n(fMe,"A",{href:!0});var sIr=s(K$);ZXe=r(sIr,"SegformerConfig"),sIr.forEach(t),eze=r(fMe," (SegFormer model)"),fMe.forEach(t),oze=i(y),Am=n(y,"LI",{});var mMe=s(Am);vee=n(mMe,"STRONG",{});var lIr=s(vee);rze=r(lIr,"sew"),lIr.forEach(t),tze=r(mMe," \u2014 "),Z$=n(mMe,"A",{href:!0});var iIr=s(Z$);aze=r(iIr,"SEWConfig"),iIr.forEach(t),nze=r(mMe," (SEW model)"),mMe.forEach(t),sze=i(y),ym=n(y,"LI",{});var gMe=s(ym);Fee=n(gMe,"STRONG",{});var dIr=s(Fee);lze=r(dIr,"sew-d"),dIr.forEach(t),ize=r(gMe," \u2014 "),ek=n(gMe,"A",{href:!0});var cIr=s(ek);dze=r(cIr,"SEWDConfig"),cIr.forEach(t),cze=r(gMe," (SEW-D model)"),gMe.forEach(t),fze=i(y),Lm=n(y,"LI",{});var hMe=s(Lm);Tee=n(hMe,"STRONG",{});var fIr=s(Tee);mze=r(fIr,"speech-encoder-decoder"),fIr.forEach(t),gze=r(hMe," \u2014 "),ok=n(hMe,"A",{href:!0});var mIr=s(ok);hze=r(mIr,"SpeechEncoderDecoderConfig"),mIr.forEach(t),pze=r(hMe," (Speech Encoder decoder model)"),hMe.forEach(t),uze=i(y),xm=n(y,"LI",{});var pMe=s(xm);Mee=n(pMe,"STRONG",{});var gIr=s(Mee);_ze=r(gIr,"speech_to_text"),gIr.forEach(t),bze=r(pMe," \u2014 "),rk=n(pMe,"A",{href:!0});var hIr=s(rk);vze=r(hIr,"Speech2TextConfig"),hIr.forEach(t),Fze=r(pMe," (Speech2Text model)"),pMe.forEach(t),Tze=i(y),$m=n(y,"LI",{});var uMe=s($m);Eee=n(uMe,"STRONG",{});var pIr=s(Eee);Mze=r(pIr,"speech_to_text_2"),pIr.forEach(t),Eze=r(uMe," \u2014 "),tk=n(uMe,"A",{href:!0});var uIr=s(tk);Cze=r(uIr,"Speech2Text2Config"),uIr.forEach(t),wze=r(uMe," (Speech2Text2 model)"),uMe.forEach(t),Aze=i(y),km=n(y,"LI",{});var _Me=s(km);Cee=n(_Me,"STRONG",{});var _Ir=s(Cee);yze=r(_Ir,"splinter"),_Ir.forEach(t),Lze=r(_Me," \u2014 "),ak=n(_Me,"A",{href:!0});var bIr=s(ak);xze=r(bIr,"SplinterConfig"),bIr.forEach(t),$ze=r(_Me," (Splinter model)"),_Me.forEach(t),kze=i(y),Sm=n(y,"LI",{});var bMe=s(Sm);wee=n(bMe,"STRONG",{});var vIr=s(wee);Sze=r(vIr,"squeezebert"),vIr.forEach(t),Rze=r(bMe," \u2014 "),nk=n(bMe,"A",{href:!0});var FIr=s(nk);Bze=r(FIr,"SqueezeBertConfig"),FIr.forEach(t),Pze=r(bMe," (SqueezeBERT model)"),bMe.forEach(t),Ize=i(y),Rm=n(y,"LI",{});var vMe=s(Rm);Aee=n(vMe,"STRONG",{});var TIr=s(Aee);qze=r(TIr,"swin"),TIr.forEach(t),Nze=r(vMe," \u2014 "),sk=n(vMe,"A",{href:!0});var MIr=s(sk);jze=r(MIr,"SwinConfig"),MIr.forEach(t),Dze=r(vMe," (Swin model)"),vMe.forEach(t),Gze=i(y),Bm=n(y,"LI",{});var FMe=s(Bm);yee=n(FMe,"STRONG",{});var EIr=s(yee);Oze=r(EIr,"t5"),EIr.forEach(t),Vze=r(FMe," \u2014 "),lk=n(FMe,"A",{href:!0});var CIr=s(lk);Xze=r(CIr,"T5Config"),CIr.forEach(t),zze=r(FMe," (T5 model)"),FMe.forEach(t),Qze=i(y),Pm=n(y,"LI",{});var TMe=s(Pm);Lee=n(TMe,"STRONG",{});var wIr=s(Lee);Wze=r(wIr,"tapas"),wIr.forEach(t),Hze=r(TMe," \u2014 "),ik=n(TMe,"A",{href:!0});var AIr=s(ik);Uze=r(AIr,"TapasConfig"),AIr.forEach(t),Jze=r(TMe," (TAPAS model)"),TMe.forEach(t),Yze=i(y),Im=n(y,"LI",{});var MMe=s(Im);xee=n(MMe,"STRONG",{});var yIr=s(xee);Kze=r(yIr,"tapex"),yIr.forEach(t),Zze=r(MMe," \u2014 "),dk=n(MMe,"A",{href:!0});var LIr=s(dk);eQe=r(LIr,"BartConfig"),LIr.forEach(t),oQe=r(MMe," (TAPEX model)"),MMe.forEach(t),rQe=i(y),qm=n(y,"LI",{});var EMe=s(qm);$ee=n(EMe,"STRONG",{});var xIr=s($ee);tQe=r(xIr,"transfo-xl"),xIr.forEach(t),aQe=r(EMe," \u2014 "),ck=n(EMe,"A",{href:!0});var $Ir=s(ck);nQe=r($Ir,"TransfoXLConfig"),$Ir.forEach(t),sQe=r(EMe," (Transformer-XL model)"),EMe.forEach(t),lQe=i(y),Nm=n(y,"LI",{});var CMe=s(Nm);kee=n(CMe,"STRONG",{});var kIr=s(kee);iQe=r(kIr,"trocr"),kIr.forEach(t),dQe=r(CMe," \u2014 "),fk=n(CMe,"A",{href:!0});var SIr=s(fk);cQe=r(SIr,"TrOCRConfig"),SIr.forEach(t),fQe=r(CMe," (TrOCR model)"),CMe.forEach(t),mQe=i(y),jm=n(y,"LI",{});var wMe=s(jm);See=n(wMe,"STRONG",{});var RIr=s(See);gQe=r(RIr,"unispeech"),RIr.forEach(t),hQe=r(wMe," \u2014 "),mk=n(wMe,"A",{href:!0});var BIr=s(mk);pQe=r(BIr,"UniSpeechConfig"),BIr.forEach(t),uQe=r(wMe," (UniSpeech model)"),wMe.forEach(t),_Qe=i(y),Dm=n(y,"LI",{});var AMe=s(Dm);Ree=n(AMe,"STRONG",{});var PIr=s(Ree);bQe=r(PIr,"unispeech-sat"),PIr.forEach(t),vQe=r(AMe," \u2014 "),gk=n(AMe,"A",{href:!0});var IIr=s(gk);FQe=r(IIr,"UniSpeechSatConfig"),IIr.forEach(t),TQe=r(AMe," (UniSpeechSat model)"),AMe.forEach(t),MQe=i(y),Gm=n(y,"LI",{});var yMe=s(Gm);Bee=n(yMe,"STRONG",{});var qIr=s(Bee);EQe=r(qIr,"van"),qIr.forEach(t),CQe=r(yMe," \u2014 "),hk=n(yMe,"A",{href:!0});var NIr=s(hk);wQe=r(NIr,"VanConfig"),NIr.forEach(t),AQe=r(yMe," (VAN model)"),yMe.forEach(t),yQe=i(y),Om=n(y,"LI",{});var LMe=s(Om);Pee=n(LMe,"STRONG",{});var jIr=s(Pee);LQe=r(jIr,"vilt"),jIr.forEach(t),xQe=r(LMe," \u2014 "),pk=n(LMe,"A",{href:!0});var DIr=s(pk);$Qe=r(DIr,"ViltConfig"),DIr.forEach(t),kQe=r(LMe," (ViLT model)"),LMe.forEach(t),SQe=i(y),Vm=n(y,"LI",{});var xMe=s(Vm);Iee=n(xMe,"STRONG",{});var GIr=s(Iee);RQe=r(GIr,"vision-encoder-decoder"),GIr.forEach(t),BQe=r(xMe," \u2014 "),uk=n(xMe,"A",{href:!0});var OIr=s(uk);PQe=r(OIr,"VisionEncoderDecoderConfig"),OIr.forEach(t),IQe=r(xMe," (Vision Encoder decoder model)"),xMe.forEach(t),qQe=i(y),Xm=n(y,"LI",{});var $Me=s(Xm);qee=n($Me,"STRONG",{});var VIr=s(qee);NQe=r(VIr,"vision-text-dual-encoder"),VIr.forEach(t),jQe=r($Me," \u2014 "),_k=n($Me,"A",{href:!0});var XIr=s(_k);DQe=r(XIr,"VisionTextDualEncoderConfig"),XIr.forEach(t),GQe=r($Me," (VisionTextDualEncoder model)"),$Me.forEach(t),OQe=i(y),zm=n(y,"LI",{});var kMe=s(zm);Nee=n(kMe,"STRONG",{});var zIr=s(Nee);VQe=r(zIr,"visual_bert"),zIr.forEach(t),XQe=r(kMe," \u2014 "),bk=n(kMe,"A",{href:!0});var QIr=s(bk);zQe=r(QIr,"VisualBertConfig"),QIr.forEach(t),QQe=r(kMe," (VisualBert model)"),kMe.forEach(t),WQe=i(y),Qm=n(y,"LI",{});var SMe=s(Qm);jee=n(SMe,"STRONG",{});var WIr=s(jee);HQe=r(WIr,"vit"),WIr.forEach(t),UQe=r(SMe," \u2014 "),vk=n(SMe,"A",{href:!0});var HIr=s(vk);JQe=r(HIr,"ViTConfig"),HIr.forEach(t),YQe=r(SMe," (ViT model)"),SMe.forEach(t),KQe=i(y),Wm=n(y,"LI",{});var RMe=s(Wm);Dee=n(RMe,"STRONG",{});var UIr=s(Dee);ZQe=r(UIr,"vit_mae"),UIr.forEach(t),eWe=r(RMe," \u2014 "),Fk=n(RMe,"A",{href:!0});var JIr=s(Fk);oWe=r(JIr,"ViTMAEConfig"),JIr.forEach(t),rWe=r(RMe," (ViTMAE model)"),RMe.forEach(t),tWe=i(y),Hm=n(y,"LI",{});var BMe=s(Hm);Gee=n(BMe,"STRONG",{});var YIr=s(Gee);aWe=r(YIr,"wav2vec2"),YIr.forEach(t),nWe=r(BMe," \u2014 "),Tk=n(BMe,"A",{href:!0});var KIr=s(Tk);sWe=r(KIr,"Wav2Vec2Config"),KIr.forEach(t),lWe=r(BMe," (Wav2Vec2 model)"),BMe.forEach(t),iWe=i(y),Um=n(y,"LI",{});var PMe=s(Um);Oee=n(PMe,"STRONG",{});var ZIr=s(Oee);dWe=r(ZIr,"wavlm"),ZIr.forEach(t),cWe=r(PMe," \u2014 "),Mk=n(PMe,"A",{href:!0});var eqr=s(Mk);fWe=r(eqr,"WavLMConfig"),eqr.forEach(t),mWe=r(PMe," (WavLM model)"),PMe.forEach(t),gWe=i(y),Jm=n(y,"LI",{});var IMe=s(Jm);Vee=n(IMe,"STRONG",{});var oqr=s(Vee);hWe=r(oqr,"xglm"),oqr.forEach(t),pWe=r(IMe," \u2014 "),Ek=n(IMe,"A",{href:!0});var rqr=s(Ek);uWe=r(rqr,"XGLMConfig"),rqr.forEach(t),_We=r(IMe," (XGLM model)"),IMe.forEach(t),bWe=i(y),Ym=n(y,"LI",{});var qMe=s(Ym);Xee=n(qMe,"STRONG",{});var tqr=s(Xee);vWe=r(tqr,"xlm"),tqr.forEach(t),FWe=r(qMe," \u2014 "),Ck=n(qMe,"A",{href:!0});var aqr=s(Ck);TWe=r(aqr,"XLMConfig"),aqr.forEach(t),MWe=r(qMe," (XLM model)"),qMe.forEach(t),EWe=i(y),Km=n(y,"LI",{});var NMe=s(Km);zee=n(NMe,"STRONG",{});var nqr=s(zee);CWe=r(nqr,"xlm-prophetnet"),nqr.forEach(t),wWe=r(NMe," \u2014 "),wk=n(NMe,"A",{href:!0});var sqr=s(wk);AWe=r(sqr,"XLMProphetNetConfig"),sqr.forEach(t),yWe=r(NMe," (XLMProphetNet model)"),NMe.forEach(t),LWe=i(y),Zm=n(y,"LI",{});var jMe=s(Zm);Qee=n(jMe,"STRONG",{});var lqr=s(Qee);xWe=r(lqr,"xlm-roberta"),lqr.forEach(t),$We=r(jMe," \u2014 "),Ak=n(jMe,"A",{href:!0});var iqr=s(Ak);kWe=r(iqr,"XLMRobertaConfig"),iqr.forEach(t),SWe=r(jMe," (XLM-RoBERTa model)"),jMe.forEach(t),RWe=i(y),eg=n(y,"LI",{});var DMe=s(eg);Wee=n(DMe,"STRONG",{});var dqr=s(Wee);BWe=r(dqr,"xlm-roberta-xl"),dqr.forEach(t),PWe=r(DMe," \u2014 "),yk=n(DMe,"A",{href:!0});var cqr=s(yk);IWe=r(cqr,"XLMRobertaXLConfig"),cqr.forEach(t),qWe=r(DMe," (XLM-RoBERTa-XL model)"),DMe.forEach(t),NWe=i(y),og=n(y,"LI",{});var GMe=s(og);Hee=n(GMe,"STRONG",{});var fqr=s(Hee);jWe=r(fqr,"xlnet"),fqr.forEach(t),DWe=r(GMe," \u2014 "),Lk=n(GMe,"A",{href:!0});var mqr=s(Lk);GWe=r(mqr,"XLNetConfig"),mqr.forEach(t),OWe=r(GMe," (XLNet model)"),GMe.forEach(t),VWe=i(y),rg=n(y,"LI",{});var OMe=s(rg);Uee=n(OMe,"STRONG",{});var gqr=s(Uee);XWe=r(gqr,"yolos"),gqr.forEach(t),zWe=r(OMe," \u2014 "),xk=n(OMe,"A",{href:!0});var hqr=s(xk);QWe=r(hqr,"YolosConfig"),hqr.forEach(t),WWe=r(OMe," (YOLOS model)"),OMe.forEach(t),HWe=i(y),tg=n(y,"LI",{});var VMe=s(tg);Jee=n(VMe,"STRONG",{});var pqr=s(Jee);UWe=r(pqr,"yoso"),pqr.forEach(t),JWe=r(VMe," \u2014 "),$k=n(VMe,"A",{href:!0});var uqr=s($k);YWe=r(uqr,"YosoConfig"),uqr.forEach(t),KWe=r(VMe," (YOSO model)"),VMe.forEach(t),y.forEach(t),ZWe=i(Jr),T(ag.$$.fragment,Jr),Jr.forEach(t),eHe=i(Ur),ng=n(Ur,"DIV",{class:!0});var zPe=s(ng);T(CA.$$.fragment,zPe),oHe=i(zPe),Yee=n(zPe,"P",{});var _qr=s(Yee);rHe=r(_qr,"Register a new configuration for this class."),_qr.forEach(t),zPe.forEach(t),Ur.forEach(t),JRe=i(f),fi=n(f,"H2",{class:!0});var QPe=s(fi);sg=n(QPe,"A",{id:!0,class:!0,href:!0});var bqr=s(sg);Kee=n(bqr,"SPAN",{});var vqr=s(Kee);T(wA.$$.fragment,vqr),vqr.forEach(t),bqr.forEach(t),tHe=i(QPe),Zee=n(QPe,"SPAN",{});var Fqr=s(Zee);aHe=r(Fqr,"AutoTokenizer"),Fqr.forEach(t),QPe.forEach(t),YRe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(AA.$$.fragment,$s),nHe=i($s),yA=n($s,"P",{});var WPe=s(yA);sHe=r(WPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),kk=n(WPe,"A",{href:!0});var Tqr=s(kk);lHe=r(Tqr,"AutoTokenizer.from_pretrained()"),Tqr.forEach(t),iHe=r(WPe," class method."),WPe.forEach(t),dHe=i($s),LA=n($s,"P",{});var HPe=s(LA);cHe=r(HPe,"This class cannot be instantiated directly using "),eoe=n(HPe,"CODE",{});var Mqr=s(eoe);fHe=r(Mqr,"__init__()"),Mqr.forEach(t),mHe=r(HPe," (throws an error)."),HPe.forEach(t),gHe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(xA.$$.fragment,ks),hHe=i(ks),ooe=n(ks,"P",{});var Eqr=s(ooe);pHe=r(Eqr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Eqr.forEach(t),uHe=i(ks),Fa=n(ks,"P",{});var F3=s(Fa);_He=r(F3,"The tokenizer class to instantiate is selected based on the "),roe=n(F3,"CODE",{});var Cqr=s(roe);bHe=r(Cqr,"model_type"),Cqr.forEach(t),vHe=r(F3,` property of the config object (either
passed as an argument or loaded from `),toe=n(F3,"CODE",{});var wqr=s(toe);FHe=r(wqr,"pretrained_model_name_or_path"),wqr.forEach(t),THe=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aoe=n(F3,"CODE",{});var Aqr=s(aoe);MHe=r(Aqr,"pretrained_model_name_or_path"),Aqr.forEach(t),EHe=r(F3,":"),F3.forEach(t),CHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var wx=s(An);noe=n(wx,"STRONG",{});var yqr=s(noe);wHe=r(yqr,"albert"),yqr.forEach(t),AHe=r(wx," \u2014 "),Sk=n(wx,"A",{href:!0});var Lqr=s(Sk);yHe=r(Lqr,"AlbertTokenizer"),Lqr.forEach(t),LHe=r(wx," or "),Rk=n(wx,"A",{href:!0});var xqr=s(Rk);xHe=r(xqr,"AlbertTokenizerFast"),xqr.forEach(t),$He=r(wx," (ALBERT model)"),wx.forEach(t),kHe=i(S),yn=n(S,"LI",{});var Ax=s(yn);soe=n(Ax,"STRONG",{});var $qr=s(soe);SHe=r($qr,"bart"),$qr.forEach(t),RHe=r(Ax," \u2014 "),Bk=n(Ax,"A",{href:!0});var kqr=s(Bk);BHe=r(kqr,"BartTokenizer"),kqr.forEach(t),PHe=r(Ax," or "),Pk=n(Ax,"A",{href:!0});var Sqr=s(Pk);IHe=r(Sqr,"BartTokenizerFast"),Sqr.forEach(t),qHe=r(Ax," (BART model)"),Ax.forEach(t),NHe=i(S),Ln=n(S,"LI",{});var yx=s(Ln);loe=n(yx,"STRONG",{});var Rqr=s(loe);jHe=r(Rqr,"barthez"),Rqr.forEach(t),DHe=r(yx," \u2014 "),Ik=n(yx,"A",{href:!0});var Bqr=s(Ik);GHe=r(Bqr,"BarthezTokenizer"),Bqr.forEach(t),OHe=r(yx," or "),qk=n(yx,"A",{href:!0});var Pqr=s(qk);VHe=r(Pqr,"BarthezTokenizerFast"),Pqr.forEach(t),XHe=r(yx," (BARThez model)"),yx.forEach(t),zHe=i(S),lg=n(S,"LI",{});var XMe=s(lg);ioe=n(XMe,"STRONG",{});var Iqr=s(ioe);QHe=r(Iqr,"bartpho"),Iqr.forEach(t),WHe=r(XMe," \u2014 "),Nk=n(XMe,"A",{href:!0});var qqr=s(Nk);HHe=r(qqr,"BartphoTokenizer"),qqr.forEach(t),UHe=r(XMe," (BARTpho model)"),XMe.forEach(t),JHe=i(S),xn=n(S,"LI",{});var Lx=s(xn);doe=n(Lx,"STRONG",{});var Nqr=s(doe);YHe=r(Nqr,"bert"),Nqr.forEach(t),KHe=r(Lx," \u2014 "),jk=n(Lx,"A",{href:!0});var jqr=s(jk);ZHe=r(jqr,"BertTokenizer"),jqr.forEach(t),eUe=r(Lx," or "),Dk=n(Lx,"A",{href:!0});var Dqr=s(Dk);oUe=r(Dqr,"BertTokenizerFast"),Dqr.forEach(t),rUe=r(Lx," (BERT model)"),Lx.forEach(t),tUe=i(S),ig=n(S,"LI",{});var zMe=s(ig);coe=n(zMe,"STRONG",{});var Gqr=s(coe);aUe=r(Gqr,"bert-generation"),Gqr.forEach(t),nUe=r(zMe," \u2014 "),Gk=n(zMe,"A",{href:!0});var Oqr=s(Gk);sUe=r(Oqr,"BertGenerationTokenizer"),Oqr.forEach(t),lUe=r(zMe," (Bert Generation model)"),zMe.forEach(t),iUe=i(S),dg=n(S,"LI",{});var QMe=s(dg);foe=n(QMe,"STRONG",{});var Vqr=s(foe);dUe=r(Vqr,"bert-japanese"),Vqr.forEach(t),cUe=r(QMe," \u2014 "),Ok=n(QMe,"A",{href:!0});var Xqr=s(Ok);fUe=r(Xqr,"BertJapaneseTokenizer"),Xqr.forEach(t),mUe=r(QMe," (BertJapanese model)"),QMe.forEach(t),gUe=i(S),cg=n(S,"LI",{});var WMe=s(cg);moe=n(WMe,"STRONG",{});var zqr=s(moe);hUe=r(zqr,"bertweet"),zqr.forEach(t),pUe=r(WMe," \u2014 "),Vk=n(WMe,"A",{href:!0});var Qqr=s(Vk);uUe=r(Qqr,"BertweetTokenizer"),Qqr.forEach(t),_Ue=r(WMe," (Bertweet model)"),WMe.forEach(t),bUe=i(S),$n=n(S,"LI",{});var xx=s($n);goe=n(xx,"STRONG",{});var Wqr=s(goe);vUe=r(Wqr,"big_bird"),Wqr.forEach(t),FUe=r(xx," \u2014 "),Xk=n(xx,"A",{href:!0});var Hqr=s(Xk);TUe=r(Hqr,"BigBirdTokenizer"),Hqr.forEach(t),MUe=r(xx," or "),zk=n(xx,"A",{href:!0});var Uqr=s(zk);EUe=r(Uqr,"BigBirdTokenizerFast"),Uqr.forEach(t),CUe=r(xx," (BigBird model)"),xx.forEach(t),wUe=i(S),kn=n(S,"LI",{});var $x=s(kn);hoe=n($x,"STRONG",{});var Jqr=s(hoe);AUe=r(Jqr,"bigbird_pegasus"),Jqr.forEach(t),yUe=r($x," \u2014 "),Qk=n($x,"A",{href:!0});var Yqr=s(Qk);LUe=r(Yqr,"PegasusTokenizer"),Yqr.forEach(t),xUe=r($x," or "),Wk=n($x,"A",{href:!0});var Kqr=s(Wk);$Ue=r(Kqr,"PegasusTokenizerFast"),Kqr.forEach(t),kUe=r($x," (BigBirdPegasus model)"),$x.forEach(t),SUe=i(S),Sn=n(S,"LI",{});var kx=s(Sn);poe=n(kx,"STRONG",{});var Zqr=s(poe);RUe=r(Zqr,"blenderbot"),Zqr.forEach(t),BUe=r(kx," \u2014 "),Hk=n(kx,"A",{href:!0});var eNr=s(Hk);PUe=r(eNr,"BlenderbotTokenizer"),eNr.forEach(t),IUe=r(kx," or "),Uk=n(kx,"A",{href:!0});var oNr=s(Uk);qUe=r(oNr,"BlenderbotTokenizerFast"),oNr.forEach(t),NUe=r(kx," (Blenderbot model)"),kx.forEach(t),jUe=i(S),fg=n(S,"LI",{});var HMe=s(fg);uoe=n(HMe,"STRONG",{});var rNr=s(uoe);DUe=r(rNr,"blenderbot-small"),rNr.forEach(t),GUe=r(HMe," \u2014 "),Jk=n(HMe,"A",{href:!0});var tNr=s(Jk);OUe=r(tNr,"BlenderbotSmallTokenizer"),tNr.forEach(t),VUe=r(HMe," (BlenderbotSmall model)"),HMe.forEach(t),XUe=i(S),mg=n(S,"LI",{});var UMe=s(mg);_oe=n(UMe,"STRONG",{});var aNr=s(_oe);zUe=r(aNr,"byt5"),aNr.forEach(t),QUe=r(UMe," \u2014 "),Yk=n(UMe,"A",{href:!0});var nNr=s(Yk);WUe=r(nNr,"ByT5Tokenizer"),nNr.forEach(t),HUe=r(UMe," (ByT5 model)"),UMe.forEach(t),UUe=i(S),Rn=n(S,"LI",{});var Sx=s(Rn);boe=n(Sx,"STRONG",{});var sNr=s(boe);JUe=r(sNr,"camembert"),sNr.forEach(t),YUe=r(Sx," \u2014 "),Kk=n(Sx,"A",{href:!0});var lNr=s(Kk);KUe=r(lNr,"CamembertTokenizer"),lNr.forEach(t),ZUe=r(Sx," or "),Zk=n(Sx,"A",{href:!0});var iNr=s(Zk);eJe=r(iNr,"CamembertTokenizerFast"),iNr.forEach(t),oJe=r(Sx," (CamemBERT model)"),Sx.forEach(t),rJe=i(S),gg=n(S,"LI",{});var JMe=s(gg);voe=n(JMe,"STRONG",{});var dNr=s(voe);tJe=r(dNr,"canine"),dNr.forEach(t),aJe=r(JMe," \u2014 "),eS=n(JMe,"A",{href:!0});var cNr=s(eS);nJe=r(cNr,"CanineTokenizer"),cNr.forEach(t),sJe=r(JMe," (Canine model)"),JMe.forEach(t),lJe=i(S),Bn=n(S,"LI",{});var Rx=s(Bn);Foe=n(Rx,"STRONG",{});var fNr=s(Foe);iJe=r(fNr,"clip"),fNr.forEach(t),dJe=r(Rx," \u2014 "),oS=n(Rx,"A",{href:!0});var mNr=s(oS);cJe=r(mNr,"CLIPTokenizer"),mNr.forEach(t),fJe=r(Rx," or "),rS=n(Rx,"A",{href:!0});var gNr=s(rS);mJe=r(gNr,"CLIPTokenizerFast"),gNr.forEach(t),gJe=r(Rx," (CLIP model)"),Rx.forEach(t),hJe=i(S),Pn=n(S,"LI",{});var Bx=s(Pn);Toe=n(Bx,"STRONG",{});var hNr=s(Toe);pJe=r(hNr,"convbert"),hNr.forEach(t),uJe=r(Bx," \u2014 "),tS=n(Bx,"A",{href:!0});var pNr=s(tS);_Je=r(pNr,"ConvBertTokenizer"),pNr.forEach(t),bJe=r(Bx," or "),aS=n(Bx,"A",{href:!0});var uNr=s(aS);vJe=r(uNr,"ConvBertTokenizerFast"),uNr.forEach(t),FJe=r(Bx," (ConvBERT model)"),Bx.forEach(t),TJe=i(S),In=n(S,"LI",{});var Px=s(In);Moe=n(Px,"STRONG",{});var _Nr=s(Moe);MJe=r(_Nr,"cpm"),_Nr.forEach(t),EJe=r(Px," \u2014 "),nS=n(Px,"A",{href:!0});var bNr=s(nS);CJe=r(bNr,"CpmTokenizer"),bNr.forEach(t),wJe=r(Px," or "),sS=n(Px,"A",{href:!0});var vNr=s(sS);AJe=r(vNr,"CpmTokenizerFast"),vNr.forEach(t),yJe=r(Px," (CPM model)"),Px.forEach(t),LJe=i(S),hg=n(S,"LI",{});var YMe=s(hg);Eoe=n(YMe,"STRONG",{});var FNr=s(Eoe);xJe=r(FNr,"ctrl"),FNr.forEach(t),$Je=r(YMe," \u2014 "),lS=n(YMe,"A",{href:!0});var TNr=s(lS);kJe=r(TNr,"CTRLTokenizer"),TNr.forEach(t),SJe=r(YMe," (CTRL model)"),YMe.forEach(t),RJe=i(S),qn=n(S,"LI",{});var Ix=s(qn);Coe=n(Ix,"STRONG",{});var MNr=s(Coe);BJe=r(MNr,"data2vec-text"),MNr.forEach(t),PJe=r(Ix," \u2014 "),iS=n(Ix,"A",{href:!0});var ENr=s(iS);IJe=r(ENr,"RobertaTokenizer"),ENr.forEach(t),qJe=r(Ix," or "),dS=n(Ix,"A",{href:!0});var CNr=s(dS);NJe=r(CNr,"RobertaTokenizerFast"),CNr.forEach(t),jJe=r(Ix," (Data2VecText model)"),Ix.forEach(t),DJe=i(S),Nn=n(S,"LI",{});var qx=s(Nn);woe=n(qx,"STRONG",{});var wNr=s(woe);GJe=r(wNr,"deberta"),wNr.forEach(t),OJe=r(qx," \u2014 "),cS=n(qx,"A",{href:!0});var ANr=s(cS);VJe=r(ANr,"DebertaTokenizer"),ANr.forEach(t),XJe=r(qx," or "),fS=n(qx,"A",{href:!0});var yNr=s(fS);zJe=r(yNr,"DebertaTokenizerFast"),yNr.forEach(t),QJe=r(qx," (DeBERTa model)"),qx.forEach(t),WJe=i(S),jn=n(S,"LI",{});var Nx=s(jn);Aoe=n(Nx,"STRONG",{});var LNr=s(Aoe);HJe=r(LNr,"deberta-v2"),LNr.forEach(t),UJe=r(Nx," \u2014 "),mS=n(Nx,"A",{href:!0});var xNr=s(mS);JJe=r(xNr,"DebertaV2Tokenizer"),xNr.forEach(t),YJe=r(Nx," or "),gS=n(Nx,"A",{href:!0});var $Nr=s(gS);KJe=r($Nr,"DebertaV2TokenizerFast"),$Nr.forEach(t),ZJe=r(Nx," (DeBERTa-v2 model)"),Nx.forEach(t),eYe=i(S),Dn=n(S,"LI",{});var jx=s(Dn);yoe=n(jx,"STRONG",{});var kNr=s(yoe);oYe=r(kNr,"distilbert"),kNr.forEach(t),rYe=r(jx," \u2014 "),hS=n(jx,"A",{href:!0});var SNr=s(hS);tYe=r(SNr,"DistilBertTokenizer"),SNr.forEach(t),aYe=r(jx," or "),pS=n(jx,"A",{href:!0});var RNr=s(pS);nYe=r(RNr,"DistilBertTokenizerFast"),RNr.forEach(t),sYe=r(jx," (DistilBERT model)"),jx.forEach(t),lYe=i(S),Gn=n(S,"LI",{});var Dx=s(Gn);Loe=n(Dx,"STRONG",{});var BNr=s(Loe);iYe=r(BNr,"dpr"),BNr.forEach(t),dYe=r(Dx," \u2014 "),uS=n(Dx,"A",{href:!0});var PNr=s(uS);cYe=r(PNr,"DPRQuestionEncoderTokenizer"),PNr.forEach(t),fYe=r(Dx," or "),_S=n(Dx,"A",{href:!0});var INr=s(_S);mYe=r(INr,"DPRQuestionEncoderTokenizerFast"),INr.forEach(t),gYe=r(Dx," (DPR model)"),Dx.forEach(t),hYe=i(S),On=n(S,"LI",{});var Gx=s(On);xoe=n(Gx,"STRONG",{});var qNr=s(xoe);pYe=r(qNr,"electra"),qNr.forEach(t),uYe=r(Gx," \u2014 "),bS=n(Gx,"A",{href:!0});var NNr=s(bS);_Ye=r(NNr,"ElectraTokenizer"),NNr.forEach(t),bYe=r(Gx," or "),vS=n(Gx,"A",{href:!0});var jNr=s(vS);vYe=r(jNr,"ElectraTokenizerFast"),jNr.forEach(t),FYe=r(Gx," (ELECTRA model)"),Gx.forEach(t),TYe=i(S),pg=n(S,"LI",{});var KMe=s(pg);$oe=n(KMe,"STRONG",{});var DNr=s($oe);MYe=r(DNr,"flaubert"),DNr.forEach(t),EYe=r(KMe," \u2014 "),FS=n(KMe,"A",{href:!0});var GNr=s(FS);CYe=r(GNr,"FlaubertTokenizer"),GNr.forEach(t),wYe=r(KMe," (FlauBERT model)"),KMe.forEach(t),AYe=i(S),Vn=n(S,"LI",{});var Ox=s(Vn);koe=n(Ox,"STRONG",{});var ONr=s(koe);yYe=r(ONr,"fnet"),ONr.forEach(t),LYe=r(Ox," \u2014 "),TS=n(Ox,"A",{href:!0});var VNr=s(TS);xYe=r(VNr,"FNetTokenizer"),VNr.forEach(t),$Ye=r(Ox," or "),MS=n(Ox,"A",{href:!0});var XNr=s(MS);kYe=r(XNr,"FNetTokenizerFast"),XNr.forEach(t),SYe=r(Ox," (FNet model)"),Ox.forEach(t),RYe=i(S),ug=n(S,"LI",{});var ZMe=s(ug);Soe=n(ZMe,"STRONG",{});var zNr=s(Soe);BYe=r(zNr,"fsmt"),zNr.forEach(t),PYe=r(ZMe," \u2014 "),ES=n(ZMe,"A",{href:!0});var QNr=s(ES);IYe=r(QNr,"FSMTTokenizer"),QNr.forEach(t),qYe=r(ZMe," (FairSeq Machine-Translation model)"),ZMe.forEach(t),NYe=i(S),Xn=n(S,"LI",{});var Vx=s(Xn);Roe=n(Vx,"STRONG",{});var WNr=s(Roe);jYe=r(WNr,"funnel"),WNr.forEach(t),DYe=r(Vx," \u2014 "),CS=n(Vx,"A",{href:!0});var HNr=s(CS);GYe=r(HNr,"FunnelTokenizer"),HNr.forEach(t),OYe=r(Vx," or "),wS=n(Vx,"A",{href:!0});var UNr=s(wS);VYe=r(UNr,"FunnelTokenizerFast"),UNr.forEach(t),XYe=r(Vx," (Funnel Transformer model)"),Vx.forEach(t),zYe=i(S),zn=n(S,"LI",{});var Xx=s(zn);Boe=n(Xx,"STRONG",{});var JNr=s(Boe);QYe=r(JNr,"gpt2"),JNr.forEach(t),WYe=r(Xx," \u2014 "),AS=n(Xx,"A",{href:!0});var YNr=s(AS);HYe=r(YNr,"GPT2Tokenizer"),YNr.forEach(t),UYe=r(Xx," or "),yS=n(Xx,"A",{href:!0});var KNr=s(yS);JYe=r(KNr,"GPT2TokenizerFast"),KNr.forEach(t),YYe=r(Xx," (OpenAI GPT-2 model)"),Xx.forEach(t),KYe=i(S),Qn=n(S,"LI",{});var zx=s(Qn);Poe=n(zx,"STRONG",{});var ZNr=s(Poe);ZYe=r(ZNr,"gpt_neo"),ZNr.forEach(t),eKe=r(zx," \u2014 "),LS=n(zx,"A",{href:!0});var ejr=s(LS);oKe=r(ejr,"GPT2Tokenizer"),ejr.forEach(t),rKe=r(zx," or "),xS=n(zx,"A",{href:!0});var ojr=s(xS);tKe=r(ojr,"GPT2TokenizerFast"),ojr.forEach(t),aKe=r(zx," (GPT Neo model)"),zx.forEach(t),nKe=i(S),Wn=n(S,"LI",{});var Qx=s(Wn);Ioe=n(Qx,"STRONG",{});var rjr=s(Ioe);sKe=r(rjr,"gptj"),rjr.forEach(t),lKe=r(Qx," \u2014 "),$S=n(Qx,"A",{href:!0});var tjr=s($S);iKe=r(tjr,"GPT2Tokenizer"),tjr.forEach(t),dKe=r(Qx," or "),kS=n(Qx,"A",{href:!0});var ajr=s(kS);cKe=r(ajr,"GPT2TokenizerFast"),ajr.forEach(t),fKe=r(Qx," (GPT-J model)"),Qx.forEach(t),mKe=i(S),Hn=n(S,"LI",{});var Wx=s(Hn);qoe=n(Wx,"STRONG",{});var njr=s(qoe);gKe=r(njr,"herbert"),njr.forEach(t),hKe=r(Wx," \u2014 "),SS=n(Wx,"A",{href:!0});var sjr=s(SS);pKe=r(sjr,"HerbertTokenizer"),sjr.forEach(t),uKe=r(Wx," or "),RS=n(Wx,"A",{href:!0});var ljr=s(RS);_Ke=r(ljr,"HerbertTokenizerFast"),ljr.forEach(t),bKe=r(Wx," (HerBERT model)"),Wx.forEach(t),vKe=i(S),_g=n(S,"LI",{});var eEe=s(_g);Noe=n(eEe,"STRONG",{});var ijr=s(Noe);FKe=r(ijr,"hubert"),ijr.forEach(t),TKe=r(eEe," \u2014 "),BS=n(eEe,"A",{href:!0});var djr=s(BS);MKe=r(djr,"Wav2Vec2CTCTokenizer"),djr.forEach(t),EKe=r(eEe," (Hubert model)"),eEe.forEach(t),CKe=i(S),Un=n(S,"LI",{});var Hx=s(Un);joe=n(Hx,"STRONG",{});var cjr=s(joe);wKe=r(cjr,"ibert"),cjr.forEach(t),AKe=r(Hx," \u2014 "),PS=n(Hx,"A",{href:!0});var fjr=s(PS);yKe=r(fjr,"RobertaTokenizer"),fjr.forEach(t),LKe=r(Hx," or "),IS=n(Hx,"A",{href:!0});var mjr=s(IS);xKe=r(mjr,"RobertaTokenizerFast"),mjr.forEach(t),$Ke=r(Hx," (I-BERT model)"),Hx.forEach(t),kKe=i(S),Jn=n(S,"LI",{});var Ux=s(Jn);Doe=n(Ux,"STRONG",{});var gjr=s(Doe);SKe=r(gjr,"layoutlm"),gjr.forEach(t),RKe=r(Ux," \u2014 "),qS=n(Ux,"A",{href:!0});var hjr=s(qS);BKe=r(hjr,"LayoutLMTokenizer"),hjr.forEach(t),PKe=r(Ux," or "),NS=n(Ux,"A",{href:!0});var pjr=s(NS);IKe=r(pjr,"LayoutLMTokenizerFast"),pjr.forEach(t),qKe=r(Ux," (LayoutLM model)"),Ux.forEach(t),NKe=i(S),Yn=n(S,"LI",{});var Jx=s(Yn);Goe=n(Jx,"STRONG",{});var ujr=s(Goe);jKe=r(ujr,"layoutlmv2"),ujr.forEach(t),DKe=r(Jx," \u2014 "),jS=n(Jx,"A",{href:!0});var _jr=s(jS);GKe=r(_jr,"LayoutLMv2Tokenizer"),_jr.forEach(t),OKe=r(Jx," or "),DS=n(Jx,"A",{href:!0});var bjr=s(DS);VKe=r(bjr,"LayoutLMv2TokenizerFast"),bjr.forEach(t),XKe=r(Jx," (LayoutLMv2 model)"),Jx.forEach(t),zKe=i(S),Kn=n(S,"LI",{});var Yx=s(Kn);Ooe=n(Yx,"STRONG",{});var vjr=s(Ooe);QKe=r(vjr,"layoutxlm"),vjr.forEach(t),WKe=r(Yx," \u2014 "),GS=n(Yx,"A",{href:!0});var Fjr=s(GS);HKe=r(Fjr,"LayoutXLMTokenizer"),Fjr.forEach(t),UKe=r(Yx," or "),OS=n(Yx,"A",{href:!0});var Tjr=s(OS);JKe=r(Tjr,"LayoutXLMTokenizerFast"),Tjr.forEach(t),YKe=r(Yx," (LayoutXLM model)"),Yx.forEach(t),KKe=i(S),Zn=n(S,"LI",{});var Kx=s(Zn);Voe=n(Kx,"STRONG",{});var Mjr=s(Voe);ZKe=r(Mjr,"led"),Mjr.forEach(t),eZe=r(Kx," \u2014 "),VS=n(Kx,"A",{href:!0});var Ejr=s(VS);oZe=r(Ejr,"LEDTokenizer"),Ejr.forEach(t),rZe=r(Kx," or "),XS=n(Kx,"A",{href:!0});var Cjr=s(XS);tZe=r(Cjr,"LEDTokenizerFast"),Cjr.forEach(t),aZe=r(Kx," (LED model)"),Kx.forEach(t),nZe=i(S),es=n(S,"LI",{});var Zx=s(es);Xoe=n(Zx,"STRONG",{});var wjr=s(Xoe);sZe=r(wjr,"longformer"),wjr.forEach(t),lZe=r(Zx," \u2014 "),zS=n(Zx,"A",{href:!0});var Ajr=s(zS);iZe=r(Ajr,"LongformerTokenizer"),Ajr.forEach(t),dZe=r(Zx," or "),QS=n(Zx,"A",{href:!0});var yjr=s(QS);cZe=r(yjr,"LongformerTokenizerFast"),yjr.forEach(t),fZe=r(Zx," (Longformer model)"),Zx.forEach(t),mZe=i(S),bg=n(S,"LI",{});var oEe=s(bg);zoe=n(oEe,"STRONG",{});var Ljr=s(zoe);gZe=r(Ljr,"luke"),Ljr.forEach(t),hZe=r(oEe," \u2014 "),WS=n(oEe,"A",{href:!0});var xjr=s(WS);pZe=r(xjr,"LukeTokenizer"),xjr.forEach(t),uZe=r(oEe," (LUKE model)"),oEe.forEach(t),_Ze=i(S),os=n(S,"LI",{});var e9=s(os);Qoe=n(e9,"STRONG",{});var $jr=s(Qoe);bZe=r($jr,"lxmert"),$jr.forEach(t),vZe=r(e9," \u2014 "),HS=n(e9,"A",{href:!0});var kjr=s(HS);FZe=r(kjr,"LxmertTokenizer"),kjr.forEach(t),TZe=r(e9," or "),US=n(e9,"A",{href:!0});var Sjr=s(US);MZe=r(Sjr,"LxmertTokenizerFast"),Sjr.forEach(t),EZe=r(e9," (LXMERT model)"),e9.forEach(t),CZe=i(S),vg=n(S,"LI",{});var rEe=s(vg);Woe=n(rEe,"STRONG",{});var Rjr=s(Woe);wZe=r(Rjr,"m2m_100"),Rjr.forEach(t),AZe=r(rEe," \u2014 "),JS=n(rEe,"A",{href:!0});var Bjr=s(JS);yZe=r(Bjr,"M2M100Tokenizer"),Bjr.forEach(t),LZe=r(rEe," (M2M100 model)"),rEe.forEach(t),xZe=i(S),Fg=n(S,"LI",{});var tEe=s(Fg);Hoe=n(tEe,"STRONG",{});var Pjr=s(Hoe);$Ze=r(Pjr,"marian"),Pjr.forEach(t),kZe=r(tEe," \u2014 "),YS=n(tEe,"A",{href:!0});var Ijr=s(YS);SZe=r(Ijr,"MarianTokenizer"),Ijr.forEach(t),RZe=r(tEe," (Marian model)"),tEe.forEach(t),BZe=i(S),rs=n(S,"LI",{});var o9=s(rs);Uoe=n(o9,"STRONG",{});var qjr=s(Uoe);PZe=r(qjr,"mbart"),qjr.forEach(t),IZe=r(o9," \u2014 "),KS=n(o9,"A",{href:!0});var Njr=s(KS);qZe=r(Njr,"MBartTokenizer"),Njr.forEach(t),NZe=r(o9," or "),ZS=n(o9,"A",{href:!0});var jjr=s(ZS);jZe=r(jjr,"MBartTokenizerFast"),jjr.forEach(t),DZe=r(o9," (mBART model)"),o9.forEach(t),GZe=i(S),ts=n(S,"LI",{});var r9=s(ts);Joe=n(r9,"STRONG",{});var Djr=s(Joe);OZe=r(Djr,"mbart50"),Djr.forEach(t),VZe=r(r9," \u2014 "),eR=n(r9,"A",{href:!0});var Gjr=s(eR);XZe=r(Gjr,"MBart50Tokenizer"),Gjr.forEach(t),zZe=r(r9," or "),oR=n(r9,"A",{href:!0});var Ojr=s(oR);QZe=r(Ojr,"MBart50TokenizerFast"),Ojr.forEach(t),WZe=r(r9," (mBART-50 model)"),r9.forEach(t),HZe=i(S),as=n(S,"LI",{});var t9=s(as);Yoe=n(t9,"STRONG",{});var Vjr=s(Yoe);UZe=r(Vjr,"megatron-bert"),Vjr.forEach(t),JZe=r(t9," \u2014 "),rR=n(t9,"A",{href:!0});var Xjr=s(rR);YZe=r(Xjr,"BertTokenizer"),Xjr.forEach(t),KZe=r(t9," or "),tR=n(t9,"A",{href:!0});var zjr=s(tR);ZZe=r(zjr,"BertTokenizerFast"),zjr.forEach(t),eeo=r(t9," (MegatronBert model)"),t9.forEach(t),oeo=i(S),Tg=n(S,"LI",{});var aEe=s(Tg);Koe=n(aEe,"STRONG",{});var Qjr=s(Koe);reo=r(Qjr,"mluke"),Qjr.forEach(t),teo=r(aEe," \u2014 "),aR=n(aEe,"A",{href:!0});var Wjr=s(aR);aeo=r(Wjr,"MLukeTokenizer"),Wjr.forEach(t),neo=r(aEe," (mLUKE model)"),aEe.forEach(t),seo=i(S),ns=n(S,"LI",{});var a9=s(ns);Zoe=n(a9,"STRONG",{});var Hjr=s(Zoe);leo=r(Hjr,"mobilebert"),Hjr.forEach(t),ieo=r(a9," \u2014 "),nR=n(a9,"A",{href:!0});var Ujr=s(nR);deo=r(Ujr,"MobileBertTokenizer"),Ujr.forEach(t),ceo=r(a9," or "),sR=n(a9,"A",{href:!0});var Jjr=s(sR);feo=r(Jjr,"MobileBertTokenizerFast"),Jjr.forEach(t),meo=r(a9," (MobileBERT model)"),a9.forEach(t),geo=i(S),ss=n(S,"LI",{});var n9=s(ss);ere=n(n9,"STRONG",{});var Yjr=s(ere);heo=r(Yjr,"mpnet"),Yjr.forEach(t),peo=r(n9," \u2014 "),lR=n(n9,"A",{href:!0});var Kjr=s(lR);ueo=r(Kjr,"MPNetTokenizer"),Kjr.forEach(t),_eo=r(n9," or "),iR=n(n9,"A",{href:!0});var Zjr=s(iR);beo=r(Zjr,"MPNetTokenizerFast"),Zjr.forEach(t),veo=r(n9," (MPNet model)"),n9.forEach(t),Feo=i(S),ls=n(S,"LI",{});var s9=s(ls);ore=n(s9,"STRONG",{});var eDr=s(ore);Teo=r(eDr,"mt5"),eDr.forEach(t),Meo=r(s9," \u2014 "),dR=n(s9,"A",{href:!0});var oDr=s(dR);Eeo=r(oDr,"MT5Tokenizer"),oDr.forEach(t),Ceo=r(s9," or "),cR=n(s9,"A",{href:!0});var rDr=s(cR);weo=r(rDr,"MT5TokenizerFast"),rDr.forEach(t),Aeo=r(s9," (mT5 model)"),s9.forEach(t),yeo=i(S),is=n(S,"LI",{});var l9=s(is);rre=n(l9,"STRONG",{});var tDr=s(rre);Leo=r(tDr,"nystromformer"),tDr.forEach(t),xeo=r(l9," \u2014 "),fR=n(l9,"A",{href:!0});var aDr=s(fR);$eo=r(aDr,"AlbertTokenizer"),aDr.forEach(t),keo=r(l9," or "),mR=n(l9,"A",{href:!0});var nDr=s(mR);Seo=r(nDr,"AlbertTokenizerFast"),nDr.forEach(t),Reo=r(l9," (Nystromformer model)"),l9.forEach(t),Beo=i(S),ds=n(S,"LI",{});var i9=s(ds);tre=n(i9,"STRONG",{});var sDr=s(tre);Peo=r(sDr,"openai-gpt"),sDr.forEach(t),Ieo=r(i9," \u2014 "),gR=n(i9,"A",{href:!0});var lDr=s(gR);qeo=r(lDr,"OpenAIGPTTokenizer"),lDr.forEach(t),Neo=r(i9," or "),hR=n(i9,"A",{href:!0});var iDr=s(hR);jeo=r(iDr,"OpenAIGPTTokenizerFast"),iDr.forEach(t),Deo=r(i9," (OpenAI GPT model)"),i9.forEach(t),Geo=i(S),cs=n(S,"LI",{});var d9=s(cs);are=n(d9,"STRONG",{});var dDr=s(are);Oeo=r(dDr,"pegasus"),dDr.forEach(t),Veo=r(d9," \u2014 "),pR=n(d9,"A",{href:!0});var cDr=s(pR);Xeo=r(cDr,"PegasusTokenizer"),cDr.forEach(t),zeo=r(d9," or "),uR=n(d9,"A",{href:!0});var fDr=s(uR);Qeo=r(fDr,"PegasusTokenizerFast"),fDr.forEach(t),Weo=r(d9," (Pegasus model)"),d9.forEach(t),Heo=i(S),Mg=n(S,"LI",{});var nEe=s(Mg);nre=n(nEe,"STRONG",{});var mDr=s(nre);Ueo=r(mDr,"perceiver"),mDr.forEach(t),Jeo=r(nEe," \u2014 "),_R=n(nEe,"A",{href:!0});var gDr=s(_R);Yeo=r(gDr,"PerceiverTokenizer"),gDr.forEach(t),Keo=r(nEe," (Perceiver model)"),nEe.forEach(t),Zeo=i(S),Eg=n(S,"LI",{});var sEe=s(Eg);sre=n(sEe,"STRONG",{});var hDr=s(sre);eoo=r(hDr,"phobert"),hDr.forEach(t),ooo=r(sEe," \u2014 "),bR=n(sEe,"A",{href:!0});var pDr=s(bR);roo=r(pDr,"PhobertTokenizer"),pDr.forEach(t),too=r(sEe," (PhoBERT model)"),sEe.forEach(t),aoo=i(S),Cg=n(S,"LI",{});var lEe=s(Cg);lre=n(lEe,"STRONG",{});var uDr=s(lre);noo=r(uDr,"plbart"),uDr.forEach(t),soo=r(lEe," \u2014 "),vR=n(lEe,"A",{href:!0});var _Dr=s(vR);loo=r(_Dr,"PLBartTokenizer"),_Dr.forEach(t),ioo=r(lEe," (PLBart model)"),lEe.forEach(t),doo=i(S),wg=n(S,"LI",{});var iEe=s(wg);ire=n(iEe,"STRONG",{});var bDr=s(ire);coo=r(bDr,"prophetnet"),bDr.forEach(t),foo=r(iEe," \u2014 "),FR=n(iEe,"A",{href:!0});var vDr=s(FR);moo=r(vDr,"ProphetNetTokenizer"),vDr.forEach(t),goo=r(iEe," (ProphetNet model)"),iEe.forEach(t),hoo=i(S),fs=n(S,"LI",{});var c9=s(fs);dre=n(c9,"STRONG",{});var FDr=s(dre);poo=r(FDr,"qdqbert"),FDr.forEach(t),uoo=r(c9," \u2014 "),TR=n(c9,"A",{href:!0});var TDr=s(TR);_oo=r(TDr,"BertTokenizer"),TDr.forEach(t),boo=r(c9," or "),MR=n(c9,"A",{href:!0});var MDr=s(MR);voo=r(MDr,"BertTokenizerFast"),MDr.forEach(t),Foo=r(c9," (QDQBert model)"),c9.forEach(t),Too=i(S),Ag=n(S,"LI",{});var dEe=s(Ag);cre=n(dEe,"STRONG",{});var EDr=s(cre);Moo=r(EDr,"rag"),EDr.forEach(t),Eoo=r(dEe," \u2014 "),ER=n(dEe,"A",{href:!0});var CDr=s(ER);Coo=r(CDr,"RagTokenizer"),CDr.forEach(t),woo=r(dEe," (RAG model)"),dEe.forEach(t),Aoo=i(S),ms=n(S,"LI",{});var f9=s(ms);fre=n(f9,"STRONG",{});var wDr=s(fre);yoo=r(wDr,"realm"),wDr.forEach(t),Loo=r(f9," \u2014 "),CR=n(f9,"A",{href:!0});var ADr=s(CR);xoo=r(ADr,"RealmTokenizer"),ADr.forEach(t),$oo=r(f9," or "),wR=n(f9,"A",{href:!0});var yDr=s(wR);koo=r(yDr,"RealmTokenizerFast"),yDr.forEach(t),Soo=r(f9," (Realm model)"),f9.forEach(t),Roo=i(S),gs=n(S,"LI",{});var m9=s(gs);mre=n(m9,"STRONG",{});var LDr=s(mre);Boo=r(LDr,"reformer"),LDr.forEach(t),Poo=r(m9," \u2014 "),AR=n(m9,"A",{href:!0});var xDr=s(AR);Ioo=r(xDr,"ReformerTokenizer"),xDr.forEach(t),qoo=r(m9," or "),yR=n(m9,"A",{href:!0});var $Dr=s(yR);Noo=r($Dr,"ReformerTokenizerFast"),$Dr.forEach(t),joo=r(m9," (Reformer model)"),m9.forEach(t),Doo=i(S),hs=n(S,"LI",{});var g9=s(hs);gre=n(g9,"STRONG",{});var kDr=s(gre);Goo=r(kDr,"rembert"),kDr.forEach(t),Ooo=r(g9," \u2014 "),LR=n(g9,"A",{href:!0});var SDr=s(LR);Voo=r(SDr,"RemBertTokenizer"),SDr.forEach(t),Xoo=r(g9," or "),xR=n(g9,"A",{href:!0});var RDr=s(xR);zoo=r(RDr,"RemBertTokenizerFast"),RDr.forEach(t),Qoo=r(g9," (RemBERT model)"),g9.forEach(t),Woo=i(S),ps=n(S,"LI",{});var h9=s(ps);hre=n(h9,"STRONG",{});var BDr=s(hre);Hoo=r(BDr,"retribert"),BDr.forEach(t),Uoo=r(h9," \u2014 "),$R=n(h9,"A",{href:!0});var PDr=s($R);Joo=r(PDr,"RetriBertTokenizer"),PDr.forEach(t),Yoo=r(h9," or "),kR=n(h9,"A",{href:!0});var IDr=s(kR);Koo=r(IDr,"RetriBertTokenizerFast"),IDr.forEach(t),Zoo=r(h9," (RetriBERT model)"),h9.forEach(t),ero=i(S),us=n(S,"LI",{});var p9=s(us);pre=n(p9,"STRONG",{});var qDr=s(pre);oro=r(qDr,"roberta"),qDr.forEach(t),rro=r(p9," \u2014 "),SR=n(p9,"A",{href:!0});var NDr=s(SR);tro=r(NDr,"RobertaTokenizer"),NDr.forEach(t),aro=r(p9," or "),RR=n(p9,"A",{href:!0});var jDr=s(RR);nro=r(jDr,"RobertaTokenizerFast"),jDr.forEach(t),sro=r(p9," (RoBERTa model)"),p9.forEach(t),lro=i(S),_s=n(S,"LI",{});var u9=s(_s);ure=n(u9,"STRONG",{});var DDr=s(ure);iro=r(DDr,"roformer"),DDr.forEach(t),dro=r(u9," \u2014 "),BR=n(u9,"A",{href:!0});var GDr=s(BR);cro=r(GDr,"RoFormerTokenizer"),GDr.forEach(t),fro=r(u9," or "),PR=n(u9,"A",{href:!0});var ODr=s(PR);mro=r(ODr,"RoFormerTokenizerFast"),ODr.forEach(t),gro=r(u9," (RoFormer model)"),u9.forEach(t),hro=i(S),yg=n(S,"LI",{});var cEe=s(yg);_re=n(cEe,"STRONG",{});var VDr=s(_re);pro=r(VDr,"speech_to_text"),VDr.forEach(t),uro=r(cEe," \u2014 "),IR=n(cEe,"A",{href:!0});var XDr=s(IR);_ro=r(XDr,"Speech2TextTokenizer"),XDr.forEach(t),bro=r(cEe," (Speech2Text model)"),cEe.forEach(t),vro=i(S),Lg=n(S,"LI",{});var fEe=s(Lg);bre=n(fEe,"STRONG",{});var zDr=s(bre);Fro=r(zDr,"speech_to_text_2"),zDr.forEach(t),Tro=r(fEe," \u2014 "),qR=n(fEe,"A",{href:!0});var QDr=s(qR);Mro=r(QDr,"Speech2Text2Tokenizer"),QDr.forEach(t),Ero=r(fEe," (Speech2Text2 model)"),fEe.forEach(t),Cro=i(S),bs=n(S,"LI",{});var _9=s(bs);vre=n(_9,"STRONG",{});var WDr=s(vre);wro=r(WDr,"splinter"),WDr.forEach(t),Aro=r(_9," \u2014 "),NR=n(_9,"A",{href:!0});var HDr=s(NR);yro=r(HDr,"SplinterTokenizer"),HDr.forEach(t),Lro=r(_9," or "),jR=n(_9,"A",{href:!0});var UDr=s(jR);xro=r(UDr,"SplinterTokenizerFast"),UDr.forEach(t),$ro=r(_9," (Splinter model)"),_9.forEach(t),kro=i(S),vs=n(S,"LI",{});var b9=s(vs);Fre=n(b9,"STRONG",{});var JDr=s(Fre);Sro=r(JDr,"squeezebert"),JDr.forEach(t),Rro=r(b9," \u2014 "),DR=n(b9,"A",{href:!0});var YDr=s(DR);Bro=r(YDr,"SqueezeBertTokenizer"),YDr.forEach(t),Pro=r(b9," or "),GR=n(b9,"A",{href:!0});var KDr=s(GR);Iro=r(KDr,"SqueezeBertTokenizerFast"),KDr.forEach(t),qro=r(b9," (SqueezeBERT model)"),b9.forEach(t),Nro=i(S),Fs=n(S,"LI",{});var v9=s(Fs);Tre=n(v9,"STRONG",{});var ZDr=s(Tre);jro=r(ZDr,"t5"),ZDr.forEach(t),Dro=r(v9," \u2014 "),OR=n(v9,"A",{href:!0});var eGr=s(OR);Gro=r(eGr,"T5Tokenizer"),eGr.forEach(t),Oro=r(v9," or "),VR=n(v9,"A",{href:!0});var oGr=s(VR);Vro=r(oGr,"T5TokenizerFast"),oGr.forEach(t),Xro=r(v9," (T5 model)"),v9.forEach(t),zro=i(S),xg=n(S,"LI",{});var mEe=s(xg);Mre=n(mEe,"STRONG",{});var rGr=s(Mre);Qro=r(rGr,"tapas"),rGr.forEach(t),Wro=r(mEe," \u2014 "),XR=n(mEe,"A",{href:!0});var tGr=s(XR);Hro=r(tGr,"TapasTokenizer"),tGr.forEach(t),Uro=r(mEe," (TAPAS model)"),mEe.forEach(t),Jro=i(S),$g=n(S,"LI",{});var gEe=s($g);Ere=n(gEe,"STRONG",{});var aGr=s(Ere);Yro=r(aGr,"tapex"),aGr.forEach(t),Kro=r(gEe," \u2014 "),zR=n(gEe,"A",{href:!0});var nGr=s(zR);Zro=r(nGr,"TapexTokenizer"),nGr.forEach(t),eto=r(gEe," (TAPEX model)"),gEe.forEach(t),oto=i(S),kg=n(S,"LI",{});var hEe=s(kg);Cre=n(hEe,"STRONG",{});var sGr=s(Cre);rto=r(sGr,"transfo-xl"),sGr.forEach(t),tto=r(hEe," \u2014 "),QR=n(hEe,"A",{href:!0});var lGr=s(QR);ato=r(lGr,"TransfoXLTokenizer"),lGr.forEach(t),nto=r(hEe," (Transformer-XL model)"),hEe.forEach(t),sto=i(S),Ts=n(S,"LI",{});var F9=s(Ts);wre=n(F9,"STRONG",{});var iGr=s(wre);lto=r(iGr,"visual_bert"),iGr.forEach(t),ito=r(F9," \u2014 "),WR=n(F9,"A",{href:!0});var dGr=s(WR);dto=r(dGr,"BertTokenizer"),dGr.forEach(t),cto=r(F9," or "),HR=n(F9,"A",{href:!0});var cGr=s(HR);fto=r(cGr,"BertTokenizerFast"),cGr.forEach(t),mto=r(F9," (VisualBert model)"),F9.forEach(t),gto=i(S),Sg=n(S,"LI",{});var pEe=s(Sg);Are=n(pEe,"STRONG",{});var fGr=s(Are);hto=r(fGr,"wav2vec2"),fGr.forEach(t),pto=r(pEe," \u2014 "),UR=n(pEe,"A",{href:!0});var mGr=s(UR);uto=r(mGr,"Wav2Vec2CTCTokenizer"),mGr.forEach(t),_to=r(pEe," (Wav2Vec2 model)"),pEe.forEach(t),bto=i(S),Rg=n(S,"LI",{});var uEe=s(Rg);yre=n(uEe,"STRONG",{});var gGr=s(yre);vto=r(gGr,"wav2vec2_phoneme"),gGr.forEach(t),Fto=r(uEe," \u2014 "),JR=n(uEe,"A",{href:!0});var hGr=s(JR);Tto=r(hGr,"Wav2Vec2PhonemeCTCTokenizer"),hGr.forEach(t),Mto=r(uEe," (Wav2Vec2Phoneme model)"),uEe.forEach(t),Eto=i(S),Ms=n(S,"LI",{});var T9=s(Ms);Lre=n(T9,"STRONG",{});var pGr=s(Lre);Cto=r(pGr,"xglm"),pGr.forEach(t),wto=r(T9," \u2014 "),YR=n(T9,"A",{href:!0});var uGr=s(YR);Ato=r(uGr,"XGLMTokenizer"),uGr.forEach(t),yto=r(T9," or "),KR=n(T9,"A",{href:!0});var _Gr=s(KR);Lto=r(_Gr,"XGLMTokenizerFast"),_Gr.forEach(t),xto=r(T9," (XGLM model)"),T9.forEach(t),$to=i(S),Bg=n(S,"LI",{});var _Ee=s(Bg);xre=n(_Ee,"STRONG",{});var bGr=s(xre);kto=r(bGr,"xlm"),bGr.forEach(t),Sto=r(_Ee," \u2014 "),ZR=n(_Ee,"A",{href:!0});var vGr=s(ZR);Rto=r(vGr,"XLMTokenizer"),vGr.forEach(t),Bto=r(_Ee," (XLM model)"),_Ee.forEach(t),Pto=i(S),Pg=n(S,"LI",{});var bEe=s(Pg);$re=n(bEe,"STRONG",{});var FGr=s($re);Ito=r(FGr,"xlm-prophetnet"),FGr.forEach(t),qto=r(bEe," \u2014 "),eB=n(bEe,"A",{href:!0});var TGr=s(eB);Nto=r(TGr,"XLMProphetNetTokenizer"),TGr.forEach(t),jto=r(bEe," (XLMProphetNet model)"),bEe.forEach(t),Dto=i(S),Es=n(S,"LI",{});var M9=s(Es);kre=n(M9,"STRONG",{});var MGr=s(kre);Gto=r(MGr,"xlm-roberta"),MGr.forEach(t),Oto=r(M9," \u2014 "),oB=n(M9,"A",{href:!0});var EGr=s(oB);Vto=r(EGr,"XLMRobertaTokenizer"),EGr.forEach(t),Xto=r(M9," or "),rB=n(M9,"A",{href:!0});var CGr=s(rB);zto=r(CGr,"XLMRobertaTokenizerFast"),CGr.forEach(t),Qto=r(M9," (XLM-RoBERTa model)"),M9.forEach(t),Wto=i(S),Cs=n(S,"LI",{});var E9=s(Cs);Sre=n(E9,"STRONG",{});var wGr=s(Sre);Hto=r(wGr,"xlm-roberta-xl"),wGr.forEach(t),Uto=r(E9," \u2014 "),tB=n(E9,"A",{href:!0});var AGr=s(tB);Jto=r(AGr,"RobertaTokenizer"),AGr.forEach(t),Yto=r(E9," or "),aB=n(E9,"A",{href:!0});var yGr=s(aB);Kto=r(yGr,"RobertaTokenizerFast"),yGr.forEach(t),Zto=r(E9," (XLM-RoBERTa-XL model)"),E9.forEach(t),eao=i(S),ws=n(S,"LI",{});var C9=s(ws);Rre=n(C9,"STRONG",{});var LGr=s(Rre);oao=r(LGr,"xlnet"),LGr.forEach(t),rao=r(C9," \u2014 "),nB=n(C9,"A",{href:!0});var xGr=s(nB);tao=r(xGr,"XLNetTokenizer"),xGr.forEach(t),aao=r(C9," or "),sB=n(C9,"A",{href:!0});var $Gr=s(sB);nao=r($Gr,"XLNetTokenizerFast"),$Gr.forEach(t),sao=r(C9," (XLNet model)"),C9.forEach(t),lao=i(S),As=n(S,"LI",{});var w9=s(As);Bre=n(w9,"STRONG",{});var kGr=s(Bre);iao=r(kGr,"yoso"),kGr.forEach(t),dao=r(w9," \u2014 "),lB=n(w9,"A",{href:!0});var SGr=s(lB);cao=r(SGr,"AlbertTokenizer"),SGr.forEach(t),fao=r(w9," or "),iB=n(w9,"A",{href:!0});var RGr=s(iB);mao=r(RGr,"AlbertTokenizerFast"),RGr.forEach(t),gao=r(w9," (YOSO model)"),w9.forEach(t),S.forEach(t),hao=i(ks),T(Ig.$$.fragment,ks),ks.forEach(t),pao=i($s),qg=n($s,"DIV",{class:!0});var UPe=s(qg);T($A.$$.fragment,UPe),uao=i(UPe),Pre=n(UPe,"P",{});var BGr=s(Pre);_ao=r(BGr,"Register a new tokenizer in this mapping."),BGr.forEach(t),UPe.forEach(t),$s.forEach(t),KRe=i(f),mi=n(f,"H2",{class:!0});var JPe=s(mi);Ng=n(JPe,"A",{id:!0,class:!0,href:!0});var PGr=s(Ng);Ire=n(PGr,"SPAN",{});var IGr=s(Ire);T(kA.$$.fragment,IGr),IGr.forEach(t),PGr.forEach(t),bao=i(JPe),qre=n(JPe,"SPAN",{});var qGr=s(qre);vao=r(qGr,"AutoFeatureExtractor"),qGr.forEach(t),JPe.forEach(t),ZRe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(SA.$$.fragment,Ss),Fao=i(Ss),RA=n(Ss,"P",{});var YPe=s(RA);Tao=r(YPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=n(YPe,"A",{href:!0});var NGr=s(dB);Mao=r(NGr,"AutoFeatureExtractor.from_pretrained()"),NGr.forEach(t),Eao=r(YPe," class method."),YPe.forEach(t),Cao=i(Ss),BA=n(Ss,"P",{});var KPe=s(BA);wao=r(KPe,"This class cannot be instantiated directly using "),Nre=n(KPe,"CODE",{});var jGr=s(Nre);Aao=r(jGr,"__init__()"),jGr.forEach(t),yao=r(KPe," (throws an error)."),KPe.forEach(t),Lao=i(Ss),Xe=n(Ss,"DIV",{class:!0});var Wt=s(Xe);T(PA.$$.fragment,Wt),xao=i(Wt),jre=n(Wt,"P",{});var DGr=s(jre);$ao=r(DGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DGr.forEach(t),kao=i(Wt),Ta=n(Wt,"P",{});var T3=s(Ta);Sao=r(T3,"The feature extractor class to instantiate is selected based on the "),Dre=n(T3,"CODE",{});var GGr=s(Dre);Rao=r(GGr,"model_type"),GGr.forEach(t),Bao=r(T3,` property of the config object
(either passed as an argument or loaded from `),Gre=n(T3,"CODE",{});var OGr=s(Gre);Pao=r(OGr,"pretrained_model_name_or_path"),OGr.forEach(t),Iao=r(T3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Ore=n(T3,"CODE",{});var VGr=s(Ore);qao=r(VGr,"pretrained_model_name_or_path"),VGr.forEach(t),Nao=r(T3,":"),T3.forEach(t),jao=i(Wt),te=n(Wt,"UL",{});var se=s(te);jg=n(se,"LI",{});var vEe=s(jg);Vre=n(vEe,"STRONG",{});var XGr=s(Vre);Dao=r(XGr,"beit"),XGr.forEach(t),Gao=r(vEe," \u2014 "),cB=n(vEe,"A",{href:!0});var zGr=s(cB);Oao=r(zGr,"BeitFeatureExtractor"),zGr.forEach(t),Vao=r(vEe," (BEiT model)"),vEe.forEach(t),Xao=i(se),Dg=n(se,"LI",{});var FEe=s(Dg);Xre=n(FEe,"STRONG",{});var QGr=s(Xre);zao=r(QGr,"clip"),QGr.forEach(t),Qao=r(FEe," \u2014 "),fB=n(FEe,"A",{href:!0});var WGr=s(fB);Wao=r(WGr,"CLIPFeatureExtractor"),WGr.forEach(t),Hao=r(FEe," (CLIP model)"),FEe.forEach(t),Uao=i(se),Gg=n(se,"LI",{});var TEe=s(Gg);zre=n(TEe,"STRONG",{});var HGr=s(zre);Jao=r(HGr,"convnext"),HGr.forEach(t),Yao=r(TEe," \u2014 "),mB=n(TEe,"A",{href:!0});var UGr=s(mB);Kao=r(UGr,"ConvNextFeatureExtractor"),UGr.forEach(t),Zao=r(TEe," (ConvNext model)"),TEe.forEach(t),eno=i(se),Og=n(se,"LI",{});var MEe=s(Og);Qre=n(MEe,"STRONG",{});var JGr=s(Qre);ono=r(JGr,"data2vec-audio"),JGr.forEach(t),rno=r(MEe," \u2014 "),gB=n(MEe,"A",{href:!0});var YGr=s(gB);tno=r(YGr,"Wav2Vec2FeatureExtractor"),YGr.forEach(t),ano=r(MEe," (Data2VecAudio model)"),MEe.forEach(t),nno=i(se),Vg=n(se,"LI",{});var EEe=s(Vg);Wre=n(EEe,"STRONG",{});var KGr=s(Wre);sno=r(KGr,"data2vec-vision"),KGr.forEach(t),lno=r(EEe," \u2014 "),hB=n(EEe,"A",{href:!0});var ZGr=s(hB);ino=r(ZGr,"BeitFeatureExtractor"),ZGr.forEach(t),dno=r(EEe," (Data2VecVision model)"),EEe.forEach(t),cno=i(se),Xg=n(se,"LI",{});var CEe=s(Xg);Hre=n(CEe,"STRONG",{});var eOr=s(Hre);fno=r(eOr,"deit"),eOr.forEach(t),mno=r(CEe," \u2014 "),pB=n(CEe,"A",{href:!0});var oOr=s(pB);gno=r(oOr,"DeiTFeatureExtractor"),oOr.forEach(t),hno=r(CEe," (DeiT model)"),CEe.forEach(t),pno=i(se),zg=n(se,"LI",{});var wEe=s(zg);Ure=n(wEe,"STRONG",{});var rOr=s(Ure);uno=r(rOr,"detr"),rOr.forEach(t),_no=r(wEe," \u2014 "),uB=n(wEe,"A",{href:!0});var tOr=s(uB);bno=r(tOr,"DetrFeatureExtractor"),tOr.forEach(t),vno=r(wEe," (DETR model)"),wEe.forEach(t),Fno=i(se),Qg=n(se,"LI",{});var AEe=s(Qg);Jre=n(AEe,"STRONG",{});var aOr=s(Jre);Tno=r(aOr,"dpt"),aOr.forEach(t),Mno=r(AEe," \u2014 "),_B=n(AEe,"A",{href:!0});var nOr=s(_B);Eno=r(nOr,"DPTFeatureExtractor"),nOr.forEach(t),Cno=r(AEe," (DPT model)"),AEe.forEach(t),wno=i(se),Wg=n(se,"LI",{});var yEe=s(Wg);Yre=n(yEe,"STRONG",{});var sOr=s(Yre);Ano=r(sOr,"glpn"),sOr.forEach(t),yno=r(yEe," \u2014 "),bB=n(yEe,"A",{href:!0});var lOr=s(bB);Lno=r(lOr,"GLPNFeatureExtractor"),lOr.forEach(t),xno=r(yEe," (GLPN model)"),yEe.forEach(t),$no=i(se),Hg=n(se,"LI",{});var LEe=s(Hg);Kre=n(LEe,"STRONG",{});var iOr=s(Kre);kno=r(iOr,"hubert"),iOr.forEach(t),Sno=r(LEe," \u2014 "),vB=n(LEe,"A",{href:!0});var dOr=s(vB);Rno=r(dOr,"Wav2Vec2FeatureExtractor"),dOr.forEach(t),Bno=r(LEe," (Hubert model)"),LEe.forEach(t),Pno=i(se),Ug=n(se,"LI",{});var xEe=s(Ug);Zre=n(xEe,"STRONG",{});var cOr=s(Zre);Ino=r(cOr,"layoutlmv2"),cOr.forEach(t),qno=r(xEe," \u2014 "),FB=n(xEe,"A",{href:!0});var fOr=s(FB);Nno=r(fOr,"LayoutLMv2FeatureExtractor"),fOr.forEach(t),jno=r(xEe," (LayoutLMv2 model)"),xEe.forEach(t),Dno=i(se),Jg=n(se,"LI",{});var $Ee=s(Jg);ete=n($Ee,"STRONG",{});var mOr=s(ete);Gno=r(mOr,"maskformer"),mOr.forEach(t),Ono=r($Ee," \u2014 "),TB=n($Ee,"A",{href:!0});var gOr=s(TB);Vno=r(gOr,"MaskFormerFeatureExtractor"),gOr.forEach(t),Xno=r($Ee," (MaskFormer model)"),$Ee.forEach(t),zno=i(se),Yg=n(se,"LI",{});var kEe=s(Yg);ote=n(kEe,"STRONG",{});var hOr=s(ote);Qno=r(hOr,"perceiver"),hOr.forEach(t),Wno=r(kEe," \u2014 "),MB=n(kEe,"A",{href:!0});var pOr=s(MB);Hno=r(pOr,"PerceiverFeatureExtractor"),pOr.forEach(t),Uno=r(kEe," (Perceiver model)"),kEe.forEach(t),Jno=i(se),Kg=n(se,"LI",{});var SEe=s(Kg);rte=n(SEe,"STRONG",{});var uOr=s(rte);Yno=r(uOr,"poolformer"),uOr.forEach(t),Kno=r(SEe," \u2014 "),EB=n(SEe,"A",{href:!0});var _Or=s(EB);Zno=r(_Or,"PoolFormerFeatureExtractor"),_Or.forEach(t),eso=r(SEe," (PoolFormer model)"),SEe.forEach(t),oso=i(se),Zg=n(se,"LI",{});var REe=s(Zg);tte=n(REe,"STRONG",{});var bOr=s(tte);rso=r(bOr,"regnet"),bOr.forEach(t),tso=r(REe," \u2014 "),CB=n(REe,"A",{href:!0});var vOr=s(CB);aso=r(vOr,"ConvNextFeatureExtractor"),vOr.forEach(t),nso=r(REe," (RegNet model)"),REe.forEach(t),sso=i(se),eh=n(se,"LI",{});var BEe=s(eh);ate=n(BEe,"STRONG",{});var FOr=s(ate);lso=r(FOr,"resnet"),FOr.forEach(t),iso=r(BEe," \u2014 "),wB=n(BEe,"A",{href:!0});var TOr=s(wB);dso=r(TOr,"ConvNextFeatureExtractor"),TOr.forEach(t),cso=r(BEe," (ResNet model)"),BEe.forEach(t),fso=i(se),oh=n(se,"LI",{});var PEe=s(oh);nte=n(PEe,"STRONG",{});var MOr=s(nte);mso=r(MOr,"segformer"),MOr.forEach(t),gso=r(PEe," \u2014 "),AB=n(PEe,"A",{href:!0});var EOr=s(AB);hso=r(EOr,"SegformerFeatureExtractor"),EOr.forEach(t),pso=r(PEe," (SegFormer model)"),PEe.forEach(t),uso=i(se),rh=n(se,"LI",{});var IEe=s(rh);ste=n(IEe,"STRONG",{});var COr=s(ste);_so=r(COr,"speech_to_text"),COr.forEach(t),bso=r(IEe," \u2014 "),yB=n(IEe,"A",{href:!0});var wOr=s(yB);vso=r(wOr,"Speech2TextFeatureExtractor"),wOr.forEach(t),Fso=r(IEe," (Speech2Text model)"),IEe.forEach(t),Tso=i(se),th=n(se,"LI",{});var qEe=s(th);lte=n(qEe,"STRONG",{});var AOr=s(lte);Mso=r(AOr,"swin"),AOr.forEach(t),Eso=r(qEe," \u2014 "),LB=n(qEe,"A",{href:!0});var yOr=s(LB);Cso=r(yOr,"ViTFeatureExtractor"),yOr.forEach(t),wso=r(qEe," (Swin model)"),qEe.forEach(t),Aso=i(se),ah=n(se,"LI",{});var NEe=s(ah);ite=n(NEe,"STRONG",{});var LOr=s(ite);yso=r(LOr,"van"),LOr.forEach(t),Lso=r(NEe," \u2014 "),xB=n(NEe,"A",{href:!0});var xOr=s(xB);xso=r(xOr,"ConvNextFeatureExtractor"),xOr.forEach(t),$so=r(NEe," (VAN model)"),NEe.forEach(t),kso=i(se),nh=n(se,"LI",{});var jEe=s(nh);dte=n(jEe,"STRONG",{});var $Or=s(dte);Sso=r($Or,"vit"),$Or.forEach(t),Rso=r(jEe," \u2014 "),$B=n(jEe,"A",{href:!0});var kOr=s($B);Bso=r(kOr,"ViTFeatureExtractor"),kOr.forEach(t),Pso=r(jEe," (ViT model)"),jEe.forEach(t),Iso=i(se),sh=n(se,"LI",{});var DEe=s(sh);cte=n(DEe,"STRONG",{});var SOr=s(cte);qso=r(SOr,"vit_mae"),SOr.forEach(t),Nso=r(DEe," \u2014 "),kB=n(DEe,"A",{href:!0});var ROr=s(kB);jso=r(ROr,"ViTFeatureExtractor"),ROr.forEach(t),Dso=r(DEe," (ViTMAE model)"),DEe.forEach(t),Gso=i(se),lh=n(se,"LI",{});var GEe=s(lh);fte=n(GEe,"STRONG",{});var BOr=s(fte);Oso=r(BOr,"wav2vec2"),BOr.forEach(t),Vso=r(GEe," \u2014 "),SB=n(GEe,"A",{href:!0});var POr=s(SB);Xso=r(POr,"Wav2Vec2FeatureExtractor"),POr.forEach(t),zso=r(GEe," (Wav2Vec2 model)"),GEe.forEach(t),Qso=i(se),ih=n(se,"LI",{});var OEe=s(ih);mte=n(OEe,"STRONG",{});var IOr=s(mte);Wso=r(IOr,"yolos"),IOr.forEach(t),Hso=r(OEe," \u2014 "),RB=n(OEe,"A",{href:!0});var qOr=s(RB);Uso=r(qOr,"YolosFeatureExtractor"),qOr.forEach(t),Jso=r(OEe," (YOLOS model)"),OEe.forEach(t),se.forEach(t),Yso=i(Wt),T(dh.$$.fragment,Wt),Kso=i(Wt),T(ch.$$.fragment,Wt),Wt.forEach(t),Zso=i(Ss),fh=n(Ss,"DIV",{class:!0});var ZPe=s(fh);T(IA.$$.fragment,ZPe),elo=i(ZPe),gte=n(ZPe,"P",{});var NOr=s(gte);olo=r(NOr,"Register a new feature extractor for this class."),NOr.forEach(t),ZPe.forEach(t),Ss.forEach(t),eBe=i(f),gi=n(f,"H2",{class:!0});var eIe=s(gi);mh=n(eIe,"A",{id:!0,class:!0,href:!0});var jOr=s(mh);hte=n(jOr,"SPAN",{});var DOr=s(hte);T(qA.$$.fragment,DOr),DOr.forEach(t),jOr.forEach(t),rlo=i(eIe),pte=n(eIe,"SPAN",{});var GOr=s(pte);tlo=r(GOr,"AutoProcessor"),GOr.forEach(t),eIe.forEach(t),oBe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(NA.$$.fragment,Rs),alo=i(Rs),jA=n(Rs,"P",{});var oIe=s(jA);nlo=r(oIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),BB=n(oIe,"A",{href:!0});var OOr=s(BB);slo=r(OOr,"AutoProcessor.from_pretrained()"),OOr.forEach(t),llo=r(oIe," class method."),oIe.forEach(t),ilo=i(Rs),DA=n(Rs,"P",{});var rIe=s(DA);dlo=r(rIe,"This class cannot be instantiated directly using "),ute=n(rIe,"CODE",{});var VOr=s(ute);clo=r(VOr,"__init__()"),VOr.forEach(t),flo=r(rIe," (throws an error)."),rIe.forEach(t),mlo=i(Rs),ze=n(Rs,"DIV",{class:!0});var Ht=s(ze);T(GA.$$.fragment,Ht),glo=i(Ht),_te=n(Ht,"P",{});var XOr=s(_te);hlo=r(XOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),XOr.forEach(t),plo=i(Ht),hi=n(Ht,"P",{});var rY=s(hi);ulo=r(rY,"The processor class to instantiate is selected based on the "),bte=n(rY,"CODE",{});var zOr=s(bte);_lo=r(zOr,"model_type"),zOr.forEach(t),blo=r(rY,` property of the config object (either
passed as an argument or loaded from `),vte=n(rY,"CODE",{});var QOr=s(vte);vlo=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),Flo=r(rY," if possible):"),rY.forEach(t),Tlo=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);gh=n(Fe,"LI",{});var VEe=s(gh);Fte=n(VEe,"STRONG",{});var WOr=s(Fte);Mlo=r(WOr,"clip"),WOr.forEach(t),Elo=r(VEe," \u2014 "),PB=n(VEe,"A",{href:!0});var HOr=s(PB);Clo=r(HOr,"CLIPProcessor"),HOr.forEach(t),wlo=r(VEe," (CLIP model)"),VEe.forEach(t),Alo=i(Fe),hh=n(Fe,"LI",{});var XEe=s(hh);Tte=n(XEe,"STRONG",{});var UOr=s(Tte);ylo=r(UOr,"layoutlmv2"),UOr.forEach(t),Llo=r(XEe," \u2014 "),IB=n(XEe,"A",{href:!0});var JOr=s(IB);xlo=r(JOr,"LayoutLMv2Processor"),JOr.forEach(t),$lo=r(XEe," (LayoutLMv2 model)"),XEe.forEach(t),klo=i(Fe),ph=n(Fe,"LI",{});var zEe=s(ph);Mte=n(zEe,"STRONG",{});var YOr=s(Mte);Slo=r(YOr,"layoutxlm"),YOr.forEach(t),Rlo=r(zEe," \u2014 "),qB=n(zEe,"A",{href:!0});var KOr=s(qB);Blo=r(KOr,"LayoutXLMProcessor"),KOr.forEach(t),Plo=r(zEe," (LayoutXLM model)"),zEe.forEach(t),Ilo=i(Fe),uh=n(Fe,"LI",{});var QEe=s(uh);Ete=n(QEe,"STRONG",{});var ZOr=s(Ete);qlo=r(ZOr,"sew"),ZOr.forEach(t),Nlo=r(QEe," \u2014 "),NB=n(QEe,"A",{href:!0});var eVr=s(NB);jlo=r(eVr,"Wav2Vec2Processor"),eVr.forEach(t),Dlo=r(QEe," (SEW model)"),QEe.forEach(t),Glo=i(Fe),_h=n(Fe,"LI",{});var WEe=s(_h);Cte=n(WEe,"STRONG",{});var oVr=s(Cte);Olo=r(oVr,"sew-d"),oVr.forEach(t),Vlo=r(WEe," \u2014 "),jB=n(WEe,"A",{href:!0});var rVr=s(jB);Xlo=r(rVr,"Wav2Vec2Processor"),rVr.forEach(t),zlo=r(WEe," (SEW-D model)"),WEe.forEach(t),Qlo=i(Fe),bh=n(Fe,"LI",{});var HEe=s(bh);wte=n(HEe,"STRONG",{});var tVr=s(wte);Wlo=r(tVr,"speech_to_text"),tVr.forEach(t),Hlo=r(HEe," \u2014 "),DB=n(HEe,"A",{href:!0});var aVr=s(DB);Ulo=r(aVr,"Speech2TextProcessor"),aVr.forEach(t),Jlo=r(HEe," (Speech2Text model)"),HEe.forEach(t),Ylo=i(Fe),vh=n(Fe,"LI",{});var UEe=s(vh);Ate=n(UEe,"STRONG",{});var nVr=s(Ate);Klo=r(nVr,"speech_to_text_2"),nVr.forEach(t),Zlo=r(UEe," \u2014 "),GB=n(UEe,"A",{href:!0});var sVr=s(GB);eio=r(sVr,"Speech2Text2Processor"),sVr.forEach(t),oio=r(UEe," (Speech2Text2 model)"),UEe.forEach(t),rio=i(Fe),Fh=n(Fe,"LI",{});var JEe=s(Fh);yte=n(JEe,"STRONG",{});var lVr=s(yte);tio=r(lVr,"trocr"),lVr.forEach(t),aio=r(JEe," \u2014 "),OB=n(JEe,"A",{href:!0});var iVr=s(OB);nio=r(iVr,"TrOCRProcessor"),iVr.forEach(t),sio=r(JEe," (TrOCR model)"),JEe.forEach(t),lio=i(Fe),Th=n(Fe,"LI",{});var YEe=s(Th);Lte=n(YEe,"STRONG",{});var dVr=s(Lte);iio=r(dVr,"unispeech"),dVr.forEach(t),dio=r(YEe," \u2014 "),VB=n(YEe,"A",{href:!0});var cVr=s(VB);cio=r(cVr,"Wav2Vec2Processor"),cVr.forEach(t),fio=r(YEe," (UniSpeech model)"),YEe.forEach(t),mio=i(Fe),Mh=n(Fe,"LI",{});var KEe=s(Mh);xte=n(KEe,"STRONG",{});var fVr=s(xte);gio=r(fVr,"unispeech-sat"),fVr.forEach(t),hio=r(KEe," \u2014 "),XB=n(KEe,"A",{href:!0});var mVr=s(XB);pio=r(mVr,"Wav2Vec2Processor"),mVr.forEach(t),uio=r(KEe," (UniSpeechSat model)"),KEe.forEach(t),_io=i(Fe),Eh=n(Fe,"LI",{});var ZEe=s(Eh);$te=n(ZEe,"STRONG",{});var gVr=s($te);bio=r(gVr,"vilt"),gVr.forEach(t),vio=r(ZEe," \u2014 "),zB=n(ZEe,"A",{href:!0});var hVr=s(zB);Fio=r(hVr,"ViltProcessor"),hVr.forEach(t),Tio=r(ZEe," (ViLT model)"),ZEe.forEach(t),Mio=i(Fe),Ch=n(Fe,"LI",{});var eCe=s(Ch);kte=n(eCe,"STRONG",{});var pVr=s(kte);Eio=r(pVr,"vision-text-dual-encoder"),pVr.forEach(t),Cio=r(eCe," \u2014 "),QB=n(eCe,"A",{href:!0});var uVr=s(QB);wio=r(uVr,"VisionTextDualEncoderProcessor"),uVr.forEach(t),Aio=r(eCe," (VisionTextDualEncoder model)"),eCe.forEach(t),yio=i(Fe),wh=n(Fe,"LI",{});var oCe=s(wh);Ste=n(oCe,"STRONG",{});var _Vr=s(Ste);Lio=r(_Vr,"wav2vec2"),_Vr.forEach(t),xio=r(oCe," \u2014 "),WB=n(oCe,"A",{href:!0});var bVr=s(WB);$io=r(bVr,"Wav2Vec2Processor"),bVr.forEach(t),kio=r(oCe," (Wav2Vec2 model)"),oCe.forEach(t),Sio=i(Fe),Ah=n(Fe,"LI",{});var rCe=s(Ah);Rte=n(rCe,"STRONG",{});var vVr=s(Rte);Rio=r(vVr,"wavlm"),vVr.forEach(t),Bio=r(rCe," \u2014 "),HB=n(rCe,"A",{href:!0});var FVr=s(HB);Pio=r(FVr,"Wav2Vec2Processor"),FVr.forEach(t),Iio=r(rCe," (WavLM model)"),rCe.forEach(t),Fe.forEach(t),qio=i(Ht),T(yh.$$.fragment,Ht),Nio=i(Ht),T(Lh.$$.fragment,Ht),Ht.forEach(t),jio=i(Rs),xh=n(Rs,"DIV",{class:!0});var tIe=s(xh);T(OA.$$.fragment,tIe),Dio=i(tIe),Bte=n(tIe,"P",{});var TVr=s(Bte);Gio=r(TVr,"Register a new processor for this class."),TVr.forEach(t),tIe.forEach(t),Rs.forEach(t),rBe=i(f),pi=n(f,"H2",{class:!0});var aIe=s(pi);$h=n(aIe,"A",{id:!0,class:!0,href:!0});var MVr=s($h);Pte=n(MVr,"SPAN",{});var EVr=s(Pte);T(VA.$$.fragment,EVr),EVr.forEach(t),MVr.forEach(t),Oio=i(aIe),Ite=n(aIe,"SPAN",{});var CVr=s(Ite);Vio=r(CVr,"AutoModel"),CVr.forEach(t),aIe.forEach(t),tBe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(XA.$$.fragment,Bs),Xio=i(Bs),ui=n(Bs,"P",{});var tY=s(ui);zio=r(tY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UB=n(tY,"A",{href:!0});var wVr=s(UB);Qio=r(wVr,"from_pretrained()"),wVr.forEach(t),Wio=r(tY," class method or the "),JB=n(tY,"A",{href:!0});var AVr=s(JB);Hio=r(AVr,"from_config()"),AVr.forEach(t),Uio=r(tY,` class
method.`),tY.forEach(t),Jio=i(Bs),zA=n(Bs,"P",{});var nIe=s(zA);Yio=r(nIe,"This class cannot be instantiated directly using "),qte=n(nIe,"CODE",{});var yVr=s(qte);Kio=r(yVr,"__init__()"),yVr.forEach(t),Zio=r(nIe," (throws an error)."),nIe.forEach(t),edo=i(Bs),Kr=n(Bs,"DIV",{class:!0});var M3=s(Kr);T(QA.$$.fragment,M3),odo=i(M3),Nte=n(M3,"P",{});var LVr=s(Nte);rdo=r(LVr,"Instantiates one of the base model classes of the library from a configuration."),LVr.forEach(t),tdo=i(M3),_i=n(M3,"P",{});var aY=s(_i);ado=r(aY,`Note:
Loading a model from its configuration file does `),jte=n(aY,"STRONG",{});var xVr=s(jte);ndo=r(xVr,"not"),xVr.forEach(t),sdo=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YB=n(aY,"A",{href:!0});var $Vr=s(YB);ldo=r($Vr,"from_pretrained()"),$Vr.forEach(t),ido=r(aY," to load the model weights."),aY.forEach(t),ddo=i(M3),T(kh.$$.fragment,M3),M3.forEach(t),cdo=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ut=s(Qe);T(WA.$$.fragment,Ut),fdo=i(Ut),Dte=n(Ut,"P",{});var kVr=s(Dte);mdo=r(kVr,"Instantiate one of the base model classes of the library from a pretrained model."),kVr.forEach(t),gdo=i(Ut),Ma=n(Ut,"P",{});var E3=s(Ma);hdo=r(E3,"The model class to instantiate is selected based on the "),Gte=n(E3,"CODE",{});var SVr=s(Gte);pdo=r(SVr,"model_type"),SVr.forEach(t),udo=r(E3,` property of the config object (either
passed as an argument or loaded from `),Ote=n(E3,"CODE",{});var RVr=s(Ote);_do=r(RVr,"pretrained_model_name_or_path"),RVr.forEach(t),bdo=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vte=n(E3,"CODE",{});var BVr=s(Vte);vdo=r(BVr,"pretrained_model_name_or_path"),BVr.forEach(t),Fdo=r(E3,":"),E3.forEach(t),Tdo=i(Ut),x=n(Ut,"UL",{});var $=s(x);Sh=n($,"LI",{});var tCe=s(Sh);Xte=n(tCe,"STRONG",{});var PVr=s(Xte);Mdo=r(PVr,"albert"),PVr.forEach(t),Edo=r(tCe," \u2014 "),KB=n(tCe,"A",{href:!0});var IVr=s(KB);Cdo=r(IVr,"AlbertModel"),IVr.forEach(t),wdo=r(tCe," (ALBERT model)"),tCe.forEach(t),Ado=i($),Rh=n($,"LI",{});var aCe=s(Rh);zte=n(aCe,"STRONG",{});var qVr=s(zte);ydo=r(qVr,"bart"),qVr.forEach(t),Ldo=r(aCe," \u2014 "),ZB=n(aCe,"A",{href:!0});var NVr=s(ZB);xdo=r(NVr,"BartModel"),NVr.forEach(t),$do=r(aCe," (BART model)"),aCe.forEach(t),kdo=i($),Bh=n($,"LI",{});var nCe=s(Bh);Qte=n(nCe,"STRONG",{});var jVr=s(Qte);Sdo=r(jVr,"beit"),jVr.forEach(t),Rdo=r(nCe," \u2014 "),eP=n(nCe,"A",{href:!0});var DVr=s(eP);Bdo=r(DVr,"BeitModel"),DVr.forEach(t),Pdo=r(nCe," (BEiT model)"),nCe.forEach(t),Ido=i($),Ph=n($,"LI",{});var sCe=s(Ph);Wte=n(sCe,"STRONG",{});var GVr=s(Wte);qdo=r(GVr,"bert"),GVr.forEach(t),Ndo=r(sCe," \u2014 "),oP=n(sCe,"A",{href:!0});var OVr=s(oP);jdo=r(OVr,"BertModel"),OVr.forEach(t),Ddo=r(sCe," (BERT model)"),sCe.forEach(t),Gdo=i($),Ih=n($,"LI",{});var lCe=s(Ih);Hte=n(lCe,"STRONG",{});var VVr=s(Hte);Odo=r(VVr,"bert-generation"),VVr.forEach(t),Vdo=r(lCe," \u2014 "),rP=n(lCe,"A",{href:!0});var XVr=s(rP);Xdo=r(XVr,"BertGenerationEncoder"),XVr.forEach(t),zdo=r(lCe," (Bert Generation model)"),lCe.forEach(t),Qdo=i($),qh=n($,"LI",{});var iCe=s(qh);Ute=n(iCe,"STRONG",{});var zVr=s(Ute);Wdo=r(zVr,"big_bird"),zVr.forEach(t),Hdo=r(iCe," \u2014 "),tP=n(iCe,"A",{href:!0});var QVr=s(tP);Udo=r(QVr,"BigBirdModel"),QVr.forEach(t),Jdo=r(iCe," (BigBird model)"),iCe.forEach(t),Ydo=i($),Nh=n($,"LI",{});var dCe=s(Nh);Jte=n(dCe,"STRONG",{});var WVr=s(Jte);Kdo=r(WVr,"bigbird_pegasus"),WVr.forEach(t),Zdo=r(dCe," \u2014 "),aP=n(dCe,"A",{href:!0});var HVr=s(aP);eco=r(HVr,"BigBirdPegasusModel"),HVr.forEach(t),oco=r(dCe," (BigBirdPegasus model)"),dCe.forEach(t),rco=i($),jh=n($,"LI",{});var cCe=s(jh);Yte=n(cCe,"STRONG",{});var UVr=s(Yte);tco=r(UVr,"blenderbot"),UVr.forEach(t),aco=r(cCe," \u2014 "),nP=n(cCe,"A",{href:!0});var JVr=s(nP);nco=r(JVr,"BlenderbotModel"),JVr.forEach(t),sco=r(cCe," (Blenderbot model)"),cCe.forEach(t),lco=i($),Dh=n($,"LI",{});var fCe=s(Dh);Kte=n(fCe,"STRONG",{});var YVr=s(Kte);ico=r(YVr,"blenderbot-small"),YVr.forEach(t),dco=r(fCe," \u2014 "),sP=n(fCe,"A",{href:!0});var KVr=s(sP);cco=r(KVr,"BlenderbotSmallModel"),KVr.forEach(t),fco=r(fCe," (BlenderbotSmall model)"),fCe.forEach(t),mco=i($),Gh=n($,"LI",{});var mCe=s(Gh);Zte=n(mCe,"STRONG",{});var ZVr=s(Zte);gco=r(ZVr,"camembert"),ZVr.forEach(t),hco=r(mCe," \u2014 "),lP=n(mCe,"A",{href:!0});var eXr=s(lP);pco=r(eXr,"CamembertModel"),eXr.forEach(t),uco=r(mCe," (CamemBERT model)"),mCe.forEach(t),_co=i($),Oh=n($,"LI",{});var gCe=s(Oh);eae=n(gCe,"STRONG",{});var oXr=s(eae);bco=r(oXr,"canine"),oXr.forEach(t),vco=r(gCe," \u2014 "),iP=n(gCe,"A",{href:!0});var rXr=s(iP);Fco=r(rXr,"CanineModel"),rXr.forEach(t),Tco=r(gCe," (Canine model)"),gCe.forEach(t),Mco=i($),Vh=n($,"LI",{});var hCe=s(Vh);oae=n(hCe,"STRONG",{});var tXr=s(oae);Eco=r(tXr,"clip"),tXr.forEach(t),Cco=r(hCe," \u2014 "),dP=n(hCe,"A",{href:!0});var aXr=s(dP);wco=r(aXr,"CLIPModel"),aXr.forEach(t),Aco=r(hCe," (CLIP model)"),hCe.forEach(t),yco=i($),Xh=n($,"LI",{});var pCe=s(Xh);rae=n(pCe,"STRONG",{});var nXr=s(rae);Lco=r(nXr,"convbert"),nXr.forEach(t),xco=r(pCe," \u2014 "),cP=n(pCe,"A",{href:!0});var sXr=s(cP);$co=r(sXr,"ConvBertModel"),sXr.forEach(t),kco=r(pCe," (ConvBERT model)"),pCe.forEach(t),Sco=i($),zh=n($,"LI",{});var uCe=s(zh);tae=n(uCe,"STRONG",{});var lXr=s(tae);Rco=r(lXr,"convnext"),lXr.forEach(t),Bco=r(uCe," \u2014 "),fP=n(uCe,"A",{href:!0});var iXr=s(fP);Pco=r(iXr,"ConvNextModel"),iXr.forEach(t),Ico=r(uCe," (ConvNext model)"),uCe.forEach(t),qco=i($),Qh=n($,"LI",{});var _Ce=s(Qh);aae=n(_Ce,"STRONG",{});var dXr=s(aae);Nco=r(dXr,"ctrl"),dXr.forEach(t),jco=r(_Ce," \u2014 "),mP=n(_Ce,"A",{href:!0});var cXr=s(mP);Dco=r(cXr,"CTRLModel"),cXr.forEach(t),Gco=r(_Ce," (CTRL model)"),_Ce.forEach(t),Oco=i($),Wh=n($,"LI",{});var bCe=s(Wh);nae=n(bCe,"STRONG",{});var fXr=s(nae);Vco=r(fXr,"data2vec-audio"),fXr.forEach(t),Xco=r(bCe," \u2014 "),gP=n(bCe,"A",{href:!0});var mXr=s(gP);zco=r(mXr,"Data2VecAudioModel"),mXr.forEach(t),Qco=r(bCe," (Data2VecAudio model)"),bCe.forEach(t),Wco=i($),Hh=n($,"LI",{});var vCe=s(Hh);sae=n(vCe,"STRONG",{});var gXr=s(sae);Hco=r(gXr,"data2vec-text"),gXr.forEach(t),Uco=r(vCe," \u2014 "),hP=n(vCe,"A",{href:!0});var hXr=s(hP);Jco=r(hXr,"Data2VecTextModel"),hXr.forEach(t),Yco=r(vCe," (Data2VecText model)"),vCe.forEach(t),Kco=i($),Uh=n($,"LI",{});var FCe=s(Uh);lae=n(FCe,"STRONG",{});var pXr=s(lae);Zco=r(pXr,"data2vec-vision"),pXr.forEach(t),efo=r(FCe," \u2014 "),pP=n(FCe,"A",{href:!0});var uXr=s(pP);ofo=r(uXr,"Data2VecVisionModel"),uXr.forEach(t),rfo=r(FCe," (Data2VecVision model)"),FCe.forEach(t),tfo=i($),Jh=n($,"LI",{});var TCe=s(Jh);iae=n(TCe,"STRONG",{});var _Xr=s(iae);afo=r(_Xr,"deberta"),_Xr.forEach(t),nfo=r(TCe," \u2014 "),uP=n(TCe,"A",{href:!0});var bXr=s(uP);sfo=r(bXr,"DebertaModel"),bXr.forEach(t),lfo=r(TCe," (DeBERTa model)"),TCe.forEach(t),ifo=i($),Yh=n($,"LI",{});var MCe=s(Yh);dae=n(MCe,"STRONG",{});var vXr=s(dae);dfo=r(vXr,"deberta-v2"),vXr.forEach(t),cfo=r(MCe," \u2014 "),_P=n(MCe,"A",{href:!0});var FXr=s(_P);ffo=r(FXr,"DebertaV2Model"),FXr.forEach(t),mfo=r(MCe," (DeBERTa-v2 model)"),MCe.forEach(t),gfo=i($),Kh=n($,"LI",{});var ECe=s(Kh);cae=n(ECe,"STRONG",{});var TXr=s(cae);hfo=r(TXr,"decision_transformer"),TXr.forEach(t),pfo=r(ECe," \u2014 "),bP=n(ECe,"A",{href:!0});var MXr=s(bP);ufo=r(MXr,"DecisionTransformerModel"),MXr.forEach(t),_fo=r(ECe," (Decision Transformer model)"),ECe.forEach(t),bfo=i($),Zh=n($,"LI",{});var CCe=s(Zh);fae=n(CCe,"STRONG",{});var EXr=s(fae);vfo=r(EXr,"deit"),EXr.forEach(t),Ffo=r(CCe," \u2014 "),vP=n(CCe,"A",{href:!0});var CXr=s(vP);Tfo=r(CXr,"DeiTModel"),CXr.forEach(t),Mfo=r(CCe," (DeiT model)"),CCe.forEach(t),Efo=i($),ep=n($,"LI",{});var wCe=s(ep);mae=n(wCe,"STRONG",{});var wXr=s(mae);Cfo=r(wXr,"detr"),wXr.forEach(t),wfo=r(wCe," \u2014 "),FP=n(wCe,"A",{href:!0});var AXr=s(FP);Afo=r(AXr,"DetrModel"),AXr.forEach(t),yfo=r(wCe," (DETR model)"),wCe.forEach(t),Lfo=i($),op=n($,"LI",{});var ACe=s(op);gae=n(ACe,"STRONG",{});var yXr=s(gae);xfo=r(yXr,"distilbert"),yXr.forEach(t),$fo=r(ACe," \u2014 "),TP=n(ACe,"A",{href:!0});var LXr=s(TP);kfo=r(LXr,"DistilBertModel"),LXr.forEach(t),Sfo=r(ACe," (DistilBERT model)"),ACe.forEach(t),Rfo=i($),rp=n($,"LI",{});var yCe=s(rp);hae=n(yCe,"STRONG",{});var xXr=s(hae);Bfo=r(xXr,"dpr"),xXr.forEach(t),Pfo=r(yCe," \u2014 "),MP=n(yCe,"A",{href:!0});var $Xr=s(MP);Ifo=r($Xr,"DPRQuestionEncoder"),$Xr.forEach(t),qfo=r(yCe," (DPR model)"),yCe.forEach(t),Nfo=i($),tp=n($,"LI",{});var LCe=s(tp);pae=n(LCe,"STRONG",{});var kXr=s(pae);jfo=r(kXr,"dpt"),kXr.forEach(t),Dfo=r(LCe," \u2014 "),EP=n(LCe,"A",{href:!0});var SXr=s(EP);Gfo=r(SXr,"DPTModel"),SXr.forEach(t),Ofo=r(LCe," (DPT model)"),LCe.forEach(t),Vfo=i($),ap=n($,"LI",{});var xCe=s(ap);uae=n(xCe,"STRONG",{});var RXr=s(uae);Xfo=r(RXr,"electra"),RXr.forEach(t),zfo=r(xCe," \u2014 "),CP=n(xCe,"A",{href:!0});var BXr=s(CP);Qfo=r(BXr,"ElectraModel"),BXr.forEach(t),Wfo=r(xCe," (ELECTRA model)"),xCe.forEach(t),Hfo=i($),np=n($,"LI",{});var $Ce=s(np);_ae=n($Ce,"STRONG",{});var PXr=s(_ae);Ufo=r(PXr,"flaubert"),PXr.forEach(t),Jfo=r($Ce," \u2014 "),wP=n($Ce,"A",{href:!0});var IXr=s(wP);Yfo=r(IXr,"FlaubertModel"),IXr.forEach(t),Kfo=r($Ce," (FlauBERT model)"),$Ce.forEach(t),Zfo=i($),sp=n($,"LI",{});var kCe=s(sp);bae=n(kCe,"STRONG",{});var qXr=s(bae);emo=r(qXr,"fnet"),qXr.forEach(t),omo=r(kCe," \u2014 "),AP=n(kCe,"A",{href:!0});var NXr=s(AP);rmo=r(NXr,"FNetModel"),NXr.forEach(t),tmo=r(kCe," (FNet model)"),kCe.forEach(t),amo=i($),lp=n($,"LI",{});var SCe=s(lp);vae=n(SCe,"STRONG",{});var jXr=s(vae);nmo=r(jXr,"fsmt"),jXr.forEach(t),smo=r(SCe," \u2014 "),yP=n(SCe,"A",{href:!0});var DXr=s(yP);lmo=r(DXr,"FSMTModel"),DXr.forEach(t),imo=r(SCe," (FairSeq Machine-Translation model)"),SCe.forEach(t),dmo=i($),ys=n($,"LI",{});var A9=s(ys);Fae=n(A9,"STRONG",{});var GXr=s(Fae);cmo=r(GXr,"funnel"),GXr.forEach(t),fmo=r(A9," \u2014 "),LP=n(A9,"A",{href:!0});var OXr=s(LP);mmo=r(OXr,"FunnelModel"),OXr.forEach(t),gmo=r(A9," or "),xP=n(A9,"A",{href:!0});var VXr=s(xP);hmo=r(VXr,"FunnelBaseModel"),VXr.forEach(t),pmo=r(A9," (Funnel Transformer model)"),A9.forEach(t),umo=i($),ip=n($,"LI",{});var RCe=s(ip);Tae=n(RCe,"STRONG",{});var XXr=s(Tae);_mo=r(XXr,"glpn"),XXr.forEach(t),bmo=r(RCe," \u2014 "),$P=n(RCe,"A",{href:!0});var zXr=s($P);vmo=r(zXr,"GLPNModel"),zXr.forEach(t),Fmo=r(RCe," (GLPN model)"),RCe.forEach(t),Tmo=i($),dp=n($,"LI",{});var BCe=s(dp);Mae=n(BCe,"STRONG",{});var QXr=s(Mae);Mmo=r(QXr,"gpt2"),QXr.forEach(t),Emo=r(BCe," \u2014 "),kP=n(BCe,"A",{href:!0});var WXr=s(kP);Cmo=r(WXr,"GPT2Model"),WXr.forEach(t),wmo=r(BCe," (OpenAI GPT-2 model)"),BCe.forEach(t),Amo=i($),cp=n($,"LI",{});var PCe=s(cp);Eae=n(PCe,"STRONG",{});var HXr=s(Eae);ymo=r(HXr,"gpt_neo"),HXr.forEach(t),Lmo=r(PCe," \u2014 "),SP=n(PCe,"A",{href:!0});var UXr=s(SP);xmo=r(UXr,"GPTNeoModel"),UXr.forEach(t),$mo=r(PCe," (GPT Neo model)"),PCe.forEach(t),kmo=i($),fp=n($,"LI",{});var ICe=s(fp);Cae=n(ICe,"STRONG",{});var JXr=s(Cae);Smo=r(JXr,"gptj"),JXr.forEach(t),Rmo=r(ICe," \u2014 "),RP=n(ICe,"A",{href:!0});var YXr=s(RP);Bmo=r(YXr,"GPTJModel"),YXr.forEach(t),Pmo=r(ICe," (GPT-J model)"),ICe.forEach(t),Imo=i($),mp=n($,"LI",{});var qCe=s(mp);wae=n(qCe,"STRONG",{});var KXr=s(wae);qmo=r(KXr,"hubert"),KXr.forEach(t),Nmo=r(qCe," \u2014 "),BP=n(qCe,"A",{href:!0});var ZXr=s(BP);jmo=r(ZXr,"HubertModel"),ZXr.forEach(t),Dmo=r(qCe," (Hubert model)"),qCe.forEach(t),Gmo=i($),gp=n($,"LI",{});var NCe=s(gp);Aae=n(NCe,"STRONG",{});var ezr=s(Aae);Omo=r(ezr,"ibert"),ezr.forEach(t),Vmo=r(NCe," \u2014 "),PP=n(NCe,"A",{href:!0});var ozr=s(PP);Xmo=r(ozr,"IBertModel"),ozr.forEach(t),zmo=r(NCe," (I-BERT model)"),NCe.forEach(t),Qmo=i($),hp=n($,"LI",{});var jCe=s(hp);yae=n(jCe,"STRONG",{});var rzr=s(yae);Wmo=r(rzr,"imagegpt"),rzr.forEach(t),Hmo=r(jCe," \u2014 "),IP=n(jCe,"A",{href:!0});var tzr=s(IP);Umo=r(tzr,"ImageGPTModel"),tzr.forEach(t),Jmo=r(jCe," (ImageGPT model)"),jCe.forEach(t),Ymo=i($),pp=n($,"LI",{});var DCe=s(pp);Lae=n(DCe,"STRONG",{});var azr=s(Lae);Kmo=r(azr,"layoutlm"),azr.forEach(t),Zmo=r(DCe," \u2014 "),qP=n(DCe,"A",{href:!0});var nzr=s(qP);ego=r(nzr,"LayoutLMModel"),nzr.forEach(t),ogo=r(DCe," (LayoutLM model)"),DCe.forEach(t),rgo=i($),up=n($,"LI",{});var GCe=s(up);xae=n(GCe,"STRONG",{});var szr=s(xae);tgo=r(szr,"layoutlmv2"),szr.forEach(t),ago=r(GCe," \u2014 "),NP=n(GCe,"A",{href:!0});var lzr=s(NP);ngo=r(lzr,"LayoutLMv2Model"),lzr.forEach(t),sgo=r(GCe," (LayoutLMv2 model)"),GCe.forEach(t),lgo=i($),_p=n($,"LI",{});var OCe=s(_p);$ae=n(OCe,"STRONG",{});var izr=s($ae);igo=r(izr,"led"),izr.forEach(t),dgo=r(OCe," \u2014 "),jP=n(OCe,"A",{href:!0});var dzr=s(jP);cgo=r(dzr,"LEDModel"),dzr.forEach(t),fgo=r(OCe," (LED model)"),OCe.forEach(t),mgo=i($),bp=n($,"LI",{});var VCe=s(bp);kae=n(VCe,"STRONG",{});var czr=s(kae);ggo=r(czr,"longformer"),czr.forEach(t),hgo=r(VCe," \u2014 "),DP=n(VCe,"A",{href:!0});var fzr=s(DP);pgo=r(fzr,"LongformerModel"),fzr.forEach(t),ugo=r(VCe," (Longformer model)"),VCe.forEach(t),_go=i($),vp=n($,"LI",{});var XCe=s(vp);Sae=n(XCe,"STRONG",{});var mzr=s(Sae);bgo=r(mzr,"luke"),mzr.forEach(t),vgo=r(XCe," \u2014 "),GP=n(XCe,"A",{href:!0});var gzr=s(GP);Fgo=r(gzr,"LukeModel"),gzr.forEach(t),Tgo=r(XCe," (LUKE model)"),XCe.forEach(t),Mgo=i($),Fp=n($,"LI",{});var zCe=s(Fp);Rae=n(zCe,"STRONG",{});var hzr=s(Rae);Ego=r(hzr,"lxmert"),hzr.forEach(t),Cgo=r(zCe," \u2014 "),OP=n(zCe,"A",{href:!0});var pzr=s(OP);wgo=r(pzr,"LxmertModel"),pzr.forEach(t),Ago=r(zCe," (LXMERT model)"),zCe.forEach(t),ygo=i($),Tp=n($,"LI",{});var QCe=s(Tp);Bae=n(QCe,"STRONG",{});var uzr=s(Bae);Lgo=r(uzr,"m2m_100"),uzr.forEach(t),xgo=r(QCe," \u2014 "),VP=n(QCe,"A",{href:!0});var _zr=s(VP);$go=r(_zr,"M2M100Model"),_zr.forEach(t),kgo=r(QCe," (M2M100 model)"),QCe.forEach(t),Sgo=i($),Mp=n($,"LI",{});var WCe=s(Mp);Pae=n(WCe,"STRONG",{});var bzr=s(Pae);Rgo=r(bzr,"marian"),bzr.forEach(t),Bgo=r(WCe," \u2014 "),XP=n(WCe,"A",{href:!0});var vzr=s(XP);Pgo=r(vzr,"MarianModel"),vzr.forEach(t),Igo=r(WCe," (Marian model)"),WCe.forEach(t),qgo=i($),Ep=n($,"LI",{});var HCe=s(Ep);Iae=n(HCe,"STRONG",{});var Fzr=s(Iae);Ngo=r(Fzr,"maskformer"),Fzr.forEach(t),jgo=r(HCe," \u2014 "),zP=n(HCe,"A",{href:!0});var Tzr=s(zP);Dgo=r(Tzr,"MaskFormerModel"),Tzr.forEach(t),Ggo=r(HCe," (MaskFormer model)"),HCe.forEach(t),Ogo=i($),Cp=n($,"LI",{});var UCe=s(Cp);qae=n(UCe,"STRONG",{});var Mzr=s(qae);Vgo=r(Mzr,"mbart"),Mzr.forEach(t),Xgo=r(UCe," \u2014 "),QP=n(UCe,"A",{href:!0});var Ezr=s(QP);zgo=r(Ezr,"MBartModel"),Ezr.forEach(t),Qgo=r(UCe," (mBART model)"),UCe.forEach(t),Wgo=i($),wp=n($,"LI",{});var JCe=s(wp);Nae=n(JCe,"STRONG",{});var Czr=s(Nae);Hgo=r(Czr,"megatron-bert"),Czr.forEach(t),Ugo=r(JCe," \u2014 "),WP=n(JCe,"A",{href:!0});var wzr=s(WP);Jgo=r(wzr,"MegatronBertModel"),wzr.forEach(t),Ygo=r(JCe," (MegatronBert model)"),JCe.forEach(t),Kgo=i($),Ap=n($,"LI",{});var YCe=s(Ap);jae=n(YCe,"STRONG",{});var Azr=s(jae);Zgo=r(Azr,"mobilebert"),Azr.forEach(t),eho=r(YCe," \u2014 "),HP=n(YCe,"A",{href:!0});var yzr=s(HP);oho=r(yzr,"MobileBertModel"),yzr.forEach(t),rho=r(YCe," (MobileBERT model)"),YCe.forEach(t),tho=i($),yp=n($,"LI",{});var KCe=s(yp);Dae=n(KCe,"STRONG",{});var Lzr=s(Dae);aho=r(Lzr,"mpnet"),Lzr.forEach(t),nho=r(KCe," \u2014 "),UP=n(KCe,"A",{href:!0});var xzr=s(UP);sho=r(xzr,"MPNetModel"),xzr.forEach(t),lho=r(KCe," (MPNet model)"),KCe.forEach(t),iho=i($),Lp=n($,"LI",{});var ZCe=s(Lp);Gae=n(ZCe,"STRONG",{});var $zr=s(Gae);dho=r($zr,"mt5"),$zr.forEach(t),cho=r(ZCe," \u2014 "),JP=n(ZCe,"A",{href:!0});var kzr=s(JP);fho=r(kzr,"MT5Model"),kzr.forEach(t),mho=r(ZCe," (mT5 model)"),ZCe.forEach(t),gho=i($),xp=n($,"LI",{});var e3e=s(xp);Oae=n(e3e,"STRONG",{});var Szr=s(Oae);hho=r(Szr,"nystromformer"),Szr.forEach(t),pho=r(e3e," \u2014 "),YP=n(e3e,"A",{href:!0});var Rzr=s(YP);uho=r(Rzr,"NystromformerModel"),Rzr.forEach(t),_ho=r(e3e," (Nystromformer model)"),e3e.forEach(t),bho=i($),$p=n($,"LI",{});var o3e=s($p);Vae=n(o3e,"STRONG",{});var Bzr=s(Vae);vho=r(Bzr,"openai-gpt"),Bzr.forEach(t),Fho=r(o3e," \u2014 "),KP=n(o3e,"A",{href:!0});var Pzr=s(KP);Tho=r(Pzr,"OpenAIGPTModel"),Pzr.forEach(t),Mho=r(o3e," (OpenAI GPT model)"),o3e.forEach(t),Eho=i($),kp=n($,"LI",{});var r3e=s(kp);Xae=n(r3e,"STRONG",{});var Izr=s(Xae);Cho=r(Izr,"pegasus"),Izr.forEach(t),who=r(r3e," \u2014 "),ZP=n(r3e,"A",{href:!0});var qzr=s(ZP);Aho=r(qzr,"PegasusModel"),qzr.forEach(t),yho=r(r3e," (Pegasus model)"),r3e.forEach(t),Lho=i($),Sp=n($,"LI",{});var t3e=s(Sp);zae=n(t3e,"STRONG",{});var Nzr=s(zae);xho=r(Nzr,"perceiver"),Nzr.forEach(t),$ho=r(t3e," \u2014 "),eI=n(t3e,"A",{href:!0});var jzr=s(eI);kho=r(jzr,"PerceiverModel"),jzr.forEach(t),Sho=r(t3e," (Perceiver model)"),t3e.forEach(t),Rho=i($),Rp=n($,"LI",{});var a3e=s(Rp);Qae=n(a3e,"STRONG",{});var Dzr=s(Qae);Bho=r(Dzr,"plbart"),Dzr.forEach(t),Pho=r(a3e," \u2014 "),oI=n(a3e,"A",{href:!0});var Gzr=s(oI);Iho=r(Gzr,"PLBartModel"),Gzr.forEach(t),qho=r(a3e," (PLBart model)"),a3e.forEach(t),Nho=i($),Bp=n($,"LI",{});var n3e=s(Bp);Wae=n(n3e,"STRONG",{});var Ozr=s(Wae);jho=r(Ozr,"poolformer"),Ozr.forEach(t),Dho=r(n3e," \u2014 "),rI=n(n3e,"A",{href:!0});var Vzr=s(rI);Gho=r(Vzr,"PoolFormerModel"),Vzr.forEach(t),Oho=r(n3e," (PoolFormer model)"),n3e.forEach(t),Vho=i($),Pp=n($,"LI",{});var s3e=s(Pp);Hae=n(s3e,"STRONG",{});var Xzr=s(Hae);Xho=r(Xzr,"prophetnet"),Xzr.forEach(t),zho=r(s3e," \u2014 "),tI=n(s3e,"A",{href:!0});var zzr=s(tI);Qho=r(zzr,"ProphetNetModel"),zzr.forEach(t),Who=r(s3e," (ProphetNet model)"),s3e.forEach(t),Hho=i($),Ip=n($,"LI",{});var l3e=s(Ip);Uae=n(l3e,"STRONG",{});var Qzr=s(Uae);Uho=r(Qzr,"qdqbert"),Qzr.forEach(t),Jho=r(l3e," \u2014 "),aI=n(l3e,"A",{href:!0});var Wzr=s(aI);Yho=r(Wzr,"QDQBertModel"),Wzr.forEach(t),Kho=r(l3e," (QDQBert model)"),l3e.forEach(t),Zho=i($),qp=n($,"LI",{});var i3e=s(qp);Jae=n(i3e,"STRONG",{});var Hzr=s(Jae);epo=r(Hzr,"reformer"),Hzr.forEach(t),opo=r(i3e," \u2014 "),nI=n(i3e,"A",{href:!0});var Uzr=s(nI);rpo=r(Uzr,"ReformerModel"),Uzr.forEach(t),tpo=r(i3e," (Reformer model)"),i3e.forEach(t),apo=i($),Np=n($,"LI",{});var d3e=s(Np);Yae=n(d3e,"STRONG",{});var Jzr=s(Yae);npo=r(Jzr,"regnet"),Jzr.forEach(t),spo=r(d3e," \u2014 "),sI=n(d3e,"A",{href:!0});var Yzr=s(sI);lpo=r(Yzr,"RegNetModel"),Yzr.forEach(t),ipo=r(d3e," (RegNet model)"),d3e.forEach(t),dpo=i($),jp=n($,"LI",{});var c3e=s(jp);Kae=n(c3e,"STRONG",{});var Kzr=s(Kae);cpo=r(Kzr,"rembert"),Kzr.forEach(t),fpo=r(c3e," \u2014 "),lI=n(c3e,"A",{href:!0});var Zzr=s(lI);mpo=r(Zzr,"RemBertModel"),Zzr.forEach(t),gpo=r(c3e," (RemBERT model)"),c3e.forEach(t),hpo=i($),Dp=n($,"LI",{});var f3e=s(Dp);Zae=n(f3e,"STRONG",{});var eQr=s(Zae);ppo=r(eQr,"resnet"),eQr.forEach(t),upo=r(f3e," \u2014 "),iI=n(f3e,"A",{href:!0});var oQr=s(iI);_po=r(oQr,"ResNetModel"),oQr.forEach(t),bpo=r(f3e," (ResNet model)"),f3e.forEach(t),vpo=i($),Gp=n($,"LI",{});var m3e=s(Gp);ene=n(m3e,"STRONG",{});var rQr=s(ene);Fpo=r(rQr,"retribert"),rQr.forEach(t),Tpo=r(m3e," \u2014 "),dI=n(m3e,"A",{href:!0});var tQr=s(dI);Mpo=r(tQr,"RetriBertModel"),tQr.forEach(t),Epo=r(m3e," (RetriBERT model)"),m3e.forEach(t),Cpo=i($),Op=n($,"LI",{});var g3e=s(Op);one=n(g3e,"STRONG",{});var aQr=s(one);wpo=r(aQr,"roberta"),aQr.forEach(t),Apo=r(g3e," \u2014 "),cI=n(g3e,"A",{href:!0});var nQr=s(cI);ypo=r(nQr,"RobertaModel"),nQr.forEach(t),Lpo=r(g3e," (RoBERTa model)"),g3e.forEach(t),xpo=i($),Vp=n($,"LI",{});var h3e=s(Vp);rne=n(h3e,"STRONG",{});var sQr=s(rne);$po=r(sQr,"roformer"),sQr.forEach(t),kpo=r(h3e," \u2014 "),fI=n(h3e,"A",{href:!0});var lQr=s(fI);Spo=r(lQr,"RoFormerModel"),lQr.forEach(t),Rpo=r(h3e," (RoFormer model)"),h3e.forEach(t),Bpo=i($),Xp=n($,"LI",{});var p3e=s(Xp);tne=n(p3e,"STRONG",{});var iQr=s(tne);Ppo=r(iQr,"segformer"),iQr.forEach(t),Ipo=r(p3e," \u2014 "),mI=n(p3e,"A",{href:!0});var dQr=s(mI);qpo=r(dQr,"SegformerModel"),dQr.forEach(t),Npo=r(p3e," (SegFormer model)"),p3e.forEach(t),jpo=i($),zp=n($,"LI",{});var u3e=s(zp);ane=n(u3e,"STRONG",{});var cQr=s(ane);Dpo=r(cQr,"sew"),cQr.forEach(t),Gpo=r(u3e," \u2014 "),gI=n(u3e,"A",{href:!0});var fQr=s(gI);Opo=r(fQr,"SEWModel"),fQr.forEach(t),Vpo=r(u3e," (SEW model)"),u3e.forEach(t),Xpo=i($),Qp=n($,"LI",{});var _3e=s(Qp);nne=n(_3e,"STRONG",{});var mQr=s(nne);zpo=r(mQr,"sew-d"),mQr.forEach(t),Qpo=r(_3e," \u2014 "),hI=n(_3e,"A",{href:!0});var gQr=s(hI);Wpo=r(gQr,"SEWDModel"),gQr.forEach(t),Hpo=r(_3e," (SEW-D model)"),_3e.forEach(t),Upo=i($),Wp=n($,"LI",{});var b3e=s(Wp);sne=n(b3e,"STRONG",{});var hQr=s(sne);Jpo=r(hQr,"speech_to_text"),hQr.forEach(t),Ypo=r(b3e," \u2014 "),pI=n(b3e,"A",{href:!0});var pQr=s(pI);Kpo=r(pQr,"Speech2TextModel"),pQr.forEach(t),Zpo=r(b3e," (Speech2Text model)"),b3e.forEach(t),euo=i($),Hp=n($,"LI",{});var v3e=s(Hp);lne=n(v3e,"STRONG",{});var uQr=s(lne);ouo=r(uQr,"splinter"),uQr.forEach(t),ruo=r(v3e," \u2014 "),uI=n(v3e,"A",{href:!0});var _Qr=s(uI);tuo=r(_Qr,"SplinterModel"),_Qr.forEach(t),auo=r(v3e," (Splinter model)"),v3e.forEach(t),nuo=i($),Up=n($,"LI",{});var F3e=s(Up);ine=n(F3e,"STRONG",{});var bQr=s(ine);suo=r(bQr,"squeezebert"),bQr.forEach(t),luo=r(F3e," \u2014 "),_I=n(F3e,"A",{href:!0});var vQr=s(_I);iuo=r(vQr,"SqueezeBertModel"),vQr.forEach(t),duo=r(F3e," (SqueezeBERT model)"),F3e.forEach(t),cuo=i($),Jp=n($,"LI",{});var T3e=s(Jp);dne=n(T3e,"STRONG",{});var FQr=s(dne);fuo=r(FQr,"swin"),FQr.forEach(t),muo=r(T3e," \u2014 "),bI=n(T3e,"A",{href:!0});var TQr=s(bI);guo=r(TQr,"SwinModel"),TQr.forEach(t),huo=r(T3e," (Swin model)"),T3e.forEach(t),puo=i($),Yp=n($,"LI",{});var M3e=s(Yp);cne=n(M3e,"STRONG",{});var MQr=s(cne);uuo=r(MQr,"t5"),MQr.forEach(t),_uo=r(M3e," \u2014 "),vI=n(M3e,"A",{href:!0});var EQr=s(vI);buo=r(EQr,"T5Model"),EQr.forEach(t),vuo=r(M3e," (T5 model)"),M3e.forEach(t),Fuo=i($),Kp=n($,"LI",{});var E3e=s(Kp);fne=n(E3e,"STRONG",{});var CQr=s(fne);Tuo=r(CQr,"tapas"),CQr.forEach(t),Muo=r(E3e," \u2014 "),FI=n(E3e,"A",{href:!0});var wQr=s(FI);Euo=r(wQr,"TapasModel"),wQr.forEach(t),Cuo=r(E3e," (TAPAS model)"),E3e.forEach(t),wuo=i($),Zp=n($,"LI",{});var C3e=s(Zp);mne=n(C3e,"STRONG",{});var AQr=s(mne);Auo=r(AQr,"transfo-xl"),AQr.forEach(t),yuo=r(C3e," \u2014 "),TI=n(C3e,"A",{href:!0});var yQr=s(TI);Luo=r(yQr,"TransfoXLModel"),yQr.forEach(t),xuo=r(C3e," (Transformer-XL model)"),C3e.forEach(t),$uo=i($),eu=n($,"LI",{});var w3e=s(eu);gne=n(w3e,"STRONG",{});var LQr=s(gne);kuo=r(LQr,"unispeech"),LQr.forEach(t),Suo=r(w3e," \u2014 "),MI=n(w3e,"A",{href:!0});var xQr=s(MI);Ruo=r(xQr,"UniSpeechModel"),xQr.forEach(t),Buo=r(w3e," (UniSpeech model)"),w3e.forEach(t),Puo=i($),ou=n($,"LI",{});var A3e=s(ou);hne=n(A3e,"STRONG",{});var $Qr=s(hne);Iuo=r($Qr,"unispeech-sat"),$Qr.forEach(t),quo=r(A3e," \u2014 "),EI=n(A3e,"A",{href:!0});var kQr=s(EI);Nuo=r(kQr,"UniSpeechSatModel"),kQr.forEach(t),juo=r(A3e," (UniSpeechSat model)"),A3e.forEach(t),Duo=i($),ru=n($,"LI",{});var y3e=s(ru);pne=n(y3e,"STRONG",{});var SQr=s(pne);Guo=r(SQr,"van"),SQr.forEach(t),Ouo=r(y3e," \u2014 "),CI=n(y3e,"A",{href:!0});var RQr=s(CI);Vuo=r(RQr,"VanModel"),RQr.forEach(t),Xuo=r(y3e," (VAN model)"),y3e.forEach(t),zuo=i($),tu=n($,"LI",{});var L3e=s(tu);une=n(L3e,"STRONG",{});var BQr=s(une);Quo=r(BQr,"vilt"),BQr.forEach(t),Wuo=r(L3e," \u2014 "),wI=n(L3e,"A",{href:!0});var PQr=s(wI);Huo=r(PQr,"ViltModel"),PQr.forEach(t),Uuo=r(L3e," (ViLT model)"),L3e.forEach(t),Juo=i($),au=n($,"LI",{});var x3e=s(au);_ne=n(x3e,"STRONG",{});var IQr=s(_ne);Yuo=r(IQr,"vision-text-dual-encoder"),IQr.forEach(t),Kuo=r(x3e," \u2014 "),AI=n(x3e,"A",{href:!0});var qQr=s(AI);Zuo=r(qQr,"VisionTextDualEncoderModel"),qQr.forEach(t),e_o=r(x3e," (VisionTextDualEncoder model)"),x3e.forEach(t),o_o=i($),nu=n($,"LI",{});var $3e=s(nu);bne=n($3e,"STRONG",{});var NQr=s(bne);r_o=r(NQr,"visual_bert"),NQr.forEach(t),t_o=r($3e," \u2014 "),yI=n($3e,"A",{href:!0});var jQr=s(yI);a_o=r(jQr,"VisualBertModel"),jQr.forEach(t),n_o=r($3e," (VisualBert model)"),$3e.forEach(t),s_o=i($),su=n($,"LI",{});var k3e=s(su);vne=n(k3e,"STRONG",{});var DQr=s(vne);l_o=r(DQr,"vit"),DQr.forEach(t),i_o=r(k3e," \u2014 "),LI=n(k3e,"A",{href:!0});var GQr=s(LI);d_o=r(GQr,"ViTModel"),GQr.forEach(t),c_o=r(k3e," (ViT model)"),k3e.forEach(t),f_o=i($),lu=n($,"LI",{});var S3e=s(lu);Fne=n(S3e,"STRONG",{});var OQr=s(Fne);m_o=r(OQr,"vit_mae"),OQr.forEach(t),g_o=r(S3e," \u2014 "),xI=n(S3e,"A",{href:!0});var VQr=s(xI);h_o=r(VQr,"ViTMAEModel"),VQr.forEach(t),p_o=r(S3e," (ViTMAE model)"),S3e.forEach(t),u_o=i($),iu=n($,"LI",{});var R3e=s(iu);Tne=n(R3e,"STRONG",{});var XQr=s(Tne);__o=r(XQr,"wav2vec2"),XQr.forEach(t),b_o=r(R3e," \u2014 "),$I=n(R3e,"A",{href:!0});var zQr=s($I);v_o=r(zQr,"Wav2Vec2Model"),zQr.forEach(t),F_o=r(R3e," (Wav2Vec2 model)"),R3e.forEach(t),T_o=i($),du=n($,"LI",{});var B3e=s(du);Mne=n(B3e,"STRONG",{});var QQr=s(Mne);M_o=r(QQr,"wavlm"),QQr.forEach(t),E_o=r(B3e," \u2014 "),kI=n(B3e,"A",{href:!0});var WQr=s(kI);C_o=r(WQr,"WavLMModel"),WQr.forEach(t),w_o=r(B3e," (WavLM model)"),B3e.forEach(t),A_o=i($),cu=n($,"LI",{});var P3e=s(cu);Ene=n(P3e,"STRONG",{});var HQr=s(Ene);y_o=r(HQr,"xglm"),HQr.forEach(t),L_o=r(P3e," \u2014 "),SI=n(P3e,"A",{href:!0});var UQr=s(SI);x_o=r(UQr,"XGLMModel"),UQr.forEach(t),$_o=r(P3e," (XGLM model)"),P3e.forEach(t),k_o=i($),fu=n($,"LI",{});var I3e=s(fu);Cne=n(I3e,"STRONG",{});var JQr=s(Cne);S_o=r(JQr,"xlm"),JQr.forEach(t),R_o=r(I3e," \u2014 "),RI=n(I3e,"A",{href:!0});var YQr=s(RI);B_o=r(YQr,"XLMModel"),YQr.forEach(t),P_o=r(I3e," (XLM model)"),I3e.forEach(t),I_o=i($),mu=n($,"LI",{});var q3e=s(mu);wne=n(q3e,"STRONG",{});var KQr=s(wne);q_o=r(KQr,"xlm-prophetnet"),KQr.forEach(t),N_o=r(q3e," \u2014 "),BI=n(q3e,"A",{href:!0});var ZQr=s(BI);j_o=r(ZQr,"XLMProphetNetModel"),ZQr.forEach(t),D_o=r(q3e," (XLMProphetNet model)"),q3e.forEach(t),G_o=i($),gu=n($,"LI",{});var N3e=s(gu);Ane=n(N3e,"STRONG",{});var eWr=s(Ane);O_o=r(eWr,"xlm-roberta"),eWr.forEach(t),V_o=r(N3e," \u2014 "),PI=n(N3e,"A",{href:!0});var oWr=s(PI);X_o=r(oWr,"XLMRobertaModel"),oWr.forEach(t),z_o=r(N3e," (XLM-RoBERTa model)"),N3e.forEach(t),Q_o=i($),hu=n($,"LI",{});var j3e=s(hu);yne=n(j3e,"STRONG",{});var rWr=s(yne);W_o=r(rWr,"xlm-roberta-xl"),rWr.forEach(t),H_o=r(j3e," \u2014 "),II=n(j3e,"A",{href:!0});var tWr=s(II);U_o=r(tWr,"XLMRobertaXLModel"),tWr.forEach(t),J_o=r(j3e," (XLM-RoBERTa-XL model)"),j3e.forEach(t),Y_o=i($),pu=n($,"LI",{});var D3e=s(pu);Lne=n(D3e,"STRONG",{});var aWr=s(Lne);K_o=r(aWr,"xlnet"),aWr.forEach(t),Z_o=r(D3e," \u2014 "),qI=n(D3e,"A",{href:!0});var nWr=s(qI);e1o=r(nWr,"XLNetModel"),nWr.forEach(t),o1o=r(D3e," (XLNet model)"),D3e.forEach(t),r1o=i($),uu=n($,"LI",{});var G3e=s(uu);xne=n(G3e,"STRONG",{});var sWr=s(xne);t1o=r(sWr,"yolos"),sWr.forEach(t),a1o=r(G3e," \u2014 "),NI=n(G3e,"A",{href:!0});var lWr=s(NI);n1o=r(lWr,"YolosModel"),lWr.forEach(t),s1o=r(G3e," (YOLOS model)"),G3e.forEach(t),l1o=i($),_u=n($,"LI",{});var O3e=s(_u);$ne=n(O3e,"STRONG",{});var iWr=s($ne);i1o=r(iWr,"yoso"),iWr.forEach(t),d1o=r(O3e," \u2014 "),jI=n(O3e,"A",{href:!0});var dWr=s(jI);c1o=r(dWr,"YosoModel"),dWr.forEach(t),f1o=r(O3e," (YOSO model)"),O3e.forEach(t),$.forEach(t),m1o=i(Ut),bu=n(Ut,"P",{});var V3e=s(bu);g1o=r(V3e,"The model is set in evaluation mode by default using "),kne=n(V3e,"CODE",{});var cWr=s(kne);h1o=r(cWr,"model.eval()"),cWr.forEach(t),p1o=r(V3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sne=n(V3e,"CODE",{});var fWr=s(Sne);u1o=r(fWr,"model.train()"),fWr.forEach(t),V3e.forEach(t),_1o=i(Ut),T(vu.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),aBe=i(f),bi=n(f,"H2",{class:!0});var sIe=s(bi);Fu=n(sIe,"A",{id:!0,class:!0,href:!0});var mWr=s(Fu);Rne=n(mWr,"SPAN",{});var gWr=s(Rne);T(HA.$$.fragment,gWr),gWr.forEach(t),mWr.forEach(t),b1o=i(sIe),Bne=n(sIe,"SPAN",{});var hWr=s(Bne);v1o=r(hWr,"AutoModelForPreTraining"),hWr.forEach(t),sIe.forEach(t),nBe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(UA.$$.fragment,Ps),F1o=i(Ps),vi=n(Ps,"P",{});var nY=s(vi);T1o=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),DI=n(nY,"A",{href:!0});var pWr=s(DI);M1o=r(pWr,"from_pretrained()"),pWr.forEach(t),E1o=r(nY," class method or the "),GI=n(nY,"A",{href:!0});var uWr=s(GI);C1o=r(uWr,"from_config()"),uWr.forEach(t),w1o=r(nY,` class
method.`),nY.forEach(t),A1o=i(Ps),JA=n(Ps,"P",{});var lIe=s(JA);y1o=r(lIe,"This class cannot be instantiated directly using "),Pne=n(lIe,"CODE",{});var _Wr=s(Pne);L1o=r(_Wr,"__init__()"),_Wr.forEach(t),x1o=r(lIe," (throws an error)."),lIe.forEach(t),$1o=i(Ps),Zr=n(Ps,"DIV",{class:!0});var C3=s(Zr);T(YA.$$.fragment,C3),k1o=i(C3),Ine=n(C3,"P",{});var bWr=s(Ine);S1o=r(bWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),bWr.forEach(t),R1o=i(C3),Fi=n(C3,"P",{});var sY=s(Fi);B1o=r(sY,`Note:
Loading a model from its configuration file does `),qne=n(sY,"STRONG",{});var vWr=s(qne);P1o=r(vWr,"not"),vWr.forEach(t),I1o=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OI=n(sY,"A",{href:!0});var FWr=s(OI);q1o=r(FWr,"from_pretrained()"),FWr.forEach(t),N1o=r(sY," to load the model weights."),sY.forEach(t),j1o=i(C3),T(Tu.$$.fragment,C3),C3.forEach(t),D1o=i(Ps),We=n(Ps,"DIV",{class:!0});var Jt=s(We);T(KA.$$.fragment,Jt),G1o=i(Jt),Nne=n(Jt,"P",{});var TWr=s(Nne);O1o=r(TWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),TWr.forEach(t),V1o=i(Jt),Ea=n(Jt,"P",{});var w3=s(Ea);X1o=r(w3,"The model class to instantiate is selected based on the "),jne=n(w3,"CODE",{});var MWr=s(jne);z1o=r(MWr,"model_type"),MWr.forEach(t),Q1o=r(w3,` property of the config object (either
passed as an argument or loaded from `),Dne=n(w3,"CODE",{});var EWr=s(Dne);W1o=r(EWr,"pretrained_model_name_or_path"),EWr.forEach(t),H1o=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gne=n(w3,"CODE",{});var CWr=s(Gne);U1o=r(CWr,"pretrained_model_name_or_path"),CWr.forEach(t),J1o=r(w3,":"),w3.forEach(t),Y1o=i(Jt),G=n(Jt,"UL",{});var V=s(G);Mu=n(V,"LI",{});var X3e=s(Mu);One=n(X3e,"STRONG",{});var wWr=s(One);K1o=r(wWr,"albert"),wWr.forEach(t),Z1o=r(X3e," \u2014 "),VI=n(X3e,"A",{href:!0});var AWr=s(VI);ebo=r(AWr,"AlbertForPreTraining"),AWr.forEach(t),obo=r(X3e," (ALBERT model)"),X3e.forEach(t),rbo=i(V),Eu=n(V,"LI",{});var z3e=s(Eu);Vne=n(z3e,"STRONG",{});var yWr=s(Vne);tbo=r(yWr,"bart"),yWr.forEach(t),abo=r(z3e," \u2014 "),XI=n(z3e,"A",{href:!0});var LWr=s(XI);nbo=r(LWr,"BartForConditionalGeneration"),LWr.forEach(t),sbo=r(z3e," (BART model)"),z3e.forEach(t),lbo=i(V),Cu=n(V,"LI",{});var Q3e=s(Cu);Xne=n(Q3e,"STRONG",{});var xWr=s(Xne);ibo=r(xWr,"bert"),xWr.forEach(t),dbo=r(Q3e," \u2014 "),zI=n(Q3e,"A",{href:!0});var $Wr=s(zI);cbo=r($Wr,"BertForPreTraining"),$Wr.forEach(t),fbo=r(Q3e," (BERT model)"),Q3e.forEach(t),mbo=i(V),wu=n(V,"LI",{});var W3e=s(wu);zne=n(W3e,"STRONG",{});var kWr=s(zne);gbo=r(kWr,"big_bird"),kWr.forEach(t),hbo=r(W3e," \u2014 "),QI=n(W3e,"A",{href:!0});var SWr=s(QI);pbo=r(SWr,"BigBirdForPreTraining"),SWr.forEach(t),ubo=r(W3e," (BigBird model)"),W3e.forEach(t),_bo=i(V),Au=n(V,"LI",{});var H3e=s(Au);Qne=n(H3e,"STRONG",{});var RWr=s(Qne);bbo=r(RWr,"camembert"),RWr.forEach(t),vbo=r(H3e," \u2014 "),WI=n(H3e,"A",{href:!0});var BWr=s(WI);Fbo=r(BWr,"CamembertForMaskedLM"),BWr.forEach(t),Tbo=r(H3e," (CamemBERT model)"),H3e.forEach(t),Mbo=i(V),yu=n(V,"LI",{});var U3e=s(yu);Wne=n(U3e,"STRONG",{});var PWr=s(Wne);Ebo=r(PWr,"ctrl"),PWr.forEach(t),Cbo=r(U3e," \u2014 "),HI=n(U3e,"A",{href:!0});var IWr=s(HI);wbo=r(IWr,"CTRLLMHeadModel"),IWr.forEach(t),Abo=r(U3e," (CTRL model)"),U3e.forEach(t),ybo=i(V),Lu=n(V,"LI",{});var J3e=s(Lu);Hne=n(J3e,"STRONG",{});var qWr=s(Hne);Lbo=r(qWr,"data2vec-text"),qWr.forEach(t),xbo=r(J3e," \u2014 "),UI=n(J3e,"A",{href:!0});var NWr=s(UI);$bo=r(NWr,"Data2VecTextForMaskedLM"),NWr.forEach(t),kbo=r(J3e," (Data2VecText model)"),J3e.forEach(t),Sbo=i(V),xu=n(V,"LI",{});var Y3e=s(xu);Une=n(Y3e,"STRONG",{});var jWr=s(Une);Rbo=r(jWr,"deberta"),jWr.forEach(t),Bbo=r(Y3e," \u2014 "),JI=n(Y3e,"A",{href:!0});var DWr=s(JI);Pbo=r(DWr,"DebertaForMaskedLM"),DWr.forEach(t),Ibo=r(Y3e," (DeBERTa model)"),Y3e.forEach(t),qbo=i(V),$u=n(V,"LI",{});var K3e=s($u);Jne=n(K3e,"STRONG",{});var GWr=s(Jne);Nbo=r(GWr,"deberta-v2"),GWr.forEach(t),jbo=r(K3e," \u2014 "),YI=n(K3e,"A",{href:!0});var OWr=s(YI);Dbo=r(OWr,"DebertaV2ForMaskedLM"),OWr.forEach(t),Gbo=r(K3e," (DeBERTa-v2 model)"),K3e.forEach(t),Obo=i(V),ku=n(V,"LI",{});var Z3e=s(ku);Yne=n(Z3e,"STRONG",{});var VWr=s(Yne);Vbo=r(VWr,"distilbert"),VWr.forEach(t),Xbo=r(Z3e," \u2014 "),KI=n(Z3e,"A",{href:!0});var XWr=s(KI);zbo=r(XWr,"DistilBertForMaskedLM"),XWr.forEach(t),Qbo=r(Z3e," (DistilBERT model)"),Z3e.forEach(t),Wbo=i(V),Su=n(V,"LI",{});var ewe=s(Su);Kne=n(ewe,"STRONG",{});var zWr=s(Kne);Hbo=r(zWr,"electra"),zWr.forEach(t),Ubo=r(ewe," \u2014 "),ZI=n(ewe,"A",{href:!0});var QWr=s(ZI);Jbo=r(QWr,"ElectraForPreTraining"),QWr.forEach(t),Ybo=r(ewe," (ELECTRA model)"),ewe.forEach(t),Kbo=i(V),Ru=n(V,"LI",{});var owe=s(Ru);Zne=n(owe,"STRONG",{});var WWr=s(Zne);Zbo=r(WWr,"flaubert"),WWr.forEach(t),e4o=r(owe," \u2014 "),eq=n(owe,"A",{href:!0});var HWr=s(eq);o4o=r(HWr,"FlaubertWithLMHeadModel"),HWr.forEach(t),r4o=r(owe," (FlauBERT model)"),owe.forEach(t),t4o=i(V),Bu=n(V,"LI",{});var rwe=s(Bu);ese=n(rwe,"STRONG",{});var UWr=s(ese);a4o=r(UWr,"fnet"),UWr.forEach(t),n4o=r(rwe," \u2014 "),oq=n(rwe,"A",{href:!0});var JWr=s(oq);s4o=r(JWr,"FNetForPreTraining"),JWr.forEach(t),l4o=r(rwe," (FNet model)"),rwe.forEach(t),i4o=i(V),Pu=n(V,"LI",{});var twe=s(Pu);ose=n(twe,"STRONG",{});var YWr=s(ose);d4o=r(YWr,"fsmt"),YWr.forEach(t),c4o=r(twe," \u2014 "),rq=n(twe,"A",{href:!0});var KWr=s(rq);f4o=r(KWr,"FSMTForConditionalGeneration"),KWr.forEach(t),m4o=r(twe," (FairSeq Machine-Translation model)"),twe.forEach(t),g4o=i(V),Iu=n(V,"LI",{});var awe=s(Iu);rse=n(awe,"STRONG",{});var ZWr=s(rse);h4o=r(ZWr,"funnel"),ZWr.forEach(t),p4o=r(awe," \u2014 "),tq=n(awe,"A",{href:!0});var eHr=s(tq);u4o=r(eHr,"FunnelForPreTraining"),eHr.forEach(t),_4o=r(awe," (Funnel Transformer model)"),awe.forEach(t),b4o=i(V),qu=n(V,"LI",{});var nwe=s(qu);tse=n(nwe,"STRONG",{});var oHr=s(tse);v4o=r(oHr,"gpt2"),oHr.forEach(t),F4o=r(nwe," \u2014 "),aq=n(nwe,"A",{href:!0});var rHr=s(aq);T4o=r(rHr,"GPT2LMHeadModel"),rHr.forEach(t),M4o=r(nwe," (OpenAI GPT-2 model)"),nwe.forEach(t),E4o=i(V),Nu=n(V,"LI",{});var swe=s(Nu);ase=n(swe,"STRONG",{});var tHr=s(ase);C4o=r(tHr,"ibert"),tHr.forEach(t),w4o=r(swe," \u2014 "),nq=n(swe,"A",{href:!0});var aHr=s(nq);A4o=r(aHr,"IBertForMaskedLM"),aHr.forEach(t),y4o=r(swe," (I-BERT model)"),swe.forEach(t),L4o=i(V),ju=n(V,"LI",{});var lwe=s(ju);nse=n(lwe,"STRONG",{});var nHr=s(nse);x4o=r(nHr,"layoutlm"),nHr.forEach(t),$4o=r(lwe," \u2014 "),sq=n(lwe,"A",{href:!0});var sHr=s(sq);k4o=r(sHr,"LayoutLMForMaskedLM"),sHr.forEach(t),S4o=r(lwe," (LayoutLM model)"),lwe.forEach(t),R4o=i(V),Du=n(V,"LI",{});var iwe=s(Du);sse=n(iwe,"STRONG",{});var lHr=s(sse);B4o=r(lHr,"longformer"),lHr.forEach(t),P4o=r(iwe," \u2014 "),lq=n(iwe,"A",{href:!0});var iHr=s(lq);I4o=r(iHr,"LongformerForMaskedLM"),iHr.forEach(t),q4o=r(iwe," (Longformer model)"),iwe.forEach(t),N4o=i(V),Gu=n(V,"LI",{});var dwe=s(Gu);lse=n(dwe,"STRONG",{});var dHr=s(lse);j4o=r(dHr,"lxmert"),dHr.forEach(t),D4o=r(dwe," \u2014 "),iq=n(dwe,"A",{href:!0});var cHr=s(iq);G4o=r(cHr,"LxmertForPreTraining"),cHr.forEach(t),O4o=r(dwe," (LXMERT model)"),dwe.forEach(t),V4o=i(V),Ou=n(V,"LI",{});var cwe=s(Ou);ise=n(cwe,"STRONG",{});var fHr=s(ise);X4o=r(fHr,"megatron-bert"),fHr.forEach(t),z4o=r(cwe," \u2014 "),dq=n(cwe,"A",{href:!0});var mHr=s(dq);Q4o=r(mHr,"MegatronBertForPreTraining"),mHr.forEach(t),W4o=r(cwe," (MegatronBert model)"),cwe.forEach(t),H4o=i(V),Vu=n(V,"LI",{});var fwe=s(Vu);dse=n(fwe,"STRONG",{});var gHr=s(dse);U4o=r(gHr,"mobilebert"),gHr.forEach(t),J4o=r(fwe," \u2014 "),cq=n(fwe,"A",{href:!0});var hHr=s(cq);Y4o=r(hHr,"MobileBertForPreTraining"),hHr.forEach(t),K4o=r(fwe," (MobileBERT model)"),fwe.forEach(t),Z4o=i(V),Xu=n(V,"LI",{});var mwe=s(Xu);cse=n(mwe,"STRONG",{});var pHr=s(cse);e2o=r(pHr,"mpnet"),pHr.forEach(t),o2o=r(mwe," \u2014 "),fq=n(mwe,"A",{href:!0});var uHr=s(fq);r2o=r(uHr,"MPNetForMaskedLM"),uHr.forEach(t),t2o=r(mwe," (MPNet model)"),mwe.forEach(t),a2o=i(V),zu=n(V,"LI",{});var gwe=s(zu);fse=n(gwe,"STRONG",{});var _Hr=s(fse);n2o=r(_Hr,"openai-gpt"),_Hr.forEach(t),s2o=r(gwe," \u2014 "),mq=n(gwe,"A",{href:!0});var bHr=s(mq);l2o=r(bHr,"OpenAIGPTLMHeadModel"),bHr.forEach(t),i2o=r(gwe," (OpenAI GPT model)"),gwe.forEach(t),d2o=i(V),Qu=n(V,"LI",{});var hwe=s(Qu);mse=n(hwe,"STRONG",{});var vHr=s(mse);c2o=r(vHr,"retribert"),vHr.forEach(t),f2o=r(hwe," \u2014 "),gq=n(hwe,"A",{href:!0});var FHr=s(gq);m2o=r(FHr,"RetriBertModel"),FHr.forEach(t),g2o=r(hwe," (RetriBERT model)"),hwe.forEach(t),h2o=i(V),Wu=n(V,"LI",{});var pwe=s(Wu);gse=n(pwe,"STRONG",{});var THr=s(gse);p2o=r(THr,"roberta"),THr.forEach(t),u2o=r(pwe," \u2014 "),hq=n(pwe,"A",{href:!0});var MHr=s(hq);_2o=r(MHr,"RobertaForMaskedLM"),MHr.forEach(t),b2o=r(pwe," (RoBERTa model)"),pwe.forEach(t),v2o=i(V),Hu=n(V,"LI",{});var uwe=s(Hu);hse=n(uwe,"STRONG",{});var EHr=s(hse);F2o=r(EHr,"squeezebert"),EHr.forEach(t),T2o=r(uwe," \u2014 "),pq=n(uwe,"A",{href:!0});var CHr=s(pq);M2o=r(CHr,"SqueezeBertForMaskedLM"),CHr.forEach(t),E2o=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),C2o=i(V),Uu=n(V,"LI",{});var _we=s(Uu);pse=n(_we,"STRONG",{});var wHr=s(pse);w2o=r(wHr,"t5"),wHr.forEach(t),A2o=r(_we," \u2014 "),uq=n(_we,"A",{href:!0});var AHr=s(uq);y2o=r(AHr,"T5ForConditionalGeneration"),AHr.forEach(t),L2o=r(_we," (T5 model)"),_we.forEach(t),x2o=i(V),Ju=n(V,"LI",{});var bwe=s(Ju);use=n(bwe,"STRONG",{});var yHr=s(use);$2o=r(yHr,"tapas"),yHr.forEach(t),k2o=r(bwe," \u2014 "),_q=n(bwe,"A",{href:!0});var LHr=s(_q);S2o=r(LHr,"TapasForMaskedLM"),LHr.forEach(t),R2o=r(bwe," (TAPAS model)"),bwe.forEach(t),B2o=i(V),Yu=n(V,"LI",{});var vwe=s(Yu);_se=n(vwe,"STRONG",{});var xHr=s(_se);P2o=r(xHr,"transfo-xl"),xHr.forEach(t),I2o=r(vwe," \u2014 "),bq=n(vwe,"A",{href:!0});var $Hr=s(bq);q2o=r($Hr,"TransfoXLLMHeadModel"),$Hr.forEach(t),N2o=r(vwe," (Transformer-XL model)"),vwe.forEach(t),j2o=i(V),Ku=n(V,"LI",{});var Fwe=s(Ku);bse=n(Fwe,"STRONG",{});var kHr=s(bse);D2o=r(kHr,"unispeech"),kHr.forEach(t),G2o=r(Fwe," \u2014 "),vq=n(Fwe,"A",{href:!0});var SHr=s(vq);O2o=r(SHr,"UniSpeechForPreTraining"),SHr.forEach(t),V2o=r(Fwe," (UniSpeech model)"),Fwe.forEach(t),X2o=i(V),Zu=n(V,"LI",{});var Twe=s(Zu);vse=n(Twe,"STRONG",{});var RHr=s(vse);z2o=r(RHr,"unispeech-sat"),RHr.forEach(t),Q2o=r(Twe," \u2014 "),Fq=n(Twe,"A",{href:!0});var BHr=s(Fq);W2o=r(BHr,"UniSpeechSatForPreTraining"),BHr.forEach(t),H2o=r(Twe," (UniSpeechSat model)"),Twe.forEach(t),U2o=i(V),e_=n(V,"LI",{});var Mwe=s(e_);Fse=n(Mwe,"STRONG",{});var PHr=s(Fse);J2o=r(PHr,"visual_bert"),PHr.forEach(t),Y2o=r(Mwe," \u2014 "),Tq=n(Mwe,"A",{href:!0});var IHr=s(Tq);K2o=r(IHr,"VisualBertForPreTraining"),IHr.forEach(t),Z2o=r(Mwe," (VisualBert model)"),Mwe.forEach(t),e5o=i(V),o_=n(V,"LI",{});var Ewe=s(o_);Tse=n(Ewe,"STRONG",{});var qHr=s(Tse);o5o=r(qHr,"vit_mae"),qHr.forEach(t),r5o=r(Ewe," \u2014 "),Mq=n(Ewe,"A",{href:!0});var NHr=s(Mq);t5o=r(NHr,"ViTMAEForPreTraining"),NHr.forEach(t),a5o=r(Ewe," (ViTMAE model)"),Ewe.forEach(t),n5o=i(V),r_=n(V,"LI",{});var Cwe=s(r_);Mse=n(Cwe,"STRONG",{});var jHr=s(Mse);s5o=r(jHr,"wav2vec2"),jHr.forEach(t),l5o=r(Cwe," \u2014 "),Eq=n(Cwe,"A",{href:!0});var DHr=s(Eq);i5o=r(DHr,"Wav2Vec2ForPreTraining"),DHr.forEach(t),d5o=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),c5o=i(V),t_=n(V,"LI",{});var wwe=s(t_);Ese=n(wwe,"STRONG",{});var GHr=s(Ese);f5o=r(GHr,"xlm"),GHr.forEach(t),m5o=r(wwe," \u2014 "),Cq=n(wwe,"A",{href:!0});var OHr=s(Cq);g5o=r(OHr,"XLMWithLMHeadModel"),OHr.forEach(t),h5o=r(wwe," (XLM model)"),wwe.forEach(t),p5o=i(V),a_=n(V,"LI",{});var Awe=s(a_);Cse=n(Awe,"STRONG",{});var VHr=s(Cse);u5o=r(VHr,"xlm-roberta"),VHr.forEach(t),_5o=r(Awe," \u2014 "),wq=n(Awe,"A",{href:!0});var XHr=s(wq);b5o=r(XHr,"XLMRobertaForMaskedLM"),XHr.forEach(t),v5o=r(Awe," (XLM-RoBERTa model)"),Awe.forEach(t),F5o=i(V),n_=n(V,"LI",{});var ywe=s(n_);wse=n(ywe,"STRONG",{});var zHr=s(wse);T5o=r(zHr,"xlm-roberta-xl"),zHr.forEach(t),M5o=r(ywe," \u2014 "),Aq=n(ywe,"A",{href:!0});var QHr=s(Aq);E5o=r(QHr,"XLMRobertaXLForMaskedLM"),QHr.forEach(t),C5o=r(ywe," (XLM-RoBERTa-XL model)"),ywe.forEach(t),w5o=i(V),s_=n(V,"LI",{});var Lwe=s(s_);Ase=n(Lwe,"STRONG",{});var WHr=s(Ase);A5o=r(WHr,"xlnet"),WHr.forEach(t),y5o=r(Lwe," \u2014 "),yq=n(Lwe,"A",{href:!0});var HHr=s(yq);L5o=r(HHr,"XLNetLMHeadModel"),HHr.forEach(t),x5o=r(Lwe," (XLNet model)"),Lwe.forEach(t),V.forEach(t),$5o=i(Jt),l_=n(Jt,"P",{});var xwe=s(l_);k5o=r(xwe,"The model is set in evaluation mode by default using "),yse=n(xwe,"CODE",{});var UHr=s(yse);S5o=r(UHr,"model.eval()"),UHr.forEach(t),R5o=r(xwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lse=n(xwe,"CODE",{});var JHr=s(Lse);B5o=r(JHr,"model.train()"),JHr.forEach(t),xwe.forEach(t),P5o=i(Jt),T(i_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),sBe=i(f),Ti=n(f,"H2",{class:!0});var iIe=s(Ti);d_=n(iIe,"A",{id:!0,class:!0,href:!0});var YHr=s(d_);xse=n(YHr,"SPAN",{});var KHr=s(xse);T(ZA.$$.fragment,KHr),KHr.forEach(t),YHr.forEach(t),I5o=i(iIe),$se=n(iIe,"SPAN",{});var ZHr=s($se);q5o=r(ZHr,"AutoModelForCausalLM"),ZHr.forEach(t),iIe.forEach(t),lBe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(e6.$$.fragment,Is),N5o=i(Is),Mi=n(Is,"P",{});var lY=s(Mi);j5o=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Lq=n(lY,"A",{href:!0});var eUr=s(Lq);D5o=r(eUr,"from_pretrained()"),eUr.forEach(t),G5o=r(lY," class method or the "),xq=n(lY,"A",{href:!0});var oUr=s(xq);O5o=r(oUr,"from_config()"),oUr.forEach(t),V5o=r(lY,` class
method.`),lY.forEach(t),X5o=i(Is),o6=n(Is,"P",{});var dIe=s(o6);z5o=r(dIe,"This class cannot be instantiated directly using "),kse=n(dIe,"CODE",{});var rUr=s(kse);Q5o=r(rUr,"__init__()"),rUr.forEach(t),W5o=r(dIe," (throws an error)."),dIe.forEach(t),H5o=i(Is),et=n(Is,"DIV",{class:!0});var A3=s(et);T(r6.$$.fragment,A3),U5o=i(A3),Sse=n(A3,"P",{});var tUr=s(Sse);J5o=r(tUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tUr.forEach(t),Y5o=i(A3),Ei=n(A3,"P",{});var iY=s(Ei);K5o=r(iY,`Note:
Loading a model from its configuration file does `),Rse=n(iY,"STRONG",{});var aUr=s(Rse);Z5o=r(aUr,"not"),aUr.forEach(t),evo=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(iY,"A",{href:!0});var nUr=s($q);ovo=r(nUr,"from_pretrained()"),nUr.forEach(t),rvo=r(iY," to load the model weights."),iY.forEach(t),tvo=i(A3),T(c_.$$.fragment,A3),A3.forEach(t),avo=i(Is),He=n(Is,"DIV",{class:!0});var Yt=s(He);T(t6.$$.fragment,Yt),nvo=i(Yt),Bse=n(Yt,"P",{});var sUr=s(Bse);svo=r(sUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sUr.forEach(t),lvo=i(Yt),Ca=n(Yt,"P",{});var y3=s(Ca);ivo=r(y3,"The model class to instantiate is selected based on the "),Pse=n(y3,"CODE",{});var lUr=s(Pse);dvo=r(lUr,"model_type"),lUr.forEach(t),cvo=r(y3,` property of the config object (either
passed as an argument or loaded from `),Ise=n(y3,"CODE",{});var iUr=s(Ise);fvo=r(iUr,"pretrained_model_name_or_path"),iUr.forEach(t),mvo=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qse=n(y3,"CODE",{});var dUr=s(qse);gvo=r(dUr,"pretrained_model_name_or_path"),dUr.forEach(t),hvo=r(y3,":"),y3.forEach(t),pvo=i(Yt),z=n(Yt,"UL",{});var W=s(z);f_=n(W,"LI",{});var $we=s(f_);Nse=n($we,"STRONG",{});var cUr=s(Nse);uvo=r(cUr,"bart"),cUr.forEach(t),_vo=r($we," \u2014 "),kq=n($we,"A",{href:!0});var fUr=s(kq);bvo=r(fUr,"BartForCausalLM"),fUr.forEach(t),vvo=r($we," (BART model)"),$we.forEach(t),Fvo=i(W),m_=n(W,"LI",{});var kwe=s(m_);jse=n(kwe,"STRONG",{});var mUr=s(jse);Tvo=r(mUr,"bert"),mUr.forEach(t),Mvo=r(kwe," \u2014 "),Sq=n(kwe,"A",{href:!0});var gUr=s(Sq);Evo=r(gUr,"BertLMHeadModel"),gUr.forEach(t),Cvo=r(kwe," (BERT model)"),kwe.forEach(t),wvo=i(W),g_=n(W,"LI",{});var Swe=s(g_);Dse=n(Swe,"STRONG",{});var hUr=s(Dse);Avo=r(hUr,"bert-generation"),hUr.forEach(t),yvo=r(Swe," \u2014 "),Rq=n(Swe,"A",{href:!0});var pUr=s(Rq);Lvo=r(pUr,"BertGenerationDecoder"),pUr.forEach(t),xvo=r(Swe," (Bert Generation model)"),Swe.forEach(t),$vo=i(W),h_=n(W,"LI",{});var Rwe=s(h_);Gse=n(Rwe,"STRONG",{});var uUr=s(Gse);kvo=r(uUr,"big_bird"),uUr.forEach(t),Svo=r(Rwe," \u2014 "),Bq=n(Rwe,"A",{href:!0});var _Ur=s(Bq);Rvo=r(_Ur,"BigBirdForCausalLM"),_Ur.forEach(t),Bvo=r(Rwe," (BigBird model)"),Rwe.forEach(t),Pvo=i(W),p_=n(W,"LI",{});var Bwe=s(p_);Ose=n(Bwe,"STRONG",{});var bUr=s(Ose);Ivo=r(bUr,"bigbird_pegasus"),bUr.forEach(t),qvo=r(Bwe," \u2014 "),Pq=n(Bwe,"A",{href:!0});var vUr=s(Pq);Nvo=r(vUr,"BigBirdPegasusForCausalLM"),vUr.forEach(t),jvo=r(Bwe," (BigBirdPegasus model)"),Bwe.forEach(t),Dvo=i(W),u_=n(W,"LI",{});var Pwe=s(u_);Vse=n(Pwe,"STRONG",{});var FUr=s(Vse);Gvo=r(FUr,"blenderbot"),FUr.forEach(t),Ovo=r(Pwe," \u2014 "),Iq=n(Pwe,"A",{href:!0});var TUr=s(Iq);Vvo=r(TUr,"BlenderbotForCausalLM"),TUr.forEach(t),Xvo=r(Pwe," (Blenderbot model)"),Pwe.forEach(t),zvo=i(W),__=n(W,"LI",{});var Iwe=s(__);Xse=n(Iwe,"STRONG",{});var MUr=s(Xse);Qvo=r(MUr,"blenderbot-small"),MUr.forEach(t),Wvo=r(Iwe," \u2014 "),qq=n(Iwe,"A",{href:!0});var EUr=s(qq);Hvo=r(EUr,"BlenderbotSmallForCausalLM"),EUr.forEach(t),Uvo=r(Iwe," (BlenderbotSmall model)"),Iwe.forEach(t),Jvo=i(W),b_=n(W,"LI",{});var qwe=s(b_);zse=n(qwe,"STRONG",{});var CUr=s(zse);Yvo=r(CUr,"camembert"),CUr.forEach(t),Kvo=r(qwe," \u2014 "),Nq=n(qwe,"A",{href:!0});var wUr=s(Nq);Zvo=r(wUr,"CamembertForCausalLM"),wUr.forEach(t),eFo=r(qwe," (CamemBERT model)"),qwe.forEach(t),oFo=i(W),v_=n(W,"LI",{});var Nwe=s(v_);Qse=n(Nwe,"STRONG",{});var AUr=s(Qse);rFo=r(AUr,"ctrl"),AUr.forEach(t),tFo=r(Nwe," \u2014 "),jq=n(Nwe,"A",{href:!0});var yUr=s(jq);aFo=r(yUr,"CTRLLMHeadModel"),yUr.forEach(t),nFo=r(Nwe," (CTRL model)"),Nwe.forEach(t),sFo=i(W),F_=n(W,"LI",{});var jwe=s(F_);Wse=n(jwe,"STRONG",{});var LUr=s(Wse);lFo=r(LUr,"data2vec-text"),LUr.forEach(t),iFo=r(jwe," \u2014 "),Dq=n(jwe,"A",{href:!0});var xUr=s(Dq);dFo=r(xUr,"Data2VecTextForCausalLM"),xUr.forEach(t),cFo=r(jwe," (Data2VecText model)"),jwe.forEach(t),fFo=i(W),T_=n(W,"LI",{});var Dwe=s(T_);Hse=n(Dwe,"STRONG",{});var $Ur=s(Hse);mFo=r($Ur,"electra"),$Ur.forEach(t),gFo=r(Dwe," \u2014 "),Gq=n(Dwe,"A",{href:!0});var kUr=s(Gq);hFo=r(kUr,"ElectraForCausalLM"),kUr.forEach(t),pFo=r(Dwe," (ELECTRA model)"),Dwe.forEach(t),uFo=i(W),M_=n(W,"LI",{});var Gwe=s(M_);Use=n(Gwe,"STRONG",{});var SUr=s(Use);_Fo=r(SUr,"gpt2"),SUr.forEach(t),bFo=r(Gwe," \u2014 "),Oq=n(Gwe,"A",{href:!0});var RUr=s(Oq);vFo=r(RUr,"GPT2LMHeadModel"),RUr.forEach(t),FFo=r(Gwe," (OpenAI GPT-2 model)"),Gwe.forEach(t),TFo=i(W),E_=n(W,"LI",{});var Owe=s(E_);Jse=n(Owe,"STRONG",{});var BUr=s(Jse);MFo=r(BUr,"gpt_neo"),BUr.forEach(t),EFo=r(Owe," \u2014 "),Vq=n(Owe,"A",{href:!0});var PUr=s(Vq);CFo=r(PUr,"GPTNeoForCausalLM"),PUr.forEach(t),wFo=r(Owe," (GPT Neo model)"),Owe.forEach(t),AFo=i(W),C_=n(W,"LI",{});var Vwe=s(C_);Yse=n(Vwe,"STRONG",{});var IUr=s(Yse);yFo=r(IUr,"gptj"),IUr.forEach(t),LFo=r(Vwe," \u2014 "),Xq=n(Vwe,"A",{href:!0});var qUr=s(Xq);xFo=r(qUr,"GPTJForCausalLM"),qUr.forEach(t),$Fo=r(Vwe," (GPT-J model)"),Vwe.forEach(t),kFo=i(W),w_=n(W,"LI",{});var Xwe=s(w_);Kse=n(Xwe,"STRONG",{});var NUr=s(Kse);SFo=r(NUr,"marian"),NUr.forEach(t),RFo=r(Xwe," \u2014 "),zq=n(Xwe,"A",{href:!0});var jUr=s(zq);BFo=r(jUr,"MarianForCausalLM"),jUr.forEach(t),PFo=r(Xwe," (Marian model)"),Xwe.forEach(t),IFo=i(W),A_=n(W,"LI",{});var zwe=s(A_);Zse=n(zwe,"STRONG",{});var DUr=s(Zse);qFo=r(DUr,"mbart"),DUr.forEach(t),NFo=r(zwe," \u2014 "),Qq=n(zwe,"A",{href:!0});var GUr=s(Qq);jFo=r(GUr,"MBartForCausalLM"),GUr.forEach(t),DFo=r(zwe," (mBART model)"),zwe.forEach(t),GFo=i(W),y_=n(W,"LI",{});var Qwe=s(y_);ele=n(Qwe,"STRONG",{});var OUr=s(ele);OFo=r(OUr,"megatron-bert"),OUr.forEach(t),VFo=r(Qwe," \u2014 "),Wq=n(Qwe,"A",{href:!0});var VUr=s(Wq);XFo=r(VUr,"MegatronBertForCausalLM"),VUr.forEach(t),zFo=r(Qwe," (MegatronBert model)"),Qwe.forEach(t),QFo=i(W),L_=n(W,"LI",{});var Wwe=s(L_);ole=n(Wwe,"STRONG",{});var XUr=s(ole);WFo=r(XUr,"openai-gpt"),XUr.forEach(t),HFo=r(Wwe," \u2014 "),Hq=n(Wwe,"A",{href:!0});var zUr=s(Hq);UFo=r(zUr,"OpenAIGPTLMHeadModel"),zUr.forEach(t),JFo=r(Wwe," (OpenAI GPT model)"),Wwe.forEach(t),YFo=i(W),x_=n(W,"LI",{});var Hwe=s(x_);rle=n(Hwe,"STRONG",{});var QUr=s(rle);KFo=r(QUr,"pegasus"),QUr.forEach(t),ZFo=r(Hwe," \u2014 "),Uq=n(Hwe,"A",{href:!0});var WUr=s(Uq);e0o=r(WUr,"PegasusForCausalLM"),WUr.forEach(t),o0o=r(Hwe," (Pegasus model)"),Hwe.forEach(t),r0o=i(W),$_=n(W,"LI",{});var Uwe=s($_);tle=n(Uwe,"STRONG",{});var HUr=s(tle);t0o=r(HUr,"plbart"),HUr.forEach(t),a0o=r(Uwe," \u2014 "),Jq=n(Uwe,"A",{href:!0});var UUr=s(Jq);n0o=r(UUr,"PLBartForCausalLM"),UUr.forEach(t),s0o=r(Uwe," (PLBart model)"),Uwe.forEach(t),l0o=i(W),k_=n(W,"LI",{});var Jwe=s(k_);ale=n(Jwe,"STRONG",{});var JUr=s(ale);i0o=r(JUr,"prophetnet"),JUr.forEach(t),d0o=r(Jwe," \u2014 "),Yq=n(Jwe,"A",{href:!0});var YUr=s(Yq);c0o=r(YUr,"ProphetNetForCausalLM"),YUr.forEach(t),f0o=r(Jwe," (ProphetNet model)"),Jwe.forEach(t),m0o=i(W),S_=n(W,"LI",{});var Ywe=s(S_);nle=n(Ywe,"STRONG",{});var KUr=s(nle);g0o=r(KUr,"qdqbert"),KUr.forEach(t),h0o=r(Ywe," \u2014 "),Kq=n(Ywe,"A",{href:!0});var ZUr=s(Kq);p0o=r(ZUr,"QDQBertLMHeadModel"),ZUr.forEach(t),u0o=r(Ywe," (QDQBert model)"),Ywe.forEach(t),_0o=i(W),R_=n(W,"LI",{});var Kwe=s(R_);sle=n(Kwe,"STRONG",{});var eJr=s(sle);b0o=r(eJr,"reformer"),eJr.forEach(t),v0o=r(Kwe," \u2014 "),Zq=n(Kwe,"A",{href:!0});var oJr=s(Zq);F0o=r(oJr,"ReformerModelWithLMHead"),oJr.forEach(t),T0o=r(Kwe," (Reformer model)"),Kwe.forEach(t),M0o=i(W),B_=n(W,"LI",{});var Zwe=s(B_);lle=n(Zwe,"STRONG",{});var rJr=s(lle);E0o=r(rJr,"rembert"),rJr.forEach(t),C0o=r(Zwe," \u2014 "),eN=n(Zwe,"A",{href:!0});var tJr=s(eN);w0o=r(tJr,"RemBertForCausalLM"),tJr.forEach(t),A0o=r(Zwe," (RemBERT model)"),Zwe.forEach(t),y0o=i(W),P_=n(W,"LI",{});var eAe=s(P_);ile=n(eAe,"STRONG",{});var aJr=s(ile);L0o=r(aJr,"roberta"),aJr.forEach(t),x0o=r(eAe," \u2014 "),oN=n(eAe,"A",{href:!0});var nJr=s(oN);$0o=r(nJr,"RobertaForCausalLM"),nJr.forEach(t),k0o=r(eAe," (RoBERTa model)"),eAe.forEach(t),S0o=i(W),I_=n(W,"LI",{});var oAe=s(I_);dle=n(oAe,"STRONG",{});var sJr=s(dle);R0o=r(sJr,"roformer"),sJr.forEach(t),B0o=r(oAe," \u2014 "),rN=n(oAe,"A",{href:!0});var lJr=s(rN);P0o=r(lJr,"RoFormerForCausalLM"),lJr.forEach(t),I0o=r(oAe," (RoFormer model)"),oAe.forEach(t),q0o=i(W),q_=n(W,"LI",{});var rAe=s(q_);cle=n(rAe,"STRONG",{});var iJr=s(cle);N0o=r(iJr,"speech_to_text_2"),iJr.forEach(t),j0o=r(rAe," \u2014 "),tN=n(rAe,"A",{href:!0});var dJr=s(tN);D0o=r(dJr,"Speech2Text2ForCausalLM"),dJr.forEach(t),G0o=r(rAe," (Speech2Text2 model)"),rAe.forEach(t),O0o=i(W),N_=n(W,"LI",{});var tAe=s(N_);fle=n(tAe,"STRONG",{});var cJr=s(fle);V0o=r(cJr,"transfo-xl"),cJr.forEach(t),X0o=r(tAe," \u2014 "),aN=n(tAe,"A",{href:!0});var fJr=s(aN);z0o=r(fJr,"TransfoXLLMHeadModel"),fJr.forEach(t),Q0o=r(tAe," (Transformer-XL model)"),tAe.forEach(t),W0o=i(W),j_=n(W,"LI",{});var aAe=s(j_);mle=n(aAe,"STRONG",{});var mJr=s(mle);H0o=r(mJr,"trocr"),mJr.forEach(t),U0o=r(aAe," \u2014 "),nN=n(aAe,"A",{href:!0});var gJr=s(nN);J0o=r(gJr,"TrOCRForCausalLM"),gJr.forEach(t),Y0o=r(aAe," (TrOCR model)"),aAe.forEach(t),K0o=i(W),D_=n(W,"LI",{});var nAe=s(D_);gle=n(nAe,"STRONG",{});var hJr=s(gle);Z0o=r(hJr,"xglm"),hJr.forEach(t),eTo=r(nAe," \u2014 "),sN=n(nAe,"A",{href:!0});var pJr=s(sN);oTo=r(pJr,"XGLMForCausalLM"),pJr.forEach(t),rTo=r(nAe," (XGLM model)"),nAe.forEach(t),tTo=i(W),G_=n(W,"LI",{});var sAe=s(G_);hle=n(sAe,"STRONG",{});var uJr=s(hle);aTo=r(uJr,"xlm"),uJr.forEach(t),nTo=r(sAe," \u2014 "),lN=n(sAe,"A",{href:!0});var _Jr=s(lN);sTo=r(_Jr,"XLMWithLMHeadModel"),_Jr.forEach(t),lTo=r(sAe," (XLM model)"),sAe.forEach(t),iTo=i(W),O_=n(W,"LI",{});var lAe=s(O_);ple=n(lAe,"STRONG",{});var bJr=s(ple);dTo=r(bJr,"xlm-prophetnet"),bJr.forEach(t),cTo=r(lAe," \u2014 "),iN=n(lAe,"A",{href:!0});var vJr=s(iN);fTo=r(vJr,"XLMProphetNetForCausalLM"),vJr.forEach(t),mTo=r(lAe," (XLMProphetNet model)"),lAe.forEach(t),gTo=i(W),V_=n(W,"LI",{});var iAe=s(V_);ule=n(iAe,"STRONG",{});var FJr=s(ule);hTo=r(FJr,"xlm-roberta"),FJr.forEach(t),pTo=r(iAe," \u2014 "),dN=n(iAe,"A",{href:!0});var TJr=s(dN);uTo=r(TJr,"XLMRobertaForCausalLM"),TJr.forEach(t),_To=r(iAe," (XLM-RoBERTa model)"),iAe.forEach(t),bTo=i(W),X_=n(W,"LI",{});var dAe=s(X_);_le=n(dAe,"STRONG",{});var MJr=s(_le);vTo=r(MJr,"xlm-roberta-xl"),MJr.forEach(t),FTo=r(dAe," \u2014 "),cN=n(dAe,"A",{href:!0});var EJr=s(cN);TTo=r(EJr,"XLMRobertaXLForCausalLM"),EJr.forEach(t),MTo=r(dAe," (XLM-RoBERTa-XL model)"),dAe.forEach(t),ETo=i(W),z_=n(W,"LI",{});var cAe=s(z_);ble=n(cAe,"STRONG",{});var CJr=s(ble);CTo=r(CJr,"xlnet"),CJr.forEach(t),wTo=r(cAe," \u2014 "),fN=n(cAe,"A",{href:!0});var wJr=s(fN);ATo=r(wJr,"XLNetLMHeadModel"),wJr.forEach(t),yTo=r(cAe," (XLNet model)"),cAe.forEach(t),W.forEach(t),LTo=i(Yt),Q_=n(Yt,"P",{});var fAe=s(Q_);xTo=r(fAe,"The model is set in evaluation mode by default using "),vle=n(fAe,"CODE",{});var AJr=s(vle);$To=r(AJr,"model.eval()"),AJr.forEach(t),kTo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fle=n(fAe,"CODE",{});var yJr=s(Fle);STo=r(yJr,"model.train()"),yJr.forEach(t),fAe.forEach(t),RTo=i(Yt),T(W_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),iBe=i(f),Ci=n(f,"H2",{class:!0});var cIe=s(Ci);H_=n(cIe,"A",{id:!0,class:!0,href:!0});var LJr=s(H_);Tle=n(LJr,"SPAN",{});var xJr=s(Tle);T(a6.$$.fragment,xJr),xJr.forEach(t),LJr.forEach(t),BTo=i(cIe),Mle=n(cIe,"SPAN",{});var $Jr=s(Mle);PTo=r($Jr,"AutoModelForMaskedLM"),$Jr.forEach(t),cIe.forEach(t),dBe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(n6.$$.fragment,qs),ITo=i(qs),wi=n(qs,"P",{});var dY=s(wi);qTo=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mN=n(dY,"A",{href:!0});var kJr=s(mN);NTo=r(kJr,"from_pretrained()"),kJr.forEach(t),jTo=r(dY," class method or the "),gN=n(dY,"A",{href:!0});var SJr=s(gN);DTo=r(SJr,"from_config()"),SJr.forEach(t),GTo=r(dY,` class
method.`),dY.forEach(t),OTo=i(qs),s6=n(qs,"P",{});var fIe=s(s6);VTo=r(fIe,"This class cannot be instantiated directly using "),Ele=n(fIe,"CODE",{});var RJr=s(Ele);XTo=r(RJr,"__init__()"),RJr.forEach(t),zTo=r(fIe," (throws an error)."),fIe.forEach(t),QTo=i(qs),ot=n(qs,"DIV",{class:!0});var L3=s(ot);T(l6.$$.fragment,L3),WTo=i(L3),Cle=n(L3,"P",{});var BJr=s(Cle);HTo=r(BJr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),BJr.forEach(t),UTo=i(L3),Ai=n(L3,"P",{});var cY=s(Ai);JTo=r(cY,`Note:
Loading a model from its configuration file does `),wle=n(cY,"STRONG",{});var PJr=s(wle);YTo=r(PJr,"not"),PJr.forEach(t),KTo=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),hN=n(cY,"A",{href:!0});var IJr=s(hN);ZTo=r(IJr,"from_pretrained()"),IJr.forEach(t),e7o=r(cY," to load the model weights."),cY.forEach(t),o7o=i(L3),T(U_.$$.fragment,L3),L3.forEach(t),r7o=i(qs),Ue=n(qs,"DIV",{class:!0});var Kt=s(Ue);T(i6.$$.fragment,Kt),t7o=i(Kt),Ale=n(Kt,"P",{});var qJr=s(Ale);a7o=r(qJr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),qJr.forEach(t),n7o=i(Kt),wa=n(Kt,"P",{});var x3=s(wa);s7o=r(x3,"The model class to instantiate is selected based on the "),yle=n(x3,"CODE",{});var NJr=s(yle);l7o=r(NJr,"model_type"),NJr.forEach(t),i7o=r(x3,` property of the config object (either
passed as an argument or loaded from `),Lle=n(x3,"CODE",{});var jJr=s(Lle);d7o=r(jJr,"pretrained_model_name_or_path"),jJr.forEach(t),c7o=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xle=n(x3,"CODE",{});var DJr=s(xle);f7o=r(DJr,"pretrained_model_name_or_path"),DJr.forEach(t),m7o=r(x3,":"),x3.forEach(t),g7o=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);J_=n(H,"LI",{});var mAe=s(J_);$le=n(mAe,"STRONG",{});var GJr=s($le);h7o=r(GJr,"albert"),GJr.forEach(t),p7o=r(mAe," \u2014 "),pN=n(mAe,"A",{href:!0});var OJr=s(pN);u7o=r(OJr,"AlbertForMaskedLM"),OJr.forEach(t),_7o=r(mAe," (ALBERT model)"),mAe.forEach(t),b7o=i(H),Y_=n(H,"LI",{});var gAe=s(Y_);kle=n(gAe,"STRONG",{});var VJr=s(kle);v7o=r(VJr,"bart"),VJr.forEach(t),F7o=r(gAe," \u2014 "),uN=n(gAe,"A",{href:!0});var XJr=s(uN);T7o=r(XJr,"BartForConditionalGeneration"),XJr.forEach(t),M7o=r(gAe," (BART model)"),gAe.forEach(t),E7o=i(H),K_=n(H,"LI",{});var hAe=s(K_);Sle=n(hAe,"STRONG",{});var zJr=s(Sle);C7o=r(zJr,"bert"),zJr.forEach(t),w7o=r(hAe," \u2014 "),_N=n(hAe,"A",{href:!0});var QJr=s(_N);A7o=r(QJr,"BertForMaskedLM"),QJr.forEach(t),y7o=r(hAe," (BERT model)"),hAe.forEach(t),L7o=i(H),Z_=n(H,"LI",{});var pAe=s(Z_);Rle=n(pAe,"STRONG",{});var WJr=s(Rle);x7o=r(WJr,"big_bird"),WJr.forEach(t),$7o=r(pAe," \u2014 "),bN=n(pAe,"A",{href:!0});var HJr=s(bN);k7o=r(HJr,"BigBirdForMaskedLM"),HJr.forEach(t),S7o=r(pAe," (BigBird model)"),pAe.forEach(t),R7o=i(H),e1=n(H,"LI",{});var uAe=s(e1);Ble=n(uAe,"STRONG",{});var UJr=s(Ble);B7o=r(UJr,"camembert"),UJr.forEach(t),P7o=r(uAe," \u2014 "),vN=n(uAe,"A",{href:!0});var JJr=s(vN);I7o=r(JJr,"CamembertForMaskedLM"),JJr.forEach(t),q7o=r(uAe," (CamemBERT model)"),uAe.forEach(t),N7o=i(H),o1=n(H,"LI",{});var _Ae=s(o1);Ple=n(_Ae,"STRONG",{});var YJr=s(Ple);j7o=r(YJr,"convbert"),YJr.forEach(t),D7o=r(_Ae," \u2014 "),FN=n(_Ae,"A",{href:!0});var KJr=s(FN);G7o=r(KJr,"ConvBertForMaskedLM"),KJr.forEach(t),O7o=r(_Ae," (ConvBERT model)"),_Ae.forEach(t),V7o=i(H),r1=n(H,"LI",{});var bAe=s(r1);Ile=n(bAe,"STRONG",{});var ZJr=s(Ile);X7o=r(ZJr,"data2vec-text"),ZJr.forEach(t),z7o=r(bAe," \u2014 "),TN=n(bAe,"A",{href:!0});var eYr=s(TN);Q7o=r(eYr,"Data2VecTextForMaskedLM"),eYr.forEach(t),W7o=r(bAe," (Data2VecText model)"),bAe.forEach(t),H7o=i(H),t1=n(H,"LI",{});var vAe=s(t1);qle=n(vAe,"STRONG",{});var oYr=s(qle);U7o=r(oYr,"deberta"),oYr.forEach(t),J7o=r(vAe," \u2014 "),MN=n(vAe,"A",{href:!0});var rYr=s(MN);Y7o=r(rYr,"DebertaForMaskedLM"),rYr.forEach(t),K7o=r(vAe," (DeBERTa model)"),vAe.forEach(t),Z7o=i(H),a1=n(H,"LI",{});var FAe=s(a1);Nle=n(FAe,"STRONG",{});var tYr=s(Nle);eMo=r(tYr,"deberta-v2"),tYr.forEach(t),oMo=r(FAe," \u2014 "),EN=n(FAe,"A",{href:!0});var aYr=s(EN);rMo=r(aYr,"DebertaV2ForMaskedLM"),aYr.forEach(t),tMo=r(FAe," (DeBERTa-v2 model)"),FAe.forEach(t),aMo=i(H),n1=n(H,"LI",{});var TAe=s(n1);jle=n(TAe,"STRONG",{});var nYr=s(jle);nMo=r(nYr,"distilbert"),nYr.forEach(t),sMo=r(TAe," \u2014 "),CN=n(TAe,"A",{href:!0});var sYr=s(CN);lMo=r(sYr,"DistilBertForMaskedLM"),sYr.forEach(t),iMo=r(TAe," (DistilBERT model)"),TAe.forEach(t),dMo=i(H),s1=n(H,"LI",{});var MAe=s(s1);Dle=n(MAe,"STRONG",{});var lYr=s(Dle);cMo=r(lYr,"electra"),lYr.forEach(t),fMo=r(MAe," \u2014 "),wN=n(MAe,"A",{href:!0});var iYr=s(wN);mMo=r(iYr,"ElectraForMaskedLM"),iYr.forEach(t),gMo=r(MAe," (ELECTRA model)"),MAe.forEach(t),hMo=i(H),l1=n(H,"LI",{});var EAe=s(l1);Gle=n(EAe,"STRONG",{});var dYr=s(Gle);pMo=r(dYr,"flaubert"),dYr.forEach(t),uMo=r(EAe," \u2014 "),AN=n(EAe,"A",{href:!0});var cYr=s(AN);_Mo=r(cYr,"FlaubertWithLMHeadModel"),cYr.forEach(t),bMo=r(EAe," (FlauBERT model)"),EAe.forEach(t),vMo=i(H),i1=n(H,"LI",{});var CAe=s(i1);Ole=n(CAe,"STRONG",{});var fYr=s(Ole);FMo=r(fYr,"fnet"),fYr.forEach(t),TMo=r(CAe," \u2014 "),yN=n(CAe,"A",{href:!0});var mYr=s(yN);MMo=r(mYr,"FNetForMaskedLM"),mYr.forEach(t),EMo=r(CAe," (FNet model)"),CAe.forEach(t),CMo=i(H),d1=n(H,"LI",{});var wAe=s(d1);Vle=n(wAe,"STRONG",{});var gYr=s(Vle);wMo=r(gYr,"funnel"),gYr.forEach(t),AMo=r(wAe," \u2014 "),LN=n(wAe,"A",{href:!0});var hYr=s(LN);yMo=r(hYr,"FunnelForMaskedLM"),hYr.forEach(t),LMo=r(wAe," (Funnel Transformer model)"),wAe.forEach(t),xMo=i(H),c1=n(H,"LI",{});var AAe=s(c1);Xle=n(AAe,"STRONG",{});var pYr=s(Xle);$Mo=r(pYr,"ibert"),pYr.forEach(t),kMo=r(AAe," \u2014 "),xN=n(AAe,"A",{href:!0});var uYr=s(xN);SMo=r(uYr,"IBertForMaskedLM"),uYr.forEach(t),RMo=r(AAe," (I-BERT model)"),AAe.forEach(t),BMo=i(H),f1=n(H,"LI",{});var yAe=s(f1);zle=n(yAe,"STRONG",{});var _Yr=s(zle);PMo=r(_Yr,"layoutlm"),_Yr.forEach(t),IMo=r(yAe," \u2014 "),$N=n(yAe,"A",{href:!0});var bYr=s($N);qMo=r(bYr,"LayoutLMForMaskedLM"),bYr.forEach(t),NMo=r(yAe," (LayoutLM model)"),yAe.forEach(t),jMo=i(H),m1=n(H,"LI",{});var LAe=s(m1);Qle=n(LAe,"STRONG",{});var vYr=s(Qle);DMo=r(vYr,"longformer"),vYr.forEach(t),GMo=r(LAe," \u2014 "),kN=n(LAe,"A",{href:!0});var FYr=s(kN);OMo=r(FYr,"LongformerForMaskedLM"),FYr.forEach(t),VMo=r(LAe," (Longformer model)"),LAe.forEach(t),XMo=i(H),g1=n(H,"LI",{});var xAe=s(g1);Wle=n(xAe,"STRONG",{});var TYr=s(Wle);zMo=r(TYr,"mbart"),TYr.forEach(t),QMo=r(xAe," \u2014 "),SN=n(xAe,"A",{href:!0});var MYr=s(SN);WMo=r(MYr,"MBartForConditionalGeneration"),MYr.forEach(t),HMo=r(xAe," (mBART model)"),xAe.forEach(t),UMo=i(H),h1=n(H,"LI",{});var $Ae=s(h1);Hle=n($Ae,"STRONG",{});var EYr=s(Hle);JMo=r(EYr,"megatron-bert"),EYr.forEach(t),YMo=r($Ae," \u2014 "),RN=n($Ae,"A",{href:!0});var CYr=s(RN);KMo=r(CYr,"MegatronBertForMaskedLM"),CYr.forEach(t),ZMo=r($Ae," (MegatronBert model)"),$Ae.forEach(t),eEo=i(H),p1=n(H,"LI",{});var kAe=s(p1);Ule=n(kAe,"STRONG",{});var wYr=s(Ule);oEo=r(wYr,"mobilebert"),wYr.forEach(t),rEo=r(kAe," \u2014 "),BN=n(kAe,"A",{href:!0});var AYr=s(BN);tEo=r(AYr,"MobileBertForMaskedLM"),AYr.forEach(t),aEo=r(kAe," (MobileBERT model)"),kAe.forEach(t),nEo=i(H),u1=n(H,"LI",{});var SAe=s(u1);Jle=n(SAe,"STRONG",{});var yYr=s(Jle);sEo=r(yYr,"mpnet"),yYr.forEach(t),lEo=r(SAe," \u2014 "),PN=n(SAe,"A",{href:!0});var LYr=s(PN);iEo=r(LYr,"MPNetForMaskedLM"),LYr.forEach(t),dEo=r(SAe," (MPNet model)"),SAe.forEach(t),cEo=i(H),_1=n(H,"LI",{});var RAe=s(_1);Yle=n(RAe,"STRONG",{});var xYr=s(Yle);fEo=r(xYr,"nystromformer"),xYr.forEach(t),mEo=r(RAe," \u2014 "),IN=n(RAe,"A",{href:!0});var $Yr=s(IN);gEo=r($Yr,"NystromformerForMaskedLM"),$Yr.forEach(t),hEo=r(RAe," (Nystromformer model)"),RAe.forEach(t),pEo=i(H),b1=n(H,"LI",{});var BAe=s(b1);Kle=n(BAe,"STRONG",{});var kYr=s(Kle);uEo=r(kYr,"perceiver"),kYr.forEach(t),_Eo=r(BAe," \u2014 "),qN=n(BAe,"A",{href:!0});var SYr=s(qN);bEo=r(SYr,"PerceiverForMaskedLM"),SYr.forEach(t),vEo=r(BAe," (Perceiver model)"),BAe.forEach(t),FEo=i(H),v1=n(H,"LI",{});var PAe=s(v1);Zle=n(PAe,"STRONG",{});var RYr=s(Zle);TEo=r(RYr,"qdqbert"),RYr.forEach(t),MEo=r(PAe," \u2014 "),NN=n(PAe,"A",{href:!0});var BYr=s(NN);EEo=r(BYr,"QDQBertForMaskedLM"),BYr.forEach(t),CEo=r(PAe," (QDQBert model)"),PAe.forEach(t),wEo=i(H),F1=n(H,"LI",{});var IAe=s(F1);eie=n(IAe,"STRONG",{});var PYr=s(eie);AEo=r(PYr,"reformer"),PYr.forEach(t),yEo=r(IAe," \u2014 "),jN=n(IAe,"A",{href:!0});var IYr=s(jN);LEo=r(IYr,"ReformerForMaskedLM"),IYr.forEach(t),xEo=r(IAe," (Reformer model)"),IAe.forEach(t),$Eo=i(H),T1=n(H,"LI",{});var qAe=s(T1);oie=n(qAe,"STRONG",{});var qYr=s(oie);kEo=r(qYr,"rembert"),qYr.forEach(t),SEo=r(qAe," \u2014 "),DN=n(qAe,"A",{href:!0});var NYr=s(DN);REo=r(NYr,"RemBertForMaskedLM"),NYr.forEach(t),BEo=r(qAe," (RemBERT model)"),qAe.forEach(t),PEo=i(H),M1=n(H,"LI",{});var NAe=s(M1);rie=n(NAe,"STRONG",{});var jYr=s(rie);IEo=r(jYr,"roberta"),jYr.forEach(t),qEo=r(NAe," \u2014 "),GN=n(NAe,"A",{href:!0});var DYr=s(GN);NEo=r(DYr,"RobertaForMaskedLM"),DYr.forEach(t),jEo=r(NAe," (RoBERTa model)"),NAe.forEach(t),DEo=i(H),E1=n(H,"LI",{});var jAe=s(E1);tie=n(jAe,"STRONG",{});var GYr=s(tie);GEo=r(GYr,"roformer"),GYr.forEach(t),OEo=r(jAe," \u2014 "),ON=n(jAe,"A",{href:!0});var OYr=s(ON);VEo=r(OYr,"RoFormerForMaskedLM"),OYr.forEach(t),XEo=r(jAe," (RoFormer model)"),jAe.forEach(t),zEo=i(H),C1=n(H,"LI",{});var DAe=s(C1);aie=n(DAe,"STRONG",{});var VYr=s(aie);QEo=r(VYr,"squeezebert"),VYr.forEach(t),WEo=r(DAe," \u2014 "),VN=n(DAe,"A",{href:!0});var XYr=s(VN);HEo=r(XYr,"SqueezeBertForMaskedLM"),XYr.forEach(t),UEo=r(DAe," (SqueezeBERT model)"),DAe.forEach(t),JEo=i(H),w1=n(H,"LI",{});var GAe=s(w1);nie=n(GAe,"STRONG",{});var zYr=s(nie);YEo=r(zYr,"tapas"),zYr.forEach(t),KEo=r(GAe," \u2014 "),XN=n(GAe,"A",{href:!0});var QYr=s(XN);ZEo=r(QYr,"TapasForMaskedLM"),QYr.forEach(t),eCo=r(GAe," (TAPAS model)"),GAe.forEach(t),oCo=i(H),A1=n(H,"LI",{});var OAe=s(A1);sie=n(OAe,"STRONG",{});var WYr=s(sie);rCo=r(WYr,"wav2vec2"),WYr.forEach(t),tCo=r(OAe," \u2014 "),lie=n(OAe,"CODE",{});var HYr=s(lie);aCo=r(HYr,"Wav2Vec2ForMaskedLM"),HYr.forEach(t),nCo=r(OAe," (Wav2Vec2 model)"),OAe.forEach(t),sCo=i(H),y1=n(H,"LI",{});var VAe=s(y1);iie=n(VAe,"STRONG",{});var UYr=s(iie);lCo=r(UYr,"xlm"),UYr.forEach(t),iCo=r(VAe," \u2014 "),zN=n(VAe,"A",{href:!0});var JYr=s(zN);dCo=r(JYr,"XLMWithLMHeadModel"),JYr.forEach(t),cCo=r(VAe," (XLM model)"),VAe.forEach(t),fCo=i(H),L1=n(H,"LI",{});var XAe=s(L1);die=n(XAe,"STRONG",{});var YYr=s(die);mCo=r(YYr,"xlm-roberta"),YYr.forEach(t),gCo=r(XAe," \u2014 "),QN=n(XAe,"A",{href:!0});var KYr=s(QN);hCo=r(KYr,"XLMRobertaForMaskedLM"),KYr.forEach(t),pCo=r(XAe," (XLM-RoBERTa model)"),XAe.forEach(t),uCo=i(H),x1=n(H,"LI",{});var zAe=s(x1);cie=n(zAe,"STRONG",{});var ZYr=s(cie);_Co=r(ZYr,"xlm-roberta-xl"),ZYr.forEach(t),bCo=r(zAe," \u2014 "),WN=n(zAe,"A",{href:!0});var eKr=s(WN);vCo=r(eKr,"XLMRobertaXLForMaskedLM"),eKr.forEach(t),FCo=r(zAe," (XLM-RoBERTa-XL model)"),zAe.forEach(t),TCo=i(H),$1=n(H,"LI",{});var QAe=s($1);fie=n(QAe,"STRONG",{});var oKr=s(fie);MCo=r(oKr,"yoso"),oKr.forEach(t),ECo=r(QAe," \u2014 "),HN=n(QAe,"A",{href:!0});var rKr=s(HN);CCo=r(rKr,"YosoForMaskedLM"),rKr.forEach(t),wCo=r(QAe," (YOSO model)"),QAe.forEach(t),H.forEach(t),ACo=i(Kt),k1=n(Kt,"P",{});var WAe=s(k1);yCo=r(WAe,"The model is set in evaluation mode by default using "),mie=n(WAe,"CODE",{});var tKr=s(mie);LCo=r(tKr,"model.eval()"),tKr.forEach(t),xCo=r(WAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(WAe,"CODE",{});var aKr=s(gie);$Co=r(aKr,"model.train()"),aKr.forEach(t),WAe.forEach(t),kCo=i(Kt),T(S1.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),cBe=i(f),yi=n(f,"H2",{class:!0});var mIe=s(yi);R1=n(mIe,"A",{id:!0,class:!0,href:!0});var nKr=s(R1);hie=n(nKr,"SPAN",{});var sKr=s(hie);T(d6.$$.fragment,sKr),sKr.forEach(t),nKr.forEach(t),SCo=i(mIe),pie=n(mIe,"SPAN",{});var lKr=s(pie);RCo=r(lKr,"AutoModelForSeq2SeqLM"),lKr.forEach(t),mIe.forEach(t),fBe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(c6.$$.fragment,Ns),BCo=i(Ns),Li=n(Ns,"P",{});var fY=s(Li);PCo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UN=n(fY,"A",{href:!0});var iKr=s(UN);ICo=r(iKr,"from_pretrained()"),iKr.forEach(t),qCo=r(fY," class method or the "),JN=n(fY,"A",{href:!0});var dKr=s(JN);NCo=r(dKr,"from_config()"),dKr.forEach(t),jCo=r(fY,` class
method.`),fY.forEach(t),DCo=i(Ns),f6=n(Ns,"P",{});var gIe=s(f6);GCo=r(gIe,"This class cannot be instantiated directly using "),uie=n(gIe,"CODE",{});var cKr=s(uie);OCo=r(cKr,"__init__()"),cKr.forEach(t),VCo=r(gIe," (throws an error)."),gIe.forEach(t),XCo=i(Ns),rt=n(Ns,"DIV",{class:!0});var $3=s(rt);T(m6.$$.fragment,$3),zCo=i($3),_ie=n($3,"P",{});var fKr=s(_ie);QCo=r(fKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fKr.forEach(t),WCo=i($3),xi=n($3,"P",{});var mY=s(xi);HCo=r(mY,`Note:
Loading a model from its configuration file does `),bie=n(mY,"STRONG",{});var mKr=s(bie);UCo=r(mKr,"not"),mKr.forEach(t),JCo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YN=n(mY,"A",{href:!0});var gKr=s(YN);YCo=r(gKr,"from_pretrained()"),gKr.forEach(t),KCo=r(mY," to load the model weights."),mY.forEach(t),ZCo=i($3),T(B1.$$.fragment,$3),$3.forEach(t),e3o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Zt=s(Je);T(g6.$$.fragment,Zt),o3o=i(Zt),vie=n(Zt,"P",{});var hKr=s(vie);r3o=r(hKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hKr.forEach(t),t3o=i(Zt),Aa=n(Zt,"P",{});var k3=s(Aa);a3o=r(k3,"The model class to instantiate is selected based on the "),Fie=n(k3,"CODE",{});var pKr=s(Fie);n3o=r(pKr,"model_type"),pKr.forEach(t),s3o=r(k3,` property of the config object (either
passed as an argument or loaded from `),Tie=n(k3,"CODE",{});var uKr=s(Tie);l3o=r(uKr,"pretrained_model_name_or_path"),uKr.forEach(t),i3o=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mie=n(k3,"CODE",{});var _Kr=s(Mie);d3o=r(_Kr,"pretrained_model_name_or_path"),_Kr.forEach(t),c3o=r(k3,":"),k3.forEach(t),f3o=i(Zt),he=n(Zt,"UL",{});var ue=s(he);P1=n(ue,"LI",{});var HAe=s(P1);Eie=n(HAe,"STRONG",{});var bKr=s(Eie);m3o=r(bKr,"bart"),bKr.forEach(t),g3o=r(HAe," \u2014 "),KN=n(HAe,"A",{href:!0});var vKr=s(KN);h3o=r(vKr,"BartForConditionalGeneration"),vKr.forEach(t),p3o=r(HAe," (BART model)"),HAe.forEach(t),u3o=i(ue),I1=n(ue,"LI",{});var UAe=s(I1);Cie=n(UAe,"STRONG",{});var FKr=s(Cie);_3o=r(FKr,"bigbird_pegasus"),FKr.forEach(t),b3o=r(UAe," \u2014 "),ZN=n(UAe,"A",{href:!0});var TKr=s(ZN);v3o=r(TKr,"BigBirdPegasusForConditionalGeneration"),TKr.forEach(t),F3o=r(UAe," (BigBirdPegasus model)"),UAe.forEach(t),T3o=i(ue),q1=n(ue,"LI",{});var JAe=s(q1);wie=n(JAe,"STRONG",{});var MKr=s(wie);M3o=r(MKr,"blenderbot"),MKr.forEach(t),E3o=r(JAe," \u2014 "),ej=n(JAe,"A",{href:!0});var EKr=s(ej);C3o=r(EKr,"BlenderbotForConditionalGeneration"),EKr.forEach(t),w3o=r(JAe," (Blenderbot model)"),JAe.forEach(t),A3o=i(ue),N1=n(ue,"LI",{});var YAe=s(N1);Aie=n(YAe,"STRONG",{});var CKr=s(Aie);y3o=r(CKr,"blenderbot-small"),CKr.forEach(t),L3o=r(YAe," \u2014 "),oj=n(YAe,"A",{href:!0});var wKr=s(oj);x3o=r(wKr,"BlenderbotSmallForConditionalGeneration"),wKr.forEach(t),$3o=r(YAe," (BlenderbotSmall model)"),YAe.forEach(t),k3o=i(ue),j1=n(ue,"LI",{});var KAe=s(j1);yie=n(KAe,"STRONG",{});var AKr=s(yie);S3o=r(AKr,"encoder-decoder"),AKr.forEach(t),R3o=r(KAe," \u2014 "),rj=n(KAe,"A",{href:!0});var yKr=s(rj);B3o=r(yKr,"EncoderDecoderModel"),yKr.forEach(t),P3o=r(KAe," (Encoder decoder model)"),KAe.forEach(t),I3o=i(ue),D1=n(ue,"LI",{});var ZAe=s(D1);Lie=n(ZAe,"STRONG",{});var LKr=s(Lie);q3o=r(LKr,"fsmt"),LKr.forEach(t),N3o=r(ZAe," \u2014 "),tj=n(ZAe,"A",{href:!0});var xKr=s(tj);j3o=r(xKr,"FSMTForConditionalGeneration"),xKr.forEach(t),D3o=r(ZAe," (FairSeq Machine-Translation model)"),ZAe.forEach(t),G3o=i(ue),G1=n(ue,"LI",{});var e6e=s(G1);xie=n(e6e,"STRONG",{});var $Kr=s(xie);O3o=r($Kr,"led"),$Kr.forEach(t),V3o=r(e6e," \u2014 "),aj=n(e6e,"A",{href:!0});var kKr=s(aj);X3o=r(kKr,"LEDForConditionalGeneration"),kKr.forEach(t),z3o=r(e6e," (LED model)"),e6e.forEach(t),Q3o=i(ue),O1=n(ue,"LI",{});var o6e=s(O1);$ie=n(o6e,"STRONG",{});var SKr=s($ie);W3o=r(SKr,"m2m_100"),SKr.forEach(t),H3o=r(o6e," \u2014 "),nj=n(o6e,"A",{href:!0});var RKr=s(nj);U3o=r(RKr,"M2M100ForConditionalGeneration"),RKr.forEach(t),J3o=r(o6e," (M2M100 model)"),o6e.forEach(t),Y3o=i(ue),V1=n(ue,"LI",{});var r6e=s(V1);kie=n(r6e,"STRONG",{});var BKr=s(kie);K3o=r(BKr,"marian"),BKr.forEach(t),Z3o=r(r6e," \u2014 "),sj=n(r6e,"A",{href:!0});var PKr=s(sj);ewo=r(PKr,"MarianMTModel"),PKr.forEach(t),owo=r(r6e," (Marian model)"),r6e.forEach(t),rwo=i(ue),X1=n(ue,"LI",{});var t6e=s(X1);Sie=n(t6e,"STRONG",{});var IKr=s(Sie);two=r(IKr,"mbart"),IKr.forEach(t),awo=r(t6e," \u2014 "),lj=n(t6e,"A",{href:!0});var qKr=s(lj);nwo=r(qKr,"MBartForConditionalGeneration"),qKr.forEach(t),swo=r(t6e," (mBART model)"),t6e.forEach(t),lwo=i(ue),z1=n(ue,"LI",{});var a6e=s(z1);Rie=n(a6e,"STRONG",{});var NKr=s(Rie);iwo=r(NKr,"mt5"),NKr.forEach(t),dwo=r(a6e," \u2014 "),ij=n(a6e,"A",{href:!0});var jKr=s(ij);cwo=r(jKr,"MT5ForConditionalGeneration"),jKr.forEach(t),fwo=r(a6e," (mT5 model)"),a6e.forEach(t),mwo=i(ue),Q1=n(ue,"LI",{});var n6e=s(Q1);Bie=n(n6e,"STRONG",{});var DKr=s(Bie);gwo=r(DKr,"pegasus"),DKr.forEach(t),hwo=r(n6e," \u2014 "),dj=n(n6e,"A",{href:!0});var GKr=s(dj);pwo=r(GKr,"PegasusForConditionalGeneration"),GKr.forEach(t),uwo=r(n6e," (Pegasus model)"),n6e.forEach(t),_wo=i(ue),W1=n(ue,"LI",{});var s6e=s(W1);Pie=n(s6e,"STRONG",{});var OKr=s(Pie);bwo=r(OKr,"plbart"),OKr.forEach(t),vwo=r(s6e," \u2014 "),cj=n(s6e,"A",{href:!0});var VKr=s(cj);Fwo=r(VKr,"PLBartForConditionalGeneration"),VKr.forEach(t),Two=r(s6e," (PLBart model)"),s6e.forEach(t),Mwo=i(ue),H1=n(ue,"LI",{});var l6e=s(H1);Iie=n(l6e,"STRONG",{});var XKr=s(Iie);Ewo=r(XKr,"prophetnet"),XKr.forEach(t),Cwo=r(l6e," \u2014 "),fj=n(l6e,"A",{href:!0});var zKr=s(fj);wwo=r(zKr,"ProphetNetForConditionalGeneration"),zKr.forEach(t),Awo=r(l6e," (ProphetNet model)"),l6e.forEach(t),ywo=i(ue),U1=n(ue,"LI",{});var i6e=s(U1);qie=n(i6e,"STRONG",{});var QKr=s(qie);Lwo=r(QKr,"t5"),QKr.forEach(t),xwo=r(i6e," \u2014 "),mj=n(i6e,"A",{href:!0});var WKr=s(mj);$wo=r(WKr,"T5ForConditionalGeneration"),WKr.forEach(t),kwo=r(i6e," (T5 model)"),i6e.forEach(t),Swo=i(ue),J1=n(ue,"LI",{});var d6e=s(J1);Nie=n(d6e,"STRONG",{});var HKr=s(Nie);Rwo=r(HKr,"tapex"),HKr.forEach(t),Bwo=r(d6e," \u2014 "),gj=n(d6e,"A",{href:!0});var UKr=s(gj);Pwo=r(UKr,"BartForConditionalGeneration"),UKr.forEach(t),Iwo=r(d6e," (TAPEX model)"),d6e.forEach(t),qwo=i(ue),Y1=n(ue,"LI",{});var c6e=s(Y1);jie=n(c6e,"STRONG",{});var JKr=s(jie);Nwo=r(JKr,"xlm-prophetnet"),JKr.forEach(t),jwo=r(c6e," \u2014 "),hj=n(c6e,"A",{href:!0});var YKr=s(hj);Dwo=r(YKr,"XLMProphetNetForConditionalGeneration"),YKr.forEach(t),Gwo=r(c6e," (XLMProphetNet model)"),c6e.forEach(t),ue.forEach(t),Owo=i(Zt),K1=n(Zt,"P",{});var f6e=s(K1);Vwo=r(f6e,"The model is set in evaluation mode by default using "),Die=n(f6e,"CODE",{});var KKr=s(Die);Xwo=r(KKr,"model.eval()"),KKr.forEach(t),zwo=r(f6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gie=n(f6e,"CODE",{});var ZKr=s(Gie);Qwo=r(ZKr,"model.train()"),ZKr.forEach(t),f6e.forEach(t),Wwo=i(Zt),T(Z1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),mBe=i(f),$i=n(f,"H2",{class:!0});var hIe=s($i);eb=n(hIe,"A",{id:!0,class:!0,href:!0});var eZr=s(eb);Oie=n(eZr,"SPAN",{});var oZr=s(Oie);T(h6.$$.fragment,oZr),oZr.forEach(t),eZr.forEach(t),Hwo=i(hIe),Vie=n(hIe,"SPAN",{});var rZr=s(Vie);Uwo=r(rZr,"AutoModelForSequenceClassification"),rZr.forEach(t),hIe.forEach(t),gBe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(p6.$$.fragment,js),Jwo=i(js),ki=n(js,"P",{});var gY=s(ki);Ywo=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),pj=n(gY,"A",{href:!0});var tZr=s(pj);Kwo=r(tZr,"from_pretrained()"),tZr.forEach(t),Zwo=r(gY," class method or the "),uj=n(gY,"A",{href:!0});var aZr=s(uj);eAo=r(aZr,"from_config()"),aZr.forEach(t),oAo=r(gY,` class
method.`),gY.forEach(t),rAo=i(js),u6=n(js,"P",{});var pIe=s(u6);tAo=r(pIe,"This class cannot be instantiated directly using "),Xie=n(pIe,"CODE",{});var nZr=s(Xie);aAo=r(nZr,"__init__()"),nZr.forEach(t),nAo=r(pIe," (throws an error)."),pIe.forEach(t),sAo=i(js),tt=n(js,"DIV",{class:!0});var S3=s(tt);T(_6.$$.fragment,S3),lAo=i(S3),zie=n(S3,"P",{});var sZr=s(zie);iAo=r(sZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),sZr.forEach(t),dAo=i(S3),Si=n(S3,"P",{});var hY=s(Si);cAo=r(hY,`Note:
Loading a model from its configuration file does `),Qie=n(hY,"STRONG",{});var lZr=s(Qie);fAo=r(lZr,"not"),lZr.forEach(t),mAo=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(hY,"A",{href:!0});var iZr=s(_j);gAo=r(iZr,"from_pretrained()"),iZr.forEach(t),hAo=r(hY," to load the model weights."),hY.forEach(t),pAo=i(S3),T(ob.$$.fragment,S3),S3.forEach(t),uAo=i(js),Ye=n(js,"DIV",{class:!0});var ea=s(Ye);T(b6.$$.fragment,ea),_Ao=i(ea),Wie=n(ea,"P",{});var dZr=s(Wie);bAo=r(dZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dZr.forEach(t),vAo=i(ea),ya=n(ea,"P",{});var R3=s(ya);FAo=r(R3,"The model class to instantiate is selected based on the "),Hie=n(R3,"CODE",{});var cZr=s(Hie);TAo=r(cZr,"model_type"),cZr.forEach(t),MAo=r(R3,` property of the config object (either
passed as an argument or loaded from `),Uie=n(R3,"CODE",{});var fZr=s(Uie);EAo=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),CAo=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(R3,"CODE",{});var mZr=s(Jie);wAo=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),AAo=r(R3,":"),R3.forEach(t),yAo=i(ea),q=n(ea,"UL",{});var N=s(q);rb=n(N,"LI",{});var m6e=s(rb);Yie=n(m6e,"STRONG",{});var gZr=s(Yie);LAo=r(gZr,"albert"),gZr.forEach(t),xAo=r(m6e," \u2014 "),bj=n(m6e,"A",{href:!0});var hZr=s(bj);$Ao=r(hZr,"AlbertForSequenceClassification"),hZr.forEach(t),kAo=r(m6e," (ALBERT model)"),m6e.forEach(t),SAo=i(N),tb=n(N,"LI",{});var g6e=s(tb);Kie=n(g6e,"STRONG",{});var pZr=s(Kie);RAo=r(pZr,"bart"),pZr.forEach(t),BAo=r(g6e," \u2014 "),vj=n(g6e,"A",{href:!0});var uZr=s(vj);PAo=r(uZr,"BartForSequenceClassification"),uZr.forEach(t),IAo=r(g6e," (BART model)"),g6e.forEach(t),qAo=i(N),ab=n(N,"LI",{});var h6e=s(ab);Zie=n(h6e,"STRONG",{});var _Zr=s(Zie);NAo=r(_Zr,"bert"),_Zr.forEach(t),jAo=r(h6e," \u2014 "),Fj=n(h6e,"A",{href:!0});var bZr=s(Fj);DAo=r(bZr,"BertForSequenceClassification"),bZr.forEach(t),GAo=r(h6e," (BERT model)"),h6e.forEach(t),OAo=i(N),nb=n(N,"LI",{});var p6e=s(nb);ede=n(p6e,"STRONG",{});var vZr=s(ede);VAo=r(vZr,"big_bird"),vZr.forEach(t),XAo=r(p6e," \u2014 "),Tj=n(p6e,"A",{href:!0});var FZr=s(Tj);zAo=r(FZr,"BigBirdForSequenceClassification"),FZr.forEach(t),QAo=r(p6e," (BigBird model)"),p6e.forEach(t),WAo=i(N),sb=n(N,"LI",{});var u6e=s(sb);ode=n(u6e,"STRONG",{});var TZr=s(ode);HAo=r(TZr,"bigbird_pegasus"),TZr.forEach(t),UAo=r(u6e," \u2014 "),Mj=n(u6e,"A",{href:!0});var MZr=s(Mj);JAo=r(MZr,"BigBirdPegasusForSequenceClassification"),MZr.forEach(t),YAo=r(u6e," (BigBirdPegasus model)"),u6e.forEach(t),KAo=i(N),lb=n(N,"LI",{});var _6e=s(lb);rde=n(_6e,"STRONG",{});var EZr=s(rde);ZAo=r(EZr,"camembert"),EZr.forEach(t),e6o=r(_6e," \u2014 "),Ej=n(_6e,"A",{href:!0});var CZr=s(Ej);o6o=r(CZr,"CamembertForSequenceClassification"),CZr.forEach(t),r6o=r(_6e," (CamemBERT model)"),_6e.forEach(t),t6o=i(N),ib=n(N,"LI",{});var b6e=s(ib);tde=n(b6e,"STRONG",{});var wZr=s(tde);a6o=r(wZr,"canine"),wZr.forEach(t),n6o=r(b6e," \u2014 "),Cj=n(b6e,"A",{href:!0});var AZr=s(Cj);s6o=r(AZr,"CanineForSequenceClassification"),AZr.forEach(t),l6o=r(b6e," (Canine model)"),b6e.forEach(t),i6o=i(N),db=n(N,"LI",{});var v6e=s(db);ade=n(v6e,"STRONG",{});var yZr=s(ade);d6o=r(yZr,"convbert"),yZr.forEach(t),c6o=r(v6e," \u2014 "),wj=n(v6e,"A",{href:!0});var LZr=s(wj);f6o=r(LZr,"ConvBertForSequenceClassification"),LZr.forEach(t),m6o=r(v6e," (ConvBERT model)"),v6e.forEach(t),g6o=i(N),cb=n(N,"LI",{});var F6e=s(cb);nde=n(F6e,"STRONG",{});var xZr=s(nde);h6o=r(xZr,"ctrl"),xZr.forEach(t),p6o=r(F6e," \u2014 "),Aj=n(F6e,"A",{href:!0});var $Zr=s(Aj);u6o=r($Zr,"CTRLForSequenceClassification"),$Zr.forEach(t),_6o=r(F6e," (CTRL model)"),F6e.forEach(t),b6o=i(N),fb=n(N,"LI",{});var T6e=s(fb);sde=n(T6e,"STRONG",{});var kZr=s(sde);v6o=r(kZr,"data2vec-text"),kZr.forEach(t),F6o=r(T6e," \u2014 "),yj=n(T6e,"A",{href:!0});var SZr=s(yj);T6o=r(SZr,"Data2VecTextForSequenceClassification"),SZr.forEach(t),M6o=r(T6e," (Data2VecText model)"),T6e.forEach(t),E6o=i(N),mb=n(N,"LI",{});var M6e=s(mb);lde=n(M6e,"STRONG",{});var RZr=s(lde);C6o=r(RZr,"deberta"),RZr.forEach(t),w6o=r(M6e," \u2014 "),Lj=n(M6e,"A",{href:!0});var BZr=s(Lj);A6o=r(BZr,"DebertaForSequenceClassification"),BZr.forEach(t),y6o=r(M6e," (DeBERTa model)"),M6e.forEach(t),L6o=i(N),gb=n(N,"LI",{});var E6e=s(gb);ide=n(E6e,"STRONG",{});var PZr=s(ide);x6o=r(PZr,"deberta-v2"),PZr.forEach(t),$6o=r(E6e," \u2014 "),xj=n(E6e,"A",{href:!0});var IZr=s(xj);k6o=r(IZr,"DebertaV2ForSequenceClassification"),IZr.forEach(t),S6o=r(E6e," (DeBERTa-v2 model)"),E6e.forEach(t),R6o=i(N),hb=n(N,"LI",{});var C6e=s(hb);dde=n(C6e,"STRONG",{});var qZr=s(dde);B6o=r(qZr,"distilbert"),qZr.forEach(t),P6o=r(C6e," \u2014 "),$j=n(C6e,"A",{href:!0});var NZr=s($j);I6o=r(NZr,"DistilBertForSequenceClassification"),NZr.forEach(t),q6o=r(C6e," (DistilBERT model)"),C6e.forEach(t),N6o=i(N),pb=n(N,"LI",{});var w6e=s(pb);cde=n(w6e,"STRONG",{});var jZr=s(cde);j6o=r(jZr,"electra"),jZr.forEach(t),D6o=r(w6e," \u2014 "),kj=n(w6e,"A",{href:!0});var DZr=s(kj);G6o=r(DZr,"ElectraForSequenceClassification"),DZr.forEach(t),O6o=r(w6e," (ELECTRA model)"),w6e.forEach(t),V6o=i(N),ub=n(N,"LI",{});var A6e=s(ub);fde=n(A6e,"STRONG",{});var GZr=s(fde);X6o=r(GZr,"flaubert"),GZr.forEach(t),z6o=r(A6e," \u2014 "),Sj=n(A6e,"A",{href:!0});var OZr=s(Sj);Q6o=r(OZr,"FlaubertForSequenceClassification"),OZr.forEach(t),W6o=r(A6e," (FlauBERT model)"),A6e.forEach(t),H6o=i(N),_b=n(N,"LI",{});var y6e=s(_b);mde=n(y6e,"STRONG",{});var VZr=s(mde);U6o=r(VZr,"fnet"),VZr.forEach(t),J6o=r(y6e," \u2014 "),Rj=n(y6e,"A",{href:!0});var XZr=s(Rj);Y6o=r(XZr,"FNetForSequenceClassification"),XZr.forEach(t),K6o=r(y6e," (FNet model)"),y6e.forEach(t),Z6o=i(N),bb=n(N,"LI",{});var L6e=s(bb);gde=n(L6e,"STRONG",{});var zZr=s(gde);eyo=r(zZr,"funnel"),zZr.forEach(t),oyo=r(L6e," \u2014 "),Bj=n(L6e,"A",{href:!0});var QZr=s(Bj);ryo=r(QZr,"FunnelForSequenceClassification"),QZr.forEach(t),tyo=r(L6e," (Funnel Transformer model)"),L6e.forEach(t),ayo=i(N),vb=n(N,"LI",{});var x6e=s(vb);hde=n(x6e,"STRONG",{});var WZr=s(hde);nyo=r(WZr,"gpt2"),WZr.forEach(t),syo=r(x6e," \u2014 "),Pj=n(x6e,"A",{href:!0});var HZr=s(Pj);lyo=r(HZr,"GPT2ForSequenceClassification"),HZr.forEach(t),iyo=r(x6e," (OpenAI GPT-2 model)"),x6e.forEach(t),dyo=i(N),Fb=n(N,"LI",{});var $6e=s(Fb);pde=n($6e,"STRONG",{});var UZr=s(pde);cyo=r(UZr,"gpt_neo"),UZr.forEach(t),fyo=r($6e," \u2014 "),Ij=n($6e,"A",{href:!0});var JZr=s(Ij);myo=r(JZr,"GPTNeoForSequenceClassification"),JZr.forEach(t),gyo=r($6e," (GPT Neo model)"),$6e.forEach(t),hyo=i(N),Tb=n(N,"LI",{});var k6e=s(Tb);ude=n(k6e,"STRONG",{});var YZr=s(ude);pyo=r(YZr,"gptj"),YZr.forEach(t),uyo=r(k6e," \u2014 "),qj=n(k6e,"A",{href:!0});var KZr=s(qj);_yo=r(KZr,"GPTJForSequenceClassification"),KZr.forEach(t),byo=r(k6e," (GPT-J model)"),k6e.forEach(t),vyo=i(N),Mb=n(N,"LI",{});var S6e=s(Mb);_de=n(S6e,"STRONG",{});var ZZr=s(_de);Fyo=r(ZZr,"ibert"),ZZr.forEach(t),Tyo=r(S6e," \u2014 "),Nj=n(S6e,"A",{href:!0});var eet=s(Nj);Myo=r(eet,"IBertForSequenceClassification"),eet.forEach(t),Eyo=r(S6e," (I-BERT model)"),S6e.forEach(t),Cyo=i(N),Eb=n(N,"LI",{});var R6e=s(Eb);bde=n(R6e,"STRONG",{});var oet=s(bde);wyo=r(oet,"layoutlm"),oet.forEach(t),Ayo=r(R6e," \u2014 "),jj=n(R6e,"A",{href:!0});var ret=s(jj);yyo=r(ret,"LayoutLMForSequenceClassification"),ret.forEach(t),Lyo=r(R6e," (LayoutLM model)"),R6e.forEach(t),xyo=i(N),Cb=n(N,"LI",{});var B6e=s(Cb);vde=n(B6e,"STRONG",{});var tet=s(vde);$yo=r(tet,"layoutlmv2"),tet.forEach(t),kyo=r(B6e," \u2014 "),Dj=n(B6e,"A",{href:!0});var aet=s(Dj);Syo=r(aet,"LayoutLMv2ForSequenceClassification"),aet.forEach(t),Ryo=r(B6e," (LayoutLMv2 model)"),B6e.forEach(t),Byo=i(N),wb=n(N,"LI",{});var P6e=s(wb);Fde=n(P6e,"STRONG",{});var net=s(Fde);Pyo=r(net,"led"),net.forEach(t),Iyo=r(P6e," \u2014 "),Gj=n(P6e,"A",{href:!0});var set=s(Gj);qyo=r(set,"LEDForSequenceClassification"),set.forEach(t),Nyo=r(P6e," (LED model)"),P6e.forEach(t),jyo=i(N),Ab=n(N,"LI",{});var I6e=s(Ab);Tde=n(I6e,"STRONG",{});var iet=s(Tde);Dyo=r(iet,"longformer"),iet.forEach(t),Gyo=r(I6e," \u2014 "),Oj=n(I6e,"A",{href:!0});var det=s(Oj);Oyo=r(det,"LongformerForSequenceClassification"),det.forEach(t),Vyo=r(I6e," (Longformer model)"),I6e.forEach(t),Xyo=i(N),yb=n(N,"LI",{});var q6e=s(yb);Mde=n(q6e,"STRONG",{});var cet=s(Mde);zyo=r(cet,"mbart"),cet.forEach(t),Qyo=r(q6e," \u2014 "),Vj=n(q6e,"A",{href:!0});var fet=s(Vj);Wyo=r(fet,"MBartForSequenceClassification"),fet.forEach(t),Hyo=r(q6e," (mBART model)"),q6e.forEach(t),Uyo=i(N),Lb=n(N,"LI",{});var N6e=s(Lb);Ede=n(N6e,"STRONG",{});var met=s(Ede);Jyo=r(met,"megatron-bert"),met.forEach(t),Yyo=r(N6e," \u2014 "),Xj=n(N6e,"A",{href:!0});var get=s(Xj);Kyo=r(get,"MegatronBertForSequenceClassification"),get.forEach(t),Zyo=r(N6e," (MegatronBert model)"),N6e.forEach(t),eLo=i(N),xb=n(N,"LI",{});var j6e=s(xb);Cde=n(j6e,"STRONG",{});var het=s(Cde);oLo=r(het,"mobilebert"),het.forEach(t),rLo=r(j6e," \u2014 "),zj=n(j6e,"A",{href:!0});var pet=s(zj);tLo=r(pet,"MobileBertForSequenceClassification"),pet.forEach(t),aLo=r(j6e," (MobileBERT model)"),j6e.forEach(t),nLo=i(N),$b=n(N,"LI",{});var D6e=s($b);wde=n(D6e,"STRONG",{});var uet=s(wde);sLo=r(uet,"mpnet"),uet.forEach(t),lLo=r(D6e," \u2014 "),Qj=n(D6e,"A",{href:!0});var _et=s(Qj);iLo=r(_et,"MPNetForSequenceClassification"),_et.forEach(t),dLo=r(D6e," (MPNet model)"),D6e.forEach(t),cLo=i(N),kb=n(N,"LI",{});var G6e=s(kb);Ade=n(G6e,"STRONG",{});var bet=s(Ade);fLo=r(bet,"nystromformer"),bet.forEach(t),mLo=r(G6e," \u2014 "),Wj=n(G6e,"A",{href:!0});var vet=s(Wj);gLo=r(vet,"NystromformerForSequenceClassification"),vet.forEach(t),hLo=r(G6e," (Nystromformer model)"),G6e.forEach(t),pLo=i(N),Sb=n(N,"LI",{});var O6e=s(Sb);yde=n(O6e,"STRONG",{});var Fet=s(yde);uLo=r(Fet,"openai-gpt"),Fet.forEach(t),_Lo=r(O6e," \u2014 "),Hj=n(O6e,"A",{href:!0});var Tet=s(Hj);bLo=r(Tet,"OpenAIGPTForSequenceClassification"),Tet.forEach(t),vLo=r(O6e," (OpenAI GPT model)"),O6e.forEach(t),FLo=i(N),Rb=n(N,"LI",{});var V6e=s(Rb);Lde=n(V6e,"STRONG",{});var Met=s(Lde);TLo=r(Met,"perceiver"),Met.forEach(t),MLo=r(V6e," \u2014 "),Uj=n(V6e,"A",{href:!0});var Eet=s(Uj);ELo=r(Eet,"PerceiverForSequenceClassification"),Eet.forEach(t),CLo=r(V6e," (Perceiver model)"),V6e.forEach(t),wLo=i(N),Bb=n(N,"LI",{});var X6e=s(Bb);xde=n(X6e,"STRONG",{});var Cet=s(xde);ALo=r(Cet,"plbart"),Cet.forEach(t),yLo=r(X6e," \u2014 "),Jj=n(X6e,"A",{href:!0});var wet=s(Jj);LLo=r(wet,"PLBartForSequenceClassification"),wet.forEach(t),xLo=r(X6e," (PLBart model)"),X6e.forEach(t),$Lo=i(N),Pb=n(N,"LI",{});var z6e=s(Pb);$de=n(z6e,"STRONG",{});var Aet=s($de);kLo=r(Aet,"qdqbert"),Aet.forEach(t),SLo=r(z6e," \u2014 "),Yj=n(z6e,"A",{href:!0});var yet=s(Yj);RLo=r(yet,"QDQBertForSequenceClassification"),yet.forEach(t),BLo=r(z6e," (QDQBert model)"),z6e.forEach(t),PLo=i(N),Ib=n(N,"LI",{});var Q6e=s(Ib);kde=n(Q6e,"STRONG",{});var Let=s(kde);ILo=r(Let,"reformer"),Let.forEach(t),qLo=r(Q6e," \u2014 "),Kj=n(Q6e,"A",{href:!0});var xet=s(Kj);NLo=r(xet,"ReformerForSequenceClassification"),xet.forEach(t),jLo=r(Q6e," (Reformer model)"),Q6e.forEach(t),DLo=i(N),qb=n(N,"LI",{});var W6e=s(qb);Sde=n(W6e,"STRONG",{});var $et=s(Sde);GLo=r($et,"rembert"),$et.forEach(t),OLo=r(W6e," \u2014 "),Zj=n(W6e,"A",{href:!0});var ket=s(Zj);VLo=r(ket,"RemBertForSequenceClassification"),ket.forEach(t),XLo=r(W6e," (RemBERT model)"),W6e.forEach(t),zLo=i(N),Nb=n(N,"LI",{});var H6e=s(Nb);Rde=n(H6e,"STRONG",{});var Set=s(Rde);QLo=r(Set,"roberta"),Set.forEach(t),WLo=r(H6e," \u2014 "),eD=n(H6e,"A",{href:!0});var Ret=s(eD);HLo=r(Ret,"RobertaForSequenceClassification"),Ret.forEach(t),ULo=r(H6e," (RoBERTa model)"),H6e.forEach(t),JLo=i(N),jb=n(N,"LI",{});var U6e=s(jb);Bde=n(U6e,"STRONG",{});var Bet=s(Bde);YLo=r(Bet,"roformer"),Bet.forEach(t),KLo=r(U6e," \u2014 "),oD=n(U6e,"A",{href:!0});var Pet=s(oD);ZLo=r(Pet,"RoFormerForSequenceClassification"),Pet.forEach(t),e8o=r(U6e," (RoFormer model)"),U6e.forEach(t),o8o=i(N),Db=n(N,"LI",{});var J6e=s(Db);Pde=n(J6e,"STRONG",{});var Iet=s(Pde);r8o=r(Iet,"squeezebert"),Iet.forEach(t),t8o=r(J6e," \u2014 "),rD=n(J6e,"A",{href:!0});var qet=s(rD);a8o=r(qet,"SqueezeBertForSequenceClassification"),qet.forEach(t),n8o=r(J6e," (SqueezeBERT model)"),J6e.forEach(t),s8o=i(N),Gb=n(N,"LI",{});var Y6e=s(Gb);Ide=n(Y6e,"STRONG",{});var Net=s(Ide);l8o=r(Net,"tapas"),Net.forEach(t),i8o=r(Y6e," \u2014 "),tD=n(Y6e,"A",{href:!0});var jet=s(tD);d8o=r(jet,"TapasForSequenceClassification"),jet.forEach(t),c8o=r(Y6e," (TAPAS model)"),Y6e.forEach(t),f8o=i(N),Ob=n(N,"LI",{});var K6e=s(Ob);qde=n(K6e,"STRONG",{});var Det=s(qde);m8o=r(Det,"tapex"),Det.forEach(t),g8o=r(K6e," \u2014 "),aD=n(K6e,"A",{href:!0});var Get=s(aD);h8o=r(Get,"BartForSequenceClassification"),Get.forEach(t),p8o=r(K6e," (TAPEX model)"),K6e.forEach(t),u8o=i(N),Vb=n(N,"LI",{});var Z6e=s(Vb);Nde=n(Z6e,"STRONG",{});var Oet=s(Nde);_8o=r(Oet,"transfo-xl"),Oet.forEach(t),b8o=r(Z6e," \u2014 "),nD=n(Z6e,"A",{href:!0});var Vet=s(nD);v8o=r(Vet,"TransfoXLForSequenceClassification"),Vet.forEach(t),F8o=r(Z6e," (Transformer-XL model)"),Z6e.forEach(t),T8o=i(N),Xb=n(N,"LI",{});var eye=s(Xb);jde=n(eye,"STRONG",{});var Xet=s(jde);M8o=r(Xet,"xlm"),Xet.forEach(t),E8o=r(eye," \u2014 "),sD=n(eye,"A",{href:!0});var zet=s(sD);C8o=r(zet,"XLMForSequenceClassification"),zet.forEach(t),w8o=r(eye," (XLM model)"),eye.forEach(t),A8o=i(N),zb=n(N,"LI",{});var oye=s(zb);Dde=n(oye,"STRONG",{});var Qet=s(Dde);y8o=r(Qet,"xlm-roberta"),Qet.forEach(t),L8o=r(oye," \u2014 "),lD=n(oye,"A",{href:!0});var Wet=s(lD);x8o=r(Wet,"XLMRobertaForSequenceClassification"),Wet.forEach(t),$8o=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),k8o=i(N),Qb=n(N,"LI",{});var rye=s(Qb);Gde=n(rye,"STRONG",{});var Het=s(Gde);S8o=r(Het,"xlm-roberta-xl"),Het.forEach(t),R8o=r(rye," \u2014 "),iD=n(rye,"A",{href:!0});var Uet=s(iD);B8o=r(Uet,"XLMRobertaXLForSequenceClassification"),Uet.forEach(t),P8o=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),I8o=i(N),Wb=n(N,"LI",{});var tye=s(Wb);Ode=n(tye,"STRONG",{});var Jet=s(Ode);q8o=r(Jet,"xlnet"),Jet.forEach(t),N8o=r(tye," \u2014 "),dD=n(tye,"A",{href:!0});var Yet=s(dD);j8o=r(Yet,"XLNetForSequenceClassification"),Yet.forEach(t),D8o=r(tye," (XLNet model)"),tye.forEach(t),G8o=i(N),Hb=n(N,"LI",{});var aye=s(Hb);Vde=n(aye,"STRONG",{});var Ket=s(Vde);O8o=r(Ket,"yoso"),Ket.forEach(t),V8o=r(aye," \u2014 "),cD=n(aye,"A",{href:!0});var Zet=s(cD);X8o=r(Zet,"YosoForSequenceClassification"),Zet.forEach(t),z8o=r(aye," (YOSO model)"),aye.forEach(t),N.forEach(t),Q8o=i(ea),Ub=n(ea,"P",{});var nye=s(Ub);W8o=r(nye,"The model is set in evaluation mode by default using "),Xde=n(nye,"CODE",{});var eot=s(Xde);H8o=r(eot,"model.eval()"),eot.forEach(t),U8o=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zde=n(nye,"CODE",{});var oot=s(zde);J8o=r(oot,"model.train()"),oot.forEach(t),nye.forEach(t),Y8o=i(ea),T(Jb.$$.fragment,ea),ea.forEach(t),js.forEach(t),hBe=i(f),Ri=n(f,"H2",{class:!0});var uIe=s(Ri);Yb=n(uIe,"A",{id:!0,class:!0,href:!0});var rot=s(Yb);Qde=n(rot,"SPAN",{});var tot=s(Qde);T(v6.$$.fragment,tot),tot.forEach(t),rot.forEach(t),K8o=i(uIe),Wde=n(uIe,"SPAN",{});var aot=s(Wde);Z8o=r(aot,"AutoModelForMultipleChoice"),aot.forEach(t),uIe.forEach(t),pBe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(F6.$$.fragment,Ds),exo=i(Ds),Bi=n(Ds,"P",{});var pY=s(Bi);oxo=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fD=n(pY,"A",{href:!0});var not=s(fD);rxo=r(not,"from_pretrained()"),not.forEach(t),txo=r(pY," class method or the "),mD=n(pY,"A",{href:!0});var sot=s(mD);axo=r(sot,"from_config()"),sot.forEach(t),nxo=r(pY,` class
method.`),pY.forEach(t),sxo=i(Ds),T6=n(Ds,"P",{});var _Ie=s(T6);lxo=r(_Ie,"This class cannot be instantiated directly using "),Hde=n(_Ie,"CODE",{});var lot=s(Hde);ixo=r(lot,"__init__()"),lot.forEach(t),dxo=r(_Ie," (throws an error)."),_Ie.forEach(t),cxo=i(Ds),at=n(Ds,"DIV",{class:!0});var B3=s(at);T(M6.$$.fragment,B3),fxo=i(B3),Ude=n(B3,"P",{});var iot=s(Ude);mxo=r(iot,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iot.forEach(t),gxo=i(B3),Pi=n(B3,"P",{});var uY=s(Pi);hxo=r(uY,`Note:
Loading a model from its configuration file does `),Jde=n(uY,"STRONG",{});var dot=s(Jde);pxo=r(dot,"not"),dot.forEach(t),uxo=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n(uY,"A",{href:!0});var cot=s(gD);_xo=r(cot,"from_pretrained()"),cot.forEach(t),bxo=r(uY," to load the model weights."),uY.forEach(t),vxo=i(B3),T(Kb.$$.fragment,B3),B3.forEach(t),Fxo=i(Ds),Ke=n(Ds,"DIV",{class:!0});var oa=s(Ke);T(E6.$$.fragment,oa),Txo=i(oa),Yde=n(oa,"P",{});var fot=s(Yde);Mxo=r(fot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fot.forEach(t),Exo=i(oa),La=n(oa,"P",{});var P3=s(La);Cxo=r(P3,"The model class to instantiate is selected based on the "),Kde=n(P3,"CODE",{});var mot=s(Kde);wxo=r(mot,"model_type"),mot.forEach(t),Axo=r(P3,` property of the config object (either
passed as an argument or loaded from `),Zde=n(P3,"CODE",{});var got=s(Zde);yxo=r(got,"pretrained_model_name_or_path"),got.forEach(t),Lxo=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(P3,"CODE",{});var hot=s(ece);xxo=r(hot,"pretrained_model_name_or_path"),hot.forEach(t),$xo=r(P3,":"),P3.forEach(t),kxo=i(oa),Y=n(oa,"UL",{});var K=s(Y);Zb=n(K,"LI",{});var sye=s(Zb);oce=n(sye,"STRONG",{});var pot=s(oce);Sxo=r(pot,"albert"),pot.forEach(t),Rxo=r(sye," \u2014 "),hD=n(sye,"A",{href:!0});var uot=s(hD);Bxo=r(uot,"AlbertForMultipleChoice"),uot.forEach(t),Pxo=r(sye," (ALBERT model)"),sye.forEach(t),Ixo=i(K),e4=n(K,"LI",{});var lye=s(e4);rce=n(lye,"STRONG",{});var _ot=s(rce);qxo=r(_ot,"bert"),_ot.forEach(t),Nxo=r(lye," \u2014 "),pD=n(lye,"A",{href:!0});var bot=s(pD);jxo=r(bot,"BertForMultipleChoice"),bot.forEach(t),Dxo=r(lye," (BERT model)"),lye.forEach(t),Gxo=i(K),o4=n(K,"LI",{});var iye=s(o4);tce=n(iye,"STRONG",{});var vot=s(tce);Oxo=r(vot,"big_bird"),vot.forEach(t),Vxo=r(iye," \u2014 "),uD=n(iye,"A",{href:!0});var Fot=s(uD);Xxo=r(Fot,"BigBirdForMultipleChoice"),Fot.forEach(t),zxo=r(iye," (BigBird model)"),iye.forEach(t),Qxo=i(K),r4=n(K,"LI",{});var dye=s(r4);ace=n(dye,"STRONG",{});var Tot=s(ace);Wxo=r(Tot,"camembert"),Tot.forEach(t),Hxo=r(dye," \u2014 "),_D=n(dye,"A",{href:!0});var Mot=s(_D);Uxo=r(Mot,"CamembertForMultipleChoice"),Mot.forEach(t),Jxo=r(dye," (CamemBERT model)"),dye.forEach(t),Yxo=i(K),t4=n(K,"LI",{});var cye=s(t4);nce=n(cye,"STRONG",{});var Eot=s(nce);Kxo=r(Eot,"canine"),Eot.forEach(t),Zxo=r(cye," \u2014 "),bD=n(cye,"A",{href:!0});var Cot=s(bD);e9o=r(Cot,"CanineForMultipleChoice"),Cot.forEach(t),o9o=r(cye," (Canine model)"),cye.forEach(t),r9o=i(K),a4=n(K,"LI",{});var fye=s(a4);sce=n(fye,"STRONG",{});var wot=s(sce);t9o=r(wot,"convbert"),wot.forEach(t),a9o=r(fye," \u2014 "),vD=n(fye,"A",{href:!0});var Aot=s(vD);n9o=r(Aot,"ConvBertForMultipleChoice"),Aot.forEach(t),s9o=r(fye," (ConvBERT model)"),fye.forEach(t),l9o=i(K),n4=n(K,"LI",{});var mye=s(n4);lce=n(mye,"STRONG",{});var yot=s(lce);i9o=r(yot,"data2vec-text"),yot.forEach(t),d9o=r(mye," \u2014 "),FD=n(mye,"A",{href:!0});var Lot=s(FD);c9o=r(Lot,"Data2VecTextForMultipleChoice"),Lot.forEach(t),f9o=r(mye," (Data2VecText model)"),mye.forEach(t),m9o=i(K),s4=n(K,"LI",{});var gye=s(s4);ice=n(gye,"STRONG",{});var xot=s(ice);g9o=r(xot,"distilbert"),xot.forEach(t),h9o=r(gye," \u2014 "),TD=n(gye,"A",{href:!0});var $ot=s(TD);p9o=r($ot,"DistilBertForMultipleChoice"),$ot.forEach(t),u9o=r(gye," (DistilBERT model)"),gye.forEach(t),_9o=i(K),l4=n(K,"LI",{});var hye=s(l4);dce=n(hye,"STRONG",{});var kot=s(dce);b9o=r(kot,"electra"),kot.forEach(t),v9o=r(hye," \u2014 "),MD=n(hye,"A",{href:!0});var Sot=s(MD);F9o=r(Sot,"ElectraForMultipleChoice"),Sot.forEach(t),T9o=r(hye," (ELECTRA model)"),hye.forEach(t),M9o=i(K),i4=n(K,"LI",{});var pye=s(i4);cce=n(pye,"STRONG",{});var Rot=s(cce);E9o=r(Rot,"flaubert"),Rot.forEach(t),C9o=r(pye," \u2014 "),ED=n(pye,"A",{href:!0});var Bot=s(ED);w9o=r(Bot,"FlaubertForMultipleChoice"),Bot.forEach(t),A9o=r(pye," (FlauBERT model)"),pye.forEach(t),y9o=i(K),d4=n(K,"LI",{});var uye=s(d4);fce=n(uye,"STRONG",{});var Pot=s(fce);L9o=r(Pot,"fnet"),Pot.forEach(t),x9o=r(uye," \u2014 "),CD=n(uye,"A",{href:!0});var Iot=s(CD);$9o=r(Iot,"FNetForMultipleChoice"),Iot.forEach(t),k9o=r(uye," (FNet model)"),uye.forEach(t),S9o=i(K),c4=n(K,"LI",{});var _ye=s(c4);mce=n(_ye,"STRONG",{});var qot=s(mce);R9o=r(qot,"funnel"),qot.forEach(t),B9o=r(_ye," \u2014 "),wD=n(_ye,"A",{href:!0});var Not=s(wD);P9o=r(Not,"FunnelForMultipleChoice"),Not.forEach(t),I9o=r(_ye," (Funnel Transformer model)"),_ye.forEach(t),q9o=i(K),f4=n(K,"LI",{});var bye=s(f4);gce=n(bye,"STRONG",{});var jot=s(gce);N9o=r(jot,"ibert"),jot.forEach(t),j9o=r(bye," \u2014 "),AD=n(bye,"A",{href:!0});var Dot=s(AD);D9o=r(Dot,"IBertForMultipleChoice"),Dot.forEach(t),G9o=r(bye," (I-BERT model)"),bye.forEach(t),O9o=i(K),m4=n(K,"LI",{});var vye=s(m4);hce=n(vye,"STRONG",{});var Got=s(hce);V9o=r(Got,"longformer"),Got.forEach(t),X9o=r(vye," \u2014 "),yD=n(vye,"A",{href:!0});var Oot=s(yD);z9o=r(Oot,"LongformerForMultipleChoice"),Oot.forEach(t),Q9o=r(vye," (Longformer model)"),vye.forEach(t),W9o=i(K),g4=n(K,"LI",{});var Fye=s(g4);pce=n(Fye,"STRONG",{});var Vot=s(pce);H9o=r(Vot,"megatron-bert"),Vot.forEach(t),U9o=r(Fye," \u2014 "),LD=n(Fye,"A",{href:!0});var Xot=s(LD);J9o=r(Xot,"MegatronBertForMultipleChoice"),Xot.forEach(t),Y9o=r(Fye," (MegatronBert model)"),Fye.forEach(t),K9o=i(K),h4=n(K,"LI",{});var Tye=s(h4);uce=n(Tye,"STRONG",{});var zot=s(uce);Z9o=r(zot,"mobilebert"),zot.forEach(t),e$o=r(Tye," \u2014 "),xD=n(Tye,"A",{href:!0});var Qot=s(xD);o$o=r(Qot,"MobileBertForMultipleChoice"),Qot.forEach(t),r$o=r(Tye," (MobileBERT model)"),Tye.forEach(t),t$o=i(K),p4=n(K,"LI",{});var Mye=s(p4);_ce=n(Mye,"STRONG",{});var Wot=s(_ce);a$o=r(Wot,"mpnet"),Wot.forEach(t),n$o=r(Mye," \u2014 "),$D=n(Mye,"A",{href:!0});var Hot=s($D);s$o=r(Hot,"MPNetForMultipleChoice"),Hot.forEach(t),l$o=r(Mye," (MPNet model)"),Mye.forEach(t),i$o=i(K),u4=n(K,"LI",{});var Eye=s(u4);bce=n(Eye,"STRONG",{});var Uot=s(bce);d$o=r(Uot,"nystromformer"),Uot.forEach(t),c$o=r(Eye," \u2014 "),kD=n(Eye,"A",{href:!0});var Jot=s(kD);f$o=r(Jot,"NystromformerForMultipleChoice"),Jot.forEach(t),m$o=r(Eye," (Nystromformer model)"),Eye.forEach(t),g$o=i(K),_4=n(K,"LI",{});var Cye=s(_4);vce=n(Cye,"STRONG",{});var Yot=s(vce);h$o=r(Yot,"qdqbert"),Yot.forEach(t),p$o=r(Cye," \u2014 "),SD=n(Cye,"A",{href:!0});var Kot=s(SD);u$o=r(Kot,"QDQBertForMultipleChoice"),Kot.forEach(t),_$o=r(Cye," (QDQBert model)"),Cye.forEach(t),b$o=i(K),b4=n(K,"LI",{});var wye=s(b4);Fce=n(wye,"STRONG",{});var Zot=s(Fce);v$o=r(Zot,"rembert"),Zot.forEach(t),F$o=r(wye," \u2014 "),RD=n(wye,"A",{href:!0});var ert=s(RD);T$o=r(ert,"RemBertForMultipleChoice"),ert.forEach(t),M$o=r(wye," (RemBERT model)"),wye.forEach(t),E$o=i(K),v4=n(K,"LI",{});var Aye=s(v4);Tce=n(Aye,"STRONG",{});var ort=s(Tce);C$o=r(ort,"roberta"),ort.forEach(t),w$o=r(Aye," \u2014 "),BD=n(Aye,"A",{href:!0});var rrt=s(BD);A$o=r(rrt,"RobertaForMultipleChoice"),rrt.forEach(t),y$o=r(Aye," (RoBERTa model)"),Aye.forEach(t),L$o=i(K),F4=n(K,"LI",{});var yye=s(F4);Mce=n(yye,"STRONG",{});var trt=s(Mce);x$o=r(trt,"roformer"),trt.forEach(t),$$o=r(yye," \u2014 "),PD=n(yye,"A",{href:!0});var art=s(PD);k$o=r(art,"RoFormerForMultipleChoice"),art.forEach(t),S$o=r(yye," (RoFormer model)"),yye.forEach(t),R$o=i(K),T4=n(K,"LI",{});var Lye=s(T4);Ece=n(Lye,"STRONG",{});var nrt=s(Ece);B$o=r(nrt,"squeezebert"),nrt.forEach(t),P$o=r(Lye," \u2014 "),ID=n(Lye,"A",{href:!0});var srt=s(ID);I$o=r(srt,"SqueezeBertForMultipleChoice"),srt.forEach(t),q$o=r(Lye," (SqueezeBERT model)"),Lye.forEach(t),N$o=i(K),M4=n(K,"LI",{});var xye=s(M4);Cce=n(xye,"STRONG",{});var lrt=s(Cce);j$o=r(lrt,"xlm"),lrt.forEach(t),D$o=r(xye," \u2014 "),qD=n(xye,"A",{href:!0});var irt=s(qD);G$o=r(irt,"XLMForMultipleChoice"),irt.forEach(t),O$o=r(xye," (XLM model)"),xye.forEach(t),V$o=i(K),E4=n(K,"LI",{});var $ye=s(E4);wce=n($ye,"STRONG",{});var drt=s(wce);X$o=r(drt,"xlm-roberta"),drt.forEach(t),z$o=r($ye," \u2014 "),ND=n($ye,"A",{href:!0});var crt=s(ND);Q$o=r(crt,"XLMRobertaForMultipleChoice"),crt.forEach(t),W$o=r($ye," (XLM-RoBERTa model)"),$ye.forEach(t),H$o=i(K),C4=n(K,"LI",{});var kye=s(C4);Ace=n(kye,"STRONG",{});var frt=s(Ace);U$o=r(frt,"xlm-roberta-xl"),frt.forEach(t),J$o=r(kye," \u2014 "),jD=n(kye,"A",{href:!0});var mrt=s(jD);Y$o=r(mrt,"XLMRobertaXLForMultipleChoice"),mrt.forEach(t),K$o=r(kye," (XLM-RoBERTa-XL model)"),kye.forEach(t),Z$o=i(K),w4=n(K,"LI",{});var Sye=s(w4);yce=n(Sye,"STRONG",{});var grt=s(yce);eko=r(grt,"xlnet"),grt.forEach(t),oko=r(Sye," \u2014 "),DD=n(Sye,"A",{href:!0});var hrt=s(DD);rko=r(hrt,"XLNetForMultipleChoice"),hrt.forEach(t),tko=r(Sye," (XLNet model)"),Sye.forEach(t),ako=i(K),A4=n(K,"LI",{});var Rye=s(A4);Lce=n(Rye,"STRONG",{});var prt=s(Lce);nko=r(prt,"yoso"),prt.forEach(t),sko=r(Rye," \u2014 "),GD=n(Rye,"A",{href:!0});var urt=s(GD);lko=r(urt,"YosoForMultipleChoice"),urt.forEach(t),iko=r(Rye," (YOSO model)"),Rye.forEach(t),K.forEach(t),dko=i(oa),y4=n(oa,"P",{});var Bye=s(y4);cko=r(Bye,"The model is set in evaluation mode by default using "),xce=n(Bye,"CODE",{});var _rt=s(xce);fko=r(_rt,"model.eval()"),_rt.forEach(t),mko=r(Bye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(Bye,"CODE",{});var brt=s($ce);gko=r(brt,"model.train()"),brt.forEach(t),Bye.forEach(t),hko=i(oa),T(L4.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),uBe=i(f),Ii=n(f,"H2",{class:!0});var bIe=s(Ii);x4=n(bIe,"A",{id:!0,class:!0,href:!0});var vrt=s(x4);kce=n(vrt,"SPAN",{});var Frt=s(kce);T(C6.$$.fragment,Frt),Frt.forEach(t),vrt.forEach(t),pko=i(bIe),Sce=n(bIe,"SPAN",{});var Trt=s(Sce);uko=r(Trt,"AutoModelForNextSentencePrediction"),Trt.forEach(t),bIe.forEach(t),_Be=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(w6.$$.fragment,Gs),_ko=i(Gs),qi=n(Gs,"P",{});var _Y=s(qi);bko=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OD=n(_Y,"A",{href:!0});var Mrt=s(OD);vko=r(Mrt,"from_pretrained()"),Mrt.forEach(t),Fko=r(_Y," class method or the "),VD=n(_Y,"A",{href:!0});var Ert=s(VD);Tko=r(Ert,"from_config()"),Ert.forEach(t),Mko=r(_Y,` class
method.`),_Y.forEach(t),Eko=i(Gs),A6=n(Gs,"P",{});var vIe=s(A6);Cko=r(vIe,"This class cannot be instantiated directly using "),Rce=n(vIe,"CODE",{});var Crt=s(Rce);wko=r(Crt,"__init__()"),Crt.forEach(t),Ako=r(vIe," (throws an error)."),vIe.forEach(t),yko=i(Gs),nt=n(Gs,"DIV",{class:!0});var I3=s(nt);T(y6.$$.fragment,I3),Lko=i(I3),Bce=n(I3,"P",{});var wrt=s(Bce);xko=r(wrt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wrt.forEach(t),$ko=i(I3),Ni=n(I3,"P",{});var bY=s(Ni);kko=r(bY,`Note:
Loading a model from its configuration file does `),Pce=n(bY,"STRONG",{});var Art=s(Pce);Sko=r(Art,"not"),Art.forEach(t),Rko=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(bY,"A",{href:!0});var yrt=s(XD);Bko=r(yrt,"from_pretrained()"),yrt.forEach(t),Pko=r(bY," to load the model weights."),bY.forEach(t),Iko=i(I3),T($4.$$.fragment,I3),I3.forEach(t),qko=i(Gs),Ze=n(Gs,"DIV",{class:!0});var ra=s(Ze);T(L6.$$.fragment,ra),Nko=i(ra),Ice=n(ra,"P",{});var Lrt=s(Ice);jko=r(Lrt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Lrt.forEach(t),Dko=i(ra),xa=n(ra,"P",{});var q3=s(xa);Gko=r(q3,"The model class to instantiate is selected based on the "),qce=n(q3,"CODE",{});var xrt=s(qce);Oko=r(xrt,"model_type"),xrt.forEach(t),Vko=r(q3,` property of the config object (either
passed as an argument or loaded from `),Nce=n(q3,"CODE",{});var $rt=s(Nce);Xko=r($rt,"pretrained_model_name_or_path"),$rt.forEach(t),zko=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(q3,"CODE",{});var krt=s(jce);Qko=r(krt,"pretrained_model_name_or_path"),krt.forEach(t),Wko=r(q3,":"),q3.forEach(t),Hko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);k4=n(Os,"LI",{});var Pye=s(k4);Dce=n(Pye,"STRONG",{});var Srt=s(Dce);Uko=r(Srt,"bert"),Srt.forEach(t),Jko=r(Pye," \u2014 "),zD=n(Pye,"A",{href:!0});var Rrt=s(zD);Yko=r(Rrt,"BertForNextSentencePrediction"),Rrt.forEach(t),Kko=r(Pye," (BERT model)"),Pye.forEach(t),Zko=i(Os),S4=n(Os,"LI",{});var Iye=s(S4);Gce=n(Iye,"STRONG",{});var Brt=s(Gce);eSo=r(Brt,"fnet"),Brt.forEach(t),oSo=r(Iye," \u2014 "),QD=n(Iye,"A",{href:!0});var Prt=s(QD);rSo=r(Prt,"FNetForNextSentencePrediction"),Prt.forEach(t),tSo=r(Iye," (FNet model)"),Iye.forEach(t),aSo=i(Os),R4=n(Os,"LI",{});var qye=s(R4);Oce=n(qye,"STRONG",{});var Irt=s(Oce);nSo=r(Irt,"megatron-bert"),Irt.forEach(t),sSo=r(qye," \u2014 "),WD=n(qye,"A",{href:!0});var qrt=s(WD);lSo=r(qrt,"MegatronBertForNextSentencePrediction"),qrt.forEach(t),iSo=r(qye," (MegatronBert model)"),qye.forEach(t),dSo=i(Os),B4=n(Os,"LI",{});var Nye=s(B4);Vce=n(Nye,"STRONG",{});var Nrt=s(Vce);cSo=r(Nrt,"mobilebert"),Nrt.forEach(t),fSo=r(Nye," \u2014 "),HD=n(Nye,"A",{href:!0});var jrt=s(HD);mSo=r(jrt,"MobileBertForNextSentencePrediction"),jrt.forEach(t),gSo=r(Nye," (MobileBERT model)"),Nye.forEach(t),hSo=i(Os),P4=n(Os,"LI",{});var jye=s(P4);Xce=n(jye,"STRONG",{});var Drt=s(Xce);pSo=r(Drt,"qdqbert"),Drt.forEach(t),uSo=r(jye," \u2014 "),UD=n(jye,"A",{href:!0});var Grt=s(UD);_So=r(Grt,"QDQBertForNextSentencePrediction"),Grt.forEach(t),bSo=r(jye," (QDQBert model)"),jye.forEach(t),Os.forEach(t),vSo=i(ra),I4=n(ra,"P",{});var Dye=s(I4);FSo=r(Dye,"The model is set in evaluation mode by default using "),zce=n(Dye,"CODE",{});var Ort=s(zce);TSo=r(Ort,"model.eval()"),Ort.forEach(t),MSo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qce=n(Dye,"CODE",{});var Vrt=s(Qce);ESo=r(Vrt,"model.train()"),Vrt.forEach(t),Dye.forEach(t),CSo=i(ra),T(q4.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),bBe=i(f),ji=n(f,"H2",{class:!0});var FIe=s(ji);N4=n(FIe,"A",{id:!0,class:!0,href:!0});var Xrt=s(N4);Wce=n(Xrt,"SPAN",{});var zrt=s(Wce);T(x6.$$.fragment,zrt),zrt.forEach(t),Xrt.forEach(t),wSo=i(FIe),Hce=n(FIe,"SPAN",{});var Qrt=s(Hce);ASo=r(Qrt,"AutoModelForTokenClassification"),Qrt.forEach(t),FIe.forEach(t),vBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T($6.$$.fragment,Vs),ySo=i(Vs),Di=n(Vs,"P",{});var vY=s(Di);LSo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JD=n(vY,"A",{href:!0});var Wrt=s(JD);xSo=r(Wrt,"from_pretrained()"),Wrt.forEach(t),$So=r(vY," class method or the "),YD=n(vY,"A",{href:!0});var Hrt=s(YD);kSo=r(Hrt,"from_config()"),Hrt.forEach(t),SSo=r(vY,` class
method.`),vY.forEach(t),RSo=i(Vs),k6=n(Vs,"P",{});var TIe=s(k6);BSo=r(TIe,"This class cannot be instantiated directly using "),Uce=n(TIe,"CODE",{});var Urt=s(Uce);PSo=r(Urt,"__init__()"),Urt.forEach(t),ISo=r(TIe," (throws an error)."),TIe.forEach(t),qSo=i(Vs),st=n(Vs,"DIV",{class:!0});var N3=s(st);T(S6.$$.fragment,N3),NSo=i(N3),Jce=n(N3,"P",{});var Jrt=s(Jce);jSo=r(Jrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jrt.forEach(t),DSo=i(N3),Gi=n(N3,"P",{});var FY=s(Gi);GSo=r(FY,`Note:
Loading a model from its configuration file does `),Yce=n(FY,"STRONG",{});var Yrt=s(Yce);OSo=r(Yrt,"not"),Yrt.forEach(t),VSo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KD=n(FY,"A",{href:!0});var Krt=s(KD);XSo=r(Krt,"from_pretrained()"),Krt.forEach(t),zSo=r(FY," to load the model weights."),FY.forEach(t),QSo=i(N3),T(j4.$$.fragment,N3),N3.forEach(t),WSo=i(Vs),eo=n(Vs,"DIV",{class:!0});var ta=s(eo);T(R6.$$.fragment,ta),HSo=i(ta),Kce=n(ta,"P",{});var Zrt=s(Kce);USo=r(Zrt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Zrt.forEach(t),JSo=i(ta),$a=n(ta,"P",{});var j3=s($a);YSo=r(j3,"The model class to instantiate is selected based on the "),Zce=n(j3,"CODE",{});var ett=s(Zce);KSo=r(ett,"model_type"),ett.forEach(t),ZSo=r(j3,` property of the config object (either
passed as an argument or loaded from `),efe=n(j3,"CODE",{});var ott=s(efe);eRo=r(ott,"pretrained_model_name_or_path"),ott.forEach(t),oRo=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ofe=n(j3,"CODE",{});var rtt=s(ofe);rRo=r(rtt,"pretrained_model_name_or_path"),rtt.forEach(t),tRo=r(j3,":"),j3.forEach(t),aRo=i(ta),U=n(ta,"UL",{});var J=s(U);D4=n(J,"LI",{});var Gye=s(D4);rfe=n(Gye,"STRONG",{});var ttt=s(rfe);nRo=r(ttt,"albert"),ttt.forEach(t),sRo=r(Gye," \u2014 "),ZD=n(Gye,"A",{href:!0});var att=s(ZD);lRo=r(att,"AlbertForTokenClassification"),att.forEach(t),iRo=r(Gye," (ALBERT model)"),Gye.forEach(t),dRo=i(J),G4=n(J,"LI",{});var Oye=s(G4);tfe=n(Oye,"STRONG",{});var ntt=s(tfe);cRo=r(ntt,"bert"),ntt.forEach(t),fRo=r(Oye," \u2014 "),eG=n(Oye,"A",{href:!0});var stt=s(eG);mRo=r(stt,"BertForTokenClassification"),stt.forEach(t),gRo=r(Oye," (BERT model)"),Oye.forEach(t),hRo=i(J),O4=n(J,"LI",{});var Vye=s(O4);afe=n(Vye,"STRONG",{});var ltt=s(afe);pRo=r(ltt,"big_bird"),ltt.forEach(t),uRo=r(Vye," \u2014 "),oG=n(Vye,"A",{href:!0});var itt=s(oG);_Ro=r(itt,"BigBirdForTokenClassification"),itt.forEach(t),bRo=r(Vye," (BigBird model)"),Vye.forEach(t),vRo=i(J),V4=n(J,"LI",{});var Xye=s(V4);nfe=n(Xye,"STRONG",{});var dtt=s(nfe);FRo=r(dtt,"camembert"),dtt.forEach(t),TRo=r(Xye," \u2014 "),rG=n(Xye,"A",{href:!0});var ctt=s(rG);MRo=r(ctt,"CamembertForTokenClassification"),ctt.forEach(t),ERo=r(Xye," (CamemBERT model)"),Xye.forEach(t),CRo=i(J),X4=n(J,"LI",{});var zye=s(X4);sfe=n(zye,"STRONG",{});var ftt=s(sfe);wRo=r(ftt,"canine"),ftt.forEach(t),ARo=r(zye," \u2014 "),tG=n(zye,"A",{href:!0});var mtt=s(tG);yRo=r(mtt,"CanineForTokenClassification"),mtt.forEach(t),LRo=r(zye," (Canine model)"),zye.forEach(t),xRo=i(J),z4=n(J,"LI",{});var Qye=s(z4);lfe=n(Qye,"STRONG",{});var gtt=s(lfe);$Ro=r(gtt,"convbert"),gtt.forEach(t),kRo=r(Qye," \u2014 "),aG=n(Qye,"A",{href:!0});var htt=s(aG);SRo=r(htt,"ConvBertForTokenClassification"),htt.forEach(t),RRo=r(Qye," (ConvBERT model)"),Qye.forEach(t),BRo=i(J),Q4=n(J,"LI",{});var Wye=s(Q4);ife=n(Wye,"STRONG",{});var ptt=s(ife);PRo=r(ptt,"data2vec-text"),ptt.forEach(t),IRo=r(Wye," \u2014 "),nG=n(Wye,"A",{href:!0});var utt=s(nG);qRo=r(utt,"Data2VecTextForTokenClassification"),utt.forEach(t),NRo=r(Wye," (Data2VecText model)"),Wye.forEach(t),jRo=i(J),W4=n(J,"LI",{});var Hye=s(W4);dfe=n(Hye,"STRONG",{});var _tt=s(dfe);DRo=r(_tt,"deberta"),_tt.forEach(t),GRo=r(Hye," \u2014 "),sG=n(Hye,"A",{href:!0});var btt=s(sG);ORo=r(btt,"DebertaForTokenClassification"),btt.forEach(t),VRo=r(Hye," (DeBERTa model)"),Hye.forEach(t),XRo=i(J),H4=n(J,"LI",{});var Uye=s(H4);cfe=n(Uye,"STRONG",{});var vtt=s(cfe);zRo=r(vtt,"deberta-v2"),vtt.forEach(t),QRo=r(Uye," \u2014 "),lG=n(Uye,"A",{href:!0});var Ftt=s(lG);WRo=r(Ftt,"DebertaV2ForTokenClassification"),Ftt.forEach(t),HRo=r(Uye," (DeBERTa-v2 model)"),Uye.forEach(t),URo=i(J),U4=n(J,"LI",{});var Jye=s(U4);ffe=n(Jye,"STRONG",{});var Ttt=s(ffe);JRo=r(Ttt,"distilbert"),Ttt.forEach(t),YRo=r(Jye," \u2014 "),iG=n(Jye,"A",{href:!0});var Mtt=s(iG);KRo=r(Mtt,"DistilBertForTokenClassification"),Mtt.forEach(t),ZRo=r(Jye," (DistilBERT model)"),Jye.forEach(t),eBo=i(J),J4=n(J,"LI",{});var Yye=s(J4);mfe=n(Yye,"STRONG",{});var Ett=s(mfe);oBo=r(Ett,"electra"),Ett.forEach(t),rBo=r(Yye," \u2014 "),dG=n(Yye,"A",{href:!0});var Ctt=s(dG);tBo=r(Ctt,"ElectraForTokenClassification"),Ctt.forEach(t),aBo=r(Yye," (ELECTRA model)"),Yye.forEach(t),nBo=i(J),Y4=n(J,"LI",{});var Kye=s(Y4);gfe=n(Kye,"STRONG",{});var wtt=s(gfe);sBo=r(wtt,"flaubert"),wtt.forEach(t),lBo=r(Kye," \u2014 "),cG=n(Kye,"A",{href:!0});var Att=s(cG);iBo=r(Att,"FlaubertForTokenClassification"),Att.forEach(t),dBo=r(Kye," (FlauBERT model)"),Kye.forEach(t),cBo=i(J),K4=n(J,"LI",{});var Zye=s(K4);hfe=n(Zye,"STRONG",{});var ytt=s(hfe);fBo=r(ytt,"fnet"),ytt.forEach(t),mBo=r(Zye," \u2014 "),fG=n(Zye,"A",{href:!0});var Ltt=s(fG);gBo=r(Ltt,"FNetForTokenClassification"),Ltt.forEach(t),hBo=r(Zye," (FNet model)"),Zye.forEach(t),pBo=i(J),Z4=n(J,"LI",{});var eLe=s(Z4);pfe=n(eLe,"STRONG",{});var xtt=s(pfe);uBo=r(xtt,"funnel"),xtt.forEach(t),_Bo=r(eLe," \u2014 "),mG=n(eLe,"A",{href:!0});var $tt=s(mG);bBo=r($tt,"FunnelForTokenClassification"),$tt.forEach(t),vBo=r(eLe," (Funnel Transformer model)"),eLe.forEach(t),FBo=i(J),e2=n(J,"LI",{});var oLe=s(e2);ufe=n(oLe,"STRONG",{});var ktt=s(ufe);TBo=r(ktt,"gpt2"),ktt.forEach(t),MBo=r(oLe," \u2014 "),gG=n(oLe,"A",{href:!0});var Stt=s(gG);EBo=r(Stt,"GPT2ForTokenClassification"),Stt.forEach(t),CBo=r(oLe," (OpenAI GPT-2 model)"),oLe.forEach(t),wBo=i(J),o2=n(J,"LI",{});var rLe=s(o2);_fe=n(rLe,"STRONG",{});var Rtt=s(_fe);ABo=r(Rtt,"ibert"),Rtt.forEach(t),yBo=r(rLe," \u2014 "),hG=n(rLe,"A",{href:!0});var Btt=s(hG);LBo=r(Btt,"IBertForTokenClassification"),Btt.forEach(t),xBo=r(rLe," (I-BERT model)"),rLe.forEach(t),$Bo=i(J),r2=n(J,"LI",{});var tLe=s(r2);bfe=n(tLe,"STRONG",{});var Ptt=s(bfe);kBo=r(Ptt,"layoutlm"),Ptt.forEach(t),SBo=r(tLe," \u2014 "),pG=n(tLe,"A",{href:!0});var Itt=s(pG);RBo=r(Itt,"LayoutLMForTokenClassification"),Itt.forEach(t),BBo=r(tLe," (LayoutLM model)"),tLe.forEach(t),PBo=i(J),t2=n(J,"LI",{});var aLe=s(t2);vfe=n(aLe,"STRONG",{});var qtt=s(vfe);IBo=r(qtt,"layoutlmv2"),qtt.forEach(t),qBo=r(aLe," \u2014 "),uG=n(aLe,"A",{href:!0});var Ntt=s(uG);NBo=r(Ntt,"LayoutLMv2ForTokenClassification"),Ntt.forEach(t),jBo=r(aLe," (LayoutLMv2 model)"),aLe.forEach(t),DBo=i(J),a2=n(J,"LI",{});var nLe=s(a2);Ffe=n(nLe,"STRONG",{});var jtt=s(Ffe);GBo=r(jtt,"longformer"),jtt.forEach(t),OBo=r(nLe," \u2014 "),_G=n(nLe,"A",{href:!0});var Dtt=s(_G);VBo=r(Dtt,"LongformerForTokenClassification"),Dtt.forEach(t),XBo=r(nLe," (Longformer model)"),nLe.forEach(t),zBo=i(J),n2=n(J,"LI",{});var sLe=s(n2);Tfe=n(sLe,"STRONG",{});var Gtt=s(Tfe);QBo=r(Gtt,"megatron-bert"),Gtt.forEach(t),WBo=r(sLe," \u2014 "),bG=n(sLe,"A",{href:!0});var Ott=s(bG);HBo=r(Ott,"MegatronBertForTokenClassification"),Ott.forEach(t),UBo=r(sLe," (MegatronBert model)"),sLe.forEach(t),JBo=i(J),s2=n(J,"LI",{});var lLe=s(s2);Mfe=n(lLe,"STRONG",{});var Vtt=s(Mfe);YBo=r(Vtt,"mobilebert"),Vtt.forEach(t),KBo=r(lLe," \u2014 "),vG=n(lLe,"A",{href:!0});var Xtt=s(vG);ZBo=r(Xtt,"MobileBertForTokenClassification"),Xtt.forEach(t),ePo=r(lLe," (MobileBERT model)"),lLe.forEach(t),oPo=i(J),l2=n(J,"LI",{});var iLe=s(l2);Efe=n(iLe,"STRONG",{});var ztt=s(Efe);rPo=r(ztt,"mpnet"),ztt.forEach(t),tPo=r(iLe," \u2014 "),FG=n(iLe,"A",{href:!0});var Qtt=s(FG);aPo=r(Qtt,"MPNetForTokenClassification"),Qtt.forEach(t),nPo=r(iLe," (MPNet model)"),iLe.forEach(t),sPo=i(J),i2=n(J,"LI",{});var dLe=s(i2);Cfe=n(dLe,"STRONG",{});var Wtt=s(Cfe);lPo=r(Wtt,"nystromformer"),Wtt.forEach(t),iPo=r(dLe," \u2014 "),TG=n(dLe,"A",{href:!0});var Htt=s(TG);dPo=r(Htt,"NystromformerForTokenClassification"),Htt.forEach(t),cPo=r(dLe," (Nystromformer model)"),dLe.forEach(t),fPo=i(J),d2=n(J,"LI",{});var cLe=s(d2);wfe=n(cLe,"STRONG",{});var Utt=s(wfe);mPo=r(Utt,"qdqbert"),Utt.forEach(t),gPo=r(cLe," \u2014 "),MG=n(cLe,"A",{href:!0});var Jtt=s(MG);hPo=r(Jtt,"QDQBertForTokenClassification"),Jtt.forEach(t),pPo=r(cLe," (QDQBert model)"),cLe.forEach(t),uPo=i(J),c2=n(J,"LI",{});var fLe=s(c2);Afe=n(fLe,"STRONG",{});var Ytt=s(Afe);_Po=r(Ytt,"rembert"),Ytt.forEach(t),bPo=r(fLe," \u2014 "),EG=n(fLe,"A",{href:!0});var Ktt=s(EG);vPo=r(Ktt,"RemBertForTokenClassification"),Ktt.forEach(t),FPo=r(fLe," (RemBERT model)"),fLe.forEach(t),TPo=i(J),f2=n(J,"LI",{});var mLe=s(f2);yfe=n(mLe,"STRONG",{});var Ztt=s(yfe);MPo=r(Ztt,"roberta"),Ztt.forEach(t),EPo=r(mLe," \u2014 "),CG=n(mLe,"A",{href:!0});var eat=s(CG);CPo=r(eat,"RobertaForTokenClassification"),eat.forEach(t),wPo=r(mLe," (RoBERTa model)"),mLe.forEach(t),APo=i(J),m2=n(J,"LI",{});var gLe=s(m2);Lfe=n(gLe,"STRONG",{});var oat=s(Lfe);yPo=r(oat,"roformer"),oat.forEach(t),LPo=r(gLe," \u2014 "),wG=n(gLe,"A",{href:!0});var rat=s(wG);xPo=r(rat,"RoFormerForTokenClassification"),rat.forEach(t),$Po=r(gLe," (RoFormer model)"),gLe.forEach(t),kPo=i(J),g2=n(J,"LI",{});var hLe=s(g2);xfe=n(hLe,"STRONG",{});var tat=s(xfe);SPo=r(tat,"squeezebert"),tat.forEach(t),RPo=r(hLe," \u2014 "),AG=n(hLe,"A",{href:!0});var aat=s(AG);BPo=r(aat,"SqueezeBertForTokenClassification"),aat.forEach(t),PPo=r(hLe," (SqueezeBERT model)"),hLe.forEach(t),IPo=i(J),h2=n(J,"LI",{});var pLe=s(h2);$fe=n(pLe,"STRONG",{});var nat=s($fe);qPo=r(nat,"xlm"),nat.forEach(t),NPo=r(pLe," \u2014 "),yG=n(pLe,"A",{href:!0});var sat=s(yG);jPo=r(sat,"XLMForTokenClassification"),sat.forEach(t),DPo=r(pLe," (XLM model)"),pLe.forEach(t),GPo=i(J),p2=n(J,"LI",{});var uLe=s(p2);kfe=n(uLe,"STRONG",{});var lat=s(kfe);OPo=r(lat,"xlm-roberta"),lat.forEach(t),VPo=r(uLe," \u2014 "),LG=n(uLe,"A",{href:!0});var iat=s(LG);XPo=r(iat,"XLMRobertaForTokenClassification"),iat.forEach(t),zPo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),QPo=i(J),u2=n(J,"LI",{});var _Le=s(u2);Sfe=n(_Le,"STRONG",{});var dat=s(Sfe);WPo=r(dat,"xlm-roberta-xl"),dat.forEach(t),HPo=r(_Le," \u2014 "),xG=n(_Le,"A",{href:!0});var cat=s(xG);UPo=r(cat,"XLMRobertaXLForTokenClassification"),cat.forEach(t),JPo=r(_Le," (XLM-RoBERTa-XL model)"),_Le.forEach(t),YPo=i(J),_2=n(J,"LI",{});var bLe=s(_2);Rfe=n(bLe,"STRONG",{});var fat=s(Rfe);KPo=r(fat,"xlnet"),fat.forEach(t),ZPo=r(bLe," \u2014 "),$G=n(bLe,"A",{href:!0});var mat=s($G);eIo=r(mat,"XLNetForTokenClassification"),mat.forEach(t),oIo=r(bLe," (XLNet model)"),bLe.forEach(t),rIo=i(J),b2=n(J,"LI",{});var vLe=s(b2);Bfe=n(vLe,"STRONG",{});var gat=s(Bfe);tIo=r(gat,"yoso"),gat.forEach(t),aIo=r(vLe," \u2014 "),kG=n(vLe,"A",{href:!0});var hat=s(kG);nIo=r(hat,"YosoForTokenClassification"),hat.forEach(t),sIo=r(vLe," (YOSO model)"),vLe.forEach(t),J.forEach(t),lIo=i(ta),v2=n(ta,"P",{});var FLe=s(v2);iIo=r(FLe,"The model is set in evaluation mode by default using "),Pfe=n(FLe,"CODE",{});var pat=s(Pfe);dIo=r(pat,"model.eval()"),pat.forEach(t),cIo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ife=n(FLe,"CODE",{});var uat=s(Ife);fIo=r(uat,"model.train()"),uat.forEach(t),FLe.forEach(t),mIo=i(ta),T(F2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),FBe=i(f),Oi=n(f,"H2",{class:!0});var MIe=s(Oi);T2=n(MIe,"A",{id:!0,class:!0,href:!0});var _at=s(T2);qfe=n(_at,"SPAN",{});var bat=s(qfe);T(B6.$$.fragment,bat),bat.forEach(t),_at.forEach(t),gIo=i(MIe),Nfe=n(MIe,"SPAN",{});var vat=s(Nfe);hIo=r(vat,"AutoModelForQuestionAnswering"),vat.forEach(t),MIe.forEach(t),TBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(P6.$$.fragment,Xs),pIo=i(Xs),Vi=n(Xs,"P",{});var TY=s(Vi);uIo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SG=n(TY,"A",{href:!0});var Fat=s(SG);_Io=r(Fat,"from_pretrained()"),Fat.forEach(t),bIo=r(TY," class method or the "),RG=n(TY,"A",{href:!0});var Tat=s(RG);vIo=r(Tat,"from_config()"),Tat.forEach(t),FIo=r(TY,` class
method.`),TY.forEach(t),TIo=i(Xs),I6=n(Xs,"P",{});var EIe=s(I6);MIo=r(EIe,"This class cannot be instantiated directly using "),jfe=n(EIe,"CODE",{});var Mat=s(jfe);EIo=r(Mat,"__init__()"),Mat.forEach(t),CIo=r(EIe," (throws an error)."),EIe.forEach(t),wIo=i(Xs),lt=n(Xs,"DIV",{class:!0});var D3=s(lt);T(q6.$$.fragment,D3),AIo=i(D3),Dfe=n(D3,"P",{});var Eat=s(Dfe);yIo=r(Eat,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Eat.forEach(t),LIo=i(D3),Xi=n(D3,"P",{});var MY=s(Xi);xIo=r(MY,`Note:
Loading a model from its configuration file does `),Gfe=n(MY,"STRONG",{});var Cat=s(Gfe);$Io=r(Cat,"not"),Cat.forEach(t),kIo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BG=n(MY,"A",{href:!0});var wat=s(BG);SIo=r(wat,"from_pretrained()"),wat.forEach(t),RIo=r(MY," to load the model weights."),MY.forEach(t),BIo=i(D3),T(M2.$$.fragment,D3),D3.forEach(t),PIo=i(Xs),oo=n(Xs,"DIV",{class:!0});var aa=s(oo);T(N6.$$.fragment,aa),IIo=i(aa),Ofe=n(aa,"P",{});var Aat=s(Ofe);qIo=r(Aat,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Aat.forEach(t),NIo=i(aa),ka=n(aa,"P",{});var G3=s(ka);jIo=r(G3,"The model class to instantiate is selected based on the "),Vfe=n(G3,"CODE",{});var yat=s(Vfe);DIo=r(yat,"model_type"),yat.forEach(t),GIo=r(G3,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(G3,"CODE",{});var Lat=s(Xfe);OIo=r(Lat,"pretrained_model_name_or_path"),Lat.forEach(t),VIo=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(G3,"CODE",{});var xat=s(zfe);XIo=r(xat,"pretrained_model_name_or_path"),xat.forEach(t),zIo=r(G3,":"),G3.forEach(t),QIo=i(aa),O=n(aa,"UL",{});var X=s(O);E2=n(X,"LI",{});var TLe=s(E2);Qfe=n(TLe,"STRONG",{});var $at=s(Qfe);WIo=r($at,"albert"),$at.forEach(t),HIo=r(TLe," \u2014 "),PG=n(TLe,"A",{href:!0});var kat=s(PG);UIo=r(kat,"AlbertForQuestionAnswering"),kat.forEach(t),JIo=r(TLe," (ALBERT model)"),TLe.forEach(t),YIo=i(X),C2=n(X,"LI",{});var MLe=s(C2);Wfe=n(MLe,"STRONG",{});var Sat=s(Wfe);KIo=r(Sat,"bart"),Sat.forEach(t),ZIo=r(MLe," \u2014 "),IG=n(MLe,"A",{href:!0});var Rat=s(IG);eqo=r(Rat,"BartForQuestionAnswering"),Rat.forEach(t),oqo=r(MLe," (BART model)"),MLe.forEach(t),rqo=i(X),w2=n(X,"LI",{});var ELe=s(w2);Hfe=n(ELe,"STRONG",{});var Bat=s(Hfe);tqo=r(Bat,"bert"),Bat.forEach(t),aqo=r(ELe," \u2014 "),qG=n(ELe,"A",{href:!0});var Pat=s(qG);nqo=r(Pat,"BertForQuestionAnswering"),Pat.forEach(t),sqo=r(ELe," (BERT model)"),ELe.forEach(t),lqo=i(X),A2=n(X,"LI",{});var CLe=s(A2);Ufe=n(CLe,"STRONG",{});var Iat=s(Ufe);iqo=r(Iat,"big_bird"),Iat.forEach(t),dqo=r(CLe," \u2014 "),NG=n(CLe,"A",{href:!0});var qat=s(NG);cqo=r(qat,"BigBirdForQuestionAnswering"),qat.forEach(t),fqo=r(CLe," (BigBird model)"),CLe.forEach(t),mqo=i(X),y2=n(X,"LI",{});var wLe=s(y2);Jfe=n(wLe,"STRONG",{});var Nat=s(Jfe);gqo=r(Nat,"bigbird_pegasus"),Nat.forEach(t),hqo=r(wLe," \u2014 "),jG=n(wLe,"A",{href:!0});var jat=s(jG);pqo=r(jat,"BigBirdPegasusForQuestionAnswering"),jat.forEach(t),uqo=r(wLe," (BigBirdPegasus model)"),wLe.forEach(t),_qo=i(X),L2=n(X,"LI",{});var ALe=s(L2);Yfe=n(ALe,"STRONG",{});var Dat=s(Yfe);bqo=r(Dat,"camembert"),Dat.forEach(t),vqo=r(ALe," \u2014 "),DG=n(ALe,"A",{href:!0});var Gat=s(DG);Fqo=r(Gat,"CamembertForQuestionAnswering"),Gat.forEach(t),Tqo=r(ALe," (CamemBERT model)"),ALe.forEach(t),Mqo=i(X),x2=n(X,"LI",{});var yLe=s(x2);Kfe=n(yLe,"STRONG",{});var Oat=s(Kfe);Eqo=r(Oat,"canine"),Oat.forEach(t),Cqo=r(yLe," \u2014 "),GG=n(yLe,"A",{href:!0});var Vat=s(GG);wqo=r(Vat,"CanineForQuestionAnswering"),Vat.forEach(t),Aqo=r(yLe," (Canine model)"),yLe.forEach(t),yqo=i(X),$2=n(X,"LI",{});var LLe=s($2);Zfe=n(LLe,"STRONG",{});var Xat=s(Zfe);Lqo=r(Xat,"convbert"),Xat.forEach(t),xqo=r(LLe," \u2014 "),OG=n(LLe,"A",{href:!0});var zat=s(OG);$qo=r(zat,"ConvBertForQuestionAnswering"),zat.forEach(t),kqo=r(LLe," (ConvBERT model)"),LLe.forEach(t),Sqo=i(X),k2=n(X,"LI",{});var xLe=s(k2);eme=n(xLe,"STRONG",{});var Qat=s(eme);Rqo=r(Qat,"data2vec-text"),Qat.forEach(t),Bqo=r(xLe," \u2014 "),VG=n(xLe,"A",{href:!0});var Wat=s(VG);Pqo=r(Wat,"Data2VecTextForQuestionAnswering"),Wat.forEach(t),Iqo=r(xLe," (Data2VecText model)"),xLe.forEach(t),qqo=i(X),S2=n(X,"LI",{});var $Le=s(S2);ome=n($Le,"STRONG",{});var Hat=s(ome);Nqo=r(Hat,"deberta"),Hat.forEach(t),jqo=r($Le," \u2014 "),XG=n($Le,"A",{href:!0});var Uat=s(XG);Dqo=r(Uat,"DebertaForQuestionAnswering"),Uat.forEach(t),Gqo=r($Le," (DeBERTa model)"),$Le.forEach(t),Oqo=i(X),R2=n(X,"LI",{});var kLe=s(R2);rme=n(kLe,"STRONG",{});var Jat=s(rme);Vqo=r(Jat,"deberta-v2"),Jat.forEach(t),Xqo=r(kLe," \u2014 "),zG=n(kLe,"A",{href:!0});var Yat=s(zG);zqo=r(Yat,"DebertaV2ForQuestionAnswering"),Yat.forEach(t),Qqo=r(kLe," (DeBERTa-v2 model)"),kLe.forEach(t),Wqo=i(X),B2=n(X,"LI",{});var SLe=s(B2);tme=n(SLe,"STRONG",{});var Kat=s(tme);Hqo=r(Kat,"distilbert"),Kat.forEach(t),Uqo=r(SLe," \u2014 "),QG=n(SLe,"A",{href:!0});var Zat=s(QG);Jqo=r(Zat,"DistilBertForQuestionAnswering"),Zat.forEach(t),Yqo=r(SLe," (DistilBERT model)"),SLe.forEach(t),Kqo=i(X),P2=n(X,"LI",{});var RLe=s(P2);ame=n(RLe,"STRONG",{});var ent=s(ame);Zqo=r(ent,"electra"),ent.forEach(t),eNo=r(RLe," \u2014 "),WG=n(RLe,"A",{href:!0});var ont=s(WG);oNo=r(ont,"ElectraForQuestionAnswering"),ont.forEach(t),rNo=r(RLe," (ELECTRA model)"),RLe.forEach(t),tNo=i(X),I2=n(X,"LI",{});var BLe=s(I2);nme=n(BLe,"STRONG",{});var rnt=s(nme);aNo=r(rnt,"flaubert"),rnt.forEach(t),nNo=r(BLe," \u2014 "),HG=n(BLe,"A",{href:!0});var tnt=s(HG);sNo=r(tnt,"FlaubertForQuestionAnsweringSimple"),tnt.forEach(t),lNo=r(BLe," (FlauBERT model)"),BLe.forEach(t),iNo=i(X),q2=n(X,"LI",{});var PLe=s(q2);sme=n(PLe,"STRONG",{});var ant=s(sme);dNo=r(ant,"fnet"),ant.forEach(t),cNo=r(PLe," \u2014 "),UG=n(PLe,"A",{href:!0});var nnt=s(UG);fNo=r(nnt,"FNetForQuestionAnswering"),nnt.forEach(t),mNo=r(PLe," (FNet model)"),PLe.forEach(t),gNo=i(X),N2=n(X,"LI",{});var ILe=s(N2);lme=n(ILe,"STRONG",{});var snt=s(lme);hNo=r(snt,"funnel"),snt.forEach(t),pNo=r(ILe," \u2014 "),JG=n(ILe,"A",{href:!0});var lnt=s(JG);uNo=r(lnt,"FunnelForQuestionAnswering"),lnt.forEach(t),_No=r(ILe," (Funnel Transformer model)"),ILe.forEach(t),bNo=i(X),j2=n(X,"LI",{});var qLe=s(j2);ime=n(qLe,"STRONG",{});var int=s(ime);vNo=r(int,"gptj"),int.forEach(t),FNo=r(qLe," \u2014 "),YG=n(qLe,"A",{href:!0});var dnt=s(YG);TNo=r(dnt,"GPTJForQuestionAnswering"),dnt.forEach(t),MNo=r(qLe," (GPT-J model)"),qLe.forEach(t),ENo=i(X),D2=n(X,"LI",{});var NLe=s(D2);dme=n(NLe,"STRONG",{});var cnt=s(dme);CNo=r(cnt,"ibert"),cnt.forEach(t),wNo=r(NLe," \u2014 "),KG=n(NLe,"A",{href:!0});var fnt=s(KG);ANo=r(fnt,"IBertForQuestionAnswering"),fnt.forEach(t),yNo=r(NLe," (I-BERT model)"),NLe.forEach(t),LNo=i(X),G2=n(X,"LI",{});var jLe=s(G2);cme=n(jLe,"STRONG",{});var mnt=s(cme);xNo=r(mnt,"layoutlmv2"),mnt.forEach(t),$No=r(jLe," \u2014 "),ZG=n(jLe,"A",{href:!0});var gnt=s(ZG);kNo=r(gnt,"LayoutLMv2ForQuestionAnswering"),gnt.forEach(t),SNo=r(jLe," (LayoutLMv2 model)"),jLe.forEach(t),RNo=i(X),O2=n(X,"LI",{});var DLe=s(O2);fme=n(DLe,"STRONG",{});var hnt=s(fme);BNo=r(hnt,"led"),hnt.forEach(t),PNo=r(DLe," \u2014 "),eO=n(DLe,"A",{href:!0});var pnt=s(eO);INo=r(pnt,"LEDForQuestionAnswering"),pnt.forEach(t),qNo=r(DLe," (LED model)"),DLe.forEach(t),NNo=i(X),V2=n(X,"LI",{});var GLe=s(V2);mme=n(GLe,"STRONG",{});var unt=s(mme);jNo=r(unt,"longformer"),unt.forEach(t),DNo=r(GLe," \u2014 "),oO=n(GLe,"A",{href:!0});var _nt=s(oO);GNo=r(_nt,"LongformerForQuestionAnswering"),_nt.forEach(t),ONo=r(GLe," (Longformer model)"),GLe.forEach(t),VNo=i(X),X2=n(X,"LI",{});var OLe=s(X2);gme=n(OLe,"STRONG",{});var bnt=s(gme);XNo=r(bnt,"lxmert"),bnt.forEach(t),zNo=r(OLe," \u2014 "),rO=n(OLe,"A",{href:!0});var vnt=s(rO);QNo=r(vnt,"LxmertForQuestionAnswering"),vnt.forEach(t),WNo=r(OLe," (LXMERT model)"),OLe.forEach(t),HNo=i(X),z2=n(X,"LI",{});var VLe=s(z2);hme=n(VLe,"STRONG",{});var Fnt=s(hme);UNo=r(Fnt,"mbart"),Fnt.forEach(t),JNo=r(VLe," \u2014 "),tO=n(VLe,"A",{href:!0});var Tnt=s(tO);YNo=r(Tnt,"MBartForQuestionAnswering"),Tnt.forEach(t),KNo=r(VLe," (mBART model)"),VLe.forEach(t),ZNo=i(X),Q2=n(X,"LI",{});var XLe=s(Q2);pme=n(XLe,"STRONG",{});var Mnt=s(pme);ejo=r(Mnt,"megatron-bert"),Mnt.forEach(t),ojo=r(XLe," \u2014 "),aO=n(XLe,"A",{href:!0});var Ent=s(aO);rjo=r(Ent,"MegatronBertForQuestionAnswering"),Ent.forEach(t),tjo=r(XLe," (MegatronBert model)"),XLe.forEach(t),ajo=i(X),W2=n(X,"LI",{});var zLe=s(W2);ume=n(zLe,"STRONG",{});var Cnt=s(ume);njo=r(Cnt,"mobilebert"),Cnt.forEach(t),sjo=r(zLe," \u2014 "),nO=n(zLe,"A",{href:!0});var wnt=s(nO);ljo=r(wnt,"MobileBertForQuestionAnswering"),wnt.forEach(t),ijo=r(zLe," (MobileBERT model)"),zLe.forEach(t),djo=i(X),H2=n(X,"LI",{});var QLe=s(H2);_me=n(QLe,"STRONG",{});var Ant=s(_me);cjo=r(Ant,"mpnet"),Ant.forEach(t),fjo=r(QLe," \u2014 "),sO=n(QLe,"A",{href:!0});var ynt=s(sO);mjo=r(ynt,"MPNetForQuestionAnswering"),ynt.forEach(t),gjo=r(QLe," (MPNet model)"),QLe.forEach(t),hjo=i(X),U2=n(X,"LI",{});var WLe=s(U2);bme=n(WLe,"STRONG",{});var Lnt=s(bme);pjo=r(Lnt,"nystromformer"),Lnt.forEach(t),ujo=r(WLe," \u2014 "),lO=n(WLe,"A",{href:!0});var xnt=s(lO);_jo=r(xnt,"NystromformerForQuestionAnswering"),xnt.forEach(t),bjo=r(WLe," (Nystromformer model)"),WLe.forEach(t),vjo=i(X),J2=n(X,"LI",{});var HLe=s(J2);vme=n(HLe,"STRONG",{});var $nt=s(vme);Fjo=r($nt,"qdqbert"),$nt.forEach(t),Tjo=r(HLe," \u2014 "),iO=n(HLe,"A",{href:!0});var knt=s(iO);Mjo=r(knt,"QDQBertForQuestionAnswering"),knt.forEach(t),Ejo=r(HLe," (QDQBert model)"),HLe.forEach(t),Cjo=i(X),Y2=n(X,"LI",{});var ULe=s(Y2);Fme=n(ULe,"STRONG",{});var Snt=s(Fme);wjo=r(Snt,"reformer"),Snt.forEach(t),Ajo=r(ULe," \u2014 "),dO=n(ULe,"A",{href:!0});var Rnt=s(dO);yjo=r(Rnt,"ReformerForQuestionAnswering"),Rnt.forEach(t),Ljo=r(ULe," (Reformer model)"),ULe.forEach(t),xjo=i(X),K2=n(X,"LI",{});var JLe=s(K2);Tme=n(JLe,"STRONG",{});var Bnt=s(Tme);$jo=r(Bnt,"rembert"),Bnt.forEach(t),kjo=r(JLe," \u2014 "),cO=n(JLe,"A",{href:!0});var Pnt=s(cO);Sjo=r(Pnt,"RemBertForQuestionAnswering"),Pnt.forEach(t),Rjo=r(JLe," (RemBERT model)"),JLe.forEach(t),Bjo=i(X),Z2=n(X,"LI",{});var YLe=s(Z2);Mme=n(YLe,"STRONG",{});var Int=s(Mme);Pjo=r(Int,"roberta"),Int.forEach(t),Ijo=r(YLe," \u2014 "),fO=n(YLe,"A",{href:!0});var qnt=s(fO);qjo=r(qnt,"RobertaForQuestionAnswering"),qnt.forEach(t),Njo=r(YLe," (RoBERTa model)"),YLe.forEach(t),jjo=i(X),e5=n(X,"LI",{});var KLe=s(e5);Eme=n(KLe,"STRONG",{});var Nnt=s(Eme);Djo=r(Nnt,"roformer"),Nnt.forEach(t),Gjo=r(KLe," \u2014 "),mO=n(KLe,"A",{href:!0});var jnt=s(mO);Ojo=r(jnt,"RoFormerForQuestionAnswering"),jnt.forEach(t),Vjo=r(KLe," (RoFormer model)"),KLe.forEach(t),Xjo=i(X),o5=n(X,"LI",{});var ZLe=s(o5);Cme=n(ZLe,"STRONG",{});var Dnt=s(Cme);zjo=r(Dnt,"splinter"),Dnt.forEach(t),Qjo=r(ZLe," \u2014 "),gO=n(ZLe,"A",{href:!0});var Gnt=s(gO);Wjo=r(Gnt,"SplinterForQuestionAnswering"),Gnt.forEach(t),Hjo=r(ZLe," (Splinter model)"),ZLe.forEach(t),Ujo=i(X),r5=n(X,"LI",{});var e8e=s(r5);wme=n(e8e,"STRONG",{});var Ont=s(wme);Jjo=r(Ont,"squeezebert"),Ont.forEach(t),Yjo=r(e8e," \u2014 "),hO=n(e8e,"A",{href:!0});var Vnt=s(hO);Kjo=r(Vnt,"SqueezeBertForQuestionAnswering"),Vnt.forEach(t),Zjo=r(e8e," (SqueezeBERT model)"),e8e.forEach(t),eDo=i(X),t5=n(X,"LI",{});var o8e=s(t5);Ame=n(o8e,"STRONG",{});var Xnt=s(Ame);oDo=r(Xnt,"xlm"),Xnt.forEach(t),rDo=r(o8e," \u2014 "),pO=n(o8e,"A",{href:!0});var znt=s(pO);tDo=r(znt,"XLMForQuestionAnsweringSimple"),znt.forEach(t),aDo=r(o8e," (XLM model)"),o8e.forEach(t),nDo=i(X),a5=n(X,"LI",{});var r8e=s(a5);yme=n(r8e,"STRONG",{});var Qnt=s(yme);sDo=r(Qnt,"xlm-roberta"),Qnt.forEach(t),lDo=r(r8e," \u2014 "),uO=n(r8e,"A",{href:!0});var Wnt=s(uO);iDo=r(Wnt,"XLMRobertaForQuestionAnswering"),Wnt.forEach(t),dDo=r(r8e," (XLM-RoBERTa model)"),r8e.forEach(t),cDo=i(X),n5=n(X,"LI",{});var t8e=s(n5);Lme=n(t8e,"STRONG",{});var Hnt=s(Lme);fDo=r(Hnt,"xlm-roberta-xl"),Hnt.forEach(t),mDo=r(t8e," \u2014 "),_O=n(t8e,"A",{href:!0});var Unt=s(_O);gDo=r(Unt,"XLMRobertaXLForQuestionAnswering"),Unt.forEach(t),hDo=r(t8e," (XLM-RoBERTa-XL model)"),t8e.forEach(t),pDo=i(X),s5=n(X,"LI",{});var a8e=s(s5);xme=n(a8e,"STRONG",{});var Jnt=s(xme);uDo=r(Jnt,"xlnet"),Jnt.forEach(t),_Do=r(a8e," \u2014 "),bO=n(a8e,"A",{href:!0});var Ynt=s(bO);bDo=r(Ynt,"XLNetForQuestionAnsweringSimple"),Ynt.forEach(t),vDo=r(a8e," (XLNet model)"),a8e.forEach(t),FDo=i(X),l5=n(X,"LI",{});var n8e=s(l5);$me=n(n8e,"STRONG",{});var Knt=s($me);TDo=r(Knt,"yoso"),Knt.forEach(t),MDo=r(n8e," \u2014 "),vO=n(n8e,"A",{href:!0});var Znt=s(vO);EDo=r(Znt,"YosoForQuestionAnswering"),Znt.forEach(t),CDo=r(n8e," (YOSO model)"),n8e.forEach(t),X.forEach(t),wDo=i(aa),i5=n(aa,"P",{});var s8e=s(i5);ADo=r(s8e,"The model is set in evaluation mode by default using "),kme=n(s8e,"CODE",{});var est=s(kme);yDo=r(est,"model.eval()"),est.forEach(t),LDo=r(s8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(s8e,"CODE",{});var ost=s(Sme);xDo=r(ost,"model.train()"),ost.forEach(t),s8e.forEach(t),$Do=i(aa),T(d5.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),MBe=i(f),zi=n(f,"H2",{class:!0});var CIe=s(zi);c5=n(CIe,"A",{id:!0,class:!0,href:!0});var rst=s(c5);Rme=n(rst,"SPAN",{});var tst=s(Rme);T(j6.$$.fragment,tst),tst.forEach(t),rst.forEach(t),kDo=i(CIe),Bme=n(CIe,"SPAN",{});var ast=s(Bme);SDo=r(ast,"AutoModelForTableQuestionAnswering"),ast.forEach(t),CIe.forEach(t),EBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(D6.$$.fragment,zs),RDo=i(zs),Qi=n(zs,"P",{});var EY=s(Qi);BDo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),FO=n(EY,"A",{href:!0});var nst=s(FO);PDo=r(nst,"from_pretrained()"),nst.forEach(t),IDo=r(EY," class method or the "),TO=n(EY,"A",{href:!0});var sst=s(TO);qDo=r(sst,"from_config()"),sst.forEach(t),NDo=r(EY,` class
method.`),EY.forEach(t),jDo=i(zs),G6=n(zs,"P",{});var wIe=s(G6);DDo=r(wIe,"This class cannot be instantiated directly using "),Pme=n(wIe,"CODE",{});var lst=s(Pme);GDo=r(lst,"__init__()"),lst.forEach(t),ODo=r(wIe," (throws an error)."),wIe.forEach(t),VDo=i(zs),it=n(zs,"DIV",{class:!0});var O3=s(it);T(O6.$$.fragment,O3),XDo=i(O3),Ime=n(O3,"P",{});var ist=s(Ime);zDo=r(ist,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ist.forEach(t),QDo=i(O3),Wi=n(O3,"P",{});var CY=s(Wi);WDo=r(CY,`Note:
Loading a model from its configuration file does `),qme=n(CY,"STRONG",{});var dst=s(qme);HDo=r(dst,"not"),dst.forEach(t),UDo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),MO=n(CY,"A",{href:!0});var cst=s(MO);JDo=r(cst,"from_pretrained()"),cst.forEach(t),YDo=r(CY," to load the model weights."),CY.forEach(t),KDo=i(O3),T(f5.$$.fragment,O3),O3.forEach(t),ZDo=i(zs),ro=n(zs,"DIV",{class:!0});var na=s(ro);T(V6.$$.fragment,na),eGo=i(na),Nme=n(na,"P",{});var fst=s(Nme);oGo=r(fst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fst.forEach(t),rGo=i(na),Sa=n(na,"P",{});var V3=s(Sa);tGo=r(V3,"The model class to instantiate is selected based on the "),jme=n(V3,"CODE",{});var mst=s(jme);aGo=r(mst,"model_type"),mst.forEach(t),nGo=r(V3,` property of the config object (either
passed as an argument or loaded from `),Dme=n(V3,"CODE",{});var gst=s(Dme);sGo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),lGo=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(V3,"CODE",{});var hst=s(Gme);iGo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),dGo=r(V3,":"),V3.forEach(t),cGo=i(na),Ome=n(na,"UL",{});var pst=s(Ome);m5=n(pst,"LI",{});var l8e=s(m5);Vme=n(l8e,"STRONG",{});var ust=s(Vme);fGo=r(ust,"tapas"),ust.forEach(t),mGo=r(l8e," \u2014 "),EO=n(l8e,"A",{href:!0});var _st=s(EO);gGo=r(_st,"TapasForQuestionAnswering"),_st.forEach(t),hGo=r(l8e," (TAPAS model)"),l8e.forEach(t),pst.forEach(t),pGo=i(na),g5=n(na,"P",{});var i8e=s(g5);uGo=r(i8e,"The model is set in evaluation mode by default using "),Xme=n(i8e,"CODE",{});var bst=s(Xme);_Go=r(bst,"model.eval()"),bst.forEach(t),bGo=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zme=n(i8e,"CODE",{});var vst=s(zme);vGo=r(vst,"model.train()"),vst.forEach(t),i8e.forEach(t),FGo=i(na),T(h5.$$.fragment,na),na.forEach(t),zs.forEach(t),CBe=i(f),Hi=n(f,"H2",{class:!0});var AIe=s(Hi);p5=n(AIe,"A",{id:!0,class:!0,href:!0});var Fst=s(p5);Qme=n(Fst,"SPAN",{});var Tst=s(Qme);T(X6.$$.fragment,Tst),Tst.forEach(t),Fst.forEach(t),TGo=i(AIe),Wme=n(AIe,"SPAN",{});var Mst=s(Wme);MGo=r(Mst,"AutoModelForImageClassification"),Mst.forEach(t),AIe.forEach(t),wBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(z6.$$.fragment,Qs),EGo=i(Qs),Ui=n(Qs,"P",{});var wY=s(Ui);CGo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),CO=n(wY,"A",{href:!0});var Est=s(CO);wGo=r(Est,"from_pretrained()"),Est.forEach(t),AGo=r(wY," class method or the "),wO=n(wY,"A",{href:!0});var Cst=s(wO);yGo=r(Cst,"from_config()"),Cst.forEach(t),LGo=r(wY,` class
method.`),wY.forEach(t),xGo=i(Qs),Q6=n(Qs,"P",{});var yIe=s(Q6);$Go=r(yIe,"This class cannot be instantiated directly using "),Hme=n(yIe,"CODE",{});var wst=s(Hme);kGo=r(wst,"__init__()"),wst.forEach(t),SGo=r(yIe," (throws an error)."),yIe.forEach(t),RGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var X3=s(dt);T(W6.$$.fragment,X3),BGo=i(X3),Ume=n(X3,"P",{});var Ast=s(Ume);PGo=r(Ast,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ast.forEach(t),IGo=i(X3),Ji=n(X3,"P",{});var AY=s(Ji);qGo=r(AY,`Note:
Loading a model from its configuration file does `),Jme=n(AY,"STRONG",{});var yst=s(Jme);NGo=r(yst,"not"),yst.forEach(t),jGo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(AY,"A",{href:!0});var Lst=s(AO);DGo=r(Lst,"from_pretrained()"),Lst.forEach(t),GGo=r(AY," to load the model weights."),AY.forEach(t),OGo=i(X3),T(u5.$$.fragment,X3),X3.forEach(t),VGo=i(Qs),to=n(Qs,"DIV",{class:!0});var sa=s(to);T(H6.$$.fragment,sa),XGo=i(sa),Yme=n(sa,"P",{});var xst=s(Yme);zGo=r(xst,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xst.forEach(t),QGo=i(sa),Ra=n(sa,"P",{});var z3=s(Ra);WGo=r(z3,"The model class to instantiate is selected based on the "),Kme=n(z3,"CODE",{});var $st=s(Kme);HGo=r($st,"model_type"),$st.forEach(t),UGo=r(z3,` property of the config object (either
passed as an argument or loaded from `),Zme=n(z3,"CODE",{});var kst=s(Zme);JGo=r(kst,"pretrained_model_name_or_path"),kst.forEach(t),YGo=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ege=n(z3,"CODE",{});var Sst=s(ege);KGo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),ZGo=r(z3,":"),z3.forEach(t),eOo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);_5=n(Ee,"LI",{});var d8e=s(_5);oge=n(d8e,"STRONG",{});var Rst=s(oge);oOo=r(Rst,"beit"),Rst.forEach(t),rOo=r(d8e," \u2014 "),yO=n(d8e,"A",{href:!0});var Bst=s(yO);tOo=r(Bst,"BeitForImageClassification"),Bst.forEach(t),aOo=r(d8e," (BEiT model)"),d8e.forEach(t),nOo=i(Ee),b5=n(Ee,"LI",{});var c8e=s(b5);rge=n(c8e,"STRONG",{});var Pst=s(rge);sOo=r(Pst,"convnext"),Pst.forEach(t),lOo=r(c8e," \u2014 "),LO=n(c8e,"A",{href:!0});var Ist=s(LO);iOo=r(Ist,"ConvNextForImageClassification"),Ist.forEach(t),dOo=r(c8e," (ConvNext model)"),c8e.forEach(t),cOo=i(Ee),v5=n(Ee,"LI",{});var f8e=s(v5);tge=n(f8e,"STRONG",{});var qst=s(tge);fOo=r(qst,"data2vec-vision"),qst.forEach(t),mOo=r(f8e," \u2014 "),xO=n(f8e,"A",{href:!0});var Nst=s(xO);gOo=r(Nst,"Data2VecVisionForImageClassification"),Nst.forEach(t),hOo=r(f8e," (Data2VecVision model)"),f8e.forEach(t),pOo=i(Ee),Ls=n(Ee,"LI",{});var y9=s(Ls);age=n(y9,"STRONG",{});var jst=s(age);uOo=r(jst,"deit"),jst.forEach(t),_Oo=r(y9," \u2014 "),$O=n(y9,"A",{href:!0});var Dst=s($O);bOo=r(Dst,"DeiTForImageClassification"),Dst.forEach(t),vOo=r(y9," or "),kO=n(y9,"A",{href:!0});var Gst=s(kO);FOo=r(Gst,"DeiTForImageClassificationWithTeacher"),Gst.forEach(t),TOo=r(y9," (DeiT model)"),y9.forEach(t),MOo=i(Ee),F5=n(Ee,"LI",{});var m8e=s(F5);nge=n(m8e,"STRONG",{});var Ost=s(nge);EOo=r(Ost,"imagegpt"),Ost.forEach(t),COo=r(m8e," \u2014 "),SO=n(m8e,"A",{href:!0});var Vst=s(SO);wOo=r(Vst,"ImageGPTForImageClassification"),Vst.forEach(t),AOo=r(m8e," (ImageGPT model)"),m8e.forEach(t),yOo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);sge=n(ef,"STRONG",{});var Xst=s(sge);LOo=r(Xst,"perceiver"),Xst.forEach(t),xOo=r(ef," \u2014 "),RO=n(ef,"A",{href:!0});var zst=s(RO);$Oo=r(zst,"PerceiverForImageClassificationLearned"),zst.forEach(t),kOo=r(ef," or "),BO=n(ef,"A",{href:!0});var Qst=s(BO);SOo=r(Qst,"PerceiverForImageClassificationFourier"),Qst.forEach(t),ROo=r(ef," or "),PO=n(ef,"A",{href:!0});var Wst=s(PO);BOo=r(Wst,"PerceiverForImageClassificationConvProcessing"),Wst.forEach(t),POo=r(ef," (Perceiver model)"),ef.forEach(t),IOo=i(Ee),T5=n(Ee,"LI",{});var g8e=s(T5);lge=n(g8e,"STRONG",{});var Hst=s(lge);qOo=r(Hst,"poolformer"),Hst.forEach(t),NOo=r(g8e," \u2014 "),IO=n(g8e,"A",{href:!0});var Ust=s(IO);jOo=r(Ust,"PoolFormerForImageClassification"),Ust.forEach(t),DOo=r(g8e," (PoolFormer model)"),g8e.forEach(t),GOo=i(Ee),M5=n(Ee,"LI",{});var h8e=s(M5);ige=n(h8e,"STRONG",{});var Jst=s(ige);OOo=r(Jst,"regnet"),Jst.forEach(t),VOo=r(h8e," \u2014 "),qO=n(h8e,"A",{href:!0});var Yst=s(qO);XOo=r(Yst,"RegNetForImageClassification"),Yst.forEach(t),zOo=r(h8e," (RegNet model)"),h8e.forEach(t),QOo=i(Ee),E5=n(Ee,"LI",{});var p8e=s(E5);dge=n(p8e,"STRONG",{});var Kst=s(dge);WOo=r(Kst,"resnet"),Kst.forEach(t),HOo=r(p8e," \u2014 "),NO=n(p8e,"A",{href:!0});var Zst=s(NO);UOo=r(Zst,"ResNetForImageClassification"),Zst.forEach(t),JOo=r(p8e," (ResNet model)"),p8e.forEach(t),YOo=i(Ee),C5=n(Ee,"LI",{});var u8e=s(C5);cge=n(u8e,"STRONG",{});var elt=s(cge);KOo=r(elt,"segformer"),elt.forEach(t),ZOo=r(u8e," \u2014 "),jO=n(u8e,"A",{href:!0});var olt=s(jO);eVo=r(olt,"SegformerForImageClassification"),olt.forEach(t),oVo=r(u8e," (SegFormer model)"),u8e.forEach(t),rVo=i(Ee),w5=n(Ee,"LI",{});var _8e=s(w5);fge=n(_8e,"STRONG",{});var rlt=s(fge);tVo=r(rlt,"swin"),rlt.forEach(t),aVo=r(_8e," \u2014 "),DO=n(_8e,"A",{href:!0});var tlt=s(DO);nVo=r(tlt,"SwinForImageClassification"),tlt.forEach(t),sVo=r(_8e," (Swin model)"),_8e.forEach(t),lVo=i(Ee),A5=n(Ee,"LI",{});var b8e=s(A5);mge=n(b8e,"STRONG",{});var alt=s(mge);iVo=r(alt,"van"),alt.forEach(t),dVo=r(b8e," \u2014 "),GO=n(b8e,"A",{href:!0});var nlt=s(GO);cVo=r(nlt,"VanForImageClassification"),nlt.forEach(t),fVo=r(b8e," (VAN model)"),b8e.forEach(t),mVo=i(Ee),y5=n(Ee,"LI",{});var v8e=s(y5);gge=n(v8e,"STRONG",{});var slt=s(gge);gVo=r(slt,"vit"),slt.forEach(t),hVo=r(v8e," \u2014 "),OO=n(v8e,"A",{href:!0});var llt=s(OO);pVo=r(llt,"ViTForImageClassification"),llt.forEach(t),uVo=r(v8e," (ViT model)"),v8e.forEach(t),Ee.forEach(t),_Vo=i(sa),L5=n(sa,"P",{});var F8e=s(L5);bVo=r(F8e,"The model is set in evaluation mode by default using "),hge=n(F8e,"CODE",{});var ilt=s(hge);vVo=r(ilt,"model.eval()"),ilt.forEach(t),FVo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(F8e,"CODE",{});var dlt=s(pge);TVo=r(dlt,"model.train()"),dlt.forEach(t),F8e.forEach(t),MVo=i(sa),T(x5.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),ABe=i(f),Yi=n(f,"H2",{class:!0});var LIe=s(Yi);$5=n(LIe,"A",{id:!0,class:!0,href:!0});var clt=s($5);uge=n(clt,"SPAN",{});var flt=s(uge);T(U6.$$.fragment,flt),flt.forEach(t),clt.forEach(t),EVo=i(LIe),_ge=n(LIe,"SPAN",{});var mlt=s(_ge);CVo=r(mlt,"AutoModelForVision2Seq"),mlt.forEach(t),LIe.forEach(t),yBe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(J6.$$.fragment,Ws),wVo=i(Ws),Ki=n(Ws,"P",{});var yY=s(Ki);AVo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VO=n(yY,"A",{href:!0});var glt=s(VO);yVo=r(glt,"from_pretrained()"),glt.forEach(t),LVo=r(yY," class method or the "),XO=n(yY,"A",{href:!0});var hlt=s(XO);xVo=r(hlt,"from_config()"),hlt.forEach(t),$Vo=r(yY,` class
method.`),yY.forEach(t),kVo=i(Ws),Y6=n(Ws,"P",{});var xIe=s(Y6);SVo=r(xIe,"This class cannot be instantiated directly using "),bge=n(xIe,"CODE",{});var plt=s(bge);RVo=r(plt,"__init__()"),plt.forEach(t),BVo=r(xIe," (throws an error)."),xIe.forEach(t),PVo=i(Ws),ft=n(Ws,"DIV",{class:!0});var Q3=s(ft);T(K6.$$.fragment,Q3),IVo=i(Q3),vge=n(Q3,"P",{});var ult=s(vge);qVo=r(ult,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ult.forEach(t),NVo=i(Q3),Zi=n(Q3,"P",{});var LY=s(Zi);jVo=r(LY,`Note:
Loading a model from its configuration file does `),Fge=n(LY,"STRONG",{});var _lt=s(Fge);DVo=r(_lt,"not"),_lt.forEach(t),GVo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zO=n(LY,"A",{href:!0});var blt=s(zO);OVo=r(blt,"from_pretrained()"),blt.forEach(t),VVo=r(LY," to load the model weights."),LY.forEach(t),XVo=i(Q3),T(k5.$$.fragment,Q3),Q3.forEach(t),zVo=i(Ws),ao=n(Ws,"DIV",{class:!0});var la=s(ao);T(Z6.$$.fragment,la),QVo=i(la),Tge=n(la,"P",{});var vlt=s(Tge);WVo=r(vlt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vlt.forEach(t),HVo=i(la),Ba=n(la,"P",{});var W3=s(Ba);UVo=r(W3,"The model class to instantiate is selected based on the "),Mge=n(W3,"CODE",{});var Flt=s(Mge);JVo=r(Flt,"model_type"),Flt.forEach(t),YVo=r(W3,` property of the config object (either
passed as an argument or loaded from `),Ege=n(W3,"CODE",{});var Tlt=s(Ege);KVo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),ZVo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cge=n(W3,"CODE",{});var Mlt=s(Cge);eXo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),oXo=r(W3,":"),W3.forEach(t),rXo=i(la),wge=n(la,"UL",{});var Elt=s(wge);S5=n(Elt,"LI",{});var T8e=s(S5);Age=n(T8e,"STRONG",{});var Clt=s(Age);tXo=r(Clt,"vision-encoder-decoder"),Clt.forEach(t),aXo=r(T8e," \u2014 "),QO=n(T8e,"A",{href:!0});var wlt=s(QO);nXo=r(wlt,"VisionEncoderDecoderModel"),wlt.forEach(t),sXo=r(T8e," (Vision Encoder decoder model)"),T8e.forEach(t),Elt.forEach(t),lXo=i(la),R5=n(la,"P",{});var M8e=s(R5);iXo=r(M8e,"The model is set in evaluation mode by default using "),yge=n(M8e,"CODE",{});var Alt=s(yge);dXo=r(Alt,"model.eval()"),Alt.forEach(t),cXo=r(M8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lge=n(M8e,"CODE",{});var ylt=s(Lge);fXo=r(ylt,"model.train()"),ylt.forEach(t),M8e.forEach(t),mXo=i(la),T(B5.$$.fragment,la),la.forEach(t),Ws.forEach(t),LBe=i(f),ed=n(f,"H2",{class:!0});var $Ie=s(ed);P5=n($Ie,"A",{id:!0,class:!0,href:!0});var Llt=s(P5);xge=n(Llt,"SPAN",{});var xlt=s(xge);T(ey.$$.fragment,xlt),xlt.forEach(t),Llt.forEach(t),gXo=i($Ie),$ge=n($Ie,"SPAN",{});var $lt=s($ge);hXo=r($lt,"AutoModelForAudioClassification"),$lt.forEach(t),$Ie.forEach(t),xBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(oy.$$.fragment,Hs),pXo=i(Hs),od=n(Hs,"P",{});var xY=s(od);uXo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),WO=n(xY,"A",{href:!0});var klt=s(WO);_Xo=r(klt,"from_pretrained()"),klt.forEach(t),bXo=r(xY," class method or the "),HO=n(xY,"A",{href:!0});var Slt=s(HO);vXo=r(Slt,"from_config()"),Slt.forEach(t),FXo=r(xY,` class
method.`),xY.forEach(t),TXo=i(Hs),ry=n(Hs,"P",{});var kIe=s(ry);MXo=r(kIe,"This class cannot be instantiated directly using "),kge=n(kIe,"CODE",{});var Rlt=s(kge);EXo=r(Rlt,"__init__()"),Rlt.forEach(t),CXo=r(kIe," (throws an error)."),kIe.forEach(t),wXo=i(Hs),mt=n(Hs,"DIV",{class:!0});var H3=s(mt);T(ty.$$.fragment,H3),AXo=i(H3),Sge=n(H3,"P",{});var Blt=s(Sge);yXo=r(Blt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Blt.forEach(t),LXo=i(H3),rd=n(H3,"P",{});var $Y=s(rd);xXo=r($Y,`Note:
Loading a model from its configuration file does `),Rge=n($Y,"STRONG",{});var Plt=s(Rge);$Xo=r(Plt,"not"),Plt.forEach(t),kXo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),UO=n($Y,"A",{href:!0});var Ilt=s(UO);SXo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),RXo=r($Y," to load the model weights."),$Y.forEach(t),BXo=i(H3),T(I5.$$.fragment,H3),H3.forEach(t),PXo=i(Hs),no=n(Hs,"DIV",{class:!0});var ia=s(no);T(ay.$$.fragment,ia),IXo=i(ia),Bge=n(ia,"P",{});var qlt=s(Bge);qXo=r(qlt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),qlt.forEach(t),NXo=i(ia),Pa=n(ia,"P",{});var U3=s(Pa);jXo=r(U3,"The model class to instantiate is selected based on the "),Pge=n(U3,"CODE",{});var Nlt=s(Pge);DXo=r(Nlt,"model_type"),Nlt.forEach(t),GXo=r(U3,` property of the config object (either
passed as an argument or loaded from `),Ige=n(U3,"CODE",{});var jlt=s(Ige);OXo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),VXo=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n(U3,"CODE",{});var Dlt=s(qge);XXo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),zXo=r(U3,":"),U3.forEach(t),QXo=i(ia),qe=n(ia,"UL",{});var uo=s(qe);q5=n(uo,"LI",{});var E8e=s(q5);Nge=n(E8e,"STRONG",{});var Glt=s(Nge);WXo=r(Glt,"data2vec-audio"),Glt.forEach(t),HXo=r(E8e," \u2014 "),JO=n(E8e,"A",{href:!0});var Olt=s(JO);UXo=r(Olt,"Data2VecAudioForSequenceClassification"),Olt.forEach(t),JXo=r(E8e," (Data2VecAudio model)"),E8e.forEach(t),YXo=i(uo),N5=n(uo,"LI",{});var C8e=s(N5);jge=n(C8e,"STRONG",{});var Vlt=s(jge);KXo=r(Vlt,"hubert"),Vlt.forEach(t),ZXo=r(C8e," \u2014 "),YO=n(C8e,"A",{href:!0});var Xlt=s(YO);ezo=r(Xlt,"HubertForSequenceClassification"),Xlt.forEach(t),ozo=r(C8e," (Hubert model)"),C8e.forEach(t),rzo=i(uo),j5=n(uo,"LI",{});var w8e=s(j5);Dge=n(w8e,"STRONG",{});var zlt=s(Dge);tzo=r(zlt,"sew"),zlt.forEach(t),azo=r(w8e," \u2014 "),KO=n(w8e,"A",{href:!0});var Qlt=s(KO);nzo=r(Qlt,"SEWForSequenceClassification"),Qlt.forEach(t),szo=r(w8e," (SEW model)"),w8e.forEach(t),lzo=i(uo),D5=n(uo,"LI",{});var A8e=s(D5);Gge=n(A8e,"STRONG",{});var Wlt=s(Gge);izo=r(Wlt,"sew-d"),Wlt.forEach(t),dzo=r(A8e," \u2014 "),ZO=n(A8e,"A",{href:!0});var Hlt=s(ZO);czo=r(Hlt,"SEWDForSequenceClassification"),Hlt.forEach(t),fzo=r(A8e," (SEW-D model)"),A8e.forEach(t),mzo=i(uo),G5=n(uo,"LI",{});var y8e=s(G5);Oge=n(y8e,"STRONG",{});var Ult=s(Oge);gzo=r(Ult,"unispeech"),Ult.forEach(t),hzo=r(y8e," \u2014 "),eV=n(y8e,"A",{href:!0});var Jlt=s(eV);pzo=r(Jlt,"UniSpeechForSequenceClassification"),Jlt.forEach(t),uzo=r(y8e," (UniSpeech model)"),y8e.forEach(t),_zo=i(uo),O5=n(uo,"LI",{});var L8e=s(O5);Vge=n(L8e,"STRONG",{});var Ylt=s(Vge);bzo=r(Ylt,"unispeech-sat"),Ylt.forEach(t),vzo=r(L8e," \u2014 "),oV=n(L8e,"A",{href:!0});var Klt=s(oV);Fzo=r(Klt,"UniSpeechSatForSequenceClassification"),Klt.forEach(t),Tzo=r(L8e," (UniSpeechSat model)"),L8e.forEach(t),Mzo=i(uo),V5=n(uo,"LI",{});var x8e=s(V5);Xge=n(x8e,"STRONG",{});var Zlt=s(Xge);Ezo=r(Zlt,"wav2vec2"),Zlt.forEach(t),Czo=r(x8e," \u2014 "),rV=n(x8e,"A",{href:!0});var eit=s(rV);wzo=r(eit,"Wav2Vec2ForSequenceClassification"),eit.forEach(t),Azo=r(x8e," (Wav2Vec2 model)"),x8e.forEach(t),yzo=i(uo),X5=n(uo,"LI",{});var $8e=s(X5);zge=n($8e,"STRONG",{});var oit=s(zge);Lzo=r(oit,"wavlm"),oit.forEach(t),xzo=r($8e," \u2014 "),tV=n($8e,"A",{href:!0});var rit=s(tV);$zo=r(rit,"WavLMForSequenceClassification"),rit.forEach(t),kzo=r($8e," (WavLM model)"),$8e.forEach(t),uo.forEach(t),Szo=i(ia),z5=n(ia,"P",{});var k8e=s(z5);Rzo=r(k8e,"The model is set in evaluation mode by default using "),Qge=n(k8e,"CODE",{});var tit=s(Qge);Bzo=r(tit,"model.eval()"),tit.forEach(t),Pzo=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(k8e,"CODE",{});var ait=s(Wge);Izo=r(ait,"model.train()"),ait.forEach(t),k8e.forEach(t),qzo=i(ia),T(Q5.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),$Be=i(f),td=n(f,"H2",{class:!0});var SIe=s(td);W5=n(SIe,"A",{id:!0,class:!0,href:!0});var nit=s(W5);Hge=n(nit,"SPAN",{});var sit=s(Hge);T(ny.$$.fragment,sit),sit.forEach(t),nit.forEach(t),Nzo=i(SIe),Uge=n(SIe,"SPAN",{});var lit=s(Uge);jzo=r(lit,"AutoModelForAudioFrameClassification"),lit.forEach(t),SIe.forEach(t),kBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(sy.$$.fragment,Us),Dzo=i(Us),ad=n(Us,"P",{});var kY=s(ad);Gzo=r(kY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),aV=n(kY,"A",{href:!0});var iit=s(aV);Ozo=r(iit,"from_pretrained()"),iit.forEach(t),Vzo=r(kY," class method or the "),nV=n(kY,"A",{href:!0});var dit=s(nV);Xzo=r(dit,"from_config()"),dit.forEach(t),zzo=r(kY,` class
method.`),kY.forEach(t),Qzo=i(Us),ly=n(Us,"P",{});var RIe=s(ly);Wzo=r(RIe,"This class cannot be instantiated directly using "),Jge=n(RIe,"CODE",{});var cit=s(Jge);Hzo=r(cit,"__init__()"),cit.forEach(t),Uzo=r(RIe," (throws an error)."),RIe.forEach(t),Jzo=i(Us),gt=n(Us,"DIV",{class:!0});var J3=s(gt);T(iy.$$.fragment,J3),Yzo=i(J3),Yge=n(J3,"P",{});var fit=s(Yge);Kzo=r(fit,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fit.forEach(t),Zzo=i(J3),nd=n(J3,"P",{});var SY=s(nd);eQo=r(SY,`Note:
Loading a model from its configuration file does `),Kge=n(SY,"STRONG",{});var mit=s(Kge);oQo=r(mit,"not"),mit.forEach(t),rQo=r(SY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(SY,"A",{href:!0});var git=s(sV);tQo=r(git,"from_pretrained()"),git.forEach(t),aQo=r(SY," to load the model weights."),SY.forEach(t),nQo=i(J3),T(H5.$$.fragment,J3),J3.forEach(t),sQo=i(Us),so=n(Us,"DIV",{class:!0});var da=s(so);T(dy.$$.fragment,da),lQo=i(da),Zge=n(da,"P",{});var hit=s(Zge);iQo=r(hit,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hit.forEach(t),dQo=i(da),Ia=n(da,"P",{});var Y3=s(Ia);cQo=r(Y3,"The model class to instantiate is selected based on the "),ehe=n(Y3,"CODE",{});var pit=s(ehe);fQo=r(pit,"model_type"),pit.forEach(t),mQo=r(Y3,` property of the config object (either
passed as an argument or loaded from `),ohe=n(Y3,"CODE",{});var uit=s(ohe);gQo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),hQo=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rhe=n(Y3,"CODE",{});var _it=s(rhe);pQo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),uQo=r(Y3,":"),Y3.forEach(t),_Qo=i(da),qa=n(da,"UL",{});var K3=s(qa);U5=n(K3,"LI",{});var S8e=s(U5);the=n(S8e,"STRONG",{});var bit=s(the);bQo=r(bit,"data2vec-audio"),bit.forEach(t),vQo=r(S8e," \u2014 "),lV=n(S8e,"A",{href:!0});var vit=s(lV);FQo=r(vit,"Data2VecAudioForAudioFrameClassification"),vit.forEach(t),TQo=r(S8e," (Data2VecAudio model)"),S8e.forEach(t),MQo=i(K3),J5=n(K3,"LI",{});var R8e=s(J5);ahe=n(R8e,"STRONG",{});var Fit=s(ahe);EQo=r(Fit,"unispeech-sat"),Fit.forEach(t),CQo=r(R8e," \u2014 "),iV=n(R8e,"A",{href:!0});var Tit=s(iV);wQo=r(Tit,"UniSpeechSatForAudioFrameClassification"),Tit.forEach(t),AQo=r(R8e," (UniSpeechSat model)"),R8e.forEach(t),yQo=i(K3),Y5=n(K3,"LI",{});var B8e=s(Y5);nhe=n(B8e,"STRONG",{});var Mit=s(nhe);LQo=r(Mit,"wav2vec2"),Mit.forEach(t),xQo=r(B8e," \u2014 "),dV=n(B8e,"A",{href:!0});var Eit=s(dV);$Qo=r(Eit,"Wav2Vec2ForAudioFrameClassification"),Eit.forEach(t),kQo=r(B8e," (Wav2Vec2 model)"),B8e.forEach(t),SQo=i(K3),K5=n(K3,"LI",{});var P8e=s(K5);she=n(P8e,"STRONG",{});var Cit=s(she);RQo=r(Cit,"wavlm"),Cit.forEach(t),BQo=r(P8e," \u2014 "),cV=n(P8e,"A",{href:!0});var wit=s(cV);PQo=r(wit,"WavLMForAudioFrameClassification"),wit.forEach(t),IQo=r(P8e," (WavLM model)"),P8e.forEach(t),K3.forEach(t),qQo=i(da),Z5=n(da,"P",{});var I8e=s(Z5);NQo=r(I8e,"The model is set in evaluation mode by default using "),lhe=n(I8e,"CODE",{});var Ait=s(lhe);jQo=r(Ait,"model.eval()"),Ait.forEach(t),DQo=r(I8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ihe=n(I8e,"CODE",{});var yit=s(ihe);GQo=r(yit,"model.train()"),yit.forEach(t),I8e.forEach(t),OQo=i(da),T(ev.$$.fragment,da),da.forEach(t),Us.forEach(t),SBe=i(f),sd=n(f,"H2",{class:!0});var BIe=s(sd);ov=n(BIe,"A",{id:!0,class:!0,href:!0});var Lit=s(ov);dhe=n(Lit,"SPAN",{});var xit=s(dhe);T(cy.$$.fragment,xit),xit.forEach(t),Lit.forEach(t),VQo=i(BIe),che=n(BIe,"SPAN",{});var $it=s(che);XQo=r($it,"AutoModelForCTC"),$it.forEach(t),BIe.forEach(t),RBe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(fy.$$.fragment,Js),zQo=i(Js),ld=n(Js,"P",{});var RY=s(ld);QQo=r(RY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),fV=n(RY,"A",{href:!0});var kit=s(fV);WQo=r(kit,"from_pretrained()"),kit.forEach(t),HQo=r(RY," class method or the "),mV=n(RY,"A",{href:!0});var Sit=s(mV);UQo=r(Sit,"from_config()"),Sit.forEach(t),JQo=r(RY,` class
method.`),RY.forEach(t),YQo=i(Js),my=n(Js,"P",{});var PIe=s(my);KQo=r(PIe,"This class cannot be instantiated directly using "),fhe=n(PIe,"CODE",{});var Rit=s(fhe);ZQo=r(Rit,"__init__()"),Rit.forEach(t),eWo=r(PIe," (throws an error)."),PIe.forEach(t),oWo=i(Js),ht=n(Js,"DIV",{class:!0});var Z3=s(ht);T(gy.$$.fragment,Z3),rWo=i(Z3),mhe=n(Z3,"P",{});var Bit=s(mhe);tWo=r(Bit,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bit.forEach(t),aWo=i(Z3),id=n(Z3,"P",{});var BY=s(id);nWo=r(BY,`Note:
Loading a model from its configuration file does `),ghe=n(BY,"STRONG",{});var Pit=s(ghe);sWo=r(Pit,"not"),Pit.forEach(t),lWo=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(BY,"A",{href:!0});var Iit=s(gV);iWo=r(Iit,"from_pretrained()"),Iit.forEach(t),dWo=r(BY," to load the model weights."),BY.forEach(t),cWo=i(Z3),T(rv.$$.fragment,Z3),Z3.forEach(t),fWo=i(Js),lo=n(Js,"DIV",{class:!0});var ca=s(lo);T(hy.$$.fragment,ca),mWo=i(ca),hhe=n(ca,"P",{});var qit=s(hhe);gWo=r(qit,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),qit.forEach(t),hWo=i(ca),Na=n(ca,"P",{});var ew=s(Na);pWo=r(ew,"The model class to instantiate is selected based on the "),phe=n(ew,"CODE",{});var Nit=s(phe);uWo=r(Nit,"model_type"),Nit.forEach(t),_Wo=r(ew,` property of the config object (either
passed as an argument or loaded from `),uhe=n(ew,"CODE",{});var jit=s(uhe);bWo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),vWo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_he=n(ew,"CODE",{});var Dit=s(_he);FWo=r(Dit,"pretrained_model_name_or_path"),Dit.forEach(t),TWo=r(ew,":"),ew.forEach(t),MWo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);tv=n(_o,"LI",{});var q8e=s(tv);bhe=n(q8e,"STRONG",{});var Git=s(bhe);EWo=r(Git,"data2vec-audio"),Git.forEach(t),CWo=r(q8e," \u2014 "),hV=n(q8e,"A",{href:!0});var Oit=s(hV);wWo=r(Oit,"Data2VecAudioForCTC"),Oit.forEach(t),AWo=r(q8e," (Data2VecAudio model)"),q8e.forEach(t),yWo=i(_o),av=n(_o,"LI",{});var N8e=s(av);vhe=n(N8e,"STRONG",{});var Vit=s(vhe);LWo=r(Vit,"hubert"),Vit.forEach(t),xWo=r(N8e," \u2014 "),pV=n(N8e,"A",{href:!0});var Xit=s(pV);$Wo=r(Xit,"HubertForCTC"),Xit.forEach(t),kWo=r(N8e," (Hubert model)"),N8e.forEach(t),SWo=i(_o),nv=n(_o,"LI",{});var j8e=s(nv);Fhe=n(j8e,"STRONG",{});var zit=s(Fhe);RWo=r(zit,"sew"),zit.forEach(t),BWo=r(j8e," \u2014 "),uV=n(j8e,"A",{href:!0});var Qit=s(uV);PWo=r(Qit,"SEWForCTC"),Qit.forEach(t),IWo=r(j8e," (SEW model)"),j8e.forEach(t),qWo=i(_o),sv=n(_o,"LI",{});var D8e=s(sv);The=n(D8e,"STRONG",{});var Wit=s(The);NWo=r(Wit,"sew-d"),Wit.forEach(t),jWo=r(D8e," \u2014 "),_V=n(D8e,"A",{href:!0});var Hit=s(_V);DWo=r(Hit,"SEWDForCTC"),Hit.forEach(t),GWo=r(D8e," (SEW-D model)"),D8e.forEach(t),OWo=i(_o),lv=n(_o,"LI",{});var G8e=s(lv);Mhe=n(G8e,"STRONG",{});var Uit=s(Mhe);VWo=r(Uit,"unispeech"),Uit.forEach(t),XWo=r(G8e," \u2014 "),bV=n(G8e,"A",{href:!0});var Jit=s(bV);zWo=r(Jit,"UniSpeechForCTC"),Jit.forEach(t),QWo=r(G8e," (UniSpeech model)"),G8e.forEach(t),WWo=i(_o),iv=n(_o,"LI",{});var O8e=s(iv);Ehe=n(O8e,"STRONG",{});var Yit=s(Ehe);HWo=r(Yit,"unispeech-sat"),Yit.forEach(t),UWo=r(O8e," \u2014 "),vV=n(O8e,"A",{href:!0});var Kit=s(vV);JWo=r(Kit,"UniSpeechSatForCTC"),Kit.forEach(t),YWo=r(O8e," (UniSpeechSat model)"),O8e.forEach(t),KWo=i(_o),dv=n(_o,"LI",{});var V8e=s(dv);Che=n(V8e,"STRONG",{});var Zit=s(Che);ZWo=r(Zit,"wav2vec2"),Zit.forEach(t),eHo=r(V8e," \u2014 "),FV=n(V8e,"A",{href:!0});var edt=s(FV);oHo=r(edt,"Wav2Vec2ForCTC"),edt.forEach(t),rHo=r(V8e," (Wav2Vec2 model)"),V8e.forEach(t),tHo=i(_o),cv=n(_o,"LI",{});var X8e=s(cv);whe=n(X8e,"STRONG",{});var odt=s(whe);aHo=r(odt,"wavlm"),odt.forEach(t),nHo=r(X8e," \u2014 "),TV=n(X8e,"A",{href:!0});var rdt=s(TV);sHo=r(rdt,"WavLMForCTC"),rdt.forEach(t),lHo=r(X8e," (WavLM model)"),X8e.forEach(t),_o.forEach(t),iHo=i(ca),fv=n(ca,"P",{});var z8e=s(fv);dHo=r(z8e,"The model is set in evaluation mode by default using "),Ahe=n(z8e,"CODE",{});var tdt=s(Ahe);cHo=r(tdt,"model.eval()"),tdt.forEach(t),fHo=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yhe=n(z8e,"CODE",{});var adt=s(yhe);mHo=r(adt,"model.train()"),adt.forEach(t),z8e.forEach(t),gHo=i(ca),T(mv.$$.fragment,ca),ca.forEach(t),Js.forEach(t),BBe=i(f),dd=n(f,"H2",{class:!0});var IIe=s(dd);gv=n(IIe,"A",{id:!0,class:!0,href:!0});var ndt=s(gv);Lhe=n(ndt,"SPAN",{});var sdt=s(Lhe);T(py.$$.fragment,sdt),sdt.forEach(t),ndt.forEach(t),hHo=i(IIe),xhe=n(IIe,"SPAN",{});var ldt=s(xhe);pHo=r(ldt,"AutoModelForSpeechSeq2Seq"),ldt.forEach(t),IIe.forEach(t),PBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(uy.$$.fragment,Ys),uHo=i(Ys),cd=n(Ys,"P",{});var PY=s(cd);_Ho=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),MV=n(PY,"A",{href:!0});var idt=s(MV);bHo=r(idt,"from_pretrained()"),idt.forEach(t),vHo=r(PY," class method or the "),EV=n(PY,"A",{href:!0});var ddt=s(EV);FHo=r(ddt,"from_config()"),ddt.forEach(t),THo=r(PY,` class
method.`),PY.forEach(t),MHo=i(Ys),_y=n(Ys,"P",{});var qIe=s(_y);EHo=r(qIe,"This class cannot be instantiated directly using "),$he=n(qIe,"CODE",{});var cdt=s($he);CHo=r(cdt,"__init__()"),cdt.forEach(t),wHo=r(qIe," (throws an error)."),qIe.forEach(t),AHo=i(Ys),pt=n(Ys,"DIV",{class:!0});var ow=s(pt);T(by.$$.fragment,ow),yHo=i(ow),khe=n(ow,"P",{});var fdt=s(khe);LHo=r(fdt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fdt.forEach(t),xHo=i(ow),fd=n(ow,"P",{});var IY=s(fd);$Ho=r(IY,`Note:
Loading a model from its configuration file does `),She=n(IY,"STRONG",{});var mdt=s(She);kHo=r(mdt,"not"),mdt.forEach(t),SHo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(IY,"A",{href:!0});var gdt=s(CV);RHo=r(gdt,"from_pretrained()"),gdt.forEach(t),BHo=r(IY," to load the model weights."),IY.forEach(t),PHo=i(ow),T(hv.$$.fragment,ow),ow.forEach(t),IHo=i(Ys),io=n(Ys,"DIV",{class:!0});var fa=s(io);T(vy.$$.fragment,fa),qHo=i(fa),Rhe=n(fa,"P",{});var hdt=s(Rhe);NHo=r(hdt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hdt.forEach(t),jHo=i(fa),ja=n(fa,"P",{});var rw=s(ja);DHo=r(rw,"The model class to instantiate is selected based on the "),Bhe=n(rw,"CODE",{});var pdt=s(Bhe);GHo=r(pdt,"model_type"),pdt.forEach(t),OHo=r(rw,` property of the config object (either
passed as an argument or loaded from `),Phe=n(rw,"CODE",{});var udt=s(Phe);VHo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),XHo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(rw,"CODE",{});var _dt=s(Ihe);zHo=r(_dt,"pretrained_model_name_or_path"),_dt.forEach(t),QHo=r(rw,":"),rw.forEach(t),WHo=i(fa),Fy=n(fa,"UL",{});var NIe=s(Fy);pv=n(NIe,"LI",{});var Q8e=s(pv);qhe=n(Q8e,"STRONG",{});var bdt=s(qhe);HHo=r(bdt,"speech-encoder-decoder"),bdt.forEach(t),UHo=r(Q8e," \u2014 "),wV=n(Q8e,"A",{href:!0});var vdt=s(wV);JHo=r(vdt,"SpeechEncoderDecoderModel"),vdt.forEach(t),YHo=r(Q8e," (Speech Encoder decoder model)"),Q8e.forEach(t),KHo=i(NIe),uv=n(NIe,"LI",{});var W8e=s(uv);Nhe=n(W8e,"STRONG",{});var Fdt=s(Nhe);ZHo=r(Fdt,"speech_to_text"),Fdt.forEach(t),eUo=r(W8e," \u2014 "),AV=n(W8e,"A",{href:!0});var Tdt=s(AV);oUo=r(Tdt,"Speech2TextForConditionalGeneration"),Tdt.forEach(t),rUo=r(W8e," (Speech2Text model)"),W8e.forEach(t),NIe.forEach(t),tUo=i(fa),_v=n(fa,"P",{});var H8e=s(_v);aUo=r(H8e,"The model is set in evaluation mode by default using "),jhe=n(H8e,"CODE",{});var Mdt=s(jhe);nUo=r(Mdt,"model.eval()"),Mdt.forEach(t),sUo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(H8e,"CODE",{});var Edt=s(Dhe);lUo=r(Edt,"model.train()"),Edt.forEach(t),H8e.forEach(t),iUo=i(fa),T(bv.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),IBe=i(f),md=n(f,"H2",{class:!0});var jIe=s(md);vv=n(jIe,"A",{id:!0,class:!0,href:!0});var Cdt=s(vv);Ghe=n(Cdt,"SPAN",{});var wdt=s(Ghe);T(Ty.$$.fragment,wdt),wdt.forEach(t),Cdt.forEach(t),dUo=i(jIe),Ohe=n(jIe,"SPAN",{});var Adt=s(Ohe);cUo=r(Adt,"AutoModelForAudioXVector"),Adt.forEach(t),jIe.forEach(t),qBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(My.$$.fragment,Ks),fUo=i(Ks),gd=n(Ks,"P",{});var qY=s(gd);mUo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yV=n(qY,"A",{href:!0});var ydt=s(yV);gUo=r(ydt,"from_pretrained()"),ydt.forEach(t),hUo=r(qY," class method or the "),LV=n(qY,"A",{href:!0});var Ldt=s(LV);pUo=r(Ldt,"from_config()"),Ldt.forEach(t),uUo=r(qY,` class
method.`),qY.forEach(t),_Uo=i(Ks),Ey=n(Ks,"P",{});var DIe=s(Ey);bUo=r(DIe,"This class cannot be instantiated directly using "),Vhe=n(DIe,"CODE",{});var xdt=s(Vhe);vUo=r(xdt,"__init__()"),xdt.forEach(t),FUo=r(DIe," (throws an error)."),DIe.forEach(t),TUo=i(Ks),ut=n(Ks,"DIV",{class:!0});var tw=s(ut);T(Cy.$$.fragment,tw),MUo=i(tw),Xhe=n(tw,"P",{});var $dt=s(Xhe);EUo=r($dt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$dt.forEach(t),CUo=i(tw),hd=n(tw,"P",{});var NY=s(hd);wUo=r(NY,`Note:
Loading a model from its configuration file does `),zhe=n(NY,"STRONG",{});var kdt=s(zhe);AUo=r(kdt,"not"),kdt.forEach(t),yUo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(NY,"A",{href:!0});var Sdt=s(xV);LUo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),xUo=r(NY," to load the model weights."),NY.forEach(t),$Uo=i(tw),T(Fv.$$.fragment,tw),tw.forEach(t),kUo=i(Ks),co=n(Ks,"DIV",{class:!0});var ma=s(co);T(wy.$$.fragment,ma),SUo=i(ma),Qhe=n(ma,"P",{});var Rdt=s(Qhe);RUo=r(Rdt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rdt.forEach(t),BUo=i(ma),Da=n(ma,"P",{});var aw=s(Da);PUo=r(aw,"The model class to instantiate is selected based on the "),Whe=n(aw,"CODE",{});var Bdt=s(Whe);IUo=r(Bdt,"model_type"),Bdt.forEach(t),qUo=r(aw,` property of the config object (either
passed as an argument or loaded from `),Hhe=n(aw,"CODE",{});var Pdt=s(Hhe);NUo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),jUo=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uhe=n(aw,"CODE",{});var Idt=s(Uhe);DUo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),GUo=r(aw,":"),aw.forEach(t),OUo=i(ma),Ga=n(ma,"UL",{});var nw=s(Ga);Tv=n(nw,"LI",{});var U8e=s(Tv);Jhe=n(U8e,"STRONG",{});var qdt=s(Jhe);VUo=r(qdt,"data2vec-audio"),qdt.forEach(t),XUo=r(U8e," \u2014 "),$V=n(U8e,"A",{href:!0});var Ndt=s($V);zUo=r(Ndt,"Data2VecAudioForXVector"),Ndt.forEach(t),QUo=r(U8e," (Data2VecAudio model)"),U8e.forEach(t),WUo=i(nw),Mv=n(nw,"LI",{});var J8e=s(Mv);Yhe=n(J8e,"STRONG",{});var jdt=s(Yhe);HUo=r(jdt,"unispeech-sat"),jdt.forEach(t),UUo=r(J8e," \u2014 "),kV=n(J8e,"A",{href:!0});var Ddt=s(kV);JUo=r(Ddt,"UniSpeechSatForXVector"),Ddt.forEach(t),YUo=r(J8e," (UniSpeechSat model)"),J8e.forEach(t),KUo=i(nw),Ev=n(nw,"LI",{});var Y8e=s(Ev);Khe=n(Y8e,"STRONG",{});var Gdt=s(Khe);ZUo=r(Gdt,"wav2vec2"),Gdt.forEach(t),eJo=r(Y8e," \u2014 "),SV=n(Y8e,"A",{href:!0});var Odt=s(SV);oJo=r(Odt,"Wav2Vec2ForXVector"),Odt.forEach(t),rJo=r(Y8e," (Wav2Vec2 model)"),Y8e.forEach(t),tJo=i(nw),Cv=n(nw,"LI",{});var K8e=s(Cv);Zhe=n(K8e,"STRONG",{});var Vdt=s(Zhe);aJo=r(Vdt,"wavlm"),Vdt.forEach(t),nJo=r(K8e," \u2014 "),RV=n(K8e,"A",{href:!0});var Xdt=s(RV);sJo=r(Xdt,"WavLMForXVector"),Xdt.forEach(t),lJo=r(K8e," (WavLM model)"),K8e.forEach(t),nw.forEach(t),iJo=i(ma),wv=n(ma,"P",{});var Z8e=s(wv);dJo=r(Z8e,"The model is set in evaluation mode by default using "),epe=n(Z8e,"CODE",{});var zdt=s(epe);cJo=r(zdt,"model.eval()"),zdt.forEach(t),fJo=r(Z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(Z8e,"CODE",{});var Qdt=s(ope);mJo=r(Qdt,"model.train()"),Qdt.forEach(t),Z8e.forEach(t),gJo=i(ma),T(Av.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),NBe=i(f),pd=n(f,"H2",{class:!0});var GIe=s(pd);yv=n(GIe,"A",{id:!0,class:!0,href:!0});var Wdt=s(yv);rpe=n(Wdt,"SPAN",{});var Hdt=s(rpe);T(Ay.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),hJo=i(GIe),tpe=n(GIe,"SPAN",{});var Udt=s(tpe);pJo=r(Udt,"AutoModelForMaskedImageModeling"),Udt.forEach(t),GIe.forEach(t),jBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(yy.$$.fragment,Zs),uJo=i(Zs),ud=n(Zs,"P",{});var jY=s(ud);_Jo=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),BV=n(jY,"A",{href:!0});var Jdt=s(BV);bJo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),vJo=r(jY," class method or the "),PV=n(jY,"A",{href:!0});var Ydt=s(PV);FJo=r(Ydt,"from_config()"),Ydt.forEach(t),TJo=r(jY,` class
method.`),jY.forEach(t),MJo=i(Zs),Ly=n(Zs,"P",{});var OIe=s(Ly);EJo=r(OIe,"This class cannot be instantiated directly using "),ape=n(OIe,"CODE",{});var Kdt=s(ape);CJo=r(Kdt,"__init__()"),Kdt.forEach(t),wJo=r(OIe," (throws an error)."),OIe.forEach(t),AJo=i(Zs),_t=n(Zs,"DIV",{class:!0});var sw=s(_t);T(xy.$$.fragment,sw),yJo=i(sw),npe=n(sw,"P",{});var Zdt=s(npe);LJo=r(Zdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zdt.forEach(t),xJo=i(sw),_d=n(sw,"P",{});var DY=s(_d);$Jo=r(DY,`Note:
Loading a model from its configuration file does `),spe=n(DY,"STRONG",{});var ect=s(spe);kJo=r(ect,"not"),ect.forEach(t),SJo=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IV=n(DY,"A",{href:!0});var oct=s(IV);RJo=r(oct,"from_pretrained()"),oct.forEach(t),BJo=r(DY," to load the model weights."),DY.forEach(t),PJo=i(sw),T(Lv.$$.fragment,sw),sw.forEach(t),IJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ga=s(fo);T($y.$$.fragment,ga),qJo=i(ga),lpe=n(ga,"P",{});var rct=s(lpe);NJo=r(rct,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rct.forEach(t),jJo=i(ga),Oa=n(ga,"P",{});var lw=s(Oa);DJo=r(lw,"The model class to instantiate is selected based on the "),ipe=n(lw,"CODE",{});var tct=s(ipe);GJo=r(tct,"model_type"),tct.forEach(t),OJo=r(lw,` property of the config object (either
passed as an argument or loaded from `),dpe=n(lw,"CODE",{});var act=s(dpe);VJo=r(act,"pretrained_model_name_or_path"),act.forEach(t),XJo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cpe=n(lw,"CODE",{});var nct=s(cpe);zJo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),QJo=r(lw,":"),lw.forEach(t),WJo=i(ga),bd=n(ga,"UL",{});var GY=s(bd);xv=n(GY,"LI",{});var exe=s(xv);fpe=n(exe,"STRONG",{});var sct=s(fpe);HJo=r(sct,"deit"),sct.forEach(t),UJo=r(exe," \u2014 "),qV=n(exe,"A",{href:!0});var lct=s(qV);JJo=r(lct,"DeiTForMaskedImageModeling"),lct.forEach(t),YJo=r(exe," (DeiT model)"),exe.forEach(t),KJo=i(GY),$v=n(GY,"LI",{});var oxe=s($v);mpe=n(oxe,"STRONG",{});var ict=s(mpe);ZJo=r(ict,"swin"),ict.forEach(t),eYo=r(oxe," \u2014 "),NV=n(oxe,"A",{href:!0});var dct=s(NV);oYo=r(dct,"SwinForMaskedImageModeling"),dct.forEach(t),rYo=r(oxe," (Swin model)"),oxe.forEach(t),tYo=i(GY),kv=n(GY,"LI",{});var rxe=s(kv);gpe=n(rxe,"STRONG",{});var cct=s(gpe);aYo=r(cct,"vit"),cct.forEach(t),nYo=r(rxe," \u2014 "),jV=n(rxe,"A",{href:!0});var fct=s(jV);sYo=r(fct,"ViTForMaskedImageModeling"),fct.forEach(t),lYo=r(rxe," (ViT model)"),rxe.forEach(t),GY.forEach(t),iYo=i(ga),Sv=n(ga,"P",{});var txe=s(Sv);dYo=r(txe,"The model is set in evaluation mode by default using "),hpe=n(txe,"CODE",{});var mct=s(hpe);cYo=r(mct,"model.eval()"),mct.forEach(t),fYo=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ppe=n(txe,"CODE",{});var gct=s(ppe);mYo=r(gct,"model.train()"),gct.forEach(t),txe.forEach(t),gYo=i(ga),T(Rv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),DBe=i(f),vd=n(f,"H2",{class:!0});var VIe=s(vd);Bv=n(VIe,"A",{id:!0,class:!0,href:!0});var hct=s(Bv);upe=n(hct,"SPAN",{});var pct=s(upe);T(ky.$$.fragment,pct),pct.forEach(t),hct.forEach(t),hYo=i(VIe),_pe=n(VIe,"SPAN",{});var uct=s(_pe);pYo=r(uct,"AutoModelForObjectDetection"),uct.forEach(t),VIe.forEach(t),GBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(Sy.$$.fragment,el),uYo=i(el),Fd=n(el,"P",{});var OY=s(Fd);_Yo=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),DV=n(OY,"A",{href:!0});var _ct=s(DV);bYo=r(_ct,"from_pretrained()"),_ct.forEach(t),vYo=r(OY," class method or the "),GV=n(OY,"A",{href:!0});var bct=s(GV);FYo=r(bct,"from_config()"),bct.forEach(t),TYo=r(OY,` class
method.`),OY.forEach(t),MYo=i(el),Ry=n(el,"P",{});var XIe=s(Ry);EYo=r(XIe,"This class cannot be instantiated directly using "),bpe=n(XIe,"CODE",{});var vct=s(bpe);CYo=r(vct,"__init__()"),vct.forEach(t),wYo=r(XIe," (throws an error)."),XIe.forEach(t),AYo=i(el),bt=n(el,"DIV",{class:!0});var iw=s(bt);T(By.$$.fragment,iw),yYo=i(iw),vpe=n(iw,"P",{});var Fct=s(vpe);LYo=r(Fct,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Fct.forEach(t),xYo=i(iw),Td=n(iw,"P",{});var VY=s(Td);$Yo=r(VY,`Note:
Loading a model from its configuration file does `),Fpe=n(VY,"STRONG",{});var Tct=s(Fpe);kYo=r(Tct,"not"),Tct.forEach(t),SYo=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(VY,"A",{href:!0});var Mct=s(OV);RYo=r(Mct,"from_pretrained()"),Mct.forEach(t),BYo=r(VY," to load the model weights."),VY.forEach(t),PYo=i(iw),T(Pv.$$.fragment,iw),iw.forEach(t),IYo=i(el),mo=n(el,"DIV",{class:!0});var ha=s(mo);T(Py.$$.fragment,ha),qYo=i(ha),Tpe=n(ha,"P",{});var Ect=s(Tpe);NYo=r(Ect,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Ect.forEach(t),jYo=i(ha),Va=n(ha,"P",{});var dw=s(Va);DYo=r(dw,"The model class to instantiate is selected based on the "),Mpe=n(dw,"CODE",{});var Cct=s(Mpe);GYo=r(Cct,"model_type"),Cct.forEach(t),OYo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Epe=n(dw,"CODE",{});var wct=s(Epe);VYo=r(wct,"pretrained_model_name_or_path"),wct.forEach(t),XYo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cpe=n(dw,"CODE",{});var Act=s(Cpe);zYo=r(Act,"pretrained_model_name_or_path"),Act.forEach(t),QYo=r(dw,":"),dw.forEach(t),WYo=i(ha),Iy=n(ha,"UL",{});var zIe=s(Iy);Iv=n(zIe,"LI",{});var axe=s(Iv);wpe=n(axe,"STRONG",{});var yct=s(wpe);HYo=r(yct,"detr"),yct.forEach(t),UYo=r(axe," \u2014 "),VV=n(axe,"A",{href:!0});var Lct=s(VV);JYo=r(Lct,"DetrForObjectDetection"),Lct.forEach(t),YYo=r(axe," (DETR model)"),axe.forEach(t),KYo=i(zIe),qv=n(zIe,"LI",{});var nxe=s(qv);Ape=n(nxe,"STRONG",{});var xct=s(Ape);ZYo=r(xct,"yolos"),xct.forEach(t),eKo=r(nxe," \u2014 "),XV=n(nxe,"A",{href:!0});var $ct=s(XV);oKo=r($ct,"YolosForObjectDetection"),$ct.forEach(t),rKo=r(nxe," (YOLOS model)"),nxe.forEach(t),zIe.forEach(t),tKo=i(ha),Nv=n(ha,"P",{});var sxe=s(Nv);aKo=r(sxe,"The model is set in evaluation mode by default using "),ype=n(sxe,"CODE",{});var kct=s(ype);nKo=r(kct,"model.eval()"),kct.forEach(t),sKo=r(sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lpe=n(sxe,"CODE",{});var Sct=s(Lpe);lKo=r(Sct,"model.train()"),Sct.forEach(t),sxe.forEach(t),iKo=i(ha),T(jv.$$.fragment,ha),ha.forEach(t),el.forEach(t),OBe=i(f),Md=n(f,"H2",{class:!0});var QIe=s(Md);Dv=n(QIe,"A",{id:!0,class:!0,href:!0});var Rct=s(Dv);xpe=n(Rct,"SPAN",{});var Bct=s(xpe);T(qy.$$.fragment,Bct),Bct.forEach(t),Rct.forEach(t),dKo=i(QIe),$pe=n(QIe,"SPAN",{});var Pct=s($pe);cKo=r(Pct,"AutoModelForImageSegmentation"),Pct.forEach(t),QIe.forEach(t),VBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(Ny.$$.fragment,ol),fKo=i(ol),Ed=n(ol,"P",{});var XY=s(Ed);mKo=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),zV=n(XY,"A",{href:!0});var Ict=s(zV);gKo=r(Ict,"from_pretrained()"),Ict.forEach(t),hKo=r(XY," class method or the "),QV=n(XY,"A",{href:!0});var qct=s(QV);pKo=r(qct,"from_config()"),qct.forEach(t),uKo=r(XY,` class
method.`),XY.forEach(t),_Ko=i(ol),jy=n(ol,"P",{});var WIe=s(jy);bKo=r(WIe,"This class cannot be instantiated directly using "),kpe=n(WIe,"CODE",{});var Nct=s(kpe);vKo=r(Nct,"__init__()"),Nct.forEach(t),FKo=r(WIe," (throws an error)."),WIe.forEach(t),TKo=i(ol),vt=n(ol,"DIV",{class:!0});var cw=s(vt);T(Dy.$$.fragment,cw),MKo=i(cw),Spe=n(cw,"P",{});var jct=s(Spe);EKo=r(jct,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jct.forEach(t),CKo=i(cw),Cd=n(cw,"P",{});var zY=s(Cd);wKo=r(zY,`Note:
Loading a model from its configuration file does `),Rpe=n(zY,"STRONG",{});var Dct=s(Rpe);AKo=r(Dct,"not"),Dct.forEach(t),yKo=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(zY,"A",{href:!0});var Gct=s(WV);LKo=r(Gct,"from_pretrained()"),Gct.forEach(t),xKo=r(zY," to load the model weights."),zY.forEach(t),$Ko=i(cw),T(Gv.$$.fragment,cw),cw.forEach(t),kKo=i(ol),go=n(ol,"DIV",{class:!0});var pa=s(go);T(Gy.$$.fragment,pa),SKo=i(pa),Bpe=n(pa,"P",{});var Oct=s(Bpe);RKo=r(Oct,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Oct.forEach(t),BKo=i(pa),Xa=n(pa,"P",{});var fw=s(Xa);PKo=r(fw,"The model class to instantiate is selected based on the "),Ppe=n(fw,"CODE",{});var Vct=s(Ppe);IKo=r(Vct,"model_type"),Vct.forEach(t),qKo=r(fw,` property of the config object (either
passed as an argument or loaded from `),Ipe=n(fw,"CODE",{});var Xct=s(Ipe);NKo=r(Xct,"pretrained_model_name_or_path"),Xct.forEach(t),jKo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(fw,"CODE",{});var zct=s(qpe);DKo=r(zct,"pretrained_model_name_or_path"),zct.forEach(t),GKo=r(fw,":"),fw.forEach(t),OKo=i(pa),Npe=n(pa,"UL",{});var Qct=s(Npe);Ov=n(Qct,"LI",{});var lxe=s(Ov);jpe=n(lxe,"STRONG",{});var Wct=s(jpe);VKo=r(Wct,"detr"),Wct.forEach(t),XKo=r(lxe," \u2014 "),HV=n(lxe,"A",{href:!0});var Hct=s(HV);zKo=r(Hct,"DetrForSegmentation"),Hct.forEach(t),QKo=r(lxe," (DETR model)"),lxe.forEach(t),Qct.forEach(t),WKo=i(pa),Vv=n(pa,"P",{});var ixe=s(Vv);HKo=r(ixe,"The model is set in evaluation mode by default using "),Dpe=n(ixe,"CODE",{});var Uct=s(Dpe);UKo=r(Uct,"model.eval()"),Uct.forEach(t),JKo=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gpe=n(ixe,"CODE",{});var Jct=s(Gpe);YKo=r(Jct,"model.train()"),Jct.forEach(t),ixe.forEach(t),KKo=i(pa),T(Xv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),XBe=i(f),wd=n(f,"H2",{class:!0});var HIe=s(wd);zv=n(HIe,"A",{id:!0,class:!0,href:!0});var Yct=s(zv);Ope=n(Yct,"SPAN",{});var Kct=s(Ope);T(Oy.$$.fragment,Kct),Kct.forEach(t),Yct.forEach(t),ZKo=i(HIe),Vpe=n(HIe,"SPAN",{});var Zct=s(Vpe);eZo=r(Zct,"AutoModelForSemanticSegmentation"),Zct.forEach(t),HIe.forEach(t),zBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(Vy.$$.fragment,rl),oZo=i(rl),Ad=n(rl,"P",{});var QY=s(Ad);rZo=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),UV=n(QY,"A",{href:!0});var eft=s(UV);tZo=r(eft,"from_pretrained()"),eft.forEach(t),aZo=r(QY," class method or the "),JV=n(QY,"A",{href:!0});var oft=s(JV);nZo=r(oft,"from_config()"),oft.forEach(t),sZo=r(QY,` class
method.`),QY.forEach(t),lZo=i(rl),Xy=n(rl,"P",{});var UIe=s(Xy);iZo=r(UIe,"This class cannot be instantiated directly using "),Xpe=n(UIe,"CODE",{});var rft=s(Xpe);dZo=r(rft,"__init__()"),rft.forEach(t),cZo=r(UIe," (throws an error)."),UIe.forEach(t),fZo=i(rl),Ft=n(rl,"DIV",{class:!0});var mw=s(Ft);T(zy.$$.fragment,mw),mZo=i(mw),zpe=n(mw,"P",{});var tft=s(zpe);gZo=r(tft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tft.forEach(t),hZo=i(mw),yd=n(mw,"P",{});var WY=s(yd);pZo=r(WY,`Note:
Loading a model from its configuration file does `),Qpe=n(WY,"STRONG",{});var aft=s(Qpe);uZo=r(aft,"not"),aft.forEach(t),_Zo=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(WY,"A",{href:!0});var nft=s(YV);bZo=r(nft,"from_pretrained()"),nft.forEach(t),vZo=r(WY," to load the model weights."),WY.forEach(t),FZo=i(mw),T(Qv.$$.fragment,mw),mw.forEach(t),TZo=i(rl),ho=n(rl,"DIV",{class:!0});var ua=s(ho);T(Qy.$$.fragment,ua),MZo=i(ua),Wpe=n(ua,"P",{});var sft=s(Wpe);EZo=r(sft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sft.forEach(t),CZo=i(ua),za=n(ua,"P",{});var gw=s(za);wZo=r(gw,"The model class to instantiate is selected based on the "),Hpe=n(gw,"CODE",{});var lft=s(Hpe);AZo=r(lft,"model_type"),lft.forEach(t),yZo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Upe=n(gw,"CODE",{});var ift=s(Upe);LZo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),xZo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(gw,"CODE",{});var dft=s(Jpe);$Zo=r(dft,"pretrained_model_name_or_path"),dft.forEach(t),kZo=r(gw,":"),gw.forEach(t),SZo=i(ua),Qa=n(ua,"UL",{});var hw=s(Qa);Wv=n(hw,"LI",{});var dxe=s(Wv);Ype=n(dxe,"STRONG",{});var cft=s(Ype);RZo=r(cft,"beit"),cft.forEach(t),BZo=r(dxe," \u2014 "),KV=n(dxe,"A",{href:!0});var fft=s(KV);PZo=r(fft,"BeitForSemanticSegmentation"),fft.forEach(t),IZo=r(dxe," (BEiT model)"),dxe.forEach(t),qZo=i(hw),Hv=n(hw,"LI",{});var cxe=s(Hv);Kpe=n(cxe,"STRONG",{});var mft=s(Kpe);NZo=r(mft,"data2vec-vision"),mft.forEach(t),jZo=r(cxe," \u2014 "),ZV=n(cxe,"A",{href:!0});var gft=s(ZV);DZo=r(gft,"Data2VecVisionForSemanticSegmentation"),gft.forEach(t),GZo=r(cxe," (Data2VecVision model)"),cxe.forEach(t),OZo=i(hw),Uv=n(hw,"LI",{});var fxe=s(Uv);Zpe=n(fxe,"STRONG",{});var hft=s(Zpe);VZo=r(hft,"dpt"),hft.forEach(t),XZo=r(fxe," \u2014 "),eX=n(fxe,"A",{href:!0});var pft=s(eX);zZo=r(pft,"DPTForSemanticSegmentation"),pft.forEach(t),QZo=r(fxe," (DPT model)"),fxe.forEach(t),WZo=i(hw),Jv=n(hw,"LI",{});var mxe=s(Jv);eue=n(mxe,"STRONG",{});var uft=s(eue);HZo=r(uft,"segformer"),uft.forEach(t),UZo=r(mxe," \u2014 "),oX=n(mxe,"A",{href:!0});var _ft=s(oX);JZo=r(_ft,"SegformerForSemanticSegmentation"),_ft.forEach(t),YZo=r(mxe," (SegFormer model)"),mxe.forEach(t),hw.forEach(t),KZo=i(ua),Yv=n(ua,"P",{});var gxe=s(Yv);ZZo=r(gxe,"The model is set in evaluation mode by default using "),oue=n(gxe,"CODE",{});var bft=s(oue);eer=r(bft,"model.eval()"),bft.forEach(t),oer=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rue=n(gxe,"CODE",{});var vft=s(rue);rer=r(vft,"model.train()"),vft.forEach(t),gxe.forEach(t),ter=i(ua),T(Kv.$$.fragment,ua),ua.forEach(t),rl.forEach(t),QBe=i(f),Ld=n(f,"H2",{class:!0});var JIe=s(Ld);Zv=n(JIe,"A",{id:!0,class:!0,href:!0});var Fft=s(Zv);tue=n(Fft,"SPAN",{});var Tft=s(tue);T(Wy.$$.fragment,Tft),Tft.forEach(t),Fft.forEach(t),aer=i(JIe),aue=n(JIe,"SPAN",{});var Mft=s(aue);ner=r(Mft,"AutoModelForInstanceSegmentation"),Mft.forEach(t),JIe.forEach(t),WBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Hy.$$.fragment,tl),ser=i(tl),xd=n(tl,"P",{});var HY=s(xd);ler=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),rX=n(HY,"A",{href:!0});var Eft=s(rX);ier=r(Eft,"from_pretrained()"),Eft.forEach(t),der=r(HY," class method or the "),tX=n(HY,"A",{href:!0});var Cft=s(tX);cer=r(Cft,"from_config()"),Cft.forEach(t),fer=r(HY,` class
method.`),HY.forEach(t),mer=i(tl),Uy=n(tl,"P",{});var YIe=s(Uy);ger=r(YIe,"This class cannot be instantiated directly using "),nue=n(YIe,"CODE",{});var wft=s(nue);her=r(wft,"__init__()"),wft.forEach(t),per=r(YIe," (throws an error)."),YIe.forEach(t),uer=i(tl),Tt=n(tl,"DIV",{class:!0});var pw=s(Tt);T(Jy.$$.fragment,pw),_er=i(pw),sue=n(pw,"P",{});var Aft=s(sue);ber=r(Aft,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Aft.forEach(t),ver=i(pw),$d=n(pw,"P",{});var UY=s($d);Fer=r(UY,`Note:
Loading a model from its configuration file does `),lue=n(UY,"STRONG",{});var yft=s(lue);Ter=r(yft,"not"),yft.forEach(t),Mer=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(UY,"A",{href:!0});var Lft=s(aX);Eer=r(Lft,"from_pretrained()"),Lft.forEach(t),Cer=r(UY," to load the model weights."),UY.forEach(t),wer=i(pw),T(eF.$$.fragment,pw),pw.forEach(t),Aer=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(Yy.$$.fragment,_a),yer=i(_a),iue=n(_a,"P",{});var xft=s(iue);Ler=r(xft,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),xft.forEach(t),xer=i(_a),Wa=n(_a,"P",{});var uw=s(Wa);$er=r(uw,"The model class to instantiate is selected based on the "),due=n(uw,"CODE",{});var $ft=s(due);ker=r($ft,"model_type"),$ft.forEach(t),Ser=r(uw,` property of the config object (either
passed as an argument or loaded from `),cue=n(uw,"CODE",{});var kft=s(cue);Rer=r(kft,"pretrained_model_name_or_path"),kft.forEach(t),Ber=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fue=n(uw,"CODE",{});var Sft=s(fue);Per=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Ier=r(uw,":"),uw.forEach(t),qer=i(_a),mue=n(_a,"UL",{});var Rft=s(mue);oF=n(Rft,"LI",{});var hxe=s(oF);gue=n(hxe,"STRONG",{});var Bft=s(gue);Ner=r(Bft,"maskformer"),Bft.forEach(t),jer=r(hxe," \u2014 "),nX=n(hxe,"A",{href:!0});var Pft=s(nX);Der=r(Pft,"MaskFormerForInstanceSegmentation"),Pft.forEach(t),Ger=r(hxe," (MaskFormer model)"),hxe.forEach(t),Rft.forEach(t),Oer=i(_a),rF=n(_a,"P",{});var pxe=s(rF);Ver=r(pxe,"The model is set in evaluation mode by default using "),hue=n(pxe,"CODE",{});var Ift=s(hue);Xer=r(Ift,"model.eval()"),Ift.forEach(t),zer=r(pxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pue=n(pxe,"CODE",{});var qft=s(pue);Qer=r(qft,"model.train()"),qft.forEach(t),pxe.forEach(t),Wer=i(_a),T(tF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),HBe=i(f),kd=n(f,"H2",{class:!0});var KIe=s(kd);aF=n(KIe,"A",{id:!0,class:!0,href:!0});var Nft=s(aF);uue=n(Nft,"SPAN",{});var jft=s(uue);T(Ky.$$.fragment,jft),jft.forEach(t),Nft.forEach(t),Her=i(KIe),_ue=n(KIe,"SPAN",{});var Dft=s(_ue);Uer=r(Dft,"TFAutoModel"),Dft.forEach(t),KIe.forEach(t),UBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(Zy.$$.fragment,al),Jer=i(al),Sd=n(al,"P",{});var JY=s(Sd);Yer=r(JY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),sX=n(JY,"A",{href:!0});var Gft=s(sX);Ker=r(Gft,"from_pretrained()"),Gft.forEach(t),Zer=r(JY," class method or the "),lX=n(JY,"A",{href:!0});var Oft=s(lX);eor=r(Oft,"from_config()"),Oft.forEach(t),oor=r(JY,` class
method.`),JY.forEach(t),ror=i(al),eL=n(al,"P",{});var ZIe=s(eL);tor=r(ZIe,"This class cannot be instantiated directly using "),bue=n(ZIe,"CODE",{});var Vft=s(bue);aor=r(Vft,"__init__()"),Vft.forEach(t),nor=r(ZIe," (throws an error)."),ZIe.forEach(t),sor=i(al),Mt=n(al,"DIV",{class:!0});var _w=s(Mt);T(oL.$$.fragment,_w),lor=i(_w),vue=n(_w,"P",{});var Xft=s(vue);ior=r(Xft,"Instantiates one of the base model classes of the library from a configuration."),Xft.forEach(t),dor=i(_w),Rd=n(_w,"P",{});var YY=s(Rd);cor=r(YY,`Note:
Loading a model from its configuration file does `),Fue=n(YY,"STRONG",{});var zft=s(Fue);mor=r(zft,"not"),zft.forEach(t),gor=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(YY,"A",{href:!0});var Qft=s(iX);hor=r(Qft,"from_pretrained()"),Qft.forEach(t),por=r(YY," to load the model weights."),YY.forEach(t),uor=i(_w),T(nF.$$.fragment,_w),_w.forEach(t),_or=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(rL.$$.fragment,nl),bor=i(nl),Tue=n(nl,"P",{});var Wft=s(Tue);vor=r(Wft,"Instantiate one of the base model classes of the library from a pretrained model."),Wft.forEach(t),For=i(nl),Ha=n(nl,"P",{});var bw=s(Ha);Tor=r(bw,"The model class to instantiate is selected based on the "),Mue=n(bw,"CODE",{});var Hft=s(Mue);Mor=r(Hft,"model_type"),Hft.forEach(t),Eor=r(bw,` property of the config object (either
passed as an argument or loaded from `),Eue=n(bw,"CODE",{});var Uft=s(Eue);Cor=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),wor=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cue=n(bw,"CODE",{});var Jft=s(Cue);Aor=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),yor=r(bw,":"),bw.forEach(t),Lor=i(nl),j=n(nl,"UL",{});var D=s(j);sF=n(D,"LI",{});var uxe=s(sF);wue=n(uxe,"STRONG",{});var Yft=s(wue);xor=r(Yft,"albert"),Yft.forEach(t),$or=r(uxe," \u2014 "),dX=n(uxe,"A",{href:!0});var Kft=s(dX);kor=r(Kft,"TFAlbertModel"),Kft.forEach(t),Sor=r(uxe," (ALBERT model)"),uxe.forEach(t),Ror=i(D),lF=n(D,"LI",{});var _xe=s(lF);Aue=n(_xe,"STRONG",{});var Zft=s(Aue);Bor=r(Zft,"bart"),Zft.forEach(t),Por=r(_xe," \u2014 "),cX=n(_xe,"A",{href:!0});var emt=s(cX);Ior=r(emt,"TFBartModel"),emt.forEach(t),qor=r(_xe," (BART model)"),_xe.forEach(t),Nor=i(D),iF=n(D,"LI",{});var bxe=s(iF);yue=n(bxe,"STRONG",{});var omt=s(yue);jor=r(omt,"bert"),omt.forEach(t),Dor=r(bxe," \u2014 "),fX=n(bxe,"A",{href:!0});var rmt=s(fX);Gor=r(rmt,"TFBertModel"),rmt.forEach(t),Oor=r(bxe," (BERT model)"),bxe.forEach(t),Vor=i(D),dF=n(D,"LI",{});var vxe=s(dF);Lue=n(vxe,"STRONG",{});var tmt=s(Lue);Xor=r(tmt,"blenderbot"),tmt.forEach(t),zor=r(vxe," \u2014 "),mX=n(vxe,"A",{href:!0});var amt=s(mX);Qor=r(amt,"TFBlenderbotModel"),amt.forEach(t),Wor=r(vxe," (Blenderbot model)"),vxe.forEach(t),Hor=i(D),cF=n(D,"LI",{});var Fxe=s(cF);xue=n(Fxe,"STRONG",{});var nmt=s(xue);Uor=r(nmt,"blenderbot-small"),nmt.forEach(t),Jor=r(Fxe," \u2014 "),gX=n(Fxe,"A",{href:!0});var smt=s(gX);Yor=r(smt,"TFBlenderbotSmallModel"),smt.forEach(t),Kor=r(Fxe," (BlenderbotSmall model)"),Fxe.forEach(t),Zor=i(D),fF=n(D,"LI",{});var Txe=s(fF);$ue=n(Txe,"STRONG",{});var lmt=s($ue);err=r(lmt,"camembert"),lmt.forEach(t),orr=r(Txe," \u2014 "),hX=n(Txe,"A",{href:!0});var imt=s(hX);rrr=r(imt,"TFCamembertModel"),imt.forEach(t),trr=r(Txe," (CamemBERT model)"),Txe.forEach(t),arr=i(D),mF=n(D,"LI",{});var Mxe=s(mF);kue=n(Mxe,"STRONG",{});var dmt=s(kue);nrr=r(dmt,"clip"),dmt.forEach(t),srr=r(Mxe," \u2014 "),pX=n(Mxe,"A",{href:!0});var cmt=s(pX);lrr=r(cmt,"TFCLIPModel"),cmt.forEach(t),irr=r(Mxe," (CLIP model)"),Mxe.forEach(t),drr=i(D),gF=n(D,"LI",{});var Exe=s(gF);Sue=n(Exe,"STRONG",{});var fmt=s(Sue);crr=r(fmt,"convbert"),fmt.forEach(t),frr=r(Exe," \u2014 "),uX=n(Exe,"A",{href:!0});var mmt=s(uX);mrr=r(mmt,"TFConvBertModel"),mmt.forEach(t),grr=r(Exe," (ConvBERT model)"),Exe.forEach(t),hrr=i(D),hF=n(D,"LI",{});var Cxe=s(hF);Rue=n(Cxe,"STRONG",{});var gmt=s(Rue);prr=r(gmt,"convnext"),gmt.forEach(t),urr=r(Cxe," \u2014 "),_X=n(Cxe,"A",{href:!0});var hmt=s(_X);_rr=r(hmt,"TFConvNextModel"),hmt.forEach(t),brr=r(Cxe," (ConvNext model)"),Cxe.forEach(t),vrr=i(D),pF=n(D,"LI",{});var wxe=s(pF);Bue=n(wxe,"STRONG",{});var pmt=s(Bue);Frr=r(pmt,"ctrl"),pmt.forEach(t),Trr=r(wxe," \u2014 "),bX=n(wxe,"A",{href:!0});var umt=s(bX);Mrr=r(umt,"TFCTRLModel"),umt.forEach(t),Err=r(wxe," (CTRL model)"),wxe.forEach(t),Crr=i(D),uF=n(D,"LI",{});var Axe=s(uF);Pue=n(Axe,"STRONG",{});var _mt=s(Pue);wrr=r(_mt,"deberta"),_mt.forEach(t),Arr=r(Axe," \u2014 "),vX=n(Axe,"A",{href:!0});var bmt=s(vX);yrr=r(bmt,"TFDebertaModel"),bmt.forEach(t),Lrr=r(Axe," (DeBERTa model)"),Axe.forEach(t),xrr=i(D),_F=n(D,"LI",{});var yxe=s(_F);Iue=n(yxe,"STRONG",{});var vmt=s(Iue);$rr=r(vmt,"deberta-v2"),vmt.forEach(t),krr=r(yxe," \u2014 "),FX=n(yxe,"A",{href:!0});var Fmt=s(FX);Srr=r(Fmt,"TFDebertaV2Model"),Fmt.forEach(t),Rrr=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),Brr=i(D),bF=n(D,"LI",{});var Lxe=s(bF);que=n(Lxe,"STRONG",{});var Tmt=s(que);Prr=r(Tmt,"distilbert"),Tmt.forEach(t),Irr=r(Lxe," \u2014 "),TX=n(Lxe,"A",{href:!0});var Mmt=s(TX);qrr=r(Mmt,"TFDistilBertModel"),Mmt.forEach(t),Nrr=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),jrr=i(D),vF=n(D,"LI",{});var xxe=s(vF);Nue=n(xxe,"STRONG",{});var Emt=s(Nue);Drr=r(Emt,"dpr"),Emt.forEach(t),Grr=r(xxe," \u2014 "),MX=n(xxe,"A",{href:!0});var Cmt=s(MX);Orr=r(Cmt,"TFDPRQuestionEncoder"),Cmt.forEach(t),Vrr=r(xxe," (DPR model)"),xxe.forEach(t),Xrr=i(D),FF=n(D,"LI",{});var $xe=s(FF);jue=n($xe,"STRONG",{});var wmt=s(jue);zrr=r(wmt,"electra"),wmt.forEach(t),Qrr=r($xe," \u2014 "),EX=n($xe,"A",{href:!0});var Amt=s(EX);Wrr=r(Amt,"TFElectraModel"),Amt.forEach(t),Hrr=r($xe," (ELECTRA model)"),$xe.forEach(t),Urr=i(D),TF=n(D,"LI",{});var kxe=s(TF);Due=n(kxe,"STRONG",{});var ymt=s(Due);Jrr=r(ymt,"flaubert"),ymt.forEach(t),Yrr=r(kxe," \u2014 "),CX=n(kxe,"A",{href:!0});var Lmt=s(CX);Krr=r(Lmt,"TFFlaubertModel"),Lmt.forEach(t),Zrr=r(kxe," (FlauBERT model)"),kxe.forEach(t),etr=i(D),xs=n(D,"LI",{});var L9=s(xs);Gue=n(L9,"STRONG",{});var xmt=s(Gue);otr=r(xmt,"funnel"),xmt.forEach(t),rtr=r(L9," \u2014 "),wX=n(L9,"A",{href:!0});var $mt=s(wX);ttr=r($mt,"TFFunnelModel"),$mt.forEach(t),atr=r(L9," or "),AX=n(L9,"A",{href:!0});var kmt=s(AX);ntr=r(kmt,"TFFunnelBaseModel"),kmt.forEach(t),str=r(L9," (Funnel Transformer model)"),L9.forEach(t),ltr=i(D),MF=n(D,"LI",{});var Sxe=s(MF);Oue=n(Sxe,"STRONG",{});var Smt=s(Oue);itr=r(Smt,"gpt2"),Smt.forEach(t),dtr=r(Sxe," \u2014 "),yX=n(Sxe,"A",{href:!0});var Rmt=s(yX);ctr=r(Rmt,"TFGPT2Model"),Rmt.forEach(t),ftr=r(Sxe," (OpenAI GPT-2 model)"),Sxe.forEach(t),mtr=i(D),EF=n(D,"LI",{});var Rxe=s(EF);Vue=n(Rxe,"STRONG",{});var Bmt=s(Vue);gtr=r(Bmt,"gptj"),Bmt.forEach(t),htr=r(Rxe," \u2014 "),LX=n(Rxe,"A",{href:!0});var Pmt=s(LX);ptr=r(Pmt,"TFGPTJModel"),Pmt.forEach(t),utr=r(Rxe," (GPT-J model)"),Rxe.forEach(t),_tr=i(D),CF=n(D,"LI",{});var Bxe=s(CF);Xue=n(Bxe,"STRONG",{});var Imt=s(Xue);btr=r(Imt,"hubert"),Imt.forEach(t),vtr=r(Bxe," \u2014 "),xX=n(Bxe,"A",{href:!0});var qmt=s(xX);Ftr=r(qmt,"TFHubertModel"),qmt.forEach(t),Ttr=r(Bxe," (Hubert model)"),Bxe.forEach(t),Mtr=i(D),wF=n(D,"LI",{});var Pxe=s(wF);zue=n(Pxe,"STRONG",{});var Nmt=s(zue);Etr=r(Nmt,"layoutlm"),Nmt.forEach(t),Ctr=r(Pxe," \u2014 "),$X=n(Pxe,"A",{href:!0});var jmt=s($X);wtr=r(jmt,"TFLayoutLMModel"),jmt.forEach(t),Atr=r(Pxe," (LayoutLM model)"),Pxe.forEach(t),ytr=i(D),AF=n(D,"LI",{});var Ixe=s(AF);Que=n(Ixe,"STRONG",{});var Dmt=s(Que);Ltr=r(Dmt,"led"),Dmt.forEach(t),xtr=r(Ixe," \u2014 "),kX=n(Ixe,"A",{href:!0});var Gmt=s(kX);$tr=r(Gmt,"TFLEDModel"),Gmt.forEach(t),ktr=r(Ixe," (LED model)"),Ixe.forEach(t),Str=i(D),yF=n(D,"LI",{});var qxe=s(yF);Wue=n(qxe,"STRONG",{});var Omt=s(Wue);Rtr=r(Omt,"longformer"),Omt.forEach(t),Btr=r(qxe," \u2014 "),SX=n(qxe,"A",{href:!0});var Vmt=s(SX);Ptr=r(Vmt,"TFLongformerModel"),Vmt.forEach(t),Itr=r(qxe," (Longformer model)"),qxe.forEach(t),qtr=i(D),LF=n(D,"LI",{});var Nxe=s(LF);Hue=n(Nxe,"STRONG",{});var Xmt=s(Hue);Ntr=r(Xmt,"lxmert"),Xmt.forEach(t),jtr=r(Nxe," \u2014 "),RX=n(Nxe,"A",{href:!0});var zmt=s(RX);Dtr=r(zmt,"TFLxmertModel"),zmt.forEach(t),Gtr=r(Nxe," (LXMERT model)"),Nxe.forEach(t),Otr=i(D),xF=n(D,"LI",{});var jxe=s(xF);Uue=n(jxe,"STRONG",{});var Qmt=s(Uue);Vtr=r(Qmt,"marian"),Qmt.forEach(t),Xtr=r(jxe," \u2014 "),BX=n(jxe,"A",{href:!0});var Wmt=s(BX);ztr=r(Wmt,"TFMarianModel"),Wmt.forEach(t),Qtr=r(jxe," (Marian model)"),jxe.forEach(t),Wtr=i(D),$F=n(D,"LI",{});var Dxe=s($F);Jue=n(Dxe,"STRONG",{});var Hmt=s(Jue);Htr=r(Hmt,"mbart"),Hmt.forEach(t),Utr=r(Dxe," \u2014 "),PX=n(Dxe,"A",{href:!0});var Umt=s(PX);Jtr=r(Umt,"TFMBartModel"),Umt.forEach(t),Ytr=r(Dxe," (mBART model)"),Dxe.forEach(t),Ktr=i(D),kF=n(D,"LI",{});var Gxe=s(kF);Yue=n(Gxe,"STRONG",{});var Jmt=s(Yue);Ztr=r(Jmt,"mobilebert"),Jmt.forEach(t),ear=r(Gxe," \u2014 "),IX=n(Gxe,"A",{href:!0});var Ymt=s(IX);oar=r(Ymt,"TFMobileBertModel"),Ymt.forEach(t),rar=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),tar=i(D),SF=n(D,"LI",{});var Oxe=s(SF);Kue=n(Oxe,"STRONG",{});var Kmt=s(Kue);aar=r(Kmt,"mpnet"),Kmt.forEach(t),nar=r(Oxe," \u2014 "),qX=n(Oxe,"A",{href:!0});var Zmt=s(qX);sar=r(Zmt,"TFMPNetModel"),Zmt.forEach(t),lar=r(Oxe," (MPNet model)"),Oxe.forEach(t),iar=i(D),RF=n(D,"LI",{});var Vxe=s(RF);Zue=n(Vxe,"STRONG",{});var egt=s(Zue);dar=r(egt,"mt5"),egt.forEach(t),car=r(Vxe," \u2014 "),NX=n(Vxe,"A",{href:!0});var ogt=s(NX);far=r(ogt,"TFMT5Model"),ogt.forEach(t),mar=r(Vxe," (mT5 model)"),Vxe.forEach(t),gar=i(D),BF=n(D,"LI",{});var Xxe=s(BF);e_e=n(Xxe,"STRONG",{});var rgt=s(e_e);har=r(rgt,"openai-gpt"),rgt.forEach(t),par=r(Xxe," \u2014 "),jX=n(Xxe,"A",{href:!0});var tgt=s(jX);uar=r(tgt,"TFOpenAIGPTModel"),tgt.forEach(t),_ar=r(Xxe," (OpenAI GPT model)"),Xxe.forEach(t),bar=i(D),PF=n(D,"LI",{});var zxe=s(PF);o_e=n(zxe,"STRONG",{});var agt=s(o_e);Far=r(agt,"pegasus"),agt.forEach(t),Tar=r(zxe," \u2014 "),DX=n(zxe,"A",{href:!0});var ngt=s(DX);Mar=r(ngt,"TFPegasusModel"),ngt.forEach(t),Ear=r(zxe," (Pegasus model)"),zxe.forEach(t),Car=i(D),IF=n(D,"LI",{});var Qxe=s(IF);r_e=n(Qxe,"STRONG",{});var sgt=s(r_e);war=r(sgt,"rembert"),sgt.forEach(t),Aar=r(Qxe," \u2014 "),GX=n(Qxe,"A",{href:!0});var lgt=s(GX);yar=r(lgt,"TFRemBertModel"),lgt.forEach(t),Lar=r(Qxe," (RemBERT model)"),Qxe.forEach(t),xar=i(D),qF=n(D,"LI",{});var Wxe=s(qF);t_e=n(Wxe,"STRONG",{});var igt=s(t_e);$ar=r(igt,"roberta"),igt.forEach(t),kar=r(Wxe," \u2014 "),OX=n(Wxe,"A",{href:!0});var dgt=s(OX);Sar=r(dgt,"TFRobertaModel"),dgt.forEach(t),Rar=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),Bar=i(D),NF=n(D,"LI",{});var Hxe=s(NF);a_e=n(Hxe,"STRONG",{});var cgt=s(a_e);Par=r(cgt,"roformer"),cgt.forEach(t),Iar=r(Hxe," \u2014 "),VX=n(Hxe,"A",{href:!0});var fgt=s(VX);qar=r(fgt,"TFRoFormerModel"),fgt.forEach(t),Nar=r(Hxe," (RoFormer model)"),Hxe.forEach(t),jar=i(D),jF=n(D,"LI",{});var Uxe=s(jF);n_e=n(Uxe,"STRONG",{});var mgt=s(n_e);Dar=r(mgt,"speech_to_text"),mgt.forEach(t),Gar=r(Uxe," \u2014 "),XX=n(Uxe,"A",{href:!0});var ggt=s(XX);Oar=r(ggt,"TFSpeech2TextModel"),ggt.forEach(t),Var=r(Uxe," (Speech2Text model)"),Uxe.forEach(t),Xar=i(D),DF=n(D,"LI",{});var Jxe=s(DF);s_e=n(Jxe,"STRONG",{});var hgt=s(s_e);zar=r(hgt,"t5"),hgt.forEach(t),Qar=r(Jxe," \u2014 "),zX=n(Jxe,"A",{href:!0});var pgt=s(zX);War=r(pgt,"TFT5Model"),pgt.forEach(t),Har=r(Jxe," (T5 model)"),Jxe.forEach(t),Uar=i(D),GF=n(D,"LI",{});var Yxe=s(GF);l_e=n(Yxe,"STRONG",{});var ugt=s(l_e);Jar=r(ugt,"tapas"),ugt.forEach(t),Yar=r(Yxe," \u2014 "),QX=n(Yxe,"A",{href:!0});var _gt=s(QX);Kar=r(_gt,"TFTapasModel"),_gt.forEach(t),Zar=r(Yxe," (TAPAS model)"),Yxe.forEach(t),enr=i(D),OF=n(D,"LI",{});var Kxe=s(OF);i_e=n(Kxe,"STRONG",{});var bgt=s(i_e);onr=r(bgt,"transfo-xl"),bgt.forEach(t),rnr=r(Kxe," \u2014 "),WX=n(Kxe,"A",{href:!0});var vgt=s(WX);tnr=r(vgt,"TFTransfoXLModel"),vgt.forEach(t),anr=r(Kxe," (Transformer-XL model)"),Kxe.forEach(t),nnr=i(D),VF=n(D,"LI",{});var Zxe=s(VF);d_e=n(Zxe,"STRONG",{});var Fgt=s(d_e);snr=r(Fgt,"vit"),Fgt.forEach(t),lnr=r(Zxe," \u2014 "),HX=n(Zxe,"A",{href:!0});var Tgt=s(HX);inr=r(Tgt,"TFViTModel"),Tgt.forEach(t),dnr=r(Zxe," (ViT model)"),Zxe.forEach(t),cnr=i(D),XF=n(D,"LI",{});var e9e=s(XF);c_e=n(e9e,"STRONG",{});var Mgt=s(c_e);fnr=r(Mgt,"vit_mae"),Mgt.forEach(t),mnr=r(e9e," \u2014 "),UX=n(e9e,"A",{href:!0});var Egt=s(UX);gnr=r(Egt,"TFViTMAEModel"),Egt.forEach(t),hnr=r(e9e," (ViTMAE model)"),e9e.forEach(t),pnr=i(D),zF=n(D,"LI",{});var o9e=s(zF);f_e=n(o9e,"STRONG",{});var Cgt=s(f_e);unr=r(Cgt,"wav2vec2"),Cgt.forEach(t),_nr=r(o9e," \u2014 "),JX=n(o9e,"A",{href:!0});var wgt=s(JX);bnr=r(wgt,"TFWav2Vec2Model"),wgt.forEach(t),vnr=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),Fnr=i(D),QF=n(D,"LI",{});var r9e=s(QF);m_e=n(r9e,"STRONG",{});var Agt=s(m_e);Tnr=r(Agt,"xlm"),Agt.forEach(t),Mnr=r(r9e," \u2014 "),YX=n(r9e,"A",{href:!0});var ygt=s(YX);Enr=r(ygt,"TFXLMModel"),ygt.forEach(t),Cnr=r(r9e," (XLM model)"),r9e.forEach(t),wnr=i(D),WF=n(D,"LI",{});var t9e=s(WF);g_e=n(t9e,"STRONG",{});var Lgt=s(g_e);Anr=r(Lgt,"xlm-roberta"),Lgt.forEach(t),ynr=r(t9e," \u2014 "),KX=n(t9e,"A",{href:!0});var xgt=s(KX);Lnr=r(xgt,"TFXLMRobertaModel"),xgt.forEach(t),xnr=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),$nr=i(D),HF=n(D,"LI",{});var a9e=s(HF);h_e=n(a9e,"STRONG",{});var $gt=s(h_e);knr=r($gt,"xlnet"),$gt.forEach(t),Snr=r(a9e," \u2014 "),ZX=n(a9e,"A",{href:!0});var kgt=s(ZX);Rnr=r(kgt,"TFXLNetModel"),kgt.forEach(t),Bnr=r(a9e," (XLNet model)"),a9e.forEach(t),D.forEach(t),Pnr=i(nl),T(UF.$$.fragment,nl),nl.forEach(t),al.forEach(t),JBe=i(f),Bd=n(f,"H2",{class:!0});var eqe=s(Bd);JF=n(eqe,"A",{id:!0,class:!0,href:!0});var Sgt=s(JF);p_e=n(Sgt,"SPAN",{});var Rgt=s(p_e);T(tL.$$.fragment,Rgt),Rgt.forEach(t),Sgt.forEach(t),Inr=i(eqe),u_e=n(eqe,"SPAN",{});var Bgt=s(u_e);qnr=r(Bgt,"TFAutoModelForPreTraining"),Bgt.forEach(t),eqe.forEach(t),YBe=i(f),Jo=n(f,"DIV",{class:!0});var sl=s(Jo);T(aL.$$.fragment,sl),Nnr=i(sl),Pd=n(sl,"P",{});var KY=s(Pd);jnr=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ez=n(KY,"A",{href:!0});var Pgt=s(ez);Dnr=r(Pgt,"from_pretrained()"),Pgt.forEach(t),Gnr=r(KY," class method or the "),oz=n(KY,"A",{href:!0});var Igt=s(oz);Onr=r(Igt,"from_config()"),Igt.forEach(t),Vnr=r(KY,` class
method.`),KY.forEach(t),Xnr=i(sl),nL=n(sl,"P",{});var oqe=s(nL);znr=r(oqe,"This class cannot be instantiated directly using "),__e=n(oqe,"CODE",{});var qgt=s(__e);Qnr=r(qgt,"__init__()"),qgt.forEach(t),Wnr=r(oqe," (throws an error)."),oqe.forEach(t),Hnr=i(sl),Et=n(sl,"DIV",{class:!0});var vw=s(Et);T(sL.$$.fragment,vw),Unr=i(vw),b_e=n(vw,"P",{});var Ngt=s(b_e);Jnr=r(Ngt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ngt.forEach(t),Ynr=i(vw),Id=n(vw,"P",{});var ZY=s(Id);Knr=r(ZY,`Note:
Loading a model from its configuration file does `),v_e=n(ZY,"STRONG",{});var jgt=s(v_e);Znr=r(jgt,"not"),jgt.forEach(t),esr=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(ZY,"A",{href:!0});var Dgt=s(rz);osr=r(Dgt,"from_pretrained()"),Dgt.forEach(t),rsr=r(ZY," to load the model weights."),ZY.forEach(t),tsr=i(vw),T(YF.$$.fragment,vw),vw.forEach(t),asr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(lL.$$.fragment,ll),nsr=i(ll),F_e=n(ll,"P",{});var Ggt=s(F_e);ssr=r(Ggt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ggt.forEach(t),lsr=i(ll),Ua=n(ll,"P",{});var Fw=s(Ua);isr=r(Fw,"The model class to instantiate is selected based on the "),T_e=n(Fw,"CODE",{});var Ogt=s(T_e);dsr=r(Ogt,"model_type"),Ogt.forEach(t),csr=r(Fw,` property of the config object (either
passed as an argument or loaded from `),M_e=n(Fw,"CODE",{});var Vgt=s(M_e);fsr=r(Vgt,"pretrained_model_name_or_path"),Vgt.forEach(t),msr=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(Fw,"CODE",{});var Xgt=s(E_e);gsr=r(Xgt,"pretrained_model_name_or_path"),Xgt.forEach(t),hsr=r(Fw,":"),Fw.forEach(t),psr=i(ll),ne=n(ll,"UL",{});var le=s(ne);KF=n(le,"LI",{});var n9e=s(KF);C_e=n(n9e,"STRONG",{});var zgt=s(C_e);usr=r(zgt,"albert"),zgt.forEach(t),_sr=r(n9e," \u2014 "),tz=n(n9e,"A",{href:!0});var Qgt=s(tz);bsr=r(Qgt,"TFAlbertForPreTraining"),Qgt.forEach(t),vsr=r(n9e," (ALBERT model)"),n9e.forEach(t),Fsr=i(le),ZF=n(le,"LI",{});var s9e=s(ZF);w_e=n(s9e,"STRONG",{});var Wgt=s(w_e);Tsr=r(Wgt,"bart"),Wgt.forEach(t),Msr=r(s9e," \u2014 "),az=n(s9e,"A",{href:!0});var Hgt=s(az);Esr=r(Hgt,"TFBartForConditionalGeneration"),Hgt.forEach(t),Csr=r(s9e," (BART model)"),s9e.forEach(t),wsr=i(le),e0=n(le,"LI",{});var l9e=s(e0);A_e=n(l9e,"STRONG",{});var Ugt=s(A_e);Asr=r(Ugt,"bert"),Ugt.forEach(t),ysr=r(l9e," \u2014 "),nz=n(l9e,"A",{href:!0});var Jgt=s(nz);Lsr=r(Jgt,"TFBertForPreTraining"),Jgt.forEach(t),xsr=r(l9e," (BERT model)"),l9e.forEach(t),$sr=i(le),o0=n(le,"LI",{});var i9e=s(o0);y_e=n(i9e,"STRONG",{});var Ygt=s(y_e);ksr=r(Ygt,"camembert"),Ygt.forEach(t),Ssr=r(i9e," \u2014 "),sz=n(i9e,"A",{href:!0});var Kgt=s(sz);Rsr=r(Kgt,"TFCamembertForMaskedLM"),Kgt.forEach(t),Bsr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Psr=i(le),r0=n(le,"LI",{});var d9e=s(r0);L_e=n(d9e,"STRONG",{});var Zgt=s(L_e);Isr=r(Zgt,"ctrl"),Zgt.forEach(t),qsr=r(d9e," \u2014 "),lz=n(d9e,"A",{href:!0});var eht=s(lz);Nsr=r(eht,"TFCTRLLMHeadModel"),eht.forEach(t),jsr=r(d9e," (CTRL model)"),d9e.forEach(t),Dsr=i(le),t0=n(le,"LI",{});var c9e=s(t0);x_e=n(c9e,"STRONG",{});var oht=s(x_e);Gsr=r(oht,"distilbert"),oht.forEach(t),Osr=r(c9e," \u2014 "),iz=n(c9e,"A",{href:!0});var rht=s(iz);Vsr=r(rht,"TFDistilBertForMaskedLM"),rht.forEach(t),Xsr=r(c9e," (DistilBERT model)"),c9e.forEach(t),zsr=i(le),a0=n(le,"LI",{});var f9e=s(a0);$_e=n(f9e,"STRONG",{});var tht=s($_e);Qsr=r(tht,"electra"),tht.forEach(t),Wsr=r(f9e," \u2014 "),dz=n(f9e,"A",{href:!0});var aht=s(dz);Hsr=r(aht,"TFElectraForPreTraining"),aht.forEach(t),Usr=r(f9e," (ELECTRA model)"),f9e.forEach(t),Jsr=i(le),n0=n(le,"LI",{});var m9e=s(n0);k_e=n(m9e,"STRONG",{});var nht=s(k_e);Ysr=r(nht,"flaubert"),nht.forEach(t),Ksr=r(m9e," \u2014 "),cz=n(m9e,"A",{href:!0});var sht=s(cz);Zsr=r(sht,"TFFlaubertWithLMHeadModel"),sht.forEach(t),elr=r(m9e," (FlauBERT model)"),m9e.forEach(t),olr=i(le),s0=n(le,"LI",{});var g9e=s(s0);S_e=n(g9e,"STRONG",{});var lht=s(S_e);rlr=r(lht,"funnel"),lht.forEach(t),tlr=r(g9e," \u2014 "),fz=n(g9e,"A",{href:!0});var iht=s(fz);alr=r(iht,"TFFunnelForPreTraining"),iht.forEach(t),nlr=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),slr=i(le),l0=n(le,"LI",{});var h9e=s(l0);R_e=n(h9e,"STRONG",{});var dht=s(R_e);llr=r(dht,"gpt2"),dht.forEach(t),ilr=r(h9e," \u2014 "),mz=n(h9e,"A",{href:!0});var cht=s(mz);dlr=r(cht,"TFGPT2LMHeadModel"),cht.forEach(t),clr=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),flr=i(le),i0=n(le,"LI",{});var p9e=s(i0);B_e=n(p9e,"STRONG",{});var fht=s(B_e);mlr=r(fht,"layoutlm"),fht.forEach(t),glr=r(p9e," \u2014 "),gz=n(p9e,"A",{href:!0});var mht=s(gz);hlr=r(mht,"TFLayoutLMForMaskedLM"),mht.forEach(t),plr=r(p9e," (LayoutLM model)"),p9e.forEach(t),ulr=i(le),d0=n(le,"LI",{});var u9e=s(d0);P_e=n(u9e,"STRONG",{});var ght=s(P_e);_lr=r(ght,"lxmert"),ght.forEach(t),blr=r(u9e," \u2014 "),hz=n(u9e,"A",{href:!0});var hht=s(hz);vlr=r(hht,"TFLxmertForPreTraining"),hht.forEach(t),Flr=r(u9e," (LXMERT model)"),u9e.forEach(t),Tlr=i(le),c0=n(le,"LI",{});var _9e=s(c0);I_e=n(_9e,"STRONG",{});var pht=s(I_e);Mlr=r(pht,"mobilebert"),pht.forEach(t),Elr=r(_9e," \u2014 "),pz=n(_9e,"A",{href:!0});var uht=s(pz);Clr=r(uht,"TFMobileBertForPreTraining"),uht.forEach(t),wlr=r(_9e," (MobileBERT model)"),_9e.forEach(t),Alr=i(le),f0=n(le,"LI",{});var b9e=s(f0);q_e=n(b9e,"STRONG",{});var _ht=s(q_e);ylr=r(_ht,"mpnet"),_ht.forEach(t),Llr=r(b9e," \u2014 "),uz=n(b9e,"A",{href:!0});var bht=s(uz);xlr=r(bht,"TFMPNetForMaskedLM"),bht.forEach(t),$lr=r(b9e," (MPNet model)"),b9e.forEach(t),klr=i(le),m0=n(le,"LI",{});var v9e=s(m0);N_e=n(v9e,"STRONG",{});var vht=s(N_e);Slr=r(vht,"openai-gpt"),vht.forEach(t),Rlr=r(v9e," \u2014 "),_z=n(v9e,"A",{href:!0});var Fht=s(_z);Blr=r(Fht,"TFOpenAIGPTLMHeadModel"),Fht.forEach(t),Plr=r(v9e," (OpenAI GPT model)"),v9e.forEach(t),Ilr=i(le),g0=n(le,"LI",{});var F9e=s(g0);j_e=n(F9e,"STRONG",{});var Tht=s(j_e);qlr=r(Tht,"roberta"),Tht.forEach(t),Nlr=r(F9e," \u2014 "),bz=n(F9e,"A",{href:!0});var Mht=s(bz);jlr=r(Mht,"TFRobertaForMaskedLM"),Mht.forEach(t),Dlr=r(F9e," (RoBERTa model)"),F9e.forEach(t),Glr=i(le),h0=n(le,"LI",{});var T9e=s(h0);D_e=n(T9e,"STRONG",{});var Eht=s(D_e);Olr=r(Eht,"t5"),Eht.forEach(t),Vlr=r(T9e," \u2014 "),vz=n(T9e,"A",{href:!0});var Cht=s(vz);Xlr=r(Cht,"TFT5ForConditionalGeneration"),Cht.forEach(t),zlr=r(T9e," (T5 model)"),T9e.forEach(t),Qlr=i(le),p0=n(le,"LI",{});var M9e=s(p0);G_e=n(M9e,"STRONG",{});var wht=s(G_e);Wlr=r(wht,"tapas"),wht.forEach(t),Hlr=r(M9e," \u2014 "),Fz=n(M9e,"A",{href:!0});var Aht=s(Fz);Ulr=r(Aht,"TFTapasForMaskedLM"),Aht.forEach(t),Jlr=r(M9e," (TAPAS model)"),M9e.forEach(t),Ylr=i(le),u0=n(le,"LI",{});var E9e=s(u0);O_e=n(E9e,"STRONG",{});var yht=s(O_e);Klr=r(yht,"transfo-xl"),yht.forEach(t),Zlr=r(E9e," \u2014 "),Tz=n(E9e,"A",{href:!0});var Lht=s(Tz);eir=r(Lht,"TFTransfoXLLMHeadModel"),Lht.forEach(t),oir=r(E9e," (Transformer-XL model)"),E9e.forEach(t),rir=i(le),_0=n(le,"LI",{});var C9e=s(_0);V_e=n(C9e,"STRONG",{});var xht=s(V_e);tir=r(xht,"vit_mae"),xht.forEach(t),air=r(C9e," \u2014 "),Mz=n(C9e,"A",{href:!0});var $ht=s(Mz);nir=r($ht,"TFViTMAEForPreTraining"),$ht.forEach(t),sir=r(C9e," (ViTMAE model)"),C9e.forEach(t),lir=i(le),b0=n(le,"LI",{});var w9e=s(b0);X_e=n(w9e,"STRONG",{});var kht=s(X_e);iir=r(kht,"xlm"),kht.forEach(t),dir=r(w9e," \u2014 "),Ez=n(w9e,"A",{href:!0});var Sht=s(Ez);cir=r(Sht,"TFXLMWithLMHeadModel"),Sht.forEach(t),fir=r(w9e," (XLM model)"),w9e.forEach(t),mir=i(le),v0=n(le,"LI",{});var A9e=s(v0);z_e=n(A9e,"STRONG",{});var Rht=s(z_e);gir=r(Rht,"xlm-roberta"),Rht.forEach(t),hir=r(A9e," \u2014 "),Cz=n(A9e,"A",{href:!0});var Bht=s(Cz);pir=r(Bht,"TFXLMRobertaForMaskedLM"),Bht.forEach(t),uir=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),_ir=i(le),F0=n(le,"LI",{});var y9e=s(F0);Q_e=n(y9e,"STRONG",{});var Pht=s(Q_e);bir=r(Pht,"xlnet"),Pht.forEach(t),vir=r(y9e," \u2014 "),wz=n(y9e,"A",{href:!0});var Iht=s(wz);Fir=r(Iht,"TFXLNetLMHeadModel"),Iht.forEach(t),Tir=r(y9e," (XLNet model)"),y9e.forEach(t),le.forEach(t),Mir=i(ll),T(T0.$$.fragment,ll),ll.forEach(t),sl.forEach(t),KBe=i(f),qd=n(f,"H2",{class:!0});var rqe=s(qd);M0=n(rqe,"A",{id:!0,class:!0,href:!0});var qht=s(M0);W_e=n(qht,"SPAN",{});var Nht=s(W_e);T(iL.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Eir=i(rqe),H_e=n(rqe,"SPAN",{});var jht=s(H_e);Cir=r(jht,"TFAutoModelForCausalLM"),jht.forEach(t),rqe.forEach(t),ZBe=i(f),Yo=n(f,"DIV",{class:!0});var il=s(Yo);T(dL.$$.fragment,il),wir=i(il),Nd=n(il,"P",{});var eK=s(Nd);Air=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Az=n(eK,"A",{href:!0});var Dht=s(Az);yir=r(Dht,"from_pretrained()"),Dht.forEach(t),Lir=r(eK," class method or the "),yz=n(eK,"A",{href:!0});var Ght=s(yz);xir=r(Ght,"from_config()"),Ght.forEach(t),$ir=r(eK,` class
method.`),eK.forEach(t),kir=i(il),cL=n(il,"P",{});var tqe=s(cL);Sir=r(tqe,"This class cannot be instantiated directly using "),U_e=n(tqe,"CODE",{});var Oht=s(U_e);Rir=r(Oht,"__init__()"),Oht.forEach(t),Bir=r(tqe," (throws an error)."),tqe.forEach(t),Pir=i(il),Ct=n(il,"DIV",{class:!0});var Tw=s(Ct);T(fL.$$.fragment,Tw),Iir=i(Tw),J_e=n(Tw,"P",{});var Vht=s(J_e);qir=r(Vht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vht.forEach(t),Nir=i(Tw),jd=n(Tw,"P",{});var oK=s(jd);jir=r(oK,`Note:
Loading a model from its configuration file does `),Y_e=n(oK,"STRONG",{});var Xht=s(Y_e);Dir=r(Xht,"not"),Xht.forEach(t),Gir=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(oK,"A",{href:!0});var zht=s(Lz);Oir=r(zht,"from_pretrained()"),zht.forEach(t),Vir=r(oK," to load the model weights."),oK.forEach(t),Xir=i(Tw),T(E0.$$.fragment,Tw),Tw.forEach(t),zir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(mL.$$.fragment,dl),Qir=i(dl),K_e=n(dl,"P",{});var Qht=s(K_e);Wir=r(Qht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qht.forEach(t),Hir=i(dl),Ja=n(dl,"P",{});var Mw=s(Ja);Uir=r(Mw,"The model class to instantiate is selected based on the "),Z_e=n(Mw,"CODE",{});var Wht=s(Z_e);Jir=r(Wht,"model_type"),Wht.forEach(t),Yir=r(Mw,` property of the config object (either
passed as an argument or loaded from `),e1e=n(Mw,"CODE",{});var Hht=s(e1e);Kir=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),Zir=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o1e=n(Mw,"CODE",{});var Uht=s(o1e);edr=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),odr=r(Mw,":"),Mw.forEach(t),rdr=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);C0=n(Ce,"LI",{});var L9e=s(C0);r1e=n(L9e,"STRONG",{});var Jht=s(r1e);tdr=r(Jht,"bert"),Jht.forEach(t),adr=r(L9e," \u2014 "),xz=n(L9e,"A",{href:!0});var Yht=s(xz);ndr=r(Yht,"TFBertLMHeadModel"),Yht.forEach(t),sdr=r(L9e," (BERT model)"),L9e.forEach(t),ldr=i(Ce),w0=n(Ce,"LI",{});var x9e=s(w0);t1e=n(x9e,"STRONG",{});var Kht=s(t1e);idr=r(Kht,"camembert"),Kht.forEach(t),ddr=r(x9e," \u2014 "),$z=n(x9e,"A",{href:!0});var Zht=s($z);cdr=r(Zht,"TFCamembertForCausalLM"),Zht.forEach(t),fdr=r(x9e," (CamemBERT model)"),x9e.forEach(t),mdr=i(Ce),A0=n(Ce,"LI",{});var $9e=s(A0);a1e=n($9e,"STRONG",{});var ept=s(a1e);gdr=r(ept,"ctrl"),ept.forEach(t),hdr=r($9e," \u2014 "),kz=n($9e,"A",{href:!0});var opt=s(kz);pdr=r(opt,"TFCTRLLMHeadModel"),opt.forEach(t),udr=r($9e," (CTRL model)"),$9e.forEach(t),_dr=i(Ce),y0=n(Ce,"LI",{});var k9e=s(y0);n1e=n(k9e,"STRONG",{});var rpt=s(n1e);bdr=r(rpt,"gpt2"),rpt.forEach(t),vdr=r(k9e," \u2014 "),Sz=n(k9e,"A",{href:!0});var tpt=s(Sz);Fdr=r(tpt,"TFGPT2LMHeadModel"),tpt.forEach(t),Tdr=r(k9e," (OpenAI GPT-2 model)"),k9e.forEach(t),Mdr=i(Ce),L0=n(Ce,"LI",{});var S9e=s(L0);s1e=n(S9e,"STRONG",{});var apt=s(s1e);Edr=r(apt,"gptj"),apt.forEach(t),Cdr=r(S9e," \u2014 "),Rz=n(S9e,"A",{href:!0});var npt=s(Rz);wdr=r(npt,"TFGPTJForCausalLM"),npt.forEach(t),Adr=r(S9e," (GPT-J model)"),S9e.forEach(t),ydr=i(Ce),x0=n(Ce,"LI",{});var R9e=s(x0);l1e=n(R9e,"STRONG",{});var spt=s(l1e);Ldr=r(spt,"openai-gpt"),spt.forEach(t),xdr=r(R9e," \u2014 "),Bz=n(R9e,"A",{href:!0});var lpt=s(Bz);$dr=r(lpt,"TFOpenAIGPTLMHeadModel"),lpt.forEach(t),kdr=r(R9e," (OpenAI GPT model)"),R9e.forEach(t),Sdr=i(Ce),$0=n(Ce,"LI",{});var B9e=s($0);i1e=n(B9e,"STRONG",{});var ipt=s(i1e);Rdr=r(ipt,"rembert"),ipt.forEach(t),Bdr=r(B9e," \u2014 "),Pz=n(B9e,"A",{href:!0});var dpt=s(Pz);Pdr=r(dpt,"TFRemBertForCausalLM"),dpt.forEach(t),Idr=r(B9e," (RemBERT model)"),B9e.forEach(t),qdr=i(Ce),k0=n(Ce,"LI",{});var P9e=s(k0);d1e=n(P9e,"STRONG",{});var cpt=s(d1e);Ndr=r(cpt,"roberta"),cpt.forEach(t),jdr=r(P9e," \u2014 "),Iz=n(P9e,"A",{href:!0});var fpt=s(Iz);Ddr=r(fpt,"TFRobertaForCausalLM"),fpt.forEach(t),Gdr=r(P9e," (RoBERTa model)"),P9e.forEach(t),Odr=i(Ce),S0=n(Ce,"LI",{});var I9e=s(S0);c1e=n(I9e,"STRONG",{});var mpt=s(c1e);Vdr=r(mpt,"roformer"),mpt.forEach(t),Xdr=r(I9e," \u2014 "),qz=n(I9e,"A",{href:!0});var gpt=s(qz);zdr=r(gpt,"TFRoFormerForCausalLM"),gpt.forEach(t),Qdr=r(I9e," (RoFormer model)"),I9e.forEach(t),Wdr=i(Ce),R0=n(Ce,"LI",{});var q9e=s(R0);f1e=n(q9e,"STRONG",{});var hpt=s(f1e);Hdr=r(hpt,"transfo-xl"),hpt.forEach(t),Udr=r(q9e," \u2014 "),Nz=n(q9e,"A",{href:!0});var ppt=s(Nz);Jdr=r(ppt,"TFTransfoXLLMHeadModel"),ppt.forEach(t),Ydr=r(q9e," (Transformer-XL model)"),q9e.forEach(t),Kdr=i(Ce),B0=n(Ce,"LI",{});var N9e=s(B0);m1e=n(N9e,"STRONG",{});var upt=s(m1e);Zdr=r(upt,"xlm"),upt.forEach(t),ecr=r(N9e," \u2014 "),jz=n(N9e,"A",{href:!0});var _pt=s(jz);ocr=r(_pt,"TFXLMWithLMHeadModel"),_pt.forEach(t),rcr=r(N9e," (XLM model)"),N9e.forEach(t),tcr=i(Ce),P0=n(Ce,"LI",{});var j9e=s(P0);g1e=n(j9e,"STRONG",{});var bpt=s(g1e);acr=r(bpt,"xlnet"),bpt.forEach(t),ncr=r(j9e," \u2014 "),Dz=n(j9e,"A",{href:!0});var vpt=s(Dz);scr=r(vpt,"TFXLNetLMHeadModel"),vpt.forEach(t),lcr=r(j9e," (XLNet model)"),j9e.forEach(t),Ce.forEach(t),icr=i(dl),T(I0.$$.fragment,dl),dl.forEach(t),il.forEach(t),ePe=i(f),Dd=n(f,"H2",{class:!0});var aqe=s(Dd);q0=n(aqe,"A",{id:!0,class:!0,href:!0});var Fpt=s(q0);h1e=n(Fpt,"SPAN",{});var Tpt=s(h1e);T(gL.$$.fragment,Tpt),Tpt.forEach(t),Fpt.forEach(t),dcr=i(aqe),p1e=n(aqe,"SPAN",{});var Mpt=s(p1e);ccr=r(Mpt,"TFAutoModelForImageClassification"),Mpt.forEach(t),aqe.forEach(t),oPe=i(f),Ko=n(f,"DIV",{class:!0});var cl=s(Ko);T(hL.$$.fragment,cl),fcr=i(cl),Gd=n(cl,"P",{});var rK=s(Gd);mcr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gz=n(rK,"A",{href:!0});var Ept=s(Gz);gcr=r(Ept,"from_pretrained()"),Ept.forEach(t),hcr=r(rK," class method or the "),Oz=n(rK,"A",{href:!0});var Cpt=s(Oz);pcr=r(Cpt,"from_config()"),Cpt.forEach(t),ucr=r(rK,` class
method.`),rK.forEach(t),_cr=i(cl),pL=n(cl,"P",{});var nqe=s(pL);bcr=r(nqe,"This class cannot be instantiated directly using "),u1e=n(nqe,"CODE",{});var wpt=s(u1e);vcr=r(wpt,"__init__()"),wpt.forEach(t),Fcr=r(nqe," (throws an error)."),nqe.forEach(t),Tcr=i(cl),wt=n(cl,"DIV",{class:!0});var Ew=s(wt);T(uL.$$.fragment,Ew),Mcr=i(Ew),_1e=n(Ew,"P",{});var Apt=s(_1e);Ecr=r(Apt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Apt.forEach(t),Ccr=i(Ew),Od=n(Ew,"P",{});var tK=s(Od);wcr=r(tK,`Note:
Loading a model from its configuration file does `),b1e=n(tK,"STRONG",{});var ypt=s(b1e);Acr=r(ypt,"not"),ypt.forEach(t),ycr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(tK,"A",{href:!0});var Lpt=s(Vz);Lcr=r(Lpt,"from_pretrained()"),Lpt.forEach(t),xcr=r(tK," to load the model weights."),tK.forEach(t),$cr=i(Ew),T(N0.$$.fragment,Ew),Ew.forEach(t),kcr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(_L.$$.fragment,fl),Scr=i(fl),v1e=n(fl,"P",{});var xpt=s(v1e);Rcr=r(xpt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xpt.forEach(t),Bcr=i(fl),Ya=n(fl,"P",{});var Cw=s(Ya);Pcr=r(Cw,"The model class to instantiate is selected based on the "),F1e=n(Cw,"CODE",{});var $pt=s(F1e);Icr=r($pt,"model_type"),$pt.forEach(t),qcr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),T1e=n(Cw,"CODE",{});var kpt=s(T1e);Ncr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),jcr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(Cw,"CODE",{});var Spt=s(M1e);Dcr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),Gcr=r(Cw,":"),Cw.forEach(t),Ocr=i(fl),bL=n(fl,"UL",{});var sqe=s(bL);j0=n(sqe,"LI",{});var D9e=s(j0);E1e=n(D9e,"STRONG",{});var Rpt=s(E1e);Vcr=r(Rpt,"convnext"),Rpt.forEach(t),Xcr=r(D9e," \u2014 "),Xz=n(D9e,"A",{href:!0});var Bpt=s(Xz);zcr=r(Bpt,"TFConvNextForImageClassification"),Bpt.forEach(t),Qcr=r(D9e," (ConvNext model)"),D9e.forEach(t),Wcr=i(sqe),D0=n(sqe,"LI",{});var G9e=s(D0);C1e=n(G9e,"STRONG",{});var Ppt=s(C1e);Hcr=r(Ppt,"vit"),Ppt.forEach(t),Ucr=r(G9e," \u2014 "),zz=n(G9e,"A",{href:!0});var Ipt=s(zz);Jcr=r(Ipt,"TFViTForImageClassification"),Ipt.forEach(t),Ycr=r(G9e," (ViT model)"),G9e.forEach(t),sqe.forEach(t),Kcr=i(fl),T(G0.$$.fragment,fl),fl.forEach(t),cl.forEach(t),rPe=i(f),Vd=n(f,"H2",{class:!0});var lqe=s(Vd);O0=n(lqe,"A",{id:!0,class:!0,href:!0});var qpt=s(O0);w1e=n(qpt,"SPAN",{});var Npt=s(w1e);T(vL.$$.fragment,Npt),Npt.forEach(t),qpt.forEach(t),Zcr=i(lqe),A1e=n(lqe,"SPAN",{});var jpt=s(A1e);efr=r(jpt,"TFAutoModelForMaskedLM"),jpt.forEach(t),lqe.forEach(t),tPe=i(f),Zo=n(f,"DIV",{class:!0});var ml=s(Zo);T(FL.$$.fragment,ml),ofr=i(ml),Xd=n(ml,"P",{});var aK=s(Xd);rfr=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Qz=n(aK,"A",{href:!0});var Dpt=s(Qz);tfr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),afr=r(aK," class method or the "),Wz=n(aK,"A",{href:!0});var Gpt=s(Wz);nfr=r(Gpt,"from_config()"),Gpt.forEach(t),sfr=r(aK,` class
method.`),aK.forEach(t),lfr=i(ml),TL=n(ml,"P",{});var iqe=s(TL);ifr=r(iqe,"This class cannot be instantiated directly using "),y1e=n(iqe,"CODE",{});var Opt=s(y1e);dfr=r(Opt,"__init__()"),Opt.forEach(t),cfr=r(iqe," (throws an error)."),iqe.forEach(t),ffr=i(ml),At=n(ml,"DIV",{class:!0});var ww=s(At);T(ML.$$.fragment,ww),mfr=i(ww),L1e=n(ww,"P",{});var Vpt=s(L1e);gfr=r(Vpt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Vpt.forEach(t),hfr=i(ww),zd=n(ww,"P",{});var nK=s(zd);pfr=r(nK,`Note:
Loading a model from its configuration file does `),x1e=n(nK,"STRONG",{});var Xpt=s(x1e);ufr=r(Xpt,"not"),Xpt.forEach(t),_fr=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(nK,"A",{href:!0});var zpt=s(Hz);bfr=r(zpt,"from_pretrained()"),zpt.forEach(t),vfr=r(nK," to load the model weights."),nK.forEach(t),Ffr=i(ww),T(V0.$$.fragment,ww),ww.forEach(t),Tfr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(EL.$$.fragment,gl),Mfr=i(gl),$1e=n(gl,"P",{});var Qpt=s($1e);Efr=r(Qpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Qpt.forEach(t),Cfr=i(gl),Ka=n(gl,"P",{});var Aw=s(Ka);wfr=r(Aw,"The model class to instantiate is selected based on the "),k1e=n(Aw,"CODE",{});var Wpt=s(k1e);Afr=r(Wpt,"model_type"),Wpt.forEach(t),yfr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),S1e=n(Aw,"CODE",{});var Hpt=s(S1e);Lfr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),xfr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(Aw,"CODE",{});var Upt=s(R1e);$fr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),kfr=r(Aw,":"),Aw.forEach(t),Sfr=i(gl),ie=n(gl,"UL",{});var fe=s(ie);X0=n(fe,"LI",{});var O9e=s(X0);B1e=n(O9e,"STRONG",{});var Jpt=s(B1e);Rfr=r(Jpt,"albert"),Jpt.forEach(t),Bfr=r(O9e," \u2014 "),Uz=n(O9e,"A",{href:!0});var Ypt=s(Uz);Pfr=r(Ypt,"TFAlbertForMaskedLM"),Ypt.forEach(t),Ifr=r(O9e," (ALBERT model)"),O9e.forEach(t),qfr=i(fe),z0=n(fe,"LI",{});var V9e=s(z0);P1e=n(V9e,"STRONG",{});var Kpt=s(P1e);Nfr=r(Kpt,"bert"),Kpt.forEach(t),jfr=r(V9e," \u2014 "),Jz=n(V9e,"A",{href:!0});var Zpt=s(Jz);Dfr=r(Zpt,"TFBertForMaskedLM"),Zpt.forEach(t),Gfr=r(V9e," (BERT model)"),V9e.forEach(t),Ofr=i(fe),Q0=n(fe,"LI",{});var X9e=s(Q0);I1e=n(X9e,"STRONG",{});var eut=s(I1e);Vfr=r(eut,"camembert"),eut.forEach(t),Xfr=r(X9e," \u2014 "),Yz=n(X9e,"A",{href:!0});var out=s(Yz);zfr=r(out,"TFCamembertForMaskedLM"),out.forEach(t),Qfr=r(X9e," (CamemBERT model)"),X9e.forEach(t),Wfr=i(fe),W0=n(fe,"LI",{});var z9e=s(W0);q1e=n(z9e,"STRONG",{});var rut=s(q1e);Hfr=r(rut,"convbert"),rut.forEach(t),Ufr=r(z9e," \u2014 "),Kz=n(z9e,"A",{href:!0});var tut=s(Kz);Jfr=r(tut,"TFConvBertForMaskedLM"),tut.forEach(t),Yfr=r(z9e," (ConvBERT model)"),z9e.forEach(t),Kfr=i(fe),H0=n(fe,"LI",{});var Q9e=s(H0);N1e=n(Q9e,"STRONG",{});var aut=s(N1e);Zfr=r(aut,"deberta"),aut.forEach(t),emr=r(Q9e," \u2014 "),Zz=n(Q9e,"A",{href:!0});var nut=s(Zz);omr=r(nut,"TFDebertaForMaskedLM"),nut.forEach(t),rmr=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),tmr=i(fe),U0=n(fe,"LI",{});var W9e=s(U0);j1e=n(W9e,"STRONG",{});var sut=s(j1e);amr=r(sut,"deberta-v2"),sut.forEach(t),nmr=r(W9e," \u2014 "),eQ=n(W9e,"A",{href:!0});var lut=s(eQ);smr=r(lut,"TFDebertaV2ForMaskedLM"),lut.forEach(t),lmr=r(W9e," (DeBERTa-v2 model)"),W9e.forEach(t),imr=i(fe),J0=n(fe,"LI",{});var H9e=s(J0);D1e=n(H9e,"STRONG",{});var iut=s(D1e);dmr=r(iut,"distilbert"),iut.forEach(t),cmr=r(H9e," \u2014 "),oQ=n(H9e,"A",{href:!0});var dut=s(oQ);fmr=r(dut,"TFDistilBertForMaskedLM"),dut.forEach(t),mmr=r(H9e," (DistilBERT model)"),H9e.forEach(t),gmr=i(fe),Y0=n(fe,"LI",{});var U9e=s(Y0);G1e=n(U9e,"STRONG",{});var cut=s(G1e);hmr=r(cut,"electra"),cut.forEach(t),pmr=r(U9e," \u2014 "),rQ=n(U9e,"A",{href:!0});var fut=s(rQ);umr=r(fut,"TFElectraForMaskedLM"),fut.forEach(t),_mr=r(U9e," (ELECTRA model)"),U9e.forEach(t),bmr=i(fe),K0=n(fe,"LI",{});var J9e=s(K0);O1e=n(J9e,"STRONG",{});var mut=s(O1e);vmr=r(mut,"flaubert"),mut.forEach(t),Fmr=r(J9e," \u2014 "),tQ=n(J9e,"A",{href:!0});var gut=s(tQ);Tmr=r(gut,"TFFlaubertWithLMHeadModel"),gut.forEach(t),Mmr=r(J9e," (FlauBERT model)"),J9e.forEach(t),Emr=i(fe),Z0=n(fe,"LI",{});var Y9e=s(Z0);V1e=n(Y9e,"STRONG",{});var hut=s(V1e);Cmr=r(hut,"funnel"),hut.forEach(t),wmr=r(Y9e," \u2014 "),aQ=n(Y9e,"A",{href:!0});var put=s(aQ);Amr=r(put,"TFFunnelForMaskedLM"),put.forEach(t),ymr=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),Lmr=i(fe),eT=n(fe,"LI",{});var K9e=s(eT);X1e=n(K9e,"STRONG",{});var uut=s(X1e);xmr=r(uut,"layoutlm"),uut.forEach(t),$mr=r(K9e," \u2014 "),nQ=n(K9e,"A",{href:!0});var _ut=s(nQ);kmr=r(_ut,"TFLayoutLMForMaskedLM"),_ut.forEach(t),Smr=r(K9e," (LayoutLM model)"),K9e.forEach(t),Rmr=i(fe),oT=n(fe,"LI",{});var Z9e=s(oT);z1e=n(Z9e,"STRONG",{});var but=s(z1e);Bmr=r(but,"longformer"),but.forEach(t),Pmr=r(Z9e," \u2014 "),sQ=n(Z9e,"A",{href:!0});var vut=s(sQ);Imr=r(vut,"TFLongformerForMaskedLM"),vut.forEach(t),qmr=r(Z9e," (Longformer model)"),Z9e.forEach(t),Nmr=i(fe),rT=n(fe,"LI",{});var e$e=s(rT);Q1e=n(e$e,"STRONG",{});var Fut=s(Q1e);jmr=r(Fut,"mobilebert"),Fut.forEach(t),Dmr=r(e$e," \u2014 "),lQ=n(e$e,"A",{href:!0});var Tut=s(lQ);Gmr=r(Tut,"TFMobileBertForMaskedLM"),Tut.forEach(t),Omr=r(e$e," (MobileBERT model)"),e$e.forEach(t),Vmr=i(fe),tT=n(fe,"LI",{});var o$e=s(tT);W1e=n(o$e,"STRONG",{});var Mut=s(W1e);Xmr=r(Mut,"mpnet"),Mut.forEach(t),zmr=r(o$e," \u2014 "),iQ=n(o$e,"A",{href:!0});var Eut=s(iQ);Qmr=r(Eut,"TFMPNetForMaskedLM"),Eut.forEach(t),Wmr=r(o$e," (MPNet model)"),o$e.forEach(t),Hmr=i(fe),aT=n(fe,"LI",{});var r$e=s(aT);H1e=n(r$e,"STRONG",{});var Cut=s(H1e);Umr=r(Cut,"rembert"),Cut.forEach(t),Jmr=r(r$e," \u2014 "),dQ=n(r$e,"A",{href:!0});var wut=s(dQ);Ymr=r(wut,"TFRemBertForMaskedLM"),wut.forEach(t),Kmr=r(r$e," (RemBERT model)"),r$e.forEach(t),Zmr=i(fe),nT=n(fe,"LI",{});var t$e=s(nT);U1e=n(t$e,"STRONG",{});var Aut=s(U1e);egr=r(Aut,"roberta"),Aut.forEach(t),ogr=r(t$e," \u2014 "),cQ=n(t$e,"A",{href:!0});var yut=s(cQ);rgr=r(yut,"TFRobertaForMaskedLM"),yut.forEach(t),tgr=r(t$e," (RoBERTa model)"),t$e.forEach(t),agr=i(fe),sT=n(fe,"LI",{});var a$e=s(sT);J1e=n(a$e,"STRONG",{});var Lut=s(J1e);ngr=r(Lut,"roformer"),Lut.forEach(t),sgr=r(a$e," \u2014 "),fQ=n(a$e,"A",{href:!0});var xut=s(fQ);lgr=r(xut,"TFRoFormerForMaskedLM"),xut.forEach(t),igr=r(a$e," (RoFormer model)"),a$e.forEach(t),dgr=i(fe),lT=n(fe,"LI",{});var n$e=s(lT);Y1e=n(n$e,"STRONG",{});var $ut=s(Y1e);cgr=r($ut,"tapas"),$ut.forEach(t),fgr=r(n$e," \u2014 "),mQ=n(n$e,"A",{href:!0});var kut=s(mQ);mgr=r(kut,"TFTapasForMaskedLM"),kut.forEach(t),ggr=r(n$e," (TAPAS model)"),n$e.forEach(t),hgr=i(fe),iT=n(fe,"LI",{});var s$e=s(iT);K1e=n(s$e,"STRONG",{});var Sut=s(K1e);pgr=r(Sut,"xlm"),Sut.forEach(t),ugr=r(s$e," \u2014 "),gQ=n(s$e,"A",{href:!0});var Rut=s(gQ);_gr=r(Rut,"TFXLMWithLMHeadModel"),Rut.forEach(t),bgr=r(s$e," (XLM model)"),s$e.forEach(t),vgr=i(fe),dT=n(fe,"LI",{});var l$e=s(dT);Z1e=n(l$e,"STRONG",{});var But=s(Z1e);Fgr=r(But,"xlm-roberta"),But.forEach(t),Tgr=r(l$e," \u2014 "),hQ=n(l$e,"A",{href:!0});var Put=s(hQ);Mgr=r(Put,"TFXLMRobertaForMaskedLM"),Put.forEach(t),Egr=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),fe.forEach(t),Cgr=i(gl),T(cT.$$.fragment,gl),gl.forEach(t),ml.forEach(t),aPe=i(f),Qd=n(f,"H2",{class:!0});var dqe=s(Qd);fT=n(dqe,"A",{id:!0,class:!0,href:!0});var Iut=s(fT);ebe=n(Iut,"SPAN",{});var qut=s(ebe);T(CL.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),wgr=i(dqe),obe=n(dqe,"SPAN",{});var Nut=s(obe);Agr=r(Nut,"TFAutoModelForSeq2SeqLM"),Nut.forEach(t),dqe.forEach(t),nPe=i(f),er=n(f,"DIV",{class:!0});var hl=s(er);T(wL.$$.fragment,hl),ygr=i(hl),Wd=n(hl,"P",{});var sK=s(Wd);Lgr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pQ=n(sK,"A",{href:!0});var jut=s(pQ);xgr=r(jut,"from_pretrained()"),jut.forEach(t),$gr=r(sK," class method or the "),uQ=n(sK,"A",{href:!0});var Dut=s(uQ);kgr=r(Dut,"from_config()"),Dut.forEach(t),Sgr=r(sK,` class
method.`),sK.forEach(t),Rgr=i(hl),AL=n(hl,"P",{});var cqe=s(AL);Bgr=r(cqe,"This class cannot be instantiated directly using "),rbe=n(cqe,"CODE",{});var Gut=s(rbe);Pgr=r(Gut,"__init__()"),Gut.forEach(t),Igr=r(cqe," (throws an error)."),cqe.forEach(t),qgr=i(hl),yt=n(hl,"DIV",{class:!0});var yw=s(yt);T(yL.$$.fragment,yw),Ngr=i(yw),tbe=n(yw,"P",{});var Out=s(tbe);jgr=r(Out,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Out.forEach(t),Dgr=i(yw),Hd=n(yw,"P",{});var lK=s(Hd);Ggr=r(lK,`Note:
Loading a model from its configuration file does `),abe=n(lK,"STRONG",{});var Vut=s(abe);Ogr=r(Vut,"not"),Vut.forEach(t),Vgr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(lK,"A",{href:!0});var Xut=s(_Q);Xgr=r(Xut,"from_pretrained()"),Xut.forEach(t),zgr=r(lK," to load the model weights."),lK.forEach(t),Qgr=i(yw),T(mT.$$.fragment,yw),yw.forEach(t),Wgr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(LL.$$.fragment,pl),Hgr=i(pl),nbe=n(pl,"P",{});var zut=s(nbe);Ugr=r(zut,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zut.forEach(t),Jgr=i(pl),Za=n(pl,"P",{});var Lw=s(Za);Ygr=r(Lw,"The model class to instantiate is selected based on the "),sbe=n(Lw,"CODE",{});var Qut=s(sbe);Kgr=r(Qut,"model_type"),Qut.forEach(t),Zgr=r(Lw,` property of the config object (either
passed as an argument or loaded from `),lbe=n(Lw,"CODE",{});var Wut=s(lbe);ehr=r(Wut,"pretrained_model_name_or_path"),Wut.forEach(t),ohr=r(Lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ibe=n(Lw,"CODE",{});var Hut=s(ibe);rhr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),thr=r(Lw,":"),Lw.forEach(t),ahr=i(pl),ye=n(pl,"UL",{});var Se=s(ye);gT=n(Se,"LI",{});var i$e=s(gT);dbe=n(i$e,"STRONG",{});var Uut=s(dbe);nhr=r(Uut,"bart"),Uut.forEach(t),shr=r(i$e," \u2014 "),bQ=n(i$e,"A",{href:!0});var Jut=s(bQ);lhr=r(Jut,"TFBartForConditionalGeneration"),Jut.forEach(t),ihr=r(i$e," (BART model)"),i$e.forEach(t),dhr=i(Se),hT=n(Se,"LI",{});var d$e=s(hT);cbe=n(d$e,"STRONG",{});var Yut=s(cbe);chr=r(Yut,"blenderbot"),Yut.forEach(t),fhr=r(d$e," \u2014 "),vQ=n(d$e,"A",{href:!0});var Kut=s(vQ);mhr=r(Kut,"TFBlenderbotForConditionalGeneration"),Kut.forEach(t),ghr=r(d$e," (Blenderbot model)"),d$e.forEach(t),hhr=i(Se),pT=n(Se,"LI",{});var c$e=s(pT);fbe=n(c$e,"STRONG",{});var Zut=s(fbe);phr=r(Zut,"blenderbot-small"),Zut.forEach(t),uhr=r(c$e," \u2014 "),FQ=n(c$e,"A",{href:!0});var e_t=s(FQ);_hr=r(e_t,"TFBlenderbotSmallForConditionalGeneration"),e_t.forEach(t),bhr=r(c$e," (BlenderbotSmall model)"),c$e.forEach(t),vhr=i(Se),uT=n(Se,"LI",{});var f$e=s(uT);mbe=n(f$e,"STRONG",{});var o_t=s(mbe);Fhr=r(o_t,"encoder-decoder"),o_t.forEach(t),Thr=r(f$e," \u2014 "),TQ=n(f$e,"A",{href:!0});var r_t=s(TQ);Mhr=r(r_t,"TFEncoderDecoderModel"),r_t.forEach(t),Ehr=r(f$e," (Encoder decoder model)"),f$e.forEach(t),Chr=i(Se),_T=n(Se,"LI",{});var m$e=s(_T);gbe=n(m$e,"STRONG",{});var t_t=s(gbe);whr=r(t_t,"led"),t_t.forEach(t),Ahr=r(m$e," \u2014 "),MQ=n(m$e,"A",{href:!0});var a_t=s(MQ);yhr=r(a_t,"TFLEDForConditionalGeneration"),a_t.forEach(t),Lhr=r(m$e," (LED model)"),m$e.forEach(t),xhr=i(Se),bT=n(Se,"LI",{});var g$e=s(bT);hbe=n(g$e,"STRONG",{});var n_t=s(hbe);$hr=r(n_t,"marian"),n_t.forEach(t),khr=r(g$e," \u2014 "),EQ=n(g$e,"A",{href:!0});var s_t=s(EQ);Shr=r(s_t,"TFMarianMTModel"),s_t.forEach(t),Rhr=r(g$e," (Marian model)"),g$e.forEach(t),Bhr=i(Se),vT=n(Se,"LI",{});var h$e=s(vT);pbe=n(h$e,"STRONG",{});var l_t=s(pbe);Phr=r(l_t,"mbart"),l_t.forEach(t),Ihr=r(h$e," \u2014 "),CQ=n(h$e,"A",{href:!0});var i_t=s(CQ);qhr=r(i_t,"TFMBartForConditionalGeneration"),i_t.forEach(t),Nhr=r(h$e," (mBART model)"),h$e.forEach(t),jhr=i(Se),FT=n(Se,"LI",{});var p$e=s(FT);ube=n(p$e,"STRONG",{});var d_t=s(ube);Dhr=r(d_t,"mt5"),d_t.forEach(t),Ghr=r(p$e," \u2014 "),wQ=n(p$e,"A",{href:!0});var c_t=s(wQ);Ohr=r(c_t,"TFMT5ForConditionalGeneration"),c_t.forEach(t),Vhr=r(p$e," (mT5 model)"),p$e.forEach(t),Xhr=i(Se),TT=n(Se,"LI",{});var u$e=s(TT);_be=n(u$e,"STRONG",{});var f_t=s(_be);zhr=r(f_t,"pegasus"),f_t.forEach(t),Qhr=r(u$e," \u2014 "),AQ=n(u$e,"A",{href:!0});var m_t=s(AQ);Whr=r(m_t,"TFPegasusForConditionalGeneration"),m_t.forEach(t),Hhr=r(u$e," (Pegasus model)"),u$e.forEach(t),Uhr=i(Se),MT=n(Se,"LI",{});var _$e=s(MT);bbe=n(_$e,"STRONG",{});var g_t=s(bbe);Jhr=r(g_t,"t5"),g_t.forEach(t),Yhr=r(_$e," \u2014 "),yQ=n(_$e,"A",{href:!0});var h_t=s(yQ);Khr=r(h_t,"TFT5ForConditionalGeneration"),h_t.forEach(t),Zhr=r(_$e," (T5 model)"),_$e.forEach(t),Se.forEach(t),epr=i(pl),T(ET.$$.fragment,pl),pl.forEach(t),hl.forEach(t),sPe=i(f),Ud=n(f,"H2",{class:!0});var fqe=s(Ud);CT=n(fqe,"A",{id:!0,class:!0,href:!0});var p_t=s(CT);vbe=n(p_t,"SPAN",{});var u_t=s(vbe);T(xL.$$.fragment,u_t),u_t.forEach(t),p_t.forEach(t),opr=i(fqe),Fbe=n(fqe,"SPAN",{});var __t=s(Fbe);rpr=r(__t,"TFAutoModelForSequenceClassification"),__t.forEach(t),fqe.forEach(t),lPe=i(f),or=n(f,"DIV",{class:!0});var ul=s(or);T($L.$$.fragment,ul),tpr=i(ul),Jd=n(ul,"P",{});var iK=s(Jd);apr=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),LQ=n(iK,"A",{href:!0});var b_t=s(LQ);npr=r(b_t,"from_pretrained()"),b_t.forEach(t),spr=r(iK," class method or the "),xQ=n(iK,"A",{href:!0});var v_t=s(xQ);lpr=r(v_t,"from_config()"),v_t.forEach(t),ipr=r(iK,` class
method.`),iK.forEach(t),dpr=i(ul),kL=n(ul,"P",{});var mqe=s(kL);cpr=r(mqe,"This class cannot be instantiated directly using "),Tbe=n(mqe,"CODE",{});var F_t=s(Tbe);fpr=r(F_t,"__init__()"),F_t.forEach(t),mpr=r(mqe," (throws an error)."),mqe.forEach(t),gpr=i(ul),Lt=n(ul,"DIV",{class:!0});var xw=s(Lt);T(SL.$$.fragment,xw),hpr=i(xw),Mbe=n(xw,"P",{});var T_t=s(Mbe);ppr=r(T_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),T_t.forEach(t),upr=i(xw),Yd=n(xw,"P",{});var dK=s(Yd);_pr=r(dK,`Note:
Loading a model from its configuration file does `),Ebe=n(dK,"STRONG",{});var M_t=s(Ebe);bpr=r(M_t,"not"),M_t.forEach(t),vpr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(dK,"A",{href:!0});var E_t=s($Q);Fpr=r(E_t,"from_pretrained()"),E_t.forEach(t),Tpr=r(dK," to load the model weights."),dK.forEach(t),Mpr=i(xw),T(wT.$$.fragment,xw),xw.forEach(t),Epr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(RL.$$.fragment,_l),Cpr=i(_l),Cbe=n(_l,"P",{});var C_t=s(Cbe);wpr=r(C_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C_t.forEach(t),Apr=i(_l),en=n(_l,"P",{});var $w=s(en);ypr=r($w,"The model class to instantiate is selected based on the "),wbe=n($w,"CODE",{});var w_t=s(wbe);Lpr=r(w_t,"model_type"),w_t.forEach(t),xpr=r($w,` property of the config object (either
passed as an argument or loaded from `),Abe=n($w,"CODE",{});var A_t=s(Abe);$pr=r(A_t,"pretrained_model_name_or_path"),A_t.forEach(t),kpr=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n($w,"CODE",{});var y_t=s(ybe);Spr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),Rpr=r($w,":"),$w.forEach(t),Bpr=i(_l),Z=n(_l,"UL",{});var re=s(Z);AT=n(re,"LI",{});var b$e=s(AT);Lbe=n(b$e,"STRONG",{});var L_t=s(Lbe);Ppr=r(L_t,"albert"),L_t.forEach(t),Ipr=r(b$e," \u2014 "),kQ=n(b$e,"A",{href:!0});var x_t=s(kQ);qpr=r(x_t,"TFAlbertForSequenceClassification"),x_t.forEach(t),Npr=r(b$e," (ALBERT model)"),b$e.forEach(t),jpr=i(re),yT=n(re,"LI",{});var v$e=s(yT);xbe=n(v$e,"STRONG",{});var $_t=s(xbe);Dpr=r($_t,"bert"),$_t.forEach(t),Gpr=r(v$e," \u2014 "),SQ=n(v$e,"A",{href:!0});var k_t=s(SQ);Opr=r(k_t,"TFBertForSequenceClassification"),k_t.forEach(t),Vpr=r(v$e," (BERT model)"),v$e.forEach(t),Xpr=i(re),LT=n(re,"LI",{});var F$e=s(LT);$be=n(F$e,"STRONG",{});var S_t=s($be);zpr=r(S_t,"camembert"),S_t.forEach(t),Qpr=r(F$e," \u2014 "),RQ=n(F$e,"A",{href:!0});var R_t=s(RQ);Wpr=r(R_t,"TFCamembertForSequenceClassification"),R_t.forEach(t),Hpr=r(F$e," (CamemBERT model)"),F$e.forEach(t),Upr=i(re),xT=n(re,"LI",{});var T$e=s(xT);kbe=n(T$e,"STRONG",{});var B_t=s(kbe);Jpr=r(B_t,"convbert"),B_t.forEach(t),Ypr=r(T$e," \u2014 "),BQ=n(T$e,"A",{href:!0});var P_t=s(BQ);Kpr=r(P_t,"TFConvBertForSequenceClassification"),P_t.forEach(t),Zpr=r(T$e," (ConvBERT model)"),T$e.forEach(t),eur=i(re),$T=n(re,"LI",{});var M$e=s($T);Sbe=n(M$e,"STRONG",{});var I_t=s(Sbe);our=r(I_t,"ctrl"),I_t.forEach(t),rur=r(M$e," \u2014 "),PQ=n(M$e,"A",{href:!0});var q_t=s(PQ);tur=r(q_t,"TFCTRLForSequenceClassification"),q_t.forEach(t),aur=r(M$e," (CTRL model)"),M$e.forEach(t),nur=i(re),kT=n(re,"LI",{});var E$e=s(kT);Rbe=n(E$e,"STRONG",{});var N_t=s(Rbe);sur=r(N_t,"deberta"),N_t.forEach(t),lur=r(E$e," \u2014 "),IQ=n(E$e,"A",{href:!0});var j_t=s(IQ);iur=r(j_t,"TFDebertaForSequenceClassification"),j_t.forEach(t),dur=r(E$e," (DeBERTa model)"),E$e.forEach(t),cur=i(re),ST=n(re,"LI",{});var C$e=s(ST);Bbe=n(C$e,"STRONG",{});var D_t=s(Bbe);fur=r(D_t,"deberta-v2"),D_t.forEach(t),mur=r(C$e," \u2014 "),qQ=n(C$e,"A",{href:!0});var G_t=s(qQ);gur=r(G_t,"TFDebertaV2ForSequenceClassification"),G_t.forEach(t),hur=r(C$e," (DeBERTa-v2 model)"),C$e.forEach(t),pur=i(re),RT=n(re,"LI",{});var w$e=s(RT);Pbe=n(w$e,"STRONG",{});var O_t=s(Pbe);uur=r(O_t,"distilbert"),O_t.forEach(t),_ur=r(w$e," \u2014 "),NQ=n(w$e,"A",{href:!0});var V_t=s(NQ);bur=r(V_t,"TFDistilBertForSequenceClassification"),V_t.forEach(t),vur=r(w$e," (DistilBERT model)"),w$e.forEach(t),Fur=i(re),BT=n(re,"LI",{});var A$e=s(BT);Ibe=n(A$e,"STRONG",{});var X_t=s(Ibe);Tur=r(X_t,"electra"),X_t.forEach(t),Mur=r(A$e," \u2014 "),jQ=n(A$e,"A",{href:!0});var z_t=s(jQ);Eur=r(z_t,"TFElectraForSequenceClassification"),z_t.forEach(t),Cur=r(A$e," (ELECTRA model)"),A$e.forEach(t),wur=i(re),PT=n(re,"LI",{});var y$e=s(PT);qbe=n(y$e,"STRONG",{});var Q_t=s(qbe);Aur=r(Q_t,"flaubert"),Q_t.forEach(t),yur=r(y$e," \u2014 "),DQ=n(y$e,"A",{href:!0});var W_t=s(DQ);Lur=r(W_t,"TFFlaubertForSequenceClassification"),W_t.forEach(t),xur=r(y$e," (FlauBERT model)"),y$e.forEach(t),$ur=i(re),IT=n(re,"LI",{});var L$e=s(IT);Nbe=n(L$e,"STRONG",{});var H_t=s(Nbe);kur=r(H_t,"funnel"),H_t.forEach(t),Sur=r(L$e," \u2014 "),GQ=n(L$e,"A",{href:!0});var U_t=s(GQ);Rur=r(U_t,"TFFunnelForSequenceClassification"),U_t.forEach(t),Bur=r(L$e," (Funnel Transformer model)"),L$e.forEach(t),Pur=i(re),qT=n(re,"LI",{});var x$e=s(qT);jbe=n(x$e,"STRONG",{});var J_t=s(jbe);Iur=r(J_t,"gpt2"),J_t.forEach(t),qur=r(x$e," \u2014 "),OQ=n(x$e,"A",{href:!0});var Y_t=s(OQ);Nur=r(Y_t,"TFGPT2ForSequenceClassification"),Y_t.forEach(t),jur=r(x$e," (OpenAI GPT-2 model)"),x$e.forEach(t),Dur=i(re),NT=n(re,"LI",{});var $$e=s(NT);Dbe=n($$e,"STRONG",{});var K_t=s(Dbe);Gur=r(K_t,"gptj"),K_t.forEach(t),Our=r($$e," \u2014 "),VQ=n($$e,"A",{href:!0});var Z_t=s(VQ);Vur=r(Z_t,"TFGPTJForSequenceClassification"),Z_t.forEach(t),Xur=r($$e," (GPT-J model)"),$$e.forEach(t),zur=i(re),jT=n(re,"LI",{});var k$e=s(jT);Gbe=n(k$e,"STRONG",{});var e1t=s(Gbe);Qur=r(e1t,"layoutlm"),e1t.forEach(t),Wur=r(k$e," \u2014 "),XQ=n(k$e,"A",{href:!0});var o1t=s(XQ);Hur=r(o1t,"TFLayoutLMForSequenceClassification"),o1t.forEach(t),Uur=r(k$e," (LayoutLM model)"),k$e.forEach(t),Jur=i(re),DT=n(re,"LI",{});var S$e=s(DT);Obe=n(S$e,"STRONG",{});var r1t=s(Obe);Yur=r(r1t,"longformer"),r1t.forEach(t),Kur=r(S$e," \u2014 "),zQ=n(S$e,"A",{href:!0});var t1t=s(zQ);Zur=r(t1t,"TFLongformerForSequenceClassification"),t1t.forEach(t),e_r=r(S$e," (Longformer model)"),S$e.forEach(t),o_r=i(re),GT=n(re,"LI",{});var R$e=s(GT);Vbe=n(R$e,"STRONG",{});var a1t=s(Vbe);r_r=r(a1t,"mobilebert"),a1t.forEach(t),t_r=r(R$e," \u2014 "),QQ=n(R$e,"A",{href:!0});var n1t=s(QQ);a_r=r(n1t,"TFMobileBertForSequenceClassification"),n1t.forEach(t),n_r=r(R$e," (MobileBERT model)"),R$e.forEach(t),s_r=i(re),OT=n(re,"LI",{});var B$e=s(OT);Xbe=n(B$e,"STRONG",{});var s1t=s(Xbe);l_r=r(s1t,"mpnet"),s1t.forEach(t),i_r=r(B$e," \u2014 "),WQ=n(B$e,"A",{href:!0});var l1t=s(WQ);d_r=r(l1t,"TFMPNetForSequenceClassification"),l1t.forEach(t),c_r=r(B$e," (MPNet model)"),B$e.forEach(t),f_r=i(re),VT=n(re,"LI",{});var P$e=s(VT);zbe=n(P$e,"STRONG",{});var i1t=s(zbe);m_r=r(i1t,"openai-gpt"),i1t.forEach(t),g_r=r(P$e," \u2014 "),HQ=n(P$e,"A",{href:!0});var d1t=s(HQ);h_r=r(d1t,"TFOpenAIGPTForSequenceClassification"),d1t.forEach(t),p_r=r(P$e," (OpenAI GPT model)"),P$e.forEach(t),u_r=i(re),XT=n(re,"LI",{});var I$e=s(XT);Qbe=n(I$e,"STRONG",{});var c1t=s(Qbe);__r=r(c1t,"rembert"),c1t.forEach(t),b_r=r(I$e," \u2014 "),UQ=n(I$e,"A",{href:!0});var f1t=s(UQ);v_r=r(f1t,"TFRemBertForSequenceClassification"),f1t.forEach(t),F_r=r(I$e," (RemBERT model)"),I$e.forEach(t),T_r=i(re),zT=n(re,"LI",{});var q$e=s(zT);Wbe=n(q$e,"STRONG",{});var m1t=s(Wbe);M_r=r(m1t,"roberta"),m1t.forEach(t),E_r=r(q$e," \u2014 "),JQ=n(q$e,"A",{href:!0});var g1t=s(JQ);C_r=r(g1t,"TFRobertaForSequenceClassification"),g1t.forEach(t),w_r=r(q$e," (RoBERTa model)"),q$e.forEach(t),A_r=i(re),QT=n(re,"LI",{});var N$e=s(QT);Hbe=n(N$e,"STRONG",{});var h1t=s(Hbe);y_r=r(h1t,"roformer"),h1t.forEach(t),L_r=r(N$e," \u2014 "),YQ=n(N$e,"A",{href:!0});var p1t=s(YQ);x_r=r(p1t,"TFRoFormerForSequenceClassification"),p1t.forEach(t),$_r=r(N$e," (RoFormer model)"),N$e.forEach(t),k_r=i(re),WT=n(re,"LI",{});var j$e=s(WT);Ube=n(j$e,"STRONG",{});var u1t=s(Ube);S_r=r(u1t,"tapas"),u1t.forEach(t),R_r=r(j$e," \u2014 "),KQ=n(j$e,"A",{href:!0});var _1t=s(KQ);B_r=r(_1t,"TFTapasForSequenceClassification"),_1t.forEach(t),P_r=r(j$e," (TAPAS model)"),j$e.forEach(t),I_r=i(re),HT=n(re,"LI",{});var D$e=s(HT);Jbe=n(D$e,"STRONG",{});var b1t=s(Jbe);q_r=r(b1t,"transfo-xl"),b1t.forEach(t),N_r=r(D$e," \u2014 "),ZQ=n(D$e,"A",{href:!0});var v1t=s(ZQ);j_r=r(v1t,"TFTransfoXLForSequenceClassification"),v1t.forEach(t),D_r=r(D$e," (Transformer-XL model)"),D$e.forEach(t),G_r=i(re),UT=n(re,"LI",{});var G$e=s(UT);Ybe=n(G$e,"STRONG",{});var F1t=s(Ybe);O_r=r(F1t,"xlm"),F1t.forEach(t),V_r=r(G$e," \u2014 "),eW=n(G$e,"A",{href:!0});var T1t=s(eW);X_r=r(T1t,"TFXLMForSequenceClassification"),T1t.forEach(t),z_r=r(G$e," (XLM model)"),G$e.forEach(t),Q_r=i(re),JT=n(re,"LI",{});var O$e=s(JT);Kbe=n(O$e,"STRONG",{});var M1t=s(Kbe);W_r=r(M1t,"xlm-roberta"),M1t.forEach(t),H_r=r(O$e," \u2014 "),oW=n(O$e,"A",{href:!0});var E1t=s(oW);U_r=r(E1t,"TFXLMRobertaForSequenceClassification"),E1t.forEach(t),J_r=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),Y_r=i(re),YT=n(re,"LI",{});var V$e=s(YT);Zbe=n(V$e,"STRONG",{});var C1t=s(Zbe);K_r=r(C1t,"xlnet"),C1t.forEach(t),Z_r=r(V$e," \u2014 "),rW=n(V$e,"A",{href:!0});var w1t=s(rW);e1r=r(w1t,"TFXLNetForSequenceClassification"),w1t.forEach(t),o1r=r(V$e," (XLNet model)"),V$e.forEach(t),re.forEach(t),r1r=i(_l),T(KT.$$.fragment,_l),_l.forEach(t),ul.forEach(t),iPe=i(f),Kd=n(f,"H2",{class:!0});var gqe=s(Kd);ZT=n(gqe,"A",{id:!0,class:!0,href:!0});var A1t=s(ZT);e4e=n(A1t,"SPAN",{});var y1t=s(e4e);T(BL.$$.fragment,y1t),y1t.forEach(t),A1t.forEach(t),t1r=i(gqe),o4e=n(gqe,"SPAN",{});var L1t=s(o4e);a1r=r(L1t,"TFAutoModelForMultipleChoice"),L1t.forEach(t),gqe.forEach(t),dPe=i(f),rr=n(f,"DIV",{class:!0});var bl=s(rr);T(PL.$$.fragment,bl),n1r=i(bl),Zd=n(bl,"P",{});var cK=s(Zd);s1r=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),tW=n(cK,"A",{href:!0});var x1t=s(tW);l1r=r(x1t,"from_pretrained()"),x1t.forEach(t),i1r=r(cK," class method or the "),aW=n(cK,"A",{href:!0});var $1t=s(aW);d1r=r($1t,"from_config()"),$1t.forEach(t),c1r=r(cK,` class
method.`),cK.forEach(t),f1r=i(bl),IL=n(bl,"P",{});var hqe=s(IL);m1r=r(hqe,"This class cannot be instantiated directly using "),r4e=n(hqe,"CODE",{});var k1t=s(r4e);g1r=r(k1t,"__init__()"),k1t.forEach(t),h1r=r(hqe," (throws an error)."),hqe.forEach(t),p1r=i(bl),xt=n(bl,"DIV",{class:!0});var kw=s(xt);T(qL.$$.fragment,kw),u1r=i(kw),t4e=n(kw,"P",{});var S1t=s(t4e);_1r=r(S1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S1t.forEach(t),b1r=i(kw),ec=n(kw,"P",{});var fK=s(ec);v1r=r(fK,`Note:
Loading a model from its configuration file does `),a4e=n(fK,"STRONG",{});var R1t=s(a4e);F1r=r(R1t,"not"),R1t.forEach(t),T1r=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(fK,"A",{href:!0});var B1t=s(nW);M1r=r(B1t,"from_pretrained()"),B1t.forEach(t),E1r=r(fK," to load the model weights."),fK.forEach(t),C1r=i(kw),T(e7.$$.fragment,kw),kw.forEach(t),w1r=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(NL.$$.fragment,vl),A1r=i(vl),n4e=n(vl,"P",{});var P1t=s(n4e);y1r=r(P1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),P1t.forEach(t),L1r=i(vl),on=n(vl,"P",{});var Sw=s(on);x1r=r(Sw,"The model class to instantiate is selected based on the "),s4e=n(Sw,"CODE",{});var I1t=s(s4e);$1r=r(I1t,"model_type"),I1t.forEach(t),k1r=r(Sw,` property of the config object (either
passed as an argument or loaded from `),l4e=n(Sw,"CODE",{});var q1t=s(l4e);S1r=r(q1t,"pretrained_model_name_or_path"),q1t.forEach(t),R1r=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(Sw,"CODE",{});var N1t=s(i4e);B1r=r(N1t,"pretrained_model_name_or_path"),N1t.forEach(t),P1r=r(Sw,":"),Sw.forEach(t),I1r=i(vl),pe=n(vl,"UL",{});var _e=s(pe);o7=n(_e,"LI",{});var X$e=s(o7);d4e=n(X$e,"STRONG",{});var j1t=s(d4e);q1r=r(j1t,"albert"),j1t.forEach(t),N1r=r(X$e," \u2014 "),sW=n(X$e,"A",{href:!0});var D1t=s(sW);j1r=r(D1t,"TFAlbertForMultipleChoice"),D1t.forEach(t),D1r=r(X$e," (ALBERT model)"),X$e.forEach(t),G1r=i(_e),r7=n(_e,"LI",{});var z$e=s(r7);c4e=n(z$e,"STRONG",{});var G1t=s(c4e);O1r=r(G1t,"bert"),G1t.forEach(t),V1r=r(z$e," \u2014 "),lW=n(z$e,"A",{href:!0});var O1t=s(lW);X1r=r(O1t,"TFBertForMultipleChoice"),O1t.forEach(t),z1r=r(z$e," (BERT model)"),z$e.forEach(t),Q1r=i(_e),t7=n(_e,"LI",{});var Q$e=s(t7);f4e=n(Q$e,"STRONG",{});var V1t=s(f4e);W1r=r(V1t,"camembert"),V1t.forEach(t),H1r=r(Q$e," \u2014 "),iW=n(Q$e,"A",{href:!0});var X1t=s(iW);U1r=r(X1t,"TFCamembertForMultipleChoice"),X1t.forEach(t),J1r=r(Q$e," (CamemBERT model)"),Q$e.forEach(t),Y1r=i(_e),a7=n(_e,"LI",{});var W$e=s(a7);m4e=n(W$e,"STRONG",{});var z1t=s(m4e);K1r=r(z1t,"convbert"),z1t.forEach(t),Z1r=r(W$e," \u2014 "),dW=n(W$e,"A",{href:!0});var Q1t=s(dW);ebr=r(Q1t,"TFConvBertForMultipleChoice"),Q1t.forEach(t),obr=r(W$e," (ConvBERT model)"),W$e.forEach(t),rbr=i(_e),n7=n(_e,"LI",{});var H$e=s(n7);g4e=n(H$e,"STRONG",{});var W1t=s(g4e);tbr=r(W1t,"distilbert"),W1t.forEach(t),abr=r(H$e," \u2014 "),cW=n(H$e,"A",{href:!0});var H1t=s(cW);nbr=r(H1t,"TFDistilBertForMultipleChoice"),H1t.forEach(t),sbr=r(H$e," (DistilBERT model)"),H$e.forEach(t),lbr=i(_e),s7=n(_e,"LI",{});var U$e=s(s7);h4e=n(U$e,"STRONG",{});var U1t=s(h4e);ibr=r(U1t,"electra"),U1t.forEach(t),dbr=r(U$e," \u2014 "),fW=n(U$e,"A",{href:!0});var J1t=s(fW);cbr=r(J1t,"TFElectraForMultipleChoice"),J1t.forEach(t),fbr=r(U$e," (ELECTRA model)"),U$e.forEach(t),mbr=i(_e),l7=n(_e,"LI",{});var J$e=s(l7);p4e=n(J$e,"STRONG",{});var Y1t=s(p4e);gbr=r(Y1t,"flaubert"),Y1t.forEach(t),hbr=r(J$e," \u2014 "),mW=n(J$e,"A",{href:!0});var K1t=s(mW);pbr=r(K1t,"TFFlaubertForMultipleChoice"),K1t.forEach(t),ubr=r(J$e," (FlauBERT model)"),J$e.forEach(t),_br=i(_e),i7=n(_e,"LI",{});var Y$e=s(i7);u4e=n(Y$e,"STRONG",{});var Z1t=s(u4e);bbr=r(Z1t,"funnel"),Z1t.forEach(t),vbr=r(Y$e," \u2014 "),gW=n(Y$e,"A",{href:!0});var ebt=s(gW);Fbr=r(ebt,"TFFunnelForMultipleChoice"),ebt.forEach(t),Tbr=r(Y$e," (Funnel Transformer model)"),Y$e.forEach(t),Mbr=i(_e),d7=n(_e,"LI",{});var K$e=s(d7);_4e=n(K$e,"STRONG",{});var obt=s(_4e);Ebr=r(obt,"longformer"),obt.forEach(t),Cbr=r(K$e," \u2014 "),hW=n(K$e,"A",{href:!0});var rbt=s(hW);wbr=r(rbt,"TFLongformerForMultipleChoice"),rbt.forEach(t),Abr=r(K$e," (Longformer model)"),K$e.forEach(t),ybr=i(_e),c7=n(_e,"LI",{});var Z$e=s(c7);b4e=n(Z$e,"STRONG",{});var tbt=s(b4e);Lbr=r(tbt,"mobilebert"),tbt.forEach(t),xbr=r(Z$e," \u2014 "),pW=n(Z$e,"A",{href:!0});var abt=s(pW);$br=r(abt,"TFMobileBertForMultipleChoice"),abt.forEach(t),kbr=r(Z$e," (MobileBERT model)"),Z$e.forEach(t),Sbr=i(_e),f7=n(_e,"LI",{});var eke=s(f7);v4e=n(eke,"STRONG",{});var nbt=s(v4e);Rbr=r(nbt,"mpnet"),nbt.forEach(t),Bbr=r(eke," \u2014 "),uW=n(eke,"A",{href:!0});var sbt=s(uW);Pbr=r(sbt,"TFMPNetForMultipleChoice"),sbt.forEach(t),Ibr=r(eke," (MPNet model)"),eke.forEach(t),qbr=i(_e),m7=n(_e,"LI",{});var oke=s(m7);F4e=n(oke,"STRONG",{});var lbt=s(F4e);Nbr=r(lbt,"rembert"),lbt.forEach(t),jbr=r(oke," \u2014 "),_W=n(oke,"A",{href:!0});var ibt=s(_W);Dbr=r(ibt,"TFRemBertForMultipleChoice"),ibt.forEach(t),Gbr=r(oke," (RemBERT model)"),oke.forEach(t),Obr=i(_e),g7=n(_e,"LI",{});var rke=s(g7);T4e=n(rke,"STRONG",{});var dbt=s(T4e);Vbr=r(dbt,"roberta"),dbt.forEach(t),Xbr=r(rke," \u2014 "),bW=n(rke,"A",{href:!0});var cbt=s(bW);zbr=r(cbt,"TFRobertaForMultipleChoice"),cbt.forEach(t),Qbr=r(rke," (RoBERTa model)"),rke.forEach(t),Wbr=i(_e),h7=n(_e,"LI",{});var tke=s(h7);M4e=n(tke,"STRONG",{});var fbt=s(M4e);Hbr=r(fbt,"roformer"),fbt.forEach(t),Ubr=r(tke," \u2014 "),vW=n(tke,"A",{href:!0});var mbt=s(vW);Jbr=r(mbt,"TFRoFormerForMultipleChoice"),mbt.forEach(t),Ybr=r(tke," (RoFormer model)"),tke.forEach(t),Kbr=i(_e),p7=n(_e,"LI",{});var ake=s(p7);E4e=n(ake,"STRONG",{});var gbt=s(E4e);Zbr=r(gbt,"xlm"),gbt.forEach(t),e4r=r(ake," \u2014 "),FW=n(ake,"A",{href:!0});var hbt=s(FW);o4r=r(hbt,"TFXLMForMultipleChoice"),hbt.forEach(t),r4r=r(ake," (XLM model)"),ake.forEach(t),t4r=i(_e),u7=n(_e,"LI",{});var nke=s(u7);C4e=n(nke,"STRONG",{});var pbt=s(C4e);a4r=r(pbt,"xlm-roberta"),pbt.forEach(t),n4r=r(nke," \u2014 "),TW=n(nke,"A",{href:!0});var ubt=s(TW);s4r=r(ubt,"TFXLMRobertaForMultipleChoice"),ubt.forEach(t),l4r=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),i4r=i(_e),_7=n(_e,"LI",{});var ske=s(_7);w4e=n(ske,"STRONG",{});var _bt=s(w4e);d4r=r(_bt,"xlnet"),_bt.forEach(t),c4r=r(ske," \u2014 "),MW=n(ske,"A",{href:!0});var bbt=s(MW);f4r=r(bbt,"TFXLNetForMultipleChoice"),bbt.forEach(t),m4r=r(ske," (XLNet model)"),ske.forEach(t),_e.forEach(t),g4r=i(vl),T(b7.$$.fragment,vl),vl.forEach(t),bl.forEach(t),cPe=i(f),oc=n(f,"H2",{class:!0});var pqe=s(oc);v7=n(pqe,"A",{id:!0,class:!0,href:!0});var vbt=s(v7);A4e=n(vbt,"SPAN",{});var Fbt=s(A4e);T(jL.$$.fragment,Fbt),Fbt.forEach(t),vbt.forEach(t),h4r=i(pqe),y4e=n(pqe,"SPAN",{});var Tbt=s(y4e);p4r=r(Tbt,"TFAutoModelForTableQuestionAnswering"),Tbt.forEach(t),pqe.forEach(t),fPe=i(f),tr=n(f,"DIV",{class:!0});var Fl=s(tr);T(DL.$$.fragment,Fl),u4r=i(Fl),rc=n(Fl,"P",{});var mK=s(rc);_4r=r(mK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),EW=n(mK,"A",{href:!0});var Mbt=s(EW);b4r=r(Mbt,"from_pretrained()"),Mbt.forEach(t),v4r=r(mK," class method or the "),CW=n(mK,"A",{href:!0});var Ebt=s(CW);F4r=r(Ebt,"from_config()"),Ebt.forEach(t),T4r=r(mK,` class
method.`),mK.forEach(t),M4r=i(Fl),GL=n(Fl,"P",{});var uqe=s(GL);E4r=r(uqe,"This class cannot be instantiated directly using "),L4e=n(uqe,"CODE",{});var Cbt=s(L4e);C4r=r(Cbt,"__init__()"),Cbt.forEach(t),w4r=r(uqe," (throws an error)."),uqe.forEach(t),A4r=i(Fl),$t=n(Fl,"DIV",{class:!0});var Rw=s($t);T(OL.$$.fragment,Rw),y4r=i(Rw),x4e=n(Rw,"P",{});var wbt=s(x4e);L4r=r(wbt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),wbt.forEach(t),x4r=i(Rw),tc=n(Rw,"P",{});var gK=s(tc);$4r=r(gK,`Note:
Loading a model from its configuration file does `),$4e=n(gK,"STRONG",{});var Abt=s($4e);k4r=r(Abt,"not"),Abt.forEach(t),S4r=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(gK,"A",{href:!0});var ybt=s(wW);R4r=r(ybt,"from_pretrained()"),ybt.forEach(t),B4r=r(gK," to load the model weights."),gK.forEach(t),P4r=i(Rw),T(F7.$$.fragment,Rw),Rw.forEach(t),I4r=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(VL.$$.fragment,Tl),q4r=i(Tl),k4e=n(Tl,"P",{});var Lbt=s(k4e);N4r=r(Lbt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lbt.forEach(t),j4r=i(Tl),rn=n(Tl,"P",{});var Bw=s(rn);D4r=r(Bw,"The model class to instantiate is selected based on the "),S4e=n(Bw,"CODE",{});var xbt=s(S4e);G4r=r(xbt,"model_type"),xbt.forEach(t),O4r=r(Bw,` property of the config object (either
passed as an argument or loaded from `),R4e=n(Bw,"CODE",{});var $bt=s(R4e);V4r=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),X4r=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(Bw,"CODE",{});var kbt=s(B4e);z4r=r(kbt,"pretrained_model_name_or_path"),kbt.forEach(t),Q4r=r(Bw,":"),Bw.forEach(t),W4r=i(Tl),P4e=n(Tl,"UL",{});var Sbt=s(P4e);T7=n(Sbt,"LI",{});var lke=s(T7);I4e=n(lke,"STRONG",{});var Rbt=s(I4e);H4r=r(Rbt,"tapas"),Rbt.forEach(t),U4r=r(lke," \u2014 "),AW=n(lke,"A",{href:!0});var Bbt=s(AW);J4r=r(Bbt,"TFTapasForQuestionAnswering"),Bbt.forEach(t),Y4r=r(lke," (TAPAS model)"),lke.forEach(t),Sbt.forEach(t),K4r=i(Tl),T(M7.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),mPe=i(f),ac=n(f,"H2",{class:!0});var _qe=s(ac);E7=n(_qe,"A",{id:!0,class:!0,href:!0});var Pbt=s(E7);q4e=n(Pbt,"SPAN",{});var Ibt=s(q4e);T(XL.$$.fragment,Ibt),Ibt.forEach(t),Pbt.forEach(t),Z4r=i(_qe),N4e=n(_qe,"SPAN",{});var qbt=s(N4e);e2r=r(qbt,"TFAutoModelForTokenClassification"),qbt.forEach(t),_qe.forEach(t),gPe=i(f),ar=n(f,"DIV",{class:!0});var Ml=s(ar);T(zL.$$.fragment,Ml),o2r=i(Ml),nc=n(Ml,"P",{});var hK=s(nc);r2r=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yW=n(hK,"A",{href:!0});var Nbt=s(yW);t2r=r(Nbt,"from_pretrained()"),Nbt.forEach(t),a2r=r(hK," class method or the "),LW=n(hK,"A",{href:!0});var jbt=s(LW);n2r=r(jbt,"from_config()"),jbt.forEach(t),s2r=r(hK,` class
method.`),hK.forEach(t),l2r=i(Ml),QL=n(Ml,"P",{});var bqe=s(QL);i2r=r(bqe,"This class cannot be instantiated directly using "),j4e=n(bqe,"CODE",{});var Dbt=s(j4e);d2r=r(Dbt,"__init__()"),Dbt.forEach(t),c2r=r(bqe," (throws an error)."),bqe.forEach(t),f2r=i(Ml),kt=n(Ml,"DIV",{class:!0});var Pw=s(kt);T(WL.$$.fragment,Pw),m2r=i(Pw),D4e=n(Pw,"P",{});var Gbt=s(D4e);g2r=r(Gbt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gbt.forEach(t),h2r=i(Pw),sc=n(Pw,"P",{});var pK=s(sc);p2r=r(pK,`Note:
Loading a model from its configuration file does `),G4e=n(pK,"STRONG",{});var Obt=s(G4e);u2r=r(Obt,"not"),Obt.forEach(t),_2r=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xW=n(pK,"A",{href:!0});var Vbt=s(xW);b2r=r(Vbt,"from_pretrained()"),Vbt.forEach(t),v2r=r(pK," to load the model weights."),pK.forEach(t),F2r=i(Pw),T(C7.$$.fragment,Pw),Pw.forEach(t),T2r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(HL.$$.fragment,El),M2r=i(El),O4e=n(El,"P",{});var Xbt=s(O4e);E2r=r(Xbt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xbt.forEach(t),C2r=i(El),tn=n(El,"P",{});var Iw=s(tn);w2r=r(Iw,"The model class to instantiate is selected based on the "),V4e=n(Iw,"CODE",{});var zbt=s(V4e);A2r=r(zbt,"model_type"),zbt.forEach(t),y2r=r(Iw,` property of the config object (either
passed as an argument or loaded from `),X4e=n(Iw,"CODE",{});var Qbt=s(X4e);L2r=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),x2r=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z4e=n(Iw,"CODE",{});var Wbt=s(z4e);$2r=r(Wbt,"pretrained_model_name_or_path"),Wbt.forEach(t),k2r=r(Iw,":"),Iw.forEach(t),S2r=i(El),de=n(El,"UL",{});var me=s(de);w7=n(me,"LI",{});var ike=s(w7);Q4e=n(ike,"STRONG",{});var Hbt=s(Q4e);R2r=r(Hbt,"albert"),Hbt.forEach(t),B2r=r(ike," \u2014 "),$W=n(ike,"A",{href:!0});var Ubt=s($W);P2r=r(Ubt,"TFAlbertForTokenClassification"),Ubt.forEach(t),I2r=r(ike," (ALBERT model)"),ike.forEach(t),q2r=i(me),A7=n(me,"LI",{});var dke=s(A7);W4e=n(dke,"STRONG",{});var Jbt=s(W4e);N2r=r(Jbt,"bert"),Jbt.forEach(t),j2r=r(dke," \u2014 "),kW=n(dke,"A",{href:!0});var Ybt=s(kW);D2r=r(Ybt,"TFBertForTokenClassification"),Ybt.forEach(t),G2r=r(dke," (BERT model)"),dke.forEach(t),O2r=i(me),y7=n(me,"LI",{});var cke=s(y7);H4e=n(cke,"STRONG",{});var Kbt=s(H4e);V2r=r(Kbt,"camembert"),Kbt.forEach(t),X2r=r(cke," \u2014 "),SW=n(cke,"A",{href:!0});var Zbt=s(SW);z2r=r(Zbt,"TFCamembertForTokenClassification"),Zbt.forEach(t),Q2r=r(cke," (CamemBERT model)"),cke.forEach(t),W2r=i(me),L7=n(me,"LI",{});var fke=s(L7);U4e=n(fke,"STRONG",{});var e4t=s(U4e);H2r=r(e4t,"convbert"),e4t.forEach(t),U2r=r(fke," \u2014 "),RW=n(fke,"A",{href:!0});var o4t=s(RW);J2r=r(o4t,"TFConvBertForTokenClassification"),o4t.forEach(t),Y2r=r(fke," (ConvBERT model)"),fke.forEach(t),K2r=i(me),x7=n(me,"LI",{});var mke=s(x7);J4e=n(mke,"STRONG",{});var r4t=s(J4e);Z2r=r(r4t,"deberta"),r4t.forEach(t),e5r=r(mke," \u2014 "),BW=n(mke,"A",{href:!0});var t4t=s(BW);o5r=r(t4t,"TFDebertaForTokenClassification"),t4t.forEach(t),r5r=r(mke," (DeBERTa model)"),mke.forEach(t),t5r=i(me),$7=n(me,"LI",{});var gke=s($7);Y4e=n(gke,"STRONG",{});var a4t=s(Y4e);a5r=r(a4t,"deberta-v2"),a4t.forEach(t),n5r=r(gke," \u2014 "),PW=n(gke,"A",{href:!0});var n4t=s(PW);s5r=r(n4t,"TFDebertaV2ForTokenClassification"),n4t.forEach(t),l5r=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),i5r=i(me),k7=n(me,"LI",{});var hke=s(k7);K4e=n(hke,"STRONG",{});var s4t=s(K4e);d5r=r(s4t,"distilbert"),s4t.forEach(t),c5r=r(hke," \u2014 "),IW=n(hke,"A",{href:!0});var l4t=s(IW);f5r=r(l4t,"TFDistilBertForTokenClassification"),l4t.forEach(t),m5r=r(hke," (DistilBERT model)"),hke.forEach(t),g5r=i(me),S7=n(me,"LI",{});var pke=s(S7);Z4e=n(pke,"STRONG",{});var i4t=s(Z4e);h5r=r(i4t,"electra"),i4t.forEach(t),p5r=r(pke," \u2014 "),qW=n(pke,"A",{href:!0});var d4t=s(qW);u5r=r(d4t,"TFElectraForTokenClassification"),d4t.forEach(t),_5r=r(pke," (ELECTRA model)"),pke.forEach(t),b5r=i(me),R7=n(me,"LI",{});var uke=s(R7);e2e=n(uke,"STRONG",{});var c4t=s(e2e);v5r=r(c4t,"flaubert"),c4t.forEach(t),F5r=r(uke," \u2014 "),NW=n(uke,"A",{href:!0});var f4t=s(NW);T5r=r(f4t,"TFFlaubertForTokenClassification"),f4t.forEach(t),M5r=r(uke," (FlauBERT model)"),uke.forEach(t),E5r=i(me),B7=n(me,"LI",{});var _ke=s(B7);o2e=n(_ke,"STRONG",{});var m4t=s(o2e);C5r=r(m4t,"funnel"),m4t.forEach(t),w5r=r(_ke," \u2014 "),jW=n(_ke,"A",{href:!0});var g4t=s(jW);A5r=r(g4t,"TFFunnelForTokenClassification"),g4t.forEach(t),y5r=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),L5r=i(me),P7=n(me,"LI",{});var bke=s(P7);r2e=n(bke,"STRONG",{});var h4t=s(r2e);x5r=r(h4t,"layoutlm"),h4t.forEach(t),$5r=r(bke," \u2014 "),DW=n(bke,"A",{href:!0});var p4t=s(DW);k5r=r(p4t,"TFLayoutLMForTokenClassification"),p4t.forEach(t),S5r=r(bke," (LayoutLM model)"),bke.forEach(t),R5r=i(me),I7=n(me,"LI",{});var vke=s(I7);t2e=n(vke,"STRONG",{});var u4t=s(t2e);B5r=r(u4t,"longformer"),u4t.forEach(t),P5r=r(vke," \u2014 "),GW=n(vke,"A",{href:!0});var _4t=s(GW);I5r=r(_4t,"TFLongformerForTokenClassification"),_4t.forEach(t),q5r=r(vke," (Longformer model)"),vke.forEach(t),N5r=i(me),q7=n(me,"LI",{});var Fke=s(q7);a2e=n(Fke,"STRONG",{});var b4t=s(a2e);j5r=r(b4t,"mobilebert"),b4t.forEach(t),D5r=r(Fke," \u2014 "),OW=n(Fke,"A",{href:!0});var v4t=s(OW);G5r=r(v4t,"TFMobileBertForTokenClassification"),v4t.forEach(t),O5r=r(Fke," (MobileBERT model)"),Fke.forEach(t),V5r=i(me),N7=n(me,"LI",{});var Tke=s(N7);n2e=n(Tke,"STRONG",{});var F4t=s(n2e);X5r=r(F4t,"mpnet"),F4t.forEach(t),z5r=r(Tke," \u2014 "),VW=n(Tke,"A",{href:!0});var T4t=s(VW);Q5r=r(T4t,"TFMPNetForTokenClassification"),T4t.forEach(t),W5r=r(Tke," (MPNet model)"),Tke.forEach(t),H5r=i(me),j7=n(me,"LI",{});var Mke=s(j7);s2e=n(Mke,"STRONG",{});var M4t=s(s2e);U5r=r(M4t,"rembert"),M4t.forEach(t),J5r=r(Mke," \u2014 "),XW=n(Mke,"A",{href:!0});var E4t=s(XW);Y5r=r(E4t,"TFRemBertForTokenClassification"),E4t.forEach(t),K5r=r(Mke," (RemBERT model)"),Mke.forEach(t),Z5r=i(me),D7=n(me,"LI",{});var Eke=s(D7);l2e=n(Eke,"STRONG",{});var C4t=s(l2e);evr=r(C4t,"roberta"),C4t.forEach(t),ovr=r(Eke," \u2014 "),zW=n(Eke,"A",{href:!0});var w4t=s(zW);rvr=r(w4t,"TFRobertaForTokenClassification"),w4t.forEach(t),tvr=r(Eke," (RoBERTa model)"),Eke.forEach(t),avr=i(me),G7=n(me,"LI",{});var Cke=s(G7);i2e=n(Cke,"STRONG",{});var A4t=s(i2e);nvr=r(A4t,"roformer"),A4t.forEach(t),svr=r(Cke," \u2014 "),QW=n(Cke,"A",{href:!0});var y4t=s(QW);lvr=r(y4t,"TFRoFormerForTokenClassification"),y4t.forEach(t),ivr=r(Cke," (RoFormer model)"),Cke.forEach(t),dvr=i(me),O7=n(me,"LI",{});var wke=s(O7);d2e=n(wke,"STRONG",{});var L4t=s(d2e);cvr=r(L4t,"xlm"),L4t.forEach(t),fvr=r(wke," \u2014 "),WW=n(wke,"A",{href:!0});var x4t=s(WW);mvr=r(x4t,"TFXLMForTokenClassification"),x4t.forEach(t),gvr=r(wke," (XLM model)"),wke.forEach(t),hvr=i(me),V7=n(me,"LI",{});var Ake=s(V7);c2e=n(Ake,"STRONG",{});var $4t=s(c2e);pvr=r($4t,"xlm-roberta"),$4t.forEach(t),uvr=r(Ake," \u2014 "),HW=n(Ake,"A",{href:!0});var k4t=s(HW);_vr=r(k4t,"TFXLMRobertaForTokenClassification"),k4t.forEach(t),bvr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),vvr=i(me),X7=n(me,"LI",{});var yke=s(X7);f2e=n(yke,"STRONG",{});var S4t=s(f2e);Fvr=r(S4t,"xlnet"),S4t.forEach(t),Tvr=r(yke," \u2014 "),UW=n(yke,"A",{href:!0});var R4t=s(UW);Mvr=r(R4t,"TFXLNetForTokenClassification"),R4t.forEach(t),Evr=r(yke," (XLNet model)"),yke.forEach(t),me.forEach(t),Cvr=i(El),T(z7.$$.fragment,El),El.forEach(t),Ml.forEach(t),hPe=i(f),lc=n(f,"H2",{class:!0});var vqe=s(lc);Q7=n(vqe,"A",{id:!0,class:!0,href:!0});var B4t=s(Q7);m2e=n(B4t,"SPAN",{});var P4t=s(m2e);T(UL.$$.fragment,P4t),P4t.forEach(t),B4t.forEach(t),wvr=i(vqe),g2e=n(vqe,"SPAN",{});var I4t=s(g2e);Avr=r(I4t,"TFAutoModelForQuestionAnswering"),I4t.forEach(t),vqe.forEach(t),pPe=i(f),nr=n(f,"DIV",{class:!0});var Cl=s(nr);T(JL.$$.fragment,Cl),yvr=i(Cl),ic=n(Cl,"P",{});var uK=s(ic);Lvr=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JW=n(uK,"A",{href:!0});var q4t=s(JW);xvr=r(q4t,"from_pretrained()"),q4t.forEach(t),$vr=r(uK," class method or the "),YW=n(uK,"A",{href:!0});var N4t=s(YW);kvr=r(N4t,"from_config()"),N4t.forEach(t),Svr=r(uK,` class
method.`),uK.forEach(t),Rvr=i(Cl),YL=n(Cl,"P",{});var Fqe=s(YL);Bvr=r(Fqe,"This class cannot be instantiated directly using "),h2e=n(Fqe,"CODE",{});var j4t=s(h2e);Pvr=r(j4t,"__init__()"),j4t.forEach(t),Ivr=r(Fqe," (throws an error)."),Fqe.forEach(t),qvr=i(Cl),St=n(Cl,"DIV",{class:!0});var qw=s(St);T(KL.$$.fragment,qw),Nvr=i(qw),p2e=n(qw,"P",{});var D4t=s(p2e);jvr=r(D4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D4t.forEach(t),Dvr=i(qw),dc=n(qw,"P",{});var _K=s(dc);Gvr=r(_K,`Note:
Loading a model from its configuration file does `),u2e=n(_K,"STRONG",{});var G4t=s(u2e);Ovr=r(G4t,"not"),G4t.forEach(t),Vvr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(_K,"A",{href:!0});var O4t=s(KW);Xvr=r(O4t,"from_pretrained()"),O4t.forEach(t),zvr=r(_K," to load the model weights."),_K.forEach(t),Qvr=i(qw),T(W7.$$.fragment,qw),qw.forEach(t),Wvr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(ZL.$$.fragment,wl),Hvr=i(wl),_2e=n(wl,"P",{});var V4t=s(_2e);Uvr=r(V4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),V4t.forEach(t),Jvr=i(wl),an=n(wl,"P",{});var Nw=s(an);Yvr=r(Nw,"The model class to instantiate is selected based on the "),b2e=n(Nw,"CODE",{});var X4t=s(b2e);Kvr=r(X4t,"model_type"),X4t.forEach(t),Zvr=r(Nw,` property of the config object (either
passed as an argument or loaded from `),v2e=n(Nw,"CODE",{});var z4t=s(v2e);eFr=r(z4t,"pretrained_model_name_or_path"),z4t.forEach(t),oFr=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F2e=n(Nw,"CODE",{});var Q4t=s(F2e);rFr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),tFr=r(Nw,":"),Nw.forEach(t),aFr=i(wl),ce=n(wl,"UL",{});var ge=s(ce);H7=n(ge,"LI",{});var Lke=s(H7);T2e=n(Lke,"STRONG",{});var W4t=s(T2e);nFr=r(W4t,"albert"),W4t.forEach(t),sFr=r(Lke," \u2014 "),ZW=n(Lke,"A",{href:!0});var H4t=s(ZW);lFr=r(H4t,"TFAlbertForQuestionAnswering"),H4t.forEach(t),iFr=r(Lke," (ALBERT model)"),Lke.forEach(t),dFr=i(ge),U7=n(ge,"LI",{});var xke=s(U7);M2e=n(xke,"STRONG",{});var U4t=s(M2e);cFr=r(U4t,"bert"),U4t.forEach(t),fFr=r(xke," \u2014 "),eH=n(xke,"A",{href:!0});var J4t=s(eH);mFr=r(J4t,"TFBertForQuestionAnswering"),J4t.forEach(t),gFr=r(xke," (BERT model)"),xke.forEach(t),hFr=i(ge),J7=n(ge,"LI",{});var $ke=s(J7);E2e=n($ke,"STRONG",{});var Y4t=s(E2e);pFr=r(Y4t,"camembert"),Y4t.forEach(t),uFr=r($ke," \u2014 "),oH=n($ke,"A",{href:!0});var K4t=s(oH);_Fr=r(K4t,"TFCamembertForQuestionAnswering"),K4t.forEach(t),bFr=r($ke," (CamemBERT model)"),$ke.forEach(t),vFr=i(ge),Y7=n(ge,"LI",{});var kke=s(Y7);C2e=n(kke,"STRONG",{});var Z4t=s(C2e);FFr=r(Z4t,"convbert"),Z4t.forEach(t),TFr=r(kke," \u2014 "),rH=n(kke,"A",{href:!0});var e2t=s(rH);MFr=r(e2t,"TFConvBertForQuestionAnswering"),e2t.forEach(t),EFr=r(kke," (ConvBERT model)"),kke.forEach(t),CFr=i(ge),K7=n(ge,"LI",{});var Ske=s(K7);w2e=n(Ske,"STRONG",{});var o2t=s(w2e);wFr=r(o2t,"deberta"),o2t.forEach(t),AFr=r(Ske," \u2014 "),tH=n(Ske,"A",{href:!0});var r2t=s(tH);yFr=r(r2t,"TFDebertaForQuestionAnswering"),r2t.forEach(t),LFr=r(Ske," (DeBERTa model)"),Ske.forEach(t),xFr=i(ge),Z7=n(ge,"LI",{});var Rke=s(Z7);A2e=n(Rke,"STRONG",{});var t2t=s(A2e);$Fr=r(t2t,"deberta-v2"),t2t.forEach(t),kFr=r(Rke," \u2014 "),aH=n(Rke,"A",{href:!0});var a2t=s(aH);SFr=r(a2t,"TFDebertaV2ForQuestionAnswering"),a2t.forEach(t),RFr=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),BFr=i(ge),eM=n(ge,"LI",{});var Bke=s(eM);y2e=n(Bke,"STRONG",{});var n2t=s(y2e);PFr=r(n2t,"distilbert"),n2t.forEach(t),IFr=r(Bke," \u2014 "),nH=n(Bke,"A",{href:!0});var s2t=s(nH);qFr=r(s2t,"TFDistilBertForQuestionAnswering"),s2t.forEach(t),NFr=r(Bke," (DistilBERT model)"),Bke.forEach(t),jFr=i(ge),oM=n(ge,"LI",{});var Pke=s(oM);L2e=n(Pke,"STRONG",{});var l2t=s(L2e);DFr=r(l2t,"electra"),l2t.forEach(t),GFr=r(Pke," \u2014 "),sH=n(Pke,"A",{href:!0});var i2t=s(sH);OFr=r(i2t,"TFElectraForQuestionAnswering"),i2t.forEach(t),VFr=r(Pke," (ELECTRA model)"),Pke.forEach(t),XFr=i(ge),rM=n(ge,"LI",{});var Ike=s(rM);x2e=n(Ike,"STRONG",{});var d2t=s(x2e);zFr=r(d2t,"flaubert"),d2t.forEach(t),QFr=r(Ike," \u2014 "),lH=n(Ike,"A",{href:!0});var c2t=s(lH);WFr=r(c2t,"TFFlaubertForQuestionAnsweringSimple"),c2t.forEach(t),HFr=r(Ike," (FlauBERT model)"),Ike.forEach(t),UFr=i(ge),tM=n(ge,"LI",{});var qke=s(tM);$2e=n(qke,"STRONG",{});var f2t=s($2e);JFr=r(f2t,"funnel"),f2t.forEach(t),YFr=r(qke," \u2014 "),iH=n(qke,"A",{href:!0});var m2t=s(iH);KFr=r(m2t,"TFFunnelForQuestionAnswering"),m2t.forEach(t),ZFr=r(qke," (Funnel Transformer model)"),qke.forEach(t),e0r=i(ge),aM=n(ge,"LI",{});var Nke=s(aM);k2e=n(Nke,"STRONG",{});var g2t=s(k2e);o0r=r(g2t,"gptj"),g2t.forEach(t),r0r=r(Nke," \u2014 "),dH=n(Nke,"A",{href:!0});var h2t=s(dH);t0r=r(h2t,"TFGPTJForQuestionAnswering"),h2t.forEach(t),a0r=r(Nke," (GPT-J model)"),Nke.forEach(t),n0r=i(ge),nM=n(ge,"LI",{});var jke=s(nM);S2e=n(jke,"STRONG",{});var p2t=s(S2e);s0r=r(p2t,"longformer"),p2t.forEach(t),l0r=r(jke," \u2014 "),cH=n(jke,"A",{href:!0});var u2t=s(cH);i0r=r(u2t,"TFLongformerForQuestionAnswering"),u2t.forEach(t),d0r=r(jke," (Longformer model)"),jke.forEach(t),c0r=i(ge),sM=n(ge,"LI",{});var Dke=s(sM);R2e=n(Dke,"STRONG",{});var _2t=s(R2e);f0r=r(_2t,"mobilebert"),_2t.forEach(t),m0r=r(Dke," \u2014 "),fH=n(Dke,"A",{href:!0});var b2t=s(fH);g0r=r(b2t,"TFMobileBertForQuestionAnswering"),b2t.forEach(t),h0r=r(Dke," (MobileBERT model)"),Dke.forEach(t),p0r=i(ge),lM=n(ge,"LI",{});var Gke=s(lM);B2e=n(Gke,"STRONG",{});var v2t=s(B2e);u0r=r(v2t,"mpnet"),v2t.forEach(t),_0r=r(Gke," \u2014 "),mH=n(Gke,"A",{href:!0});var F2t=s(mH);b0r=r(F2t,"TFMPNetForQuestionAnswering"),F2t.forEach(t),v0r=r(Gke," (MPNet model)"),Gke.forEach(t),F0r=i(ge),iM=n(ge,"LI",{});var Oke=s(iM);P2e=n(Oke,"STRONG",{});var T2t=s(P2e);T0r=r(T2t,"rembert"),T2t.forEach(t),M0r=r(Oke," \u2014 "),gH=n(Oke,"A",{href:!0});var M2t=s(gH);E0r=r(M2t,"TFRemBertForQuestionAnswering"),M2t.forEach(t),C0r=r(Oke," (RemBERT model)"),Oke.forEach(t),w0r=i(ge),dM=n(ge,"LI",{});var Vke=s(dM);I2e=n(Vke,"STRONG",{});var E2t=s(I2e);A0r=r(E2t,"roberta"),E2t.forEach(t),y0r=r(Vke," \u2014 "),hH=n(Vke,"A",{href:!0});var C2t=s(hH);L0r=r(C2t,"TFRobertaForQuestionAnswering"),C2t.forEach(t),x0r=r(Vke," (RoBERTa model)"),Vke.forEach(t),$0r=i(ge),cM=n(ge,"LI",{});var Xke=s(cM);q2e=n(Xke,"STRONG",{});var w2t=s(q2e);k0r=r(w2t,"roformer"),w2t.forEach(t),S0r=r(Xke," \u2014 "),pH=n(Xke,"A",{href:!0});var A2t=s(pH);R0r=r(A2t,"TFRoFormerForQuestionAnswering"),A2t.forEach(t),B0r=r(Xke," (RoFormer model)"),Xke.forEach(t),P0r=i(ge),fM=n(ge,"LI",{});var zke=s(fM);N2e=n(zke,"STRONG",{});var y2t=s(N2e);I0r=r(y2t,"xlm"),y2t.forEach(t),q0r=r(zke," \u2014 "),uH=n(zke,"A",{href:!0});var L2t=s(uH);N0r=r(L2t,"TFXLMForQuestionAnsweringSimple"),L2t.forEach(t),j0r=r(zke," (XLM model)"),zke.forEach(t),D0r=i(ge),mM=n(ge,"LI",{});var Qke=s(mM);j2e=n(Qke,"STRONG",{});var x2t=s(j2e);G0r=r(x2t,"xlm-roberta"),x2t.forEach(t),O0r=r(Qke," \u2014 "),_H=n(Qke,"A",{href:!0});var $2t=s(_H);V0r=r($2t,"TFXLMRobertaForQuestionAnswering"),$2t.forEach(t),X0r=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),z0r=i(ge),gM=n(ge,"LI",{});var Wke=s(gM);D2e=n(Wke,"STRONG",{});var k2t=s(D2e);Q0r=r(k2t,"xlnet"),k2t.forEach(t),W0r=r(Wke," \u2014 "),bH=n(Wke,"A",{href:!0});var S2t=s(bH);H0r=r(S2t,"TFXLNetForQuestionAnsweringSimple"),S2t.forEach(t),U0r=r(Wke," (XLNet model)"),Wke.forEach(t),ge.forEach(t),J0r=i(wl),T(hM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),uPe=i(f),cc=n(f,"H2",{class:!0});var Tqe=s(cc);pM=n(Tqe,"A",{id:!0,class:!0,href:!0});var R2t=s(pM);G2e=n(R2t,"SPAN",{});var B2t=s(G2e);T(e8.$$.fragment,B2t),B2t.forEach(t),R2t.forEach(t),Y0r=i(Tqe),O2e=n(Tqe,"SPAN",{});var P2t=s(O2e);K0r=r(P2t,"TFAutoModelForVision2Seq"),P2t.forEach(t),Tqe.forEach(t),_Pe=i(f),sr=n(f,"DIV",{class:!0});var Al=s(sr);T(o8.$$.fragment,Al),Z0r=i(Al),fc=n(Al,"P",{});var bK=s(fc);eTr=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vH=n(bK,"A",{href:!0});var I2t=s(vH);oTr=r(I2t,"from_pretrained()"),I2t.forEach(t),rTr=r(bK," class method or the "),FH=n(bK,"A",{href:!0});var q2t=s(FH);tTr=r(q2t,"from_config()"),q2t.forEach(t),aTr=r(bK,` class
method.`),bK.forEach(t),nTr=i(Al),r8=n(Al,"P",{});var Mqe=s(r8);sTr=r(Mqe,"This class cannot be instantiated directly using "),V2e=n(Mqe,"CODE",{});var N2t=s(V2e);lTr=r(N2t,"__init__()"),N2t.forEach(t),iTr=r(Mqe," (throws an error)."),Mqe.forEach(t),dTr=i(Al),Rt=n(Al,"DIV",{class:!0});var jw=s(Rt);T(t8.$$.fragment,jw),cTr=i(jw),X2e=n(jw,"P",{});var j2t=s(X2e);fTr=r(j2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j2t.forEach(t),mTr=i(jw),mc=n(jw,"P",{});var vK=s(mc);gTr=r(vK,`Note:
Loading a model from its configuration file does `),z2e=n(vK,"STRONG",{});var D2t=s(z2e);hTr=r(D2t,"not"),D2t.forEach(t),pTr=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(vK,"A",{href:!0});var G2t=s(TH);uTr=r(G2t,"from_pretrained()"),G2t.forEach(t),_Tr=r(vK," to load the model weights."),vK.forEach(t),bTr=i(jw),T(uM.$$.fragment,jw),jw.forEach(t),vTr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(a8.$$.fragment,yl),FTr=i(yl),Q2e=n(yl,"P",{});var O2t=s(Q2e);TTr=r(O2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),O2t.forEach(t),MTr=i(yl),nn=n(yl,"P",{});var Dw=s(nn);ETr=r(Dw,"The model class to instantiate is selected based on the "),W2e=n(Dw,"CODE",{});var V2t=s(W2e);CTr=r(V2t,"model_type"),V2t.forEach(t),wTr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),H2e=n(Dw,"CODE",{});var X2t=s(H2e);ATr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),yTr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U2e=n(Dw,"CODE",{});var z2t=s(U2e);LTr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),xTr=r(Dw,":"),Dw.forEach(t),$Tr=i(yl),J2e=n(yl,"UL",{});var Q2t=s(J2e);_M=n(Q2t,"LI",{});var Hke=s(_M);Y2e=n(Hke,"STRONG",{});var W2t=s(Y2e);kTr=r(W2t,"vision-encoder-decoder"),W2t.forEach(t),STr=r(Hke," \u2014 "),MH=n(Hke,"A",{href:!0});var H2t=s(MH);RTr=r(H2t,"TFVisionEncoderDecoderModel"),H2t.forEach(t),BTr=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),Q2t.forEach(t),PTr=i(yl),T(bM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),bPe=i(f),gc=n(f,"H2",{class:!0});var Eqe=s(gc);vM=n(Eqe,"A",{id:!0,class:!0,href:!0});var U2t=s(vM);K2e=n(U2t,"SPAN",{});var J2t=s(K2e);T(n8.$$.fragment,J2t),J2t.forEach(t),U2t.forEach(t),ITr=i(Eqe),Z2e=n(Eqe,"SPAN",{});var Y2t=s(Z2e);qTr=r(Y2t,"TFAutoModelForSpeechSeq2Seq"),Y2t.forEach(t),Eqe.forEach(t),vPe=i(f),lr=n(f,"DIV",{class:!0});var Ll=s(lr);T(s8.$$.fragment,Ll),NTr=i(Ll),hc=n(Ll,"P",{});var FK=s(hc);jTr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),EH=n(FK,"A",{href:!0});var K2t=s(EH);DTr=r(K2t,"from_pretrained()"),K2t.forEach(t),GTr=r(FK," class method or the "),CH=n(FK,"A",{href:!0});var Z2t=s(CH);OTr=r(Z2t,"from_config()"),Z2t.forEach(t),VTr=r(FK,` class
method.`),FK.forEach(t),XTr=i(Ll),l8=n(Ll,"P",{});var Cqe=s(l8);zTr=r(Cqe,"This class cannot be instantiated directly using "),e5e=n(Cqe,"CODE",{});var e5t=s(e5e);QTr=r(e5t,"__init__()"),e5t.forEach(t),WTr=r(Cqe," (throws an error)."),Cqe.forEach(t),HTr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var Gw=s(Bt);T(i8.$$.fragment,Gw),UTr=i(Gw),o5e=n(Gw,"P",{});var o5t=s(o5e);JTr=r(o5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),o5t.forEach(t),YTr=i(Gw),pc=n(Gw,"P",{});var TK=s(pc);KTr=r(TK,`Note:
Loading a model from its configuration file does `),r5e=n(TK,"STRONG",{});var r5t=s(r5e);ZTr=r(r5t,"not"),r5t.forEach(t),e7r=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(TK,"A",{href:!0});var t5t=s(wH);o7r=r(t5t,"from_pretrained()"),t5t.forEach(t),r7r=r(TK," to load the model weights."),TK.forEach(t),t7r=i(Gw),T(FM.$$.fragment,Gw),Gw.forEach(t),a7r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(d8.$$.fragment,xl),n7r=i(xl),t5e=n(xl,"P",{});var a5t=s(t5e);s7r=r(a5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),a5t.forEach(t),l7r=i(xl),sn=n(xl,"P",{});var Ow=s(sn);i7r=r(Ow,"The model class to instantiate is selected based on the "),a5e=n(Ow,"CODE",{});var n5t=s(a5e);d7r=r(n5t,"model_type"),n5t.forEach(t),c7r=r(Ow,` property of the config object (either
passed as an argument or loaded from `),n5e=n(Ow,"CODE",{});var s5t=s(n5e);f7r=r(s5t,"pretrained_model_name_or_path"),s5t.forEach(t),m7r=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s5e=n(Ow,"CODE",{});var l5t=s(s5e);g7r=r(l5t,"pretrained_model_name_or_path"),l5t.forEach(t),h7r=r(Ow,":"),Ow.forEach(t),p7r=i(xl),l5e=n(xl,"UL",{});var i5t=s(l5e);TM=n(i5t,"LI",{});var Uke=s(TM);i5e=n(Uke,"STRONG",{});var d5t=s(i5e);u7r=r(d5t,"speech_to_text"),d5t.forEach(t),_7r=r(Uke," \u2014 "),AH=n(Uke,"A",{href:!0});var c5t=s(AH);b7r=r(c5t,"TFSpeech2TextForConditionalGeneration"),c5t.forEach(t),v7r=r(Uke," (Speech2Text model)"),Uke.forEach(t),i5t.forEach(t),F7r=i(xl),T(MM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),FPe=i(f),uc=n(f,"H2",{class:!0});var wqe=s(uc);EM=n(wqe,"A",{id:!0,class:!0,href:!0});var f5t=s(EM);d5e=n(f5t,"SPAN",{});var m5t=s(d5e);T(c8.$$.fragment,m5t),m5t.forEach(t),f5t.forEach(t),T7r=i(wqe),c5e=n(wqe,"SPAN",{});var g5t=s(c5e);M7r=r(g5t,"FlaxAutoModel"),g5t.forEach(t),wqe.forEach(t),TPe=i(f),ir=n(f,"DIV",{class:!0});var $l=s(ir);T(f8.$$.fragment,$l),E7r=i($l),_c=n($l,"P",{});var MK=s(_c);C7r=r(MK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yH=n(MK,"A",{href:!0});var h5t=s(yH);w7r=r(h5t,"from_pretrained()"),h5t.forEach(t),A7r=r(MK," class method or the "),LH=n(MK,"A",{href:!0});var p5t=s(LH);y7r=r(p5t,"from_config()"),p5t.forEach(t),L7r=r(MK,` class
method.`),MK.forEach(t),x7r=i($l),m8=n($l,"P",{});var Aqe=s(m8);$7r=r(Aqe,"This class cannot be instantiated directly using "),f5e=n(Aqe,"CODE",{});var u5t=s(f5e);k7r=r(u5t,"__init__()"),u5t.forEach(t),S7r=r(Aqe," (throws an error)."),Aqe.forEach(t),R7r=i($l),Pt=n($l,"DIV",{class:!0});var Vw=s(Pt);T(g8.$$.fragment,Vw),B7r=i(Vw),m5e=n(Vw,"P",{});var _5t=s(m5e);P7r=r(_5t,"Instantiates one of the base model classes of the library from a configuration."),_5t.forEach(t),I7r=i(Vw),bc=n(Vw,"P",{});var EK=s(bc);q7r=r(EK,`Note:
Loading a model from its configuration file does `),g5e=n(EK,"STRONG",{});var b5t=s(g5e);N7r=r(b5t,"not"),b5t.forEach(t),j7r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(EK,"A",{href:!0});var v5t=s(xH);D7r=r(v5t,"from_pretrained()"),v5t.forEach(t),G7r=r(EK," to load the model weights."),EK.forEach(t),O7r=i(Vw),T(CM.$$.fragment,Vw),Vw.forEach(t),V7r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(h8.$$.fragment,kl),X7r=i(kl),h5e=n(kl,"P",{});var F5t=s(h5e);z7r=r(F5t,"Instantiate one of the base model classes of the library from a pretrained model."),F5t.forEach(t),Q7r=i(kl),ln=n(kl,"P",{});var Xw=s(ln);W7r=r(Xw,"The model class to instantiate is selected based on the "),p5e=n(Xw,"CODE",{});var T5t=s(p5e);H7r=r(T5t,"model_type"),T5t.forEach(t),U7r=r(Xw,` property of the config object (either
passed as an argument or loaded from `),u5e=n(Xw,"CODE",{});var M5t=s(u5e);J7r=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),Y7r=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(Xw,"CODE",{});var E5t=s(_5e);K7r=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),Z7r=r(Xw,":"),Xw.forEach(t),eMr=i(kl),oe=n(kl,"UL",{});var ae=s(oe);wM=n(ae,"LI",{});var Jke=s(wM);b5e=n(Jke,"STRONG",{});var C5t=s(b5e);oMr=r(C5t,"albert"),C5t.forEach(t),rMr=r(Jke," \u2014 "),$H=n(Jke,"A",{href:!0});var w5t=s($H);tMr=r(w5t,"FlaxAlbertModel"),w5t.forEach(t),aMr=r(Jke," (ALBERT model)"),Jke.forEach(t),nMr=i(ae),AM=n(ae,"LI",{});var Yke=s(AM);v5e=n(Yke,"STRONG",{});var A5t=s(v5e);sMr=r(A5t,"bart"),A5t.forEach(t),lMr=r(Yke," \u2014 "),kH=n(Yke,"A",{href:!0});var y5t=s(kH);iMr=r(y5t,"FlaxBartModel"),y5t.forEach(t),dMr=r(Yke," (BART model)"),Yke.forEach(t),cMr=i(ae),yM=n(ae,"LI",{});var Kke=s(yM);F5e=n(Kke,"STRONG",{});var L5t=s(F5e);fMr=r(L5t,"beit"),L5t.forEach(t),mMr=r(Kke," \u2014 "),SH=n(Kke,"A",{href:!0});var x5t=s(SH);gMr=r(x5t,"FlaxBeitModel"),x5t.forEach(t),hMr=r(Kke," (BEiT model)"),Kke.forEach(t),pMr=i(ae),LM=n(ae,"LI",{});var Zke=s(LM);T5e=n(Zke,"STRONG",{});var $5t=s(T5e);uMr=r($5t,"bert"),$5t.forEach(t),_Mr=r(Zke," \u2014 "),RH=n(Zke,"A",{href:!0});var k5t=s(RH);bMr=r(k5t,"FlaxBertModel"),k5t.forEach(t),vMr=r(Zke," (BERT model)"),Zke.forEach(t),FMr=i(ae),xM=n(ae,"LI",{});var eSe=s(xM);M5e=n(eSe,"STRONG",{});var S5t=s(M5e);TMr=r(S5t,"big_bird"),S5t.forEach(t),MMr=r(eSe," \u2014 "),BH=n(eSe,"A",{href:!0});var R5t=s(BH);EMr=r(R5t,"FlaxBigBirdModel"),R5t.forEach(t),CMr=r(eSe," (BigBird model)"),eSe.forEach(t),wMr=i(ae),$M=n(ae,"LI",{});var oSe=s($M);E5e=n(oSe,"STRONG",{});var B5t=s(E5e);AMr=r(B5t,"blenderbot"),B5t.forEach(t),yMr=r(oSe," \u2014 "),PH=n(oSe,"A",{href:!0});var P5t=s(PH);LMr=r(P5t,"FlaxBlenderbotModel"),P5t.forEach(t),xMr=r(oSe," (Blenderbot model)"),oSe.forEach(t),$Mr=i(ae),kM=n(ae,"LI",{});var rSe=s(kM);C5e=n(rSe,"STRONG",{});var I5t=s(C5e);kMr=r(I5t,"blenderbot-small"),I5t.forEach(t),SMr=r(rSe," \u2014 "),IH=n(rSe,"A",{href:!0});var q5t=s(IH);RMr=r(q5t,"FlaxBlenderbotSmallModel"),q5t.forEach(t),BMr=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),PMr=i(ae),SM=n(ae,"LI",{});var tSe=s(SM);w5e=n(tSe,"STRONG",{});var N5t=s(w5e);IMr=r(N5t,"clip"),N5t.forEach(t),qMr=r(tSe," \u2014 "),qH=n(tSe,"A",{href:!0});var j5t=s(qH);NMr=r(j5t,"FlaxCLIPModel"),j5t.forEach(t),jMr=r(tSe," (CLIP model)"),tSe.forEach(t),DMr=i(ae),RM=n(ae,"LI",{});var aSe=s(RM);A5e=n(aSe,"STRONG",{});var D5t=s(A5e);GMr=r(D5t,"distilbert"),D5t.forEach(t),OMr=r(aSe," \u2014 "),NH=n(aSe,"A",{href:!0});var G5t=s(NH);VMr=r(G5t,"FlaxDistilBertModel"),G5t.forEach(t),XMr=r(aSe," (DistilBERT model)"),aSe.forEach(t),zMr=i(ae),BM=n(ae,"LI",{});var nSe=s(BM);y5e=n(nSe,"STRONG",{});var O5t=s(y5e);QMr=r(O5t,"electra"),O5t.forEach(t),WMr=r(nSe," \u2014 "),jH=n(nSe,"A",{href:!0});var V5t=s(jH);HMr=r(V5t,"FlaxElectraModel"),V5t.forEach(t),UMr=r(nSe," (ELECTRA model)"),nSe.forEach(t),JMr=i(ae),PM=n(ae,"LI",{});var sSe=s(PM);L5e=n(sSe,"STRONG",{});var X5t=s(L5e);YMr=r(X5t,"gpt2"),X5t.forEach(t),KMr=r(sSe," \u2014 "),DH=n(sSe,"A",{href:!0});var z5t=s(DH);ZMr=r(z5t,"FlaxGPT2Model"),z5t.forEach(t),eEr=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),oEr=i(ae),IM=n(ae,"LI",{});var lSe=s(IM);x5e=n(lSe,"STRONG",{});var Q5t=s(x5e);rEr=r(Q5t,"gpt_neo"),Q5t.forEach(t),tEr=r(lSe," \u2014 "),GH=n(lSe,"A",{href:!0});var W5t=s(GH);aEr=r(W5t,"FlaxGPTNeoModel"),W5t.forEach(t),nEr=r(lSe," (GPT Neo model)"),lSe.forEach(t),sEr=i(ae),qM=n(ae,"LI",{});var iSe=s(qM);$5e=n(iSe,"STRONG",{});var H5t=s($5e);lEr=r(H5t,"gptj"),H5t.forEach(t),iEr=r(iSe," \u2014 "),OH=n(iSe,"A",{href:!0});var U5t=s(OH);dEr=r(U5t,"FlaxGPTJModel"),U5t.forEach(t),cEr=r(iSe," (GPT-J model)"),iSe.forEach(t),fEr=i(ae),NM=n(ae,"LI",{});var dSe=s(NM);k5e=n(dSe,"STRONG",{});var J5t=s(k5e);mEr=r(J5t,"marian"),J5t.forEach(t),gEr=r(dSe," \u2014 "),VH=n(dSe,"A",{href:!0});var Y5t=s(VH);hEr=r(Y5t,"FlaxMarianModel"),Y5t.forEach(t),pEr=r(dSe," (Marian model)"),dSe.forEach(t),uEr=i(ae),jM=n(ae,"LI",{});var cSe=s(jM);S5e=n(cSe,"STRONG",{});var K5t=s(S5e);_Er=r(K5t,"mbart"),K5t.forEach(t),bEr=r(cSe," \u2014 "),XH=n(cSe,"A",{href:!0});var Z5t=s(XH);vEr=r(Z5t,"FlaxMBartModel"),Z5t.forEach(t),FEr=r(cSe," (mBART model)"),cSe.forEach(t),TEr=i(ae),DM=n(ae,"LI",{});var fSe=s(DM);R5e=n(fSe,"STRONG",{});var evt=s(R5e);MEr=r(evt,"mt5"),evt.forEach(t),EEr=r(fSe," \u2014 "),zH=n(fSe,"A",{href:!0});var ovt=s(zH);CEr=r(ovt,"FlaxMT5Model"),ovt.forEach(t),wEr=r(fSe," (mT5 model)"),fSe.forEach(t),AEr=i(ae),GM=n(ae,"LI",{});var mSe=s(GM);B5e=n(mSe,"STRONG",{});var rvt=s(B5e);yEr=r(rvt,"pegasus"),rvt.forEach(t),LEr=r(mSe," \u2014 "),QH=n(mSe,"A",{href:!0});var tvt=s(QH);xEr=r(tvt,"FlaxPegasusModel"),tvt.forEach(t),$Er=r(mSe," (Pegasus model)"),mSe.forEach(t),kEr=i(ae),OM=n(ae,"LI",{});var gSe=s(OM);P5e=n(gSe,"STRONG",{});var avt=s(P5e);SEr=r(avt,"roberta"),avt.forEach(t),REr=r(gSe," \u2014 "),WH=n(gSe,"A",{href:!0});var nvt=s(WH);BEr=r(nvt,"FlaxRobertaModel"),nvt.forEach(t),PEr=r(gSe," (RoBERTa model)"),gSe.forEach(t),IEr=i(ae),VM=n(ae,"LI",{});var hSe=s(VM);I5e=n(hSe,"STRONG",{});var svt=s(I5e);qEr=r(svt,"roformer"),svt.forEach(t),NEr=r(hSe," \u2014 "),HH=n(hSe,"A",{href:!0});var lvt=s(HH);jEr=r(lvt,"FlaxRoFormerModel"),lvt.forEach(t),DEr=r(hSe," (RoFormer model)"),hSe.forEach(t),GEr=i(ae),XM=n(ae,"LI",{});var pSe=s(XM);q5e=n(pSe,"STRONG",{});var ivt=s(q5e);OEr=r(ivt,"t5"),ivt.forEach(t),VEr=r(pSe," \u2014 "),UH=n(pSe,"A",{href:!0});var dvt=s(UH);XEr=r(dvt,"FlaxT5Model"),dvt.forEach(t),zEr=r(pSe," (T5 model)"),pSe.forEach(t),QEr=i(ae),zM=n(ae,"LI",{});var uSe=s(zM);N5e=n(uSe,"STRONG",{});var cvt=s(N5e);WEr=r(cvt,"vision-text-dual-encoder"),cvt.forEach(t),HEr=r(uSe," \u2014 "),JH=n(uSe,"A",{href:!0});var fvt=s(JH);UEr=r(fvt,"FlaxVisionTextDualEncoderModel"),fvt.forEach(t),JEr=r(uSe," (VisionTextDualEncoder model)"),uSe.forEach(t),YEr=i(ae),QM=n(ae,"LI",{});var _Se=s(QM);j5e=n(_Se,"STRONG",{});var mvt=s(j5e);KEr=r(mvt,"vit"),mvt.forEach(t),ZEr=r(_Se," \u2014 "),YH=n(_Se,"A",{href:!0});var gvt=s(YH);eCr=r(gvt,"FlaxViTModel"),gvt.forEach(t),oCr=r(_Se," (ViT model)"),_Se.forEach(t),rCr=i(ae),WM=n(ae,"LI",{});var bSe=s(WM);D5e=n(bSe,"STRONG",{});var hvt=s(D5e);tCr=r(hvt,"wav2vec2"),hvt.forEach(t),aCr=r(bSe," \u2014 "),KH=n(bSe,"A",{href:!0});var pvt=s(KH);nCr=r(pvt,"FlaxWav2Vec2Model"),pvt.forEach(t),sCr=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),lCr=i(ae),HM=n(ae,"LI",{});var vSe=s(HM);G5e=n(vSe,"STRONG",{});var uvt=s(G5e);iCr=r(uvt,"xglm"),uvt.forEach(t),dCr=r(vSe," \u2014 "),ZH=n(vSe,"A",{href:!0});var _vt=s(ZH);cCr=r(_vt,"FlaxXGLMModel"),_vt.forEach(t),fCr=r(vSe," (XGLM model)"),vSe.forEach(t),mCr=i(ae),UM=n(ae,"LI",{});var FSe=s(UM);O5e=n(FSe,"STRONG",{});var bvt=s(O5e);gCr=r(bvt,"xlm-roberta"),bvt.forEach(t),hCr=r(FSe," \u2014 "),eU=n(FSe,"A",{href:!0});var vvt=s(eU);pCr=r(vvt,"FlaxXLMRobertaModel"),vvt.forEach(t),uCr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),ae.forEach(t),_Cr=i(kl),T(JM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),MPe=i(f),vc=n(f,"H2",{class:!0});var yqe=s(vc);YM=n(yqe,"A",{id:!0,class:!0,href:!0});var Fvt=s(YM);V5e=n(Fvt,"SPAN",{});var Tvt=s(V5e);T(p8.$$.fragment,Tvt),Tvt.forEach(t),Fvt.forEach(t),bCr=i(yqe),X5e=n(yqe,"SPAN",{});var Mvt=s(X5e);vCr=r(Mvt,"FlaxAutoModelForCausalLM"),Mvt.forEach(t),yqe.forEach(t),EPe=i(f),dr=n(f,"DIV",{class:!0});var Sl=s(dr);T(u8.$$.fragment,Sl),FCr=i(Sl),Fc=n(Sl,"P",{});var CK=s(Fc);TCr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),oU=n(CK,"A",{href:!0});var Evt=s(oU);MCr=r(Evt,"from_pretrained()"),Evt.forEach(t),ECr=r(CK," class method or the "),rU=n(CK,"A",{href:!0});var Cvt=s(rU);CCr=r(Cvt,"from_config()"),Cvt.forEach(t),wCr=r(CK,` class
method.`),CK.forEach(t),ACr=i(Sl),_8=n(Sl,"P",{});var Lqe=s(_8);yCr=r(Lqe,"This class cannot be instantiated directly using "),z5e=n(Lqe,"CODE",{});var wvt=s(z5e);LCr=r(wvt,"__init__()"),wvt.forEach(t),xCr=r(Lqe," (throws an error)."),Lqe.forEach(t),$Cr=i(Sl),It=n(Sl,"DIV",{class:!0});var zw=s(It);T(b8.$$.fragment,zw),kCr=i(zw),Q5e=n(zw,"P",{});var Avt=s(Q5e);SCr=r(Avt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Avt.forEach(t),RCr=i(zw),Tc=n(zw,"P",{});var wK=s(Tc);BCr=r(wK,`Note:
Loading a model from its configuration file does `),W5e=n(wK,"STRONG",{});var yvt=s(W5e);PCr=r(yvt,"not"),yvt.forEach(t),ICr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(wK,"A",{href:!0});var Lvt=s(tU);qCr=r(Lvt,"from_pretrained()"),Lvt.forEach(t),NCr=r(wK," to load the model weights."),wK.forEach(t),jCr=i(zw),T(KM.$$.fragment,zw),zw.forEach(t),DCr=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(v8.$$.fragment,Rl),GCr=i(Rl),H5e=n(Rl,"P",{});var xvt=s(H5e);OCr=r(xvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xvt.forEach(t),VCr=i(Rl),dn=n(Rl,"P",{});var Qw=s(dn);XCr=r(Qw,"The model class to instantiate is selected based on the "),U5e=n(Qw,"CODE",{});var $vt=s(U5e);zCr=r($vt,"model_type"),$vt.forEach(t),QCr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),J5e=n(Qw,"CODE",{});var kvt=s(J5e);WCr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),HCr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(Qw,"CODE",{});var Svt=s(Y5e);UCr=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),JCr=r(Qw,":"),Qw.forEach(t),YCr=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);ZM=n(Bl,"LI",{});var TSe=s(ZM);K5e=n(TSe,"STRONG",{});var Rvt=s(K5e);KCr=r(Rvt,"bart"),Rvt.forEach(t),ZCr=r(TSe," \u2014 "),aU=n(TSe,"A",{href:!0});var Bvt=s(aU);e3r=r(Bvt,"FlaxBartForCausalLM"),Bvt.forEach(t),o3r=r(TSe," (BART model)"),TSe.forEach(t),r3r=i(Bl),eE=n(Bl,"LI",{});var MSe=s(eE);Z5e=n(MSe,"STRONG",{});var Pvt=s(Z5e);t3r=r(Pvt,"gpt2"),Pvt.forEach(t),a3r=r(MSe," \u2014 "),nU=n(MSe,"A",{href:!0});var Ivt=s(nU);n3r=r(Ivt,"FlaxGPT2LMHeadModel"),Ivt.forEach(t),s3r=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),l3r=i(Bl),oE=n(Bl,"LI",{});var ESe=s(oE);eve=n(ESe,"STRONG",{});var qvt=s(eve);i3r=r(qvt,"gpt_neo"),qvt.forEach(t),d3r=r(ESe," \u2014 "),sU=n(ESe,"A",{href:!0});var Nvt=s(sU);c3r=r(Nvt,"FlaxGPTNeoForCausalLM"),Nvt.forEach(t),f3r=r(ESe," (GPT Neo model)"),ESe.forEach(t),m3r=i(Bl),rE=n(Bl,"LI",{});var CSe=s(rE);ove=n(CSe,"STRONG",{});var jvt=s(ove);g3r=r(jvt,"gptj"),jvt.forEach(t),h3r=r(CSe," \u2014 "),lU=n(CSe,"A",{href:!0});var Dvt=s(lU);p3r=r(Dvt,"FlaxGPTJForCausalLM"),Dvt.forEach(t),u3r=r(CSe," (GPT-J model)"),CSe.forEach(t),_3r=i(Bl),tE=n(Bl,"LI",{});var wSe=s(tE);rve=n(wSe,"STRONG",{});var Gvt=s(rve);b3r=r(Gvt,"xglm"),Gvt.forEach(t),v3r=r(wSe," \u2014 "),iU=n(wSe,"A",{href:!0});var Ovt=s(iU);F3r=r(Ovt,"FlaxXGLMForCausalLM"),Ovt.forEach(t),T3r=r(wSe," (XGLM model)"),wSe.forEach(t),Bl.forEach(t),M3r=i(Rl),T(aE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),CPe=i(f),Mc=n(f,"H2",{class:!0});var xqe=s(Mc);nE=n(xqe,"A",{id:!0,class:!0,href:!0});var Vvt=s(nE);tve=n(Vvt,"SPAN",{});var Xvt=s(tve);T(F8.$$.fragment,Xvt),Xvt.forEach(t),Vvt.forEach(t),E3r=i(xqe),ave=n(xqe,"SPAN",{});var zvt=s(ave);C3r=r(zvt,"FlaxAutoModelForPreTraining"),zvt.forEach(t),xqe.forEach(t),wPe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(T8.$$.fragment,Pl),w3r=i(Pl),Ec=n(Pl,"P",{});var AK=s(Ec);A3r=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),dU=n(AK,"A",{href:!0});var Qvt=s(dU);y3r=r(Qvt,"from_pretrained()"),Qvt.forEach(t),L3r=r(AK," class method or the "),cU=n(AK,"A",{href:!0});var Wvt=s(cU);x3r=r(Wvt,"from_config()"),Wvt.forEach(t),$3r=r(AK,` class
method.`),AK.forEach(t),k3r=i(Pl),M8=n(Pl,"P",{});var $qe=s(M8);S3r=r($qe,"This class cannot be instantiated directly using "),nve=n($qe,"CODE",{});var Hvt=s(nve);R3r=r(Hvt,"__init__()"),Hvt.forEach(t),B3r=r($qe," (throws an error)."),$qe.forEach(t),P3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Ww=s(qt);T(E8.$$.fragment,Ww),I3r=i(Ww),sve=n(Ww,"P",{});var Uvt=s(sve);q3r=r(Uvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uvt.forEach(t),N3r=i(Ww),Cc=n(Ww,"P",{});var yK=s(Cc);j3r=r(yK,`Note:
Loading a model from its configuration file does `),lve=n(yK,"STRONG",{});var Jvt=s(lve);D3r=r(Jvt,"not"),Jvt.forEach(t),G3r=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(yK,"A",{href:!0});var Yvt=s(fU);O3r=r(Yvt,"from_pretrained()"),Yvt.forEach(t),V3r=r(yK," to load the model weights."),yK.forEach(t),X3r=i(Ww),T(sE.$$.fragment,Ww),Ww.forEach(t),z3r=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(C8.$$.fragment,Il),Q3r=i(Il),ive=n(Il,"P",{});var Kvt=s(ive);W3r=r(Kvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kvt.forEach(t),H3r=i(Il),cn=n(Il,"P",{});var Hw=s(cn);U3r=r(Hw,"The model class to instantiate is selected based on the "),dve=n(Hw,"CODE",{});var Zvt=s(dve);J3r=r(Zvt,"model_type"),Zvt.forEach(t),Y3r=r(Hw,` property of the config object (either
passed as an argument or loaded from `),cve=n(Hw,"CODE",{});var eFt=s(cve);K3r=r(eFt,"pretrained_model_name_or_path"),eFt.forEach(t),Z3r=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(Hw,"CODE",{});var oFt=s(fve);ewr=r(oFt,"pretrained_model_name_or_path"),oFt.forEach(t),owr=r(Hw,":"),Hw.forEach(t),rwr=i(Il),Me=n(Il,"UL",{});var we=s(Me);lE=n(we,"LI",{});var ASe=s(lE);mve=n(ASe,"STRONG",{});var rFt=s(mve);twr=r(rFt,"albert"),rFt.forEach(t),awr=r(ASe," \u2014 "),mU=n(ASe,"A",{href:!0});var tFt=s(mU);nwr=r(tFt,"FlaxAlbertForPreTraining"),tFt.forEach(t),swr=r(ASe," (ALBERT model)"),ASe.forEach(t),lwr=i(we),iE=n(we,"LI",{});var ySe=s(iE);gve=n(ySe,"STRONG",{});var aFt=s(gve);iwr=r(aFt,"bart"),aFt.forEach(t),dwr=r(ySe," \u2014 "),gU=n(ySe,"A",{href:!0});var nFt=s(gU);cwr=r(nFt,"FlaxBartForConditionalGeneration"),nFt.forEach(t),fwr=r(ySe," (BART model)"),ySe.forEach(t),mwr=i(we),dE=n(we,"LI",{});var LSe=s(dE);hve=n(LSe,"STRONG",{});var sFt=s(hve);gwr=r(sFt,"bert"),sFt.forEach(t),hwr=r(LSe," \u2014 "),hU=n(LSe,"A",{href:!0});var lFt=s(hU);pwr=r(lFt,"FlaxBertForPreTraining"),lFt.forEach(t),uwr=r(LSe," (BERT model)"),LSe.forEach(t),_wr=i(we),cE=n(we,"LI",{});var xSe=s(cE);pve=n(xSe,"STRONG",{});var iFt=s(pve);bwr=r(iFt,"big_bird"),iFt.forEach(t),vwr=r(xSe," \u2014 "),pU=n(xSe,"A",{href:!0});var dFt=s(pU);Fwr=r(dFt,"FlaxBigBirdForPreTraining"),dFt.forEach(t),Twr=r(xSe," (BigBird model)"),xSe.forEach(t),Mwr=i(we),fE=n(we,"LI",{});var $Se=s(fE);uve=n($Se,"STRONG",{});var cFt=s(uve);Ewr=r(cFt,"electra"),cFt.forEach(t),Cwr=r($Se," \u2014 "),uU=n($Se,"A",{href:!0});var fFt=s(uU);wwr=r(fFt,"FlaxElectraForPreTraining"),fFt.forEach(t),Awr=r($Se," (ELECTRA model)"),$Se.forEach(t),ywr=i(we),mE=n(we,"LI",{});var kSe=s(mE);_ve=n(kSe,"STRONG",{});var mFt=s(_ve);Lwr=r(mFt,"mbart"),mFt.forEach(t),xwr=r(kSe," \u2014 "),_U=n(kSe,"A",{href:!0});var gFt=s(_U);$wr=r(gFt,"FlaxMBartForConditionalGeneration"),gFt.forEach(t),kwr=r(kSe," (mBART model)"),kSe.forEach(t),Swr=i(we),gE=n(we,"LI",{});var SSe=s(gE);bve=n(SSe,"STRONG",{});var hFt=s(bve);Rwr=r(hFt,"mt5"),hFt.forEach(t),Bwr=r(SSe," \u2014 "),bU=n(SSe,"A",{href:!0});var pFt=s(bU);Pwr=r(pFt,"FlaxMT5ForConditionalGeneration"),pFt.forEach(t),Iwr=r(SSe," (mT5 model)"),SSe.forEach(t),qwr=i(we),hE=n(we,"LI",{});var RSe=s(hE);vve=n(RSe,"STRONG",{});var uFt=s(vve);Nwr=r(uFt,"roberta"),uFt.forEach(t),jwr=r(RSe," \u2014 "),vU=n(RSe,"A",{href:!0});var _Ft=s(vU);Dwr=r(_Ft,"FlaxRobertaForMaskedLM"),_Ft.forEach(t),Gwr=r(RSe," (RoBERTa model)"),RSe.forEach(t),Owr=i(we),pE=n(we,"LI",{});var BSe=s(pE);Fve=n(BSe,"STRONG",{});var bFt=s(Fve);Vwr=r(bFt,"roformer"),bFt.forEach(t),Xwr=r(BSe," \u2014 "),FU=n(BSe,"A",{href:!0});var vFt=s(FU);zwr=r(vFt,"FlaxRoFormerForMaskedLM"),vFt.forEach(t),Qwr=r(BSe," (RoFormer model)"),BSe.forEach(t),Wwr=i(we),uE=n(we,"LI",{});var PSe=s(uE);Tve=n(PSe,"STRONG",{});var FFt=s(Tve);Hwr=r(FFt,"t5"),FFt.forEach(t),Uwr=r(PSe," \u2014 "),TU=n(PSe,"A",{href:!0});var TFt=s(TU);Jwr=r(TFt,"FlaxT5ForConditionalGeneration"),TFt.forEach(t),Ywr=r(PSe," (T5 model)"),PSe.forEach(t),Kwr=i(we),_E=n(we,"LI",{});var ISe=s(_E);Mve=n(ISe,"STRONG",{});var MFt=s(Mve);Zwr=r(MFt,"wav2vec2"),MFt.forEach(t),eAr=r(ISe," \u2014 "),MU=n(ISe,"A",{href:!0});var EFt=s(MU);oAr=r(EFt,"FlaxWav2Vec2ForPreTraining"),EFt.forEach(t),rAr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),tAr=i(we),bE=n(we,"LI",{});var qSe=s(bE);Eve=n(qSe,"STRONG",{});var CFt=s(Eve);aAr=r(CFt,"xlm-roberta"),CFt.forEach(t),nAr=r(qSe," \u2014 "),EU=n(qSe,"A",{href:!0});var wFt=s(EU);sAr=r(wFt,"FlaxXLMRobertaForMaskedLM"),wFt.forEach(t),lAr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),we.forEach(t),iAr=i(Il),T(vE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),APe=i(f),wc=n(f,"H2",{class:!0});var kqe=s(wc);FE=n(kqe,"A",{id:!0,class:!0,href:!0});var AFt=s(FE);Cve=n(AFt,"SPAN",{});var yFt=s(Cve);T(w8.$$.fragment,yFt),yFt.forEach(t),AFt.forEach(t),dAr=i(kqe),wve=n(kqe,"SPAN",{});var LFt=s(wve);cAr=r(LFt,"FlaxAutoModelForMaskedLM"),LFt.forEach(t),kqe.forEach(t),yPe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(A8.$$.fragment,ql),fAr=i(ql),Ac=n(ql,"P",{});var LK=s(Ac);mAr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CU=n(LK,"A",{href:!0});var xFt=s(CU);gAr=r(xFt,"from_pretrained()"),xFt.forEach(t),hAr=r(LK," class method or the "),wU=n(LK,"A",{href:!0});var $Ft=s(wU);pAr=r($Ft,"from_config()"),$Ft.forEach(t),uAr=r(LK,` class
method.`),LK.forEach(t),_Ar=i(ql),y8=n(ql,"P",{});var Sqe=s(y8);bAr=r(Sqe,"This class cannot be instantiated directly using "),Ave=n(Sqe,"CODE",{});var kFt=s(Ave);vAr=r(kFt,"__init__()"),kFt.forEach(t),FAr=r(Sqe," (throws an error)."),Sqe.forEach(t),TAr=i(ql),Nt=n(ql,"DIV",{class:!0});var Uw=s(Nt);T(L8.$$.fragment,Uw),MAr=i(Uw),yve=n(Uw,"P",{});var SFt=s(yve);EAr=r(SFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SFt.forEach(t),CAr=i(Uw),yc=n(Uw,"P",{});var xK=s(yc);wAr=r(xK,`Note:
Loading a model from its configuration file does `),Lve=n(xK,"STRONG",{});var RFt=s(Lve);AAr=r(RFt,"not"),RFt.forEach(t),yAr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(xK,"A",{href:!0});var BFt=s(AU);LAr=r(BFt,"from_pretrained()"),BFt.forEach(t),xAr=r(xK," to load the model weights."),xK.forEach(t),$Ar=i(Uw),T(TE.$$.fragment,Uw),Uw.forEach(t),kAr=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(x8.$$.fragment,Nl),SAr=i(Nl),xve=n(Nl,"P",{});var PFt=s(xve);RAr=r(PFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PFt.forEach(t),BAr=i(Nl),fn=n(Nl,"P",{});var Jw=s(fn);PAr=r(Jw,"The model class to instantiate is selected based on the "),$ve=n(Jw,"CODE",{});var IFt=s($ve);IAr=r(IFt,"model_type"),IFt.forEach(t),qAr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),kve=n(Jw,"CODE",{});var qFt=s(kve);NAr=r(qFt,"pretrained_model_name_or_path"),qFt.forEach(t),jAr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(Jw,"CODE",{});var NFt=s(Sve);DAr=r(NFt,"pretrained_model_name_or_path"),NFt.forEach(t),GAr=r(Jw,":"),Jw.forEach(t),OAr=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);ME=n(Re,"LI",{});var NSe=s(ME);Rve=n(NSe,"STRONG",{});var jFt=s(Rve);VAr=r(jFt,"albert"),jFt.forEach(t),XAr=r(NSe," \u2014 "),yU=n(NSe,"A",{href:!0});var DFt=s(yU);zAr=r(DFt,"FlaxAlbertForMaskedLM"),DFt.forEach(t),QAr=r(NSe," (ALBERT model)"),NSe.forEach(t),WAr=i(Re),EE=n(Re,"LI",{});var jSe=s(EE);Bve=n(jSe,"STRONG",{});var GFt=s(Bve);HAr=r(GFt,"bart"),GFt.forEach(t),UAr=r(jSe," \u2014 "),LU=n(jSe,"A",{href:!0});var OFt=s(LU);JAr=r(OFt,"FlaxBartForConditionalGeneration"),OFt.forEach(t),YAr=r(jSe," (BART model)"),jSe.forEach(t),KAr=i(Re),CE=n(Re,"LI",{});var DSe=s(CE);Pve=n(DSe,"STRONG",{});var VFt=s(Pve);ZAr=r(VFt,"bert"),VFt.forEach(t),e6r=r(DSe," \u2014 "),xU=n(DSe,"A",{href:!0});var XFt=s(xU);o6r=r(XFt,"FlaxBertForMaskedLM"),XFt.forEach(t),r6r=r(DSe," (BERT model)"),DSe.forEach(t),t6r=i(Re),wE=n(Re,"LI",{});var GSe=s(wE);Ive=n(GSe,"STRONG",{});var zFt=s(Ive);a6r=r(zFt,"big_bird"),zFt.forEach(t),n6r=r(GSe," \u2014 "),$U=n(GSe,"A",{href:!0});var QFt=s($U);s6r=r(QFt,"FlaxBigBirdForMaskedLM"),QFt.forEach(t),l6r=r(GSe," (BigBird model)"),GSe.forEach(t),i6r=i(Re),AE=n(Re,"LI",{});var OSe=s(AE);qve=n(OSe,"STRONG",{});var WFt=s(qve);d6r=r(WFt,"distilbert"),WFt.forEach(t),c6r=r(OSe," \u2014 "),kU=n(OSe,"A",{href:!0});var HFt=s(kU);f6r=r(HFt,"FlaxDistilBertForMaskedLM"),HFt.forEach(t),m6r=r(OSe," (DistilBERT model)"),OSe.forEach(t),g6r=i(Re),yE=n(Re,"LI",{});var VSe=s(yE);Nve=n(VSe,"STRONG",{});var UFt=s(Nve);h6r=r(UFt,"electra"),UFt.forEach(t),p6r=r(VSe," \u2014 "),SU=n(VSe,"A",{href:!0});var JFt=s(SU);u6r=r(JFt,"FlaxElectraForMaskedLM"),JFt.forEach(t),_6r=r(VSe," (ELECTRA model)"),VSe.forEach(t),b6r=i(Re),LE=n(Re,"LI",{});var XSe=s(LE);jve=n(XSe,"STRONG",{});var YFt=s(jve);v6r=r(YFt,"mbart"),YFt.forEach(t),F6r=r(XSe," \u2014 "),RU=n(XSe,"A",{href:!0});var KFt=s(RU);T6r=r(KFt,"FlaxMBartForConditionalGeneration"),KFt.forEach(t),M6r=r(XSe," (mBART model)"),XSe.forEach(t),E6r=i(Re),xE=n(Re,"LI",{});var zSe=s(xE);Dve=n(zSe,"STRONG",{});var ZFt=s(Dve);C6r=r(ZFt,"roberta"),ZFt.forEach(t),w6r=r(zSe," \u2014 "),BU=n(zSe,"A",{href:!0});var e0t=s(BU);A6r=r(e0t,"FlaxRobertaForMaskedLM"),e0t.forEach(t),y6r=r(zSe," (RoBERTa model)"),zSe.forEach(t),L6r=i(Re),$E=n(Re,"LI",{});var QSe=s($E);Gve=n(QSe,"STRONG",{});var o0t=s(Gve);x6r=r(o0t,"roformer"),o0t.forEach(t),$6r=r(QSe," \u2014 "),PU=n(QSe,"A",{href:!0});var r0t=s(PU);k6r=r(r0t,"FlaxRoFormerForMaskedLM"),r0t.forEach(t),S6r=r(QSe," (RoFormer model)"),QSe.forEach(t),R6r=i(Re),kE=n(Re,"LI",{});var WSe=s(kE);Ove=n(WSe,"STRONG",{});var t0t=s(Ove);B6r=r(t0t,"xlm-roberta"),t0t.forEach(t),P6r=r(WSe," \u2014 "),IU=n(WSe,"A",{href:!0});var a0t=s(IU);I6r=r(a0t,"FlaxXLMRobertaForMaskedLM"),a0t.forEach(t),q6r=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Re.forEach(t),N6r=i(Nl),T(SE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),LPe=i(f),Lc=n(f,"H2",{class:!0});var Rqe=s(Lc);RE=n(Rqe,"A",{id:!0,class:!0,href:!0});var n0t=s(RE);Vve=n(n0t,"SPAN",{});var s0t=s(Vve);T($8.$$.fragment,s0t),s0t.forEach(t),n0t.forEach(t),j6r=i(Rqe),Xve=n(Rqe,"SPAN",{});var l0t=s(Xve);D6r=r(l0t,"FlaxAutoModelForSeq2SeqLM"),l0t.forEach(t),Rqe.forEach(t),xPe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(k8.$$.fragment,jl),G6r=i(jl),xc=n(jl,"P",{});var $K=s(xc);O6r=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qU=n($K,"A",{href:!0});var i0t=s(qU);V6r=r(i0t,"from_pretrained()"),i0t.forEach(t),X6r=r($K," class method or the "),NU=n($K,"A",{href:!0});var d0t=s(NU);z6r=r(d0t,"from_config()"),d0t.forEach(t),Q6r=r($K,` class
method.`),$K.forEach(t),W6r=i(jl),S8=n(jl,"P",{});var Bqe=s(S8);H6r=r(Bqe,"This class cannot be instantiated directly using "),zve=n(Bqe,"CODE",{});var c0t=s(zve);U6r=r(c0t,"__init__()"),c0t.forEach(t),J6r=r(Bqe," (throws an error)."),Bqe.forEach(t),Y6r=i(jl),jt=n(jl,"DIV",{class:!0});var Yw=s(jt);T(R8.$$.fragment,Yw),K6r=i(Yw),Qve=n(Yw,"P",{});var f0t=s(Qve);Z6r=r(f0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f0t.forEach(t),eyr=i(Yw),$c=n(Yw,"P",{});var kK=s($c);oyr=r(kK,`Note:
Loading a model from its configuration file does `),Wve=n(kK,"STRONG",{});var m0t=s(Wve);ryr=r(m0t,"not"),m0t.forEach(t),tyr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(kK,"A",{href:!0});var g0t=s(jU);ayr=r(g0t,"from_pretrained()"),g0t.forEach(t),nyr=r(kK," to load the model weights."),kK.forEach(t),syr=i(Yw),T(BE.$$.fragment,Yw),Yw.forEach(t),lyr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(B8.$$.fragment,Dl),iyr=i(Dl),Hve=n(Dl,"P",{});var h0t=s(Hve);dyr=r(h0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h0t.forEach(t),cyr=i(Dl),mn=n(Dl,"P",{});var Kw=s(mn);fyr=r(Kw,"The model class to instantiate is selected based on the "),Uve=n(Kw,"CODE",{});var p0t=s(Uve);myr=r(p0t,"model_type"),p0t.forEach(t),gyr=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Jve=n(Kw,"CODE",{});var u0t=s(Jve);hyr=r(u0t,"pretrained_model_name_or_path"),u0t.forEach(t),pyr=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(Kw,"CODE",{});var _0t=s(Yve);uyr=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),_yr=r(Kw,":"),Kw.forEach(t),byr=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);PE=n(Ge,"LI",{});var HSe=s(PE);Kve=n(HSe,"STRONG",{});var b0t=s(Kve);vyr=r(b0t,"bart"),b0t.forEach(t),Fyr=r(HSe," \u2014 "),DU=n(HSe,"A",{href:!0});var v0t=s(DU);Tyr=r(v0t,"FlaxBartForConditionalGeneration"),v0t.forEach(t),Myr=r(HSe," (BART model)"),HSe.forEach(t),Eyr=i(Ge),IE=n(Ge,"LI",{});var USe=s(IE);Zve=n(USe,"STRONG",{});var F0t=s(Zve);Cyr=r(F0t,"blenderbot"),F0t.forEach(t),wyr=r(USe," \u2014 "),GU=n(USe,"A",{href:!0});var T0t=s(GU);Ayr=r(T0t,"FlaxBlenderbotForConditionalGeneration"),T0t.forEach(t),yyr=r(USe," (Blenderbot model)"),USe.forEach(t),Lyr=i(Ge),qE=n(Ge,"LI",{});var JSe=s(qE);eFe=n(JSe,"STRONG",{});var M0t=s(eFe);xyr=r(M0t,"blenderbot-small"),M0t.forEach(t),$yr=r(JSe," \u2014 "),OU=n(JSe,"A",{href:!0});var E0t=s(OU);kyr=r(E0t,"FlaxBlenderbotSmallForConditionalGeneration"),E0t.forEach(t),Syr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),Ryr=i(Ge),NE=n(Ge,"LI",{});var YSe=s(NE);oFe=n(YSe,"STRONG",{});var C0t=s(oFe);Byr=r(C0t,"encoder-decoder"),C0t.forEach(t),Pyr=r(YSe," \u2014 "),VU=n(YSe,"A",{href:!0});var w0t=s(VU);Iyr=r(w0t,"FlaxEncoderDecoderModel"),w0t.forEach(t),qyr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),Nyr=i(Ge),jE=n(Ge,"LI",{});var KSe=s(jE);rFe=n(KSe,"STRONG",{});var A0t=s(rFe);jyr=r(A0t,"marian"),A0t.forEach(t),Dyr=r(KSe," \u2014 "),XU=n(KSe,"A",{href:!0});var y0t=s(XU);Gyr=r(y0t,"FlaxMarianMTModel"),y0t.forEach(t),Oyr=r(KSe," (Marian model)"),KSe.forEach(t),Vyr=i(Ge),DE=n(Ge,"LI",{});var ZSe=s(DE);tFe=n(ZSe,"STRONG",{});var L0t=s(tFe);Xyr=r(L0t,"mbart"),L0t.forEach(t),zyr=r(ZSe," \u2014 "),zU=n(ZSe,"A",{href:!0});var x0t=s(zU);Qyr=r(x0t,"FlaxMBartForConditionalGeneration"),x0t.forEach(t),Wyr=r(ZSe," (mBART model)"),ZSe.forEach(t),Hyr=i(Ge),GE=n(Ge,"LI",{});var eRe=s(GE);aFe=n(eRe,"STRONG",{});var $0t=s(aFe);Uyr=r($0t,"mt5"),$0t.forEach(t),Jyr=r(eRe," \u2014 "),QU=n(eRe,"A",{href:!0});var k0t=s(QU);Yyr=r(k0t,"FlaxMT5ForConditionalGeneration"),k0t.forEach(t),Kyr=r(eRe," (mT5 model)"),eRe.forEach(t),Zyr=i(Ge),OE=n(Ge,"LI",{});var oRe=s(OE);nFe=n(oRe,"STRONG",{});var S0t=s(nFe);eLr=r(S0t,"pegasus"),S0t.forEach(t),oLr=r(oRe," \u2014 "),WU=n(oRe,"A",{href:!0});var R0t=s(WU);rLr=r(R0t,"FlaxPegasusForConditionalGeneration"),R0t.forEach(t),tLr=r(oRe," (Pegasus model)"),oRe.forEach(t),aLr=i(Ge),VE=n(Ge,"LI",{});var rRe=s(VE);sFe=n(rRe,"STRONG",{});var B0t=s(sFe);nLr=r(B0t,"t5"),B0t.forEach(t),sLr=r(rRe," \u2014 "),HU=n(rRe,"A",{href:!0});var P0t=s(HU);lLr=r(P0t,"FlaxT5ForConditionalGeneration"),P0t.forEach(t),iLr=r(rRe," (T5 model)"),rRe.forEach(t),Ge.forEach(t),dLr=i(Dl),T(XE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),$Pe=i(f),kc=n(f,"H2",{class:!0});var Pqe=s(kc);zE=n(Pqe,"A",{id:!0,class:!0,href:!0});var I0t=s(zE);lFe=n(I0t,"SPAN",{});var q0t=s(lFe);T(P8.$$.fragment,q0t),q0t.forEach(t),I0t.forEach(t),cLr=i(Pqe),iFe=n(Pqe,"SPAN",{});var N0t=s(iFe);fLr=r(N0t,"FlaxAutoModelForSequenceClassification"),N0t.forEach(t),Pqe.forEach(t),kPe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(I8.$$.fragment,Gl),mLr=i(Gl),Sc=n(Gl,"P",{});var SK=s(Sc);gLr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=n(SK,"A",{href:!0});var j0t=s(UU);hLr=r(j0t,"from_pretrained()"),j0t.forEach(t),pLr=r(SK," class method or the "),JU=n(SK,"A",{href:!0});var D0t=s(JU);uLr=r(D0t,"from_config()"),D0t.forEach(t),_Lr=r(SK,` class
method.`),SK.forEach(t),bLr=i(Gl),q8=n(Gl,"P",{});var Iqe=s(q8);vLr=r(Iqe,"This class cannot be instantiated directly using "),dFe=n(Iqe,"CODE",{});var G0t=s(dFe);FLr=r(G0t,"__init__()"),G0t.forEach(t),TLr=r(Iqe," (throws an error)."),Iqe.forEach(t),MLr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var Zw=s(Dt);T(N8.$$.fragment,Zw),ELr=i(Zw),cFe=n(Zw,"P",{});var O0t=s(cFe);CLr=r(O0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O0t.forEach(t),wLr=i(Zw),Rc=n(Zw,"P",{});var RK=s(Rc);ALr=r(RK,`Note:
Loading a model from its configuration file does `),fFe=n(RK,"STRONG",{});var V0t=s(fFe);yLr=r(V0t,"not"),V0t.forEach(t),LLr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(RK,"A",{href:!0});var X0t=s(YU);xLr=r(X0t,"from_pretrained()"),X0t.forEach(t),$Lr=r(RK," to load the model weights."),RK.forEach(t),kLr=i(Zw),T(QE.$$.fragment,Zw),Zw.forEach(t),SLr=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(j8.$$.fragment,Ol),RLr=i(Ol),mFe=n(Ol,"P",{});var z0t=s(mFe);BLr=r(z0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),z0t.forEach(t),PLr=i(Ol),gn=n(Ol,"P",{});var eA=s(gn);ILr=r(eA,"The model class to instantiate is selected based on the "),gFe=n(eA,"CODE",{});var Q0t=s(gFe);qLr=r(Q0t,"model_type"),Q0t.forEach(t),NLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(eA,"CODE",{});var W0t=s(hFe);jLr=r(W0t,"pretrained_model_name_or_path"),W0t.forEach(t),DLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(eA,"CODE",{});var H0t=s(pFe);GLr=r(H0t,"pretrained_model_name_or_path"),H0t.forEach(t),OLr=r(eA,":"),eA.forEach(t),VLr=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);WE=n(Be,"LI",{});var tRe=s(WE);uFe=n(tRe,"STRONG",{});var U0t=s(uFe);XLr=r(U0t,"albert"),U0t.forEach(t),zLr=r(tRe," \u2014 "),KU=n(tRe,"A",{href:!0});var J0t=s(KU);QLr=r(J0t,"FlaxAlbertForSequenceClassification"),J0t.forEach(t),WLr=r(tRe," (ALBERT model)"),tRe.forEach(t),HLr=i(Be),HE=n(Be,"LI",{});var aRe=s(HE);_Fe=n(aRe,"STRONG",{});var Y0t=s(_Fe);ULr=r(Y0t,"bart"),Y0t.forEach(t),JLr=r(aRe," \u2014 "),ZU=n(aRe,"A",{href:!0});var K0t=s(ZU);YLr=r(K0t,"FlaxBartForSequenceClassification"),K0t.forEach(t),KLr=r(aRe," (BART model)"),aRe.forEach(t),ZLr=i(Be),UE=n(Be,"LI",{});var nRe=s(UE);bFe=n(nRe,"STRONG",{});var Z0t=s(bFe);e8r=r(Z0t,"bert"),Z0t.forEach(t),o8r=r(nRe," \u2014 "),eJ=n(nRe,"A",{href:!0});var eTt=s(eJ);r8r=r(eTt,"FlaxBertForSequenceClassification"),eTt.forEach(t),t8r=r(nRe," (BERT model)"),nRe.forEach(t),a8r=i(Be),JE=n(Be,"LI",{});var sRe=s(JE);vFe=n(sRe,"STRONG",{});var oTt=s(vFe);n8r=r(oTt,"big_bird"),oTt.forEach(t),s8r=r(sRe," \u2014 "),oJ=n(sRe,"A",{href:!0});var rTt=s(oJ);l8r=r(rTt,"FlaxBigBirdForSequenceClassification"),rTt.forEach(t),i8r=r(sRe," (BigBird model)"),sRe.forEach(t),d8r=i(Be),YE=n(Be,"LI",{});var lRe=s(YE);FFe=n(lRe,"STRONG",{});var tTt=s(FFe);c8r=r(tTt,"distilbert"),tTt.forEach(t),f8r=r(lRe," \u2014 "),rJ=n(lRe,"A",{href:!0});var aTt=s(rJ);m8r=r(aTt,"FlaxDistilBertForSequenceClassification"),aTt.forEach(t),g8r=r(lRe," (DistilBERT model)"),lRe.forEach(t),h8r=i(Be),KE=n(Be,"LI",{});var iRe=s(KE);TFe=n(iRe,"STRONG",{});var nTt=s(TFe);p8r=r(nTt,"electra"),nTt.forEach(t),u8r=r(iRe," \u2014 "),tJ=n(iRe,"A",{href:!0});var sTt=s(tJ);_8r=r(sTt,"FlaxElectraForSequenceClassification"),sTt.forEach(t),b8r=r(iRe," (ELECTRA model)"),iRe.forEach(t),v8r=i(Be),ZE=n(Be,"LI",{});var dRe=s(ZE);MFe=n(dRe,"STRONG",{});var lTt=s(MFe);F8r=r(lTt,"mbart"),lTt.forEach(t),T8r=r(dRe," \u2014 "),aJ=n(dRe,"A",{href:!0});var iTt=s(aJ);M8r=r(iTt,"FlaxMBartForSequenceClassification"),iTt.forEach(t),E8r=r(dRe," (mBART model)"),dRe.forEach(t),C8r=i(Be),eC=n(Be,"LI",{});var cRe=s(eC);EFe=n(cRe,"STRONG",{});var dTt=s(EFe);w8r=r(dTt,"roberta"),dTt.forEach(t),A8r=r(cRe," \u2014 "),nJ=n(cRe,"A",{href:!0});var cTt=s(nJ);y8r=r(cTt,"FlaxRobertaForSequenceClassification"),cTt.forEach(t),L8r=r(cRe," (RoBERTa model)"),cRe.forEach(t),x8r=i(Be),oC=n(Be,"LI",{});var fRe=s(oC);CFe=n(fRe,"STRONG",{});var fTt=s(CFe);$8r=r(fTt,"roformer"),fTt.forEach(t),k8r=r(fRe," \u2014 "),sJ=n(fRe,"A",{href:!0});var mTt=s(sJ);S8r=r(mTt,"FlaxRoFormerForSequenceClassification"),mTt.forEach(t),R8r=r(fRe," (RoFormer model)"),fRe.forEach(t),B8r=i(Be),rC=n(Be,"LI",{});var mRe=s(rC);wFe=n(mRe,"STRONG",{});var gTt=s(wFe);P8r=r(gTt,"xlm-roberta"),gTt.forEach(t),I8r=r(mRe," \u2014 "),lJ=n(mRe,"A",{href:!0});var hTt=s(lJ);q8r=r(hTt,"FlaxXLMRobertaForSequenceClassification"),hTt.forEach(t),N8r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),Be.forEach(t),j8r=i(Ol),T(tC.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),SPe=i(f),Bc=n(f,"H2",{class:!0});var qqe=s(Bc);aC=n(qqe,"A",{id:!0,class:!0,href:!0});var pTt=s(aC);AFe=n(pTt,"SPAN",{});var uTt=s(AFe);T(D8.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),D8r=i(qqe),yFe=n(qqe,"SPAN",{});var _Tt=s(yFe);G8r=r(_Tt,"FlaxAutoModelForQuestionAnswering"),_Tt.forEach(t),qqe.forEach(t),RPe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(G8.$$.fragment,Vl),O8r=i(Vl),Pc=n(Vl,"P",{});var BK=s(Pc);V8r=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(BK,"A",{href:!0});var bTt=s(iJ);X8r=r(bTt,"from_pretrained()"),bTt.forEach(t),z8r=r(BK," class method or the "),dJ=n(BK,"A",{href:!0});var vTt=s(dJ);Q8r=r(vTt,"from_config()"),vTt.forEach(t),W8r=r(BK,` class
method.`),BK.forEach(t),H8r=i(Vl),O8=n(Vl,"P",{});var Nqe=s(O8);U8r=r(Nqe,"This class cannot be instantiated directly using "),LFe=n(Nqe,"CODE",{});var FTt=s(LFe);J8r=r(FTt,"__init__()"),FTt.forEach(t),Y8r=r(Nqe," (throws an error)."),Nqe.forEach(t),K8r=i(Vl),Gt=n(Vl,"DIV",{class:!0});var oA=s(Gt);T(V8.$$.fragment,oA),Z8r=i(oA),xFe=n(oA,"P",{});var TTt=s(xFe);exr=r(TTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),TTt.forEach(t),oxr=i(oA),Ic=n(oA,"P",{});var PK=s(Ic);rxr=r(PK,`Note:
Loading a model from its configuration file does `),$Fe=n(PK,"STRONG",{});var MTt=s($Fe);txr=r(MTt,"not"),MTt.forEach(t),axr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(PK,"A",{href:!0});var ETt=s(cJ);nxr=r(ETt,"from_pretrained()"),ETt.forEach(t),sxr=r(PK," to load the model weights."),PK.forEach(t),lxr=i(oA),T(nC.$$.fragment,oA),oA.forEach(t),ixr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(X8.$$.fragment,Xl),dxr=i(Xl),kFe=n(Xl,"P",{});var CTt=s(kFe);cxr=r(CTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),CTt.forEach(t),fxr=i(Xl),hn=n(Xl,"P",{});var rA=s(hn);mxr=r(rA,"The model class to instantiate is selected based on the "),SFe=n(rA,"CODE",{});var wTt=s(SFe);gxr=r(wTt,"model_type"),wTt.forEach(t),hxr=r(rA,` property of the config object (either
passed as an argument or loaded from `),RFe=n(rA,"CODE",{});var ATt=s(RFe);pxr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),uxr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(rA,"CODE",{});var yTt=s(BFe);_xr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),bxr=r(rA,":"),rA.forEach(t),vxr=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);sC=n(Pe,"LI",{});var gRe=s(sC);PFe=n(gRe,"STRONG",{});var LTt=s(PFe);Fxr=r(LTt,"albert"),LTt.forEach(t),Txr=r(gRe," \u2014 "),fJ=n(gRe,"A",{href:!0});var xTt=s(fJ);Mxr=r(xTt,"FlaxAlbertForQuestionAnswering"),xTt.forEach(t),Exr=r(gRe," (ALBERT model)"),gRe.forEach(t),Cxr=i(Pe),lC=n(Pe,"LI",{});var hRe=s(lC);IFe=n(hRe,"STRONG",{});var $Tt=s(IFe);wxr=r($Tt,"bart"),$Tt.forEach(t),Axr=r(hRe," \u2014 "),mJ=n(hRe,"A",{href:!0});var kTt=s(mJ);yxr=r(kTt,"FlaxBartForQuestionAnswering"),kTt.forEach(t),Lxr=r(hRe," (BART model)"),hRe.forEach(t),xxr=i(Pe),iC=n(Pe,"LI",{});var pRe=s(iC);qFe=n(pRe,"STRONG",{});var STt=s(qFe);$xr=r(STt,"bert"),STt.forEach(t),kxr=r(pRe," \u2014 "),gJ=n(pRe,"A",{href:!0});var RTt=s(gJ);Sxr=r(RTt,"FlaxBertForQuestionAnswering"),RTt.forEach(t),Rxr=r(pRe," (BERT model)"),pRe.forEach(t),Bxr=i(Pe),dC=n(Pe,"LI",{});var uRe=s(dC);NFe=n(uRe,"STRONG",{});var BTt=s(NFe);Pxr=r(BTt,"big_bird"),BTt.forEach(t),Ixr=r(uRe," \u2014 "),hJ=n(uRe,"A",{href:!0});var PTt=s(hJ);qxr=r(PTt,"FlaxBigBirdForQuestionAnswering"),PTt.forEach(t),Nxr=r(uRe," (BigBird model)"),uRe.forEach(t),jxr=i(Pe),cC=n(Pe,"LI",{});var _Re=s(cC);jFe=n(_Re,"STRONG",{});var ITt=s(jFe);Dxr=r(ITt,"distilbert"),ITt.forEach(t),Gxr=r(_Re," \u2014 "),pJ=n(_Re,"A",{href:!0});var qTt=s(pJ);Oxr=r(qTt,"FlaxDistilBertForQuestionAnswering"),qTt.forEach(t),Vxr=r(_Re," (DistilBERT model)"),_Re.forEach(t),Xxr=i(Pe),fC=n(Pe,"LI",{});var bRe=s(fC);DFe=n(bRe,"STRONG",{});var NTt=s(DFe);zxr=r(NTt,"electra"),NTt.forEach(t),Qxr=r(bRe," \u2014 "),uJ=n(bRe,"A",{href:!0});var jTt=s(uJ);Wxr=r(jTt,"FlaxElectraForQuestionAnswering"),jTt.forEach(t),Hxr=r(bRe," (ELECTRA model)"),bRe.forEach(t),Uxr=i(Pe),mC=n(Pe,"LI",{});var vRe=s(mC);GFe=n(vRe,"STRONG",{});var DTt=s(GFe);Jxr=r(DTt,"mbart"),DTt.forEach(t),Yxr=r(vRe," \u2014 "),_J=n(vRe,"A",{href:!0});var GTt=s(_J);Kxr=r(GTt,"FlaxMBartForQuestionAnswering"),GTt.forEach(t),Zxr=r(vRe," (mBART model)"),vRe.forEach(t),e9r=i(Pe),gC=n(Pe,"LI",{});var FRe=s(gC);OFe=n(FRe,"STRONG",{});var OTt=s(OFe);o9r=r(OTt,"roberta"),OTt.forEach(t),r9r=r(FRe," \u2014 "),bJ=n(FRe,"A",{href:!0});var VTt=s(bJ);t9r=r(VTt,"FlaxRobertaForQuestionAnswering"),VTt.forEach(t),a9r=r(FRe," (RoBERTa model)"),FRe.forEach(t),n9r=i(Pe),hC=n(Pe,"LI",{});var TRe=s(hC);VFe=n(TRe,"STRONG",{});var XTt=s(VFe);s9r=r(XTt,"roformer"),XTt.forEach(t),l9r=r(TRe," \u2014 "),vJ=n(TRe,"A",{href:!0});var zTt=s(vJ);i9r=r(zTt,"FlaxRoFormerForQuestionAnswering"),zTt.forEach(t),d9r=r(TRe," (RoFormer model)"),TRe.forEach(t),c9r=i(Pe),pC=n(Pe,"LI",{});var MRe=s(pC);XFe=n(MRe,"STRONG",{});var QTt=s(XFe);f9r=r(QTt,"xlm-roberta"),QTt.forEach(t),m9r=r(MRe," \u2014 "),FJ=n(MRe,"A",{href:!0});var WTt=s(FJ);g9r=r(WTt,"FlaxXLMRobertaForQuestionAnswering"),WTt.forEach(t),h9r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Pe.forEach(t),p9r=i(Xl),T(uC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),BPe=i(f),qc=n(f,"H2",{class:!0});var jqe=s(qc);_C=n(jqe,"A",{id:!0,class:!0,href:!0});var HTt=s(_C);zFe=n(HTt,"SPAN",{});var UTt=s(zFe);T(z8.$$.fragment,UTt),UTt.forEach(t),HTt.forEach(t),u9r=i(jqe),QFe=n(jqe,"SPAN",{});var JTt=s(QFe);_9r=r(JTt,"FlaxAutoModelForTokenClassification"),JTt.forEach(t),jqe.forEach(t),PPe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(Q8.$$.fragment,zl),b9r=i(zl),Nc=n(zl,"P",{});var IK=s(Nc);v9r=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),TJ=n(IK,"A",{href:!0});var YTt=s(TJ);F9r=r(YTt,"from_pretrained()"),YTt.forEach(t),T9r=r(IK," class method or the "),MJ=n(IK,"A",{href:!0});var KTt=s(MJ);M9r=r(KTt,"from_config()"),KTt.forEach(t),E9r=r(IK,` class
method.`),IK.forEach(t),C9r=i(zl),W8=n(zl,"P",{});var Dqe=s(W8);w9r=r(Dqe,"This class cannot be instantiated directly using "),WFe=n(Dqe,"CODE",{});var ZTt=s(WFe);A9r=r(ZTt,"__init__()"),ZTt.forEach(t),y9r=r(Dqe," (throws an error)."),Dqe.forEach(t),L9r=i(zl),Ot=n(zl,"DIV",{class:!0});var tA=s(Ot);T(H8.$$.fragment,tA),x9r=i(tA),HFe=n(tA,"P",{});var e7t=s(HFe);$9r=r(e7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e7t.forEach(t),k9r=i(tA),jc=n(tA,"P",{});var qK=s(jc);S9r=r(qK,`Note:
Loading a model from its configuration file does `),UFe=n(qK,"STRONG",{});var o7t=s(UFe);R9r=r(o7t,"not"),o7t.forEach(t),B9r=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),EJ=n(qK,"A",{href:!0});var r7t=s(EJ);P9r=r(r7t,"from_pretrained()"),r7t.forEach(t),I9r=r(qK," to load the model weights."),qK.forEach(t),q9r=i(tA),T(bC.$$.fragment,tA),tA.forEach(t),N9r=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(U8.$$.fragment,Ql),j9r=i(Ql),JFe=n(Ql,"P",{});var t7t=s(JFe);D9r=r(t7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),t7t.forEach(t),G9r=i(Ql),pn=n(Ql,"P",{});var aA=s(pn);O9r=r(aA,"The model class to instantiate is selected based on the "),YFe=n(aA,"CODE",{});var a7t=s(YFe);V9r=r(a7t,"model_type"),a7t.forEach(t),X9r=r(aA,` property of the config object (either
passed as an argument or loaded from `),KFe=n(aA,"CODE",{});var n7t=s(KFe);z9r=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),Q9r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(aA,"CODE",{});var s7t=s(ZFe);W9r=r(s7t,"pretrained_model_name_or_path"),s7t.forEach(t),H9r=r(aA,":"),aA.forEach(t),U9r=i(Ql),je=n(Ql,"UL",{});var bo=s(je);vC=n(bo,"LI",{});var ERe=s(vC);e0e=n(ERe,"STRONG",{});var l7t=s(e0e);J9r=r(l7t,"albert"),l7t.forEach(t),Y9r=r(ERe," \u2014 "),CJ=n(ERe,"A",{href:!0});var i7t=s(CJ);K9r=r(i7t,"FlaxAlbertForTokenClassification"),i7t.forEach(t),Z9r=r(ERe," (ALBERT model)"),ERe.forEach(t),e$r=i(bo),FC=n(bo,"LI",{});var CRe=s(FC);o0e=n(CRe,"STRONG",{});var d7t=s(o0e);o$r=r(d7t,"bert"),d7t.forEach(t),r$r=r(CRe," \u2014 "),wJ=n(CRe,"A",{href:!0});var c7t=s(wJ);t$r=r(c7t,"FlaxBertForTokenClassification"),c7t.forEach(t),a$r=r(CRe," (BERT model)"),CRe.forEach(t),n$r=i(bo),TC=n(bo,"LI",{});var wRe=s(TC);r0e=n(wRe,"STRONG",{});var f7t=s(r0e);s$r=r(f7t,"big_bird"),f7t.forEach(t),l$r=r(wRe," \u2014 "),AJ=n(wRe,"A",{href:!0});var m7t=s(AJ);i$r=r(m7t,"FlaxBigBirdForTokenClassification"),m7t.forEach(t),d$r=r(wRe," (BigBird model)"),wRe.forEach(t),c$r=i(bo),MC=n(bo,"LI",{});var ARe=s(MC);t0e=n(ARe,"STRONG",{});var g7t=s(t0e);f$r=r(g7t,"distilbert"),g7t.forEach(t),m$r=r(ARe," \u2014 "),yJ=n(ARe,"A",{href:!0});var h7t=s(yJ);g$r=r(h7t,"FlaxDistilBertForTokenClassification"),h7t.forEach(t),h$r=r(ARe," (DistilBERT model)"),ARe.forEach(t),p$r=i(bo),EC=n(bo,"LI",{});var yRe=s(EC);a0e=n(yRe,"STRONG",{});var p7t=s(a0e);u$r=r(p7t,"electra"),p7t.forEach(t),_$r=r(yRe," \u2014 "),LJ=n(yRe,"A",{href:!0});var u7t=s(LJ);b$r=r(u7t,"FlaxElectraForTokenClassification"),u7t.forEach(t),v$r=r(yRe," (ELECTRA model)"),yRe.forEach(t),F$r=i(bo),CC=n(bo,"LI",{});var LRe=s(CC);n0e=n(LRe,"STRONG",{});var _7t=s(n0e);T$r=r(_7t,"roberta"),_7t.forEach(t),M$r=r(LRe," \u2014 "),xJ=n(LRe,"A",{href:!0});var b7t=s(xJ);E$r=r(b7t,"FlaxRobertaForTokenClassification"),b7t.forEach(t),C$r=r(LRe," (RoBERTa model)"),LRe.forEach(t),w$r=i(bo),wC=n(bo,"LI",{});var xRe=s(wC);s0e=n(xRe,"STRONG",{});var v7t=s(s0e);A$r=r(v7t,"roformer"),v7t.forEach(t),y$r=r(xRe," \u2014 "),$J=n(xRe,"A",{href:!0});var F7t=s($J);L$r=r(F7t,"FlaxRoFormerForTokenClassification"),F7t.forEach(t),x$r=r(xRe," (RoFormer model)"),xRe.forEach(t),$$r=i(bo),AC=n(bo,"LI",{});var $Re=s(AC);l0e=n($Re,"STRONG",{});var T7t=s(l0e);k$r=r(T7t,"xlm-roberta"),T7t.forEach(t),S$r=r($Re," \u2014 "),kJ=n($Re,"A",{href:!0});var M7t=s(kJ);R$r=r(M7t,"FlaxXLMRobertaForTokenClassification"),M7t.forEach(t),B$r=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),bo.forEach(t),P$r=i(Ql),T(yC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),IPe=i(f),Dc=n(f,"H2",{class:!0});var Gqe=s(Dc);LC=n(Gqe,"A",{id:!0,class:!0,href:!0});var E7t=s(LC);i0e=n(E7t,"SPAN",{});var C7t=s(i0e);T(J8.$$.fragment,C7t),C7t.forEach(t),E7t.forEach(t),I$r=i(Gqe),d0e=n(Gqe,"SPAN",{});var w7t=s(d0e);q$r=r(w7t,"FlaxAutoModelForMultipleChoice"),w7t.forEach(t),Gqe.forEach(t),qPe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(Y8.$$.fragment,Wl),N$r=i(Wl),Gc=n(Wl,"P",{});var NK=s(Gc);j$r=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SJ=n(NK,"A",{href:!0});var A7t=s(SJ);D$r=r(A7t,"from_pretrained()"),A7t.forEach(t),G$r=r(NK," class method or the "),RJ=n(NK,"A",{href:!0});var y7t=s(RJ);O$r=r(y7t,"from_config()"),y7t.forEach(t),V$r=r(NK,` class
method.`),NK.forEach(t),X$r=i(Wl),K8=n(Wl,"P",{});var Oqe=s(K8);z$r=r(Oqe,"This class cannot be instantiated directly using "),c0e=n(Oqe,"CODE",{});var L7t=s(c0e);Q$r=r(L7t,"__init__()"),L7t.forEach(t),W$r=r(Oqe," (throws an error)."),Oqe.forEach(t),H$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var nA=s(Vt);T(Z8.$$.fragment,nA),U$r=i(nA),f0e=n(nA,"P",{});var x7t=s(f0e);J$r=r(x7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),x7t.forEach(t),Y$r=i(nA),Oc=n(nA,"P",{});var jK=s(Oc);K$r=r(jK,`Note:
Loading a model from its configuration file does `),m0e=n(jK,"STRONG",{});var $7t=s(m0e);Z$r=r($7t,"not"),$7t.forEach(t),ekr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(jK,"A",{href:!0});var k7t=s(BJ);okr=r(k7t,"from_pretrained()"),k7t.forEach(t),rkr=r(jK," to load the model weights."),jK.forEach(t),tkr=i(nA),T(xC.$$.fragment,nA),nA.forEach(t),akr=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(ex.$$.fragment,Hl),nkr=i(Hl),g0e=n(Hl,"P",{});var S7t=s(g0e);skr=r(S7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S7t.forEach(t),lkr=i(Hl),un=n(Hl,"P",{});var sA=s(un);ikr=r(sA,"The model class to instantiate is selected based on the "),h0e=n(sA,"CODE",{});var R7t=s(h0e);dkr=r(R7t,"model_type"),R7t.forEach(t),ckr=r(sA,` property of the config object (either
passed as an argument or loaded from `),p0e=n(sA,"CODE",{});var B7t=s(p0e);fkr=r(B7t,"pretrained_model_name_or_path"),B7t.forEach(t),mkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u0e=n(sA,"CODE",{});var P7t=s(u0e);gkr=r(P7t,"pretrained_model_name_or_path"),P7t.forEach(t),hkr=r(sA,":"),sA.forEach(t),pkr=i(Hl),De=n(Hl,"UL",{});var vo=s(De);$C=n(vo,"LI",{});var kRe=s($C);_0e=n(kRe,"STRONG",{});var I7t=s(_0e);ukr=r(I7t,"albert"),I7t.forEach(t),_kr=r(kRe," \u2014 "),PJ=n(kRe,"A",{href:!0});var q7t=s(PJ);bkr=r(q7t,"FlaxAlbertForMultipleChoice"),q7t.forEach(t),vkr=r(kRe," (ALBERT model)"),kRe.forEach(t),Fkr=i(vo),kC=n(vo,"LI",{});var SRe=s(kC);b0e=n(SRe,"STRONG",{});var N7t=s(b0e);Tkr=r(N7t,"bert"),N7t.forEach(t),Mkr=r(SRe," \u2014 "),IJ=n(SRe,"A",{href:!0});var j7t=s(IJ);Ekr=r(j7t,"FlaxBertForMultipleChoice"),j7t.forEach(t),Ckr=r(SRe," (BERT model)"),SRe.forEach(t),wkr=i(vo),SC=n(vo,"LI",{});var RRe=s(SC);v0e=n(RRe,"STRONG",{});var D7t=s(v0e);Akr=r(D7t,"big_bird"),D7t.forEach(t),ykr=r(RRe," \u2014 "),qJ=n(RRe,"A",{href:!0});var G7t=s(qJ);Lkr=r(G7t,"FlaxBigBirdForMultipleChoice"),G7t.forEach(t),xkr=r(RRe," (BigBird model)"),RRe.forEach(t),$kr=i(vo),RC=n(vo,"LI",{});var BRe=s(RC);F0e=n(BRe,"STRONG",{});var O7t=s(F0e);kkr=r(O7t,"distilbert"),O7t.forEach(t),Skr=r(BRe," \u2014 "),NJ=n(BRe,"A",{href:!0});var V7t=s(NJ);Rkr=r(V7t,"FlaxDistilBertForMultipleChoice"),V7t.forEach(t),Bkr=r(BRe," (DistilBERT model)"),BRe.forEach(t),Pkr=i(vo),BC=n(vo,"LI",{});var PRe=s(BC);T0e=n(PRe,"STRONG",{});var X7t=s(T0e);Ikr=r(X7t,"electra"),X7t.forEach(t),qkr=r(PRe," \u2014 "),jJ=n(PRe,"A",{href:!0});var z7t=s(jJ);Nkr=r(z7t,"FlaxElectraForMultipleChoice"),z7t.forEach(t),jkr=r(PRe," (ELECTRA model)"),PRe.forEach(t),Dkr=i(vo),PC=n(vo,"LI",{});var IRe=s(PC);M0e=n(IRe,"STRONG",{});var Q7t=s(M0e);Gkr=r(Q7t,"roberta"),Q7t.forEach(t),Okr=r(IRe," \u2014 "),DJ=n(IRe,"A",{href:!0});var W7t=s(DJ);Vkr=r(W7t,"FlaxRobertaForMultipleChoice"),W7t.forEach(t),Xkr=r(IRe," (RoBERTa model)"),IRe.forEach(t),zkr=i(vo),IC=n(vo,"LI",{});var qRe=s(IC);E0e=n(qRe,"STRONG",{});var H7t=s(E0e);Qkr=r(H7t,"roformer"),H7t.forEach(t),Wkr=r(qRe," \u2014 "),GJ=n(qRe,"A",{href:!0});var U7t=s(GJ);Hkr=r(U7t,"FlaxRoFormerForMultipleChoice"),U7t.forEach(t),Ukr=r(qRe," (RoFormer model)"),qRe.forEach(t),Jkr=i(vo),qC=n(vo,"LI",{});var NRe=s(qC);C0e=n(NRe,"STRONG",{});var J7t=s(C0e);Ykr=r(J7t,"xlm-roberta"),J7t.forEach(t),Kkr=r(NRe," \u2014 "),OJ=n(NRe,"A",{href:!0});var Y7t=s(OJ);Zkr=r(Y7t,"FlaxXLMRobertaForMultipleChoice"),Y7t.forEach(t),eSr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),vo.forEach(t),oSr=i(Hl),T(NC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),NPe=i(f),Vc=n(f,"H2",{class:!0});var Vqe=s(Vc);jC=n(Vqe,"A",{id:!0,class:!0,href:!0});var K7t=s(jC);w0e=n(K7t,"SPAN",{});var Z7t=s(w0e);T(ox.$$.fragment,Z7t),Z7t.forEach(t),K7t.forEach(t),rSr=i(Vqe),A0e=n(Vqe,"SPAN",{});var eMt=s(A0e);tSr=r(eMt,"FlaxAutoModelForNextSentencePrediction"),eMt.forEach(t),Vqe.forEach(t),jPe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(rx.$$.fragment,Ul),aSr=i(Ul),Xc=n(Ul,"P",{});var DK=s(Xc);nSr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),VJ=n(DK,"A",{href:!0});var oMt=s(VJ);sSr=r(oMt,"from_pretrained()"),oMt.forEach(t),lSr=r(DK," class method or the "),XJ=n(DK,"A",{href:!0});var rMt=s(XJ);iSr=r(rMt,"from_config()"),rMt.forEach(t),dSr=r(DK,` class
method.`),DK.forEach(t),cSr=i(Ul),tx=n(Ul,"P",{});var Xqe=s(tx);fSr=r(Xqe,"This class cannot be instantiated directly using "),y0e=n(Xqe,"CODE",{});var tMt=s(y0e);mSr=r(tMt,"__init__()"),tMt.forEach(t),gSr=r(Xqe," (throws an error)."),Xqe.forEach(t),hSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var lA=s(Xt);T(ax.$$.fragment,lA),pSr=i(lA),L0e=n(lA,"P",{});var aMt=s(L0e);uSr=r(aMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aMt.forEach(t),_Sr=i(lA),zc=n(lA,"P",{});var GK=s(zc);bSr=r(GK,`Note:
Loading a model from its configuration file does `),x0e=n(GK,"STRONG",{});var nMt=s(x0e);vSr=r(nMt,"not"),nMt.forEach(t),FSr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zJ=n(GK,"A",{href:!0});var sMt=s(zJ);TSr=r(sMt,"from_pretrained()"),sMt.forEach(t),MSr=r(GK," to load the model weights."),GK.forEach(t),ESr=i(lA),T(DC.$$.fragment,lA),lA.forEach(t),CSr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(nx.$$.fragment,Jl),wSr=i(Jl),$0e=n(Jl,"P",{});var lMt=s($0e);ASr=r(lMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lMt.forEach(t),ySr=i(Jl),_n=n(Jl,"P",{});var iA=s(_n);LSr=r(iA,"The model class to instantiate is selected based on the "),k0e=n(iA,"CODE",{});var iMt=s(k0e);xSr=r(iMt,"model_type"),iMt.forEach(t),$Sr=r(iA,` property of the config object (either
passed as an argument or loaded from `),S0e=n(iA,"CODE",{});var dMt=s(S0e);kSr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),SSr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(iA,"CODE",{});var cMt=s(R0e);RSr=r(cMt,"pretrained_model_name_or_path"),cMt.forEach(t),BSr=r(iA,":"),iA.forEach(t),PSr=i(Jl),B0e=n(Jl,"UL",{});var fMt=s(B0e);GC=n(fMt,"LI",{});var jRe=s(GC);P0e=n(jRe,"STRONG",{});var mMt=s(P0e);ISr=r(mMt,"bert"),mMt.forEach(t),qSr=r(jRe," \u2014 "),QJ=n(jRe,"A",{href:!0});var gMt=s(QJ);NSr=r(gMt,"FlaxBertForNextSentencePrediction"),gMt.forEach(t),jSr=r(jRe," (BERT model)"),jRe.forEach(t),fMt.forEach(t),DSr=i(Jl),T(OC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),DPe=i(f),Qc=n(f,"H2",{class:!0});var zqe=s(Qc);VC=n(zqe,"A",{id:!0,class:!0,href:!0});var hMt=s(VC);I0e=n(hMt,"SPAN",{});var pMt=s(I0e);T(sx.$$.fragment,pMt),pMt.forEach(t),hMt.forEach(t),GSr=i(zqe),q0e=n(zqe,"SPAN",{});var uMt=s(q0e);OSr=r(uMt,"FlaxAutoModelForImageClassification"),uMt.forEach(t),zqe.forEach(t),GPe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(lx.$$.fragment,Yl),VSr=i(Yl),Wc=n(Yl,"P",{});var OK=s(Wc);XSr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),WJ=n(OK,"A",{href:!0});var _Mt=s(WJ);zSr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),QSr=r(OK," class method or the "),HJ=n(OK,"A",{href:!0});var bMt=s(HJ);WSr=r(bMt,"from_config()"),bMt.forEach(t),HSr=r(OK,` class
method.`),OK.forEach(t),USr=i(Yl),ix=n(Yl,"P",{});var Qqe=s(ix);JSr=r(Qqe,"This class cannot be instantiated directly using "),N0e=n(Qqe,"CODE",{});var vMt=s(N0e);YSr=r(vMt,"__init__()"),vMt.forEach(t),KSr=r(Qqe," (throws an error)."),Qqe.forEach(t),ZSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var dA=s(zt);T(dx.$$.fragment,dA),eRr=i(dA),j0e=n(dA,"P",{});var FMt=s(j0e);oRr=r(FMt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),FMt.forEach(t),rRr=i(dA),Hc=n(dA,"P",{});var VK=s(Hc);tRr=r(VK,`Note:
Loading a model from its configuration file does `),D0e=n(VK,"STRONG",{});var TMt=s(D0e);aRr=r(TMt,"not"),TMt.forEach(t),nRr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UJ=n(VK,"A",{href:!0});var MMt=s(UJ);sRr=r(MMt,"from_pretrained()"),MMt.forEach(t),lRr=r(VK," to load the model weights."),VK.forEach(t),iRr=i(dA),T(XC.$$.fragment,dA),dA.forEach(t),dRr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(cx.$$.fragment,Kl),cRr=i(Kl),G0e=n(Kl,"P",{});var EMt=s(G0e);fRr=r(EMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),EMt.forEach(t),mRr=i(Kl),bn=n(Kl,"P",{});var cA=s(bn);gRr=r(cA,"The model class to instantiate is selected based on the "),O0e=n(cA,"CODE",{});var CMt=s(O0e);hRr=r(CMt,"model_type"),CMt.forEach(t),pRr=r(cA,` property of the config object (either
passed as an argument or loaded from `),V0e=n(cA,"CODE",{});var wMt=s(V0e);uRr=r(wMt,"pretrained_model_name_or_path"),wMt.forEach(t),_Rr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(cA,"CODE",{});var AMt=s(X0e);bRr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),vRr=r(cA,":"),cA.forEach(t),FRr=i(Kl),fx=n(Kl,"UL",{});var Wqe=s(fx);zC=n(Wqe,"LI",{});var DRe=s(zC);z0e=n(DRe,"STRONG",{});var yMt=s(z0e);TRr=r(yMt,"beit"),yMt.forEach(t),MRr=r(DRe," \u2014 "),JJ=n(DRe,"A",{href:!0});var LMt=s(JJ);ERr=r(LMt,"FlaxBeitForImageClassification"),LMt.forEach(t),CRr=r(DRe," (BEiT model)"),DRe.forEach(t),wRr=i(Wqe),QC=n(Wqe,"LI",{});var GRe=s(QC);Q0e=n(GRe,"STRONG",{});var xMt=s(Q0e);ARr=r(xMt,"vit"),xMt.forEach(t),yRr=r(GRe," \u2014 "),YJ=n(GRe,"A",{href:!0});var $Mt=s(YJ);LRr=r($Mt,"FlaxViTForImageClassification"),$Mt.forEach(t),xRr=r(GRe," (ViT model)"),GRe.forEach(t),Wqe.forEach(t),$Rr=i(Kl),T(WC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),OPe=i(f),Uc=n(f,"H2",{class:!0});var Hqe=s(Uc);HC=n(Hqe,"A",{id:!0,class:!0,href:!0});var kMt=s(HC);W0e=n(kMt,"SPAN",{});var SMt=s(W0e);T(mx.$$.fragment,SMt),SMt.forEach(t),kMt.forEach(t),kRr=i(Hqe),H0e=n(Hqe,"SPAN",{});var RMt=s(H0e);SRr=r(RMt,"FlaxAutoModelForVision2Seq"),RMt.forEach(t),Hqe.forEach(t),VPe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(gx.$$.fragment,Zl),RRr=i(Zl),Jc=n(Zl,"P",{});var XK=s(Jc);BRr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KJ=n(XK,"A",{href:!0});var BMt=s(KJ);PRr=r(BMt,"from_pretrained()"),BMt.forEach(t),IRr=r(XK," class method or the "),ZJ=n(XK,"A",{href:!0});var PMt=s(ZJ);qRr=r(PMt,"from_config()"),PMt.forEach(t),NRr=r(XK,` class
method.`),XK.forEach(t),jRr=i(Zl),hx=n(Zl,"P",{});var Uqe=s(hx);DRr=r(Uqe,"This class cannot be instantiated directly using "),U0e=n(Uqe,"CODE",{});var IMt=s(U0e);GRr=r(IMt,"__init__()"),IMt.forEach(t),ORr=r(Uqe," (throws an error)."),Uqe.forEach(t),VRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var fA=s(Qt);T(px.$$.fragment,fA),XRr=i(fA),J0e=n(fA,"P",{});var qMt=s(J0e);zRr=r(qMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),qMt.forEach(t),QRr=i(fA),Yc=n(fA,"P",{});var zK=s(Yc);WRr=r(zK,`Note:
Loading a model from its configuration file does `),Y0e=n(zK,"STRONG",{});var NMt=s(Y0e);HRr=r(NMt,"not"),NMt.forEach(t),URr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(zK,"A",{href:!0});var jMt=s(eY);JRr=r(jMt,"from_pretrained()"),jMt.forEach(t),YRr=r(zK," to load the model weights."),zK.forEach(t),KRr=i(fA),T(UC.$$.fragment,fA),fA.forEach(t),ZRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(ux.$$.fragment,ei),eBr=i(ei),K0e=n(ei,"P",{});var DMt=s(K0e);oBr=r(DMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DMt.forEach(t),rBr=i(ei),vn=n(ei,"P",{});var mA=s(vn);tBr=r(mA,"The model class to instantiate is selected based on the "),Z0e=n(mA,"CODE",{});var GMt=s(Z0e);aBr=r(GMt,"model_type"),GMt.forEach(t),nBr=r(mA,` property of the config object (either
passed as an argument or loaded from `),eTe=n(mA,"CODE",{});var OMt=s(eTe);sBr=r(OMt,"pretrained_model_name_or_path"),OMt.forEach(t),lBr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oTe=n(mA,"CODE",{});var VMt=s(oTe);iBr=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),dBr=r(mA,":"),mA.forEach(t),cBr=i(ei),rTe=n(ei,"UL",{});var XMt=s(rTe);JC=n(XMt,"LI",{});var ORe=s(JC);tTe=n(ORe,"STRONG",{});var zMt=s(tTe);fBr=r(zMt,"vision-encoder-decoder"),zMt.forEach(t),mBr=r(ORe," \u2014 "),oY=n(ORe,"A",{href:!0});var QMt=s(oY);gBr=r(QMt,"FlaxVisionEncoderDecoderModel"),QMt.forEach(t),hBr=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),XMt.forEach(t),pBr=i(ei),T(YC.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(HCt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c(P9,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(I9,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig"),c(q9,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig"),c(N9,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig"),c(j9,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig"),c(D9,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(G9,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig"),c(O9,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(V9,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(X9,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(z9,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig"),c(Q9,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig"),c(W9,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig"),c(H9,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig"),c(U9,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig"),c(J9,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig"),c(Y9,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(K9,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Z9,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(e$,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig"),c(o$,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(r$,"href","/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(t$,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig"),c(a$,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig"),c(n$,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig"),c(s$,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig"),c(l$,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig"),c(i$,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig"),c(d$,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(c$,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig"),c(f$,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig"),c(m$,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig"),c(g$,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig"),c(h$,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNConfig"),c(p$,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config"),c(u$,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(_$,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig"),c(b$,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig"),c(v$,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig"),c(F$,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(T$,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(M$,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(E$,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig"),c(C$,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig"),c(w$,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeConfig"),c(A$,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig"),c(y$,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config"),c(L$,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig"),c(x$,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig"),c($$,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig"),c(k$,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(S$,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(R$,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig"),c(B$,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config"),c(P$,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(I$,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(q$,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig"),c(N$,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig"),c(j$,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig"),c(D$,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(G$,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(O$,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(V$,"href","/docs/transformers/pr_17054/en/model_doc/rag#transformers.RagConfig"),c(X$,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmConfig"),c(z$,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig"),c(Q$,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig"),c(W$,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig"),c(H$,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig"),c(U$,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig"),c(J$,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig"),c(Y$,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig"),c(K$,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig"),c(Z$,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig"),c(ek,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig"),c(ok,"href","/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(rk,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(tk,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(ak,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig"),c(nk,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(sk,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig"),c(lk,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config"),c(ik,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig"),c(dk,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig"),c(ck,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(fk,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRConfig"),c(mk,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(gk,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(hk,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig"),c(pk,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltConfig"),c(uk,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(_k,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(bk,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(vk,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig"),c(Fk,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Tk,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Mk,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig"),c(Ek,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig"),c(Ck,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig"),c(wk,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ak,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(yk,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Lk,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig"),c(xk,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig"),c($k,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sg,"id","transformers.AutoTokenizer"),c(sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sg,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(kk,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Sk,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(Rk,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Bk,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartTokenizer"),c(Pk,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartTokenizerFast"),c(Ik,"href","/docs/transformers/pr_17054/en/model_doc/barthez#transformers.BarthezTokenizer"),c(qk,"href","/docs/transformers/pr_17054/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Nk,"href","/docs/transformers/pr_17054/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(jk,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(Dk,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(Gk,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Ok,"href","/docs/transformers/pr_17054/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(Vk,"href","/docs/transformers/pr_17054/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Xk,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(zk,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Qk,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Wk,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Hk,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Uk,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Jk,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(Yk,"href","/docs/transformers/pr_17054/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Kk,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Zk,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eS,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineTokenizer"),c(oS,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPTokenizer"),c(rS,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tS,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aS,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nS,"href","/docs/transformers/pr_17054/en/model_doc/cpm#transformers.CpmTokenizer"),c(sS,"href","/docs/transformers/pr_17054/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lS,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cS,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaTokenizer"),c(fS,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(mS,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gS,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hS,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(pS,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(uS,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_S,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bS,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraTokenizer"),c(vS,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(FS,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TS,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetTokenizer"),c(MS,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ES,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CS,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wS,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AS,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yS,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LS,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xS,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($S,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kS,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SS,"href","/docs/transformers/pr_17054/en/model_doc/herbert#transformers.HerbertTokenizer"),c(RS,"href","/docs/transformers/pr_17054/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(BS,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(PS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(qS,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(NS,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(jS,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(DS,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(GS,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(OS,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(VS,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDTokenizer"),c(XS,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDTokenizerFast"),c(zS,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerTokenizer"),c(QS,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(WS,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeTokenizer"),c(HS,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(US,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(JS,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(YS,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianTokenizer"),c(KS,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartTokenizer"),c(ZS,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(eR,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(oR,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(rR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(tR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(aR,"href","/docs/transformers/pr_17054/en/model_doc/mluke#transformers.MLukeTokenizer"),c(nR,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(sR,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(lR,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(iR,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(dR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5Tokenizer"),c(cR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5TokenizerFast"),c(fR,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(mR,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(gR,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(hR,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(pR,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uR,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(_R,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(bR,"href","/docs/transformers/pr_17054/en/model_doc/phobert#transformers.PhobertTokenizer"),c(vR,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartTokenizer"),c(FR,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(TR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(MR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(ER,"href","/docs/transformers/pr_17054/en/model_doc/rag#transformers.RagTokenizer"),c(CR,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmTokenizer"),c(wR,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmTokenizerFast"),c(AR,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerTokenizer"),c(yR,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(LR,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertTokenizer"),c(xR,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c($R,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(kR,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(SR,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BR,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(PR,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(IR,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(qR,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(NR,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterTokenizer"),c(jR,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(DR,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(GR,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(OR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5Tokenizer"),c(VR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5TokenizerFast"),c(XR,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasTokenizer"),c(zR,"href","/docs/transformers/pr_17054/en/model_doc/tapex#transformers.TapexTokenizer"),c(QR,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(WR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(HR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(UR,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JR,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(YR,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KR,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMTokenizer"),c(eB,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oB,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rB,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nB,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sB,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lB,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ng,"id","transformers.AutoFeatureExtractor"),c(Ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ng,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(dB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cB,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(fB,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(mB,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hB,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(pB,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(uB,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_B,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bB,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(vB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FB,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(TB,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(MB,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(EB,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(CB,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(wB,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(yB,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(LB,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(xB,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c($B,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(kB,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(RB,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mh,"id","transformers.AutoProcessor"),c(mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mh,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(BB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(PB,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPProcessor"),c(IB,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(qB,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(NB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(GB,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(OB,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRProcessor"),c(VB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(XB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(zB,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltProcessor"),c(QB,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(WB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(HB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoModel"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(UB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KB,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertModel"),c(ZB,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartModel"),c(eP,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitModel"),c(oP,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel"),c(rP,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(tP,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdModel"),c(aP,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(nP,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(sP,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(lP,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertModel"),c(iP,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineModel"),c(dP,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPModel"),c(cP,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertModel"),c(fP,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextModel"),c(mP,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLModel"),c(gP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(hP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(pP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(uP,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaModel"),c(_P,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(bP,"href","/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(vP,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTModel"),c(FP,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrModel"),c(TP,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertModel"),c(MP,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(EP,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTModel"),c(CP,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraModel"),c(wP,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertModel"),c(AP,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetModel"),c(yP,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTModel"),c(LP,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelModel"),c(xP,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelBaseModel"),c($P,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNModel"),c(kP,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Model"),c(SP,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(RP,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJModel"),c(BP,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertModel"),c(PP,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertModel"),c(IP,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qP,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(NP,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(jP,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDModel"),c(DP,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerModel"),c(GP,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeModel"),c(OP,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertModel"),c(VP,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Model"),c(XP,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianModel"),c(zP,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerModel"),c(QP,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartModel"),c(WP,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(HP,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertModel"),c(UP,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetModel"),c(JP,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Model"),c(YP,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerModel"),c(KP,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(ZP,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusModel"),c(eI,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverModel"),c(oI,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartModel"),c(rI,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tI,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aI,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nI,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModel"),c(sI,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetModel"),c(lI,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertModel"),c(iI,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetModel"),c(dI,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel"),c(cI,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaModel"),c(fI,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerModel"),c(mI,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerModel"),c(gI,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWModel"),c(hI,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDModel"),c(pI,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(uI,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterModel"),c(_I,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(bI,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinModel"),c(vI,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Model"),c(FI,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasModel"),c(TI,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(MI,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechModel"),c(EI,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(CI,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanModel"),c(wI,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltModel"),c(AI,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(yI,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertModel"),c(LI,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTModel"),c(xI,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($I,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kI,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMModel"),c(SI,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMModel"),c(RI,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMModel"),c(BI,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(PI,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(II,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qI,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetModel"),c(NI,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosModel"),c(jI,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fu,"id","transformers.AutoModelForPreTraining"),c(Fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fu,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(DI,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GI,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OI,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VI,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForPreTraining"),c(XI,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(zI,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForPreTraining"),c(QI,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(WI,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(HI,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UI,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(JI,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(YI,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(KI,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ZI,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForPreTraining"),c(eq,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(oq,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForPreTraining"),c(rq,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tq,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(aq,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(nq,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sq,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lq,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(iq,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(dq,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(cq,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(fq,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mq,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(gq,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel"),c(hq,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(pq,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(uq,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(_q,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(bq,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(vq,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Fq,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Tq,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Mq,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Eq,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Cq,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(wq,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(yq,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d_,"id","transformers.AutoModelForCausalLM"),c(d_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(Lq,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xq,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($q,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kq,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForCausalLM"),c(Sq,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertLMHeadModel"),c(Rq,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Bq,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Pq,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Iq,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(qq,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Nq,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(jq,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Dq,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Gq,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Oq,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Vq,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Xq,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(zq,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianForCausalLM"),c(Qq,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Wq,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Hq,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Jq,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Yq,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Kq,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Zq,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(eN,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(oN,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(rN,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(tN,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(aN,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(nN,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(sN,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(lN,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(iN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(dN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(cN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(fN,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H_,"id","transformers.AutoModelForMaskedLM"),c(H_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(mN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pN,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(uN,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(_N,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMaskedLM"),c(bN,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(vN,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(FN,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(TN,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(MN,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(EN,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(CN,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(AN,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(yN,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(LN,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(xN,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM"),c($N,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(kN,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(SN,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(RN,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(BN,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(IN,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(qN,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(NN,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(jN,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(DN,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ON,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(VN,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(XN,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(zN,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(QN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(HN,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R1,"id","transformers.AutoModelForSeq2SeqLM"),c(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(UN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KN,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(tj,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianMTModel"),c(lj,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(cj,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(fj,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(mj,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(gj,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(hj,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eb,"id","transformers.AutoModelForSequenceClassification"),c(eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eb,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(pj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bj,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(vj,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(wj,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(yj,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(xj,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c($j,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(kj,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(qj,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(jj,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForMultipleChoice"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(fD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hD,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMultipleChoice"),c(uD,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(_D,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(bD,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(vD,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(TD,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(MD,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ED,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(wD,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(AD,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(yD,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LD,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(xD,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c($D,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(kD,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(SD,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(RD,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(BD,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(PD,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(ID,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(ND,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jD,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(DD,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(GD,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x4,"id","transformers.AutoModelForNextSentencePrediction"),c(x4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(OD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zD,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(QD,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WD,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HD,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UD,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N4,"id","transformers.AutoModelForTokenClassification"),c(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N4,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(JD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZD,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(eG,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForTokenClassification"),c(oG,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(rG,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(tG,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForTokenClassification"),c(aG,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(nG,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(sG,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(lG,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(iG,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(dG,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(cG,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(fG,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(mG,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(gG,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(hG,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(pG,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(uG,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(_G,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bG,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(vG,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(FG,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(TG,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(MG,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(EG,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(CG,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wG,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(AG,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(yG,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(LG,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xG,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($G,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kG,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForQuestionAnswering"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(SG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PG,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(DG,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(UG,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(uO,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(vO,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c5,"id","transformers.AutoModelForTableQuestionAnswering"),c(c5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(FO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EO,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p5,"id","transformers.AutoModelForImageClassification"),c(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p5,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(CO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yO,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForImageClassification"),c(LO,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(xO,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c($O,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassification"),c(kO,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(SO,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(RO,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(BO,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(PO,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(IO,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(qO,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(NO,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(jO,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(DO,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForImageClassification"),c(GO,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanForImageClassification"),c(OO,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.AutoModelForVision2Seq"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(VO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.AutoModelForAudioClassification"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(WO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JO,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W5,"id","transformers.AutoModelForAudioFrameClassification"),c(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W5,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(aV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(iV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(dV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(cV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForCTC"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(fV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(pV,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForCTC"),c(uV,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForCTC"),c(_V,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForCTC"),c(bV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(vV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(FV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(TV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(MV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(AV,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vv,"id","transformers.AutoModelForAudioXVector"),c(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vv,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(yV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(SV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(RV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForMaskedImageModeling"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(BV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qV,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(NV,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(jV,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bv,"id","transformers.AutoModelForObjectDetection"),c(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bv,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(DV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForObjectDetection"),c(XV,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForImageSegmentation"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(zV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HV,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForSemanticSegmentation"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(UV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(ZV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(eX,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(oX,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zv,"id","transformers.AutoModelForInstanceSegmentation"),c(Zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zv,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(rX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aF,"id","transformers.TFAutoModel"),c(aF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aF,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(sX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertModel"),c(cX,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartModel"),c(fX,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertModel"),c(mX,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(gX,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(hX,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertModel"),c(pX,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.TFCLIPModel"),c(uX,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertModel"),c(_X,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextModel"),c(bX,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLModel"),c(vX,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaModel"),c(FX,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(TX,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(MX,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(EX,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraModel"),c(CX,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(wX,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelModel"),c(AX,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(yX,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LX,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJModel"),c(xX,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.TFHubertModel"),c($X,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(kX,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDModel"),c(SX,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerModel"),c(RX,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertModel"),c(BX,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianModel"),c(PX,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartModel"),c(IX,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(qX,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NX,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5Model"),c(jX,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(DX,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GX,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertModel"),c(OX,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaModel"),c(VX,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerModel"),c(XX,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(zX,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5Model"),c(QX,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasModel"),c(WX,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(HX,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTModel"),c(UX,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(JX,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(YX,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMModel"),c(KX,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(ZX,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.TFAutoModelForPreTraining"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(ez,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tz,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(az,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(nz,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForPreTraining"),c(sz,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(lz,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iz,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dz,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(cz,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fz,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(mz,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(gz,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hz,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(pz,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(uz,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_z,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(bz,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vz,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Fz,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Tz,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Mz,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Ez,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Cz,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(wz,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.TFAutoModelForCausalLM"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertLMHeadModel"),c($z,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(kz,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Sz,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Rz,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Bz,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Pz,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Iz,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(qz,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Nz,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jz,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Dz,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q0,"id","transformers.TFAutoModelForImageClassification"),c(q0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q0,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(zz,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O0,"id","transformers.TFAutoModelForMaskedLM"),c(O0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O0,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Jz,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Yz,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Kz,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Zz,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(eQ,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(oQ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(rQ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(nQ,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(sQ,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(lQ,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(iQ,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(dQ,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(cQ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(mQ,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(fT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(vQ,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(FQ,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(TQ,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(MQ,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(EQ,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianMTModel"),c(CQ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(wQ,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(AQ,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(yQ,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.TFAutoModelForSequenceClassification"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(LQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(WQ,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(HQ,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(UQ,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(JQ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(YQ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(KQ,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(ZQ,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(eW,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(oW,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(rW,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZT,"id","transformers.TFAutoModelForMultipleChoice"),c(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZT,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(lW,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(iW,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(dW,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(cW,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(fW,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(mW,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(gW,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(hW,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(pW,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(uW,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(_W,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(bW,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(vW,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(FW,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(TW,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(MW,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(v7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(EW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.TFAutoModelForTokenClassification"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(yW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($W,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(kW,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(SW,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(RW,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(BW,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(PW,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(IW,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(qW,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(NW,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(jW,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(DW,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(GW,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(OW,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(VW,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(XW,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(zW,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(QW,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(WW,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(HW,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(UW,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q7,"id","transformers.TFAutoModelForQuestionAnswering"),c(Q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q7,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(JW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(lH,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(dH,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(cH,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(fH,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(mH,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(gH,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(hH,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(pH,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(uH,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(_H,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(bH,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForVision2Seq"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(vH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(EH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EM,"id","transformers.FlaxAutoModel"),c(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EM,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(yH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertModel"),c(kH,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartModel"),c(SH,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitModel"),c(RH,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertModel"),c(BH,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(PH,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(IH,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(qH,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.FlaxCLIPModel"),c(NH,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(jH,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraModel"),c(DH,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(GH,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(OH,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(VH,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianModel"),c(XH,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartModel"),c(zH,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5Model"),c(QH,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(WH,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(HH,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(UH,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5Model"),c(JH,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(YH,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTModel"),c(KH,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(ZH,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(eU,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.FlaxAutoModelForCausalLM"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(oU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(nU,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(sU,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(lU,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(iU,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nE,"id","transformers.FlaxAutoModelForPreTraining"),c(nE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(dU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(gU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(hU,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(pU,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(uU,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(_U,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bU,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vU,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(FU,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(TU,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(MU,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(EU,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.FlaxAutoModelForMaskedLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(CU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yU,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(LU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xU,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c($U,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(kU,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(RU,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BU,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(PU,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(IU,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(qU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(VU,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(XU,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(zU,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(WU,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(sJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(lJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(FJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_C,"id","transformers.FlaxAutoModelForTokenClassification"),c(_C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_C,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(TJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(AJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(yJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(LJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(xJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c($J,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(kJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(SJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(VJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VC,"id","transformers.FlaxAutoModelForImageClassification"),c(VC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(WJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JJ,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(YJ,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HC,"id","transformers.FlaxAutoModelForVision2Seq"),c(HC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(KJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,gA),e(Yr,rf),b(f,Ie,_),b(f,Oe,_),e(Oe,ai),e(Oe,Tn),e(Tn,hA),e(Oe,Mn),e(Oe,En),e(En,pA),e(Oe,ni),e(Oe,Cn),e(Cn,uA),e(Oe,si),b(f,tf,_),M(ba,f,_),b(f,Ve,_),b(f,Ae,_),e(Ae,x9),e(Ae,li),e(li,$9),e(Ae,k9),b(f,To,_),b(f,va,_),e(va,S9),e(va,af),e(af,R9),e(va,Jqe),b(f,VRe,_),b(f,ii,_),e(ii,nf),e(nf,QK),M(_A,QK,null),e(ii,Yqe),e(ii,WK),e(WK,Kqe),b(f,XRe,_),b(f,wn,_),e(wn,Zqe),e(wn,HK),e(HK,eNe),e(wn,oNe),e(wn,UK),e(UK,rNe),e(wn,tNe),b(f,zRe,_),M(bA,f,_),b(f,QRe,_),b(f,B9,_),e(B9,aNe),b(f,WRe,_),M(sf,f,_),b(f,HRe,_),b(f,di,_),e(di,lf),e(lf,JK),M(vA,JK,null),e(di,nNe),e(di,YK),e(YK,sNe),b(f,URe,_),b(f,Mo,_),M(FA,Mo,null),e(Mo,lNe),e(Mo,TA),e(TA,iNe),e(TA,P9),e(P9,dNe),e(TA,cNe),e(Mo,fNe),e(Mo,MA),e(MA,mNe),e(MA,KK),e(KK,gNe),e(MA,hNe),e(Mo,pNe),e(Mo,Fr),M(EA,Fr,null),e(Fr,uNe),e(Fr,ZK),e(ZK,_Ne),e(Fr,bNe),e(Fr,ci),e(ci,vNe),e(ci,eZ),e(eZ,FNe),e(ci,TNe),e(ci,oZ),e(oZ,MNe),e(ci,ENe),e(Fr,CNe),e(Fr,A),e(A,df),e(df,rZ),e(rZ,wNe),e(df,ANe),e(df,I9),e(I9,yNe),e(df,LNe),e(A,xNe),e(A,cf),e(cf,tZ),e(tZ,$Ne),e(cf,kNe),e(cf,q9),e(q9,SNe),e(cf,RNe),e(A,BNe),e(A,ff),e(ff,aZ),e(aZ,PNe),e(ff,INe),e(ff,N9),e(N9,qNe),e(ff,NNe),e(A,jNe),e(A,mf),e(mf,nZ),e(nZ,DNe),e(mf,GNe),e(mf,j9),e(j9,ONe),e(mf,VNe),e(A,XNe),e(A,gf),e(gf,sZ),e(sZ,zNe),e(gf,QNe),e(gf,D9),e(D9,WNe),e(gf,HNe),e(A,UNe),e(A,hf),e(hf,lZ),e(lZ,JNe),e(hf,YNe),e(hf,G9),e(G9,KNe),e(hf,ZNe),e(A,eje),e(A,pf),e(pf,iZ),e(iZ,oje),e(pf,rje),e(pf,O9),e(O9,tje),e(pf,aje),e(A,nje),e(A,uf),e(uf,dZ),e(dZ,sje),e(uf,lje),e(uf,V9),e(V9,ije),e(uf,dje),e(A,cje),e(A,_f),e(_f,cZ),e(cZ,fje),e(_f,mje),e(_f,X9),e(X9,gje),e(_f,hje),e(A,pje),e(A,bf),e(bf,fZ),e(fZ,uje),e(bf,_je),e(bf,z9),e(z9,bje),e(bf,vje),e(A,Fje),e(A,vf),e(vf,mZ),e(mZ,Tje),e(vf,Mje),e(vf,Q9),e(Q9,Eje),e(vf,Cje),e(A,wje),e(A,Ff),e(Ff,gZ),e(gZ,Aje),e(Ff,yje),e(Ff,W9),e(W9,Lje),e(Ff,xje),e(A,$je),e(A,Tf),e(Tf,hZ),e(hZ,kje),e(Tf,Sje),e(Tf,H9),e(H9,Rje),e(Tf,Bje),e(A,Pje),e(A,Mf),e(Mf,pZ),e(pZ,Ije),e(Mf,qje),e(Mf,U9),e(U9,Nje),e(Mf,jje),e(A,Dje),e(A,Ef),e(Ef,uZ),e(uZ,Gje),e(Ef,Oje),e(Ef,J9),e(J9,Vje),e(Ef,Xje),e(A,zje),e(A,Cf),e(Cf,_Z),e(_Z,Qje),e(Cf,Wje),e(Cf,Y9),e(Y9,Hje),e(Cf,Uje),e(A,Jje),e(A,wf),e(wf,bZ),e(bZ,Yje),e(wf,Kje),e(wf,K9),e(K9,Zje),e(wf,eDe),e(A,oDe),e(A,Af),e(Af,vZ),e(vZ,rDe),e(Af,tDe),e(Af,Z9),e(Z9,aDe),e(Af,nDe),e(A,sDe),e(A,yf),e(yf,FZ),e(FZ,lDe),e(yf,iDe),e(yf,e$),e(e$,dDe),e(yf,cDe),e(A,fDe),e(A,Lf),e(Lf,TZ),e(TZ,mDe),e(Lf,gDe),e(Lf,o$),e(o$,hDe),e(Lf,pDe),e(A,uDe),e(A,xf),e(xf,MZ),e(MZ,_De),e(xf,bDe),e(xf,r$),e(r$,vDe),e(xf,FDe),e(A,TDe),e(A,$f),e($f,EZ),e(EZ,MDe),e($f,EDe),e($f,t$),e(t$,CDe),e($f,wDe),e(A,ADe),e(A,kf),e(kf,CZ),e(CZ,yDe),e(kf,LDe),e(kf,a$),e(a$,xDe),e(kf,$De),e(A,kDe),e(A,Sf),e(Sf,wZ),e(wZ,SDe),e(Sf,RDe),e(Sf,n$),e(n$,BDe),e(Sf,PDe),e(A,IDe),e(A,Rf),e(Rf,AZ),e(AZ,qDe),e(Rf,NDe),e(Rf,s$),e(s$,jDe),e(Rf,DDe),e(A,GDe),e(A,Bf),e(Bf,yZ),e(yZ,ODe),e(Bf,VDe),e(Bf,l$),e(l$,XDe),e(Bf,zDe),e(A,QDe),e(A,Pf),e(Pf,LZ),e(LZ,WDe),e(Pf,HDe),e(Pf,i$),e(i$,UDe),e(Pf,JDe),e(A,YDe),e(A,If),e(If,xZ),e(xZ,KDe),e(If,ZDe),e(If,d$),e(d$,eGe),e(If,oGe),e(A,rGe),e(A,qf),e(qf,$Z),e($Z,tGe),e(qf,aGe),e(qf,c$),e(c$,nGe),e(qf,sGe),e(A,lGe),e(A,Nf),e(Nf,kZ),e(kZ,iGe),e(Nf,dGe),e(Nf,f$),e(f$,cGe),e(Nf,fGe),e(A,mGe),e(A,jf),e(jf,SZ),e(SZ,gGe),e(jf,hGe),e(jf,m$),e(m$,pGe),e(jf,uGe),e(A,_Ge),e(A,Df),e(Df,RZ),e(RZ,bGe),e(Df,vGe),e(Df,g$),e(g$,FGe),e(Df,TGe),e(A,MGe),e(A,Gf),e(Gf,BZ),e(BZ,EGe),e(Gf,CGe),e(Gf,h$),e(h$,wGe),e(Gf,AGe),e(A,yGe),e(A,Of),e(Of,PZ),e(PZ,LGe),e(Of,xGe),e(Of,p$),e(p$,$Ge),e(Of,kGe),e(A,SGe),e(A,Vf),e(Vf,IZ),e(IZ,RGe),e(Vf,BGe),e(Vf,u$),e(u$,PGe),e(Vf,IGe),e(A,qGe),e(A,Xf),e(Xf,qZ),e(qZ,NGe),e(Xf,jGe),e(Xf,_$),e(_$,DGe),e(Xf,GGe),e(A,OGe),e(A,zf),e(zf,NZ),e(NZ,VGe),e(zf,XGe),e(zf,b$),e(b$,zGe),e(zf,QGe),e(A,WGe),e(A,Qf),e(Qf,jZ),e(jZ,HGe),e(Qf,UGe),e(Qf,v$),e(v$,JGe),e(Qf,YGe),e(A,KGe),e(A,Wf),e(Wf,DZ),e(DZ,ZGe),e(Wf,eOe),e(Wf,F$),e(F$,oOe),e(Wf,rOe),e(A,tOe),e(A,Hf),e(Hf,GZ),e(GZ,aOe),e(Hf,nOe),e(Hf,T$),e(T$,sOe),e(Hf,lOe),e(A,iOe),e(A,Uf),e(Uf,OZ),e(OZ,dOe),e(Uf,cOe),e(Uf,M$),e(M$,fOe),e(Uf,mOe),e(A,gOe),e(A,Jf),e(Jf,VZ),e(VZ,hOe),e(Jf,pOe),e(Jf,E$),e(E$,uOe),e(Jf,_Oe),e(A,bOe),e(A,Yf),e(Yf,XZ),e(XZ,vOe),e(Yf,FOe),e(Yf,C$),e(C$,TOe),e(Yf,MOe),e(A,EOe),e(A,Kf),e(Kf,zZ),e(zZ,COe),e(Kf,wOe),e(Kf,w$),e(w$,AOe),e(Kf,yOe),e(A,LOe),e(A,Zf),e(Zf,QZ),e(QZ,xOe),e(Zf,$Oe),e(Zf,A$),e(A$,kOe),e(Zf,SOe),e(A,ROe),e(A,em),e(em,WZ),e(WZ,BOe),e(em,POe),e(em,y$),e(y$,IOe),e(em,qOe),e(A,NOe),e(A,om),e(om,HZ),e(HZ,jOe),e(om,DOe),e(om,L$),e(L$,GOe),e(om,OOe),e(A,VOe),e(A,rm),e(rm,UZ),e(UZ,XOe),e(rm,zOe),e(rm,x$),e(x$,QOe),e(rm,WOe),e(A,HOe),e(A,tm),e(tm,JZ),e(JZ,UOe),e(tm,JOe),e(tm,$$),e($$,YOe),e(tm,KOe),e(A,ZOe),e(A,am),e(am,YZ),e(YZ,eVe),e(am,oVe),e(am,k$),e(k$,rVe),e(am,tVe),e(A,aVe),e(A,nm),e(nm,KZ),e(KZ,nVe),e(nm,sVe),e(nm,S$),e(S$,lVe),e(nm,iVe),e(A,dVe),e(A,sm),e(sm,ZZ),e(ZZ,cVe),e(sm,fVe),e(sm,R$),e(R$,mVe),e(sm,gVe),e(A,hVe),e(A,lm),e(lm,eee),e(eee,pVe),e(lm,uVe),e(lm,B$),e(B$,_Ve),e(lm,bVe),e(A,vVe),e(A,im),e(im,oee),e(oee,FVe),e(im,TVe),e(im,P$),e(P$,MVe),e(im,EVe),e(A,CVe),e(A,dm),e(dm,ree),e(ree,wVe),e(dm,AVe),e(dm,I$),e(I$,yVe),e(dm,LVe),e(A,xVe),e(A,cm),e(cm,tee),e(tee,$Ve),e(cm,kVe),e(cm,q$),e(q$,SVe),e(cm,RVe),e(A,BVe),e(A,fm),e(fm,aee),e(aee,PVe),e(fm,IVe),e(fm,N$),e(N$,qVe),e(fm,NVe),e(A,jVe),e(A,mm),e(mm,nee),e(nee,DVe),e(mm,GVe),e(mm,j$),e(j$,OVe),e(mm,VVe),e(A,XVe),e(A,gm),e(gm,see),e(see,zVe),e(gm,QVe),e(gm,D$),e(D$,WVe),e(gm,HVe),e(A,UVe),e(A,hm),e(hm,lee),e(lee,JVe),e(hm,YVe),e(hm,G$),e(G$,KVe),e(hm,ZVe),e(A,eXe),e(A,pm),e(pm,iee),e(iee,oXe),e(pm,rXe),e(pm,O$),e(O$,tXe),e(pm,aXe),e(A,nXe),e(A,um),e(um,dee),e(dee,sXe),e(um,lXe),e(um,V$),e(V$,iXe),e(um,dXe),e(A,cXe),e(A,_m),e(_m,cee),e(cee,fXe),e(_m,mXe),e(_m,X$),e(X$,gXe),e(_m,hXe),e(A,pXe),e(A,bm),e(bm,fee),e(fee,uXe),e(bm,_Xe),e(bm,z$),e(z$,bXe),e(bm,vXe),e(A,FXe),e(A,vm),e(vm,mee),e(mee,TXe),e(vm,MXe),e(vm,Q$),e(Q$,EXe),e(vm,CXe),e(A,wXe),e(A,Fm),e(Fm,gee),e(gee,AXe),e(Fm,yXe),e(Fm,W$),e(W$,LXe),e(Fm,xXe),e(A,$Xe),e(A,Tm),e(Tm,hee),e(hee,kXe),e(Tm,SXe),e(Tm,H$),e(H$,RXe),e(Tm,BXe),e(A,PXe),e(A,Mm),e(Mm,pee),e(pee,IXe),e(Mm,qXe),e(Mm,U$),e(U$,NXe),e(Mm,jXe),e(A,DXe),e(A,Em),e(Em,uee),e(uee,GXe),e(Em,OXe),e(Em,J$),e(J$,VXe),e(Em,XXe),e(A,zXe),e(A,Cm),e(Cm,_ee),e(_ee,QXe),e(Cm,WXe),e(Cm,Y$),e(Y$,HXe),e(Cm,UXe),e(A,JXe),e(A,wm),e(wm,bee),e(bee,YXe),e(wm,KXe),e(wm,K$),e(K$,ZXe),e(wm,eze),e(A,oze),e(A,Am),e(Am,vee),e(vee,rze),e(Am,tze),e(Am,Z$),e(Z$,aze),e(Am,nze),e(A,sze),e(A,ym),e(ym,Fee),e(Fee,lze),e(ym,ize),e(ym,ek),e(ek,dze),e(ym,cze),e(A,fze),e(A,Lm),e(Lm,Tee),e(Tee,mze),e(Lm,gze),e(Lm,ok),e(ok,hze),e(Lm,pze),e(A,uze),e(A,xm),e(xm,Mee),e(Mee,_ze),e(xm,bze),e(xm,rk),e(rk,vze),e(xm,Fze),e(A,Tze),e(A,$m),e($m,Eee),e(Eee,Mze),e($m,Eze),e($m,tk),e(tk,Cze),e($m,wze),e(A,Aze),e(A,km),e(km,Cee),e(Cee,yze),e(km,Lze),e(km,ak),e(ak,xze),e(km,$ze),e(A,kze),e(A,Sm),e(Sm,wee),e(wee,Sze),e(Sm,Rze),e(Sm,nk),e(nk,Bze),e(Sm,Pze),e(A,Ize),e(A,Rm),e(Rm,Aee),e(Aee,qze),e(Rm,Nze),e(Rm,sk),e(sk,jze),e(Rm,Dze),e(A,Gze),e(A,Bm),e(Bm,yee),e(yee,Oze),e(Bm,Vze),e(Bm,lk),e(lk,Xze),e(Bm,zze),e(A,Qze),e(A,Pm),e(Pm,Lee),e(Lee,Wze),e(Pm,Hze),e(Pm,ik),e(ik,Uze),e(Pm,Jze),e(A,Yze),e(A,Im),e(Im,xee),e(xee,Kze),e(Im,Zze),e(Im,dk),e(dk,eQe),e(Im,oQe),e(A,rQe),e(A,qm),e(qm,$ee),e($ee,tQe),e(qm,aQe),e(qm,ck),e(ck,nQe),e(qm,sQe),e(A,lQe),e(A,Nm),e(Nm,kee),e(kee,iQe),e(Nm,dQe),e(Nm,fk),e(fk,cQe),e(Nm,fQe),e(A,mQe),e(A,jm),e(jm,See),e(See,gQe),e(jm,hQe),e(jm,mk),e(mk,pQe),e(jm,uQe),e(A,_Qe),e(A,Dm),e(Dm,Ree),e(Ree,bQe),e(Dm,vQe),e(Dm,gk),e(gk,FQe),e(Dm,TQe),e(A,MQe),e(A,Gm),e(Gm,Bee),e(Bee,EQe),e(Gm,CQe),e(Gm,hk),e(hk,wQe),e(Gm,AQe),e(A,yQe),e(A,Om),e(Om,Pee),e(Pee,LQe),e(Om,xQe),e(Om,pk),e(pk,$Qe),e(Om,kQe),e(A,SQe),e(A,Vm),e(Vm,Iee),e(Iee,RQe),e(Vm,BQe),e(Vm,uk),e(uk,PQe),e(Vm,IQe),e(A,qQe),e(A,Xm),e(Xm,qee),e(qee,NQe),e(Xm,jQe),e(Xm,_k),e(_k,DQe),e(Xm,GQe),e(A,OQe),e(A,zm),e(zm,Nee),e(Nee,VQe),e(zm,XQe),e(zm,bk),e(bk,zQe),e(zm,QQe),e(A,WQe),e(A,Qm),e(Qm,jee),e(jee,HQe),e(Qm,UQe),e(Qm,vk),e(vk,JQe),e(Qm,YQe),e(A,KQe),e(A,Wm),e(Wm,Dee),e(Dee,ZQe),e(Wm,eWe),e(Wm,Fk),e(Fk,oWe),e(Wm,rWe),e(A,tWe),e(A,Hm),e(Hm,Gee),e(Gee,aWe),e(Hm,nWe),e(Hm,Tk),e(Tk,sWe),e(Hm,lWe),e(A,iWe),e(A,Um),e(Um,Oee),e(Oee,dWe),e(Um,cWe),e(Um,Mk),e(Mk,fWe),e(Um,mWe),e(A,gWe),e(A,Jm),e(Jm,Vee),e(Vee,hWe),e(Jm,pWe),e(Jm,Ek),e(Ek,uWe),e(Jm,_We),e(A,bWe),e(A,Ym),e(Ym,Xee),e(Xee,vWe),e(Ym,FWe),e(Ym,Ck),e(Ck,TWe),e(Ym,MWe),e(A,EWe),e(A,Km),e(Km,zee),e(zee,CWe),e(Km,wWe),e(Km,wk),e(wk,AWe),e(Km,yWe),e(A,LWe),e(A,Zm),e(Zm,Qee),e(Qee,xWe),e(Zm,$We),e(Zm,Ak),e(Ak,kWe),e(Zm,SWe),e(A,RWe),e(A,eg),e(eg,Wee),e(Wee,BWe),e(eg,PWe),e(eg,yk),e(yk,IWe),e(eg,qWe),e(A,NWe),e(A,og),e(og,Hee),e(Hee,jWe),e(og,DWe),e(og,Lk),e(Lk,GWe),e(og,OWe),e(A,VWe),e(A,rg),e(rg,Uee),e(Uee,XWe),e(rg,zWe),e(rg,xk),e(xk,QWe),e(rg,WWe),e(A,HWe),e(A,tg),e(tg,Jee),e(Jee,UWe),e(tg,JWe),e(tg,$k),e($k,YWe),e(tg,KWe),e(Fr,ZWe),M(ag,Fr,null),e(Mo,eHe),e(Mo,ng),M(CA,ng,null),e(ng,oHe),e(ng,Yee),e(Yee,rHe),b(f,JRe,_),b(f,fi,_),e(fi,sg),e(sg,Kee),M(wA,Kee,null),e(fi,tHe),e(fi,Zee),e(Zee,aHe),b(f,YRe,_),b(f,Eo,_),M(AA,Eo,null),e(Eo,nHe),e(Eo,yA),e(yA,sHe),e(yA,kk),e(kk,lHe),e(yA,iHe),e(Eo,dHe),e(Eo,LA),e(LA,cHe),e(LA,eoe),e(eoe,fHe),e(LA,mHe),e(Eo,gHe),e(Eo,Tr),M(xA,Tr,null),e(Tr,hHe),e(Tr,ooe),e(ooe,pHe),e(Tr,uHe),e(Tr,Fa),e(Fa,_He),e(Fa,roe),e(roe,bHe),e(Fa,vHe),e(Fa,toe),e(toe,FHe),e(Fa,THe),e(Fa,aoe),e(aoe,MHe),e(Fa,EHe),e(Tr,CHe),e(Tr,k),e(k,An),e(An,noe),e(noe,wHe),e(An,AHe),e(An,Sk),e(Sk,yHe),e(An,LHe),e(An,Rk),e(Rk,xHe),e(An,$He),e(k,kHe),e(k,yn),e(yn,soe),e(soe,SHe),e(yn,RHe),e(yn,Bk),e(Bk,BHe),e(yn,PHe),e(yn,Pk),e(Pk,IHe),e(yn,qHe),e(k,NHe),e(k,Ln),e(Ln,loe),e(loe,jHe),e(Ln,DHe),e(Ln,Ik),e(Ik,GHe),e(Ln,OHe),e(Ln,qk),e(qk,VHe),e(Ln,XHe),e(k,zHe),e(k,lg),e(lg,ioe),e(ioe,QHe),e(lg,WHe),e(lg,Nk),e(Nk,HHe),e(lg,UHe),e(k,JHe),e(k,xn),e(xn,doe),e(doe,YHe),e(xn,KHe),e(xn,jk),e(jk,ZHe),e(xn,eUe),e(xn,Dk),e(Dk,oUe),e(xn,rUe),e(k,tUe),e(k,ig),e(ig,coe),e(coe,aUe),e(ig,nUe),e(ig,Gk),e(Gk,sUe),e(ig,lUe),e(k,iUe),e(k,dg),e(dg,foe),e(foe,dUe),e(dg,cUe),e(dg,Ok),e(Ok,fUe),e(dg,mUe),e(k,gUe),e(k,cg),e(cg,moe),e(moe,hUe),e(cg,pUe),e(cg,Vk),e(Vk,uUe),e(cg,_Ue),e(k,bUe),e(k,$n),e($n,goe),e(goe,vUe),e($n,FUe),e($n,Xk),e(Xk,TUe),e($n,MUe),e($n,zk),e(zk,EUe),e($n,CUe),e(k,wUe),e(k,kn),e(kn,hoe),e(hoe,AUe),e(kn,yUe),e(kn,Qk),e(Qk,LUe),e(kn,xUe),e(kn,Wk),e(Wk,$Ue),e(kn,kUe),e(k,SUe),e(k,Sn),e(Sn,poe),e(poe,RUe),e(Sn,BUe),e(Sn,Hk),e(Hk,PUe),e(Sn,IUe),e(Sn,Uk),e(Uk,qUe),e(Sn,NUe),e(k,jUe),e(k,fg),e(fg,uoe),e(uoe,DUe),e(fg,GUe),e(fg,Jk),e(Jk,OUe),e(fg,VUe),e(k,XUe),e(k,mg),e(mg,_oe),e(_oe,zUe),e(mg,QUe),e(mg,Yk),e(Yk,WUe),e(mg,HUe),e(k,UUe),e(k,Rn),e(Rn,boe),e(boe,JUe),e(Rn,YUe),e(Rn,Kk),e(Kk,KUe),e(Rn,ZUe),e(Rn,Zk),e(Zk,eJe),e(Rn,oJe),e(k,rJe),e(k,gg),e(gg,voe),e(voe,tJe),e(gg,aJe),e(gg,eS),e(eS,nJe),e(gg,sJe),e(k,lJe),e(k,Bn),e(Bn,Foe),e(Foe,iJe),e(Bn,dJe),e(Bn,oS),e(oS,cJe),e(Bn,fJe),e(Bn,rS),e(rS,mJe),e(Bn,gJe),e(k,hJe),e(k,Pn),e(Pn,Toe),e(Toe,pJe),e(Pn,uJe),e(Pn,tS),e(tS,_Je),e(Pn,bJe),e(Pn,aS),e(aS,vJe),e(Pn,FJe),e(k,TJe),e(k,In),e(In,Moe),e(Moe,MJe),e(In,EJe),e(In,nS),e(nS,CJe),e(In,wJe),e(In,sS),e(sS,AJe),e(In,yJe),e(k,LJe),e(k,hg),e(hg,Eoe),e(Eoe,xJe),e(hg,$Je),e(hg,lS),e(lS,kJe),e(hg,SJe),e(k,RJe),e(k,qn),e(qn,Coe),e(Coe,BJe),e(qn,PJe),e(qn,iS),e(iS,IJe),e(qn,qJe),e(qn,dS),e(dS,NJe),e(qn,jJe),e(k,DJe),e(k,Nn),e(Nn,woe),e(woe,GJe),e(Nn,OJe),e(Nn,cS),e(cS,VJe),e(Nn,XJe),e(Nn,fS),e(fS,zJe),e(Nn,QJe),e(k,WJe),e(k,jn),e(jn,Aoe),e(Aoe,HJe),e(jn,UJe),e(jn,mS),e(mS,JJe),e(jn,YJe),e(jn,gS),e(gS,KJe),e(jn,ZJe),e(k,eYe),e(k,Dn),e(Dn,yoe),e(yoe,oYe),e(Dn,rYe),e(Dn,hS),e(hS,tYe),e(Dn,aYe),e(Dn,pS),e(pS,nYe),e(Dn,sYe),e(k,lYe),e(k,Gn),e(Gn,Loe),e(Loe,iYe),e(Gn,dYe),e(Gn,uS),e(uS,cYe),e(Gn,fYe),e(Gn,_S),e(_S,mYe),e(Gn,gYe),e(k,hYe),e(k,On),e(On,xoe),e(xoe,pYe),e(On,uYe),e(On,bS),e(bS,_Ye),e(On,bYe),e(On,vS),e(vS,vYe),e(On,FYe),e(k,TYe),e(k,pg),e(pg,$oe),e($oe,MYe),e(pg,EYe),e(pg,FS),e(FS,CYe),e(pg,wYe),e(k,AYe),e(k,Vn),e(Vn,koe),e(koe,yYe),e(Vn,LYe),e(Vn,TS),e(TS,xYe),e(Vn,$Ye),e(Vn,MS),e(MS,kYe),e(Vn,SYe),e(k,RYe),e(k,ug),e(ug,Soe),e(Soe,BYe),e(ug,PYe),e(ug,ES),e(ES,IYe),e(ug,qYe),e(k,NYe),e(k,Xn),e(Xn,Roe),e(Roe,jYe),e(Xn,DYe),e(Xn,CS),e(CS,GYe),e(Xn,OYe),e(Xn,wS),e(wS,VYe),e(Xn,XYe),e(k,zYe),e(k,zn),e(zn,Boe),e(Boe,QYe),e(zn,WYe),e(zn,AS),e(AS,HYe),e(zn,UYe),e(zn,yS),e(yS,JYe),e(zn,YYe),e(k,KYe),e(k,Qn),e(Qn,Poe),e(Poe,ZYe),e(Qn,eKe),e(Qn,LS),e(LS,oKe),e(Qn,rKe),e(Qn,xS),e(xS,tKe),e(Qn,aKe),e(k,nKe),e(k,Wn),e(Wn,Ioe),e(Ioe,sKe),e(Wn,lKe),e(Wn,$S),e($S,iKe),e(Wn,dKe),e(Wn,kS),e(kS,cKe),e(Wn,fKe),e(k,mKe),e(k,Hn),e(Hn,qoe),e(qoe,gKe),e(Hn,hKe),e(Hn,SS),e(SS,pKe),e(Hn,uKe),e(Hn,RS),e(RS,_Ke),e(Hn,bKe),e(k,vKe),e(k,_g),e(_g,Noe),e(Noe,FKe),e(_g,TKe),e(_g,BS),e(BS,MKe),e(_g,EKe),e(k,CKe),e(k,Un),e(Un,joe),e(joe,wKe),e(Un,AKe),e(Un,PS),e(PS,yKe),e(Un,LKe),e(Un,IS),e(IS,xKe),e(Un,$Ke),e(k,kKe),e(k,Jn),e(Jn,Doe),e(Doe,SKe),e(Jn,RKe),e(Jn,qS),e(qS,BKe),e(Jn,PKe),e(Jn,NS),e(NS,IKe),e(Jn,qKe),e(k,NKe),e(k,Yn),e(Yn,Goe),e(Goe,jKe),e(Yn,DKe),e(Yn,jS),e(jS,GKe),e(Yn,OKe),e(Yn,DS),e(DS,VKe),e(Yn,XKe),e(k,zKe),e(k,Kn),e(Kn,Ooe),e(Ooe,QKe),e(Kn,WKe),e(Kn,GS),e(GS,HKe),e(Kn,UKe),e(Kn,OS),e(OS,JKe),e(Kn,YKe),e(k,KKe),e(k,Zn),e(Zn,Voe),e(Voe,ZKe),e(Zn,eZe),e(Zn,VS),e(VS,oZe),e(Zn,rZe),e(Zn,XS),e(XS,tZe),e(Zn,aZe),e(k,nZe),e(k,es),e(es,Xoe),e(Xoe,sZe),e(es,lZe),e(es,zS),e(zS,iZe),e(es,dZe),e(es,QS),e(QS,cZe),e(es,fZe),e(k,mZe),e(k,bg),e(bg,zoe),e(zoe,gZe),e(bg,hZe),e(bg,WS),e(WS,pZe),e(bg,uZe),e(k,_Ze),e(k,os),e(os,Qoe),e(Qoe,bZe),e(os,vZe),e(os,HS),e(HS,FZe),e(os,TZe),e(os,US),e(US,MZe),e(os,EZe),e(k,CZe),e(k,vg),e(vg,Woe),e(Woe,wZe),e(vg,AZe),e(vg,JS),e(JS,yZe),e(vg,LZe),e(k,xZe),e(k,Fg),e(Fg,Hoe),e(Hoe,$Ze),e(Fg,kZe),e(Fg,YS),e(YS,SZe),e(Fg,RZe),e(k,BZe),e(k,rs),e(rs,Uoe),e(Uoe,PZe),e(rs,IZe),e(rs,KS),e(KS,qZe),e(rs,NZe),e(rs,ZS),e(ZS,jZe),e(rs,DZe),e(k,GZe),e(k,ts),e(ts,Joe),e(Joe,OZe),e(ts,VZe),e(ts,eR),e(eR,XZe),e(ts,zZe),e(ts,oR),e(oR,QZe),e(ts,WZe),e(k,HZe),e(k,as),e(as,Yoe),e(Yoe,UZe),e(as,JZe),e(as,rR),e(rR,YZe),e(as,KZe),e(as,tR),e(tR,ZZe),e(as,eeo),e(k,oeo),e(k,Tg),e(Tg,Koe),e(Koe,reo),e(Tg,teo),e(Tg,aR),e(aR,aeo),e(Tg,neo),e(k,seo),e(k,ns),e(ns,Zoe),e(Zoe,leo),e(ns,ieo),e(ns,nR),e(nR,deo),e(ns,ceo),e(ns,sR),e(sR,feo),e(ns,meo),e(k,geo),e(k,ss),e(ss,ere),e(ere,heo),e(ss,peo),e(ss,lR),e(lR,ueo),e(ss,_eo),e(ss,iR),e(iR,beo),e(ss,veo),e(k,Feo),e(k,ls),e(ls,ore),e(ore,Teo),e(ls,Meo),e(ls,dR),e(dR,Eeo),e(ls,Ceo),e(ls,cR),e(cR,weo),e(ls,Aeo),e(k,yeo),e(k,is),e(is,rre),e(rre,Leo),e(is,xeo),e(is,fR),e(fR,$eo),e(is,keo),e(is,mR),e(mR,Seo),e(is,Reo),e(k,Beo),e(k,ds),e(ds,tre),e(tre,Peo),e(ds,Ieo),e(ds,gR),e(gR,qeo),e(ds,Neo),e(ds,hR),e(hR,jeo),e(ds,Deo),e(k,Geo),e(k,cs),e(cs,are),e(are,Oeo),e(cs,Veo),e(cs,pR),e(pR,Xeo),e(cs,zeo),e(cs,uR),e(uR,Qeo),e(cs,Weo),e(k,Heo),e(k,Mg),e(Mg,nre),e(nre,Ueo),e(Mg,Jeo),e(Mg,_R),e(_R,Yeo),e(Mg,Keo),e(k,Zeo),e(k,Eg),e(Eg,sre),e(sre,eoo),e(Eg,ooo),e(Eg,bR),e(bR,roo),e(Eg,too),e(k,aoo),e(k,Cg),e(Cg,lre),e(lre,noo),e(Cg,soo),e(Cg,vR),e(vR,loo),e(Cg,ioo),e(k,doo),e(k,wg),e(wg,ire),e(ire,coo),e(wg,foo),e(wg,FR),e(FR,moo),e(wg,goo),e(k,hoo),e(k,fs),e(fs,dre),e(dre,poo),e(fs,uoo),e(fs,TR),e(TR,_oo),e(fs,boo),e(fs,MR),e(MR,voo),e(fs,Foo),e(k,Too),e(k,Ag),e(Ag,cre),e(cre,Moo),e(Ag,Eoo),e(Ag,ER),e(ER,Coo),e(Ag,woo),e(k,Aoo),e(k,ms),e(ms,fre),e(fre,yoo),e(ms,Loo),e(ms,CR),e(CR,xoo),e(ms,$oo),e(ms,wR),e(wR,koo),e(ms,Soo),e(k,Roo),e(k,gs),e(gs,mre),e(mre,Boo),e(gs,Poo),e(gs,AR),e(AR,Ioo),e(gs,qoo),e(gs,yR),e(yR,Noo),e(gs,joo),e(k,Doo),e(k,hs),e(hs,gre),e(gre,Goo),e(hs,Ooo),e(hs,LR),e(LR,Voo),e(hs,Xoo),e(hs,xR),e(xR,zoo),e(hs,Qoo),e(k,Woo),e(k,ps),e(ps,hre),e(hre,Hoo),e(ps,Uoo),e(ps,$R),e($R,Joo),e(ps,Yoo),e(ps,kR),e(kR,Koo),e(ps,Zoo),e(k,ero),e(k,us),e(us,pre),e(pre,oro),e(us,rro),e(us,SR),e(SR,tro),e(us,aro),e(us,RR),e(RR,nro),e(us,sro),e(k,lro),e(k,_s),e(_s,ure),e(ure,iro),e(_s,dro),e(_s,BR),e(BR,cro),e(_s,fro),e(_s,PR),e(PR,mro),e(_s,gro),e(k,hro),e(k,yg),e(yg,_re),e(_re,pro),e(yg,uro),e(yg,IR),e(IR,_ro),e(yg,bro),e(k,vro),e(k,Lg),e(Lg,bre),e(bre,Fro),e(Lg,Tro),e(Lg,qR),e(qR,Mro),e(Lg,Ero),e(k,Cro),e(k,bs),e(bs,vre),e(vre,wro),e(bs,Aro),e(bs,NR),e(NR,yro),e(bs,Lro),e(bs,jR),e(jR,xro),e(bs,$ro),e(k,kro),e(k,vs),e(vs,Fre),e(Fre,Sro),e(vs,Rro),e(vs,DR),e(DR,Bro),e(vs,Pro),e(vs,GR),e(GR,Iro),e(vs,qro),e(k,Nro),e(k,Fs),e(Fs,Tre),e(Tre,jro),e(Fs,Dro),e(Fs,OR),e(OR,Gro),e(Fs,Oro),e(Fs,VR),e(VR,Vro),e(Fs,Xro),e(k,zro),e(k,xg),e(xg,Mre),e(Mre,Qro),e(xg,Wro),e(xg,XR),e(XR,Hro),e(xg,Uro),e(k,Jro),e(k,$g),e($g,Ere),e(Ere,Yro),e($g,Kro),e($g,zR),e(zR,Zro),e($g,eto),e(k,oto),e(k,kg),e(kg,Cre),e(Cre,rto),e(kg,tto),e(kg,QR),e(QR,ato),e(kg,nto),e(k,sto),e(k,Ts),e(Ts,wre),e(wre,lto),e(Ts,ito),e(Ts,WR),e(WR,dto),e(Ts,cto),e(Ts,HR),e(HR,fto),e(Ts,mto),e(k,gto),e(k,Sg),e(Sg,Are),e(Are,hto),e(Sg,pto),e(Sg,UR),e(UR,uto),e(Sg,_to),e(k,bto),e(k,Rg),e(Rg,yre),e(yre,vto),e(Rg,Fto),e(Rg,JR),e(JR,Tto),e(Rg,Mto),e(k,Eto),e(k,Ms),e(Ms,Lre),e(Lre,Cto),e(Ms,wto),e(Ms,YR),e(YR,Ato),e(Ms,yto),e(Ms,KR),e(KR,Lto),e(Ms,xto),e(k,$to),e(k,Bg),e(Bg,xre),e(xre,kto),e(Bg,Sto),e(Bg,ZR),e(ZR,Rto),e(Bg,Bto),e(k,Pto),e(k,Pg),e(Pg,$re),e($re,Ito),e(Pg,qto),e(Pg,eB),e(eB,Nto),e(Pg,jto),e(k,Dto),e(k,Es),e(Es,kre),e(kre,Gto),e(Es,Oto),e(Es,oB),e(oB,Vto),e(Es,Xto),e(Es,rB),e(rB,zto),e(Es,Qto),e(k,Wto),e(k,Cs),e(Cs,Sre),e(Sre,Hto),e(Cs,Uto),e(Cs,tB),e(tB,Jto),e(Cs,Yto),e(Cs,aB),e(aB,Kto),e(Cs,Zto),e(k,eao),e(k,ws),e(ws,Rre),e(Rre,oao),e(ws,rao),e(ws,nB),e(nB,tao),e(ws,aao),e(ws,sB),e(sB,nao),e(ws,sao),e(k,lao),e(k,As),e(As,Bre),e(Bre,iao),e(As,dao),e(As,lB),e(lB,cao),e(As,fao),e(As,iB),e(iB,mao),e(As,gao),e(Tr,hao),M(Ig,Tr,null),e(Eo,pao),e(Eo,qg),M($A,qg,null),e(qg,uao),e(qg,Pre),e(Pre,_ao),b(f,KRe,_),b(f,mi,_),e(mi,Ng),e(Ng,Ire),M(kA,Ire,null),e(mi,bao),e(mi,qre),e(qre,vao),b(f,ZRe,_),b(f,Co,_),M(SA,Co,null),e(Co,Fao),e(Co,RA),e(RA,Tao),e(RA,dB),e(dB,Mao),e(RA,Eao),e(Co,Cao),e(Co,BA),e(BA,wao),e(BA,Nre),e(Nre,Aao),e(BA,yao),e(Co,Lao),e(Co,Xe),M(PA,Xe,null),e(Xe,xao),e(Xe,jre),e(jre,$ao),e(Xe,kao),e(Xe,Ta),e(Ta,Sao),e(Ta,Dre),e(Dre,Rao),e(Ta,Bao),e(Ta,Gre),e(Gre,Pao),e(Ta,Iao),e(Ta,Ore),e(Ore,qao),e(Ta,Nao),e(Xe,jao),e(Xe,te),e(te,jg),e(jg,Vre),e(Vre,Dao),e(jg,Gao),e(jg,cB),e(cB,Oao),e(jg,Vao),e(te,Xao),e(te,Dg),e(Dg,Xre),e(Xre,zao),e(Dg,Qao),e(Dg,fB),e(fB,Wao),e(Dg,Hao),e(te,Uao),e(te,Gg),e(Gg,zre),e(zre,Jao),e(Gg,Yao),e(Gg,mB),e(mB,Kao),e(Gg,Zao),e(te,eno),e(te,Og),e(Og,Qre),e(Qre,ono),e(Og,rno),e(Og,gB),e(gB,tno),e(Og,ano),e(te,nno),e(te,Vg),e(Vg,Wre),e(Wre,sno),e(Vg,lno),e(Vg,hB),e(hB,ino),e(Vg,dno),e(te,cno),e(te,Xg),e(Xg,Hre),e(Hre,fno),e(Xg,mno),e(Xg,pB),e(pB,gno),e(Xg,hno),e(te,pno),e(te,zg),e(zg,Ure),e(Ure,uno),e(zg,_no),e(zg,uB),e(uB,bno),e(zg,vno),e(te,Fno),e(te,Qg),e(Qg,Jre),e(Jre,Tno),e(Qg,Mno),e(Qg,_B),e(_B,Eno),e(Qg,Cno),e(te,wno),e(te,Wg),e(Wg,Yre),e(Yre,Ano),e(Wg,yno),e(Wg,bB),e(bB,Lno),e(Wg,xno),e(te,$no),e(te,Hg),e(Hg,Kre),e(Kre,kno),e(Hg,Sno),e(Hg,vB),e(vB,Rno),e(Hg,Bno),e(te,Pno),e(te,Ug),e(Ug,Zre),e(Zre,Ino),e(Ug,qno),e(Ug,FB),e(FB,Nno),e(Ug,jno),e(te,Dno),e(te,Jg),e(Jg,ete),e(ete,Gno),e(Jg,Ono),e(Jg,TB),e(TB,Vno),e(Jg,Xno),e(te,zno),e(te,Yg),e(Yg,ote),e(ote,Qno),e(Yg,Wno),e(Yg,MB),e(MB,Hno),e(Yg,Uno),e(te,Jno),e(te,Kg),e(Kg,rte),e(rte,Yno),e(Kg,Kno),e(Kg,EB),e(EB,Zno),e(Kg,eso),e(te,oso),e(te,Zg),e(Zg,tte),e(tte,rso),e(Zg,tso),e(Zg,CB),e(CB,aso),e(Zg,nso),e(te,sso),e(te,eh),e(eh,ate),e(ate,lso),e(eh,iso),e(eh,wB),e(wB,dso),e(eh,cso),e(te,fso),e(te,oh),e(oh,nte),e(nte,mso),e(oh,gso),e(oh,AB),e(AB,hso),e(oh,pso),e(te,uso),e(te,rh),e(rh,ste),e(ste,_so),e(rh,bso),e(rh,yB),e(yB,vso),e(rh,Fso),e(te,Tso),e(te,th),e(th,lte),e(lte,Mso),e(th,Eso),e(th,LB),e(LB,Cso),e(th,wso),e(te,Aso),e(te,ah),e(ah,ite),e(ite,yso),e(ah,Lso),e(ah,xB),e(xB,xso),e(ah,$so),e(te,kso),e(te,nh),e(nh,dte),e(dte,Sso),e(nh,Rso),e(nh,$B),e($B,Bso),e(nh,Pso),e(te,Iso),e(te,sh),e(sh,cte),e(cte,qso),e(sh,Nso),e(sh,kB),e(kB,jso),e(sh,Dso),e(te,Gso),e(te,lh),e(lh,fte),e(fte,Oso),e(lh,Vso),e(lh,SB),e(SB,Xso),e(lh,zso),e(te,Qso),e(te,ih),e(ih,mte),e(mte,Wso),e(ih,Hso),e(ih,RB),e(RB,Uso),e(ih,Jso),e(Xe,Yso),M(dh,Xe,null),e(Xe,Kso),M(ch,Xe,null),e(Co,Zso),e(Co,fh),M(IA,fh,null),e(fh,elo),e(fh,gte),e(gte,olo),b(f,eBe,_),b(f,gi,_),e(gi,mh),e(mh,hte),M(qA,hte,null),e(gi,rlo),e(gi,pte),e(pte,tlo),b(f,oBe,_),b(f,wo,_),M(NA,wo,null),e(wo,alo),e(wo,jA),e(jA,nlo),e(jA,BB),e(BB,slo),e(jA,llo),e(wo,ilo),e(wo,DA),e(DA,dlo),e(DA,ute),e(ute,clo),e(DA,flo),e(wo,mlo),e(wo,ze),M(GA,ze,null),e(ze,glo),e(ze,_te),e(_te,hlo),e(ze,plo),e(ze,hi),e(hi,ulo),e(hi,bte),e(bte,_lo),e(hi,blo),e(hi,vte),e(vte,vlo),e(hi,Flo),e(ze,Tlo),e(ze,be),e(be,gh),e(gh,Fte),e(Fte,Mlo),e(gh,Elo),e(gh,PB),e(PB,Clo),e(gh,wlo),e(be,Alo),e(be,hh),e(hh,Tte),e(Tte,ylo),e(hh,Llo),e(hh,IB),e(IB,xlo),e(hh,$lo),e(be,klo),e(be,ph),e(ph,Mte),e(Mte,Slo),e(ph,Rlo),e(ph,qB),e(qB,Blo),e(ph,Plo),e(be,Ilo),e(be,uh),e(uh,Ete),e(Ete,qlo),e(uh,Nlo),e(uh,NB),e(NB,jlo),e(uh,Dlo),e(be,Glo),e(be,_h),e(_h,Cte),e(Cte,Olo),e(_h,Vlo),e(_h,jB),e(jB,Xlo),e(_h,zlo),e(be,Qlo),e(be,bh),e(bh,wte),e(wte,Wlo),e(bh,Hlo),e(bh,DB),e(DB,Ulo),e(bh,Jlo),e(be,Ylo),e(be,vh),e(vh,Ate),e(Ate,Klo),e(vh,Zlo),e(vh,GB),e(GB,eio),e(vh,oio),e(be,rio),e(be,Fh),e(Fh,yte),e(yte,tio),e(Fh,aio),e(Fh,OB),e(OB,nio),e(Fh,sio),e(be,lio),e(be,Th),e(Th,Lte),e(Lte,iio),e(Th,dio),e(Th,VB),e(VB,cio),e(Th,fio),e(be,mio),e(be,Mh),e(Mh,xte),e(xte,gio),e(Mh,hio),e(Mh,XB),e(XB,pio),e(Mh,uio),e(be,_io),e(be,Eh),e(Eh,$te),e($te,bio),e(Eh,vio),e(Eh,zB),e(zB,Fio),e(Eh,Tio),e(be,Mio),e(be,Ch),e(Ch,kte),e(kte,Eio),e(Ch,Cio),e(Ch,QB),e(QB,wio),e(Ch,Aio),e(be,yio),e(be,wh),e(wh,Ste),e(Ste,Lio),e(wh,xio),e(wh,WB),e(WB,$io),e(wh,kio),e(be,Sio),e(be,Ah),e(Ah,Rte),e(Rte,Rio),e(Ah,Bio),e(Ah,HB),e(HB,Pio),e(Ah,Iio),e(ze,qio),M(yh,ze,null),e(ze,Nio),M(Lh,ze,null),e(wo,jio),e(wo,xh),M(OA,xh,null),e(xh,Dio),e(xh,Bte),e(Bte,Gio),b(f,rBe,_),b(f,pi,_),e(pi,$h),e($h,Pte),M(VA,Pte,null),e(pi,Oio),e(pi,Ite),e(Ite,Vio),b(f,tBe,_),b(f,Ao,_),M(XA,Ao,null),e(Ao,Xio),e(Ao,ui),e(ui,zio),e(ui,UB),e(UB,Qio),e(ui,Wio),e(ui,JB),e(JB,Hio),e(ui,Uio),e(Ao,Jio),e(Ao,zA),e(zA,Yio),e(zA,qte),e(qte,Kio),e(zA,Zio),e(Ao,edo),e(Ao,Kr),M(QA,Kr,null),e(Kr,odo),e(Kr,Nte),e(Nte,rdo),e(Kr,tdo),e(Kr,_i),e(_i,ado),e(_i,jte),e(jte,ndo),e(_i,sdo),e(_i,YB),e(YB,ldo),e(_i,ido),e(Kr,ddo),M(kh,Kr,null),e(Ao,cdo),e(Ao,Qe),M(WA,Qe,null),e(Qe,fdo),e(Qe,Dte),e(Dte,mdo),e(Qe,gdo),e(Qe,Ma),e(Ma,hdo),e(Ma,Gte),e(Gte,pdo),e(Ma,udo),e(Ma,Ote),e(Ote,_do),e(Ma,bdo),e(Ma,Vte),e(Vte,vdo),e(Ma,Fdo),e(Qe,Tdo),e(Qe,x),e(x,Sh),e(Sh,Xte),e(Xte,Mdo),e(Sh,Edo),e(Sh,KB),e(KB,Cdo),e(Sh,wdo),e(x,Ado),e(x,Rh),e(Rh,zte),e(zte,ydo),e(Rh,Ldo),e(Rh,ZB),e(ZB,xdo),e(Rh,$do),e(x,kdo),e(x,Bh),e(Bh,Qte),e(Qte,Sdo),e(Bh,Rdo),e(Bh,eP),e(eP,Bdo),e(Bh,Pdo),e(x,Ido),e(x,Ph),e(Ph,Wte),e(Wte,qdo),e(Ph,Ndo),e(Ph,oP),e(oP,jdo),e(Ph,Ddo),e(x,Gdo),e(x,Ih),e(Ih,Hte),e(Hte,Odo),e(Ih,Vdo),e(Ih,rP),e(rP,Xdo),e(Ih,zdo),e(x,Qdo),e(x,qh),e(qh,Ute),e(Ute,Wdo),e(qh,Hdo),e(qh,tP),e(tP,Udo),e(qh,Jdo),e(x,Ydo),e(x,Nh),e(Nh,Jte),e(Jte,Kdo),e(Nh,Zdo),e(Nh,aP),e(aP,eco),e(Nh,oco),e(x,rco),e(x,jh),e(jh,Yte),e(Yte,tco),e(jh,aco),e(jh,nP),e(nP,nco),e(jh,sco),e(x,lco),e(x,Dh),e(Dh,Kte),e(Kte,ico),e(Dh,dco),e(Dh,sP),e(sP,cco),e(Dh,fco),e(x,mco),e(x,Gh),e(Gh,Zte),e(Zte,gco),e(Gh,hco),e(Gh,lP),e(lP,pco),e(Gh,uco),e(x,_co),e(x,Oh),e(Oh,eae),e(eae,bco),e(Oh,vco),e(Oh,iP),e(iP,Fco),e(Oh,Tco),e(x,Mco),e(x,Vh),e(Vh,oae),e(oae,Eco),e(Vh,Cco),e(Vh,dP),e(dP,wco),e(Vh,Aco),e(x,yco),e(x,Xh),e(Xh,rae),e(rae,Lco),e(Xh,xco),e(Xh,cP),e(cP,$co),e(Xh,kco),e(x,Sco),e(x,zh),e(zh,tae),e(tae,Rco),e(zh,Bco),e(zh,fP),e(fP,Pco),e(zh,Ico),e(x,qco),e(x,Qh),e(Qh,aae),e(aae,Nco),e(Qh,jco),e(Qh,mP),e(mP,Dco),e(Qh,Gco),e(x,Oco),e(x,Wh),e(Wh,nae),e(nae,Vco),e(Wh,Xco),e(Wh,gP),e(gP,zco),e(Wh,Qco),e(x,Wco),e(x,Hh),e(Hh,sae),e(sae,Hco),e(Hh,Uco),e(Hh,hP),e(hP,Jco),e(Hh,Yco),e(x,Kco),e(x,Uh),e(Uh,lae),e(lae,Zco),e(Uh,efo),e(Uh,pP),e(pP,ofo),e(Uh,rfo),e(x,tfo),e(x,Jh),e(Jh,iae),e(iae,afo),e(Jh,nfo),e(Jh,uP),e(uP,sfo),e(Jh,lfo),e(x,ifo),e(x,Yh),e(Yh,dae),e(dae,dfo),e(Yh,cfo),e(Yh,_P),e(_P,ffo),e(Yh,mfo),e(x,gfo),e(x,Kh),e(Kh,cae),e(cae,hfo),e(Kh,pfo),e(Kh,bP),e(bP,ufo),e(Kh,_fo),e(x,bfo),e(x,Zh),e(Zh,fae),e(fae,vfo),e(Zh,Ffo),e(Zh,vP),e(vP,Tfo),e(Zh,Mfo),e(x,Efo),e(x,ep),e(ep,mae),e(mae,Cfo),e(ep,wfo),e(ep,FP),e(FP,Afo),e(ep,yfo),e(x,Lfo),e(x,op),e(op,gae),e(gae,xfo),e(op,$fo),e(op,TP),e(TP,kfo),e(op,Sfo),e(x,Rfo),e(x,rp),e(rp,hae),e(hae,Bfo),e(rp,Pfo),e(rp,MP),e(MP,Ifo),e(rp,qfo),e(x,Nfo),e(x,tp),e(tp,pae),e(pae,jfo),e(tp,Dfo),e(tp,EP),e(EP,Gfo),e(tp,Ofo),e(x,Vfo),e(x,ap),e(ap,uae),e(uae,Xfo),e(ap,zfo),e(ap,CP),e(CP,Qfo),e(ap,Wfo),e(x,Hfo),e(x,np),e(np,_ae),e(_ae,Ufo),e(np,Jfo),e(np,wP),e(wP,Yfo),e(np,Kfo),e(x,Zfo),e(x,sp),e(sp,bae),e(bae,emo),e(sp,omo),e(sp,AP),e(AP,rmo),e(sp,tmo),e(x,amo),e(x,lp),e(lp,vae),e(vae,nmo),e(lp,smo),e(lp,yP),e(yP,lmo),e(lp,imo),e(x,dmo),e(x,ys),e(ys,Fae),e(Fae,cmo),e(ys,fmo),e(ys,LP),e(LP,mmo),e(ys,gmo),e(ys,xP),e(xP,hmo),e(ys,pmo),e(x,umo),e(x,ip),e(ip,Tae),e(Tae,_mo),e(ip,bmo),e(ip,$P),e($P,vmo),e(ip,Fmo),e(x,Tmo),e(x,dp),e(dp,Mae),e(Mae,Mmo),e(dp,Emo),e(dp,kP),e(kP,Cmo),e(dp,wmo),e(x,Amo),e(x,cp),e(cp,Eae),e(Eae,ymo),e(cp,Lmo),e(cp,SP),e(SP,xmo),e(cp,$mo),e(x,kmo),e(x,fp),e(fp,Cae),e(Cae,Smo),e(fp,Rmo),e(fp,RP),e(RP,Bmo),e(fp,Pmo),e(x,Imo),e(x,mp),e(mp,wae),e(wae,qmo),e(mp,Nmo),e(mp,BP),e(BP,jmo),e(mp,Dmo),e(x,Gmo),e(x,gp),e(gp,Aae),e(Aae,Omo),e(gp,Vmo),e(gp,PP),e(PP,Xmo),e(gp,zmo),e(x,Qmo),e(x,hp),e(hp,yae),e(yae,Wmo),e(hp,Hmo),e(hp,IP),e(IP,Umo),e(hp,Jmo),e(x,Ymo),e(x,pp),e(pp,Lae),e(Lae,Kmo),e(pp,Zmo),e(pp,qP),e(qP,ego),e(pp,ogo),e(x,rgo),e(x,up),e(up,xae),e(xae,tgo),e(up,ago),e(up,NP),e(NP,ngo),e(up,sgo),e(x,lgo),e(x,_p),e(_p,$ae),e($ae,igo),e(_p,dgo),e(_p,jP),e(jP,cgo),e(_p,fgo),e(x,mgo),e(x,bp),e(bp,kae),e(kae,ggo),e(bp,hgo),e(bp,DP),e(DP,pgo),e(bp,ugo),e(x,_go),e(x,vp),e(vp,Sae),e(Sae,bgo),e(vp,vgo),e(vp,GP),e(GP,Fgo),e(vp,Tgo),e(x,Mgo),e(x,Fp),e(Fp,Rae),e(Rae,Ego),e(Fp,Cgo),e(Fp,OP),e(OP,wgo),e(Fp,Ago),e(x,ygo),e(x,Tp),e(Tp,Bae),e(Bae,Lgo),e(Tp,xgo),e(Tp,VP),e(VP,$go),e(Tp,kgo),e(x,Sgo),e(x,Mp),e(Mp,Pae),e(Pae,Rgo),e(Mp,Bgo),e(Mp,XP),e(XP,Pgo),e(Mp,Igo),e(x,qgo),e(x,Ep),e(Ep,Iae),e(Iae,Ngo),e(Ep,jgo),e(Ep,zP),e(zP,Dgo),e(Ep,Ggo),e(x,Ogo),e(x,Cp),e(Cp,qae),e(qae,Vgo),e(Cp,Xgo),e(Cp,QP),e(QP,zgo),e(Cp,Qgo),e(x,Wgo),e(x,wp),e(wp,Nae),e(Nae,Hgo),e(wp,Ugo),e(wp,WP),e(WP,Jgo),e(wp,Ygo),e(x,Kgo),e(x,Ap),e(Ap,jae),e(jae,Zgo),e(Ap,eho),e(Ap,HP),e(HP,oho),e(Ap,rho),e(x,tho),e(x,yp),e(yp,Dae),e(Dae,aho),e(yp,nho),e(yp,UP),e(UP,sho),e(yp,lho),e(x,iho),e(x,Lp),e(Lp,Gae),e(Gae,dho),e(Lp,cho),e(Lp,JP),e(JP,fho),e(Lp,mho),e(x,gho),e(x,xp),e(xp,Oae),e(Oae,hho),e(xp,pho),e(xp,YP),e(YP,uho),e(xp,_ho),e(x,bho),e(x,$p),e($p,Vae),e(Vae,vho),e($p,Fho),e($p,KP),e(KP,Tho),e($p,Mho),e(x,Eho),e(x,kp),e(kp,Xae),e(Xae,Cho),e(kp,who),e(kp,ZP),e(ZP,Aho),e(kp,yho),e(x,Lho),e(x,Sp),e(Sp,zae),e(zae,xho),e(Sp,$ho),e(Sp,eI),e(eI,kho),e(Sp,Sho),e(x,Rho),e(x,Rp),e(Rp,Qae),e(Qae,Bho),e(Rp,Pho),e(Rp,oI),e(oI,Iho),e(Rp,qho),e(x,Nho),e(x,Bp),e(Bp,Wae),e(Wae,jho),e(Bp,Dho),e(Bp,rI),e(rI,Gho),e(Bp,Oho),e(x,Vho),e(x,Pp),e(Pp,Hae),e(Hae,Xho),e(Pp,zho),e(Pp,tI),e(tI,Qho),e(Pp,Who),e(x,Hho),e(x,Ip),e(Ip,Uae),e(Uae,Uho),e(Ip,Jho),e(Ip,aI),e(aI,Yho),e(Ip,Kho),e(x,Zho),e(x,qp),e(qp,Jae),e(Jae,epo),e(qp,opo),e(qp,nI),e(nI,rpo),e(qp,tpo),e(x,apo),e(x,Np),e(Np,Yae),e(Yae,npo),e(Np,spo),e(Np,sI),e(sI,lpo),e(Np,ipo),e(x,dpo),e(x,jp),e(jp,Kae),e(Kae,cpo),e(jp,fpo),e(jp,lI),e(lI,mpo),e(jp,gpo),e(x,hpo),e(x,Dp),e(Dp,Zae),e(Zae,ppo),e(Dp,upo),e(Dp,iI),e(iI,_po),e(Dp,bpo),e(x,vpo),e(x,Gp),e(Gp,ene),e(ene,Fpo),e(Gp,Tpo),e(Gp,dI),e(dI,Mpo),e(Gp,Epo),e(x,Cpo),e(x,Op),e(Op,one),e(one,wpo),e(Op,Apo),e(Op,cI),e(cI,ypo),e(Op,Lpo),e(x,xpo),e(x,Vp),e(Vp,rne),e(rne,$po),e(Vp,kpo),e(Vp,fI),e(fI,Spo),e(Vp,Rpo),e(x,Bpo),e(x,Xp),e(Xp,tne),e(tne,Ppo),e(Xp,Ipo),e(Xp,mI),e(mI,qpo),e(Xp,Npo),e(x,jpo),e(x,zp),e(zp,ane),e(ane,Dpo),e(zp,Gpo),e(zp,gI),e(gI,Opo),e(zp,Vpo),e(x,Xpo),e(x,Qp),e(Qp,nne),e(nne,zpo),e(Qp,Qpo),e(Qp,hI),e(hI,Wpo),e(Qp,Hpo),e(x,Upo),e(x,Wp),e(Wp,sne),e(sne,Jpo),e(Wp,Ypo),e(Wp,pI),e(pI,Kpo),e(Wp,Zpo),e(x,euo),e(x,Hp),e(Hp,lne),e(lne,ouo),e(Hp,ruo),e(Hp,uI),e(uI,tuo),e(Hp,auo),e(x,nuo),e(x,Up),e(Up,ine),e(ine,suo),e(Up,luo),e(Up,_I),e(_I,iuo),e(Up,duo),e(x,cuo),e(x,Jp),e(Jp,dne),e(dne,fuo),e(Jp,muo),e(Jp,bI),e(bI,guo),e(Jp,huo),e(x,puo),e(x,Yp),e(Yp,cne),e(cne,uuo),e(Yp,_uo),e(Yp,vI),e(vI,buo),e(Yp,vuo),e(x,Fuo),e(x,Kp),e(Kp,fne),e(fne,Tuo),e(Kp,Muo),e(Kp,FI),e(FI,Euo),e(Kp,Cuo),e(x,wuo),e(x,Zp),e(Zp,mne),e(mne,Auo),e(Zp,yuo),e(Zp,TI),e(TI,Luo),e(Zp,xuo),e(x,$uo),e(x,eu),e(eu,gne),e(gne,kuo),e(eu,Suo),e(eu,MI),e(MI,Ruo),e(eu,Buo),e(x,Puo),e(x,ou),e(ou,hne),e(hne,Iuo),e(ou,quo),e(ou,EI),e(EI,Nuo),e(ou,juo),e(x,Duo),e(x,ru),e(ru,pne),e(pne,Guo),e(ru,Ouo),e(ru,CI),e(CI,Vuo),e(ru,Xuo),e(x,zuo),e(x,tu),e(tu,une),e(une,Quo),e(tu,Wuo),e(tu,wI),e(wI,Huo),e(tu,Uuo),e(x,Juo),e(x,au),e(au,_ne),e(_ne,Yuo),e(au,Kuo),e(au,AI),e(AI,Zuo),e(au,e_o),e(x,o_o),e(x,nu),e(nu,bne),e(bne,r_o),e(nu,t_o),e(nu,yI),e(yI,a_o),e(nu,n_o),e(x,s_o),e(x,su),e(su,vne),e(vne,l_o),e(su,i_o),e(su,LI),e(LI,d_o),e(su,c_o),e(x,f_o),e(x,lu),e(lu,Fne),e(Fne,m_o),e(lu,g_o),e(lu,xI),e(xI,h_o),e(lu,p_o),e(x,u_o),e(x,iu),e(iu,Tne),e(Tne,__o),e(iu,b_o),e(iu,$I),e($I,v_o),e(iu,F_o),e(x,T_o),e(x,du),e(du,Mne),e(Mne,M_o),e(du,E_o),e(du,kI),e(kI,C_o),e(du,w_o),e(x,A_o),e(x,cu),e(cu,Ene),e(Ene,y_o),e(cu,L_o),e(cu,SI),e(SI,x_o),e(cu,$_o),e(x,k_o),e(x,fu),e(fu,Cne),e(Cne,S_o),e(fu,R_o),e(fu,RI),e(RI,B_o),e(fu,P_o),e(x,I_o),e(x,mu),e(mu,wne),e(wne,q_o),e(mu,N_o),e(mu,BI),e(BI,j_o),e(mu,D_o),e(x,G_o),e(x,gu),e(gu,Ane),e(Ane,O_o),e(gu,V_o),e(gu,PI),e(PI,X_o),e(gu,z_o),e(x,Q_o),e(x,hu),e(hu,yne),e(yne,W_o),e(hu,H_o),e(hu,II),e(II,U_o),e(hu,J_o),e(x,Y_o),e(x,pu),e(pu,Lne),e(Lne,K_o),e(pu,Z_o),e(pu,qI),e(qI,e1o),e(pu,o1o),e(x,r1o),e(x,uu),e(uu,xne),e(xne,t1o),e(uu,a1o),e(uu,NI),e(NI,n1o),e(uu,s1o),e(x,l1o),e(x,_u),e(_u,$ne),e($ne,i1o),e(_u,d1o),e(_u,jI),e(jI,c1o),e(_u,f1o),e(Qe,m1o),e(Qe,bu),e(bu,g1o),e(bu,kne),e(kne,h1o),e(bu,p1o),e(bu,Sne),e(Sne,u1o),e(Qe,_1o),M(vu,Qe,null),b(f,aBe,_),b(f,bi,_),e(bi,Fu),e(Fu,Rne),M(HA,Rne,null),e(bi,b1o),e(bi,Bne),e(Bne,v1o),b(f,nBe,_),b(f,yo,_),M(UA,yo,null),e(yo,F1o),e(yo,vi),e(vi,T1o),e(vi,DI),e(DI,M1o),e(vi,E1o),e(vi,GI),e(GI,C1o),e(vi,w1o),e(yo,A1o),e(yo,JA),e(JA,y1o),e(JA,Pne),e(Pne,L1o),e(JA,x1o),e(yo,$1o),e(yo,Zr),M(YA,Zr,null),e(Zr,k1o),e(Zr,Ine),e(Ine,S1o),e(Zr,R1o),e(Zr,Fi),e(Fi,B1o),e(Fi,qne),e(qne,P1o),e(Fi,I1o),e(Fi,OI),e(OI,q1o),e(Fi,N1o),e(Zr,j1o),M(Tu,Zr,null),e(yo,D1o),e(yo,We),M(KA,We,null),e(We,G1o),e(We,Nne),e(Nne,O1o),e(We,V1o),e(We,Ea),e(Ea,X1o),e(Ea,jne),e(jne,z1o),e(Ea,Q1o),e(Ea,Dne),e(Dne,W1o),e(Ea,H1o),e(Ea,Gne),e(Gne,U1o),e(Ea,J1o),e(We,Y1o),e(We,G),e(G,Mu),e(Mu,One),e(One,K1o),e(Mu,Z1o),e(Mu,VI),e(VI,ebo),e(Mu,obo),e(G,rbo),e(G,Eu),e(Eu,Vne),e(Vne,tbo),e(Eu,abo),e(Eu,XI),e(XI,nbo),e(Eu,sbo),e(G,lbo),e(G,Cu),e(Cu,Xne),e(Xne,ibo),e(Cu,dbo),e(Cu,zI),e(zI,cbo),e(Cu,fbo),e(G,mbo),e(G,wu),e(wu,zne),e(zne,gbo),e(wu,hbo),e(wu,QI),e(QI,pbo),e(wu,ubo),e(G,_bo),e(G,Au),e(Au,Qne),e(Qne,bbo),e(Au,vbo),e(Au,WI),e(WI,Fbo),e(Au,Tbo),e(G,Mbo),e(G,yu),e(yu,Wne),e(Wne,Ebo),e(yu,Cbo),e(yu,HI),e(HI,wbo),e(yu,Abo),e(G,ybo),e(G,Lu),e(Lu,Hne),e(Hne,Lbo),e(Lu,xbo),e(Lu,UI),e(UI,$bo),e(Lu,kbo),e(G,Sbo),e(G,xu),e(xu,Une),e(Une,Rbo),e(xu,Bbo),e(xu,JI),e(JI,Pbo),e(xu,Ibo),e(G,qbo),e(G,$u),e($u,Jne),e(Jne,Nbo),e($u,jbo),e($u,YI),e(YI,Dbo),e($u,Gbo),e(G,Obo),e(G,ku),e(ku,Yne),e(Yne,Vbo),e(ku,Xbo),e(ku,KI),e(KI,zbo),e(ku,Qbo),e(G,Wbo),e(G,Su),e(Su,Kne),e(Kne,Hbo),e(Su,Ubo),e(Su,ZI),e(ZI,Jbo),e(Su,Ybo),e(G,Kbo),e(G,Ru),e(Ru,Zne),e(Zne,Zbo),e(Ru,e4o),e(Ru,eq),e(eq,o4o),e(Ru,r4o),e(G,t4o),e(G,Bu),e(Bu,ese),e(ese,a4o),e(Bu,n4o),e(Bu,oq),e(oq,s4o),e(Bu,l4o),e(G,i4o),e(G,Pu),e(Pu,ose),e(ose,d4o),e(Pu,c4o),e(Pu,rq),e(rq,f4o),e(Pu,m4o),e(G,g4o),e(G,Iu),e(Iu,rse),e(rse,h4o),e(Iu,p4o),e(Iu,tq),e(tq,u4o),e(Iu,_4o),e(G,b4o),e(G,qu),e(qu,tse),e(tse,v4o),e(qu,F4o),e(qu,aq),e(aq,T4o),e(qu,M4o),e(G,E4o),e(G,Nu),e(Nu,ase),e(ase,C4o),e(Nu,w4o),e(Nu,nq),e(nq,A4o),e(Nu,y4o),e(G,L4o),e(G,ju),e(ju,nse),e(nse,x4o),e(ju,$4o),e(ju,sq),e(sq,k4o),e(ju,S4o),e(G,R4o),e(G,Du),e(Du,sse),e(sse,B4o),e(Du,P4o),e(Du,lq),e(lq,I4o),e(Du,q4o),e(G,N4o),e(G,Gu),e(Gu,lse),e(lse,j4o),e(Gu,D4o),e(Gu,iq),e(iq,G4o),e(Gu,O4o),e(G,V4o),e(G,Ou),e(Ou,ise),e(ise,X4o),e(Ou,z4o),e(Ou,dq),e(dq,Q4o),e(Ou,W4o),e(G,H4o),e(G,Vu),e(Vu,dse),e(dse,U4o),e(Vu,J4o),e(Vu,cq),e(cq,Y4o),e(Vu,K4o),e(G,Z4o),e(G,Xu),e(Xu,cse),e(cse,e2o),e(Xu,o2o),e(Xu,fq),e(fq,r2o),e(Xu,t2o),e(G,a2o),e(G,zu),e(zu,fse),e(fse,n2o),e(zu,s2o),e(zu,mq),e(mq,l2o),e(zu,i2o),e(G,d2o),e(G,Qu),e(Qu,mse),e(mse,c2o),e(Qu,f2o),e(Qu,gq),e(gq,m2o),e(Qu,g2o),e(G,h2o),e(G,Wu),e(Wu,gse),e(gse,p2o),e(Wu,u2o),e(Wu,hq),e(hq,_2o),e(Wu,b2o),e(G,v2o),e(G,Hu),e(Hu,hse),e(hse,F2o),e(Hu,T2o),e(Hu,pq),e(pq,M2o),e(Hu,E2o),e(G,C2o),e(G,Uu),e(Uu,pse),e(pse,w2o),e(Uu,A2o),e(Uu,uq),e(uq,y2o),e(Uu,L2o),e(G,x2o),e(G,Ju),e(Ju,use),e(use,$2o),e(Ju,k2o),e(Ju,_q),e(_q,S2o),e(Ju,R2o),e(G,B2o),e(G,Yu),e(Yu,_se),e(_se,P2o),e(Yu,I2o),e(Yu,bq),e(bq,q2o),e(Yu,N2o),e(G,j2o),e(G,Ku),e(Ku,bse),e(bse,D2o),e(Ku,G2o),e(Ku,vq),e(vq,O2o),e(Ku,V2o),e(G,X2o),e(G,Zu),e(Zu,vse),e(vse,z2o),e(Zu,Q2o),e(Zu,Fq),e(Fq,W2o),e(Zu,H2o),e(G,U2o),e(G,e_),e(e_,Fse),e(Fse,J2o),e(e_,Y2o),e(e_,Tq),e(Tq,K2o),e(e_,Z2o),e(G,e5o),e(G,o_),e(o_,Tse),e(Tse,o5o),e(o_,r5o),e(o_,Mq),e(Mq,t5o),e(o_,a5o),e(G,n5o),e(G,r_),e(r_,Mse),e(Mse,s5o),e(r_,l5o),e(r_,Eq),e(Eq,i5o),e(r_,d5o),e(G,c5o),e(G,t_),e(t_,Ese),e(Ese,f5o),e(t_,m5o),e(t_,Cq),e(Cq,g5o),e(t_,h5o),e(G,p5o),e(G,a_),e(a_,Cse),e(Cse,u5o),e(a_,_5o),e(a_,wq),e(wq,b5o),e(a_,v5o),e(G,F5o),e(G,n_),e(n_,wse),e(wse,T5o),e(n_,M5o),e(n_,Aq),e(Aq,E5o),e(n_,C5o),e(G,w5o),e(G,s_),e(s_,Ase),e(Ase,A5o),e(s_,y5o),e(s_,yq),e(yq,L5o),e(s_,x5o),e(We,$5o),e(We,l_),e(l_,k5o),e(l_,yse),e(yse,S5o),e(l_,R5o),e(l_,Lse),e(Lse,B5o),e(We,P5o),M(i_,We,null),b(f,sBe,_),b(f,Ti,_),e(Ti,d_),e(d_,xse),M(ZA,xse,null),e(Ti,I5o),e(Ti,$se),e($se,q5o),b(f,lBe,_),b(f,Lo,_),M(e6,Lo,null),e(Lo,N5o),e(Lo,Mi),e(Mi,j5o),e(Mi,Lq),e(Lq,D5o),e(Mi,G5o),e(Mi,xq),e(xq,O5o),e(Mi,V5o),e(Lo,X5o),e(Lo,o6),e(o6,z5o),e(o6,kse),e(kse,Q5o),e(o6,W5o),e(Lo,H5o),e(Lo,et),M(r6,et,null),e(et,U5o),e(et,Sse),e(Sse,J5o),e(et,Y5o),e(et,Ei),e(Ei,K5o),e(Ei,Rse),e(Rse,Z5o),e(Ei,evo),e(Ei,$q),e($q,ovo),e(Ei,rvo),e(et,tvo),M(c_,et,null),e(Lo,avo),e(Lo,He),M(t6,He,null),e(He,nvo),e(He,Bse),e(Bse,svo),e(He,lvo),e(He,Ca),e(Ca,ivo),e(Ca,Pse),e(Pse,dvo),e(Ca,cvo),e(Ca,Ise),e(Ise,fvo),e(Ca,mvo),e(Ca,qse),e(qse,gvo),e(Ca,hvo),e(He,pvo),e(He,z),e(z,f_),e(f_,Nse),e(Nse,uvo),e(f_,_vo),e(f_,kq),e(kq,bvo),e(f_,vvo),e(z,Fvo),e(z,m_),e(m_,jse),e(jse,Tvo),e(m_,Mvo),e(m_,Sq),e(Sq,Evo),e(m_,Cvo),e(z,wvo),e(z,g_),e(g_,Dse),e(Dse,Avo),e(g_,yvo),e(g_,Rq),e(Rq,Lvo),e(g_,xvo),e(z,$vo),e(z,h_),e(h_,Gse),e(Gse,kvo),e(h_,Svo),e(h_,Bq),e(Bq,Rvo),e(h_,Bvo),e(z,Pvo),e(z,p_),e(p_,Ose),e(Ose,Ivo),e(p_,qvo),e(p_,Pq),e(Pq,Nvo),e(p_,jvo),e(z,Dvo),e(z,u_),e(u_,Vse),e(Vse,Gvo),e(u_,Ovo),e(u_,Iq),e(Iq,Vvo),e(u_,Xvo),e(z,zvo),e(z,__),e(__,Xse),e(Xse,Qvo),e(__,Wvo),e(__,qq),e(qq,Hvo),e(__,Uvo),e(z,Jvo),e(z,b_),e(b_,zse),e(zse,Yvo),e(b_,Kvo),e(b_,Nq),e(Nq,Zvo),e(b_,eFo),e(z,oFo),e(z,v_),e(v_,Qse),e(Qse,rFo),e(v_,tFo),e(v_,jq),e(jq,aFo),e(v_,nFo),e(z,sFo),e(z,F_),e(F_,Wse),e(Wse,lFo),e(F_,iFo),e(F_,Dq),e(Dq,dFo),e(F_,cFo),e(z,fFo),e(z,T_),e(T_,Hse),e(Hse,mFo),e(T_,gFo),e(T_,Gq),e(Gq,hFo),e(T_,pFo),e(z,uFo),e(z,M_),e(M_,Use),e(Use,_Fo),e(M_,bFo),e(M_,Oq),e(Oq,vFo),e(M_,FFo),e(z,TFo),e(z,E_),e(E_,Jse),e(Jse,MFo),e(E_,EFo),e(E_,Vq),e(Vq,CFo),e(E_,wFo),e(z,AFo),e(z,C_),e(C_,Yse),e(Yse,yFo),e(C_,LFo),e(C_,Xq),e(Xq,xFo),e(C_,$Fo),e(z,kFo),e(z,w_),e(w_,Kse),e(Kse,SFo),e(w_,RFo),e(w_,zq),e(zq,BFo),e(w_,PFo),e(z,IFo),e(z,A_),e(A_,Zse),e(Zse,qFo),e(A_,NFo),e(A_,Qq),e(Qq,jFo),e(A_,DFo),e(z,GFo),e(z,y_),e(y_,ele),e(ele,OFo),e(y_,VFo),e(y_,Wq),e(Wq,XFo),e(y_,zFo),e(z,QFo),e(z,L_),e(L_,ole),e(ole,WFo),e(L_,HFo),e(L_,Hq),e(Hq,UFo),e(L_,JFo),e(z,YFo),e(z,x_),e(x_,rle),e(rle,KFo),e(x_,ZFo),e(x_,Uq),e(Uq,e0o),e(x_,o0o),e(z,r0o),e(z,$_),e($_,tle),e(tle,t0o),e($_,a0o),e($_,Jq),e(Jq,n0o),e($_,s0o),e(z,l0o),e(z,k_),e(k_,ale),e(ale,i0o),e(k_,d0o),e(k_,Yq),e(Yq,c0o),e(k_,f0o),e(z,m0o),e(z,S_),e(S_,nle),e(nle,g0o),e(S_,h0o),e(S_,Kq),e(Kq,p0o),e(S_,u0o),e(z,_0o),e(z,R_),e(R_,sle),e(sle,b0o),e(R_,v0o),e(R_,Zq),e(Zq,F0o),e(R_,T0o),e(z,M0o),e(z,B_),e(B_,lle),e(lle,E0o),e(B_,C0o),e(B_,eN),e(eN,w0o),e(B_,A0o),e(z,y0o),e(z,P_),e(P_,ile),e(ile,L0o),e(P_,x0o),e(P_,oN),e(oN,$0o),e(P_,k0o),e(z,S0o),e(z,I_),e(I_,dle),e(dle,R0o),e(I_,B0o),e(I_,rN),e(rN,P0o),e(I_,I0o),e(z,q0o),e(z,q_),e(q_,cle),e(cle,N0o),e(q_,j0o),e(q_,tN),e(tN,D0o),e(q_,G0o),e(z,O0o),e(z,N_),e(N_,fle),e(fle,V0o),e(N_,X0o),e(N_,aN),e(aN,z0o),e(N_,Q0o),e(z,W0o),e(z,j_),e(j_,mle),e(mle,H0o),e(j_,U0o),e(j_,nN),e(nN,J0o),e(j_,Y0o),e(z,K0o),e(z,D_),e(D_,gle),e(gle,Z0o),e(D_,eTo),e(D_,sN),e(sN,oTo),e(D_,rTo),e(z,tTo),e(z,G_),e(G_,hle),e(hle,aTo),e(G_,nTo),e(G_,lN),e(lN,sTo),e(G_,lTo),e(z,iTo),e(z,O_),e(O_,ple),e(ple,dTo),e(O_,cTo),e(O_,iN),e(iN,fTo),e(O_,mTo),e(z,gTo),e(z,V_),e(V_,ule),e(ule,hTo),e(V_,pTo),e(V_,dN),e(dN,uTo),e(V_,_To),e(z,bTo),e(z,X_),e(X_,_le),e(_le,vTo),e(X_,FTo),e(X_,cN),e(cN,TTo),e(X_,MTo),e(z,ETo),e(z,z_),e(z_,ble),e(ble,CTo),e(z_,wTo),e(z_,fN),e(fN,ATo),e(z_,yTo),e(He,LTo),e(He,Q_),e(Q_,xTo),e(Q_,vle),e(vle,$To),e(Q_,kTo),e(Q_,Fle),e(Fle,STo),e(He,RTo),M(W_,He,null),b(f,iBe,_),b(f,Ci,_),e(Ci,H_),e(H_,Tle),M(a6,Tle,null),e(Ci,BTo),e(Ci,Mle),e(Mle,PTo),b(f,dBe,_),b(f,xo,_),M(n6,xo,null),e(xo,ITo),e(xo,wi),e(wi,qTo),e(wi,mN),e(mN,NTo),e(wi,jTo),e(wi,gN),e(gN,DTo),e(wi,GTo),e(xo,OTo),e(xo,s6),e(s6,VTo),e(s6,Ele),e(Ele,XTo),e(s6,zTo),e(xo,QTo),e(xo,ot),M(l6,ot,null),e(ot,WTo),e(ot,Cle),e(Cle,HTo),e(ot,UTo),e(ot,Ai),e(Ai,JTo),e(Ai,wle),e(wle,YTo),e(Ai,KTo),e(Ai,hN),e(hN,ZTo),e(Ai,e7o),e(ot,o7o),M(U_,ot,null),e(xo,r7o),e(xo,Ue),M(i6,Ue,null),e(Ue,t7o),e(Ue,Ale),e(Ale,a7o),e(Ue,n7o),e(Ue,wa),e(wa,s7o),e(wa,yle),e(yle,l7o),e(wa,i7o),e(wa,Lle),e(Lle,d7o),e(wa,c7o),e(wa,xle),e(xle,f7o),e(wa,m7o),e(Ue,g7o),e(Ue,Q),e(Q,J_),e(J_,$le),e($le,h7o),e(J_,p7o),e(J_,pN),e(pN,u7o),e(J_,_7o),e(Q,b7o),e(Q,Y_),e(Y_,kle),e(kle,v7o),e(Y_,F7o),e(Y_,uN),e(uN,T7o),e(Y_,M7o),e(Q,E7o),e(Q,K_),e(K_,Sle),e(Sle,C7o),e(K_,w7o),e(K_,_N),e(_N,A7o),e(K_,y7o),e(Q,L7o),e(Q,Z_),e(Z_,Rle),e(Rle,x7o),e(Z_,$7o),e(Z_,bN),e(bN,k7o),e(Z_,S7o),e(Q,R7o),e(Q,e1),e(e1,Ble),e(Ble,B7o),e(e1,P7o),e(e1,vN),e(vN,I7o),e(e1,q7o),e(Q,N7o),e(Q,o1),e(o1,Ple),e(Ple,j7o),e(o1,D7o),e(o1,FN),e(FN,G7o),e(o1,O7o),e(Q,V7o),e(Q,r1),e(r1,Ile),e(Ile,X7o),e(r1,z7o),e(r1,TN),e(TN,Q7o),e(r1,W7o),e(Q,H7o),e(Q,t1),e(t1,qle),e(qle,U7o),e(t1,J7o),e(t1,MN),e(MN,Y7o),e(t1,K7o),e(Q,Z7o),e(Q,a1),e(a1,Nle),e(Nle,eMo),e(a1,oMo),e(a1,EN),e(EN,rMo),e(a1,tMo),e(Q,aMo),e(Q,n1),e(n1,jle),e(jle,nMo),e(n1,sMo),e(n1,CN),e(CN,lMo),e(n1,iMo),e(Q,dMo),e(Q,s1),e(s1,Dle),e(Dle,cMo),e(s1,fMo),e(s1,wN),e(wN,mMo),e(s1,gMo),e(Q,hMo),e(Q,l1),e(l1,Gle),e(Gle,pMo),e(l1,uMo),e(l1,AN),e(AN,_Mo),e(l1,bMo),e(Q,vMo),e(Q,i1),e(i1,Ole),e(Ole,FMo),e(i1,TMo),e(i1,yN),e(yN,MMo),e(i1,EMo),e(Q,CMo),e(Q,d1),e(d1,Vle),e(Vle,wMo),e(d1,AMo),e(d1,LN),e(LN,yMo),e(d1,LMo),e(Q,xMo),e(Q,c1),e(c1,Xle),e(Xle,$Mo),e(c1,kMo),e(c1,xN),e(xN,SMo),e(c1,RMo),e(Q,BMo),e(Q,f1),e(f1,zle),e(zle,PMo),e(f1,IMo),e(f1,$N),e($N,qMo),e(f1,NMo),e(Q,jMo),e(Q,m1),e(m1,Qle),e(Qle,DMo),e(m1,GMo),e(m1,kN),e(kN,OMo),e(m1,VMo),e(Q,XMo),e(Q,g1),e(g1,Wle),e(Wle,zMo),e(g1,QMo),e(g1,SN),e(SN,WMo),e(g1,HMo),e(Q,UMo),e(Q,h1),e(h1,Hle),e(Hle,JMo),e(h1,YMo),e(h1,RN),e(RN,KMo),e(h1,ZMo),e(Q,eEo),e(Q,p1),e(p1,Ule),e(Ule,oEo),e(p1,rEo),e(p1,BN),e(BN,tEo),e(p1,aEo),e(Q,nEo),e(Q,u1),e(u1,Jle),e(Jle,sEo),e(u1,lEo),e(u1,PN),e(PN,iEo),e(u1,dEo),e(Q,cEo),e(Q,_1),e(_1,Yle),e(Yle,fEo),e(_1,mEo),e(_1,IN),e(IN,gEo),e(_1,hEo),e(Q,pEo),e(Q,b1),e(b1,Kle),e(Kle,uEo),e(b1,_Eo),e(b1,qN),e(qN,bEo),e(b1,vEo),e(Q,FEo),e(Q,v1),e(v1,Zle),e(Zle,TEo),e(v1,MEo),e(v1,NN),e(NN,EEo),e(v1,CEo),e(Q,wEo),e(Q,F1),e(F1,eie),e(eie,AEo),e(F1,yEo),e(F1,jN),e(jN,LEo),e(F1,xEo),e(Q,$Eo),e(Q,T1),e(T1,oie),e(oie,kEo),e(T1,SEo),e(T1,DN),e(DN,REo),e(T1,BEo),e(Q,PEo),e(Q,M1),e(M1,rie),e(rie,IEo),e(M1,qEo),e(M1,GN),e(GN,NEo),e(M1,jEo),e(Q,DEo),e(Q,E1),e(E1,tie),e(tie,GEo),e(E1,OEo),e(E1,ON),e(ON,VEo),e(E1,XEo),e(Q,zEo),e(Q,C1),e(C1,aie),e(aie,QEo),e(C1,WEo),e(C1,VN),e(VN,HEo),e(C1,UEo),e(Q,JEo),e(Q,w1),e(w1,nie),e(nie,YEo),e(w1,KEo),e(w1,XN),e(XN,ZEo),e(w1,eCo),e(Q,oCo),e(Q,A1),e(A1,sie),e(sie,rCo),e(A1,tCo),e(A1,lie),e(lie,aCo),e(A1,nCo),e(Q,sCo),e(Q,y1),e(y1,iie),e(iie,lCo),e(y1,iCo),e(y1,zN),e(zN,dCo),e(y1,cCo),e(Q,fCo),e(Q,L1),e(L1,die),e(die,mCo),e(L1,gCo),e(L1,QN),e(QN,hCo),e(L1,pCo),e(Q,uCo),e(Q,x1),e(x1,cie),e(cie,_Co),e(x1,bCo),e(x1,WN),e(WN,vCo),e(x1,FCo),e(Q,TCo),e(Q,$1),e($1,fie),e(fie,MCo),e($1,ECo),e($1,HN),e(HN,CCo),e($1,wCo),e(Ue,ACo),e(Ue,k1),e(k1,yCo),e(k1,mie),e(mie,LCo),e(k1,xCo),e(k1,gie),e(gie,$Co),e(Ue,kCo),M(S1,Ue,null),b(f,cBe,_),b(f,yi,_),e(yi,R1),e(R1,hie),M(d6,hie,null),e(yi,SCo),e(yi,pie),e(pie,RCo),b(f,fBe,_),b(f,$o,_),M(c6,$o,null),e($o,BCo),e($o,Li),e(Li,PCo),e(Li,UN),e(UN,ICo),e(Li,qCo),e(Li,JN),e(JN,NCo),e(Li,jCo),e($o,DCo),e($o,f6),e(f6,GCo),e(f6,uie),e(uie,OCo),e(f6,VCo),e($o,XCo),e($o,rt),M(m6,rt,null),e(rt,zCo),e(rt,_ie),e(_ie,QCo),e(rt,WCo),e(rt,xi),e(xi,HCo),e(xi,bie),e(bie,UCo),e(xi,JCo),e(xi,YN),e(YN,YCo),e(xi,KCo),e(rt,ZCo),M(B1,rt,null),e($o,e3o),e($o,Je),M(g6,Je,null),e(Je,o3o),e(Je,vie),e(vie,r3o),e(Je,t3o),e(Je,Aa),e(Aa,a3o),e(Aa,Fie),e(Fie,n3o),e(Aa,s3o),e(Aa,Tie),e(Tie,l3o),e(Aa,i3o),e(Aa,Mie),e(Mie,d3o),e(Aa,c3o),e(Je,f3o),e(Je,he),e(he,P1),e(P1,Eie),e(Eie,m3o),e(P1,g3o),e(P1,KN),e(KN,h3o),e(P1,p3o),e(he,u3o),e(he,I1),e(I1,Cie),e(Cie,_3o),e(I1,b3o),e(I1,ZN),e(ZN,v3o),e(I1,F3o),e(he,T3o),e(he,q1),e(q1,wie),e(wie,M3o),e(q1,E3o),e(q1,ej),e(ej,C3o),e(q1,w3o),e(he,A3o),e(he,N1),e(N1,Aie),e(Aie,y3o),e(N1,L3o),e(N1,oj),e(oj,x3o),e(N1,$3o),e(he,k3o),e(he,j1),e(j1,yie),e(yie,S3o),e(j1,R3o),e(j1,rj),e(rj,B3o),e(j1,P3o),e(he,I3o),e(he,D1),e(D1,Lie),e(Lie,q3o),e(D1,N3o),e(D1,tj),e(tj,j3o),e(D1,D3o),e(he,G3o),e(he,G1),e(G1,xie),e(xie,O3o),e(G1,V3o),e(G1,aj),e(aj,X3o),e(G1,z3o),e(he,Q3o),e(he,O1),e(O1,$ie),e($ie,W3o),e(O1,H3o),e(O1,nj),e(nj,U3o),e(O1,J3o),e(he,Y3o),e(he,V1),e(V1,kie),e(kie,K3o),e(V1,Z3o),e(V1,sj),e(sj,ewo),e(V1,owo),e(he,rwo),e(he,X1),e(X1,Sie),e(Sie,two),e(X1,awo),e(X1,lj),e(lj,nwo),e(X1,swo),e(he,lwo),e(he,z1),e(z1,Rie),e(Rie,iwo),e(z1,dwo),e(z1,ij),e(ij,cwo),e(z1,fwo),e(he,mwo),e(he,Q1),e(Q1,Bie),e(Bie,gwo),e(Q1,hwo),e(Q1,dj),e(dj,pwo),e(Q1,uwo),e(he,_wo),e(he,W1),e(W1,Pie),e(Pie,bwo),e(W1,vwo),e(W1,cj),e(cj,Fwo),e(W1,Two),e(he,Mwo),e(he,H1),e(H1,Iie),e(Iie,Ewo),e(H1,Cwo),e(H1,fj),e(fj,wwo),e(H1,Awo),e(he,ywo),e(he,U1),e(U1,qie),e(qie,Lwo),e(U1,xwo),e(U1,mj),e(mj,$wo),e(U1,kwo),e(he,Swo),e(he,J1),e(J1,Nie),e(Nie,Rwo),e(J1,Bwo),e(J1,gj),e(gj,Pwo),e(J1,Iwo),e(he,qwo),e(he,Y1),e(Y1,jie),e(jie,Nwo),e(Y1,jwo),e(Y1,hj),e(hj,Dwo),e(Y1,Gwo),e(Je,Owo),e(Je,K1),e(K1,Vwo),e(K1,Die),e(Die,Xwo),e(K1,zwo),e(K1,Gie),e(Gie,Qwo),e(Je,Wwo),M(Z1,Je,null),b(f,mBe,_),b(f,$i,_),e($i,eb),e(eb,Oie),M(h6,Oie,null),e($i,Hwo),e($i,Vie),e(Vie,Uwo),b(f,gBe,_),b(f,ko,_),M(p6,ko,null),e(ko,Jwo),e(ko,ki),e(ki,Ywo),e(ki,pj),e(pj,Kwo),e(ki,Zwo),e(ki,uj),e(uj,eAo),e(ki,oAo),e(ko,rAo),e(ko,u6),e(u6,tAo),e(u6,Xie),e(Xie,aAo),e(u6,nAo),e(ko,sAo),e(ko,tt),M(_6,tt,null),e(tt,lAo),e(tt,zie),e(zie,iAo),e(tt,dAo),e(tt,Si),e(Si,cAo),e(Si,Qie),e(Qie,fAo),e(Si,mAo),e(Si,_j),e(_j,gAo),e(Si,hAo),e(tt,pAo),M(ob,tt,null),e(ko,uAo),e(ko,Ye),M(b6,Ye,null),e(Ye,_Ao),e(Ye,Wie),e(Wie,bAo),e(Ye,vAo),e(Ye,ya),e(ya,FAo),e(ya,Hie),e(Hie,TAo),e(ya,MAo),e(ya,Uie),e(Uie,EAo),e(ya,CAo),e(ya,Jie),e(Jie,wAo),e(ya,AAo),e(Ye,yAo),e(Ye,q),e(q,rb),e(rb,Yie),e(Yie,LAo),e(rb,xAo),e(rb,bj),e(bj,$Ao),e(rb,kAo),e(q,SAo),e(q,tb),e(tb,Kie),e(Kie,RAo),e(tb,BAo),e(tb,vj),e(vj,PAo),e(tb,IAo),e(q,qAo),e(q,ab),e(ab,Zie),e(Zie,NAo),e(ab,jAo),e(ab,Fj),e(Fj,DAo),e(ab,GAo),e(q,OAo),e(q,nb),e(nb,ede),e(ede,VAo),e(nb,XAo),e(nb,Tj),e(Tj,zAo),e(nb,QAo),e(q,WAo),e(q,sb),e(sb,ode),e(ode,HAo),e(sb,UAo),e(sb,Mj),e(Mj,JAo),e(sb,YAo),e(q,KAo),e(q,lb),e(lb,rde),e(rde,ZAo),e(lb,e6o),e(lb,Ej),e(Ej,o6o),e(lb,r6o),e(q,t6o),e(q,ib),e(ib,tde),e(tde,a6o),e(ib,n6o),e(ib,Cj),e(Cj,s6o),e(ib,l6o),e(q,i6o),e(q,db),e(db,ade),e(ade,d6o),e(db,c6o),e(db,wj),e(wj,f6o),e(db,m6o),e(q,g6o),e(q,cb),e(cb,nde),e(nde,h6o),e(cb,p6o),e(cb,Aj),e(Aj,u6o),e(cb,_6o),e(q,b6o),e(q,fb),e(fb,sde),e(sde,v6o),e(fb,F6o),e(fb,yj),e(yj,T6o),e(fb,M6o),e(q,E6o),e(q,mb),e(mb,lde),e(lde,C6o),e(mb,w6o),e(mb,Lj),e(Lj,A6o),e(mb,y6o),e(q,L6o),e(q,gb),e(gb,ide),e(ide,x6o),e(gb,$6o),e(gb,xj),e(xj,k6o),e(gb,S6o),e(q,R6o),e(q,hb),e(hb,dde),e(dde,B6o),e(hb,P6o),e(hb,$j),e($j,I6o),e(hb,q6o),e(q,N6o),e(q,pb),e(pb,cde),e(cde,j6o),e(pb,D6o),e(pb,kj),e(kj,G6o),e(pb,O6o),e(q,V6o),e(q,ub),e(ub,fde),e(fde,X6o),e(ub,z6o),e(ub,Sj),e(Sj,Q6o),e(ub,W6o),e(q,H6o),e(q,_b),e(_b,mde),e(mde,U6o),e(_b,J6o),e(_b,Rj),e(Rj,Y6o),e(_b,K6o),e(q,Z6o),e(q,bb),e(bb,gde),e(gde,eyo),e(bb,oyo),e(bb,Bj),e(Bj,ryo),e(bb,tyo),e(q,ayo),e(q,vb),e(vb,hde),e(hde,nyo),e(vb,syo),e(vb,Pj),e(Pj,lyo),e(vb,iyo),e(q,dyo),e(q,Fb),e(Fb,pde),e(pde,cyo),e(Fb,fyo),e(Fb,Ij),e(Ij,myo),e(Fb,gyo),e(q,hyo),e(q,Tb),e(Tb,ude),e(ude,pyo),e(Tb,uyo),e(Tb,qj),e(qj,_yo),e(Tb,byo),e(q,vyo),e(q,Mb),e(Mb,_de),e(_de,Fyo),e(Mb,Tyo),e(Mb,Nj),e(Nj,Myo),e(Mb,Eyo),e(q,Cyo),e(q,Eb),e(Eb,bde),e(bde,wyo),e(Eb,Ayo),e(Eb,jj),e(jj,yyo),e(Eb,Lyo),e(q,xyo),e(q,Cb),e(Cb,vde),e(vde,$yo),e(Cb,kyo),e(Cb,Dj),e(Dj,Syo),e(Cb,Ryo),e(q,Byo),e(q,wb),e(wb,Fde),e(Fde,Pyo),e(wb,Iyo),e(wb,Gj),e(Gj,qyo),e(wb,Nyo),e(q,jyo),e(q,Ab),e(Ab,Tde),e(Tde,Dyo),e(Ab,Gyo),e(Ab,Oj),e(Oj,Oyo),e(Ab,Vyo),e(q,Xyo),e(q,yb),e(yb,Mde),e(Mde,zyo),e(yb,Qyo),e(yb,Vj),e(Vj,Wyo),e(yb,Hyo),e(q,Uyo),e(q,Lb),e(Lb,Ede),e(Ede,Jyo),e(Lb,Yyo),e(Lb,Xj),e(Xj,Kyo),e(Lb,Zyo),e(q,eLo),e(q,xb),e(xb,Cde),e(Cde,oLo),e(xb,rLo),e(xb,zj),e(zj,tLo),e(xb,aLo),e(q,nLo),e(q,$b),e($b,wde),e(wde,sLo),e($b,lLo),e($b,Qj),e(Qj,iLo),e($b,dLo),e(q,cLo),e(q,kb),e(kb,Ade),e(Ade,fLo),e(kb,mLo),e(kb,Wj),e(Wj,gLo),e(kb,hLo),e(q,pLo),e(q,Sb),e(Sb,yde),e(yde,uLo),e(Sb,_Lo),e(Sb,Hj),e(Hj,bLo),e(Sb,vLo),e(q,FLo),e(q,Rb),e(Rb,Lde),e(Lde,TLo),e(Rb,MLo),e(Rb,Uj),e(Uj,ELo),e(Rb,CLo),e(q,wLo),e(q,Bb),e(Bb,xde),e(xde,ALo),e(Bb,yLo),e(Bb,Jj),e(Jj,LLo),e(Bb,xLo),e(q,$Lo),e(q,Pb),e(Pb,$de),e($de,kLo),e(Pb,SLo),e(Pb,Yj),e(Yj,RLo),e(Pb,BLo),e(q,PLo),e(q,Ib),e(Ib,kde),e(kde,ILo),e(Ib,qLo),e(Ib,Kj),e(Kj,NLo),e(Ib,jLo),e(q,DLo),e(q,qb),e(qb,Sde),e(Sde,GLo),e(qb,OLo),e(qb,Zj),e(Zj,VLo),e(qb,XLo),e(q,zLo),e(q,Nb),e(Nb,Rde),e(Rde,QLo),e(Nb,WLo),e(Nb,eD),e(eD,HLo),e(Nb,ULo),e(q,JLo),e(q,jb),e(jb,Bde),e(Bde,YLo),e(jb,KLo),e(jb,oD),e(oD,ZLo),e(jb,e8o),e(q,o8o),e(q,Db),e(Db,Pde),e(Pde,r8o),e(Db,t8o),e(Db,rD),e(rD,a8o),e(Db,n8o),e(q,s8o),e(q,Gb),e(Gb,Ide),e(Ide,l8o),e(Gb,i8o),e(Gb,tD),e(tD,d8o),e(Gb,c8o),e(q,f8o),e(q,Ob),e(Ob,qde),e(qde,m8o),e(Ob,g8o),e(Ob,aD),e(aD,h8o),e(Ob,p8o),e(q,u8o),e(q,Vb),e(Vb,Nde),e(Nde,_8o),e(Vb,b8o),e(Vb,nD),e(nD,v8o),e(Vb,F8o),e(q,T8o),e(q,Xb),e(Xb,jde),e(jde,M8o),e(Xb,E8o),e(Xb,sD),e(sD,C8o),e(Xb,w8o),e(q,A8o),e(q,zb),e(zb,Dde),e(Dde,y8o),e(zb,L8o),e(zb,lD),e(lD,x8o),e(zb,$8o),e(q,k8o),e(q,Qb),e(Qb,Gde),e(Gde,S8o),e(Qb,R8o),e(Qb,iD),e(iD,B8o),e(Qb,P8o),e(q,I8o),e(q,Wb),e(Wb,Ode),e(Ode,q8o),e(Wb,N8o),e(Wb,dD),e(dD,j8o),e(Wb,D8o),e(q,G8o),e(q,Hb),e(Hb,Vde),e(Vde,O8o),e(Hb,V8o),e(Hb,cD),e(cD,X8o),e(Hb,z8o),e(Ye,Q8o),e(Ye,Ub),e(Ub,W8o),e(Ub,Xde),e(Xde,H8o),e(Ub,U8o),e(Ub,zde),e(zde,J8o),e(Ye,Y8o),M(Jb,Ye,null),b(f,hBe,_),b(f,Ri,_),e(Ri,Yb),e(Yb,Qde),M(v6,Qde,null),e(Ri,K8o),e(Ri,Wde),e(Wde,Z8o),b(f,pBe,_),b(f,So,_),M(F6,So,null),e(So,exo),e(So,Bi),e(Bi,oxo),e(Bi,fD),e(fD,rxo),e(Bi,txo),e(Bi,mD),e(mD,axo),e(Bi,nxo),e(So,sxo),e(So,T6),e(T6,lxo),e(T6,Hde),e(Hde,ixo),e(T6,dxo),e(So,cxo),e(So,at),M(M6,at,null),e(at,fxo),e(at,Ude),e(Ude,mxo),e(at,gxo),e(at,Pi),e(Pi,hxo),e(Pi,Jde),e(Jde,pxo),e(Pi,uxo),e(Pi,gD),e(gD,_xo),e(Pi,bxo),e(at,vxo),M(Kb,at,null),e(So,Fxo),e(So,Ke),M(E6,Ke,null),e(Ke,Txo),e(Ke,Yde),e(Yde,Mxo),e(Ke,Exo),e(Ke,La),e(La,Cxo),e(La,Kde),e(Kde,wxo),e(La,Axo),e(La,Zde),e(Zde,yxo),e(La,Lxo),e(La,ece),e(ece,xxo),e(La,$xo),e(Ke,kxo),e(Ke,Y),e(Y,Zb),e(Zb,oce),e(oce,Sxo),e(Zb,Rxo),e(Zb,hD),e(hD,Bxo),e(Zb,Pxo),e(Y,Ixo),e(Y,e4),e(e4,rce),e(rce,qxo),e(e4,Nxo),e(e4,pD),e(pD,jxo),e(e4,Dxo),e(Y,Gxo),e(Y,o4),e(o4,tce),e(tce,Oxo),e(o4,Vxo),e(o4,uD),e(uD,Xxo),e(o4,zxo),e(Y,Qxo),e(Y,r4),e(r4,ace),e(ace,Wxo),e(r4,Hxo),e(r4,_D),e(_D,Uxo),e(r4,Jxo),e(Y,Yxo),e(Y,t4),e(t4,nce),e(nce,Kxo),e(t4,Zxo),e(t4,bD),e(bD,e9o),e(t4,o9o),e(Y,r9o),e(Y,a4),e(a4,sce),e(sce,t9o),e(a4,a9o),e(a4,vD),e(vD,n9o),e(a4,s9o),e(Y,l9o),e(Y,n4),e(n4,lce),e(lce,i9o),e(n4,d9o),e(n4,FD),e(FD,c9o),e(n4,f9o),e(Y,m9o),e(Y,s4),e(s4,ice),e(ice,g9o),e(s4,h9o),e(s4,TD),e(TD,p9o),e(s4,u9o),e(Y,_9o),e(Y,l4),e(l4,dce),e(dce,b9o),e(l4,v9o),e(l4,MD),e(MD,F9o),e(l4,T9o),e(Y,M9o),e(Y,i4),e(i4,cce),e(cce,E9o),e(i4,C9o),e(i4,ED),e(ED,w9o),e(i4,A9o),e(Y,y9o),e(Y,d4),e(d4,fce),e(fce,L9o),e(d4,x9o),e(d4,CD),e(CD,$9o),e(d4,k9o),e(Y,S9o),e(Y,c4),e(c4,mce),e(mce,R9o),e(c4,B9o),e(c4,wD),e(wD,P9o),e(c4,I9o),e(Y,q9o),e(Y,f4),e(f4,gce),e(gce,N9o),e(f4,j9o),e(f4,AD),e(AD,D9o),e(f4,G9o),e(Y,O9o),e(Y,m4),e(m4,hce),e(hce,V9o),e(m4,X9o),e(m4,yD),e(yD,z9o),e(m4,Q9o),e(Y,W9o),e(Y,g4),e(g4,pce),e(pce,H9o),e(g4,U9o),e(g4,LD),e(LD,J9o),e(g4,Y9o),e(Y,K9o),e(Y,h4),e(h4,uce),e(uce,Z9o),e(h4,e$o),e(h4,xD),e(xD,o$o),e(h4,r$o),e(Y,t$o),e(Y,p4),e(p4,_ce),e(_ce,a$o),e(p4,n$o),e(p4,$D),e($D,s$o),e(p4,l$o),e(Y,i$o),e(Y,u4),e(u4,bce),e(bce,d$o),e(u4,c$o),e(u4,kD),e(kD,f$o),e(u4,m$o),e(Y,g$o),e(Y,_4),e(_4,vce),e(vce,h$o),e(_4,p$o),e(_4,SD),e(SD,u$o),e(_4,_$o),e(Y,b$o),e(Y,b4),e(b4,Fce),e(Fce,v$o),e(b4,F$o),e(b4,RD),e(RD,T$o),e(b4,M$o),e(Y,E$o),e(Y,v4),e(v4,Tce),e(Tce,C$o),e(v4,w$o),e(v4,BD),e(BD,A$o),e(v4,y$o),e(Y,L$o),e(Y,F4),e(F4,Mce),e(Mce,x$o),e(F4,$$o),e(F4,PD),e(PD,k$o),e(F4,S$o),e(Y,R$o),e(Y,T4),e(T4,Ece),e(Ece,B$o),e(T4,P$o),e(T4,ID),e(ID,I$o),e(T4,q$o),e(Y,N$o),e(Y,M4),e(M4,Cce),e(Cce,j$o),e(M4,D$o),e(M4,qD),e(qD,G$o),e(M4,O$o),e(Y,V$o),e(Y,E4),e(E4,wce),e(wce,X$o),e(E4,z$o),e(E4,ND),e(ND,Q$o),e(E4,W$o),e(Y,H$o),e(Y,C4),e(C4,Ace),e(Ace,U$o),e(C4,J$o),e(C4,jD),e(jD,Y$o),e(C4,K$o),e(Y,Z$o),e(Y,w4),e(w4,yce),e(yce,eko),e(w4,oko),e(w4,DD),e(DD,rko),e(w4,tko),e(Y,ako),e(Y,A4),e(A4,Lce),e(Lce,nko),e(A4,sko),e(A4,GD),e(GD,lko),e(A4,iko),e(Ke,dko),e(Ke,y4),e(y4,cko),e(y4,xce),e(xce,fko),e(y4,mko),e(y4,$ce),e($ce,gko),e(Ke,hko),M(L4,Ke,null),b(f,uBe,_),b(f,Ii,_),e(Ii,x4),e(x4,kce),M(C6,kce,null),e(Ii,pko),e(Ii,Sce),e(Sce,uko),b(f,_Be,_),b(f,Ro,_),M(w6,Ro,null),e(Ro,_ko),e(Ro,qi),e(qi,bko),e(qi,OD),e(OD,vko),e(qi,Fko),e(qi,VD),e(VD,Tko),e(qi,Mko),e(Ro,Eko),e(Ro,A6),e(A6,Cko),e(A6,Rce),e(Rce,wko),e(A6,Ako),e(Ro,yko),e(Ro,nt),M(y6,nt,null),e(nt,Lko),e(nt,Bce),e(Bce,xko),e(nt,$ko),e(nt,Ni),e(Ni,kko),e(Ni,Pce),e(Pce,Sko),e(Ni,Rko),e(Ni,XD),e(XD,Bko),e(Ni,Pko),e(nt,Iko),M($4,nt,null),e(Ro,qko),e(Ro,Ze),M(L6,Ze,null),e(Ze,Nko),e(Ze,Ice),e(Ice,jko),e(Ze,Dko),e(Ze,xa),e(xa,Gko),e(xa,qce),e(qce,Oko),e(xa,Vko),e(xa,Nce),e(Nce,Xko),e(xa,zko),e(xa,jce),e(jce,Qko),e(xa,Wko),e(Ze,Hko),e(Ze,Wr),e(Wr,k4),e(k4,Dce),e(Dce,Uko),e(k4,Jko),e(k4,zD),e(zD,Yko),e(k4,Kko),e(Wr,Zko),e(Wr,S4),e(S4,Gce),e(Gce,eSo),e(S4,oSo),e(S4,QD),e(QD,rSo),e(S4,tSo),e(Wr,aSo),e(Wr,R4),e(R4,Oce),e(Oce,nSo),e(R4,sSo),e(R4,WD),e(WD,lSo),e(R4,iSo),e(Wr,dSo),e(Wr,B4),e(B4,Vce),e(Vce,cSo),e(B4,fSo),e(B4,HD),e(HD,mSo),e(B4,gSo),e(Wr,hSo),e(Wr,P4),e(P4,Xce),e(Xce,pSo),e(P4,uSo),e(P4,UD),e(UD,_So),e(P4,bSo),e(Ze,vSo),e(Ze,I4),e(I4,FSo),e(I4,zce),e(zce,TSo),e(I4,MSo),e(I4,Qce),e(Qce,ESo),e(Ze,CSo),M(q4,Ze,null),b(f,bBe,_),b(f,ji,_),e(ji,N4),e(N4,Wce),M(x6,Wce,null),e(ji,wSo),e(ji,Hce),e(Hce,ASo),b(f,vBe,_),b(f,Bo,_),M($6,Bo,null),e(Bo,ySo),e(Bo,Di),e(Di,LSo),e(Di,JD),e(JD,xSo),e(Di,$So),e(Di,YD),e(YD,kSo),e(Di,SSo),e(Bo,RSo),e(Bo,k6),e(k6,BSo),e(k6,Uce),e(Uce,PSo),e(k6,ISo),e(Bo,qSo),e(Bo,st),M(S6,st,null),e(st,NSo),e(st,Jce),e(Jce,jSo),e(st,DSo),e(st,Gi),e(Gi,GSo),e(Gi,Yce),e(Yce,OSo),e(Gi,VSo),e(Gi,KD),e(KD,XSo),e(Gi,zSo),e(st,QSo),M(j4,st,null),e(Bo,WSo),e(Bo,eo),M(R6,eo,null),e(eo,HSo),e(eo,Kce),e(Kce,USo),e(eo,JSo),e(eo,$a),e($a,YSo),e($a,Zce),e(Zce,KSo),e($a,ZSo),e($a,efe),e(efe,eRo),e($a,oRo),e($a,ofe),e(ofe,rRo),e($a,tRo),e(eo,aRo),e(eo,U),e(U,D4),e(D4,rfe),e(rfe,nRo),e(D4,sRo),e(D4,ZD),e(ZD,lRo),e(D4,iRo),e(U,dRo),e(U,G4),e(G4,tfe),e(tfe,cRo),e(G4,fRo),e(G4,eG),e(eG,mRo),e(G4,gRo),e(U,hRo),e(U,O4),e(O4,afe),e(afe,pRo),e(O4,uRo),e(O4,oG),e(oG,_Ro),e(O4,bRo),e(U,vRo),e(U,V4),e(V4,nfe),e(nfe,FRo),e(V4,TRo),e(V4,rG),e(rG,MRo),e(V4,ERo),e(U,CRo),e(U,X4),e(X4,sfe),e(sfe,wRo),e(X4,ARo),e(X4,tG),e(tG,yRo),e(X4,LRo),e(U,xRo),e(U,z4),e(z4,lfe),e(lfe,$Ro),e(z4,kRo),e(z4,aG),e(aG,SRo),e(z4,RRo),e(U,BRo),e(U,Q4),e(Q4,ife),e(ife,PRo),e(Q4,IRo),e(Q4,nG),e(nG,qRo),e(Q4,NRo),e(U,jRo),e(U,W4),e(W4,dfe),e(dfe,DRo),e(W4,GRo),e(W4,sG),e(sG,ORo),e(W4,VRo),e(U,XRo),e(U,H4),e(H4,cfe),e(cfe,zRo),e(H4,QRo),e(H4,lG),e(lG,WRo),e(H4,HRo),e(U,URo),e(U,U4),e(U4,ffe),e(ffe,JRo),e(U4,YRo),e(U4,iG),e(iG,KRo),e(U4,ZRo),e(U,eBo),e(U,J4),e(J4,mfe),e(mfe,oBo),e(J4,rBo),e(J4,dG),e(dG,tBo),e(J4,aBo),e(U,nBo),e(U,Y4),e(Y4,gfe),e(gfe,sBo),e(Y4,lBo),e(Y4,cG),e(cG,iBo),e(Y4,dBo),e(U,cBo),e(U,K4),e(K4,hfe),e(hfe,fBo),e(K4,mBo),e(K4,fG),e(fG,gBo),e(K4,hBo),e(U,pBo),e(U,Z4),e(Z4,pfe),e(pfe,uBo),e(Z4,_Bo),e(Z4,mG),e(mG,bBo),e(Z4,vBo),e(U,FBo),e(U,e2),e(e2,ufe),e(ufe,TBo),e(e2,MBo),e(e2,gG),e(gG,EBo),e(e2,CBo),e(U,wBo),e(U,o2),e(o2,_fe),e(_fe,ABo),e(o2,yBo),e(o2,hG),e(hG,LBo),e(o2,xBo),e(U,$Bo),e(U,r2),e(r2,bfe),e(bfe,kBo),e(r2,SBo),e(r2,pG),e(pG,RBo),e(r2,BBo),e(U,PBo),e(U,t2),e(t2,vfe),e(vfe,IBo),e(t2,qBo),e(t2,uG),e(uG,NBo),e(t2,jBo),e(U,DBo),e(U,a2),e(a2,Ffe),e(Ffe,GBo),e(a2,OBo),e(a2,_G),e(_G,VBo),e(a2,XBo),e(U,zBo),e(U,n2),e(n2,Tfe),e(Tfe,QBo),e(n2,WBo),e(n2,bG),e(bG,HBo),e(n2,UBo),e(U,JBo),e(U,s2),e(s2,Mfe),e(Mfe,YBo),e(s2,KBo),e(s2,vG),e(vG,ZBo),e(s2,ePo),e(U,oPo),e(U,l2),e(l2,Efe),e(Efe,rPo),e(l2,tPo),e(l2,FG),e(FG,aPo),e(l2,nPo),e(U,sPo),e(U,i2),e(i2,Cfe),e(Cfe,lPo),e(i2,iPo),e(i2,TG),e(TG,dPo),e(i2,cPo),e(U,fPo),e(U,d2),e(d2,wfe),e(wfe,mPo),e(d2,gPo),e(d2,MG),e(MG,hPo),e(d2,pPo),e(U,uPo),e(U,c2),e(c2,Afe),e(Afe,_Po),e(c2,bPo),e(c2,EG),e(EG,vPo),e(c2,FPo),e(U,TPo),e(U,f2),e(f2,yfe),e(yfe,MPo),e(f2,EPo),e(f2,CG),e(CG,CPo),e(f2,wPo),e(U,APo),e(U,m2),e(m2,Lfe),e(Lfe,yPo),e(m2,LPo),e(m2,wG),e(wG,xPo),e(m2,$Po),e(U,kPo),e(U,g2),e(g2,xfe),e(xfe,SPo),e(g2,RPo),e(g2,AG),e(AG,BPo),e(g2,PPo),e(U,IPo),e(U,h2),e(h2,$fe),e($fe,qPo),e(h2,NPo),e(h2,yG),e(yG,jPo),e(h2,DPo),e(U,GPo),e(U,p2),e(p2,kfe),e(kfe,OPo),e(p2,VPo),e(p2,LG),e(LG,XPo),e(p2,zPo),e(U,QPo),e(U,u2),e(u2,Sfe),e(Sfe,WPo),e(u2,HPo),e(u2,xG),e(xG,UPo),e(u2,JPo),e(U,YPo),e(U,_2),e(_2,Rfe),e(Rfe,KPo),e(_2,ZPo),e(_2,$G),e($G,eIo),e(_2,oIo),e(U,rIo),e(U,b2),e(b2,Bfe),e(Bfe,tIo),e(b2,aIo),e(b2,kG),e(kG,nIo),e(b2,sIo),e(eo,lIo),e(eo,v2),e(v2,iIo),e(v2,Pfe),e(Pfe,dIo),e(v2,cIo),e(v2,Ife),e(Ife,fIo),e(eo,mIo),M(F2,eo,null),b(f,FBe,_),b(f,Oi,_),e(Oi,T2),e(T2,qfe),M(B6,qfe,null),e(Oi,gIo),e(Oi,Nfe),e(Nfe,hIo),b(f,TBe,_),b(f,Po,_),M(P6,Po,null),e(Po,pIo),e(Po,Vi),e(Vi,uIo),e(Vi,SG),e(SG,_Io),e(Vi,bIo),e(Vi,RG),e(RG,vIo),e(Vi,FIo),e(Po,TIo),e(Po,I6),e(I6,MIo),e(I6,jfe),e(jfe,EIo),e(I6,CIo),e(Po,wIo),e(Po,lt),M(q6,lt,null),e(lt,AIo),e(lt,Dfe),e(Dfe,yIo),e(lt,LIo),e(lt,Xi),e(Xi,xIo),e(Xi,Gfe),e(Gfe,$Io),e(Xi,kIo),e(Xi,BG),e(BG,SIo),e(Xi,RIo),e(lt,BIo),M(M2,lt,null),e(Po,PIo),e(Po,oo),M(N6,oo,null),e(oo,IIo),e(oo,Ofe),e(Ofe,qIo),e(oo,NIo),e(oo,ka),e(ka,jIo),e(ka,Vfe),e(Vfe,DIo),e(ka,GIo),e(ka,Xfe),e(Xfe,OIo),e(ka,VIo),e(ka,zfe),e(zfe,XIo),e(ka,zIo),e(oo,QIo),e(oo,O),e(O,E2),e(E2,Qfe),e(Qfe,WIo),e(E2,HIo),e(E2,PG),e(PG,UIo),e(E2,JIo),e(O,YIo),e(O,C2),e(C2,Wfe),e(Wfe,KIo),e(C2,ZIo),e(C2,IG),e(IG,eqo),e(C2,oqo),e(O,rqo),e(O,w2),e(w2,Hfe),e(Hfe,tqo),e(w2,aqo),e(w2,qG),e(qG,nqo),e(w2,sqo),e(O,lqo),e(O,A2),e(A2,Ufe),e(Ufe,iqo),e(A2,dqo),e(A2,NG),e(NG,cqo),e(A2,fqo),e(O,mqo),e(O,y2),e(y2,Jfe),e(Jfe,gqo),e(y2,hqo),e(y2,jG),e(jG,pqo),e(y2,uqo),e(O,_qo),e(O,L2),e(L2,Yfe),e(Yfe,bqo),e(L2,vqo),e(L2,DG),e(DG,Fqo),e(L2,Tqo),e(O,Mqo),e(O,x2),e(x2,Kfe),e(Kfe,Eqo),e(x2,Cqo),e(x2,GG),e(GG,wqo),e(x2,Aqo),e(O,yqo),e(O,$2),e($2,Zfe),e(Zfe,Lqo),e($2,xqo),e($2,OG),e(OG,$qo),e($2,kqo),e(O,Sqo),e(O,k2),e(k2,eme),e(eme,Rqo),e(k2,Bqo),e(k2,VG),e(VG,Pqo),e(k2,Iqo),e(O,qqo),e(O,S2),e(S2,ome),e(ome,Nqo),e(S2,jqo),e(S2,XG),e(XG,Dqo),e(S2,Gqo),e(O,Oqo),e(O,R2),e(R2,rme),e(rme,Vqo),e(R2,Xqo),e(R2,zG),e(zG,zqo),e(R2,Qqo),e(O,Wqo),e(O,B2),e(B2,tme),e(tme,Hqo),e(B2,Uqo),e(B2,QG),e(QG,Jqo),e(B2,Yqo),e(O,Kqo),e(O,P2),e(P2,ame),e(ame,Zqo),e(P2,eNo),e(P2,WG),e(WG,oNo),e(P2,rNo),e(O,tNo),e(O,I2),e(I2,nme),e(nme,aNo),e(I2,nNo),e(I2,HG),e(HG,sNo),e(I2,lNo),e(O,iNo),e(O,q2),e(q2,sme),e(sme,dNo),e(q2,cNo),e(q2,UG),e(UG,fNo),e(q2,mNo),e(O,gNo),e(O,N2),e(N2,lme),e(lme,hNo),e(N2,pNo),e(N2,JG),e(JG,uNo),e(N2,_No),e(O,bNo),e(O,j2),e(j2,ime),e(ime,vNo),e(j2,FNo),e(j2,YG),e(YG,TNo),e(j2,MNo),e(O,ENo),e(O,D2),e(D2,dme),e(dme,CNo),e(D2,wNo),e(D2,KG),e(KG,ANo),e(D2,yNo),e(O,LNo),e(O,G2),e(G2,cme),e(cme,xNo),e(G2,$No),e(G2,ZG),e(ZG,kNo),e(G2,SNo),e(O,RNo),e(O,O2),e(O2,fme),e(fme,BNo),e(O2,PNo),e(O2,eO),e(eO,INo),e(O2,qNo),e(O,NNo),e(O,V2),e(V2,mme),e(mme,jNo),e(V2,DNo),e(V2,oO),e(oO,GNo),e(V2,ONo),e(O,VNo),e(O,X2),e(X2,gme),e(gme,XNo),e(X2,zNo),e(X2,rO),e(rO,QNo),e(X2,WNo),e(O,HNo),e(O,z2),e(z2,hme),e(hme,UNo),e(z2,JNo),e(z2,tO),e(tO,YNo),e(z2,KNo),e(O,ZNo),e(O,Q2),e(Q2,pme),e(pme,ejo),e(Q2,ojo),e(Q2,aO),e(aO,rjo),e(Q2,tjo),e(O,ajo),e(O,W2),e(W2,ume),e(ume,njo),e(W2,sjo),e(W2,nO),e(nO,ljo),e(W2,ijo),e(O,djo),e(O,H2),e(H2,_me),e(_me,cjo),e(H2,fjo),e(H2,sO),e(sO,mjo),e(H2,gjo),e(O,hjo),e(O,U2),e(U2,bme),e(bme,pjo),e(U2,ujo),e(U2,lO),e(lO,_jo),e(U2,bjo),e(O,vjo),e(O,J2),e(J2,vme),e(vme,Fjo),e(J2,Tjo),e(J2,iO),e(iO,Mjo),e(J2,Ejo),e(O,Cjo),e(O,Y2),e(Y2,Fme),e(Fme,wjo),e(Y2,Ajo),e(Y2,dO),e(dO,yjo),e(Y2,Ljo),e(O,xjo),e(O,K2),e(K2,Tme),e(Tme,$jo),e(K2,kjo),e(K2,cO),e(cO,Sjo),e(K2,Rjo),e(O,Bjo),e(O,Z2),e(Z2,Mme),e(Mme,Pjo),e(Z2,Ijo),e(Z2,fO),e(fO,qjo),e(Z2,Njo),e(O,jjo),e(O,e5),e(e5,Eme),e(Eme,Djo),e(e5,Gjo),e(e5,mO),e(mO,Ojo),e(e5,Vjo),e(O,Xjo),e(O,o5),e(o5,Cme),e(Cme,zjo),e(o5,Qjo),e(o5,gO),e(gO,Wjo),e(o5,Hjo),e(O,Ujo),e(O,r5),e(r5,wme),e(wme,Jjo),e(r5,Yjo),e(r5,hO),e(hO,Kjo),e(r5,Zjo),e(O,eDo),e(O,t5),e(t5,Ame),e(Ame,oDo),e(t5,rDo),e(t5,pO),e(pO,tDo),e(t5,aDo),e(O,nDo),e(O,a5),e(a5,yme),e(yme,sDo),e(a5,lDo),e(a5,uO),e(uO,iDo),e(a5,dDo),e(O,cDo),e(O,n5),e(n5,Lme),e(Lme,fDo),e(n5,mDo),e(n5,_O),e(_O,gDo),e(n5,hDo),e(O,pDo),e(O,s5),e(s5,xme),e(xme,uDo),e(s5,_Do),e(s5,bO),e(bO,bDo),e(s5,vDo),e(O,FDo),e(O,l5),e(l5,$me),e($me,TDo),e(l5,MDo),e(l5,vO),e(vO,EDo),e(l5,CDo),e(oo,wDo),e(oo,i5),e(i5,ADo),e(i5,kme),e(kme,yDo),e(i5,LDo),e(i5,Sme),e(Sme,xDo),e(oo,$Do),M(d5,oo,null),b(f,MBe,_),b(f,zi,_),e(zi,c5),e(c5,Rme),M(j6,Rme,null),e(zi,kDo),e(zi,Bme),e(Bme,SDo),b(f,EBe,_),b(f,Io,_),M(D6,Io,null),e(Io,RDo),e(Io,Qi),e(Qi,BDo),e(Qi,FO),e(FO,PDo),e(Qi,IDo),e(Qi,TO),e(TO,qDo),e(Qi,NDo),e(Io,jDo),e(Io,G6),e(G6,DDo),e(G6,Pme),e(Pme,GDo),e(G6,ODo),e(Io,VDo),e(Io,it),M(O6,it,null),e(it,XDo),e(it,Ime),e(Ime,zDo),e(it,QDo),e(it,Wi),e(Wi,WDo),e(Wi,qme),e(qme,HDo),e(Wi,UDo),e(Wi,MO),e(MO,JDo),e(Wi,YDo),e(it,KDo),M(f5,it,null),e(Io,ZDo),e(Io,ro),M(V6,ro,null),e(ro,eGo),e(ro,Nme),e(Nme,oGo),e(ro,rGo),e(ro,Sa),e(Sa,tGo),e(Sa,jme),e(jme,aGo),e(Sa,nGo),e(Sa,Dme),e(Dme,sGo),e(Sa,lGo),e(Sa,Gme),e(Gme,iGo),e(Sa,dGo),e(ro,cGo),e(ro,Ome),e(Ome,m5),e(m5,Vme),e(Vme,fGo),e(m5,mGo),e(m5,EO),e(EO,gGo),e(m5,hGo),e(ro,pGo),e(ro,g5),e(g5,uGo),e(g5,Xme),e(Xme,_Go),e(g5,bGo),e(g5,zme),e(zme,vGo),e(ro,FGo),M(h5,ro,null),b(f,CBe,_),b(f,Hi,_),e(Hi,p5),e(p5,Qme),M(X6,Qme,null),e(Hi,TGo),e(Hi,Wme),e(Wme,MGo),b(f,wBe,_),b(f,qo,_),M(z6,qo,null),e(qo,EGo),e(qo,Ui),e(Ui,CGo),e(Ui,CO),e(CO,wGo),e(Ui,AGo),e(Ui,wO),e(wO,yGo),e(Ui,LGo),e(qo,xGo),e(qo,Q6),e(Q6,$Go),e(Q6,Hme),e(Hme,kGo),e(Q6,SGo),e(qo,RGo),e(qo,dt),M(W6,dt,null),e(dt,BGo),e(dt,Ume),e(Ume,PGo),e(dt,IGo),e(dt,Ji),e(Ji,qGo),e(Ji,Jme),e(Jme,NGo),e(Ji,jGo),e(Ji,AO),e(AO,DGo),e(Ji,GGo),e(dt,OGo),M(u5,dt,null),e(qo,VGo),e(qo,to),M(H6,to,null),e(to,XGo),e(to,Yme),e(Yme,zGo),e(to,QGo),e(to,Ra),e(Ra,WGo),e(Ra,Kme),e(Kme,HGo),e(Ra,UGo),e(Ra,Zme),e(Zme,JGo),e(Ra,YGo),e(Ra,ege),e(ege,KGo),e(Ra,ZGo),e(to,eOo),e(to,ve),e(ve,_5),e(_5,oge),e(oge,oOo),e(_5,rOo),e(_5,yO),e(yO,tOo),e(_5,aOo),e(ve,nOo),e(ve,b5),e(b5,rge),e(rge,sOo),e(b5,lOo),e(b5,LO),e(LO,iOo),e(b5,dOo),e(ve,cOo),e(ve,v5),e(v5,tge),e(tge,fOo),e(v5,mOo),e(v5,xO),e(xO,gOo),e(v5,hOo),e(ve,pOo),e(ve,Ls),e(Ls,age),e(age,uOo),e(Ls,_Oo),e(Ls,$O),e($O,bOo),e(Ls,vOo),e(Ls,kO),e(kO,FOo),e(Ls,TOo),e(ve,MOo),e(ve,F5),e(F5,nge),e(nge,EOo),e(F5,COo),e(F5,SO),e(SO,wOo),e(F5,AOo),e(ve,yOo),e(ve,ct),e(ct,sge),e(sge,LOo),e(ct,xOo),e(ct,RO),e(RO,$Oo),e(ct,kOo),e(ct,BO),e(BO,SOo),e(ct,ROo),e(ct,PO),e(PO,BOo),e(ct,POo),e(ve,IOo),e(ve,T5),e(T5,lge),e(lge,qOo),e(T5,NOo),e(T5,IO),e(IO,jOo),e(T5,DOo),e(ve,GOo),e(ve,M5),e(M5,ige),e(ige,OOo),e(M5,VOo),e(M5,qO),e(qO,XOo),e(M5,zOo),e(ve,QOo),e(ve,E5),e(E5,dge),e(dge,WOo),e(E5,HOo),e(E5,NO),e(NO,UOo),e(E5,JOo),e(ve,YOo),e(ve,C5),e(C5,cge),e(cge,KOo),e(C5,ZOo),e(C5,jO),e(jO,eVo),e(C5,oVo),e(ve,rVo),e(ve,w5),e(w5,fge),e(fge,tVo),e(w5,aVo),e(w5,DO),e(DO,nVo),e(w5,sVo),e(ve,lVo),e(ve,A5),e(A5,mge),e(mge,iVo),e(A5,dVo),e(A5,GO),e(GO,cVo),e(A5,fVo),e(ve,mVo),e(ve,y5),e(y5,gge),e(gge,gVo),e(y5,hVo),e(y5,OO),e(OO,pVo),e(y5,uVo),e(to,_Vo),e(to,L5),e(L5,bVo),e(L5,hge),e(hge,vVo),e(L5,FVo),e(L5,pge),e(pge,TVo),e(to,MVo),M(x5,to,null),b(f,ABe,_),b(f,Yi,_),e(Yi,$5),e($5,uge),M(U6,uge,null),e(Yi,EVo),e(Yi,_ge),e(_ge,CVo),b(f,yBe,_),b(f,No,_),M(J6,No,null),e(No,wVo),e(No,Ki),e(Ki,AVo),e(Ki,VO),e(VO,yVo),e(Ki,LVo),e(Ki,XO),e(XO,xVo),e(Ki,$Vo),e(No,kVo),e(No,Y6),e(Y6,SVo),e(Y6,bge),e(bge,RVo),e(Y6,BVo),e(No,PVo),e(No,ft),M(K6,ft,null),e(ft,IVo),e(ft,vge),e(vge,qVo),e(ft,NVo),e(ft,Zi),e(Zi,jVo),e(Zi,Fge),e(Fge,DVo),e(Zi,GVo),e(Zi,zO),e(zO,OVo),e(Zi,VVo),e(ft,XVo),M(k5,ft,null),e(No,zVo),e(No,ao),M(Z6,ao,null),e(ao,QVo),e(ao,Tge),e(Tge,WVo),e(ao,HVo),e(ao,Ba),e(Ba,UVo),e(Ba,Mge),e(Mge,JVo),e(Ba,YVo),e(Ba,Ege),e(Ege,KVo),e(Ba,ZVo),e(Ba,Cge),e(Cge,eXo),e(Ba,oXo),e(ao,rXo),e(ao,wge),e(wge,S5),e(S5,Age),e(Age,tXo),e(S5,aXo),e(S5,QO),e(QO,nXo),e(S5,sXo),e(ao,lXo),e(ao,R5),e(R5,iXo),e(R5,yge),e(yge,dXo),e(R5,cXo),e(R5,Lge),e(Lge,fXo),e(ao,mXo),M(B5,ao,null),b(f,LBe,_),b(f,ed,_),e(ed,P5),e(P5,xge),M(ey,xge,null),e(ed,gXo),e(ed,$ge),e($ge,hXo),b(f,xBe,_),b(f,jo,_),M(oy,jo,null),e(jo,pXo),e(jo,od),e(od,uXo),e(od,WO),e(WO,_Xo),e(od,bXo),e(od,HO),e(HO,vXo),e(od,FXo),e(jo,TXo),e(jo,ry),e(ry,MXo),e(ry,kge),e(kge,EXo),e(ry,CXo),e(jo,wXo),e(jo,mt),M(ty,mt,null),e(mt,AXo),e(mt,Sge),e(Sge,yXo),e(mt,LXo),e(mt,rd),e(rd,xXo),e(rd,Rge),e(Rge,$Xo),e(rd,kXo),e(rd,UO),e(UO,SXo),e(rd,RXo),e(mt,BXo),M(I5,mt,null),e(jo,PXo),e(jo,no),M(ay,no,null),e(no,IXo),e(no,Bge),e(Bge,qXo),e(no,NXo),e(no,Pa),e(Pa,jXo),e(Pa,Pge),e(Pge,DXo),e(Pa,GXo),e(Pa,Ige),e(Ige,OXo),e(Pa,VXo),e(Pa,qge),e(qge,XXo),e(Pa,zXo),e(no,QXo),e(no,qe),e(qe,q5),e(q5,Nge),e(Nge,WXo),e(q5,HXo),e(q5,JO),e(JO,UXo),e(q5,JXo),e(qe,YXo),e(qe,N5),e(N5,jge),e(jge,KXo),e(N5,ZXo),e(N5,YO),e(YO,ezo),e(N5,ozo),e(qe,rzo),e(qe,j5),e(j5,Dge),e(Dge,tzo),e(j5,azo),e(j5,KO),e(KO,nzo),e(j5,szo),e(qe,lzo),e(qe,D5),e(D5,Gge),e(Gge,izo),e(D5,dzo),e(D5,ZO),e(ZO,czo),e(D5,fzo),e(qe,mzo),e(qe,G5),e(G5,Oge),e(Oge,gzo),e(G5,hzo),e(G5,eV),e(eV,pzo),e(G5,uzo),e(qe,_zo),e(qe,O5),e(O5,Vge),e(Vge,bzo),e(O5,vzo),e(O5,oV),e(oV,Fzo),e(O5,Tzo),e(qe,Mzo),e(qe,V5),e(V5,Xge),e(Xge,Ezo),e(V5,Czo),e(V5,rV),e(rV,wzo),e(V5,Azo),e(qe,yzo),e(qe,X5),e(X5,zge),e(zge,Lzo),e(X5,xzo),e(X5,tV),e(tV,$zo),e(X5,kzo),e(no,Szo),e(no,z5),e(z5,Rzo),e(z5,Qge),e(Qge,Bzo),e(z5,Pzo),e(z5,Wge),e(Wge,Izo),e(no,qzo),M(Q5,no,null),b(f,$Be,_),b(f,td,_),e(td,W5),e(W5,Hge),M(ny,Hge,null),e(td,Nzo),e(td,Uge),e(Uge,jzo),b(f,kBe,_),b(f,Do,_),M(sy,Do,null),e(Do,Dzo),e(Do,ad),e(ad,Gzo),e(ad,aV),e(aV,Ozo),e(ad,Vzo),e(ad,nV),e(nV,Xzo),e(ad,zzo),e(Do,Qzo),e(Do,ly),e(ly,Wzo),e(ly,Jge),e(Jge,Hzo),e(ly,Uzo),e(Do,Jzo),e(Do,gt),M(iy,gt,null),e(gt,Yzo),e(gt,Yge),e(Yge,Kzo),e(gt,Zzo),e(gt,nd),e(nd,eQo),e(nd,Kge),e(Kge,oQo),e(nd,rQo),e(nd,sV),e(sV,tQo),e(nd,aQo),e(gt,nQo),M(H5,gt,null),e(Do,sQo),e(Do,so),M(dy,so,null),e(so,lQo),e(so,Zge),e(Zge,iQo),e(so,dQo),e(so,Ia),e(Ia,cQo),e(Ia,ehe),e(ehe,fQo),e(Ia,mQo),e(Ia,ohe),e(ohe,gQo),e(Ia,hQo),e(Ia,rhe),e(rhe,pQo),e(Ia,uQo),e(so,_Qo),e(so,qa),e(qa,U5),e(U5,the),e(the,bQo),e(U5,vQo),e(U5,lV),e(lV,FQo),e(U5,TQo),e(qa,MQo),e(qa,J5),e(J5,ahe),e(ahe,EQo),e(J5,CQo),e(J5,iV),e(iV,wQo),e(J5,AQo),e(qa,yQo),e(qa,Y5),e(Y5,nhe),e(nhe,LQo),e(Y5,xQo),e(Y5,dV),e(dV,$Qo),e(Y5,kQo),e(qa,SQo),e(qa,K5),e(K5,she),e(she,RQo),e(K5,BQo),e(K5,cV),e(cV,PQo),e(K5,IQo),e(so,qQo),e(so,Z5),e(Z5,NQo),e(Z5,lhe),e(lhe,jQo),e(Z5,DQo),e(Z5,ihe),e(ihe,GQo),e(so,OQo),M(ev,so,null),b(f,SBe,_),b(f,sd,_),e(sd,ov),e(ov,dhe),M(cy,dhe,null),e(sd,VQo),e(sd,che),e(che,XQo),b(f,RBe,_),b(f,Go,_),M(fy,Go,null),e(Go,zQo),e(Go,ld),e(ld,QQo),e(ld,fV),e(fV,WQo),e(ld,HQo),e(ld,mV),e(mV,UQo),e(ld,JQo),e(Go,YQo),e(Go,my),e(my,KQo),e(my,fhe),e(fhe,ZQo),e(my,eWo),e(Go,oWo),e(Go,ht),M(gy,ht,null),e(ht,rWo),e(ht,mhe),e(mhe,tWo),e(ht,aWo),e(ht,id),e(id,nWo),e(id,ghe),e(ghe,sWo),e(id,lWo),e(id,gV),e(gV,iWo),e(id,dWo),e(ht,cWo),M(rv,ht,null),e(Go,fWo),e(Go,lo),M(hy,lo,null),e(lo,mWo),e(lo,hhe),e(hhe,gWo),e(lo,hWo),e(lo,Na),e(Na,pWo),e(Na,phe),e(phe,uWo),e(Na,_Wo),e(Na,uhe),e(uhe,bWo),e(Na,vWo),e(Na,_he),e(_he,FWo),e(Na,TWo),e(lo,MWo),e(lo,Ne),e(Ne,tv),e(tv,bhe),e(bhe,EWo),e(tv,CWo),e(tv,hV),e(hV,wWo),e(tv,AWo),e(Ne,yWo),e(Ne,av),e(av,vhe),e(vhe,LWo),e(av,xWo),e(av,pV),e(pV,$Wo),e(av,kWo),e(Ne,SWo),e(Ne,nv),e(nv,Fhe),e(Fhe,RWo),e(nv,BWo),e(nv,uV),e(uV,PWo),e(nv,IWo),e(Ne,qWo),e(Ne,sv),e(sv,The),e(The,NWo),e(sv,jWo),e(sv,_V),e(_V,DWo),e(sv,GWo),e(Ne,OWo),e(Ne,lv),e(lv,Mhe),e(Mhe,VWo),e(lv,XWo),e(lv,bV),e(bV,zWo),e(lv,QWo),e(Ne,WWo),e(Ne,iv),e(iv,Ehe),e(Ehe,HWo),e(iv,UWo),e(iv,vV),e(vV,JWo),e(iv,YWo),e(Ne,KWo),e(Ne,dv),e(dv,Che),e(Che,ZWo),e(dv,eHo),e(dv,FV),e(FV,oHo),e(dv,rHo),e(Ne,tHo),e(Ne,cv),e(cv,whe),e(whe,aHo),e(cv,nHo),e(cv,TV),e(TV,sHo),e(cv,lHo),e(lo,iHo),e(lo,fv),e(fv,dHo),e(fv,Ahe),e(Ahe,cHo),e(fv,fHo),e(fv,yhe),e(yhe,mHo),e(lo,gHo),M(mv,lo,null),b(f,BBe,_),b(f,dd,_),e(dd,gv),e(gv,Lhe),M(py,Lhe,null),e(dd,hHo),e(dd,xhe),e(xhe,pHo),b(f,PBe,_),b(f,Oo,_),M(uy,Oo,null),e(Oo,uHo),e(Oo,cd),e(cd,_Ho),e(cd,MV),e(MV,bHo),e(cd,vHo),e(cd,EV),e(EV,FHo),e(cd,THo),e(Oo,MHo),e(Oo,_y),e(_y,EHo),e(_y,$he),e($he,CHo),e(_y,wHo),e(Oo,AHo),e(Oo,pt),M(by,pt,null),e(pt,yHo),e(pt,khe),e(khe,LHo),e(pt,xHo),e(pt,fd),e(fd,$Ho),e(fd,She),e(She,kHo),e(fd,SHo),e(fd,CV),e(CV,RHo),e(fd,BHo),e(pt,PHo),M(hv,pt,null),e(Oo,IHo),e(Oo,io),M(vy,io,null),e(io,qHo),e(io,Rhe),e(Rhe,NHo),e(io,jHo),e(io,ja),e(ja,DHo),e(ja,Bhe),e(Bhe,GHo),e(ja,OHo),e(ja,Phe),e(Phe,VHo),e(ja,XHo),e(ja,Ihe),e(Ihe,zHo),e(ja,QHo),e(io,WHo),e(io,Fy),e(Fy,pv),e(pv,qhe),e(qhe,HHo),e(pv,UHo),e(pv,wV),e(wV,JHo),e(pv,YHo),e(Fy,KHo),e(Fy,uv),e(uv,Nhe),e(Nhe,ZHo),e(uv,eUo),e(uv,AV),e(AV,oUo),e(uv,rUo),e(io,tUo),e(io,_v),e(_v,aUo),e(_v,jhe),e(jhe,nUo),e(_v,sUo),e(_v,Dhe),e(Dhe,lUo),e(io,iUo),M(bv,io,null),b(f,IBe,_),b(f,md,_),e(md,vv),e(vv,Ghe),M(Ty,Ghe,null),e(md,dUo),e(md,Ohe),e(Ohe,cUo),b(f,qBe,_),b(f,Vo,_),M(My,Vo,null),e(Vo,fUo),e(Vo,gd),e(gd,mUo),e(gd,yV),e(yV,gUo),e(gd,hUo),e(gd,LV),e(LV,pUo),e(gd,uUo),e(Vo,_Uo),e(Vo,Ey),e(Ey,bUo),e(Ey,Vhe),e(Vhe,vUo),e(Ey,FUo),e(Vo,TUo),e(Vo,ut),M(Cy,ut,null),e(ut,MUo),e(ut,Xhe),e(Xhe,EUo),e(ut,CUo),e(ut,hd),e(hd,wUo),e(hd,zhe),e(zhe,AUo),e(hd,yUo),e(hd,xV),e(xV,LUo),e(hd,xUo),e(ut,$Uo),M(Fv,ut,null),e(Vo,kUo),e(Vo,co),M(wy,co,null),e(co,SUo),e(co,Qhe),e(Qhe,RUo),e(co,BUo),e(co,Da),e(Da,PUo),e(Da,Whe),e(Whe,IUo),e(Da,qUo),e(Da,Hhe),e(Hhe,NUo),e(Da,jUo),e(Da,Uhe),e(Uhe,DUo),e(Da,GUo),e(co,OUo),e(co,Ga),e(Ga,Tv),e(Tv,Jhe),e(Jhe,VUo),e(Tv,XUo),e(Tv,$V),e($V,zUo),e(Tv,QUo),e(Ga,WUo),e(Ga,Mv),e(Mv,Yhe),e(Yhe,HUo),e(Mv,UUo),e(Mv,kV),e(kV,JUo),e(Mv,YUo),e(Ga,KUo),e(Ga,Ev),e(Ev,Khe),e(Khe,ZUo),e(Ev,eJo),e(Ev,SV),e(SV,oJo),e(Ev,rJo),e(Ga,tJo),e(Ga,Cv),e(Cv,Zhe),e(Zhe,aJo),e(Cv,nJo),e(Cv,RV),e(RV,sJo),e(Cv,lJo),e(co,iJo),e(co,wv),e(wv,dJo),e(wv,epe),e(epe,cJo),e(wv,fJo),e(wv,ope),e(ope,mJo),e(co,gJo),M(Av,co,null),b(f,NBe,_),b(f,pd,_),e(pd,yv),e(yv,rpe),M(Ay,rpe,null),e(pd,hJo),e(pd,tpe),e(tpe,pJo),b(f,jBe,_),b(f,Xo,_),M(yy,Xo,null),e(Xo,uJo),e(Xo,ud),e(ud,_Jo),e(ud,BV),e(BV,bJo),e(ud,vJo),e(ud,PV),e(PV,FJo),e(ud,TJo),e(Xo,MJo),e(Xo,Ly),e(Ly,EJo),e(Ly,ape),e(ape,CJo),e(Ly,wJo),e(Xo,AJo),e(Xo,_t),M(xy,_t,null),e(_t,yJo),e(_t,npe),e(npe,LJo),e(_t,xJo),e(_t,_d),e(_d,$Jo),e(_d,spe),e(spe,kJo),e(_d,SJo),e(_d,IV),e(IV,RJo),e(_d,BJo),e(_t,PJo),M(Lv,_t,null),e(Xo,IJo),e(Xo,fo),M($y,fo,null),e(fo,qJo),e(fo,lpe),e(lpe,NJo),e(fo,jJo),e(fo,Oa),e(Oa,DJo),e(Oa,ipe),e(ipe,GJo),e(Oa,OJo),e(Oa,dpe),e(dpe,VJo),e(Oa,XJo),e(Oa,cpe),e(cpe,zJo),e(Oa,QJo),e(fo,WJo),e(fo,bd),e(bd,xv),e(xv,fpe),e(fpe,HJo),e(xv,UJo),e(xv,qV),e(qV,JJo),e(xv,YJo),e(bd,KJo),e(bd,$v),e($v,mpe),e(mpe,ZJo),e($v,eYo),e($v,NV),e(NV,oYo),e($v,rYo),e(bd,tYo),e(bd,kv),e(kv,gpe),e(gpe,aYo),e(kv,nYo),e(kv,jV),e(jV,sYo),e(kv,lYo),e(fo,iYo),e(fo,Sv),e(Sv,dYo),e(Sv,hpe),e(hpe,cYo),e(Sv,fYo),e(Sv,ppe),e(ppe,mYo),e(fo,gYo),M(Rv,fo,null),b(f,DBe,_),b(f,vd,_),e(vd,Bv),e(Bv,upe),M(ky,upe,null),e(vd,hYo),e(vd,_pe),e(_pe,pYo),b(f,GBe,_),b(f,zo,_),M(Sy,zo,null),e(zo,uYo),e(zo,Fd),e(Fd,_Yo),e(Fd,DV),e(DV,bYo),e(Fd,vYo),e(Fd,GV),e(GV,FYo),e(Fd,TYo),e(zo,MYo),e(zo,Ry),e(Ry,EYo),e(Ry,bpe),e(bpe,CYo),e(Ry,wYo),e(zo,AYo),e(zo,bt),M(By,bt,null),e(bt,yYo),e(bt,vpe),e(vpe,LYo),e(bt,xYo),e(bt,Td),e(Td,$Yo),e(Td,Fpe),e(Fpe,kYo),e(Td,SYo),e(Td,OV),e(OV,RYo),e(Td,BYo),e(bt,PYo),M(Pv,bt,null),e(zo,IYo),e(zo,mo),M(Py,mo,null),e(mo,qYo),e(mo,Tpe),e(Tpe,NYo),e(mo,jYo),e(mo,Va),e(Va,DYo),e(Va,Mpe),e(Mpe,GYo),e(Va,OYo),e(Va,Epe),e(Epe,VYo),e(Va,XYo),e(Va,Cpe),e(Cpe,zYo),e(Va,QYo),e(mo,WYo),e(mo,Iy),e(Iy,Iv),e(Iv,wpe),e(wpe,HYo),e(Iv,UYo),e(Iv,VV),e(VV,JYo),e(Iv,YYo),e(Iy,KYo),e(Iy,qv),e(qv,Ape),e(Ape,ZYo),e(qv,eKo),e(qv,XV),e(XV,oKo),e(qv,rKo),e(mo,tKo),e(mo,Nv),e(Nv,aKo),e(Nv,ype),e(ype,nKo),e(Nv,sKo),e(Nv,Lpe),e(Lpe,lKo),e(mo,iKo),M(jv,mo,null),b(f,OBe,_),b(f,Md,_),e(Md,Dv),e(Dv,xpe),M(qy,xpe,null),e(Md,dKo),e(Md,$pe),e($pe,cKo),b(f,VBe,_),b(f,Qo,_),M(Ny,Qo,null),e(Qo,fKo),e(Qo,Ed),e(Ed,mKo),e(Ed,zV),e(zV,gKo),e(Ed,hKo),e(Ed,QV),e(QV,pKo),e(Ed,uKo),e(Qo,_Ko),e(Qo,jy),e(jy,bKo),e(jy,kpe),e(kpe,vKo),e(jy,FKo),e(Qo,TKo),e(Qo,vt),M(Dy,vt,null),e(vt,MKo),e(vt,Spe),e(Spe,EKo),e(vt,CKo),e(vt,Cd),e(Cd,wKo),e(Cd,Rpe),e(Rpe,AKo),e(Cd,yKo),e(Cd,WV),e(WV,LKo),e(Cd,xKo),e(vt,$Ko),M(Gv,vt,null),e(Qo,kKo),e(Qo,go),M(Gy,go,null),e(go,SKo),e(go,Bpe),e(Bpe,RKo),e(go,BKo),e(go,Xa),e(Xa,PKo),e(Xa,Ppe),e(Ppe,IKo),e(Xa,qKo),e(Xa,Ipe),e(Ipe,NKo),e(Xa,jKo),e(Xa,qpe),e(qpe,DKo),e(Xa,GKo),e(go,OKo),e(go,Npe),e(Npe,Ov),e(Ov,jpe),e(jpe,VKo),e(Ov,XKo),e(Ov,HV),e(HV,zKo),e(Ov,QKo),e(go,WKo),e(go,Vv),e(Vv,HKo),e(Vv,Dpe),e(Dpe,UKo),e(Vv,JKo),e(Vv,Gpe),e(Gpe,YKo),e(go,KKo),M(Xv,go,null),b(f,XBe,_),b(f,wd,_),e(wd,zv),e(zv,Ope),M(Oy,Ope,null),e(wd,ZKo),e(wd,Vpe),e(Vpe,eZo),b(f,zBe,_),b(f,Wo,_),M(Vy,Wo,null),e(Wo,oZo),e(Wo,Ad),e(Ad,rZo),e(Ad,UV),e(UV,tZo),e(Ad,aZo),e(Ad,JV),e(JV,nZo),e(Ad,sZo),e(Wo,lZo),e(Wo,Xy),e(Xy,iZo),e(Xy,Xpe),e(Xpe,dZo),e(Xy,cZo),e(Wo,fZo),e(Wo,Ft),M(zy,Ft,null),e(Ft,mZo),e(Ft,zpe),e(zpe,gZo),e(Ft,hZo),e(Ft,yd),e(yd,pZo),e(yd,Qpe),e(Qpe,uZo),e(yd,_Zo),e(yd,YV),e(YV,bZo),e(yd,vZo),e(Ft,FZo),M(Qv,Ft,null),e(Wo,TZo),e(Wo,ho),M(Qy,ho,null),e(ho,MZo),e(ho,Wpe),e(Wpe,EZo),e(ho,CZo),e(ho,za),e(za,wZo),e(za,Hpe),e(Hpe,AZo),e(za,yZo),e(za,Upe),e(Upe,LZo),e(za,xZo),e(za,Jpe),e(Jpe,$Zo),e(za,kZo),e(ho,SZo),e(ho,Qa),e(Qa,Wv),e(Wv,Ype),e(Ype,RZo),e(Wv,BZo),e(Wv,KV),e(KV,PZo),e(Wv,IZo),e(Qa,qZo),e(Qa,Hv),e(Hv,Kpe),e(Kpe,NZo),e(Hv,jZo),e(Hv,ZV),e(ZV,DZo),e(Hv,GZo),e(Qa,OZo),e(Qa,Uv),e(Uv,Zpe),e(Zpe,VZo),e(Uv,XZo),e(Uv,eX),e(eX,zZo),e(Uv,QZo),e(Qa,WZo),e(Qa,Jv),e(Jv,eue),e(eue,HZo),e(Jv,UZo),e(Jv,oX),e(oX,JZo),e(Jv,YZo),e(ho,KZo),e(ho,Yv),e(Yv,ZZo),e(Yv,oue),e(oue,eer),e(Yv,oer),e(Yv,rue),e(rue,rer),e(ho,ter),M(Kv,ho,null),b(f,QBe,_),b(f,Ld,_),e(Ld,Zv),e(Zv,tue),M(Wy,tue,null),e(Ld,aer),e(Ld,aue),e(aue,ner),b(f,WBe,_),b(f,Ho,_),M(Hy,Ho,null),e(Ho,ser),e(Ho,xd),e(xd,ler),e(xd,rX),e(rX,ier),e(xd,der),e(xd,tX),e(tX,cer),e(xd,fer),e(Ho,mer),e(Ho,Uy),e(Uy,ger),e(Uy,nue),e(nue,her),e(Uy,per),e(Ho,uer),e(Ho,Tt),M(Jy,Tt,null),e(Tt,_er),e(Tt,sue),e(sue,ber),e(Tt,ver),e(Tt,$d),e($d,Fer),e($d,lue),e(lue,Ter),e($d,Mer),e($d,aX),e(aX,Eer),e($d,Cer),e(Tt,wer),M(eF,Tt,null),e(Ho,Aer),e(Ho,po),M(Yy,po,null),e(po,yer),e(po,iue),e(iue,Ler),e(po,xer),e(po,Wa),e(Wa,$er),e(Wa,due),e(due,ker),e(Wa,Ser),e(Wa,cue),e(cue,Rer),e(Wa,Ber),e(Wa,fue),e(fue,Per),e(Wa,Ier),e(po,qer),e(po,mue),e(mue,oF),e(oF,gue),e(gue,Ner),e(oF,jer),e(oF,nX),e(nX,Der),e(oF,Ger),e(po,Oer),e(po,rF),e(rF,Ver),e(rF,hue),e(hue,Xer),e(rF,zer),e(rF,pue),e(pue,Qer),e(po,Wer),M(tF,po,null),b(f,HBe,_),b(f,kd,_),e(kd,aF),e(aF,uue),M(Ky,uue,null),e(kd,Her),e(kd,_ue),e(_ue,Uer),b(f,UBe,_),b(f,Uo,_),M(Zy,Uo,null),e(Uo,Jer),e(Uo,Sd),e(Sd,Yer),e(Sd,sX),e(sX,Ker),e(Sd,Zer),e(Sd,lX),e(lX,eor),e(Sd,oor),e(Uo,ror),e(Uo,eL),e(eL,tor),e(eL,bue),e(bue,aor),e(eL,nor),e(Uo,sor),e(Uo,Mt),M(oL,Mt,null),e(Mt,lor),e(Mt,vue),e(vue,ior),e(Mt,dor),e(Mt,Rd),e(Rd,cor),e(Rd,Fue),e(Fue,mor),e(Rd,gor),e(Rd,iX),e(iX,hor),e(Rd,por),e(Mt,uor),M(nF,Mt,null),e(Uo,_or),e(Uo,Mr),M(rL,Mr,null),e(Mr,bor),e(Mr,Tue),e(Tue,vor),e(Mr,For),e(Mr,Ha),e(Ha,Tor),e(Ha,Mue),e(Mue,Mor),e(Ha,Eor),e(Ha,Eue),e(Eue,Cor),e(Ha,wor),e(Ha,Cue),e(Cue,Aor),e(Ha,yor),e(Mr,Lor),e(Mr,j),e(j,sF),e(sF,wue),e(wue,xor),e(sF,$or),e(sF,dX),e(dX,kor),e(sF,Sor),e(j,Ror),e(j,lF),e(lF,Aue),e(Aue,Bor),e(lF,Por),e(lF,cX),e(cX,Ior),e(lF,qor),e(j,Nor),e(j,iF),e(iF,yue),e(yue,jor),e(iF,Dor),e(iF,fX),e(fX,Gor),e(iF,Oor),e(j,Vor),e(j,dF),e(dF,Lue),e(Lue,Xor),e(dF,zor),e(dF,mX),e(mX,Qor),e(dF,Wor),e(j,Hor),e(j,cF),e(cF,xue),e(xue,Uor),e(cF,Jor),e(cF,gX),e(gX,Yor),e(cF,Kor),e(j,Zor),e(j,fF),e(fF,$ue),e($ue,err),e(fF,orr),e(fF,hX),e(hX,rrr),e(fF,trr),e(j,arr),e(j,mF),e(mF,kue),e(kue,nrr),e(mF,srr),e(mF,pX),e(pX,lrr),e(mF,irr),e(j,drr),e(j,gF),e(gF,Sue),e(Sue,crr),e(gF,frr),e(gF,uX),e(uX,mrr),e(gF,grr),e(j,hrr),e(j,hF),e(hF,Rue),e(Rue,prr),e(hF,urr),e(hF,_X),e(_X,_rr),e(hF,brr),e(j,vrr),e(j,pF),e(pF,Bue),e(Bue,Frr),e(pF,Trr),e(pF,bX),e(bX,Mrr),e(pF,Err),e(j,Crr),e(j,uF),e(uF,Pue),e(Pue,wrr),e(uF,Arr),e(uF,vX),e(vX,yrr),e(uF,Lrr),e(j,xrr),e(j,_F),e(_F,Iue),e(Iue,$rr),e(_F,krr),e(_F,FX),e(FX,Srr),e(_F,Rrr),e(j,Brr),e(j,bF),e(bF,que),e(que,Prr),e(bF,Irr),e(bF,TX),e(TX,qrr),e(bF,Nrr),e(j,jrr),e(j,vF),e(vF,Nue),e(Nue,Drr),e(vF,Grr),e(vF,MX),e(MX,Orr),e(vF,Vrr),e(j,Xrr),e(j,FF),e(FF,jue),e(jue,zrr),e(FF,Qrr),e(FF,EX),e(EX,Wrr),e(FF,Hrr),e(j,Urr),e(j,TF),e(TF,Due),e(Due,Jrr),e(TF,Yrr),e(TF,CX),e(CX,Krr),e(TF,Zrr),e(j,etr),e(j,xs),e(xs,Gue),e(Gue,otr),e(xs,rtr),e(xs,wX),e(wX,ttr),e(xs,atr),e(xs,AX),e(AX,ntr),e(xs,str),e(j,ltr),e(j,MF),e(MF,Oue),e(Oue,itr),e(MF,dtr),e(MF,yX),e(yX,ctr),e(MF,ftr),e(j,mtr),e(j,EF),e(EF,Vue),e(Vue,gtr),e(EF,htr),e(EF,LX),e(LX,ptr),e(EF,utr),e(j,_tr),e(j,CF),e(CF,Xue),e(Xue,btr),e(CF,vtr),e(CF,xX),e(xX,Ftr),e(CF,Ttr),e(j,Mtr),e(j,wF),e(wF,zue),e(zue,Etr),e(wF,Ctr),e(wF,$X),e($X,wtr),e(wF,Atr),e(j,ytr),e(j,AF),e(AF,Que),e(Que,Ltr),e(AF,xtr),e(AF,kX),e(kX,$tr),e(AF,ktr),e(j,Str),e(j,yF),e(yF,Wue),e(Wue,Rtr),e(yF,Btr),e(yF,SX),e(SX,Ptr),e(yF,Itr),e(j,qtr),e(j,LF),e(LF,Hue),e(Hue,Ntr),e(LF,jtr),e(LF,RX),e(RX,Dtr),e(LF,Gtr),e(j,Otr),e(j,xF),e(xF,Uue),e(Uue,Vtr),e(xF,Xtr),e(xF,BX),e(BX,ztr),e(xF,Qtr),e(j,Wtr),e(j,$F),e($F,Jue),e(Jue,Htr),e($F,Utr),e($F,PX),e(PX,Jtr),e($F,Ytr),e(j,Ktr),e(j,kF),e(kF,Yue),e(Yue,Ztr),e(kF,ear),e(kF,IX),e(IX,oar),e(kF,rar),e(j,tar),e(j,SF),e(SF,Kue),e(Kue,aar),e(SF,nar),e(SF,qX),e(qX,sar),e(SF,lar),e(j,iar),e(j,RF),e(RF,Zue),e(Zue,dar),e(RF,car),e(RF,NX),e(NX,far),e(RF,mar),e(j,gar),e(j,BF),e(BF,e_e),e(e_e,har),e(BF,par),e(BF,jX),e(jX,uar),e(BF,_ar),e(j,bar),e(j,PF),e(PF,o_e),e(o_e,Far),e(PF,Tar),e(PF,DX),e(DX,Mar),e(PF,Ear),e(j,Car),e(j,IF),e(IF,r_e),e(r_e,war),e(IF,Aar),e(IF,GX),e(GX,yar),e(IF,Lar),e(j,xar),e(j,qF),e(qF,t_e),e(t_e,$ar),e(qF,kar),e(qF,OX),e(OX,Sar),e(qF,Rar),e(j,Bar),e(j,NF),e(NF,a_e),e(a_e,Par),e(NF,Iar),e(NF,VX),e(VX,qar),e(NF,Nar),e(j,jar),e(j,jF),e(jF,n_e),e(n_e,Dar),e(jF,Gar),e(jF,XX),e(XX,Oar),e(jF,Var),e(j,Xar),e(j,DF),e(DF,s_e),e(s_e,zar),e(DF,Qar),e(DF,zX),e(zX,War),e(DF,Har),e(j,Uar),e(j,GF),e(GF,l_e),e(l_e,Jar),e(GF,Yar),e(GF,QX),e(QX,Kar),e(GF,Zar),e(j,enr),e(j,OF),e(OF,i_e),e(i_e,onr),e(OF,rnr),e(OF,WX),e(WX,tnr),e(OF,anr),e(j,nnr),e(j,VF),e(VF,d_e),e(d_e,snr),e(VF,lnr),e(VF,HX),e(HX,inr),e(VF,dnr),e(j,cnr),e(j,XF),e(XF,c_e),e(c_e,fnr),e(XF,mnr),e(XF,UX),e(UX,gnr),e(XF,hnr),e(j,pnr),e(j,zF),e(zF,f_e),e(f_e,unr),e(zF,_nr),e(zF,JX),e(JX,bnr),e(zF,vnr),e(j,Fnr),e(j,QF),e(QF,m_e),e(m_e,Tnr),e(QF,Mnr),e(QF,YX),e(YX,Enr),e(QF,Cnr),e(j,wnr),e(j,WF),e(WF,g_e),e(g_e,Anr),e(WF,ynr),e(WF,KX),e(KX,Lnr),e(WF,xnr),e(j,$nr),e(j,HF),e(HF,h_e),e(h_e,knr),e(HF,Snr),e(HF,ZX),e(ZX,Rnr),e(HF,Bnr),e(Mr,Pnr),M(UF,Mr,null),b(f,JBe,_),b(f,Bd,_),e(Bd,JF),e(JF,p_e),M(tL,p_e,null),e(Bd,Inr),e(Bd,u_e),e(u_e,qnr),b(f,YBe,_),b(f,Jo,_),M(aL,Jo,null),e(Jo,Nnr),e(Jo,Pd),e(Pd,jnr),e(Pd,ez),e(ez,Dnr),e(Pd,Gnr),e(Pd,oz),e(oz,Onr),e(Pd,Vnr),e(Jo,Xnr),e(Jo,nL),e(nL,znr),e(nL,__e),e(__e,Qnr),e(nL,Wnr),e(Jo,Hnr),e(Jo,Et),M(sL,Et,null),e(Et,Unr),e(Et,b_e),e(b_e,Jnr),e(Et,Ynr),e(Et,Id),e(Id,Knr),e(Id,v_e),e(v_e,Znr),e(Id,esr),e(Id,rz),e(rz,osr),e(Id,rsr),e(Et,tsr),M(YF,Et,null),e(Jo,asr),e(Jo,Er),M(lL,Er,null),e(Er,nsr),e(Er,F_e),e(F_e,ssr),e(Er,lsr),e(Er,Ua),e(Ua,isr),e(Ua,T_e),e(T_e,dsr),e(Ua,csr),e(Ua,M_e),e(M_e,fsr),e(Ua,msr),e(Ua,E_e),e(E_e,gsr),e(Ua,hsr),e(Er,psr),e(Er,ne),e(ne,KF),e(KF,C_e),e(C_e,usr),e(KF,_sr),e(KF,tz),e(tz,bsr),e(KF,vsr),e(ne,Fsr),e(ne,ZF),e(ZF,w_e),e(w_e,Tsr),e(ZF,Msr),e(ZF,az),e(az,Esr),e(ZF,Csr),e(ne,wsr),e(ne,e0),e(e0,A_e),e(A_e,Asr),e(e0,ysr),e(e0,nz),e(nz,Lsr),e(e0,xsr),e(ne,$sr),e(ne,o0),e(o0,y_e),e(y_e,ksr),e(o0,Ssr),e(o0,sz),e(sz,Rsr),e(o0,Bsr),e(ne,Psr),e(ne,r0),e(r0,L_e),e(L_e,Isr),e(r0,qsr),e(r0,lz),e(lz,Nsr),e(r0,jsr),e(ne,Dsr),e(ne,t0),e(t0,x_e),e(x_e,Gsr),e(t0,Osr),e(t0,iz),e(iz,Vsr),e(t0,Xsr),e(ne,zsr),e(ne,a0),e(a0,$_e),e($_e,Qsr),e(a0,Wsr),e(a0,dz),e(dz,Hsr),e(a0,Usr),e(ne,Jsr),e(ne,n0),e(n0,k_e),e(k_e,Ysr),e(n0,Ksr),e(n0,cz),e(cz,Zsr),e(n0,elr),e(ne,olr),e(ne,s0),e(s0,S_e),e(S_e,rlr),e(s0,tlr),e(s0,fz),e(fz,alr),e(s0,nlr),e(ne,slr),e(ne,l0),e(l0,R_e),e(R_e,llr),e(l0,ilr),e(l0,mz),e(mz,dlr),e(l0,clr),e(ne,flr),e(ne,i0),e(i0,B_e),e(B_e,mlr),e(i0,glr),e(i0,gz),e(gz,hlr),e(i0,plr),e(ne,ulr),e(ne,d0),e(d0,P_e),e(P_e,_lr),e(d0,blr),e(d0,hz),e(hz,vlr),e(d0,Flr),e(ne,Tlr),e(ne,c0),e(c0,I_e),e(I_e,Mlr),e(c0,Elr),e(c0,pz),e(pz,Clr),e(c0,wlr),e(ne,Alr),e(ne,f0),e(f0,q_e),e(q_e,ylr),e(f0,Llr),e(f0,uz),e(uz,xlr),e(f0,$lr),e(ne,klr),e(ne,m0),e(m0,N_e),e(N_e,Slr),e(m0,Rlr),e(m0,_z),e(_z,Blr),e(m0,Plr),e(ne,Ilr),e(ne,g0),e(g0,j_e),e(j_e,qlr),e(g0,Nlr),e(g0,bz),e(bz,jlr),e(g0,Dlr),e(ne,Glr),e(ne,h0),e(h0,D_e),e(D_e,Olr),e(h0,Vlr),e(h0,vz),e(vz,Xlr),e(h0,zlr),e(ne,Qlr),e(ne,p0),e(p0,G_e),e(G_e,Wlr),e(p0,Hlr),e(p0,Fz),e(Fz,Ulr),e(p0,Jlr),e(ne,Ylr),e(ne,u0),e(u0,O_e),e(O_e,Klr),e(u0,Zlr),e(u0,Tz),e(Tz,eir),e(u0,oir),e(ne,rir),e(ne,_0),e(_0,V_e),e(V_e,tir),e(_0,air),e(_0,Mz),e(Mz,nir),e(_0,sir),e(ne,lir),e(ne,b0),e(b0,X_e),e(X_e,iir),e(b0,dir),e(b0,Ez),e(Ez,cir),e(b0,fir),e(ne,mir),e(ne,v0),e(v0,z_e),e(z_e,gir),e(v0,hir),e(v0,Cz),e(Cz,pir),e(v0,uir),e(ne,_ir),e(ne,F0),e(F0,Q_e),e(Q_e,bir),e(F0,vir),e(F0,wz),e(wz,Fir),e(F0,Tir),e(Er,Mir),M(T0,Er,null),b(f,KBe,_),b(f,qd,_),e(qd,M0),e(M0,W_e),M(iL,W_e,null),e(qd,Eir),e(qd,H_e),e(H_e,Cir),b(f,ZBe,_),b(f,Yo,_),M(dL,Yo,null),e(Yo,wir),e(Yo,Nd),e(Nd,Air),e(Nd,Az),e(Az,yir),e(Nd,Lir),e(Nd,yz),e(yz,xir),e(Nd,$ir),e(Yo,kir),e(Yo,cL),e(cL,Sir),e(cL,U_e),e(U_e,Rir),e(cL,Bir),e(Yo,Pir),e(Yo,Ct),M(fL,Ct,null),e(Ct,Iir),e(Ct,J_e),e(J_e,qir),e(Ct,Nir),e(Ct,jd),e(jd,jir),e(jd,Y_e),e(Y_e,Dir),e(jd,Gir),e(jd,Lz),e(Lz,Oir),e(jd,Vir),e(Ct,Xir),M(E0,Ct,null),e(Yo,zir),e(Yo,Cr),M(mL,Cr,null),e(Cr,Qir),e(Cr,K_e),e(K_e,Wir),e(Cr,Hir),e(Cr,Ja),e(Ja,Uir),e(Ja,Z_e),e(Z_e,Jir),e(Ja,Yir),e(Ja,e1e),e(e1e,Kir),e(Ja,Zir),e(Ja,o1e),e(o1e,edr),e(Ja,odr),e(Cr,rdr),e(Cr,Te),e(Te,C0),e(C0,r1e),e(r1e,tdr),e(C0,adr),e(C0,xz),e(xz,ndr),e(C0,sdr),e(Te,ldr),e(Te,w0),e(w0,t1e),e(t1e,idr),e(w0,ddr),e(w0,$z),e($z,cdr),e(w0,fdr),e(Te,mdr),e(Te,A0),e(A0,a1e),e(a1e,gdr),e(A0,hdr),e(A0,kz),e(kz,pdr),e(A0,udr),e(Te,_dr),e(Te,y0),e(y0,n1e),e(n1e,bdr),e(y0,vdr),e(y0,Sz),e(Sz,Fdr),e(y0,Tdr),e(Te,Mdr),e(Te,L0),e(L0,s1e),e(s1e,Edr),e(L0,Cdr),e(L0,Rz),e(Rz,wdr),e(L0,Adr),e(Te,ydr),e(Te,x0),e(x0,l1e),e(l1e,Ldr),e(x0,xdr),e(x0,Bz),e(Bz,$dr),e(x0,kdr),e(Te,Sdr),e(Te,$0),e($0,i1e),e(i1e,Rdr),e($0,Bdr),e($0,Pz),e(Pz,Pdr),e($0,Idr),e(Te,qdr),e(Te,k0),e(k0,d1e),e(d1e,Ndr),e(k0,jdr),e(k0,Iz),e(Iz,Ddr),e(k0,Gdr),e(Te,Odr),e(Te,S0),e(S0,c1e),e(c1e,Vdr),e(S0,Xdr),e(S0,qz),e(qz,zdr),e(S0,Qdr),e(Te,Wdr),e(Te,R0),e(R0,f1e),e(f1e,Hdr),e(R0,Udr),e(R0,Nz),e(Nz,Jdr),e(R0,Ydr),e(Te,Kdr),e(Te,B0),e(B0,m1e),e(m1e,Zdr),e(B0,ecr),e(B0,jz),e(jz,ocr),e(B0,rcr),e(Te,tcr),e(Te,P0),e(P0,g1e),e(g1e,acr),e(P0,ncr),e(P0,Dz),e(Dz,scr),e(P0,lcr),e(Cr,icr),M(I0,Cr,null),b(f,ePe,_),b(f,Dd,_),e(Dd,q0),e(q0,h1e),M(gL,h1e,null),e(Dd,dcr),e(Dd,p1e),e(p1e,ccr),b(f,oPe,_),b(f,Ko,_),M(hL,Ko,null),e(Ko,fcr),e(Ko,Gd),e(Gd,mcr),e(Gd,Gz),e(Gz,gcr),e(Gd,hcr),e(Gd,Oz),e(Oz,pcr),e(Gd,ucr),e(Ko,_cr),e(Ko,pL),e(pL,bcr),e(pL,u1e),e(u1e,vcr),e(pL,Fcr),e(Ko,Tcr),e(Ko,wt),M(uL,wt,null),e(wt,Mcr),e(wt,_1e),e(_1e,Ecr),e(wt,Ccr),e(wt,Od),e(Od,wcr),e(Od,b1e),e(b1e,Acr),e(Od,ycr),e(Od,Vz),e(Vz,Lcr),e(Od,xcr),e(wt,$cr),M(N0,wt,null),e(Ko,kcr),e(Ko,wr),M(_L,wr,null),e(wr,Scr),e(wr,v1e),e(v1e,Rcr),e(wr,Bcr),e(wr,Ya),e(Ya,Pcr),e(Ya,F1e),e(F1e,Icr),e(Ya,qcr),e(Ya,T1e),e(T1e,Ncr),e(Ya,jcr),e(Ya,M1e),e(M1e,Dcr),e(Ya,Gcr),e(wr,Ocr),e(wr,bL),e(bL,j0),e(j0,E1e),e(E1e,Vcr),e(j0,Xcr),e(j0,Xz),e(Xz,zcr),e(j0,Qcr),e(bL,Wcr),e(bL,D0),e(D0,C1e),e(C1e,Hcr),e(D0,Ucr),e(D0,zz),e(zz,Jcr),e(D0,Ycr),e(wr,Kcr),M(G0,wr,null),b(f,rPe,_),b(f,Vd,_),e(Vd,O0),e(O0,w1e),M(vL,w1e,null),e(Vd,Zcr),e(Vd,A1e),e(A1e,efr),b(f,tPe,_),b(f,Zo,_),M(FL,Zo,null),e(Zo,ofr),e(Zo,Xd),e(Xd,rfr),e(Xd,Qz),e(Qz,tfr),e(Xd,afr),e(Xd,Wz),e(Wz,nfr),e(Xd,sfr),e(Zo,lfr),e(Zo,TL),e(TL,ifr),e(TL,y1e),e(y1e,dfr),e(TL,cfr),e(Zo,ffr),e(Zo,At),M(ML,At,null),e(At,mfr),e(At,L1e),e(L1e,gfr),e(At,hfr),e(At,zd),e(zd,pfr),e(zd,x1e),e(x1e,ufr),e(zd,_fr),e(zd,Hz),e(Hz,bfr),e(zd,vfr),e(At,Ffr),M(V0,At,null),e(Zo,Tfr),e(Zo,Ar),M(EL,Ar,null),e(Ar,Mfr),e(Ar,$1e),e($1e,Efr),e(Ar,Cfr),e(Ar,Ka),e(Ka,wfr),e(Ka,k1e),e(k1e,Afr),e(Ka,yfr),e(Ka,S1e),e(S1e,Lfr),e(Ka,xfr),e(Ka,R1e),e(R1e,$fr),e(Ka,kfr),e(Ar,Sfr),e(Ar,ie),e(ie,X0),e(X0,B1e),e(B1e,Rfr),e(X0,Bfr),e(X0,Uz),e(Uz,Pfr),e(X0,Ifr),e(ie,qfr),e(ie,z0),e(z0,P1e),e(P1e,Nfr),e(z0,jfr),e(z0,Jz),e(Jz,Dfr),e(z0,Gfr),e(ie,Ofr),e(ie,Q0),e(Q0,I1e),e(I1e,Vfr),e(Q0,Xfr),e(Q0,Yz),e(Yz,zfr),e(Q0,Qfr),e(ie,Wfr),e(ie,W0),e(W0,q1e),e(q1e,Hfr),e(W0,Ufr),e(W0,Kz),e(Kz,Jfr),e(W0,Yfr),e(ie,Kfr),e(ie,H0),e(H0,N1e),e(N1e,Zfr),e(H0,emr),e(H0,Zz),e(Zz,omr),e(H0,rmr),e(ie,tmr),e(ie,U0),e(U0,j1e),e(j1e,amr),e(U0,nmr),e(U0,eQ),e(eQ,smr),e(U0,lmr),e(ie,imr),e(ie,J0),e(J0,D1e),e(D1e,dmr),e(J0,cmr),e(J0,oQ),e(oQ,fmr),e(J0,mmr),e(ie,gmr),e(ie,Y0),e(Y0,G1e),e(G1e,hmr),e(Y0,pmr),e(Y0,rQ),e(rQ,umr),e(Y0,_mr),e(ie,bmr),e(ie,K0),e(K0,O1e),e(O1e,vmr),e(K0,Fmr),e(K0,tQ),e(tQ,Tmr),e(K0,Mmr),e(ie,Emr),e(ie,Z0),e(Z0,V1e),e(V1e,Cmr),e(Z0,wmr),e(Z0,aQ),e(aQ,Amr),e(Z0,ymr),e(ie,Lmr),e(ie,eT),e(eT,X1e),e(X1e,xmr),e(eT,$mr),e(eT,nQ),e(nQ,kmr),e(eT,Smr),e(ie,Rmr),e(ie,oT),e(oT,z1e),e(z1e,Bmr),e(oT,Pmr),e(oT,sQ),e(sQ,Imr),e(oT,qmr),e(ie,Nmr),e(ie,rT),e(rT,Q1e),e(Q1e,jmr),e(rT,Dmr),e(rT,lQ),e(lQ,Gmr),e(rT,Omr),e(ie,Vmr),e(ie,tT),e(tT,W1e),e(W1e,Xmr),e(tT,zmr),e(tT,iQ),e(iQ,Qmr),e(tT,Wmr),e(ie,Hmr),e(ie,aT),e(aT,H1e),e(H1e,Umr),e(aT,Jmr),e(aT,dQ),e(dQ,Ymr),e(aT,Kmr),e(ie,Zmr),e(ie,nT),e(nT,U1e),e(U1e,egr),e(nT,ogr),e(nT,cQ),e(cQ,rgr),e(nT,tgr),e(ie,agr),e(ie,sT),e(sT,J1e),e(J1e,ngr),e(sT,sgr),e(sT,fQ),e(fQ,lgr),e(sT,igr),e(ie,dgr),e(ie,lT),e(lT,Y1e),e(Y1e,cgr),e(lT,fgr),e(lT,mQ),e(mQ,mgr),e(lT,ggr),e(ie,hgr),e(ie,iT),e(iT,K1e),e(K1e,pgr),e(iT,ugr),e(iT,gQ),e(gQ,_gr),e(iT,bgr),e(ie,vgr),e(ie,dT),e(dT,Z1e),e(Z1e,Fgr),e(dT,Tgr),e(dT,hQ),e(hQ,Mgr),e(dT,Egr),e(Ar,Cgr),M(cT,Ar,null),b(f,aPe,_),b(f,Qd,_),e(Qd,fT),e(fT,ebe),M(CL,ebe,null),e(Qd,wgr),e(Qd,obe),e(obe,Agr),b(f,nPe,_),b(f,er,_),M(wL,er,null),e(er,ygr),e(er,Wd),e(Wd,Lgr),e(Wd,pQ),e(pQ,xgr),e(Wd,$gr),e(Wd,uQ),e(uQ,kgr),e(Wd,Sgr),e(er,Rgr),e(er,AL),e(AL,Bgr),e(AL,rbe),e(rbe,Pgr),e(AL,Igr),e(er,qgr),e(er,yt),M(yL,yt,null),e(yt,Ngr),e(yt,tbe),e(tbe,jgr),e(yt,Dgr),e(yt,Hd),e(Hd,Ggr),e(Hd,abe),e(abe,Ogr),e(Hd,Vgr),e(Hd,_Q),e(_Q,Xgr),e(Hd,zgr),e(yt,Qgr),M(mT,yt,null),e(er,Wgr),e(er,yr),M(LL,yr,null),e(yr,Hgr),e(yr,nbe),e(nbe,Ugr),e(yr,Jgr),e(yr,Za),e(Za,Ygr),e(Za,sbe),e(sbe,Kgr),e(Za,Zgr),e(Za,lbe),e(lbe,ehr),e(Za,ohr),e(Za,ibe),e(ibe,rhr),e(Za,thr),e(yr,ahr),e(yr,ye),e(ye,gT),e(gT,dbe),e(dbe,nhr),e(gT,shr),e(gT,bQ),e(bQ,lhr),e(gT,ihr),e(ye,dhr),e(ye,hT),e(hT,cbe),e(cbe,chr),e(hT,fhr),e(hT,vQ),e(vQ,mhr),e(hT,ghr),e(ye,hhr),e(ye,pT),e(pT,fbe),e(fbe,phr),e(pT,uhr),e(pT,FQ),e(FQ,_hr),e(pT,bhr),e(ye,vhr),e(ye,uT),e(uT,mbe),e(mbe,Fhr),e(uT,Thr),e(uT,TQ),e(TQ,Mhr),e(uT,Ehr),e(ye,Chr),e(ye,_T),e(_T,gbe),e(gbe,whr),e(_T,Ahr),e(_T,MQ),e(MQ,yhr),e(_T,Lhr),e(ye,xhr),e(ye,bT),e(bT,hbe),e(hbe,$hr),e(bT,khr),e(bT,EQ),e(EQ,Shr),e(bT,Rhr),e(ye,Bhr),e(ye,vT),e(vT,pbe),e(pbe,Phr),e(vT,Ihr),e(vT,CQ),e(CQ,qhr),e(vT,Nhr),e(ye,jhr),e(ye,FT),e(FT,ube),e(ube,Dhr),e(FT,Ghr),e(FT,wQ),e(wQ,Ohr),e(FT,Vhr),e(ye,Xhr),e(ye,TT),e(TT,_be),e(_be,zhr),e(TT,Qhr),e(TT,AQ),e(AQ,Whr),e(TT,Hhr),e(ye,Uhr),e(ye,MT),e(MT,bbe),e(bbe,Jhr),e(MT,Yhr),e(MT,yQ),e(yQ,Khr),e(MT,Zhr),e(yr,epr),M(ET,yr,null),b(f,sPe,_),b(f,Ud,_),e(Ud,CT),e(CT,vbe),M(xL,vbe,null),e(Ud,opr),e(Ud,Fbe),e(Fbe,rpr),b(f,lPe,_),b(f,or,_),M($L,or,null),e(or,tpr),e(or,Jd),e(Jd,apr),e(Jd,LQ),e(LQ,npr),e(Jd,spr),e(Jd,xQ),e(xQ,lpr),e(Jd,ipr),e(or,dpr),e(or,kL),e(kL,cpr),e(kL,Tbe),e(Tbe,fpr),e(kL,mpr),e(or,gpr),e(or,Lt),M(SL,Lt,null),e(Lt,hpr),e(Lt,Mbe),e(Mbe,ppr),e(Lt,upr),e(Lt,Yd),e(Yd,_pr),e(Yd,Ebe),e(Ebe,bpr),e(Yd,vpr),e(Yd,$Q),e($Q,Fpr),e(Yd,Tpr),e(Lt,Mpr),M(wT,Lt,null),e(or,Epr),e(or,Lr),M(RL,Lr,null),e(Lr,Cpr),e(Lr,Cbe),e(Cbe,wpr),e(Lr,Apr),e(Lr,en),e(en,ypr),e(en,wbe),e(wbe,Lpr),e(en,xpr),e(en,Abe),e(Abe,$pr),e(en,kpr),e(en,ybe),e(ybe,Spr),e(en,Rpr),e(Lr,Bpr),e(Lr,Z),e(Z,AT),e(AT,Lbe),e(Lbe,Ppr),e(AT,Ipr),e(AT,kQ),e(kQ,qpr),e(AT,Npr),e(Z,jpr),e(Z,yT),e(yT,xbe),e(xbe,Dpr),e(yT,Gpr),e(yT,SQ),e(SQ,Opr),e(yT,Vpr),e(Z,Xpr),e(Z,LT),e(LT,$be),e($be,zpr),e(LT,Qpr),e(LT,RQ),e(RQ,Wpr),e(LT,Hpr),e(Z,Upr),e(Z,xT),e(xT,kbe),e(kbe,Jpr),e(xT,Ypr),e(xT,BQ),e(BQ,Kpr),e(xT,Zpr),e(Z,eur),e(Z,$T),e($T,Sbe),e(Sbe,our),e($T,rur),e($T,PQ),e(PQ,tur),e($T,aur),e(Z,nur),e(Z,kT),e(kT,Rbe),e(Rbe,sur),e(kT,lur),e(kT,IQ),e(IQ,iur),e(kT,dur),e(Z,cur),e(Z,ST),e(ST,Bbe),e(Bbe,fur),e(ST,mur),e(ST,qQ),e(qQ,gur),e(ST,hur),e(Z,pur),e(Z,RT),e(RT,Pbe),e(Pbe,uur),e(RT,_ur),e(RT,NQ),e(NQ,bur),e(RT,vur),e(Z,Fur),e(Z,BT),e(BT,Ibe),e(Ibe,Tur),e(BT,Mur),e(BT,jQ),e(jQ,Eur),e(BT,Cur),e(Z,wur),e(Z,PT),e(PT,qbe),e(qbe,Aur),e(PT,yur),e(PT,DQ),e(DQ,Lur),e(PT,xur),e(Z,$ur),e(Z,IT),e(IT,Nbe),e(Nbe,kur),e(IT,Sur),e(IT,GQ),e(GQ,Rur),e(IT,Bur),e(Z,Pur),e(Z,qT),e(qT,jbe),e(jbe,Iur),e(qT,qur),e(qT,OQ),e(OQ,Nur),e(qT,jur),e(Z,Dur),e(Z,NT),e(NT,Dbe),e(Dbe,Gur),e(NT,Our),e(NT,VQ),e(VQ,Vur),e(NT,Xur),e(Z,zur),e(Z,jT),e(jT,Gbe),e(Gbe,Qur),e(jT,Wur),e(jT,XQ),e(XQ,Hur),e(jT,Uur),e(Z,Jur),e(Z,DT),e(DT,Obe),e(Obe,Yur),e(DT,Kur),e(DT,zQ),e(zQ,Zur),e(DT,e_r),e(Z,o_r),e(Z,GT),e(GT,Vbe),e(Vbe,r_r),e(GT,t_r),e(GT,QQ),e(QQ,a_r),e(GT,n_r),e(Z,s_r),e(Z,OT),e(OT,Xbe),e(Xbe,l_r),e(OT,i_r),e(OT,WQ),e(WQ,d_r),e(OT,c_r),e(Z,f_r),e(Z,VT),e(VT,zbe),e(zbe,m_r),e(VT,g_r),e(VT,HQ),e(HQ,h_r),e(VT,p_r),e(Z,u_r),e(Z,XT),e(XT,Qbe),e(Qbe,__r),e(XT,b_r),e(XT,UQ),e(UQ,v_r),e(XT,F_r),e(Z,T_r),e(Z,zT),e(zT,Wbe),e(Wbe,M_r),e(zT,E_r),e(zT,JQ),e(JQ,C_r),e(zT,w_r),e(Z,A_r),e(Z,QT),e(QT,Hbe),e(Hbe,y_r),e(QT,L_r),e(QT,YQ),e(YQ,x_r),e(QT,$_r),e(Z,k_r),e(Z,WT),e(WT,Ube),e(Ube,S_r),e(WT,R_r),e(WT,KQ),e(KQ,B_r),e(WT,P_r),e(Z,I_r),e(Z,HT),e(HT,Jbe),e(Jbe,q_r),e(HT,N_r),e(HT,ZQ),e(ZQ,j_r),e(HT,D_r),e(Z,G_r),e(Z,UT),e(UT,Ybe),e(Ybe,O_r),e(UT,V_r),e(UT,eW),e(eW,X_r),e(UT,z_r),e(Z,Q_r),e(Z,JT),e(JT,Kbe),e(Kbe,W_r),e(JT,H_r),e(JT,oW),e(oW,U_r),e(JT,J_r),e(Z,Y_r),e(Z,YT),e(YT,Zbe),e(Zbe,K_r),e(YT,Z_r),e(YT,rW),e(rW,e1r),e(YT,o1r),e(Lr,r1r),M(KT,Lr,null),b(f,iPe,_),b(f,Kd,_),e(Kd,ZT),e(ZT,e4e),M(BL,e4e,null),e(Kd,t1r),e(Kd,o4e),e(o4e,a1r),b(f,dPe,_),b(f,rr,_),M(PL,rr,null),e(rr,n1r),e(rr,Zd),e(Zd,s1r),e(Zd,tW),e(tW,l1r),e(Zd,i1r),e(Zd,aW),e(aW,d1r),e(Zd,c1r),e(rr,f1r),e(rr,IL),e(IL,m1r),e(IL,r4e),e(r4e,g1r),e(IL,h1r),e(rr,p1r),e(rr,xt),M(qL,xt,null),e(xt,u1r),e(xt,t4e),e(t4e,_1r),e(xt,b1r),e(xt,ec),e(ec,v1r),e(ec,a4e),e(a4e,F1r),e(ec,T1r),e(ec,nW),e(nW,M1r),e(ec,E1r),e(xt,C1r),M(e7,xt,null),e(rr,w1r),e(rr,xr),M(NL,xr,null),e(xr,A1r),e(xr,n4e),e(n4e,y1r),e(xr,L1r),e(xr,on),e(on,x1r),e(on,s4e),e(s4e,$1r),e(on,k1r),e(on,l4e),e(l4e,S1r),e(on,R1r),e(on,i4e),e(i4e,B1r),e(on,P1r),e(xr,I1r),e(xr,pe),e(pe,o7),e(o7,d4e),e(d4e,q1r),e(o7,N1r),e(o7,sW),e(sW,j1r),e(o7,D1r),e(pe,G1r),e(pe,r7),e(r7,c4e),e(c4e,O1r),e(r7,V1r),e(r7,lW),e(lW,X1r),e(r7,z1r),e(pe,Q1r),e(pe,t7),e(t7,f4e),e(f4e,W1r),e(t7,H1r),e(t7,iW),e(iW,U1r),e(t7,J1r),e(pe,Y1r),e(pe,a7),e(a7,m4e),e(m4e,K1r),e(a7,Z1r),e(a7,dW),e(dW,ebr),e(a7,obr),e(pe,rbr),e(pe,n7),e(n7,g4e),e(g4e,tbr),e(n7,abr),e(n7,cW),e(cW,nbr),e(n7,sbr),e(pe,lbr),e(pe,s7),e(s7,h4e),e(h4e,ibr),e(s7,dbr),e(s7,fW),e(fW,cbr),e(s7,fbr),e(pe,mbr),e(pe,l7),e(l7,p4e),e(p4e,gbr),e(l7,hbr),e(l7,mW),e(mW,pbr),e(l7,ubr),e(pe,_br),e(pe,i7),e(i7,u4e),e(u4e,bbr),e(i7,vbr),e(i7,gW),e(gW,Fbr),e(i7,Tbr),e(pe,Mbr),e(pe,d7),e(d7,_4e),e(_4e,Ebr),e(d7,Cbr),e(d7,hW),e(hW,wbr),e(d7,Abr),e(pe,ybr),e(pe,c7),e(c7,b4e),e(b4e,Lbr),e(c7,xbr),e(c7,pW),e(pW,$br),e(c7,kbr),e(pe,Sbr),e(pe,f7),e(f7,v4e),e(v4e,Rbr),e(f7,Bbr),e(f7,uW),e(uW,Pbr),e(f7,Ibr),e(pe,qbr),e(pe,m7),e(m7,F4e),e(F4e,Nbr),e(m7,jbr),e(m7,_W),e(_W,Dbr),e(m7,Gbr),e(pe,Obr),e(pe,g7),e(g7,T4e),e(T4e,Vbr),e(g7,Xbr),e(g7,bW),e(bW,zbr),e(g7,Qbr),e(pe,Wbr),e(pe,h7),e(h7,M4e),e(M4e,Hbr),e(h7,Ubr),e(h7,vW),e(vW,Jbr),e(h7,Ybr),e(pe,Kbr),e(pe,p7),e(p7,E4e),e(E4e,Zbr),e(p7,e4r),e(p7,FW),e(FW,o4r),e(p7,r4r),e(pe,t4r),e(pe,u7),e(u7,C4e),e(C4e,a4r),e(u7,n4r),e(u7,TW),e(TW,s4r),e(u7,l4r),e(pe,i4r),e(pe,_7),e(_7,w4e),e(w4e,d4r),e(_7,c4r),e(_7,MW),e(MW,f4r),e(_7,m4r),e(xr,g4r),M(b7,xr,null),b(f,cPe,_),b(f,oc,_),e(oc,v7),e(v7,A4e),M(jL,A4e,null),e(oc,h4r),e(oc,y4e),e(y4e,p4r),b(f,fPe,_),b(f,tr,_),M(DL,tr,null),e(tr,u4r),e(tr,rc),e(rc,_4r),e(rc,EW),e(EW,b4r),e(rc,v4r),e(rc,CW),e(CW,F4r),e(rc,T4r),e(tr,M4r),e(tr,GL),e(GL,E4r),e(GL,L4e),e(L4e,C4r),e(GL,w4r),e(tr,A4r),e(tr,$t),M(OL,$t,null),e($t,y4r),e($t,x4e),e(x4e,L4r),e($t,x4r),e($t,tc),e(tc,$4r),e(tc,$4e),e($4e,k4r),e(tc,S4r),e(tc,wW),e(wW,R4r),e(tc,B4r),e($t,P4r),M(F7,$t,null),e(tr,I4r),e(tr,$r),M(VL,$r,null),e($r,q4r),e($r,k4e),e(k4e,N4r),e($r,j4r),e($r,rn),e(rn,D4r),e(rn,S4e),e(S4e,G4r),e(rn,O4r),e(rn,R4e),e(R4e,V4r),e(rn,X4r),e(rn,B4e),e(B4e,z4r),e(rn,Q4r),e($r,W4r),e($r,P4e),e(P4e,T7),e(T7,I4e),e(I4e,H4r),e(T7,U4r),e(T7,AW),e(AW,J4r),e(T7,Y4r),e($r,K4r),M(M7,$r,null),b(f,mPe,_),b(f,ac,_),e(ac,E7),e(E7,q4e),M(XL,q4e,null),e(ac,Z4r),e(ac,N4e),e(N4e,e2r),b(f,gPe,_),b(f,ar,_),M(zL,ar,null),e(ar,o2r),e(ar,nc),e(nc,r2r),e(nc,yW),e(yW,t2r),e(nc,a2r),e(nc,LW),e(LW,n2r),e(nc,s2r),e(ar,l2r),e(ar,QL),e(QL,i2r),e(QL,j4e),e(j4e,d2r),e(QL,c2r),e(ar,f2r),e(ar,kt),M(WL,kt,null),e(kt,m2r),e(kt,D4e),e(D4e,g2r),e(kt,h2r),e(kt,sc),e(sc,p2r),e(sc,G4e),e(G4e,u2r),e(sc,_2r),e(sc,xW),e(xW,b2r),e(sc,v2r),e(kt,F2r),M(C7,kt,null),e(ar,T2r),e(ar,kr),M(HL,kr,null),e(kr,M2r),e(kr,O4e),e(O4e,E2r),e(kr,C2r),e(kr,tn),e(tn,w2r),e(tn,V4e),e(V4e,A2r),e(tn,y2r),e(tn,X4e),e(X4e,L2r),e(tn,x2r),e(tn,z4e),e(z4e,$2r),e(tn,k2r),e(kr,S2r),e(kr,de),e(de,w7),e(w7,Q4e),e(Q4e,R2r),e(w7,B2r),e(w7,$W),e($W,P2r),e(w7,I2r),e(de,q2r),e(de,A7),e(A7,W4e),e(W4e,N2r),e(A7,j2r),e(A7,kW),e(kW,D2r),e(A7,G2r),e(de,O2r),e(de,y7),e(y7,H4e),e(H4e,V2r),e(y7,X2r),e(y7,SW),e(SW,z2r),e(y7,Q2r),e(de,W2r),e(de,L7),e(L7,U4e),e(U4e,H2r),e(L7,U2r),e(L7,RW),e(RW,J2r),e(L7,Y2r),e(de,K2r),e(de,x7),e(x7,J4e),e(J4e,Z2r),e(x7,e5r),e(x7,BW),e(BW,o5r),e(x7,r5r),e(de,t5r),e(de,$7),e($7,Y4e),e(Y4e,a5r),e($7,n5r),e($7,PW),e(PW,s5r),e($7,l5r),e(de,i5r),e(de,k7),e(k7,K4e),e(K4e,d5r),e(k7,c5r),e(k7,IW),e(IW,f5r),e(k7,m5r),e(de,g5r),e(de,S7),e(S7,Z4e),e(Z4e,h5r),e(S7,p5r),e(S7,qW),e(qW,u5r),e(S7,_5r),e(de,b5r),e(de,R7),e(R7,e2e),e(e2e,v5r),e(R7,F5r),e(R7,NW),e(NW,T5r),e(R7,M5r),e(de,E5r),e(de,B7),e(B7,o2e),e(o2e,C5r),e(B7,w5r),e(B7,jW),e(jW,A5r),e(B7,y5r),e(de,L5r),e(de,P7),e(P7,r2e),e(r2e,x5r),e(P7,$5r),e(P7,DW),e(DW,k5r),e(P7,S5r),e(de,R5r),e(de,I7),e(I7,t2e),e(t2e,B5r),e(I7,P5r),e(I7,GW),e(GW,I5r),e(I7,q5r),e(de,N5r),e(de,q7),e(q7,a2e),e(a2e,j5r),e(q7,D5r),e(q7,OW),e(OW,G5r),e(q7,O5r),e(de,V5r),e(de,N7),e(N7,n2e),e(n2e,X5r),e(N7,z5r),e(N7,VW),e(VW,Q5r),e(N7,W5r),e(de,H5r),e(de,j7),e(j7,s2e),e(s2e,U5r),e(j7,J5r),e(j7,XW),e(XW,Y5r),e(j7,K5r),e(de,Z5r),e(de,D7),e(D7,l2e),e(l2e,evr),e(D7,ovr),e(D7,zW),e(zW,rvr),e(D7,tvr),e(de,avr),e(de,G7),e(G7,i2e),e(i2e,nvr),e(G7,svr),e(G7,QW),e(QW,lvr),e(G7,ivr),e(de,dvr),e(de,O7),e(O7,d2e),e(d2e,cvr),e(O7,fvr),e(O7,WW),e(WW,mvr),e(O7,gvr),e(de,hvr),e(de,V7),e(V7,c2e),e(c2e,pvr),e(V7,uvr),e(V7,HW),e(HW,_vr),e(V7,bvr),e(de,vvr),e(de,X7),e(X7,f2e),e(f2e,Fvr),e(X7,Tvr),e(X7,UW),e(UW,Mvr),e(X7,Evr),e(kr,Cvr),M(z7,kr,null),b(f,hPe,_),b(f,lc,_),e(lc,Q7),e(Q7,m2e),M(UL,m2e,null),e(lc,wvr),e(lc,g2e),e(g2e,Avr),b(f,pPe,_),b(f,nr,_),M(JL,nr,null),e(nr,yvr),e(nr,ic),e(ic,Lvr),e(ic,JW),e(JW,xvr),e(ic,$vr),e(ic,YW),e(YW,kvr),e(ic,Svr),e(nr,Rvr),e(nr,YL),e(YL,Bvr),e(YL,h2e),e(h2e,Pvr),e(YL,Ivr),e(nr,qvr),e(nr,St),M(KL,St,null),e(St,Nvr),e(St,p2e),e(p2e,jvr),e(St,Dvr),e(St,dc),e(dc,Gvr),e(dc,u2e),e(u2e,Ovr),e(dc,Vvr),e(dc,KW),e(KW,Xvr),e(dc,zvr),e(St,Qvr),M(W7,St,null),e(nr,Wvr),e(nr,Sr),M(ZL,Sr,null),e(Sr,Hvr),e(Sr,_2e),e(_2e,Uvr),e(Sr,Jvr),e(Sr,an),e(an,Yvr),e(an,b2e),e(b2e,Kvr),e(an,Zvr),e(an,v2e),e(v2e,eFr),e(an,oFr),e(an,F2e),e(F2e,rFr),e(an,tFr),e(Sr,aFr),e(Sr,ce),e(ce,H7),e(H7,T2e),e(T2e,nFr),e(H7,sFr),e(H7,ZW),e(ZW,lFr),e(H7,iFr),e(ce,dFr),e(ce,U7),e(U7,M2e),e(M2e,cFr),e(U7,fFr),e(U7,eH),e(eH,mFr),e(U7,gFr),e(ce,hFr),e(ce,J7),e(J7,E2e),e(E2e,pFr),e(J7,uFr),e(J7,oH),e(oH,_Fr),e(J7,bFr),e(ce,vFr),e(ce,Y7),e(Y7,C2e),e(C2e,FFr),e(Y7,TFr),e(Y7,rH),e(rH,MFr),e(Y7,EFr),e(ce,CFr),e(ce,K7),e(K7,w2e),e(w2e,wFr),e(K7,AFr),e(K7,tH),e(tH,yFr),e(K7,LFr),e(ce,xFr),e(ce,Z7),e(Z7,A2e),e(A2e,$Fr),e(Z7,kFr),e(Z7,aH),e(aH,SFr),e(Z7,RFr),e(ce,BFr),e(ce,eM),e(eM,y2e),e(y2e,PFr),e(eM,IFr),e(eM,nH),e(nH,qFr),e(eM,NFr),e(ce,jFr),e(ce,oM),e(oM,L2e),e(L2e,DFr),e(oM,GFr),e(oM,sH),e(sH,OFr),e(oM,VFr),e(ce,XFr),e(ce,rM),e(rM,x2e),e(x2e,zFr),e(rM,QFr),e(rM,lH),e(lH,WFr),e(rM,HFr),e(ce,UFr),e(ce,tM),e(tM,$2e),e($2e,JFr),e(tM,YFr),e(tM,iH),e(iH,KFr),e(tM,ZFr),e(ce,e0r),e(ce,aM),e(aM,k2e),e(k2e,o0r),e(aM,r0r),e(aM,dH),e(dH,t0r),e(aM,a0r),e(ce,n0r),e(ce,nM),e(nM,S2e),e(S2e,s0r),e(nM,l0r),e(nM,cH),e(cH,i0r),e(nM,d0r),e(ce,c0r),e(ce,sM),e(sM,R2e),e(R2e,f0r),e(sM,m0r),e(sM,fH),e(fH,g0r),e(sM,h0r),e(ce,p0r),e(ce,lM),e(lM,B2e),e(B2e,u0r),e(lM,_0r),e(lM,mH),e(mH,b0r),e(lM,v0r),e(ce,F0r),e(ce,iM),e(iM,P2e),e(P2e,T0r),e(iM,M0r),e(iM,gH),e(gH,E0r),e(iM,C0r),e(ce,w0r),e(ce,dM),e(dM,I2e),e(I2e,A0r),e(dM,y0r),e(dM,hH),e(hH,L0r),e(dM,x0r),e(ce,$0r),e(ce,cM),e(cM,q2e),e(q2e,k0r),e(cM,S0r),e(cM,pH),e(pH,R0r),e(cM,B0r),e(ce,P0r),e(ce,fM),e(fM,N2e),e(N2e,I0r),e(fM,q0r),e(fM,uH),e(uH,N0r),e(fM,j0r),e(ce,D0r),e(ce,mM),e(mM,j2e),e(j2e,G0r),e(mM,O0r),e(mM,_H),e(_H,V0r),e(mM,X0r),e(ce,z0r),e(ce,gM),e(gM,D2e),e(D2e,Q0r),e(gM,W0r),e(gM,bH),e(bH,H0r),e(gM,U0r),e(Sr,J0r),M(hM,Sr,null),b(f,uPe,_),b(f,cc,_),e(cc,pM),e(pM,G2e),M(e8,G2e,null),e(cc,Y0r),e(cc,O2e),e(O2e,K0r),b(f,_Pe,_),b(f,sr,_),M(o8,sr,null),e(sr,Z0r),e(sr,fc),e(fc,eTr),e(fc,vH),e(vH,oTr),e(fc,rTr),e(fc,FH),e(FH,tTr),e(fc,aTr),e(sr,nTr),e(sr,r8),e(r8,sTr),e(r8,V2e),e(V2e,lTr),e(r8,iTr),e(sr,dTr),e(sr,Rt),M(t8,Rt,null),e(Rt,cTr),e(Rt,X2e),e(X2e,fTr),e(Rt,mTr),e(Rt,mc),e(mc,gTr),e(mc,z2e),e(z2e,hTr),e(mc,pTr),e(mc,TH),e(TH,uTr),e(mc,_Tr),e(Rt,bTr),M(uM,Rt,null),e(sr,vTr),e(sr,Rr),M(a8,Rr,null),e(Rr,FTr),e(Rr,Q2e),e(Q2e,TTr),e(Rr,MTr),e(Rr,nn),e(nn,ETr),e(nn,W2e),e(W2e,CTr),e(nn,wTr),e(nn,H2e),e(H2e,ATr),e(nn,yTr),e(nn,U2e),e(U2e,LTr),e(nn,xTr),e(Rr,$Tr),e(Rr,J2e),e(J2e,_M),e(_M,Y2e),e(Y2e,kTr),e(_M,STr),e(_M,MH),e(MH,RTr),e(_M,BTr),e(Rr,PTr),M(bM,Rr,null),b(f,bPe,_),b(f,gc,_),e(gc,vM),e(vM,K2e),M(n8,K2e,null),e(gc,ITr),e(gc,Z2e),e(Z2e,qTr),b(f,vPe,_),b(f,lr,_),M(s8,lr,null),e(lr,NTr),e(lr,hc),e(hc,jTr),e(hc,EH),e(EH,DTr),e(hc,GTr),e(hc,CH),e(CH,OTr),e(hc,VTr),e(lr,XTr),e(lr,l8),e(l8,zTr),e(l8,e5e),e(e5e,QTr),e(l8,WTr),e(lr,HTr),e(lr,Bt),M(i8,Bt,null),e(Bt,UTr),e(Bt,o5e),e(o5e,JTr),e(Bt,YTr),e(Bt,pc),e(pc,KTr),e(pc,r5e),e(r5e,ZTr),e(pc,e7r),e(pc,wH),e(wH,o7r),e(pc,r7r),e(Bt,t7r),M(FM,Bt,null),e(lr,a7r),e(lr,Br),M(d8,Br,null),e(Br,n7r),e(Br,t5e),e(t5e,s7r),e(Br,l7r),e(Br,sn),e(sn,i7r),e(sn,a5e),e(a5e,d7r),e(sn,c7r),e(sn,n5e),e(n5e,f7r),e(sn,m7r),e(sn,s5e),e(s5e,g7r),e(sn,h7r),e(Br,p7r),e(Br,l5e),e(l5e,TM),e(TM,i5e),e(i5e,u7r),e(TM,_7r),e(TM,AH),e(AH,b7r),e(TM,v7r),e(Br,F7r),M(MM,Br,null),b(f,FPe,_),b(f,uc,_),e(uc,EM),e(EM,d5e),M(c8,d5e,null),e(uc,T7r),e(uc,c5e),e(c5e,M7r),b(f,TPe,_),b(f,ir,_),M(f8,ir,null),e(ir,E7r),e(ir,_c),e(_c,C7r),e(_c,yH),e(yH,w7r),e(_c,A7r),e(_c,LH),e(LH,y7r),e(_c,L7r),e(ir,x7r),e(ir,m8),e(m8,$7r),e(m8,f5e),e(f5e,k7r),e(m8,S7r),e(ir,R7r),e(ir,Pt),M(g8,Pt,null),e(Pt,B7r),e(Pt,m5e),e(m5e,P7r),e(Pt,I7r),e(Pt,bc),e(bc,q7r),e(bc,g5e),e(g5e,N7r),e(bc,j7r),e(bc,xH),e(xH,D7r),e(bc,G7r),e(Pt,O7r),M(CM,Pt,null),e(ir,V7r),e(ir,Pr),M(h8,Pr,null),e(Pr,X7r),e(Pr,h5e),e(h5e,z7r),e(Pr,Q7r),e(Pr,ln),e(ln,W7r),e(ln,p5e),e(p5e,H7r),e(ln,U7r),e(ln,u5e),e(u5e,J7r),e(ln,Y7r),e(ln,_5e),e(_5e,K7r),e(ln,Z7r),e(Pr,eMr),e(Pr,oe),e(oe,wM),e(wM,b5e),e(b5e,oMr),e(wM,rMr),e(wM,$H),e($H,tMr),e(wM,aMr),e(oe,nMr),e(oe,AM),e(AM,v5e),e(v5e,sMr),e(AM,lMr),e(AM,kH),e(kH,iMr),e(AM,dMr),e(oe,cMr),e(oe,yM),e(yM,F5e),e(F5e,fMr),e(yM,mMr),e(yM,SH),e(SH,gMr),e(yM,hMr),e(oe,pMr),e(oe,LM),e(LM,T5e),e(T5e,uMr),e(LM,_Mr),e(LM,RH),e(RH,bMr),e(LM,vMr),e(oe,FMr),e(oe,xM),e(xM,M5e),e(M5e,TMr),e(xM,MMr),e(xM,BH),e(BH,EMr),e(xM,CMr),e(oe,wMr),e(oe,$M),e($M,E5e),e(E5e,AMr),e($M,yMr),e($M,PH),e(PH,LMr),e($M,xMr),e(oe,$Mr),e(oe,kM),e(kM,C5e),e(C5e,kMr),e(kM,SMr),e(kM,IH),e(IH,RMr),e(kM,BMr),e(oe,PMr),e(oe,SM),e(SM,w5e),e(w5e,IMr),e(SM,qMr),e(SM,qH),e(qH,NMr),e(SM,jMr),e(oe,DMr),e(oe,RM),e(RM,A5e),e(A5e,GMr),e(RM,OMr),e(RM,NH),e(NH,VMr),e(RM,XMr),e(oe,zMr),e(oe,BM),e(BM,y5e),e(y5e,QMr),e(BM,WMr),e(BM,jH),e(jH,HMr),e(BM,UMr),e(oe,JMr),e(oe,PM),e(PM,L5e),e(L5e,YMr),e(PM,KMr),e(PM,DH),e(DH,ZMr),e(PM,eEr),e(oe,oEr),e(oe,IM),e(IM,x5e),e(x5e,rEr),e(IM,tEr),e(IM,GH),e(GH,aEr),e(IM,nEr),e(oe,sEr),e(oe,qM),e(qM,$5e),e($5e,lEr),e(qM,iEr),e(qM,OH),e(OH,dEr),e(qM,cEr),e(oe,fEr),e(oe,NM),e(NM,k5e),e(k5e,mEr),e(NM,gEr),e(NM,VH),e(VH,hEr),e(NM,pEr),e(oe,uEr),e(oe,jM),e(jM,S5e),e(S5e,_Er),e(jM,bEr),e(jM,XH),e(XH,vEr),e(jM,FEr),e(oe,TEr),e(oe,DM),e(DM,R5e),e(R5e,MEr),e(DM,EEr),e(DM,zH),e(zH,CEr),e(DM,wEr),e(oe,AEr),e(oe,GM),e(GM,B5e),e(B5e,yEr),e(GM,LEr),e(GM,QH),e(QH,xEr),e(GM,$Er),e(oe,kEr),e(oe,OM),e(OM,P5e),e(P5e,SEr),e(OM,REr),e(OM,WH),e(WH,BEr),e(OM,PEr),e(oe,IEr),e(oe,VM),e(VM,I5e),e(I5e,qEr),e(VM,NEr),e(VM,HH),e(HH,jEr),e(VM,DEr),e(oe,GEr),e(oe,XM),e(XM,q5e),e(q5e,OEr),e(XM,VEr),e(XM,UH),e(UH,XEr),e(XM,zEr),e(oe,QEr),e(oe,zM),e(zM,N5e),e(N5e,WEr),e(zM,HEr),e(zM,JH),e(JH,UEr),e(zM,JEr),e(oe,YEr),e(oe,QM),e(QM,j5e),e(j5e,KEr),e(QM,ZEr),e(QM,YH),e(YH,eCr),e(QM,oCr),e(oe,rCr),e(oe,WM),e(WM,D5e),e(D5e,tCr),e(WM,aCr),e(WM,KH),e(KH,nCr),e(WM,sCr),e(oe,lCr),e(oe,HM),e(HM,G5e),e(G5e,iCr),e(HM,dCr),e(HM,ZH),e(ZH,cCr),e(HM,fCr),e(oe,mCr),e(oe,UM),e(UM,O5e),e(O5e,gCr),e(UM,hCr),e(UM,eU),e(eU,pCr),e(UM,uCr),e(Pr,_Cr),M(JM,Pr,null),b(f,MPe,_),b(f,vc,_),e(vc,YM),e(YM,V5e),M(p8,V5e,null),e(vc,bCr),e(vc,X5e),e(X5e,vCr),b(f,EPe,_),b(f,dr,_),M(u8,dr,null),e(dr,FCr),e(dr,Fc),e(Fc,TCr),e(Fc,oU),e(oU,MCr),e(Fc,ECr),e(Fc,rU),e(rU,CCr),e(Fc,wCr),e(dr,ACr),e(dr,_8),e(_8,yCr),e(_8,z5e),e(z5e,LCr),e(_8,xCr),e(dr,$Cr),e(dr,It),M(b8,It,null),e(It,kCr),e(It,Q5e),e(Q5e,SCr),e(It,RCr),e(It,Tc),e(Tc,BCr),e(Tc,W5e),e(W5e,PCr),e(Tc,ICr),e(Tc,tU),e(tU,qCr),e(Tc,NCr),e(It,jCr),M(KM,It,null),e(dr,DCr),e(dr,Ir),M(v8,Ir,null),e(Ir,GCr),e(Ir,H5e),e(H5e,OCr),e(Ir,VCr),e(Ir,dn),e(dn,XCr),e(dn,U5e),e(U5e,zCr),e(dn,QCr),e(dn,J5e),e(J5e,WCr),e(dn,HCr),e(dn,Y5e),e(Y5e,UCr),e(dn,JCr),e(Ir,YCr),e(Ir,Hr),e(Hr,ZM),e(ZM,K5e),e(K5e,KCr),e(ZM,ZCr),e(ZM,aU),e(aU,e3r),e(ZM,o3r),e(Hr,r3r),e(Hr,eE),e(eE,Z5e),e(Z5e,t3r),e(eE,a3r),e(eE,nU),e(nU,n3r),e(eE,s3r),e(Hr,l3r),e(Hr,oE),e(oE,eve),e(eve,i3r),e(oE,d3r),e(oE,sU),e(sU,c3r),e(oE,f3r),e(Hr,m3r),e(Hr,rE),e(rE,ove),e(ove,g3r),e(rE,h3r),e(rE,lU),e(lU,p3r),e(rE,u3r),e(Hr,_3r),e(Hr,tE),e(tE,rve),e(rve,b3r),e(tE,v3r),e(tE,iU),e(iU,F3r),e(tE,T3r),e(Ir,M3r),M(aE,Ir,null),b(f,CPe,_),b(f,Mc,_),e(Mc,nE),e(nE,tve),M(F8,tve,null),e(Mc,E3r),e(Mc,ave),e(ave,C3r),b(f,wPe,_),b(f,cr,_),M(T8,cr,null),e(cr,w3r),e(cr,Ec),e(Ec,A3r),e(Ec,dU),e(dU,y3r),e(Ec,L3r),e(Ec,cU),e(cU,x3r),e(Ec,$3r),e(cr,k3r),e(cr,M8),e(M8,S3r),e(M8,nve),e(nve,R3r),e(M8,B3r),e(cr,P3r),e(cr,qt),M(E8,qt,null),e(qt,I3r),e(qt,sve),e(sve,q3r),e(qt,N3r),e(qt,Cc),e(Cc,j3r),e(Cc,lve),e(lve,D3r),e(Cc,G3r),e(Cc,fU),e(fU,O3r),e(Cc,V3r),e(qt,X3r),M(sE,qt,null),e(cr,z3r),e(cr,qr),M(C8,qr,null),e(qr,Q3r),e(qr,ive),e(ive,W3r),e(qr,H3r),e(qr,cn),e(cn,U3r),e(cn,dve),e(dve,J3r),e(cn,Y3r),e(cn,cve),e(cve,K3r),e(cn,Z3r),e(cn,fve),e(fve,ewr),e(cn,owr),e(qr,rwr),e(qr,Me),e(Me,lE),e(lE,mve),e(mve,twr),e(lE,awr),e(lE,mU),e(mU,nwr),e(lE,swr),e(Me,lwr),e(Me,iE),e(iE,gve),e(gve,iwr),e(iE,dwr),e(iE,gU),e(gU,cwr),e(iE,fwr),e(Me,mwr),e(Me,dE),e(dE,hve),e(hve,gwr),e(dE,hwr),e(dE,hU),e(hU,pwr),e(dE,uwr),e(Me,_wr),e(Me,cE),e(cE,pve),e(pve,bwr),e(cE,vwr),e(cE,pU),e(pU,Fwr),e(cE,Twr),e(Me,Mwr),e(Me,fE),e(fE,uve),e(uve,Ewr),e(fE,Cwr),e(fE,uU),e(uU,wwr),e(fE,Awr),e(Me,ywr),e(Me,mE),e(mE,_ve),e(_ve,Lwr),e(mE,xwr),e(mE,_U),e(_U,$wr),e(mE,kwr),e(Me,Swr),e(Me,gE),e(gE,bve),e(bve,Rwr),e(gE,Bwr),e(gE,bU),e(bU,Pwr),e(gE,Iwr),e(Me,qwr),e(Me,hE),e(hE,vve),e(vve,Nwr),e(hE,jwr),e(hE,vU),e(vU,Dwr),e(hE,Gwr),e(Me,Owr),e(Me,pE),e(pE,Fve),e(Fve,Vwr),e(pE,Xwr),e(pE,FU),e(FU,zwr),e(pE,Qwr),e(Me,Wwr),e(Me,uE),e(uE,Tve),e(Tve,Hwr),e(uE,Uwr),e(uE,TU),e(TU,Jwr),e(uE,Ywr),e(Me,Kwr),e(Me,_E),e(_E,Mve),e(Mve,Zwr),e(_E,eAr),e(_E,MU),e(MU,oAr),e(_E,rAr),e(Me,tAr),e(Me,bE),e(bE,Eve),e(Eve,aAr),e(bE,nAr),e(bE,EU),e(EU,sAr),e(bE,lAr),e(qr,iAr),M(vE,qr,null),b(f,APe,_),b(f,wc,_),e(wc,FE),e(FE,Cve),M(w8,Cve,null),e(wc,dAr),e(wc,wve),e(wve,cAr),b(f,yPe,_),b(f,fr,_),M(A8,fr,null),e(fr,fAr),e(fr,Ac),e(Ac,mAr),e(Ac,CU),e(CU,gAr),e(Ac,hAr),e(Ac,wU),e(wU,pAr),e(Ac,uAr),e(fr,_Ar),e(fr,y8),e(y8,bAr),e(y8,Ave),e(Ave,vAr),e(y8,FAr),e(fr,TAr),e(fr,Nt),M(L8,Nt,null),e(Nt,MAr),e(Nt,yve),e(yve,EAr),e(Nt,CAr),e(Nt,yc),e(yc,wAr),e(yc,Lve),e(Lve,AAr),e(yc,yAr),e(yc,AU),e(AU,LAr),e(yc,xAr),e(Nt,$Ar),M(TE,Nt,null),e(fr,kAr),e(fr,Nr),M(x8,Nr,null),e(Nr,SAr),e(Nr,xve),e(xve,RAr),e(Nr,BAr),e(Nr,fn),e(fn,PAr),e(fn,$ve),e($ve,IAr),e(fn,qAr),e(fn,kve),e(kve,NAr),e(fn,jAr),e(fn,Sve),e(Sve,DAr),e(fn,GAr),e(Nr,OAr),e(Nr,Le),e(Le,ME),e(ME,Rve),e(Rve,VAr),e(ME,XAr),e(ME,yU),e(yU,zAr),e(ME,QAr),e(Le,WAr),e(Le,EE),e(EE,Bve),e(Bve,HAr),e(EE,UAr),e(EE,LU),e(LU,JAr),e(EE,YAr),e(Le,KAr),e(Le,CE),e(CE,Pve),e(Pve,ZAr),e(CE,e6r),e(CE,xU),e(xU,o6r),e(CE,r6r),e(Le,t6r),e(Le,wE),e(wE,Ive),e(Ive,a6r),e(wE,n6r),e(wE,$U),e($U,s6r),e(wE,l6r),e(Le,i6r),e(Le,AE),e(AE,qve),e(qve,d6r),e(AE,c6r),e(AE,kU),e(kU,f6r),e(AE,m6r),e(Le,g6r),e(Le,yE),e(yE,Nve),e(Nve,h6r),e(yE,p6r),e(yE,SU),e(SU,u6r),e(yE,_6r),e(Le,b6r),e(Le,LE),e(LE,jve),e(jve,v6r),e(LE,F6r),e(LE,RU),e(RU,T6r),e(LE,M6r),e(Le,E6r),e(Le,xE),e(xE,Dve),e(Dve,C6r),e(xE,w6r),e(xE,BU),e(BU,A6r),e(xE,y6r),e(Le,L6r),e(Le,$E),e($E,Gve),e(Gve,x6r),e($E,$6r),e($E,PU),e(PU,k6r),e($E,S6r),e(Le,R6r),e(Le,kE),e(kE,Ove),e(Ove,B6r),e(kE,P6r),e(kE,IU),e(IU,I6r),e(kE,q6r),e(Nr,N6r),M(SE,Nr,null),b(f,LPe,_),b(f,Lc,_),e(Lc,RE),e(RE,Vve),M($8,Vve,null),e(Lc,j6r),e(Lc,Xve),e(Xve,D6r),b(f,xPe,_),b(f,mr,_),M(k8,mr,null),e(mr,G6r),e(mr,xc),e(xc,O6r),e(xc,qU),e(qU,V6r),e(xc,X6r),e(xc,NU),e(NU,z6r),e(xc,Q6r),e(mr,W6r),e(mr,S8),e(S8,H6r),e(S8,zve),e(zve,U6r),e(S8,J6r),e(mr,Y6r),e(mr,jt),M(R8,jt,null),e(jt,K6r),e(jt,Qve),e(Qve,Z6r),e(jt,eyr),e(jt,$c),e($c,oyr),e($c,Wve),e(Wve,ryr),e($c,tyr),e($c,jU),e(jU,ayr),e($c,nyr),e(jt,syr),M(BE,jt,null),e(mr,lyr),e(mr,jr),M(B8,jr,null),e(jr,iyr),e(jr,Hve),e(Hve,dyr),e(jr,cyr),e(jr,mn),e(mn,fyr),e(mn,Uve),e(Uve,myr),e(mn,gyr),e(mn,Jve),e(Jve,hyr),e(mn,pyr),e(mn,Yve),e(Yve,uyr),e(mn,_yr),e(jr,byr),e(jr,ke),e(ke,PE),e(PE,Kve),e(Kve,vyr),e(PE,Fyr),e(PE,DU),e(DU,Tyr),e(PE,Myr),e(ke,Eyr),e(ke,IE),e(IE,Zve),e(Zve,Cyr),e(IE,wyr),e(IE,GU),e(GU,Ayr),e(IE,yyr),e(ke,Lyr),e(ke,qE),e(qE,eFe),e(eFe,xyr),e(qE,$yr),e(qE,OU),e(OU,kyr),e(qE,Syr),e(ke,Ryr),e(ke,NE),e(NE,oFe),e(oFe,Byr),e(NE,Pyr),e(NE,VU),e(VU,Iyr),e(NE,qyr),e(ke,Nyr),e(ke,jE),e(jE,rFe),e(rFe,jyr),e(jE,Dyr),e(jE,XU),e(XU,Gyr),e(jE,Oyr),e(ke,Vyr),e(ke,DE),e(DE,tFe),e(tFe,Xyr),e(DE,zyr),e(DE,zU),e(zU,Qyr),e(DE,Wyr),e(ke,Hyr),e(ke,GE),e(GE,aFe),e(aFe,Uyr),e(GE,Jyr),e(GE,QU),e(QU,Yyr),e(GE,Kyr),e(ke,Zyr),e(ke,OE),e(OE,nFe),e(nFe,eLr),e(OE,oLr),e(OE,WU),e(WU,rLr),e(OE,tLr),e(ke,aLr),e(ke,VE),e(VE,sFe),e(sFe,nLr),e(VE,sLr),e(VE,HU),e(HU,lLr),e(VE,iLr),e(jr,dLr),M(XE,jr,null),b(f,$Pe,_),b(f,kc,_),e(kc,zE),e(zE,lFe),M(P8,lFe,null),e(kc,cLr),e(kc,iFe),e(iFe,fLr),b(f,kPe,_),b(f,gr,_),M(I8,gr,null),e(gr,mLr),e(gr,Sc),e(Sc,gLr),e(Sc,UU),e(UU,hLr),e(Sc,pLr),e(Sc,JU),e(JU,uLr),e(Sc,_Lr),e(gr,bLr),e(gr,q8),e(q8,vLr),e(q8,dFe),e(dFe,FLr),e(q8,TLr),e(gr,MLr),e(gr,Dt),M(N8,Dt,null),e(Dt,ELr),e(Dt,cFe),e(cFe,CLr),e(Dt,wLr),e(Dt,Rc),e(Rc,ALr),e(Rc,fFe),e(fFe,yLr),e(Rc,LLr),e(Rc,YU),e(YU,xLr),e(Rc,$Lr),e(Dt,kLr),M(QE,Dt,null),e(gr,SLr),e(gr,Dr),M(j8,Dr,null),e(Dr,RLr),e(Dr,mFe),e(mFe,BLr),e(Dr,PLr),e(Dr,gn),e(gn,ILr),e(gn,gFe),e(gFe,qLr),e(gn,NLr),e(gn,hFe),e(hFe,jLr),e(gn,DLr),e(gn,pFe),e(pFe,GLr),e(gn,OLr),e(Dr,VLr),e(Dr,xe),e(xe,WE),e(WE,uFe),e(uFe,XLr),e(WE,zLr),e(WE,KU),e(KU,QLr),e(WE,WLr),e(xe,HLr),e(xe,HE),e(HE,_Fe),e(_Fe,ULr),e(HE,JLr),e(HE,ZU),e(ZU,YLr),e(HE,KLr),e(xe,ZLr),e(xe,UE),e(UE,bFe),e(bFe,e8r),e(UE,o8r),e(UE,eJ),e(eJ,r8r),e(UE,t8r),e(xe,a8r),e(xe,JE),e(JE,vFe),e(vFe,n8r),e(JE,s8r),e(JE,oJ),e(oJ,l8r),e(JE,i8r),e(xe,d8r),e(xe,YE),e(YE,FFe),e(FFe,c8r),e(YE,f8r),e(YE,rJ),e(rJ,m8r),e(YE,g8r),e(xe,h8r),e(xe,KE),e(KE,TFe),e(TFe,p8r),e(KE,u8r),e(KE,tJ),e(tJ,_8r),e(KE,b8r),e(xe,v8r),e(xe,ZE),e(ZE,MFe),e(MFe,F8r),e(ZE,T8r),e(ZE,aJ),e(aJ,M8r),e(ZE,E8r),e(xe,C8r),e(xe,eC),e(eC,EFe),e(EFe,w8r),e(eC,A8r),e(eC,nJ),e(nJ,y8r),e(eC,L8r),e(xe,x8r),e(xe,oC),e(oC,CFe),e(CFe,$8r),e(oC,k8r),e(oC,sJ),e(sJ,S8r),e(oC,R8r),e(xe,B8r),e(xe,rC),e(rC,wFe),e(wFe,P8r),e(rC,I8r),e(rC,lJ),e(lJ,q8r),e(rC,N8r),e(Dr,j8r),M(tC,Dr,null),b(f,SPe,_),b(f,Bc,_),e(Bc,aC),e(aC,AFe),M(D8,AFe,null),e(Bc,D8r),e(Bc,yFe),e(yFe,G8r),b(f,RPe,_),b(f,hr,_),M(G8,hr,null),e(hr,O8r),e(hr,Pc),e(Pc,V8r),e(Pc,iJ),e(iJ,X8r),e(Pc,z8r),e(Pc,dJ),e(dJ,Q8r),e(Pc,W8r),e(hr,H8r),e(hr,O8),e(O8,U8r),e(O8,LFe),e(LFe,J8r),e(O8,Y8r),e(hr,K8r),e(hr,Gt),M(V8,Gt,null),e(Gt,Z8r),e(Gt,xFe),e(xFe,exr),e(Gt,oxr),e(Gt,Ic),e(Ic,rxr),e(Ic,$Fe),e($Fe,txr),e(Ic,axr),e(Ic,cJ),e(cJ,nxr),e(Ic,sxr),e(Gt,lxr),M(nC,Gt,null),e(hr,ixr),e(hr,Gr),M(X8,Gr,null),e(Gr,dxr),e(Gr,kFe),e(kFe,cxr),e(Gr,fxr),e(Gr,hn),e(hn,mxr),e(hn,SFe),e(SFe,gxr),e(hn,hxr),e(hn,RFe),e(RFe,pxr),e(hn,uxr),e(hn,BFe),e(BFe,_xr),e(hn,bxr),e(Gr,vxr),e(Gr,$e),e($e,sC),e(sC,PFe),e(PFe,Fxr),e(sC,Txr),e(sC,fJ),e(fJ,Mxr),e(sC,Exr),e($e,Cxr),e($e,lC),e(lC,IFe),e(IFe,wxr),e(lC,Axr),e(lC,mJ),e(mJ,yxr),e(lC,Lxr),e($e,xxr),e($e,iC),e(iC,qFe),e(qFe,$xr),e(iC,kxr),e(iC,gJ),e(gJ,Sxr),e(iC,Rxr),e($e,Bxr),e($e,dC),e(dC,NFe),e(NFe,Pxr),e(dC,Ixr),e(dC,hJ),e(hJ,qxr),e(dC,Nxr),e($e,jxr),e($e,cC),e(cC,jFe),e(jFe,Dxr),e(cC,Gxr),e(cC,pJ),e(pJ,Oxr),e(cC,Vxr),e($e,Xxr),e($e,fC),e(fC,DFe),e(DFe,zxr),e(fC,Qxr),e(fC,uJ),e(uJ,Wxr),e(fC,Hxr),e($e,Uxr),e($e,mC),e(mC,GFe),e(GFe,Jxr),e(mC,Yxr),e(mC,_J),e(_J,Kxr),e(mC,Zxr),e($e,e9r),e($e,gC),e(gC,OFe),e(OFe,o9r),e(gC,r9r),e(gC,bJ),e(bJ,t9r),e(gC,a9r),e($e,n9r),e($e,hC),e(hC,VFe),e(VFe,s9r),e(hC,l9r),e(hC,vJ),e(vJ,i9r),e(hC,d9r),e($e,c9r),e($e,pC),e(pC,XFe),e(XFe,f9r),e(pC,m9r),e(pC,FJ),e(FJ,g9r),e(pC,h9r),e(Gr,p9r),M(uC,Gr,null),b(f,BPe,_),b(f,qc,_),e(qc,_C),e(_C,zFe),M(z8,zFe,null),e(qc,u9r),e(qc,QFe),e(QFe,_9r),b(f,PPe,_),b(f,pr,_),M(Q8,pr,null),e(pr,b9r),e(pr,Nc),e(Nc,v9r),e(Nc,TJ),e(TJ,F9r),e(Nc,T9r),e(Nc,MJ),e(MJ,M9r),e(Nc,E9r),e(pr,C9r),e(pr,W8),e(W8,w9r),e(W8,WFe),e(WFe,A9r),e(W8,y9r),e(pr,L9r),e(pr,Ot),M(H8,Ot,null),e(Ot,x9r),e(Ot,HFe),e(HFe,$9r),e(Ot,k9r),e(Ot,jc),e(jc,S9r),e(jc,UFe),e(UFe,R9r),e(jc,B9r),e(jc,EJ),e(EJ,P9r),e(jc,I9r),e(Ot,q9r),M(bC,Ot,null),e(pr,N9r),e(pr,Or),M(U8,Or,null),e(Or,j9r),e(Or,JFe),e(JFe,D9r),e(Or,G9r),e(Or,pn),e(pn,O9r),e(pn,YFe),e(YFe,V9r),e(pn,X9r),e(pn,KFe),e(KFe,z9r),e(pn,Q9r),e(pn,ZFe),e(ZFe,W9r),e(pn,H9r),e(Or,U9r),e(Or,je),e(je,vC),e(vC,e0e),e(e0e,J9r),e(vC,Y9r),e(vC,CJ),e(CJ,K9r),e(vC,Z9r),e(je,e$r),e(je,FC),e(FC,o0e),e(o0e,o$r),e(FC,r$r),e(FC,wJ),e(wJ,t$r),e(FC,a$r),e(je,n$r),e(je,TC),e(TC,r0e),e(r0e,s$r),e(TC,l$r),e(TC,AJ),e(AJ,i$r),e(TC,d$r),e(je,c$r),e(je,MC),e(MC,t0e),e(t0e,f$r),e(MC,m$r),e(MC,yJ),e(yJ,g$r),e(MC,h$r),e(je,p$r),e(je,EC),e(EC,a0e),e(a0e,u$r),e(EC,_$r),e(EC,LJ),e(LJ,b$r),e(EC,v$r),e(je,F$r),e(je,CC),e(CC,n0e),e(n0e,T$r),e(CC,M$r),e(CC,xJ),e(xJ,E$r),e(CC,C$r),e(je,w$r),e(je,wC),e(wC,s0e),e(s0e,A$r),e(wC,y$r),e(wC,$J),e($J,L$r),e(wC,x$r),e(je,$$r),e(je,AC),e(AC,l0e),e(l0e,k$r),e(AC,S$r),e(AC,kJ),e(kJ,R$r),e(AC,B$r),e(Or,P$r),M(yC,Or,null),b(f,IPe,_),b(f,Dc,_),e(Dc,LC),e(LC,i0e),M(J8,i0e,null),e(Dc,I$r),e(Dc,d0e),e(d0e,q$r),b(f,qPe,_),b(f,ur,_),M(Y8,ur,null),e(ur,N$r),e(ur,Gc),e(Gc,j$r),e(Gc,SJ),e(SJ,D$r),e(Gc,G$r),e(Gc,RJ),e(RJ,O$r),e(Gc,V$r),e(ur,X$r),e(ur,K8),e(K8,z$r),e(K8,c0e),e(c0e,Q$r),e(K8,W$r),e(ur,H$r),e(ur,Vt),M(Z8,Vt,null),e(Vt,U$r),e(Vt,f0e),e(f0e,J$r),e(Vt,Y$r),e(Vt,Oc),e(Oc,K$r),e(Oc,m0e),e(m0e,Z$r),e(Oc,ekr),e(Oc,BJ),e(BJ,okr),e(Oc,rkr),e(Vt,tkr),M(xC,Vt,null),e(ur,akr),e(ur,Vr),M(ex,Vr,null),e(Vr,nkr),e(Vr,g0e),e(g0e,skr),e(Vr,lkr),e(Vr,un),e(un,ikr),e(un,h0e),e(h0e,dkr),e(un,ckr),e(un,p0e),e(p0e,fkr),e(un,mkr),e(un,u0e),e(u0e,gkr),e(un,hkr),e(Vr,pkr),e(Vr,De),e(De,$C),e($C,_0e),e(_0e,ukr),e($C,_kr),e($C,PJ),e(PJ,bkr),e($C,vkr),e(De,Fkr),e(De,kC),e(kC,b0e),e(b0e,Tkr),e(kC,Mkr),e(kC,IJ),e(IJ,Ekr),e(kC,Ckr),e(De,wkr),e(De,SC),e(SC,v0e),e(v0e,Akr),e(SC,ykr),e(SC,qJ),e(qJ,Lkr),e(SC,xkr),e(De,$kr),e(De,RC),e(RC,F0e),e(F0e,kkr),e(RC,Skr),e(RC,NJ),e(NJ,Rkr),e(RC,Bkr),e(De,Pkr),e(De,BC),e(BC,T0e),e(T0e,Ikr),e(BC,qkr),e(BC,jJ),e(jJ,Nkr),e(BC,jkr),e(De,Dkr),e(De,PC),e(PC,M0e),e(M0e,Gkr),e(PC,Okr),e(PC,DJ),e(DJ,Vkr),e(PC,Xkr),e(De,zkr),e(De,IC),e(IC,E0e),e(E0e,Qkr),e(IC,Wkr),e(IC,GJ),e(GJ,Hkr),e(IC,Ukr),e(De,Jkr),e(De,qC),e(qC,C0e),e(C0e,Ykr),e(qC,Kkr),e(qC,OJ),e(OJ,Zkr),e(qC,eSr),e(Vr,oSr),M(NC,Vr,null),b(f,NPe,_),b(f,Vc,_),e(Vc,jC),e(jC,w0e),M(ox,w0e,null),e(Vc,rSr),e(Vc,A0e),e(A0e,tSr),b(f,jPe,_),b(f,_r,_),M(rx,_r,null),e(_r,aSr),e(_r,Xc),e(Xc,nSr),e(Xc,VJ),e(VJ,sSr),e(Xc,lSr),e(Xc,XJ),e(XJ,iSr),e(Xc,dSr),e(_r,cSr),e(_r,tx),e(tx,fSr),e(tx,y0e),e(y0e,mSr),e(tx,gSr),e(_r,hSr),e(_r,Xt),M(ax,Xt,null),e(Xt,pSr),e(Xt,L0e),e(L0e,uSr),e(Xt,_Sr),e(Xt,zc),e(zc,bSr),e(zc,x0e),e(x0e,vSr),e(zc,FSr),e(zc,zJ),e(zJ,TSr),e(zc,MSr),e(Xt,ESr),M(DC,Xt,null),e(_r,CSr),e(_r,Xr),M(nx,Xr,null),e(Xr,wSr),e(Xr,$0e),e($0e,ASr),e(Xr,ySr),e(Xr,_n),e(_n,LSr),e(_n,k0e),e(k0e,xSr),e(_n,$Sr),e(_n,S0e),e(S0e,kSr),e(_n,SSr),e(_n,R0e),e(R0e,RSr),e(_n,BSr),e(Xr,PSr),e(Xr,B0e),e(B0e,GC),e(GC,P0e),e(P0e,ISr),e(GC,qSr),e(GC,QJ),e(QJ,NSr),e(GC,jSr),e(Xr,DSr),M(OC,Xr,null),b(f,DPe,_),b(f,Qc,_),e(Qc,VC),e(VC,I0e),M(sx,I0e,null),e(Qc,GSr),e(Qc,q0e),e(q0e,OSr),b(f,GPe,_),b(f,br,_),M(lx,br,null),e(br,VSr),e(br,Wc),e(Wc,XSr),e(Wc,WJ),e(WJ,zSr),e(Wc,QSr),e(Wc,HJ),e(HJ,WSr),e(Wc,HSr),e(br,USr),e(br,ix),e(ix,JSr),e(ix,N0e),e(N0e,YSr),e(ix,KSr),e(br,ZSr),e(br,zt),M(dx,zt,null),e(zt,eRr),e(zt,j0e),e(j0e,oRr),e(zt,rRr),e(zt,Hc),e(Hc,tRr),e(Hc,D0e),e(D0e,aRr),e(Hc,nRr),e(Hc,UJ),e(UJ,sRr),e(Hc,lRr),e(zt,iRr),M(XC,zt,null),e(br,dRr),e(br,zr),M(cx,zr,null),e(zr,cRr),e(zr,G0e),e(G0e,fRr),e(zr,mRr),e(zr,bn),e(bn,gRr),e(bn,O0e),e(O0e,hRr),e(bn,pRr),e(bn,V0e),e(V0e,uRr),e(bn,_Rr),e(bn,X0e),e(X0e,bRr),e(bn,vRr),e(zr,FRr),e(zr,fx),e(fx,zC),e(zC,z0e),e(z0e,TRr),e(zC,MRr),e(zC,JJ),e(JJ,ERr),e(zC,CRr),e(fx,wRr),e(fx,QC),e(QC,Q0e),e(Q0e,ARr),e(QC,yRr),e(QC,YJ),e(YJ,LRr),e(QC,xRr),e(zr,$Rr),M(WC,zr,null),b(f,OPe,_),b(f,Uc,_),e(Uc,HC),e(HC,W0e),M(mx,W0e,null),e(Uc,kRr),e(Uc,H0e),e(H0e,SRr),b(f,VPe,_),b(f,vr,_),M(gx,vr,null),e(vr,RRr),e(vr,Jc),e(Jc,BRr),e(Jc,KJ),e(KJ,PRr),e(Jc,IRr),e(Jc,ZJ),e(ZJ,qRr),e(Jc,NRr),e(vr,jRr),e(vr,hx),e(hx,DRr),e(hx,U0e),e(U0e,GRr),e(hx,ORr),e(vr,VRr),e(vr,Qt),M(px,Qt,null),e(Qt,XRr),e(Qt,J0e),e(J0e,zRr),e(Qt,QRr),e(Qt,Yc),e(Yc,WRr),e(Yc,Y0e),e(Y0e,HRr),e(Yc,URr),e(Yc,eY),e(eY,JRr),e(Yc,YRr),e(Qt,KRr),M(UC,Qt,null),e(vr,ZRr),e(vr,Qr),M(ux,Qr,null),e(Qr,eBr),e(Qr,K0e),e(K0e,oBr),e(Qr,rBr),e(Qr,vn),e(vn,tBr),e(vn,Z0e),e(Z0e,aBr),e(vn,nBr),e(vn,eTe),e(eTe,sBr),e(vn,lBr),e(vn,oTe),e(oTe,iBr),e(vn,dBr),e(Qr,cBr),e(Qr,rTe),e(rTe,JC),e(JC,tTe),e(tTe,fBr),e(JC,mBr),e(JC,oY),e(oY,gBr),e(JC,hBr),e(Qr,pBr),M(YC,Qr,null),XPe=!0},p(f,[_]){const _x={};_&2&&(_x.$$scope={dirty:_,ctx:f}),sf.$set(_x);const aTe={};_&2&&(aTe.$$scope={dirty:_,ctx:f}),ag.$set(aTe);const nTe={};_&2&&(nTe.$$scope={dirty:_,ctx:f}),Ig.$set(nTe);const sTe={};_&2&&(sTe.$$scope={dirty:_,ctx:f}),dh.$set(sTe);const bx={};_&2&&(bx.$$scope={dirty:_,ctx:f}),ch.$set(bx);const lTe={};_&2&&(lTe.$$scope={dirty:_,ctx:f}),yh.$set(lTe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),Lh.$set(Fn);const iTe={};_&2&&(iTe.$$scope={dirty:_,ctx:f}),kh.$set(iTe);const dTe={};_&2&&(dTe.$$scope={dirty:_,ctx:f}),vu.$set(dTe);const cTe={};_&2&&(cTe.$$scope={dirty:_,ctx:f}),Tu.$set(cTe);const vx={};_&2&&(vx.$$scope={dirty:_,ctx:f}),i_.$set(vx);const fTe={};_&2&&(fTe.$$scope={dirty:_,ctx:f}),c_.$set(fTe);const Fx={};_&2&&(Fx.$$scope={dirty:_,ctx:f}),W_.$set(Fx);const mTe={};_&2&&(mTe.$$scope={dirty:_,ctx:f}),U_.$set(mTe);const Tx={};_&2&&(Tx.$$scope={dirty:_,ctx:f}),S1.$set(Tx);const gTe={};_&2&&(gTe.$$scope={dirty:_,ctx:f}),B1.$set(gTe);const hTe={};_&2&&(hTe.$$scope={dirty:_,ctx:f}),Z1.$set(hTe);const pTe={};_&2&&(pTe.$$scope={dirty:_,ctx:f}),ob.$set(pTe);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),Jb.$set(Kc);const uTe={};_&2&&(uTe.$$scope={dirty:_,ctx:f}),Kb.$set(uTe);const _Te={};_&2&&(_Te.$$scope={dirty:_,ctx:f}),L4.$set(_Te);const bTe={};_&2&&(bTe.$$scope={dirty:_,ctx:f}),$4.$set(bTe);const Mx={};_&2&&(Mx.$$scope={dirty:_,ctx:f}),q4.$set(Mx);const vTe={};_&2&&(vTe.$$scope={dirty:_,ctx:f}),j4.$set(vTe);const FTe={};_&2&&(FTe.$$scope={dirty:_,ctx:f}),F2.$set(FTe);const TTe={};_&2&&(TTe.$$scope={dirty:_,ctx:f}),M2.$set(TTe);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),d5.$set(Ur);const Ex={};_&2&&(Ex.$$scope={dirty:_,ctx:f}),f5.$set(Ex);const MTe={};_&2&&(MTe.$$scope={dirty:_,ctx:f}),h5.$set(MTe);const Cx={};_&2&&(Cx.$$scope={dirty:_,ctx:f}),u5.$set(Cx);const ETe={};_&2&&(ETe.$$scope={dirty:_,ctx:f}),x5.$set(ETe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),k5.$set(Jr);const CTe={};_&2&&(CTe.$$scope={dirty:_,ctx:f}),B5.$set(CTe);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),I5.$set(Zc);const wTe={};_&2&&(wTe.$$scope={dirty:_,ctx:f}),Q5.$set(wTe);const ATe={};_&2&&(ATe.$$scope={dirty:_,ctx:f}),H5.$set(ATe);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),ev.$set(y);const KC={};_&2&&(KC.$$scope={dirty:_,ctx:f}),rv.$set(KC);const yTe={};_&2&&(yTe.$$scope={dirty:_,ctx:f}),mv.$set(yTe);const LTe={};_&2&&(LTe.$$scope={dirty:_,ctx:f}),hv.$set(LTe);const ZC={};_&2&&(ZC.$$scope={dirty:_,ctx:f}),bv.$set(ZC);const xTe={};_&2&&(xTe.$$scope={dirty:_,ctx:f}),Fv.$set(xTe);const $Te={};_&2&&($Te.$$scope={dirty:_,ctx:f}),Av.$set($Te);const e3={};_&2&&(e3.$$scope={dirty:_,ctx:f}),Lv.$set(e3);const kTe={};_&2&&(kTe.$$scope={dirty:_,ctx:f}),Rv.$set(kTe);const STe={};_&2&&(STe.$$scope={dirty:_,ctx:f}),Pv.$set(STe);const o3={};_&2&&(o3.$$scope={dirty:_,ctx:f}),jv.$set(o3);const RTe={};_&2&&(RTe.$$scope={dirty:_,ctx:f}),Gv.$set(RTe);const BTe={};_&2&&(BTe.$$scope={dirty:_,ctx:f}),Xv.$set(BTe);const r3={};_&2&&(r3.$$scope={dirty:_,ctx:f}),Qv.$set(r3);const PTe={};_&2&&(PTe.$$scope={dirty:_,ctx:f}),Kv.$set(PTe);const ITe={};_&2&&(ITe.$$scope={dirty:_,ctx:f}),eF.$set(ITe);const t3={};_&2&&(t3.$$scope={dirty:_,ctx:f}),tF.$set(t3);const qTe={};_&2&&(qTe.$$scope={dirty:_,ctx:f}),nF.$set(qTe);const NTe={};_&2&&(NTe.$$scope={dirty:_,ctx:f}),UF.$set(NTe);const a3={};_&2&&(a3.$$scope={dirty:_,ctx:f}),YF.$set(a3);const jTe={};_&2&&(jTe.$$scope={dirty:_,ctx:f}),T0.$set(jTe);const DTe={};_&2&&(DTe.$$scope={dirty:_,ctx:f}),E0.$set(DTe);const n3={};_&2&&(n3.$$scope={dirty:_,ctx:f}),I0.$set(n3);const GTe={};_&2&&(GTe.$$scope={dirty:_,ctx:f}),N0.$set(GTe);const OTe={};_&2&&(OTe.$$scope={dirty:_,ctx:f}),G0.$set(OTe);const s3={};_&2&&(s3.$$scope={dirty:_,ctx:f}),V0.$set(s3);const VTe={};_&2&&(VTe.$$scope={dirty:_,ctx:f}),cT.$set(VTe);const XTe={};_&2&&(XTe.$$scope={dirty:_,ctx:f}),mT.$set(XTe);const l3={};_&2&&(l3.$$scope={dirty:_,ctx:f}),ET.$set(l3);const zTe={};_&2&&(zTe.$$scope={dirty:_,ctx:f}),wT.$set(zTe);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),KT.$set(QTe);const i3={};_&2&&(i3.$$scope={dirty:_,ctx:f}),e7.$set(i3);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),b7.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),F7.$set(HTe);const d3={};_&2&&(d3.$$scope={dirty:_,ctx:f}),M7.$set(d3);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),C7.$set(UTe);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),z7.$set(JTe);const c3={};_&2&&(c3.$$scope={dirty:_,ctx:f}),W7.$set(c3);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),hM.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),uM.$set(KTe);const f3={};_&2&&(f3.$$scope={dirty:_,ctx:f}),bM.$set(f3);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),FM.$set(ZTe);const e7e={};_&2&&(e7e.$$scope={dirty:_,ctx:f}),MM.$set(e7e);const m3={};_&2&&(m3.$$scope={dirty:_,ctx:f}),CM.$set(m3);const o7e={};_&2&&(o7e.$$scope={dirty:_,ctx:f}),JM.$set(o7e);const r7e={};_&2&&(r7e.$$scope={dirty:_,ctx:f}),KM.$set(r7e);const g3={};_&2&&(g3.$$scope={dirty:_,ctx:f}),aE.$set(g3);const t7e={};_&2&&(t7e.$$scope={dirty:_,ctx:f}),sE.$set(t7e);const a7e={};_&2&&(a7e.$$scope={dirty:_,ctx:f}),vE.$set(a7e);const h3={};_&2&&(h3.$$scope={dirty:_,ctx:f}),TE.$set(h3);const n7e={};_&2&&(n7e.$$scope={dirty:_,ctx:f}),SE.$set(n7e);const s7e={};_&2&&(s7e.$$scope={dirty:_,ctx:f}),BE.$set(s7e);const p3={};_&2&&(p3.$$scope={dirty:_,ctx:f}),XE.$set(p3);const l7e={};_&2&&(l7e.$$scope={dirty:_,ctx:f}),QE.$set(l7e);const i7e={};_&2&&(i7e.$$scope={dirty:_,ctx:f}),tC.$set(i7e);const u3={};_&2&&(u3.$$scope={dirty:_,ctx:f}),nC.$set(u3);const d7e={};_&2&&(d7e.$$scope={dirty:_,ctx:f}),uC.$set(d7e);const c7e={};_&2&&(c7e.$$scope={dirty:_,ctx:f}),bC.$set(c7e);const _3={};_&2&&(_3.$$scope={dirty:_,ctx:f}),yC.$set(_3);const f7e={};_&2&&(f7e.$$scope={dirty:_,ctx:f}),xC.$set(f7e);const m7e={};_&2&&(m7e.$$scope={dirty:_,ctx:f}),NC.$set(m7e);const b3={};_&2&&(b3.$$scope={dirty:_,ctx:f}),DC.$set(b3);const g7e={};_&2&&(g7e.$$scope={dirty:_,ctx:f}),OC.$set(g7e);const h7e={};_&2&&(h7e.$$scope={dirty:_,ctx:f}),XC.$set(h7e);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),WC.$set(v3);const p7e={};_&2&&(p7e.$$scope={dirty:_,ctx:f}),UC.$set(p7e);const u7e={};_&2&&(u7e.$$scope={dirty:_,ctx:f}),YC.$set(u7e)},i(f){XPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(_A.$$.fragment,f),E(bA.$$.fragment,f),E(sf.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(EA.$$.fragment,f),E(ag.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(xA.$$.fragment,f),E(Ig.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(PA.$$.fragment,f),E(dh.$$.fragment,f),E(ch.$$.fragment,f),E(IA.$$.fragment,f),E(qA.$$.fragment,f),E(NA.$$.fragment,f),E(GA.$$.fragment,f),E(yh.$$.fragment,f),E(Lh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(kh.$$.fragment,f),E(WA.$$.fragment,f),E(vu.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(YA.$$.fragment,f),E(Tu.$$.fragment,f),E(KA.$$.fragment,f),E(i_.$$.fragment,f),E(ZA.$$.fragment,f),E(e6.$$.fragment,f),E(r6.$$.fragment,f),E(c_.$$.fragment,f),E(t6.$$.fragment,f),E(W_.$$.fragment,f),E(a6.$$.fragment,f),E(n6.$$.fragment,f),E(l6.$$.fragment,f),E(U_.$$.fragment,f),E(i6.$$.fragment,f),E(S1.$$.fragment,f),E(d6.$$.fragment,f),E(c6.$$.fragment,f),E(m6.$$.fragment,f),E(B1.$$.fragment,f),E(g6.$$.fragment,f),E(Z1.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(ob.$$.fragment,f),E(b6.$$.fragment,f),E(Jb.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(M6.$$.fragment,f),E(Kb.$$.fragment,f),E(E6.$$.fragment,f),E(L4.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E($4.$$.fragment,f),E(L6.$$.fragment,f),E(q4.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(j4.$$.fragment,f),E(R6.$$.fragment,f),E(F2.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(M2.$$.fragment,f),E(N6.$$.fragment,f),E(d5.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(f5.$$.fragment,f),E(V6.$$.fragment,f),E(h5.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(u5.$$.fragment,f),E(H6.$$.fragment,f),E(x5.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(k5.$$.fragment,f),E(Z6.$$.fragment,f),E(B5.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(I5.$$.fragment,f),E(ay.$$.fragment,f),E(Q5.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(H5.$$.fragment,f),E(dy.$$.fragment,f),E(ev.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(rv.$$.fragment,f),E(hy.$$.fragment,f),E(mv.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(hv.$$.fragment,f),E(vy.$$.fragment,f),E(bv.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(Fv.$$.fragment,f),E(wy.$$.fragment,f),E(Av.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(Lv.$$.fragment,f),E($y.$$.fragment,f),E(Rv.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(By.$$.fragment,f),E(Pv.$$.fragment,f),E(Py.$$.fragment,f),E(jv.$$.fragment,f),E(qy.$$.fragment,f),E(Ny.$$.fragment,f),E(Dy.$$.fragment,f),E(Gv.$$.fragment,f),E(Gy.$$.fragment,f),E(Xv.$$.fragment,f),E(Oy.$$.fragment,f),E(Vy.$$.fragment,f),E(zy.$$.fragment,f),E(Qv.$$.fragment,f),E(Qy.$$.fragment,f),E(Kv.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Jy.$$.fragment,f),E(eF.$$.fragment,f),E(Yy.$$.fragment,f),E(tF.$$.fragment,f),E(Ky.$$.fragment,f),E(Zy.$$.fragment,f),E(oL.$$.fragment,f),E(nF.$$.fragment,f),E(rL.$$.fragment,f),E(UF.$$.fragment,f),E(tL.$$.fragment,f),E(aL.$$.fragment,f),E(sL.$$.fragment,f),E(YF.$$.fragment,f),E(lL.$$.fragment,f),E(T0.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(E0.$$.fragment,f),E(mL.$$.fragment,f),E(I0.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(N0.$$.fragment,f),E(_L.$$.fragment,f),E(G0.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(V0.$$.fragment,f),E(EL.$$.fragment,f),E(cT.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(mT.$$.fragment,f),E(LL.$$.fragment,f),E(ET.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(wT.$$.fragment,f),E(RL.$$.fragment,f),E(KT.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(e7.$$.fragment,f),E(NL.$$.fragment,f),E(b7.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(F7.$$.fragment,f),E(VL.$$.fragment,f),E(M7.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(C7.$$.fragment,f),E(HL.$$.fragment,f),E(z7.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(W7.$$.fragment,f),E(ZL.$$.fragment,f),E(hM.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(uM.$$.fragment,f),E(a8.$$.fragment,f),E(bM.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(FM.$$.fragment,f),E(d8.$$.fragment,f),E(MM.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(CM.$$.fragment,f),E(h8.$$.fragment,f),E(JM.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(KM.$$.fragment,f),E(v8.$$.fragment,f),E(aE.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(sE.$$.fragment,f),E(C8.$$.fragment,f),E(vE.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(TE.$$.fragment,f),E(x8.$$.fragment,f),E(SE.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(BE.$$.fragment,f),E(B8.$$.fragment,f),E(XE.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(QE.$$.fragment,f),E(j8.$$.fragment,f),E(tC.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(nC.$$.fragment,f),E(X8.$$.fragment,f),E(uC.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(bC.$$.fragment,f),E(U8.$$.fragment,f),E(yC.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(xC.$$.fragment,f),E(ex.$$.fragment,f),E(NC.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(DC.$$.fragment,f),E(nx.$$.fragment,f),E(OC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(XC.$$.fragment,f),E(cx.$$.fragment,f),E(WC.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(UC.$$.fragment,f),E(ux.$$.fragment,f),E(YC.$$.fragment,f),XPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(_A.$$.fragment,f),C(bA.$$.fragment,f),C(sf.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(EA.$$.fragment,f),C(ag.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(xA.$$.fragment,f),C(Ig.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(PA.$$.fragment,f),C(dh.$$.fragment,f),C(ch.$$.fragment,f),C(IA.$$.fragment,f),C(qA.$$.fragment,f),C(NA.$$.fragment,f),C(GA.$$.fragment,f),C(yh.$$.fragment,f),C(Lh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(kh.$$.fragment,f),C(WA.$$.fragment,f),C(vu.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(YA.$$.fragment,f),C(Tu.$$.fragment,f),C(KA.$$.fragment,f),C(i_.$$.fragment,f),C(ZA.$$.fragment,f),C(e6.$$.fragment,f),C(r6.$$.fragment,f),C(c_.$$.fragment,f),C(t6.$$.fragment,f),C(W_.$$.fragment,f),C(a6.$$.fragment,f),C(n6.$$.fragment,f),C(l6.$$.fragment,f),C(U_.$$.fragment,f),C(i6.$$.fragment,f),C(S1.$$.fragment,f),C(d6.$$.fragment,f),C(c6.$$.fragment,f),C(m6.$$.fragment,f),C(B1.$$.fragment,f),C(g6.$$.fragment,f),C(Z1.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(ob.$$.fragment,f),C(b6.$$.fragment,f),C(Jb.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(M6.$$.fragment,f),C(Kb.$$.fragment,f),C(E6.$$.fragment,f),C(L4.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C($4.$$.fragment,f),C(L6.$$.fragment,f),C(q4.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(j4.$$.fragment,f),C(R6.$$.fragment,f),C(F2.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(M2.$$.fragment,f),C(N6.$$.fragment,f),C(d5.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(f5.$$.fragment,f),C(V6.$$.fragment,f),C(h5.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(u5.$$.fragment,f),C(H6.$$.fragment,f),C(x5.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(k5.$$.fragment,f),C(Z6.$$.fragment,f),C(B5.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(I5.$$.fragment,f),C(ay.$$.fragment,f),C(Q5.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(H5.$$.fragment,f),C(dy.$$.fragment,f),C(ev.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(rv.$$.fragment,f),C(hy.$$.fragment,f),C(mv.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(hv.$$.fragment,f),C(vy.$$.fragment,f),C(bv.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(Fv.$$.fragment,f),C(wy.$$.fragment,f),C(Av.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(Lv.$$.fragment,f),C($y.$$.fragment,f),C(Rv.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(By.$$.fragment,f),C(Pv.$$.fragment,f),C(Py.$$.fragment,f),C(jv.$$.fragment,f),C(qy.$$.fragment,f),C(Ny.$$.fragment,f),C(Dy.$$.fragment,f),C(Gv.$$.fragment,f),C(Gy.$$.fragment,f),C(Xv.$$.fragment,f),C(Oy.$$.fragment,f),C(Vy.$$.fragment,f),C(zy.$$.fragment,f),C(Qv.$$.fragment,f),C(Qy.$$.fragment,f),C(Kv.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Jy.$$.fragment,f),C(eF.$$.fragment,f),C(Yy.$$.fragment,f),C(tF.$$.fragment,f),C(Ky.$$.fragment,f),C(Zy.$$.fragment,f),C(oL.$$.fragment,f),C(nF.$$.fragment,f),C(rL.$$.fragment,f),C(UF.$$.fragment,f),C(tL.$$.fragment,f),C(aL.$$.fragment,f),C(sL.$$.fragment,f),C(YF.$$.fragment,f),C(lL.$$.fragment,f),C(T0.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(E0.$$.fragment,f),C(mL.$$.fragment,f),C(I0.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(N0.$$.fragment,f),C(_L.$$.fragment,f),C(G0.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(V0.$$.fragment,f),C(EL.$$.fragment,f),C(cT.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(mT.$$.fragment,f),C(LL.$$.fragment,f),C(ET.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(wT.$$.fragment,f),C(RL.$$.fragment,f),C(KT.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(e7.$$.fragment,f),C(NL.$$.fragment,f),C(b7.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(F7.$$.fragment,f),C(VL.$$.fragment,f),C(M7.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(C7.$$.fragment,f),C(HL.$$.fragment,f),C(z7.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(W7.$$.fragment,f),C(ZL.$$.fragment,f),C(hM.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(uM.$$.fragment,f),C(a8.$$.fragment,f),C(bM.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(FM.$$.fragment,f),C(d8.$$.fragment,f),C(MM.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(CM.$$.fragment,f),C(h8.$$.fragment,f),C(JM.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(KM.$$.fragment,f),C(v8.$$.fragment,f),C(aE.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(sE.$$.fragment,f),C(C8.$$.fragment,f),C(vE.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(TE.$$.fragment,f),C(x8.$$.fragment,f),C(SE.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(BE.$$.fragment,f),C(B8.$$.fragment,f),C(XE.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(QE.$$.fragment,f),C(j8.$$.fragment,f),C(tC.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(nC.$$.fragment,f),C(X8.$$.fragment,f),C(uC.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(bC.$$.fragment,f),C(U8.$$.fragment,f),C(yC.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(xC.$$.fragment,f),C(ex.$$.fragment,f),C(NC.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(DC.$$.fragment,f),C(nx.$$.fragment,f),C(OC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(XC.$$.fragment,f),C(cx.$$.fragment,f),C(WC.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(UC.$$.fragment,f),C(ux.$$.fragment,f),C(YC.$$.fragment,f),XPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(Ie),f&&t(Oe),f&&t(tf),w(ba,f),f&&t(Ve),f&&t(Ae),f&&t(To),f&&t(va),f&&t(VRe),f&&t(ii),w(_A),f&&t(XRe),f&&t(wn),f&&t(zRe),w(bA,f),f&&t(QRe),f&&t(B9),f&&t(WRe),w(sf,f),f&&t(HRe),f&&t(di),w(vA),f&&t(URe),f&&t(Mo),w(FA),w(EA),w(ag),w(CA),f&&t(JRe),f&&t(fi),w(wA),f&&t(YRe),f&&t(Eo),w(AA),w(xA),w(Ig),w($A),f&&t(KRe),f&&t(mi),w(kA),f&&t(ZRe),f&&t(Co),w(SA),w(PA),w(dh),w(ch),w(IA),f&&t(eBe),f&&t(gi),w(qA),f&&t(oBe),f&&t(wo),w(NA),w(GA),w(yh),w(Lh),w(OA),f&&t(rBe),f&&t(pi),w(VA),f&&t(tBe),f&&t(Ao),w(XA),w(QA),w(kh),w(WA),w(vu),f&&t(aBe),f&&t(bi),w(HA),f&&t(nBe),f&&t(yo),w(UA),w(YA),w(Tu),w(KA),w(i_),f&&t(sBe),f&&t(Ti),w(ZA),f&&t(lBe),f&&t(Lo),w(e6),w(r6),w(c_),w(t6),w(W_),f&&t(iBe),f&&t(Ci),w(a6),f&&t(dBe),f&&t(xo),w(n6),w(l6),w(U_),w(i6),w(S1),f&&t(cBe),f&&t(yi),w(d6),f&&t(fBe),f&&t($o),w(c6),w(m6),w(B1),w(g6),w(Z1),f&&t(mBe),f&&t($i),w(h6),f&&t(gBe),f&&t(ko),w(p6),w(_6),w(ob),w(b6),w(Jb),f&&t(hBe),f&&t(Ri),w(v6),f&&t(pBe),f&&t(So),w(F6),w(M6),w(Kb),w(E6),w(L4),f&&t(uBe),f&&t(Ii),w(C6),f&&t(_Be),f&&t(Ro),w(w6),w(y6),w($4),w(L6),w(q4),f&&t(bBe),f&&t(ji),w(x6),f&&t(vBe),f&&t(Bo),w($6),w(S6),w(j4),w(R6),w(F2),f&&t(FBe),f&&t(Oi),w(B6),f&&t(TBe),f&&t(Po),w(P6),w(q6),w(M2),w(N6),w(d5),f&&t(MBe),f&&t(zi),w(j6),f&&t(EBe),f&&t(Io),w(D6),w(O6),w(f5),w(V6),w(h5),f&&t(CBe),f&&t(Hi),w(X6),f&&t(wBe),f&&t(qo),w(z6),w(W6),w(u5),w(H6),w(x5),f&&t(ABe),f&&t(Yi),w(U6),f&&t(yBe),f&&t(No),w(J6),w(K6),w(k5),w(Z6),w(B5),f&&t(LBe),f&&t(ed),w(ey),f&&t(xBe),f&&t(jo),w(oy),w(ty),w(I5),w(ay),w(Q5),f&&t($Be),f&&t(td),w(ny),f&&t(kBe),f&&t(Do),w(sy),w(iy),w(H5),w(dy),w(ev),f&&t(SBe),f&&t(sd),w(cy),f&&t(RBe),f&&t(Go),w(fy),w(gy),w(rv),w(hy),w(mv),f&&t(BBe),f&&t(dd),w(py),f&&t(PBe),f&&t(Oo),w(uy),w(by),w(hv),w(vy),w(bv),f&&t(IBe),f&&t(md),w(Ty),f&&t(qBe),f&&t(Vo),w(My),w(Cy),w(Fv),w(wy),w(Av),f&&t(NBe),f&&t(pd),w(Ay),f&&t(jBe),f&&t(Xo),w(yy),w(xy),w(Lv),w($y),w(Rv),f&&t(DBe),f&&t(vd),w(ky),f&&t(GBe),f&&t(zo),w(Sy),w(By),w(Pv),w(Py),w(jv),f&&t(OBe),f&&t(Md),w(qy),f&&t(VBe),f&&t(Qo),w(Ny),w(Dy),w(Gv),w(Gy),w(Xv),f&&t(XBe),f&&t(wd),w(Oy),f&&t(zBe),f&&t(Wo),w(Vy),w(zy),w(Qv),w(Qy),w(Kv),f&&t(QBe),f&&t(Ld),w(Wy),f&&t(WBe),f&&t(Ho),w(Hy),w(Jy),w(eF),w(Yy),w(tF),f&&t(HBe),f&&t(kd),w(Ky),f&&t(UBe),f&&t(Uo),w(Zy),w(oL),w(nF),w(rL),w(UF),f&&t(JBe),f&&t(Bd),w(tL),f&&t(YBe),f&&t(Jo),w(aL),w(sL),w(YF),w(lL),w(T0),f&&t(KBe),f&&t(qd),w(iL),f&&t(ZBe),f&&t(Yo),w(dL),w(fL),w(E0),w(mL),w(I0),f&&t(ePe),f&&t(Dd),w(gL),f&&t(oPe),f&&t(Ko),w(hL),w(uL),w(N0),w(_L),w(G0),f&&t(rPe),f&&t(Vd),w(vL),f&&t(tPe),f&&t(Zo),w(FL),w(ML),w(V0),w(EL),w(cT),f&&t(aPe),f&&t(Qd),w(CL),f&&t(nPe),f&&t(er),w(wL),w(yL),w(mT),w(LL),w(ET),f&&t(sPe),f&&t(Ud),w(xL),f&&t(lPe),f&&t(or),w($L),w(SL),w(wT),w(RL),w(KT),f&&t(iPe),f&&t(Kd),w(BL),f&&t(dPe),f&&t(rr),w(PL),w(qL),w(e7),w(NL),w(b7),f&&t(cPe),f&&t(oc),w(jL),f&&t(fPe),f&&t(tr),w(DL),w(OL),w(F7),w(VL),w(M7),f&&t(mPe),f&&t(ac),w(XL),f&&t(gPe),f&&t(ar),w(zL),w(WL),w(C7),w(HL),w(z7),f&&t(hPe),f&&t(lc),w(UL),f&&t(pPe),f&&t(nr),w(JL),w(KL),w(W7),w(ZL),w(hM),f&&t(uPe),f&&t(cc),w(e8),f&&t(_Pe),f&&t(sr),w(o8),w(t8),w(uM),w(a8),w(bM),f&&t(bPe),f&&t(gc),w(n8),f&&t(vPe),f&&t(lr),w(s8),w(i8),w(FM),w(d8),w(MM),f&&t(FPe),f&&t(uc),w(c8),f&&t(TPe),f&&t(ir),w(f8),w(g8),w(CM),w(h8),w(JM),f&&t(MPe),f&&t(vc),w(p8),f&&t(EPe),f&&t(dr),w(u8),w(b8),w(KM),w(v8),w(aE),f&&t(CPe),f&&t(Mc),w(F8),f&&t(wPe),f&&t(cr),w(T8),w(E8),w(sE),w(C8),w(vE),f&&t(APe),f&&t(wc),w(w8),f&&t(yPe),f&&t(fr),w(A8),w(L8),w(TE),w(x8),w(SE),f&&t(LPe),f&&t(Lc),w($8),f&&t(xPe),f&&t(mr),w(k8),w(R8),w(BE),w(B8),w(XE),f&&t($Pe),f&&t(kc),w(P8),f&&t(kPe),f&&t(gr),w(I8),w(N8),w(QE),w(j8),w(tC),f&&t(SPe),f&&t(Bc),w(D8),f&&t(RPe),f&&t(hr),w(G8),w(V8),w(nC),w(X8),w(uC),f&&t(BPe),f&&t(qc),w(z8),f&&t(PPe),f&&t(pr),w(Q8),w(H8),w(bC),w(U8),w(yC),f&&t(IPe),f&&t(Dc),w(J8),f&&t(qPe),f&&t(ur),w(Y8),w(Z8),w(xC),w(ex),w(NC),f&&t(NPe),f&&t(Vc),w(ox),f&&t(jPe),f&&t(_r),w(rx),w(ax),w(DC),w(nx),w(OC),f&&t(DPe),f&&t(Qc),w(sx),f&&t(GPe),f&&t(br),w(lx),w(dx),w(XC),w(cx),w(WC),f&&t(OPe),f&&t(Uc),w(mx),f&&t(VPe),f&&t(vr),w(gx),w(px),w(UC),w(ux),w(YC)}}}const HCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function UCt(L){return YMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class r3t extends WMt{constructor(g){super();HMt(this,g,UCt,WCt,UMt,{})}}export{r3t as default,HCt as metadata};
