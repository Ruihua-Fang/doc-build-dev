import{S as uwt,i as _wt,s as bwt,e as a,k as l,w as F,t as o,M as vwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as Fwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function Twt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,NA,gf,qe,Xe,ci,An,jA,yn,Ln,DA,fi,xn,GA,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),NA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),jA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),DA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),GA=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var n$=s(p);m=r(n$,"NewModelConfig"),n$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var s$=s(li);mf=r(s$,"model_type"),s$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var l$=s(ii);di=r(l$,'"new-model"'),l$.forEach(t),NA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),jA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var i$=s(yn);Ln=r(i$,"PreTrainedModel"),i$.forEach(t),DA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),GA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var d$=s(mi);hf=r(d$,"NewModelConfig"),d$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,NA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,jA),e(qe,yn),e(yn,Ln),e(qe,DA),e(qe,fi),e(fi,xn),e(qe,GA),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _6t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b6t(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,NA,gf,qe,Xe,ci,An,jA,yn,Ln,DA,fi,xn,GA,mi,hf,Ma,ze,Ae,n$,gi,s$,l$,Eo,Ea,i$,pf,d$,bje,lPe,hi,uf,qZ,OA,vje,NZ,Fje,iPe,$n,Tje,jZ,Mje,Eje,DZ,Cje,wje,dPe,VA,cPe,c$,Aje,fPe,_f,mPe,pi,bf,GZ,XA,yje,OZ,Lje,gPe,Co,zA,xje,QA,$je,f$,kje,Sje,Rje,WA,Bje,VZ,Pje,Ije,qje,Er,HA,Nje,XZ,jje,Dje,ui,Gje,zZ,Oje,Vje,QZ,Xje,zje,Qje,y,vf,WZ,Wje,Hje,m$,Uje,Jje,Yje,Ff,HZ,Kje,Zje,g$,eDe,oDe,rDe,Tf,UZ,tDe,aDe,h$,nDe,sDe,lDe,Mf,JZ,iDe,dDe,p$,cDe,fDe,mDe,Ef,YZ,gDe,hDe,u$,pDe,uDe,_De,Cf,KZ,bDe,vDe,_$,FDe,TDe,MDe,wf,ZZ,EDe,CDe,b$,wDe,ADe,yDe,Af,eee,LDe,xDe,v$,$De,kDe,SDe,yf,oee,RDe,BDe,F$,PDe,IDe,qDe,Lf,ree,NDe,jDe,T$,DDe,GDe,ODe,xf,tee,VDe,XDe,M$,zDe,QDe,WDe,$f,aee,HDe,UDe,E$,JDe,YDe,KDe,kf,nee,ZDe,eGe,C$,oGe,rGe,tGe,Sf,see,aGe,nGe,w$,sGe,lGe,iGe,Rf,lee,dGe,cGe,A$,fGe,mGe,gGe,Bf,iee,hGe,pGe,y$,uGe,_Ge,bGe,Pf,dee,vGe,FGe,L$,TGe,MGe,EGe,If,cee,CGe,wGe,x$,AGe,yGe,LGe,qf,fee,xGe,$Ge,$$,kGe,SGe,RGe,Nf,mee,BGe,PGe,k$,IGe,qGe,NGe,jf,gee,jGe,DGe,S$,GGe,OGe,VGe,Df,hee,XGe,zGe,R$,QGe,WGe,HGe,Gf,pee,UGe,JGe,B$,YGe,KGe,ZGe,Of,uee,eOe,oOe,P$,rOe,tOe,aOe,Vf,_ee,nOe,sOe,I$,lOe,iOe,dOe,Xf,bee,cOe,fOe,q$,mOe,gOe,hOe,zf,vee,pOe,uOe,N$,_Oe,bOe,vOe,Qf,Fee,FOe,TOe,j$,MOe,EOe,COe,Wf,Tee,wOe,AOe,D$,yOe,LOe,xOe,Hf,Mee,$Oe,kOe,G$,SOe,ROe,BOe,Uf,Eee,POe,IOe,O$,qOe,NOe,jOe,Jf,Cee,DOe,GOe,V$,OOe,VOe,XOe,Yf,wee,zOe,QOe,X$,WOe,HOe,UOe,Kf,Aee,JOe,YOe,z$,KOe,ZOe,eVe,Zf,yee,oVe,rVe,Q$,tVe,aVe,nVe,em,Lee,sVe,lVe,W$,iVe,dVe,cVe,om,xee,fVe,mVe,H$,gVe,hVe,pVe,rm,$ee,uVe,_Ve,U$,bVe,vVe,FVe,tm,kee,TVe,MVe,J$,EVe,CVe,wVe,am,See,AVe,yVe,Y$,LVe,xVe,$Ve,nm,Ree,kVe,SVe,K$,RVe,BVe,PVe,sm,Bee,IVe,qVe,Z$,NVe,jVe,DVe,lm,Pee,GVe,OVe,ek,VVe,XVe,zVe,im,Iee,QVe,WVe,ok,HVe,UVe,JVe,dm,qee,YVe,KVe,rk,ZVe,eXe,oXe,cm,Nee,rXe,tXe,tk,aXe,nXe,sXe,fm,jee,lXe,iXe,ak,dXe,cXe,fXe,mm,Dee,mXe,gXe,nk,hXe,pXe,uXe,gm,Gee,_Xe,bXe,sk,vXe,FXe,TXe,hm,Oee,MXe,EXe,lk,CXe,wXe,AXe,pm,Vee,yXe,LXe,ik,xXe,$Xe,kXe,um,Xee,SXe,RXe,dk,BXe,PXe,IXe,_m,zee,qXe,NXe,ck,jXe,DXe,GXe,bm,Qee,OXe,VXe,fk,XXe,zXe,QXe,vm,Wee,WXe,HXe,mk,UXe,JXe,YXe,Fm,Hee,KXe,ZXe,gk,eze,oze,rze,Tm,Uee,tze,aze,hk,nze,sze,lze,Mm,Jee,ize,dze,pk,cze,fze,mze,Em,Yee,gze,hze,uk,pze,uze,_ze,Cm,Kee,bze,vze,_k,Fze,Tze,Mze,wm,Zee,Eze,Cze,bk,wze,Aze,yze,Am,eoe,Lze,xze,vk,$ze,kze,Sze,ym,ooe,Rze,Bze,Fk,Pze,Ize,qze,Lm,roe,Nze,jze,Tk,Dze,Gze,Oze,xm,toe,Vze,Xze,Mk,zze,Qze,Wze,$m,aoe,Hze,Uze,Ek,Jze,Yze,Kze,km,noe,Zze,eQe,Ck,oQe,rQe,tQe,Sm,soe,aQe,nQe,wk,sQe,lQe,iQe,Rm,loe,dQe,cQe,Ak,fQe,mQe,gQe,Bm,ioe,hQe,pQe,yk,uQe,_Qe,bQe,Pm,doe,vQe,FQe,Lk,TQe,MQe,EQe,Im,coe,CQe,wQe,xk,AQe,yQe,LQe,qm,foe,xQe,$Qe,$k,kQe,SQe,RQe,Nm,moe,BQe,PQe,kk,IQe,qQe,NQe,jm,goe,jQe,DQe,Sk,GQe,OQe,VQe,Dm,hoe,XQe,zQe,Rk,QQe,WQe,HQe,Gm,poe,UQe,JQe,Bk,YQe,KQe,ZQe,Om,uoe,eWe,oWe,Pk,rWe,tWe,aWe,Vm,_oe,nWe,sWe,Ik,lWe,iWe,dWe,Xm,boe,cWe,fWe,qk,mWe,gWe,hWe,zm,voe,pWe,uWe,Nk,_We,bWe,vWe,Qm,Foe,FWe,TWe,jk,MWe,EWe,CWe,Wm,Toe,wWe,AWe,Dk,yWe,LWe,xWe,Hm,Moe,$We,kWe,Gk,SWe,RWe,BWe,Um,Eoe,PWe,IWe,Ok,qWe,NWe,jWe,Jm,Coe,DWe,GWe,Vk,OWe,VWe,XWe,Ym,woe,zWe,QWe,Xk,WWe,HWe,UWe,Km,Aoe,JWe,YWe,zk,KWe,ZWe,eHe,Zm,yoe,oHe,rHe,Qk,tHe,aHe,nHe,eg,Loe,sHe,lHe,Wk,iHe,dHe,cHe,og,xoe,fHe,mHe,Hk,gHe,hHe,pHe,rg,$oe,uHe,_He,Uk,bHe,vHe,FHe,tg,koe,THe,MHe,Jk,EHe,CHe,wHe,ag,Soe,AHe,yHe,Yk,LHe,xHe,$He,ng,Roe,kHe,SHe,Kk,RHe,BHe,PHe,sg,Boe,IHe,qHe,Zk,NHe,jHe,DHe,lg,Poe,GHe,OHe,eS,VHe,XHe,zHe,ig,Ioe,QHe,WHe,oS,HHe,UHe,JHe,dg,qoe,YHe,KHe,rS,ZHe,eUe,oUe,cg,Noe,rUe,tUe,tS,aUe,nUe,sUe,fg,joe,lUe,iUe,aS,dUe,cUe,fUe,mg,Doe,mUe,gUe,nS,hUe,pUe,uUe,gg,Goe,_Ue,bUe,sS,vUe,FUe,TUe,hg,MUe,pg,UA,EUe,Ooe,CUe,hPe,_i,ug,Voe,JA,wUe,Xoe,AUe,pPe,wo,YA,yUe,KA,LUe,lS,xUe,$Ue,kUe,ZA,SUe,zoe,RUe,BUe,PUe,Cr,e6,IUe,Qoe,qUe,NUe,Ca,jUe,Woe,DUe,GUe,Hoe,OUe,VUe,Uoe,XUe,zUe,QUe,k,kn,Joe,WUe,HUe,iS,UUe,JUe,dS,YUe,KUe,ZUe,Sn,Yoe,eJe,oJe,cS,rJe,tJe,fS,aJe,nJe,sJe,Rn,Koe,lJe,iJe,mS,dJe,cJe,gS,fJe,mJe,gJe,_g,Zoe,hJe,pJe,hS,uJe,_Je,bJe,Bn,ere,vJe,FJe,pS,TJe,MJe,uS,EJe,CJe,wJe,bg,ore,AJe,yJe,_S,LJe,xJe,$Je,vg,rre,kJe,SJe,bS,RJe,BJe,PJe,Fg,tre,IJe,qJe,vS,NJe,jJe,DJe,Pn,are,GJe,OJe,FS,VJe,XJe,TS,zJe,QJe,WJe,In,nre,HJe,UJe,MS,JJe,YJe,ES,KJe,ZJe,eYe,qn,sre,oYe,rYe,CS,tYe,aYe,wS,nYe,sYe,lYe,Tg,lre,iYe,dYe,AS,cYe,fYe,mYe,Mg,ire,gYe,hYe,yS,pYe,uYe,_Ye,Nn,dre,bYe,vYe,LS,FYe,TYe,xS,MYe,EYe,CYe,Eg,cre,wYe,AYe,$S,yYe,LYe,xYe,jn,fre,$Ye,kYe,kS,SYe,RYe,SS,BYe,PYe,IYe,Dn,mre,qYe,NYe,RS,jYe,DYe,BS,GYe,OYe,VYe,Gn,gre,XYe,zYe,PS,QYe,WYe,IS,HYe,UYe,JYe,Cg,hre,YYe,KYe,qS,ZYe,eKe,oKe,On,pre,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,Vn,ure,dKe,cKe,DS,fKe,mKe,GS,gKe,hKe,pKe,Xn,_re,uKe,_Ke,OS,bKe,vKe,VS,FKe,TKe,MKe,zn,bre,EKe,CKe,XS,wKe,AKe,zS,yKe,LKe,xKe,Qn,vre,$Ke,kKe,QS,SKe,RKe,WS,BKe,PKe,IKe,Wn,Fre,qKe,NKe,HS,jKe,DKe,US,GKe,OKe,VKe,wg,Tre,XKe,zKe,JS,QKe,WKe,HKe,Hn,Mre,UKe,JKe,YS,YKe,KKe,KS,ZKe,eZe,oZe,Ag,Ere,rZe,tZe,ZS,aZe,nZe,sZe,Un,Cre,lZe,iZe,eR,dZe,cZe,oR,fZe,mZe,gZe,Jn,wre,hZe,pZe,rR,uZe,_Ze,tR,bZe,vZe,FZe,Yn,Are,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,Kn,yre,LZe,xZe,sR,$Ze,kZe,lR,SZe,RZe,BZe,Zn,Lre,PZe,IZe,iR,qZe,NZe,dR,jZe,DZe,GZe,yg,xre,OZe,VZe,cR,XZe,zZe,QZe,es,$re,WZe,HZe,fR,UZe,JZe,mR,YZe,KZe,ZZe,os,kre,eeo,oeo,gR,reo,teo,hR,aeo,neo,seo,rs,Sre,leo,ieo,pR,deo,ceo,uR,feo,meo,geo,ts,Rre,heo,peo,_R,ueo,_eo,bR,beo,veo,Feo,as,Bre,Teo,Meo,vR,Eeo,Ceo,FR,weo,Aeo,yeo,ns,Pre,Leo,xeo,TR,$eo,keo,MR,Seo,Reo,Beo,Lg,Ire,Peo,Ieo,ER,qeo,Neo,jeo,ss,qre,Deo,Geo,CR,Oeo,Veo,wR,Xeo,zeo,Qeo,xg,Nre,Weo,Heo,AR,Ueo,Jeo,Yeo,$g,jre,Keo,Zeo,yR,eoo,ooo,roo,ls,Dre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,is,Gre,coo,foo,$R,moo,goo,kR,hoo,poo,uoo,ds,Ore,_oo,boo,SR,voo,Foo,RR,Too,Moo,Eoo,kg,Vre,Coo,woo,BR,Aoo,yoo,Loo,cs,Xre,xoo,$oo,PR,koo,Soo,IR,Roo,Boo,Poo,fs,zre,Ioo,qoo,qR,Noo,joo,NR,Doo,Goo,Ooo,ms,Qre,Voo,Xoo,jR,zoo,Qoo,DR,Woo,Hoo,Uoo,gs,Wre,Joo,Yoo,GR,Koo,Zoo,OR,ero,oro,rro,hs,Hre,tro,aro,VR,nro,sro,XR,lro,iro,dro,ps,Ure,cro,fro,zR,mro,gro,QR,hro,pro,uro,Sg,Jre,_ro,bro,WR,vro,Fro,Tro,Rg,Yre,Mro,Ero,HR,Cro,wro,Aro,Bg,Kre,yro,Lro,UR,xro,$ro,kro,Pg,Zre,Sro,Rro,JR,Bro,Pro,Iro,us,ete,qro,Nro,YR,jro,Dro,KR,Gro,Oro,Vro,Ig,ote,Xro,zro,ZR,Qro,Wro,Hro,_s,rte,Uro,Jro,eB,Yro,Kro,oB,Zro,eto,oto,bs,tte,rto,tto,rB,ato,nto,tB,sto,lto,ito,vs,ate,dto,cto,aB,fto,mto,nB,gto,hto,pto,Fs,nte,uto,_to,sB,bto,vto,lB,Fto,Tto,Mto,Ts,ste,Eto,Cto,iB,wto,Ato,dB,yto,Lto,xto,Ms,lte,$to,kto,cB,Sto,Rto,fB,Bto,Pto,Ito,qg,ite,qto,Nto,mB,jto,Dto,Gto,Ng,dte,Oto,Vto,gB,Xto,zto,Qto,Es,cte,Wto,Hto,hB,Uto,Jto,pB,Yto,Kto,Zto,Cs,fte,eao,oao,uB,rao,tao,_B,aao,nao,sao,ws,mte,lao,iao,bB,dao,cao,vB,fao,mao,gao,jg,gte,hao,pao,FB,uao,_ao,bao,Dg,hte,vao,Fao,TB,Tao,Mao,Eao,Gg,pte,Cao,wao,MB,Aao,yao,Lao,As,ute,xao,$ao,EB,kao,Sao,CB,Rao,Bao,Pao,Og,_te,Iao,qao,wB,Nao,jao,Dao,Vg,bte,Gao,Oao,AB,Vao,Xao,zao,ys,vte,Qao,Wao,yB,Hao,Uao,LB,Jao,Yao,Kao,Xg,Fte,Zao,eno,xB,ono,rno,tno,zg,Tte,ano,nno,$B,sno,lno,ino,Ls,Mte,dno,cno,kB,fno,mno,SB,gno,hno,pno,xs,Ete,uno,_no,RB,bno,vno,BB,Fno,Tno,Mno,$s,Cte,Eno,Cno,PB,wno,Ano,IB,yno,Lno,xno,ks,wte,$no,kno,qB,Sno,Rno,NB,Bno,Pno,Ino,Qg,qno,Wg,o6,Nno,Ate,jno,uPe,bi,Hg,yte,r6,Dno,Lte,Gno,_Pe,Ao,t6,Ono,a6,Vno,jB,Xno,zno,Qno,n6,Wno,xte,Hno,Uno,Jno,Qe,s6,Yno,$te,Kno,Zno,wa,eso,kte,oso,rso,Ste,tso,aso,Rte,nso,sso,lso,te,Ug,Bte,iso,dso,DB,cso,fso,mso,Jg,Pte,gso,hso,GB,pso,uso,_so,Yg,Ite,bso,vso,OB,Fso,Tso,Mso,Kg,qte,Eso,Cso,VB,wso,Aso,yso,Zg,Nte,Lso,xso,XB,$so,kso,Sso,eh,jte,Rso,Bso,zB,Pso,Iso,qso,oh,Dte,Nso,jso,QB,Dso,Gso,Oso,rh,Gte,Vso,Xso,WB,zso,Qso,Wso,th,Ote,Hso,Uso,HB,Jso,Yso,Kso,ah,Vte,Zso,elo,UB,olo,rlo,tlo,nh,Xte,alo,nlo,JB,slo,llo,ilo,sh,zte,dlo,clo,YB,flo,mlo,glo,lh,Qte,hlo,plo,KB,ulo,_lo,blo,ih,Wte,vlo,Flo,ZB,Tlo,Mlo,Elo,dh,Hte,Clo,wlo,eP,Alo,ylo,Llo,ch,Ute,xlo,$lo,oP,klo,Slo,Rlo,fh,Jte,Blo,Plo,rP,Ilo,qlo,Nlo,mh,Yte,jlo,Dlo,tP,Glo,Olo,Vlo,gh,Kte,Xlo,zlo,aP,Qlo,Wlo,Hlo,hh,Zte,Ulo,Jlo,nP,Ylo,Klo,Zlo,ph,eae,eio,oio,sP,rio,tio,aio,uh,oae,nio,sio,lP,lio,iio,dio,_h,rae,cio,fio,iP,mio,gio,hio,bh,tae,pio,uio,dP,_io,bio,vio,vh,Fio,Fh,Tio,Th,l6,Mio,aae,Eio,bPe,vi,Mh,nae,i6,Cio,sae,wio,vPe,yo,d6,Aio,c6,yio,cP,Lio,xio,$io,f6,kio,lae,Sio,Rio,Bio,We,m6,Pio,iae,Iio,qio,Fi,Nio,dae,jio,Dio,cae,Gio,Oio,Vio,be,Eh,fae,Xio,zio,fP,Qio,Wio,Hio,Ch,mae,Uio,Jio,mP,Yio,Kio,Zio,wh,gae,edo,odo,gP,rdo,tdo,ado,Ah,hae,ndo,sdo,hP,ldo,ido,ddo,yh,pae,cdo,fdo,pP,mdo,gdo,hdo,Lh,uae,pdo,udo,uP,_do,bdo,vdo,xh,_ae,Fdo,Tdo,_P,Mdo,Edo,Cdo,$h,bae,wdo,Ado,bP,ydo,Ldo,xdo,kh,vae,$do,kdo,vP,Sdo,Rdo,Bdo,Sh,Fae,Pdo,Ido,FP,qdo,Ndo,jdo,Rh,Tae,Ddo,Gdo,TP,Odo,Vdo,Xdo,Bh,Mae,zdo,Qdo,MP,Wdo,Hdo,Udo,Ph,Eae,Jdo,Ydo,EP,Kdo,Zdo,eco,Ih,Cae,oco,rco,CP,tco,aco,nco,qh,sco,Nh,lco,jh,g6,ico,wae,dco,FPe,Ti,Dh,Aae,h6,cco,yae,fco,TPe,Lo,p6,mco,Mi,gco,wP,hco,pco,AP,uco,_co,bco,u6,vco,Lae,Fco,Tco,Mco,ot,_6,Eco,xae,Cco,wco,Ei,Aco,$ae,yco,Lco,yP,xco,$co,kco,Gh,Sco,He,b6,Rco,kae,Bco,Pco,Aa,Ico,Sae,qco,Nco,Rae,jco,Dco,Bae,Gco,Oco,Vco,x,Oh,Pae,Xco,zco,LP,Qco,Wco,Hco,Vh,Iae,Uco,Jco,xP,Yco,Kco,Zco,Xh,qae,efo,ofo,$P,rfo,tfo,afo,zh,Nae,nfo,sfo,kP,lfo,ifo,dfo,Qh,jae,cfo,ffo,SP,mfo,gfo,hfo,Wh,Dae,pfo,ufo,RP,_fo,bfo,vfo,Hh,Gae,Ffo,Tfo,BP,Mfo,Efo,Cfo,Uh,Oae,wfo,Afo,PP,yfo,Lfo,xfo,Jh,Vae,$fo,kfo,IP,Sfo,Rfo,Bfo,Yh,Xae,Pfo,Ifo,qP,qfo,Nfo,jfo,Kh,zae,Dfo,Gfo,NP,Ofo,Vfo,Xfo,Zh,Qae,zfo,Qfo,jP,Wfo,Hfo,Ufo,ep,Wae,Jfo,Yfo,DP,Kfo,Zfo,emo,op,Hae,omo,rmo,GP,tmo,amo,nmo,rp,Uae,smo,lmo,OP,imo,dmo,cmo,tp,Jae,fmo,mmo,VP,gmo,hmo,pmo,ap,Yae,umo,_mo,XP,bmo,vmo,Fmo,np,Kae,Tmo,Mmo,zP,Emo,Cmo,wmo,sp,Zae,Amo,ymo,QP,Lmo,xmo,$mo,lp,ene,kmo,Smo,WP,Rmo,Bmo,Pmo,ip,one,Imo,qmo,HP,Nmo,jmo,Dmo,dp,rne,Gmo,Omo,UP,Vmo,Xmo,zmo,cp,tne,Qmo,Wmo,JP,Hmo,Umo,Jmo,fp,ane,Ymo,Kmo,YP,Zmo,ego,ogo,mp,nne,rgo,tgo,KP,ago,ngo,sgo,gp,sne,lgo,igo,ZP,dgo,cgo,fgo,hp,lne,mgo,ggo,eI,hgo,pgo,ugo,pp,ine,_go,bgo,oI,vgo,Fgo,Tgo,up,dne,Mgo,Ego,rI,Cgo,wgo,Ago,_p,cne,ygo,Lgo,tI,xgo,$go,kgo,Ss,fne,Sgo,Rgo,aI,Bgo,Pgo,nI,Igo,qgo,Ngo,bp,mne,jgo,Dgo,sI,Ggo,Ogo,Vgo,vp,gne,Xgo,zgo,lI,Qgo,Wgo,Hgo,Fp,hne,Ugo,Jgo,iI,Ygo,Kgo,Zgo,Tp,pne,eho,oho,dI,rho,tho,aho,Mp,une,nho,sho,cI,lho,iho,dho,Ep,_ne,cho,fho,fI,mho,gho,hho,Cp,bne,pho,uho,mI,_ho,bho,vho,wp,vne,Fho,Tho,gI,Mho,Eho,Cho,Ap,Fne,who,Aho,hI,yho,Lho,xho,yp,Tne,$ho,kho,pI,Sho,Rho,Bho,Lp,Mne,Pho,Iho,uI,qho,Nho,jho,xp,Ene,Dho,Gho,_I,Oho,Vho,Xho,$p,Cne,zho,Qho,bI,Who,Hho,Uho,kp,wne,Jho,Yho,vI,Kho,Zho,epo,Sp,Ane,opo,rpo,FI,tpo,apo,npo,Rp,yne,spo,lpo,TI,ipo,dpo,cpo,Bp,Lne,fpo,mpo,MI,gpo,hpo,ppo,Pp,xne,upo,_po,EI,bpo,vpo,Fpo,Ip,$ne,Tpo,Mpo,CI,Epo,Cpo,wpo,qp,kne,Apo,ypo,wI,Lpo,xpo,$po,Np,Sne,kpo,Spo,AI,Rpo,Bpo,Ppo,jp,Rne,Ipo,qpo,yI,Npo,jpo,Dpo,Dp,Bne,Gpo,Opo,LI,Vpo,Xpo,zpo,Gp,Pne,Qpo,Wpo,xI,Hpo,Upo,Jpo,Op,Ine,Ypo,Kpo,$I,Zpo,euo,ouo,Vp,qne,ruo,tuo,kI,auo,nuo,suo,Xp,Nne,luo,iuo,SI,duo,cuo,fuo,zp,jne,muo,guo,RI,huo,puo,uuo,Qp,Dne,_uo,buo,BI,vuo,Fuo,Tuo,Wp,Gne,Muo,Euo,PI,Cuo,wuo,Auo,Hp,One,yuo,Luo,II,xuo,$uo,kuo,Up,Vne,Suo,Ruo,qI,Buo,Puo,Iuo,Jp,Xne,quo,Nuo,NI,juo,Duo,Guo,Yp,zne,Ouo,Vuo,jI,Xuo,zuo,Quo,Kp,Qne,Wuo,Huo,DI,Uuo,Juo,Yuo,Zp,Wne,Kuo,Zuo,GI,e_o,o_o,r_o,eu,Hne,t_o,a_o,OI,n_o,s_o,l_o,ou,Une,i_o,d_o,VI,c_o,f_o,m_o,ru,Jne,g_o,h_o,XI,p_o,u_o,__o,tu,Yne,b_o,v_o,zI,F_o,T_o,M_o,au,Kne,E_o,C_o,QI,w_o,A_o,y_o,nu,Zne,L_o,x_o,WI,$_o,k_o,S_o,su,ese,R_o,B_o,HI,P_o,I_o,q_o,lu,ose,N_o,j_o,UI,D_o,G_o,O_o,iu,rse,V_o,X_o,JI,z_o,Q_o,W_o,du,tse,H_o,U_o,YI,J_o,Y_o,K_o,cu,ase,Z_o,e1o,KI,o1o,r1o,t1o,fu,nse,a1o,n1o,ZI,s1o,l1o,i1o,mu,sse,d1o,c1o,eq,f1o,m1o,g1o,gu,lse,h1o,p1o,oq,u1o,_1o,b1o,hu,ise,v1o,F1o,rq,T1o,M1o,E1o,pu,dse,C1o,w1o,tq,A1o,y1o,L1o,uu,cse,x1o,$1o,aq,k1o,S1o,R1o,_u,fse,B1o,P1o,nq,I1o,q1o,N1o,bu,mse,j1o,D1o,sq,G1o,O1o,V1o,vu,gse,X1o,z1o,lq,Q1o,W1o,H1o,Fu,hse,U1o,J1o,iq,Y1o,K1o,Z1o,Tu,pse,ebo,obo,dq,rbo,tbo,abo,Mu,use,nbo,sbo,cq,lbo,ibo,dbo,Eu,_se,cbo,fbo,fq,mbo,gbo,hbo,Cu,bse,pbo,ubo,mq,_bo,bbo,vbo,wu,vse,Fbo,Tbo,gq,Mbo,Ebo,Cbo,Au,Fse,wbo,Abo,hq,ybo,Lbo,xbo,yu,Tse,$bo,kbo,pq,Sbo,Rbo,Bbo,Lu,Pbo,Mse,Ibo,qbo,Ese,Nbo,jbo,xu,MPe,Ci,$u,Cse,v6,Dbo,wse,Gbo,EPe,xo,F6,Obo,wi,Vbo,uq,Xbo,zbo,_q,Qbo,Wbo,Hbo,T6,Ubo,Ase,Jbo,Ybo,Kbo,rt,M6,Zbo,yse,e4o,o4o,Ai,r4o,Lse,t4o,a4o,bq,n4o,s4o,l4o,ku,i4o,Ue,E6,d4o,xse,c4o,f4o,ya,m4o,$se,g4o,h4o,kse,p4o,u4o,Sse,_4o,b4o,v4o,G,Su,Rse,F4o,T4o,vq,M4o,E4o,C4o,Ru,Bse,w4o,A4o,Fq,y4o,L4o,x4o,Bu,Pse,$4o,k4o,Tq,S4o,R4o,B4o,Pu,Ise,P4o,I4o,Mq,q4o,N4o,j4o,Iu,qse,D4o,G4o,Eq,O4o,V4o,X4o,qu,Nse,z4o,Q4o,Cq,W4o,H4o,U4o,Nu,jse,J4o,Y4o,wq,K4o,Z4o,e2o,ju,Dse,o2o,r2o,Aq,t2o,a2o,n2o,Du,Gse,s2o,l2o,yq,i2o,d2o,c2o,Gu,Ose,f2o,m2o,Lq,g2o,h2o,p2o,Ou,Vse,u2o,_2o,xq,b2o,v2o,F2o,Vu,Xse,T2o,M2o,$q,E2o,C2o,w2o,Xu,zse,A2o,y2o,kq,L2o,x2o,$2o,zu,Qse,k2o,S2o,Sq,R2o,B2o,P2o,Qu,Wse,I2o,q2o,Rq,N2o,j2o,D2o,Wu,Hse,G2o,O2o,Bq,V2o,X2o,z2o,Hu,Use,Q2o,W2o,Pq,H2o,U2o,J2o,Uu,Jse,Y2o,K2o,Iq,Z2o,e5o,o5o,Ju,Yse,r5o,t5o,qq,a5o,n5o,s5o,Yu,Kse,l5o,i5o,Nq,d5o,c5o,f5o,Ku,Zse,m5o,g5o,jq,h5o,p5o,u5o,Zu,ele,_5o,b5o,Dq,v5o,F5o,T5o,e_,ole,M5o,E5o,Gq,C5o,w5o,A5o,o_,rle,y5o,L5o,Oq,x5o,$5o,k5o,r_,tle,S5o,R5o,Vq,B5o,P5o,I5o,t_,ale,q5o,N5o,Xq,j5o,D5o,G5o,a_,nle,O5o,V5o,zq,X5o,z5o,Q5o,n_,sle,W5o,H5o,Qq,U5o,J5o,Y5o,s_,lle,K5o,Z5o,Wq,evo,ovo,rvo,l_,ile,tvo,avo,Hq,nvo,svo,lvo,i_,dle,ivo,dvo,Uq,cvo,fvo,mvo,d_,cle,gvo,hvo,Jq,pvo,uvo,_vo,c_,fle,bvo,vvo,Yq,Fvo,Tvo,Mvo,f_,mle,Evo,Cvo,Kq,wvo,Avo,yvo,m_,gle,Lvo,xvo,Zq,$vo,kvo,Svo,g_,hle,Rvo,Bvo,eN,Pvo,Ivo,qvo,h_,ple,Nvo,jvo,oN,Dvo,Gvo,Ovo,p_,ule,Vvo,Xvo,rN,zvo,Qvo,Wvo,u_,_le,Hvo,Uvo,tN,Jvo,Yvo,Kvo,__,Zvo,ble,eFo,oFo,vle,rFo,tFo,b_,CPe,yi,v_,Fle,C6,aFo,Tle,nFo,wPe,$o,w6,sFo,Li,lFo,aN,iFo,dFo,nN,cFo,fFo,mFo,A6,gFo,Mle,hFo,pFo,uFo,tt,y6,_Fo,Ele,bFo,vFo,xi,FFo,Cle,TFo,MFo,sN,EFo,CFo,wFo,F_,AFo,Je,L6,yFo,wle,LFo,xFo,La,$Fo,Ale,kFo,SFo,yle,RFo,BFo,Lle,PFo,IFo,qFo,z,T_,xle,NFo,jFo,lN,DFo,GFo,OFo,M_,$le,VFo,XFo,iN,zFo,QFo,WFo,E_,kle,HFo,UFo,dN,JFo,YFo,KFo,C_,Sle,ZFo,e0o,cN,o0o,r0o,t0o,w_,Rle,a0o,n0o,fN,s0o,l0o,i0o,A_,Ble,d0o,c0o,mN,f0o,m0o,g0o,y_,Ple,h0o,p0o,gN,u0o,_0o,b0o,L_,Ile,v0o,F0o,hN,T0o,M0o,E0o,x_,qle,C0o,w0o,pN,A0o,y0o,L0o,$_,Nle,x0o,$0o,uN,k0o,S0o,R0o,k_,jle,B0o,P0o,_N,I0o,q0o,N0o,S_,Dle,j0o,D0o,bN,G0o,O0o,V0o,R_,Gle,X0o,z0o,vN,Q0o,W0o,H0o,B_,Ole,U0o,J0o,FN,Y0o,K0o,Z0o,P_,Vle,eTo,oTo,TN,rTo,tTo,aTo,I_,Xle,nTo,sTo,MN,lTo,iTo,dTo,q_,zle,cTo,fTo,EN,mTo,gTo,hTo,N_,Qle,pTo,uTo,CN,_To,bTo,vTo,j_,Wle,FTo,TTo,wN,MTo,ETo,CTo,D_,Hle,wTo,ATo,AN,yTo,LTo,xTo,G_,Ule,$To,kTo,yN,STo,RTo,BTo,O_,Jle,PTo,ITo,LN,qTo,NTo,jTo,V_,Yle,DTo,GTo,xN,OTo,VTo,XTo,X_,Kle,zTo,QTo,$N,WTo,HTo,UTo,z_,Zle,JTo,YTo,kN,KTo,ZTo,e7o,Q_,eie,o7o,r7o,SN,t7o,a7o,n7o,W_,oie,s7o,l7o,RN,i7o,d7o,c7o,H_,rie,f7o,m7o,BN,g7o,h7o,p7o,U_,tie,u7o,_7o,PN,b7o,v7o,F7o,J_,aie,T7o,M7o,IN,E7o,C7o,w7o,Y_,nie,A7o,y7o,qN,L7o,x7o,$7o,K_,sie,k7o,S7o,NN,R7o,B7o,P7o,Z_,lie,I7o,q7o,jN,N7o,j7o,D7o,e1,iie,G7o,O7o,DN,V7o,X7o,z7o,o1,die,Q7o,W7o,GN,H7o,U7o,J7o,r1,Y7o,cie,K7o,Z7o,fie,eMo,oMo,t1,APe,$i,a1,mie,x6,rMo,gie,tMo,yPe,ko,$6,aMo,ki,nMo,ON,sMo,lMo,VN,iMo,dMo,cMo,k6,fMo,hie,mMo,gMo,hMo,at,S6,pMo,pie,uMo,_Mo,Si,bMo,uie,vMo,FMo,XN,TMo,MMo,EMo,n1,CMo,Ye,R6,wMo,_ie,AMo,yMo,xa,LMo,bie,xMo,$Mo,vie,kMo,SMo,Fie,RMo,BMo,PMo,Q,s1,Tie,IMo,qMo,zN,NMo,jMo,DMo,l1,Mie,GMo,OMo,QN,VMo,XMo,zMo,i1,Eie,QMo,WMo,WN,HMo,UMo,JMo,d1,Cie,YMo,KMo,HN,ZMo,eEo,oEo,c1,wie,rEo,tEo,UN,aEo,nEo,sEo,f1,Aie,lEo,iEo,JN,dEo,cEo,fEo,m1,yie,mEo,gEo,YN,hEo,pEo,uEo,g1,Lie,_Eo,bEo,KN,vEo,FEo,TEo,h1,xie,MEo,EEo,ZN,CEo,wEo,AEo,p1,$ie,yEo,LEo,ej,xEo,$Eo,kEo,u1,kie,SEo,REo,oj,BEo,PEo,IEo,_1,Sie,qEo,NEo,rj,jEo,DEo,GEo,b1,Rie,OEo,VEo,tj,XEo,zEo,QEo,v1,Bie,WEo,HEo,aj,UEo,JEo,YEo,F1,Pie,KEo,ZEo,nj,eCo,oCo,rCo,T1,Iie,tCo,aCo,sj,nCo,sCo,lCo,M1,qie,iCo,dCo,lj,cCo,fCo,mCo,E1,Nie,gCo,hCo,ij,pCo,uCo,_Co,C1,jie,bCo,vCo,dj,FCo,TCo,MCo,w1,Die,ECo,CCo,cj,wCo,ACo,yCo,A1,Gie,LCo,xCo,fj,$Co,kCo,SCo,y1,Oie,RCo,BCo,mj,PCo,ICo,qCo,L1,Vie,NCo,jCo,gj,DCo,GCo,OCo,x1,Xie,VCo,XCo,hj,zCo,QCo,WCo,$1,zie,HCo,UCo,pj,JCo,YCo,KCo,k1,Qie,ZCo,e3o,uj,o3o,r3o,t3o,S1,Wie,a3o,n3o,_j,s3o,l3o,i3o,R1,Hie,d3o,c3o,bj,f3o,m3o,g3o,B1,Uie,h3o,p3o,vj,u3o,_3o,b3o,P1,Jie,v3o,F3o,Fj,T3o,M3o,E3o,I1,Yie,C3o,w3o,Kie,A3o,y3o,L3o,q1,Zie,x3o,$3o,Tj,k3o,S3o,R3o,N1,ede,B3o,P3o,Mj,I3o,q3o,N3o,j1,ode,j3o,D3o,Ej,G3o,O3o,V3o,D1,rde,X3o,z3o,Cj,Q3o,W3o,H3o,G1,U3o,tde,J3o,Y3o,ade,K3o,Z3o,O1,LPe,Ri,V1,nde,B6,ewo,sde,owo,xPe,So,P6,rwo,Bi,two,wj,awo,nwo,Aj,swo,lwo,iwo,I6,dwo,lde,cwo,fwo,mwo,nt,q6,gwo,ide,hwo,pwo,Pi,uwo,dde,_wo,bwo,yj,vwo,Fwo,Two,X1,Mwo,Ke,N6,Ewo,cde,Cwo,wwo,$a,Awo,fde,ywo,Lwo,mde,xwo,$wo,gde,kwo,Swo,Rwo,he,z1,hde,Bwo,Pwo,Lj,Iwo,qwo,Nwo,Q1,pde,jwo,Dwo,xj,Gwo,Owo,Vwo,W1,ude,Xwo,zwo,$j,Qwo,Wwo,Hwo,H1,_de,Uwo,Jwo,kj,Ywo,Kwo,Zwo,U1,bde,eAo,oAo,Sj,rAo,tAo,aAo,J1,vde,nAo,sAo,Rj,lAo,iAo,dAo,Y1,Fde,cAo,fAo,Bj,mAo,gAo,hAo,K1,Tde,pAo,uAo,Pj,_Ao,bAo,vAo,Z1,Mde,FAo,TAo,Ij,MAo,EAo,CAo,eb,Ede,wAo,AAo,qj,yAo,LAo,xAo,ob,Cde,$Ao,kAo,Nj,SAo,RAo,BAo,rb,wde,PAo,IAo,jj,qAo,NAo,jAo,tb,Ade,DAo,GAo,Dj,OAo,VAo,XAo,ab,yde,zAo,QAo,Gj,WAo,HAo,UAo,nb,Lde,JAo,YAo,Oj,KAo,ZAo,e6o,sb,xde,o6o,r6o,Vj,t6o,a6o,n6o,lb,$de,s6o,l6o,Xj,i6o,d6o,c6o,ib,f6o,kde,m6o,g6o,Sde,h6o,p6o,db,$Pe,Ii,cb,Rde,j6,u6o,Bde,_6o,kPe,Ro,D6,b6o,qi,v6o,zj,F6o,T6o,Qj,M6o,E6o,C6o,G6,w6o,Pde,A6o,y6o,L6o,st,O6,x6o,Ide,$6o,k6o,Ni,S6o,qde,R6o,B6o,Wj,P6o,I6o,q6o,fb,N6o,Ze,V6,j6o,Nde,D6o,G6o,ka,O6o,jde,V6o,X6o,Dde,z6o,Q6o,Gde,W6o,H6o,U6o,q,mb,Ode,J6o,Y6o,Hj,K6o,Z6o,eyo,gb,Vde,oyo,ryo,Uj,tyo,ayo,nyo,hb,Xde,syo,lyo,Jj,iyo,dyo,cyo,pb,zde,fyo,myo,Yj,gyo,hyo,pyo,ub,Qde,uyo,_yo,Kj,byo,vyo,Fyo,_b,Wde,Tyo,Myo,Zj,Eyo,Cyo,wyo,bb,Hde,Ayo,yyo,eD,Lyo,xyo,$yo,vb,Ude,kyo,Syo,oD,Ryo,Byo,Pyo,Fb,Jde,Iyo,qyo,rD,Nyo,jyo,Dyo,Tb,Yde,Gyo,Oyo,tD,Vyo,Xyo,zyo,Mb,Kde,Qyo,Wyo,aD,Hyo,Uyo,Jyo,Eb,Zde,Yyo,Kyo,nD,Zyo,eLo,oLo,Cb,ece,rLo,tLo,sD,aLo,nLo,sLo,wb,oce,lLo,iLo,lD,dLo,cLo,fLo,Ab,rce,mLo,gLo,iD,hLo,pLo,uLo,yb,tce,_Lo,bLo,dD,vLo,FLo,TLo,Lb,ace,MLo,ELo,cD,CLo,wLo,ALo,xb,nce,yLo,LLo,fD,xLo,$Lo,kLo,$b,sce,SLo,RLo,mD,BLo,PLo,ILo,kb,lce,qLo,NLo,gD,jLo,DLo,GLo,Sb,ice,OLo,VLo,hD,XLo,zLo,QLo,Rb,dce,WLo,HLo,pD,ULo,JLo,YLo,Bb,cce,KLo,ZLo,uD,e8o,o8o,r8o,Pb,fce,t8o,a8o,_D,n8o,s8o,l8o,Ib,mce,i8o,d8o,bD,c8o,f8o,m8o,qb,gce,g8o,h8o,vD,p8o,u8o,_8o,Nb,hce,b8o,v8o,FD,F8o,T8o,M8o,jb,pce,E8o,C8o,TD,w8o,A8o,y8o,Db,uce,L8o,x8o,MD,$8o,k8o,S8o,Gb,_ce,R8o,B8o,ED,P8o,I8o,q8o,Ob,bce,N8o,j8o,CD,D8o,G8o,O8o,Vb,vce,V8o,X8o,wD,z8o,Q8o,W8o,Xb,Fce,H8o,U8o,AD,J8o,Y8o,K8o,zb,Tce,Z8o,exo,yD,oxo,rxo,txo,Qb,Mce,axo,nxo,LD,sxo,lxo,ixo,Wb,Ece,dxo,cxo,xD,fxo,mxo,gxo,Hb,Cce,hxo,pxo,$D,uxo,_xo,bxo,Ub,wce,vxo,Fxo,kD,Txo,Mxo,Exo,Jb,Ace,Cxo,wxo,SD,Axo,yxo,Lxo,Yb,yce,xxo,$xo,RD,kxo,Sxo,Rxo,Kb,Lce,Bxo,Pxo,BD,Ixo,qxo,Nxo,Zb,xce,jxo,Dxo,PD,Gxo,Oxo,Vxo,e4,$ce,Xxo,zxo,ID,Qxo,Wxo,Hxo,o4,kce,Uxo,Jxo,qD,Yxo,Kxo,Zxo,r4,Sce,e9o,o9o,ND,r9o,t9o,a9o,t4,Rce,n9o,s9o,jD,l9o,i9o,d9o,a4,Bce,c9o,f9o,DD,m9o,g9o,h9o,n4,p9o,Pce,u9o,_9o,Ice,b9o,v9o,s4,SPe,ji,l4,qce,X6,F9o,Nce,T9o,RPe,Bo,z6,M9o,Di,E9o,GD,C9o,w9o,OD,A9o,y9o,L9o,Q6,x9o,jce,$9o,k9o,S9o,lt,W6,R9o,Dce,B9o,P9o,Gi,I9o,Gce,q9o,N9o,VD,j9o,D9o,G9o,i4,O9o,eo,H6,V9o,Oce,X9o,z9o,Sa,Q9o,Vce,W9o,H9o,Xce,U9o,J9o,zce,Y9o,K9o,Z9o,Y,d4,Qce,e$o,o$o,XD,r$o,t$o,a$o,c4,Wce,n$o,s$o,zD,l$o,i$o,d$o,f4,Hce,c$o,f$o,QD,m$o,g$o,h$o,m4,Uce,p$o,u$o,WD,_$o,b$o,v$o,g4,Jce,F$o,T$o,HD,M$o,E$o,C$o,h4,Yce,w$o,A$o,UD,y$o,L$o,x$o,p4,Kce,$$o,k$o,JD,S$o,R$o,B$o,u4,Zce,P$o,I$o,YD,q$o,N$o,j$o,_4,efe,D$o,G$o,KD,O$o,V$o,X$o,b4,ofe,z$o,Q$o,ZD,W$o,H$o,U$o,v4,rfe,J$o,Y$o,eG,K$o,Z$o,eko,F4,tfe,oko,rko,oG,tko,ako,nko,T4,afe,sko,lko,rG,iko,dko,cko,M4,nfe,fko,mko,tG,gko,hko,pko,E4,sfe,uko,_ko,aG,bko,vko,Fko,C4,lfe,Tko,Mko,nG,Eko,Cko,wko,w4,ife,Ako,yko,sG,Lko,xko,$ko,A4,dfe,kko,Sko,lG,Rko,Bko,Pko,y4,cfe,Iko,qko,iG,Nko,jko,Dko,L4,ffe,Gko,Oko,dG,Vko,Xko,zko,x4,mfe,Qko,Wko,cG,Hko,Uko,Jko,$4,gfe,Yko,Kko,fG,Zko,eSo,oSo,k4,hfe,rSo,tSo,mG,aSo,nSo,sSo,S4,pfe,lSo,iSo,gG,dSo,cSo,fSo,R4,ufe,mSo,gSo,hG,hSo,pSo,uSo,B4,_fe,_So,bSo,pG,vSo,FSo,TSo,P4,bfe,MSo,ESo,uG,CSo,wSo,ASo,I4,vfe,ySo,LSo,_G,xSo,$So,kSo,q4,Ffe,SSo,RSo,bG,BSo,PSo,ISo,N4,qSo,Tfe,NSo,jSo,Mfe,DSo,GSo,j4,BPe,Oi,D4,Efe,U6,OSo,Cfe,VSo,PPe,Po,J6,XSo,Vi,zSo,vG,QSo,WSo,FG,HSo,USo,JSo,Y6,YSo,wfe,KSo,ZSo,eRo,it,K6,oRo,Afe,rRo,tRo,Xi,aRo,yfe,nRo,sRo,TG,lRo,iRo,dRo,G4,cRo,oo,Z6,fRo,Lfe,mRo,gRo,Ra,hRo,xfe,pRo,uRo,$fe,_Ro,bRo,kfe,vRo,FRo,TRo,Yr,O4,Sfe,MRo,ERo,MG,CRo,wRo,ARo,V4,Rfe,yRo,LRo,EG,xRo,$Ro,kRo,X4,Bfe,SRo,RRo,CG,BRo,PRo,IRo,z4,Pfe,qRo,NRo,wG,jRo,DRo,GRo,Q4,Ife,ORo,VRo,AG,XRo,zRo,QRo,W4,WRo,qfe,HRo,URo,Nfe,JRo,YRo,H4,IPe,zi,U4,jfe,ey,KRo,Dfe,ZRo,qPe,Io,oy,eBo,Qi,oBo,yG,rBo,tBo,LG,aBo,nBo,sBo,ry,lBo,Gfe,iBo,dBo,cBo,dt,ty,fBo,Ofe,mBo,gBo,Wi,hBo,Vfe,pBo,uBo,xG,_Bo,bBo,vBo,J4,FBo,ro,ay,TBo,Xfe,MBo,EBo,Ba,CBo,zfe,wBo,ABo,Qfe,yBo,LBo,Wfe,xBo,$Bo,kBo,U,Y4,Hfe,SBo,RBo,$G,BBo,PBo,IBo,K4,Ufe,qBo,NBo,kG,jBo,DBo,GBo,Z4,Jfe,OBo,VBo,SG,XBo,zBo,QBo,e2,Yfe,WBo,HBo,RG,UBo,JBo,YBo,o2,Kfe,KBo,ZBo,BG,ePo,oPo,rPo,r2,Zfe,tPo,aPo,PG,nPo,sPo,lPo,t2,eme,iPo,dPo,IG,cPo,fPo,mPo,a2,ome,gPo,hPo,qG,pPo,uPo,_Po,n2,rme,bPo,vPo,NG,FPo,TPo,MPo,s2,tme,EPo,CPo,jG,wPo,APo,yPo,l2,ame,LPo,xPo,DG,$Po,kPo,SPo,i2,nme,RPo,BPo,GG,PPo,IPo,qPo,d2,sme,NPo,jPo,OG,DPo,GPo,OPo,c2,lme,VPo,XPo,VG,zPo,QPo,WPo,f2,ime,HPo,UPo,XG,JPo,YPo,KPo,m2,dme,ZPo,eIo,zG,oIo,rIo,tIo,g2,cme,aIo,nIo,QG,sIo,lIo,iIo,h2,fme,dIo,cIo,WG,fIo,mIo,gIo,p2,mme,hIo,pIo,HG,uIo,_Io,bIo,u2,gme,vIo,FIo,UG,TIo,MIo,EIo,_2,hme,CIo,wIo,JG,AIo,yIo,LIo,b2,pme,xIo,$Io,YG,kIo,SIo,RIo,v2,ume,BIo,PIo,KG,IIo,qIo,NIo,F2,_me,jIo,DIo,ZG,GIo,OIo,VIo,T2,bme,XIo,zIo,eO,QIo,WIo,HIo,M2,vme,UIo,JIo,oO,YIo,KIo,ZIo,E2,Fme,eqo,oqo,rO,rqo,tqo,aqo,C2,Tme,nqo,sqo,tO,lqo,iqo,dqo,w2,Mme,cqo,fqo,aO,mqo,gqo,hqo,A2,Eme,pqo,uqo,nO,_qo,bqo,vqo,y2,Cme,Fqo,Tqo,sO,Mqo,Eqo,Cqo,L2,wme,wqo,Aqo,lO,yqo,Lqo,xqo,x2,Ame,$qo,kqo,iO,Sqo,Rqo,Bqo,$2,Pqo,yme,Iqo,qqo,Lme,Nqo,jqo,k2,NPe,Hi,S2,xme,ny,Dqo,$me,Gqo,jPe,qo,sy,Oqo,Ui,Vqo,dO,Xqo,zqo,cO,Qqo,Wqo,Hqo,ly,Uqo,kme,Jqo,Yqo,Kqo,ct,iy,Zqo,Sme,eNo,oNo,Ji,rNo,Rme,tNo,aNo,fO,nNo,sNo,lNo,R2,iNo,to,dy,dNo,Bme,cNo,fNo,Pa,mNo,Pme,gNo,hNo,Ime,pNo,uNo,qme,_No,bNo,vNo,O,B2,Nme,FNo,TNo,mO,MNo,ENo,CNo,P2,jme,wNo,ANo,gO,yNo,LNo,xNo,I2,Dme,$No,kNo,hO,SNo,RNo,BNo,q2,Gme,PNo,INo,pO,qNo,NNo,jNo,N2,Ome,DNo,GNo,uO,ONo,VNo,XNo,j2,Vme,zNo,QNo,_O,WNo,HNo,UNo,D2,Xme,JNo,YNo,bO,KNo,ZNo,ejo,G2,zme,ojo,rjo,vO,tjo,ajo,njo,O2,Qme,sjo,ljo,FO,ijo,djo,cjo,V2,Wme,fjo,mjo,TO,gjo,hjo,pjo,X2,Hme,ujo,_jo,MO,bjo,vjo,Fjo,z2,Ume,Tjo,Mjo,EO,Ejo,Cjo,wjo,Q2,Jme,Ajo,yjo,CO,Ljo,xjo,$jo,W2,Yme,kjo,Sjo,wO,Rjo,Bjo,Pjo,H2,Kme,Ijo,qjo,AO,Njo,jjo,Djo,U2,Zme,Gjo,Ojo,yO,Vjo,Xjo,zjo,J2,ege,Qjo,Wjo,LO,Hjo,Ujo,Jjo,Y2,oge,Yjo,Kjo,xO,Zjo,eDo,oDo,K2,rge,rDo,tDo,$O,aDo,nDo,sDo,Z2,tge,lDo,iDo,kO,dDo,cDo,fDo,e5,age,mDo,gDo,SO,hDo,pDo,uDo,o5,nge,_Do,bDo,RO,vDo,FDo,TDo,r5,sge,MDo,EDo,BO,CDo,wDo,ADo,t5,lge,yDo,LDo,PO,xDo,$Do,kDo,a5,ige,SDo,RDo,IO,BDo,PDo,IDo,n5,dge,qDo,NDo,qO,jDo,DDo,GDo,s5,cge,ODo,VDo,NO,XDo,zDo,QDo,l5,fge,WDo,HDo,jO,UDo,JDo,YDo,i5,mge,KDo,ZDo,DO,eGo,oGo,rGo,d5,gge,tGo,aGo,GO,nGo,sGo,lGo,c5,hge,iGo,dGo,OO,cGo,fGo,mGo,f5,pge,gGo,hGo,VO,pGo,uGo,_Go,m5,uge,bGo,vGo,XO,FGo,TGo,MGo,g5,_ge,EGo,CGo,zO,wGo,AGo,yGo,h5,bge,LGo,xGo,QO,$Go,kGo,SGo,p5,vge,RGo,BGo,WO,PGo,IGo,qGo,u5,Fge,NGo,jGo,HO,DGo,GGo,OGo,_5,Tge,VGo,XGo,UO,zGo,QGo,WGo,b5,Mge,HGo,UGo,JO,JGo,YGo,KGo,v5,ZGo,Ege,eOo,oOo,Cge,rOo,tOo,F5,DPe,Yi,T5,wge,cy,aOo,Age,nOo,GPe,No,fy,sOo,Ki,lOo,YO,iOo,dOo,KO,cOo,fOo,mOo,my,gOo,yge,hOo,pOo,uOo,ft,gy,_Oo,Lge,bOo,vOo,Zi,FOo,xge,TOo,MOo,ZO,EOo,COo,wOo,M5,AOo,ao,hy,yOo,$ge,LOo,xOo,Ia,$Oo,kge,kOo,SOo,Sge,ROo,BOo,Rge,POo,IOo,qOo,Bge,E5,Pge,NOo,jOo,eV,DOo,GOo,OOo,C5,VOo,Ige,XOo,zOo,qge,QOo,WOo,w5,OPe,ed,A5,Nge,py,HOo,jge,UOo,VPe,jo,uy,JOo,od,YOo,oV,KOo,ZOo,rV,eVo,oVo,rVo,_y,tVo,Dge,aVo,nVo,sVo,mt,by,lVo,Gge,iVo,dVo,rd,cVo,Oge,fVo,mVo,tV,gVo,hVo,pVo,y5,uVo,no,vy,_Vo,Vge,bVo,vVo,qa,FVo,Xge,TVo,MVo,zge,EVo,CVo,Qge,wVo,AVo,yVo,ve,L5,Wge,LVo,xVo,aV,$Vo,kVo,SVo,x5,Hge,RVo,BVo,nV,PVo,IVo,qVo,$5,Uge,NVo,jVo,sV,DVo,GVo,OVo,Rs,Jge,VVo,XVo,lV,zVo,QVo,iV,WVo,HVo,UVo,k5,Yge,JVo,YVo,dV,KVo,ZVo,eXo,gt,Kge,oXo,rXo,cV,tXo,aXo,fV,nXo,sXo,mV,lXo,iXo,dXo,S5,Zge,cXo,fXo,gV,mXo,gXo,hXo,R5,ehe,pXo,uXo,hV,_Xo,bXo,vXo,B5,ohe,FXo,TXo,pV,MXo,EXo,CXo,P5,rhe,wXo,AXo,uV,yXo,LXo,xXo,I5,the,$Xo,kXo,_V,SXo,RXo,BXo,q5,ahe,PXo,IXo,bV,qXo,NXo,jXo,N5,nhe,DXo,GXo,vV,OXo,VXo,XXo,j5,zXo,she,QXo,WXo,lhe,HXo,UXo,D5,XPe,td,G5,ihe,Fy,JXo,dhe,YXo,zPe,Do,Ty,KXo,ad,ZXo,FV,ezo,ozo,TV,rzo,tzo,azo,My,nzo,che,szo,lzo,izo,ht,Ey,dzo,fhe,czo,fzo,nd,mzo,mhe,gzo,hzo,MV,pzo,uzo,_zo,O5,bzo,so,Cy,vzo,ghe,Fzo,Tzo,Na,Mzo,hhe,Ezo,Czo,phe,wzo,Azo,uhe,yzo,Lzo,xzo,_he,V5,bhe,$zo,kzo,EV,Szo,Rzo,Bzo,X5,Pzo,vhe,Izo,qzo,Fhe,Nzo,jzo,z5,QPe,sd,Q5,The,wy,Dzo,Mhe,Gzo,WPe,Go,Ay,Ozo,ld,Vzo,CV,Xzo,zzo,wV,Qzo,Wzo,Hzo,yy,Uzo,Ehe,Jzo,Yzo,Kzo,pt,Ly,Zzo,Che,eQo,oQo,id,rQo,whe,tQo,aQo,AV,nQo,sQo,lQo,W5,iQo,lo,xy,dQo,Ahe,cQo,fQo,ja,mQo,yhe,gQo,hQo,Lhe,pQo,uQo,xhe,_Qo,bQo,vQo,Ne,H5,$he,FQo,TQo,yV,MQo,EQo,CQo,U5,khe,wQo,AQo,LV,yQo,LQo,xQo,J5,She,$Qo,kQo,xV,SQo,RQo,BQo,Y5,Rhe,PQo,IQo,$V,qQo,NQo,jQo,K5,Bhe,DQo,GQo,kV,OQo,VQo,XQo,Z5,Phe,zQo,QQo,SV,WQo,HQo,UQo,ev,Ihe,JQo,YQo,RV,KQo,ZQo,eWo,ov,qhe,oWo,rWo,BV,tWo,aWo,nWo,rv,sWo,Nhe,lWo,iWo,jhe,dWo,cWo,tv,HPe,dd,av,Dhe,$y,fWo,Ghe,mWo,UPe,Oo,ky,gWo,cd,hWo,PV,pWo,uWo,IV,_Wo,bWo,vWo,Sy,FWo,Ohe,TWo,MWo,EWo,ut,Ry,CWo,Vhe,wWo,AWo,fd,yWo,Xhe,LWo,xWo,qV,$Wo,kWo,SWo,nv,RWo,io,By,BWo,zhe,PWo,IWo,Da,qWo,Qhe,NWo,jWo,Whe,DWo,GWo,Hhe,OWo,VWo,XWo,Ga,sv,Uhe,zWo,QWo,NV,WWo,HWo,UWo,lv,Jhe,JWo,YWo,jV,KWo,ZWo,eHo,iv,Yhe,oHo,rHo,DV,tHo,aHo,nHo,dv,Khe,sHo,lHo,GV,iHo,dHo,cHo,cv,fHo,Zhe,mHo,gHo,epe,hHo,pHo,fv,JPe,md,mv,ope,Py,uHo,rpe,_Ho,YPe,Vo,Iy,bHo,gd,vHo,OV,FHo,THo,VV,MHo,EHo,CHo,qy,wHo,tpe,AHo,yHo,LHo,_t,Ny,xHo,ape,$Ho,kHo,hd,SHo,npe,RHo,BHo,XV,PHo,IHo,qHo,gv,NHo,co,jy,jHo,spe,DHo,GHo,Oa,OHo,lpe,VHo,XHo,ipe,zHo,QHo,dpe,WHo,HHo,UHo,je,hv,cpe,JHo,YHo,zV,KHo,ZHo,eUo,pv,fpe,oUo,rUo,QV,tUo,aUo,nUo,uv,mpe,sUo,lUo,WV,iUo,dUo,cUo,_v,gpe,fUo,mUo,HV,gUo,hUo,pUo,bv,hpe,uUo,_Uo,UV,bUo,vUo,FUo,vv,ppe,TUo,MUo,JV,EUo,CUo,wUo,Fv,upe,AUo,yUo,YV,LUo,xUo,$Uo,Tv,_pe,kUo,SUo,KV,RUo,BUo,PUo,Mv,IUo,bpe,qUo,NUo,vpe,jUo,DUo,Ev,KPe,pd,Cv,Fpe,Dy,GUo,Tpe,OUo,ZPe,Xo,Gy,VUo,ud,XUo,ZV,zUo,QUo,eX,WUo,HUo,UUo,Oy,JUo,Mpe,YUo,KUo,ZUo,bt,Vy,eJo,Epe,oJo,rJo,_d,tJo,Cpe,aJo,nJo,oX,sJo,lJo,iJo,wv,dJo,fo,Xy,cJo,wpe,fJo,mJo,Va,gJo,Ape,hJo,pJo,ype,uJo,_Jo,Lpe,bJo,vJo,FJo,zy,Av,xpe,TJo,MJo,rX,EJo,CJo,wJo,yv,$pe,AJo,yJo,tX,LJo,xJo,$Jo,Lv,kJo,kpe,SJo,RJo,Spe,BJo,PJo,xv,eIe,bd,$v,Rpe,Qy,IJo,Bpe,qJo,oIe,zo,Wy,NJo,vd,jJo,aX,DJo,GJo,nX,OJo,VJo,XJo,Hy,zJo,Ppe,QJo,WJo,HJo,vt,Uy,UJo,Ipe,JJo,YJo,Fd,KJo,qpe,ZJo,eYo,sX,oYo,rYo,tYo,kv,aYo,mo,Jy,nYo,Npe,sYo,lYo,Xa,iYo,jpe,dYo,cYo,Dpe,fYo,mYo,Gpe,gYo,hYo,pYo,za,Sv,Ope,uYo,_Yo,lX,bYo,vYo,FYo,Rv,Vpe,TYo,MYo,iX,EYo,CYo,wYo,Bv,Xpe,AYo,yYo,dX,LYo,xYo,$Yo,Pv,zpe,kYo,SYo,cX,RYo,BYo,PYo,Iv,IYo,Qpe,qYo,NYo,Wpe,jYo,DYo,qv,rIe,Td,Nv,Hpe,Yy,GYo,Upe,OYo,tIe,Qo,Ky,VYo,Md,XYo,fX,zYo,QYo,mX,WYo,HYo,UYo,Zy,JYo,Jpe,YYo,KYo,ZYo,Ft,eL,eKo,Ype,oKo,rKo,Ed,tKo,Kpe,aKo,nKo,gX,sKo,lKo,iKo,jv,dKo,go,oL,cKo,Zpe,fKo,mKo,Qa,gKo,eue,hKo,pKo,oue,uKo,_Ko,rue,bKo,vKo,FKo,Cd,Dv,tue,TKo,MKo,hX,EKo,CKo,wKo,Gv,aue,AKo,yKo,pX,LKo,xKo,$Ko,Ov,nue,kKo,SKo,uX,RKo,BKo,PKo,Vv,IKo,sue,qKo,NKo,lue,jKo,DKo,Xv,aIe,wd,zv,iue,rL,GKo,due,OKo,nIe,Wo,tL,VKo,Ad,XKo,_X,zKo,QKo,bX,WKo,HKo,UKo,aL,JKo,cue,YKo,KKo,ZKo,Tt,nL,eZo,fue,oZo,rZo,yd,tZo,mue,aZo,nZo,vX,sZo,lZo,iZo,Qv,dZo,ho,sL,cZo,gue,fZo,mZo,Wa,gZo,hue,hZo,pZo,pue,uZo,_Zo,uue,bZo,vZo,FZo,lL,Wv,_ue,TZo,MZo,FX,EZo,CZo,wZo,Hv,bue,AZo,yZo,TX,LZo,xZo,$Zo,Uv,kZo,vue,SZo,RZo,Fue,BZo,PZo,Jv,sIe,Ld,Yv,Tue,iL,IZo,Mue,qZo,lIe,Ho,dL,NZo,xd,jZo,MX,DZo,GZo,EX,OZo,VZo,XZo,cL,zZo,Eue,QZo,WZo,HZo,Mt,fL,UZo,Cue,JZo,YZo,$d,KZo,wue,ZZo,eer,CX,oer,rer,ter,Kv,aer,po,mL,ner,Aue,ser,ler,Ha,ier,yue,der,cer,Lue,fer,mer,xue,ger,her,per,$ue,Zv,kue,uer,_er,wX,ber,ver,Fer,eF,Ter,Sue,Mer,Eer,Rue,Cer,wer,oF,iIe,kd,rF,Bue,gL,Aer,Pue,yer,dIe,Uo,hL,Ler,Sd,xer,AX,$er,ker,yX,Ser,Rer,Ber,pL,Per,Iue,Ier,qer,Ner,Et,uL,jer,que,Der,Ger,Rd,Oer,Nue,Ver,Xer,LX,zer,Qer,Wer,tF,Her,uo,_L,Uer,jue,Jer,Yer,Ua,Ker,Due,Zer,eor,Gue,oor,ror,Oue,tor,aor,nor,Ja,aF,Vue,sor,lor,xX,ior,dor,cor,nF,Xue,mor,gor,$X,hor,por,uor,sF,zue,_or,bor,kX,vor,For,Tor,lF,Que,Mor,Eor,SX,Cor,wor,Aor,iF,yor,Wue,Lor,xor,Hue,$or,kor,dF,cIe,Bd,cF,Uue,bL,Sor,Jue,Ror,fIe,Jo,vL,Bor,Pd,Por,RX,Ior,qor,BX,Nor,jor,Dor,FL,Gor,Yue,Oor,Vor,Xor,Ct,TL,zor,Kue,Qor,Wor,Id,Hor,Zue,Uor,Jor,PX,Yor,Kor,Zor,fF,err,_o,ML,orr,e_e,rrr,trr,Ya,arr,o_e,nrr,srr,r_e,lrr,irr,t_e,drr,crr,frr,a_e,mF,n_e,mrr,grr,IX,hrr,prr,urr,gF,_rr,s_e,brr,vrr,l_e,Frr,Trr,hF,mIe,qd,pF,i_e,EL,Mrr,d_e,Err,gIe,Yo,CL,Crr,Nd,wrr,qX,Arr,yrr,NX,Lrr,xrr,$rr,wL,krr,c_e,Srr,Rrr,Brr,wt,AL,Prr,f_e,Irr,qrr,jd,Nrr,m_e,jrr,Drr,jX,Grr,Orr,Vrr,uF,Xrr,wr,yL,zrr,g_e,Qrr,Wrr,Ka,Hrr,h_e,Urr,Jrr,p_e,Yrr,Krr,u_e,Zrr,etr,otr,j,_F,__e,rtr,ttr,DX,atr,ntr,str,bF,b_e,ltr,itr,GX,dtr,ctr,ftr,vF,v_e,mtr,gtr,OX,htr,ptr,utr,FF,F_e,_tr,btr,VX,vtr,Ftr,Ttr,TF,T_e,Mtr,Etr,XX,Ctr,wtr,Atr,MF,M_e,ytr,Ltr,zX,xtr,$tr,ktr,EF,E_e,Str,Rtr,QX,Btr,Ptr,Itr,CF,C_e,qtr,Ntr,WX,jtr,Dtr,Gtr,wF,w_e,Otr,Vtr,HX,Xtr,ztr,Qtr,AF,A_e,Wtr,Htr,UX,Utr,Jtr,Ytr,yF,y_e,Ktr,Ztr,JX,ear,oar,rar,LF,L_e,tar,aar,YX,nar,sar,lar,xF,x_e,iar,dar,KX,car,far,mar,$F,$_e,gar,har,ZX,par,uar,_ar,kF,k_e,bar,Far,ez,Tar,Mar,Ear,SF,S_e,Car,war,oz,Aar,yar,Lar,RF,R_e,xar,$ar,rz,kar,Sar,Rar,Bs,B_e,Bar,Par,tz,Iar,qar,az,Nar,jar,Dar,BF,P_e,Gar,Oar,nz,Var,Xar,zar,PF,I_e,Qar,War,sz,Har,Uar,Jar,IF,q_e,Yar,Kar,lz,Zar,enr,onr,qF,N_e,rnr,tnr,iz,anr,nnr,snr,NF,j_e,lnr,inr,dz,dnr,cnr,fnr,jF,D_e,mnr,gnr,cz,hnr,pnr,unr,DF,G_e,_nr,bnr,fz,vnr,Fnr,Tnr,GF,O_e,Mnr,Enr,mz,Cnr,wnr,Anr,OF,V_e,ynr,Lnr,gz,xnr,$nr,knr,VF,X_e,Snr,Rnr,hz,Bnr,Pnr,Inr,XF,z_e,qnr,Nnr,pz,jnr,Dnr,Gnr,zF,Q_e,Onr,Vnr,uz,Xnr,znr,Qnr,QF,W_e,Wnr,Hnr,_z,Unr,Jnr,Ynr,WF,H_e,Knr,Znr,bz,esr,osr,rsr,HF,U_e,tsr,asr,vz,nsr,ssr,lsr,UF,J_e,isr,dsr,Fz,csr,fsr,msr,JF,Y_e,gsr,hsr,Tz,psr,usr,_sr,YF,K_e,bsr,vsr,Mz,Fsr,Tsr,Msr,KF,Z_e,Esr,Csr,Ez,wsr,Asr,ysr,ZF,e1e,Lsr,xsr,Cz,$sr,ksr,Ssr,e0,o1e,Rsr,Bsr,wz,Psr,Isr,qsr,o0,r1e,Nsr,jsr,Az,Dsr,Gsr,Osr,r0,t1e,Vsr,Xsr,yz,zsr,Qsr,Wsr,t0,a1e,Hsr,Usr,Lz,Jsr,Ysr,Ksr,a0,n1e,Zsr,elr,xz,olr,rlr,tlr,n0,s1e,alr,nlr,$z,slr,llr,ilr,s0,l1e,dlr,clr,kz,flr,mlr,glr,l0,hIe,Dd,i0,i1e,LL,hlr,d1e,plr,pIe,Ko,xL,ulr,Gd,_lr,Sz,blr,vlr,Rz,Flr,Tlr,Mlr,$L,Elr,c1e,Clr,wlr,Alr,At,kL,ylr,f1e,Llr,xlr,Od,$lr,m1e,klr,Slr,Bz,Rlr,Blr,Plr,d0,Ilr,Ar,SL,qlr,g1e,Nlr,jlr,Za,Dlr,h1e,Glr,Olr,p1e,Vlr,Xlr,u1e,zlr,Qlr,Wlr,ne,c0,_1e,Hlr,Ulr,Pz,Jlr,Ylr,Klr,f0,b1e,Zlr,eir,Iz,oir,rir,tir,m0,v1e,air,nir,qz,sir,lir,iir,g0,F1e,dir,cir,Nz,fir,mir,gir,h0,T1e,hir,pir,jz,uir,_ir,bir,p0,M1e,vir,Fir,Dz,Tir,Mir,Eir,u0,E1e,Cir,wir,Gz,Air,yir,Lir,_0,C1e,xir,$ir,Oz,kir,Sir,Rir,b0,w1e,Bir,Pir,Vz,Iir,qir,Nir,v0,A1e,jir,Dir,Xz,Gir,Oir,Vir,F0,y1e,Xir,zir,zz,Qir,Wir,Hir,T0,L1e,Uir,Jir,Qz,Yir,Kir,Zir,M0,x1e,edr,odr,Wz,rdr,tdr,adr,E0,$1e,ndr,sdr,Hz,ldr,idr,ddr,C0,k1e,cdr,fdr,Uz,mdr,gdr,hdr,w0,S1e,pdr,udr,Jz,_dr,bdr,vdr,A0,R1e,Fdr,Tdr,Yz,Mdr,Edr,Cdr,y0,B1e,wdr,Adr,Kz,ydr,Ldr,xdr,L0,P1e,$dr,kdr,Zz,Sdr,Rdr,Bdr,x0,I1e,Pdr,Idr,eQ,qdr,Ndr,jdr,$0,q1e,Ddr,Gdr,oQ,Odr,Vdr,Xdr,k0,N1e,zdr,Qdr,rQ,Wdr,Hdr,Udr,S0,j1e,Jdr,Ydr,tQ,Kdr,Zdr,ecr,R0,uIe,Vd,B0,D1e,RL,ocr,G1e,rcr,_Ie,Zo,BL,tcr,Xd,acr,aQ,ncr,scr,nQ,lcr,icr,dcr,PL,ccr,O1e,fcr,mcr,gcr,yt,IL,hcr,V1e,pcr,ucr,zd,_cr,X1e,bcr,vcr,sQ,Fcr,Tcr,Mcr,P0,Ecr,yr,qL,Ccr,z1e,wcr,Acr,en,ycr,Q1e,Lcr,xcr,W1e,$cr,kcr,H1e,Scr,Rcr,Bcr,Te,I0,U1e,Pcr,Icr,lQ,qcr,Ncr,jcr,q0,J1e,Dcr,Gcr,iQ,Ocr,Vcr,Xcr,N0,Y1e,zcr,Qcr,dQ,Wcr,Hcr,Ucr,j0,K1e,Jcr,Ycr,cQ,Kcr,Zcr,efr,D0,Z1e,ofr,rfr,fQ,tfr,afr,nfr,G0,ebe,sfr,lfr,mQ,ifr,dfr,cfr,O0,obe,ffr,mfr,gQ,gfr,hfr,pfr,V0,rbe,ufr,_fr,hQ,bfr,vfr,Ffr,X0,tbe,Tfr,Mfr,pQ,Efr,Cfr,wfr,z0,abe,Afr,yfr,uQ,Lfr,xfr,$fr,Q0,nbe,kfr,Sfr,_Q,Rfr,Bfr,Pfr,W0,sbe,Ifr,qfr,bQ,Nfr,jfr,Dfr,H0,bIe,Qd,U0,lbe,NL,Gfr,ibe,Ofr,vIe,er,jL,Vfr,Wd,Xfr,vQ,zfr,Qfr,FQ,Wfr,Hfr,Ufr,DL,Jfr,dbe,Yfr,Kfr,Zfr,Lt,GL,emr,cbe,omr,rmr,Hd,tmr,fbe,amr,nmr,TQ,smr,lmr,imr,J0,dmr,Lr,OL,cmr,mbe,fmr,mmr,on,gmr,gbe,hmr,pmr,hbe,umr,_mr,pbe,bmr,vmr,Fmr,Ud,Y0,ube,Tmr,Mmr,MQ,Emr,Cmr,wmr,K0,_be,Amr,ymr,EQ,Lmr,xmr,$mr,Z0,bbe,kmr,Smr,CQ,Rmr,Bmr,Pmr,eT,FIe,Jd,oT,vbe,VL,Imr,Fbe,qmr,TIe,or,XL,Nmr,Yd,jmr,wQ,Dmr,Gmr,AQ,Omr,Vmr,Xmr,zL,zmr,Tbe,Qmr,Wmr,Hmr,xt,QL,Umr,Mbe,Jmr,Ymr,Kd,Kmr,Ebe,Zmr,egr,yQ,ogr,rgr,tgr,rT,agr,xr,WL,ngr,Cbe,sgr,lgr,rn,igr,wbe,dgr,cgr,Abe,fgr,mgr,ybe,ggr,hgr,pgr,ie,tT,Lbe,ugr,_gr,LQ,bgr,vgr,Fgr,aT,xbe,Tgr,Mgr,xQ,Egr,Cgr,wgr,nT,$be,Agr,ygr,$Q,Lgr,xgr,$gr,sT,kbe,kgr,Sgr,kQ,Rgr,Bgr,Pgr,lT,Sbe,Igr,qgr,SQ,Ngr,jgr,Dgr,iT,Rbe,Ggr,Ogr,RQ,Vgr,Xgr,zgr,dT,Bbe,Qgr,Wgr,BQ,Hgr,Ugr,Jgr,cT,Pbe,Ygr,Kgr,PQ,Zgr,ehr,ohr,fT,Ibe,rhr,thr,IQ,ahr,nhr,shr,mT,qbe,lhr,ihr,qQ,dhr,chr,fhr,gT,Nbe,mhr,ghr,NQ,hhr,phr,uhr,hT,jbe,_hr,bhr,jQ,vhr,Fhr,Thr,pT,Dbe,Mhr,Ehr,DQ,Chr,whr,Ahr,uT,Gbe,yhr,Lhr,GQ,xhr,$hr,khr,_T,Obe,Shr,Rhr,OQ,Bhr,Phr,Ihr,bT,Vbe,qhr,Nhr,VQ,jhr,Dhr,Ghr,vT,Xbe,Ohr,Vhr,XQ,Xhr,zhr,Qhr,FT,zbe,Whr,Hhr,zQ,Uhr,Jhr,Yhr,TT,Qbe,Khr,Zhr,QQ,epr,opr,rpr,MT,Wbe,tpr,apr,WQ,npr,spr,lpr,ET,MIe,Zd,CT,Hbe,HL,ipr,Ube,dpr,EIe,rr,UL,cpr,ec,fpr,HQ,mpr,gpr,UQ,hpr,ppr,upr,JL,_pr,Jbe,bpr,vpr,Fpr,$t,YL,Tpr,Ybe,Mpr,Epr,oc,Cpr,Kbe,wpr,Apr,JQ,ypr,Lpr,xpr,wT,$pr,$r,KL,kpr,Zbe,Spr,Rpr,tn,Bpr,e4e,Ppr,Ipr,o4e,qpr,Npr,r4e,jpr,Dpr,Gpr,ye,AT,t4e,Opr,Vpr,YQ,Xpr,zpr,Qpr,yT,a4e,Wpr,Hpr,KQ,Upr,Jpr,Ypr,LT,n4e,Kpr,Zpr,ZQ,eur,our,rur,xT,s4e,tur,aur,eW,nur,sur,lur,$T,l4e,iur,dur,oW,cur,fur,mur,kT,i4e,gur,hur,rW,pur,uur,_ur,ST,d4e,bur,vur,tW,Fur,Tur,Mur,RT,c4e,Eur,Cur,aW,wur,Aur,yur,BT,f4e,Lur,xur,nW,$ur,kur,Sur,PT,m4e,Rur,Bur,sW,Pur,Iur,qur,IT,CIe,rc,qT,g4e,ZL,Nur,h4e,jur,wIe,tr,e8,Dur,tc,Gur,lW,Our,Vur,iW,Xur,zur,Qur,o8,Wur,p4e,Hur,Uur,Jur,kt,r8,Yur,u4e,Kur,Zur,ac,e_r,_4e,o_r,r_r,dW,t_r,a_r,n_r,NT,s_r,kr,t8,l_r,b4e,i_r,d_r,an,c_r,v4e,f_r,m_r,F4e,g_r,h_r,T4e,p_r,u_r,__r,Z,jT,M4e,b_r,v_r,cW,F_r,T_r,M_r,DT,E4e,E_r,C_r,fW,w_r,A_r,y_r,GT,C4e,L_r,x_r,mW,$_r,k_r,S_r,OT,w4e,R_r,B_r,gW,P_r,I_r,q_r,VT,A4e,N_r,j_r,hW,D_r,G_r,O_r,XT,y4e,V_r,X_r,pW,z_r,Q_r,W_r,zT,L4e,H_r,U_r,uW,J_r,Y_r,K_r,QT,x4e,Z_r,e1r,_W,o1r,r1r,t1r,WT,$4e,a1r,n1r,bW,s1r,l1r,i1r,HT,k4e,d1r,c1r,vW,f1r,m1r,g1r,UT,S4e,h1r,p1r,FW,u1r,_1r,b1r,JT,R4e,v1r,F1r,TW,T1r,M1r,E1r,YT,B4e,C1r,w1r,MW,A1r,y1r,L1r,KT,P4e,x1r,$1r,EW,k1r,S1r,R1r,ZT,I4e,B1r,P1r,CW,I1r,q1r,N1r,e7,q4e,j1r,D1r,wW,G1r,O1r,V1r,o7,N4e,X1r,z1r,AW,Q1r,W1r,H1r,r7,j4e,U1r,J1r,yW,Y1r,K1r,Z1r,t7,D4e,ebr,obr,LW,rbr,tbr,abr,a7,G4e,nbr,sbr,xW,lbr,ibr,dbr,n7,O4e,cbr,fbr,$W,mbr,gbr,hbr,s7,V4e,pbr,ubr,kW,_br,bbr,vbr,l7,X4e,Fbr,Tbr,SW,Mbr,Ebr,Cbr,i7,z4e,wbr,Abr,RW,ybr,Lbr,xbr,d7,Q4e,$br,kbr,BW,Sbr,Rbr,Bbr,c7,W4e,Pbr,Ibr,PW,qbr,Nbr,jbr,f7,AIe,nc,m7,H4e,a8,Dbr,U4e,Gbr,yIe,ar,n8,Obr,sc,Vbr,IW,Xbr,zbr,qW,Qbr,Wbr,Hbr,s8,Ubr,J4e,Jbr,Ybr,Kbr,St,l8,Zbr,Y4e,e4r,o4r,lc,r4r,K4e,t4r,a4r,NW,n4r,s4r,l4r,g7,i4r,Sr,i8,d4r,Z4e,c4r,f4r,nn,m4r,e2e,g4r,h4r,o2e,p4r,u4r,r2e,_4r,b4r,v4r,pe,h7,t2e,F4r,T4r,jW,M4r,E4r,C4r,p7,a2e,w4r,A4r,DW,y4r,L4r,x4r,u7,n2e,$4r,k4r,GW,S4r,R4r,B4r,_7,s2e,P4r,I4r,OW,q4r,N4r,j4r,b7,l2e,D4r,G4r,VW,O4r,V4r,X4r,v7,i2e,z4r,Q4r,XW,W4r,H4r,U4r,F7,d2e,J4r,Y4r,zW,K4r,Z4r,e2r,T7,c2e,o2r,r2r,QW,t2r,a2r,n2r,M7,f2e,s2r,l2r,WW,i2r,d2r,c2r,E7,m2e,f2r,m2r,HW,g2r,h2r,p2r,C7,g2e,u2r,_2r,UW,b2r,v2r,F2r,w7,h2e,T2r,M2r,JW,E2r,C2r,w2r,A7,p2e,A2r,y2r,YW,L2r,x2r,$2r,y7,u2e,k2r,S2r,KW,R2r,B2r,P2r,L7,_2e,I2r,q2r,ZW,N2r,j2r,D2r,x7,b2e,G2r,O2r,eH,V2r,X2r,z2r,$7,v2e,Q2r,W2r,oH,H2r,U2r,J2r,k7,LIe,ic,S7,F2e,d8,Y2r,T2e,K2r,xIe,nr,c8,Z2r,dc,e5r,rH,o5r,r5r,tH,t5r,a5r,n5r,f8,s5r,M2e,l5r,i5r,d5r,Rt,m8,c5r,E2e,f5r,m5r,cc,g5r,C2e,h5r,p5r,aH,u5r,_5r,b5r,R7,v5r,Rr,g8,F5r,w2e,T5r,M5r,sn,E5r,A2e,C5r,w5r,y2e,A5r,y5r,L2e,L5r,x5r,$5r,h8,B7,x2e,k5r,S5r,nH,R5r,B5r,P5r,P7,$2e,I5r,q5r,sH,N5r,j5r,D5r,I7,$Ie,fc,q7,k2e,p8,G5r,S2e,O5r,kIe,sr,u8,V5r,mc,X5r,lH,z5r,Q5r,iH,W5r,H5r,U5r,_8,J5r,R2e,Y5r,K5r,Z5r,Bt,b8,evr,B2e,ovr,rvr,gc,tvr,P2e,avr,nvr,dH,svr,lvr,ivr,N7,dvr,Br,v8,cvr,I2e,fvr,mvr,ln,gvr,q2e,hvr,pvr,N2e,uvr,_vr,j2e,bvr,vvr,Fvr,D2e,j7,G2e,Tvr,Mvr,cH,Evr,Cvr,wvr,D7,SIe,hc,G7,O2e,F8,Avr,V2e,yvr,RIe,lr,T8,Lvr,pc,xvr,fH,$vr,kvr,mH,Svr,Rvr,Bvr,M8,Pvr,X2e,Ivr,qvr,Nvr,Pt,E8,jvr,z2e,Dvr,Gvr,uc,Ovr,Q2e,Vvr,Xvr,gH,zvr,Qvr,Wvr,O7,Hvr,Pr,C8,Uvr,W2e,Jvr,Yvr,dn,Kvr,H2e,Zvr,eFr,U2e,oFr,rFr,J2e,tFr,aFr,nFr,de,V7,Y2e,sFr,lFr,hH,iFr,dFr,cFr,X7,K2e,fFr,mFr,pH,gFr,hFr,pFr,z7,Z2e,uFr,_Fr,uH,bFr,vFr,FFr,Q7,e5e,TFr,MFr,_H,EFr,CFr,wFr,W7,o5e,AFr,yFr,bH,LFr,xFr,$Fr,H7,r5e,kFr,SFr,vH,RFr,BFr,PFr,U7,t5e,IFr,qFr,FH,NFr,jFr,DFr,J7,a5e,GFr,OFr,TH,VFr,XFr,zFr,Y7,n5e,QFr,WFr,MH,HFr,UFr,JFr,K7,s5e,YFr,KFr,EH,ZFr,e0r,o0r,Z7,l5e,r0r,t0r,CH,a0r,n0r,s0r,eM,i5e,l0r,i0r,wH,d0r,c0r,f0r,oM,d5e,m0r,g0r,AH,h0r,p0r,u0r,rM,c5e,_0r,b0r,yH,v0r,F0r,T0r,tM,f5e,M0r,E0r,LH,C0r,w0r,A0r,aM,m5e,y0r,L0r,xH,x0r,$0r,k0r,nM,g5e,S0r,R0r,$H,B0r,P0r,I0r,sM,h5e,q0r,N0r,kH,j0r,D0r,G0r,lM,p5e,O0r,V0r,SH,X0r,z0r,Q0r,iM,u5e,W0r,H0r,RH,U0r,J0r,Y0r,dM,BIe,_c,cM,_5e,w8,K0r,b5e,Z0r,PIe,ir,A8,eTr,bc,oTr,BH,rTr,tTr,PH,aTr,nTr,sTr,y8,lTr,v5e,iTr,dTr,cTr,It,L8,fTr,F5e,mTr,gTr,vc,hTr,T5e,pTr,uTr,IH,_Tr,bTr,vTr,fM,FTr,Ir,x8,TTr,M5e,MTr,ETr,cn,CTr,E5e,wTr,ATr,C5e,yTr,LTr,w5e,xTr,$Tr,kTr,ce,mM,A5e,STr,RTr,qH,BTr,PTr,ITr,gM,y5e,qTr,NTr,NH,jTr,DTr,GTr,hM,L5e,OTr,VTr,jH,XTr,zTr,QTr,pM,x5e,WTr,HTr,DH,UTr,JTr,YTr,uM,$5e,KTr,ZTr,GH,e7r,o7r,r7r,_M,k5e,t7r,a7r,OH,n7r,s7r,l7r,bM,S5e,i7r,d7r,VH,c7r,f7r,m7r,vM,R5e,g7r,h7r,XH,p7r,u7r,_7r,FM,B5e,b7r,v7r,zH,F7r,T7r,M7r,TM,P5e,E7r,C7r,QH,w7r,A7r,y7r,MM,I5e,L7r,x7r,WH,$7r,k7r,S7r,EM,q5e,R7r,B7r,HH,P7r,I7r,q7r,CM,N5e,N7r,j7r,UH,D7r,G7r,O7r,wM,j5e,V7r,X7r,JH,z7r,Q7r,W7r,AM,D5e,H7r,U7r,YH,J7r,Y7r,K7r,yM,G5e,Z7r,eMr,KH,oMr,rMr,tMr,LM,O5e,aMr,nMr,ZH,sMr,lMr,iMr,xM,V5e,dMr,cMr,eU,fMr,mMr,gMr,$M,X5e,hMr,pMr,oU,uMr,_Mr,bMr,kM,z5e,vMr,FMr,rU,TMr,MMr,EMr,SM,IIe,Fc,RM,Q5e,$8,CMr,W5e,wMr,qIe,dr,k8,AMr,Tc,yMr,tU,LMr,xMr,aU,$Mr,kMr,SMr,S8,RMr,H5e,BMr,PMr,IMr,qt,R8,qMr,U5e,NMr,jMr,Mc,DMr,J5e,GMr,OMr,nU,VMr,XMr,zMr,BM,QMr,qr,B8,WMr,Y5e,HMr,UMr,fn,JMr,K5e,YMr,KMr,Z5e,ZMr,eEr,eve,oEr,rEr,tEr,ove,PM,rve,aEr,nEr,sU,sEr,lEr,iEr,IM,NIe,Ec,qM,tve,P8,dEr,ave,cEr,jIe,cr,I8,fEr,Cc,mEr,lU,gEr,hEr,iU,pEr,uEr,_Er,q8,bEr,nve,vEr,FEr,TEr,Nt,N8,MEr,sve,EEr,CEr,wc,wEr,lve,AEr,yEr,dU,LEr,xEr,$Er,NM,kEr,Nr,j8,SEr,ive,REr,BEr,mn,PEr,dve,IEr,qEr,cve,NEr,jEr,fve,DEr,GEr,OEr,mve,jM,gve,VEr,XEr,cU,zEr,QEr,WEr,DM,DIe,Ac,GM,hve,D8,HEr,pve,UEr,GIe,fr,G8,JEr,yc,YEr,fU,KEr,ZEr,mU,eCr,oCr,rCr,O8,tCr,uve,aCr,nCr,sCr,jt,V8,lCr,_ve,iCr,dCr,Lc,cCr,bve,fCr,mCr,gU,gCr,hCr,pCr,OM,uCr,jr,X8,_Cr,vve,bCr,vCr,gn,FCr,Fve,TCr,MCr,Tve,ECr,CCr,Mve,wCr,ACr,yCr,oe,VM,Eve,LCr,xCr,hU,$Cr,kCr,SCr,XM,Cve,RCr,BCr,pU,PCr,ICr,qCr,zM,wve,NCr,jCr,uU,DCr,GCr,OCr,QM,Ave,VCr,XCr,_U,zCr,QCr,WCr,WM,yve,HCr,UCr,bU,JCr,YCr,KCr,HM,Lve,ZCr,e3r,vU,o3r,r3r,t3r,UM,xve,a3r,n3r,FU,s3r,l3r,i3r,JM,$ve,d3r,c3r,TU,f3r,m3r,g3r,YM,kve,h3r,p3r,MU,u3r,_3r,b3r,KM,Sve,v3r,F3r,EU,T3r,M3r,E3r,ZM,Rve,C3r,w3r,CU,A3r,y3r,L3r,eE,Bve,x3r,$3r,wU,k3r,S3r,R3r,oE,Pve,B3r,P3r,AU,I3r,q3r,N3r,rE,Ive,j3r,D3r,yU,G3r,O3r,V3r,tE,qve,X3r,z3r,LU,Q3r,W3r,H3r,aE,Nve,U3r,J3r,xU,Y3r,K3r,Z3r,nE,jve,ewr,owr,$U,rwr,twr,awr,sE,Dve,nwr,swr,kU,lwr,iwr,dwr,lE,Gve,cwr,fwr,SU,mwr,gwr,hwr,iE,Ove,pwr,uwr,RU,_wr,bwr,vwr,dE,Vve,Fwr,Twr,BU,Mwr,Ewr,Cwr,cE,Xve,wwr,Awr,PU,ywr,Lwr,xwr,fE,zve,$wr,kwr,IU,Swr,Rwr,Bwr,mE,Qve,Pwr,Iwr,qU,qwr,Nwr,jwr,gE,Wve,Dwr,Gwr,NU,Owr,Vwr,Xwr,hE,OIe,xc,pE,Hve,z8,zwr,Uve,Qwr,VIe,mr,Q8,Wwr,$c,Hwr,jU,Uwr,Jwr,DU,Ywr,Kwr,Zwr,W8,eAr,Jve,oAr,rAr,tAr,Dt,H8,aAr,Yve,nAr,sAr,kc,lAr,Kve,iAr,dAr,GU,cAr,fAr,mAr,uE,gAr,Dr,U8,hAr,Zve,pAr,uAr,hn,_Ar,eFe,bAr,vAr,oFe,FAr,TAr,rFe,MAr,EAr,CAr,ke,_E,tFe,wAr,AAr,OU,yAr,LAr,xAr,bE,aFe,$Ar,kAr,VU,SAr,RAr,BAr,vE,nFe,PAr,IAr,XU,qAr,NAr,jAr,FE,sFe,DAr,GAr,zU,OAr,VAr,XAr,TE,lFe,zAr,QAr,QU,WAr,HAr,UAr,ME,iFe,JAr,YAr,WU,KAr,ZAr,e6r,EE,dFe,o6r,r6r,HU,t6r,a6r,n6r,CE,cFe,s6r,l6r,UU,i6r,d6r,c6r,wE,fFe,f6r,m6r,JU,g6r,h6r,p6r,AE,XIe,Sc,yE,mFe,J8,u6r,gFe,_6r,zIe,gr,Y8,b6r,Rc,v6r,YU,F6r,T6r,KU,M6r,E6r,C6r,K8,w6r,hFe,A6r,y6r,L6r,Gt,Z8,x6r,pFe,$6r,k6r,Bc,S6r,uFe,R6r,B6r,ZU,P6r,I6r,q6r,LE,N6r,Gr,ex,j6r,_Fe,D6r,G6r,pn,O6r,bFe,V6r,X6r,vFe,z6r,Q6r,FFe,W6r,H6r,U6r,Me,xE,TFe,J6r,Y6r,eJ,K6r,Z6r,eyr,$E,MFe,oyr,ryr,oJ,tyr,ayr,nyr,kE,EFe,syr,lyr,rJ,iyr,dyr,cyr,SE,CFe,fyr,myr,tJ,gyr,hyr,pyr,RE,wFe,uyr,_yr,aJ,byr,vyr,Fyr,BE,AFe,Tyr,Myr,nJ,Eyr,Cyr,wyr,PE,yFe,Ayr,yyr,sJ,Lyr,xyr,$yr,IE,LFe,kyr,Syr,lJ,Ryr,Byr,Pyr,qE,xFe,Iyr,qyr,iJ,Nyr,jyr,Dyr,NE,$Fe,Gyr,Oyr,dJ,Vyr,Xyr,zyr,jE,kFe,Qyr,Wyr,cJ,Hyr,Uyr,Jyr,DE,SFe,Yyr,Kyr,fJ,Zyr,eLr,oLr,GE,QIe,Pc,OE,RFe,ox,rLr,BFe,tLr,WIe,hr,rx,aLr,Ic,nLr,mJ,sLr,lLr,gJ,iLr,dLr,cLr,tx,fLr,PFe,mLr,gLr,hLr,Ot,ax,pLr,IFe,uLr,_Lr,qc,bLr,qFe,vLr,FLr,hJ,TLr,MLr,ELr,VE,CLr,Or,nx,wLr,NFe,ALr,yLr,un,LLr,jFe,xLr,$Lr,DFe,kLr,SLr,GFe,RLr,BLr,PLr,Le,XE,OFe,ILr,qLr,pJ,NLr,jLr,DLr,zE,VFe,GLr,OLr,uJ,VLr,XLr,zLr,QE,XFe,QLr,WLr,_J,HLr,ULr,JLr,WE,zFe,YLr,KLr,bJ,ZLr,e8r,o8r,HE,QFe,r8r,t8r,vJ,a8r,n8r,s8r,UE,WFe,l8r,i8r,FJ,d8r,c8r,f8r,JE,HFe,m8r,g8r,TJ,h8r,p8r,u8r,YE,UFe,_8r,b8r,MJ,v8r,F8r,T8r,KE,JFe,M8r,E8r,EJ,C8r,w8r,A8r,ZE,YFe,y8r,L8r,CJ,x8r,$8r,k8r,eC,HIe,Nc,oC,KFe,sx,S8r,ZFe,R8r,UIe,pr,lx,B8r,jc,P8r,wJ,I8r,q8r,AJ,N8r,j8r,D8r,ix,G8r,e0e,O8r,V8r,X8r,Vt,dx,z8r,o0e,Q8r,W8r,Dc,H8r,r0e,U8r,J8r,yJ,Y8r,K8r,Z8r,rC,exr,Vr,cx,oxr,t0e,rxr,txr,_n,axr,a0e,nxr,sxr,n0e,lxr,ixr,s0e,dxr,cxr,fxr,Se,tC,l0e,mxr,gxr,LJ,hxr,pxr,uxr,aC,i0e,_xr,bxr,xJ,vxr,Fxr,Txr,nC,d0e,Mxr,Exr,$J,Cxr,wxr,Axr,sC,c0e,yxr,Lxr,kJ,xxr,$xr,kxr,lC,f0e,Sxr,Rxr,SJ,Bxr,Pxr,Ixr,iC,m0e,qxr,Nxr,RJ,jxr,Dxr,Gxr,dC,g0e,Oxr,Vxr,BJ,Xxr,zxr,Qxr,cC,h0e,Wxr,Hxr,PJ,Uxr,Jxr,Yxr,fC,p0e,Kxr,Zxr,IJ,e9r,o9r,r9r,mC,JIe,Gc,gC,u0e,fx,t9r,_0e,a9r,YIe,ur,mx,n9r,Oc,s9r,qJ,l9r,i9r,NJ,d9r,c9r,f9r,gx,m9r,b0e,g9r,h9r,p9r,Xt,hx,u9r,v0e,_9r,b9r,Vc,v9r,F0e,F9r,T9r,jJ,M9r,E9r,C9r,hC,w9r,Xr,px,A9r,T0e,y9r,L9r,bn,x9r,M0e,$9r,k9r,E0e,S9r,R9r,C0e,B9r,P9r,I9r,xe,pC,w0e,q9r,N9r,DJ,j9r,D9r,G9r,uC,A0e,O9r,V9r,GJ,X9r,z9r,Q9r,_C,y0e,W9r,H9r,OJ,U9r,J9r,Y9r,bC,L0e,K9r,Z9r,VJ,e$r,o$r,r$r,vC,x0e,t$r,a$r,XJ,n$r,s$r,l$r,FC,$0e,i$r,d$r,zJ,c$r,f$r,m$r,TC,k0e,g$r,h$r,QJ,p$r,u$r,_$r,MC,S0e,b$r,v$r,WJ,F$r,T$r,M$r,EC,R0e,E$r,C$r,HJ,w$r,A$r,y$r,CC,B0e,L$r,x$r,UJ,$$r,k$r,S$r,wC,KIe,Xc,AC,P0e,ux,R$r,I0e,B$r,ZIe,_r,_x,P$r,zc,I$r,JJ,q$r,N$r,YJ,j$r,D$r,G$r,bx,O$r,q0e,V$r,X$r,z$r,zt,vx,Q$r,N0e,W$r,H$r,Qc,U$r,j0e,J$r,Y$r,KJ,K$r,Z$r,ekr,yC,okr,zr,Fx,rkr,D0e,tkr,akr,vn,nkr,G0e,skr,lkr,O0e,ikr,dkr,V0e,ckr,fkr,mkr,$e,LC,X0e,gkr,hkr,ZJ,pkr,ukr,_kr,xC,z0e,bkr,vkr,eY,Fkr,Tkr,Mkr,$C,Q0e,Ekr,Ckr,oY,wkr,Akr,ykr,kC,W0e,Lkr,xkr,rY,$kr,kkr,Skr,SC,H0e,Rkr,Bkr,tY,Pkr,Ikr,qkr,RC,U0e,Nkr,jkr,aY,Dkr,Gkr,Okr,BC,J0e,Vkr,Xkr,nY,zkr,Qkr,Wkr,PC,Y0e,Hkr,Ukr,sY,Jkr,Ykr,Kkr,IC,K0e,Zkr,eSr,lY,oSr,rSr,tSr,qC,Z0e,aSr,nSr,iY,sSr,lSr,iSr,NC,eqe,Wc,jC,eTe,Tx,dSr,oTe,cSr,oqe,br,Mx,fSr,Hc,mSr,dY,gSr,hSr,cY,pSr,uSr,_Sr,Ex,bSr,rTe,vSr,FSr,TSr,Qt,Cx,MSr,tTe,ESr,CSr,Uc,wSr,aTe,ASr,ySr,fY,LSr,xSr,$Sr,DC,kSr,Qr,wx,SSr,nTe,RSr,BSr,Fn,PSr,sTe,ISr,qSr,lTe,NSr,jSr,iTe,DSr,GSr,OSr,De,GC,dTe,VSr,XSr,mY,zSr,QSr,WSr,OC,cTe,HSr,USr,gY,JSr,YSr,KSr,VC,fTe,ZSr,eRr,hY,oRr,rRr,tRr,XC,mTe,aRr,nRr,pY,sRr,lRr,iRr,zC,gTe,dRr,cRr,uY,fRr,mRr,gRr,QC,hTe,hRr,pRr,_Y,uRr,_Rr,bRr,WC,pTe,vRr,FRr,bY,TRr,MRr,ERr,HC,uTe,CRr,wRr,vY,ARr,yRr,LRr,UC,rqe,Jc,JC,_Te,Ax,xRr,bTe,$Rr,tqe,vr,yx,kRr,Yc,SRr,FY,RRr,BRr,TY,PRr,IRr,qRr,Lx,NRr,vTe,jRr,DRr,GRr,Wt,xx,ORr,FTe,VRr,XRr,Kc,zRr,TTe,QRr,WRr,MY,HRr,URr,JRr,YC,YRr,Wr,$x,KRr,MTe,ZRr,eBr,Tn,oBr,ETe,rBr,tBr,CTe,aBr,nBr,wTe,sBr,lBr,iBr,Ge,KC,ATe,dBr,cBr,EY,fBr,mBr,gBr,ZC,yTe,hBr,pBr,CY,uBr,_Br,bBr,e3,LTe,vBr,FBr,wY,TBr,MBr,EBr,o3,xTe,CBr,wBr,AY,ABr,yBr,LBr,r3,$Te,xBr,$Br,yY,kBr,SBr,RBr,t3,kTe,BBr,PBr,LY,IBr,qBr,NBr,a3,STe,jBr,DBr,xY,GBr,OBr,VBr,n3,RTe,XBr,zBr,$Y,QBr,WBr,HBr,s3,aqe,Zc,l3,BTe,kx,UBr,PTe,JBr,nqe,Fr,Sx,YBr,ef,KBr,kY,ZBr,ePr,SY,oPr,rPr,tPr,Rx,aPr,ITe,nPr,sPr,lPr,Ht,Bx,iPr,qTe,dPr,cPr,of,fPr,NTe,mPr,gPr,RY,hPr,pPr,uPr,i3,_Pr,Hr,Px,bPr,jTe,vPr,FPr,Mn,TPr,DTe,MPr,EPr,GTe,CPr,wPr,OTe,APr,yPr,LPr,VTe,d3,XTe,xPr,$Pr,BY,kPr,SPr,RPr,c3,sqe,rf,f3,zTe,Ix,BPr,QTe,PPr,lqe,Tr,qx,IPr,tf,qPr,PY,NPr,jPr,IY,DPr,GPr,OPr,Nx,VPr,WTe,XPr,zPr,QPr,Ut,jx,WPr,HTe,HPr,UPr,af,JPr,UTe,YPr,KPr,qY,ZPr,eIr,oIr,m3,rIr,Ur,Dx,tIr,JTe,aIr,nIr,En,sIr,YTe,lIr,iIr,KTe,dIr,cIr,ZTe,fIr,mIr,gIr,Gx,g3,e7e,hIr,pIr,NY,uIr,_Ir,bIr,h3,o7e,vIr,FIr,jY,TIr,MIr,EIr,p3,iqe,nf,u3,r7e,Ox,CIr,t7e,wIr,dqe,Mr,Vx,AIr,sf,yIr,DY,LIr,xIr,GY,$Ir,kIr,SIr,Xx,RIr,a7e,BIr,PIr,IIr,Jt,zx,qIr,n7e,NIr,jIr,lf,DIr,s7e,GIr,OIr,OY,VIr,XIr,zIr,_3,QIr,Jr,Qx,WIr,l7e,HIr,UIr,Cn,JIr,i7e,YIr,KIr,d7e,ZIr,eqr,c7e,oqr,rqr,tqr,f7e,b3,m7e,aqr,nqr,VY,sqr,lqr,iqr,v3,cqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),OA=new ee({}),VA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new dqr({props:{warning:!0,$$slots:{default:[Twt]},$$scope:{ctx:A}}}),XA=new ee({}),zA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L563"}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),UA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/configuration_auto.py#L708"}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L377"}}),e6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17054/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),o6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/tokenization_auto.py#L587"}}),r6=new ee({}),t6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),s6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17054/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),vh=new dqr({props:{$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),Fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),l6=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),i6=new ee({}),d6=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L76"}}),m6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new dqr({props:{$$slots:{default:[Awt]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),g6=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/processing_auto.py#L243"}}),h6=new ee({}),p6=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L717"}}),_6=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),b6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),v6=new ee({}),F6=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L724"}}),M6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),E6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),C6=new ee({}),w6=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L739"}}),y6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),L6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),x6=new ee({}),$6=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L746"}}),S6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),R6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),B6=new ee({}),P6=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L753"}}),q6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),N6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),db=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),j6=new ee({}),D6=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L762"}}),O6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),V6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),s4=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),X6=new ee({}),z6=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L796"}}),W6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),i4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),H6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),U6=new ee({}),J6=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L803"}}),K6=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),Z6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),ey=new ee({}),oy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L789"}}),ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),ny=new ee({}),sy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L771"}}),iy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),F5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),cy=new ee({}),fy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L778"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),M5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),py=new ee({}),uy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L812"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),Fy=new ee({}),Ty=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L851"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),z5=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),wy=new ee({}),Ay=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L858"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),W5=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),tv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),$y=new ee({}),ky=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L881"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),nv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),fv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),Py=new ee({}),Iy=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L865"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Ev=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),Dy=new ee({}),Gy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L872"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),wv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),Qy=new ee({}),Wy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L890"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),qv=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),Yy=new ee({}),Ky=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L897"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),jv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),rL=new ee({}),tL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L844"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),iL=new ee({}),dL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L819"}}),fL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),mL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),gL=new ee({}),hL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L826"}}),uL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),bL=new ee({}),vL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_auto.py#L835"}}),TL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),ML=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),EL=new ee({}),CL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),AL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),yL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),LL=new ee({}),xL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),kL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),RL=new ee({}),BL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),IL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),NL=new ee({}),jL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),GL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),eT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),VL=new ee({}),XL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),QL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),rT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),ET=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),HL=new ee({}),UL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),YL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),wT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),IT=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),ZL=new ee({}),e8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),r8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),t8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),a8=new ee({}),n8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),l8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),d8=new ee({}),c8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),m8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),p8=new ee({}),u8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),F8=new ee({}),T8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),w8=new ee({}),A8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),$8=new ee({}),k8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),P8=new ee({}),I8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),D8=new ee({}),G8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),V8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),z8=new ee({}),Q8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),H8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),J8=new ee({}),Y8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),ex=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),GE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),ox=new ee({}),rx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),VE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[e6t]},$$scope:{ctx:A}}}),nx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[o6t]},$$scope:{ctx:A}}}),sx=new ee({}),lx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[r6t]},$$scope:{ctx:A}}}),cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[t6t]},$$scope:{ctx:A}}}),fx=new ee({}),mx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[a6t]},$$scope:{ctx:A}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[n6t]},$$scope:{ctx:A}}}),ux=new ee({}),_x=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[s6t]},$$scope:{ctx:A}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[l6t]},$$scope:{ctx:A}}}),Tx=new ee({}),Mx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[i6t]},$$scope:{ctx:A}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[d6t]},$$scope:{ctx:A}}}),Ax=new ee({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[c6t]},$$scope:{ctx:A}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),s3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[f6t]},$$scope:{ctx:A}}}),kx=new ee({}),Sx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),i3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[m6t]},$$scope:{ctx:A}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),c3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[g6t]},$$scope:{ctx:A}}}),Ix=new ee({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),m3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[h6t]},$$scope:{ctx:A}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[p6t]},$$scope:{ctx:A}}}),Ox=new ee({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L389"}}),_3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[u6t]},$$scope:{ctx:A}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17054/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17054/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17054/src/transformers/models/auto/auto_factory.py#L417"}}),v3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_6t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),NA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),jA=o("AutoConfig"),yn=o(", "),Ln=a("a"),DA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),GA=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),n$=o("will create a model that is an instance of "),gi=a("a"),s$=o("BertModel"),l$=o("."),Eo=l(),Ea=a("p"),i$=o("There is one class of "),pf=a("code"),d$=o("AutoModel"),bje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lPe=l(),hi=a("h2"),uf=a("a"),qZ=a("span"),F(OA.$$.fragment),vje=l(),NZ=a("span"),Fje=o("Extending the Auto Classes"),iPe=l(),$n=a("p"),Tje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=a("code"),Mje=o("NewModel"),Eje=o(", make sure you have a "),DZ=a("code"),Cje=o("NewModelConfig"),wje=o(` then you can add those to the auto
classes like this:`),dPe=l(),F(VA.$$.fragment),cPe=l(),c$=a("p"),Aje=o("You will then be able to use the auto classes like you would usually do!"),fPe=l(),F(_f.$$.fragment),mPe=l(),pi=a("h2"),bf=a("a"),GZ=a("span"),F(XA.$$.fragment),yje=l(),OZ=a("span"),Lje=o("AutoConfig"),gPe=l(),Co=a("div"),F(zA.$$.fragment),xje=l(),QA=a("p"),$je=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f$=a("a"),kje=o("from_pretrained()"),Sje=o(" class method."),Rje=l(),WA=a("p"),Bje=o("This class cannot be instantiated directly using "),VZ=a("code"),Pje=o("__init__()"),Ije=o(" (throws an error)."),qje=l(),Er=a("div"),F(HA.$$.fragment),Nje=l(),XZ=a("p"),jje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Dje=l(),ui=a("p"),Gje=o("The configuration class to instantiate is selected based on the "),zZ=a("code"),Oje=o("model_type"),Vje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=a("code"),Xje=o("pretrained_model_name_or_path"),zje=o(":"),Qje=l(),y=a("ul"),vf=a("li"),WZ=a("strong"),Wje=o("albert"),Hje=o(" \u2014 "),m$=a("a"),Uje=o("AlbertConfig"),Jje=o(" (ALBERT model)"),Yje=l(),Ff=a("li"),HZ=a("strong"),Kje=o("bart"),Zje=o(" \u2014 "),g$=a("a"),eDe=o("BartConfig"),oDe=o(" (BART model)"),rDe=l(),Tf=a("li"),UZ=a("strong"),tDe=o("beit"),aDe=o(" \u2014 "),h$=a("a"),nDe=o("BeitConfig"),sDe=o(" (BEiT model)"),lDe=l(),Mf=a("li"),JZ=a("strong"),iDe=o("bert"),dDe=o(" \u2014 "),p$=a("a"),cDe=o("BertConfig"),fDe=o(" (BERT model)"),mDe=l(),Ef=a("li"),YZ=a("strong"),gDe=o("bert-generation"),hDe=o(" \u2014 "),u$=a("a"),pDe=o("BertGenerationConfig"),uDe=o(" (Bert Generation model)"),_De=l(),Cf=a("li"),KZ=a("strong"),bDe=o("big_bird"),vDe=o(" \u2014 "),_$=a("a"),FDe=o("BigBirdConfig"),TDe=o(" (BigBird model)"),MDe=l(),wf=a("li"),ZZ=a("strong"),EDe=o("bigbird_pegasus"),CDe=o(" \u2014 "),b$=a("a"),wDe=o("BigBirdPegasusConfig"),ADe=o(" (BigBirdPegasus model)"),yDe=l(),Af=a("li"),eee=a("strong"),LDe=o("blenderbot"),xDe=o(" \u2014 "),v$=a("a"),$De=o("BlenderbotConfig"),kDe=o(" (Blenderbot model)"),SDe=l(),yf=a("li"),oee=a("strong"),RDe=o("blenderbot-small"),BDe=o(" \u2014 "),F$=a("a"),PDe=o("BlenderbotSmallConfig"),IDe=o(" (BlenderbotSmall model)"),qDe=l(),Lf=a("li"),ree=a("strong"),NDe=o("camembert"),jDe=o(" \u2014 "),T$=a("a"),DDe=o("CamembertConfig"),GDe=o(" (CamemBERT model)"),ODe=l(),xf=a("li"),tee=a("strong"),VDe=o("canine"),XDe=o(" \u2014 "),M$=a("a"),zDe=o("CanineConfig"),QDe=o(" (Canine model)"),WDe=l(),$f=a("li"),aee=a("strong"),HDe=o("clip"),UDe=o(" \u2014 "),E$=a("a"),JDe=o("CLIPConfig"),YDe=o(" (CLIP model)"),KDe=l(),kf=a("li"),nee=a("strong"),ZDe=o("convbert"),eGe=o(" \u2014 "),C$=a("a"),oGe=o("ConvBertConfig"),rGe=o(" (ConvBERT model)"),tGe=l(),Sf=a("li"),see=a("strong"),aGe=o("convnext"),nGe=o(" \u2014 "),w$=a("a"),sGe=o("ConvNextConfig"),lGe=o(" (ConvNext model)"),iGe=l(),Rf=a("li"),lee=a("strong"),dGe=o("ctrl"),cGe=o(" \u2014 "),A$=a("a"),fGe=o("CTRLConfig"),mGe=o(" (CTRL model)"),gGe=l(),Bf=a("li"),iee=a("strong"),hGe=o("data2vec-audio"),pGe=o(" \u2014 "),y$=a("a"),uGe=o("Data2VecAudioConfig"),_Ge=o(" (Data2VecAudio model)"),bGe=l(),Pf=a("li"),dee=a("strong"),vGe=o("data2vec-text"),FGe=o(" \u2014 "),L$=a("a"),TGe=o("Data2VecTextConfig"),MGe=o(" (Data2VecText model)"),EGe=l(),If=a("li"),cee=a("strong"),CGe=o("data2vec-vision"),wGe=o(" \u2014 "),x$=a("a"),AGe=o("Data2VecVisionConfig"),yGe=o(" (Data2VecVision model)"),LGe=l(),qf=a("li"),fee=a("strong"),xGe=o("deberta"),$Ge=o(" \u2014 "),$$=a("a"),kGe=o("DebertaConfig"),SGe=o(" (DeBERTa model)"),RGe=l(),Nf=a("li"),mee=a("strong"),BGe=o("deberta-v2"),PGe=o(" \u2014 "),k$=a("a"),IGe=o("DebertaV2Config"),qGe=o(" (DeBERTa-v2 model)"),NGe=l(),jf=a("li"),gee=a("strong"),jGe=o("decision_transformer"),DGe=o(" \u2014 "),S$=a("a"),GGe=o("DecisionTransformerConfig"),OGe=o(" (Decision Transformer model)"),VGe=l(),Df=a("li"),hee=a("strong"),XGe=o("deit"),zGe=o(" \u2014 "),R$=a("a"),QGe=o("DeiTConfig"),WGe=o(" (DeiT model)"),HGe=l(),Gf=a("li"),pee=a("strong"),UGe=o("detr"),JGe=o(" \u2014 "),B$=a("a"),YGe=o("DetrConfig"),KGe=o(" (DETR model)"),ZGe=l(),Of=a("li"),uee=a("strong"),eOe=o("distilbert"),oOe=o(" \u2014 "),P$=a("a"),rOe=o("DistilBertConfig"),tOe=o(" (DistilBERT model)"),aOe=l(),Vf=a("li"),_ee=a("strong"),nOe=o("dpr"),sOe=o(" \u2014 "),I$=a("a"),lOe=o("DPRConfig"),iOe=o(" (DPR model)"),dOe=l(),Xf=a("li"),bee=a("strong"),cOe=o("dpt"),fOe=o(" \u2014 "),q$=a("a"),mOe=o("DPTConfig"),gOe=o(" (DPT model)"),hOe=l(),zf=a("li"),vee=a("strong"),pOe=o("electra"),uOe=o(" \u2014 "),N$=a("a"),_Oe=o("ElectraConfig"),bOe=o(" (ELECTRA model)"),vOe=l(),Qf=a("li"),Fee=a("strong"),FOe=o("encoder-decoder"),TOe=o(" \u2014 "),j$=a("a"),MOe=o("EncoderDecoderConfig"),EOe=o(" (Encoder decoder model)"),COe=l(),Wf=a("li"),Tee=a("strong"),wOe=o("flaubert"),AOe=o(" \u2014 "),D$=a("a"),yOe=o("FlaubertConfig"),LOe=o(" (FlauBERT model)"),xOe=l(),Hf=a("li"),Mee=a("strong"),$Oe=o("fnet"),kOe=o(" \u2014 "),G$=a("a"),SOe=o("FNetConfig"),ROe=o(" (FNet model)"),BOe=l(),Uf=a("li"),Eee=a("strong"),POe=o("fsmt"),IOe=o(" \u2014 "),O$=a("a"),qOe=o("FSMTConfig"),NOe=o(" (FairSeq Machine-Translation model)"),jOe=l(),Jf=a("li"),Cee=a("strong"),DOe=o("funnel"),GOe=o(" \u2014 "),V$=a("a"),OOe=o("FunnelConfig"),VOe=o(" (Funnel Transformer model)"),XOe=l(),Yf=a("li"),wee=a("strong"),zOe=o("glpn"),QOe=o(" \u2014 "),X$=a("a"),WOe=o("GLPNConfig"),HOe=o(" (GLPN model)"),UOe=l(),Kf=a("li"),Aee=a("strong"),JOe=o("gpt2"),YOe=o(" \u2014 "),z$=a("a"),KOe=o("GPT2Config"),ZOe=o(" (OpenAI GPT-2 model)"),eVe=l(),Zf=a("li"),yee=a("strong"),oVe=o("gpt_neo"),rVe=o(" \u2014 "),Q$=a("a"),tVe=o("GPTNeoConfig"),aVe=o(" (GPT Neo model)"),nVe=l(),em=a("li"),Lee=a("strong"),sVe=o("gptj"),lVe=o(" \u2014 "),W$=a("a"),iVe=o("GPTJConfig"),dVe=o(" (GPT-J model)"),cVe=l(),om=a("li"),xee=a("strong"),fVe=o("hubert"),mVe=o(" \u2014 "),H$=a("a"),gVe=o("HubertConfig"),hVe=o(" (Hubert model)"),pVe=l(),rm=a("li"),$ee=a("strong"),uVe=o("ibert"),_Ve=o(" \u2014 "),U$=a("a"),bVe=o("IBertConfig"),vVe=o(" (I-BERT model)"),FVe=l(),tm=a("li"),kee=a("strong"),TVe=o("imagegpt"),MVe=o(" \u2014 "),J$=a("a"),EVe=o("ImageGPTConfig"),CVe=o(" (ImageGPT model)"),wVe=l(),am=a("li"),See=a("strong"),AVe=o("layoutlm"),yVe=o(" \u2014 "),Y$=a("a"),LVe=o("LayoutLMConfig"),xVe=o(" (LayoutLM model)"),$Ve=l(),nm=a("li"),Ree=a("strong"),kVe=o("layoutlmv2"),SVe=o(" \u2014 "),K$=a("a"),RVe=o("LayoutLMv2Config"),BVe=o(" (LayoutLMv2 model)"),PVe=l(),sm=a("li"),Bee=a("strong"),IVe=o("led"),qVe=o(" \u2014 "),Z$=a("a"),NVe=o("LEDConfig"),jVe=o(" (LED model)"),DVe=l(),lm=a("li"),Pee=a("strong"),GVe=o("longformer"),OVe=o(" \u2014 "),ek=a("a"),VVe=o("LongformerConfig"),XVe=o(" (Longformer model)"),zVe=l(),im=a("li"),Iee=a("strong"),QVe=o("luke"),WVe=o(" \u2014 "),ok=a("a"),HVe=o("LukeConfig"),UVe=o(" (LUKE model)"),JVe=l(),dm=a("li"),qee=a("strong"),YVe=o("lxmert"),KVe=o(" \u2014 "),rk=a("a"),ZVe=o("LxmertConfig"),eXe=o(" (LXMERT model)"),oXe=l(),cm=a("li"),Nee=a("strong"),rXe=o("m2m_100"),tXe=o(" \u2014 "),tk=a("a"),aXe=o("M2M100Config"),nXe=o(" (M2M100 model)"),sXe=l(),fm=a("li"),jee=a("strong"),lXe=o("marian"),iXe=o(" \u2014 "),ak=a("a"),dXe=o("MarianConfig"),cXe=o(" (Marian model)"),fXe=l(),mm=a("li"),Dee=a("strong"),mXe=o("maskformer"),gXe=o(" \u2014 "),nk=a("a"),hXe=o("MaskFormerConfig"),pXe=o(" (MaskFormer model)"),uXe=l(),gm=a("li"),Gee=a("strong"),_Xe=o("mbart"),bXe=o(" \u2014 "),sk=a("a"),vXe=o("MBartConfig"),FXe=o(" (mBART model)"),TXe=l(),hm=a("li"),Oee=a("strong"),MXe=o("megatron-bert"),EXe=o(" \u2014 "),lk=a("a"),CXe=o("MegatronBertConfig"),wXe=o(" (MegatronBert model)"),AXe=l(),pm=a("li"),Vee=a("strong"),yXe=o("mobilebert"),LXe=o(" \u2014 "),ik=a("a"),xXe=o("MobileBertConfig"),$Xe=o(" (MobileBERT model)"),kXe=l(),um=a("li"),Xee=a("strong"),SXe=o("mpnet"),RXe=o(" \u2014 "),dk=a("a"),BXe=o("MPNetConfig"),PXe=o(" (MPNet model)"),IXe=l(),_m=a("li"),zee=a("strong"),qXe=o("mt5"),NXe=o(" \u2014 "),ck=a("a"),jXe=o("MT5Config"),DXe=o(" (mT5 model)"),GXe=l(),bm=a("li"),Qee=a("strong"),OXe=o("nystromformer"),VXe=o(" \u2014 "),fk=a("a"),XXe=o("NystromformerConfig"),zXe=o(" (Nystromformer model)"),QXe=l(),vm=a("li"),Wee=a("strong"),WXe=o("openai-gpt"),HXe=o(" \u2014 "),mk=a("a"),UXe=o("OpenAIGPTConfig"),JXe=o(" (OpenAI GPT model)"),YXe=l(),Fm=a("li"),Hee=a("strong"),KXe=o("pegasus"),ZXe=o(" \u2014 "),gk=a("a"),eze=o("PegasusConfig"),oze=o(" (Pegasus model)"),rze=l(),Tm=a("li"),Uee=a("strong"),tze=o("perceiver"),aze=o(" \u2014 "),hk=a("a"),nze=o("PerceiverConfig"),sze=o(" (Perceiver model)"),lze=l(),Mm=a("li"),Jee=a("strong"),ize=o("plbart"),dze=o(" \u2014 "),pk=a("a"),cze=o("PLBartConfig"),fze=o(" (PLBart model)"),mze=l(),Em=a("li"),Yee=a("strong"),gze=o("poolformer"),hze=o(" \u2014 "),uk=a("a"),pze=o("PoolFormerConfig"),uze=o(" (PoolFormer model)"),_ze=l(),Cm=a("li"),Kee=a("strong"),bze=o("prophetnet"),vze=o(" \u2014 "),_k=a("a"),Fze=o("ProphetNetConfig"),Tze=o(" (ProphetNet model)"),Mze=l(),wm=a("li"),Zee=a("strong"),Eze=o("qdqbert"),Cze=o(" \u2014 "),bk=a("a"),wze=o("QDQBertConfig"),Aze=o(" (QDQBert model)"),yze=l(),Am=a("li"),eoe=a("strong"),Lze=o("rag"),xze=o(" \u2014 "),vk=a("a"),$ze=o("RagConfig"),kze=o(" (RAG model)"),Sze=l(),ym=a("li"),ooe=a("strong"),Rze=o("realm"),Bze=o(" \u2014 "),Fk=a("a"),Pze=o("RealmConfig"),Ize=o(" (Realm model)"),qze=l(),Lm=a("li"),roe=a("strong"),Nze=o("reformer"),jze=o(" \u2014 "),Tk=a("a"),Dze=o("ReformerConfig"),Gze=o(" (Reformer model)"),Oze=l(),xm=a("li"),toe=a("strong"),Vze=o("regnet"),Xze=o(" \u2014 "),Mk=a("a"),zze=o("RegNetConfig"),Qze=o(" (RegNet model)"),Wze=l(),$m=a("li"),aoe=a("strong"),Hze=o("rembert"),Uze=o(" \u2014 "),Ek=a("a"),Jze=o("RemBertConfig"),Yze=o(" (RemBERT model)"),Kze=l(),km=a("li"),noe=a("strong"),Zze=o("resnet"),eQe=o(" \u2014 "),Ck=a("a"),oQe=o("ResNetConfig"),rQe=o(" (ResNet model)"),tQe=l(),Sm=a("li"),soe=a("strong"),aQe=o("retribert"),nQe=o(" \u2014 "),wk=a("a"),sQe=o("RetriBertConfig"),lQe=o(" (RetriBERT model)"),iQe=l(),Rm=a("li"),loe=a("strong"),dQe=o("roberta"),cQe=o(" \u2014 "),Ak=a("a"),fQe=o("RobertaConfig"),mQe=o(" (RoBERTa model)"),gQe=l(),Bm=a("li"),ioe=a("strong"),hQe=o("roformer"),pQe=o(" \u2014 "),yk=a("a"),uQe=o("RoFormerConfig"),_Qe=o(" (RoFormer model)"),bQe=l(),Pm=a("li"),doe=a("strong"),vQe=o("segformer"),FQe=o(" \u2014 "),Lk=a("a"),TQe=o("SegformerConfig"),MQe=o(" (SegFormer model)"),EQe=l(),Im=a("li"),coe=a("strong"),CQe=o("sew"),wQe=o(" \u2014 "),xk=a("a"),AQe=o("SEWConfig"),yQe=o(" (SEW model)"),LQe=l(),qm=a("li"),foe=a("strong"),xQe=o("sew-d"),$Qe=o(" \u2014 "),$k=a("a"),kQe=o("SEWDConfig"),SQe=o(" (SEW-D model)"),RQe=l(),Nm=a("li"),moe=a("strong"),BQe=o("speech-encoder-decoder"),PQe=o(" \u2014 "),kk=a("a"),IQe=o("SpeechEncoderDecoderConfig"),qQe=o(" (Speech Encoder decoder model)"),NQe=l(),jm=a("li"),goe=a("strong"),jQe=o("speech_to_text"),DQe=o(" \u2014 "),Sk=a("a"),GQe=o("Speech2TextConfig"),OQe=o(" (Speech2Text model)"),VQe=l(),Dm=a("li"),hoe=a("strong"),XQe=o("speech_to_text_2"),zQe=o(" \u2014 "),Rk=a("a"),QQe=o("Speech2Text2Config"),WQe=o(" (Speech2Text2 model)"),HQe=l(),Gm=a("li"),poe=a("strong"),UQe=o("splinter"),JQe=o(" \u2014 "),Bk=a("a"),YQe=o("SplinterConfig"),KQe=o(" (Splinter model)"),ZQe=l(),Om=a("li"),uoe=a("strong"),eWe=o("squeezebert"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("SqueezeBertConfig"),tWe=o(" (SqueezeBERT model)"),aWe=l(),Vm=a("li"),_oe=a("strong"),nWe=o("swin"),sWe=o(" \u2014 "),Ik=a("a"),lWe=o("SwinConfig"),iWe=o(" (Swin model)"),dWe=l(),Xm=a("li"),boe=a("strong"),cWe=o("t5"),fWe=o(" \u2014 "),qk=a("a"),mWe=o("T5Config"),gWe=o(" (T5 model)"),hWe=l(),zm=a("li"),voe=a("strong"),pWe=o("tapas"),uWe=o(" \u2014 "),Nk=a("a"),_We=o("TapasConfig"),bWe=o(" (TAPAS model)"),vWe=l(),Qm=a("li"),Foe=a("strong"),FWe=o("tapex"),TWe=o(" \u2014 "),jk=a("a"),MWe=o("BartConfig"),EWe=o(" (TAPEX model)"),CWe=l(),Wm=a("li"),Toe=a("strong"),wWe=o("transfo-xl"),AWe=o(" \u2014 "),Dk=a("a"),yWe=o("TransfoXLConfig"),LWe=o(" (Transformer-XL model)"),xWe=l(),Hm=a("li"),Moe=a("strong"),$We=o("trocr"),kWe=o(" \u2014 "),Gk=a("a"),SWe=o("TrOCRConfig"),RWe=o(" (TrOCR model)"),BWe=l(),Um=a("li"),Eoe=a("strong"),PWe=o("unispeech"),IWe=o(" \u2014 "),Ok=a("a"),qWe=o("UniSpeechConfig"),NWe=o(" (UniSpeech model)"),jWe=l(),Jm=a("li"),Coe=a("strong"),DWe=o("unispeech-sat"),GWe=o(" \u2014 "),Vk=a("a"),OWe=o("UniSpeechSatConfig"),VWe=o(" (UniSpeechSat model)"),XWe=l(),Ym=a("li"),woe=a("strong"),zWe=o("van"),QWe=o(" \u2014 "),Xk=a("a"),WWe=o("VanConfig"),HWe=o(" (VAN model)"),UWe=l(),Km=a("li"),Aoe=a("strong"),JWe=o("vilt"),YWe=o(" \u2014 "),zk=a("a"),KWe=o("ViltConfig"),ZWe=o(" (ViLT model)"),eHe=l(),Zm=a("li"),yoe=a("strong"),oHe=o("vision-encoder-decoder"),rHe=o(" \u2014 "),Qk=a("a"),tHe=o("VisionEncoderDecoderConfig"),aHe=o(" (Vision Encoder decoder model)"),nHe=l(),eg=a("li"),Loe=a("strong"),sHe=o("vision-text-dual-encoder"),lHe=o(" \u2014 "),Wk=a("a"),iHe=o("VisionTextDualEncoderConfig"),dHe=o(" (VisionTextDualEncoder model)"),cHe=l(),og=a("li"),xoe=a("strong"),fHe=o("visual_bert"),mHe=o(" \u2014 "),Hk=a("a"),gHe=o("VisualBertConfig"),hHe=o(" (VisualBert model)"),pHe=l(),rg=a("li"),$oe=a("strong"),uHe=o("vit"),_He=o(" \u2014 "),Uk=a("a"),bHe=o("ViTConfig"),vHe=o(" (ViT model)"),FHe=l(),tg=a("li"),koe=a("strong"),THe=o("vit_mae"),MHe=o(" \u2014 "),Jk=a("a"),EHe=o("ViTMAEConfig"),CHe=o(" (ViTMAE model)"),wHe=l(),ag=a("li"),Soe=a("strong"),AHe=o("wav2vec2"),yHe=o(" \u2014 "),Yk=a("a"),LHe=o("Wav2Vec2Config"),xHe=o(" (Wav2Vec2 model)"),$He=l(),ng=a("li"),Roe=a("strong"),kHe=o("wavlm"),SHe=o(" \u2014 "),Kk=a("a"),RHe=o("WavLMConfig"),BHe=o(" (WavLM model)"),PHe=l(),sg=a("li"),Boe=a("strong"),IHe=o("xglm"),qHe=o(" \u2014 "),Zk=a("a"),NHe=o("XGLMConfig"),jHe=o(" (XGLM model)"),DHe=l(),lg=a("li"),Poe=a("strong"),GHe=o("xlm"),OHe=o(" \u2014 "),eS=a("a"),VHe=o("XLMConfig"),XHe=o(" (XLM model)"),zHe=l(),ig=a("li"),Ioe=a("strong"),QHe=o("xlm-prophetnet"),WHe=o(" \u2014 "),oS=a("a"),HHe=o("XLMProphetNetConfig"),UHe=o(" (XLMProphetNet model)"),JHe=l(),dg=a("li"),qoe=a("strong"),YHe=o("xlm-roberta"),KHe=o(" \u2014 "),rS=a("a"),ZHe=o("XLMRobertaConfig"),eUe=o(" (XLM-RoBERTa model)"),oUe=l(),cg=a("li"),Noe=a("strong"),rUe=o("xlm-roberta-xl"),tUe=o(" \u2014 "),tS=a("a"),aUe=o("XLMRobertaXLConfig"),nUe=o(" (XLM-RoBERTa-XL model)"),sUe=l(),fg=a("li"),joe=a("strong"),lUe=o("xlnet"),iUe=o(" \u2014 "),aS=a("a"),dUe=o("XLNetConfig"),cUe=o(" (XLNet model)"),fUe=l(),mg=a("li"),Doe=a("strong"),mUe=o("yolos"),gUe=o(" \u2014 "),nS=a("a"),hUe=o("YolosConfig"),pUe=o(" (YOLOS model)"),uUe=l(),gg=a("li"),Goe=a("strong"),_Ue=o("yoso"),bUe=o(" \u2014 "),sS=a("a"),vUe=o("YosoConfig"),FUe=o(" (YOSO model)"),TUe=l(),F(hg.$$.fragment),MUe=l(),pg=a("div"),F(UA.$$.fragment),EUe=l(),Ooe=a("p"),CUe=o("Register a new configuration for this class."),hPe=l(),_i=a("h2"),ug=a("a"),Voe=a("span"),F(JA.$$.fragment),wUe=l(),Xoe=a("span"),AUe=o("AutoTokenizer"),pPe=l(),wo=a("div"),F(YA.$$.fragment),yUe=l(),KA=a("p"),LUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=a("a"),xUe=o("AutoTokenizer.from_pretrained()"),$Ue=o(" class method."),kUe=l(),ZA=a("p"),SUe=o("This class cannot be instantiated directly using "),zoe=a("code"),RUe=o("__init__()"),BUe=o(" (throws an error)."),PUe=l(),Cr=a("div"),F(e6.$$.fragment),IUe=l(),Qoe=a("p"),qUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NUe=l(),Ca=a("p"),jUe=o("The tokenizer class to instantiate is selected based on the "),Woe=a("code"),DUe=o("model_type"),GUe=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),OUe=o("pretrained_model_name_or_path"),VUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),XUe=o("pretrained_model_name_or_path"),zUe=o(":"),QUe=l(),k=a("ul"),kn=a("li"),Joe=a("strong"),WUe=o("albert"),HUe=o(" \u2014 "),iS=a("a"),UUe=o("AlbertTokenizer"),JUe=o(" or "),dS=a("a"),YUe=o("AlbertTokenizerFast"),KUe=o(" (ALBERT model)"),ZUe=l(),Sn=a("li"),Yoe=a("strong"),eJe=o("bart"),oJe=o(" \u2014 "),cS=a("a"),rJe=o("BartTokenizer"),tJe=o(" or "),fS=a("a"),aJe=o("BartTokenizerFast"),nJe=o(" (BART model)"),sJe=l(),Rn=a("li"),Koe=a("strong"),lJe=o("barthez"),iJe=o(" \u2014 "),mS=a("a"),dJe=o("BarthezTokenizer"),cJe=o(" or "),gS=a("a"),fJe=o("BarthezTokenizerFast"),mJe=o(" (BARThez model)"),gJe=l(),_g=a("li"),Zoe=a("strong"),hJe=o("bartpho"),pJe=o(" \u2014 "),hS=a("a"),uJe=o("BartphoTokenizer"),_Je=o(" (BARTpho model)"),bJe=l(),Bn=a("li"),ere=a("strong"),vJe=o("bert"),FJe=o(" \u2014 "),pS=a("a"),TJe=o("BertTokenizer"),MJe=o(" or "),uS=a("a"),EJe=o("BertTokenizerFast"),CJe=o(" (BERT model)"),wJe=l(),bg=a("li"),ore=a("strong"),AJe=o("bert-generation"),yJe=o(" \u2014 "),_S=a("a"),LJe=o("BertGenerationTokenizer"),xJe=o(" (Bert Generation model)"),$Je=l(),vg=a("li"),rre=a("strong"),kJe=o("bert-japanese"),SJe=o(" \u2014 "),bS=a("a"),RJe=o("BertJapaneseTokenizer"),BJe=o(" (BertJapanese model)"),PJe=l(),Fg=a("li"),tre=a("strong"),IJe=o("bertweet"),qJe=o(" \u2014 "),vS=a("a"),NJe=o("BertweetTokenizer"),jJe=o(" (Bertweet model)"),DJe=l(),Pn=a("li"),are=a("strong"),GJe=o("big_bird"),OJe=o(" \u2014 "),FS=a("a"),VJe=o("BigBirdTokenizer"),XJe=o(" or "),TS=a("a"),zJe=o("BigBirdTokenizerFast"),QJe=o(" (BigBird model)"),WJe=l(),In=a("li"),nre=a("strong"),HJe=o("bigbird_pegasus"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("PegasusTokenizer"),YJe=o(" or "),ES=a("a"),KJe=o("PegasusTokenizerFast"),ZJe=o(" (BigBirdPegasus model)"),eYe=l(),qn=a("li"),sre=a("strong"),oYe=o("blenderbot"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("BlenderbotTokenizer"),aYe=o(" or "),wS=a("a"),nYe=o("BlenderbotTokenizerFast"),sYe=o(" (Blenderbot model)"),lYe=l(),Tg=a("li"),lre=a("strong"),iYe=o("blenderbot-small"),dYe=o(" \u2014 "),AS=a("a"),cYe=o("BlenderbotSmallTokenizer"),fYe=o(" (BlenderbotSmall model)"),mYe=l(),Mg=a("li"),ire=a("strong"),gYe=o("byt5"),hYe=o(" \u2014 "),yS=a("a"),pYe=o("ByT5Tokenizer"),uYe=o(" (ByT5 model)"),_Ye=l(),Nn=a("li"),dre=a("strong"),bYe=o("camembert"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("CamembertTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("CamembertTokenizerFast"),EYe=o(" (CamemBERT model)"),CYe=l(),Eg=a("li"),cre=a("strong"),wYe=o("canine"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("CanineTokenizer"),LYe=o(" (Canine model)"),xYe=l(),jn=a("li"),fre=a("strong"),$Ye=o("clip"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("CLIPTokenizer"),RYe=o(" or "),SS=a("a"),BYe=o("CLIPTokenizerFast"),PYe=o(" (CLIP model)"),IYe=l(),Dn=a("li"),mre=a("strong"),qYe=o("convbert"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("ConvBertTokenizer"),DYe=o(" or "),BS=a("a"),GYe=o("ConvBertTokenizerFast"),OYe=o(" (ConvBERT model)"),VYe=l(),Gn=a("li"),gre=a("strong"),XYe=o("cpm"),zYe=o(" \u2014 "),PS=a("a"),QYe=o("CpmTokenizer"),WYe=o(" or "),IS=a("a"),HYe=o("CpmTokenizerFast"),UYe=o(" (CPM model)"),JYe=l(),Cg=a("li"),hre=a("strong"),YYe=o("ctrl"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("CTRLTokenizer"),eKe=o(" (CTRL model)"),oKe=l(),On=a("li"),pre=a("strong"),rKe=o("data2vec-text"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("RobertaTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("RobertaTokenizerFast"),lKe=o(" (Data2VecText model)"),iKe=l(),Vn=a("li"),ure=a("strong"),dKe=o("deberta"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("DebertaTokenizer"),mKe=o(" or "),GS=a("a"),gKe=o("DebertaTokenizerFast"),hKe=o(" (DeBERTa model)"),pKe=l(),Xn=a("li"),_re=a("strong"),uKe=o("deberta-v2"),_Ke=o(" \u2014 "),OS=a("a"),bKe=o("DebertaV2Tokenizer"),vKe=o(" or "),VS=a("a"),FKe=o("DebertaV2TokenizerFast"),TKe=o(" (DeBERTa-v2 model)"),MKe=l(),zn=a("li"),bre=a("strong"),EKe=o("distilbert"),CKe=o(" \u2014 "),XS=a("a"),wKe=o("DistilBertTokenizer"),AKe=o(" or "),zS=a("a"),yKe=o("DistilBertTokenizerFast"),LKe=o(" (DistilBERT model)"),xKe=l(),Qn=a("li"),vre=a("strong"),$Ke=o("dpr"),kKe=o(" \u2014 "),QS=a("a"),SKe=o("DPRQuestionEncoderTokenizer"),RKe=o(" or "),WS=a("a"),BKe=o("DPRQuestionEncoderTokenizerFast"),PKe=o(" (DPR model)"),IKe=l(),Wn=a("li"),Fre=a("strong"),qKe=o("electra"),NKe=o(" \u2014 "),HS=a("a"),jKe=o("ElectraTokenizer"),DKe=o(" or "),US=a("a"),GKe=o("ElectraTokenizerFast"),OKe=o(" (ELECTRA model)"),VKe=l(),wg=a("li"),Tre=a("strong"),XKe=o("flaubert"),zKe=o(" \u2014 "),JS=a("a"),QKe=o("FlaubertTokenizer"),WKe=o(" (FlauBERT model)"),HKe=l(),Hn=a("li"),Mre=a("strong"),UKe=o("fnet"),JKe=o(" \u2014 "),YS=a("a"),YKe=o("FNetTokenizer"),KKe=o(" or "),KS=a("a"),ZKe=o("FNetTokenizerFast"),eZe=o(" (FNet model)"),oZe=l(),Ag=a("li"),Ere=a("strong"),rZe=o("fsmt"),tZe=o(" \u2014 "),ZS=a("a"),aZe=o("FSMTTokenizer"),nZe=o(" (FairSeq Machine-Translation model)"),sZe=l(),Un=a("li"),Cre=a("strong"),lZe=o("funnel"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("FunnelTokenizer"),cZe=o(" or "),oR=a("a"),fZe=o("FunnelTokenizerFast"),mZe=o(" (Funnel Transformer model)"),gZe=l(),Jn=a("li"),wre=a("strong"),hZe=o("gpt2"),pZe=o(" \u2014 "),rR=a("a"),uZe=o("GPT2Tokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("GPT2TokenizerFast"),vZe=o(" (OpenAI GPT-2 model)"),FZe=l(),Yn=a("li"),Are=a("strong"),TZe=o("gpt_neo"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("GPT2Tokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("GPT2TokenizerFast"),AZe=o(" (GPT Neo model)"),yZe=l(),Kn=a("li"),yre=a("strong"),LZe=o("gptj"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("GPT2Tokenizer"),kZe=o(" or "),lR=a("a"),SZe=o("GPT2TokenizerFast"),RZe=o(" (GPT-J model)"),BZe=l(),Zn=a("li"),Lre=a("strong"),PZe=o("herbert"),IZe=o(" \u2014 "),iR=a("a"),qZe=o("HerbertTokenizer"),NZe=o(" or "),dR=a("a"),jZe=o("HerbertTokenizerFast"),DZe=o(" (HerBERT model)"),GZe=l(),yg=a("li"),xre=a("strong"),OZe=o("hubert"),VZe=o(" \u2014 "),cR=a("a"),XZe=o("Wav2Vec2CTCTokenizer"),zZe=o(" (Hubert model)"),QZe=l(),es=a("li"),$re=a("strong"),WZe=o("ibert"),HZe=o(" \u2014 "),fR=a("a"),UZe=o("RobertaTokenizer"),JZe=o(" or "),mR=a("a"),YZe=o("RobertaTokenizerFast"),KZe=o(" (I-BERT model)"),ZZe=l(),os=a("li"),kre=a("strong"),eeo=o("layoutlm"),oeo=o(" \u2014 "),gR=a("a"),reo=o("LayoutLMTokenizer"),teo=o(" or "),hR=a("a"),aeo=o("LayoutLMTokenizerFast"),neo=o(" (LayoutLM model)"),seo=l(),rs=a("li"),Sre=a("strong"),leo=o("layoutlmv2"),ieo=o(" \u2014 "),pR=a("a"),deo=o("LayoutLMv2Tokenizer"),ceo=o(" or "),uR=a("a"),feo=o("LayoutLMv2TokenizerFast"),meo=o(" (LayoutLMv2 model)"),geo=l(),ts=a("li"),Rre=a("strong"),heo=o("layoutxlm"),peo=o(" \u2014 "),_R=a("a"),ueo=o("LayoutXLMTokenizer"),_eo=o(" or "),bR=a("a"),beo=o("LayoutXLMTokenizerFast"),veo=o(" (LayoutXLM model)"),Feo=l(),as=a("li"),Bre=a("strong"),Teo=o("led"),Meo=o(" \u2014 "),vR=a("a"),Eeo=o("LEDTokenizer"),Ceo=o(" or "),FR=a("a"),weo=o("LEDTokenizerFast"),Aeo=o(" (LED model)"),yeo=l(),ns=a("li"),Pre=a("strong"),Leo=o("longformer"),xeo=o(" \u2014 "),TR=a("a"),$eo=o("LongformerTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("LongformerTokenizerFast"),Reo=o(" (Longformer model)"),Beo=l(),Lg=a("li"),Ire=a("strong"),Peo=o("luke"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("LukeTokenizer"),Neo=o(" (LUKE model)"),jeo=l(),ss=a("li"),qre=a("strong"),Deo=o("lxmert"),Geo=o(" \u2014 "),CR=a("a"),Oeo=o("LxmertTokenizer"),Veo=o(" or "),wR=a("a"),Xeo=o("LxmertTokenizerFast"),zeo=o(" (LXMERT model)"),Qeo=l(),xg=a("li"),Nre=a("strong"),Weo=o("m2m_100"),Heo=o(" \u2014 "),AR=a("a"),Ueo=o("M2M100Tokenizer"),Jeo=o(" (M2M100 model)"),Yeo=l(),$g=a("li"),jre=a("strong"),Keo=o("marian"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("MarianTokenizer"),ooo=o(" (Marian model)"),roo=l(),ls=a("li"),Dre=a("strong"),too=o("mbart"),aoo=o(" \u2014 "),LR=a("a"),noo=o("MBartTokenizer"),soo=o(" or "),xR=a("a"),loo=o("MBartTokenizerFast"),ioo=o(" (mBART model)"),doo=l(),is=a("li"),Gre=a("strong"),coo=o("mbart50"),foo=o(" \u2014 "),$R=a("a"),moo=o("MBart50Tokenizer"),goo=o(" or "),kR=a("a"),hoo=o("MBart50TokenizerFast"),poo=o(" (mBART-50 model)"),uoo=l(),ds=a("li"),Ore=a("strong"),_oo=o("megatron-bert"),boo=o(" \u2014 "),SR=a("a"),voo=o("BertTokenizer"),Foo=o(" or "),RR=a("a"),Too=o("BertTokenizerFast"),Moo=o(" (MegatronBert model)"),Eoo=l(),kg=a("li"),Vre=a("strong"),Coo=o("mluke"),woo=o(" \u2014 "),BR=a("a"),Aoo=o("MLukeTokenizer"),yoo=o(" (mLUKE model)"),Loo=l(),cs=a("li"),Xre=a("strong"),xoo=o("mobilebert"),$oo=o(" \u2014 "),PR=a("a"),koo=o("MobileBertTokenizer"),Soo=o(" or "),IR=a("a"),Roo=o("MobileBertTokenizerFast"),Boo=o(" (MobileBERT model)"),Poo=l(),fs=a("li"),zre=a("strong"),Ioo=o("mpnet"),qoo=o(" \u2014 "),qR=a("a"),Noo=o("MPNetTokenizer"),joo=o(" or "),NR=a("a"),Doo=o("MPNetTokenizerFast"),Goo=o(" (MPNet model)"),Ooo=l(),ms=a("li"),Qre=a("strong"),Voo=o("mt5"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("MT5Tokenizer"),Qoo=o(" or "),DR=a("a"),Woo=o("MT5TokenizerFast"),Hoo=o(" (mT5 model)"),Uoo=l(),gs=a("li"),Wre=a("strong"),Joo=o("nystromformer"),Yoo=o(" \u2014 "),GR=a("a"),Koo=o("AlbertTokenizer"),Zoo=o(" or "),OR=a("a"),ero=o("AlbertTokenizerFast"),oro=o(" (Nystromformer model)"),rro=l(),hs=a("li"),Hre=a("strong"),tro=o("openai-gpt"),aro=o(" \u2014 "),VR=a("a"),nro=o("OpenAIGPTTokenizer"),sro=o(" or "),XR=a("a"),lro=o("OpenAIGPTTokenizerFast"),iro=o(" (OpenAI GPT model)"),dro=l(),ps=a("li"),Ure=a("strong"),cro=o("pegasus"),fro=o(" \u2014 "),zR=a("a"),mro=o("PegasusTokenizer"),gro=o(" or "),QR=a("a"),hro=o("PegasusTokenizerFast"),pro=o(" (Pegasus model)"),uro=l(),Sg=a("li"),Jre=a("strong"),_ro=o("perceiver"),bro=o(" \u2014 "),WR=a("a"),vro=o("PerceiverTokenizer"),Fro=o(" (Perceiver model)"),Tro=l(),Rg=a("li"),Yre=a("strong"),Mro=o("phobert"),Ero=o(" \u2014 "),HR=a("a"),Cro=o("PhobertTokenizer"),wro=o(" (PhoBERT model)"),Aro=l(),Bg=a("li"),Kre=a("strong"),yro=o("plbart"),Lro=o(" \u2014 "),UR=a("a"),xro=o("PLBartTokenizer"),$ro=o(" (PLBart model)"),kro=l(),Pg=a("li"),Zre=a("strong"),Sro=o("prophetnet"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("ProphetNetTokenizer"),Pro=o(" (ProphetNet model)"),Iro=l(),us=a("li"),ete=a("strong"),qro=o("qdqbert"),Nro=o(" \u2014 "),YR=a("a"),jro=o("BertTokenizer"),Dro=o(" or "),KR=a("a"),Gro=o("BertTokenizerFast"),Oro=o(" (QDQBert model)"),Vro=l(),Ig=a("li"),ote=a("strong"),Xro=o("rag"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("RagTokenizer"),Wro=o(" (RAG model)"),Hro=l(),_s=a("li"),rte=a("strong"),Uro=o("realm"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("RealmTokenizer"),Kro=o(" or "),oB=a("a"),Zro=o("RealmTokenizerFast"),eto=o(" (Realm model)"),oto=l(),bs=a("li"),tte=a("strong"),rto=o("reformer"),tto=o(" \u2014 "),rB=a("a"),ato=o("ReformerTokenizer"),nto=o(" or "),tB=a("a"),sto=o("ReformerTokenizerFast"),lto=o(" (Reformer model)"),ito=l(),vs=a("li"),ate=a("strong"),dto=o("rembert"),cto=o(" \u2014 "),aB=a("a"),fto=o("RemBertTokenizer"),mto=o(" or "),nB=a("a"),gto=o("RemBertTokenizerFast"),hto=o(" (RemBERT model)"),pto=l(),Fs=a("li"),nte=a("strong"),uto=o("retribert"),_to=o(" \u2014 "),sB=a("a"),bto=o("RetriBertTokenizer"),vto=o(" or "),lB=a("a"),Fto=o("RetriBertTokenizerFast"),Tto=o(" (RetriBERT model)"),Mto=l(),Ts=a("li"),ste=a("strong"),Eto=o("roberta"),Cto=o(" \u2014 "),iB=a("a"),wto=o("RobertaTokenizer"),Ato=o(" or "),dB=a("a"),yto=o("RobertaTokenizerFast"),Lto=o(" (RoBERTa model)"),xto=l(),Ms=a("li"),lte=a("strong"),$to=o("roformer"),kto=o(" \u2014 "),cB=a("a"),Sto=o("RoFormerTokenizer"),Rto=o(" or "),fB=a("a"),Bto=o("RoFormerTokenizerFast"),Pto=o(" (RoFormer model)"),Ito=l(),qg=a("li"),ite=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),mB=a("a"),jto=o("Speech2TextTokenizer"),Dto=o(" (Speech2Text model)"),Gto=l(),Ng=a("li"),dte=a("strong"),Oto=o("speech_to_text_2"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("Speech2Text2Tokenizer"),zto=o(" (Speech2Text2 model)"),Qto=l(),Es=a("li"),cte=a("strong"),Wto=o("splinter"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("SplinterTokenizer"),Jto=o(" or "),pB=a("a"),Yto=o("SplinterTokenizerFast"),Kto=o(" (Splinter model)"),Zto=l(),Cs=a("li"),fte=a("strong"),eao=o("squeezebert"),oao=o(" \u2014 "),uB=a("a"),rao=o("SqueezeBertTokenizer"),tao=o(" or "),_B=a("a"),aao=o("SqueezeBertTokenizerFast"),nao=o(" (SqueezeBERT model)"),sao=l(),ws=a("li"),mte=a("strong"),lao=o("t5"),iao=o(" \u2014 "),bB=a("a"),dao=o("T5Tokenizer"),cao=o(" or "),vB=a("a"),fao=o("T5TokenizerFast"),mao=o(" (T5 model)"),gao=l(),jg=a("li"),gte=a("strong"),hao=o("tapas"),pao=o(" \u2014 "),FB=a("a"),uao=o("TapasTokenizer"),_ao=o(" (TAPAS model)"),bao=l(),Dg=a("li"),hte=a("strong"),vao=o("tapex"),Fao=o(" \u2014 "),TB=a("a"),Tao=o("TapexTokenizer"),Mao=o(" (TAPEX model)"),Eao=l(),Gg=a("li"),pte=a("strong"),Cao=o("transfo-xl"),wao=o(" \u2014 "),MB=a("a"),Aao=o("TransfoXLTokenizer"),yao=o(" (Transformer-XL model)"),Lao=l(),As=a("li"),ute=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),EB=a("a"),kao=o("BertTokenizer"),Sao=o(" or "),CB=a("a"),Rao=o("BertTokenizerFast"),Bao=o(" (VisualBert model)"),Pao=l(),Og=a("li"),_te=a("strong"),Iao=o("wav2vec2"),qao=o(" \u2014 "),wB=a("a"),Nao=o("Wav2Vec2CTCTokenizer"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Vg=a("li"),bte=a("strong"),Gao=o("wav2vec2_phoneme"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("Wav2Vec2PhonemeCTCTokenizer"),Xao=o(" (Wav2Vec2Phoneme model)"),zao=l(),ys=a("li"),vte=a("strong"),Qao=o("xglm"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("XGLMTokenizer"),Uao=o(" or "),LB=a("a"),Jao=o("XGLMTokenizerFast"),Yao=o(" (XGLM model)"),Kao=l(),Xg=a("li"),Fte=a("strong"),Zao=o("xlm"),eno=o(" \u2014 "),xB=a("a"),ono=o("XLMTokenizer"),rno=o(" (XLM model)"),tno=l(),zg=a("li"),Tte=a("strong"),ano=o("xlm-prophetnet"),nno=o(" \u2014 "),$B=a("a"),sno=o("XLMProphetNetTokenizer"),lno=o(" (XLMProphetNet model)"),ino=l(),Ls=a("li"),Mte=a("strong"),dno=o("xlm-roberta"),cno=o(" \u2014 "),kB=a("a"),fno=o("XLMRobertaTokenizer"),mno=o(" or "),SB=a("a"),gno=o("XLMRobertaTokenizerFast"),hno=o(" (XLM-RoBERTa model)"),pno=l(),xs=a("li"),Ete=a("strong"),uno=o("xlm-roberta-xl"),_no=o(" \u2014 "),RB=a("a"),bno=o("RobertaTokenizer"),vno=o(" or "),BB=a("a"),Fno=o("RobertaTokenizerFast"),Tno=o(" (XLM-RoBERTa-XL model)"),Mno=l(),$s=a("li"),Cte=a("strong"),Eno=o("xlnet"),Cno=o(" \u2014 "),PB=a("a"),wno=o("XLNetTokenizer"),Ano=o(" or "),IB=a("a"),yno=o("XLNetTokenizerFast"),Lno=o(" (XLNet model)"),xno=l(),ks=a("li"),wte=a("strong"),$no=o("yoso"),kno=o(" \u2014 "),qB=a("a"),Sno=o("AlbertTokenizer"),Rno=o(" or "),NB=a("a"),Bno=o("AlbertTokenizerFast"),Pno=o(" (YOSO model)"),Ino=l(),F(Qg.$$.fragment),qno=l(),Wg=a("div"),F(o6.$$.fragment),Nno=l(),Ate=a("p"),jno=o("Register a new tokenizer in this mapping."),uPe=l(),bi=a("h2"),Hg=a("a"),yte=a("span"),F(r6.$$.fragment),Dno=l(),Lte=a("span"),Gno=o("AutoFeatureExtractor"),_Pe=l(),Ao=a("div"),F(t6.$$.fragment),Ono=l(),a6=a("p"),Vno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=a("a"),Xno=o("AutoFeatureExtractor.from_pretrained()"),zno=o(" class method."),Qno=l(),n6=a("p"),Wno=o("This class cannot be instantiated directly using "),xte=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),Qe=a("div"),F(s6.$$.fragment),Yno=l(),$te=a("p"),Kno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zno=l(),wa=a("p"),eso=o("The feature extractor class to instantiate is selected based on the "),kte=a("code"),oso=o("model_type"),rso=o(` property of the config object
(either passed as an argument or loaded from `),Ste=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),te=a("ul"),Ug=a("li"),Bte=a("strong"),iso=o("beit"),dso=o(" \u2014 "),DB=a("a"),cso=o("BeitFeatureExtractor"),fso=o(" (BEiT model)"),mso=l(),Jg=a("li"),Pte=a("strong"),gso=o("clip"),hso=o(" \u2014 "),GB=a("a"),pso=o("CLIPFeatureExtractor"),uso=o(" (CLIP model)"),_so=l(),Yg=a("li"),Ite=a("strong"),bso=o("convnext"),vso=o(" \u2014 "),OB=a("a"),Fso=o("ConvNextFeatureExtractor"),Tso=o(" (ConvNext model)"),Mso=l(),Kg=a("li"),qte=a("strong"),Eso=o("data2vec-audio"),Cso=o(" \u2014 "),VB=a("a"),wso=o("Wav2Vec2FeatureExtractor"),Aso=o(" (Data2VecAudio model)"),yso=l(),Zg=a("li"),Nte=a("strong"),Lso=o("data2vec-vision"),xso=o(" \u2014 "),XB=a("a"),$so=o("BeitFeatureExtractor"),kso=o(" (Data2VecVision model)"),Sso=l(),eh=a("li"),jte=a("strong"),Rso=o("deit"),Bso=o(" \u2014 "),zB=a("a"),Pso=o("DeiTFeatureExtractor"),Iso=o(" (DeiT model)"),qso=l(),oh=a("li"),Dte=a("strong"),Nso=o("detr"),jso=o(" \u2014 "),QB=a("a"),Dso=o("DetrFeatureExtractor"),Gso=o(" (DETR model)"),Oso=l(),rh=a("li"),Gte=a("strong"),Vso=o("dpt"),Xso=o(" \u2014 "),WB=a("a"),zso=o("DPTFeatureExtractor"),Qso=o(" (DPT model)"),Wso=l(),th=a("li"),Ote=a("strong"),Hso=o("glpn"),Uso=o(" \u2014 "),HB=a("a"),Jso=o("GLPNFeatureExtractor"),Yso=o(" (GLPN model)"),Kso=l(),ah=a("li"),Vte=a("strong"),Zso=o("hubert"),elo=o(" \u2014 "),UB=a("a"),olo=o("Wav2Vec2FeatureExtractor"),rlo=o(" (Hubert model)"),tlo=l(),nh=a("li"),Xte=a("strong"),alo=o("layoutlmv2"),nlo=o(" \u2014 "),JB=a("a"),slo=o("LayoutLMv2FeatureExtractor"),llo=o(" (LayoutLMv2 model)"),ilo=l(),sh=a("li"),zte=a("strong"),dlo=o("maskformer"),clo=o(" \u2014 "),YB=a("a"),flo=o("MaskFormerFeatureExtractor"),mlo=o(" (MaskFormer model)"),glo=l(),lh=a("li"),Qte=a("strong"),hlo=o("perceiver"),plo=o(" \u2014 "),KB=a("a"),ulo=o("PerceiverFeatureExtractor"),_lo=o(" (Perceiver model)"),blo=l(),ih=a("li"),Wte=a("strong"),vlo=o("poolformer"),Flo=o(" \u2014 "),ZB=a("a"),Tlo=o("PoolFormerFeatureExtractor"),Mlo=o(" (PoolFormer model)"),Elo=l(),dh=a("li"),Hte=a("strong"),Clo=o("regnet"),wlo=o(" \u2014 "),eP=a("a"),Alo=o("ConvNextFeatureExtractor"),ylo=o(" (RegNet model)"),Llo=l(),ch=a("li"),Ute=a("strong"),xlo=o("resnet"),$lo=o(" \u2014 "),oP=a("a"),klo=o("ConvNextFeatureExtractor"),Slo=o(" (ResNet model)"),Rlo=l(),fh=a("li"),Jte=a("strong"),Blo=o("segformer"),Plo=o(" \u2014 "),rP=a("a"),Ilo=o("SegformerFeatureExtractor"),qlo=o(" (SegFormer model)"),Nlo=l(),mh=a("li"),Yte=a("strong"),jlo=o("speech_to_text"),Dlo=o(" \u2014 "),tP=a("a"),Glo=o("Speech2TextFeatureExtractor"),Olo=o(" (Speech2Text model)"),Vlo=l(),gh=a("li"),Kte=a("strong"),Xlo=o("swin"),zlo=o(" \u2014 "),aP=a("a"),Qlo=o("ViTFeatureExtractor"),Wlo=o(" (Swin model)"),Hlo=l(),hh=a("li"),Zte=a("strong"),Ulo=o("van"),Jlo=o(" \u2014 "),nP=a("a"),Ylo=o("ConvNextFeatureExtractor"),Klo=o(" (VAN model)"),Zlo=l(),ph=a("li"),eae=a("strong"),eio=o("vit"),oio=o(" \u2014 "),sP=a("a"),rio=o("ViTFeatureExtractor"),tio=o(" (ViT model)"),aio=l(),uh=a("li"),oae=a("strong"),nio=o("vit_mae"),sio=o(" \u2014 "),lP=a("a"),lio=o("ViTFeatureExtractor"),iio=o(" (ViTMAE model)"),dio=l(),_h=a("li"),rae=a("strong"),cio=o("wav2vec2"),fio=o(" \u2014 "),iP=a("a"),mio=o("Wav2Vec2FeatureExtractor"),gio=o(" (Wav2Vec2 model)"),hio=l(),bh=a("li"),tae=a("strong"),pio=o("yolos"),uio=o(" \u2014 "),dP=a("a"),_io=o("YolosFeatureExtractor"),bio=o(" (YOLOS model)"),vio=l(),F(vh.$$.fragment),Fio=l(),F(Fh.$$.fragment),Tio=l(),Th=a("div"),F(l6.$$.fragment),Mio=l(),aae=a("p"),Eio=o("Register a new feature extractor for this class."),bPe=l(),vi=a("h2"),Mh=a("a"),nae=a("span"),F(i6.$$.fragment),Cio=l(),sae=a("span"),wio=o("AutoProcessor"),vPe=l(),yo=a("div"),F(d6.$$.fragment),Aio=l(),c6=a("p"),yio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=a("a"),Lio=o("AutoProcessor.from_pretrained()"),xio=o(" class method."),$io=l(),f6=a("p"),kio=o("This class cannot be instantiated directly using "),lae=a("code"),Sio=o("__init__()"),Rio=o(" (throws an error)."),Bio=l(),We=a("div"),F(m6.$$.fragment),Pio=l(),iae=a("p"),Iio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qio=l(),Fi=a("p"),Nio=o("The processor class to instantiate is selected based on the "),dae=a("code"),jio=o("model_type"),Dio=o(` property of the config object (either
passed as an argument or loaded from `),cae=a("code"),Gio=o("pretrained_model_name_or_path"),Oio=o(" if possible):"),Vio=l(),be=a("ul"),Eh=a("li"),fae=a("strong"),Xio=o("clip"),zio=o(" \u2014 "),fP=a("a"),Qio=o("CLIPProcessor"),Wio=o(" (CLIP model)"),Hio=l(),Ch=a("li"),mae=a("strong"),Uio=o("layoutlmv2"),Jio=o(" \u2014 "),mP=a("a"),Yio=o("LayoutLMv2Processor"),Kio=o(" (LayoutLMv2 model)"),Zio=l(),wh=a("li"),gae=a("strong"),edo=o("layoutxlm"),odo=o(" \u2014 "),gP=a("a"),rdo=o("LayoutXLMProcessor"),tdo=o(" (LayoutXLM model)"),ado=l(),Ah=a("li"),hae=a("strong"),ndo=o("sew"),sdo=o(" \u2014 "),hP=a("a"),ldo=o("Wav2Vec2Processor"),ido=o(" (SEW model)"),ddo=l(),yh=a("li"),pae=a("strong"),cdo=o("sew-d"),fdo=o(" \u2014 "),pP=a("a"),mdo=o("Wav2Vec2Processor"),gdo=o(" (SEW-D model)"),hdo=l(),Lh=a("li"),uae=a("strong"),pdo=o("speech_to_text"),udo=o(" \u2014 "),uP=a("a"),_do=o("Speech2TextProcessor"),bdo=o(" (Speech2Text model)"),vdo=l(),xh=a("li"),_ae=a("strong"),Fdo=o("speech_to_text_2"),Tdo=o(" \u2014 "),_P=a("a"),Mdo=o("Speech2Text2Processor"),Edo=o(" (Speech2Text2 model)"),Cdo=l(),$h=a("li"),bae=a("strong"),wdo=o("trocr"),Ado=o(" \u2014 "),bP=a("a"),ydo=o("TrOCRProcessor"),Ldo=o(" (TrOCR model)"),xdo=l(),kh=a("li"),vae=a("strong"),$do=o("unispeech"),kdo=o(" \u2014 "),vP=a("a"),Sdo=o("Wav2Vec2Processor"),Rdo=o(" (UniSpeech model)"),Bdo=l(),Sh=a("li"),Fae=a("strong"),Pdo=o("unispeech-sat"),Ido=o(" \u2014 "),FP=a("a"),qdo=o("Wav2Vec2Processor"),Ndo=o(" (UniSpeechSat model)"),jdo=l(),Rh=a("li"),Tae=a("strong"),Ddo=o("vilt"),Gdo=o(" \u2014 "),TP=a("a"),Odo=o("ViltProcessor"),Vdo=o(" (ViLT model)"),Xdo=l(),Bh=a("li"),Mae=a("strong"),zdo=o("vision-text-dual-encoder"),Qdo=o(" \u2014 "),MP=a("a"),Wdo=o("VisionTextDualEncoderProcessor"),Hdo=o(" (VisionTextDualEncoder model)"),Udo=l(),Ph=a("li"),Eae=a("strong"),Jdo=o("wav2vec2"),Ydo=o(" \u2014 "),EP=a("a"),Kdo=o("Wav2Vec2Processor"),Zdo=o(" (Wav2Vec2 model)"),eco=l(),Ih=a("li"),Cae=a("strong"),oco=o("wavlm"),rco=o(" \u2014 "),CP=a("a"),tco=o("Wav2Vec2Processor"),aco=o(" (WavLM model)"),nco=l(),F(qh.$$.fragment),sco=l(),F(Nh.$$.fragment),lco=l(),jh=a("div"),F(g6.$$.fragment),ico=l(),wae=a("p"),dco=o("Register a new processor for this class."),FPe=l(),Ti=a("h2"),Dh=a("a"),Aae=a("span"),F(h6.$$.fragment),cco=l(),yae=a("span"),fco=o("AutoModel"),TPe=l(),Lo=a("div"),F(p6.$$.fragment),mco=l(),Mi=a("p"),gco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=a("a"),hco=o("from_pretrained()"),pco=o(" class method or the "),AP=a("a"),uco=o("from_config()"),_co=o(` class
method.`),bco=l(),u6=a("p"),vco=o("This class cannot be instantiated directly using "),Lae=a("code"),Fco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),ot=a("div"),F(_6.$$.fragment),Eco=l(),xae=a("p"),Cco=o("Instantiates one of the base model classes of the library from a configuration."),wco=l(),Ei=a("p"),Aco=o(`Note:
Loading a model from its configuration file does `),$ae=a("strong"),yco=o("not"),Lco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=a("a"),xco=o("from_pretrained()"),$co=o(" to load the model weights."),kco=l(),F(Gh.$$.fragment),Sco=l(),He=a("div"),F(b6.$$.fragment),Rco=l(),kae=a("p"),Bco=o("Instantiate one of the base model classes of the library from a pretrained model."),Pco=l(),Aa=a("p"),Ico=o("The model class to instantiate is selected based on the "),Sae=a("code"),qco=o("model_type"),Nco=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=a("code"),Gco=o("pretrained_model_name_or_path"),Oco=o(":"),Vco=l(),x=a("ul"),Oh=a("li"),Pae=a("strong"),Xco=o("albert"),zco=o(" \u2014 "),LP=a("a"),Qco=o("AlbertModel"),Wco=o(" (ALBERT model)"),Hco=l(),Vh=a("li"),Iae=a("strong"),Uco=o("bart"),Jco=o(" \u2014 "),xP=a("a"),Yco=o("BartModel"),Kco=o(" (BART model)"),Zco=l(),Xh=a("li"),qae=a("strong"),efo=o("beit"),ofo=o(" \u2014 "),$P=a("a"),rfo=o("BeitModel"),tfo=o(" (BEiT model)"),afo=l(),zh=a("li"),Nae=a("strong"),nfo=o("bert"),sfo=o(" \u2014 "),kP=a("a"),lfo=o("BertModel"),ifo=o(" (BERT model)"),dfo=l(),Qh=a("li"),jae=a("strong"),cfo=o("bert-generation"),ffo=o(" \u2014 "),SP=a("a"),mfo=o("BertGenerationEncoder"),gfo=o(" (Bert Generation model)"),hfo=l(),Wh=a("li"),Dae=a("strong"),pfo=o("big_bird"),ufo=o(" \u2014 "),RP=a("a"),_fo=o("BigBirdModel"),bfo=o(" (BigBird model)"),vfo=l(),Hh=a("li"),Gae=a("strong"),Ffo=o("bigbird_pegasus"),Tfo=o(" \u2014 "),BP=a("a"),Mfo=o("BigBirdPegasusModel"),Efo=o(" (BigBirdPegasus model)"),Cfo=l(),Uh=a("li"),Oae=a("strong"),wfo=o("blenderbot"),Afo=o(" \u2014 "),PP=a("a"),yfo=o("BlenderbotModel"),Lfo=o(" (Blenderbot model)"),xfo=l(),Jh=a("li"),Vae=a("strong"),$fo=o("blenderbot-small"),kfo=o(" \u2014 "),IP=a("a"),Sfo=o("BlenderbotSmallModel"),Rfo=o(" (BlenderbotSmall model)"),Bfo=l(),Yh=a("li"),Xae=a("strong"),Pfo=o("camembert"),Ifo=o(" \u2014 "),qP=a("a"),qfo=o("CamembertModel"),Nfo=o(" (CamemBERT model)"),jfo=l(),Kh=a("li"),zae=a("strong"),Dfo=o("canine"),Gfo=o(" \u2014 "),NP=a("a"),Ofo=o("CanineModel"),Vfo=o(" (Canine model)"),Xfo=l(),Zh=a("li"),Qae=a("strong"),zfo=o("clip"),Qfo=o(" \u2014 "),jP=a("a"),Wfo=o("CLIPModel"),Hfo=o(" (CLIP model)"),Ufo=l(),ep=a("li"),Wae=a("strong"),Jfo=o("convbert"),Yfo=o(" \u2014 "),DP=a("a"),Kfo=o("ConvBertModel"),Zfo=o(" (ConvBERT model)"),emo=l(),op=a("li"),Hae=a("strong"),omo=o("convnext"),rmo=o(" \u2014 "),GP=a("a"),tmo=o("ConvNextModel"),amo=o(" (ConvNext model)"),nmo=l(),rp=a("li"),Uae=a("strong"),smo=o("ctrl"),lmo=o(" \u2014 "),OP=a("a"),imo=o("CTRLModel"),dmo=o(" (CTRL model)"),cmo=l(),tp=a("li"),Jae=a("strong"),fmo=o("data2vec-audio"),mmo=o(" \u2014 "),VP=a("a"),gmo=o("Data2VecAudioModel"),hmo=o(" (Data2VecAudio model)"),pmo=l(),ap=a("li"),Yae=a("strong"),umo=o("data2vec-text"),_mo=o(" \u2014 "),XP=a("a"),bmo=o("Data2VecTextModel"),vmo=o(" (Data2VecText model)"),Fmo=l(),np=a("li"),Kae=a("strong"),Tmo=o("data2vec-vision"),Mmo=o(" \u2014 "),zP=a("a"),Emo=o("Data2VecVisionModel"),Cmo=o(" (Data2VecVision model)"),wmo=l(),sp=a("li"),Zae=a("strong"),Amo=o("deberta"),ymo=o(" \u2014 "),QP=a("a"),Lmo=o("DebertaModel"),xmo=o(" (DeBERTa model)"),$mo=l(),lp=a("li"),ene=a("strong"),kmo=o("deberta-v2"),Smo=o(" \u2014 "),WP=a("a"),Rmo=o("DebertaV2Model"),Bmo=o(" (DeBERTa-v2 model)"),Pmo=l(),ip=a("li"),one=a("strong"),Imo=o("decision_transformer"),qmo=o(" \u2014 "),HP=a("a"),Nmo=o("DecisionTransformerModel"),jmo=o(" (Decision Transformer model)"),Dmo=l(),dp=a("li"),rne=a("strong"),Gmo=o("deit"),Omo=o(" \u2014 "),UP=a("a"),Vmo=o("DeiTModel"),Xmo=o(" (DeiT model)"),zmo=l(),cp=a("li"),tne=a("strong"),Qmo=o("detr"),Wmo=o(" \u2014 "),JP=a("a"),Hmo=o("DetrModel"),Umo=o(" (DETR model)"),Jmo=l(),fp=a("li"),ane=a("strong"),Ymo=o("distilbert"),Kmo=o(" \u2014 "),YP=a("a"),Zmo=o("DistilBertModel"),ego=o(" (DistilBERT model)"),ogo=l(),mp=a("li"),nne=a("strong"),rgo=o("dpr"),tgo=o(" \u2014 "),KP=a("a"),ago=o("DPRQuestionEncoder"),ngo=o(" (DPR model)"),sgo=l(),gp=a("li"),sne=a("strong"),lgo=o("dpt"),igo=o(" \u2014 "),ZP=a("a"),dgo=o("DPTModel"),cgo=o(" (DPT model)"),fgo=l(),hp=a("li"),lne=a("strong"),mgo=o("electra"),ggo=o(" \u2014 "),eI=a("a"),hgo=o("ElectraModel"),pgo=o(" (ELECTRA model)"),ugo=l(),pp=a("li"),ine=a("strong"),_go=o("flaubert"),bgo=o(" \u2014 "),oI=a("a"),vgo=o("FlaubertModel"),Fgo=o(" (FlauBERT model)"),Tgo=l(),up=a("li"),dne=a("strong"),Mgo=o("fnet"),Ego=o(" \u2014 "),rI=a("a"),Cgo=o("FNetModel"),wgo=o(" (FNet model)"),Ago=l(),_p=a("li"),cne=a("strong"),ygo=o("fsmt"),Lgo=o(" \u2014 "),tI=a("a"),xgo=o("FSMTModel"),$go=o(" (FairSeq Machine-Translation model)"),kgo=l(),Ss=a("li"),fne=a("strong"),Sgo=o("funnel"),Rgo=o(" \u2014 "),aI=a("a"),Bgo=o("FunnelModel"),Pgo=o(" or "),nI=a("a"),Igo=o("FunnelBaseModel"),qgo=o(" (Funnel Transformer model)"),Ngo=l(),bp=a("li"),mne=a("strong"),jgo=o("glpn"),Dgo=o(" \u2014 "),sI=a("a"),Ggo=o("GLPNModel"),Ogo=o(" (GLPN model)"),Vgo=l(),vp=a("li"),gne=a("strong"),Xgo=o("gpt2"),zgo=o(" \u2014 "),lI=a("a"),Qgo=o("GPT2Model"),Wgo=o(" (OpenAI GPT-2 model)"),Hgo=l(),Fp=a("li"),hne=a("strong"),Ugo=o("gpt_neo"),Jgo=o(" \u2014 "),iI=a("a"),Ygo=o("GPTNeoModel"),Kgo=o(" (GPT Neo model)"),Zgo=l(),Tp=a("li"),pne=a("strong"),eho=o("gptj"),oho=o(" \u2014 "),dI=a("a"),rho=o("GPTJModel"),tho=o(" (GPT-J model)"),aho=l(),Mp=a("li"),une=a("strong"),nho=o("hubert"),sho=o(" \u2014 "),cI=a("a"),lho=o("HubertModel"),iho=o(" (Hubert model)"),dho=l(),Ep=a("li"),_ne=a("strong"),cho=o("ibert"),fho=o(" \u2014 "),fI=a("a"),mho=o("IBertModel"),gho=o(" (I-BERT model)"),hho=l(),Cp=a("li"),bne=a("strong"),pho=o("imagegpt"),uho=o(" \u2014 "),mI=a("a"),_ho=o("ImageGPTModel"),bho=o(" (ImageGPT model)"),vho=l(),wp=a("li"),vne=a("strong"),Fho=o("layoutlm"),Tho=o(" \u2014 "),gI=a("a"),Mho=o("LayoutLMModel"),Eho=o(" (LayoutLM model)"),Cho=l(),Ap=a("li"),Fne=a("strong"),who=o("layoutlmv2"),Aho=o(" \u2014 "),hI=a("a"),yho=o("LayoutLMv2Model"),Lho=o(" (LayoutLMv2 model)"),xho=l(),yp=a("li"),Tne=a("strong"),$ho=o("led"),kho=o(" \u2014 "),pI=a("a"),Sho=o("LEDModel"),Rho=o(" (LED model)"),Bho=l(),Lp=a("li"),Mne=a("strong"),Pho=o("longformer"),Iho=o(" \u2014 "),uI=a("a"),qho=o("LongformerModel"),Nho=o(" (Longformer model)"),jho=l(),xp=a("li"),Ene=a("strong"),Dho=o("luke"),Gho=o(" \u2014 "),_I=a("a"),Oho=o("LukeModel"),Vho=o(" (LUKE model)"),Xho=l(),$p=a("li"),Cne=a("strong"),zho=o("lxmert"),Qho=o(" \u2014 "),bI=a("a"),Who=o("LxmertModel"),Hho=o(" (LXMERT model)"),Uho=l(),kp=a("li"),wne=a("strong"),Jho=o("m2m_100"),Yho=o(" \u2014 "),vI=a("a"),Kho=o("M2M100Model"),Zho=o(" (M2M100 model)"),epo=l(),Sp=a("li"),Ane=a("strong"),opo=o("marian"),rpo=o(" \u2014 "),FI=a("a"),tpo=o("MarianModel"),apo=o(" (Marian model)"),npo=l(),Rp=a("li"),yne=a("strong"),spo=o("maskformer"),lpo=o(" \u2014 "),TI=a("a"),ipo=o("MaskFormerModel"),dpo=o(" (MaskFormer model)"),cpo=l(),Bp=a("li"),Lne=a("strong"),fpo=o("mbart"),mpo=o(" \u2014 "),MI=a("a"),gpo=o("MBartModel"),hpo=o(" (mBART model)"),ppo=l(),Pp=a("li"),xne=a("strong"),upo=o("megatron-bert"),_po=o(" \u2014 "),EI=a("a"),bpo=o("MegatronBertModel"),vpo=o(" (MegatronBert model)"),Fpo=l(),Ip=a("li"),$ne=a("strong"),Tpo=o("mobilebert"),Mpo=o(" \u2014 "),CI=a("a"),Epo=o("MobileBertModel"),Cpo=o(" (MobileBERT model)"),wpo=l(),qp=a("li"),kne=a("strong"),Apo=o("mpnet"),ypo=o(" \u2014 "),wI=a("a"),Lpo=o("MPNetModel"),xpo=o(" (MPNet model)"),$po=l(),Np=a("li"),Sne=a("strong"),kpo=o("mt5"),Spo=o(" \u2014 "),AI=a("a"),Rpo=o("MT5Model"),Bpo=o(" (mT5 model)"),Ppo=l(),jp=a("li"),Rne=a("strong"),Ipo=o("nystromformer"),qpo=o(" \u2014 "),yI=a("a"),Npo=o("NystromformerModel"),jpo=o(" (Nystromformer model)"),Dpo=l(),Dp=a("li"),Bne=a("strong"),Gpo=o("openai-gpt"),Opo=o(" \u2014 "),LI=a("a"),Vpo=o("OpenAIGPTModel"),Xpo=o(" (OpenAI GPT model)"),zpo=l(),Gp=a("li"),Pne=a("strong"),Qpo=o("pegasus"),Wpo=o(" \u2014 "),xI=a("a"),Hpo=o("PegasusModel"),Upo=o(" (Pegasus model)"),Jpo=l(),Op=a("li"),Ine=a("strong"),Ypo=o("perceiver"),Kpo=o(" \u2014 "),$I=a("a"),Zpo=o("PerceiverModel"),euo=o(" (Perceiver model)"),ouo=l(),Vp=a("li"),qne=a("strong"),ruo=o("plbart"),tuo=o(" \u2014 "),kI=a("a"),auo=o("PLBartModel"),nuo=o(" (PLBart model)"),suo=l(),Xp=a("li"),Nne=a("strong"),luo=o("poolformer"),iuo=o(" \u2014 "),SI=a("a"),duo=o("PoolFormerModel"),cuo=o(" (PoolFormer model)"),fuo=l(),zp=a("li"),jne=a("strong"),muo=o("prophetnet"),guo=o(" \u2014 "),RI=a("a"),huo=o("ProphetNetModel"),puo=o(" (ProphetNet model)"),uuo=l(),Qp=a("li"),Dne=a("strong"),_uo=o("qdqbert"),buo=o(" \u2014 "),BI=a("a"),vuo=o("QDQBertModel"),Fuo=o(" (QDQBert model)"),Tuo=l(),Wp=a("li"),Gne=a("strong"),Muo=o("reformer"),Euo=o(" \u2014 "),PI=a("a"),Cuo=o("ReformerModel"),wuo=o(" (Reformer model)"),Auo=l(),Hp=a("li"),One=a("strong"),yuo=o("regnet"),Luo=o(" \u2014 "),II=a("a"),xuo=o("RegNetModel"),$uo=o(" (RegNet model)"),kuo=l(),Up=a("li"),Vne=a("strong"),Suo=o("rembert"),Ruo=o(" \u2014 "),qI=a("a"),Buo=o("RemBertModel"),Puo=o(" (RemBERT model)"),Iuo=l(),Jp=a("li"),Xne=a("strong"),quo=o("resnet"),Nuo=o(" \u2014 "),NI=a("a"),juo=o("ResNetModel"),Duo=o(" (ResNet model)"),Guo=l(),Yp=a("li"),zne=a("strong"),Ouo=o("retribert"),Vuo=o(" \u2014 "),jI=a("a"),Xuo=o("RetriBertModel"),zuo=o(" (RetriBERT model)"),Quo=l(),Kp=a("li"),Qne=a("strong"),Wuo=o("roberta"),Huo=o(" \u2014 "),DI=a("a"),Uuo=o("RobertaModel"),Juo=o(" (RoBERTa model)"),Yuo=l(),Zp=a("li"),Wne=a("strong"),Kuo=o("roformer"),Zuo=o(" \u2014 "),GI=a("a"),e_o=o("RoFormerModel"),o_o=o(" (RoFormer model)"),r_o=l(),eu=a("li"),Hne=a("strong"),t_o=o("segformer"),a_o=o(" \u2014 "),OI=a("a"),n_o=o("SegformerModel"),s_o=o(" (SegFormer model)"),l_o=l(),ou=a("li"),Une=a("strong"),i_o=o("sew"),d_o=o(" \u2014 "),VI=a("a"),c_o=o("SEWModel"),f_o=o(" (SEW model)"),m_o=l(),ru=a("li"),Jne=a("strong"),g_o=o("sew-d"),h_o=o(" \u2014 "),XI=a("a"),p_o=o("SEWDModel"),u_o=o(" (SEW-D model)"),__o=l(),tu=a("li"),Yne=a("strong"),b_o=o("speech_to_text"),v_o=o(" \u2014 "),zI=a("a"),F_o=o("Speech2TextModel"),T_o=o(" (Speech2Text model)"),M_o=l(),au=a("li"),Kne=a("strong"),E_o=o("splinter"),C_o=o(" \u2014 "),QI=a("a"),w_o=o("SplinterModel"),A_o=o(" (Splinter model)"),y_o=l(),nu=a("li"),Zne=a("strong"),L_o=o("squeezebert"),x_o=o(" \u2014 "),WI=a("a"),$_o=o("SqueezeBertModel"),k_o=o(" (SqueezeBERT model)"),S_o=l(),su=a("li"),ese=a("strong"),R_o=o("swin"),B_o=o(" \u2014 "),HI=a("a"),P_o=o("SwinModel"),I_o=o(" (Swin model)"),q_o=l(),lu=a("li"),ose=a("strong"),N_o=o("t5"),j_o=o(" \u2014 "),UI=a("a"),D_o=o("T5Model"),G_o=o(" (T5 model)"),O_o=l(),iu=a("li"),rse=a("strong"),V_o=o("tapas"),X_o=o(" \u2014 "),JI=a("a"),z_o=o("TapasModel"),Q_o=o(" (TAPAS model)"),W_o=l(),du=a("li"),tse=a("strong"),H_o=o("transfo-xl"),U_o=o(" \u2014 "),YI=a("a"),J_o=o("TransfoXLModel"),Y_o=o(" (Transformer-XL model)"),K_o=l(),cu=a("li"),ase=a("strong"),Z_o=o("unispeech"),e1o=o(" \u2014 "),KI=a("a"),o1o=o("UniSpeechModel"),r1o=o(" (UniSpeech model)"),t1o=l(),fu=a("li"),nse=a("strong"),a1o=o("unispeech-sat"),n1o=o(" \u2014 "),ZI=a("a"),s1o=o("UniSpeechSatModel"),l1o=o(" (UniSpeechSat model)"),i1o=l(),mu=a("li"),sse=a("strong"),d1o=o("van"),c1o=o(" \u2014 "),eq=a("a"),f1o=o("VanModel"),m1o=o(" (VAN model)"),g1o=l(),gu=a("li"),lse=a("strong"),h1o=o("vilt"),p1o=o(" \u2014 "),oq=a("a"),u1o=o("ViltModel"),_1o=o(" (ViLT model)"),b1o=l(),hu=a("li"),ise=a("strong"),v1o=o("vision-text-dual-encoder"),F1o=o(" \u2014 "),rq=a("a"),T1o=o("VisionTextDualEncoderModel"),M1o=o(" (VisionTextDualEncoder model)"),E1o=l(),pu=a("li"),dse=a("strong"),C1o=o("visual_bert"),w1o=o(" \u2014 "),tq=a("a"),A1o=o("VisualBertModel"),y1o=o(" (VisualBert model)"),L1o=l(),uu=a("li"),cse=a("strong"),x1o=o("vit"),$1o=o(" \u2014 "),aq=a("a"),k1o=o("ViTModel"),S1o=o(" (ViT model)"),R1o=l(),_u=a("li"),fse=a("strong"),B1o=o("vit_mae"),P1o=o(" \u2014 "),nq=a("a"),I1o=o("ViTMAEModel"),q1o=o(" (ViTMAE model)"),N1o=l(),bu=a("li"),mse=a("strong"),j1o=o("wav2vec2"),D1o=o(" \u2014 "),sq=a("a"),G1o=o("Wav2Vec2Model"),O1o=o(" (Wav2Vec2 model)"),V1o=l(),vu=a("li"),gse=a("strong"),X1o=o("wavlm"),z1o=o(" \u2014 "),lq=a("a"),Q1o=o("WavLMModel"),W1o=o(" (WavLM model)"),H1o=l(),Fu=a("li"),hse=a("strong"),U1o=o("xglm"),J1o=o(" \u2014 "),iq=a("a"),Y1o=o("XGLMModel"),K1o=o(" (XGLM model)"),Z1o=l(),Tu=a("li"),pse=a("strong"),ebo=o("xlm"),obo=o(" \u2014 "),dq=a("a"),rbo=o("XLMModel"),tbo=o(" (XLM model)"),abo=l(),Mu=a("li"),use=a("strong"),nbo=o("xlm-prophetnet"),sbo=o(" \u2014 "),cq=a("a"),lbo=o("XLMProphetNetModel"),ibo=o(" (XLMProphetNet model)"),dbo=l(),Eu=a("li"),_se=a("strong"),cbo=o("xlm-roberta"),fbo=o(" \u2014 "),fq=a("a"),mbo=o("XLMRobertaModel"),gbo=o(" (XLM-RoBERTa model)"),hbo=l(),Cu=a("li"),bse=a("strong"),pbo=o("xlm-roberta-xl"),ubo=o(" \u2014 "),mq=a("a"),_bo=o("XLMRobertaXLModel"),bbo=o(" (XLM-RoBERTa-XL model)"),vbo=l(),wu=a("li"),vse=a("strong"),Fbo=o("xlnet"),Tbo=o(" \u2014 "),gq=a("a"),Mbo=o("XLNetModel"),Ebo=o(" (XLNet model)"),Cbo=l(),Au=a("li"),Fse=a("strong"),wbo=o("yolos"),Abo=o(" \u2014 "),hq=a("a"),ybo=o("YolosModel"),Lbo=o(" (YOLOS model)"),xbo=l(),yu=a("li"),Tse=a("strong"),$bo=o("yoso"),kbo=o(" \u2014 "),pq=a("a"),Sbo=o("YosoModel"),Rbo=o(" (YOSO model)"),Bbo=l(),Lu=a("p"),Pbo=o("The model is set in evaluation mode by default using "),Mse=a("code"),Ibo=o("model.eval()"),qbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),Nbo=o("model.train()"),jbo=l(),F(xu.$$.fragment),MPe=l(),Ci=a("h2"),$u=a("a"),Cse=a("span"),F(v6.$$.fragment),Dbo=l(),wse=a("span"),Gbo=o("AutoModelForPreTraining"),EPe=l(),xo=a("div"),F(F6.$$.fragment),Obo=l(),wi=a("p"),Vbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=a("a"),Xbo=o("from_pretrained()"),zbo=o(" class method or the "),_q=a("a"),Qbo=o("from_config()"),Wbo=o(` class
method.`),Hbo=l(),T6=a("p"),Ubo=o("This class cannot be instantiated directly using "),Ase=a("code"),Jbo=o("__init__()"),Ybo=o(" (throws an error)."),Kbo=l(),rt=a("div"),F(M6.$$.fragment),Zbo=l(),yse=a("p"),e4o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o4o=l(),Ai=a("p"),r4o=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),t4o=o("not"),a4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=a("a"),n4o=o("from_pretrained()"),s4o=o(" to load the model weights."),l4o=l(),F(ku.$$.fragment),i4o=l(),Ue=a("div"),F(E6.$$.fragment),d4o=l(),xse=a("p"),c4o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f4o=l(),ya=a("p"),m4o=o("The model class to instantiate is selected based on the "),$se=a("code"),g4o=o("model_type"),h4o=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),p4o=o("pretrained_model_name_or_path"),u4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),_4o=o("pretrained_model_name_or_path"),b4o=o(":"),v4o=l(),G=a("ul"),Su=a("li"),Rse=a("strong"),F4o=o("albert"),T4o=o(" \u2014 "),vq=a("a"),M4o=o("AlbertForPreTraining"),E4o=o(" (ALBERT model)"),C4o=l(),Ru=a("li"),Bse=a("strong"),w4o=o("bart"),A4o=o(" \u2014 "),Fq=a("a"),y4o=o("BartForConditionalGeneration"),L4o=o(" (BART model)"),x4o=l(),Bu=a("li"),Pse=a("strong"),$4o=o("bert"),k4o=o(" \u2014 "),Tq=a("a"),S4o=o("BertForPreTraining"),R4o=o(" (BERT model)"),B4o=l(),Pu=a("li"),Ise=a("strong"),P4o=o("big_bird"),I4o=o(" \u2014 "),Mq=a("a"),q4o=o("BigBirdForPreTraining"),N4o=o(" (BigBird model)"),j4o=l(),Iu=a("li"),qse=a("strong"),D4o=o("camembert"),G4o=o(" \u2014 "),Eq=a("a"),O4o=o("CamembertForMaskedLM"),V4o=o(" (CamemBERT model)"),X4o=l(),qu=a("li"),Nse=a("strong"),z4o=o("ctrl"),Q4o=o(" \u2014 "),Cq=a("a"),W4o=o("CTRLLMHeadModel"),H4o=o(" (CTRL model)"),U4o=l(),Nu=a("li"),jse=a("strong"),J4o=o("data2vec-text"),Y4o=o(" \u2014 "),wq=a("a"),K4o=o("Data2VecTextForMaskedLM"),Z4o=o(" (Data2VecText model)"),e2o=l(),ju=a("li"),Dse=a("strong"),o2o=o("deberta"),r2o=o(" \u2014 "),Aq=a("a"),t2o=o("DebertaForMaskedLM"),a2o=o(" (DeBERTa model)"),n2o=l(),Du=a("li"),Gse=a("strong"),s2o=o("deberta-v2"),l2o=o(" \u2014 "),yq=a("a"),i2o=o("DebertaV2ForMaskedLM"),d2o=o(" (DeBERTa-v2 model)"),c2o=l(),Gu=a("li"),Ose=a("strong"),f2o=o("distilbert"),m2o=o(" \u2014 "),Lq=a("a"),g2o=o("DistilBertForMaskedLM"),h2o=o(" (DistilBERT model)"),p2o=l(),Ou=a("li"),Vse=a("strong"),u2o=o("electra"),_2o=o(" \u2014 "),xq=a("a"),b2o=o("ElectraForPreTraining"),v2o=o(" (ELECTRA model)"),F2o=l(),Vu=a("li"),Xse=a("strong"),T2o=o("flaubert"),M2o=o(" \u2014 "),$q=a("a"),E2o=o("FlaubertWithLMHeadModel"),C2o=o(" (FlauBERT model)"),w2o=l(),Xu=a("li"),zse=a("strong"),A2o=o("fnet"),y2o=o(" \u2014 "),kq=a("a"),L2o=o("FNetForPreTraining"),x2o=o(" (FNet model)"),$2o=l(),zu=a("li"),Qse=a("strong"),k2o=o("fsmt"),S2o=o(" \u2014 "),Sq=a("a"),R2o=o("FSMTForConditionalGeneration"),B2o=o(" (FairSeq Machine-Translation model)"),P2o=l(),Qu=a("li"),Wse=a("strong"),I2o=o("funnel"),q2o=o(" \u2014 "),Rq=a("a"),N2o=o("FunnelForPreTraining"),j2o=o(" (Funnel Transformer model)"),D2o=l(),Wu=a("li"),Hse=a("strong"),G2o=o("gpt2"),O2o=o(" \u2014 "),Bq=a("a"),V2o=o("GPT2LMHeadModel"),X2o=o(" (OpenAI GPT-2 model)"),z2o=l(),Hu=a("li"),Use=a("strong"),Q2o=o("ibert"),W2o=o(" \u2014 "),Pq=a("a"),H2o=o("IBertForMaskedLM"),U2o=o(" (I-BERT model)"),J2o=l(),Uu=a("li"),Jse=a("strong"),Y2o=o("layoutlm"),K2o=o(" \u2014 "),Iq=a("a"),Z2o=o("LayoutLMForMaskedLM"),e5o=o(" (LayoutLM model)"),o5o=l(),Ju=a("li"),Yse=a("strong"),r5o=o("longformer"),t5o=o(" \u2014 "),qq=a("a"),a5o=o("LongformerForMaskedLM"),n5o=o(" (Longformer model)"),s5o=l(),Yu=a("li"),Kse=a("strong"),l5o=o("lxmert"),i5o=o(" \u2014 "),Nq=a("a"),d5o=o("LxmertForPreTraining"),c5o=o(" (LXMERT model)"),f5o=l(),Ku=a("li"),Zse=a("strong"),m5o=o("megatron-bert"),g5o=o(" \u2014 "),jq=a("a"),h5o=o("MegatronBertForPreTraining"),p5o=o(" (MegatronBert model)"),u5o=l(),Zu=a("li"),ele=a("strong"),_5o=o("mobilebert"),b5o=o(" \u2014 "),Dq=a("a"),v5o=o("MobileBertForPreTraining"),F5o=o(" (MobileBERT model)"),T5o=l(),e_=a("li"),ole=a("strong"),M5o=o("mpnet"),E5o=o(" \u2014 "),Gq=a("a"),C5o=o("MPNetForMaskedLM"),w5o=o(" (MPNet model)"),A5o=l(),o_=a("li"),rle=a("strong"),y5o=o("openai-gpt"),L5o=o(" \u2014 "),Oq=a("a"),x5o=o("OpenAIGPTLMHeadModel"),$5o=o(" (OpenAI GPT model)"),k5o=l(),r_=a("li"),tle=a("strong"),S5o=o("retribert"),R5o=o(" \u2014 "),Vq=a("a"),B5o=o("RetriBertModel"),P5o=o(" (RetriBERT model)"),I5o=l(),t_=a("li"),ale=a("strong"),q5o=o("roberta"),N5o=o(" \u2014 "),Xq=a("a"),j5o=o("RobertaForMaskedLM"),D5o=o(" (RoBERTa model)"),G5o=l(),a_=a("li"),nle=a("strong"),O5o=o("squeezebert"),V5o=o(" \u2014 "),zq=a("a"),X5o=o("SqueezeBertForMaskedLM"),z5o=o(" (SqueezeBERT model)"),Q5o=l(),n_=a("li"),sle=a("strong"),W5o=o("t5"),H5o=o(" \u2014 "),Qq=a("a"),U5o=o("T5ForConditionalGeneration"),J5o=o(" (T5 model)"),Y5o=l(),s_=a("li"),lle=a("strong"),K5o=o("tapas"),Z5o=o(" \u2014 "),Wq=a("a"),evo=o("TapasForMaskedLM"),ovo=o(" (TAPAS model)"),rvo=l(),l_=a("li"),ile=a("strong"),tvo=o("transfo-xl"),avo=o(" \u2014 "),Hq=a("a"),nvo=o("TransfoXLLMHeadModel"),svo=o(" (Transformer-XL model)"),lvo=l(),i_=a("li"),dle=a("strong"),ivo=o("unispeech"),dvo=o(" \u2014 "),Uq=a("a"),cvo=o("UniSpeechForPreTraining"),fvo=o(" (UniSpeech model)"),mvo=l(),d_=a("li"),cle=a("strong"),gvo=o("unispeech-sat"),hvo=o(" \u2014 "),Jq=a("a"),pvo=o("UniSpeechSatForPreTraining"),uvo=o(" (UniSpeechSat model)"),_vo=l(),c_=a("li"),fle=a("strong"),bvo=o("visual_bert"),vvo=o(" \u2014 "),Yq=a("a"),Fvo=o("VisualBertForPreTraining"),Tvo=o(" (VisualBert model)"),Mvo=l(),f_=a("li"),mle=a("strong"),Evo=o("vit_mae"),Cvo=o(" \u2014 "),Kq=a("a"),wvo=o("ViTMAEForPreTraining"),Avo=o(" (ViTMAE model)"),yvo=l(),m_=a("li"),gle=a("strong"),Lvo=o("wav2vec2"),xvo=o(" \u2014 "),Zq=a("a"),$vo=o("Wav2Vec2ForPreTraining"),kvo=o(" (Wav2Vec2 model)"),Svo=l(),g_=a("li"),hle=a("strong"),Rvo=o("xlm"),Bvo=o(" \u2014 "),eN=a("a"),Pvo=o("XLMWithLMHeadModel"),Ivo=o(" (XLM model)"),qvo=l(),h_=a("li"),ple=a("strong"),Nvo=o("xlm-roberta"),jvo=o(" \u2014 "),oN=a("a"),Dvo=o("XLMRobertaForMaskedLM"),Gvo=o(" (XLM-RoBERTa model)"),Ovo=l(),p_=a("li"),ule=a("strong"),Vvo=o("xlm-roberta-xl"),Xvo=o(" \u2014 "),rN=a("a"),zvo=o("XLMRobertaXLForMaskedLM"),Qvo=o(" (XLM-RoBERTa-XL model)"),Wvo=l(),u_=a("li"),_le=a("strong"),Hvo=o("xlnet"),Uvo=o(" \u2014 "),tN=a("a"),Jvo=o("XLNetLMHeadModel"),Yvo=o(" (XLNet model)"),Kvo=l(),__=a("p"),Zvo=o("The model is set in evaluation mode by default using "),ble=a("code"),eFo=o("model.eval()"),oFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),rFo=o("model.train()"),tFo=l(),F(b_.$$.fragment),CPe=l(),yi=a("h2"),v_=a("a"),Fle=a("span"),F(C6.$$.fragment),aFo=l(),Tle=a("span"),nFo=o("AutoModelForCausalLM"),wPe=l(),$o=a("div"),F(w6.$$.fragment),sFo=l(),Li=a("p"),lFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=a("a"),iFo=o("from_pretrained()"),dFo=o(" class method or the "),nN=a("a"),cFo=o("from_config()"),fFo=o(` class
method.`),mFo=l(),A6=a("p"),gFo=o("This class cannot be instantiated directly using "),Mle=a("code"),hFo=o("__init__()"),pFo=o(" (throws an error)."),uFo=l(),tt=a("div"),F(y6.$$.fragment),_Fo=l(),Ele=a("p"),bFo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vFo=l(),xi=a("p"),FFo=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),TFo=o("not"),MFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),EFo=o("from_pretrained()"),CFo=o(" to load the model weights."),wFo=l(),F(F_.$$.fragment),AFo=l(),Je=a("div"),F(L6.$$.fragment),yFo=l(),wle=a("p"),LFo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xFo=l(),La=a("p"),$Fo=o("The model class to instantiate is selected based on the "),Ale=a("code"),kFo=o("model_type"),SFo=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),RFo=o("pretrained_model_name_or_path"),BFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),PFo=o("pretrained_model_name_or_path"),IFo=o(":"),qFo=l(),z=a("ul"),T_=a("li"),xle=a("strong"),NFo=o("bart"),jFo=o(" \u2014 "),lN=a("a"),DFo=o("BartForCausalLM"),GFo=o(" (BART model)"),OFo=l(),M_=a("li"),$le=a("strong"),VFo=o("bert"),XFo=o(" \u2014 "),iN=a("a"),zFo=o("BertLMHeadModel"),QFo=o(" (BERT model)"),WFo=l(),E_=a("li"),kle=a("strong"),HFo=o("bert-generation"),UFo=o(" \u2014 "),dN=a("a"),JFo=o("BertGenerationDecoder"),YFo=o(" (Bert Generation model)"),KFo=l(),C_=a("li"),Sle=a("strong"),ZFo=o("big_bird"),e0o=o(" \u2014 "),cN=a("a"),o0o=o("BigBirdForCausalLM"),r0o=o(" (BigBird model)"),t0o=l(),w_=a("li"),Rle=a("strong"),a0o=o("bigbird_pegasus"),n0o=o(" \u2014 "),fN=a("a"),s0o=o("BigBirdPegasusForCausalLM"),l0o=o(" (BigBirdPegasus model)"),i0o=l(),A_=a("li"),Ble=a("strong"),d0o=o("blenderbot"),c0o=o(" \u2014 "),mN=a("a"),f0o=o("BlenderbotForCausalLM"),m0o=o(" (Blenderbot model)"),g0o=l(),y_=a("li"),Ple=a("strong"),h0o=o("blenderbot-small"),p0o=o(" \u2014 "),gN=a("a"),u0o=o("BlenderbotSmallForCausalLM"),_0o=o(" (BlenderbotSmall model)"),b0o=l(),L_=a("li"),Ile=a("strong"),v0o=o("camembert"),F0o=o(" \u2014 "),hN=a("a"),T0o=o("CamembertForCausalLM"),M0o=o(" (CamemBERT model)"),E0o=l(),x_=a("li"),qle=a("strong"),C0o=o("ctrl"),w0o=o(" \u2014 "),pN=a("a"),A0o=o("CTRLLMHeadModel"),y0o=o(" (CTRL model)"),L0o=l(),$_=a("li"),Nle=a("strong"),x0o=o("data2vec-text"),$0o=o(" \u2014 "),uN=a("a"),k0o=o("Data2VecTextForCausalLM"),S0o=o(" (Data2VecText model)"),R0o=l(),k_=a("li"),jle=a("strong"),B0o=o("electra"),P0o=o(" \u2014 "),_N=a("a"),I0o=o("ElectraForCausalLM"),q0o=o(" (ELECTRA model)"),N0o=l(),S_=a("li"),Dle=a("strong"),j0o=o("gpt2"),D0o=o(" \u2014 "),bN=a("a"),G0o=o("GPT2LMHeadModel"),O0o=o(" (OpenAI GPT-2 model)"),V0o=l(),R_=a("li"),Gle=a("strong"),X0o=o("gpt_neo"),z0o=o(" \u2014 "),vN=a("a"),Q0o=o("GPTNeoForCausalLM"),W0o=o(" (GPT Neo model)"),H0o=l(),B_=a("li"),Ole=a("strong"),U0o=o("gptj"),J0o=o(" \u2014 "),FN=a("a"),Y0o=o("GPTJForCausalLM"),K0o=o(" (GPT-J model)"),Z0o=l(),P_=a("li"),Vle=a("strong"),eTo=o("marian"),oTo=o(" \u2014 "),TN=a("a"),rTo=o("MarianForCausalLM"),tTo=o(" (Marian model)"),aTo=l(),I_=a("li"),Xle=a("strong"),nTo=o("mbart"),sTo=o(" \u2014 "),MN=a("a"),lTo=o("MBartForCausalLM"),iTo=o(" (mBART model)"),dTo=l(),q_=a("li"),zle=a("strong"),cTo=o("megatron-bert"),fTo=o(" \u2014 "),EN=a("a"),mTo=o("MegatronBertForCausalLM"),gTo=o(" (MegatronBert model)"),hTo=l(),N_=a("li"),Qle=a("strong"),pTo=o("openai-gpt"),uTo=o(" \u2014 "),CN=a("a"),_To=o("OpenAIGPTLMHeadModel"),bTo=o(" (OpenAI GPT model)"),vTo=l(),j_=a("li"),Wle=a("strong"),FTo=o("pegasus"),TTo=o(" \u2014 "),wN=a("a"),MTo=o("PegasusForCausalLM"),ETo=o(" (Pegasus model)"),CTo=l(),D_=a("li"),Hle=a("strong"),wTo=o("plbart"),ATo=o(" \u2014 "),AN=a("a"),yTo=o("PLBartForCausalLM"),LTo=o(" (PLBart model)"),xTo=l(),G_=a("li"),Ule=a("strong"),$To=o("prophetnet"),kTo=o(" \u2014 "),yN=a("a"),STo=o("ProphetNetForCausalLM"),RTo=o(" (ProphetNet model)"),BTo=l(),O_=a("li"),Jle=a("strong"),PTo=o("qdqbert"),ITo=o(" \u2014 "),LN=a("a"),qTo=o("QDQBertLMHeadModel"),NTo=o(" (QDQBert model)"),jTo=l(),V_=a("li"),Yle=a("strong"),DTo=o("reformer"),GTo=o(" \u2014 "),xN=a("a"),OTo=o("ReformerModelWithLMHead"),VTo=o(" (Reformer model)"),XTo=l(),X_=a("li"),Kle=a("strong"),zTo=o("rembert"),QTo=o(" \u2014 "),$N=a("a"),WTo=o("RemBertForCausalLM"),HTo=o(" (RemBERT model)"),UTo=l(),z_=a("li"),Zle=a("strong"),JTo=o("roberta"),YTo=o(" \u2014 "),kN=a("a"),KTo=o("RobertaForCausalLM"),ZTo=o(" (RoBERTa model)"),e7o=l(),Q_=a("li"),eie=a("strong"),o7o=o("roformer"),r7o=o(" \u2014 "),SN=a("a"),t7o=o("RoFormerForCausalLM"),a7o=o(" (RoFormer model)"),n7o=l(),W_=a("li"),oie=a("strong"),s7o=o("speech_to_text_2"),l7o=o(" \u2014 "),RN=a("a"),i7o=o("Speech2Text2ForCausalLM"),d7o=o(" (Speech2Text2 model)"),c7o=l(),H_=a("li"),rie=a("strong"),f7o=o("transfo-xl"),m7o=o(" \u2014 "),BN=a("a"),g7o=o("TransfoXLLMHeadModel"),h7o=o(" (Transformer-XL model)"),p7o=l(),U_=a("li"),tie=a("strong"),u7o=o("trocr"),_7o=o(" \u2014 "),PN=a("a"),b7o=o("TrOCRForCausalLM"),v7o=o(" (TrOCR model)"),F7o=l(),J_=a("li"),aie=a("strong"),T7o=o("xglm"),M7o=o(" \u2014 "),IN=a("a"),E7o=o("XGLMForCausalLM"),C7o=o(" (XGLM model)"),w7o=l(),Y_=a("li"),nie=a("strong"),A7o=o("xlm"),y7o=o(" \u2014 "),qN=a("a"),L7o=o("XLMWithLMHeadModel"),x7o=o(" (XLM model)"),$7o=l(),K_=a("li"),sie=a("strong"),k7o=o("xlm-prophetnet"),S7o=o(" \u2014 "),NN=a("a"),R7o=o("XLMProphetNetForCausalLM"),B7o=o(" (XLMProphetNet model)"),P7o=l(),Z_=a("li"),lie=a("strong"),I7o=o("xlm-roberta"),q7o=o(" \u2014 "),jN=a("a"),N7o=o("XLMRobertaForCausalLM"),j7o=o(" (XLM-RoBERTa model)"),D7o=l(),e1=a("li"),iie=a("strong"),G7o=o("xlm-roberta-xl"),O7o=o(" \u2014 "),DN=a("a"),V7o=o("XLMRobertaXLForCausalLM"),X7o=o(" (XLM-RoBERTa-XL model)"),z7o=l(),o1=a("li"),die=a("strong"),Q7o=o("xlnet"),W7o=o(" \u2014 "),GN=a("a"),H7o=o("XLNetLMHeadModel"),U7o=o(" (XLNet model)"),J7o=l(),r1=a("p"),Y7o=o("The model is set in evaluation mode by default using "),cie=a("code"),K7o=o("model.eval()"),Z7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),eMo=o("model.train()"),oMo=l(),F(t1.$$.fragment),APe=l(),$i=a("h2"),a1=a("a"),mie=a("span"),F(x6.$$.fragment),rMo=l(),gie=a("span"),tMo=o("AutoModelForMaskedLM"),yPe=l(),ko=a("div"),F($6.$$.fragment),aMo=l(),ki=a("p"),nMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=a("a"),sMo=o("from_pretrained()"),lMo=o(" class method or the "),VN=a("a"),iMo=o("from_config()"),dMo=o(` class
method.`),cMo=l(),k6=a("p"),fMo=o("This class cannot be instantiated directly using "),hie=a("code"),mMo=o("__init__()"),gMo=o(" (throws an error)."),hMo=l(),at=a("div"),F(S6.$$.fragment),pMo=l(),pie=a("p"),uMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mo=l(),Si=a("p"),bMo=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),vMo=o("not"),FMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),TMo=o("from_pretrained()"),MMo=o(" to load the model weights."),EMo=l(),F(n1.$$.fragment),CMo=l(),Ye=a("div"),F(R6.$$.fragment),wMo=l(),_ie=a("p"),AMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yMo=l(),xa=a("p"),LMo=o("The model class to instantiate is selected based on the "),bie=a("code"),xMo=o("model_type"),$Mo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),kMo=o("pretrained_model_name_or_path"),SMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),RMo=o("pretrained_model_name_or_path"),BMo=o(":"),PMo=l(),Q=a("ul"),s1=a("li"),Tie=a("strong"),IMo=o("albert"),qMo=o(" \u2014 "),zN=a("a"),NMo=o("AlbertForMaskedLM"),jMo=o(" (ALBERT model)"),DMo=l(),l1=a("li"),Mie=a("strong"),GMo=o("bart"),OMo=o(" \u2014 "),QN=a("a"),VMo=o("BartForConditionalGeneration"),XMo=o(" (BART model)"),zMo=l(),i1=a("li"),Eie=a("strong"),QMo=o("bert"),WMo=o(" \u2014 "),WN=a("a"),HMo=o("BertForMaskedLM"),UMo=o(" (BERT model)"),JMo=l(),d1=a("li"),Cie=a("strong"),YMo=o("big_bird"),KMo=o(" \u2014 "),HN=a("a"),ZMo=o("BigBirdForMaskedLM"),eEo=o(" (BigBird model)"),oEo=l(),c1=a("li"),wie=a("strong"),rEo=o("camembert"),tEo=o(" \u2014 "),UN=a("a"),aEo=o("CamembertForMaskedLM"),nEo=o(" (CamemBERT model)"),sEo=l(),f1=a("li"),Aie=a("strong"),lEo=o("convbert"),iEo=o(" \u2014 "),JN=a("a"),dEo=o("ConvBertForMaskedLM"),cEo=o(" (ConvBERT model)"),fEo=l(),m1=a("li"),yie=a("strong"),mEo=o("data2vec-text"),gEo=o(" \u2014 "),YN=a("a"),hEo=o("Data2VecTextForMaskedLM"),pEo=o(" (Data2VecText model)"),uEo=l(),g1=a("li"),Lie=a("strong"),_Eo=o("deberta"),bEo=o(" \u2014 "),KN=a("a"),vEo=o("DebertaForMaskedLM"),FEo=o(" (DeBERTa model)"),TEo=l(),h1=a("li"),xie=a("strong"),MEo=o("deberta-v2"),EEo=o(" \u2014 "),ZN=a("a"),CEo=o("DebertaV2ForMaskedLM"),wEo=o(" (DeBERTa-v2 model)"),AEo=l(),p1=a("li"),$ie=a("strong"),yEo=o("distilbert"),LEo=o(" \u2014 "),ej=a("a"),xEo=o("DistilBertForMaskedLM"),$Eo=o(" (DistilBERT model)"),kEo=l(),u1=a("li"),kie=a("strong"),SEo=o("electra"),REo=o(" \u2014 "),oj=a("a"),BEo=o("ElectraForMaskedLM"),PEo=o(" (ELECTRA model)"),IEo=l(),_1=a("li"),Sie=a("strong"),qEo=o("flaubert"),NEo=o(" \u2014 "),rj=a("a"),jEo=o("FlaubertWithLMHeadModel"),DEo=o(" (FlauBERT model)"),GEo=l(),b1=a("li"),Rie=a("strong"),OEo=o("fnet"),VEo=o(" \u2014 "),tj=a("a"),XEo=o("FNetForMaskedLM"),zEo=o(" (FNet model)"),QEo=l(),v1=a("li"),Bie=a("strong"),WEo=o("funnel"),HEo=o(" \u2014 "),aj=a("a"),UEo=o("FunnelForMaskedLM"),JEo=o(" (Funnel Transformer model)"),YEo=l(),F1=a("li"),Pie=a("strong"),KEo=o("ibert"),ZEo=o(" \u2014 "),nj=a("a"),eCo=o("IBertForMaskedLM"),oCo=o(" (I-BERT model)"),rCo=l(),T1=a("li"),Iie=a("strong"),tCo=o("layoutlm"),aCo=o(" \u2014 "),sj=a("a"),nCo=o("LayoutLMForMaskedLM"),sCo=o(" (LayoutLM model)"),lCo=l(),M1=a("li"),qie=a("strong"),iCo=o("longformer"),dCo=o(" \u2014 "),lj=a("a"),cCo=o("LongformerForMaskedLM"),fCo=o(" (Longformer model)"),mCo=l(),E1=a("li"),Nie=a("strong"),gCo=o("mbart"),hCo=o(" \u2014 "),ij=a("a"),pCo=o("MBartForConditionalGeneration"),uCo=o(" (mBART model)"),_Co=l(),C1=a("li"),jie=a("strong"),bCo=o("megatron-bert"),vCo=o(" \u2014 "),dj=a("a"),FCo=o("MegatronBertForMaskedLM"),TCo=o(" (MegatronBert model)"),MCo=l(),w1=a("li"),Die=a("strong"),ECo=o("mobilebert"),CCo=o(" \u2014 "),cj=a("a"),wCo=o("MobileBertForMaskedLM"),ACo=o(" (MobileBERT model)"),yCo=l(),A1=a("li"),Gie=a("strong"),LCo=o("mpnet"),xCo=o(" \u2014 "),fj=a("a"),$Co=o("MPNetForMaskedLM"),kCo=o(" (MPNet model)"),SCo=l(),y1=a("li"),Oie=a("strong"),RCo=o("nystromformer"),BCo=o(" \u2014 "),mj=a("a"),PCo=o("NystromformerForMaskedLM"),ICo=o(" (Nystromformer model)"),qCo=l(),L1=a("li"),Vie=a("strong"),NCo=o("perceiver"),jCo=o(" \u2014 "),gj=a("a"),DCo=o("PerceiverForMaskedLM"),GCo=o(" (Perceiver model)"),OCo=l(),x1=a("li"),Xie=a("strong"),VCo=o("qdqbert"),XCo=o(" \u2014 "),hj=a("a"),zCo=o("QDQBertForMaskedLM"),QCo=o(" (QDQBert model)"),WCo=l(),$1=a("li"),zie=a("strong"),HCo=o("reformer"),UCo=o(" \u2014 "),pj=a("a"),JCo=o("ReformerForMaskedLM"),YCo=o(" (Reformer model)"),KCo=l(),k1=a("li"),Qie=a("strong"),ZCo=o("rembert"),e3o=o(" \u2014 "),uj=a("a"),o3o=o("RemBertForMaskedLM"),r3o=o(" (RemBERT model)"),t3o=l(),S1=a("li"),Wie=a("strong"),a3o=o("roberta"),n3o=o(" \u2014 "),_j=a("a"),s3o=o("RobertaForMaskedLM"),l3o=o(" (RoBERTa model)"),i3o=l(),R1=a("li"),Hie=a("strong"),d3o=o("roformer"),c3o=o(" \u2014 "),bj=a("a"),f3o=o("RoFormerForMaskedLM"),m3o=o(" (RoFormer model)"),g3o=l(),B1=a("li"),Uie=a("strong"),h3o=o("squeezebert"),p3o=o(" \u2014 "),vj=a("a"),u3o=o("SqueezeBertForMaskedLM"),_3o=o(" (SqueezeBERT model)"),b3o=l(),P1=a("li"),Jie=a("strong"),v3o=o("tapas"),F3o=o(" \u2014 "),Fj=a("a"),T3o=o("TapasForMaskedLM"),M3o=o(" (TAPAS model)"),E3o=l(),I1=a("li"),Yie=a("strong"),C3o=o("wav2vec2"),w3o=o(" \u2014 "),Kie=a("code"),A3o=o("Wav2Vec2ForMaskedLM"),y3o=o(" (Wav2Vec2 model)"),L3o=l(),q1=a("li"),Zie=a("strong"),x3o=o("xlm"),$3o=o(" \u2014 "),Tj=a("a"),k3o=o("XLMWithLMHeadModel"),S3o=o(" (XLM model)"),R3o=l(),N1=a("li"),ede=a("strong"),B3o=o("xlm-roberta"),P3o=o(" \u2014 "),Mj=a("a"),I3o=o("XLMRobertaForMaskedLM"),q3o=o(" (XLM-RoBERTa model)"),N3o=l(),j1=a("li"),ode=a("strong"),j3o=o("xlm-roberta-xl"),D3o=o(" \u2014 "),Ej=a("a"),G3o=o("XLMRobertaXLForMaskedLM"),O3o=o(" (XLM-RoBERTa-XL model)"),V3o=l(),D1=a("li"),rde=a("strong"),X3o=o("yoso"),z3o=o(" \u2014 "),Cj=a("a"),Q3o=o("YosoForMaskedLM"),W3o=o(" (YOSO model)"),H3o=l(),G1=a("p"),U3o=o("The model is set in evaluation mode by default using "),tde=a("code"),J3o=o("model.eval()"),Y3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),K3o=o("model.train()"),Z3o=l(),F(O1.$$.fragment),LPe=l(),Ri=a("h2"),V1=a("a"),nde=a("span"),F(B6.$$.fragment),ewo=l(),sde=a("span"),owo=o("AutoModelForSeq2SeqLM"),xPe=l(),So=a("div"),F(P6.$$.fragment),rwo=l(),Bi=a("p"),two=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=a("a"),awo=o("from_pretrained()"),nwo=o(" class method or the "),Aj=a("a"),swo=o("from_config()"),lwo=o(` class
method.`),iwo=l(),I6=a("p"),dwo=o("This class cannot be instantiated directly using "),lde=a("code"),cwo=o("__init__()"),fwo=o(" (throws an error)."),mwo=l(),nt=a("div"),F(q6.$$.fragment),gwo=l(),ide=a("p"),hwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pwo=l(),Pi=a("p"),uwo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),_wo=o("not"),bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),vwo=o("from_pretrained()"),Fwo=o(" to load the model weights."),Two=l(),F(X1.$$.fragment),Mwo=l(),Ke=a("div"),F(N6.$$.fragment),Ewo=l(),cde=a("p"),Cwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wwo=l(),$a=a("p"),Awo=o("The model class to instantiate is selected based on the "),fde=a("code"),ywo=o("model_type"),Lwo=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),xwo=o("pretrained_model_name_or_path"),$wo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),kwo=o("pretrained_model_name_or_path"),Swo=o(":"),Rwo=l(),he=a("ul"),z1=a("li"),hde=a("strong"),Bwo=o("bart"),Pwo=o(" \u2014 "),Lj=a("a"),Iwo=o("BartForConditionalGeneration"),qwo=o(" (BART model)"),Nwo=l(),Q1=a("li"),pde=a("strong"),jwo=o("bigbird_pegasus"),Dwo=o(" \u2014 "),xj=a("a"),Gwo=o("BigBirdPegasusForConditionalGeneration"),Owo=o(" (BigBirdPegasus model)"),Vwo=l(),W1=a("li"),ude=a("strong"),Xwo=o("blenderbot"),zwo=o(" \u2014 "),$j=a("a"),Qwo=o("BlenderbotForConditionalGeneration"),Wwo=o(" (Blenderbot model)"),Hwo=l(),H1=a("li"),_de=a("strong"),Uwo=o("blenderbot-small"),Jwo=o(" \u2014 "),kj=a("a"),Ywo=o("BlenderbotSmallForConditionalGeneration"),Kwo=o(" (BlenderbotSmall model)"),Zwo=l(),U1=a("li"),bde=a("strong"),eAo=o("encoder-decoder"),oAo=o(" \u2014 "),Sj=a("a"),rAo=o("EncoderDecoderModel"),tAo=o(" (Encoder decoder model)"),aAo=l(),J1=a("li"),vde=a("strong"),nAo=o("fsmt"),sAo=o(" \u2014 "),Rj=a("a"),lAo=o("FSMTForConditionalGeneration"),iAo=o(" (FairSeq Machine-Translation model)"),dAo=l(),Y1=a("li"),Fde=a("strong"),cAo=o("led"),fAo=o(" \u2014 "),Bj=a("a"),mAo=o("LEDForConditionalGeneration"),gAo=o(" (LED model)"),hAo=l(),K1=a("li"),Tde=a("strong"),pAo=o("m2m_100"),uAo=o(" \u2014 "),Pj=a("a"),_Ao=o("M2M100ForConditionalGeneration"),bAo=o(" (M2M100 model)"),vAo=l(),Z1=a("li"),Mde=a("strong"),FAo=o("marian"),TAo=o(" \u2014 "),Ij=a("a"),MAo=o("MarianMTModel"),EAo=o(" (Marian model)"),CAo=l(),eb=a("li"),Ede=a("strong"),wAo=o("mbart"),AAo=o(" \u2014 "),qj=a("a"),yAo=o("MBartForConditionalGeneration"),LAo=o(" (mBART model)"),xAo=l(),ob=a("li"),Cde=a("strong"),$Ao=o("mt5"),kAo=o(" \u2014 "),Nj=a("a"),SAo=o("MT5ForConditionalGeneration"),RAo=o(" (mT5 model)"),BAo=l(),rb=a("li"),wde=a("strong"),PAo=o("pegasus"),IAo=o(" \u2014 "),jj=a("a"),qAo=o("PegasusForConditionalGeneration"),NAo=o(" (Pegasus model)"),jAo=l(),tb=a("li"),Ade=a("strong"),DAo=o("plbart"),GAo=o(" \u2014 "),Dj=a("a"),OAo=o("PLBartForConditionalGeneration"),VAo=o(" (PLBart model)"),XAo=l(),ab=a("li"),yde=a("strong"),zAo=o("prophetnet"),QAo=o(" \u2014 "),Gj=a("a"),WAo=o("ProphetNetForConditionalGeneration"),HAo=o(" (ProphetNet model)"),UAo=l(),nb=a("li"),Lde=a("strong"),JAo=o("t5"),YAo=o(" \u2014 "),Oj=a("a"),KAo=o("T5ForConditionalGeneration"),ZAo=o(" (T5 model)"),e6o=l(),sb=a("li"),xde=a("strong"),o6o=o("tapex"),r6o=o(" \u2014 "),Vj=a("a"),t6o=o("BartForConditionalGeneration"),a6o=o(" (TAPEX model)"),n6o=l(),lb=a("li"),$de=a("strong"),s6o=o("xlm-prophetnet"),l6o=o(" \u2014 "),Xj=a("a"),i6o=o("XLMProphetNetForConditionalGeneration"),d6o=o(" (XLMProphetNet model)"),c6o=l(),ib=a("p"),f6o=o("The model is set in evaluation mode by default using "),kde=a("code"),m6o=o("model.eval()"),g6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),h6o=o("model.train()"),p6o=l(),F(db.$$.fragment),$Pe=l(),Ii=a("h2"),cb=a("a"),Rde=a("span"),F(j6.$$.fragment),u6o=l(),Bde=a("span"),_6o=o("AutoModelForSequenceClassification"),kPe=l(),Ro=a("div"),F(D6.$$.fragment),b6o=l(),qi=a("p"),v6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=a("a"),F6o=o("from_pretrained()"),T6o=o(" class method or the "),Qj=a("a"),M6o=o("from_config()"),E6o=o(` class
method.`),C6o=l(),G6=a("p"),w6o=o("This class cannot be instantiated directly using "),Pde=a("code"),A6o=o("__init__()"),y6o=o(" (throws an error)."),L6o=l(),st=a("div"),F(O6.$$.fragment),x6o=l(),Ide=a("p"),$6o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k6o=l(),Ni=a("p"),S6o=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),R6o=o("not"),B6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),P6o=o("from_pretrained()"),I6o=o(" to load the model weights."),q6o=l(),F(fb.$$.fragment),N6o=l(),Ze=a("div"),F(V6.$$.fragment),j6o=l(),Nde=a("p"),D6o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G6o=l(),ka=a("p"),O6o=o("The model class to instantiate is selected based on the "),jde=a("code"),V6o=o("model_type"),X6o=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),z6o=o("pretrained_model_name_or_path"),Q6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),W6o=o("pretrained_model_name_or_path"),H6o=o(":"),U6o=l(),q=a("ul"),mb=a("li"),Ode=a("strong"),J6o=o("albert"),Y6o=o(" \u2014 "),Hj=a("a"),K6o=o("AlbertForSequenceClassification"),Z6o=o(" (ALBERT model)"),eyo=l(),gb=a("li"),Vde=a("strong"),oyo=o("bart"),ryo=o(" \u2014 "),Uj=a("a"),tyo=o("BartForSequenceClassification"),ayo=o(" (BART model)"),nyo=l(),hb=a("li"),Xde=a("strong"),syo=o("bert"),lyo=o(" \u2014 "),Jj=a("a"),iyo=o("BertForSequenceClassification"),dyo=o(" (BERT model)"),cyo=l(),pb=a("li"),zde=a("strong"),fyo=o("big_bird"),myo=o(" \u2014 "),Yj=a("a"),gyo=o("BigBirdForSequenceClassification"),hyo=o(" (BigBird model)"),pyo=l(),ub=a("li"),Qde=a("strong"),uyo=o("bigbird_pegasus"),_yo=o(" \u2014 "),Kj=a("a"),byo=o("BigBirdPegasusForSequenceClassification"),vyo=o(" (BigBirdPegasus model)"),Fyo=l(),_b=a("li"),Wde=a("strong"),Tyo=o("camembert"),Myo=o(" \u2014 "),Zj=a("a"),Eyo=o("CamembertForSequenceClassification"),Cyo=o(" (CamemBERT model)"),wyo=l(),bb=a("li"),Hde=a("strong"),Ayo=o("canine"),yyo=o(" \u2014 "),eD=a("a"),Lyo=o("CanineForSequenceClassification"),xyo=o(" (Canine model)"),$yo=l(),vb=a("li"),Ude=a("strong"),kyo=o("convbert"),Syo=o(" \u2014 "),oD=a("a"),Ryo=o("ConvBertForSequenceClassification"),Byo=o(" (ConvBERT model)"),Pyo=l(),Fb=a("li"),Jde=a("strong"),Iyo=o("ctrl"),qyo=o(" \u2014 "),rD=a("a"),Nyo=o("CTRLForSequenceClassification"),jyo=o(" (CTRL model)"),Dyo=l(),Tb=a("li"),Yde=a("strong"),Gyo=o("data2vec-text"),Oyo=o(" \u2014 "),tD=a("a"),Vyo=o("Data2VecTextForSequenceClassification"),Xyo=o(" (Data2VecText model)"),zyo=l(),Mb=a("li"),Kde=a("strong"),Qyo=o("deberta"),Wyo=o(" \u2014 "),aD=a("a"),Hyo=o("DebertaForSequenceClassification"),Uyo=o(" (DeBERTa model)"),Jyo=l(),Eb=a("li"),Zde=a("strong"),Yyo=o("deberta-v2"),Kyo=o(" \u2014 "),nD=a("a"),Zyo=o("DebertaV2ForSequenceClassification"),eLo=o(" (DeBERTa-v2 model)"),oLo=l(),Cb=a("li"),ece=a("strong"),rLo=o("distilbert"),tLo=o(" \u2014 "),sD=a("a"),aLo=o("DistilBertForSequenceClassification"),nLo=o(" (DistilBERT model)"),sLo=l(),wb=a("li"),oce=a("strong"),lLo=o("electra"),iLo=o(" \u2014 "),lD=a("a"),dLo=o("ElectraForSequenceClassification"),cLo=o(" (ELECTRA model)"),fLo=l(),Ab=a("li"),rce=a("strong"),mLo=o("flaubert"),gLo=o(" \u2014 "),iD=a("a"),hLo=o("FlaubertForSequenceClassification"),pLo=o(" (FlauBERT model)"),uLo=l(),yb=a("li"),tce=a("strong"),_Lo=o("fnet"),bLo=o(" \u2014 "),dD=a("a"),vLo=o("FNetForSequenceClassification"),FLo=o(" (FNet model)"),TLo=l(),Lb=a("li"),ace=a("strong"),MLo=o("funnel"),ELo=o(" \u2014 "),cD=a("a"),CLo=o("FunnelForSequenceClassification"),wLo=o(" (Funnel Transformer model)"),ALo=l(),xb=a("li"),nce=a("strong"),yLo=o("gpt2"),LLo=o(" \u2014 "),fD=a("a"),xLo=o("GPT2ForSequenceClassification"),$Lo=o(" (OpenAI GPT-2 model)"),kLo=l(),$b=a("li"),sce=a("strong"),SLo=o("gpt_neo"),RLo=o(" \u2014 "),mD=a("a"),BLo=o("GPTNeoForSequenceClassification"),PLo=o(" (GPT Neo model)"),ILo=l(),kb=a("li"),lce=a("strong"),qLo=o("gptj"),NLo=o(" \u2014 "),gD=a("a"),jLo=o("GPTJForSequenceClassification"),DLo=o(" (GPT-J model)"),GLo=l(),Sb=a("li"),ice=a("strong"),OLo=o("ibert"),VLo=o(" \u2014 "),hD=a("a"),XLo=o("IBertForSequenceClassification"),zLo=o(" (I-BERT model)"),QLo=l(),Rb=a("li"),dce=a("strong"),WLo=o("layoutlm"),HLo=o(" \u2014 "),pD=a("a"),ULo=o("LayoutLMForSequenceClassification"),JLo=o(" (LayoutLM model)"),YLo=l(),Bb=a("li"),cce=a("strong"),KLo=o("layoutlmv2"),ZLo=o(" \u2014 "),uD=a("a"),e8o=o("LayoutLMv2ForSequenceClassification"),o8o=o(" (LayoutLMv2 model)"),r8o=l(),Pb=a("li"),fce=a("strong"),t8o=o("led"),a8o=o(" \u2014 "),_D=a("a"),n8o=o("LEDForSequenceClassification"),s8o=o(" (LED model)"),l8o=l(),Ib=a("li"),mce=a("strong"),i8o=o("longformer"),d8o=o(" \u2014 "),bD=a("a"),c8o=o("LongformerForSequenceClassification"),f8o=o(" (Longformer model)"),m8o=l(),qb=a("li"),gce=a("strong"),g8o=o("mbart"),h8o=o(" \u2014 "),vD=a("a"),p8o=o("MBartForSequenceClassification"),u8o=o(" (mBART model)"),_8o=l(),Nb=a("li"),hce=a("strong"),b8o=o("megatron-bert"),v8o=o(" \u2014 "),FD=a("a"),F8o=o("MegatronBertForSequenceClassification"),T8o=o(" (MegatronBert model)"),M8o=l(),jb=a("li"),pce=a("strong"),E8o=o("mobilebert"),C8o=o(" \u2014 "),TD=a("a"),w8o=o("MobileBertForSequenceClassification"),A8o=o(" (MobileBERT model)"),y8o=l(),Db=a("li"),uce=a("strong"),L8o=o("mpnet"),x8o=o(" \u2014 "),MD=a("a"),$8o=o("MPNetForSequenceClassification"),k8o=o(" (MPNet model)"),S8o=l(),Gb=a("li"),_ce=a("strong"),R8o=o("nystromformer"),B8o=o(" \u2014 "),ED=a("a"),P8o=o("NystromformerForSequenceClassification"),I8o=o(" (Nystromformer model)"),q8o=l(),Ob=a("li"),bce=a("strong"),N8o=o("openai-gpt"),j8o=o(" \u2014 "),CD=a("a"),D8o=o("OpenAIGPTForSequenceClassification"),G8o=o(" (OpenAI GPT model)"),O8o=l(),Vb=a("li"),vce=a("strong"),V8o=o("perceiver"),X8o=o(" \u2014 "),wD=a("a"),z8o=o("PerceiverForSequenceClassification"),Q8o=o(" (Perceiver model)"),W8o=l(),Xb=a("li"),Fce=a("strong"),H8o=o("plbart"),U8o=o(" \u2014 "),AD=a("a"),J8o=o("PLBartForSequenceClassification"),Y8o=o(" (PLBart model)"),K8o=l(),zb=a("li"),Tce=a("strong"),Z8o=o("qdqbert"),exo=o(" \u2014 "),yD=a("a"),oxo=o("QDQBertForSequenceClassification"),rxo=o(" (QDQBert model)"),txo=l(),Qb=a("li"),Mce=a("strong"),axo=o("reformer"),nxo=o(" \u2014 "),LD=a("a"),sxo=o("ReformerForSequenceClassification"),lxo=o(" (Reformer model)"),ixo=l(),Wb=a("li"),Ece=a("strong"),dxo=o("rembert"),cxo=o(" \u2014 "),xD=a("a"),fxo=o("RemBertForSequenceClassification"),mxo=o(" (RemBERT model)"),gxo=l(),Hb=a("li"),Cce=a("strong"),hxo=o("roberta"),pxo=o(" \u2014 "),$D=a("a"),uxo=o("RobertaForSequenceClassification"),_xo=o(" (RoBERTa model)"),bxo=l(),Ub=a("li"),wce=a("strong"),vxo=o("roformer"),Fxo=o(" \u2014 "),kD=a("a"),Txo=o("RoFormerForSequenceClassification"),Mxo=o(" (RoFormer model)"),Exo=l(),Jb=a("li"),Ace=a("strong"),Cxo=o("squeezebert"),wxo=o(" \u2014 "),SD=a("a"),Axo=o("SqueezeBertForSequenceClassification"),yxo=o(" (SqueezeBERT model)"),Lxo=l(),Yb=a("li"),yce=a("strong"),xxo=o("tapas"),$xo=o(" \u2014 "),RD=a("a"),kxo=o("TapasForSequenceClassification"),Sxo=o(" (TAPAS model)"),Rxo=l(),Kb=a("li"),Lce=a("strong"),Bxo=o("tapex"),Pxo=o(" \u2014 "),BD=a("a"),Ixo=o("BartForSequenceClassification"),qxo=o(" (TAPEX model)"),Nxo=l(),Zb=a("li"),xce=a("strong"),jxo=o("transfo-xl"),Dxo=o(" \u2014 "),PD=a("a"),Gxo=o("TransfoXLForSequenceClassification"),Oxo=o(" (Transformer-XL model)"),Vxo=l(),e4=a("li"),$ce=a("strong"),Xxo=o("xlm"),zxo=o(" \u2014 "),ID=a("a"),Qxo=o("XLMForSequenceClassification"),Wxo=o(" (XLM model)"),Hxo=l(),o4=a("li"),kce=a("strong"),Uxo=o("xlm-roberta"),Jxo=o(" \u2014 "),qD=a("a"),Yxo=o("XLMRobertaForSequenceClassification"),Kxo=o(" (XLM-RoBERTa model)"),Zxo=l(),r4=a("li"),Sce=a("strong"),e9o=o("xlm-roberta-xl"),o9o=o(" \u2014 "),ND=a("a"),r9o=o("XLMRobertaXLForSequenceClassification"),t9o=o(" (XLM-RoBERTa-XL model)"),a9o=l(),t4=a("li"),Rce=a("strong"),n9o=o("xlnet"),s9o=o(" \u2014 "),jD=a("a"),l9o=o("XLNetForSequenceClassification"),i9o=o(" (XLNet model)"),d9o=l(),a4=a("li"),Bce=a("strong"),c9o=o("yoso"),f9o=o(" \u2014 "),DD=a("a"),m9o=o("YosoForSequenceClassification"),g9o=o(" (YOSO model)"),h9o=l(),n4=a("p"),p9o=o("The model is set in evaluation mode by default using "),Pce=a("code"),u9o=o("model.eval()"),_9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),b9o=o("model.train()"),v9o=l(),F(s4.$$.fragment),SPe=l(),ji=a("h2"),l4=a("a"),qce=a("span"),F(X6.$$.fragment),F9o=l(),Nce=a("span"),T9o=o("AutoModelForMultipleChoice"),RPe=l(),Bo=a("div"),F(z6.$$.fragment),M9o=l(),Di=a("p"),E9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=a("a"),C9o=o("from_pretrained()"),w9o=o(" class method or the "),OD=a("a"),A9o=o("from_config()"),y9o=o(` class
method.`),L9o=l(),Q6=a("p"),x9o=o("This class cannot be instantiated directly using "),jce=a("code"),$9o=o("__init__()"),k9o=o(" (throws an error)."),S9o=l(),lt=a("div"),F(W6.$$.fragment),R9o=l(),Dce=a("p"),B9o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P9o=l(),Gi=a("p"),I9o=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),q9o=o("not"),N9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),j9o=o("from_pretrained()"),D9o=o(" to load the model weights."),G9o=l(),F(i4.$$.fragment),O9o=l(),eo=a("div"),F(H6.$$.fragment),V9o=l(),Oce=a("p"),X9o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z9o=l(),Sa=a("p"),Q9o=o("The model class to instantiate is selected based on the "),Vce=a("code"),W9o=o("model_type"),H9o=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),U9o=o("pretrained_model_name_or_path"),J9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),Y9o=o("pretrained_model_name_or_path"),K9o=o(":"),Z9o=l(),Y=a("ul"),d4=a("li"),Qce=a("strong"),e$o=o("albert"),o$o=o(" \u2014 "),XD=a("a"),r$o=o("AlbertForMultipleChoice"),t$o=o(" (ALBERT model)"),a$o=l(),c4=a("li"),Wce=a("strong"),n$o=o("bert"),s$o=o(" \u2014 "),zD=a("a"),l$o=o("BertForMultipleChoice"),i$o=o(" (BERT model)"),d$o=l(),f4=a("li"),Hce=a("strong"),c$o=o("big_bird"),f$o=o(" \u2014 "),QD=a("a"),m$o=o("BigBirdForMultipleChoice"),g$o=o(" (BigBird model)"),h$o=l(),m4=a("li"),Uce=a("strong"),p$o=o("camembert"),u$o=o(" \u2014 "),WD=a("a"),_$o=o("CamembertForMultipleChoice"),b$o=o(" (CamemBERT model)"),v$o=l(),g4=a("li"),Jce=a("strong"),F$o=o("canine"),T$o=o(" \u2014 "),HD=a("a"),M$o=o("CanineForMultipleChoice"),E$o=o(" (Canine model)"),C$o=l(),h4=a("li"),Yce=a("strong"),w$o=o("convbert"),A$o=o(" \u2014 "),UD=a("a"),y$o=o("ConvBertForMultipleChoice"),L$o=o(" (ConvBERT model)"),x$o=l(),p4=a("li"),Kce=a("strong"),$$o=o("data2vec-text"),k$o=o(" \u2014 "),JD=a("a"),S$o=o("Data2VecTextForMultipleChoice"),R$o=o(" (Data2VecText model)"),B$o=l(),u4=a("li"),Zce=a("strong"),P$o=o("deberta-v2"),I$o=o(" \u2014 "),YD=a("a"),q$o=o("DebertaV2ForMultipleChoice"),N$o=o(" (DeBERTa-v2 model)"),j$o=l(),_4=a("li"),efe=a("strong"),D$o=o("distilbert"),G$o=o(" \u2014 "),KD=a("a"),O$o=o("DistilBertForMultipleChoice"),V$o=o(" (DistilBERT model)"),X$o=l(),b4=a("li"),ofe=a("strong"),z$o=o("electra"),Q$o=o(" \u2014 "),ZD=a("a"),W$o=o("ElectraForMultipleChoice"),H$o=o(" (ELECTRA model)"),U$o=l(),v4=a("li"),rfe=a("strong"),J$o=o("flaubert"),Y$o=o(" \u2014 "),eG=a("a"),K$o=o("FlaubertForMultipleChoice"),Z$o=o(" (FlauBERT model)"),eko=l(),F4=a("li"),tfe=a("strong"),oko=o("fnet"),rko=o(" \u2014 "),oG=a("a"),tko=o("FNetForMultipleChoice"),ako=o(" (FNet model)"),nko=l(),T4=a("li"),afe=a("strong"),sko=o("funnel"),lko=o(" \u2014 "),rG=a("a"),iko=o("FunnelForMultipleChoice"),dko=o(" (Funnel Transformer model)"),cko=l(),M4=a("li"),nfe=a("strong"),fko=o("ibert"),mko=o(" \u2014 "),tG=a("a"),gko=o("IBertForMultipleChoice"),hko=o(" (I-BERT model)"),pko=l(),E4=a("li"),sfe=a("strong"),uko=o("longformer"),_ko=o(" \u2014 "),aG=a("a"),bko=o("LongformerForMultipleChoice"),vko=o(" (Longformer model)"),Fko=l(),C4=a("li"),lfe=a("strong"),Tko=o("megatron-bert"),Mko=o(" \u2014 "),nG=a("a"),Eko=o("MegatronBertForMultipleChoice"),Cko=o(" (MegatronBert model)"),wko=l(),w4=a("li"),ife=a("strong"),Ako=o("mobilebert"),yko=o(" \u2014 "),sG=a("a"),Lko=o("MobileBertForMultipleChoice"),xko=o(" (MobileBERT model)"),$ko=l(),A4=a("li"),dfe=a("strong"),kko=o("mpnet"),Sko=o(" \u2014 "),lG=a("a"),Rko=o("MPNetForMultipleChoice"),Bko=o(" (MPNet model)"),Pko=l(),y4=a("li"),cfe=a("strong"),Iko=o("nystromformer"),qko=o(" \u2014 "),iG=a("a"),Nko=o("NystromformerForMultipleChoice"),jko=o(" (Nystromformer model)"),Dko=l(),L4=a("li"),ffe=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),dG=a("a"),Vko=o("QDQBertForMultipleChoice"),Xko=o(" (QDQBert model)"),zko=l(),x4=a("li"),mfe=a("strong"),Qko=o("rembert"),Wko=o(" \u2014 "),cG=a("a"),Hko=o("RemBertForMultipleChoice"),Uko=o(" (RemBERT model)"),Jko=l(),$4=a("li"),gfe=a("strong"),Yko=o("roberta"),Kko=o(" \u2014 "),fG=a("a"),Zko=o("RobertaForMultipleChoice"),eSo=o(" (RoBERTa model)"),oSo=l(),k4=a("li"),hfe=a("strong"),rSo=o("roformer"),tSo=o(" \u2014 "),mG=a("a"),aSo=o("RoFormerForMultipleChoice"),nSo=o(" (RoFormer model)"),sSo=l(),S4=a("li"),pfe=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),gG=a("a"),dSo=o("SqueezeBertForMultipleChoice"),cSo=o(" (SqueezeBERT model)"),fSo=l(),R4=a("li"),ufe=a("strong"),mSo=o("xlm"),gSo=o(" \u2014 "),hG=a("a"),hSo=o("XLMForMultipleChoice"),pSo=o(" (XLM model)"),uSo=l(),B4=a("li"),_fe=a("strong"),_So=o("xlm-roberta"),bSo=o(" \u2014 "),pG=a("a"),vSo=o("XLMRobertaForMultipleChoice"),FSo=o(" (XLM-RoBERTa model)"),TSo=l(),P4=a("li"),bfe=a("strong"),MSo=o("xlm-roberta-xl"),ESo=o(" \u2014 "),uG=a("a"),CSo=o("XLMRobertaXLForMultipleChoice"),wSo=o(" (XLM-RoBERTa-XL model)"),ASo=l(),I4=a("li"),vfe=a("strong"),ySo=o("xlnet"),LSo=o(" \u2014 "),_G=a("a"),xSo=o("XLNetForMultipleChoice"),$So=o(" (XLNet model)"),kSo=l(),q4=a("li"),Ffe=a("strong"),SSo=o("yoso"),RSo=o(" \u2014 "),bG=a("a"),BSo=o("YosoForMultipleChoice"),PSo=o(" (YOSO model)"),ISo=l(),N4=a("p"),qSo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),NSo=o("model.eval()"),jSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),DSo=o("model.train()"),GSo=l(),F(j4.$$.fragment),BPe=l(),Oi=a("h2"),D4=a("a"),Efe=a("span"),F(U6.$$.fragment),OSo=l(),Cfe=a("span"),VSo=o("AutoModelForNextSentencePrediction"),PPe=l(),Po=a("div"),F(J6.$$.fragment),XSo=l(),Vi=a("p"),zSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vG=a("a"),QSo=o("from_pretrained()"),WSo=o(" class method or the "),FG=a("a"),HSo=o("from_config()"),USo=o(` class
method.`),JSo=l(),Y6=a("p"),YSo=o("This class cannot be instantiated directly using "),wfe=a("code"),KSo=o("__init__()"),ZSo=o(" (throws an error)."),eRo=l(),it=a("div"),F(K6.$$.fragment),oRo=l(),Afe=a("p"),rRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRo=l(),Xi=a("p"),aRo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),nRo=o("not"),sRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),lRo=o("from_pretrained()"),iRo=o(" to load the model weights."),dRo=l(),F(G4.$$.fragment),cRo=l(),oo=a("div"),F(Z6.$$.fragment),fRo=l(),Lfe=a("p"),mRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gRo=l(),Ra=a("p"),hRo=o("The model class to instantiate is selected based on the "),xfe=a("code"),pRo=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),vRo=o("pretrained_model_name_or_path"),FRo=o(":"),TRo=l(),Yr=a("ul"),O4=a("li"),Sfe=a("strong"),MRo=o("bert"),ERo=o(" \u2014 "),MG=a("a"),CRo=o("BertForNextSentencePrediction"),wRo=o(" (BERT model)"),ARo=l(),V4=a("li"),Rfe=a("strong"),yRo=o("fnet"),LRo=o(" \u2014 "),EG=a("a"),xRo=o("FNetForNextSentencePrediction"),$Ro=o(" (FNet model)"),kRo=l(),X4=a("li"),Bfe=a("strong"),SRo=o("megatron-bert"),RRo=o(" \u2014 "),CG=a("a"),BRo=o("MegatronBertForNextSentencePrediction"),PRo=o(" (MegatronBert model)"),IRo=l(),z4=a("li"),Pfe=a("strong"),qRo=o("mobilebert"),NRo=o(" \u2014 "),wG=a("a"),jRo=o("MobileBertForNextSentencePrediction"),DRo=o(" (MobileBERT model)"),GRo=l(),Q4=a("li"),Ife=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),AG=a("a"),XRo=o("QDQBertForNextSentencePrediction"),zRo=o(" (QDQBert model)"),QRo=l(),W4=a("p"),WRo=o("The model is set in evaluation mode by default using "),qfe=a("code"),HRo=o("model.eval()"),URo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),JRo=o("model.train()"),YRo=l(),F(H4.$$.fragment),IPe=l(),zi=a("h2"),U4=a("a"),jfe=a("span"),F(ey.$$.fragment),KRo=l(),Dfe=a("span"),ZRo=o("AutoModelForTokenClassification"),qPe=l(),Io=a("div"),F(oy.$$.fragment),eBo=l(),Qi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),LG=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),ry=a("p"),lBo=o("This class cannot be instantiated directly using "),Gfe=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),dt=a("div"),F(ty.$$.fragment),fBo=l(),Ofe=a("p"),mBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gBo=l(),Wi=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),pBo=o("not"),uBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),_Bo=o("from_pretrained()"),bBo=o(" to load the model weights."),vBo=l(),F(J4.$$.fragment),FBo=l(),ro=a("div"),F(ay.$$.fragment),TBo=l(),Xfe=a("p"),MBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EBo=l(),Ba=a("p"),CBo=o("The model class to instantiate is selected based on the "),zfe=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),U=a("ul"),Y4=a("li"),Hfe=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),$G=a("a"),BBo=o("AlbertForTokenClassification"),PBo=o(" (ALBERT model)"),IBo=l(),K4=a("li"),Ufe=a("strong"),qBo=o("bert"),NBo=o(" \u2014 "),kG=a("a"),jBo=o("BertForTokenClassification"),DBo=o(" (BERT model)"),GBo=l(),Z4=a("li"),Jfe=a("strong"),OBo=o("big_bird"),VBo=o(" \u2014 "),SG=a("a"),XBo=o("BigBirdForTokenClassification"),zBo=o(" (BigBird model)"),QBo=l(),e2=a("li"),Yfe=a("strong"),WBo=o("camembert"),HBo=o(" \u2014 "),RG=a("a"),UBo=o("CamembertForTokenClassification"),JBo=o(" (CamemBERT model)"),YBo=l(),o2=a("li"),Kfe=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),BG=a("a"),ePo=o("CanineForTokenClassification"),oPo=o(" (Canine model)"),rPo=l(),r2=a("li"),Zfe=a("strong"),tPo=o("convbert"),aPo=o(" \u2014 "),PG=a("a"),nPo=o("ConvBertForTokenClassification"),sPo=o(" (ConvBERT model)"),lPo=l(),t2=a("li"),eme=a("strong"),iPo=o("data2vec-text"),dPo=o(" \u2014 "),IG=a("a"),cPo=o("Data2VecTextForTokenClassification"),fPo=o(" (Data2VecText model)"),mPo=l(),a2=a("li"),ome=a("strong"),gPo=o("deberta"),hPo=o(" \u2014 "),qG=a("a"),pPo=o("DebertaForTokenClassification"),uPo=o(" (DeBERTa model)"),_Po=l(),n2=a("li"),rme=a("strong"),bPo=o("deberta-v2"),vPo=o(" \u2014 "),NG=a("a"),FPo=o("DebertaV2ForTokenClassification"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),s2=a("li"),tme=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),jG=a("a"),wPo=o("DistilBertForTokenClassification"),APo=o(" (DistilBERT model)"),yPo=l(),l2=a("li"),ame=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),DG=a("a"),$Po=o("ElectraForTokenClassification"),kPo=o(" (ELECTRA model)"),SPo=l(),i2=a("li"),nme=a("strong"),RPo=o("flaubert"),BPo=o(" \u2014 "),GG=a("a"),PPo=o("FlaubertForTokenClassification"),IPo=o(" (FlauBERT model)"),qPo=l(),d2=a("li"),sme=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),OG=a("a"),DPo=o("FNetForTokenClassification"),GPo=o(" (FNet model)"),OPo=l(),c2=a("li"),lme=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),VG=a("a"),zPo=o("FunnelForTokenClassification"),QPo=o(" (Funnel Transformer model)"),WPo=l(),f2=a("li"),ime=a("strong"),HPo=o("gpt2"),UPo=o(" \u2014 "),XG=a("a"),JPo=o("GPT2ForTokenClassification"),YPo=o(" (OpenAI GPT-2 model)"),KPo=l(),m2=a("li"),dme=a("strong"),ZPo=o("ibert"),eIo=o(" \u2014 "),zG=a("a"),oIo=o("IBertForTokenClassification"),rIo=o(" (I-BERT model)"),tIo=l(),g2=a("li"),cme=a("strong"),aIo=o("layoutlm"),nIo=o(" \u2014 "),QG=a("a"),sIo=o("LayoutLMForTokenClassification"),lIo=o(" (LayoutLM model)"),iIo=l(),h2=a("li"),fme=a("strong"),dIo=o("layoutlmv2"),cIo=o(" \u2014 "),WG=a("a"),fIo=o("LayoutLMv2ForTokenClassification"),mIo=o(" (LayoutLMv2 model)"),gIo=l(),p2=a("li"),mme=a("strong"),hIo=o("longformer"),pIo=o(" \u2014 "),HG=a("a"),uIo=o("LongformerForTokenClassification"),_Io=o(" (Longformer model)"),bIo=l(),u2=a("li"),gme=a("strong"),vIo=o("megatron-bert"),FIo=o(" \u2014 "),UG=a("a"),TIo=o("MegatronBertForTokenClassification"),MIo=o(" (MegatronBert model)"),EIo=l(),_2=a("li"),hme=a("strong"),CIo=o("mobilebert"),wIo=o(" \u2014 "),JG=a("a"),AIo=o("MobileBertForTokenClassification"),yIo=o(" (MobileBERT model)"),LIo=l(),b2=a("li"),pme=a("strong"),xIo=o("mpnet"),$Io=o(" \u2014 "),YG=a("a"),kIo=o("MPNetForTokenClassification"),SIo=o(" (MPNet model)"),RIo=l(),v2=a("li"),ume=a("strong"),BIo=o("nystromformer"),PIo=o(" \u2014 "),KG=a("a"),IIo=o("NystromformerForTokenClassification"),qIo=o(" (Nystromformer model)"),NIo=l(),F2=a("li"),_me=a("strong"),jIo=o("qdqbert"),DIo=o(" \u2014 "),ZG=a("a"),GIo=o("QDQBertForTokenClassification"),OIo=o(" (QDQBert model)"),VIo=l(),T2=a("li"),bme=a("strong"),XIo=o("rembert"),zIo=o(" \u2014 "),eO=a("a"),QIo=o("RemBertForTokenClassification"),WIo=o(" (RemBERT model)"),HIo=l(),M2=a("li"),vme=a("strong"),UIo=o("roberta"),JIo=o(" \u2014 "),oO=a("a"),YIo=o("RobertaForTokenClassification"),KIo=o(" (RoBERTa model)"),ZIo=l(),E2=a("li"),Fme=a("strong"),eqo=o("roformer"),oqo=o(" \u2014 "),rO=a("a"),rqo=o("RoFormerForTokenClassification"),tqo=o(" (RoFormer model)"),aqo=l(),C2=a("li"),Tme=a("strong"),nqo=o("squeezebert"),sqo=o(" \u2014 "),tO=a("a"),lqo=o("SqueezeBertForTokenClassification"),iqo=o(" (SqueezeBERT model)"),dqo=l(),w2=a("li"),Mme=a("strong"),cqo=o("xlm"),fqo=o(" \u2014 "),aO=a("a"),mqo=o("XLMForTokenClassification"),gqo=o(" (XLM model)"),hqo=l(),A2=a("li"),Eme=a("strong"),pqo=o("xlm-roberta"),uqo=o(" \u2014 "),nO=a("a"),_qo=o("XLMRobertaForTokenClassification"),bqo=o(" (XLM-RoBERTa model)"),vqo=l(),y2=a("li"),Cme=a("strong"),Fqo=o("xlm-roberta-xl"),Tqo=o(" \u2014 "),sO=a("a"),Mqo=o("XLMRobertaXLForTokenClassification"),Eqo=o(" (XLM-RoBERTa-XL model)"),Cqo=l(),L2=a("li"),wme=a("strong"),wqo=o("xlnet"),Aqo=o(" \u2014 "),lO=a("a"),yqo=o("XLNetForTokenClassification"),Lqo=o(" (XLNet model)"),xqo=l(),x2=a("li"),Ame=a("strong"),$qo=o("yoso"),kqo=o(" \u2014 "),iO=a("a"),Sqo=o("YosoForTokenClassification"),Rqo=o(" (YOSO model)"),Bqo=l(),$2=a("p"),Pqo=o("The model is set in evaluation mode by default using "),yme=a("code"),Iqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),Nqo=o("model.train()"),jqo=l(),F(k2.$$.fragment),NPe=l(),Hi=a("h2"),S2=a("a"),xme=a("span"),F(ny.$$.fragment),Dqo=l(),$me=a("span"),Gqo=o("AutoModelForQuestionAnswering"),jPe=l(),qo=a("div"),F(sy.$$.fragment),Oqo=l(),Ui=a("p"),Vqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=a("a"),Xqo=o("from_pretrained()"),zqo=o(" class method or the "),cO=a("a"),Qqo=o("from_config()"),Wqo=o(` class
method.`),Hqo=l(),ly=a("p"),Uqo=o("This class cannot be instantiated directly using "),kme=a("code"),Jqo=o("__init__()"),Yqo=o(" (throws an error)."),Kqo=l(),ct=a("div"),F(iy.$$.fragment),Zqo=l(),Sme=a("p"),eNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oNo=l(),Ji=a("p"),rNo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),tNo=o("not"),aNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),nNo=o("from_pretrained()"),sNo=o(" to load the model weights."),lNo=l(),F(R2.$$.fragment),iNo=l(),to=a("div"),F(dy.$$.fragment),dNo=l(),Bme=a("p"),cNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fNo=l(),Pa=a("p"),mNo=o("The model class to instantiate is selected based on the "),Pme=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),pNo=o("pretrained_model_name_or_path"),uNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),_No=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),O=a("ul"),B2=a("li"),Nme=a("strong"),FNo=o("albert"),TNo=o(" \u2014 "),mO=a("a"),MNo=o("AlbertForQuestionAnswering"),ENo=o(" (ALBERT model)"),CNo=l(),P2=a("li"),jme=a("strong"),wNo=o("bart"),ANo=o(" \u2014 "),gO=a("a"),yNo=o("BartForQuestionAnswering"),LNo=o(" (BART model)"),xNo=l(),I2=a("li"),Dme=a("strong"),$No=o("bert"),kNo=o(" \u2014 "),hO=a("a"),SNo=o("BertForQuestionAnswering"),RNo=o(" (BERT model)"),BNo=l(),q2=a("li"),Gme=a("strong"),PNo=o("big_bird"),INo=o(" \u2014 "),pO=a("a"),qNo=o("BigBirdForQuestionAnswering"),NNo=o(" (BigBird model)"),jNo=l(),N2=a("li"),Ome=a("strong"),DNo=o("bigbird_pegasus"),GNo=o(" \u2014 "),uO=a("a"),ONo=o("BigBirdPegasusForQuestionAnswering"),VNo=o(" (BigBirdPegasus model)"),XNo=l(),j2=a("li"),Vme=a("strong"),zNo=o("camembert"),QNo=o(" \u2014 "),_O=a("a"),WNo=o("CamembertForQuestionAnswering"),HNo=o(" (CamemBERT model)"),UNo=l(),D2=a("li"),Xme=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),bO=a("a"),KNo=o("CanineForQuestionAnswering"),ZNo=o(" (Canine model)"),ejo=l(),G2=a("li"),zme=a("strong"),ojo=o("convbert"),rjo=o(" \u2014 "),vO=a("a"),tjo=o("ConvBertForQuestionAnswering"),ajo=o(" (ConvBERT model)"),njo=l(),O2=a("li"),Qme=a("strong"),sjo=o("data2vec-text"),ljo=o(" \u2014 "),FO=a("a"),ijo=o("Data2VecTextForQuestionAnswering"),djo=o(" (Data2VecText model)"),cjo=l(),V2=a("li"),Wme=a("strong"),fjo=o("deberta"),mjo=o(" \u2014 "),TO=a("a"),gjo=o("DebertaForQuestionAnswering"),hjo=o(" (DeBERTa model)"),pjo=l(),X2=a("li"),Hme=a("strong"),ujo=o("deberta-v2"),_jo=o(" \u2014 "),MO=a("a"),bjo=o("DebertaV2ForQuestionAnswering"),vjo=o(" (DeBERTa-v2 model)"),Fjo=l(),z2=a("li"),Ume=a("strong"),Tjo=o("distilbert"),Mjo=o(" \u2014 "),EO=a("a"),Ejo=o("DistilBertForQuestionAnswering"),Cjo=o(" (DistilBERT model)"),wjo=l(),Q2=a("li"),Jme=a("strong"),Ajo=o("electra"),yjo=o(" \u2014 "),CO=a("a"),Ljo=o("ElectraForQuestionAnswering"),xjo=o(" (ELECTRA model)"),$jo=l(),W2=a("li"),Yme=a("strong"),kjo=o("flaubert"),Sjo=o(" \u2014 "),wO=a("a"),Rjo=o("FlaubertForQuestionAnsweringSimple"),Bjo=o(" (FlauBERT model)"),Pjo=l(),H2=a("li"),Kme=a("strong"),Ijo=o("fnet"),qjo=o(" \u2014 "),AO=a("a"),Njo=o("FNetForQuestionAnswering"),jjo=o(" (FNet model)"),Djo=l(),U2=a("li"),Zme=a("strong"),Gjo=o("funnel"),Ojo=o(" \u2014 "),yO=a("a"),Vjo=o("FunnelForQuestionAnswering"),Xjo=o(" (Funnel Transformer model)"),zjo=l(),J2=a("li"),ege=a("strong"),Qjo=o("gptj"),Wjo=o(" \u2014 "),LO=a("a"),Hjo=o("GPTJForQuestionAnswering"),Ujo=o(" (GPT-J model)"),Jjo=l(),Y2=a("li"),oge=a("strong"),Yjo=o("ibert"),Kjo=o(" \u2014 "),xO=a("a"),Zjo=o("IBertForQuestionAnswering"),eDo=o(" (I-BERT model)"),oDo=l(),K2=a("li"),rge=a("strong"),rDo=o("layoutlmv2"),tDo=o(" \u2014 "),$O=a("a"),aDo=o("LayoutLMv2ForQuestionAnswering"),nDo=o(" (LayoutLMv2 model)"),sDo=l(),Z2=a("li"),tge=a("strong"),lDo=o("led"),iDo=o(" \u2014 "),kO=a("a"),dDo=o("LEDForQuestionAnswering"),cDo=o(" (LED model)"),fDo=l(),e5=a("li"),age=a("strong"),mDo=o("longformer"),gDo=o(" \u2014 "),SO=a("a"),hDo=o("LongformerForQuestionAnswering"),pDo=o(" (Longformer model)"),uDo=l(),o5=a("li"),nge=a("strong"),_Do=o("lxmert"),bDo=o(" \u2014 "),RO=a("a"),vDo=o("LxmertForQuestionAnswering"),FDo=o(" (LXMERT model)"),TDo=l(),r5=a("li"),sge=a("strong"),MDo=o("mbart"),EDo=o(" \u2014 "),BO=a("a"),CDo=o("MBartForQuestionAnswering"),wDo=o(" (mBART model)"),ADo=l(),t5=a("li"),lge=a("strong"),yDo=o("megatron-bert"),LDo=o(" \u2014 "),PO=a("a"),xDo=o("MegatronBertForQuestionAnswering"),$Do=o(" (MegatronBert model)"),kDo=l(),a5=a("li"),ige=a("strong"),SDo=o("mobilebert"),RDo=o(" \u2014 "),IO=a("a"),BDo=o("MobileBertForQuestionAnswering"),PDo=o(" (MobileBERT model)"),IDo=l(),n5=a("li"),dge=a("strong"),qDo=o("mpnet"),NDo=o(" \u2014 "),qO=a("a"),jDo=o("MPNetForQuestionAnswering"),DDo=o(" (MPNet model)"),GDo=l(),s5=a("li"),cge=a("strong"),ODo=o("nystromformer"),VDo=o(" \u2014 "),NO=a("a"),XDo=o("NystromformerForQuestionAnswering"),zDo=o(" (Nystromformer model)"),QDo=l(),l5=a("li"),fge=a("strong"),WDo=o("qdqbert"),HDo=o(" \u2014 "),jO=a("a"),UDo=o("QDQBertForQuestionAnswering"),JDo=o(" (QDQBert model)"),YDo=l(),i5=a("li"),mge=a("strong"),KDo=o("reformer"),ZDo=o(" \u2014 "),DO=a("a"),eGo=o("ReformerForQuestionAnswering"),oGo=o(" (Reformer model)"),rGo=l(),d5=a("li"),gge=a("strong"),tGo=o("rembert"),aGo=o(" \u2014 "),GO=a("a"),nGo=o("RemBertForQuestionAnswering"),sGo=o(" (RemBERT model)"),lGo=l(),c5=a("li"),hge=a("strong"),iGo=o("roberta"),dGo=o(" \u2014 "),OO=a("a"),cGo=o("RobertaForQuestionAnswering"),fGo=o(" (RoBERTa model)"),mGo=l(),f5=a("li"),pge=a("strong"),gGo=o("roformer"),hGo=o(" \u2014 "),VO=a("a"),pGo=o("RoFormerForQuestionAnswering"),uGo=o(" (RoFormer model)"),_Go=l(),m5=a("li"),uge=a("strong"),bGo=o("splinter"),vGo=o(" \u2014 "),XO=a("a"),FGo=o("SplinterForQuestionAnswering"),TGo=o(" (Splinter model)"),MGo=l(),g5=a("li"),_ge=a("strong"),EGo=o("squeezebert"),CGo=o(" \u2014 "),zO=a("a"),wGo=o("SqueezeBertForQuestionAnswering"),AGo=o(" (SqueezeBERT model)"),yGo=l(),h5=a("li"),bge=a("strong"),LGo=o("xlm"),xGo=o(" \u2014 "),QO=a("a"),$Go=o("XLMForQuestionAnsweringSimple"),kGo=o(" (XLM model)"),SGo=l(),p5=a("li"),vge=a("strong"),RGo=o("xlm-roberta"),BGo=o(" \u2014 "),WO=a("a"),PGo=o("XLMRobertaForQuestionAnswering"),IGo=o(" (XLM-RoBERTa model)"),qGo=l(),u5=a("li"),Fge=a("strong"),NGo=o("xlm-roberta-xl"),jGo=o(" \u2014 "),HO=a("a"),DGo=o("XLMRobertaXLForQuestionAnswering"),GGo=o(" (XLM-RoBERTa-XL model)"),OGo=l(),_5=a("li"),Tge=a("strong"),VGo=o("xlnet"),XGo=o(" \u2014 "),UO=a("a"),zGo=o("XLNetForQuestionAnsweringSimple"),QGo=o(" (XLNet model)"),WGo=l(),b5=a("li"),Mge=a("strong"),HGo=o("yoso"),UGo=o(" \u2014 "),JO=a("a"),JGo=o("YosoForQuestionAnswering"),YGo=o(" (YOSO model)"),KGo=l(),v5=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Ege=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),rOo=o("model.train()"),tOo=l(),F(F5.$$.fragment),DPe=l(),Yi=a("h2"),T5=a("a"),wge=a("span"),F(cy.$$.fragment),aOo=l(),Age=a("span"),nOo=o("AutoModelForTableQuestionAnswering"),GPe=l(),No=a("div"),F(fy.$$.fragment),sOo=l(),Ki=a("p"),lOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=a("a"),iOo=o("from_pretrained()"),dOo=o(" class method or the "),KO=a("a"),cOo=o("from_config()"),fOo=o(` class
method.`),mOo=l(),my=a("p"),gOo=o("This class cannot be instantiated directly using "),yge=a("code"),hOo=o("__init__()"),pOo=o(" (throws an error)."),uOo=l(),ft=a("div"),F(gy.$$.fragment),_Oo=l(),Lge=a("p"),bOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vOo=l(),Zi=a("p"),FOo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),TOo=o("not"),MOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),EOo=o("from_pretrained()"),COo=o(" to load the model weights."),wOo=l(),F(M5.$$.fragment),AOo=l(),ao=a("div"),F(hy.$$.fragment),yOo=l(),$ge=a("p"),LOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xOo=l(),Ia=a("p"),$Oo=o("The model class to instantiate is selected based on the "),kge=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),ROo=o("pretrained_model_name_or_path"),BOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),POo=o("pretrained_model_name_or_path"),IOo=o(":"),qOo=l(),Bge=a("ul"),E5=a("li"),Pge=a("strong"),NOo=o("tapas"),jOo=o(" \u2014 "),eV=a("a"),DOo=o("TapasForQuestionAnswering"),GOo=o(" (TAPAS model)"),OOo=l(),C5=a("p"),VOo=o("The model is set in evaluation mode by default using "),Ige=a("code"),XOo=o("model.eval()"),zOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),QOo=o("model.train()"),WOo=l(),F(w5.$$.fragment),OPe=l(),ed=a("h2"),A5=a("a"),Nge=a("span"),F(py.$$.fragment),HOo=l(),jge=a("span"),UOo=o("AutoModelForImageClassification"),VPe=l(),jo=a("div"),F(uy.$$.fragment),JOo=l(),od=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=a("a"),KOo=o("from_pretrained()"),ZOo=o(" class method or the "),rV=a("a"),eVo=o("from_config()"),oVo=o(` class
method.`),rVo=l(),_y=a("p"),tVo=o("This class cannot be instantiated directly using "),Dge=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),mt=a("div"),F(by.$$.fragment),lVo=l(),Gge=a("p"),iVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dVo=l(),rd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),gVo=o("from_pretrained()"),hVo=o(" to load the model weights."),pVo=l(),F(y5.$$.fragment),uVo=l(),no=a("div"),F(vy.$$.fragment),_Vo=l(),Vge=a("p"),bVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vVo=l(),qa=a("p"),FVo=o("The model class to instantiate is selected based on the "),Xge=a("code"),TVo=o("model_type"),MVo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),EVo=o("pretrained_model_name_or_path"),CVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(":"),yVo=l(),ve=a("ul"),L5=a("li"),Wge=a("strong"),LVo=o("beit"),xVo=o(" \u2014 "),aV=a("a"),$Vo=o("BeitForImageClassification"),kVo=o(" (BEiT model)"),SVo=l(),x5=a("li"),Hge=a("strong"),RVo=o("convnext"),BVo=o(" \u2014 "),nV=a("a"),PVo=o("ConvNextForImageClassification"),IVo=o(" (ConvNext model)"),qVo=l(),$5=a("li"),Uge=a("strong"),NVo=o("data2vec-vision"),jVo=o(" \u2014 "),sV=a("a"),DVo=o("Data2VecVisionForImageClassification"),GVo=o(" (Data2VecVision model)"),OVo=l(),Rs=a("li"),Jge=a("strong"),VVo=o("deit"),XVo=o(" \u2014 "),lV=a("a"),zVo=o("DeiTForImageClassification"),QVo=o(" or "),iV=a("a"),WVo=o("DeiTForImageClassificationWithTeacher"),HVo=o(" (DeiT model)"),UVo=l(),k5=a("li"),Yge=a("strong"),JVo=o("imagegpt"),YVo=o(" \u2014 "),dV=a("a"),KVo=o("ImageGPTForImageClassification"),ZVo=o(" (ImageGPT model)"),eXo=l(),gt=a("li"),Kge=a("strong"),oXo=o("perceiver"),rXo=o(" \u2014 "),cV=a("a"),tXo=o("PerceiverForImageClassificationLearned"),aXo=o(" or "),fV=a("a"),nXo=o("PerceiverForImageClassificationFourier"),sXo=o(" or "),mV=a("a"),lXo=o("PerceiverForImageClassificationConvProcessing"),iXo=o(" (Perceiver model)"),dXo=l(),S5=a("li"),Zge=a("strong"),cXo=o("poolformer"),fXo=o(" \u2014 "),gV=a("a"),mXo=o("PoolFormerForImageClassification"),gXo=o(" (PoolFormer model)"),hXo=l(),R5=a("li"),ehe=a("strong"),pXo=o("regnet"),uXo=o(" \u2014 "),hV=a("a"),_Xo=o("RegNetForImageClassification"),bXo=o(" (RegNet model)"),vXo=l(),B5=a("li"),ohe=a("strong"),FXo=o("resnet"),TXo=o(" \u2014 "),pV=a("a"),MXo=o("ResNetForImageClassification"),EXo=o(" (ResNet model)"),CXo=l(),P5=a("li"),rhe=a("strong"),wXo=o("segformer"),AXo=o(" \u2014 "),uV=a("a"),yXo=o("SegformerForImageClassification"),LXo=o(" (SegFormer model)"),xXo=l(),I5=a("li"),the=a("strong"),$Xo=o("swin"),kXo=o(" \u2014 "),_V=a("a"),SXo=o("SwinForImageClassification"),RXo=o(" (Swin model)"),BXo=l(),q5=a("li"),ahe=a("strong"),PXo=o("van"),IXo=o(" \u2014 "),bV=a("a"),qXo=o("VanForImageClassification"),NXo=o(" (VAN model)"),jXo=l(),N5=a("li"),nhe=a("strong"),DXo=o("vit"),GXo=o(" \u2014 "),vV=a("a"),OXo=o("ViTForImageClassification"),VXo=o(" (ViT model)"),XXo=l(),j5=a("p"),zXo=o("The model is set in evaluation mode by default using "),she=a("code"),QXo=o("model.eval()"),WXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),HXo=o("model.train()"),UXo=l(),F(D5.$$.fragment),XPe=l(),td=a("h2"),G5=a("a"),ihe=a("span"),F(Fy.$$.fragment),JXo=l(),dhe=a("span"),YXo=o("AutoModelForVision2Seq"),zPe=l(),Do=a("div"),F(Ty.$$.fragment),KXo=l(),ad=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FV=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),TV=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),My=a("p"),nzo=o("This class cannot be instantiated directly using "),che=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),ht=a("div"),F(Ey.$$.fragment),dzo=l(),fhe=a("p"),czo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fzo=l(),nd=a("p"),mzo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),pzo=o("from_pretrained()"),uzo=o(" to load the model weights."),_zo=l(),F(O5.$$.fragment),bzo=l(),so=a("div"),F(Cy.$$.fragment),vzo=l(),ghe=a("p"),Fzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tzo=l(),Na=a("p"),Mzo=o("The model class to instantiate is selected based on the "),hhe=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(":"),xzo=l(),_he=a("ul"),V5=a("li"),bhe=a("strong"),$zo=o("vision-encoder-decoder"),kzo=o(" \u2014 "),EV=a("a"),Szo=o("VisionEncoderDecoderModel"),Rzo=o(" (Vision Encoder decoder model)"),Bzo=l(),X5=a("p"),Pzo=o("The model is set in evaluation mode by default using "),vhe=a("code"),Izo=o("model.eval()"),qzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),Nzo=o("model.train()"),jzo=l(),F(z5.$$.fragment),QPe=l(),sd=a("h2"),Q5=a("a"),The=a("span"),F(wy.$$.fragment),Dzo=l(),Mhe=a("span"),Gzo=o("AutoModelForAudioClassification"),WPe=l(),Go=a("div"),F(Ay.$$.fragment),Ozo=l(),ld=a("p"),Vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=a("a"),Xzo=o("from_pretrained()"),zzo=o(" class method or the "),wV=a("a"),Qzo=o("from_config()"),Wzo=o(` class
method.`),Hzo=l(),yy=a("p"),Uzo=o("This class cannot be instantiated directly using "),Ehe=a("code"),Jzo=o("__init__()"),Yzo=o(" (throws an error)."),Kzo=l(),pt=a("div"),F(Ly.$$.fragment),Zzo=l(),Che=a("p"),eQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oQo=l(),id=a("p"),rQo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),tQo=o("not"),aQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nQo=o("from_pretrained()"),sQo=o(" to load the model weights."),lQo=l(),F(W5.$$.fragment),iQo=l(),lo=a("div"),F(xy.$$.fragment),dQo=l(),Ahe=a("p"),cQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fQo=l(),ja=a("p"),mQo=o("The model class to instantiate is selected based on the "),yhe=a("code"),gQo=o("model_type"),hQo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),pQo=o("pretrained_model_name_or_path"),uQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),_Qo=o("pretrained_model_name_or_path"),bQo=o(":"),vQo=l(),Ne=a("ul"),H5=a("li"),$he=a("strong"),FQo=o("data2vec-audio"),TQo=o(" \u2014 "),yV=a("a"),MQo=o("Data2VecAudioForSequenceClassification"),EQo=o(" (Data2VecAudio model)"),CQo=l(),U5=a("li"),khe=a("strong"),wQo=o("hubert"),AQo=o(" \u2014 "),LV=a("a"),yQo=o("HubertForSequenceClassification"),LQo=o(" (Hubert model)"),xQo=l(),J5=a("li"),She=a("strong"),$Qo=o("sew"),kQo=o(" \u2014 "),xV=a("a"),SQo=o("SEWForSequenceClassification"),RQo=o(" (SEW model)"),BQo=l(),Y5=a("li"),Rhe=a("strong"),PQo=o("sew-d"),IQo=o(" \u2014 "),$V=a("a"),qQo=o("SEWDForSequenceClassification"),NQo=o(" (SEW-D model)"),jQo=l(),K5=a("li"),Bhe=a("strong"),DQo=o("unispeech"),GQo=o(" \u2014 "),kV=a("a"),OQo=o("UniSpeechForSequenceClassification"),VQo=o(" (UniSpeech model)"),XQo=l(),Z5=a("li"),Phe=a("strong"),zQo=o("unispeech-sat"),QQo=o(" \u2014 "),SV=a("a"),WQo=o("UniSpeechSatForSequenceClassification"),HQo=o(" (UniSpeechSat model)"),UQo=l(),ev=a("li"),Ihe=a("strong"),JQo=o("wav2vec2"),YQo=o(" \u2014 "),RV=a("a"),KQo=o("Wav2Vec2ForSequenceClassification"),ZQo=o(" (Wav2Vec2 model)"),eWo=l(),ov=a("li"),qhe=a("strong"),oWo=o("wavlm"),rWo=o(" \u2014 "),BV=a("a"),tWo=o("WavLMForSequenceClassification"),aWo=o(" (WavLM model)"),nWo=l(),rv=a("p"),sWo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),dWo=o("model.train()"),cWo=l(),F(tv.$$.fragment),HPe=l(),dd=a("h2"),av=a("a"),Dhe=a("span"),F($y.$$.fragment),fWo=l(),Ghe=a("span"),mWo=o("AutoModelForAudioFrameClassification"),UPe=l(),Oo=a("div"),F(ky.$$.fragment),gWo=l(),cd=a("p"),hWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=a("a"),pWo=o("from_pretrained()"),uWo=o(" class method or the "),IV=a("a"),_Wo=o("from_config()"),bWo=o(` class
method.`),vWo=l(),Sy=a("p"),FWo=o("This class cannot be instantiated directly using "),Ohe=a("code"),TWo=o("__init__()"),MWo=o(" (throws an error)."),EWo=l(),ut=a("div"),F(Ry.$$.fragment),CWo=l(),Vhe=a("p"),wWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AWo=l(),fd=a("p"),yWo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),LWo=o("not"),xWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),$Wo=o("from_pretrained()"),kWo=o(" to load the model weights."),SWo=l(),F(nv.$$.fragment),RWo=l(),io=a("div"),F(By.$$.fragment),BWo=l(),zhe=a("p"),PWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IWo=l(),Da=a("p"),qWo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),NWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(":"),XWo=l(),Ga=a("ul"),sv=a("li"),Uhe=a("strong"),zWo=o("data2vec-audio"),QWo=o(" \u2014 "),NV=a("a"),WWo=o("Data2VecAudioForAudioFrameClassification"),HWo=o(" (Data2VecAudio model)"),UWo=l(),lv=a("li"),Jhe=a("strong"),JWo=o("unispeech-sat"),YWo=o(" \u2014 "),jV=a("a"),KWo=o("UniSpeechSatForAudioFrameClassification"),ZWo=o(" (UniSpeechSat model)"),eHo=l(),iv=a("li"),Yhe=a("strong"),oHo=o("wav2vec2"),rHo=o(" \u2014 "),DV=a("a"),tHo=o("Wav2Vec2ForAudioFrameClassification"),aHo=o(" (Wav2Vec2 model)"),nHo=l(),dv=a("li"),Khe=a("strong"),sHo=o("wavlm"),lHo=o(" \u2014 "),GV=a("a"),iHo=o("WavLMForAudioFrameClassification"),dHo=o(" (WavLM model)"),cHo=l(),cv=a("p"),fHo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),mHo=o("model.eval()"),gHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),hHo=o("model.train()"),pHo=l(),F(fv.$$.fragment),JPe=l(),md=a("h2"),mv=a("a"),ope=a("span"),F(Py.$$.fragment),uHo=l(),rpe=a("span"),_Ho=o("AutoModelForCTC"),YPe=l(),Vo=a("div"),F(Iy.$$.fragment),bHo=l(),gd=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=a("a"),FHo=o("from_pretrained()"),THo=o(" class method or the "),VV=a("a"),MHo=o("from_config()"),EHo=o(` class
method.`),CHo=l(),qy=a("p"),wHo=o("This class cannot be instantiated directly using "),tpe=a("code"),AHo=o("__init__()"),yHo=o(" (throws an error)."),LHo=l(),_t=a("div"),F(Ny.$$.fragment),xHo=l(),ape=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kHo=l(),hd=a("p"),SHo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),RHo=o("not"),BHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),PHo=o("from_pretrained()"),IHo=o(" to load the model weights."),qHo=l(),F(gv.$$.fragment),NHo=l(),co=a("div"),F(jy.$$.fragment),jHo=l(),spe=a("p"),DHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GHo=l(),Oa=a("p"),OHo=o("The model class to instantiate is selected based on the "),lpe=a("code"),VHo=o("model_type"),XHo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),WHo=o("pretrained_model_name_or_path"),HHo=o(":"),UHo=l(),je=a("ul"),hv=a("li"),cpe=a("strong"),JHo=o("data2vec-audio"),YHo=o(" \u2014 "),zV=a("a"),KHo=o("Data2VecAudioForCTC"),ZHo=o(" (Data2VecAudio model)"),eUo=l(),pv=a("li"),fpe=a("strong"),oUo=o("hubert"),rUo=o(" \u2014 "),QV=a("a"),tUo=o("HubertForCTC"),aUo=o(" (Hubert model)"),nUo=l(),uv=a("li"),mpe=a("strong"),sUo=o("sew"),lUo=o(" \u2014 "),WV=a("a"),iUo=o("SEWForCTC"),dUo=o(" (SEW model)"),cUo=l(),_v=a("li"),gpe=a("strong"),fUo=o("sew-d"),mUo=o(" \u2014 "),HV=a("a"),gUo=o("SEWDForCTC"),hUo=o(" (SEW-D model)"),pUo=l(),bv=a("li"),hpe=a("strong"),uUo=o("unispeech"),_Uo=o(" \u2014 "),UV=a("a"),bUo=o("UniSpeechForCTC"),vUo=o(" (UniSpeech model)"),FUo=l(),vv=a("li"),ppe=a("strong"),TUo=o("unispeech-sat"),MUo=o(" \u2014 "),JV=a("a"),EUo=o("UniSpeechSatForCTC"),CUo=o(" (UniSpeechSat model)"),wUo=l(),Fv=a("li"),upe=a("strong"),AUo=o("wav2vec2"),yUo=o(" \u2014 "),YV=a("a"),LUo=o("Wav2Vec2ForCTC"),xUo=o(" (Wav2Vec2 model)"),$Uo=l(),Tv=a("li"),_pe=a("strong"),kUo=o("wavlm"),SUo=o(" \u2014 "),KV=a("a"),RUo=o("WavLMForCTC"),BUo=o(" (WavLM model)"),PUo=l(),Mv=a("p"),IUo=o("The model is set in evaluation mode by default using "),bpe=a("code"),qUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),jUo=o("model.train()"),DUo=l(),F(Ev.$$.fragment),KPe=l(),pd=a("h2"),Cv=a("a"),Fpe=a("span"),F(Dy.$$.fragment),GUo=l(),Tpe=a("span"),OUo=o("AutoModelForSpeechSeq2Seq"),ZPe=l(),Xo=a("div"),F(Gy.$$.fragment),VUo=l(),ud=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=a("a"),zUo=o("from_pretrained()"),QUo=o(" class method or the "),eX=a("a"),WUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),Oy=a("p"),JUo=o("This class cannot be instantiated directly using "),Mpe=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),bt=a("div"),F(Vy.$$.fragment),eJo=l(),Epe=a("p"),oJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJo=l(),_d=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(wv.$$.fragment),dJo=l(),fo=a("div"),F(Xy.$$.fragment),cJo=l(),wpe=a("p"),fJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mJo=l(),Va=a("p"),gJo=o("The model class to instantiate is selected based on the "),Ape=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),uJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),zy=a("ul"),Av=a("li"),xpe=a("strong"),TJo=o("speech-encoder-decoder"),MJo=o(" \u2014 "),rX=a("a"),EJo=o("SpeechEncoderDecoderModel"),CJo=o(" (Speech Encoder decoder model)"),wJo=l(),yv=a("li"),$pe=a("strong"),AJo=o("speech_to_text"),yJo=o(" \u2014 "),tX=a("a"),LJo=o("Speech2TextForConditionalGeneration"),xJo=o(" (Speech2Text model)"),$Jo=l(),Lv=a("p"),kJo=o("The model is set in evaluation mode by default using "),kpe=a("code"),SJo=o("model.eval()"),RJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),BJo=o("model.train()"),PJo=l(),F(xv.$$.fragment),eIe=l(),bd=a("h2"),$v=a("a"),Rpe=a("span"),F(Qy.$$.fragment),IJo=l(),Bpe=a("span"),qJo=o("AutoModelForAudioXVector"),oIe=l(),zo=a("div"),F(Wy.$$.fragment),NJo=l(),vd=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),nX=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),Hy=a("p"),zJo=o("This class cannot be instantiated directly using "),Ppe=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),vt=a("div"),F(Uy.$$.fragment),UJo=l(),Ipe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YJo=l(),Fd=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),F(kv.$$.fragment),aYo=l(),mo=a("div"),F(Jy.$$.fragment),nYo=l(),Npe=a("p"),sYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lYo=l(),Xa=a("p"),iYo=o("The model class to instantiate is selected based on the "),jpe=a("code"),dYo=o("model_type"),cYo=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(":"),pYo=l(),za=a("ul"),Sv=a("li"),Ope=a("strong"),uYo=o("data2vec-audio"),_Yo=o(" \u2014 "),lX=a("a"),bYo=o("Data2VecAudioForXVector"),vYo=o(" (Data2VecAudio model)"),FYo=l(),Rv=a("li"),Vpe=a("strong"),TYo=o("unispeech-sat"),MYo=o(" \u2014 "),iX=a("a"),EYo=o("UniSpeechSatForXVector"),CYo=o(" (UniSpeechSat model)"),wYo=l(),Bv=a("li"),Xpe=a("strong"),AYo=o("wav2vec2"),yYo=o(" \u2014 "),dX=a("a"),LYo=o("Wav2Vec2ForXVector"),xYo=o(" (Wav2Vec2 model)"),$Yo=l(),Pv=a("li"),zpe=a("strong"),kYo=o("wavlm"),SYo=o(" \u2014 "),cX=a("a"),RYo=o("WavLMForXVector"),BYo=o(" (WavLM model)"),PYo=l(),Iv=a("p"),IYo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),qYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),jYo=o("model.train()"),DYo=l(),F(qv.$$.fragment),rIe=l(),Td=a("h2"),Nv=a("a"),Hpe=a("span"),F(Yy.$$.fragment),GYo=l(),Upe=a("span"),OYo=o("AutoModelForMaskedImageModeling"),tIe=l(),Qo=a("div"),F(Ky.$$.fragment),VYo=l(),Md=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fX=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),mX=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),Zy=a("p"),JYo=o("This class cannot be instantiated directly using "),Jpe=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),Ft=a("div"),F(eL.$$.fragment),eKo=l(),Ype=a("p"),oKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rKo=l(),Ed=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),F(jv.$$.fragment),dKo=l(),go=a("div"),F(oL.$$.fragment),cKo=l(),Zpe=a("p"),fKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mKo=l(),Qa=a("p"),gKo=o("The model class to instantiate is selected based on the "),eue=a("code"),hKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),uKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(":"),FKo=l(),Cd=a("ul"),Dv=a("li"),tue=a("strong"),TKo=o("deit"),MKo=o(" \u2014 "),hX=a("a"),EKo=o("DeiTForMaskedImageModeling"),CKo=o(" (DeiT model)"),wKo=l(),Gv=a("li"),aue=a("strong"),AKo=o("swin"),yKo=o(" \u2014 "),pX=a("a"),LKo=o("SwinForMaskedImageModeling"),xKo=o(" (Swin model)"),$Ko=l(),Ov=a("li"),nue=a("strong"),kKo=o("vit"),SKo=o(" \u2014 "),uX=a("a"),RKo=o("ViTForMaskedImageModeling"),BKo=o(" (ViT model)"),PKo=l(),Vv=a("p"),IKo=o("The model is set in evaluation mode by default using "),sue=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),jKo=o("model.train()"),DKo=l(),F(Xv.$$.fragment),aIe=l(),wd=a("h2"),zv=a("a"),iue=a("span"),F(rL.$$.fragment),GKo=l(),due=a("span"),OKo=o("AutoModelForObjectDetection"),nIe=l(),Wo=a("div"),F(tL.$$.fragment),VKo=l(),Ad=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),bX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),aL=a("p"),JKo=o("This class cannot be instantiated directly using "),cue=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),Tt=a("div"),F(nL.$$.fragment),eZo=l(),fue=a("p"),oZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rZo=l(),yd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(Qv.$$.fragment),dZo=l(),ho=a("div"),F(sL.$$.fragment),cZo=l(),gue=a("p"),fZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mZo=l(),Wa=a("p"),gZo=o("The model class to instantiate is selected based on the "),hue=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),uZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),lL=a("ul"),Wv=a("li"),_ue=a("strong"),TZo=o("detr"),MZo=o(" \u2014 "),FX=a("a"),EZo=o("DetrForObjectDetection"),CZo=o(" (DETR model)"),wZo=l(),Hv=a("li"),bue=a("strong"),AZo=o("yolos"),yZo=o(" \u2014 "),TX=a("a"),LZo=o("YolosForObjectDetection"),xZo=o(" (YOLOS model)"),$Zo=l(),Uv=a("p"),kZo=o("The model is set in evaluation mode by default using "),vue=a("code"),SZo=o("model.eval()"),RZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),BZo=o("model.train()"),PZo=l(),F(Jv.$$.fragment),sIe=l(),Ld=a("h2"),Yv=a("a"),Tue=a("span"),F(iL.$$.fragment),IZo=l(),Mue=a("span"),qZo=o("AutoModelForImageSegmentation"),lIe=l(),Ho=a("div"),F(dL.$$.fragment),NZo=l(),xd=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),EX=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),cL=a("p"),zZo=o("This class cannot be instantiated directly using "),Eue=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),Mt=a("div"),F(fL.$$.fragment),UZo=l(),Cue=a("p"),JZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YZo=l(),$d=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),F(Kv.$$.fragment),aer=l(),po=a("div"),F(mL.$$.fragment),ner=l(),Aue=a("p"),ser=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ler=l(),Ha=a("p"),ier=o("The model class to instantiate is selected based on the "),yue=a("code"),der=o("model_type"),cer=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),fer=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(":"),per=l(),$ue=a("ul"),Zv=a("li"),kue=a("strong"),uer=o("detr"),_er=o(" \u2014 "),wX=a("a"),ber=o("DetrForSegmentation"),ver=o(" (DETR model)"),Fer=l(),eF=a("p"),Ter=o("The model is set in evaluation mode by default using "),Sue=a("code"),Mer=o("model.eval()"),Eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),Cer=o("model.train()"),wer=l(),F(oF.$$.fragment),iIe=l(),kd=a("h2"),rF=a("a"),Bue=a("span"),F(gL.$$.fragment),Aer=l(),Pue=a("span"),yer=o("AutoModelForSemanticSegmentation"),dIe=l(),Uo=a("div"),F(hL.$$.fragment),Ler=l(),Sd=a("p"),xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=a("a"),$er=o("from_pretrained()"),ker=o(" class method or the "),yX=a("a"),Ser=o("from_config()"),Rer=o(` class
method.`),Ber=l(),pL=a("p"),Per=o("This class cannot be instantiated directly using "),Iue=a("code"),Ier=o("__init__()"),qer=o(" (throws an error)."),Ner=l(),Et=a("div"),F(uL.$$.fragment),jer=l(),que=a("p"),Der=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ger=l(),Rd=a("p"),Oer=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Ver=o("not"),Xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),zer=o("from_pretrained()"),Qer=o(" to load the model weights."),Wer=l(),F(tF.$$.fragment),Her=l(),uo=a("div"),F(_L.$$.fragment),Uer=l(),jue=a("p"),Jer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Yer=l(),Ua=a("p"),Ker=o("The model class to instantiate is selected based on the "),Due=a("code"),Zer=o("model_type"),eor=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(":"),nor=l(),Ja=a("ul"),aF=a("li"),Vue=a("strong"),sor=o("beit"),lor=o(" \u2014 "),xX=a("a"),ior=o("BeitForSemanticSegmentation"),dor=o(" (BEiT model)"),cor=l(),nF=a("li"),Xue=a("strong"),mor=o("data2vec-vision"),gor=o(" \u2014 "),$X=a("a"),hor=o("Data2VecVisionForSemanticSegmentation"),por=o(" (Data2VecVision model)"),uor=l(),sF=a("li"),zue=a("strong"),_or=o("dpt"),bor=o(" \u2014 "),kX=a("a"),vor=o("DPTForSemanticSegmentation"),For=o(" (DPT model)"),Tor=l(),lF=a("li"),Que=a("strong"),Mor=o("segformer"),Eor=o(" \u2014 "),SX=a("a"),Cor=o("SegformerForSemanticSegmentation"),wor=o(" (SegFormer model)"),Aor=l(),iF=a("p"),yor=o("The model is set in evaluation mode by default using "),Wue=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),$or=o("model.train()"),kor=l(),F(dF.$$.fragment),cIe=l(),Bd=a("h2"),cF=a("a"),Uue=a("span"),F(bL.$$.fragment),Sor=l(),Jue=a("span"),Ror=o("AutoModelForInstanceSegmentation"),fIe=l(),Jo=a("div"),F(vL.$$.fragment),Bor=l(),Pd=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),BX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),FL=a("p"),Gor=o("This class cannot be instantiated directly using "),Yue=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Ct=a("div"),F(TL.$$.fragment),zor=l(),Kue=a("p"),Qor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wor=l(),Id=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(fF.$$.fragment),err=l(),_o=a("div"),F(ML.$$.fragment),orr=l(),e_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),trr=l(),Ya=a("p"),arr=o("The model class to instantiate is selected based on the "),o_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),a_e=a("ul"),mF=a("li"),n_e=a("strong"),mrr=o("maskformer"),grr=o(" \u2014 "),IX=a("a"),hrr=o("MaskFormerForInstanceSegmentation"),prr=o(" (MaskFormer model)"),urr=l(),gF=a("p"),_rr=o("The model is set in evaluation mode by default using "),s_e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Frr=o("model.train()"),Trr=l(),F(hF.$$.fragment),mIe=l(),qd=a("h2"),pF=a("a"),i_e=a("span"),F(EL.$$.fragment),Mrr=l(),d_e=a("span"),Err=o("TFAutoModel"),gIe=l(),Yo=a("div"),F(CL.$$.fragment),Crr=l(),Nd=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=a("a"),Arr=o("from_pretrained()"),yrr=o(" class method or the "),NX=a("a"),Lrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),wL=a("p"),krr=o("This class cannot be instantiated directly using "),c_e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Brr=l(),wt=a("div"),F(AL.$$.fragment),Prr=l(),f_e=a("p"),Irr=o("Instantiates one of the base model classes of the library from a configuration."),qrr=l(),jd=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(uF.$$.fragment),Xrr=l(),wr=a("div"),F(yL.$$.fragment),zrr=l(),g_e=a("p"),Qrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wrr=l(),Ka=a("p"),Hrr=o("The model class to instantiate is selected based on the "),h_e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),j=a("ul"),_F=a("li"),__e=a("strong"),rtr=o("albert"),ttr=o(" \u2014 "),DX=a("a"),atr=o("TFAlbertModel"),ntr=o(" (ALBERT model)"),str=l(),bF=a("li"),b_e=a("strong"),ltr=o("bart"),itr=o(" \u2014 "),GX=a("a"),dtr=o("TFBartModel"),ctr=o(" (BART model)"),ftr=l(),vF=a("li"),v_e=a("strong"),mtr=o("bert"),gtr=o(" \u2014 "),OX=a("a"),htr=o("TFBertModel"),ptr=o(" (BERT model)"),utr=l(),FF=a("li"),F_e=a("strong"),_tr=o("blenderbot"),btr=o(" \u2014 "),VX=a("a"),vtr=o("TFBlenderbotModel"),Ftr=o(" (Blenderbot model)"),Ttr=l(),TF=a("li"),T_e=a("strong"),Mtr=o("blenderbot-small"),Etr=o(" \u2014 "),XX=a("a"),Ctr=o("TFBlenderbotSmallModel"),wtr=o(" (BlenderbotSmall model)"),Atr=l(),MF=a("li"),M_e=a("strong"),ytr=o("camembert"),Ltr=o(" \u2014 "),zX=a("a"),xtr=o("TFCamembertModel"),$tr=o(" (CamemBERT model)"),ktr=l(),EF=a("li"),E_e=a("strong"),Str=o("clip"),Rtr=o(" \u2014 "),QX=a("a"),Btr=o("TFCLIPModel"),Ptr=o(" (CLIP model)"),Itr=l(),CF=a("li"),C_e=a("strong"),qtr=o("convbert"),Ntr=o(" \u2014 "),WX=a("a"),jtr=o("TFConvBertModel"),Dtr=o(" (ConvBERT model)"),Gtr=l(),wF=a("li"),w_e=a("strong"),Otr=o("convnext"),Vtr=o(" \u2014 "),HX=a("a"),Xtr=o("TFConvNextModel"),ztr=o(" (ConvNext model)"),Qtr=l(),AF=a("li"),A_e=a("strong"),Wtr=o("ctrl"),Htr=o(" \u2014 "),UX=a("a"),Utr=o("TFCTRLModel"),Jtr=o(" (CTRL model)"),Ytr=l(),yF=a("li"),y_e=a("strong"),Ktr=o("data2vec-vision"),Ztr=o(" \u2014 "),JX=a("a"),ear=o("TFData2VecVisionModel"),oar=o(" (Data2VecVision model)"),rar=l(),LF=a("li"),L_e=a("strong"),tar=o("deberta"),aar=o(" \u2014 "),YX=a("a"),nar=o("TFDebertaModel"),sar=o(" (DeBERTa model)"),lar=l(),xF=a("li"),x_e=a("strong"),iar=o("deberta-v2"),dar=o(" \u2014 "),KX=a("a"),car=o("TFDebertaV2Model"),far=o(" (DeBERTa-v2 model)"),mar=l(),$F=a("li"),$_e=a("strong"),gar=o("distilbert"),har=o(" \u2014 "),ZX=a("a"),par=o("TFDistilBertModel"),uar=o(" (DistilBERT model)"),_ar=l(),kF=a("li"),k_e=a("strong"),bar=o("dpr"),Far=o(" \u2014 "),ez=a("a"),Tar=o("TFDPRQuestionEncoder"),Mar=o(" (DPR model)"),Ear=l(),SF=a("li"),S_e=a("strong"),Car=o("electra"),war=o(" \u2014 "),oz=a("a"),Aar=o("TFElectraModel"),yar=o(" (ELECTRA model)"),Lar=l(),RF=a("li"),R_e=a("strong"),xar=o("flaubert"),$ar=o(" \u2014 "),rz=a("a"),kar=o("TFFlaubertModel"),Sar=o(" (FlauBERT model)"),Rar=l(),Bs=a("li"),B_e=a("strong"),Bar=o("funnel"),Par=o(" \u2014 "),tz=a("a"),Iar=o("TFFunnelModel"),qar=o(" or "),az=a("a"),Nar=o("TFFunnelBaseModel"),jar=o(" (Funnel Transformer model)"),Dar=l(),BF=a("li"),P_e=a("strong"),Gar=o("gpt2"),Oar=o(" \u2014 "),nz=a("a"),Var=o("TFGPT2Model"),Xar=o(" (OpenAI GPT-2 model)"),zar=l(),PF=a("li"),I_e=a("strong"),Qar=o("gptj"),War=o(" \u2014 "),sz=a("a"),Har=o("TFGPTJModel"),Uar=o(" (GPT-J model)"),Jar=l(),IF=a("li"),q_e=a("strong"),Yar=o("hubert"),Kar=o(" \u2014 "),lz=a("a"),Zar=o("TFHubertModel"),enr=o(" (Hubert model)"),onr=l(),qF=a("li"),N_e=a("strong"),rnr=o("layoutlm"),tnr=o(" \u2014 "),iz=a("a"),anr=o("TFLayoutLMModel"),nnr=o(" (LayoutLM model)"),snr=l(),NF=a("li"),j_e=a("strong"),lnr=o("led"),inr=o(" \u2014 "),dz=a("a"),dnr=o("TFLEDModel"),cnr=o(" (LED model)"),fnr=l(),jF=a("li"),D_e=a("strong"),mnr=o("longformer"),gnr=o(" \u2014 "),cz=a("a"),hnr=o("TFLongformerModel"),pnr=o(" (Longformer model)"),unr=l(),DF=a("li"),G_e=a("strong"),_nr=o("lxmert"),bnr=o(" \u2014 "),fz=a("a"),vnr=o("TFLxmertModel"),Fnr=o(" (LXMERT model)"),Tnr=l(),GF=a("li"),O_e=a("strong"),Mnr=o("marian"),Enr=o(" \u2014 "),mz=a("a"),Cnr=o("TFMarianModel"),wnr=o(" (Marian model)"),Anr=l(),OF=a("li"),V_e=a("strong"),ynr=o("mbart"),Lnr=o(" \u2014 "),gz=a("a"),xnr=o("TFMBartModel"),$nr=o(" (mBART model)"),knr=l(),VF=a("li"),X_e=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFMobileBertModel"),Pnr=o(" (MobileBERT model)"),Inr=l(),XF=a("li"),z_e=a("strong"),qnr=o("mpnet"),Nnr=o(" \u2014 "),pz=a("a"),jnr=o("TFMPNetModel"),Dnr=o(" (MPNet model)"),Gnr=l(),zF=a("li"),Q_e=a("strong"),Onr=o("mt5"),Vnr=o(" \u2014 "),uz=a("a"),Xnr=o("TFMT5Model"),znr=o(" (mT5 model)"),Qnr=l(),QF=a("li"),W_e=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),_z=a("a"),Unr=o("TFOpenAIGPTModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),WF=a("li"),H_e=a("strong"),Knr=o("pegasus"),Znr=o(" \u2014 "),bz=a("a"),esr=o("TFPegasusModel"),osr=o(" (Pegasus model)"),rsr=l(),HF=a("li"),U_e=a("strong"),tsr=o("rembert"),asr=o(" \u2014 "),vz=a("a"),nsr=o("TFRemBertModel"),ssr=o(" (RemBERT model)"),lsr=l(),UF=a("li"),J_e=a("strong"),isr=o("roberta"),dsr=o(" \u2014 "),Fz=a("a"),csr=o("TFRobertaModel"),fsr=o(" (RoBERTa model)"),msr=l(),JF=a("li"),Y_e=a("strong"),gsr=o("roformer"),hsr=o(" \u2014 "),Tz=a("a"),psr=o("TFRoFormerModel"),usr=o(" (RoFormer model)"),_sr=l(),YF=a("li"),K_e=a("strong"),bsr=o("speech_to_text"),vsr=o(" \u2014 "),Mz=a("a"),Fsr=o("TFSpeech2TextModel"),Tsr=o(" (Speech2Text model)"),Msr=l(),KF=a("li"),Z_e=a("strong"),Esr=o("t5"),Csr=o(" \u2014 "),Ez=a("a"),wsr=o("TFT5Model"),Asr=o(" (T5 model)"),ysr=l(),ZF=a("li"),e1e=a("strong"),Lsr=o("tapas"),xsr=o(" \u2014 "),Cz=a("a"),$sr=o("TFTapasModel"),ksr=o(" (TAPAS model)"),Ssr=l(),e0=a("li"),o1e=a("strong"),Rsr=o("transfo-xl"),Bsr=o(" \u2014 "),wz=a("a"),Psr=o("TFTransfoXLModel"),Isr=o(" (Transformer-XL model)"),qsr=l(),o0=a("li"),r1e=a("strong"),Nsr=o("vit"),jsr=o(" \u2014 "),Az=a("a"),Dsr=o("TFViTModel"),Gsr=o(" (ViT model)"),Osr=l(),r0=a("li"),t1e=a("strong"),Vsr=o("vit_mae"),Xsr=o(" \u2014 "),yz=a("a"),zsr=o("TFViTMAEModel"),Qsr=o(" (ViTMAE model)"),Wsr=l(),t0=a("li"),a1e=a("strong"),Hsr=o("wav2vec2"),Usr=o(" \u2014 "),Lz=a("a"),Jsr=o("TFWav2Vec2Model"),Ysr=o(" (Wav2Vec2 model)"),Ksr=l(),a0=a("li"),n1e=a("strong"),Zsr=o("xlm"),elr=o(" \u2014 "),xz=a("a"),olr=o("TFXLMModel"),rlr=o(" (XLM model)"),tlr=l(),n0=a("li"),s1e=a("strong"),alr=o("xlm-roberta"),nlr=o(" \u2014 "),$z=a("a"),slr=o("TFXLMRobertaModel"),llr=o(" (XLM-RoBERTa model)"),ilr=l(),s0=a("li"),l1e=a("strong"),dlr=o("xlnet"),clr=o(" \u2014 "),kz=a("a"),flr=o("TFXLNetModel"),mlr=o(" (XLNet model)"),glr=l(),F(l0.$$.fragment),hIe=l(),Dd=a("h2"),i0=a("a"),i1e=a("span"),F(LL.$$.fragment),hlr=l(),d1e=a("span"),plr=o("TFAutoModelForPreTraining"),pIe=l(),Ko=a("div"),F(xL.$$.fragment),ulr=l(),Gd=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=a("a"),blr=o("from_pretrained()"),vlr=o(" class method or the "),Rz=a("a"),Flr=o("from_config()"),Tlr=o(` class
method.`),Mlr=l(),$L=a("p"),Elr=o("This class cannot be instantiated directly using "),c1e=a("code"),Clr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),At=a("div"),F(kL.$$.fragment),ylr=l(),f1e=a("p"),Llr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xlr=l(),Od=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),klr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Rlr=o("from_pretrained()"),Blr=o(" to load the model weights."),Plr=l(),F(d0.$$.fragment),Ilr=l(),Ar=a("div"),F(SL.$$.fragment),qlr=l(),g1e=a("p"),Nlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jlr=l(),Za=a("p"),Dlr=o("The model class to instantiate is selected based on the "),h1e=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),zlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Wlr=l(),ne=a("ul"),c0=a("li"),_1e=a("strong"),Hlr=o("albert"),Ulr=o(" \u2014 "),Pz=a("a"),Jlr=o("TFAlbertForPreTraining"),Ylr=o(" (ALBERT model)"),Klr=l(),f0=a("li"),b1e=a("strong"),Zlr=o("bart"),eir=o(" \u2014 "),Iz=a("a"),oir=o("TFBartForConditionalGeneration"),rir=o(" (BART model)"),tir=l(),m0=a("li"),v1e=a("strong"),air=o("bert"),nir=o(" \u2014 "),qz=a("a"),sir=o("TFBertForPreTraining"),lir=o(" (BERT model)"),iir=l(),g0=a("li"),F1e=a("strong"),dir=o("camembert"),cir=o(" \u2014 "),Nz=a("a"),fir=o("TFCamembertForMaskedLM"),mir=o(" (CamemBERT model)"),gir=l(),h0=a("li"),T1e=a("strong"),hir=o("ctrl"),pir=o(" \u2014 "),jz=a("a"),uir=o("TFCTRLLMHeadModel"),_ir=o(" (CTRL model)"),bir=l(),p0=a("li"),M1e=a("strong"),vir=o("distilbert"),Fir=o(" \u2014 "),Dz=a("a"),Tir=o("TFDistilBertForMaskedLM"),Mir=o(" (DistilBERT model)"),Eir=l(),u0=a("li"),E1e=a("strong"),Cir=o("electra"),wir=o(" \u2014 "),Gz=a("a"),Air=o("TFElectraForPreTraining"),yir=o(" (ELECTRA model)"),Lir=l(),_0=a("li"),C1e=a("strong"),xir=o("flaubert"),$ir=o(" \u2014 "),Oz=a("a"),kir=o("TFFlaubertWithLMHeadModel"),Sir=o(" (FlauBERT model)"),Rir=l(),b0=a("li"),w1e=a("strong"),Bir=o("funnel"),Pir=o(" \u2014 "),Vz=a("a"),Iir=o("TFFunnelForPreTraining"),qir=o(" (Funnel Transformer model)"),Nir=l(),v0=a("li"),A1e=a("strong"),jir=o("gpt2"),Dir=o(" \u2014 "),Xz=a("a"),Gir=o("TFGPT2LMHeadModel"),Oir=o(" (OpenAI GPT-2 model)"),Vir=l(),F0=a("li"),y1e=a("strong"),Xir=o("layoutlm"),zir=o(" \u2014 "),zz=a("a"),Qir=o("TFLayoutLMForMaskedLM"),Wir=o(" (LayoutLM model)"),Hir=l(),T0=a("li"),L1e=a("strong"),Uir=o("lxmert"),Jir=o(" \u2014 "),Qz=a("a"),Yir=o("TFLxmertForPreTraining"),Kir=o(" (LXMERT model)"),Zir=l(),M0=a("li"),x1e=a("strong"),edr=o("mobilebert"),odr=o(" \u2014 "),Wz=a("a"),rdr=o("TFMobileBertForPreTraining"),tdr=o(" (MobileBERT model)"),adr=l(),E0=a("li"),$1e=a("strong"),ndr=o("mpnet"),sdr=o(" \u2014 "),Hz=a("a"),ldr=o("TFMPNetForMaskedLM"),idr=o(" (MPNet model)"),ddr=l(),C0=a("li"),k1e=a("strong"),cdr=o("openai-gpt"),fdr=o(" \u2014 "),Uz=a("a"),mdr=o("TFOpenAIGPTLMHeadModel"),gdr=o(" (OpenAI GPT model)"),hdr=l(),w0=a("li"),S1e=a("strong"),pdr=o("roberta"),udr=o(" \u2014 "),Jz=a("a"),_dr=o("TFRobertaForMaskedLM"),bdr=o(" (RoBERTa model)"),vdr=l(),A0=a("li"),R1e=a("strong"),Fdr=o("t5"),Tdr=o(" \u2014 "),Yz=a("a"),Mdr=o("TFT5ForConditionalGeneration"),Edr=o(" (T5 model)"),Cdr=l(),y0=a("li"),B1e=a("strong"),wdr=o("tapas"),Adr=o(" \u2014 "),Kz=a("a"),ydr=o("TFTapasForMaskedLM"),Ldr=o(" (TAPAS model)"),xdr=l(),L0=a("li"),P1e=a("strong"),$dr=o("transfo-xl"),kdr=o(" \u2014 "),Zz=a("a"),Sdr=o("TFTransfoXLLMHeadModel"),Rdr=o(" (Transformer-XL model)"),Bdr=l(),x0=a("li"),I1e=a("strong"),Pdr=o("vit_mae"),Idr=o(" \u2014 "),eQ=a("a"),qdr=o("TFViTMAEForPreTraining"),Ndr=o(" (ViTMAE model)"),jdr=l(),$0=a("li"),q1e=a("strong"),Ddr=o("xlm"),Gdr=o(" \u2014 "),oQ=a("a"),Odr=o("TFXLMWithLMHeadModel"),Vdr=o(" (XLM model)"),Xdr=l(),k0=a("li"),N1e=a("strong"),zdr=o("xlm-roberta"),Qdr=o(" \u2014 "),rQ=a("a"),Wdr=o("TFXLMRobertaForMaskedLM"),Hdr=o(" (XLM-RoBERTa model)"),Udr=l(),S0=a("li"),j1e=a("strong"),Jdr=o("xlnet"),Ydr=o(" \u2014 "),tQ=a("a"),Kdr=o("TFXLNetLMHeadModel"),Zdr=o(" (XLNet model)"),ecr=l(),F(R0.$$.fragment),uIe=l(),Vd=a("h2"),B0=a("a"),D1e=a("span"),F(RL.$$.fragment),ocr=l(),G1e=a("span"),rcr=o("TFAutoModelForCausalLM"),_Ie=l(),Zo=a("div"),F(BL.$$.fragment),tcr=l(),Xd=a("p"),acr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=a("a"),ncr=o("from_pretrained()"),scr=o(" class method or the "),nQ=a("a"),lcr=o("from_config()"),icr=o(` class
method.`),dcr=l(),PL=a("p"),ccr=o("This class cannot be instantiated directly using "),O1e=a("code"),fcr=o("__init__()"),mcr=o(" (throws an error)."),gcr=l(),yt=a("div"),F(IL.$$.fragment),hcr=l(),V1e=a("p"),pcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ucr=l(),zd=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),bcr=o("not"),vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" to load the model weights."),Mcr=l(),F(P0.$$.fragment),Ecr=l(),yr=a("div"),F(qL.$$.fragment),Ccr=l(),z1e=a("p"),wcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Acr=l(),en=a("p"),ycr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Lcr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(":"),Bcr=l(),Te=a("ul"),I0=a("li"),U1e=a("strong"),Pcr=o("bert"),Icr=o(" \u2014 "),lQ=a("a"),qcr=o("TFBertLMHeadModel"),Ncr=o(" (BERT model)"),jcr=l(),q0=a("li"),J1e=a("strong"),Dcr=o("camembert"),Gcr=o(" \u2014 "),iQ=a("a"),Ocr=o("TFCamembertForCausalLM"),Vcr=o(" (CamemBERT model)"),Xcr=l(),N0=a("li"),Y1e=a("strong"),zcr=o("ctrl"),Qcr=o(" \u2014 "),dQ=a("a"),Wcr=o("TFCTRLLMHeadModel"),Hcr=o(" (CTRL model)"),Ucr=l(),j0=a("li"),K1e=a("strong"),Jcr=o("gpt2"),Ycr=o(" \u2014 "),cQ=a("a"),Kcr=o("TFGPT2LMHeadModel"),Zcr=o(" (OpenAI GPT-2 model)"),efr=l(),D0=a("li"),Z1e=a("strong"),ofr=o("gptj"),rfr=o(" \u2014 "),fQ=a("a"),tfr=o("TFGPTJForCausalLM"),afr=o(" (GPT-J model)"),nfr=l(),G0=a("li"),ebe=a("strong"),sfr=o("openai-gpt"),lfr=o(" \u2014 "),mQ=a("a"),ifr=o("TFOpenAIGPTLMHeadModel"),dfr=o(" (OpenAI GPT model)"),cfr=l(),O0=a("li"),obe=a("strong"),ffr=o("rembert"),mfr=o(" \u2014 "),gQ=a("a"),gfr=o("TFRemBertForCausalLM"),hfr=o(" (RemBERT model)"),pfr=l(),V0=a("li"),rbe=a("strong"),ufr=o("roberta"),_fr=o(" \u2014 "),hQ=a("a"),bfr=o("TFRobertaForCausalLM"),vfr=o(" (RoBERTa model)"),Ffr=l(),X0=a("li"),tbe=a("strong"),Tfr=o("roformer"),Mfr=o(" \u2014 "),pQ=a("a"),Efr=o("TFRoFormerForCausalLM"),Cfr=o(" (RoFormer model)"),wfr=l(),z0=a("li"),abe=a("strong"),Afr=o("transfo-xl"),yfr=o(" \u2014 "),uQ=a("a"),Lfr=o("TFTransfoXLLMHeadModel"),xfr=o(" (Transformer-XL model)"),$fr=l(),Q0=a("li"),nbe=a("strong"),kfr=o("xlm"),Sfr=o(" \u2014 "),_Q=a("a"),Rfr=o("TFXLMWithLMHeadModel"),Bfr=o(" (XLM model)"),Pfr=l(),W0=a("li"),sbe=a("strong"),Ifr=o("xlnet"),qfr=o(" \u2014 "),bQ=a("a"),Nfr=o("TFXLNetLMHeadModel"),jfr=o(" (XLNet model)"),Dfr=l(),F(H0.$$.fragment),bIe=l(),Qd=a("h2"),U0=a("a"),lbe=a("span"),F(NL.$$.fragment),Gfr=l(),ibe=a("span"),Ofr=o("TFAutoModelForImageClassification"),vIe=l(),er=a("div"),F(jL.$$.fragment),Vfr=l(),Wd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=a("a"),zfr=o("from_pretrained()"),Qfr=o(" class method or the "),FQ=a("a"),Wfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),DL=a("p"),Jfr=o("This class cannot be instantiated directly using "),dbe=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),Lt=a("div"),F(GL.$$.fragment),emr=l(),cbe=a("p"),omr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rmr=l(),Hd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(J0.$$.fragment),dmr=l(),Lr=a("div"),F(OL.$$.fragment),cmr=l(),mbe=a("p"),fmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mmr=l(),on=a("p"),gmr=o("The model class to instantiate is selected based on the "),gbe=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),umr=o("pretrained_model_name_or_path"),_mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),Ud=a("ul"),Y0=a("li"),ube=a("strong"),Tmr=o("convnext"),Mmr=o(" \u2014 "),MQ=a("a"),Emr=o("TFConvNextForImageClassification"),Cmr=o(" (ConvNext model)"),wmr=l(),K0=a("li"),_be=a("strong"),Amr=o("data2vec-vision"),ymr=o(" \u2014 "),EQ=a("a"),Lmr=o("TFData2VecVisionForImageClassification"),xmr=o(" (Data2VecVision model)"),$mr=l(),Z0=a("li"),bbe=a("strong"),kmr=o("vit"),Smr=o(" \u2014 "),CQ=a("a"),Rmr=o("TFViTForImageClassification"),Bmr=o(" (ViT model)"),Pmr=l(),F(eT.$$.fragment),FIe=l(),Jd=a("h2"),oT=a("a"),vbe=a("span"),F(VL.$$.fragment),Imr=l(),Fbe=a("span"),qmr=o("TFAutoModelForMaskedLM"),TIe=l(),or=a("div"),F(XL.$$.fragment),Nmr=l(),Yd=a("p"),jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" class method or the "),AQ=a("a"),Omr=o("from_config()"),Vmr=o(` class
method.`),Xmr=l(),zL=a("p"),zmr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Qmr=o("__init__()"),Wmr=o(" (throws an error)."),Hmr=l(),xt=a("div"),F(QL.$$.fragment),Umr=l(),Mbe=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ymr=l(),Kd=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Zmr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),F(rT.$$.fragment),agr=l(),xr=a("div"),F(WL.$$.fragment),ngr=l(),Cbe=a("p"),sgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lgr=l(),rn=a("p"),igr=o("The model class to instantiate is selected based on the "),wbe=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),ie=a("ul"),tT=a("li"),Lbe=a("strong"),ugr=o("albert"),_gr=o(" \u2014 "),LQ=a("a"),bgr=o("TFAlbertForMaskedLM"),vgr=o(" (ALBERT model)"),Fgr=l(),aT=a("li"),xbe=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),xQ=a("a"),Egr=o("TFBertForMaskedLM"),Cgr=o(" (BERT model)"),wgr=l(),nT=a("li"),$be=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),$Q=a("a"),Lgr=o("TFCamembertForMaskedLM"),xgr=o(" (CamemBERT model)"),$gr=l(),sT=a("li"),kbe=a("strong"),kgr=o("convbert"),Sgr=o(" \u2014 "),kQ=a("a"),Rgr=o("TFConvBertForMaskedLM"),Bgr=o(" (ConvBERT model)"),Pgr=l(),lT=a("li"),Sbe=a("strong"),Igr=o("deberta"),qgr=o(" \u2014 "),SQ=a("a"),Ngr=o("TFDebertaForMaskedLM"),jgr=o(" (DeBERTa model)"),Dgr=l(),iT=a("li"),Rbe=a("strong"),Ggr=o("deberta-v2"),Ogr=o(" \u2014 "),RQ=a("a"),Vgr=o("TFDebertaV2ForMaskedLM"),Xgr=o(" (DeBERTa-v2 model)"),zgr=l(),dT=a("li"),Bbe=a("strong"),Qgr=o("distilbert"),Wgr=o(" \u2014 "),BQ=a("a"),Hgr=o("TFDistilBertForMaskedLM"),Ugr=o(" (DistilBERT model)"),Jgr=l(),cT=a("li"),Pbe=a("strong"),Ygr=o("electra"),Kgr=o(" \u2014 "),PQ=a("a"),Zgr=o("TFElectraForMaskedLM"),ehr=o(" (ELECTRA model)"),ohr=l(),fT=a("li"),Ibe=a("strong"),rhr=o("flaubert"),thr=o(" \u2014 "),IQ=a("a"),ahr=o("TFFlaubertWithLMHeadModel"),nhr=o(" (FlauBERT model)"),shr=l(),mT=a("li"),qbe=a("strong"),lhr=o("funnel"),ihr=o(" \u2014 "),qQ=a("a"),dhr=o("TFFunnelForMaskedLM"),chr=o(" (Funnel Transformer model)"),fhr=l(),gT=a("li"),Nbe=a("strong"),mhr=o("layoutlm"),ghr=o(" \u2014 "),NQ=a("a"),hhr=o("TFLayoutLMForMaskedLM"),phr=o(" (LayoutLM model)"),uhr=l(),hT=a("li"),jbe=a("strong"),_hr=o("longformer"),bhr=o(" \u2014 "),jQ=a("a"),vhr=o("TFLongformerForMaskedLM"),Fhr=o(" (Longformer model)"),Thr=l(),pT=a("li"),Dbe=a("strong"),Mhr=o("mobilebert"),Ehr=o(" \u2014 "),DQ=a("a"),Chr=o("TFMobileBertForMaskedLM"),whr=o(" (MobileBERT model)"),Ahr=l(),uT=a("li"),Gbe=a("strong"),yhr=o("mpnet"),Lhr=o(" \u2014 "),GQ=a("a"),xhr=o("TFMPNetForMaskedLM"),$hr=o(" (MPNet model)"),khr=l(),_T=a("li"),Obe=a("strong"),Shr=o("rembert"),Rhr=o(" \u2014 "),OQ=a("a"),Bhr=o("TFRemBertForMaskedLM"),Phr=o(" (RemBERT model)"),Ihr=l(),bT=a("li"),Vbe=a("strong"),qhr=o("roberta"),Nhr=o(" \u2014 "),VQ=a("a"),jhr=o("TFRobertaForMaskedLM"),Dhr=o(" (RoBERTa model)"),Ghr=l(),vT=a("li"),Xbe=a("strong"),Ohr=o("roformer"),Vhr=o(" \u2014 "),XQ=a("a"),Xhr=o("TFRoFormerForMaskedLM"),zhr=o(" (RoFormer model)"),Qhr=l(),FT=a("li"),zbe=a("strong"),Whr=o("tapas"),Hhr=o(" \u2014 "),zQ=a("a"),Uhr=o("TFTapasForMaskedLM"),Jhr=o(" (TAPAS model)"),Yhr=l(),TT=a("li"),Qbe=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),QQ=a("a"),epr=o("TFXLMWithLMHeadModel"),opr=o(" (XLM model)"),rpr=l(),MT=a("li"),Wbe=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),WQ=a("a"),npr=o("TFXLMRobertaForMaskedLM"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),F(ET.$$.fragment),MIe=l(),Zd=a("h2"),CT=a("a"),Hbe=a("span"),F(HL.$$.fragment),ipr=l(),Ube=a("span"),dpr=o("TFAutoModelForSeq2SeqLM"),EIe=l(),rr=a("div"),F(UL.$$.fragment),cpr=l(),ec=a("p"),fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=a("a"),mpr=o("from_pretrained()"),gpr=o(" class method or the "),UQ=a("a"),hpr=o("from_config()"),ppr=o(` class
method.`),upr=l(),JL=a("p"),_pr=o("This class cannot be instantiated directly using "),Jbe=a("code"),bpr=o("__init__()"),vpr=o(" (throws an error)."),Fpr=l(),$t=a("div"),F(YL.$$.fragment),Tpr=l(),Ybe=a("p"),Mpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Epr=l(),oc=a("p"),Cpr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),wpr=o("not"),Apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),ypr=o("from_pretrained()"),Lpr=o(" to load the model weights."),xpr=l(),F(wT.$$.fragment),$pr=l(),$r=a("div"),F(KL.$$.fragment),kpr=l(),Zbe=a("p"),Spr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rpr=l(),tn=a("p"),Bpr=o("The model class to instantiate is selected based on the "),e4e=a("code"),Ppr=o("model_type"),Ipr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),jpr=o("pretrained_model_name_or_path"),Dpr=o(":"),Gpr=l(),ye=a("ul"),AT=a("li"),t4e=a("strong"),Opr=o("bart"),Vpr=o(" \u2014 "),YQ=a("a"),Xpr=o("TFBartForConditionalGeneration"),zpr=o(" (BART model)"),Qpr=l(),yT=a("li"),a4e=a("strong"),Wpr=o("blenderbot"),Hpr=o(" \u2014 "),KQ=a("a"),Upr=o("TFBlenderbotForConditionalGeneration"),Jpr=o(" (Blenderbot model)"),Ypr=l(),LT=a("li"),n4e=a("strong"),Kpr=o("blenderbot-small"),Zpr=o(" \u2014 "),ZQ=a("a"),eur=o("TFBlenderbotSmallForConditionalGeneration"),our=o(" (BlenderbotSmall model)"),rur=l(),xT=a("li"),s4e=a("strong"),tur=o("encoder-decoder"),aur=o(" \u2014 "),eW=a("a"),nur=o("TFEncoderDecoderModel"),sur=o(" (Encoder decoder model)"),lur=l(),$T=a("li"),l4e=a("strong"),iur=o("led"),dur=o(" \u2014 "),oW=a("a"),cur=o("TFLEDForConditionalGeneration"),fur=o(" (LED model)"),mur=l(),kT=a("li"),i4e=a("strong"),gur=o("marian"),hur=o(" \u2014 "),rW=a("a"),pur=o("TFMarianMTModel"),uur=o(" (Marian model)"),_ur=l(),ST=a("li"),d4e=a("strong"),bur=o("mbart"),vur=o(" \u2014 "),tW=a("a"),Fur=o("TFMBartForConditionalGeneration"),Tur=o(" (mBART model)"),Mur=l(),RT=a("li"),c4e=a("strong"),Eur=o("mt5"),Cur=o(" \u2014 "),aW=a("a"),wur=o("TFMT5ForConditionalGeneration"),Aur=o(" (mT5 model)"),yur=l(),BT=a("li"),f4e=a("strong"),Lur=o("pegasus"),xur=o(" \u2014 "),nW=a("a"),$ur=o("TFPegasusForConditionalGeneration"),kur=o(" (Pegasus model)"),Sur=l(),PT=a("li"),m4e=a("strong"),Rur=o("t5"),Bur=o(" \u2014 "),sW=a("a"),Pur=o("TFT5ForConditionalGeneration"),Iur=o(" (T5 model)"),qur=l(),F(IT.$$.fragment),CIe=l(),rc=a("h2"),qT=a("a"),g4e=a("span"),F(ZL.$$.fragment),Nur=l(),h4e=a("span"),jur=o("TFAutoModelForSequenceClassification"),wIe=l(),tr=a("div"),F(e8.$$.fragment),Dur=l(),tc=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=a("a"),Our=o("from_pretrained()"),Vur=o(" class method or the "),iW=a("a"),Xur=o("from_config()"),zur=o(` class
method.`),Qur=l(),o8=a("p"),Wur=o("This class cannot be instantiated directly using "),p4e=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),kt=a("div"),F(r8.$$.fragment),Yur=l(),u4e=a("p"),Kur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zur=l(),ac=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(NT.$$.fragment),s_r=l(),kr=a("div"),F(t8.$$.fragment),l_r=l(),b4e=a("p"),i_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d_r=l(),an=a("p"),c_r=o("The model class to instantiate is selected based on the "),v4e=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),p_r=o("pretrained_model_name_or_path"),u_r=o(":"),__r=l(),Z=a("ul"),jT=a("li"),M4e=a("strong"),b_r=o("albert"),v_r=o(" \u2014 "),cW=a("a"),F_r=o("TFAlbertForSequenceClassification"),T_r=o(" (ALBERT model)"),M_r=l(),DT=a("li"),E4e=a("strong"),E_r=o("bert"),C_r=o(" \u2014 "),fW=a("a"),w_r=o("TFBertForSequenceClassification"),A_r=o(" (BERT model)"),y_r=l(),GT=a("li"),C4e=a("strong"),L_r=o("camembert"),x_r=o(" \u2014 "),mW=a("a"),$_r=o("TFCamembertForSequenceClassification"),k_r=o(" (CamemBERT model)"),S_r=l(),OT=a("li"),w4e=a("strong"),R_r=o("convbert"),B_r=o(" \u2014 "),gW=a("a"),P_r=o("TFConvBertForSequenceClassification"),I_r=o(" (ConvBERT model)"),q_r=l(),VT=a("li"),A4e=a("strong"),N_r=o("ctrl"),j_r=o(" \u2014 "),hW=a("a"),D_r=o("TFCTRLForSequenceClassification"),G_r=o(" (CTRL model)"),O_r=l(),XT=a("li"),y4e=a("strong"),V_r=o("deberta"),X_r=o(" \u2014 "),pW=a("a"),z_r=o("TFDebertaForSequenceClassification"),Q_r=o(" (DeBERTa model)"),W_r=l(),zT=a("li"),L4e=a("strong"),H_r=o("deberta-v2"),U_r=o(" \u2014 "),uW=a("a"),J_r=o("TFDebertaV2ForSequenceClassification"),Y_r=o(" (DeBERTa-v2 model)"),K_r=l(),QT=a("li"),x4e=a("strong"),Z_r=o("distilbert"),e1r=o(" \u2014 "),_W=a("a"),o1r=o("TFDistilBertForSequenceClassification"),r1r=o(" (DistilBERT model)"),t1r=l(),WT=a("li"),$4e=a("strong"),a1r=o("electra"),n1r=o(" \u2014 "),bW=a("a"),s1r=o("TFElectraForSequenceClassification"),l1r=o(" (ELECTRA model)"),i1r=l(),HT=a("li"),k4e=a("strong"),d1r=o("flaubert"),c1r=o(" \u2014 "),vW=a("a"),f1r=o("TFFlaubertForSequenceClassification"),m1r=o(" (FlauBERT model)"),g1r=l(),UT=a("li"),S4e=a("strong"),h1r=o("funnel"),p1r=o(" \u2014 "),FW=a("a"),u1r=o("TFFunnelForSequenceClassification"),_1r=o(" (Funnel Transformer model)"),b1r=l(),JT=a("li"),R4e=a("strong"),v1r=o("gpt2"),F1r=o(" \u2014 "),TW=a("a"),T1r=o("TFGPT2ForSequenceClassification"),M1r=o(" (OpenAI GPT-2 model)"),E1r=l(),YT=a("li"),B4e=a("strong"),C1r=o("gptj"),w1r=o(" \u2014 "),MW=a("a"),A1r=o("TFGPTJForSequenceClassification"),y1r=o(" (GPT-J model)"),L1r=l(),KT=a("li"),P4e=a("strong"),x1r=o("layoutlm"),$1r=o(" \u2014 "),EW=a("a"),k1r=o("TFLayoutLMForSequenceClassification"),S1r=o(" (LayoutLM model)"),R1r=l(),ZT=a("li"),I4e=a("strong"),B1r=o("longformer"),P1r=o(" \u2014 "),CW=a("a"),I1r=o("TFLongformerForSequenceClassification"),q1r=o(" (Longformer model)"),N1r=l(),e7=a("li"),q4e=a("strong"),j1r=o("mobilebert"),D1r=o(" \u2014 "),wW=a("a"),G1r=o("TFMobileBertForSequenceClassification"),O1r=o(" (MobileBERT model)"),V1r=l(),o7=a("li"),N4e=a("strong"),X1r=o("mpnet"),z1r=o(" \u2014 "),AW=a("a"),Q1r=o("TFMPNetForSequenceClassification"),W1r=o(" (MPNet model)"),H1r=l(),r7=a("li"),j4e=a("strong"),U1r=o("openai-gpt"),J1r=o(" \u2014 "),yW=a("a"),Y1r=o("TFOpenAIGPTForSequenceClassification"),K1r=o(" (OpenAI GPT model)"),Z1r=l(),t7=a("li"),D4e=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),LW=a("a"),rbr=o("TFRemBertForSequenceClassification"),tbr=o(" (RemBERT model)"),abr=l(),a7=a("li"),G4e=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),xW=a("a"),lbr=o("TFRobertaForSequenceClassification"),ibr=o(" (RoBERTa model)"),dbr=l(),n7=a("li"),O4e=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),$W=a("a"),mbr=o("TFRoFormerForSequenceClassification"),gbr=o(" (RoFormer model)"),hbr=l(),s7=a("li"),V4e=a("strong"),pbr=o("tapas"),ubr=o(" \u2014 "),kW=a("a"),_br=o("TFTapasForSequenceClassification"),bbr=o(" (TAPAS model)"),vbr=l(),l7=a("li"),X4e=a("strong"),Fbr=o("transfo-xl"),Tbr=o(" \u2014 "),SW=a("a"),Mbr=o("TFTransfoXLForSequenceClassification"),Ebr=o(" (Transformer-XL model)"),Cbr=l(),i7=a("li"),z4e=a("strong"),wbr=o("xlm"),Abr=o(" \u2014 "),RW=a("a"),ybr=o("TFXLMForSequenceClassification"),Lbr=o(" (XLM model)"),xbr=l(),d7=a("li"),Q4e=a("strong"),$br=o("xlm-roberta"),kbr=o(" \u2014 "),BW=a("a"),Sbr=o("TFXLMRobertaForSequenceClassification"),Rbr=o(" (XLM-RoBERTa model)"),Bbr=l(),c7=a("li"),W4e=a("strong"),Pbr=o("xlnet"),Ibr=o(" \u2014 "),PW=a("a"),qbr=o("TFXLNetForSequenceClassification"),Nbr=o(" (XLNet model)"),jbr=l(),F(f7.$$.fragment),AIe=l(),nc=a("h2"),m7=a("a"),H4e=a("span"),F(a8.$$.fragment),Dbr=l(),U4e=a("span"),Gbr=o("TFAutoModelForMultipleChoice"),yIe=l(),ar=a("div"),F(n8.$$.fragment),Obr=l(),sc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),qW=a("a"),Qbr=o("from_config()"),Wbr=o(` class
method.`),Hbr=l(),s8=a("p"),Ubr=o("This class cannot be instantiated directly using "),J4e=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),St=a("div"),F(l8.$$.fragment),Zbr=l(),Y4e=a("p"),e4r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o4r=l(),lc=a("p"),r4r=o(`Note:
Loading a model from its configuration file does `),K4e=a("strong"),t4r=o("not"),a4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),n4r=o("from_pretrained()"),s4r=o(" to load the model weights."),l4r=l(),F(g7.$$.fragment),i4r=l(),Sr=a("div"),F(i8.$$.fragment),d4r=l(),Z4e=a("p"),c4r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f4r=l(),nn=a("p"),m4r=o("The model class to instantiate is selected based on the "),e2e=a("code"),g4r=o("model_type"),h4r=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),p4r=o("pretrained_model_name_or_path"),u4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),_4r=o("pretrained_model_name_or_path"),b4r=o(":"),v4r=l(),pe=a("ul"),h7=a("li"),t2e=a("strong"),F4r=o("albert"),T4r=o(" \u2014 "),jW=a("a"),M4r=o("TFAlbertForMultipleChoice"),E4r=o(" (ALBERT model)"),C4r=l(),p7=a("li"),a2e=a("strong"),w4r=o("bert"),A4r=o(" \u2014 "),DW=a("a"),y4r=o("TFBertForMultipleChoice"),L4r=o(" (BERT model)"),x4r=l(),u7=a("li"),n2e=a("strong"),$4r=o("camembert"),k4r=o(" \u2014 "),GW=a("a"),S4r=o("TFCamembertForMultipleChoice"),R4r=o(" (CamemBERT model)"),B4r=l(),_7=a("li"),s2e=a("strong"),P4r=o("convbert"),I4r=o(" \u2014 "),OW=a("a"),q4r=o("TFConvBertForMultipleChoice"),N4r=o(" (ConvBERT model)"),j4r=l(),b7=a("li"),l2e=a("strong"),D4r=o("distilbert"),G4r=o(" \u2014 "),VW=a("a"),O4r=o("TFDistilBertForMultipleChoice"),V4r=o(" (DistilBERT model)"),X4r=l(),v7=a("li"),i2e=a("strong"),z4r=o("electra"),Q4r=o(" \u2014 "),XW=a("a"),W4r=o("TFElectraForMultipleChoice"),H4r=o(" (ELECTRA model)"),U4r=l(),F7=a("li"),d2e=a("strong"),J4r=o("flaubert"),Y4r=o(" \u2014 "),zW=a("a"),K4r=o("TFFlaubertForMultipleChoice"),Z4r=o(" (FlauBERT model)"),e2r=l(),T7=a("li"),c2e=a("strong"),o2r=o("funnel"),r2r=o(" \u2014 "),QW=a("a"),t2r=o("TFFunnelForMultipleChoice"),a2r=o(" (Funnel Transformer model)"),n2r=l(),M7=a("li"),f2e=a("strong"),s2r=o("longformer"),l2r=o(" \u2014 "),WW=a("a"),i2r=o("TFLongformerForMultipleChoice"),d2r=o(" (Longformer model)"),c2r=l(),E7=a("li"),m2e=a("strong"),f2r=o("mobilebert"),m2r=o(" \u2014 "),HW=a("a"),g2r=o("TFMobileBertForMultipleChoice"),h2r=o(" (MobileBERT model)"),p2r=l(),C7=a("li"),g2e=a("strong"),u2r=o("mpnet"),_2r=o(" \u2014 "),UW=a("a"),b2r=o("TFMPNetForMultipleChoice"),v2r=o(" (MPNet model)"),F2r=l(),w7=a("li"),h2e=a("strong"),T2r=o("rembert"),M2r=o(" \u2014 "),JW=a("a"),E2r=o("TFRemBertForMultipleChoice"),C2r=o(" (RemBERT model)"),w2r=l(),A7=a("li"),p2e=a("strong"),A2r=o("roberta"),y2r=o(" \u2014 "),YW=a("a"),L2r=o("TFRobertaForMultipleChoice"),x2r=o(" (RoBERTa model)"),$2r=l(),y7=a("li"),u2e=a("strong"),k2r=o("roformer"),S2r=o(" \u2014 "),KW=a("a"),R2r=o("TFRoFormerForMultipleChoice"),B2r=o(" (RoFormer model)"),P2r=l(),L7=a("li"),_2e=a("strong"),I2r=o("xlm"),q2r=o(" \u2014 "),ZW=a("a"),N2r=o("TFXLMForMultipleChoice"),j2r=o(" (XLM model)"),D2r=l(),x7=a("li"),b2e=a("strong"),G2r=o("xlm-roberta"),O2r=o(" \u2014 "),eH=a("a"),V2r=o("TFXLMRobertaForMultipleChoice"),X2r=o(" (XLM-RoBERTa model)"),z2r=l(),$7=a("li"),v2e=a("strong"),Q2r=o("xlnet"),W2r=o(" \u2014 "),oH=a("a"),H2r=o("TFXLNetForMultipleChoice"),U2r=o(" (XLNet model)"),J2r=l(),F(k7.$$.fragment),LIe=l(),ic=a("h2"),S7=a("a"),F2e=a("span"),F(d8.$$.fragment),Y2r=l(),T2e=a("span"),K2r=o("TFAutoModelForNextSentencePrediction"),xIe=l(),nr=a("div"),F(c8.$$.fragment),Z2r=l(),dc=a("p"),e5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=a("a"),o5r=o("from_pretrained()"),r5r=o(" class method or the "),tH=a("a"),t5r=o("from_config()"),a5r=o(` class
method.`),n5r=l(),f8=a("p"),s5r=o("This class cannot be instantiated directly using "),M2e=a("code"),l5r=o("__init__()"),i5r=o(" (throws an error)."),d5r=l(),Rt=a("div"),F(m8.$$.fragment),c5r=l(),E2e=a("p"),f5r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),m5r=l(),cc=a("p"),g5r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),h5r=o("not"),p5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),u5r=o("from_pretrained()"),_5r=o(" to load the model weights."),b5r=l(),F(R7.$$.fragment),v5r=l(),Rr=a("div"),F(g8.$$.fragment),F5r=l(),w2e=a("p"),T5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),M5r=l(),sn=a("p"),E5r=o("The model class to instantiate is selected based on the "),A2e=a("code"),C5r=o("model_type"),w5r=o(` property of the config object (either
passed as an argument or loaded from `),y2e=a("code"),A5r=o("pretrained_model_name_or_path"),y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),L5r=o("pretrained_model_name_or_path"),x5r=o(":"),$5r=l(),h8=a("ul"),B7=a("li"),x2e=a("strong"),k5r=o("bert"),S5r=o(" \u2014 "),nH=a("a"),R5r=o("TFBertForNextSentencePrediction"),B5r=o(" (BERT model)"),P5r=l(),P7=a("li"),$2e=a("strong"),I5r=o("mobilebert"),q5r=o(" \u2014 "),sH=a("a"),N5r=o("TFMobileBertForNextSentencePrediction"),j5r=o(" (MobileBERT model)"),D5r=l(),F(I7.$$.fragment),$Ie=l(),fc=a("h2"),q7=a("a"),k2e=a("span"),F(p8.$$.fragment),G5r=l(),S2e=a("span"),O5r=o("TFAutoModelForTableQuestionAnswering"),kIe=l(),sr=a("div"),F(u8.$$.fragment),V5r=l(),mc=a("p"),X5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=a("a"),z5r=o("from_pretrained()"),Q5r=o(" class method or the "),iH=a("a"),W5r=o("from_config()"),H5r=o(` class
method.`),U5r=l(),_8=a("p"),J5r=o("This class cannot be instantiated directly using "),R2e=a("code"),Y5r=o("__init__()"),K5r=o(" (throws an error)."),Z5r=l(),Bt=a("div"),F(b8.$$.fragment),evr=l(),B2e=a("p"),ovr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rvr=l(),gc=a("p"),tvr=o(`Note:
Loading a model from its configuration file does `),P2e=a("strong"),avr=o("not"),nvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),svr=o("from_pretrained()"),lvr=o(" to load the model weights."),ivr=l(),F(N7.$$.fragment),dvr=l(),Br=a("div"),F(v8.$$.fragment),cvr=l(),I2e=a("p"),fvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mvr=l(),ln=a("p"),gvr=o("The model class to instantiate is selected based on the "),q2e=a("code"),hvr=o("model_type"),pvr=o(` property of the config object (either
passed as an argument or loaded from `),N2e=a("code"),uvr=o("pretrained_model_name_or_path"),_vr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),bvr=o("pretrained_model_name_or_path"),vvr=o(":"),Fvr=l(),D2e=a("ul"),j7=a("li"),G2e=a("strong"),Tvr=o("tapas"),Mvr=o(" \u2014 "),cH=a("a"),Evr=o("TFTapasForQuestionAnswering"),Cvr=o(" (TAPAS model)"),wvr=l(),F(D7.$$.fragment),SIe=l(),hc=a("h2"),G7=a("a"),O2e=a("span"),F(F8.$$.fragment),Avr=l(),V2e=a("span"),yvr=o("TFAutoModelForTokenClassification"),RIe=l(),lr=a("div"),F(T8.$$.fragment),Lvr=l(),pc=a("p"),xvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=a("a"),$vr=o("from_pretrained()"),kvr=o(" class method or the "),mH=a("a"),Svr=o("from_config()"),Rvr=o(` class
method.`),Bvr=l(),M8=a("p"),Pvr=o("This class cannot be instantiated directly using "),X2e=a("code"),Ivr=o("__init__()"),qvr=o(" (throws an error)."),Nvr=l(),Pt=a("div"),F(E8.$$.fragment),jvr=l(),z2e=a("p"),Dvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Gvr=l(),uc=a("p"),Ovr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),Vvr=o("not"),Xvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),zvr=o("from_pretrained()"),Qvr=o(" to load the model weights."),Wvr=l(),F(O7.$$.fragment),Hvr=l(),Pr=a("div"),F(C8.$$.fragment),Uvr=l(),W2e=a("p"),Jvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yvr=l(),dn=a("p"),Kvr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Zvr=o("model_type"),eFr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),oFr=o("pretrained_model_name_or_path"),rFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),tFr=o("pretrained_model_name_or_path"),aFr=o(":"),nFr=l(),de=a("ul"),V7=a("li"),Y2e=a("strong"),sFr=o("albert"),lFr=o(" \u2014 "),hH=a("a"),iFr=o("TFAlbertForTokenClassification"),dFr=o(" (ALBERT model)"),cFr=l(),X7=a("li"),K2e=a("strong"),fFr=o("bert"),mFr=o(" \u2014 "),pH=a("a"),gFr=o("TFBertForTokenClassification"),hFr=o(" (BERT model)"),pFr=l(),z7=a("li"),Z2e=a("strong"),uFr=o("camembert"),_Fr=o(" \u2014 "),uH=a("a"),bFr=o("TFCamembertForTokenClassification"),vFr=o(" (CamemBERT model)"),FFr=l(),Q7=a("li"),e5e=a("strong"),TFr=o("convbert"),MFr=o(" \u2014 "),_H=a("a"),EFr=o("TFConvBertForTokenClassification"),CFr=o(" (ConvBERT model)"),wFr=l(),W7=a("li"),o5e=a("strong"),AFr=o("deberta"),yFr=o(" \u2014 "),bH=a("a"),LFr=o("TFDebertaForTokenClassification"),xFr=o(" (DeBERTa model)"),$Fr=l(),H7=a("li"),r5e=a("strong"),kFr=o("deberta-v2"),SFr=o(" \u2014 "),vH=a("a"),RFr=o("TFDebertaV2ForTokenClassification"),BFr=o(" (DeBERTa-v2 model)"),PFr=l(),U7=a("li"),t5e=a("strong"),IFr=o("distilbert"),qFr=o(" \u2014 "),FH=a("a"),NFr=o("TFDistilBertForTokenClassification"),jFr=o(" (DistilBERT model)"),DFr=l(),J7=a("li"),a5e=a("strong"),GFr=o("electra"),OFr=o(" \u2014 "),TH=a("a"),VFr=o("TFElectraForTokenClassification"),XFr=o(" (ELECTRA model)"),zFr=l(),Y7=a("li"),n5e=a("strong"),QFr=o("flaubert"),WFr=o(" \u2014 "),MH=a("a"),HFr=o("TFFlaubertForTokenClassification"),UFr=o(" (FlauBERT model)"),JFr=l(),K7=a("li"),s5e=a("strong"),YFr=o("funnel"),KFr=o(" \u2014 "),EH=a("a"),ZFr=o("TFFunnelForTokenClassification"),e0r=o(" (Funnel Transformer model)"),o0r=l(),Z7=a("li"),l5e=a("strong"),r0r=o("layoutlm"),t0r=o(" \u2014 "),CH=a("a"),a0r=o("TFLayoutLMForTokenClassification"),n0r=o(" (LayoutLM model)"),s0r=l(),eM=a("li"),i5e=a("strong"),l0r=o("longformer"),i0r=o(" \u2014 "),wH=a("a"),d0r=o("TFLongformerForTokenClassification"),c0r=o(" (Longformer model)"),f0r=l(),oM=a("li"),d5e=a("strong"),m0r=o("mobilebert"),g0r=o(" \u2014 "),AH=a("a"),h0r=o("TFMobileBertForTokenClassification"),p0r=o(" (MobileBERT model)"),u0r=l(),rM=a("li"),c5e=a("strong"),_0r=o("mpnet"),b0r=o(" \u2014 "),yH=a("a"),v0r=o("TFMPNetForTokenClassification"),F0r=o(" (MPNet model)"),T0r=l(),tM=a("li"),f5e=a("strong"),M0r=o("rembert"),E0r=o(" \u2014 "),LH=a("a"),C0r=o("TFRemBertForTokenClassification"),w0r=o(" (RemBERT model)"),A0r=l(),aM=a("li"),m5e=a("strong"),y0r=o("roberta"),L0r=o(" \u2014 "),xH=a("a"),x0r=o("TFRobertaForTokenClassification"),$0r=o(" (RoBERTa model)"),k0r=l(),nM=a("li"),g5e=a("strong"),S0r=o("roformer"),R0r=o(" \u2014 "),$H=a("a"),B0r=o("TFRoFormerForTokenClassification"),P0r=o(" (RoFormer model)"),I0r=l(),sM=a("li"),h5e=a("strong"),q0r=o("xlm"),N0r=o(" \u2014 "),kH=a("a"),j0r=o("TFXLMForTokenClassification"),D0r=o(" (XLM model)"),G0r=l(),lM=a("li"),p5e=a("strong"),O0r=o("xlm-roberta"),V0r=o(" \u2014 "),SH=a("a"),X0r=o("TFXLMRobertaForTokenClassification"),z0r=o(" (XLM-RoBERTa model)"),Q0r=l(),iM=a("li"),u5e=a("strong"),W0r=o("xlnet"),H0r=o(" \u2014 "),RH=a("a"),U0r=o("TFXLNetForTokenClassification"),J0r=o(" (XLNet model)"),Y0r=l(),F(dM.$$.fragment),BIe=l(),_c=a("h2"),cM=a("a"),_5e=a("span"),F(w8.$$.fragment),K0r=l(),b5e=a("span"),Z0r=o("TFAutoModelForQuestionAnswering"),PIe=l(),ir=a("div"),F(A8.$$.fragment),eTr=l(),bc=a("p"),oTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=a("a"),rTr=o("from_pretrained()"),tTr=o(" class method or the "),PH=a("a"),aTr=o("from_config()"),nTr=o(` class
method.`),sTr=l(),y8=a("p"),lTr=o("This class cannot be instantiated directly using "),v5e=a("code"),iTr=o("__init__()"),dTr=o(" (throws an error)."),cTr=l(),It=a("div"),F(L8.$$.fragment),fTr=l(),F5e=a("p"),mTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gTr=l(),vc=a("p"),hTr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),pTr=o("not"),uTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),_Tr=o("from_pretrained()"),bTr=o(" to load the model weights."),vTr=l(),F(fM.$$.fragment),FTr=l(),Ir=a("div"),F(x8.$$.fragment),TTr=l(),M5e=a("p"),MTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ETr=l(),cn=a("p"),CTr=o("The model class to instantiate is selected based on the "),E5e=a("code"),wTr=o("model_type"),ATr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),xTr=o("pretrained_model_name_or_path"),$Tr=o(":"),kTr=l(),ce=a("ul"),mM=a("li"),A5e=a("strong"),STr=o("albert"),RTr=o(" \u2014 "),qH=a("a"),BTr=o("TFAlbertForQuestionAnswering"),PTr=o(" (ALBERT model)"),ITr=l(),gM=a("li"),y5e=a("strong"),qTr=o("bert"),NTr=o(" \u2014 "),NH=a("a"),jTr=o("TFBertForQuestionAnswering"),DTr=o(" (BERT model)"),GTr=l(),hM=a("li"),L5e=a("strong"),OTr=o("camembert"),VTr=o(" \u2014 "),jH=a("a"),XTr=o("TFCamembertForQuestionAnswering"),zTr=o(" (CamemBERT model)"),QTr=l(),pM=a("li"),x5e=a("strong"),WTr=o("convbert"),HTr=o(" \u2014 "),DH=a("a"),UTr=o("TFConvBertForQuestionAnswering"),JTr=o(" (ConvBERT model)"),YTr=l(),uM=a("li"),$5e=a("strong"),KTr=o("deberta"),ZTr=o(" \u2014 "),GH=a("a"),e7r=o("TFDebertaForQuestionAnswering"),o7r=o(" (DeBERTa model)"),r7r=l(),_M=a("li"),k5e=a("strong"),t7r=o("deberta-v2"),a7r=o(" \u2014 "),OH=a("a"),n7r=o("TFDebertaV2ForQuestionAnswering"),s7r=o(" (DeBERTa-v2 model)"),l7r=l(),bM=a("li"),S5e=a("strong"),i7r=o("distilbert"),d7r=o(" \u2014 "),VH=a("a"),c7r=o("TFDistilBertForQuestionAnswering"),f7r=o(" (DistilBERT model)"),m7r=l(),vM=a("li"),R5e=a("strong"),g7r=o("electra"),h7r=o(" \u2014 "),XH=a("a"),p7r=o("TFElectraForQuestionAnswering"),u7r=o(" (ELECTRA model)"),_7r=l(),FM=a("li"),B5e=a("strong"),b7r=o("flaubert"),v7r=o(" \u2014 "),zH=a("a"),F7r=o("TFFlaubertForQuestionAnsweringSimple"),T7r=o(" (FlauBERT model)"),M7r=l(),TM=a("li"),P5e=a("strong"),E7r=o("funnel"),C7r=o(" \u2014 "),QH=a("a"),w7r=o("TFFunnelForQuestionAnswering"),A7r=o(" (Funnel Transformer model)"),y7r=l(),MM=a("li"),I5e=a("strong"),L7r=o("gptj"),x7r=o(" \u2014 "),WH=a("a"),$7r=o("TFGPTJForQuestionAnswering"),k7r=o(" (GPT-J model)"),S7r=l(),EM=a("li"),q5e=a("strong"),R7r=o("longformer"),B7r=o(" \u2014 "),HH=a("a"),P7r=o("TFLongformerForQuestionAnswering"),I7r=o(" (Longformer model)"),q7r=l(),CM=a("li"),N5e=a("strong"),N7r=o("mobilebert"),j7r=o(" \u2014 "),UH=a("a"),D7r=o("TFMobileBertForQuestionAnswering"),G7r=o(" (MobileBERT model)"),O7r=l(),wM=a("li"),j5e=a("strong"),V7r=o("mpnet"),X7r=o(" \u2014 "),JH=a("a"),z7r=o("TFMPNetForQuestionAnswering"),Q7r=o(" (MPNet model)"),W7r=l(),AM=a("li"),D5e=a("strong"),H7r=o("rembert"),U7r=o(" \u2014 "),YH=a("a"),J7r=o("TFRemBertForQuestionAnswering"),Y7r=o(" (RemBERT model)"),K7r=l(),yM=a("li"),G5e=a("strong"),Z7r=o("roberta"),eMr=o(" \u2014 "),KH=a("a"),oMr=o("TFRobertaForQuestionAnswering"),rMr=o(" (RoBERTa model)"),tMr=l(),LM=a("li"),O5e=a("strong"),aMr=o("roformer"),nMr=o(" \u2014 "),ZH=a("a"),sMr=o("TFRoFormerForQuestionAnswering"),lMr=o(" (RoFormer model)"),iMr=l(),xM=a("li"),V5e=a("strong"),dMr=o("xlm"),cMr=o(" \u2014 "),eU=a("a"),fMr=o("TFXLMForQuestionAnsweringSimple"),mMr=o(" (XLM model)"),gMr=l(),$M=a("li"),X5e=a("strong"),hMr=o("xlm-roberta"),pMr=o(" \u2014 "),oU=a("a"),uMr=o("TFXLMRobertaForQuestionAnswering"),_Mr=o(" (XLM-RoBERTa model)"),bMr=l(),kM=a("li"),z5e=a("strong"),vMr=o("xlnet"),FMr=o(" \u2014 "),rU=a("a"),TMr=o("TFXLNetForQuestionAnsweringSimple"),MMr=o(" (XLNet model)"),EMr=l(),F(SM.$$.fragment),IIe=l(),Fc=a("h2"),RM=a("a"),Q5e=a("span"),F($8.$$.fragment),CMr=l(),W5e=a("span"),wMr=o("TFAutoModelForVision2Seq"),qIe=l(),dr=a("div"),F(k8.$$.fragment),AMr=l(),Tc=a("p"),yMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=a("a"),LMr=o("from_pretrained()"),xMr=o(" class method or the "),aU=a("a"),$Mr=o("from_config()"),kMr=o(` class
method.`),SMr=l(),S8=a("p"),RMr=o("This class cannot be instantiated directly using "),H5e=a("code"),BMr=o("__init__()"),PMr=o(" (throws an error)."),IMr=l(),qt=a("div"),F(R8.$$.fragment),qMr=l(),U5e=a("p"),NMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jMr=l(),Mc=a("p"),DMr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),GMr=o("not"),OMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),VMr=o("from_pretrained()"),XMr=o(" to load the model weights."),zMr=l(),F(BM.$$.fragment),QMr=l(),qr=a("div"),F(B8.$$.fragment),WMr=l(),Y5e=a("p"),HMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UMr=l(),fn=a("p"),JMr=o("The model class to instantiate is selected based on the "),K5e=a("code"),YMr=o("model_type"),KMr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),ZMr=o("pretrained_model_name_or_path"),eEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),oEr=o("pretrained_model_name_or_path"),rEr=o(":"),tEr=l(),ove=a("ul"),PM=a("li"),rve=a("strong"),aEr=o("vision-encoder-decoder"),nEr=o(" \u2014 "),sU=a("a"),sEr=o("TFVisionEncoderDecoderModel"),lEr=o(" (Vision Encoder decoder model)"),iEr=l(),F(IM.$$.fragment),NIe=l(),Ec=a("h2"),qM=a("a"),tve=a("span"),F(P8.$$.fragment),dEr=l(),ave=a("span"),cEr=o("TFAutoModelForSpeechSeq2Seq"),jIe=l(),cr=a("div"),F(I8.$$.fragment),fEr=l(),Cc=a("p"),mEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=a("a"),gEr=o("from_pretrained()"),hEr=o(" class method or the "),iU=a("a"),pEr=o("from_config()"),uEr=o(` class
method.`),_Er=l(),q8=a("p"),bEr=o("This class cannot be instantiated directly using "),nve=a("code"),vEr=o("__init__()"),FEr=o(" (throws an error)."),TEr=l(),Nt=a("div"),F(N8.$$.fragment),MEr=l(),sve=a("p"),EEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),CEr=l(),wc=a("p"),wEr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),AEr=o("not"),yEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),LEr=o("from_pretrained()"),xEr=o(" to load the model weights."),$Er=l(),F(NM.$$.fragment),kEr=l(),Nr=a("div"),F(j8.$$.fragment),SEr=l(),ive=a("p"),REr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BEr=l(),mn=a("p"),PEr=o("The model class to instantiate is selected based on the "),dve=a("code"),IEr=o("model_type"),qEr=o(` property of the config object (either
passed as an argument or loaded from `),cve=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=a("code"),DEr=o("pretrained_model_name_or_path"),GEr=o(":"),OEr=l(),mve=a("ul"),jM=a("li"),gve=a("strong"),VEr=o("speech_to_text"),XEr=o(" \u2014 "),cU=a("a"),zEr=o("TFSpeech2TextForConditionalGeneration"),QEr=o(" (Speech2Text model)"),WEr=l(),F(DM.$$.fragment),DIe=l(),Ac=a("h2"),GM=a("a"),hve=a("span"),F(D8.$$.fragment),HEr=l(),pve=a("span"),UEr=o("FlaxAutoModel"),GIe=l(),fr=a("div"),F(G8.$$.fragment),JEr=l(),yc=a("p"),YEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=a("a"),KEr=o("from_pretrained()"),ZEr=o(" class method or the "),mU=a("a"),eCr=o("from_config()"),oCr=o(` class
method.`),rCr=l(),O8=a("p"),tCr=o("This class cannot be instantiated directly using "),uve=a("code"),aCr=o("__init__()"),nCr=o(" (throws an error)."),sCr=l(),jt=a("div"),F(V8.$$.fragment),lCr=l(),_ve=a("p"),iCr=o("Instantiates one of the base model classes of the library from a configuration."),dCr=l(),Lc=a("p"),cCr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),fCr=o("not"),mCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),gCr=o("from_pretrained()"),hCr=o(" to load the model weights."),pCr=l(),F(OM.$$.fragment),uCr=l(),jr=a("div"),F(X8.$$.fragment),_Cr=l(),vve=a("p"),bCr=o("Instantiate one of the base model classes of the library from a pretrained model."),vCr=l(),gn=a("p"),FCr=o("The model class to instantiate is selected based on the "),Fve=a("code"),TCr=o("model_type"),MCr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),ECr=o("pretrained_model_name_or_path"),CCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),wCr=o("pretrained_model_name_or_path"),ACr=o(":"),yCr=l(),oe=a("ul"),VM=a("li"),Eve=a("strong"),LCr=o("albert"),xCr=o(" \u2014 "),hU=a("a"),$Cr=o("FlaxAlbertModel"),kCr=o(" (ALBERT model)"),SCr=l(),XM=a("li"),Cve=a("strong"),RCr=o("bart"),BCr=o(" \u2014 "),pU=a("a"),PCr=o("FlaxBartModel"),ICr=o(" (BART model)"),qCr=l(),zM=a("li"),wve=a("strong"),NCr=o("beit"),jCr=o(" \u2014 "),uU=a("a"),DCr=o("FlaxBeitModel"),GCr=o(" (BEiT model)"),OCr=l(),QM=a("li"),Ave=a("strong"),VCr=o("bert"),XCr=o(" \u2014 "),_U=a("a"),zCr=o("FlaxBertModel"),QCr=o(" (BERT model)"),WCr=l(),WM=a("li"),yve=a("strong"),HCr=o("big_bird"),UCr=o(" \u2014 "),bU=a("a"),JCr=o("FlaxBigBirdModel"),YCr=o(" (BigBird model)"),KCr=l(),HM=a("li"),Lve=a("strong"),ZCr=o("blenderbot"),e3r=o(" \u2014 "),vU=a("a"),o3r=o("FlaxBlenderbotModel"),r3r=o(" (Blenderbot model)"),t3r=l(),UM=a("li"),xve=a("strong"),a3r=o("blenderbot-small"),n3r=o(" \u2014 "),FU=a("a"),s3r=o("FlaxBlenderbotSmallModel"),l3r=o(" (BlenderbotSmall model)"),i3r=l(),JM=a("li"),$ve=a("strong"),d3r=o("clip"),c3r=o(" \u2014 "),TU=a("a"),f3r=o("FlaxCLIPModel"),m3r=o(" (CLIP model)"),g3r=l(),YM=a("li"),kve=a("strong"),h3r=o("distilbert"),p3r=o(" \u2014 "),MU=a("a"),u3r=o("FlaxDistilBertModel"),_3r=o(" (DistilBERT model)"),b3r=l(),KM=a("li"),Sve=a("strong"),v3r=o("electra"),F3r=o(" \u2014 "),EU=a("a"),T3r=o("FlaxElectraModel"),M3r=o(" (ELECTRA model)"),E3r=l(),ZM=a("li"),Rve=a("strong"),C3r=o("gpt2"),w3r=o(" \u2014 "),CU=a("a"),A3r=o("FlaxGPT2Model"),y3r=o(" (OpenAI GPT-2 model)"),L3r=l(),eE=a("li"),Bve=a("strong"),x3r=o("gpt_neo"),$3r=o(" \u2014 "),wU=a("a"),k3r=o("FlaxGPTNeoModel"),S3r=o(" (GPT Neo model)"),R3r=l(),oE=a("li"),Pve=a("strong"),B3r=o("gptj"),P3r=o(" \u2014 "),AU=a("a"),I3r=o("FlaxGPTJModel"),q3r=o(" (GPT-J model)"),N3r=l(),rE=a("li"),Ive=a("strong"),j3r=o("marian"),D3r=o(" \u2014 "),yU=a("a"),G3r=o("FlaxMarianModel"),O3r=o(" (Marian model)"),V3r=l(),tE=a("li"),qve=a("strong"),X3r=o("mbart"),z3r=o(" \u2014 "),LU=a("a"),Q3r=o("FlaxMBartModel"),W3r=o(" (mBART model)"),H3r=l(),aE=a("li"),Nve=a("strong"),U3r=o("mt5"),J3r=o(" \u2014 "),xU=a("a"),Y3r=o("FlaxMT5Model"),K3r=o(" (mT5 model)"),Z3r=l(),nE=a("li"),jve=a("strong"),ewr=o("pegasus"),owr=o(" \u2014 "),$U=a("a"),rwr=o("FlaxPegasusModel"),twr=o(" (Pegasus model)"),awr=l(),sE=a("li"),Dve=a("strong"),nwr=o("roberta"),swr=o(" \u2014 "),kU=a("a"),lwr=o("FlaxRobertaModel"),iwr=o(" (RoBERTa model)"),dwr=l(),lE=a("li"),Gve=a("strong"),cwr=o("roformer"),fwr=o(" \u2014 "),SU=a("a"),mwr=o("FlaxRoFormerModel"),gwr=o(" (RoFormer model)"),hwr=l(),iE=a("li"),Ove=a("strong"),pwr=o("t5"),uwr=o(" \u2014 "),RU=a("a"),_wr=o("FlaxT5Model"),bwr=o(" (T5 model)"),vwr=l(),dE=a("li"),Vve=a("strong"),Fwr=o("vision-text-dual-encoder"),Twr=o(" \u2014 "),BU=a("a"),Mwr=o("FlaxVisionTextDualEncoderModel"),Ewr=o(" (VisionTextDualEncoder model)"),Cwr=l(),cE=a("li"),Xve=a("strong"),wwr=o("vit"),Awr=o(" \u2014 "),PU=a("a"),ywr=o("FlaxViTModel"),Lwr=o(" (ViT model)"),xwr=l(),fE=a("li"),zve=a("strong"),$wr=o("wav2vec2"),kwr=o(" \u2014 "),IU=a("a"),Swr=o("FlaxWav2Vec2Model"),Rwr=o(" (Wav2Vec2 model)"),Bwr=l(),mE=a("li"),Qve=a("strong"),Pwr=o("xglm"),Iwr=o(" \u2014 "),qU=a("a"),qwr=o("FlaxXGLMModel"),Nwr=o(" (XGLM model)"),jwr=l(),gE=a("li"),Wve=a("strong"),Dwr=o("xlm-roberta"),Gwr=o(" \u2014 "),NU=a("a"),Owr=o("FlaxXLMRobertaModel"),Vwr=o(" (XLM-RoBERTa model)"),Xwr=l(),F(hE.$$.fragment),OIe=l(),xc=a("h2"),pE=a("a"),Hve=a("span"),F(z8.$$.fragment),zwr=l(),Uve=a("span"),Qwr=o("FlaxAutoModelForCausalLM"),VIe=l(),mr=a("div"),F(Q8.$$.fragment),Wwr=l(),$c=a("p"),Hwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=a("a"),Uwr=o("from_pretrained()"),Jwr=o(" class method or the "),DU=a("a"),Ywr=o("from_config()"),Kwr=o(` class
method.`),Zwr=l(),W8=a("p"),eAr=o("This class cannot be instantiated directly using "),Jve=a("code"),oAr=o("__init__()"),rAr=o(" (throws an error)."),tAr=l(),Dt=a("div"),F(H8.$$.fragment),aAr=l(),Yve=a("p"),nAr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),sAr=l(),kc=a("p"),lAr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),iAr=o("not"),dAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),cAr=o("from_pretrained()"),fAr=o(" to load the model weights."),mAr=l(),F(uE.$$.fragment),gAr=l(),Dr=a("div"),F(U8.$$.fragment),hAr=l(),Zve=a("p"),pAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),uAr=l(),hn=a("p"),_Ar=o("The model class to instantiate is selected based on the "),eFe=a("code"),bAr=o("model_type"),vAr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),FAr=o("pretrained_model_name_or_path"),TAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),MAr=o("pretrained_model_name_or_path"),EAr=o(":"),CAr=l(),ke=a("ul"),_E=a("li"),tFe=a("strong"),wAr=o("bart"),AAr=o(" \u2014 "),OU=a("a"),yAr=o("FlaxBartForCausalLM"),LAr=o(" (BART model)"),xAr=l(),bE=a("li"),aFe=a("strong"),$Ar=o("bert"),kAr=o(" \u2014 "),VU=a("a"),SAr=o("FlaxBertForCausalLM"),RAr=o(" (BERT model)"),BAr=l(),vE=a("li"),nFe=a("strong"),PAr=o("big_bird"),IAr=o(" \u2014 "),XU=a("a"),qAr=o("FlaxBigBirdForCausalLM"),NAr=o(" (BigBird model)"),jAr=l(),FE=a("li"),sFe=a("strong"),DAr=o("electra"),GAr=o(" \u2014 "),zU=a("a"),OAr=o("FlaxElectraForCausalLM"),VAr=o(" (ELECTRA model)"),XAr=l(),TE=a("li"),lFe=a("strong"),zAr=o("gpt2"),QAr=o(" \u2014 "),QU=a("a"),WAr=o("FlaxGPT2LMHeadModel"),HAr=o(" (OpenAI GPT-2 model)"),UAr=l(),ME=a("li"),iFe=a("strong"),JAr=o("gpt_neo"),YAr=o(" \u2014 "),WU=a("a"),KAr=o("FlaxGPTNeoForCausalLM"),ZAr=o(" (GPT Neo model)"),e6r=l(),EE=a("li"),dFe=a("strong"),o6r=o("gptj"),r6r=o(" \u2014 "),HU=a("a"),t6r=o("FlaxGPTJForCausalLM"),a6r=o(" (GPT-J model)"),n6r=l(),CE=a("li"),cFe=a("strong"),s6r=o("roberta"),l6r=o(" \u2014 "),UU=a("a"),i6r=o("FlaxRobertaForCausalLM"),d6r=o(" (RoBERTa model)"),c6r=l(),wE=a("li"),fFe=a("strong"),f6r=o("xglm"),m6r=o(" \u2014 "),JU=a("a"),g6r=o("FlaxXGLMForCausalLM"),h6r=o(" (XGLM model)"),p6r=l(),F(AE.$$.fragment),XIe=l(),Sc=a("h2"),yE=a("a"),mFe=a("span"),F(J8.$$.fragment),u6r=l(),gFe=a("span"),_6r=o("FlaxAutoModelForPreTraining"),zIe=l(),gr=a("div"),F(Y8.$$.fragment),b6r=l(),Rc=a("p"),v6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=a("a"),F6r=o("from_pretrained()"),T6r=o(" class method or the "),KU=a("a"),M6r=o("from_config()"),E6r=o(` class
method.`),C6r=l(),K8=a("p"),w6r=o("This class cannot be instantiated directly using "),hFe=a("code"),A6r=o("__init__()"),y6r=o(" (throws an error)."),L6r=l(),Gt=a("div"),F(Z8.$$.fragment),x6r=l(),pFe=a("p"),$6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k6r=l(),Bc=a("p"),S6r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),R6r=o("not"),B6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),P6r=o("from_pretrained()"),I6r=o(" to load the model weights."),q6r=l(),F(LE.$$.fragment),N6r=l(),Gr=a("div"),F(ex.$$.fragment),j6r=l(),_Fe=a("p"),D6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),G6r=l(),pn=a("p"),O6r=o("The model class to instantiate is selected based on the "),bFe=a("code"),V6r=o("model_type"),X6r=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),z6r=o("pretrained_model_name_or_path"),Q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),W6r=o("pretrained_model_name_or_path"),H6r=o(":"),U6r=l(),Me=a("ul"),xE=a("li"),TFe=a("strong"),J6r=o("albert"),Y6r=o(" \u2014 "),eJ=a("a"),K6r=o("FlaxAlbertForPreTraining"),Z6r=o(" (ALBERT model)"),eyr=l(),$E=a("li"),MFe=a("strong"),oyr=o("bart"),ryr=o(" \u2014 "),oJ=a("a"),tyr=o("FlaxBartForConditionalGeneration"),ayr=o(" (BART model)"),nyr=l(),kE=a("li"),EFe=a("strong"),syr=o("bert"),lyr=o(" \u2014 "),rJ=a("a"),iyr=o("FlaxBertForPreTraining"),dyr=o(" (BERT model)"),cyr=l(),SE=a("li"),CFe=a("strong"),fyr=o("big_bird"),myr=o(" \u2014 "),tJ=a("a"),gyr=o("FlaxBigBirdForPreTraining"),hyr=o(" (BigBird model)"),pyr=l(),RE=a("li"),wFe=a("strong"),uyr=o("electra"),_yr=o(" \u2014 "),aJ=a("a"),byr=o("FlaxElectraForPreTraining"),vyr=o(" (ELECTRA model)"),Fyr=l(),BE=a("li"),AFe=a("strong"),Tyr=o("mbart"),Myr=o(" \u2014 "),nJ=a("a"),Eyr=o("FlaxMBartForConditionalGeneration"),Cyr=o(" (mBART model)"),wyr=l(),PE=a("li"),yFe=a("strong"),Ayr=o("mt5"),yyr=o(" \u2014 "),sJ=a("a"),Lyr=o("FlaxMT5ForConditionalGeneration"),xyr=o(" (mT5 model)"),$yr=l(),IE=a("li"),LFe=a("strong"),kyr=o("roberta"),Syr=o(" \u2014 "),lJ=a("a"),Ryr=o("FlaxRobertaForMaskedLM"),Byr=o(" (RoBERTa model)"),Pyr=l(),qE=a("li"),xFe=a("strong"),Iyr=o("roformer"),qyr=o(" \u2014 "),iJ=a("a"),Nyr=o("FlaxRoFormerForMaskedLM"),jyr=o(" (RoFormer model)"),Dyr=l(),NE=a("li"),$Fe=a("strong"),Gyr=o("t5"),Oyr=o(" \u2014 "),dJ=a("a"),Vyr=o("FlaxT5ForConditionalGeneration"),Xyr=o(" (T5 model)"),zyr=l(),jE=a("li"),kFe=a("strong"),Qyr=o("wav2vec2"),Wyr=o(" \u2014 "),cJ=a("a"),Hyr=o("FlaxWav2Vec2ForPreTraining"),Uyr=o(" (Wav2Vec2 model)"),Jyr=l(),DE=a("li"),SFe=a("strong"),Yyr=o("xlm-roberta"),Kyr=o(" \u2014 "),fJ=a("a"),Zyr=o("FlaxXLMRobertaForMaskedLM"),eLr=o(" (XLM-RoBERTa model)"),oLr=l(),F(GE.$$.fragment),QIe=l(),Pc=a("h2"),OE=a("a"),RFe=a("span"),F(ox.$$.fragment),rLr=l(),BFe=a("span"),tLr=o("FlaxAutoModelForMaskedLM"),WIe=l(),hr=a("div"),F(rx.$$.fragment),aLr=l(),Ic=a("p"),nLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=a("a"),sLr=o("from_pretrained()"),lLr=o(" class method or the "),gJ=a("a"),iLr=o("from_config()"),dLr=o(` class
method.`),cLr=l(),tx=a("p"),fLr=o("This class cannot be instantiated directly using "),PFe=a("code"),mLr=o("__init__()"),gLr=o(" (throws an error)."),hLr=l(),Ot=a("div"),F(ax.$$.fragment),pLr=l(),IFe=a("p"),uLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Lr=l(),qc=a("p"),bLr=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),vLr=o("not"),FLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),TLr=o("from_pretrained()"),MLr=o(" to load the model weights."),ELr=l(),F(VE.$$.fragment),CLr=l(),Or=a("div"),F(nx.$$.fragment),wLr=l(),NFe=a("p"),ALr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yLr=l(),un=a("p"),LLr=o("The model class to instantiate is selected based on the "),jFe=a("code"),xLr=o("model_type"),$Lr=o(` property of the config object (either
passed as an argument or loaded from `),DFe=a("code"),kLr=o("pretrained_model_name_or_path"),SLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(":"),PLr=l(),Le=a("ul"),XE=a("li"),OFe=a("strong"),ILr=o("albert"),qLr=o(" \u2014 "),pJ=a("a"),NLr=o("FlaxAlbertForMaskedLM"),jLr=o(" (ALBERT model)"),DLr=l(),zE=a("li"),VFe=a("strong"),GLr=o("bart"),OLr=o(" \u2014 "),uJ=a("a"),VLr=o("FlaxBartForConditionalGeneration"),XLr=o(" (BART model)"),zLr=l(),QE=a("li"),XFe=a("strong"),QLr=o("bert"),WLr=o(" \u2014 "),_J=a("a"),HLr=o("FlaxBertForMaskedLM"),ULr=o(" (BERT model)"),JLr=l(),WE=a("li"),zFe=a("strong"),YLr=o("big_bird"),KLr=o(" \u2014 "),bJ=a("a"),ZLr=o("FlaxBigBirdForMaskedLM"),e8r=o(" (BigBird model)"),o8r=l(),HE=a("li"),QFe=a("strong"),r8r=o("distilbert"),t8r=o(" \u2014 "),vJ=a("a"),a8r=o("FlaxDistilBertForMaskedLM"),n8r=o(" (DistilBERT model)"),s8r=l(),UE=a("li"),WFe=a("strong"),l8r=o("electra"),i8r=o(" \u2014 "),FJ=a("a"),d8r=o("FlaxElectraForMaskedLM"),c8r=o(" (ELECTRA model)"),f8r=l(),JE=a("li"),HFe=a("strong"),m8r=o("mbart"),g8r=o(" \u2014 "),TJ=a("a"),h8r=o("FlaxMBartForConditionalGeneration"),p8r=o(" (mBART model)"),u8r=l(),YE=a("li"),UFe=a("strong"),_8r=o("roberta"),b8r=o(" \u2014 "),MJ=a("a"),v8r=o("FlaxRobertaForMaskedLM"),F8r=o(" (RoBERTa model)"),T8r=l(),KE=a("li"),JFe=a("strong"),M8r=o("roformer"),E8r=o(" \u2014 "),EJ=a("a"),C8r=o("FlaxRoFormerForMaskedLM"),w8r=o(" (RoFormer model)"),A8r=l(),ZE=a("li"),YFe=a("strong"),y8r=o("xlm-roberta"),L8r=o(" \u2014 "),CJ=a("a"),x8r=o("FlaxXLMRobertaForMaskedLM"),$8r=o(" (XLM-RoBERTa model)"),k8r=l(),F(eC.$$.fragment),HIe=l(),Nc=a("h2"),oC=a("a"),KFe=a("span"),F(sx.$$.fragment),S8r=l(),ZFe=a("span"),R8r=o("FlaxAutoModelForSeq2SeqLM"),UIe=l(),pr=a("div"),F(lx.$$.fragment),B8r=l(),jc=a("p"),P8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=a("a"),I8r=o("from_pretrained()"),q8r=o(" class method or the "),AJ=a("a"),N8r=o("from_config()"),j8r=o(` class
method.`),D8r=l(),ix=a("p"),G8r=o("This class cannot be instantiated directly using "),e0e=a("code"),O8r=o("__init__()"),V8r=o(" (throws an error)."),X8r=l(),Vt=a("div"),F(dx.$$.fragment),z8r=l(),o0e=a("p"),Q8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),W8r=l(),Dc=a("p"),H8r=o(`Note:
Loading a model from its configuration file does `),r0e=a("strong"),U8r=o("not"),J8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),Y8r=o("from_pretrained()"),K8r=o(" to load the model weights."),Z8r=l(),F(rC.$$.fragment),exr=l(),Vr=a("div"),F(cx.$$.fragment),oxr=l(),t0e=a("p"),rxr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),txr=l(),_n=a("p"),axr=o("The model class to instantiate is selected based on the "),a0e=a("code"),nxr=o("model_type"),sxr=o(` property of the config object (either
passed as an argument or loaded from `),n0e=a("code"),lxr=o("pretrained_model_name_or_path"),ixr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=a("code"),dxr=o("pretrained_model_name_or_path"),cxr=o(":"),fxr=l(),Se=a("ul"),tC=a("li"),l0e=a("strong"),mxr=o("bart"),gxr=o(" \u2014 "),LJ=a("a"),hxr=o("FlaxBartForConditionalGeneration"),pxr=o(" (BART model)"),uxr=l(),aC=a("li"),i0e=a("strong"),_xr=o("blenderbot"),bxr=o(" \u2014 "),xJ=a("a"),vxr=o("FlaxBlenderbotForConditionalGeneration"),Fxr=o(" (Blenderbot model)"),Txr=l(),nC=a("li"),d0e=a("strong"),Mxr=o("blenderbot-small"),Exr=o(" \u2014 "),$J=a("a"),Cxr=o("FlaxBlenderbotSmallForConditionalGeneration"),wxr=o(" (BlenderbotSmall model)"),Axr=l(),sC=a("li"),c0e=a("strong"),yxr=o("encoder-decoder"),Lxr=o(" \u2014 "),kJ=a("a"),xxr=o("FlaxEncoderDecoderModel"),$xr=o(" (Encoder decoder model)"),kxr=l(),lC=a("li"),f0e=a("strong"),Sxr=o("marian"),Rxr=o(" \u2014 "),SJ=a("a"),Bxr=o("FlaxMarianMTModel"),Pxr=o(" (Marian model)"),Ixr=l(),iC=a("li"),m0e=a("strong"),qxr=o("mbart"),Nxr=o(" \u2014 "),RJ=a("a"),jxr=o("FlaxMBartForConditionalGeneration"),Dxr=o(" (mBART model)"),Gxr=l(),dC=a("li"),g0e=a("strong"),Oxr=o("mt5"),Vxr=o(" \u2014 "),BJ=a("a"),Xxr=o("FlaxMT5ForConditionalGeneration"),zxr=o(" (mT5 model)"),Qxr=l(),cC=a("li"),h0e=a("strong"),Wxr=o("pegasus"),Hxr=o(" \u2014 "),PJ=a("a"),Uxr=o("FlaxPegasusForConditionalGeneration"),Jxr=o(" (Pegasus model)"),Yxr=l(),fC=a("li"),p0e=a("strong"),Kxr=o("t5"),Zxr=o(" \u2014 "),IJ=a("a"),e9r=o("FlaxT5ForConditionalGeneration"),o9r=o(" (T5 model)"),r9r=l(),F(mC.$$.fragment),JIe=l(),Gc=a("h2"),gC=a("a"),u0e=a("span"),F(fx.$$.fragment),t9r=l(),_0e=a("span"),a9r=o("FlaxAutoModelForSequenceClassification"),YIe=l(),ur=a("div"),F(mx.$$.fragment),n9r=l(),Oc=a("p"),s9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=a("a"),l9r=o("from_pretrained()"),i9r=o(" class method or the "),NJ=a("a"),d9r=o("from_config()"),c9r=o(` class
method.`),f9r=l(),gx=a("p"),m9r=o("This class cannot be instantiated directly using "),b0e=a("code"),g9r=o("__init__()"),h9r=o(" (throws an error)."),p9r=l(),Xt=a("div"),F(hx.$$.fragment),u9r=l(),v0e=a("p"),_9r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b9r=l(),Vc=a("p"),v9r=o(`Note:
Loading a model from its configuration file does `),F0e=a("strong"),F9r=o("not"),T9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),M9r=o("from_pretrained()"),E9r=o(" to load the model weights."),C9r=l(),F(hC.$$.fragment),w9r=l(),Xr=a("div"),F(px.$$.fragment),A9r=l(),T0e=a("p"),y9r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),L9r=l(),bn=a("p"),x9r=o("The model class to instantiate is selected based on the "),M0e=a("code"),$9r=o("model_type"),k9r=o(` property of the config object (either
passed as an argument or loaded from `),E0e=a("code"),S9r=o("pretrained_model_name_or_path"),R9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=a("code"),B9r=o("pretrained_model_name_or_path"),P9r=o(":"),I9r=l(),xe=a("ul"),pC=a("li"),w0e=a("strong"),q9r=o("albert"),N9r=o(" \u2014 "),DJ=a("a"),j9r=o("FlaxAlbertForSequenceClassification"),D9r=o(" (ALBERT model)"),G9r=l(),uC=a("li"),A0e=a("strong"),O9r=o("bart"),V9r=o(" \u2014 "),GJ=a("a"),X9r=o("FlaxBartForSequenceClassification"),z9r=o(" (BART model)"),Q9r=l(),_C=a("li"),y0e=a("strong"),W9r=o("bert"),H9r=o(" \u2014 "),OJ=a("a"),U9r=o("FlaxBertForSequenceClassification"),J9r=o(" (BERT model)"),Y9r=l(),bC=a("li"),L0e=a("strong"),K9r=o("big_bird"),Z9r=o(" \u2014 "),VJ=a("a"),e$r=o("FlaxBigBirdForSequenceClassification"),o$r=o(" (BigBird model)"),r$r=l(),vC=a("li"),x0e=a("strong"),t$r=o("distilbert"),a$r=o(" \u2014 "),XJ=a("a"),n$r=o("FlaxDistilBertForSequenceClassification"),s$r=o(" (DistilBERT model)"),l$r=l(),FC=a("li"),$0e=a("strong"),i$r=o("electra"),d$r=o(" \u2014 "),zJ=a("a"),c$r=o("FlaxElectraForSequenceClassification"),f$r=o(" (ELECTRA model)"),m$r=l(),TC=a("li"),k0e=a("strong"),g$r=o("mbart"),h$r=o(" \u2014 "),QJ=a("a"),p$r=o("FlaxMBartForSequenceClassification"),u$r=o(" (mBART model)"),_$r=l(),MC=a("li"),S0e=a("strong"),b$r=o("roberta"),v$r=o(" \u2014 "),WJ=a("a"),F$r=o("FlaxRobertaForSequenceClassification"),T$r=o(" (RoBERTa model)"),M$r=l(),EC=a("li"),R0e=a("strong"),E$r=o("roformer"),C$r=o(" \u2014 "),HJ=a("a"),w$r=o("FlaxRoFormerForSequenceClassification"),A$r=o(" (RoFormer model)"),y$r=l(),CC=a("li"),B0e=a("strong"),L$r=o("xlm-roberta"),x$r=o(" \u2014 "),UJ=a("a"),$$r=o("FlaxXLMRobertaForSequenceClassification"),k$r=o(" (XLM-RoBERTa model)"),S$r=l(),F(wC.$$.fragment),KIe=l(),Xc=a("h2"),AC=a("a"),P0e=a("span"),F(ux.$$.fragment),R$r=l(),I0e=a("span"),B$r=o("FlaxAutoModelForQuestionAnswering"),ZIe=l(),_r=a("div"),F(_x.$$.fragment),P$r=l(),zc=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=a("a"),q$r=o("from_pretrained()"),N$r=o(" class method or the "),YJ=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),bx=a("p"),O$r=o("This class cannot be instantiated directly using "),q0e=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),zt=a("div"),F(vx.$$.fragment),Q$r=l(),N0e=a("p"),W$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H$r=l(),Qc=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),j0e=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),ekr=l(),F(yC.$$.fragment),okr=l(),zr=a("div"),F(Fx.$$.fragment),rkr=l(),D0e=a("p"),tkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),akr=l(),vn=a("p"),nkr=o("The model class to instantiate is selected based on the "),G0e=a("code"),skr=o("model_type"),lkr=o(` property of the config object (either
passed as an argument or loaded from `),O0e=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(":"),mkr=l(),$e=a("ul"),LC=a("li"),X0e=a("strong"),gkr=o("albert"),hkr=o(" \u2014 "),ZJ=a("a"),pkr=o("FlaxAlbertForQuestionAnswering"),ukr=o(" (ALBERT model)"),_kr=l(),xC=a("li"),z0e=a("strong"),bkr=o("bart"),vkr=o(" \u2014 "),eY=a("a"),Fkr=o("FlaxBartForQuestionAnswering"),Tkr=o(" (BART model)"),Mkr=l(),$C=a("li"),Q0e=a("strong"),Ekr=o("bert"),Ckr=o(" \u2014 "),oY=a("a"),wkr=o("FlaxBertForQuestionAnswering"),Akr=o(" (BERT model)"),ykr=l(),kC=a("li"),W0e=a("strong"),Lkr=o("big_bird"),xkr=o(" \u2014 "),rY=a("a"),$kr=o("FlaxBigBirdForQuestionAnswering"),kkr=o(" (BigBird model)"),Skr=l(),SC=a("li"),H0e=a("strong"),Rkr=o("distilbert"),Bkr=o(" \u2014 "),tY=a("a"),Pkr=o("FlaxDistilBertForQuestionAnswering"),Ikr=o(" (DistilBERT model)"),qkr=l(),RC=a("li"),U0e=a("strong"),Nkr=o("electra"),jkr=o(" \u2014 "),aY=a("a"),Dkr=o("FlaxElectraForQuestionAnswering"),Gkr=o(" (ELECTRA model)"),Okr=l(),BC=a("li"),J0e=a("strong"),Vkr=o("mbart"),Xkr=o(" \u2014 "),nY=a("a"),zkr=o("FlaxMBartForQuestionAnswering"),Qkr=o(" (mBART model)"),Wkr=l(),PC=a("li"),Y0e=a("strong"),Hkr=o("roberta"),Ukr=o(" \u2014 "),sY=a("a"),Jkr=o("FlaxRobertaForQuestionAnswering"),Ykr=o(" (RoBERTa model)"),Kkr=l(),IC=a("li"),K0e=a("strong"),Zkr=o("roformer"),eSr=o(" \u2014 "),lY=a("a"),oSr=o("FlaxRoFormerForQuestionAnswering"),rSr=o(" (RoFormer model)"),tSr=l(),qC=a("li"),Z0e=a("strong"),aSr=o("xlm-roberta"),nSr=o(" \u2014 "),iY=a("a"),sSr=o("FlaxXLMRobertaForQuestionAnswering"),lSr=o(" (XLM-RoBERTa model)"),iSr=l(),F(NC.$$.fragment),eqe=l(),Wc=a("h2"),jC=a("a"),eTe=a("span"),F(Tx.$$.fragment),dSr=l(),oTe=a("span"),cSr=o("FlaxAutoModelForTokenClassification"),oqe=l(),br=a("div"),F(Mx.$$.fragment),fSr=l(),Hc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),cY=a("a"),pSr=o("from_config()"),uSr=o(` class
method.`),_Sr=l(),Ex=a("p"),bSr=o("This class cannot be instantiated directly using "),rTe=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Qt=a("div"),F(Cx.$$.fragment),MSr=l(),tTe=a("p"),ESr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CSr=l(),Uc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),aTe=a("strong"),ASr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),LSr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(DC.$$.fragment),kSr=l(),Qr=a("div"),F(wx.$$.fragment),SSr=l(),nTe=a("p"),RSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BSr=l(),Fn=a("p"),PSr=o("The model class to instantiate is selected based on the "),sTe=a("code"),ISr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),De=a("ul"),GC=a("li"),dTe=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),mY=a("a"),zSr=o("FlaxAlbertForTokenClassification"),QSr=o(" (ALBERT model)"),WSr=l(),OC=a("li"),cTe=a("strong"),HSr=o("bert"),USr=o(" \u2014 "),gY=a("a"),JSr=o("FlaxBertForTokenClassification"),YSr=o(" (BERT model)"),KSr=l(),VC=a("li"),fTe=a("strong"),ZSr=o("big_bird"),eRr=o(" \u2014 "),hY=a("a"),oRr=o("FlaxBigBirdForTokenClassification"),rRr=o(" (BigBird model)"),tRr=l(),XC=a("li"),mTe=a("strong"),aRr=o("distilbert"),nRr=o(" \u2014 "),pY=a("a"),sRr=o("FlaxDistilBertForTokenClassification"),lRr=o(" (DistilBERT model)"),iRr=l(),zC=a("li"),gTe=a("strong"),dRr=o("electra"),cRr=o(" \u2014 "),uY=a("a"),fRr=o("FlaxElectraForTokenClassification"),mRr=o(" (ELECTRA model)"),gRr=l(),QC=a("li"),hTe=a("strong"),hRr=o("roberta"),pRr=o(" \u2014 "),_Y=a("a"),uRr=o("FlaxRobertaForTokenClassification"),_Rr=o(" (RoBERTa model)"),bRr=l(),WC=a("li"),pTe=a("strong"),vRr=o("roformer"),FRr=o(" \u2014 "),bY=a("a"),TRr=o("FlaxRoFormerForTokenClassification"),MRr=o(" (RoFormer model)"),ERr=l(),HC=a("li"),uTe=a("strong"),CRr=o("xlm-roberta"),wRr=o(" \u2014 "),vY=a("a"),ARr=o("FlaxXLMRobertaForTokenClassification"),yRr=o(" (XLM-RoBERTa model)"),LRr=l(),F(UC.$$.fragment),rqe=l(),Jc=a("h2"),JC=a("a"),_Te=a("span"),F(Ax.$$.fragment),xRr=l(),bTe=a("span"),$Rr=o("FlaxAutoModelForMultipleChoice"),tqe=l(),vr=a("div"),F(yx.$$.fragment),kRr=l(),Yc=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FY=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),TY=a("a"),PRr=o("from_config()"),IRr=o(` class
method.`),qRr=l(),Lx=a("p"),NRr=o("This class cannot be instantiated directly using "),vTe=a("code"),jRr=o("__init__()"),DRr=o(" (throws an error)."),GRr=l(),Wt=a("div"),F(xx.$$.fragment),ORr=l(),FTe=a("p"),VRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XRr=l(),Kc=a("p"),zRr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),QRr=o("not"),WRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),HRr=o("from_pretrained()"),URr=o(" to load the model weights."),JRr=l(),F(YC.$$.fragment),YRr=l(),Wr=a("div"),F($x.$$.fragment),KRr=l(),MTe=a("p"),ZRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eBr=l(),Tn=a("p"),oBr=o("The model class to instantiate is selected based on the "),ETe=a("code"),rBr=o("model_type"),tBr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(":"),iBr=l(),Ge=a("ul"),KC=a("li"),ATe=a("strong"),dBr=o("albert"),cBr=o(" \u2014 "),EY=a("a"),fBr=o("FlaxAlbertForMultipleChoice"),mBr=o(" (ALBERT model)"),gBr=l(),ZC=a("li"),yTe=a("strong"),hBr=o("bert"),pBr=o(" \u2014 "),CY=a("a"),uBr=o("FlaxBertForMultipleChoice"),_Br=o(" (BERT model)"),bBr=l(),e3=a("li"),LTe=a("strong"),vBr=o("big_bird"),FBr=o(" \u2014 "),wY=a("a"),TBr=o("FlaxBigBirdForMultipleChoice"),MBr=o(" (BigBird model)"),EBr=l(),o3=a("li"),xTe=a("strong"),CBr=o("distilbert"),wBr=o(" \u2014 "),AY=a("a"),ABr=o("FlaxDistilBertForMultipleChoice"),yBr=o(" (DistilBERT model)"),LBr=l(),r3=a("li"),$Te=a("strong"),xBr=o("electra"),$Br=o(" \u2014 "),yY=a("a"),kBr=o("FlaxElectraForMultipleChoice"),SBr=o(" (ELECTRA model)"),RBr=l(),t3=a("li"),kTe=a("strong"),BBr=o("roberta"),PBr=o(" \u2014 "),LY=a("a"),IBr=o("FlaxRobertaForMultipleChoice"),qBr=o(" (RoBERTa model)"),NBr=l(),a3=a("li"),STe=a("strong"),jBr=o("roformer"),DBr=o(" \u2014 "),xY=a("a"),GBr=o("FlaxRoFormerForMultipleChoice"),OBr=o(" (RoFormer model)"),VBr=l(),n3=a("li"),RTe=a("strong"),XBr=o("xlm-roberta"),zBr=o(" \u2014 "),$Y=a("a"),QBr=o("FlaxXLMRobertaForMultipleChoice"),WBr=o(" (XLM-RoBERTa model)"),HBr=l(),F(s3.$$.fragment),aqe=l(),Zc=a("h2"),l3=a("a"),BTe=a("span"),F(kx.$$.fragment),UBr=l(),PTe=a("span"),JBr=o("FlaxAutoModelForNextSentencePrediction"),nqe=l(),Fr=a("div"),F(Sx.$$.fragment),YBr=l(),ef=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=a("a"),ZBr=o("from_pretrained()"),ePr=o(" class method or the "),SY=a("a"),oPr=o("from_config()"),rPr=o(` class
method.`),tPr=l(),Rx=a("p"),aPr=o("This class cannot be instantiated directly using "),ITe=a("code"),nPr=o("__init__()"),sPr=o(" (throws an error)."),lPr=l(),Ht=a("div"),F(Bx.$$.fragment),iPr=l(),qTe=a("p"),dPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cPr=l(),of=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),mPr=o("not"),gPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),hPr=o("from_pretrained()"),pPr=o(" to load the model weights."),uPr=l(),F(i3.$$.fragment),_Pr=l(),Hr=a("div"),F(Px.$$.fragment),bPr=l(),jTe=a("p"),vPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FPr=l(),Mn=a("p"),TPr=o("The model class to instantiate is selected based on the "),DTe=a("code"),MPr=o("model_type"),EPr=o(` property of the config object (either
passed as an argument or loaded from `),GTe=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(":"),LPr=l(),VTe=a("ul"),d3=a("li"),XTe=a("strong"),xPr=o("bert"),$Pr=o(" \u2014 "),BY=a("a"),kPr=o("FlaxBertForNextSentencePrediction"),SPr=o(" (BERT model)"),RPr=l(),F(c3.$$.fragment),sqe=l(),rf=a("h2"),f3=a("a"),zTe=a("span"),F(Ix.$$.fragment),BPr=l(),QTe=a("span"),PPr=o("FlaxAutoModelForImageClassification"),lqe=l(),Tr=a("div"),F(qx.$$.fragment),IPr=l(),tf=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=a("a"),NPr=o("from_pretrained()"),jPr=o(" class method or the "),IY=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),Nx=a("p"),VPr=o("This class cannot be instantiated directly using "),WTe=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Ut=a("div"),F(jx.$$.fragment),WPr=l(),HTe=a("p"),HPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UPr=l(),af=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),UTe=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(m3.$$.fragment),rIr=l(),Ur=a("div"),F(Dx.$$.fragment),tIr=l(),JTe=a("p"),aIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nIr=l(),En=a("p"),sIr=o("The model class to instantiate is selected based on the "),YTe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),KTe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),Gx=a("ul"),g3=a("li"),e7e=a("strong"),hIr=o("beit"),pIr=o(" \u2014 "),NY=a("a"),uIr=o("FlaxBeitForImageClassification"),_Ir=o(" (BEiT model)"),bIr=l(),h3=a("li"),o7e=a("strong"),vIr=o("vit"),FIr=o(" \u2014 "),jY=a("a"),TIr=o("FlaxViTForImageClassification"),MIr=o(" (ViT model)"),EIr=l(),F(p3.$$.fragment),iqe=l(),nf=a("h2"),u3=a("a"),r7e=a("span"),F(Ox.$$.fragment),CIr=l(),t7e=a("span"),wIr=o("FlaxAutoModelForVision2Seq"),dqe=l(),Mr=a("div"),F(Vx.$$.fragment),AIr=l(),sf=a("p"),yIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=a("a"),LIr=o("from_pretrained()"),xIr=o(" class method or the "),GY=a("a"),$Ir=o("from_config()"),kIr=o(` class
method.`),SIr=l(),Xx=a("p"),RIr=o("This class cannot be instantiated directly using "),a7e=a("code"),BIr=o("__init__()"),PIr=o(" (throws an error)."),IIr=l(),Jt=a("div"),F(zx.$$.fragment),qIr=l(),n7e=a("p"),NIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jIr=l(),lf=a("p"),DIr=o(`Note:
Loading a model from its configuration file does `),s7e=a("strong"),GIr=o("not"),OIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),VIr=o("from_pretrained()"),XIr=o(" to load the model weights."),zIr=l(),F(_3.$$.fragment),QIr=l(),Jr=a("div"),F(Qx.$$.fragment),WIr=l(),l7e=a("p"),HIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UIr=l(),Cn=a("p"),JIr=o("The model class to instantiate is selected based on the "),i7e=a("code"),YIr=o("model_type"),KIr=o(` property of the config object (either
passed as an argument or loaded from `),d7e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),f7e=a("ul"),b3=a("li"),m7e=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),VY=a("a"),sqr=o("FlaxVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),F(v3.$$.fragment),this.h()},l(f){const _=vwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Wx=s(p);m=n(Wx,"A",{id:!0,class:!0,href:!0});var g7e=s(m);u=n(g7e,"SPAN",{});var h7e=s(u);T(d.$$.fragment,h7e),h7e.forEach(t),g7e.forEach(t),h=i(Wx),Mo=n(Wx,"SPAN",{});var p7e=s(Mo);li=r(p7e,"Auto Classes"),p7e.forEach(t),Wx.forEach(t),mf=i(f),et=n(f,"P",{});var Hx=s(et);ii=r(Hx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(Hx,"CODE",{});var u7e=s(di);NA=r(u7e,"from_pretrained()"),u7e.forEach(t),gf=r(Hx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Hx.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var _7e=s(An);jA=r(_7e,"AutoConfig"),_7e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var b7e=s(Ln);DA=r(b7e,"AutoModel"),b7e.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var v7e=s(xn);GA=r(v7e,"AutoTokenizer"),v7e.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Ux=s(Ae);n$=r(Ux,"will create a model that is an instance of "),gi=n(Ux,"A",{href:!0});var F7e=s(gi);s$=r(F7e,"BertModel"),F7e.forEach(t),l$=r(Ux,"."),Ux.forEach(t),Eo=i(f),Ea=n(f,"P",{});var Jx=s(Ea);i$=r(Jx,"There is one class of "),pf=n(Jx,"CODE",{});var T7e=s(pf);d$=r(T7e,"AutoModel"),T7e.forEach(t),bje=r(Jx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Jx.forEach(t),lPe=i(f),hi=n(f,"H2",{class:!0});var Yx=s(hi);uf=n(Yx,"A",{id:!0,class:!0,href:!0});var M7e=s(uf);qZ=n(M7e,"SPAN",{});var E7e=s(qZ);T(OA.$$.fragment,E7e),E7e.forEach(t),M7e.forEach(t),vje=i(Yx),NZ=n(Yx,"SPAN",{});var C7e=s(NZ);Fje=r(C7e,"Extending the Auto Classes"),C7e.forEach(t),Yx.forEach(t),iPe=i(f),$n=n(f,"P",{});var df=s($n);Tje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=n(df,"CODE",{});var w7e=s(jZ);Mje=r(w7e,"NewModel"),w7e.forEach(t),Eje=r(df,", make sure you have a "),DZ=n(df,"CODE",{});var A7e=s(DZ);Cje=r(A7e,"NewModelConfig"),A7e.forEach(t),wje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),dPe=i(f),T(VA.$$.fragment,f),cPe=i(f),c$=n(f,"P",{});var y7e=s(c$);Aje=r(y7e,"You will then be able to use the auto classes like you would usually do!"),y7e.forEach(t),fPe=i(f),T(_f.$$.fragment,f),mPe=i(f),pi=n(f,"H2",{class:!0});var Kx=s(pi);bf=n(Kx,"A",{id:!0,class:!0,href:!0});var L7e=s(bf);GZ=n(L7e,"SPAN",{});var x7e=s(GZ);T(XA.$$.fragment,x7e),x7e.forEach(t),L7e.forEach(t),yje=i(Kx),OZ=n(Kx,"SPAN",{});var $7e=s(OZ);Lje=r($7e,"AutoConfig"),$7e.forEach(t),Kx.forEach(t),gPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(zA.$$.fragment,Kr),xje=i(Kr),QA=n(Kr,"P",{});var Zx=s(QA);$je=r(Zx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f$=n(Zx,"A",{href:!0});var k7e=s(f$);kje=r(k7e,"from_pretrained()"),k7e.forEach(t),Sje=r(Zx," class method."),Zx.forEach(t),Rje=i(Kr),WA=n(Kr,"P",{});var e9=s(WA);Bje=r(e9,"This class cannot be instantiated directly using "),VZ=n(e9,"CODE",{});var S7e=s(VZ);Pje=r(S7e,"__init__()"),S7e.forEach(t),Ije=r(e9," (throws an error)."),e9.forEach(t),qje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(HA.$$.fragment,Zr),Nje=i(Zr),XZ=n(Zr,"P",{});var R7e=s(XZ);jje=r(R7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R7e.forEach(t),Dje=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);Gje=r(cf,"The configuration class to instantiate is selected based on the "),zZ=n(cf,"CODE",{});var B7e=s(zZ);Oje=r(B7e,"model_type"),B7e.forEach(t),Vje=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=n(cf,"CODE",{});var P7e=s(QZ);Xje=r(P7e,"pretrained_model_name_or_path"),P7e.forEach(t),zje=r(cf,":"),cf.forEach(t),Qje=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var F3=s(vf);WZ=n(F3,"STRONG",{});var I7e=s(WZ);Wje=r(I7e,"albert"),I7e.forEach(t),Hje=r(F3," \u2014 "),m$=n(F3,"A",{href:!0});var q7e=s(m$);Uje=r(q7e,"AlbertConfig"),q7e.forEach(t),Jje=r(F3," (ALBERT model)"),F3.forEach(t),Yje=i(L),Ff=n(L,"LI",{});var T3=s(Ff);HZ=n(T3,"STRONG",{});var N7e=s(HZ);Kje=r(N7e,"bart"),N7e.forEach(t),Zje=r(T3," \u2014 "),g$=n(T3,"A",{href:!0});var j7e=s(g$);eDe=r(j7e,"BartConfig"),j7e.forEach(t),oDe=r(T3," (BART model)"),T3.forEach(t),rDe=i(L),Tf=n(L,"LI",{});var M3=s(Tf);UZ=n(M3,"STRONG",{});var D7e=s(UZ);tDe=r(D7e,"beit"),D7e.forEach(t),aDe=r(M3," \u2014 "),h$=n(M3,"A",{href:!0});var G7e=s(h$);nDe=r(G7e,"BeitConfig"),G7e.forEach(t),sDe=r(M3," (BEiT model)"),M3.forEach(t),lDe=i(L),Mf=n(L,"LI",{});var E3=s(Mf);JZ=n(E3,"STRONG",{});var O7e=s(JZ);iDe=r(O7e,"bert"),O7e.forEach(t),dDe=r(E3," \u2014 "),p$=n(E3,"A",{href:!0});var V7e=s(p$);cDe=r(V7e,"BertConfig"),V7e.forEach(t),fDe=r(E3," (BERT model)"),E3.forEach(t),mDe=i(L),Ef=n(L,"LI",{});var C3=s(Ef);YZ=n(C3,"STRONG",{});var X7e=s(YZ);gDe=r(X7e,"bert-generation"),X7e.forEach(t),hDe=r(C3," \u2014 "),u$=n(C3,"A",{href:!0});var z7e=s(u$);pDe=r(z7e,"BertGenerationConfig"),z7e.forEach(t),uDe=r(C3," (Bert Generation model)"),C3.forEach(t),_De=i(L),Cf=n(L,"LI",{});var w3=s(Cf);KZ=n(w3,"STRONG",{});var Q7e=s(KZ);bDe=r(Q7e,"big_bird"),Q7e.forEach(t),vDe=r(w3," \u2014 "),_$=n(w3,"A",{href:!0});var W7e=s(_$);FDe=r(W7e,"BigBirdConfig"),W7e.forEach(t),TDe=r(w3," (BigBird model)"),w3.forEach(t),MDe=i(L),wf=n(L,"LI",{});var A3=s(wf);ZZ=n(A3,"STRONG",{});var H7e=s(ZZ);EDe=r(H7e,"bigbird_pegasus"),H7e.forEach(t),CDe=r(A3," \u2014 "),b$=n(A3,"A",{href:!0});var U7e=s(b$);wDe=r(U7e,"BigBirdPegasusConfig"),U7e.forEach(t),ADe=r(A3," (BigBirdPegasus model)"),A3.forEach(t),yDe=i(L),Af=n(L,"LI",{});var y3=s(Af);eee=n(y3,"STRONG",{});var J7e=s(eee);LDe=r(J7e,"blenderbot"),J7e.forEach(t),xDe=r(y3," \u2014 "),v$=n(y3,"A",{href:!0});var Y7e=s(v$);$De=r(Y7e,"BlenderbotConfig"),Y7e.forEach(t),kDe=r(y3," (Blenderbot model)"),y3.forEach(t),SDe=i(L),yf=n(L,"LI",{});var L3=s(yf);oee=n(L3,"STRONG",{});var K7e=s(oee);RDe=r(K7e,"blenderbot-small"),K7e.forEach(t),BDe=r(L3," \u2014 "),F$=n(L3,"A",{href:!0});var Z7e=s(F$);PDe=r(Z7e,"BlenderbotSmallConfig"),Z7e.forEach(t),IDe=r(L3," (BlenderbotSmall model)"),L3.forEach(t),qDe=i(L),Lf=n(L,"LI",{});var x3=s(Lf);ree=n(x3,"STRONG",{});var eMe=s(ree);NDe=r(eMe,"camembert"),eMe.forEach(t),jDe=r(x3," \u2014 "),T$=n(x3,"A",{href:!0});var oMe=s(T$);DDe=r(oMe,"CamembertConfig"),oMe.forEach(t),GDe=r(x3," (CamemBERT model)"),x3.forEach(t),ODe=i(L),xf=n(L,"LI",{});var $3=s(xf);tee=n($3,"STRONG",{});var rMe=s(tee);VDe=r(rMe,"canine"),rMe.forEach(t),XDe=r($3," \u2014 "),M$=n($3,"A",{href:!0});var tMe=s(M$);zDe=r(tMe,"CanineConfig"),tMe.forEach(t),QDe=r($3," (Canine model)"),$3.forEach(t),WDe=i(L),$f=n(L,"LI",{});var k3=s($f);aee=n(k3,"STRONG",{});var aMe=s(aee);HDe=r(aMe,"clip"),aMe.forEach(t),UDe=r(k3," \u2014 "),E$=n(k3,"A",{href:!0});var nMe=s(E$);JDe=r(nMe,"CLIPConfig"),nMe.forEach(t),YDe=r(k3," (CLIP model)"),k3.forEach(t),KDe=i(L),kf=n(L,"LI",{});var S3=s(kf);nee=n(S3,"STRONG",{});var sMe=s(nee);ZDe=r(sMe,"convbert"),sMe.forEach(t),eGe=r(S3," \u2014 "),C$=n(S3,"A",{href:!0});var lMe=s(C$);oGe=r(lMe,"ConvBertConfig"),lMe.forEach(t),rGe=r(S3," (ConvBERT model)"),S3.forEach(t),tGe=i(L),Sf=n(L,"LI",{});var R3=s(Sf);see=n(R3,"STRONG",{});var iMe=s(see);aGe=r(iMe,"convnext"),iMe.forEach(t),nGe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var dMe=s(w$);sGe=r(dMe,"ConvNextConfig"),dMe.forEach(t),lGe=r(R3," (ConvNext model)"),R3.forEach(t),iGe=i(L),Rf=n(L,"LI",{});var B3=s(Rf);lee=n(B3,"STRONG",{});var cMe=s(lee);dGe=r(cMe,"ctrl"),cMe.forEach(t),cGe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var fMe=s(A$);fGe=r(fMe,"CTRLConfig"),fMe.forEach(t),mGe=r(B3," (CTRL model)"),B3.forEach(t),gGe=i(L),Bf=n(L,"LI",{});var P3=s(Bf);iee=n(P3,"STRONG",{});var mMe=s(iee);hGe=r(mMe,"data2vec-audio"),mMe.forEach(t),pGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var gMe=s(y$);uGe=r(gMe,"Data2VecAudioConfig"),gMe.forEach(t),_Ge=r(P3," (Data2VecAudio model)"),P3.forEach(t),bGe=i(L),Pf=n(L,"LI",{});var I3=s(Pf);dee=n(I3,"STRONG",{});var hMe=s(dee);vGe=r(hMe,"data2vec-text"),hMe.forEach(t),FGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var pMe=s(L$);TGe=r(pMe,"Data2VecTextConfig"),pMe.forEach(t),MGe=r(I3," (Data2VecText model)"),I3.forEach(t),EGe=i(L),If=n(L,"LI",{});var q3=s(If);cee=n(q3,"STRONG",{});var uMe=s(cee);CGe=r(uMe,"data2vec-vision"),uMe.forEach(t),wGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var _Me=s(x$);AGe=r(_Me,"Data2VecVisionConfig"),_Me.forEach(t),yGe=r(q3," (Data2VecVision model)"),q3.forEach(t),LGe=i(L),qf=n(L,"LI",{});var N3=s(qf);fee=n(N3,"STRONG",{});var bMe=s(fee);xGe=r(bMe,"deberta"),bMe.forEach(t),$Ge=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var vMe=s($$);kGe=r(vMe,"DebertaConfig"),vMe.forEach(t),SGe=r(N3," (DeBERTa model)"),N3.forEach(t),RGe=i(L),Nf=n(L,"LI",{});var j3=s(Nf);mee=n(j3,"STRONG",{});var FMe=s(mee);BGe=r(FMe,"deberta-v2"),FMe.forEach(t),PGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var TMe=s(k$);IGe=r(TMe,"DebertaV2Config"),TMe.forEach(t),qGe=r(j3," (DeBERTa-v2 model)"),j3.forEach(t),NGe=i(L),jf=n(L,"LI",{});var D3=s(jf);gee=n(D3,"STRONG",{});var MMe=s(gee);jGe=r(MMe,"decision_transformer"),MMe.forEach(t),DGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var EMe=s(S$);GGe=r(EMe,"DecisionTransformerConfig"),EMe.forEach(t),OGe=r(D3," (Decision Transformer model)"),D3.forEach(t),VGe=i(L),Df=n(L,"LI",{});var G3=s(Df);hee=n(G3,"STRONG",{});var CMe=s(hee);XGe=r(CMe,"deit"),CMe.forEach(t),zGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var wMe=s(R$);QGe=r(wMe,"DeiTConfig"),wMe.forEach(t),WGe=r(G3," (DeiT model)"),G3.forEach(t),HGe=i(L),Gf=n(L,"LI",{});var O3=s(Gf);pee=n(O3,"STRONG",{});var AMe=s(pee);UGe=r(AMe,"detr"),AMe.forEach(t),JGe=r(O3," \u2014 "),B$=n(O3,"A",{href:!0});var cqr=s(B$);YGe=r(cqr,"DetrConfig"),cqr.forEach(t),KGe=r(O3," (DETR model)"),O3.forEach(t),ZGe=i(L),Of=n(L,"LI",{});var yMe=s(Of);uee=n(yMe,"STRONG",{});var fqr=s(uee);eOe=r(fqr,"distilbert"),fqr.forEach(t),oOe=r(yMe," \u2014 "),P$=n(yMe,"A",{href:!0});var mqr=s(P$);rOe=r(mqr,"DistilBertConfig"),mqr.forEach(t),tOe=r(yMe," (DistilBERT model)"),yMe.forEach(t),aOe=i(L),Vf=n(L,"LI",{});var LMe=s(Vf);_ee=n(LMe,"STRONG",{});var gqr=s(_ee);nOe=r(gqr,"dpr"),gqr.forEach(t),sOe=r(LMe," \u2014 "),I$=n(LMe,"A",{href:!0});var hqr=s(I$);lOe=r(hqr,"DPRConfig"),hqr.forEach(t),iOe=r(LMe," (DPR model)"),LMe.forEach(t),dOe=i(L),Xf=n(L,"LI",{});var xMe=s(Xf);bee=n(xMe,"STRONG",{});var pqr=s(bee);cOe=r(pqr,"dpt"),pqr.forEach(t),fOe=r(xMe," \u2014 "),q$=n(xMe,"A",{href:!0});var uqr=s(q$);mOe=r(uqr,"DPTConfig"),uqr.forEach(t),gOe=r(xMe," (DPT model)"),xMe.forEach(t),hOe=i(L),zf=n(L,"LI",{});var $Me=s(zf);vee=n($Me,"STRONG",{});var _qr=s(vee);pOe=r(_qr,"electra"),_qr.forEach(t),uOe=r($Me," \u2014 "),N$=n($Me,"A",{href:!0});var bqr=s(N$);_Oe=r(bqr,"ElectraConfig"),bqr.forEach(t),bOe=r($Me," (ELECTRA model)"),$Me.forEach(t),vOe=i(L),Qf=n(L,"LI",{});var kMe=s(Qf);Fee=n(kMe,"STRONG",{});var vqr=s(Fee);FOe=r(vqr,"encoder-decoder"),vqr.forEach(t),TOe=r(kMe," \u2014 "),j$=n(kMe,"A",{href:!0});var Fqr=s(j$);MOe=r(Fqr,"EncoderDecoderConfig"),Fqr.forEach(t),EOe=r(kMe," (Encoder decoder model)"),kMe.forEach(t),COe=i(L),Wf=n(L,"LI",{});var SMe=s(Wf);Tee=n(SMe,"STRONG",{});var Tqr=s(Tee);wOe=r(Tqr,"flaubert"),Tqr.forEach(t),AOe=r(SMe," \u2014 "),D$=n(SMe,"A",{href:!0});var Mqr=s(D$);yOe=r(Mqr,"FlaubertConfig"),Mqr.forEach(t),LOe=r(SMe," (FlauBERT model)"),SMe.forEach(t),xOe=i(L),Hf=n(L,"LI",{});var RMe=s(Hf);Mee=n(RMe,"STRONG",{});var Eqr=s(Mee);$Oe=r(Eqr,"fnet"),Eqr.forEach(t),kOe=r(RMe," \u2014 "),G$=n(RMe,"A",{href:!0});var Cqr=s(G$);SOe=r(Cqr,"FNetConfig"),Cqr.forEach(t),ROe=r(RMe," (FNet model)"),RMe.forEach(t),BOe=i(L),Uf=n(L,"LI",{});var BMe=s(Uf);Eee=n(BMe,"STRONG",{});var wqr=s(Eee);POe=r(wqr,"fsmt"),wqr.forEach(t),IOe=r(BMe," \u2014 "),O$=n(BMe,"A",{href:!0});var Aqr=s(O$);qOe=r(Aqr,"FSMTConfig"),Aqr.forEach(t),NOe=r(BMe," (FairSeq Machine-Translation model)"),BMe.forEach(t),jOe=i(L),Jf=n(L,"LI",{});var PMe=s(Jf);Cee=n(PMe,"STRONG",{});var yqr=s(Cee);DOe=r(yqr,"funnel"),yqr.forEach(t),GOe=r(PMe," \u2014 "),V$=n(PMe,"A",{href:!0});var Lqr=s(V$);OOe=r(Lqr,"FunnelConfig"),Lqr.forEach(t),VOe=r(PMe," (Funnel Transformer model)"),PMe.forEach(t),XOe=i(L),Yf=n(L,"LI",{});var IMe=s(Yf);wee=n(IMe,"STRONG",{});var xqr=s(wee);zOe=r(xqr,"glpn"),xqr.forEach(t),QOe=r(IMe," \u2014 "),X$=n(IMe,"A",{href:!0});var $qr=s(X$);WOe=r($qr,"GLPNConfig"),$qr.forEach(t),HOe=r(IMe," (GLPN model)"),IMe.forEach(t),UOe=i(L),Kf=n(L,"LI",{});var qMe=s(Kf);Aee=n(qMe,"STRONG",{});var kqr=s(Aee);JOe=r(kqr,"gpt2"),kqr.forEach(t),YOe=r(qMe," \u2014 "),z$=n(qMe,"A",{href:!0});var Sqr=s(z$);KOe=r(Sqr,"GPT2Config"),Sqr.forEach(t),ZOe=r(qMe," (OpenAI GPT-2 model)"),qMe.forEach(t),eVe=i(L),Zf=n(L,"LI",{});var NMe=s(Zf);yee=n(NMe,"STRONG",{});var Rqr=s(yee);oVe=r(Rqr,"gpt_neo"),Rqr.forEach(t),rVe=r(NMe," \u2014 "),Q$=n(NMe,"A",{href:!0});var Bqr=s(Q$);tVe=r(Bqr,"GPTNeoConfig"),Bqr.forEach(t),aVe=r(NMe," (GPT Neo model)"),NMe.forEach(t),nVe=i(L),em=n(L,"LI",{});var jMe=s(em);Lee=n(jMe,"STRONG",{});var Pqr=s(Lee);sVe=r(Pqr,"gptj"),Pqr.forEach(t),lVe=r(jMe," \u2014 "),W$=n(jMe,"A",{href:!0});var Iqr=s(W$);iVe=r(Iqr,"GPTJConfig"),Iqr.forEach(t),dVe=r(jMe," (GPT-J model)"),jMe.forEach(t),cVe=i(L),om=n(L,"LI",{});var DMe=s(om);xee=n(DMe,"STRONG",{});var qqr=s(xee);fVe=r(qqr,"hubert"),qqr.forEach(t),mVe=r(DMe," \u2014 "),H$=n(DMe,"A",{href:!0});var Nqr=s(H$);gVe=r(Nqr,"HubertConfig"),Nqr.forEach(t),hVe=r(DMe," (Hubert model)"),DMe.forEach(t),pVe=i(L),rm=n(L,"LI",{});var GMe=s(rm);$ee=n(GMe,"STRONG",{});var jqr=s($ee);uVe=r(jqr,"ibert"),jqr.forEach(t),_Ve=r(GMe," \u2014 "),U$=n(GMe,"A",{href:!0});var Dqr=s(U$);bVe=r(Dqr,"IBertConfig"),Dqr.forEach(t),vVe=r(GMe," (I-BERT model)"),GMe.forEach(t),FVe=i(L),tm=n(L,"LI",{});var OMe=s(tm);kee=n(OMe,"STRONG",{});var Gqr=s(kee);TVe=r(Gqr,"imagegpt"),Gqr.forEach(t),MVe=r(OMe," \u2014 "),J$=n(OMe,"A",{href:!0});var Oqr=s(J$);EVe=r(Oqr,"ImageGPTConfig"),Oqr.forEach(t),CVe=r(OMe," (ImageGPT model)"),OMe.forEach(t),wVe=i(L),am=n(L,"LI",{});var VMe=s(am);See=n(VMe,"STRONG",{});var Vqr=s(See);AVe=r(Vqr,"layoutlm"),Vqr.forEach(t),yVe=r(VMe," \u2014 "),Y$=n(VMe,"A",{href:!0});var Xqr=s(Y$);LVe=r(Xqr,"LayoutLMConfig"),Xqr.forEach(t),xVe=r(VMe," (LayoutLM model)"),VMe.forEach(t),$Ve=i(L),nm=n(L,"LI",{});var XMe=s(nm);Ree=n(XMe,"STRONG",{});var zqr=s(Ree);kVe=r(zqr,"layoutlmv2"),zqr.forEach(t),SVe=r(XMe," \u2014 "),K$=n(XMe,"A",{href:!0});var Qqr=s(K$);RVe=r(Qqr,"LayoutLMv2Config"),Qqr.forEach(t),BVe=r(XMe," (LayoutLMv2 model)"),XMe.forEach(t),PVe=i(L),sm=n(L,"LI",{});var zMe=s(sm);Bee=n(zMe,"STRONG",{});var Wqr=s(Bee);IVe=r(Wqr,"led"),Wqr.forEach(t),qVe=r(zMe," \u2014 "),Z$=n(zMe,"A",{href:!0});var Hqr=s(Z$);NVe=r(Hqr,"LEDConfig"),Hqr.forEach(t),jVe=r(zMe," (LED model)"),zMe.forEach(t),DVe=i(L),lm=n(L,"LI",{});var QMe=s(lm);Pee=n(QMe,"STRONG",{});var Uqr=s(Pee);GVe=r(Uqr,"longformer"),Uqr.forEach(t),OVe=r(QMe," \u2014 "),ek=n(QMe,"A",{href:!0});var Jqr=s(ek);VVe=r(Jqr,"LongformerConfig"),Jqr.forEach(t),XVe=r(QMe," (Longformer model)"),QMe.forEach(t),zVe=i(L),im=n(L,"LI",{});var WMe=s(im);Iee=n(WMe,"STRONG",{});var Yqr=s(Iee);QVe=r(Yqr,"luke"),Yqr.forEach(t),WVe=r(WMe," \u2014 "),ok=n(WMe,"A",{href:!0});var Kqr=s(ok);HVe=r(Kqr,"LukeConfig"),Kqr.forEach(t),UVe=r(WMe," (LUKE model)"),WMe.forEach(t),JVe=i(L),dm=n(L,"LI",{});var HMe=s(dm);qee=n(HMe,"STRONG",{});var Zqr=s(qee);YVe=r(Zqr,"lxmert"),Zqr.forEach(t),KVe=r(HMe," \u2014 "),rk=n(HMe,"A",{href:!0});var eNr=s(rk);ZVe=r(eNr,"LxmertConfig"),eNr.forEach(t),eXe=r(HMe," (LXMERT model)"),HMe.forEach(t),oXe=i(L),cm=n(L,"LI",{});var UMe=s(cm);Nee=n(UMe,"STRONG",{});var oNr=s(Nee);rXe=r(oNr,"m2m_100"),oNr.forEach(t),tXe=r(UMe," \u2014 "),tk=n(UMe,"A",{href:!0});var rNr=s(tk);aXe=r(rNr,"M2M100Config"),rNr.forEach(t),nXe=r(UMe," (M2M100 model)"),UMe.forEach(t),sXe=i(L),fm=n(L,"LI",{});var JMe=s(fm);jee=n(JMe,"STRONG",{});var tNr=s(jee);lXe=r(tNr,"marian"),tNr.forEach(t),iXe=r(JMe," \u2014 "),ak=n(JMe,"A",{href:!0});var aNr=s(ak);dXe=r(aNr,"MarianConfig"),aNr.forEach(t),cXe=r(JMe," (Marian model)"),JMe.forEach(t),fXe=i(L),mm=n(L,"LI",{});var YMe=s(mm);Dee=n(YMe,"STRONG",{});var nNr=s(Dee);mXe=r(nNr,"maskformer"),nNr.forEach(t),gXe=r(YMe," \u2014 "),nk=n(YMe,"A",{href:!0});var sNr=s(nk);hXe=r(sNr,"MaskFormerConfig"),sNr.forEach(t),pXe=r(YMe," (MaskFormer model)"),YMe.forEach(t),uXe=i(L),gm=n(L,"LI",{});var KMe=s(gm);Gee=n(KMe,"STRONG",{});var lNr=s(Gee);_Xe=r(lNr,"mbart"),lNr.forEach(t),bXe=r(KMe," \u2014 "),sk=n(KMe,"A",{href:!0});var iNr=s(sk);vXe=r(iNr,"MBartConfig"),iNr.forEach(t),FXe=r(KMe," (mBART model)"),KMe.forEach(t),TXe=i(L),hm=n(L,"LI",{});var ZMe=s(hm);Oee=n(ZMe,"STRONG",{});var dNr=s(Oee);MXe=r(dNr,"megatron-bert"),dNr.forEach(t),EXe=r(ZMe," \u2014 "),lk=n(ZMe,"A",{href:!0});var cNr=s(lk);CXe=r(cNr,"MegatronBertConfig"),cNr.forEach(t),wXe=r(ZMe," (MegatronBert model)"),ZMe.forEach(t),AXe=i(L),pm=n(L,"LI",{});var eEe=s(pm);Vee=n(eEe,"STRONG",{});var fNr=s(Vee);yXe=r(fNr,"mobilebert"),fNr.forEach(t),LXe=r(eEe," \u2014 "),ik=n(eEe,"A",{href:!0});var mNr=s(ik);xXe=r(mNr,"MobileBertConfig"),mNr.forEach(t),$Xe=r(eEe," (MobileBERT model)"),eEe.forEach(t),kXe=i(L),um=n(L,"LI",{});var oEe=s(um);Xee=n(oEe,"STRONG",{});var gNr=s(Xee);SXe=r(gNr,"mpnet"),gNr.forEach(t),RXe=r(oEe," \u2014 "),dk=n(oEe,"A",{href:!0});var hNr=s(dk);BXe=r(hNr,"MPNetConfig"),hNr.forEach(t),PXe=r(oEe," (MPNet model)"),oEe.forEach(t),IXe=i(L),_m=n(L,"LI",{});var rEe=s(_m);zee=n(rEe,"STRONG",{});var pNr=s(zee);qXe=r(pNr,"mt5"),pNr.forEach(t),NXe=r(rEe," \u2014 "),ck=n(rEe,"A",{href:!0});var uNr=s(ck);jXe=r(uNr,"MT5Config"),uNr.forEach(t),DXe=r(rEe," (mT5 model)"),rEe.forEach(t),GXe=i(L),bm=n(L,"LI",{});var tEe=s(bm);Qee=n(tEe,"STRONG",{});var _Nr=s(Qee);OXe=r(_Nr,"nystromformer"),_Nr.forEach(t),VXe=r(tEe," \u2014 "),fk=n(tEe,"A",{href:!0});var bNr=s(fk);XXe=r(bNr,"NystromformerConfig"),bNr.forEach(t),zXe=r(tEe," (Nystromformer model)"),tEe.forEach(t),QXe=i(L),vm=n(L,"LI",{});var aEe=s(vm);Wee=n(aEe,"STRONG",{});var vNr=s(Wee);WXe=r(vNr,"openai-gpt"),vNr.forEach(t),HXe=r(aEe," \u2014 "),mk=n(aEe,"A",{href:!0});var FNr=s(mk);UXe=r(FNr,"OpenAIGPTConfig"),FNr.forEach(t),JXe=r(aEe," (OpenAI GPT model)"),aEe.forEach(t),YXe=i(L),Fm=n(L,"LI",{});var nEe=s(Fm);Hee=n(nEe,"STRONG",{});var TNr=s(Hee);KXe=r(TNr,"pegasus"),TNr.forEach(t),ZXe=r(nEe," \u2014 "),gk=n(nEe,"A",{href:!0});var MNr=s(gk);eze=r(MNr,"PegasusConfig"),MNr.forEach(t),oze=r(nEe," (Pegasus model)"),nEe.forEach(t),rze=i(L),Tm=n(L,"LI",{});var sEe=s(Tm);Uee=n(sEe,"STRONG",{});var ENr=s(Uee);tze=r(ENr,"perceiver"),ENr.forEach(t),aze=r(sEe," \u2014 "),hk=n(sEe,"A",{href:!0});var CNr=s(hk);nze=r(CNr,"PerceiverConfig"),CNr.forEach(t),sze=r(sEe," (Perceiver model)"),sEe.forEach(t),lze=i(L),Mm=n(L,"LI",{});var lEe=s(Mm);Jee=n(lEe,"STRONG",{});var wNr=s(Jee);ize=r(wNr,"plbart"),wNr.forEach(t),dze=r(lEe," \u2014 "),pk=n(lEe,"A",{href:!0});var ANr=s(pk);cze=r(ANr,"PLBartConfig"),ANr.forEach(t),fze=r(lEe," (PLBart model)"),lEe.forEach(t),mze=i(L),Em=n(L,"LI",{});var iEe=s(Em);Yee=n(iEe,"STRONG",{});var yNr=s(Yee);gze=r(yNr,"poolformer"),yNr.forEach(t),hze=r(iEe," \u2014 "),uk=n(iEe,"A",{href:!0});var LNr=s(uk);pze=r(LNr,"PoolFormerConfig"),LNr.forEach(t),uze=r(iEe," (PoolFormer model)"),iEe.forEach(t),_ze=i(L),Cm=n(L,"LI",{});var dEe=s(Cm);Kee=n(dEe,"STRONG",{});var xNr=s(Kee);bze=r(xNr,"prophetnet"),xNr.forEach(t),vze=r(dEe," \u2014 "),_k=n(dEe,"A",{href:!0});var $Nr=s(_k);Fze=r($Nr,"ProphetNetConfig"),$Nr.forEach(t),Tze=r(dEe," (ProphetNet model)"),dEe.forEach(t),Mze=i(L),wm=n(L,"LI",{});var cEe=s(wm);Zee=n(cEe,"STRONG",{});var kNr=s(Zee);Eze=r(kNr,"qdqbert"),kNr.forEach(t),Cze=r(cEe," \u2014 "),bk=n(cEe,"A",{href:!0});var SNr=s(bk);wze=r(SNr,"QDQBertConfig"),SNr.forEach(t),Aze=r(cEe," (QDQBert model)"),cEe.forEach(t),yze=i(L),Am=n(L,"LI",{});var fEe=s(Am);eoe=n(fEe,"STRONG",{});var RNr=s(eoe);Lze=r(RNr,"rag"),RNr.forEach(t),xze=r(fEe," \u2014 "),vk=n(fEe,"A",{href:!0});var BNr=s(vk);$ze=r(BNr,"RagConfig"),BNr.forEach(t),kze=r(fEe," (RAG model)"),fEe.forEach(t),Sze=i(L),ym=n(L,"LI",{});var mEe=s(ym);ooe=n(mEe,"STRONG",{});var PNr=s(ooe);Rze=r(PNr,"realm"),PNr.forEach(t),Bze=r(mEe," \u2014 "),Fk=n(mEe,"A",{href:!0});var INr=s(Fk);Pze=r(INr,"RealmConfig"),INr.forEach(t),Ize=r(mEe," (Realm model)"),mEe.forEach(t),qze=i(L),Lm=n(L,"LI",{});var gEe=s(Lm);roe=n(gEe,"STRONG",{});var qNr=s(roe);Nze=r(qNr,"reformer"),qNr.forEach(t),jze=r(gEe," \u2014 "),Tk=n(gEe,"A",{href:!0});var NNr=s(Tk);Dze=r(NNr,"ReformerConfig"),NNr.forEach(t),Gze=r(gEe," (Reformer model)"),gEe.forEach(t),Oze=i(L),xm=n(L,"LI",{});var hEe=s(xm);toe=n(hEe,"STRONG",{});var jNr=s(toe);Vze=r(jNr,"regnet"),jNr.forEach(t),Xze=r(hEe," \u2014 "),Mk=n(hEe,"A",{href:!0});var DNr=s(Mk);zze=r(DNr,"RegNetConfig"),DNr.forEach(t),Qze=r(hEe," (RegNet model)"),hEe.forEach(t),Wze=i(L),$m=n(L,"LI",{});var pEe=s($m);aoe=n(pEe,"STRONG",{});var GNr=s(aoe);Hze=r(GNr,"rembert"),GNr.forEach(t),Uze=r(pEe," \u2014 "),Ek=n(pEe,"A",{href:!0});var ONr=s(Ek);Jze=r(ONr,"RemBertConfig"),ONr.forEach(t),Yze=r(pEe," (RemBERT model)"),pEe.forEach(t),Kze=i(L),km=n(L,"LI",{});var uEe=s(km);noe=n(uEe,"STRONG",{});var VNr=s(noe);Zze=r(VNr,"resnet"),VNr.forEach(t),eQe=r(uEe," \u2014 "),Ck=n(uEe,"A",{href:!0});var XNr=s(Ck);oQe=r(XNr,"ResNetConfig"),XNr.forEach(t),rQe=r(uEe," (ResNet model)"),uEe.forEach(t),tQe=i(L),Sm=n(L,"LI",{});var _Ee=s(Sm);soe=n(_Ee,"STRONG",{});var zNr=s(soe);aQe=r(zNr,"retribert"),zNr.forEach(t),nQe=r(_Ee," \u2014 "),wk=n(_Ee,"A",{href:!0});var QNr=s(wk);sQe=r(QNr,"RetriBertConfig"),QNr.forEach(t),lQe=r(_Ee," (RetriBERT model)"),_Ee.forEach(t),iQe=i(L),Rm=n(L,"LI",{});var bEe=s(Rm);loe=n(bEe,"STRONG",{});var WNr=s(loe);dQe=r(WNr,"roberta"),WNr.forEach(t),cQe=r(bEe," \u2014 "),Ak=n(bEe,"A",{href:!0});var HNr=s(Ak);fQe=r(HNr,"RobertaConfig"),HNr.forEach(t),mQe=r(bEe," (RoBERTa model)"),bEe.forEach(t),gQe=i(L),Bm=n(L,"LI",{});var vEe=s(Bm);ioe=n(vEe,"STRONG",{});var UNr=s(ioe);hQe=r(UNr,"roformer"),UNr.forEach(t),pQe=r(vEe," \u2014 "),yk=n(vEe,"A",{href:!0});var JNr=s(yk);uQe=r(JNr,"RoFormerConfig"),JNr.forEach(t),_Qe=r(vEe," (RoFormer model)"),vEe.forEach(t),bQe=i(L),Pm=n(L,"LI",{});var FEe=s(Pm);doe=n(FEe,"STRONG",{});var YNr=s(doe);vQe=r(YNr,"segformer"),YNr.forEach(t),FQe=r(FEe," \u2014 "),Lk=n(FEe,"A",{href:!0});var KNr=s(Lk);TQe=r(KNr,"SegformerConfig"),KNr.forEach(t),MQe=r(FEe," (SegFormer model)"),FEe.forEach(t),EQe=i(L),Im=n(L,"LI",{});var TEe=s(Im);coe=n(TEe,"STRONG",{});var ZNr=s(coe);CQe=r(ZNr,"sew"),ZNr.forEach(t),wQe=r(TEe," \u2014 "),xk=n(TEe,"A",{href:!0});var ejr=s(xk);AQe=r(ejr,"SEWConfig"),ejr.forEach(t),yQe=r(TEe," (SEW model)"),TEe.forEach(t),LQe=i(L),qm=n(L,"LI",{});var MEe=s(qm);foe=n(MEe,"STRONG",{});var ojr=s(foe);xQe=r(ojr,"sew-d"),ojr.forEach(t),$Qe=r(MEe," \u2014 "),$k=n(MEe,"A",{href:!0});var rjr=s($k);kQe=r(rjr,"SEWDConfig"),rjr.forEach(t),SQe=r(MEe," (SEW-D model)"),MEe.forEach(t),RQe=i(L),Nm=n(L,"LI",{});var EEe=s(Nm);moe=n(EEe,"STRONG",{});var tjr=s(moe);BQe=r(tjr,"speech-encoder-decoder"),tjr.forEach(t),PQe=r(EEe," \u2014 "),kk=n(EEe,"A",{href:!0});var ajr=s(kk);IQe=r(ajr,"SpeechEncoderDecoderConfig"),ajr.forEach(t),qQe=r(EEe," (Speech Encoder decoder model)"),EEe.forEach(t),NQe=i(L),jm=n(L,"LI",{});var CEe=s(jm);goe=n(CEe,"STRONG",{});var njr=s(goe);jQe=r(njr,"speech_to_text"),njr.forEach(t),DQe=r(CEe," \u2014 "),Sk=n(CEe,"A",{href:!0});var sjr=s(Sk);GQe=r(sjr,"Speech2TextConfig"),sjr.forEach(t),OQe=r(CEe," (Speech2Text model)"),CEe.forEach(t),VQe=i(L),Dm=n(L,"LI",{});var wEe=s(Dm);hoe=n(wEe,"STRONG",{});var ljr=s(hoe);XQe=r(ljr,"speech_to_text_2"),ljr.forEach(t),zQe=r(wEe," \u2014 "),Rk=n(wEe,"A",{href:!0});var ijr=s(Rk);QQe=r(ijr,"Speech2Text2Config"),ijr.forEach(t),WQe=r(wEe," (Speech2Text2 model)"),wEe.forEach(t),HQe=i(L),Gm=n(L,"LI",{});var AEe=s(Gm);poe=n(AEe,"STRONG",{});var djr=s(poe);UQe=r(djr,"splinter"),djr.forEach(t),JQe=r(AEe," \u2014 "),Bk=n(AEe,"A",{href:!0});var cjr=s(Bk);YQe=r(cjr,"SplinterConfig"),cjr.forEach(t),KQe=r(AEe," (Splinter model)"),AEe.forEach(t),ZQe=i(L),Om=n(L,"LI",{});var yEe=s(Om);uoe=n(yEe,"STRONG",{});var fjr=s(uoe);eWe=r(fjr,"squeezebert"),fjr.forEach(t),oWe=r(yEe," \u2014 "),Pk=n(yEe,"A",{href:!0});var mjr=s(Pk);rWe=r(mjr,"SqueezeBertConfig"),mjr.forEach(t),tWe=r(yEe," (SqueezeBERT model)"),yEe.forEach(t),aWe=i(L),Vm=n(L,"LI",{});var LEe=s(Vm);_oe=n(LEe,"STRONG",{});var gjr=s(_oe);nWe=r(gjr,"swin"),gjr.forEach(t),sWe=r(LEe," \u2014 "),Ik=n(LEe,"A",{href:!0});var hjr=s(Ik);lWe=r(hjr,"SwinConfig"),hjr.forEach(t),iWe=r(LEe," (Swin model)"),LEe.forEach(t),dWe=i(L),Xm=n(L,"LI",{});var xEe=s(Xm);boe=n(xEe,"STRONG",{});var pjr=s(boe);cWe=r(pjr,"t5"),pjr.forEach(t),fWe=r(xEe," \u2014 "),qk=n(xEe,"A",{href:!0});var ujr=s(qk);mWe=r(ujr,"T5Config"),ujr.forEach(t),gWe=r(xEe," (T5 model)"),xEe.forEach(t),hWe=i(L),zm=n(L,"LI",{});var $Ee=s(zm);voe=n($Ee,"STRONG",{});var _jr=s(voe);pWe=r(_jr,"tapas"),_jr.forEach(t),uWe=r($Ee," \u2014 "),Nk=n($Ee,"A",{href:!0});var bjr=s(Nk);_We=r(bjr,"TapasConfig"),bjr.forEach(t),bWe=r($Ee," (TAPAS model)"),$Ee.forEach(t),vWe=i(L),Qm=n(L,"LI",{});var kEe=s(Qm);Foe=n(kEe,"STRONG",{});var vjr=s(Foe);FWe=r(vjr,"tapex"),vjr.forEach(t),TWe=r(kEe," \u2014 "),jk=n(kEe,"A",{href:!0});var Fjr=s(jk);MWe=r(Fjr,"BartConfig"),Fjr.forEach(t),EWe=r(kEe," (TAPEX model)"),kEe.forEach(t),CWe=i(L),Wm=n(L,"LI",{});var SEe=s(Wm);Toe=n(SEe,"STRONG",{});var Tjr=s(Toe);wWe=r(Tjr,"transfo-xl"),Tjr.forEach(t),AWe=r(SEe," \u2014 "),Dk=n(SEe,"A",{href:!0});var Mjr=s(Dk);yWe=r(Mjr,"TransfoXLConfig"),Mjr.forEach(t),LWe=r(SEe," (Transformer-XL model)"),SEe.forEach(t),xWe=i(L),Hm=n(L,"LI",{});var REe=s(Hm);Moe=n(REe,"STRONG",{});var Ejr=s(Moe);$We=r(Ejr,"trocr"),Ejr.forEach(t),kWe=r(REe," \u2014 "),Gk=n(REe,"A",{href:!0});var Cjr=s(Gk);SWe=r(Cjr,"TrOCRConfig"),Cjr.forEach(t),RWe=r(REe," (TrOCR model)"),REe.forEach(t),BWe=i(L),Um=n(L,"LI",{});var BEe=s(Um);Eoe=n(BEe,"STRONG",{});var wjr=s(Eoe);PWe=r(wjr,"unispeech"),wjr.forEach(t),IWe=r(BEe," \u2014 "),Ok=n(BEe,"A",{href:!0});var Ajr=s(Ok);qWe=r(Ajr,"UniSpeechConfig"),Ajr.forEach(t),NWe=r(BEe," (UniSpeech model)"),BEe.forEach(t),jWe=i(L),Jm=n(L,"LI",{});var PEe=s(Jm);Coe=n(PEe,"STRONG",{});var yjr=s(Coe);DWe=r(yjr,"unispeech-sat"),yjr.forEach(t),GWe=r(PEe," \u2014 "),Vk=n(PEe,"A",{href:!0});var Ljr=s(Vk);OWe=r(Ljr,"UniSpeechSatConfig"),Ljr.forEach(t),VWe=r(PEe," (UniSpeechSat model)"),PEe.forEach(t),XWe=i(L),Ym=n(L,"LI",{});var IEe=s(Ym);woe=n(IEe,"STRONG",{});var xjr=s(woe);zWe=r(xjr,"van"),xjr.forEach(t),QWe=r(IEe," \u2014 "),Xk=n(IEe,"A",{href:!0});var $jr=s(Xk);WWe=r($jr,"VanConfig"),$jr.forEach(t),HWe=r(IEe," (VAN model)"),IEe.forEach(t),UWe=i(L),Km=n(L,"LI",{});var qEe=s(Km);Aoe=n(qEe,"STRONG",{});var kjr=s(Aoe);JWe=r(kjr,"vilt"),kjr.forEach(t),YWe=r(qEe," \u2014 "),zk=n(qEe,"A",{href:!0});var Sjr=s(zk);KWe=r(Sjr,"ViltConfig"),Sjr.forEach(t),ZWe=r(qEe," (ViLT model)"),qEe.forEach(t),eHe=i(L),Zm=n(L,"LI",{});var NEe=s(Zm);yoe=n(NEe,"STRONG",{});var Rjr=s(yoe);oHe=r(Rjr,"vision-encoder-decoder"),Rjr.forEach(t),rHe=r(NEe," \u2014 "),Qk=n(NEe,"A",{href:!0});var Bjr=s(Qk);tHe=r(Bjr,"VisionEncoderDecoderConfig"),Bjr.forEach(t),aHe=r(NEe," (Vision Encoder decoder model)"),NEe.forEach(t),nHe=i(L),eg=n(L,"LI",{});var jEe=s(eg);Loe=n(jEe,"STRONG",{});var Pjr=s(Loe);sHe=r(Pjr,"vision-text-dual-encoder"),Pjr.forEach(t),lHe=r(jEe," \u2014 "),Wk=n(jEe,"A",{href:!0});var Ijr=s(Wk);iHe=r(Ijr,"VisionTextDualEncoderConfig"),Ijr.forEach(t),dHe=r(jEe," (VisionTextDualEncoder model)"),jEe.forEach(t),cHe=i(L),og=n(L,"LI",{});var DEe=s(og);xoe=n(DEe,"STRONG",{});var qjr=s(xoe);fHe=r(qjr,"visual_bert"),qjr.forEach(t),mHe=r(DEe," \u2014 "),Hk=n(DEe,"A",{href:!0});var Njr=s(Hk);gHe=r(Njr,"VisualBertConfig"),Njr.forEach(t),hHe=r(DEe," (VisualBert model)"),DEe.forEach(t),pHe=i(L),rg=n(L,"LI",{});var GEe=s(rg);$oe=n(GEe,"STRONG",{});var jjr=s($oe);uHe=r(jjr,"vit"),jjr.forEach(t),_He=r(GEe," \u2014 "),Uk=n(GEe,"A",{href:!0});var Djr=s(Uk);bHe=r(Djr,"ViTConfig"),Djr.forEach(t),vHe=r(GEe," (ViT model)"),GEe.forEach(t),FHe=i(L),tg=n(L,"LI",{});var OEe=s(tg);koe=n(OEe,"STRONG",{});var Gjr=s(koe);THe=r(Gjr,"vit_mae"),Gjr.forEach(t),MHe=r(OEe," \u2014 "),Jk=n(OEe,"A",{href:!0});var Ojr=s(Jk);EHe=r(Ojr,"ViTMAEConfig"),Ojr.forEach(t),CHe=r(OEe," (ViTMAE model)"),OEe.forEach(t),wHe=i(L),ag=n(L,"LI",{});var VEe=s(ag);Soe=n(VEe,"STRONG",{});var Vjr=s(Soe);AHe=r(Vjr,"wav2vec2"),Vjr.forEach(t),yHe=r(VEe," \u2014 "),Yk=n(VEe,"A",{href:!0});var Xjr=s(Yk);LHe=r(Xjr,"Wav2Vec2Config"),Xjr.forEach(t),xHe=r(VEe," (Wav2Vec2 model)"),VEe.forEach(t),$He=i(L),ng=n(L,"LI",{});var XEe=s(ng);Roe=n(XEe,"STRONG",{});var zjr=s(Roe);kHe=r(zjr,"wavlm"),zjr.forEach(t),SHe=r(XEe," \u2014 "),Kk=n(XEe,"A",{href:!0});var Qjr=s(Kk);RHe=r(Qjr,"WavLMConfig"),Qjr.forEach(t),BHe=r(XEe," (WavLM model)"),XEe.forEach(t),PHe=i(L),sg=n(L,"LI",{});var zEe=s(sg);Boe=n(zEe,"STRONG",{});var Wjr=s(Boe);IHe=r(Wjr,"xglm"),Wjr.forEach(t),qHe=r(zEe," \u2014 "),Zk=n(zEe,"A",{href:!0});var Hjr=s(Zk);NHe=r(Hjr,"XGLMConfig"),Hjr.forEach(t),jHe=r(zEe," (XGLM model)"),zEe.forEach(t),DHe=i(L),lg=n(L,"LI",{});var QEe=s(lg);Poe=n(QEe,"STRONG",{});var Ujr=s(Poe);GHe=r(Ujr,"xlm"),Ujr.forEach(t),OHe=r(QEe," \u2014 "),eS=n(QEe,"A",{href:!0});var Jjr=s(eS);VHe=r(Jjr,"XLMConfig"),Jjr.forEach(t),XHe=r(QEe," (XLM model)"),QEe.forEach(t),zHe=i(L),ig=n(L,"LI",{});var WEe=s(ig);Ioe=n(WEe,"STRONG",{});var Yjr=s(Ioe);QHe=r(Yjr,"xlm-prophetnet"),Yjr.forEach(t),WHe=r(WEe," \u2014 "),oS=n(WEe,"A",{href:!0});var Kjr=s(oS);HHe=r(Kjr,"XLMProphetNetConfig"),Kjr.forEach(t),UHe=r(WEe," (XLMProphetNet model)"),WEe.forEach(t),JHe=i(L),dg=n(L,"LI",{});var HEe=s(dg);qoe=n(HEe,"STRONG",{});var Zjr=s(qoe);YHe=r(Zjr,"xlm-roberta"),Zjr.forEach(t),KHe=r(HEe," \u2014 "),rS=n(HEe,"A",{href:!0});var eDr=s(rS);ZHe=r(eDr,"XLMRobertaConfig"),eDr.forEach(t),eUe=r(HEe," (XLM-RoBERTa model)"),HEe.forEach(t),oUe=i(L),cg=n(L,"LI",{});var UEe=s(cg);Noe=n(UEe,"STRONG",{});var oDr=s(Noe);rUe=r(oDr,"xlm-roberta-xl"),oDr.forEach(t),tUe=r(UEe," \u2014 "),tS=n(UEe,"A",{href:!0});var rDr=s(tS);aUe=r(rDr,"XLMRobertaXLConfig"),rDr.forEach(t),nUe=r(UEe," (XLM-RoBERTa-XL model)"),UEe.forEach(t),sUe=i(L),fg=n(L,"LI",{});var JEe=s(fg);joe=n(JEe,"STRONG",{});var tDr=s(joe);lUe=r(tDr,"xlnet"),tDr.forEach(t),iUe=r(JEe," \u2014 "),aS=n(JEe,"A",{href:!0});var aDr=s(aS);dUe=r(aDr,"XLNetConfig"),aDr.forEach(t),cUe=r(JEe," (XLNet model)"),JEe.forEach(t),fUe=i(L),mg=n(L,"LI",{});var YEe=s(mg);Doe=n(YEe,"STRONG",{});var nDr=s(Doe);mUe=r(nDr,"yolos"),nDr.forEach(t),gUe=r(YEe," \u2014 "),nS=n(YEe,"A",{href:!0});var sDr=s(nS);hUe=r(sDr,"YolosConfig"),sDr.forEach(t),pUe=r(YEe," (YOLOS model)"),YEe.forEach(t),uUe=i(L),gg=n(L,"LI",{});var KEe=s(gg);Goe=n(KEe,"STRONG",{});var lDr=s(Goe);_Ue=r(lDr,"yoso"),lDr.forEach(t),bUe=r(KEe," \u2014 "),sS=n(KEe,"A",{href:!0});var iDr=s(sS);vUe=r(iDr,"YosoConfig"),iDr.forEach(t),FUe=r(KEe," (YOSO model)"),KEe.forEach(t),L.forEach(t),TUe=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),MUe=i(Kr),pg=n(Kr,"DIV",{class:!0});var fqe=s(pg);T(UA.$$.fragment,fqe),EUe=i(fqe),Ooe=n(fqe,"P",{});var dDr=s(Ooe);CUe=r(dDr,"Register a new configuration for this class."),dDr.forEach(t),fqe.forEach(t),Kr.forEach(t),hPe=i(f),_i=n(f,"H2",{class:!0});var mqe=s(_i);ug=n(mqe,"A",{id:!0,class:!0,href:!0});var cDr=s(ug);Voe=n(cDr,"SPAN",{});var fDr=s(Voe);T(JA.$$.fragment,fDr),fDr.forEach(t),cDr.forEach(t),wUe=i(mqe),Xoe=n(mqe,"SPAN",{});var mDr=s(Xoe);AUe=r(mDr,"AutoTokenizer"),mDr.forEach(t),mqe.forEach(t),pPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(YA.$$.fragment,Ps),yUe=i(Ps),KA=n(Ps,"P",{});var gqe=s(KA);LUe=r(gqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=n(gqe,"A",{href:!0});var gDr=s(lS);xUe=r(gDr,"AutoTokenizer.from_pretrained()"),gDr.forEach(t),$Ue=r(gqe," class method."),gqe.forEach(t),kUe=i(Ps),ZA=n(Ps,"P",{});var hqe=s(ZA);SUe=r(hqe,"This class cannot be instantiated directly using "),zoe=n(hqe,"CODE",{});var hDr=s(zoe);RUe=r(hDr,"__init__()"),hDr.forEach(t),BUe=r(hqe," (throws an error)."),hqe.forEach(t),PUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(e6.$$.fragment,Is),IUe=i(Is),Qoe=n(Is,"P",{});var pDr=s(Qoe);qUe=r(pDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pDr.forEach(t),NUe=i(Is),Ca=n(Is,"P",{});var V3=s(Ca);jUe=r(V3,"The tokenizer class to instantiate is selected based on the "),Woe=n(V3,"CODE",{});var uDr=s(Woe);DUe=r(uDr,"model_type"),uDr.forEach(t),GUe=r(V3,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(V3,"CODE",{});var _Dr=s(Hoe);OUe=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),VUe=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(V3,"CODE",{});var bDr=s(Uoe);XUe=r(bDr,"pretrained_model_name_or_path"),bDr.forEach(t),zUe=r(V3,":"),V3.forEach(t),QUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var o9=s(kn);Joe=n(o9,"STRONG",{});var vDr=s(Joe);WUe=r(vDr,"albert"),vDr.forEach(t),HUe=r(o9," \u2014 "),iS=n(o9,"A",{href:!0});var FDr=s(iS);UUe=r(FDr,"AlbertTokenizer"),FDr.forEach(t),JUe=r(o9," or "),dS=n(o9,"A",{href:!0});var TDr=s(dS);YUe=r(TDr,"AlbertTokenizerFast"),TDr.forEach(t),KUe=r(o9," (ALBERT model)"),o9.forEach(t),ZUe=i(S),Sn=n(S,"LI",{});var r9=s(Sn);Yoe=n(r9,"STRONG",{});var MDr=s(Yoe);eJe=r(MDr,"bart"),MDr.forEach(t),oJe=r(r9," \u2014 "),cS=n(r9,"A",{href:!0});var EDr=s(cS);rJe=r(EDr,"BartTokenizer"),EDr.forEach(t),tJe=r(r9," or "),fS=n(r9,"A",{href:!0});var CDr=s(fS);aJe=r(CDr,"BartTokenizerFast"),CDr.forEach(t),nJe=r(r9," (BART model)"),r9.forEach(t),sJe=i(S),Rn=n(S,"LI",{});var t9=s(Rn);Koe=n(t9,"STRONG",{});var wDr=s(Koe);lJe=r(wDr,"barthez"),wDr.forEach(t),iJe=r(t9," \u2014 "),mS=n(t9,"A",{href:!0});var ADr=s(mS);dJe=r(ADr,"BarthezTokenizer"),ADr.forEach(t),cJe=r(t9," or "),gS=n(t9,"A",{href:!0});var yDr=s(gS);fJe=r(yDr,"BarthezTokenizerFast"),yDr.forEach(t),mJe=r(t9," (BARThez model)"),t9.forEach(t),gJe=i(S),_g=n(S,"LI",{});var ZEe=s(_g);Zoe=n(ZEe,"STRONG",{});var LDr=s(Zoe);hJe=r(LDr,"bartpho"),LDr.forEach(t),pJe=r(ZEe," \u2014 "),hS=n(ZEe,"A",{href:!0});var xDr=s(hS);uJe=r(xDr,"BartphoTokenizer"),xDr.forEach(t),_Je=r(ZEe," (BARTpho model)"),ZEe.forEach(t),bJe=i(S),Bn=n(S,"LI",{});var a9=s(Bn);ere=n(a9,"STRONG",{});var $Dr=s(ere);vJe=r($Dr,"bert"),$Dr.forEach(t),FJe=r(a9," \u2014 "),pS=n(a9,"A",{href:!0});var kDr=s(pS);TJe=r(kDr,"BertTokenizer"),kDr.forEach(t),MJe=r(a9," or "),uS=n(a9,"A",{href:!0});var SDr=s(uS);EJe=r(SDr,"BertTokenizerFast"),SDr.forEach(t),CJe=r(a9," (BERT model)"),a9.forEach(t),wJe=i(S),bg=n(S,"LI",{});var eCe=s(bg);ore=n(eCe,"STRONG",{});var RDr=s(ore);AJe=r(RDr,"bert-generation"),RDr.forEach(t),yJe=r(eCe," \u2014 "),_S=n(eCe,"A",{href:!0});var BDr=s(_S);LJe=r(BDr,"BertGenerationTokenizer"),BDr.forEach(t),xJe=r(eCe," (Bert Generation model)"),eCe.forEach(t),$Je=i(S),vg=n(S,"LI",{});var oCe=s(vg);rre=n(oCe,"STRONG",{});var PDr=s(rre);kJe=r(PDr,"bert-japanese"),PDr.forEach(t),SJe=r(oCe," \u2014 "),bS=n(oCe,"A",{href:!0});var IDr=s(bS);RJe=r(IDr,"BertJapaneseTokenizer"),IDr.forEach(t),BJe=r(oCe," (BertJapanese model)"),oCe.forEach(t),PJe=i(S),Fg=n(S,"LI",{});var rCe=s(Fg);tre=n(rCe,"STRONG",{});var qDr=s(tre);IJe=r(qDr,"bertweet"),qDr.forEach(t),qJe=r(rCe," \u2014 "),vS=n(rCe,"A",{href:!0});var NDr=s(vS);NJe=r(NDr,"BertweetTokenizer"),NDr.forEach(t),jJe=r(rCe," (Bertweet model)"),rCe.forEach(t),DJe=i(S),Pn=n(S,"LI",{});var n9=s(Pn);are=n(n9,"STRONG",{});var jDr=s(are);GJe=r(jDr,"big_bird"),jDr.forEach(t),OJe=r(n9," \u2014 "),FS=n(n9,"A",{href:!0});var DDr=s(FS);VJe=r(DDr,"BigBirdTokenizer"),DDr.forEach(t),XJe=r(n9," or "),TS=n(n9,"A",{href:!0});var GDr=s(TS);zJe=r(GDr,"BigBirdTokenizerFast"),GDr.forEach(t),QJe=r(n9," (BigBird model)"),n9.forEach(t),WJe=i(S),In=n(S,"LI",{});var s9=s(In);nre=n(s9,"STRONG",{});var ODr=s(nre);HJe=r(ODr,"bigbird_pegasus"),ODr.forEach(t),UJe=r(s9," \u2014 "),MS=n(s9,"A",{href:!0});var VDr=s(MS);JJe=r(VDr,"PegasusTokenizer"),VDr.forEach(t),YJe=r(s9," or "),ES=n(s9,"A",{href:!0});var XDr=s(ES);KJe=r(XDr,"PegasusTokenizerFast"),XDr.forEach(t),ZJe=r(s9," (BigBirdPegasus model)"),s9.forEach(t),eYe=i(S),qn=n(S,"LI",{});var l9=s(qn);sre=n(l9,"STRONG",{});var zDr=s(sre);oYe=r(zDr,"blenderbot"),zDr.forEach(t),rYe=r(l9," \u2014 "),CS=n(l9,"A",{href:!0});var QDr=s(CS);tYe=r(QDr,"BlenderbotTokenizer"),QDr.forEach(t),aYe=r(l9," or "),wS=n(l9,"A",{href:!0});var WDr=s(wS);nYe=r(WDr,"BlenderbotTokenizerFast"),WDr.forEach(t),sYe=r(l9," (Blenderbot model)"),l9.forEach(t),lYe=i(S),Tg=n(S,"LI",{});var tCe=s(Tg);lre=n(tCe,"STRONG",{});var HDr=s(lre);iYe=r(HDr,"blenderbot-small"),HDr.forEach(t),dYe=r(tCe," \u2014 "),AS=n(tCe,"A",{href:!0});var UDr=s(AS);cYe=r(UDr,"BlenderbotSmallTokenizer"),UDr.forEach(t),fYe=r(tCe," (BlenderbotSmall model)"),tCe.forEach(t),mYe=i(S),Mg=n(S,"LI",{});var aCe=s(Mg);ire=n(aCe,"STRONG",{});var JDr=s(ire);gYe=r(JDr,"byt5"),JDr.forEach(t),hYe=r(aCe," \u2014 "),yS=n(aCe,"A",{href:!0});var YDr=s(yS);pYe=r(YDr,"ByT5Tokenizer"),YDr.forEach(t),uYe=r(aCe," (ByT5 model)"),aCe.forEach(t),_Ye=i(S),Nn=n(S,"LI",{});var i9=s(Nn);dre=n(i9,"STRONG",{});var KDr=s(dre);bYe=r(KDr,"camembert"),KDr.forEach(t),vYe=r(i9," \u2014 "),LS=n(i9,"A",{href:!0});var ZDr=s(LS);FYe=r(ZDr,"CamembertTokenizer"),ZDr.forEach(t),TYe=r(i9," or "),xS=n(i9,"A",{href:!0});var eGr=s(xS);MYe=r(eGr,"CamembertTokenizerFast"),eGr.forEach(t),EYe=r(i9," (CamemBERT model)"),i9.forEach(t),CYe=i(S),Eg=n(S,"LI",{});var nCe=s(Eg);cre=n(nCe,"STRONG",{});var oGr=s(cre);wYe=r(oGr,"canine"),oGr.forEach(t),AYe=r(nCe," \u2014 "),$S=n(nCe,"A",{href:!0});var rGr=s($S);yYe=r(rGr,"CanineTokenizer"),rGr.forEach(t),LYe=r(nCe," (Canine model)"),nCe.forEach(t),xYe=i(S),jn=n(S,"LI",{});var d9=s(jn);fre=n(d9,"STRONG",{});var tGr=s(fre);$Ye=r(tGr,"clip"),tGr.forEach(t),kYe=r(d9," \u2014 "),kS=n(d9,"A",{href:!0});var aGr=s(kS);SYe=r(aGr,"CLIPTokenizer"),aGr.forEach(t),RYe=r(d9," or "),SS=n(d9,"A",{href:!0});var nGr=s(SS);BYe=r(nGr,"CLIPTokenizerFast"),nGr.forEach(t),PYe=r(d9," (CLIP model)"),d9.forEach(t),IYe=i(S),Dn=n(S,"LI",{});var c9=s(Dn);mre=n(c9,"STRONG",{});var sGr=s(mre);qYe=r(sGr,"convbert"),sGr.forEach(t),NYe=r(c9," \u2014 "),RS=n(c9,"A",{href:!0});var lGr=s(RS);jYe=r(lGr,"ConvBertTokenizer"),lGr.forEach(t),DYe=r(c9," or "),BS=n(c9,"A",{href:!0});var iGr=s(BS);GYe=r(iGr,"ConvBertTokenizerFast"),iGr.forEach(t),OYe=r(c9," (ConvBERT model)"),c9.forEach(t),VYe=i(S),Gn=n(S,"LI",{});var f9=s(Gn);gre=n(f9,"STRONG",{});var dGr=s(gre);XYe=r(dGr,"cpm"),dGr.forEach(t),zYe=r(f9," \u2014 "),PS=n(f9,"A",{href:!0});var cGr=s(PS);QYe=r(cGr,"CpmTokenizer"),cGr.forEach(t),WYe=r(f9," or "),IS=n(f9,"A",{href:!0});var fGr=s(IS);HYe=r(fGr,"CpmTokenizerFast"),fGr.forEach(t),UYe=r(f9," (CPM model)"),f9.forEach(t),JYe=i(S),Cg=n(S,"LI",{});var sCe=s(Cg);hre=n(sCe,"STRONG",{});var mGr=s(hre);YYe=r(mGr,"ctrl"),mGr.forEach(t),KYe=r(sCe," \u2014 "),qS=n(sCe,"A",{href:!0});var gGr=s(qS);ZYe=r(gGr,"CTRLTokenizer"),gGr.forEach(t),eKe=r(sCe," (CTRL model)"),sCe.forEach(t),oKe=i(S),On=n(S,"LI",{});var m9=s(On);pre=n(m9,"STRONG",{});var hGr=s(pre);rKe=r(hGr,"data2vec-text"),hGr.forEach(t),tKe=r(m9," \u2014 "),NS=n(m9,"A",{href:!0});var pGr=s(NS);aKe=r(pGr,"RobertaTokenizer"),pGr.forEach(t),nKe=r(m9," or "),jS=n(m9,"A",{href:!0});var uGr=s(jS);sKe=r(uGr,"RobertaTokenizerFast"),uGr.forEach(t),lKe=r(m9," (Data2VecText model)"),m9.forEach(t),iKe=i(S),Vn=n(S,"LI",{});var g9=s(Vn);ure=n(g9,"STRONG",{});var _Gr=s(ure);dKe=r(_Gr,"deberta"),_Gr.forEach(t),cKe=r(g9," \u2014 "),DS=n(g9,"A",{href:!0});var bGr=s(DS);fKe=r(bGr,"DebertaTokenizer"),bGr.forEach(t),mKe=r(g9," or "),GS=n(g9,"A",{href:!0});var vGr=s(GS);gKe=r(vGr,"DebertaTokenizerFast"),vGr.forEach(t),hKe=r(g9," (DeBERTa model)"),g9.forEach(t),pKe=i(S),Xn=n(S,"LI",{});var h9=s(Xn);_re=n(h9,"STRONG",{});var FGr=s(_re);uKe=r(FGr,"deberta-v2"),FGr.forEach(t),_Ke=r(h9," \u2014 "),OS=n(h9,"A",{href:!0});var TGr=s(OS);bKe=r(TGr,"DebertaV2Tokenizer"),TGr.forEach(t),vKe=r(h9," or "),VS=n(h9,"A",{href:!0});var MGr=s(VS);FKe=r(MGr,"DebertaV2TokenizerFast"),MGr.forEach(t),TKe=r(h9," (DeBERTa-v2 model)"),h9.forEach(t),MKe=i(S),zn=n(S,"LI",{});var p9=s(zn);bre=n(p9,"STRONG",{});var EGr=s(bre);EKe=r(EGr,"distilbert"),EGr.forEach(t),CKe=r(p9," \u2014 "),XS=n(p9,"A",{href:!0});var CGr=s(XS);wKe=r(CGr,"DistilBertTokenizer"),CGr.forEach(t),AKe=r(p9," or "),zS=n(p9,"A",{href:!0});var wGr=s(zS);yKe=r(wGr,"DistilBertTokenizerFast"),wGr.forEach(t),LKe=r(p9," (DistilBERT model)"),p9.forEach(t),xKe=i(S),Qn=n(S,"LI",{});var u9=s(Qn);vre=n(u9,"STRONG",{});var AGr=s(vre);$Ke=r(AGr,"dpr"),AGr.forEach(t),kKe=r(u9," \u2014 "),QS=n(u9,"A",{href:!0});var yGr=s(QS);SKe=r(yGr,"DPRQuestionEncoderTokenizer"),yGr.forEach(t),RKe=r(u9," or "),WS=n(u9,"A",{href:!0});var LGr=s(WS);BKe=r(LGr,"DPRQuestionEncoderTokenizerFast"),LGr.forEach(t),PKe=r(u9," (DPR model)"),u9.forEach(t),IKe=i(S),Wn=n(S,"LI",{});var _9=s(Wn);Fre=n(_9,"STRONG",{});var xGr=s(Fre);qKe=r(xGr,"electra"),xGr.forEach(t),NKe=r(_9," \u2014 "),HS=n(_9,"A",{href:!0});var $Gr=s(HS);jKe=r($Gr,"ElectraTokenizer"),$Gr.forEach(t),DKe=r(_9," or "),US=n(_9,"A",{href:!0});var kGr=s(US);GKe=r(kGr,"ElectraTokenizerFast"),kGr.forEach(t),OKe=r(_9," (ELECTRA model)"),_9.forEach(t),VKe=i(S),wg=n(S,"LI",{});var lCe=s(wg);Tre=n(lCe,"STRONG",{});var SGr=s(Tre);XKe=r(SGr,"flaubert"),SGr.forEach(t),zKe=r(lCe," \u2014 "),JS=n(lCe,"A",{href:!0});var RGr=s(JS);QKe=r(RGr,"FlaubertTokenizer"),RGr.forEach(t),WKe=r(lCe," (FlauBERT model)"),lCe.forEach(t),HKe=i(S),Hn=n(S,"LI",{});var b9=s(Hn);Mre=n(b9,"STRONG",{});var BGr=s(Mre);UKe=r(BGr,"fnet"),BGr.forEach(t),JKe=r(b9," \u2014 "),YS=n(b9,"A",{href:!0});var PGr=s(YS);YKe=r(PGr,"FNetTokenizer"),PGr.forEach(t),KKe=r(b9," or "),KS=n(b9,"A",{href:!0});var IGr=s(KS);ZKe=r(IGr,"FNetTokenizerFast"),IGr.forEach(t),eZe=r(b9," (FNet model)"),b9.forEach(t),oZe=i(S),Ag=n(S,"LI",{});var iCe=s(Ag);Ere=n(iCe,"STRONG",{});var qGr=s(Ere);rZe=r(qGr,"fsmt"),qGr.forEach(t),tZe=r(iCe," \u2014 "),ZS=n(iCe,"A",{href:!0});var NGr=s(ZS);aZe=r(NGr,"FSMTTokenizer"),NGr.forEach(t),nZe=r(iCe," (FairSeq Machine-Translation model)"),iCe.forEach(t),sZe=i(S),Un=n(S,"LI",{});var v9=s(Un);Cre=n(v9,"STRONG",{});var jGr=s(Cre);lZe=r(jGr,"funnel"),jGr.forEach(t),iZe=r(v9," \u2014 "),eR=n(v9,"A",{href:!0});var DGr=s(eR);dZe=r(DGr,"FunnelTokenizer"),DGr.forEach(t),cZe=r(v9," or "),oR=n(v9,"A",{href:!0});var GGr=s(oR);fZe=r(GGr,"FunnelTokenizerFast"),GGr.forEach(t),mZe=r(v9," (Funnel Transformer model)"),v9.forEach(t),gZe=i(S),Jn=n(S,"LI",{});var F9=s(Jn);wre=n(F9,"STRONG",{});var OGr=s(wre);hZe=r(OGr,"gpt2"),OGr.forEach(t),pZe=r(F9," \u2014 "),rR=n(F9,"A",{href:!0});var VGr=s(rR);uZe=r(VGr,"GPT2Tokenizer"),VGr.forEach(t),_Ze=r(F9," or "),tR=n(F9,"A",{href:!0});var XGr=s(tR);bZe=r(XGr,"GPT2TokenizerFast"),XGr.forEach(t),vZe=r(F9," (OpenAI GPT-2 model)"),F9.forEach(t),FZe=i(S),Yn=n(S,"LI",{});var T9=s(Yn);Are=n(T9,"STRONG",{});var zGr=s(Are);TZe=r(zGr,"gpt_neo"),zGr.forEach(t),MZe=r(T9," \u2014 "),aR=n(T9,"A",{href:!0});var QGr=s(aR);EZe=r(QGr,"GPT2Tokenizer"),QGr.forEach(t),CZe=r(T9," or "),nR=n(T9,"A",{href:!0});var WGr=s(nR);wZe=r(WGr,"GPT2TokenizerFast"),WGr.forEach(t),AZe=r(T9," (GPT Neo model)"),T9.forEach(t),yZe=i(S),Kn=n(S,"LI",{});var M9=s(Kn);yre=n(M9,"STRONG",{});var HGr=s(yre);LZe=r(HGr,"gptj"),HGr.forEach(t),xZe=r(M9," \u2014 "),sR=n(M9,"A",{href:!0});var UGr=s(sR);$Ze=r(UGr,"GPT2Tokenizer"),UGr.forEach(t),kZe=r(M9," or "),lR=n(M9,"A",{href:!0});var JGr=s(lR);SZe=r(JGr,"GPT2TokenizerFast"),JGr.forEach(t),RZe=r(M9," (GPT-J model)"),M9.forEach(t),BZe=i(S),Zn=n(S,"LI",{});var E9=s(Zn);Lre=n(E9,"STRONG",{});var YGr=s(Lre);PZe=r(YGr,"herbert"),YGr.forEach(t),IZe=r(E9," \u2014 "),iR=n(E9,"A",{href:!0});var KGr=s(iR);qZe=r(KGr,"HerbertTokenizer"),KGr.forEach(t),NZe=r(E9," or "),dR=n(E9,"A",{href:!0});var ZGr=s(dR);jZe=r(ZGr,"HerbertTokenizerFast"),ZGr.forEach(t),DZe=r(E9," (HerBERT model)"),E9.forEach(t),GZe=i(S),yg=n(S,"LI",{});var dCe=s(yg);xre=n(dCe,"STRONG",{});var eOr=s(xre);OZe=r(eOr,"hubert"),eOr.forEach(t),VZe=r(dCe," \u2014 "),cR=n(dCe,"A",{href:!0});var oOr=s(cR);XZe=r(oOr,"Wav2Vec2CTCTokenizer"),oOr.forEach(t),zZe=r(dCe," (Hubert model)"),dCe.forEach(t),QZe=i(S),es=n(S,"LI",{});var C9=s(es);$re=n(C9,"STRONG",{});var rOr=s($re);WZe=r(rOr,"ibert"),rOr.forEach(t),HZe=r(C9," \u2014 "),fR=n(C9,"A",{href:!0});var tOr=s(fR);UZe=r(tOr,"RobertaTokenizer"),tOr.forEach(t),JZe=r(C9," or "),mR=n(C9,"A",{href:!0});var aOr=s(mR);YZe=r(aOr,"RobertaTokenizerFast"),aOr.forEach(t),KZe=r(C9," (I-BERT model)"),C9.forEach(t),ZZe=i(S),os=n(S,"LI",{});var w9=s(os);kre=n(w9,"STRONG",{});var nOr=s(kre);eeo=r(nOr,"layoutlm"),nOr.forEach(t),oeo=r(w9," \u2014 "),gR=n(w9,"A",{href:!0});var sOr=s(gR);reo=r(sOr,"LayoutLMTokenizer"),sOr.forEach(t),teo=r(w9," or "),hR=n(w9,"A",{href:!0});var lOr=s(hR);aeo=r(lOr,"LayoutLMTokenizerFast"),lOr.forEach(t),neo=r(w9," (LayoutLM model)"),w9.forEach(t),seo=i(S),rs=n(S,"LI",{});var A9=s(rs);Sre=n(A9,"STRONG",{});var iOr=s(Sre);leo=r(iOr,"layoutlmv2"),iOr.forEach(t),ieo=r(A9," \u2014 "),pR=n(A9,"A",{href:!0});var dOr=s(pR);deo=r(dOr,"LayoutLMv2Tokenizer"),dOr.forEach(t),ceo=r(A9," or "),uR=n(A9,"A",{href:!0});var cOr=s(uR);feo=r(cOr,"LayoutLMv2TokenizerFast"),cOr.forEach(t),meo=r(A9," (LayoutLMv2 model)"),A9.forEach(t),geo=i(S),ts=n(S,"LI",{});var y9=s(ts);Rre=n(y9,"STRONG",{});var fOr=s(Rre);heo=r(fOr,"layoutxlm"),fOr.forEach(t),peo=r(y9," \u2014 "),_R=n(y9,"A",{href:!0});var mOr=s(_R);ueo=r(mOr,"LayoutXLMTokenizer"),mOr.forEach(t),_eo=r(y9," or "),bR=n(y9,"A",{href:!0});var gOr=s(bR);beo=r(gOr,"LayoutXLMTokenizerFast"),gOr.forEach(t),veo=r(y9," (LayoutXLM model)"),y9.forEach(t),Feo=i(S),as=n(S,"LI",{});var L9=s(as);Bre=n(L9,"STRONG",{});var hOr=s(Bre);Teo=r(hOr,"led"),hOr.forEach(t),Meo=r(L9," \u2014 "),vR=n(L9,"A",{href:!0});var pOr=s(vR);Eeo=r(pOr,"LEDTokenizer"),pOr.forEach(t),Ceo=r(L9," or "),FR=n(L9,"A",{href:!0});var uOr=s(FR);weo=r(uOr,"LEDTokenizerFast"),uOr.forEach(t),Aeo=r(L9," (LED model)"),L9.forEach(t),yeo=i(S),ns=n(S,"LI",{});var x9=s(ns);Pre=n(x9,"STRONG",{});var _Or=s(Pre);Leo=r(_Or,"longformer"),_Or.forEach(t),xeo=r(x9," \u2014 "),TR=n(x9,"A",{href:!0});var bOr=s(TR);$eo=r(bOr,"LongformerTokenizer"),bOr.forEach(t),keo=r(x9," or "),MR=n(x9,"A",{href:!0});var vOr=s(MR);Seo=r(vOr,"LongformerTokenizerFast"),vOr.forEach(t),Reo=r(x9," (Longformer model)"),x9.forEach(t),Beo=i(S),Lg=n(S,"LI",{});var cCe=s(Lg);Ire=n(cCe,"STRONG",{});var FOr=s(Ire);Peo=r(FOr,"luke"),FOr.forEach(t),Ieo=r(cCe," \u2014 "),ER=n(cCe,"A",{href:!0});var TOr=s(ER);qeo=r(TOr,"LukeTokenizer"),TOr.forEach(t),Neo=r(cCe," (LUKE model)"),cCe.forEach(t),jeo=i(S),ss=n(S,"LI",{});var $9=s(ss);qre=n($9,"STRONG",{});var MOr=s(qre);Deo=r(MOr,"lxmert"),MOr.forEach(t),Geo=r($9," \u2014 "),CR=n($9,"A",{href:!0});var EOr=s(CR);Oeo=r(EOr,"LxmertTokenizer"),EOr.forEach(t),Veo=r($9," or "),wR=n($9,"A",{href:!0});var COr=s(wR);Xeo=r(COr,"LxmertTokenizerFast"),COr.forEach(t),zeo=r($9," (LXMERT model)"),$9.forEach(t),Qeo=i(S),xg=n(S,"LI",{});var fCe=s(xg);Nre=n(fCe,"STRONG",{});var wOr=s(Nre);Weo=r(wOr,"m2m_100"),wOr.forEach(t),Heo=r(fCe," \u2014 "),AR=n(fCe,"A",{href:!0});var AOr=s(AR);Ueo=r(AOr,"M2M100Tokenizer"),AOr.forEach(t),Jeo=r(fCe," (M2M100 model)"),fCe.forEach(t),Yeo=i(S),$g=n(S,"LI",{});var mCe=s($g);jre=n(mCe,"STRONG",{});var yOr=s(jre);Keo=r(yOr,"marian"),yOr.forEach(t),Zeo=r(mCe," \u2014 "),yR=n(mCe,"A",{href:!0});var LOr=s(yR);eoo=r(LOr,"MarianTokenizer"),LOr.forEach(t),ooo=r(mCe," (Marian model)"),mCe.forEach(t),roo=i(S),ls=n(S,"LI",{});var k9=s(ls);Dre=n(k9,"STRONG",{});var xOr=s(Dre);too=r(xOr,"mbart"),xOr.forEach(t),aoo=r(k9," \u2014 "),LR=n(k9,"A",{href:!0});var $Or=s(LR);noo=r($Or,"MBartTokenizer"),$Or.forEach(t),soo=r(k9," or "),xR=n(k9,"A",{href:!0});var kOr=s(xR);loo=r(kOr,"MBartTokenizerFast"),kOr.forEach(t),ioo=r(k9," (mBART model)"),k9.forEach(t),doo=i(S),is=n(S,"LI",{});var S9=s(is);Gre=n(S9,"STRONG",{});var SOr=s(Gre);coo=r(SOr,"mbart50"),SOr.forEach(t),foo=r(S9," \u2014 "),$R=n(S9,"A",{href:!0});var ROr=s($R);moo=r(ROr,"MBart50Tokenizer"),ROr.forEach(t),goo=r(S9," or "),kR=n(S9,"A",{href:!0});var BOr=s(kR);hoo=r(BOr,"MBart50TokenizerFast"),BOr.forEach(t),poo=r(S9," (mBART-50 model)"),S9.forEach(t),uoo=i(S),ds=n(S,"LI",{});var R9=s(ds);Ore=n(R9,"STRONG",{});var POr=s(Ore);_oo=r(POr,"megatron-bert"),POr.forEach(t),boo=r(R9," \u2014 "),SR=n(R9,"A",{href:!0});var IOr=s(SR);voo=r(IOr,"BertTokenizer"),IOr.forEach(t),Foo=r(R9," or "),RR=n(R9,"A",{href:!0});var qOr=s(RR);Too=r(qOr,"BertTokenizerFast"),qOr.forEach(t),Moo=r(R9," (MegatronBert model)"),R9.forEach(t),Eoo=i(S),kg=n(S,"LI",{});var gCe=s(kg);Vre=n(gCe,"STRONG",{});var NOr=s(Vre);Coo=r(NOr,"mluke"),NOr.forEach(t),woo=r(gCe," \u2014 "),BR=n(gCe,"A",{href:!0});var jOr=s(BR);Aoo=r(jOr,"MLukeTokenizer"),jOr.forEach(t),yoo=r(gCe," (mLUKE model)"),gCe.forEach(t),Loo=i(S),cs=n(S,"LI",{});var B9=s(cs);Xre=n(B9,"STRONG",{});var DOr=s(Xre);xoo=r(DOr,"mobilebert"),DOr.forEach(t),$oo=r(B9," \u2014 "),PR=n(B9,"A",{href:!0});var GOr=s(PR);koo=r(GOr,"MobileBertTokenizer"),GOr.forEach(t),Soo=r(B9," or "),IR=n(B9,"A",{href:!0});var OOr=s(IR);Roo=r(OOr,"MobileBertTokenizerFast"),OOr.forEach(t),Boo=r(B9," (MobileBERT model)"),B9.forEach(t),Poo=i(S),fs=n(S,"LI",{});var P9=s(fs);zre=n(P9,"STRONG",{});var VOr=s(zre);Ioo=r(VOr,"mpnet"),VOr.forEach(t),qoo=r(P9," \u2014 "),qR=n(P9,"A",{href:!0});var XOr=s(qR);Noo=r(XOr,"MPNetTokenizer"),XOr.forEach(t),joo=r(P9," or "),NR=n(P9,"A",{href:!0});var zOr=s(NR);Doo=r(zOr,"MPNetTokenizerFast"),zOr.forEach(t),Goo=r(P9," (MPNet model)"),P9.forEach(t),Ooo=i(S),ms=n(S,"LI",{});var I9=s(ms);Qre=n(I9,"STRONG",{});var QOr=s(Qre);Voo=r(QOr,"mt5"),QOr.forEach(t),Xoo=r(I9," \u2014 "),jR=n(I9,"A",{href:!0});var WOr=s(jR);zoo=r(WOr,"MT5Tokenizer"),WOr.forEach(t),Qoo=r(I9," or "),DR=n(I9,"A",{href:!0});var HOr=s(DR);Woo=r(HOr,"MT5TokenizerFast"),HOr.forEach(t),Hoo=r(I9," (mT5 model)"),I9.forEach(t),Uoo=i(S),gs=n(S,"LI",{});var q9=s(gs);Wre=n(q9,"STRONG",{});var UOr=s(Wre);Joo=r(UOr,"nystromformer"),UOr.forEach(t),Yoo=r(q9," \u2014 "),GR=n(q9,"A",{href:!0});var JOr=s(GR);Koo=r(JOr,"AlbertTokenizer"),JOr.forEach(t),Zoo=r(q9," or "),OR=n(q9,"A",{href:!0});var YOr=s(OR);ero=r(YOr,"AlbertTokenizerFast"),YOr.forEach(t),oro=r(q9," (Nystromformer model)"),q9.forEach(t),rro=i(S),hs=n(S,"LI",{});var N9=s(hs);Hre=n(N9,"STRONG",{});var KOr=s(Hre);tro=r(KOr,"openai-gpt"),KOr.forEach(t),aro=r(N9," \u2014 "),VR=n(N9,"A",{href:!0});var ZOr=s(VR);nro=r(ZOr,"OpenAIGPTTokenizer"),ZOr.forEach(t),sro=r(N9," or "),XR=n(N9,"A",{href:!0});var eVr=s(XR);lro=r(eVr,"OpenAIGPTTokenizerFast"),eVr.forEach(t),iro=r(N9," (OpenAI GPT model)"),N9.forEach(t),dro=i(S),ps=n(S,"LI",{});var j9=s(ps);Ure=n(j9,"STRONG",{});var oVr=s(Ure);cro=r(oVr,"pegasus"),oVr.forEach(t),fro=r(j9," \u2014 "),zR=n(j9,"A",{href:!0});var rVr=s(zR);mro=r(rVr,"PegasusTokenizer"),rVr.forEach(t),gro=r(j9," or "),QR=n(j9,"A",{href:!0});var tVr=s(QR);hro=r(tVr,"PegasusTokenizerFast"),tVr.forEach(t),pro=r(j9," (Pegasus model)"),j9.forEach(t),uro=i(S),Sg=n(S,"LI",{});var hCe=s(Sg);Jre=n(hCe,"STRONG",{});var aVr=s(Jre);_ro=r(aVr,"perceiver"),aVr.forEach(t),bro=r(hCe," \u2014 "),WR=n(hCe,"A",{href:!0});var nVr=s(WR);vro=r(nVr,"PerceiverTokenizer"),nVr.forEach(t),Fro=r(hCe," (Perceiver model)"),hCe.forEach(t),Tro=i(S),Rg=n(S,"LI",{});var pCe=s(Rg);Yre=n(pCe,"STRONG",{});var sVr=s(Yre);Mro=r(sVr,"phobert"),sVr.forEach(t),Ero=r(pCe," \u2014 "),HR=n(pCe,"A",{href:!0});var lVr=s(HR);Cro=r(lVr,"PhobertTokenizer"),lVr.forEach(t),wro=r(pCe," (PhoBERT model)"),pCe.forEach(t),Aro=i(S),Bg=n(S,"LI",{});var uCe=s(Bg);Kre=n(uCe,"STRONG",{});var iVr=s(Kre);yro=r(iVr,"plbart"),iVr.forEach(t),Lro=r(uCe," \u2014 "),UR=n(uCe,"A",{href:!0});var dVr=s(UR);xro=r(dVr,"PLBartTokenizer"),dVr.forEach(t),$ro=r(uCe," (PLBart model)"),uCe.forEach(t),kro=i(S),Pg=n(S,"LI",{});var _Ce=s(Pg);Zre=n(_Ce,"STRONG",{});var cVr=s(Zre);Sro=r(cVr,"prophetnet"),cVr.forEach(t),Rro=r(_Ce," \u2014 "),JR=n(_Ce,"A",{href:!0});var fVr=s(JR);Bro=r(fVr,"ProphetNetTokenizer"),fVr.forEach(t),Pro=r(_Ce," (ProphetNet model)"),_Ce.forEach(t),Iro=i(S),us=n(S,"LI",{});var D9=s(us);ete=n(D9,"STRONG",{});var mVr=s(ete);qro=r(mVr,"qdqbert"),mVr.forEach(t),Nro=r(D9," \u2014 "),YR=n(D9,"A",{href:!0});var gVr=s(YR);jro=r(gVr,"BertTokenizer"),gVr.forEach(t),Dro=r(D9," or "),KR=n(D9,"A",{href:!0});var hVr=s(KR);Gro=r(hVr,"BertTokenizerFast"),hVr.forEach(t),Oro=r(D9," (QDQBert model)"),D9.forEach(t),Vro=i(S),Ig=n(S,"LI",{});var bCe=s(Ig);ote=n(bCe,"STRONG",{});var pVr=s(ote);Xro=r(pVr,"rag"),pVr.forEach(t),zro=r(bCe," \u2014 "),ZR=n(bCe,"A",{href:!0});var uVr=s(ZR);Qro=r(uVr,"RagTokenizer"),uVr.forEach(t),Wro=r(bCe," (RAG model)"),bCe.forEach(t),Hro=i(S),_s=n(S,"LI",{});var G9=s(_s);rte=n(G9,"STRONG",{});var _Vr=s(rte);Uro=r(_Vr,"realm"),_Vr.forEach(t),Jro=r(G9," \u2014 "),eB=n(G9,"A",{href:!0});var bVr=s(eB);Yro=r(bVr,"RealmTokenizer"),bVr.forEach(t),Kro=r(G9," or "),oB=n(G9,"A",{href:!0});var vVr=s(oB);Zro=r(vVr,"RealmTokenizerFast"),vVr.forEach(t),eto=r(G9," (Realm model)"),G9.forEach(t),oto=i(S),bs=n(S,"LI",{});var O9=s(bs);tte=n(O9,"STRONG",{});var FVr=s(tte);rto=r(FVr,"reformer"),FVr.forEach(t),tto=r(O9," \u2014 "),rB=n(O9,"A",{href:!0});var TVr=s(rB);ato=r(TVr,"ReformerTokenizer"),TVr.forEach(t),nto=r(O9," or "),tB=n(O9,"A",{href:!0});var MVr=s(tB);sto=r(MVr,"ReformerTokenizerFast"),MVr.forEach(t),lto=r(O9," (Reformer model)"),O9.forEach(t),ito=i(S),vs=n(S,"LI",{});var V9=s(vs);ate=n(V9,"STRONG",{});var EVr=s(ate);dto=r(EVr,"rembert"),EVr.forEach(t),cto=r(V9," \u2014 "),aB=n(V9,"A",{href:!0});var CVr=s(aB);fto=r(CVr,"RemBertTokenizer"),CVr.forEach(t),mto=r(V9," or "),nB=n(V9,"A",{href:!0});var wVr=s(nB);gto=r(wVr,"RemBertTokenizerFast"),wVr.forEach(t),hto=r(V9," (RemBERT model)"),V9.forEach(t),pto=i(S),Fs=n(S,"LI",{});var X9=s(Fs);nte=n(X9,"STRONG",{});var AVr=s(nte);uto=r(AVr,"retribert"),AVr.forEach(t),_to=r(X9," \u2014 "),sB=n(X9,"A",{href:!0});var yVr=s(sB);bto=r(yVr,"RetriBertTokenizer"),yVr.forEach(t),vto=r(X9," or "),lB=n(X9,"A",{href:!0});var LVr=s(lB);Fto=r(LVr,"RetriBertTokenizerFast"),LVr.forEach(t),Tto=r(X9," (RetriBERT model)"),X9.forEach(t),Mto=i(S),Ts=n(S,"LI",{});var z9=s(Ts);ste=n(z9,"STRONG",{});var xVr=s(ste);Eto=r(xVr,"roberta"),xVr.forEach(t),Cto=r(z9," \u2014 "),iB=n(z9,"A",{href:!0});var $Vr=s(iB);wto=r($Vr,"RobertaTokenizer"),$Vr.forEach(t),Ato=r(z9," or "),dB=n(z9,"A",{href:!0});var kVr=s(dB);yto=r(kVr,"RobertaTokenizerFast"),kVr.forEach(t),Lto=r(z9," (RoBERTa model)"),z9.forEach(t),xto=i(S),Ms=n(S,"LI",{});var Q9=s(Ms);lte=n(Q9,"STRONG",{});var SVr=s(lte);$to=r(SVr,"roformer"),SVr.forEach(t),kto=r(Q9," \u2014 "),cB=n(Q9,"A",{href:!0});var RVr=s(cB);Sto=r(RVr,"RoFormerTokenizer"),RVr.forEach(t),Rto=r(Q9," or "),fB=n(Q9,"A",{href:!0});var BVr=s(fB);Bto=r(BVr,"RoFormerTokenizerFast"),BVr.forEach(t),Pto=r(Q9," (RoFormer model)"),Q9.forEach(t),Ito=i(S),qg=n(S,"LI",{});var vCe=s(qg);ite=n(vCe,"STRONG",{});var PVr=s(ite);qto=r(PVr,"speech_to_text"),PVr.forEach(t),Nto=r(vCe," \u2014 "),mB=n(vCe,"A",{href:!0});var IVr=s(mB);jto=r(IVr,"Speech2TextTokenizer"),IVr.forEach(t),Dto=r(vCe," (Speech2Text model)"),vCe.forEach(t),Gto=i(S),Ng=n(S,"LI",{});var FCe=s(Ng);dte=n(FCe,"STRONG",{});var qVr=s(dte);Oto=r(qVr,"speech_to_text_2"),qVr.forEach(t),Vto=r(FCe," \u2014 "),gB=n(FCe,"A",{href:!0});var NVr=s(gB);Xto=r(NVr,"Speech2Text2Tokenizer"),NVr.forEach(t),zto=r(FCe," (Speech2Text2 model)"),FCe.forEach(t),Qto=i(S),Es=n(S,"LI",{});var W9=s(Es);cte=n(W9,"STRONG",{});var jVr=s(cte);Wto=r(jVr,"splinter"),jVr.forEach(t),Hto=r(W9," \u2014 "),hB=n(W9,"A",{href:!0});var DVr=s(hB);Uto=r(DVr,"SplinterTokenizer"),DVr.forEach(t),Jto=r(W9," or "),pB=n(W9,"A",{href:!0});var GVr=s(pB);Yto=r(GVr,"SplinterTokenizerFast"),GVr.forEach(t),Kto=r(W9," (Splinter model)"),W9.forEach(t),Zto=i(S),Cs=n(S,"LI",{});var H9=s(Cs);fte=n(H9,"STRONG",{});var OVr=s(fte);eao=r(OVr,"squeezebert"),OVr.forEach(t),oao=r(H9," \u2014 "),uB=n(H9,"A",{href:!0});var VVr=s(uB);rao=r(VVr,"SqueezeBertTokenizer"),VVr.forEach(t),tao=r(H9," or "),_B=n(H9,"A",{href:!0});var XVr=s(_B);aao=r(XVr,"SqueezeBertTokenizerFast"),XVr.forEach(t),nao=r(H9," (SqueezeBERT model)"),H9.forEach(t),sao=i(S),ws=n(S,"LI",{});var U9=s(ws);mte=n(U9,"STRONG",{});var zVr=s(mte);lao=r(zVr,"t5"),zVr.forEach(t),iao=r(U9," \u2014 "),bB=n(U9,"A",{href:!0});var QVr=s(bB);dao=r(QVr,"T5Tokenizer"),QVr.forEach(t),cao=r(U9," or "),vB=n(U9,"A",{href:!0});var WVr=s(vB);fao=r(WVr,"T5TokenizerFast"),WVr.forEach(t),mao=r(U9," (T5 model)"),U9.forEach(t),gao=i(S),jg=n(S,"LI",{});var TCe=s(jg);gte=n(TCe,"STRONG",{});var HVr=s(gte);hao=r(HVr,"tapas"),HVr.forEach(t),pao=r(TCe," \u2014 "),FB=n(TCe,"A",{href:!0});var UVr=s(FB);uao=r(UVr,"TapasTokenizer"),UVr.forEach(t),_ao=r(TCe," (TAPAS model)"),TCe.forEach(t),bao=i(S),Dg=n(S,"LI",{});var MCe=s(Dg);hte=n(MCe,"STRONG",{});var JVr=s(hte);vao=r(JVr,"tapex"),JVr.forEach(t),Fao=r(MCe," \u2014 "),TB=n(MCe,"A",{href:!0});var YVr=s(TB);Tao=r(YVr,"TapexTokenizer"),YVr.forEach(t),Mao=r(MCe," (TAPEX model)"),MCe.forEach(t),Eao=i(S),Gg=n(S,"LI",{});var ECe=s(Gg);pte=n(ECe,"STRONG",{});var KVr=s(pte);Cao=r(KVr,"transfo-xl"),KVr.forEach(t),wao=r(ECe," \u2014 "),MB=n(ECe,"A",{href:!0});var ZVr=s(MB);Aao=r(ZVr,"TransfoXLTokenizer"),ZVr.forEach(t),yao=r(ECe," (Transformer-XL model)"),ECe.forEach(t),Lao=i(S),As=n(S,"LI",{});var J9=s(As);ute=n(J9,"STRONG",{});var eXr=s(ute);xao=r(eXr,"visual_bert"),eXr.forEach(t),$ao=r(J9," \u2014 "),EB=n(J9,"A",{href:!0});var oXr=s(EB);kao=r(oXr,"BertTokenizer"),oXr.forEach(t),Sao=r(J9," or "),CB=n(J9,"A",{href:!0});var rXr=s(CB);Rao=r(rXr,"BertTokenizerFast"),rXr.forEach(t),Bao=r(J9," (VisualBert model)"),J9.forEach(t),Pao=i(S),Og=n(S,"LI",{});var CCe=s(Og);_te=n(CCe,"STRONG",{});var tXr=s(_te);Iao=r(tXr,"wav2vec2"),tXr.forEach(t),qao=r(CCe," \u2014 "),wB=n(CCe,"A",{href:!0});var aXr=s(wB);Nao=r(aXr,"Wav2Vec2CTCTokenizer"),aXr.forEach(t),jao=r(CCe," (Wav2Vec2 model)"),CCe.forEach(t),Dao=i(S),Vg=n(S,"LI",{});var wCe=s(Vg);bte=n(wCe,"STRONG",{});var nXr=s(bte);Gao=r(nXr,"wav2vec2_phoneme"),nXr.forEach(t),Oao=r(wCe," \u2014 "),AB=n(wCe,"A",{href:!0});var sXr=s(AB);Vao=r(sXr,"Wav2Vec2PhonemeCTCTokenizer"),sXr.forEach(t),Xao=r(wCe," (Wav2Vec2Phoneme model)"),wCe.forEach(t),zao=i(S),ys=n(S,"LI",{});var Y9=s(ys);vte=n(Y9,"STRONG",{});var lXr=s(vte);Qao=r(lXr,"xglm"),lXr.forEach(t),Wao=r(Y9," \u2014 "),yB=n(Y9,"A",{href:!0});var iXr=s(yB);Hao=r(iXr,"XGLMTokenizer"),iXr.forEach(t),Uao=r(Y9," or "),LB=n(Y9,"A",{href:!0});var dXr=s(LB);Jao=r(dXr,"XGLMTokenizerFast"),dXr.forEach(t),Yao=r(Y9," (XGLM model)"),Y9.forEach(t),Kao=i(S),Xg=n(S,"LI",{});var ACe=s(Xg);Fte=n(ACe,"STRONG",{});var cXr=s(Fte);Zao=r(cXr,"xlm"),cXr.forEach(t),eno=r(ACe," \u2014 "),xB=n(ACe,"A",{href:!0});var fXr=s(xB);ono=r(fXr,"XLMTokenizer"),fXr.forEach(t),rno=r(ACe," (XLM model)"),ACe.forEach(t),tno=i(S),zg=n(S,"LI",{});var yCe=s(zg);Tte=n(yCe,"STRONG",{});var mXr=s(Tte);ano=r(mXr,"xlm-prophetnet"),mXr.forEach(t),nno=r(yCe," \u2014 "),$B=n(yCe,"A",{href:!0});var gXr=s($B);sno=r(gXr,"XLMProphetNetTokenizer"),gXr.forEach(t),lno=r(yCe," (XLMProphetNet model)"),yCe.forEach(t),ino=i(S),Ls=n(S,"LI",{});var K9=s(Ls);Mte=n(K9,"STRONG",{});var hXr=s(Mte);dno=r(hXr,"xlm-roberta"),hXr.forEach(t),cno=r(K9," \u2014 "),kB=n(K9,"A",{href:!0});var pXr=s(kB);fno=r(pXr,"XLMRobertaTokenizer"),pXr.forEach(t),mno=r(K9," or "),SB=n(K9,"A",{href:!0});var uXr=s(SB);gno=r(uXr,"XLMRobertaTokenizerFast"),uXr.forEach(t),hno=r(K9," (XLM-RoBERTa model)"),K9.forEach(t),pno=i(S),xs=n(S,"LI",{});var Z9=s(xs);Ete=n(Z9,"STRONG",{});var _Xr=s(Ete);uno=r(_Xr,"xlm-roberta-xl"),_Xr.forEach(t),_no=r(Z9," \u2014 "),RB=n(Z9,"A",{href:!0});var bXr=s(RB);bno=r(bXr,"RobertaTokenizer"),bXr.forEach(t),vno=r(Z9," or "),BB=n(Z9,"A",{href:!0});var vXr=s(BB);Fno=r(vXr,"RobertaTokenizerFast"),vXr.forEach(t),Tno=r(Z9," (XLM-RoBERTa-XL model)"),Z9.forEach(t),Mno=i(S),$s=n(S,"LI",{});var e$=s($s);Cte=n(e$,"STRONG",{});var FXr=s(Cte);Eno=r(FXr,"xlnet"),FXr.forEach(t),Cno=r(e$," \u2014 "),PB=n(e$,"A",{href:!0});var TXr=s(PB);wno=r(TXr,"XLNetTokenizer"),TXr.forEach(t),Ano=r(e$," or "),IB=n(e$,"A",{href:!0});var MXr=s(IB);yno=r(MXr,"XLNetTokenizerFast"),MXr.forEach(t),Lno=r(e$," (XLNet model)"),e$.forEach(t),xno=i(S),ks=n(S,"LI",{});var o$=s(ks);wte=n(o$,"STRONG",{});var EXr=s(wte);$no=r(EXr,"yoso"),EXr.forEach(t),kno=r(o$," \u2014 "),qB=n(o$,"A",{href:!0});var CXr=s(qB);Sno=r(CXr,"AlbertTokenizer"),CXr.forEach(t),Rno=r(o$," or "),NB=n(o$,"A",{href:!0});var wXr=s(NB);Bno=r(wXr,"AlbertTokenizerFast"),wXr.forEach(t),Pno=r(o$," (YOSO model)"),o$.forEach(t),S.forEach(t),Ino=i(Is),T(Qg.$$.fragment,Is),Is.forEach(t),qno=i(Ps),Wg=n(Ps,"DIV",{class:!0});var pqe=s(Wg);T(o6.$$.fragment,pqe),Nno=i(pqe),Ate=n(pqe,"P",{});var AXr=s(Ate);jno=r(AXr,"Register a new tokenizer in this mapping."),AXr.forEach(t),pqe.forEach(t),Ps.forEach(t),uPe=i(f),bi=n(f,"H2",{class:!0});var uqe=s(bi);Hg=n(uqe,"A",{id:!0,class:!0,href:!0});var yXr=s(Hg);yte=n(yXr,"SPAN",{});var LXr=s(yte);T(r6.$$.fragment,LXr),LXr.forEach(t),yXr.forEach(t),Dno=i(uqe),Lte=n(uqe,"SPAN",{});var xXr=s(Lte);Gno=r(xXr,"AutoFeatureExtractor"),xXr.forEach(t),uqe.forEach(t),_Pe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(t6.$$.fragment,qs),Ono=i(qs),a6=n(qs,"P",{});var _qe=s(a6);Vno=r(_qe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=n(_qe,"A",{href:!0});var $Xr=s(jB);Xno=r($Xr,"AutoFeatureExtractor.from_pretrained()"),$Xr.forEach(t),zno=r(_qe," class method."),_qe.forEach(t),Qno=i(qs),n6=n(qs,"P",{});var bqe=s(n6);Wno=r(bqe,"This class cannot be instantiated directly using "),xte=n(bqe,"CODE",{});var kXr=s(xte);Hno=r(kXr,"__init__()"),kXr.forEach(t),Uno=r(bqe," (throws an error)."),bqe.forEach(t),Jno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(s6.$$.fragment,Yt),Yno=i(Yt),$te=n(Yt,"P",{});var SXr=s($te);Kno=r(SXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SXr.forEach(t),Zno=i(Yt),wa=n(Yt,"P",{});var X3=s(wa);eso=r(X3,"The feature extractor class to instantiate is selected based on the "),kte=n(X3,"CODE",{});var RXr=s(kte);oso=r(RXr,"model_type"),RXr.forEach(t),rso=r(X3,` property of the config object
(either passed as an argument or loaded from `),Ste=n(X3,"CODE",{});var BXr=s(Ste);tso=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),aso=r(X3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=n(X3,"CODE",{});var PXr=s(Rte);nso=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),sso=r(X3,":"),X3.forEach(t),lso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var LCe=s(Ug);Bte=n(LCe,"STRONG",{});var IXr=s(Bte);iso=r(IXr,"beit"),IXr.forEach(t),dso=r(LCe," \u2014 "),DB=n(LCe,"A",{href:!0});var qXr=s(DB);cso=r(qXr,"BeitFeatureExtractor"),qXr.forEach(t),fso=r(LCe," (BEiT model)"),LCe.forEach(t),mso=i(se),Jg=n(se,"LI",{});var xCe=s(Jg);Pte=n(xCe,"STRONG",{});var NXr=s(Pte);gso=r(NXr,"clip"),NXr.forEach(t),hso=r(xCe," \u2014 "),GB=n(xCe,"A",{href:!0});var jXr=s(GB);pso=r(jXr,"CLIPFeatureExtractor"),jXr.forEach(t),uso=r(xCe," (CLIP model)"),xCe.forEach(t),_so=i(se),Yg=n(se,"LI",{});var $Ce=s(Yg);Ite=n($Ce,"STRONG",{});var DXr=s(Ite);bso=r(DXr,"convnext"),DXr.forEach(t),vso=r($Ce," \u2014 "),OB=n($Ce,"A",{href:!0});var GXr=s(OB);Fso=r(GXr,"ConvNextFeatureExtractor"),GXr.forEach(t),Tso=r($Ce," (ConvNext model)"),$Ce.forEach(t),Mso=i(se),Kg=n(se,"LI",{});var kCe=s(Kg);qte=n(kCe,"STRONG",{});var OXr=s(qte);Eso=r(OXr,"data2vec-audio"),OXr.forEach(t),Cso=r(kCe," \u2014 "),VB=n(kCe,"A",{href:!0});var VXr=s(VB);wso=r(VXr,"Wav2Vec2FeatureExtractor"),VXr.forEach(t),Aso=r(kCe," (Data2VecAudio model)"),kCe.forEach(t),yso=i(se),Zg=n(se,"LI",{});var SCe=s(Zg);Nte=n(SCe,"STRONG",{});var XXr=s(Nte);Lso=r(XXr,"data2vec-vision"),XXr.forEach(t),xso=r(SCe," \u2014 "),XB=n(SCe,"A",{href:!0});var zXr=s(XB);$so=r(zXr,"BeitFeatureExtractor"),zXr.forEach(t),kso=r(SCe," (Data2VecVision model)"),SCe.forEach(t),Sso=i(se),eh=n(se,"LI",{});var RCe=s(eh);jte=n(RCe,"STRONG",{});var QXr=s(jte);Rso=r(QXr,"deit"),QXr.forEach(t),Bso=r(RCe," \u2014 "),zB=n(RCe,"A",{href:!0});var WXr=s(zB);Pso=r(WXr,"DeiTFeatureExtractor"),WXr.forEach(t),Iso=r(RCe," (DeiT model)"),RCe.forEach(t),qso=i(se),oh=n(se,"LI",{});var BCe=s(oh);Dte=n(BCe,"STRONG",{});var HXr=s(Dte);Nso=r(HXr,"detr"),HXr.forEach(t),jso=r(BCe," \u2014 "),QB=n(BCe,"A",{href:!0});var UXr=s(QB);Dso=r(UXr,"DetrFeatureExtractor"),UXr.forEach(t),Gso=r(BCe," (DETR model)"),BCe.forEach(t),Oso=i(se),rh=n(se,"LI",{});var PCe=s(rh);Gte=n(PCe,"STRONG",{});var JXr=s(Gte);Vso=r(JXr,"dpt"),JXr.forEach(t),Xso=r(PCe," \u2014 "),WB=n(PCe,"A",{href:!0});var YXr=s(WB);zso=r(YXr,"DPTFeatureExtractor"),YXr.forEach(t),Qso=r(PCe," (DPT model)"),PCe.forEach(t),Wso=i(se),th=n(se,"LI",{});var ICe=s(th);Ote=n(ICe,"STRONG",{});var KXr=s(Ote);Hso=r(KXr,"glpn"),KXr.forEach(t),Uso=r(ICe," \u2014 "),HB=n(ICe,"A",{href:!0});var ZXr=s(HB);Jso=r(ZXr,"GLPNFeatureExtractor"),ZXr.forEach(t),Yso=r(ICe," (GLPN model)"),ICe.forEach(t),Kso=i(se),ah=n(se,"LI",{});var qCe=s(ah);Vte=n(qCe,"STRONG",{});var ezr=s(Vte);Zso=r(ezr,"hubert"),ezr.forEach(t),elo=r(qCe," \u2014 "),UB=n(qCe,"A",{href:!0});var ozr=s(UB);olo=r(ozr,"Wav2Vec2FeatureExtractor"),ozr.forEach(t),rlo=r(qCe," (Hubert model)"),qCe.forEach(t),tlo=i(se),nh=n(se,"LI",{});var NCe=s(nh);Xte=n(NCe,"STRONG",{});var rzr=s(Xte);alo=r(rzr,"layoutlmv2"),rzr.forEach(t),nlo=r(NCe," \u2014 "),JB=n(NCe,"A",{href:!0});var tzr=s(JB);slo=r(tzr,"LayoutLMv2FeatureExtractor"),tzr.forEach(t),llo=r(NCe," (LayoutLMv2 model)"),NCe.forEach(t),ilo=i(se),sh=n(se,"LI",{});var jCe=s(sh);zte=n(jCe,"STRONG",{});var azr=s(zte);dlo=r(azr,"maskformer"),azr.forEach(t),clo=r(jCe," \u2014 "),YB=n(jCe,"A",{href:!0});var nzr=s(YB);flo=r(nzr,"MaskFormerFeatureExtractor"),nzr.forEach(t),mlo=r(jCe," (MaskFormer model)"),jCe.forEach(t),glo=i(se),lh=n(se,"LI",{});var DCe=s(lh);Qte=n(DCe,"STRONG",{});var szr=s(Qte);hlo=r(szr,"perceiver"),szr.forEach(t),plo=r(DCe," \u2014 "),KB=n(DCe,"A",{href:!0});var lzr=s(KB);ulo=r(lzr,"PerceiverFeatureExtractor"),lzr.forEach(t),_lo=r(DCe," (Perceiver model)"),DCe.forEach(t),blo=i(se),ih=n(se,"LI",{});var GCe=s(ih);Wte=n(GCe,"STRONG",{});var izr=s(Wte);vlo=r(izr,"poolformer"),izr.forEach(t),Flo=r(GCe," \u2014 "),ZB=n(GCe,"A",{href:!0});var dzr=s(ZB);Tlo=r(dzr,"PoolFormerFeatureExtractor"),dzr.forEach(t),Mlo=r(GCe," (PoolFormer model)"),GCe.forEach(t),Elo=i(se),dh=n(se,"LI",{});var OCe=s(dh);Hte=n(OCe,"STRONG",{});var czr=s(Hte);Clo=r(czr,"regnet"),czr.forEach(t),wlo=r(OCe," \u2014 "),eP=n(OCe,"A",{href:!0});var fzr=s(eP);Alo=r(fzr,"ConvNextFeatureExtractor"),fzr.forEach(t),ylo=r(OCe," (RegNet model)"),OCe.forEach(t),Llo=i(se),ch=n(se,"LI",{});var VCe=s(ch);Ute=n(VCe,"STRONG",{});var mzr=s(Ute);xlo=r(mzr,"resnet"),mzr.forEach(t),$lo=r(VCe," \u2014 "),oP=n(VCe,"A",{href:!0});var gzr=s(oP);klo=r(gzr,"ConvNextFeatureExtractor"),gzr.forEach(t),Slo=r(VCe," (ResNet model)"),VCe.forEach(t),Rlo=i(se),fh=n(se,"LI",{});var XCe=s(fh);Jte=n(XCe,"STRONG",{});var hzr=s(Jte);Blo=r(hzr,"segformer"),hzr.forEach(t),Plo=r(XCe," \u2014 "),rP=n(XCe,"A",{href:!0});var pzr=s(rP);Ilo=r(pzr,"SegformerFeatureExtractor"),pzr.forEach(t),qlo=r(XCe," (SegFormer model)"),XCe.forEach(t),Nlo=i(se),mh=n(se,"LI",{});var zCe=s(mh);Yte=n(zCe,"STRONG",{});var uzr=s(Yte);jlo=r(uzr,"speech_to_text"),uzr.forEach(t),Dlo=r(zCe," \u2014 "),tP=n(zCe,"A",{href:!0});var _zr=s(tP);Glo=r(_zr,"Speech2TextFeatureExtractor"),_zr.forEach(t),Olo=r(zCe," (Speech2Text model)"),zCe.forEach(t),Vlo=i(se),gh=n(se,"LI",{});var QCe=s(gh);Kte=n(QCe,"STRONG",{});var bzr=s(Kte);Xlo=r(bzr,"swin"),bzr.forEach(t),zlo=r(QCe," \u2014 "),aP=n(QCe,"A",{href:!0});var vzr=s(aP);Qlo=r(vzr,"ViTFeatureExtractor"),vzr.forEach(t),Wlo=r(QCe," (Swin model)"),QCe.forEach(t),Hlo=i(se),hh=n(se,"LI",{});var WCe=s(hh);Zte=n(WCe,"STRONG",{});var Fzr=s(Zte);Ulo=r(Fzr,"van"),Fzr.forEach(t),Jlo=r(WCe," \u2014 "),nP=n(WCe,"A",{href:!0});var Tzr=s(nP);Ylo=r(Tzr,"ConvNextFeatureExtractor"),Tzr.forEach(t),Klo=r(WCe," (VAN model)"),WCe.forEach(t),Zlo=i(se),ph=n(se,"LI",{});var HCe=s(ph);eae=n(HCe,"STRONG",{});var Mzr=s(eae);eio=r(Mzr,"vit"),Mzr.forEach(t),oio=r(HCe," \u2014 "),sP=n(HCe,"A",{href:!0});var Ezr=s(sP);rio=r(Ezr,"ViTFeatureExtractor"),Ezr.forEach(t),tio=r(HCe," (ViT model)"),HCe.forEach(t),aio=i(se),uh=n(se,"LI",{});var UCe=s(uh);oae=n(UCe,"STRONG",{});var Czr=s(oae);nio=r(Czr,"vit_mae"),Czr.forEach(t),sio=r(UCe," \u2014 "),lP=n(UCe,"A",{href:!0});var wzr=s(lP);lio=r(wzr,"ViTFeatureExtractor"),wzr.forEach(t),iio=r(UCe," (ViTMAE model)"),UCe.forEach(t),dio=i(se),_h=n(se,"LI",{});var JCe=s(_h);rae=n(JCe,"STRONG",{});var Azr=s(rae);cio=r(Azr,"wav2vec2"),Azr.forEach(t),fio=r(JCe," \u2014 "),iP=n(JCe,"A",{href:!0});var yzr=s(iP);mio=r(yzr,"Wav2Vec2FeatureExtractor"),yzr.forEach(t),gio=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),hio=i(se),bh=n(se,"LI",{});var YCe=s(bh);tae=n(YCe,"STRONG",{});var Lzr=s(tae);pio=r(Lzr,"yolos"),Lzr.forEach(t),uio=r(YCe," \u2014 "),dP=n(YCe,"A",{href:!0});var xzr=s(dP);_io=r(xzr,"YolosFeatureExtractor"),xzr.forEach(t),bio=r(YCe," (YOLOS model)"),YCe.forEach(t),se.forEach(t),vio=i(Yt),T(vh.$$.fragment,Yt),Fio=i(Yt),T(Fh.$$.fragment,Yt),Yt.forEach(t),Tio=i(qs),Th=n(qs,"DIV",{class:!0});var vqe=s(Th);T(l6.$$.fragment,vqe),Mio=i(vqe),aae=n(vqe,"P",{});var $zr=s(aae);Eio=r($zr,"Register a new feature extractor for this class."),$zr.forEach(t),vqe.forEach(t),qs.forEach(t),bPe=i(f),vi=n(f,"H2",{class:!0});var Fqe=s(vi);Mh=n(Fqe,"A",{id:!0,class:!0,href:!0});var kzr=s(Mh);nae=n(kzr,"SPAN",{});var Szr=s(nae);T(i6.$$.fragment,Szr),Szr.forEach(t),kzr.forEach(t),Cio=i(Fqe),sae=n(Fqe,"SPAN",{});var Rzr=s(sae);wio=r(Rzr,"AutoProcessor"),Rzr.forEach(t),Fqe.forEach(t),vPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(d6.$$.fragment,Ns),Aio=i(Ns),c6=n(Ns,"P",{});var Tqe=s(c6);yio=r(Tqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=n(Tqe,"A",{href:!0});var Bzr=s(cP);Lio=r(Bzr,"AutoProcessor.from_pretrained()"),Bzr.forEach(t),xio=r(Tqe," class method."),Tqe.forEach(t),$io=i(Ns),f6=n(Ns,"P",{});var Mqe=s(f6);kio=r(Mqe,"This class cannot be instantiated directly using "),lae=n(Mqe,"CODE",{});var Pzr=s(lae);Sio=r(Pzr,"__init__()"),Pzr.forEach(t),Rio=r(Mqe," (throws an error)."),Mqe.forEach(t),Bio=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(m6.$$.fragment,Kt),Pio=i(Kt),iae=n(Kt,"P",{});var Izr=s(iae);Iio=r(Izr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Izr.forEach(t),qio=i(Kt),Fi=n(Kt,"P",{});var XY=s(Fi);Nio=r(XY,"The processor class to instantiate is selected based on the "),dae=n(XY,"CODE",{});var qzr=s(dae);jio=r(qzr,"model_type"),qzr.forEach(t),Dio=r(XY,` property of the config object (either
passed as an argument or loaded from `),cae=n(XY,"CODE",{});var Nzr=s(cae);Gio=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Oio=r(XY," if possible):"),XY.forEach(t),Vio=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Eh=n(Fe,"LI",{});var KCe=s(Eh);fae=n(KCe,"STRONG",{});var jzr=s(fae);Xio=r(jzr,"clip"),jzr.forEach(t),zio=r(KCe," \u2014 "),fP=n(KCe,"A",{href:!0});var Dzr=s(fP);Qio=r(Dzr,"CLIPProcessor"),Dzr.forEach(t),Wio=r(KCe," (CLIP model)"),KCe.forEach(t),Hio=i(Fe),Ch=n(Fe,"LI",{});var ZCe=s(Ch);mae=n(ZCe,"STRONG",{});var Gzr=s(mae);Uio=r(Gzr,"layoutlmv2"),Gzr.forEach(t),Jio=r(ZCe," \u2014 "),mP=n(ZCe,"A",{href:!0});var Ozr=s(mP);Yio=r(Ozr,"LayoutLMv2Processor"),Ozr.forEach(t),Kio=r(ZCe," (LayoutLMv2 model)"),ZCe.forEach(t),Zio=i(Fe),wh=n(Fe,"LI",{});var e3e=s(wh);gae=n(e3e,"STRONG",{});var Vzr=s(gae);edo=r(Vzr,"layoutxlm"),Vzr.forEach(t),odo=r(e3e," \u2014 "),gP=n(e3e,"A",{href:!0});var Xzr=s(gP);rdo=r(Xzr,"LayoutXLMProcessor"),Xzr.forEach(t),tdo=r(e3e," (LayoutXLM model)"),e3e.forEach(t),ado=i(Fe),Ah=n(Fe,"LI",{});var o3e=s(Ah);hae=n(o3e,"STRONG",{});var zzr=s(hae);ndo=r(zzr,"sew"),zzr.forEach(t),sdo=r(o3e," \u2014 "),hP=n(o3e,"A",{href:!0});var Qzr=s(hP);ldo=r(Qzr,"Wav2Vec2Processor"),Qzr.forEach(t),ido=r(o3e," (SEW model)"),o3e.forEach(t),ddo=i(Fe),yh=n(Fe,"LI",{});var r3e=s(yh);pae=n(r3e,"STRONG",{});var Wzr=s(pae);cdo=r(Wzr,"sew-d"),Wzr.forEach(t),fdo=r(r3e," \u2014 "),pP=n(r3e,"A",{href:!0});var Hzr=s(pP);mdo=r(Hzr,"Wav2Vec2Processor"),Hzr.forEach(t),gdo=r(r3e," (SEW-D model)"),r3e.forEach(t),hdo=i(Fe),Lh=n(Fe,"LI",{});var t3e=s(Lh);uae=n(t3e,"STRONG",{});var Uzr=s(uae);pdo=r(Uzr,"speech_to_text"),Uzr.forEach(t),udo=r(t3e," \u2014 "),uP=n(t3e,"A",{href:!0});var Jzr=s(uP);_do=r(Jzr,"Speech2TextProcessor"),Jzr.forEach(t),bdo=r(t3e," (Speech2Text model)"),t3e.forEach(t),vdo=i(Fe),xh=n(Fe,"LI",{});var a3e=s(xh);_ae=n(a3e,"STRONG",{});var Yzr=s(_ae);Fdo=r(Yzr,"speech_to_text_2"),Yzr.forEach(t),Tdo=r(a3e," \u2014 "),_P=n(a3e,"A",{href:!0});var Kzr=s(_P);Mdo=r(Kzr,"Speech2Text2Processor"),Kzr.forEach(t),Edo=r(a3e," (Speech2Text2 model)"),a3e.forEach(t),Cdo=i(Fe),$h=n(Fe,"LI",{});var n3e=s($h);bae=n(n3e,"STRONG",{});var Zzr=s(bae);wdo=r(Zzr,"trocr"),Zzr.forEach(t),Ado=r(n3e," \u2014 "),bP=n(n3e,"A",{href:!0});var eQr=s(bP);ydo=r(eQr,"TrOCRProcessor"),eQr.forEach(t),Ldo=r(n3e," (TrOCR model)"),n3e.forEach(t),xdo=i(Fe),kh=n(Fe,"LI",{});var s3e=s(kh);vae=n(s3e,"STRONG",{});var oQr=s(vae);$do=r(oQr,"unispeech"),oQr.forEach(t),kdo=r(s3e," \u2014 "),vP=n(s3e,"A",{href:!0});var rQr=s(vP);Sdo=r(rQr,"Wav2Vec2Processor"),rQr.forEach(t),Rdo=r(s3e," (UniSpeech model)"),s3e.forEach(t),Bdo=i(Fe),Sh=n(Fe,"LI",{});var l3e=s(Sh);Fae=n(l3e,"STRONG",{});var tQr=s(Fae);Pdo=r(tQr,"unispeech-sat"),tQr.forEach(t),Ido=r(l3e," \u2014 "),FP=n(l3e,"A",{href:!0});var aQr=s(FP);qdo=r(aQr,"Wav2Vec2Processor"),aQr.forEach(t),Ndo=r(l3e," (UniSpeechSat model)"),l3e.forEach(t),jdo=i(Fe),Rh=n(Fe,"LI",{});var i3e=s(Rh);Tae=n(i3e,"STRONG",{});var nQr=s(Tae);Ddo=r(nQr,"vilt"),nQr.forEach(t),Gdo=r(i3e," \u2014 "),TP=n(i3e,"A",{href:!0});var sQr=s(TP);Odo=r(sQr,"ViltProcessor"),sQr.forEach(t),Vdo=r(i3e," (ViLT model)"),i3e.forEach(t),Xdo=i(Fe),Bh=n(Fe,"LI",{});var d3e=s(Bh);Mae=n(d3e,"STRONG",{});var lQr=s(Mae);zdo=r(lQr,"vision-text-dual-encoder"),lQr.forEach(t),Qdo=r(d3e," \u2014 "),MP=n(d3e,"A",{href:!0});var iQr=s(MP);Wdo=r(iQr,"VisionTextDualEncoderProcessor"),iQr.forEach(t),Hdo=r(d3e," (VisionTextDualEncoder model)"),d3e.forEach(t),Udo=i(Fe),Ph=n(Fe,"LI",{});var c3e=s(Ph);Eae=n(c3e,"STRONG",{});var dQr=s(Eae);Jdo=r(dQr,"wav2vec2"),dQr.forEach(t),Ydo=r(c3e," \u2014 "),EP=n(c3e,"A",{href:!0});var cQr=s(EP);Kdo=r(cQr,"Wav2Vec2Processor"),cQr.forEach(t),Zdo=r(c3e," (Wav2Vec2 model)"),c3e.forEach(t),eco=i(Fe),Ih=n(Fe,"LI",{});var f3e=s(Ih);Cae=n(f3e,"STRONG",{});var fQr=s(Cae);oco=r(fQr,"wavlm"),fQr.forEach(t),rco=r(f3e," \u2014 "),CP=n(f3e,"A",{href:!0});var mQr=s(CP);tco=r(mQr,"Wav2Vec2Processor"),mQr.forEach(t),aco=r(f3e," (WavLM model)"),f3e.forEach(t),Fe.forEach(t),nco=i(Kt),T(qh.$$.fragment,Kt),sco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),lco=i(Ns),jh=n(Ns,"DIV",{class:!0});var Eqe=s(jh);T(g6.$$.fragment,Eqe),ico=i(Eqe),wae=n(Eqe,"P",{});var gQr=s(wae);dco=r(gQr,"Register a new processor for this class."),gQr.forEach(t),Eqe.forEach(t),Ns.forEach(t),FPe=i(f),Ti=n(f,"H2",{class:!0});var Cqe=s(Ti);Dh=n(Cqe,"A",{id:!0,class:!0,href:!0});var hQr=s(Dh);Aae=n(hQr,"SPAN",{});var pQr=s(Aae);T(h6.$$.fragment,pQr),pQr.forEach(t),hQr.forEach(t),cco=i(Cqe),yae=n(Cqe,"SPAN",{});var uQr=s(yae);fco=r(uQr,"AutoModel"),uQr.forEach(t),Cqe.forEach(t),TPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(p6.$$.fragment,js),mco=i(js),Mi=n(js,"P",{});var zY=s(Mi);gco=r(zY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=n(zY,"A",{href:!0});var _Qr=s(wP);hco=r(_Qr,"from_pretrained()"),_Qr.forEach(t),pco=r(zY," class method or the "),AP=n(zY,"A",{href:!0});var bQr=s(AP);uco=r(bQr,"from_config()"),bQr.forEach(t),_co=r(zY,` class
method.`),zY.forEach(t),bco=i(js),u6=n(js,"P",{});var wqe=s(u6);vco=r(wqe,"This class cannot be instantiated directly using "),Lae=n(wqe,"CODE",{});var vQr=s(Lae);Fco=r(vQr,"__init__()"),vQr.forEach(t),Tco=r(wqe," (throws an error)."),wqe.forEach(t),Mco=i(js),ot=n(js,"DIV",{class:!0});var z3=s(ot);T(_6.$$.fragment,z3),Eco=i(z3),xae=n(z3,"P",{});var FQr=s(xae);Cco=r(FQr,"Instantiates one of the base model classes of the library from a configuration."),FQr.forEach(t),wco=i(z3),Ei=n(z3,"P",{});var QY=s(Ei);Aco=r(QY,`Note:
Loading a model from its configuration file does `),$ae=n(QY,"STRONG",{});var TQr=s($ae);yco=r(TQr,"not"),TQr.forEach(t),Lco=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=n(QY,"A",{href:!0});var MQr=s(yP);xco=r(MQr,"from_pretrained()"),MQr.forEach(t),$co=r(QY," to load the model weights."),QY.forEach(t),kco=i(z3),T(Gh.$$.fragment,z3),z3.forEach(t),Sco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(b6.$$.fragment,Zt),Rco=i(Zt),kae=n(Zt,"P",{});var EQr=s(kae);Bco=r(EQr,"Instantiate one of the base model classes of the library from a pretrained model."),EQr.forEach(t),Pco=i(Zt),Aa=n(Zt,"P",{});var Q3=s(Aa);Ico=r(Q3,"The model class to instantiate is selected based on the "),Sae=n(Q3,"CODE",{});var CQr=s(Sae);qco=r(CQr,"model_type"),CQr.forEach(t),Nco=r(Q3,` property of the config object (either
passed as an argument or loaded from `),Rae=n(Q3,"CODE",{});var wQr=s(Rae);jco=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),Dco=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=n(Q3,"CODE",{});var AQr=s(Bae);Gco=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),Oco=r(Q3,":"),Q3.forEach(t),Vco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var m3e=s(Oh);Pae=n(m3e,"STRONG",{});var yQr=s(Pae);Xco=r(yQr,"albert"),yQr.forEach(t),zco=r(m3e," \u2014 "),LP=n(m3e,"A",{href:!0});var LQr=s(LP);Qco=r(LQr,"AlbertModel"),LQr.forEach(t),Wco=r(m3e," (ALBERT model)"),m3e.forEach(t),Hco=i($),Vh=n($,"LI",{});var g3e=s(Vh);Iae=n(g3e,"STRONG",{});var xQr=s(Iae);Uco=r(xQr,"bart"),xQr.forEach(t),Jco=r(g3e," \u2014 "),xP=n(g3e,"A",{href:!0});var $Qr=s(xP);Yco=r($Qr,"BartModel"),$Qr.forEach(t),Kco=r(g3e," (BART model)"),g3e.forEach(t),Zco=i($),Xh=n($,"LI",{});var h3e=s(Xh);qae=n(h3e,"STRONG",{});var kQr=s(qae);efo=r(kQr,"beit"),kQr.forEach(t),ofo=r(h3e," \u2014 "),$P=n(h3e,"A",{href:!0});var SQr=s($P);rfo=r(SQr,"BeitModel"),SQr.forEach(t),tfo=r(h3e," (BEiT model)"),h3e.forEach(t),afo=i($),zh=n($,"LI",{});var p3e=s(zh);Nae=n(p3e,"STRONG",{});var RQr=s(Nae);nfo=r(RQr,"bert"),RQr.forEach(t),sfo=r(p3e," \u2014 "),kP=n(p3e,"A",{href:!0});var BQr=s(kP);lfo=r(BQr,"BertModel"),BQr.forEach(t),ifo=r(p3e," (BERT model)"),p3e.forEach(t),dfo=i($),Qh=n($,"LI",{});var u3e=s(Qh);jae=n(u3e,"STRONG",{});var PQr=s(jae);cfo=r(PQr,"bert-generation"),PQr.forEach(t),ffo=r(u3e," \u2014 "),SP=n(u3e,"A",{href:!0});var IQr=s(SP);mfo=r(IQr,"BertGenerationEncoder"),IQr.forEach(t),gfo=r(u3e," (Bert Generation model)"),u3e.forEach(t),hfo=i($),Wh=n($,"LI",{});var _3e=s(Wh);Dae=n(_3e,"STRONG",{});var qQr=s(Dae);pfo=r(qQr,"big_bird"),qQr.forEach(t),ufo=r(_3e," \u2014 "),RP=n(_3e,"A",{href:!0});var NQr=s(RP);_fo=r(NQr,"BigBirdModel"),NQr.forEach(t),bfo=r(_3e," (BigBird model)"),_3e.forEach(t),vfo=i($),Hh=n($,"LI",{});var b3e=s(Hh);Gae=n(b3e,"STRONG",{});var jQr=s(Gae);Ffo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),Tfo=r(b3e," \u2014 "),BP=n(b3e,"A",{href:!0});var DQr=s(BP);Mfo=r(DQr,"BigBirdPegasusModel"),DQr.forEach(t),Efo=r(b3e," (BigBirdPegasus model)"),b3e.forEach(t),Cfo=i($),Uh=n($,"LI",{});var v3e=s(Uh);Oae=n(v3e,"STRONG",{});var GQr=s(Oae);wfo=r(GQr,"blenderbot"),GQr.forEach(t),Afo=r(v3e," \u2014 "),PP=n(v3e,"A",{href:!0});var OQr=s(PP);yfo=r(OQr,"BlenderbotModel"),OQr.forEach(t),Lfo=r(v3e," (Blenderbot model)"),v3e.forEach(t),xfo=i($),Jh=n($,"LI",{});var F3e=s(Jh);Vae=n(F3e,"STRONG",{});var VQr=s(Vae);$fo=r(VQr,"blenderbot-small"),VQr.forEach(t),kfo=r(F3e," \u2014 "),IP=n(F3e,"A",{href:!0});var XQr=s(IP);Sfo=r(XQr,"BlenderbotSmallModel"),XQr.forEach(t),Rfo=r(F3e," (BlenderbotSmall model)"),F3e.forEach(t),Bfo=i($),Yh=n($,"LI",{});var T3e=s(Yh);Xae=n(T3e,"STRONG",{});var zQr=s(Xae);Pfo=r(zQr,"camembert"),zQr.forEach(t),Ifo=r(T3e," \u2014 "),qP=n(T3e,"A",{href:!0});var QQr=s(qP);qfo=r(QQr,"CamembertModel"),QQr.forEach(t),Nfo=r(T3e," (CamemBERT model)"),T3e.forEach(t),jfo=i($),Kh=n($,"LI",{});var M3e=s(Kh);zae=n(M3e,"STRONG",{});var WQr=s(zae);Dfo=r(WQr,"canine"),WQr.forEach(t),Gfo=r(M3e," \u2014 "),NP=n(M3e,"A",{href:!0});var HQr=s(NP);Ofo=r(HQr,"CanineModel"),HQr.forEach(t),Vfo=r(M3e," (Canine model)"),M3e.forEach(t),Xfo=i($),Zh=n($,"LI",{});var E3e=s(Zh);Qae=n(E3e,"STRONG",{});var UQr=s(Qae);zfo=r(UQr,"clip"),UQr.forEach(t),Qfo=r(E3e," \u2014 "),jP=n(E3e,"A",{href:!0});var JQr=s(jP);Wfo=r(JQr,"CLIPModel"),JQr.forEach(t),Hfo=r(E3e," (CLIP model)"),E3e.forEach(t),Ufo=i($),ep=n($,"LI",{});var C3e=s(ep);Wae=n(C3e,"STRONG",{});var YQr=s(Wae);Jfo=r(YQr,"convbert"),YQr.forEach(t),Yfo=r(C3e," \u2014 "),DP=n(C3e,"A",{href:!0});var KQr=s(DP);Kfo=r(KQr,"ConvBertModel"),KQr.forEach(t),Zfo=r(C3e," (ConvBERT model)"),C3e.forEach(t),emo=i($),op=n($,"LI",{});var w3e=s(op);Hae=n(w3e,"STRONG",{});var ZQr=s(Hae);omo=r(ZQr,"convnext"),ZQr.forEach(t),rmo=r(w3e," \u2014 "),GP=n(w3e,"A",{href:!0});var eWr=s(GP);tmo=r(eWr,"ConvNextModel"),eWr.forEach(t),amo=r(w3e," (ConvNext model)"),w3e.forEach(t),nmo=i($),rp=n($,"LI",{});var A3e=s(rp);Uae=n(A3e,"STRONG",{});var oWr=s(Uae);smo=r(oWr,"ctrl"),oWr.forEach(t),lmo=r(A3e," \u2014 "),OP=n(A3e,"A",{href:!0});var rWr=s(OP);imo=r(rWr,"CTRLModel"),rWr.forEach(t),dmo=r(A3e," (CTRL model)"),A3e.forEach(t),cmo=i($),tp=n($,"LI",{});var y3e=s(tp);Jae=n(y3e,"STRONG",{});var tWr=s(Jae);fmo=r(tWr,"data2vec-audio"),tWr.forEach(t),mmo=r(y3e," \u2014 "),VP=n(y3e,"A",{href:!0});var aWr=s(VP);gmo=r(aWr,"Data2VecAudioModel"),aWr.forEach(t),hmo=r(y3e," (Data2VecAudio model)"),y3e.forEach(t),pmo=i($),ap=n($,"LI",{});var L3e=s(ap);Yae=n(L3e,"STRONG",{});var nWr=s(Yae);umo=r(nWr,"data2vec-text"),nWr.forEach(t),_mo=r(L3e," \u2014 "),XP=n(L3e,"A",{href:!0});var sWr=s(XP);bmo=r(sWr,"Data2VecTextModel"),sWr.forEach(t),vmo=r(L3e," (Data2VecText model)"),L3e.forEach(t),Fmo=i($),np=n($,"LI",{});var x3e=s(np);Kae=n(x3e,"STRONG",{});var lWr=s(Kae);Tmo=r(lWr,"data2vec-vision"),lWr.forEach(t),Mmo=r(x3e," \u2014 "),zP=n(x3e,"A",{href:!0});var iWr=s(zP);Emo=r(iWr,"Data2VecVisionModel"),iWr.forEach(t),Cmo=r(x3e," (Data2VecVision model)"),x3e.forEach(t),wmo=i($),sp=n($,"LI",{});var $3e=s(sp);Zae=n($3e,"STRONG",{});var dWr=s(Zae);Amo=r(dWr,"deberta"),dWr.forEach(t),ymo=r($3e," \u2014 "),QP=n($3e,"A",{href:!0});var cWr=s(QP);Lmo=r(cWr,"DebertaModel"),cWr.forEach(t),xmo=r($3e," (DeBERTa model)"),$3e.forEach(t),$mo=i($),lp=n($,"LI",{});var k3e=s(lp);ene=n(k3e,"STRONG",{});var fWr=s(ene);kmo=r(fWr,"deberta-v2"),fWr.forEach(t),Smo=r(k3e," \u2014 "),WP=n(k3e,"A",{href:!0});var mWr=s(WP);Rmo=r(mWr,"DebertaV2Model"),mWr.forEach(t),Bmo=r(k3e," (DeBERTa-v2 model)"),k3e.forEach(t),Pmo=i($),ip=n($,"LI",{});var S3e=s(ip);one=n(S3e,"STRONG",{});var gWr=s(one);Imo=r(gWr,"decision_transformer"),gWr.forEach(t),qmo=r(S3e," \u2014 "),HP=n(S3e,"A",{href:!0});var hWr=s(HP);Nmo=r(hWr,"DecisionTransformerModel"),hWr.forEach(t),jmo=r(S3e," (Decision Transformer model)"),S3e.forEach(t),Dmo=i($),dp=n($,"LI",{});var R3e=s(dp);rne=n(R3e,"STRONG",{});var pWr=s(rne);Gmo=r(pWr,"deit"),pWr.forEach(t),Omo=r(R3e," \u2014 "),UP=n(R3e,"A",{href:!0});var uWr=s(UP);Vmo=r(uWr,"DeiTModel"),uWr.forEach(t),Xmo=r(R3e," (DeiT model)"),R3e.forEach(t),zmo=i($),cp=n($,"LI",{});var B3e=s(cp);tne=n(B3e,"STRONG",{});var _Wr=s(tne);Qmo=r(_Wr,"detr"),_Wr.forEach(t),Wmo=r(B3e," \u2014 "),JP=n(B3e,"A",{href:!0});var bWr=s(JP);Hmo=r(bWr,"DetrModel"),bWr.forEach(t),Umo=r(B3e," (DETR model)"),B3e.forEach(t),Jmo=i($),fp=n($,"LI",{});var P3e=s(fp);ane=n(P3e,"STRONG",{});var vWr=s(ane);Ymo=r(vWr,"distilbert"),vWr.forEach(t),Kmo=r(P3e," \u2014 "),YP=n(P3e,"A",{href:!0});var FWr=s(YP);Zmo=r(FWr,"DistilBertModel"),FWr.forEach(t),ego=r(P3e," (DistilBERT model)"),P3e.forEach(t),ogo=i($),mp=n($,"LI",{});var I3e=s(mp);nne=n(I3e,"STRONG",{});var TWr=s(nne);rgo=r(TWr,"dpr"),TWr.forEach(t),tgo=r(I3e," \u2014 "),KP=n(I3e,"A",{href:!0});var MWr=s(KP);ago=r(MWr,"DPRQuestionEncoder"),MWr.forEach(t),ngo=r(I3e," (DPR model)"),I3e.forEach(t),sgo=i($),gp=n($,"LI",{});var q3e=s(gp);sne=n(q3e,"STRONG",{});var EWr=s(sne);lgo=r(EWr,"dpt"),EWr.forEach(t),igo=r(q3e," \u2014 "),ZP=n(q3e,"A",{href:!0});var CWr=s(ZP);dgo=r(CWr,"DPTModel"),CWr.forEach(t),cgo=r(q3e," (DPT model)"),q3e.forEach(t),fgo=i($),hp=n($,"LI",{});var N3e=s(hp);lne=n(N3e,"STRONG",{});var wWr=s(lne);mgo=r(wWr,"electra"),wWr.forEach(t),ggo=r(N3e," \u2014 "),eI=n(N3e,"A",{href:!0});var AWr=s(eI);hgo=r(AWr,"ElectraModel"),AWr.forEach(t),pgo=r(N3e," (ELECTRA model)"),N3e.forEach(t),ugo=i($),pp=n($,"LI",{});var j3e=s(pp);ine=n(j3e,"STRONG",{});var yWr=s(ine);_go=r(yWr,"flaubert"),yWr.forEach(t),bgo=r(j3e," \u2014 "),oI=n(j3e,"A",{href:!0});var LWr=s(oI);vgo=r(LWr,"FlaubertModel"),LWr.forEach(t),Fgo=r(j3e," (FlauBERT model)"),j3e.forEach(t),Tgo=i($),up=n($,"LI",{});var D3e=s(up);dne=n(D3e,"STRONG",{});var xWr=s(dne);Mgo=r(xWr,"fnet"),xWr.forEach(t),Ego=r(D3e," \u2014 "),rI=n(D3e,"A",{href:!0});var $Wr=s(rI);Cgo=r($Wr,"FNetModel"),$Wr.forEach(t),wgo=r(D3e," (FNet model)"),D3e.forEach(t),Ago=i($),_p=n($,"LI",{});var G3e=s(_p);cne=n(G3e,"STRONG",{});var kWr=s(cne);ygo=r(kWr,"fsmt"),kWr.forEach(t),Lgo=r(G3e," \u2014 "),tI=n(G3e,"A",{href:!0});var SWr=s(tI);xgo=r(SWr,"FSMTModel"),SWr.forEach(t),$go=r(G3e," (FairSeq Machine-Translation model)"),G3e.forEach(t),kgo=i($),Ss=n($,"LI",{});var r$=s(Ss);fne=n(r$,"STRONG",{});var RWr=s(fne);Sgo=r(RWr,"funnel"),RWr.forEach(t),Rgo=r(r$," \u2014 "),aI=n(r$,"A",{href:!0});var BWr=s(aI);Bgo=r(BWr,"FunnelModel"),BWr.forEach(t),Pgo=r(r$," or "),nI=n(r$,"A",{href:!0});var PWr=s(nI);Igo=r(PWr,"FunnelBaseModel"),PWr.forEach(t),qgo=r(r$," (Funnel Transformer model)"),r$.forEach(t),Ngo=i($),bp=n($,"LI",{});var O3e=s(bp);mne=n(O3e,"STRONG",{});var IWr=s(mne);jgo=r(IWr,"glpn"),IWr.forEach(t),Dgo=r(O3e," \u2014 "),sI=n(O3e,"A",{href:!0});var qWr=s(sI);Ggo=r(qWr,"GLPNModel"),qWr.forEach(t),Ogo=r(O3e," (GLPN model)"),O3e.forEach(t),Vgo=i($),vp=n($,"LI",{});var V3e=s(vp);gne=n(V3e,"STRONG",{});var NWr=s(gne);Xgo=r(NWr,"gpt2"),NWr.forEach(t),zgo=r(V3e," \u2014 "),lI=n(V3e,"A",{href:!0});var jWr=s(lI);Qgo=r(jWr,"GPT2Model"),jWr.forEach(t),Wgo=r(V3e," (OpenAI GPT-2 model)"),V3e.forEach(t),Hgo=i($),Fp=n($,"LI",{});var X3e=s(Fp);hne=n(X3e,"STRONG",{});var DWr=s(hne);Ugo=r(DWr,"gpt_neo"),DWr.forEach(t),Jgo=r(X3e," \u2014 "),iI=n(X3e,"A",{href:!0});var GWr=s(iI);Ygo=r(GWr,"GPTNeoModel"),GWr.forEach(t),Kgo=r(X3e," (GPT Neo model)"),X3e.forEach(t),Zgo=i($),Tp=n($,"LI",{});var z3e=s(Tp);pne=n(z3e,"STRONG",{});var OWr=s(pne);eho=r(OWr,"gptj"),OWr.forEach(t),oho=r(z3e," \u2014 "),dI=n(z3e,"A",{href:!0});var VWr=s(dI);rho=r(VWr,"GPTJModel"),VWr.forEach(t),tho=r(z3e," (GPT-J model)"),z3e.forEach(t),aho=i($),Mp=n($,"LI",{});var Q3e=s(Mp);une=n(Q3e,"STRONG",{});var XWr=s(une);nho=r(XWr,"hubert"),XWr.forEach(t),sho=r(Q3e," \u2014 "),cI=n(Q3e,"A",{href:!0});var zWr=s(cI);lho=r(zWr,"HubertModel"),zWr.forEach(t),iho=r(Q3e," (Hubert model)"),Q3e.forEach(t),dho=i($),Ep=n($,"LI",{});var W3e=s(Ep);_ne=n(W3e,"STRONG",{});var QWr=s(_ne);cho=r(QWr,"ibert"),QWr.forEach(t),fho=r(W3e," \u2014 "),fI=n(W3e,"A",{href:!0});var WWr=s(fI);mho=r(WWr,"IBertModel"),WWr.forEach(t),gho=r(W3e," (I-BERT model)"),W3e.forEach(t),hho=i($),Cp=n($,"LI",{});var H3e=s(Cp);bne=n(H3e,"STRONG",{});var HWr=s(bne);pho=r(HWr,"imagegpt"),HWr.forEach(t),uho=r(H3e," \u2014 "),mI=n(H3e,"A",{href:!0});var UWr=s(mI);_ho=r(UWr,"ImageGPTModel"),UWr.forEach(t),bho=r(H3e," (ImageGPT model)"),H3e.forEach(t),vho=i($),wp=n($,"LI",{});var U3e=s(wp);vne=n(U3e,"STRONG",{});var JWr=s(vne);Fho=r(JWr,"layoutlm"),JWr.forEach(t),Tho=r(U3e," \u2014 "),gI=n(U3e,"A",{href:!0});var YWr=s(gI);Mho=r(YWr,"LayoutLMModel"),YWr.forEach(t),Eho=r(U3e," (LayoutLM model)"),U3e.forEach(t),Cho=i($),Ap=n($,"LI",{});var J3e=s(Ap);Fne=n(J3e,"STRONG",{});var KWr=s(Fne);who=r(KWr,"layoutlmv2"),KWr.forEach(t),Aho=r(J3e," \u2014 "),hI=n(J3e,"A",{href:!0});var ZWr=s(hI);yho=r(ZWr,"LayoutLMv2Model"),ZWr.forEach(t),Lho=r(J3e," (LayoutLMv2 model)"),J3e.forEach(t),xho=i($),yp=n($,"LI",{});var Y3e=s(yp);Tne=n(Y3e,"STRONG",{});var eHr=s(Tne);$ho=r(eHr,"led"),eHr.forEach(t),kho=r(Y3e," \u2014 "),pI=n(Y3e,"A",{href:!0});var oHr=s(pI);Sho=r(oHr,"LEDModel"),oHr.forEach(t),Rho=r(Y3e," (LED model)"),Y3e.forEach(t),Bho=i($),Lp=n($,"LI",{});var K3e=s(Lp);Mne=n(K3e,"STRONG",{});var rHr=s(Mne);Pho=r(rHr,"longformer"),rHr.forEach(t),Iho=r(K3e," \u2014 "),uI=n(K3e,"A",{href:!0});var tHr=s(uI);qho=r(tHr,"LongformerModel"),tHr.forEach(t),Nho=r(K3e," (Longformer model)"),K3e.forEach(t),jho=i($),xp=n($,"LI",{});var Z3e=s(xp);Ene=n(Z3e,"STRONG",{});var aHr=s(Ene);Dho=r(aHr,"luke"),aHr.forEach(t),Gho=r(Z3e," \u2014 "),_I=n(Z3e,"A",{href:!0});var nHr=s(_I);Oho=r(nHr,"LukeModel"),nHr.forEach(t),Vho=r(Z3e," (LUKE model)"),Z3e.forEach(t),Xho=i($),$p=n($,"LI",{});var ewe=s($p);Cne=n(ewe,"STRONG",{});var sHr=s(Cne);zho=r(sHr,"lxmert"),sHr.forEach(t),Qho=r(ewe," \u2014 "),bI=n(ewe,"A",{href:!0});var lHr=s(bI);Who=r(lHr,"LxmertModel"),lHr.forEach(t),Hho=r(ewe," (LXMERT model)"),ewe.forEach(t),Uho=i($),kp=n($,"LI",{});var owe=s(kp);wne=n(owe,"STRONG",{});var iHr=s(wne);Jho=r(iHr,"m2m_100"),iHr.forEach(t),Yho=r(owe," \u2014 "),vI=n(owe,"A",{href:!0});var dHr=s(vI);Kho=r(dHr,"M2M100Model"),dHr.forEach(t),Zho=r(owe," (M2M100 model)"),owe.forEach(t),epo=i($),Sp=n($,"LI",{});var rwe=s(Sp);Ane=n(rwe,"STRONG",{});var cHr=s(Ane);opo=r(cHr,"marian"),cHr.forEach(t),rpo=r(rwe," \u2014 "),FI=n(rwe,"A",{href:!0});var fHr=s(FI);tpo=r(fHr,"MarianModel"),fHr.forEach(t),apo=r(rwe," (Marian model)"),rwe.forEach(t),npo=i($),Rp=n($,"LI",{});var twe=s(Rp);yne=n(twe,"STRONG",{});var mHr=s(yne);spo=r(mHr,"maskformer"),mHr.forEach(t),lpo=r(twe," \u2014 "),TI=n(twe,"A",{href:!0});var gHr=s(TI);ipo=r(gHr,"MaskFormerModel"),gHr.forEach(t),dpo=r(twe," (MaskFormer model)"),twe.forEach(t),cpo=i($),Bp=n($,"LI",{});var awe=s(Bp);Lne=n(awe,"STRONG",{});var hHr=s(Lne);fpo=r(hHr,"mbart"),hHr.forEach(t),mpo=r(awe," \u2014 "),MI=n(awe,"A",{href:!0});var pHr=s(MI);gpo=r(pHr,"MBartModel"),pHr.forEach(t),hpo=r(awe," (mBART model)"),awe.forEach(t),ppo=i($),Pp=n($,"LI",{});var nwe=s(Pp);xne=n(nwe,"STRONG",{});var uHr=s(xne);upo=r(uHr,"megatron-bert"),uHr.forEach(t),_po=r(nwe," \u2014 "),EI=n(nwe,"A",{href:!0});var _Hr=s(EI);bpo=r(_Hr,"MegatronBertModel"),_Hr.forEach(t),vpo=r(nwe," (MegatronBert model)"),nwe.forEach(t),Fpo=i($),Ip=n($,"LI",{});var swe=s(Ip);$ne=n(swe,"STRONG",{});var bHr=s($ne);Tpo=r(bHr,"mobilebert"),bHr.forEach(t),Mpo=r(swe," \u2014 "),CI=n(swe,"A",{href:!0});var vHr=s(CI);Epo=r(vHr,"MobileBertModel"),vHr.forEach(t),Cpo=r(swe," (MobileBERT model)"),swe.forEach(t),wpo=i($),qp=n($,"LI",{});var lwe=s(qp);kne=n(lwe,"STRONG",{});var FHr=s(kne);Apo=r(FHr,"mpnet"),FHr.forEach(t),ypo=r(lwe," \u2014 "),wI=n(lwe,"A",{href:!0});var THr=s(wI);Lpo=r(THr,"MPNetModel"),THr.forEach(t),xpo=r(lwe," (MPNet model)"),lwe.forEach(t),$po=i($),Np=n($,"LI",{});var iwe=s(Np);Sne=n(iwe,"STRONG",{});var MHr=s(Sne);kpo=r(MHr,"mt5"),MHr.forEach(t),Spo=r(iwe," \u2014 "),AI=n(iwe,"A",{href:!0});var EHr=s(AI);Rpo=r(EHr,"MT5Model"),EHr.forEach(t),Bpo=r(iwe," (mT5 model)"),iwe.forEach(t),Ppo=i($),jp=n($,"LI",{});var dwe=s(jp);Rne=n(dwe,"STRONG",{});var CHr=s(Rne);Ipo=r(CHr,"nystromformer"),CHr.forEach(t),qpo=r(dwe," \u2014 "),yI=n(dwe,"A",{href:!0});var wHr=s(yI);Npo=r(wHr,"NystromformerModel"),wHr.forEach(t),jpo=r(dwe," (Nystromformer model)"),dwe.forEach(t),Dpo=i($),Dp=n($,"LI",{});var cwe=s(Dp);Bne=n(cwe,"STRONG",{});var AHr=s(Bne);Gpo=r(AHr,"openai-gpt"),AHr.forEach(t),Opo=r(cwe," \u2014 "),LI=n(cwe,"A",{href:!0});var yHr=s(LI);Vpo=r(yHr,"OpenAIGPTModel"),yHr.forEach(t),Xpo=r(cwe," (OpenAI GPT model)"),cwe.forEach(t),zpo=i($),Gp=n($,"LI",{});var fwe=s(Gp);Pne=n(fwe,"STRONG",{});var LHr=s(Pne);Qpo=r(LHr,"pegasus"),LHr.forEach(t),Wpo=r(fwe," \u2014 "),xI=n(fwe,"A",{href:!0});var xHr=s(xI);Hpo=r(xHr,"PegasusModel"),xHr.forEach(t),Upo=r(fwe," (Pegasus model)"),fwe.forEach(t),Jpo=i($),Op=n($,"LI",{});var mwe=s(Op);Ine=n(mwe,"STRONG",{});var $Hr=s(Ine);Ypo=r($Hr,"perceiver"),$Hr.forEach(t),Kpo=r(mwe," \u2014 "),$I=n(mwe,"A",{href:!0});var kHr=s($I);Zpo=r(kHr,"PerceiverModel"),kHr.forEach(t),euo=r(mwe," (Perceiver model)"),mwe.forEach(t),ouo=i($),Vp=n($,"LI",{});var gwe=s(Vp);qne=n(gwe,"STRONG",{});var SHr=s(qne);ruo=r(SHr,"plbart"),SHr.forEach(t),tuo=r(gwe," \u2014 "),kI=n(gwe,"A",{href:!0});var RHr=s(kI);auo=r(RHr,"PLBartModel"),RHr.forEach(t),nuo=r(gwe," (PLBart model)"),gwe.forEach(t),suo=i($),Xp=n($,"LI",{});var hwe=s(Xp);Nne=n(hwe,"STRONG",{});var BHr=s(Nne);luo=r(BHr,"poolformer"),BHr.forEach(t),iuo=r(hwe," \u2014 "),SI=n(hwe,"A",{href:!0});var PHr=s(SI);duo=r(PHr,"PoolFormerModel"),PHr.forEach(t),cuo=r(hwe," (PoolFormer model)"),hwe.forEach(t),fuo=i($),zp=n($,"LI",{});var pwe=s(zp);jne=n(pwe,"STRONG",{});var IHr=s(jne);muo=r(IHr,"prophetnet"),IHr.forEach(t),guo=r(pwe," \u2014 "),RI=n(pwe,"A",{href:!0});var qHr=s(RI);huo=r(qHr,"ProphetNetModel"),qHr.forEach(t),puo=r(pwe," (ProphetNet model)"),pwe.forEach(t),uuo=i($),Qp=n($,"LI",{});var uwe=s(Qp);Dne=n(uwe,"STRONG",{});var NHr=s(Dne);_uo=r(NHr,"qdqbert"),NHr.forEach(t),buo=r(uwe," \u2014 "),BI=n(uwe,"A",{href:!0});var jHr=s(BI);vuo=r(jHr,"QDQBertModel"),jHr.forEach(t),Fuo=r(uwe," (QDQBert model)"),uwe.forEach(t),Tuo=i($),Wp=n($,"LI",{});var _we=s(Wp);Gne=n(_we,"STRONG",{});var DHr=s(Gne);Muo=r(DHr,"reformer"),DHr.forEach(t),Euo=r(_we," \u2014 "),PI=n(_we,"A",{href:!0});var GHr=s(PI);Cuo=r(GHr,"ReformerModel"),GHr.forEach(t),wuo=r(_we," (Reformer model)"),_we.forEach(t),Auo=i($),Hp=n($,"LI",{});var bwe=s(Hp);One=n(bwe,"STRONG",{});var OHr=s(One);yuo=r(OHr,"regnet"),OHr.forEach(t),Luo=r(bwe," \u2014 "),II=n(bwe,"A",{href:!0});var VHr=s(II);xuo=r(VHr,"RegNetModel"),VHr.forEach(t),$uo=r(bwe," (RegNet model)"),bwe.forEach(t),kuo=i($),Up=n($,"LI",{});var vwe=s(Up);Vne=n(vwe,"STRONG",{});var XHr=s(Vne);Suo=r(XHr,"rembert"),XHr.forEach(t),Ruo=r(vwe," \u2014 "),qI=n(vwe,"A",{href:!0});var zHr=s(qI);Buo=r(zHr,"RemBertModel"),zHr.forEach(t),Puo=r(vwe," (RemBERT model)"),vwe.forEach(t),Iuo=i($),Jp=n($,"LI",{});var Fwe=s(Jp);Xne=n(Fwe,"STRONG",{});var QHr=s(Xne);quo=r(QHr,"resnet"),QHr.forEach(t),Nuo=r(Fwe," \u2014 "),NI=n(Fwe,"A",{href:!0});var WHr=s(NI);juo=r(WHr,"ResNetModel"),WHr.forEach(t),Duo=r(Fwe," (ResNet model)"),Fwe.forEach(t),Guo=i($),Yp=n($,"LI",{});var Twe=s(Yp);zne=n(Twe,"STRONG",{});var HHr=s(zne);Ouo=r(HHr,"retribert"),HHr.forEach(t),Vuo=r(Twe," \u2014 "),jI=n(Twe,"A",{href:!0});var UHr=s(jI);Xuo=r(UHr,"RetriBertModel"),UHr.forEach(t),zuo=r(Twe," (RetriBERT model)"),Twe.forEach(t),Quo=i($),Kp=n($,"LI",{});var Mwe=s(Kp);Qne=n(Mwe,"STRONG",{});var JHr=s(Qne);Wuo=r(JHr,"roberta"),JHr.forEach(t),Huo=r(Mwe," \u2014 "),DI=n(Mwe,"A",{href:!0});var YHr=s(DI);Uuo=r(YHr,"RobertaModel"),YHr.forEach(t),Juo=r(Mwe," (RoBERTa model)"),Mwe.forEach(t),Yuo=i($),Zp=n($,"LI",{});var Ewe=s(Zp);Wne=n(Ewe,"STRONG",{});var KHr=s(Wne);Kuo=r(KHr,"roformer"),KHr.forEach(t),Zuo=r(Ewe," \u2014 "),GI=n(Ewe,"A",{href:!0});var ZHr=s(GI);e_o=r(ZHr,"RoFormerModel"),ZHr.forEach(t),o_o=r(Ewe," (RoFormer model)"),Ewe.forEach(t),r_o=i($),eu=n($,"LI",{});var Cwe=s(eu);Hne=n(Cwe,"STRONG",{});var eUr=s(Hne);t_o=r(eUr,"segformer"),eUr.forEach(t),a_o=r(Cwe," \u2014 "),OI=n(Cwe,"A",{href:!0});var oUr=s(OI);n_o=r(oUr,"SegformerModel"),oUr.forEach(t),s_o=r(Cwe," (SegFormer model)"),Cwe.forEach(t),l_o=i($),ou=n($,"LI",{});var wwe=s(ou);Une=n(wwe,"STRONG",{});var rUr=s(Une);i_o=r(rUr,"sew"),rUr.forEach(t),d_o=r(wwe," \u2014 "),VI=n(wwe,"A",{href:!0});var tUr=s(VI);c_o=r(tUr,"SEWModel"),tUr.forEach(t),f_o=r(wwe," (SEW model)"),wwe.forEach(t),m_o=i($),ru=n($,"LI",{});var Awe=s(ru);Jne=n(Awe,"STRONG",{});var aUr=s(Jne);g_o=r(aUr,"sew-d"),aUr.forEach(t),h_o=r(Awe," \u2014 "),XI=n(Awe,"A",{href:!0});var nUr=s(XI);p_o=r(nUr,"SEWDModel"),nUr.forEach(t),u_o=r(Awe," (SEW-D model)"),Awe.forEach(t),__o=i($),tu=n($,"LI",{});var ywe=s(tu);Yne=n(ywe,"STRONG",{});var sUr=s(Yne);b_o=r(sUr,"speech_to_text"),sUr.forEach(t),v_o=r(ywe," \u2014 "),zI=n(ywe,"A",{href:!0});var lUr=s(zI);F_o=r(lUr,"Speech2TextModel"),lUr.forEach(t),T_o=r(ywe," (Speech2Text model)"),ywe.forEach(t),M_o=i($),au=n($,"LI",{});var Lwe=s(au);Kne=n(Lwe,"STRONG",{});var iUr=s(Kne);E_o=r(iUr,"splinter"),iUr.forEach(t),C_o=r(Lwe," \u2014 "),QI=n(Lwe,"A",{href:!0});var dUr=s(QI);w_o=r(dUr,"SplinterModel"),dUr.forEach(t),A_o=r(Lwe," (Splinter model)"),Lwe.forEach(t),y_o=i($),nu=n($,"LI",{});var xwe=s(nu);Zne=n(xwe,"STRONG",{});var cUr=s(Zne);L_o=r(cUr,"squeezebert"),cUr.forEach(t),x_o=r(xwe," \u2014 "),WI=n(xwe,"A",{href:!0});var fUr=s(WI);$_o=r(fUr,"SqueezeBertModel"),fUr.forEach(t),k_o=r(xwe," (SqueezeBERT model)"),xwe.forEach(t),S_o=i($),su=n($,"LI",{});var $we=s(su);ese=n($we,"STRONG",{});var mUr=s(ese);R_o=r(mUr,"swin"),mUr.forEach(t),B_o=r($we," \u2014 "),HI=n($we,"A",{href:!0});var gUr=s(HI);P_o=r(gUr,"SwinModel"),gUr.forEach(t),I_o=r($we," (Swin model)"),$we.forEach(t),q_o=i($),lu=n($,"LI",{});var kwe=s(lu);ose=n(kwe,"STRONG",{});var hUr=s(ose);N_o=r(hUr,"t5"),hUr.forEach(t),j_o=r(kwe," \u2014 "),UI=n(kwe,"A",{href:!0});var pUr=s(UI);D_o=r(pUr,"T5Model"),pUr.forEach(t),G_o=r(kwe," (T5 model)"),kwe.forEach(t),O_o=i($),iu=n($,"LI",{});var Swe=s(iu);rse=n(Swe,"STRONG",{});var uUr=s(rse);V_o=r(uUr,"tapas"),uUr.forEach(t),X_o=r(Swe," \u2014 "),JI=n(Swe,"A",{href:!0});var _Ur=s(JI);z_o=r(_Ur,"TapasModel"),_Ur.forEach(t),Q_o=r(Swe," (TAPAS model)"),Swe.forEach(t),W_o=i($),du=n($,"LI",{});var Rwe=s(du);tse=n(Rwe,"STRONG",{});var bUr=s(tse);H_o=r(bUr,"transfo-xl"),bUr.forEach(t),U_o=r(Rwe," \u2014 "),YI=n(Rwe,"A",{href:!0});var vUr=s(YI);J_o=r(vUr,"TransfoXLModel"),vUr.forEach(t),Y_o=r(Rwe," (Transformer-XL model)"),Rwe.forEach(t),K_o=i($),cu=n($,"LI",{});var Bwe=s(cu);ase=n(Bwe,"STRONG",{});var FUr=s(ase);Z_o=r(FUr,"unispeech"),FUr.forEach(t),e1o=r(Bwe," \u2014 "),KI=n(Bwe,"A",{href:!0});var TUr=s(KI);o1o=r(TUr,"UniSpeechModel"),TUr.forEach(t),r1o=r(Bwe," (UniSpeech model)"),Bwe.forEach(t),t1o=i($),fu=n($,"LI",{});var Pwe=s(fu);nse=n(Pwe,"STRONG",{});var MUr=s(nse);a1o=r(MUr,"unispeech-sat"),MUr.forEach(t),n1o=r(Pwe," \u2014 "),ZI=n(Pwe,"A",{href:!0});var EUr=s(ZI);s1o=r(EUr,"UniSpeechSatModel"),EUr.forEach(t),l1o=r(Pwe," (UniSpeechSat model)"),Pwe.forEach(t),i1o=i($),mu=n($,"LI",{});var Iwe=s(mu);sse=n(Iwe,"STRONG",{});var CUr=s(sse);d1o=r(CUr,"van"),CUr.forEach(t),c1o=r(Iwe," \u2014 "),eq=n(Iwe,"A",{href:!0});var wUr=s(eq);f1o=r(wUr,"VanModel"),wUr.forEach(t),m1o=r(Iwe," (VAN model)"),Iwe.forEach(t),g1o=i($),gu=n($,"LI",{});var qwe=s(gu);lse=n(qwe,"STRONG",{});var AUr=s(lse);h1o=r(AUr,"vilt"),AUr.forEach(t),p1o=r(qwe," \u2014 "),oq=n(qwe,"A",{href:!0});var yUr=s(oq);u1o=r(yUr,"ViltModel"),yUr.forEach(t),_1o=r(qwe," (ViLT model)"),qwe.forEach(t),b1o=i($),hu=n($,"LI",{});var Nwe=s(hu);ise=n(Nwe,"STRONG",{});var LUr=s(ise);v1o=r(LUr,"vision-text-dual-encoder"),LUr.forEach(t),F1o=r(Nwe," \u2014 "),rq=n(Nwe,"A",{href:!0});var xUr=s(rq);T1o=r(xUr,"VisionTextDualEncoderModel"),xUr.forEach(t),M1o=r(Nwe," (VisionTextDualEncoder model)"),Nwe.forEach(t),E1o=i($),pu=n($,"LI",{});var jwe=s(pu);dse=n(jwe,"STRONG",{});var $Ur=s(dse);C1o=r($Ur,"visual_bert"),$Ur.forEach(t),w1o=r(jwe," \u2014 "),tq=n(jwe,"A",{href:!0});var kUr=s(tq);A1o=r(kUr,"VisualBertModel"),kUr.forEach(t),y1o=r(jwe," (VisualBert model)"),jwe.forEach(t),L1o=i($),uu=n($,"LI",{});var Dwe=s(uu);cse=n(Dwe,"STRONG",{});var SUr=s(cse);x1o=r(SUr,"vit"),SUr.forEach(t),$1o=r(Dwe," \u2014 "),aq=n(Dwe,"A",{href:!0});var RUr=s(aq);k1o=r(RUr,"ViTModel"),RUr.forEach(t),S1o=r(Dwe," (ViT model)"),Dwe.forEach(t),R1o=i($),_u=n($,"LI",{});var Gwe=s(_u);fse=n(Gwe,"STRONG",{});var BUr=s(fse);B1o=r(BUr,"vit_mae"),BUr.forEach(t),P1o=r(Gwe," \u2014 "),nq=n(Gwe,"A",{href:!0});var PUr=s(nq);I1o=r(PUr,"ViTMAEModel"),PUr.forEach(t),q1o=r(Gwe," (ViTMAE model)"),Gwe.forEach(t),N1o=i($),bu=n($,"LI",{});var Owe=s(bu);mse=n(Owe,"STRONG",{});var IUr=s(mse);j1o=r(IUr,"wav2vec2"),IUr.forEach(t),D1o=r(Owe," \u2014 "),sq=n(Owe,"A",{href:!0});var qUr=s(sq);G1o=r(qUr,"Wav2Vec2Model"),qUr.forEach(t),O1o=r(Owe," (Wav2Vec2 model)"),Owe.forEach(t),V1o=i($),vu=n($,"LI",{});var Vwe=s(vu);gse=n(Vwe,"STRONG",{});var NUr=s(gse);X1o=r(NUr,"wavlm"),NUr.forEach(t),z1o=r(Vwe," \u2014 "),lq=n(Vwe,"A",{href:!0});var jUr=s(lq);Q1o=r(jUr,"WavLMModel"),jUr.forEach(t),W1o=r(Vwe," (WavLM model)"),Vwe.forEach(t),H1o=i($),Fu=n($,"LI",{});var Xwe=s(Fu);hse=n(Xwe,"STRONG",{});var DUr=s(hse);U1o=r(DUr,"xglm"),DUr.forEach(t),J1o=r(Xwe," \u2014 "),iq=n(Xwe,"A",{href:!0});var GUr=s(iq);Y1o=r(GUr,"XGLMModel"),GUr.forEach(t),K1o=r(Xwe," (XGLM model)"),Xwe.forEach(t),Z1o=i($),Tu=n($,"LI",{});var zwe=s(Tu);pse=n(zwe,"STRONG",{});var OUr=s(pse);ebo=r(OUr,"xlm"),OUr.forEach(t),obo=r(zwe," \u2014 "),dq=n(zwe,"A",{href:!0});var VUr=s(dq);rbo=r(VUr,"XLMModel"),VUr.forEach(t),tbo=r(zwe," (XLM model)"),zwe.forEach(t),abo=i($),Mu=n($,"LI",{});var Qwe=s(Mu);use=n(Qwe,"STRONG",{});var XUr=s(use);nbo=r(XUr,"xlm-prophetnet"),XUr.forEach(t),sbo=r(Qwe," \u2014 "),cq=n(Qwe,"A",{href:!0});var zUr=s(cq);lbo=r(zUr,"XLMProphetNetModel"),zUr.forEach(t),ibo=r(Qwe," (XLMProphetNet model)"),Qwe.forEach(t),dbo=i($),Eu=n($,"LI",{});var Wwe=s(Eu);_se=n(Wwe,"STRONG",{});var QUr=s(_se);cbo=r(QUr,"xlm-roberta"),QUr.forEach(t),fbo=r(Wwe," \u2014 "),fq=n(Wwe,"A",{href:!0});var WUr=s(fq);mbo=r(WUr,"XLMRobertaModel"),WUr.forEach(t),gbo=r(Wwe," (XLM-RoBERTa model)"),Wwe.forEach(t),hbo=i($),Cu=n($,"LI",{});var Hwe=s(Cu);bse=n(Hwe,"STRONG",{});var HUr=s(bse);pbo=r(HUr,"xlm-roberta-xl"),HUr.forEach(t),ubo=r(Hwe," \u2014 "),mq=n(Hwe,"A",{href:!0});var UUr=s(mq);_bo=r(UUr,"XLMRobertaXLModel"),UUr.forEach(t),bbo=r(Hwe," (XLM-RoBERTa-XL model)"),Hwe.forEach(t),vbo=i($),wu=n($,"LI",{});var Uwe=s(wu);vse=n(Uwe,"STRONG",{});var JUr=s(vse);Fbo=r(JUr,"xlnet"),JUr.forEach(t),Tbo=r(Uwe," \u2014 "),gq=n(Uwe,"A",{href:!0});var YUr=s(gq);Mbo=r(YUr,"XLNetModel"),YUr.forEach(t),Ebo=r(Uwe," (XLNet model)"),Uwe.forEach(t),Cbo=i($),Au=n($,"LI",{});var Jwe=s(Au);Fse=n(Jwe,"STRONG",{});var KUr=s(Fse);wbo=r(KUr,"yolos"),KUr.forEach(t),Abo=r(Jwe," \u2014 "),hq=n(Jwe,"A",{href:!0});var ZUr=s(hq);ybo=r(ZUr,"YolosModel"),ZUr.forEach(t),Lbo=r(Jwe," (YOLOS model)"),Jwe.forEach(t),xbo=i($),yu=n($,"LI",{});var Ywe=s(yu);Tse=n(Ywe,"STRONG",{});var eJr=s(Tse);$bo=r(eJr,"yoso"),eJr.forEach(t),kbo=r(Ywe," \u2014 "),pq=n(Ywe,"A",{href:!0});var oJr=s(pq);Sbo=r(oJr,"YosoModel"),oJr.forEach(t),Rbo=r(Ywe," (YOSO model)"),Ywe.forEach(t),$.forEach(t),Bbo=i(Zt),Lu=n(Zt,"P",{});var Kwe=s(Lu);Pbo=r(Kwe,"The model is set in evaluation mode by default using "),Mse=n(Kwe,"CODE",{});var rJr=s(Mse);Ibo=r(rJr,"model.eval()"),rJr.forEach(t),qbo=r(Kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(Kwe,"CODE",{});var tJr=s(Ese);Nbo=r(tJr,"model.train()"),tJr.forEach(t),Kwe.forEach(t),jbo=i(Zt),T(xu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),MPe=i(f),Ci=n(f,"H2",{class:!0});var Aqe=s(Ci);$u=n(Aqe,"A",{id:!0,class:!0,href:!0});var aJr=s($u);Cse=n(aJr,"SPAN",{});var nJr=s(Cse);T(v6.$$.fragment,nJr),nJr.forEach(t),aJr.forEach(t),Dbo=i(Aqe),wse=n(Aqe,"SPAN",{});var sJr=s(wse);Gbo=r(sJr,"AutoModelForPreTraining"),sJr.forEach(t),Aqe.forEach(t),EPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(F6.$$.fragment,Ds),Obo=i(Ds),wi=n(Ds,"P",{});var WY=s(wi);Vbo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=n(WY,"A",{href:!0});var lJr=s(uq);Xbo=r(lJr,"from_pretrained()"),lJr.forEach(t),zbo=r(WY," class method or the "),_q=n(WY,"A",{href:!0});var iJr=s(_q);Qbo=r(iJr,"from_config()"),iJr.forEach(t),Wbo=r(WY,` class
method.`),WY.forEach(t),Hbo=i(Ds),T6=n(Ds,"P",{});var yqe=s(T6);Ubo=r(yqe,"This class cannot be instantiated directly using "),Ase=n(yqe,"CODE",{});var dJr=s(Ase);Jbo=r(dJr,"__init__()"),dJr.forEach(t),Ybo=r(yqe," (throws an error)."),yqe.forEach(t),Kbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var W3=s(rt);T(M6.$$.fragment,W3),Zbo=i(W3),yse=n(W3,"P",{});var cJr=s(yse);e4o=r(cJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cJr.forEach(t),o4o=i(W3),Ai=n(W3,"P",{});var HY=s(Ai);r4o=r(HY,`Note:
Loading a model from its configuration file does `),Lse=n(HY,"STRONG",{});var fJr=s(Lse);t4o=r(fJr,"not"),fJr.forEach(t),a4o=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=n(HY,"A",{href:!0});var mJr=s(bq);n4o=r(mJr,"from_pretrained()"),mJr.forEach(t),s4o=r(HY," to load the model weights."),HY.forEach(t),l4o=i(W3),T(ku.$$.fragment,W3),W3.forEach(t),i4o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(E6.$$.fragment,ea),d4o=i(ea),xse=n(ea,"P",{});var gJr=s(xse);c4o=r(gJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gJr.forEach(t),f4o=i(ea),ya=n(ea,"P",{});var H3=s(ya);m4o=r(H3,"The model class to instantiate is selected based on the "),$se=n(H3,"CODE",{});var hJr=s($se);g4o=r(hJr,"model_type"),hJr.forEach(t),h4o=r(H3,` property of the config object (either
passed as an argument or loaded from `),kse=n(H3,"CODE",{});var pJr=s(kse);p4o=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),u4o=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(H3,"CODE",{});var uJr=s(Sse);_4o=r(uJr,"pretrained_model_name_or_path"),uJr.forEach(t),b4o=r(H3,":"),H3.forEach(t),v4o=i(ea),G=n(ea,"UL",{});var V=s(G);Su=n(V,"LI",{});var Zwe=s(Su);Rse=n(Zwe,"STRONG",{});var _Jr=s(Rse);F4o=r(_Jr,"albert"),_Jr.forEach(t),T4o=r(Zwe," \u2014 "),vq=n(Zwe,"A",{href:!0});var bJr=s(vq);M4o=r(bJr,"AlbertForPreTraining"),bJr.forEach(t),E4o=r(Zwe," (ALBERT model)"),Zwe.forEach(t),C4o=i(V),Ru=n(V,"LI",{});var eAe=s(Ru);Bse=n(eAe,"STRONG",{});var vJr=s(Bse);w4o=r(vJr,"bart"),vJr.forEach(t),A4o=r(eAe," \u2014 "),Fq=n(eAe,"A",{href:!0});var FJr=s(Fq);y4o=r(FJr,"BartForConditionalGeneration"),FJr.forEach(t),L4o=r(eAe," (BART model)"),eAe.forEach(t),x4o=i(V),Bu=n(V,"LI",{});var oAe=s(Bu);Pse=n(oAe,"STRONG",{});var TJr=s(Pse);$4o=r(TJr,"bert"),TJr.forEach(t),k4o=r(oAe," \u2014 "),Tq=n(oAe,"A",{href:!0});var MJr=s(Tq);S4o=r(MJr,"BertForPreTraining"),MJr.forEach(t),R4o=r(oAe," (BERT model)"),oAe.forEach(t),B4o=i(V),Pu=n(V,"LI",{});var rAe=s(Pu);Ise=n(rAe,"STRONG",{});var EJr=s(Ise);P4o=r(EJr,"big_bird"),EJr.forEach(t),I4o=r(rAe," \u2014 "),Mq=n(rAe,"A",{href:!0});var CJr=s(Mq);q4o=r(CJr,"BigBirdForPreTraining"),CJr.forEach(t),N4o=r(rAe," (BigBird model)"),rAe.forEach(t),j4o=i(V),Iu=n(V,"LI",{});var tAe=s(Iu);qse=n(tAe,"STRONG",{});var wJr=s(qse);D4o=r(wJr,"camembert"),wJr.forEach(t),G4o=r(tAe," \u2014 "),Eq=n(tAe,"A",{href:!0});var AJr=s(Eq);O4o=r(AJr,"CamembertForMaskedLM"),AJr.forEach(t),V4o=r(tAe," (CamemBERT model)"),tAe.forEach(t),X4o=i(V),qu=n(V,"LI",{});var aAe=s(qu);Nse=n(aAe,"STRONG",{});var yJr=s(Nse);z4o=r(yJr,"ctrl"),yJr.forEach(t),Q4o=r(aAe," \u2014 "),Cq=n(aAe,"A",{href:!0});var LJr=s(Cq);W4o=r(LJr,"CTRLLMHeadModel"),LJr.forEach(t),H4o=r(aAe," (CTRL model)"),aAe.forEach(t),U4o=i(V),Nu=n(V,"LI",{});var nAe=s(Nu);jse=n(nAe,"STRONG",{});var xJr=s(jse);J4o=r(xJr,"data2vec-text"),xJr.forEach(t),Y4o=r(nAe," \u2014 "),wq=n(nAe,"A",{href:!0});var $Jr=s(wq);K4o=r($Jr,"Data2VecTextForMaskedLM"),$Jr.forEach(t),Z4o=r(nAe," (Data2VecText model)"),nAe.forEach(t),e2o=i(V),ju=n(V,"LI",{});var sAe=s(ju);Dse=n(sAe,"STRONG",{});var kJr=s(Dse);o2o=r(kJr,"deberta"),kJr.forEach(t),r2o=r(sAe," \u2014 "),Aq=n(sAe,"A",{href:!0});var SJr=s(Aq);t2o=r(SJr,"DebertaForMaskedLM"),SJr.forEach(t),a2o=r(sAe," (DeBERTa model)"),sAe.forEach(t),n2o=i(V),Du=n(V,"LI",{});var lAe=s(Du);Gse=n(lAe,"STRONG",{});var RJr=s(Gse);s2o=r(RJr,"deberta-v2"),RJr.forEach(t),l2o=r(lAe," \u2014 "),yq=n(lAe,"A",{href:!0});var BJr=s(yq);i2o=r(BJr,"DebertaV2ForMaskedLM"),BJr.forEach(t),d2o=r(lAe," (DeBERTa-v2 model)"),lAe.forEach(t),c2o=i(V),Gu=n(V,"LI",{});var iAe=s(Gu);Ose=n(iAe,"STRONG",{});var PJr=s(Ose);f2o=r(PJr,"distilbert"),PJr.forEach(t),m2o=r(iAe," \u2014 "),Lq=n(iAe,"A",{href:!0});var IJr=s(Lq);g2o=r(IJr,"DistilBertForMaskedLM"),IJr.forEach(t),h2o=r(iAe," (DistilBERT model)"),iAe.forEach(t),p2o=i(V),Ou=n(V,"LI",{});var dAe=s(Ou);Vse=n(dAe,"STRONG",{});var qJr=s(Vse);u2o=r(qJr,"electra"),qJr.forEach(t),_2o=r(dAe," \u2014 "),xq=n(dAe,"A",{href:!0});var NJr=s(xq);b2o=r(NJr,"ElectraForPreTraining"),NJr.forEach(t),v2o=r(dAe," (ELECTRA model)"),dAe.forEach(t),F2o=i(V),Vu=n(V,"LI",{});var cAe=s(Vu);Xse=n(cAe,"STRONG",{});var jJr=s(Xse);T2o=r(jJr,"flaubert"),jJr.forEach(t),M2o=r(cAe," \u2014 "),$q=n(cAe,"A",{href:!0});var DJr=s($q);E2o=r(DJr,"FlaubertWithLMHeadModel"),DJr.forEach(t),C2o=r(cAe," (FlauBERT model)"),cAe.forEach(t),w2o=i(V),Xu=n(V,"LI",{});var fAe=s(Xu);zse=n(fAe,"STRONG",{});var GJr=s(zse);A2o=r(GJr,"fnet"),GJr.forEach(t),y2o=r(fAe," \u2014 "),kq=n(fAe,"A",{href:!0});var OJr=s(kq);L2o=r(OJr,"FNetForPreTraining"),OJr.forEach(t),x2o=r(fAe," (FNet model)"),fAe.forEach(t),$2o=i(V),zu=n(V,"LI",{});var mAe=s(zu);Qse=n(mAe,"STRONG",{});var VJr=s(Qse);k2o=r(VJr,"fsmt"),VJr.forEach(t),S2o=r(mAe," \u2014 "),Sq=n(mAe,"A",{href:!0});var XJr=s(Sq);R2o=r(XJr,"FSMTForConditionalGeneration"),XJr.forEach(t),B2o=r(mAe," (FairSeq Machine-Translation model)"),mAe.forEach(t),P2o=i(V),Qu=n(V,"LI",{});var gAe=s(Qu);Wse=n(gAe,"STRONG",{});var zJr=s(Wse);I2o=r(zJr,"funnel"),zJr.forEach(t),q2o=r(gAe," \u2014 "),Rq=n(gAe,"A",{href:!0});var QJr=s(Rq);N2o=r(QJr,"FunnelForPreTraining"),QJr.forEach(t),j2o=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),D2o=i(V),Wu=n(V,"LI",{});var hAe=s(Wu);Hse=n(hAe,"STRONG",{});var WJr=s(Hse);G2o=r(WJr,"gpt2"),WJr.forEach(t),O2o=r(hAe," \u2014 "),Bq=n(hAe,"A",{href:!0});var HJr=s(Bq);V2o=r(HJr,"GPT2LMHeadModel"),HJr.forEach(t),X2o=r(hAe," (OpenAI GPT-2 model)"),hAe.forEach(t),z2o=i(V),Hu=n(V,"LI",{});var pAe=s(Hu);Use=n(pAe,"STRONG",{});var UJr=s(Use);Q2o=r(UJr,"ibert"),UJr.forEach(t),W2o=r(pAe," \u2014 "),Pq=n(pAe,"A",{href:!0});var JJr=s(Pq);H2o=r(JJr,"IBertForMaskedLM"),JJr.forEach(t),U2o=r(pAe," (I-BERT model)"),pAe.forEach(t),J2o=i(V),Uu=n(V,"LI",{});var uAe=s(Uu);Jse=n(uAe,"STRONG",{});var YJr=s(Jse);Y2o=r(YJr,"layoutlm"),YJr.forEach(t),K2o=r(uAe," \u2014 "),Iq=n(uAe,"A",{href:!0});var KJr=s(Iq);Z2o=r(KJr,"LayoutLMForMaskedLM"),KJr.forEach(t),e5o=r(uAe," (LayoutLM model)"),uAe.forEach(t),o5o=i(V),Ju=n(V,"LI",{});var _Ae=s(Ju);Yse=n(_Ae,"STRONG",{});var ZJr=s(Yse);r5o=r(ZJr,"longformer"),ZJr.forEach(t),t5o=r(_Ae," \u2014 "),qq=n(_Ae,"A",{href:!0});var eYr=s(qq);a5o=r(eYr,"LongformerForMaskedLM"),eYr.forEach(t),n5o=r(_Ae," (Longformer model)"),_Ae.forEach(t),s5o=i(V),Yu=n(V,"LI",{});var bAe=s(Yu);Kse=n(bAe,"STRONG",{});var oYr=s(Kse);l5o=r(oYr,"lxmert"),oYr.forEach(t),i5o=r(bAe," \u2014 "),Nq=n(bAe,"A",{href:!0});var rYr=s(Nq);d5o=r(rYr,"LxmertForPreTraining"),rYr.forEach(t),c5o=r(bAe," (LXMERT model)"),bAe.forEach(t),f5o=i(V),Ku=n(V,"LI",{});var vAe=s(Ku);Zse=n(vAe,"STRONG",{});var tYr=s(Zse);m5o=r(tYr,"megatron-bert"),tYr.forEach(t),g5o=r(vAe," \u2014 "),jq=n(vAe,"A",{href:!0});var aYr=s(jq);h5o=r(aYr,"MegatronBertForPreTraining"),aYr.forEach(t),p5o=r(vAe," (MegatronBert model)"),vAe.forEach(t),u5o=i(V),Zu=n(V,"LI",{});var FAe=s(Zu);ele=n(FAe,"STRONG",{});var nYr=s(ele);_5o=r(nYr,"mobilebert"),nYr.forEach(t),b5o=r(FAe," \u2014 "),Dq=n(FAe,"A",{href:!0});var sYr=s(Dq);v5o=r(sYr,"MobileBertForPreTraining"),sYr.forEach(t),F5o=r(FAe," (MobileBERT model)"),FAe.forEach(t),T5o=i(V),e_=n(V,"LI",{});var TAe=s(e_);ole=n(TAe,"STRONG",{});var lYr=s(ole);M5o=r(lYr,"mpnet"),lYr.forEach(t),E5o=r(TAe," \u2014 "),Gq=n(TAe,"A",{href:!0});var iYr=s(Gq);C5o=r(iYr,"MPNetForMaskedLM"),iYr.forEach(t),w5o=r(TAe," (MPNet model)"),TAe.forEach(t),A5o=i(V),o_=n(V,"LI",{});var MAe=s(o_);rle=n(MAe,"STRONG",{});var dYr=s(rle);y5o=r(dYr,"openai-gpt"),dYr.forEach(t),L5o=r(MAe," \u2014 "),Oq=n(MAe,"A",{href:!0});var cYr=s(Oq);x5o=r(cYr,"OpenAIGPTLMHeadModel"),cYr.forEach(t),$5o=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),k5o=i(V),r_=n(V,"LI",{});var EAe=s(r_);tle=n(EAe,"STRONG",{});var fYr=s(tle);S5o=r(fYr,"retribert"),fYr.forEach(t),R5o=r(EAe," \u2014 "),Vq=n(EAe,"A",{href:!0});var mYr=s(Vq);B5o=r(mYr,"RetriBertModel"),mYr.forEach(t),P5o=r(EAe," (RetriBERT model)"),EAe.forEach(t),I5o=i(V),t_=n(V,"LI",{});var CAe=s(t_);ale=n(CAe,"STRONG",{});var gYr=s(ale);q5o=r(gYr,"roberta"),gYr.forEach(t),N5o=r(CAe," \u2014 "),Xq=n(CAe,"A",{href:!0});var hYr=s(Xq);j5o=r(hYr,"RobertaForMaskedLM"),hYr.forEach(t),D5o=r(CAe," (RoBERTa model)"),CAe.forEach(t),G5o=i(V),a_=n(V,"LI",{});var wAe=s(a_);nle=n(wAe,"STRONG",{});var pYr=s(nle);O5o=r(pYr,"squeezebert"),pYr.forEach(t),V5o=r(wAe," \u2014 "),zq=n(wAe,"A",{href:!0});var uYr=s(zq);X5o=r(uYr,"SqueezeBertForMaskedLM"),uYr.forEach(t),z5o=r(wAe," (SqueezeBERT model)"),wAe.forEach(t),Q5o=i(V),n_=n(V,"LI",{});var AAe=s(n_);sle=n(AAe,"STRONG",{});var _Yr=s(sle);W5o=r(_Yr,"t5"),_Yr.forEach(t),H5o=r(AAe," \u2014 "),Qq=n(AAe,"A",{href:!0});var bYr=s(Qq);U5o=r(bYr,"T5ForConditionalGeneration"),bYr.forEach(t),J5o=r(AAe," (T5 model)"),AAe.forEach(t),Y5o=i(V),s_=n(V,"LI",{});var yAe=s(s_);lle=n(yAe,"STRONG",{});var vYr=s(lle);K5o=r(vYr,"tapas"),vYr.forEach(t),Z5o=r(yAe," \u2014 "),Wq=n(yAe,"A",{href:!0});var FYr=s(Wq);evo=r(FYr,"TapasForMaskedLM"),FYr.forEach(t),ovo=r(yAe," (TAPAS model)"),yAe.forEach(t),rvo=i(V),l_=n(V,"LI",{});var LAe=s(l_);ile=n(LAe,"STRONG",{});var TYr=s(ile);tvo=r(TYr,"transfo-xl"),TYr.forEach(t),avo=r(LAe," \u2014 "),Hq=n(LAe,"A",{href:!0});var MYr=s(Hq);nvo=r(MYr,"TransfoXLLMHeadModel"),MYr.forEach(t),svo=r(LAe," (Transformer-XL model)"),LAe.forEach(t),lvo=i(V),i_=n(V,"LI",{});var xAe=s(i_);dle=n(xAe,"STRONG",{});var EYr=s(dle);ivo=r(EYr,"unispeech"),EYr.forEach(t),dvo=r(xAe," \u2014 "),Uq=n(xAe,"A",{href:!0});var CYr=s(Uq);cvo=r(CYr,"UniSpeechForPreTraining"),CYr.forEach(t),fvo=r(xAe," (UniSpeech model)"),xAe.forEach(t),mvo=i(V),d_=n(V,"LI",{});var $Ae=s(d_);cle=n($Ae,"STRONG",{});var wYr=s(cle);gvo=r(wYr,"unispeech-sat"),wYr.forEach(t),hvo=r($Ae," \u2014 "),Jq=n($Ae,"A",{href:!0});var AYr=s(Jq);pvo=r(AYr,"UniSpeechSatForPreTraining"),AYr.forEach(t),uvo=r($Ae," (UniSpeechSat model)"),$Ae.forEach(t),_vo=i(V),c_=n(V,"LI",{});var kAe=s(c_);fle=n(kAe,"STRONG",{});var yYr=s(fle);bvo=r(yYr,"visual_bert"),yYr.forEach(t),vvo=r(kAe," \u2014 "),Yq=n(kAe,"A",{href:!0});var LYr=s(Yq);Fvo=r(LYr,"VisualBertForPreTraining"),LYr.forEach(t),Tvo=r(kAe," (VisualBert model)"),kAe.forEach(t),Mvo=i(V),f_=n(V,"LI",{});var SAe=s(f_);mle=n(SAe,"STRONG",{});var xYr=s(mle);Evo=r(xYr,"vit_mae"),xYr.forEach(t),Cvo=r(SAe," \u2014 "),Kq=n(SAe,"A",{href:!0});var $Yr=s(Kq);wvo=r($Yr,"ViTMAEForPreTraining"),$Yr.forEach(t),Avo=r(SAe," (ViTMAE model)"),SAe.forEach(t),yvo=i(V),m_=n(V,"LI",{});var RAe=s(m_);gle=n(RAe,"STRONG",{});var kYr=s(gle);Lvo=r(kYr,"wav2vec2"),kYr.forEach(t),xvo=r(RAe," \u2014 "),Zq=n(RAe,"A",{href:!0});var SYr=s(Zq);$vo=r(SYr,"Wav2Vec2ForPreTraining"),SYr.forEach(t),kvo=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),Svo=i(V),g_=n(V,"LI",{});var BAe=s(g_);hle=n(BAe,"STRONG",{});var RYr=s(hle);Rvo=r(RYr,"xlm"),RYr.forEach(t),Bvo=r(BAe," \u2014 "),eN=n(BAe,"A",{href:!0});var BYr=s(eN);Pvo=r(BYr,"XLMWithLMHeadModel"),BYr.forEach(t),Ivo=r(BAe," (XLM model)"),BAe.forEach(t),qvo=i(V),h_=n(V,"LI",{});var PAe=s(h_);ple=n(PAe,"STRONG",{});var PYr=s(ple);Nvo=r(PYr,"xlm-roberta"),PYr.forEach(t),jvo=r(PAe," \u2014 "),oN=n(PAe,"A",{href:!0});var IYr=s(oN);Dvo=r(IYr,"XLMRobertaForMaskedLM"),IYr.forEach(t),Gvo=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),Ovo=i(V),p_=n(V,"LI",{});var IAe=s(p_);ule=n(IAe,"STRONG",{});var qYr=s(ule);Vvo=r(qYr,"xlm-roberta-xl"),qYr.forEach(t),Xvo=r(IAe," \u2014 "),rN=n(IAe,"A",{href:!0});var NYr=s(rN);zvo=r(NYr,"XLMRobertaXLForMaskedLM"),NYr.forEach(t),Qvo=r(IAe," (XLM-RoBERTa-XL model)"),IAe.forEach(t),Wvo=i(V),u_=n(V,"LI",{});var qAe=s(u_);_le=n(qAe,"STRONG",{});var jYr=s(_le);Hvo=r(jYr,"xlnet"),jYr.forEach(t),Uvo=r(qAe," \u2014 "),tN=n(qAe,"A",{href:!0});var DYr=s(tN);Jvo=r(DYr,"XLNetLMHeadModel"),DYr.forEach(t),Yvo=r(qAe," (XLNet model)"),qAe.forEach(t),V.forEach(t),Kvo=i(ea),__=n(ea,"P",{});var NAe=s(__);Zvo=r(NAe,"The model is set in evaluation mode by default using "),ble=n(NAe,"CODE",{});var GYr=s(ble);eFo=r(GYr,"model.eval()"),GYr.forEach(t),oFo=r(NAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(NAe,"CODE",{});var OYr=s(vle);rFo=r(OYr,"model.train()"),OYr.forEach(t),NAe.forEach(t),tFo=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),CPe=i(f),yi=n(f,"H2",{class:!0});var Lqe=s(yi);v_=n(Lqe,"A",{id:!0,class:!0,href:!0});var VYr=s(v_);Fle=n(VYr,"SPAN",{});var XYr=s(Fle);T(C6.$$.fragment,XYr),XYr.forEach(t),VYr.forEach(t),aFo=i(Lqe),Tle=n(Lqe,"SPAN",{});var zYr=s(Tle);nFo=r(zYr,"AutoModelForCausalLM"),zYr.forEach(t),Lqe.forEach(t),wPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(w6.$$.fragment,Gs),sFo=i(Gs),Li=n(Gs,"P",{});var UY=s(Li);lFo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=n(UY,"A",{href:!0});var QYr=s(aN);iFo=r(QYr,"from_pretrained()"),QYr.forEach(t),dFo=r(UY," class method or the "),nN=n(UY,"A",{href:!0});var WYr=s(nN);cFo=r(WYr,"from_config()"),WYr.forEach(t),fFo=r(UY,` class
method.`),UY.forEach(t),mFo=i(Gs),A6=n(Gs,"P",{});var xqe=s(A6);gFo=r(xqe,"This class cannot be instantiated directly using "),Mle=n(xqe,"CODE",{});var HYr=s(Mle);hFo=r(HYr,"__init__()"),HYr.forEach(t),pFo=r(xqe," (throws an error)."),xqe.forEach(t),uFo=i(Gs),tt=n(Gs,"DIV",{class:!0});var U3=s(tt);T(y6.$$.fragment,U3),_Fo=i(U3),Ele=n(U3,"P",{});var UYr=s(Ele);bFo=r(UYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UYr.forEach(t),vFo=i(U3),xi=n(U3,"P",{});var JY=s(xi);FFo=r(JY,`Note:
Loading a model from its configuration file does `),Cle=n(JY,"STRONG",{});var JYr=s(Cle);TFo=r(JYr,"not"),JYr.forEach(t),MFo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(JY,"A",{href:!0});var YYr=s(sN);EFo=r(YYr,"from_pretrained()"),YYr.forEach(t),CFo=r(JY," to load the model weights."),JY.forEach(t),wFo=i(U3),T(F_.$$.fragment,U3),U3.forEach(t),AFo=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(L6.$$.fragment,oa),yFo=i(oa),wle=n(oa,"P",{});var KYr=s(wle);LFo=r(KYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KYr.forEach(t),xFo=i(oa),La=n(oa,"P",{});var J3=s(La);$Fo=r(J3,"The model class to instantiate is selected based on the "),Ale=n(J3,"CODE",{});var ZYr=s(Ale);kFo=r(ZYr,"model_type"),ZYr.forEach(t),SFo=r(J3,` property of the config object (either
passed as an argument or loaded from `),yle=n(J3,"CODE",{});var eKr=s(yle);RFo=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),BFo=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(J3,"CODE",{});var oKr=s(Lle);PFo=r(oKr,"pretrained_model_name_or_path"),oKr.forEach(t),IFo=r(J3,":"),J3.forEach(t),qFo=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var jAe=s(T_);xle=n(jAe,"STRONG",{});var rKr=s(xle);NFo=r(rKr,"bart"),rKr.forEach(t),jFo=r(jAe," \u2014 "),lN=n(jAe,"A",{href:!0});var tKr=s(lN);DFo=r(tKr,"BartForCausalLM"),tKr.forEach(t),GFo=r(jAe," (BART model)"),jAe.forEach(t),OFo=i(W),M_=n(W,"LI",{});var DAe=s(M_);$le=n(DAe,"STRONG",{});var aKr=s($le);VFo=r(aKr,"bert"),aKr.forEach(t),XFo=r(DAe," \u2014 "),iN=n(DAe,"A",{href:!0});var nKr=s(iN);zFo=r(nKr,"BertLMHeadModel"),nKr.forEach(t),QFo=r(DAe," (BERT model)"),DAe.forEach(t),WFo=i(W),E_=n(W,"LI",{});var GAe=s(E_);kle=n(GAe,"STRONG",{});var sKr=s(kle);HFo=r(sKr,"bert-generation"),sKr.forEach(t),UFo=r(GAe," \u2014 "),dN=n(GAe,"A",{href:!0});var lKr=s(dN);JFo=r(lKr,"BertGenerationDecoder"),lKr.forEach(t),YFo=r(GAe," (Bert Generation model)"),GAe.forEach(t),KFo=i(W),C_=n(W,"LI",{});var OAe=s(C_);Sle=n(OAe,"STRONG",{});var iKr=s(Sle);ZFo=r(iKr,"big_bird"),iKr.forEach(t),e0o=r(OAe," \u2014 "),cN=n(OAe,"A",{href:!0});var dKr=s(cN);o0o=r(dKr,"BigBirdForCausalLM"),dKr.forEach(t),r0o=r(OAe," (BigBird model)"),OAe.forEach(t),t0o=i(W),w_=n(W,"LI",{});var VAe=s(w_);Rle=n(VAe,"STRONG",{});var cKr=s(Rle);a0o=r(cKr,"bigbird_pegasus"),cKr.forEach(t),n0o=r(VAe," \u2014 "),fN=n(VAe,"A",{href:!0});var fKr=s(fN);s0o=r(fKr,"BigBirdPegasusForCausalLM"),fKr.forEach(t),l0o=r(VAe," (BigBirdPegasus model)"),VAe.forEach(t),i0o=i(W),A_=n(W,"LI",{});var XAe=s(A_);Ble=n(XAe,"STRONG",{});var mKr=s(Ble);d0o=r(mKr,"blenderbot"),mKr.forEach(t),c0o=r(XAe," \u2014 "),mN=n(XAe,"A",{href:!0});var gKr=s(mN);f0o=r(gKr,"BlenderbotForCausalLM"),gKr.forEach(t),m0o=r(XAe," (Blenderbot model)"),XAe.forEach(t),g0o=i(W),y_=n(W,"LI",{});var zAe=s(y_);Ple=n(zAe,"STRONG",{});var hKr=s(Ple);h0o=r(hKr,"blenderbot-small"),hKr.forEach(t),p0o=r(zAe," \u2014 "),gN=n(zAe,"A",{href:!0});var pKr=s(gN);u0o=r(pKr,"BlenderbotSmallForCausalLM"),pKr.forEach(t),_0o=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),b0o=i(W),L_=n(W,"LI",{});var QAe=s(L_);Ile=n(QAe,"STRONG",{});var uKr=s(Ile);v0o=r(uKr,"camembert"),uKr.forEach(t),F0o=r(QAe," \u2014 "),hN=n(QAe,"A",{href:!0});var _Kr=s(hN);T0o=r(_Kr,"CamembertForCausalLM"),_Kr.forEach(t),M0o=r(QAe," (CamemBERT model)"),QAe.forEach(t),E0o=i(W),x_=n(W,"LI",{});var WAe=s(x_);qle=n(WAe,"STRONG",{});var bKr=s(qle);C0o=r(bKr,"ctrl"),bKr.forEach(t),w0o=r(WAe," \u2014 "),pN=n(WAe,"A",{href:!0});var vKr=s(pN);A0o=r(vKr,"CTRLLMHeadModel"),vKr.forEach(t),y0o=r(WAe," (CTRL model)"),WAe.forEach(t),L0o=i(W),$_=n(W,"LI",{});var HAe=s($_);Nle=n(HAe,"STRONG",{});var FKr=s(Nle);x0o=r(FKr,"data2vec-text"),FKr.forEach(t),$0o=r(HAe," \u2014 "),uN=n(HAe,"A",{href:!0});var TKr=s(uN);k0o=r(TKr,"Data2VecTextForCausalLM"),TKr.forEach(t),S0o=r(HAe," (Data2VecText model)"),HAe.forEach(t),R0o=i(W),k_=n(W,"LI",{});var UAe=s(k_);jle=n(UAe,"STRONG",{});var MKr=s(jle);B0o=r(MKr,"electra"),MKr.forEach(t),P0o=r(UAe," \u2014 "),_N=n(UAe,"A",{href:!0});var EKr=s(_N);I0o=r(EKr,"ElectraForCausalLM"),EKr.forEach(t),q0o=r(UAe," (ELECTRA model)"),UAe.forEach(t),N0o=i(W),S_=n(W,"LI",{});var JAe=s(S_);Dle=n(JAe,"STRONG",{});var CKr=s(Dle);j0o=r(CKr,"gpt2"),CKr.forEach(t),D0o=r(JAe," \u2014 "),bN=n(JAe,"A",{href:!0});var wKr=s(bN);G0o=r(wKr,"GPT2LMHeadModel"),wKr.forEach(t),O0o=r(JAe," (OpenAI GPT-2 model)"),JAe.forEach(t),V0o=i(W),R_=n(W,"LI",{});var YAe=s(R_);Gle=n(YAe,"STRONG",{});var AKr=s(Gle);X0o=r(AKr,"gpt_neo"),AKr.forEach(t),z0o=r(YAe," \u2014 "),vN=n(YAe,"A",{href:!0});var yKr=s(vN);Q0o=r(yKr,"GPTNeoForCausalLM"),yKr.forEach(t),W0o=r(YAe," (GPT Neo model)"),YAe.forEach(t),H0o=i(W),B_=n(W,"LI",{});var KAe=s(B_);Ole=n(KAe,"STRONG",{});var LKr=s(Ole);U0o=r(LKr,"gptj"),LKr.forEach(t),J0o=r(KAe," \u2014 "),FN=n(KAe,"A",{href:!0});var xKr=s(FN);Y0o=r(xKr,"GPTJForCausalLM"),xKr.forEach(t),K0o=r(KAe," (GPT-J model)"),KAe.forEach(t),Z0o=i(W),P_=n(W,"LI",{});var ZAe=s(P_);Vle=n(ZAe,"STRONG",{});var $Kr=s(Vle);eTo=r($Kr,"marian"),$Kr.forEach(t),oTo=r(ZAe," \u2014 "),TN=n(ZAe,"A",{href:!0});var kKr=s(TN);rTo=r(kKr,"MarianForCausalLM"),kKr.forEach(t),tTo=r(ZAe," (Marian model)"),ZAe.forEach(t),aTo=i(W),I_=n(W,"LI",{});var e6e=s(I_);Xle=n(e6e,"STRONG",{});var SKr=s(Xle);nTo=r(SKr,"mbart"),SKr.forEach(t),sTo=r(e6e," \u2014 "),MN=n(e6e,"A",{href:!0});var RKr=s(MN);lTo=r(RKr,"MBartForCausalLM"),RKr.forEach(t),iTo=r(e6e," (mBART model)"),e6e.forEach(t),dTo=i(W),q_=n(W,"LI",{});var o6e=s(q_);zle=n(o6e,"STRONG",{});var BKr=s(zle);cTo=r(BKr,"megatron-bert"),BKr.forEach(t),fTo=r(o6e," \u2014 "),EN=n(o6e,"A",{href:!0});var PKr=s(EN);mTo=r(PKr,"MegatronBertForCausalLM"),PKr.forEach(t),gTo=r(o6e," (MegatronBert model)"),o6e.forEach(t),hTo=i(W),N_=n(W,"LI",{});var r6e=s(N_);Qle=n(r6e,"STRONG",{});var IKr=s(Qle);pTo=r(IKr,"openai-gpt"),IKr.forEach(t),uTo=r(r6e," \u2014 "),CN=n(r6e,"A",{href:!0});var qKr=s(CN);_To=r(qKr,"OpenAIGPTLMHeadModel"),qKr.forEach(t),bTo=r(r6e," (OpenAI GPT model)"),r6e.forEach(t),vTo=i(W),j_=n(W,"LI",{});var t6e=s(j_);Wle=n(t6e,"STRONG",{});var NKr=s(Wle);FTo=r(NKr,"pegasus"),NKr.forEach(t),TTo=r(t6e," \u2014 "),wN=n(t6e,"A",{href:!0});var jKr=s(wN);MTo=r(jKr,"PegasusForCausalLM"),jKr.forEach(t),ETo=r(t6e," (Pegasus model)"),t6e.forEach(t),CTo=i(W),D_=n(W,"LI",{});var a6e=s(D_);Hle=n(a6e,"STRONG",{});var DKr=s(Hle);wTo=r(DKr,"plbart"),DKr.forEach(t),ATo=r(a6e," \u2014 "),AN=n(a6e,"A",{href:!0});var GKr=s(AN);yTo=r(GKr,"PLBartForCausalLM"),GKr.forEach(t),LTo=r(a6e," (PLBart model)"),a6e.forEach(t),xTo=i(W),G_=n(W,"LI",{});var n6e=s(G_);Ule=n(n6e,"STRONG",{});var OKr=s(Ule);$To=r(OKr,"prophetnet"),OKr.forEach(t),kTo=r(n6e," \u2014 "),yN=n(n6e,"A",{href:!0});var VKr=s(yN);STo=r(VKr,"ProphetNetForCausalLM"),VKr.forEach(t),RTo=r(n6e," (ProphetNet model)"),n6e.forEach(t),BTo=i(W),O_=n(W,"LI",{});var s6e=s(O_);Jle=n(s6e,"STRONG",{});var XKr=s(Jle);PTo=r(XKr,"qdqbert"),XKr.forEach(t),ITo=r(s6e," \u2014 "),LN=n(s6e,"A",{href:!0});var zKr=s(LN);qTo=r(zKr,"QDQBertLMHeadModel"),zKr.forEach(t),NTo=r(s6e," (QDQBert model)"),s6e.forEach(t),jTo=i(W),V_=n(W,"LI",{});var l6e=s(V_);Yle=n(l6e,"STRONG",{});var QKr=s(Yle);DTo=r(QKr,"reformer"),QKr.forEach(t),GTo=r(l6e," \u2014 "),xN=n(l6e,"A",{href:!0});var WKr=s(xN);OTo=r(WKr,"ReformerModelWithLMHead"),WKr.forEach(t),VTo=r(l6e," (Reformer model)"),l6e.forEach(t),XTo=i(W),X_=n(W,"LI",{});var i6e=s(X_);Kle=n(i6e,"STRONG",{});var HKr=s(Kle);zTo=r(HKr,"rembert"),HKr.forEach(t),QTo=r(i6e," \u2014 "),$N=n(i6e,"A",{href:!0});var UKr=s($N);WTo=r(UKr,"RemBertForCausalLM"),UKr.forEach(t),HTo=r(i6e," (RemBERT model)"),i6e.forEach(t),UTo=i(W),z_=n(W,"LI",{});var d6e=s(z_);Zle=n(d6e,"STRONG",{});var JKr=s(Zle);JTo=r(JKr,"roberta"),JKr.forEach(t),YTo=r(d6e," \u2014 "),kN=n(d6e,"A",{href:!0});var YKr=s(kN);KTo=r(YKr,"RobertaForCausalLM"),YKr.forEach(t),ZTo=r(d6e," (RoBERTa model)"),d6e.forEach(t),e7o=i(W),Q_=n(W,"LI",{});var c6e=s(Q_);eie=n(c6e,"STRONG",{});var KKr=s(eie);o7o=r(KKr,"roformer"),KKr.forEach(t),r7o=r(c6e," \u2014 "),SN=n(c6e,"A",{href:!0});var ZKr=s(SN);t7o=r(ZKr,"RoFormerForCausalLM"),ZKr.forEach(t),a7o=r(c6e," (RoFormer model)"),c6e.forEach(t),n7o=i(W),W_=n(W,"LI",{});var f6e=s(W_);oie=n(f6e,"STRONG",{});var eZr=s(oie);s7o=r(eZr,"speech_to_text_2"),eZr.forEach(t),l7o=r(f6e," \u2014 "),RN=n(f6e,"A",{href:!0});var oZr=s(RN);i7o=r(oZr,"Speech2Text2ForCausalLM"),oZr.forEach(t),d7o=r(f6e," (Speech2Text2 model)"),f6e.forEach(t),c7o=i(W),H_=n(W,"LI",{});var m6e=s(H_);rie=n(m6e,"STRONG",{});var rZr=s(rie);f7o=r(rZr,"transfo-xl"),rZr.forEach(t),m7o=r(m6e," \u2014 "),BN=n(m6e,"A",{href:!0});var tZr=s(BN);g7o=r(tZr,"TransfoXLLMHeadModel"),tZr.forEach(t),h7o=r(m6e," (Transformer-XL model)"),m6e.forEach(t),p7o=i(W),U_=n(W,"LI",{});var g6e=s(U_);tie=n(g6e,"STRONG",{});var aZr=s(tie);u7o=r(aZr,"trocr"),aZr.forEach(t),_7o=r(g6e," \u2014 "),PN=n(g6e,"A",{href:!0});var nZr=s(PN);b7o=r(nZr,"TrOCRForCausalLM"),nZr.forEach(t),v7o=r(g6e," (TrOCR model)"),g6e.forEach(t),F7o=i(W),J_=n(W,"LI",{});var h6e=s(J_);aie=n(h6e,"STRONG",{});var sZr=s(aie);T7o=r(sZr,"xglm"),sZr.forEach(t),M7o=r(h6e," \u2014 "),IN=n(h6e,"A",{href:!0});var lZr=s(IN);E7o=r(lZr,"XGLMForCausalLM"),lZr.forEach(t),C7o=r(h6e," (XGLM model)"),h6e.forEach(t),w7o=i(W),Y_=n(W,"LI",{});var p6e=s(Y_);nie=n(p6e,"STRONG",{});var iZr=s(nie);A7o=r(iZr,"xlm"),iZr.forEach(t),y7o=r(p6e," \u2014 "),qN=n(p6e,"A",{href:!0});var dZr=s(qN);L7o=r(dZr,"XLMWithLMHeadModel"),dZr.forEach(t),x7o=r(p6e," (XLM model)"),p6e.forEach(t),$7o=i(W),K_=n(W,"LI",{});var u6e=s(K_);sie=n(u6e,"STRONG",{});var cZr=s(sie);k7o=r(cZr,"xlm-prophetnet"),cZr.forEach(t),S7o=r(u6e," \u2014 "),NN=n(u6e,"A",{href:!0});var fZr=s(NN);R7o=r(fZr,"XLMProphetNetForCausalLM"),fZr.forEach(t),B7o=r(u6e," (XLMProphetNet model)"),u6e.forEach(t),P7o=i(W),Z_=n(W,"LI",{});var _6e=s(Z_);lie=n(_6e,"STRONG",{});var mZr=s(lie);I7o=r(mZr,"xlm-roberta"),mZr.forEach(t),q7o=r(_6e," \u2014 "),jN=n(_6e,"A",{href:!0});var gZr=s(jN);N7o=r(gZr,"XLMRobertaForCausalLM"),gZr.forEach(t),j7o=r(_6e," (XLM-RoBERTa model)"),_6e.forEach(t),D7o=i(W),e1=n(W,"LI",{});var b6e=s(e1);iie=n(b6e,"STRONG",{});var hZr=s(iie);G7o=r(hZr,"xlm-roberta-xl"),hZr.forEach(t),O7o=r(b6e," \u2014 "),DN=n(b6e,"A",{href:!0});var pZr=s(DN);V7o=r(pZr,"XLMRobertaXLForCausalLM"),pZr.forEach(t),X7o=r(b6e," (XLM-RoBERTa-XL model)"),b6e.forEach(t),z7o=i(W),o1=n(W,"LI",{});var v6e=s(o1);die=n(v6e,"STRONG",{});var uZr=s(die);Q7o=r(uZr,"xlnet"),uZr.forEach(t),W7o=r(v6e," \u2014 "),GN=n(v6e,"A",{href:!0});var _Zr=s(GN);H7o=r(_Zr,"XLNetLMHeadModel"),_Zr.forEach(t),U7o=r(v6e," (XLNet model)"),v6e.forEach(t),W.forEach(t),J7o=i(oa),r1=n(oa,"P",{});var F6e=s(r1);Y7o=r(F6e,"The model is set in evaluation mode by default using "),cie=n(F6e,"CODE",{});var bZr=s(cie);K7o=r(bZr,"model.eval()"),bZr.forEach(t),Z7o=r(F6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(F6e,"CODE",{});var vZr=s(fie);eMo=r(vZr,"model.train()"),vZr.forEach(t),F6e.forEach(t),oMo=i(oa),T(t1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),APe=i(f),$i=n(f,"H2",{class:!0});var $qe=s($i);a1=n($qe,"A",{id:!0,class:!0,href:!0});var FZr=s(a1);mie=n(FZr,"SPAN",{});var TZr=s(mie);T(x6.$$.fragment,TZr),TZr.forEach(t),FZr.forEach(t),rMo=i($qe),gie=n($qe,"SPAN",{});var MZr=s(gie);tMo=r(MZr,"AutoModelForMaskedLM"),MZr.forEach(t),$qe.forEach(t),yPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T($6.$$.fragment,Os),aMo=i(Os),ki=n(Os,"P",{});var YY=s(ki);nMo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=n(YY,"A",{href:!0});var EZr=s(ON);sMo=r(EZr,"from_pretrained()"),EZr.forEach(t),lMo=r(YY," class method or the "),VN=n(YY,"A",{href:!0});var CZr=s(VN);iMo=r(CZr,"from_config()"),CZr.forEach(t),dMo=r(YY,` class
method.`),YY.forEach(t),cMo=i(Os),k6=n(Os,"P",{});var kqe=s(k6);fMo=r(kqe,"This class cannot be instantiated directly using "),hie=n(kqe,"CODE",{});var wZr=s(hie);mMo=r(wZr,"__init__()"),wZr.forEach(t),gMo=r(kqe," (throws an error)."),kqe.forEach(t),hMo=i(Os),at=n(Os,"DIV",{class:!0});var Y3=s(at);T(S6.$$.fragment,Y3),pMo=i(Y3),pie=n(Y3,"P",{});var AZr=s(pie);uMo=r(AZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AZr.forEach(t),_Mo=i(Y3),Si=n(Y3,"P",{});var KY=s(Si);bMo=r(KY,`Note:
Loading a model from its configuration file does `),uie=n(KY,"STRONG",{});var yZr=s(uie);vMo=r(yZr,"not"),yZr.forEach(t),FMo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(KY,"A",{href:!0});var LZr=s(XN);TMo=r(LZr,"from_pretrained()"),LZr.forEach(t),MMo=r(KY," to load the model weights."),KY.forEach(t),EMo=i(Y3),T(n1.$$.fragment,Y3),Y3.forEach(t),CMo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(R6.$$.fragment,ra),wMo=i(ra),_ie=n(ra,"P",{});var xZr=s(_ie);AMo=r(xZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xZr.forEach(t),yMo=i(ra),xa=n(ra,"P",{});var K3=s(xa);LMo=r(K3,"The model class to instantiate is selected based on the "),bie=n(K3,"CODE",{});var $Zr=s(bie);xMo=r($Zr,"model_type"),$Zr.forEach(t),$Mo=r(K3,` property of the config object (either
passed as an argument or loaded from `),vie=n(K3,"CODE",{});var kZr=s(vie);kMo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),SMo=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(K3,"CODE",{});var SZr=s(Fie);RMo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),BMo=r(K3,":"),K3.forEach(t),PMo=i(ra),Q=n(ra,"UL",{});var H=s(Q);s1=n(H,"LI",{});var T6e=s(s1);Tie=n(T6e,"STRONG",{});var RZr=s(Tie);IMo=r(RZr,"albert"),RZr.forEach(t),qMo=r(T6e," \u2014 "),zN=n(T6e,"A",{href:!0});var BZr=s(zN);NMo=r(BZr,"AlbertForMaskedLM"),BZr.forEach(t),jMo=r(T6e," (ALBERT model)"),T6e.forEach(t),DMo=i(H),l1=n(H,"LI",{});var M6e=s(l1);Mie=n(M6e,"STRONG",{});var PZr=s(Mie);GMo=r(PZr,"bart"),PZr.forEach(t),OMo=r(M6e," \u2014 "),QN=n(M6e,"A",{href:!0});var IZr=s(QN);VMo=r(IZr,"BartForConditionalGeneration"),IZr.forEach(t),XMo=r(M6e," (BART model)"),M6e.forEach(t),zMo=i(H),i1=n(H,"LI",{});var E6e=s(i1);Eie=n(E6e,"STRONG",{});var qZr=s(Eie);QMo=r(qZr,"bert"),qZr.forEach(t),WMo=r(E6e," \u2014 "),WN=n(E6e,"A",{href:!0});var NZr=s(WN);HMo=r(NZr,"BertForMaskedLM"),NZr.forEach(t),UMo=r(E6e," (BERT model)"),E6e.forEach(t),JMo=i(H),d1=n(H,"LI",{});var C6e=s(d1);Cie=n(C6e,"STRONG",{});var jZr=s(Cie);YMo=r(jZr,"big_bird"),jZr.forEach(t),KMo=r(C6e," \u2014 "),HN=n(C6e,"A",{href:!0});var DZr=s(HN);ZMo=r(DZr,"BigBirdForMaskedLM"),DZr.forEach(t),eEo=r(C6e," (BigBird model)"),C6e.forEach(t),oEo=i(H),c1=n(H,"LI",{});var w6e=s(c1);wie=n(w6e,"STRONG",{});var GZr=s(wie);rEo=r(GZr,"camembert"),GZr.forEach(t),tEo=r(w6e," \u2014 "),UN=n(w6e,"A",{href:!0});var OZr=s(UN);aEo=r(OZr,"CamembertForMaskedLM"),OZr.forEach(t),nEo=r(w6e," (CamemBERT model)"),w6e.forEach(t),sEo=i(H),f1=n(H,"LI",{});var A6e=s(f1);Aie=n(A6e,"STRONG",{});var VZr=s(Aie);lEo=r(VZr,"convbert"),VZr.forEach(t),iEo=r(A6e," \u2014 "),JN=n(A6e,"A",{href:!0});var XZr=s(JN);dEo=r(XZr,"ConvBertForMaskedLM"),XZr.forEach(t),cEo=r(A6e," (ConvBERT model)"),A6e.forEach(t),fEo=i(H),m1=n(H,"LI",{});var y6e=s(m1);yie=n(y6e,"STRONG",{});var zZr=s(yie);mEo=r(zZr,"data2vec-text"),zZr.forEach(t),gEo=r(y6e," \u2014 "),YN=n(y6e,"A",{href:!0});var QZr=s(YN);hEo=r(QZr,"Data2VecTextForMaskedLM"),QZr.forEach(t),pEo=r(y6e," (Data2VecText model)"),y6e.forEach(t),uEo=i(H),g1=n(H,"LI",{});var L6e=s(g1);Lie=n(L6e,"STRONG",{});var WZr=s(Lie);_Eo=r(WZr,"deberta"),WZr.forEach(t),bEo=r(L6e," \u2014 "),KN=n(L6e,"A",{href:!0});var HZr=s(KN);vEo=r(HZr,"DebertaForMaskedLM"),HZr.forEach(t),FEo=r(L6e," (DeBERTa model)"),L6e.forEach(t),TEo=i(H),h1=n(H,"LI",{});var x6e=s(h1);xie=n(x6e,"STRONG",{});var UZr=s(xie);MEo=r(UZr,"deberta-v2"),UZr.forEach(t),EEo=r(x6e," \u2014 "),ZN=n(x6e,"A",{href:!0});var JZr=s(ZN);CEo=r(JZr,"DebertaV2ForMaskedLM"),JZr.forEach(t),wEo=r(x6e," (DeBERTa-v2 model)"),x6e.forEach(t),AEo=i(H),p1=n(H,"LI",{});var $6e=s(p1);$ie=n($6e,"STRONG",{});var YZr=s($ie);yEo=r(YZr,"distilbert"),YZr.forEach(t),LEo=r($6e," \u2014 "),ej=n($6e,"A",{href:!0});var KZr=s(ej);xEo=r(KZr,"DistilBertForMaskedLM"),KZr.forEach(t),$Eo=r($6e," (DistilBERT model)"),$6e.forEach(t),kEo=i(H),u1=n(H,"LI",{});var k6e=s(u1);kie=n(k6e,"STRONG",{});var ZZr=s(kie);SEo=r(ZZr,"electra"),ZZr.forEach(t),REo=r(k6e," \u2014 "),oj=n(k6e,"A",{href:!0});var eet=s(oj);BEo=r(eet,"ElectraForMaskedLM"),eet.forEach(t),PEo=r(k6e," (ELECTRA model)"),k6e.forEach(t),IEo=i(H),_1=n(H,"LI",{});var S6e=s(_1);Sie=n(S6e,"STRONG",{});var oet=s(Sie);qEo=r(oet,"flaubert"),oet.forEach(t),NEo=r(S6e," \u2014 "),rj=n(S6e,"A",{href:!0});var ret=s(rj);jEo=r(ret,"FlaubertWithLMHeadModel"),ret.forEach(t),DEo=r(S6e," (FlauBERT model)"),S6e.forEach(t),GEo=i(H),b1=n(H,"LI",{});var R6e=s(b1);Rie=n(R6e,"STRONG",{});var tet=s(Rie);OEo=r(tet,"fnet"),tet.forEach(t),VEo=r(R6e," \u2014 "),tj=n(R6e,"A",{href:!0});var aet=s(tj);XEo=r(aet,"FNetForMaskedLM"),aet.forEach(t),zEo=r(R6e," (FNet model)"),R6e.forEach(t),QEo=i(H),v1=n(H,"LI",{});var B6e=s(v1);Bie=n(B6e,"STRONG",{});var net=s(Bie);WEo=r(net,"funnel"),net.forEach(t),HEo=r(B6e," \u2014 "),aj=n(B6e,"A",{href:!0});var set=s(aj);UEo=r(set,"FunnelForMaskedLM"),set.forEach(t),JEo=r(B6e," (Funnel Transformer model)"),B6e.forEach(t),YEo=i(H),F1=n(H,"LI",{});var P6e=s(F1);Pie=n(P6e,"STRONG",{});var iet=s(Pie);KEo=r(iet,"ibert"),iet.forEach(t),ZEo=r(P6e," \u2014 "),nj=n(P6e,"A",{href:!0});var det=s(nj);eCo=r(det,"IBertForMaskedLM"),det.forEach(t),oCo=r(P6e," (I-BERT model)"),P6e.forEach(t),rCo=i(H),T1=n(H,"LI",{});var I6e=s(T1);Iie=n(I6e,"STRONG",{});var cet=s(Iie);tCo=r(cet,"layoutlm"),cet.forEach(t),aCo=r(I6e," \u2014 "),sj=n(I6e,"A",{href:!0});var fet=s(sj);nCo=r(fet,"LayoutLMForMaskedLM"),fet.forEach(t),sCo=r(I6e," (LayoutLM model)"),I6e.forEach(t),lCo=i(H),M1=n(H,"LI",{});var q6e=s(M1);qie=n(q6e,"STRONG",{});var met=s(qie);iCo=r(met,"longformer"),met.forEach(t),dCo=r(q6e," \u2014 "),lj=n(q6e,"A",{href:!0});var get=s(lj);cCo=r(get,"LongformerForMaskedLM"),get.forEach(t),fCo=r(q6e," (Longformer model)"),q6e.forEach(t),mCo=i(H),E1=n(H,"LI",{});var N6e=s(E1);Nie=n(N6e,"STRONG",{});var het=s(Nie);gCo=r(het,"mbart"),het.forEach(t),hCo=r(N6e," \u2014 "),ij=n(N6e,"A",{href:!0});var pet=s(ij);pCo=r(pet,"MBartForConditionalGeneration"),pet.forEach(t),uCo=r(N6e," (mBART model)"),N6e.forEach(t),_Co=i(H),C1=n(H,"LI",{});var j6e=s(C1);jie=n(j6e,"STRONG",{});var uet=s(jie);bCo=r(uet,"megatron-bert"),uet.forEach(t),vCo=r(j6e," \u2014 "),dj=n(j6e,"A",{href:!0});var _et=s(dj);FCo=r(_et,"MegatronBertForMaskedLM"),_et.forEach(t),TCo=r(j6e," (MegatronBert model)"),j6e.forEach(t),MCo=i(H),w1=n(H,"LI",{});var D6e=s(w1);Die=n(D6e,"STRONG",{});var bet=s(Die);ECo=r(bet,"mobilebert"),bet.forEach(t),CCo=r(D6e," \u2014 "),cj=n(D6e,"A",{href:!0});var vet=s(cj);wCo=r(vet,"MobileBertForMaskedLM"),vet.forEach(t),ACo=r(D6e," (MobileBERT model)"),D6e.forEach(t),yCo=i(H),A1=n(H,"LI",{});var G6e=s(A1);Gie=n(G6e,"STRONG",{});var Fet=s(Gie);LCo=r(Fet,"mpnet"),Fet.forEach(t),xCo=r(G6e," \u2014 "),fj=n(G6e,"A",{href:!0});var Tet=s(fj);$Co=r(Tet,"MPNetForMaskedLM"),Tet.forEach(t),kCo=r(G6e," (MPNet model)"),G6e.forEach(t),SCo=i(H),y1=n(H,"LI",{});var O6e=s(y1);Oie=n(O6e,"STRONG",{});var Met=s(Oie);RCo=r(Met,"nystromformer"),Met.forEach(t),BCo=r(O6e," \u2014 "),mj=n(O6e,"A",{href:!0});var Eet=s(mj);PCo=r(Eet,"NystromformerForMaskedLM"),Eet.forEach(t),ICo=r(O6e," (Nystromformer model)"),O6e.forEach(t),qCo=i(H),L1=n(H,"LI",{});var V6e=s(L1);Vie=n(V6e,"STRONG",{});var Cet=s(Vie);NCo=r(Cet,"perceiver"),Cet.forEach(t),jCo=r(V6e," \u2014 "),gj=n(V6e,"A",{href:!0});var wet=s(gj);DCo=r(wet,"PerceiverForMaskedLM"),wet.forEach(t),GCo=r(V6e," (Perceiver model)"),V6e.forEach(t),OCo=i(H),x1=n(H,"LI",{});var X6e=s(x1);Xie=n(X6e,"STRONG",{});var Aet=s(Xie);VCo=r(Aet,"qdqbert"),Aet.forEach(t),XCo=r(X6e," \u2014 "),hj=n(X6e,"A",{href:!0});var yet=s(hj);zCo=r(yet,"QDQBertForMaskedLM"),yet.forEach(t),QCo=r(X6e," (QDQBert model)"),X6e.forEach(t),WCo=i(H),$1=n(H,"LI",{});var z6e=s($1);zie=n(z6e,"STRONG",{});var Let=s(zie);HCo=r(Let,"reformer"),Let.forEach(t),UCo=r(z6e," \u2014 "),pj=n(z6e,"A",{href:!0});var xet=s(pj);JCo=r(xet,"ReformerForMaskedLM"),xet.forEach(t),YCo=r(z6e," (Reformer model)"),z6e.forEach(t),KCo=i(H),k1=n(H,"LI",{});var Q6e=s(k1);Qie=n(Q6e,"STRONG",{});var $et=s(Qie);ZCo=r($et,"rembert"),$et.forEach(t),e3o=r(Q6e," \u2014 "),uj=n(Q6e,"A",{href:!0});var ket=s(uj);o3o=r(ket,"RemBertForMaskedLM"),ket.forEach(t),r3o=r(Q6e," (RemBERT model)"),Q6e.forEach(t),t3o=i(H),S1=n(H,"LI",{});var W6e=s(S1);Wie=n(W6e,"STRONG",{});var Set=s(Wie);a3o=r(Set,"roberta"),Set.forEach(t),n3o=r(W6e," \u2014 "),_j=n(W6e,"A",{href:!0});var Ret=s(_j);s3o=r(Ret,"RobertaForMaskedLM"),Ret.forEach(t),l3o=r(W6e," (RoBERTa model)"),W6e.forEach(t),i3o=i(H),R1=n(H,"LI",{});var H6e=s(R1);Hie=n(H6e,"STRONG",{});var Bet=s(Hie);d3o=r(Bet,"roformer"),Bet.forEach(t),c3o=r(H6e," \u2014 "),bj=n(H6e,"A",{href:!0});var Pet=s(bj);f3o=r(Pet,"RoFormerForMaskedLM"),Pet.forEach(t),m3o=r(H6e," (RoFormer model)"),H6e.forEach(t),g3o=i(H),B1=n(H,"LI",{});var U6e=s(B1);Uie=n(U6e,"STRONG",{});var Iet=s(Uie);h3o=r(Iet,"squeezebert"),Iet.forEach(t),p3o=r(U6e," \u2014 "),vj=n(U6e,"A",{href:!0});var qet=s(vj);u3o=r(qet,"SqueezeBertForMaskedLM"),qet.forEach(t),_3o=r(U6e," (SqueezeBERT model)"),U6e.forEach(t),b3o=i(H),P1=n(H,"LI",{});var J6e=s(P1);Jie=n(J6e,"STRONG",{});var Net=s(Jie);v3o=r(Net,"tapas"),Net.forEach(t),F3o=r(J6e," \u2014 "),Fj=n(J6e,"A",{href:!0});var jet=s(Fj);T3o=r(jet,"TapasForMaskedLM"),jet.forEach(t),M3o=r(J6e," (TAPAS model)"),J6e.forEach(t),E3o=i(H),I1=n(H,"LI",{});var Y6e=s(I1);Yie=n(Y6e,"STRONG",{});var Det=s(Yie);C3o=r(Det,"wav2vec2"),Det.forEach(t),w3o=r(Y6e," \u2014 "),Kie=n(Y6e,"CODE",{});var Get=s(Kie);A3o=r(Get,"Wav2Vec2ForMaskedLM"),Get.forEach(t),y3o=r(Y6e," (Wav2Vec2 model)"),Y6e.forEach(t),L3o=i(H),q1=n(H,"LI",{});var K6e=s(q1);Zie=n(K6e,"STRONG",{});var Oet=s(Zie);x3o=r(Oet,"xlm"),Oet.forEach(t),$3o=r(K6e," \u2014 "),Tj=n(K6e,"A",{href:!0});var Vet=s(Tj);k3o=r(Vet,"XLMWithLMHeadModel"),Vet.forEach(t),S3o=r(K6e," (XLM model)"),K6e.forEach(t),R3o=i(H),N1=n(H,"LI",{});var Z6e=s(N1);ede=n(Z6e,"STRONG",{});var Xet=s(ede);B3o=r(Xet,"xlm-roberta"),Xet.forEach(t),P3o=r(Z6e," \u2014 "),Mj=n(Z6e,"A",{href:!0});var zet=s(Mj);I3o=r(zet,"XLMRobertaForMaskedLM"),zet.forEach(t),q3o=r(Z6e," (XLM-RoBERTa model)"),Z6e.forEach(t),N3o=i(H),j1=n(H,"LI",{});var eye=s(j1);ode=n(eye,"STRONG",{});var Qet=s(ode);j3o=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),D3o=r(eye," \u2014 "),Ej=n(eye,"A",{href:!0});var Wet=s(Ej);G3o=r(Wet,"XLMRobertaXLForMaskedLM"),Wet.forEach(t),O3o=r(eye," (XLM-RoBERTa-XL model)"),eye.forEach(t),V3o=i(H),D1=n(H,"LI",{});var oye=s(D1);rde=n(oye,"STRONG",{});var Het=s(rde);X3o=r(Het,"yoso"),Het.forEach(t),z3o=r(oye," \u2014 "),Cj=n(oye,"A",{href:!0});var Uet=s(Cj);Q3o=r(Uet,"YosoForMaskedLM"),Uet.forEach(t),W3o=r(oye," (YOSO model)"),oye.forEach(t),H.forEach(t),H3o=i(ra),G1=n(ra,"P",{});var rye=s(G1);U3o=r(rye,"The model is set in evaluation mode by default using "),tde=n(rye,"CODE",{});var Jet=s(tde);J3o=r(Jet,"model.eval()"),Jet.forEach(t),Y3o=r(rye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(rye,"CODE",{});var Yet=s(ade);K3o=r(Yet,"model.train()"),Yet.forEach(t),rye.forEach(t),Z3o=i(ra),T(O1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),LPe=i(f),Ri=n(f,"H2",{class:!0});var Sqe=s(Ri);V1=n(Sqe,"A",{id:!0,class:!0,href:!0});var Ket=s(V1);nde=n(Ket,"SPAN",{});var Zet=s(nde);T(B6.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),ewo=i(Sqe),sde=n(Sqe,"SPAN",{});var eot=s(sde);owo=r(eot,"AutoModelForSeq2SeqLM"),eot.forEach(t),Sqe.forEach(t),xPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(P6.$$.fragment,Vs),rwo=i(Vs),Bi=n(Vs,"P",{});var ZY=s(Bi);two=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=n(ZY,"A",{href:!0});var oot=s(wj);awo=r(oot,"from_pretrained()"),oot.forEach(t),nwo=r(ZY," class method or the "),Aj=n(ZY,"A",{href:!0});var rot=s(Aj);swo=r(rot,"from_config()"),rot.forEach(t),lwo=r(ZY,` class
method.`),ZY.forEach(t),iwo=i(Vs),I6=n(Vs,"P",{});var Rqe=s(I6);dwo=r(Rqe,"This class cannot be instantiated directly using "),lde=n(Rqe,"CODE",{});var tot=s(lde);cwo=r(tot,"__init__()"),tot.forEach(t),fwo=r(Rqe," (throws an error)."),Rqe.forEach(t),mwo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Z3=s(nt);T(q6.$$.fragment,Z3),gwo=i(Z3),ide=n(Z3,"P",{});var aot=s(ide);hwo=r(aot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aot.forEach(t),pwo=i(Z3),Pi=n(Z3,"P",{});var eK=s(Pi);uwo=r(eK,`Note:
Loading a model from its configuration file does `),dde=n(eK,"STRONG",{});var not=s(dde);_wo=r(not,"not"),not.forEach(t),bwo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(eK,"A",{href:!0});var sot=s(yj);vwo=r(sot,"from_pretrained()"),sot.forEach(t),Fwo=r(eK," to load the model weights."),eK.forEach(t),Two=i(Z3),T(X1.$$.fragment,Z3),Z3.forEach(t),Mwo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(N6.$$.fragment,ta),Ewo=i(ta),cde=n(ta,"P",{});var lot=s(cde);Cwo=r(lot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lot.forEach(t),wwo=i(ta),$a=n(ta,"P",{});var ew=s($a);Awo=r(ew,"The model class to instantiate is selected based on the "),fde=n(ew,"CODE",{});var iot=s(fde);ywo=r(iot,"model_type"),iot.forEach(t),Lwo=r(ew,` property of the config object (either
passed as an argument or loaded from `),mde=n(ew,"CODE",{});var dot=s(mde);xwo=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),$wo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(ew,"CODE",{});var cot=s(gde);kwo=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),Swo=r(ew,":"),ew.forEach(t),Rwo=i(ta),he=n(ta,"UL",{});var ue=s(he);z1=n(ue,"LI",{});var tye=s(z1);hde=n(tye,"STRONG",{});var fot=s(hde);Bwo=r(fot,"bart"),fot.forEach(t),Pwo=r(tye," \u2014 "),Lj=n(tye,"A",{href:!0});var mot=s(Lj);Iwo=r(mot,"BartForConditionalGeneration"),mot.forEach(t),qwo=r(tye," (BART model)"),tye.forEach(t),Nwo=i(ue),Q1=n(ue,"LI",{});var aye=s(Q1);pde=n(aye,"STRONG",{});var got=s(pde);jwo=r(got,"bigbird_pegasus"),got.forEach(t),Dwo=r(aye," \u2014 "),xj=n(aye,"A",{href:!0});var hot=s(xj);Gwo=r(hot,"BigBirdPegasusForConditionalGeneration"),hot.forEach(t),Owo=r(aye," (BigBirdPegasus model)"),aye.forEach(t),Vwo=i(ue),W1=n(ue,"LI",{});var nye=s(W1);ude=n(nye,"STRONG",{});var pot=s(ude);Xwo=r(pot,"blenderbot"),pot.forEach(t),zwo=r(nye," \u2014 "),$j=n(nye,"A",{href:!0});var uot=s($j);Qwo=r(uot,"BlenderbotForConditionalGeneration"),uot.forEach(t),Wwo=r(nye," (Blenderbot model)"),nye.forEach(t),Hwo=i(ue),H1=n(ue,"LI",{});var sye=s(H1);_de=n(sye,"STRONG",{});var _ot=s(_de);Uwo=r(_ot,"blenderbot-small"),_ot.forEach(t),Jwo=r(sye," \u2014 "),kj=n(sye,"A",{href:!0});var bot=s(kj);Ywo=r(bot,"BlenderbotSmallForConditionalGeneration"),bot.forEach(t),Kwo=r(sye," (BlenderbotSmall model)"),sye.forEach(t),Zwo=i(ue),U1=n(ue,"LI",{});var lye=s(U1);bde=n(lye,"STRONG",{});var vot=s(bde);eAo=r(vot,"encoder-decoder"),vot.forEach(t),oAo=r(lye," \u2014 "),Sj=n(lye,"A",{href:!0});var Fot=s(Sj);rAo=r(Fot,"EncoderDecoderModel"),Fot.forEach(t),tAo=r(lye," (Encoder decoder model)"),lye.forEach(t),aAo=i(ue),J1=n(ue,"LI",{});var iye=s(J1);vde=n(iye,"STRONG",{});var Tot=s(vde);nAo=r(Tot,"fsmt"),Tot.forEach(t),sAo=r(iye," \u2014 "),Rj=n(iye,"A",{href:!0});var Mot=s(Rj);lAo=r(Mot,"FSMTForConditionalGeneration"),Mot.forEach(t),iAo=r(iye," (FairSeq Machine-Translation model)"),iye.forEach(t),dAo=i(ue),Y1=n(ue,"LI",{});var dye=s(Y1);Fde=n(dye,"STRONG",{});var Eot=s(Fde);cAo=r(Eot,"led"),Eot.forEach(t),fAo=r(dye," \u2014 "),Bj=n(dye,"A",{href:!0});var Cot=s(Bj);mAo=r(Cot,"LEDForConditionalGeneration"),Cot.forEach(t),gAo=r(dye," (LED model)"),dye.forEach(t),hAo=i(ue),K1=n(ue,"LI",{});var cye=s(K1);Tde=n(cye,"STRONG",{});var wot=s(Tde);pAo=r(wot,"m2m_100"),wot.forEach(t),uAo=r(cye," \u2014 "),Pj=n(cye,"A",{href:!0});var Aot=s(Pj);_Ao=r(Aot,"M2M100ForConditionalGeneration"),Aot.forEach(t),bAo=r(cye," (M2M100 model)"),cye.forEach(t),vAo=i(ue),Z1=n(ue,"LI",{});var fye=s(Z1);Mde=n(fye,"STRONG",{});var yot=s(Mde);FAo=r(yot,"marian"),yot.forEach(t),TAo=r(fye," \u2014 "),Ij=n(fye,"A",{href:!0});var Lot=s(Ij);MAo=r(Lot,"MarianMTModel"),Lot.forEach(t),EAo=r(fye," (Marian model)"),fye.forEach(t),CAo=i(ue),eb=n(ue,"LI",{});var mye=s(eb);Ede=n(mye,"STRONG",{});var xot=s(Ede);wAo=r(xot,"mbart"),xot.forEach(t),AAo=r(mye," \u2014 "),qj=n(mye,"A",{href:!0});var $ot=s(qj);yAo=r($ot,"MBartForConditionalGeneration"),$ot.forEach(t),LAo=r(mye," (mBART model)"),mye.forEach(t),xAo=i(ue),ob=n(ue,"LI",{});var gye=s(ob);Cde=n(gye,"STRONG",{});var kot=s(Cde);$Ao=r(kot,"mt5"),kot.forEach(t),kAo=r(gye," \u2014 "),Nj=n(gye,"A",{href:!0});var Sot=s(Nj);SAo=r(Sot,"MT5ForConditionalGeneration"),Sot.forEach(t),RAo=r(gye," (mT5 model)"),gye.forEach(t),BAo=i(ue),rb=n(ue,"LI",{});var hye=s(rb);wde=n(hye,"STRONG",{});var Rot=s(wde);PAo=r(Rot,"pegasus"),Rot.forEach(t),IAo=r(hye," \u2014 "),jj=n(hye,"A",{href:!0});var Bot=s(jj);qAo=r(Bot,"PegasusForConditionalGeneration"),Bot.forEach(t),NAo=r(hye," (Pegasus model)"),hye.forEach(t),jAo=i(ue),tb=n(ue,"LI",{});var pye=s(tb);Ade=n(pye,"STRONG",{});var Pot=s(Ade);DAo=r(Pot,"plbart"),Pot.forEach(t),GAo=r(pye," \u2014 "),Dj=n(pye,"A",{href:!0});var Iot=s(Dj);OAo=r(Iot,"PLBartForConditionalGeneration"),Iot.forEach(t),VAo=r(pye," (PLBart model)"),pye.forEach(t),XAo=i(ue),ab=n(ue,"LI",{});var uye=s(ab);yde=n(uye,"STRONG",{});var qot=s(yde);zAo=r(qot,"prophetnet"),qot.forEach(t),QAo=r(uye," \u2014 "),Gj=n(uye,"A",{href:!0});var Not=s(Gj);WAo=r(Not,"ProphetNetForConditionalGeneration"),Not.forEach(t),HAo=r(uye," (ProphetNet model)"),uye.forEach(t),UAo=i(ue),nb=n(ue,"LI",{});var _ye=s(nb);Lde=n(_ye,"STRONG",{});var jot=s(Lde);JAo=r(jot,"t5"),jot.forEach(t),YAo=r(_ye," \u2014 "),Oj=n(_ye,"A",{href:!0});var Dot=s(Oj);KAo=r(Dot,"T5ForConditionalGeneration"),Dot.forEach(t),ZAo=r(_ye," (T5 model)"),_ye.forEach(t),e6o=i(ue),sb=n(ue,"LI",{});var bye=s(sb);xde=n(bye,"STRONG",{});var Got=s(xde);o6o=r(Got,"tapex"),Got.forEach(t),r6o=r(bye," \u2014 "),Vj=n(bye,"A",{href:!0});var Oot=s(Vj);t6o=r(Oot,"BartForConditionalGeneration"),Oot.forEach(t),a6o=r(bye," (TAPEX model)"),bye.forEach(t),n6o=i(ue),lb=n(ue,"LI",{});var vye=s(lb);$de=n(vye,"STRONG",{});var Vot=s($de);s6o=r(Vot,"xlm-prophetnet"),Vot.forEach(t),l6o=r(vye," \u2014 "),Xj=n(vye,"A",{href:!0});var Xot=s(Xj);i6o=r(Xot,"XLMProphetNetForConditionalGeneration"),Xot.forEach(t),d6o=r(vye," (XLMProphetNet model)"),vye.forEach(t),ue.forEach(t),c6o=i(ta),ib=n(ta,"P",{});var Fye=s(ib);f6o=r(Fye,"The model is set in evaluation mode by default using "),kde=n(Fye,"CODE",{});var zot=s(kde);m6o=r(zot,"model.eval()"),zot.forEach(t),g6o=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(Fye,"CODE",{});var Qot=s(Sde);h6o=r(Qot,"model.train()"),Qot.forEach(t),Fye.forEach(t),p6o=i(ta),T(db.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),$Pe=i(f),Ii=n(f,"H2",{class:!0});var Bqe=s(Ii);cb=n(Bqe,"A",{id:!0,class:!0,href:!0});var Wot=s(cb);Rde=n(Wot,"SPAN",{});var Hot=s(Rde);T(j6.$$.fragment,Hot),Hot.forEach(t),Wot.forEach(t),u6o=i(Bqe),Bde=n(Bqe,"SPAN",{});var Uot=s(Bde);_6o=r(Uot,"AutoModelForSequenceClassification"),Uot.forEach(t),Bqe.forEach(t),kPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(D6.$$.fragment,Xs),b6o=i(Xs),qi=n(Xs,"P",{});var oK=s(qi);v6o=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=n(oK,"A",{href:!0});var Jot=s(zj);F6o=r(Jot,"from_pretrained()"),Jot.forEach(t),T6o=r(oK," class method or the "),Qj=n(oK,"A",{href:!0});var Yot=s(Qj);M6o=r(Yot,"from_config()"),Yot.forEach(t),E6o=r(oK,` class
method.`),oK.forEach(t),C6o=i(Xs),G6=n(Xs,"P",{});var Pqe=s(G6);w6o=r(Pqe,"This class cannot be instantiated directly using "),Pde=n(Pqe,"CODE",{});var Kot=s(Pde);A6o=r(Kot,"__init__()"),Kot.forEach(t),y6o=r(Pqe," (throws an error)."),Pqe.forEach(t),L6o=i(Xs),st=n(Xs,"DIV",{class:!0});var ow=s(st);T(O6.$$.fragment,ow),x6o=i(ow),Ide=n(ow,"P",{});var Zot=s(Ide);$6o=r(Zot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zot.forEach(t),k6o=i(ow),Ni=n(ow,"P",{});var rK=s(Ni);S6o=r(rK,`Note:
Loading a model from its configuration file does `),qde=n(rK,"STRONG",{});var ert=s(qde);R6o=r(ert,"not"),ert.forEach(t),B6o=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(rK,"A",{href:!0});var ort=s(Wj);P6o=r(ort,"from_pretrained()"),ort.forEach(t),I6o=r(rK," to load the model weights."),rK.forEach(t),q6o=i(ow),T(fb.$$.fragment,ow),ow.forEach(t),N6o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(V6.$$.fragment,aa),j6o=i(aa),Nde=n(aa,"P",{});var rrt=s(Nde);D6o=r(rrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rrt.forEach(t),G6o=i(aa),ka=n(aa,"P",{});var rw=s(ka);O6o=r(rw,"The model class to instantiate is selected based on the "),jde=n(rw,"CODE",{});var trt=s(jde);V6o=r(trt,"model_type"),trt.forEach(t),X6o=r(rw,` property of the config object (either
passed as an argument or loaded from `),Dde=n(rw,"CODE",{});var art=s(Dde);z6o=r(art,"pretrained_model_name_or_path"),art.forEach(t),Q6o=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(rw,"CODE",{});var nrt=s(Gde);W6o=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),H6o=r(rw,":"),rw.forEach(t),U6o=i(aa),q=n(aa,"UL",{});var N=s(q);mb=n(N,"LI",{});var Tye=s(mb);Ode=n(Tye,"STRONG",{});var srt=s(Ode);J6o=r(srt,"albert"),srt.forEach(t),Y6o=r(Tye," \u2014 "),Hj=n(Tye,"A",{href:!0});var lrt=s(Hj);K6o=r(lrt,"AlbertForSequenceClassification"),lrt.forEach(t),Z6o=r(Tye," (ALBERT model)"),Tye.forEach(t),eyo=i(N),gb=n(N,"LI",{});var Mye=s(gb);Vde=n(Mye,"STRONG",{});var irt=s(Vde);oyo=r(irt,"bart"),irt.forEach(t),ryo=r(Mye," \u2014 "),Uj=n(Mye,"A",{href:!0});var drt=s(Uj);tyo=r(drt,"BartForSequenceClassification"),drt.forEach(t),ayo=r(Mye," (BART model)"),Mye.forEach(t),nyo=i(N),hb=n(N,"LI",{});var Eye=s(hb);Xde=n(Eye,"STRONG",{});var crt=s(Xde);syo=r(crt,"bert"),crt.forEach(t),lyo=r(Eye," \u2014 "),Jj=n(Eye,"A",{href:!0});var frt=s(Jj);iyo=r(frt,"BertForSequenceClassification"),frt.forEach(t),dyo=r(Eye," (BERT model)"),Eye.forEach(t),cyo=i(N),pb=n(N,"LI",{});var Cye=s(pb);zde=n(Cye,"STRONG",{});var mrt=s(zde);fyo=r(mrt,"big_bird"),mrt.forEach(t),myo=r(Cye," \u2014 "),Yj=n(Cye,"A",{href:!0});var grt=s(Yj);gyo=r(grt,"BigBirdForSequenceClassification"),grt.forEach(t),hyo=r(Cye," (BigBird model)"),Cye.forEach(t),pyo=i(N),ub=n(N,"LI",{});var wye=s(ub);Qde=n(wye,"STRONG",{});var hrt=s(Qde);uyo=r(hrt,"bigbird_pegasus"),hrt.forEach(t),_yo=r(wye," \u2014 "),Kj=n(wye,"A",{href:!0});var prt=s(Kj);byo=r(prt,"BigBirdPegasusForSequenceClassification"),prt.forEach(t),vyo=r(wye," (BigBirdPegasus model)"),wye.forEach(t),Fyo=i(N),_b=n(N,"LI",{});var Aye=s(_b);Wde=n(Aye,"STRONG",{});var urt=s(Wde);Tyo=r(urt,"camembert"),urt.forEach(t),Myo=r(Aye," \u2014 "),Zj=n(Aye,"A",{href:!0});var _rt=s(Zj);Eyo=r(_rt,"CamembertForSequenceClassification"),_rt.forEach(t),Cyo=r(Aye," (CamemBERT model)"),Aye.forEach(t),wyo=i(N),bb=n(N,"LI",{});var yye=s(bb);Hde=n(yye,"STRONG",{});var brt=s(Hde);Ayo=r(brt,"canine"),brt.forEach(t),yyo=r(yye," \u2014 "),eD=n(yye,"A",{href:!0});var vrt=s(eD);Lyo=r(vrt,"CanineForSequenceClassification"),vrt.forEach(t),xyo=r(yye," (Canine model)"),yye.forEach(t),$yo=i(N),vb=n(N,"LI",{});var Lye=s(vb);Ude=n(Lye,"STRONG",{});var Frt=s(Ude);kyo=r(Frt,"convbert"),Frt.forEach(t),Syo=r(Lye," \u2014 "),oD=n(Lye,"A",{href:!0});var Trt=s(oD);Ryo=r(Trt,"ConvBertForSequenceClassification"),Trt.forEach(t),Byo=r(Lye," (ConvBERT model)"),Lye.forEach(t),Pyo=i(N),Fb=n(N,"LI",{});var xye=s(Fb);Jde=n(xye,"STRONG",{});var Mrt=s(Jde);Iyo=r(Mrt,"ctrl"),Mrt.forEach(t),qyo=r(xye," \u2014 "),rD=n(xye,"A",{href:!0});var Ert=s(rD);Nyo=r(Ert,"CTRLForSequenceClassification"),Ert.forEach(t),jyo=r(xye," (CTRL model)"),xye.forEach(t),Dyo=i(N),Tb=n(N,"LI",{});var $ye=s(Tb);Yde=n($ye,"STRONG",{});var Crt=s(Yde);Gyo=r(Crt,"data2vec-text"),Crt.forEach(t),Oyo=r($ye," \u2014 "),tD=n($ye,"A",{href:!0});var wrt=s(tD);Vyo=r(wrt,"Data2VecTextForSequenceClassification"),wrt.forEach(t),Xyo=r($ye," (Data2VecText model)"),$ye.forEach(t),zyo=i(N),Mb=n(N,"LI",{});var kye=s(Mb);Kde=n(kye,"STRONG",{});var Art=s(Kde);Qyo=r(Art,"deberta"),Art.forEach(t),Wyo=r(kye," \u2014 "),aD=n(kye,"A",{href:!0});var yrt=s(aD);Hyo=r(yrt,"DebertaForSequenceClassification"),yrt.forEach(t),Uyo=r(kye," (DeBERTa model)"),kye.forEach(t),Jyo=i(N),Eb=n(N,"LI",{});var Sye=s(Eb);Zde=n(Sye,"STRONG",{});var Lrt=s(Zde);Yyo=r(Lrt,"deberta-v2"),Lrt.forEach(t),Kyo=r(Sye," \u2014 "),nD=n(Sye,"A",{href:!0});var xrt=s(nD);Zyo=r(xrt,"DebertaV2ForSequenceClassification"),xrt.forEach(t),eLo=r(Sye," (DeBERTa-v2 model)"),Sye.forEach(t),oLo=i(N),Cb=n(N,"LI",{});var Rye=s(Cb);ece=n(Rye,"STRONG",{});var $rt=s(ece);rLo=r($rt,"distilbert"),$rt.forEach(t),tLo=r(Rye," \u2014 "),sD=n(Rye,"A",{href:!0});var krt=s(sD);aLo=r(krt,"DistilBertForSequenceClassification"),krt.forEach(t),nLo=r(Rye," (DistilBERT model)"),Rye.forEach(t),sLo=i(N),wb=n(N,"LI",{});var Bye=s(wb);oce=n(Bye,"STRONG",{});var Srt=s(oce);lLo=r(Srt,"electra"),Srt.forEach(t),iLo=r(Bye," \u2014 "),lD=n(Bye,"A",{href:!0});var Rrt=s(lD);dLo=r(Rrt,"ElectraForSequenceClassification"),Rrt.forEach(t),cLo=r(Bye," (ELECTRA model)"),Bye.forEach(t),fLo=i(N),Ab=n(N,"LI",{});var Pye=s(Ab);rce=n(Pye,"STRONG",{});var Brt=s(rce);mLo=r(Brt,"flaubert"),Brt.forEach(t),gLo=r(Pye," \u2014 "),iD=n(Pye,"A",{href:!0});var Prt=s(iD);hLo=r(Prt,"FlaubertForSequenceClassification"),Prt.forEach(t),pLo=r(Pye," (FlauBERT model)"),Pye.forEach(t),uLo=i(N),yb=n(N,"LI",{});var Iye=s(yb);tce=n(Iye,"STRONG",{});var Irt=s(tce);_Lo=r(Irt,"fnet"),Irt.forEach(t),bLo=r(Iye," \u2014 "),dD=n(Iye,"A",{href:!0});var qrt=s(dD);vLo=r(qrt,"FNetForSequenceClassification"),qrt.forEach(t),FLo=r(Iye," (FNet model)"),Iye.forEach(t),TLo=i(N),Lb=n(N,"LI",{});var qye=s(Lb);ace=n(qye,"STRONG",{});var Nrt=s(ace);MLo=r(Nrt,"funnel"),Nrt.forEach(t),ELo=r(qye," \u2014 "),cD=n(qye,"A",{href:!0});var jrt=s(cD);CLo=r(jrt,"FunnelForSequenceClassification"),jrt.forEach(t),wLo=r(qye," (Funnel Transformer model)"),qye.forEach(t),ALo=i(N),xb=n(N,"LI",{});var Nye=s(xb);nce=n(Nye,"STRONG",{});var Drt=s(nce);yLo=r(Drt,"gpt2"),Drt.forEach(t),LLo=r(Nye," \u2014 "),fD=n(Nye,"A",{href:!0});var Grt=s(fD);xLo=r(Grt,"GPT2ForSequenceClassification"),Grt.forEach(t),$Lo=r(Nye," (OpenAI GPT-2 model)"),Nye.forEach(t),kLo=i(N),$b=n(N,"LI",{});var jye=s($b);sce=n(jye,"STRONG",{});var Ort=s(sce);SLo=r(Ort,"gpt_neo"),Ort.forEach(t),RLo=r(jye," \u2014 "),mD=n(jye,"A",{href:!0});var Vrt=s(mD);BLo=r(Vrt,"GPTNeoForSequenceClassification"),Vrt.forEach(t),PLo=r(jye," (GPT Neo model)"),jye.forEach(t),ILo=i(N),kb=n(N,"LI",{});var Dye=s(kb);lce=n(Dye,"STRONG",{});var Xrt=s(lce);qLo=r(Xrt,"gptj"),Xrt.forEach(t),NLo=r(Dye," \u2014 "),gD=n(Dye,"A",{href:!0});var zrt=s(gD);jLo=r(zrt,"GPTJForSequenceClassification"),zrt.forEach(t),DLo=r(Dye," (GPT-J model)"),Dye.forEach(t),GLo=i(N),Sb=n(N,"LI",{});var Gye=s(Sb);ice=n(Gye,"STRONG",{});var Qrt=s(ice);OLo=r(Qrt,"ibert"),Qrt.forEach(t),VLo=r(Gye," \u2014 "),hD=n(Gye,"A",{href:!0});var Wrt=s(hD);XLo=r(Wrt,"IBertForSequenceClassification"),Wrt.forEach(t),zLo=r(Gye," (I-BERT model)"),Gye.forEach(t),QLo=i(N),Rb=n(N,"LI",{});var Oye=s(Rb);dce=n(Oye,"STRONG",{});var Hrt=s(dce);WLo=r(Hrt,"layoutlm"),Hrt.forEach(t),HLo=r(Oye," \u2014 "),pD=n(Oye,"A",{href:!0});var Urt=s(pD);ULo=r(Urt,"LayoutLMForSequenceClassification"),Urt.forEach(t),JLo=r(Oye," (LayoutLM model)"),Oye.forEach(t),YLo=i(N),Bb=n(N,"LI",{});var Vye=s(Bb);cce=n(Vye,"STRONG",{});var Jrt=s(cce);KLo=r(Jrt,"layoutlmv2"),Jrt.forEach(t),ZLo=r(Vye," \u2014 "),uD=n(Vye,"A",{href:!0});var Yrt=s(uD);e8o=r(Yrt,"LayoutLMv2ForSequenceClassification"),Yrt.forEach(t),o8o=r(Vye," (LayoutLMv2 model)"),Vye.forEach(t),r8o=i(N),Pb=n(N,"LI",{});var Xye=s(Pb);fce=n(Xye,"STRONG",{});var Krt=s(fce);t8o=r(Krt,"led"),Krt.forEach(t),a8o=r(Xye," \u2014 "),_D=n(Xye,"A",{href:!0});var Zrt=s(_D);n8o=r(Zrt,"LEDForSequenceClassification"),Zrt.forEach(t),s8o=r(Xye," (LED model)"),Xye.forEach(t),l8o=i(N),Ib=n(N,"LI",{});var zye=s(Ib);mce=n(zye,"STRONG",{});var ett=s(mce);i8o=r(ett,"longformer"),ett.forEach(t),d8o=r(zye," \u2014 "),bD=n(zye,"A",{href:!0});var ott=s(bD);c8o=r(ott,"LongformerForSequenceClassification"),ott.forEach(t),f8o=r(zye," (Longformer model)"),zye.forEach(t),m8o=i(N),qb=n(N,"LI",{});var Qye=s(qb);gce=n(Qye,"STRONG",{});var rtt=s(gce);g8o=r(rtt,"mbart"),rtt.forEach(t),h8o=r(Qye," \u2014 "),vD=n(Qye,"A",{href:!0});var ttt=s(vD);p8o=r(ttt,"MBartForSequenceClassification"),ttt.forEach(t),u8o=r(Qye," (mBART model)"),Qye.forEach(t),_8o=i(N),Nb=n(N,"LI",{});var Wye=s(Nb);hce=n(Wye,"STRONG",{});var att=s(hce);b8o=r(att,"megatron-bert"),att.forEach(t),v8o=r(Wye," \u2014 "),FD=n(Wye,"A",{href:!0});var ntt=s(FD);F8o=r(ntt,"MegatronBertForSequenceClassification"),ntt.forEach(t),T8o=r(Wye," (MegatronBert model)"),Wye.forEach(t),M8o=i(N),jb=n(N,"LI",{});var Hye=s(jb);pce=n(Hye,"STRONG",{});var stt=s(pce);E8o=r(stt,"mobilebert"),stt.forEach(t),C8o=r(Hye," \u2014 "),TD=n(Hye,"A",{href:!0});var ltt=s(TD);w8o=r(ltt,"MobileBertForSequenceClassification"),ltt.forEach(t),A8o=r(Hye," (MobileBERT model)"),Hye.forEach(t),y8o=i(N),Db=n(N,"LI",{});var Uye=s(Db);uce=n(Uye,"STRONG",{});var itt=s(uce);L8o=r(itt,"mpnet"),itt.forEach(t),x8o=r(Uye," \u2014 "),MD=n(Uye,"A",{href:!0});var dtt=s(MD);$8o=r(dtt,"MPNetForSequenceClassification"),dtt.forEach(t),k8o=r(Uye," (MPNet model)"),Uye.forEach(t),S8o=i(N),Gb=n(N,"LI",{});var Jye=s(Gb);_ce=n(Jye,"STRONG",{});var ctt=s(_ce);R8o=r(ctt,"nystromformer"),ctt.forEach(t),B8o=r(Jye," \u2014 "),ED=n(Jye,"A",{href:!0});var ftt=s(ED);P8o=r(ftt,"NystromformerForSequenceClassification"),ftt.forEach(t),I8o=r(Jye," (Nystromformer model)"),Jye.forEach(t),q8o=i(N),Ob=n(N,"LI",{});var Yye=s(Ob);bce=n(Yye,"STRONG",{});var mtt=s(bce);N8o=r(mtt,"openai-gpt"),mtt.forEach(t),j8o=r(Yye," \u2014 "),CD=n(Yye,"A",{href:!0});var gtt=s(CD);D8o=r(gtt,"OpenAIGPTForSequenceClassification"),gtt.forEach(t),G8o=r(Yye," (OpenAI GPT model)"),Yye.forEach(t),O8o=i(N),Vb=n(N,"LI",{});var Kye=s(Vb);vce=n(Kye,"STRONG",{});var htt=s(vce);V8o=r(htt,"perceiver"),htt.forEach(t),X8o=r(Kye," \u2014 "),wD=n(Kye,"A",{href:!0});var ptt=s(wD);z8o=r(ptt,"PerceiverForSequenceClassification"),ptt.forEach(t),Q8o=r(Kye," (Perceiver model)"),Kye.forEach(t),W8o=i(N),Xb=n(N,"LI",{});var Zye=s(Xb);Fce=n(Zye,"STRONG",{});var utt=s(Fce);H8o=r(utt,"plbart"),utt.forEach(t),U8o=r(Zye," \u2014 "),AD=n(Zye,"A",{href:!0});var _tt=s(AD);J8o=r(_tt,"PLBartForSequenceClassification"),_tt.forEach(t),Y8o=r(Zye," (PLBart model)"),Zye.forEach(t),K8o=i(N),zb=n(N,"LI",{});var eLe=s(zb);Tce=n(eLe,"STRONG",{});var btt=s(Tce);Z8o=r(btt,"qdqbert"),btt.forEach(t),exo=r(eLe," \u2014 "),yD=n(eLe,"A",{href:!0});var vtt=s(yD);oxo=r(vtt,"QDQBertForSequenceClassification"),vtt.forEach(t),rxo=r(eLe," (QDQBert model)"),eLe.forEach(t),txo=i(N),Qb=n(N,"LI",{});var oLe=s(Qb);Mce=n(oLe,"STRONG",{});var Ftt=s(Mce);axo=r(Ftt,"reformer"),Ftt.forEach(t),nxo=r(oLe," \u2014 "),LD=n(oLe,"A",{href:!0});var Ttt=s(LD);sxo=r(Ttt,"ReformerForSequenceClassification"),Ttt.forEach(t),lxo=r(oLe," (Reformer model)"),oLe.forEach(t),ixo=i(N),Wb=n(N,"LI",{});var rLe=s(Wb);Ece=n(rLe,"STRONG",{});var Mtt=s(Ece);dxo=r(Mtt,"rembert"),Mtt.forEach(t),cxo=r(rLe," \u2014 "),xD=n(rLe,"A",{href:!0});var Ett=s(xD);fxo=r(Ett,"RemBertForSequenceClassification"),Ett.forEach(t),mxo=r(rLe," (RemBERT model)"),rLe.forEach(t),gxo=i(N),Hb=n(N,"LI",{});var tLe=s(Hb);Cce=n(tLe,"STRONG",{});var Ctt=s(Cce);hxo=r(Ctt,"roberta"),Ctt.forEach(t),pxo=r(tLe," \u2014 "),$D=n(tLe,"A",{href:!0});var wtt=s($D);uxo=r(wtt,"RobertaForSequenceClassification"),wtt.forEach(t),_xo=r(tLe," (RoBERTa model)"),tLe.forEach(t),bxo=i(N),Ub=n(N,"LI",{});var aLe=s(Ub);wce=n(aLe,"STRONG",{});var Att=s(wce);vxo=r(Att,"roformer"),Att.forEach(t),Fxo=r(aLe," \u2014 "),kD=n(aLe,"A",{href:!0});var ytt=s(kD);Txo=r(ytt,"RoFormerForSequenceClassification"),ytt.forEach(t),Mxo=r(aLe," (RoFormer model)"),aLe.forEach(t),Exo=i(N),Jb=n(N,"LI",{});var nLe=s(Jb);Ace=n(nLe,"STRONG",{});var Ltt=s(Ace);Cxo=r(Ltt,"squeezebert"),Ltt.forEach(t),wxo=r(nLe," \u2014 "),SD=n(nLe,"A",{href:!0});var xtt=s(SD);Axo=r(xtt,"SqueezeBertForSequenceClassification"),xtt.forEach(t),yxo=r(nLe," (SqueezeBERT model)"),nLe.forEach(t),Lxo=i(N),Yb=n(N,"LI",{});var sLe=s(Yb);yce=n(sLe,"STRONG",{});var $tt=s(yce);xxo=r($tt,"tapas"),$tt.forEach(t),$xo=r(sLe," \u2014 "),RD=n(sLe,"A",{href:!0});var ktt=s(RD);kxo=r(ktt,"TapasForSequenceClassification"),ktt.forEach(t),Sxo=r(sLe," (TAPAS model)"),sLe.forEach(t),Rxo=i(N),Kb=n(N,"LI",{});var lLe=s(Kb);Lce=n(lLe,"STRONG",{});var Stt=s(Lce);Bxo=r(Stt,"tapex"),Stt.forEach(t),Pxo=r(lLe," \u2014 "),BD=n(lLe,"A",{href:!0});var Rtt=s(BD);Ixo=r(Rtt,"BartForSequenceClassification"),Rtt.forEach(t),qxo=r(lLe," (TAPEX model)"),lLe.forEach(t),Nxo=i(N),Zb=n(N,"LI",{});var iLe=s(Zb);xce=n(iLe,"STRONG",{});var Btt=s(xce);jxo=r(Btt,"transfo-xl"),Btt.forEach(t),Dxo=r(iLe," \u2014 "),PD=n(iLe,"A",{href:!0});var Ptt=s(PD);Gxo=r(Ptt,"TransfoXLForSequenceClassification"),Ptt.forEach(t),Oxo=r(iLe," (Transformer-XL model)"),iLe.forEach(t),Vxo=i(N),e4=n(N,"LI",{});var dLe=s(e4);$ce=n(dLe,"STRONG",{});var Itt=s($ce);Xxo=r(Itt,"xlm"),Itt.forEach(t),zxo=r(dLe," \u2014 "),ID=n(dLe,"A",{href:!0});var qtt=s(ID);Qxo=r(qtt,"XLMForSequenceClassification"),qtt.forEach(t),Wxo=r(dLe," (XLM model)"),dLe.forEach(t),Hxo=i(N),o4=n(N,"LI",{});var cLe=s(o4);kce=n(cLe,"STRONG",{});var Ntt=s(kce);Uxo=r(Ntt,"xlm-roberta"),Ntt.forEach(t),Jxo=r(cLe," \u2014 "),qD=n(cLe,"A",{href:!0});var jtt=s(qD);Yxo=r(jtt,"XLMRobertaForSequenceClassification"),jtt.forEach(t),Kxo=r(cLe," (XLM-RoBERTa model)"),cLe.forEach(t),Zxo=i(N),r4=n(N,"LI",{});var fLe=s(r4);Sce=n(fLe,"STRONG",{});var Dtt=s(Sce);e9o=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),o9o=r(fLe," \u2014 "),ND=n(fLe,"A",{href:!0});var Gtt=s(ND);r9o=r(Gtt,"XLMRobertaXLForSequenceClassification"),Gtt.forEach(t),t9o=r(fLe," (XLM-RoBERTa-XL model)"),fLe.forEach(t),a9o=i(N),t4=n(N,"LI",{});var mLe=s(t4);Rce=n(mLe,"STRONG",{});var Ott=s(Rce);n9o=r(Ott,"xlnet"),Ott.forEach(t),s9o=r(mLe," \u2014 "),jD=n(mLe,"A",{href:!0});var Vtt=s(jD);l9o=r(Vtt,"XLNetForSequenceClassification"),Vtt.forEach(t),i9o=r(mLe," (XLNet model)"),mLe.forEach(t),d9o=i(N),a4=n(N,"LI",{});var gLe=s(a4);Bce=n(gLe,"STRONG",{});var Xtt=s(Bce);c9o=r(Xtt,"yoso"),Xtt.forEach(t),f9o=r(gLe," \u2014 "),DD=n(gLe,"A",{href:!0});var ztt=s(DD);m9o=r(ztt,"YosoForSequenceClassification"),ztt.forEach(t),g9o=r(gLe," (YOSO model)"),gLe.forEach(t),N.forEach(t),h9o=i(aa),n4=n(aa,"P",{});var hLe=s(n4);p9o=r(hLe,"The model is set in evaluation mode by default using "),Pce=n(hLe,"CODE",{});var Qtt=s(Pce);u9o=r(Qtt,"model.eval()"),Qtt.forEach(t),_9o=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(hLe,"CODE",{});var Wtt=s(Ice);b9o=r(Wtt,"model.train()"),Wtt.forEach(t),hLe.forEach(t),v9o=i(aa),T(s4.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),SPe=i(f),ji=n(f,"H2",{class:!0});var Iqe=s(ji);l4=n(Iqe,"A",{id:!0,class:!0,href:!0});var Htt=s(l4);qce=n(Htt,"SPAN",{});var Utt=s(qce);T(X6.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),F9o=i(Iqe),Nce=n(Iqe,"SPAN",{});var Jtt=s(Nce);T9o=r(Jtt,"AutoModelForMultipleChoice"),Jtt.forEach(t),Iqe.forEach(t),RPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(z6.$$.fragment,zs),M9o=i(zs),Di=n(zs,"P",{});var tK=s(Di);E9o=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=n(tK,"A",{href:!0});var Ytt=s(GD);C9o=r(Ytt,"from_pretrained()"),Ytt.forEach(t),w9o=r(tK," class method or the "),OD=n(tK,"A",{href:!0});var Ktt=s(OD);A9o=r(Ktt,"from_config()"),Ktt.forEach(t),y9o=r(tK,` class
method.`),tK.forEach(t),L9o=i(zs),Q6=n(zs,"P",{});var qqe=s(Q6);x9o=r(qqe,"This class cannot be instantiated directly using "),jce=n(qqe,"CODE",{});var Ztt=s(jce);$9o=r(Ztt,"__init__()"),Ztt.forEach(t),k9o=r(qqe," (throws an error)."),qqe.forEach(t),S9o=i(zs),lt=n(zs,"DIV",{class:!0});var tw=s(lt);T(W6.$$.fragment,tw),R9o=i(tw),Dce=n(tw,"P",{});var eat=s(Dce);B9o=r(eat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eat.forEach(t),P9o=i(tw),Gi=n(tw,"P",{});var aK=s(Gi);I9o=r(aK,`Note:
Loading a model from its configuration file does `),Gce=n(aK,"STRONG",{});var oat=s(Gce);q9o=r(oat,"not"),oat.forEach(t),N9o=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(aK,"A",{href:!0});var rat=s(VD);j9o=r(rat,"from_pretrained()"),rat.forEach(t),D9o=r(aK," to load the model weights."),aK.forEach(t),G9o=i(tw),T(i4.$$.fragment,tw),tw.forEach(t),O9o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(H6.$$.fragment,na),V9o=i(na),Oce=n(na,"P",{});var tat=s(Oce);X9o=r(tat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tat.forEach(t),z9o=i(na),Sa=n(na,"P",{});var aw=s(Sa);Q9o=r(aw,"The model class to instantiate is selected based on the "),Vce=n(aw,"CODE",{});var aat=s(Vce);W9o=r(aat,"model_type"),aat.forEach(t),H9o=r(aw,` property of the config object (either
passed as an argument or loaded from `),Xce=n(aw,"CODE",{});var nat=s(Xce);U9o=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),J9o=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(aw,"CODE",{});var sat=s(zce);Y9o=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),K9o=r(aw,":"),aw.forEach(t),Z9o=i(na),Y=n(na,"UL",{});var K=s(Y);d4=n(K,"LI",{});var pLe=s(d4);Qce=n(pLe,"STRONG",{});var lat=s(Qce);e$o=r(lat,"albert"),lat.forEach(t),o$o=r(pLe," \u2014 "),XD=n(pLe,"A",{href:!0});var iat=s(XD);r$o=r(iat,"AlbertForMultipleChoice"),iat.forEach(t),t$o=r(pLe," (ALBERT model)"),pLe.forEach(t),a$o=i(K),c4=n(K,"LI",{});var uLe=s(c4);Wce=n(uLe,"STRONG",{});var dat=s(Wce);n$o=r(dat,"bert"),dat.forEach(t),s$o=r(uLe," \u2014 "),zD=n(uLe,"A",{href:!0});var cat=s(zD);l$o=r(cat,"BertForMultipleChoice"),cat.forEach(t),i$o=r(uLe," (BERT model)"),uLe.forEach(t),d$o=i(K),f4=n(K,"LI",{});var _Le=s(f4);Hce=n(_Le,"STRONG",{});var fat=s(Hce);c$o=r(fat,"big_bird"),fat.forEach(t),f$o=r(_Le," \u2014 "),QD=n(_Le,"A",{href:!0});var mat=s(QD);m$o=r(mat,"BigBirdForMultipleChoice"),mat.forEach(t),g$o=r(_Le," (BigBird model)"),_Le.forEach(t),h$o=i(K),m4=n(K,"LI",{});var bLe=s(m4);Uce=n(bLe,"STRONG",{});var gat=s(Uce);p$o=r(gat,"camembert"),gat.forEach(t),u$o=r(bLe," \u2014 "),WD=n(bLe,"A",{href:!0});var hat=s(WD);_$o=r(hat,"CamembertForMultipleChoice"),hat.forEach(t),b$o=r(bLe," (CamemBERT model)"),bLe.forEach(t),v$o=i(K),g4=n(K,"LI",{});var vLe=s(g4);Jce=n(vLe,"STRONG",{});var pat=s(Jce);F$o=r(pat,"canine"),pat.forEach(t),T$o=r(vLe," \u2014 "),HD=n(vLe,"A",{href:!0});var uat=s(HD);M$o=r(uat,"CanineForMultipleChoice"),uat.forEach(t),E$o=r(vLe," (Canine model)"),vLe.forEach(t),C$o=i(K),h4=n(K,"LI",{});var FLe=s(h4);Yce=n(FLe,"STRONG",{});var _at=s(Yce);w$o=r(_at,"convbert"),_at.forEach(t),A$o=r(FLe," \u2014 "),UD=n(FLe,"A",{href:!0});var bat=s(UD);y$o=r(bat,"ConvBertForMultipleChoice"),bat.forEach(t),L$o=r(FLe," (ConvBERT model)"),FLe.forEach(t),x$o=i(K),p4=n(K,"LI",{});var TLe=s(p4);Kce=n(TLe,"STRONG",{});var vat=s(Kce);$$o=r(vat,"data2vec-text"),vat.forEach(t),k$o=r(TLe," \u2014 "),JD=n(TLe,"A",{href:!0});var Fat=s(JD);S$o=r(Fat,"Data2VecTextForMultipleChoice"),Fat.forEach(t),R$o=r(TLe," (Data2VecText model)"),TLe.forEach(t),B$o=i(K),u4=n(K,"LI",{});var MLe=s(u4);Zce=n(MLe,"STRONG",{});var Tat=s(Zce);P$o=r(Tat,"deberta-v2"),Tat.forEach(t),I$o=r(MLe," \u2014 "),YD=n(MLe,"A",{href:!0});var Mat=s(YD);q$o=r(Mat,"DebertaV2ForMultipleChoice"),Mat.forEach(t),N$o=r(MLe," (DeBERTa-v2 model)"),MLe.forEach(t),j$o=i(K),_4=n(K,"LI",{});var ELe=s(_4);efe=n(ELe,"STRONG",{});var Eat=s(efe);D$o=r(Eat,"distilbert"),Eat.forEach(t),G$o=r(ELe," \u2014 "),KD=n(ELe,"A",{href:!0});var Cat=s(KD);O$o=r(Cat,"DistilBertForMultipleChoice"),Cat.forEach(t),V$o=r(ELe," (DistilBERT model)"),ELe.forEach(t),X$o=i(K),b4=n(K,"LI",{});var CLe=s(b4);ofe=n(CLe,"STRONG",{});var wat=s(ofe);z$o=r(wat,"electra"),wat.forEach(t),Q$o=r(CLe," \u2014 "),ZD=n(CLe,"A",{href:!0});var Aat=s(ZD);W$o=r(Aat,"ElectraForMultipleChoice"),Aat.forEach(t),H$o=r(CLe," (ELECTRA model)"),CLe.forEach(t),U$o=i(K),v4=n(K,"LI",{});var wLe=s(v4);rfe=n(wLe,"STRONG",{});var yat=s(rfe);J$o=r(yat,"flaubert"),yat.forEach(t),Y$o=r(wLe," \u2014 "),eG=n(wLe,"A",{href:!0});var Lat=s(eG);K$o=r(Lat,"FlaubertForMultipleChoice"),Lat.forEach(t),Z$o=r(wLe," (FlauBERT model)"),wLe.forEach(t),eko=i(K),F4=n(K,"LI",{});var ALe=s(F4);tfe=n(ALe,"STRONG",{});var xat=s(tfe);oko=r(xat,"fnet"),xat.forEach(t),rko=r(ALe," \u2014 "),oG=n(ALe,"A",{href:!0});var $at=s(oG);tko=r($at,"FNetForMultipleChoice"),$at.forEach(t),ako=r(ALe," (FNet model)"),ALe.forEach(t),nko=i(K),T4=n(K,"LI",{});var yLe=s(T4);afe=n(yLe,"STRONG",{});var kat=s(afe);sko=r(kat,"funnel"),kat.forEach(t),lko=r(yLe," \u2014 "),rG=n(yLe,"A",{href:!0});var Sat=s(rG);iko=r(Sat,"FunnelForMultipleChoice"),Sat.forEach(t),dko=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),cko=i(K),M4=n(K,"LI",{});var LLe=s(M4);nfe=n(LLe,"STRONG",{});var Rat=s(nfe);fko=r(Rat,"ibert"),Rat.forEach(t),mko=r(LLe," \u2014 "),tG=n(LLe,"A",{href:!0});var Bat=s(tG);gko=r(Bat,"IBertForMultipleChoice"),Bat.forEach(t),hko=r(LLe," (I-BERT model)"),LLe.forEach(t),pko=i(K),E4=n(K,"LI",{});var xLe=s(E4);sfe=n(xLe,"STRONG",{});var Pat=s(sfe);uko=r(Pat,"longformer"),Pat.forEach(t),_ko=r(xLe," \u2014 "),aG=n(xLe,"A",{href:!0});var Iat=s(aG);bko=r(Iat,"LongformerForMultipleChoice"),Iat.forEach(t),vko=r(xLe," (Longformer model)"),xLe.forEach(t),Fko=i(K),C4=n(K,"LI",{});var $Le=s(C4);lfe=n($Le,"STRONG",{});var qat=s(lfe);Tko=r(qat,"megatron-bert"),qat.forEach(t),Mko=r($Le," \u2014 "),nG=n($Le,"A",{href:!0});var Nat=s(nG);Eko=r(Nat,"MegatronBertForMultipleChoice"),Nat.forEach(t),Cko=r($Le," (MegatronBert model)"),$Le.forEach(t),wko=i(K),w4=n(K,"LI",{});var kLe=s(w4);ife=n(kLe,"STRONG",{});var jat=s(ife);Ako=r(jat,"mobilebert"),jat.forEach(t),yko=r(kLe," \u2014 "),sG=n(kLe,"A",{href:!0});var Dat=s(sG);Lko=r(Dat,"MobileBertForMultipleChoice"),Dat.forEach(t),xko=r(kLe," (MobileBERT model)"),kLe.forEach(t),$ko=i(K),A4=n(K,"LI",{});var SLe=s(A4);dfe=n(SLe,"STRONG",{});var Gat=s(dfe);kko=r(Gat,"mpnet"),Gat.forEach(t),Sko=r(SLe," \u2014 "),lG=n(SLe,"A",{href:!0});var Oat=s(lG);Rko=r(Oat,"MPNetForMultipleChoice"),Oat.forEach(t),Bko=r(SLe," (MPNet model)"),SLe.forEach(t),Pko=i(K),y4=n(K,"LI",{});var RLe=s(y4);cfe=n(RLe,"STRONG",{});var Vat=s(cfe);Iko=r(Vat,"nystromformer"),Vat.forEach(t),qko=r(RLe," \u2014 "),iG=n(RLe,"A",{href:!0});var Xat=s(iG);Nko=r(Xat,"NystromformerForMultipleChoice"),Xat.forEach(t),jko=r(RLe," (Nystromformer model)"),RLe.forEach(t),Dko=i(K),L4=n(K,"LI",{});var BLe=s(L4);ffe=n(BLe,"STRONG",{});var zat=s(ffe);Gko=r(zat,"qdqbert"),zat.forEach(t),Oko=r(BLe," \u2014 "),dG=n(BLe,"A",{href:!0});var Qat=s(dG);Vko=r(Qat,"QDQBertForMultipleChoice"),Qat.forEach(t),Xko=r(BLe," (QDQBert model)"),BLe.forEach(t),zko=i(K),x4=n(K,"LI",{});var PLe=s(x4);mfe=n(PLe,"STRONG",{});var Wat=s(mfe);Qko=r(Wat,"rembert"),Wat.forEach(t),Wko=r(PLe," \u2014 "),cG=n(PLe,"A",{href:!0});var Hat=s(cG);Hko=r(Hat,"RemBertForMultipleChoice"),Hat.forEach(t),Uko=r(PLe," (RemBERT model)"),PLe.forEach(t),Jko=i(K),$4=n(K,"LI",{});var ILe=s($4);gfe=n(ILe,"STRONG",{});var Uat=s(gfe);Yko=r(Uat,"roberta"),Uat.forEach(t),Kko=r(ILe," \u2014 "),fG=n(ILe,"A",{href:!0});var Jat=s(fG);Zko=r(Jat,"RobertaForMultipleChoice"),Jat.forEach(t),eSo=r(ILe," (RoBERTa model)"),ILe.forEach(t),oSo=i(K),k4=n(K,"LI",{});var qLe=s(k4);hfe=n(qLe,"STRONG",{});var Yat=s(hfe);rSo=r(Yat,"roformer"),Yat.forEach(t),tSo=r(qLe," \u2014 "),mG=n(qLe,"A",{href:!0});var Kat=s(mG);aSo=r(Kat,"RoFormerForMultipleChoice"),Kat.forEach(t),nSo=r(qLe," (RoFormer model)"),qLe.forEach(t),sSo=i(K),S4=n(K,"LI",{});var NLe=s(S4);pfe=n(NLe,"STRONG",{});var Zat=s(pfe);lSo=r(Zat,"squeezebert"),Zat.forEach(t),iSo=r(NLe," \u2014 "),gG=n(NLe,"A",{href:!0});var ent=s(gG);dSo=r(ent,"SqueezeBertForMultipleChoice"),ent.forEach(t),cSo=r(NLe," (SqueezeBERT model)"),NLe.forEach(t),fSo=i(K),R4=n(K,"LI",{});var jLe=s(R4);ufe=n(jLe,"STRONG",{});var ont=s(ufe);mSo=r(ont,"xlm"),ont.forEach(t),gSo=r(jLe," \u2014 "),hG=n(jLe,"A",{href:!0});var rnt=s(hG);hSo=r(rnt,"XLMForMultipleChoice"),rnt.forEach(t),pSo=r(jLe," (XLM model)"),jLe.forEach(t),uSo=i(K),B4=n(K,"LI",{});var DLe=s(B4);_fe=n(DLe,"STRONG",{});var tnt=s(_fe);_So=r(tnt,"xlm-roberta"),tnt.forEach(t),bSo=r(DLe," \u2014 "),pG=n(DLe,"A",{href:!0});var ant=s(pG);vSo=r(ant,"XLMRobertaForMultipleChoice"),ant.forEach(t),FSo=r(DLe," (XLM-RoBERTa model)"),DLe.forEach(t),TSo=i(K),P4=n(K,"LI",{});var GLe=s(P4);bfe=n(GLe,"STRONG",{});var nnt=s(bfe);MSo=r(nnt,"xlm-roberta-xl"),nnt.forEach(t),ESo=r(GLe," \u2014 "),uG=n(GLe,"A",{href:!0});var snt=s(uG);CSo=r(snt,"XLMRobertaXLForMultipleChoice"),snt.forEach(t),wSo=r(GLe," (XLM-RoBERTa-XL model)"),GLe.forEach(t),ASo=i(K),I4=n(K,"LI",{});var OLe=s(I4);vfe=n(OLe,"STRONG",{});var lnt=s(vfe);ySo=r(lnt,"xlnet"),lnt.forEach(t),LSo=r(OLe," \u2014 "),_G=n(OLe,"A",{href:!0});var int=s(_G);xSo=r(int,"XLNetForMultipleChoice"),int.forEach(t),$So=r(OLe," (XLNet model)"),OLe.forEach(t),kSo=i(K),q4=n(K,"LI",{});var VLe=s(q4);Ffe=n(VLe,"STRONG",{});var dnt=s(Ffe);SSo=r(dnt,"yoso"),dnt.forEach(t),RSo=r(VLe," \u2014 "),bG=n(VLe,"A",{href:!0});var cnt=s(bG);BSo=r(cnt,"YosoForMultipleChoice"),cnt.forEach(t),PSo=r(VLe," (YOSO model)"),VLe.forEach(t),K.forEach(t),ISo=i(na),N4=n(na,"P",{});var XLe=s(N4);qSo=r(XLe,"The model is set in evaluation mode by default using "),Tfe=n(XLe,"CODE",{});var fnt=s(Tfe);NSo=r(fnt,"model.eval()"),fnt.forEach(t),jSo=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(XLe,"CODE",{});var mnt=s(Mfe);DSo=r(mnt,"model.train()"),mnt.forEach(t),XLe.forEach(t),GSo=i(na),T(j4.$$.fragment,na),na.forEach(t),zs.forEach(t),BPe=i(f),Oi=n(f,"H2",{class:!0});var Nqe=s(Oi);D4=n(Nqe,"A",{id:!0,class:!0,href:!0});var gnt=s(D4);Efe=n(gnt,"SPAN",{});var hnt=s(Efe);T(U6.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),OSo=i(Nqe),Cfe=n(Nqe,"SPAN",{});var pnt=s(Cfe);VSo=r(pnt,"AutoModelForNextSentencePrediction"),pnt.forEach(t),Nqe.forEach(t),PPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(J6.$$.fragment,Qs),XSo=i(Qs),Vi=n(Qs,"P",{});var nK=s(Vi);zSo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vG=n(nK,"A",{href:!0});var unt=s(vG);QSo=r(unt,"from_pretrained()"),unt.forEach(t),WSo=r(nK," class method or the "),FG=n(nK,"A",{href:!0});var _nt=s(FG);HSo=r(_nt,"from_config()"),_nt.forEach(t),USo=r(nK,` class
method.`),nK.forEach(t),JSo=i(Qs),Y6=n(Qs,"P",{});var jqe=s(Y6);YSo=r(jqe,"This class cannot be instantiated directly using "),wfe=n(jqe,"CODE",{});var bnt=s(wfe);KSo=r(bnt,"__init__()"),bnt.forEach(t),ZSo=r(jqe," (throws an error)."),jqe.forEach(t),eRo=i(Qs),it=n(Qs,"DIV",{class:!0});var nw=s(it);T(K6.$$.fragment,nw),oRo=i(nw),Afe=n(nw,"P",{});var vnt=s(Afe);rRo=r(vnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vnt.forEach(t),tRo=i(nw),Xi=n(nw,"P",{});var sK=s(Xi);aRo=r(sK,`Note:
Loading a model from its configuration file does `),yfe=n(sK,"STRONG",{});var Fnt=s(yfe);nRo=r(Fnt,"not"),Fnt.forEach(t),sRo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(sK,"A",{href:!0});var Tnt=s(TG);lRo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),iRo=r(sK," to load the model weights."),sK.forEach(t),dRo=i(nw),T(G4.$$.fragment,nw),nw.forEach(t),cRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Z6.$$.fragment,sa),fRo=i(sa),Lfe=n(sa,"P",{});var Mnt=s(Lfe);mRo=r(Mnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mnt.forEach(t),gRo=i(sa),Ra=n(sa,"P",{});var sw=s(Ra);hRo=r(sw,"The model class to instantiate is selected based on the "),xfe=n(sw,"CODE",{});var Ent=s(xfe);pRo=r(Ent,"model_type"),Ent.forEach(t),uRo=r(sw,` property of the config object (either
passed as an argument or loaded from `),$fe=n(sw,"CODE",{});var Cnt=s($fe);_Ro=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),bRo=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(sw,"CODE",{});var wnt=s(kfe);vRo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),FRo=r(sw,":"),sw.forEach(t),TRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);O4=n(Ws,"LI",{});var zLe=s(O4);Sfe=n(zLe,"STRONG",{});var Ant=s(Sfe);MRo=r(Ant,"bert"),Ant.forEach(t),ERo=r(zLe," \u2014 "),MG=n(zLe,"A",{href:!0});var ynt=s(MG);CRo=r(ynt,"BertForNextSentencePrediction"),ynt.forEach(t),wRo=r(zLe," (BERT model)"),zLe.forEach(t),ARo=i(Ws),V4=n(Ws,"LI",{});var QLe=s(V4);Rfe=n(QLe,"STRONG",{});var Lnt=s(Rfe);yRo=r(Lnt,"fnet"),Lnt.forEach(t),LRo=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var xnt=s(EG);xRo=r(xnt,"FNetForNextSentencePrediction"),xnt.forEach(t),$Ro=r(QLe," (FNet model)"),QLe.forEach(t),kRo=i(Ws),X4=n(Ws,"LI",{});var WLe=s(X4);Bfe=n(WLe,"STRONG",{});var $nt=s(Bfe);SRo=r($nt,"megatron-bert"),$nt.forEach(t),RRo=r(WLe," \u2014 "),CG=n(WLe,"A",{href:!0});var knt=s(CG);BRo=r(knt,"MegatronBertForNextSentencePrediction"),knt.forEach(t),PRo=r(WLe," (MegatronBert model)"),WLe.forEach(t),IRo=i(Ws),z4=n(Ws,"LI",{});var HLe=s(z4);Pfe=n(HLe,"STRONG",{});var Snt=s(Pfe);qRo=r(Snt,"mobilebert"),Snt.forEach(t),NRo=r(HLe," \u2014 "),wG=n(HLe,"A",{href:!0});var Rnt=s(wG);jRo=r(Rnt,"MobileBertForNextSentencePrediction"),Rnt.forEach(t),DRo=r(HLe," (MobileBERT model)"),HLe.forEach(t),GRo=i(Ws),Q4=n(Ws,"LI",{});var ULe=s(Q4);Ife=n(ULe,"STRONG",{});var Bnt=s(Ife);ORo=r(Bnt,"qdqbert"),Bnt.forEach(t),VRo=r(ULe," \u2014 "),AG=n(ULe,"A",{href:!0});var Pnt=s(AG);XRo=r(Pnt,"QDQBertForNextSentencePrediction"),Pnt.forEach(t),zRo=r(ULe," (QDQBert model)"),ULe.forEach(t),Ws.forEach(t),QRo=i(sa),W4=n(sa,"P",{});var JLe=s(W4);WRo=r(JLe,"The model is set in evaluation mode by default using "),qfe=n(JLe,"CODE",{});var Int=s(qfe);HRo=r(Int,"model.eval()"),Int.forEach(t),URo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(JLe,"CODE",{});var qnt=s(Nfe);JRo=r(qnt,"model.train()"),qnt.forEach(t),JLe.forEach(t),YRo=i(sa),T(H4.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),IPe=i(f),zi=n(f,"H2",{class:!0});var Dqe=s(zi);U4=n(Dqe,"A",{id:!0,class:!0,href:!0});var Nnt=s(U4);jfe=n(Nnt,"SPAN",{});var jnt=s(jfe);T(ey.$$.fragment,jnt),jnt.forEach(t),Nnt.forEach(t),KRo=i(Dqe),Dfe=n(Dqe,"SPAN",{});var Dnt=s(Dfe);ZRo=r(Dnt,"AutoModelForTokenClassification"),Dnt.forEach(t),Dqe.forEach(t),qPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(oy.$$.fragment,Hs),eBo=i(Hs),Qi=n(Hs,"P",{});var lK=s(Qi);oBo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=n(lK,"A",{href:!0});var Gnt=s(yG);rBo=r(Gnt,"from_pretrained()"),Gnt.forEach(t),tBo=r(lK," class method or the "),LG=n(lK,"A",{href:!0});var Ont=s(LG);aBo=r(Ont,"from_config()"),Ont.forEach(t),nBo=r(lK,` class
method.`),lK.forEach(t),sBo=i(Hs),ry=n(Hs,"P",{});var Gqe=s(ry);lBo=r(Gqe,"This class cannot be instantiated directly using "),Gfe=n(Gqe,"CODE",{});var Vnt=s(Gfe);iBo=r(Vnt,"__init__()"),Vnt.forEach(t),dBo=r(Gqe," (throws an error)."),Gqe.forEach(t),cBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var lw=s(dt);T(ty.$$.fragment,lw),fBo=i(lw),Ofe=n(lw,"P",{});var Xnt=s(Ofe);mBo=r(Xnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xnt.forEach(t),gBo=i(lw),Wi=n(lw,"P",{});var iK=s(Wi);hBo=r(iK,`Note:
Loading a model from its configuration file does `),Vfe=n(iK,"STRONG",{});var znt=s(Vfe);pBo=r(znt,"not"),znt.forEach(t),uBo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(iK,"A",{href:!0});var Qnt=s(xG);_Bo=r(Qnt,"from_pretrained()"),Qnt.forEach(t),bBo=r(iK," to load the model weights."),iK.forEach(t),vBo=i(lw),T(J4.$$.fragment,lw),lw.forEach(t),FBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(ay.$$.fragment,la),TBo=i(la),Xfe=n(la,"P",{});var Wnt=s(Xfe);MBo=r(Wnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wnt.forEach(t),EBo=i(la),Ba=n(la,"P",{});var iw=s(Ba);CBo=r(iw,"The model class to instantiate is selected based on the "),zfe=n(iw,"CODE",{});var Hnt=s(zfe);wBo=r(Hnt,"model_type"),Hnt.forEach(t),ABo=r(iw,` property of the config object (either
passed as an argument or loaded from `),Qfe=n(iw,"CODE",{});var Unt=s(Qfe);yBo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),LBo=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=n(iw,"CODE",{});var Jnt=s(Wfe);xBo=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),$Bo=r(iw,":"),iw.forEach(t),kBo=i(la),U=n(la,"UL",{});var J=s(U);Y4=n(J,"LI",{});var YLe=s(Y4);Hfe=n(YLe,"STRONG",{});var Ynt=s(Hfe);SBo=r(Ynt,"albert"),Ynt.forEach(t),RBo=r(YLe," \u2014 "),$G=n(YLe,"A",{href:!0});var Knt=s($G);BBo=r(Knt,"AlbertForTokenClassification"),Knt.forEach(t),PBo=r(YLe," (ALBERT model)"),YLe.forEach(t),IBo=i(J),K4=n(J,"LI",{});var KLe=s(K4);Ufe=n(KLe,"STRONG",{});var Znt=s(Ufe);qBo=r(Znt,"bert"),Znt.forEach(t),NBo=r(KLe," \u2014 "),kG=n(KLe,"A",{href:!0});var est=s(kG);jBo=r(est,"BertForTokenClassification"),est.forEach(t),DBo=r(KLe," (BERT model)"),KLe.forEach(t),GBo=i(J),Z4=n(J,"LI",{});var ZLe=s(Z4);Jfe=n(ZLe,"STRONG",{});var ost=s(Jfe);OBo=r(ost,"big_bird"),ost.forEach(t),VBo=r(ZLe," \u2014 "),SG=n(ZLe,"A",{href:!0});var rst=s(SG);XBo=r(rst,"BigBirdForTokenClassification"),rst.forEach(t),zBo=r(ZLe," (BigBird model)"),ZLe.forEach(t),QBo=i(J),e2=n(J,"LI",{});var e8e=s(e2);Yfe=n(e8e,"STRONG",{});var tst=s(Yfe);WBo=r(tst,"camembert"),tst.forEach(t),HBo=r(e8e," \u2014 "),RG=n(e8e,"A",{href:!0});var ast=s(RG);UBo=r(ast,"CamembertForTokenClassification"),ast.forEach(t),JBo=r(e8e," (CamemBERT model)"),e8e.forEach(t),YBo=i(J),o2=n(J,"LI",{});var o8e=s(o2);Kfe=n(o8e,"STRONG",{});var nst=s(Kfe);KBo=r(nst,"canine"),nst.forEach(t),ZBo=r(o8e," \u2014 "),BG=n(o8e,"A",{href:!0});var sst=s(BG);ePo=r(sst,"CanineForTokenClassification"),sst.forEach(t),oPo=r(o8e," (Canine model)"),o8e.forEach(t),rPo=i(J),r2=n(J,"LI",{});var r8e=s(r2);Zfe=n(r8e,"STRONG",{});var lst=s(Zfe);tPo=r(lst,"convbert"),lst.forEach(t),aPo=r(r8e," \u2014 "),PG=n(r8e,"A",{href:!0});var ist=s(PG);nPo=r(ist,"ConvBertForTokenClassification"),ist.forEach(t),sPo=r(r8e," (ConvBERT model)"),r8e.forEach(t),lPo=i(J),t2=n(J,"LI",{});var t8e=s(t2);eme=n(t8e,"STRONG",{});var dst=s(eme);iPo=r(dst,"data2vec-text"),dst.forEach(t),dPo=r(t8e," \u2014 "),IG=n(t8e,"A",{href:!0});var cst=s(IG);cPo=r(cst,"Data2VecTextForTokenClassification"),cst.forEach(t),fPo=r(t8e," (Data2VecText model)"),t8e.forEach(t),mPo=i(J),a2=n(J,"LI",{});var a8e=s(a2);ome=n(a8e,"STRONG",{});var fst=s(ome);gPo=r(fst,"deberta"),fst.forEach(t),hPo=r(a8e," \u2014 "),qG=n(a8e,"A",{href:!0});var mst=s(qG);pPo=r(mst,"DebertaForTokenClassification"),mst.forEach(t),uPo=r(a8e," (DeBERTa model)"),a8e.forEach(t),_Po=i(J),n2=n(J,"LI",{});var n8e=s(n2);rme=n(n8e,"STRONG",{});var gst=s(rme);bPo=r(gst,"deberta-v2"),gst.forEach(t),vPo=r(n8e," \u2014 "),NG=n(n8e,"A",{href:!0});var hst=s(NG);FPo=r(hst,"DebertaV2ForTokenClassification"),hst.forEach(t),TPo=r(n8e," (DeBERTa-v2 model)"),n8e.forEach(t),MPo=i(J),s2=n(J,"LI",{});var s8e=s(s2);tme=n(s8e,"STRONG",{});var pst=s(tme);EPo=r(pst,"distilbert"),pst.forEach(t),CPo=r(s8e," \u2014 "),jG=n(s8e,"A",{href:!0});var ust=s(jG);wPo=r(ust,"DistilBertForTokenClassification"),ust.forEach(t),APo=r(s8e," (DistilBERT model)"),s8e.forEach(t),yPo=i(J),l2=n(J,"LI",{});var l8e=s(l2);ame=n(l8e,"STRONG",{});var _st=s(ame);LPo=r(_st,"electra"),_st.forEach(t),xPo=r(l8e," \u2014 "),DG=n(l8e,"A",{href:!0});var bst=s(DG);$Po=r(bst,"ElectraForTokenClassification"),bst.forEach(t),kPo=r(l8e," (ELECTRA model)"),l8e.forEach(t),SPo=i(J),i2=n(J,"LI",{});var i8e=s(i2);nme=n(i8e,"STRONG",{});var vst=s(nme);RPo=r(vst,"flaubert"),vst.forEach(t),BPo=r(i8e," \u2014 "),GG=n(i8e,"A",{href:!0});var Fst=s(GG);PPo=r(Fst,"FlaubertForTokenClassification"),Fst.forEach(t),IPo=r(i8e," (FlauBERT model)"),i8e.forEach(t),qPo=i(J),d2=n(J,"LI",{});var d8e=s(d2);sme=n(d8e,"STRONG",{});var Tst=s(sme);NPo=r(Tst,"fnet"),Tst.forEach(t),jPo=r(d8e," \u2014 "),OG=n(d8e,"A",{href:!0});var Mst=s(OG);DPo=r(Mst,"FNetForTokenClassification"),Mst.forEach(t),GPo=r(d8e," (FNet model)"),d8e.forEach(t),OPo=i(J),c2=n(J,"LI",{});var c8e=s(c2);lme=n(c8e,"STRONG",{});var Est=s(lme);VPo=r(Est,"funnel"),Est.forEach(t),XPo=r(c8e," \u2014 "),VG=n(c8e,"A",{href:!0});var Cst=s(VG);zPo=r(Cst,"FunnelForTokenClassification"),Cst.forEach(t),QPo=r(c8e," (Funnel Transformer model)"),c8e.forEach(t),WPo=i(J),f2=n(J,"LI",{});var f8e=s(f2);ime=n(f8e,"STRONG",{});var wst=s(ime);HPo=r(wst,"gpt2"),wst.forEach(t),UPo=r(f8e," \u2014 "),XG=n(f8e,"A",{href:!0});var Ast=s(XG);JPo=r(Ast,"GPT2ForTokenClassification"),Ast.forEach(t),YPo=r(f8e," (OpenAI GPT-2 model)"),f8e.forEach(t),KPo=i(J),m2=n(J,"LI",{});var m8e=s(m2);dme=n(m8e,"STRONG",{});var yst=s(dme);ZPo=r(yst,"ibert"),yst.forEach(t),eIo=r(m8e," \u2014 "),zG=n(m8e,"A",{href:!0});var Lst=s(zG);oIo=r(Lst,"IBertForTokenClassification"),Lst.forEach(t),rIo=r(m8e," (I-BERT model)"),m8e.forEach(t),tIo=i(J),g2=n(J,"LI",{});var g8e=s(g2);cme=n(g8e,"STRONG",{});var xst=s(cme);aIo=r(xst,"layoutlm"),xst.forEach(t),nIo=r(g8e," \u2014 "),QG=n(g8e,"A",{href:!0});var $st=s(QG);sIo=r($st,"LayoutLMForTokenClassification"),$st.forEach(t),lIo=r(g8e," (LayoutLM model)"),g8e.forEach(t),iIo=i(J),h2=n(J,"LI",{});var h8e=s(h2);fme=n(h8e,"STRONG",{});var kst=s(fme);dIo=r(kst,"layoutlmv2"),kst.forEach(t),cIo=r(h8e," \u2014 "),WG=n(h8e,"A",{href:!0});var Sst=s(WG);fIo=r(Sst,"LayoutLMv2ForTokenClassification"),Sst.forEach(t),mIo=r(h8e," (LayoutLMv2 model)"),h8e.forEach(t),gIo=i(J),p2=n(J,"LI",{});var p8e=s(p2);mme=n(p8e,"STRONG",{});var Rst=s(mme);hIo=r(Rst,"longformer"),Rst.forEach(t),pIo=r(p8e," \u2014 "),HG=n(p8e,"A",{href:!0});var Bst=s(HG);uIo=r(Bst,"LongformerForTokenClassification"),Bst.forEach(t),_Io=r(p8e," (Longformer model)"),p8e.forEach(t),bIo=i(J),u2=n(J,"LI",{});var u8e=s(u2);gme=n(u8e,"STRONG",{});var Pst=s(gme);vIo=r(Pst,"megatron-bert"),Pst.forEach(t),FIo=r(u8e," \u2014 "),UG=n(u8e,"A",{href:!0});var Ist=s(UG);TIo=r(Ist,"MegatronBertForTokenClassification"),Ist.forEach(t),MIo=r(u8e," (MegatronBert model)"),u8e.forEach(t),EIo=i(J),_2=n(J,"LI",{});var _8e=s(_2);hme=n(_8e,"STRONG",{});var qst=s(hme);CIo=r(qst,"mobilebert"),qst.forEach(t),wIo=r(_8e," \u2014 "),JG=n(_8e,"A",{href:!0});var Nst=s(JG);AIo=r(Nst,"MobileBertForTokenClassification"),Nst.forEach(t),yIo=r(_8e," (MobileBERT model)"),_8e.forEach(t),LIo=i(J),b2=n(J,"LI",{});var b8e=s(b2);pme=n(b8e,"STRONG",{});var jst=s(pme);xIo=r(jst,"mpnet"),jst.forEach(t),$Io=r(b8e," \u2014 "),YG=n(b8e,"A",{href:!0});var Dst=s(YG);kIo=r(Dst,"MPNetForTokenClassification"),Dst.forEach(t),SIo=r(b8e," (MPNet model)"),b8e.forEach(t),RIo=i(J),v2=n(J,"LI",{});var v8e=s(v2);ume=n(v8e,"STRONG",{});var Gst=s(ume);BIo=r(Gst,"nystromformer"),Gst.forEach(t),PIo=r(v8e," \u2014 "),KG=n(v8e,"A",{href:!0});var Ost=s(KG);IIo=r(Ost,"NystromformerForTokenClassification"),Ost.forEach(t),qIo=r(v8e," (Nystromformer model)"),v8e.forEach(t),NIo=i(J),F2=n(J,"LI",{});var F8e=s(F2);_me=n(F8e,"STRONG",{});var Vst=s(_me);jIo=r(Vst,"qdqbert"),Vst.forEach(t),DIo=r(F8e," \u2014 "),ZG=n(F8e,"A",{href:!0});var Xst=s(ZG);GIo=r(Xst,"QDQBertForTokenClassification"),Xst.forEach(t),OIo=r(F8e," (QDQBert model)"),F8e.forEach(t),VIo=i(J),T2=n(J,"LI",{});var T8e=s(T2);bme=n(T8e,"STRONG",{});var zst=s(bme);XIo=r(zst,"rembert"),zst.forEach(t),zIo=r(T8e," \u2014 "),eO=n(T8e,"A",{href:!0});var Qst=s(eO);QIo=r(Qst,"RemBertForTokenClassification"),Qst.forEach(t),WIo=r(T8e," (RemBERT model)"),T8e.forEach(t),HIo=i(J),M2=n(J,"LI",{});var M8e=s(M2);vme=n(M8e,"STRONG",{});var Wst=s(vme);UIo=r(Wst,"roberta"),Wst.forEach(t),JIo=r(M8e," \u2014 "),oO=n(M8e,"A",{href:!0});var Hst=s(oO);YIo=r(Hst,"RobertaForTokenClassification"),Hst.forEach(t),KIo=r(M8e," (RoBERTa model)"),M8e.forEach(t),ZIo=i(J),E2=n(J,"LI",{});var E8e=s(E2);Fme=n(E8e,"STRONG",{});var Ust=s(Fme);eqo=r(Ust,"roformer"),Ust.forEach(t),oqo=r(E8e," \u2014 "),rO=n(E8e,"A",{href:!0});var Jst=s(rO);rqo=r(Jst,"RoFormerForTokenClassification"),Jst.forEach(t),tqo=r(E8e," (RoFormer model)"),E8e.forEach(t),aqo=i(J),C2=n(J,"LI",{});var C8e=s(C2);Tme=n(C8e,"STRONG",{});var Yst=s(Tme);nqo=r(Yst,"squeezebert"),Yst.forEach(t),sqo=r(C8e," \u2014 "),tO=n(C8e,"A",{href:!0});var Kst=s(tO);lqo=r(Kst,"SqueezeBertForTokenClassification"),Kst.forEach(t),iqo=r(C8e," (SqueezeBERT model)"),C8e.forEach(t),dqo=i(J),w2=n(J,"LI",{});var w8e=s(w2);Mme=n(w8e,"STRONG",{});var Zst=s(Mme);cqo=r(Zst,"xlm"),Zst.forEach(t),fqo=r(w8e," \u2014 "),aO=n(w8e,"A",{href:!0});var elt=s(aO);mqo=r(elt,"XLMForTokenClassification"),elt.forEach(t),gqo=r(w8e," (XLM model)"),w8e.forEach(t),hqo=i(J),A2=n(J,"LI",{});var A8e=s(A2);Eme=n(A8e,"STRONG",{});var olt=s(Eme);pqo=r(olt,"xlm-roberta"),olt.forEach(t),uqo=r(A8e," \u2014 "),nO=n(A8e,"A",{href:!0});var rlt=s(nO);_qo=r(rlt,"XLMRobertaForTokenClassification"),rlt.forEach(t),bqo=r(A8e," (XLM-RoBERTa model)"),A8e.forEach(t),vqo=i(J),y2=n(J,"LI",{});var y8e=s(y2);Cme=n(y8e,"STRONG",{});var tlt=s(Cme);Fqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),Tqo=r(y8e," \u2014 "),sO=n(y8e,"A",{href:!0});var alt=s(sO);Mqo=r(alt,"XLMRobertaXLForTokenClassification"),alt.forEach(t),Eqo=r(y8e," (XLM-RoBERTa-XL model)"),y8e.forEach(t),Cqo=i(J),L2=n(J,"LI",{});var L8e=s(L2);wme=n(L8e,"STRONG",{});var nlt=s(wme);wqo=r(nlt,"xlnet"),nlt.forEach(t),Aqo=r(L8e," \u2014 "),lO=n(L8e,"A",{href:!0});var slt=s(lO);yqo=r(slt,"XLNetForTokenClassification"),slt.forEach(t),Lqo=r(L8e," (XLNet model)"),L8e.forEach(t),xqo=i(J),x2=n(J,"LI",{});var x8e=s(x2);Ame=n(x8e,"STRONG",{});var llt=s(Ame);$qo=r(llt,"yoso"),llt.forEach(t),kqo=r(x8e," \u2014 "),iO=n(x8e,"A",{href:!0});var ilt=s(iO);Sqo=r(ilt,"YosoForTokenClassification"),ilt.forEach(t),Rqo=r(x8e," (YOSO model)"),x8e.forEach(t),J.forEach(t),Bqo=i(la),$2=n(la,"P",{});var $8e=s($2);Pqo=r($8e,"The model is set in evaluation mode by default using "),yme=n($8e,"CODE",{});var dlt=s(yme);Iqo=r(dlt,"model.eval()"),dlt.forEach(t),qqo=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n($8e,"CODE",{});var clt=s(Lme);Nqo=r(clt,"model.train()"),clt.forEach(t),$8e.forEach(t),jqo=i(la),T(k2.$$.fragment,la),la.forEach(t),Hs.forEach(t),NPe=i(f),Hi=n(f,"H2",{class:!0});var Oqe=s(Hi);S2=n(Oqe,"A",{id:!0,class:!0,href:!0});var flt=s(S2);xme=n(flt,"SPAN",{});var mlt=s(xme);T(ny.$$.fragment,mlt),mlt.forEach(t),flt.forEach(t),Dqo=i(Oqe),$me=n(Oqe,"SPAN",{});var glt=s($me);Gqo=r(glt,"AutoModelForQuestionAnswering"),glt.forEach(t),Oqe.forEach(t),jPe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(sy.$$.fragment,Us),Oqo=i(Us),Ui=n(Us,"P",{});var dK=s(Ui);Vqo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=n(dK,"A",{href:!0});var hlt=s(dO);Xqo=r(hlt,"from_pretrained()"),hlt.forEach(t),zqo=r(dK," class method or the "),cO=n(dK,"A",{href:!0});var plt=s(cO);Qqo=r(plt,"from_config()"),plt.forEach(t),Wqo=r(dK,` class
method.`),dK.forEach(t),Hqo=i(Us),ly=n(Us,"P",{});var Vqe=s(ly);Uqo=r(Vqe,"This class cannot be instantiated directly using "),kme=n(Vqe,"CODE",{});var ult=s(kme);Jqo=r(ult,"__init__()"),ult.forEach(t),Yqo=r(Vqe," (throws an error)."),Vqe.forEach(t),Kqo=i(Us),ct=n(Us,"DIV",{class:!0});var dw=s(ct);T(iy.$$.fragment,dw),Zqo=i(dw),Sme=n(dw,"P",{});var _lt=s(Sme);eNo=r(_lt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_lt.forEach(t),oNo=i(dw),Ji=n(dw,"P",{});var cK=s(Ji);rNo=r(cK,`Note:
Loading a model from its configuration file does `),Rme=n(cK,"STRONG",{});var blt=s(Rme);tNo=r(blt,"not"),blt.forEach(t),aNo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(cK,"A",{href:!0});var vlt=s(fO);nNo=r(vlt,"from_pretrained()"),vlt.forEach(t),sNo=r(cK," to load the model weights."),cK.forEach(t),lNo=i(dw),T(R2.$$.fragment,dw),dw.forEach(t),iNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(dy.$$.fragment,ia),dNo=i(ia),Bme=n(ia,"P",{});var Flt=s(Bme);cNo=r(Flt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Flt.forEach(t),fNo=i(ia),Pa=n(ia,"P",{});var cw=s(Pa);mNo=r(cw,"The model class to instantiate is selected based on the "),Pme=n(cw,"CODE",{});var Tlt=s(Pme);gNo=r(Tlt,"model_type"),Tlt.forEach(t),hNo=r(cw,` property of the config object (either
passed as an argument or loaded from `),Ime=n(cw,"CODE",{});var Mlt=s(Ime);pNo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),uNo=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(cw,"CODE",{});var Elt=s(qme);_No=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),bNo=r(cw,":"),cw.forEach(t),vNo=i(ia),O=n(ia,"UL",{});var X=s(O);B2=n(X,"LI",{});var k8e=s(B2);Nme=n(k8e,"STRONG",{});var Clt=s(Nme);FNo=r(Clt,"albert"),Clt.forEach(t),TNo=r(k8e," \u2014 "),mO=n(k8e,"A",{href:!0});var wlt=s(mO);MNo=r(wlt,"AlbertForQuestionAnswering"),wlt.forEach(t),ENo=r(k8e," (ALBERT model)"),k8e.forEach(t),CNo=i(X),P2=n(X,"LI",{});var S8e=s(P2);jme=n(S8e,"STRONG",{});var Alt=s(jme);wNo=r(Alt,"bart"),Alt.forEach(t),ANo=r(S8e," \u2014 "),gO=n(S8e,"A",{href:!0});var ylt=s(gO);yNo=r(ylt,"BartForQuestionAnswering"),ylt.forEach(t),LNo=r(S8e," (BART model)"),S8e.forEach(t),xNo=i(X),I2=n(X,"LI",{});var R8e=s(I2);Dme=n(R8e,"STRONG",{});var Llt=s(Dme);$No=r(Llt,"bert"),Llt.forEach(t),kNo=r(R8e," \u2014 "),hO=n(R8e,"A",{href:!0});var xlt=s(hO);SNo=r(xlt,"BertForQuestionAnswering"),xlt.forEach(t),RNo=r(R8e," (BERT model)"),R8e.forEach(t),BNo=i(X),q2=n(X,"LI",{});var B8e=s(q2);Gme=n(B8e,"STRONG",{});var $lt=s(Gme);PNo=r($lt,"big_bird"),$lt.forEach(t),INo=r(B8e," \u2014 "),pO=n(B8e,"A",{href:!0});var klt=s(pO);qNo=r(klt,"BigBirdForQuestionAnswering"),klt.forEach(t),NNo=r(B8e," (BigBird model)"),B8e.forEach(t),jNo=i(X),N2=n(X,"LI",{});var P8e=s(N2);Ome=n(P8e,"STRONG",{});var Slt=s(Ome);DNo=r(Slt,"bigbird_pegasus"),Slt.forEach(t),GNo=r(P8e," \u2014 "),uO=n(P8e,"A",{href:!0});var Rlt=s(uO);ONo=r(Rlt,"BigBirdPegasusForQuestionAnswering"),Rlt.forEach(t),VNo=r(P8e," (BigBirdPegasus model)"),P8e.forEach(t),XNo=i(X),j2=n(X,"LI",{});var I8e=s(j2);Vme=n(I8e,"STRONG",{});var Blt=s(Vme);zNo=r(Blt,"camembert"),Blt.forEach(t),QNo=r(I8e," \u2014 "),_O=n(I8e,"A",{href:!0});var Plt=s(_O);WNo=r(Plt,"CamembertForQuestionAnswering"),Plt.forEach(t),HNo=r(I8e," (CamemBERT model)"),I8e.forEach(t),UNo=i(X),D2=n(X,"LI",{});var q8e=s(D2);Xme=n(q8e,"STRONG",{});var Ilt=s(Xme);JNo=r(Ilt,"canine"),Ilt.forEach(t),YNo=r(q8e," \u2014 "),bO=n(q8e,"A",{href:!0});var qlt=s(bO);KNo=r(qlt,"CanineForQuestionAnswering"),qlt.forEach(t),ZNo=r(q8e," (Canine model)"),q8e.forEach(t),ejo=i(X),G2=n(X,"LI",{});var N8e=s(G2);zme=n(N8e,"STRONG",{});var Nlt=s(zme);ojo=r(Nlt,"convbert"),Nlt.forEach(t),rjo=r(N8e," \u2014 "),vO=n(N8e,"A",{href:!0});var jlt=s(vO);tjo=r(jlt,"ConvBertForQuestionAnswering"),jlt.forEach(t),ajo=r(N8e," (ConvBERT model)"),N8e.forEach(t),njo=i(X),O2=n(X,"LI",{});var j8e=s(O2);Qme=n(j8e,"STRONG",{});var Dlt=s(Qme);sjo=r(Dlt,"data2vec-text"),Dlt.forEach(t),ljo=r(j8e," \u2014 "),FO=n(j8e,"A",{href:!0});var Glt=s(FO);ijo=r(Glt,"Data2VecTextForQuestionAnswering"),Glt.forEach(t),djo=r(j8e," (Data2VecText model)"),j8e.forEach(t),cjo=i(X),V2=n(X,"LI",{});var D8e=s(V2);Wme=n(D8e,"STRONG",{});var Olt=s(Wme);fjo=r(Olt,"deberta"),Olt.forEach(t),mjo=r(D8e," \u2014 "),TO=n(D8e,"A",{href:!0});var Vlt=s(TO);gjo=r(Vlt,"DebertaForQuestionAnswering"),Vlt.forEach(t),hjo=r(D8e," (DeBERTa model)"),D8e.forEach(t),pjo=i(X),X2=n(X,"LI",{});var G8e=s(X2);Hme=n(G8e,"STRONG",{});var Xlt=s(Hme);ujo=r(Xlt,"deberta-v2"),Xlt.forEach(t),_jo=r(G8e," \u2014 "),MO=n(G8e,"A",{href:!0});var zlt=s(MO);bjo=r(zlt,"DebertaV2ForQuestionAnswering"),zlt.forEach(t),vjo=r(G8e," (DeBERTa-v2 model)"),G8e.forEach(t),Fjo=i(X),z2=n(X,"LI",{});var O8e=s(z2);Ume=n(O8e,"STRONG",{});var Qlt=s(Ume);Tjo=r(Qlt,"distilbert"),Qlt.forEach(t),Mjo=r(O8e," \u2014 "),EO=n(O8e,"A",{href:!0});var Wlt=s(EO);Ejo=r(Wlt,"DistilBertForQuestionAnswering"),Wlt.forEach(t),Cjo=r(O8e," (DistilBERT model)"),O8e.forEach(t),wjo=i(X),Q2=n(X,"LI",{});var V8e=s(Q2);Jme=n(V8e,"STRONG",{});var Hlt=s(Jme);Ajo=r(Hlt,"electra"),Hlt.forEach(t),yjo=r(V8e," \u2014 "),CO=n(V8e,"A",{href:!0});var Ult=s(CO);Ljo=r(Ult,"ElectraForQuestionAnswering"),Ult.forEach(t),xjo=r(V8e," (ELECTRA model)"),V8e.forEach(t),$jo=i(X),W2=n(X,"LI",{});var X8e=s(W2);Yme=n(X8e,"STRONG",{});var Jlt=s(Yme);kjo=r(Jlt,"flaubert"),Jlt.forEach(t),Sjo=r(X8e," \u2014 "),wO=n(X8e,"A",{href:!0});var Ylt=s(wO);Rjo=r(Ylt,"FlaubertForQuestionAnsweringSimple"),Ylt.forEach(t),Bjo=r(X8e," (FlauBERT model)"),X8e.forEach(t),Pjo=i(X),H2=n(X,"LI",{});var z8e=s(H2);Kme=n(z8e,"STRONG",{});var Klt=s(Kme);Ijo=r(Klt,"fnet"),Klt.forEach(t),qjo=r(z8e," \u2014 "),AO=n(z8e,"A",{href:!0});var Zlt=s(AO);Njo=r(Zlt,"FNetForQuestionAnswering"),Zlt.forEach(t),jjo=r(z8e," (FNet model)"),z8e.forEach(t),Djo=i(X),U2=n(X,"LI",{});var Q8e=s(U2);Zme=n(Q8e,"STRONG",{});var eit=s(Zme);Gjo=r(eit,"funnel"),eit.forEach(t),Ojo=r(Q8e," \u2014 "),yO=n(Q8e,"A",{href:!0});var oit=s(yO);Vjo=r(oit,"FunnelForQuestionAnswering"),oit.forEach(t),Xjo=r(Q8e," (Funnel Transformer model)"),Q8e.forEach(t),zjo=i(X),J2=n(X,"LI",{});var W8e=s(J2);ege=n(W8e,"STRONG",{});var rit=s(ege);Qjo=r(rit,"gptj"),rit.forEach(t),Wjo=r(W8e," \u2014 "),LO=n(W8e,"A",{href:!0});var tit=s(LO);Hjo=r(tit,"GPTJForQuestionAnswering"),tit.forEach(t),Ujo=r(W8e," (GPT-J model)"),W8e.forEach(t),Jjo=i(X),Y2=n(X,"LI",{});var H8e=s(Y2);oge=n(H8e,"STRONG",{});var ait=s(oge);Yjo=r(ait,"ibert"),ait.forEach(t),Kjo=r(H8e," \u2014 "),xO=n(H8e,"A",{href:!0});var nit=s(xO);Zjo=r(nit,"IBertForQuestionAnswering"),nit.forEach(t),eDo=r(H8e," (I-BERT model)"),H8e.forEach(t),oDo=i(X),K2=n(X,"LI",{});var U8e=s(K2);rge=n(U8e,"STRONG",{});var sit=s(rge);rDo=r(sit,"layoutlmv2"),sit.forEach(t),tDo=r(U8e," \u2014 "),$O=n(U8e,"A",{href:!0});var lit=s($O);aDo=r(lit,"LayoutLMv2ForQuestionAnswering"),lit.forEach(t),nDo=r(U8e," (LayoutLMv2 model)"),U8e.forEach(t),sDo=i(X),Z2=n(X,"LI",{});var J8e=s(Z2);tge=n(J8e,"STRONG",{});var iit=s(tge);lDo=r(iit,"led"),iit.forEach(t),iDo=r(J8e," \u2014 "),kO=n(J8e,"A",{href:!0});var dit=s(kO);dDo=r(dit,"LEDForQuestionAnswering"),dit.forEach(t),cDo=r(J8e," (LED model)"),J8e.forEach(t),fDo=i(X),e5=n(X,"LI",{});var Y8e=s(e5);age=n(Y8e,"STRONG",{});var cit=s(age);mDo=r(cit,"longformer"),cit.forEach(t),gDo=r(Y8e," \u2014 "),SO=n(Y8e,"A",{href:!0});var fit=s(SO);hDo=r(fit,"LongformerForQuestionAnswering"),fit.forEach(t),pDo=r(Y8e," (Longformer model)"),Y8e.forEach(t),uDo=i(X),o5=n(X,"LI",{});var K8e=s(o5);nge=n(K8e,"STRONG",{});var mit=s(nge);_Do=r(mit,"lxmert"),mit.forEach(t),bDo=r(K8e," \u2014 "),RO=n(K8e,"A",{href:!0});var git=s(RO);vDo=r(git,"LxmertForQuestionAnswering"),git.forEach(t),FDo=r(K8e," (LXMERT model)"),K8e.forEach(t),TDo=i(X),r5=n(X,"LI",{});var Z8e=s(r5);sge=n(Z8e,"STRONG",{});var hit=s(sge);MDo=r(hit,"mbart"),hit.forEach(t),EDo=r(Z8e," \u2014 "),BO=n(Z8e,"A",{href:!0});var pit=s(BO);CDo=r(pit,"MBartForQuestionAnswering"),pit.forEach(t),wDo=r(Z8e," (mBART model)"),Z8e.forEach(t),ADo=i(X),t5=n(X,"LI",{});var exe=s(t5);lge=n(exe,"STRONG",{});var uit=s(lge);yDo=r(uit,"megatron-bert"),uit.forEach(t),LDo=r(exe," \u2014 "),PO=n(exe,"A",{href:!0});var _it=s(PO);xDo=r(_it,"MegatronBertForQuestionAnswering"),_it.forEach(t),$Do=r(exe," (MegatronBert model)"),exe.forEach(t),kDo=i(X),a5=n(X,"LI",{});var oxe=s(a5);ige=n(oxe,"STRONG",{});var bit=s(ige);SDo=r(bit,"mobilebert"),bit.forEach(t),RDo=r(oxe," \u2014 "),IO=n(oxe,"A",{href:!0});var vit=s(IO);BDo=r(vit,"MobileBertForQuestionAnswering"),vit.forEach(t),PDo=r(oxe," (MobileBERT model)"),oxe.forEach(t),IDo=i(X),n5=n(X,"LI",{});var rxe=s(n5);dge=n(rxe,"STRONG",{});var Fit=s(dge);qDo=r(Fit,"mpnet"),Fit.forEach(t),NDo=r(rxe," \u2014 "),qO=n(rxe,"A",{href:!0});var Tit=s(qO);jDo=r(Tit,"MPNetForQuestionAnswering"),Tit.forEach(t),DDo=r(rxe," (MPNet model)"),rxe.forEach(t),GDo=i(X),s5=n(X,"LI",{});var txe=s(s5);cge=n(txe,"STRONG",{});var Mit=s(cge);ODo=r(Mit,"nystromformer"),Mit.forEach(t),VDo=r(txe," \u2014 "),NO=n(txe,"A",{href:!0});var Eit=s(NO);XDo=r(Eit,"NystromformerForQuestionAnswering"),Eit.forEach(t),zDo=r(txe," (Nystromformer model)"),txe.forEach(t),QDo=i(X),l5=n(X,"LI",{});var axe=s(l5);fge=n(axe,"STRONG",{});var Cit=s(fge);WDo=r(Cit,"qdqbert"),Cit.forEach(t),HDo=r(axe," \u2014 "),jO=n(axe,"A",{href:!0});var wit=s(jO);UDo=r(wit,"QDQBertForQuestionAnswering"),wit.forEach(t),JDo=r(axe," (QDQBert model)"),axe.forEach(t),YDo=i(X),i5=n(X,"LI",{});var nxe=s(i5);mge=n(nxe,"STRONG",{});var Ait=s(mge);KDo=r(Ait,"reformer"),Ait.forEach(t),ZDo=r(nxe," \u2014 "),DO=n(nxe,"A",{href:!0});var yit=s(DO);eGo=r(yit,"ReformerForQuestionAnswering"),yit.forEach(t),oGo=r(nxe," (Reformer model)"),nxe.forEach(t),rGo=i(X),d5=n(X,"LI",{});var sxe=s(d5);gge=n(sxe,"STRONG",{});var Lit=s(gge);tGo=r(Lit,"rembert"),Lit.forEach(t),aGo=r(sxe," \u2014 "),GO=n(sxe,"A",{href:!0});var xit=s(GO);nGo=r(xit,"RemBertForQuestionAnswering"),xit.forEach(t),sGo=r(sxe," (RemBERT model)"),sxe.forEach(t),lGo=i(X),c5=n(X,"LI",{});var lxe=s(c5);hge=n(lxe,"STRONG",{});var $it=s(hge);iGo=r($it,"roberta"),$it.forEach(t),dGo=r(lxe," \u2014 "),OO=n(lxe,"A",{href:!0});var kit=s(OO);cGo=r(kit,"RobertaForQuestionAnswering"),kit.forEach(t),fGo=r(lxe," (RoBERTa model)"),lxe.forEach(t),mGo=i(X),f5=n(X,"LI",{});var ixe=s(f5);pge=n(ixe,"STRONG",{});var Sit=s(pge);gGo=r(Sit,"roformer"),Sit.forEach(t),hGo=r(ixe," \u2014 "),VO=n(ixe,"A",{href:!0});var Rit=s(VO);pGo=r(Rit,"RoFormerForQuestionAnswering"),Rit.forEach(t),uGo=r(ixe," (RoFormer model)"),ixe.forEach(t),_Go=i(X),m5=n(X,"LI",{});var dxe=s(m5);uge=n(dxe,"STRONG",{});var Bit=s(uge);bGo=r(Bit,"splinter"),Bit.forEach(t),vGo=r(dxe," \u2014 "),XO=n(dxe,"A",{href:!0});var Pit=s(XO);FGo=r(Pit,"SplinterForQuestionAnswering"),Pit.forEach(t),TGo=r(dxe," (Splinter model)"),dxe.forEach(t),MGo=i(X),g5=n(X,"LI",{});var cxe=s(g5);_ge=n(cxe,"STRONG",{});var Iit=s(_ge);EGo=r(Iit,"squeezebert"),Iit.forEach(t),CGo=r(cxe," \u2014 "),zO=n(cxe,"A",{href:!0});var qit=s(zO);wGo=r(qit,"SqueezeBertForQuestionAnswering"),qit.forEach(t),AGo=r(cxe," (SqueezeBERT model)"),cxe.forEach(t),yGo=i(X),h5=n(X,"LI",{});var fxe=s(h5);bge=n(fxe,"STRONG",{});var Nit=s(bge);LGo=r(Nit,"xlm"),Nit.forEach(t),xGo=r(fxe," \u2014 "),QO=n(fxe,"A",{href:!0});var jit=s(QO);$Go=r(jit,"XLMForQuestionAnsweringSimple"),jit.forEach(t),kGo=r(fxe," (XLM model)"),fxe.forEach(t),SGo=i(X),p5=n(X,"LI",{});var mxe=s(p5);vge=n(mxe,"STRONG",{});var Dit=s(vge);RGo=r(Dit,"xlm-roberta"),Dit.forEach(t),BGo=r(mxe," \u2014 "),WO=n(mxe,"A",{href:!0});var Git=s(WO);PGo=r(Git,"XLMRobertaForQuestionAnswering"),Git.forEach(t),IGo=r(mxe," (XLM-RoBERTa model)"),mxe.forEach(t),qGo=i(X),u5=n(X,"LI",{});var gxe=s(u5);Fge=n(gxe,"STRONG",{});var Oit=s(Fge);NGo=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),jGo=r(gxe," \u2014 "),HO=n(gxe,"A",{href:!0});var Vit=s(HO);DGo=r(Vit,"XLMRobertaXLForQuestionAnswering"),Vit.forEach(t),GGo=r(gxe," (XLM-RoBERTa-XL model)"),gxe.forEach(t),OGo=i(X),_5=n(X,"LI",{});var hxe=s(_5);Tge=n(hxe,"STRONG",{});var Xit=s(Tge);VGo=r(Xit,"xlnet"),Xit.forEach(t),XGo=r(hxe," \u2014 "),UO=n(hxe,"A",{href:!0});var zit=s(UO);zGo=r(zit,"XLNetForQuestionAnsweringSimple"),zit.forEach(t),QGo=r(hxe," (XLNet model)"),hxe.forEach(t),WGo=i(X),b5=n(X,"LI",{});var pxe=s(b5);Mge=n(pxe,"STRONG",{});var Qit=s(Mge);HGo=r(Qit,"yoso"),Qit.forEach(t),UGo=r(pxe," \u2014 "),JO=n(pxe,"A",{href:!0});var Wit=s(JO);JGo=r(Wit,"YosoForQuestionAnswering"),Wit.forEach(t),YGo=r(pxe," (YOSO model)"),pxe.forEach(t),X.forEach(t),KGo=i(ia),v5=n(ia,"P",{});var uxe=s(v5);ZGo=r(uxe,"The model is set in evaluation mode by default using "),Ege=n(uxe,"CODE",{});var Hit=s(Ege);eOo=r(Hit,"model.eval()"),Hit.forEach(t),oOo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(uxe,"CODE",{});var Uit=s(Cge);rOo=r(Uit,"model.train()"),Uit.forEach(t),uxe.forEach(t),tOo=i(ia),T(F5.$$.fragment,ia),ia.forEach(t),Us.forEach(t),DPe=i(f),Yi=n(f,"H2",{class:!0});var Xqe=s(Yi);T5=n(Xqe,"A",{id:!0,class:!0,href:!0});var Jit=s(T5);wge=n(Jit,"SPAN",{});var Yit=s(wge);T(cy.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),aOo=i(Xqe),Age=n(Xqe,"SPAN",{});var Kit=s(Age);nOo=r(Kit,"AutoModelForTableQuestionAnswering"),Kit.forEach(t),Xqe.forEach(t),GPe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(fy.$$.fragment,Js),sOo=i(Js),Ki=n(Js,"P",{});var fK=s(Ki);lOo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=n(fK,"A",{href:!0});var Zit=s(YO);iOo=r(Zit,"from_pretrained()"),Zit.forEach(t),dOo=r(fK," class method or the "),KO=n(fK,"A",{href:!0});var edt=s(KO);cOo=r(edt,"from_config()"),edt.forEach(t),fOo=r(fK,` class
method.`),fK.forEach(t),mOo=i(Js),my=n(Js,"P",{});var zqe=s(my);gOo=r(zqe,"This class cannot be instantiated directly using "),yge=n(zqe,"CODE",{});var odt=s(yge);hOo=r(odt,"__init__()"),odt.forEach(t),pOo=r(zqe," (throws an error)."),zqe.forEach(t),uOo=i(Js),ft=n(Js,"DIV",{class:!0});var fw=s(ft);T(gy.$$.fragment,fw),_Oo=i(fw),Lge=n(fw,"P",{});var rdt=s(Lge);bOo=r(rdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rdt.forEach(t),vOo=i(fw),Zi=n(fw,"P",{});var mK=s(Zi);FOo=r(mK,`Note:
Loading a model from its configuration file does `),xge=n(mK,"STRONG",{});var tdt=s(xge);TOo=r(tdt,"not"),tdt.forEach(t),MOo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(mK,"A",{href:!0});var adt=s(ZO);EOo=r(adt,"from_pretrained()"),adt.forEach(t),COo=r(mK," to load the model weights."),mK.forEach(t),wOo=i(fw),T(M5.$$.fragment,fw),fw.forEach(t),AOo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(hy.$$.fragment,da),yOo=i(da),$ge=n(da,"P",{});var ndt=s($ge);LOo=r(ndt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ndt.forEach(t),xOo=i(da),Ia=n(da,"P",{});var mw=s(Ia);$Oo=r(mw,"The model class to instantiate is selected based on the "),kge=n(mw,"CODE",{});var sdt=s(kge);kOo=r(sdt,"model_type"),sdt.forEach(t),SOo=r(mw,` property of the config object (either
passed as an argument or loaded from `),Sge=n(mw,"CODE",{});var ldt=s(Sge);ROo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),BOo=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(mw,"CODE",{});var idt=s(Rge);POo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),IOo=r(mw,":"),mw.forEach(t),qOo=i(da),Bge=n(da,"UL",{});var ddt=s(Bge);E5=n(ddt,"LI",{});var _xe=s(E5);Pge=n(_xe,"STRONG",{});var cdt=s(Pge);NOo=r(cdt,"tapas"),cdt.forEach(t),jOo=r(_xe," \u2014 "),eV=n(_xe,"A",{href:!0});var fdt=s(eV);DOo=r(fdt,"TapasForQuestionAnswering"),fdt.forEach(t),GOo=r(_xe," (TAPAS model)"),_xe.forEach(t),ddt.forEach(t),OOo=i(da),C5=n(da,"P",{});var bxe=s(C5);VOo=r(bxe,"The model is set in evaluation mode by default using "),Ige=n(bxe,"CODE",{});var mdt=s(Ige);XOo=r(mdt,"model.eval()"),mdt.forEach(t),zOo=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(bxe,"CODE",{});var gdt=s(qge);QOo=r(gdt,"model.train()"),gdt.forEach(t),bxe.forEach(t),WOo=i(da),T(w5.$$.fragment,da),da.forEach(t),Js.forEach(t),OPe=i(f),ed=n(f,"H2",{class:!0});var Qqe=s(ed);A5=n(Qqe,"A",{id:!0,class:!0,href:!0});var hdt=s(A5);Nge=n(hdt,"SPAN",{});var pdt=s(Nge);T(py.$$.fragment,pdt),pdt.forEach(t),hdt.forEach(t),HOo=i(Qqe),jge=n(Qqe,"SPAN",{});var udt=s(jge);UOo=r(udt,"AutoModelForImageClassification"),udt.forEach(t),Qqe.forEach(t),VPe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(uy.$$.fragment,Ys),JOo=i(Ys),od=n(Ys,"P",{});var gK=s(od);YOo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=n(gK,"A",{href:!0});var _dt=s(oV);KOo=r(_dt,"from_pretrained()"),_dt.forEach(t),ZOo=r(gK," class method or the "),rV=n(gK,"A",{href:!0});var bdt=s(rV);eVo=r(bdt,"from_config()"),bdt.forEach(t),oVo=r(gK,` class
method.`),gK.forEach(t),rVo=i(Ys),_y=n(Ys,"P",{});var Wqe=s(_y);tVo=r(Wqe,"This class cannot be instantiated directly using "),Dge=n(Wqe,"CODE",{});var vdt=s(Dge);aVo=r(vdt,"__init__()"),vdt.forEach(t),nVo=r(Wqe," (throws an error)."),Wqe.forEach(t),sVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var gw=s(mt);T(by.$$.fragment,gw),lVo=i(gw),Gge=n(gw,"P",{});var Fdt=s(Gge);iVo=r(Fdt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fdt.forEach(t),dVo=i(gw),rd=n(gw,"P",{});var hK=s(rd);cVo=r(hK,`Note:
Loading a model from its configuration file does `),Oge=n(hK,"STRONG",{});var Tdt=s(Oge);fVo=r(Tdt,"not"),Tdt.forEach(t),mVo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(hK,"A",{href:!0});var Mdt=s(tV);gVo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),hVo=r(hK," to load the model weights."),hK.forEach(t),pVo=i(gw),T(y5.$$.fragment,gw),gw.forEach(t),uVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(vy.$$.fragment,ca),_Vo=i(ca),Vge=n(ca,"P",{});var Edt=s(Vge);bVo=r(Edt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Edt.forEach(t),vVo=i(ca),qa=n(ca,"P",{});var hw=s(qa);FVo=r(hw,"The model class to instantiate is selected based on the "),Xge=n(hw,"CODE",{});var Cdt=s(Xge);TVo=r(Cdt,"model_type"),Cdt.forEach(t),MVo=r(hw,` property of the config object (either
passed as an argument or loaded from `),zge=n(hw,"CODE",{});var wdt=s(zge);EVo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),CVo=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(hw,"CODE",{});var Adt=s(Qge);wVo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),AVo=r(hw,":"),hw.forEach(t),yVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);L5=n(Ee,"LI",{});var vxe=s(L5);Wge=n(vxe,"STRONG",{});var ydt=s(Wge);LVo=r(ydt,"beit"),ydt.forEach(t),xVo=r(vxe," \u2014 "),aV=n(vxe,"A",{href:!0});var Ldt=s(aV);$Vo=r(Ldt,"BeitForImageClassification"),Ldt.forEach(t),kVo=r(vxe," (BEiT model)"),vxe.forEach(t),SVo=i(Ee),x5=n(Ee,"LI",{});var Fxe=s(x5);Hge=n(Fxe,"STRONG",{});var xdt=s(Hge);RVo=r(xdt,"convnext"),xdt.forEach(t),BVo=r(Fxe," \u2014 "),nV=n(Fxe,"A",{href:!0});var $dt=s(nV);PVo=r($dt,"ConvNextForImageClassification"),$dt.forEach(t),IVo=r(Fxe," (ConvNext model)"),Fxe.forEach(t),qVo=i(Ee),$5=n(Ee,"LI",{});var Txe=s($5);Uge=n(Txe,"STRONG",{});var kdt=s(Uge);NVo=r(kdt,"data2vec-vision"),kdt.forEach(t),jVo=r(Txe," \u2014 "),sV=n(Txe,"A",{href:!0});var Sdt=s(sV);DVo=r(Sdt,"Data2VecVisionForImageClassification"),Sdt.forEach(t),GVo=r(Txe," (Data2VecVision model)"),Txe.forEach(t),OVo=i(Ee),Rs=n(Ee,"LI",{});var t$=s(Rs);Jge=n(t$,"STRONG",{});var Rdt=s(Jge);VVo=r(Rdt,"deit"),Rdt.forEach(t),XVo=r(t$," \u2014 "),lV=n(t$,"A",{href:!0});var Bdt=s(lV);zVo=r(Bdt,"DeiTForImageClassification"),Bdt.forEach(t),QVo=r(t$," or "),iV=n(t$,"A",{href:!0});var Pdt=s(iV);WVo=r(Pdt,"DeiTForImageClassificationWithTeacher"),Pdt.forEach(t),HVo=r(t$," (DeiT model)"),t$.forEach(t),UVo=i(Ee),k5=n(Ee,"LI",{});var Mxe=s(k5);Yge=n(Mxe,"STRONG",{});var Idt=s(Yge);JVo=r(Idt,"imagegpt"),Idt.forEach(t),YVo=r(Mxe," \u2014 "),dV=n(Mxe,"A",{href:!0});var qdt=s(dV);KVo=r(qdt,"ImageGPTForImageClassification"),qdt.forEach(t),ZVo=r(Mxe," (ImageGPT model)"),Mxe.forEach(t),eXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Kge=n(ff,"STRONG",{});var Ndt=s(Kge);oXo=r(Ndt,"perceiver"),Ndt.forEach(t),rXo=r(ff," \u2014 "),cV=n(ff,"A",{href:!0});var jdt=s(cV);tXo=r(jdt,"PerceiverForImageClassificationLearned"),jdt.forEach(t),aXo=r(ff," or "),fV=n(ff,"A",{href:!0});var Ddt=s(fV);nXo=r(Ddt,"PerceiverForImageClassificationFourier"),Ddt.forEach(t),sXo=r(ff," or "),mV=n(ff,"A",{href:!0});var Gdt=s(mV);lXo=r(Gdt,"PerceiverForImageClassificationConvProcessing"),Gdt.forEach(t),iXo=r(ff," (Perceiver model)"),ff.forEach(t),dXo=i(Ee),S5=n(Ee,"LI",{});var Exe=s(S5);Zge=n(Exe,"STRONG",{});var Odt=s(Zge);cXo=r(Odt,"poolformer"),Odt.forEach(t),fXo=r(Exe," \u2014 "),gV=n(Exe,"A",{href:!0});var Vdt=s(gV);mXo=r(Vdt,"PoolFormerForImageClassification"),Vdt.forEach(t),gXo=r(Exe," (PoolFormer model)"),Exe.forEach(t),hXo=i(Ee),R5=n(Ee,"LI",{});var Cxe=s(R5);ehe=n(Cxe,"STRONG",{});var Xdt=s(ehe);pXo=r(Xdt,"regnet"),Xdt.forEach(t),uXo=r(Cxe," \u2014 "),hV=n(Cxe,"A",{href:!0});var zdt=s(hV);_Xo=r(zdt,"RegNetForImageClassification"),zdt.forEach(t),bXo=r(Cxe," (RegNet model)"),Cxe.forEach(t),vXo=i(Ee),B5=n(Ee,"LI",{});var wxe=s(B5);ohe=n(wxe,"STRONG",{});var Qdt=s(ohe);FXo=r(Qdt,"resnet"),Qdt.forEach(t),TXo=r(wxe," \u2014 "),pV=n(wxe,"A",{href:!0});var Wdt=s(pV);MXo=r(Wdt,"ResNetForImageClassification"),Wdt.forEach(t),EXo=r(wxe," (ResNet model)"),wxe.forEach(t),CXo=i(Ee),P5=n(Ee,"LI",{});var Axe=s(P5);rhe=n(Axe,"STRONG",{});var Hdt=s(rhe);wXo=r(Hdt,"segformer"),Hdt.forEach(t),AXo=r(Axe," \u2014 "),uV=n(Axe,"A",{href:!0});var Udt=s(uV);yXo=r(Udt,"SegformerForImageClassification"),Udt.forEach(t),LXo=r(Axe," (SegFormer model)"),Axe.forEach(t),xXo=i(Ee),I5=n(Ee,"LI",{});var yxe=s(I5);the=n(yxe,"STRONG",{});var Jdt=s(the);$Xo=r(Jdt,"swin"),Jdt.forEach(t),kXo=r(yxe," \u2014 "),_V=n(yxe,"A",{href:!0});var Ydt=s(_V);SXo=r(Ydt,"SwinForImageClassification"),Ydt.forEach(t),RXo=r(yxe," (Swin model)"),yxe.forEach(t),BXo=i(Ee),q5=n(Ee,"LI",{});var Lxe=s(q5);ahe=n(Lxe,"STRONG",{});var Kdt=s(ahe);PXo=r(Kdt,"van"),Kdt.forEach(t),IXo=r(Lxe," \u2014 "),bV=n(Lxe,"A",{href:!0});var Zdt=s(bV);qXo=r(Zdt,"VanForImageClassification"),Zdt.forEach(t),NXo=r(Lxe," (VAN model)"),Lxe.forEach(t),jXo=i(Ee),N5=n(Ee,"LI",{});var xxe=s(N5);nhe=n(xxe,"STRONG",{});var ect=s(nhe);DXo=r(ect,"vit"),ect.forEach(t),GXo=r(xxe," \u2014 "),vV=n(xxe,"A",{href:!0});var oct=s(vV);OXo=r(oct,"ViTForImageClassification"),oct.forEach(t),VXo=r(xxe," (ViT model)"),xxe.forEach(t),Ee.forEach(t),XXo=i(ca),j5=n(ca,"P",{});var $xe=s(j5);zXo=r($xe,"The model is set in evaluation mode by default using "),she=n($xe,"CODE",{});var rct=s(she);QXo=r(rct,"model.eval()"),rct.forEach(t),WXo=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n($xe,"CODE",{});var tct=s(lhe);HXo=r(tct,"model.train()"),tct.forEach(t),$xe.forEach(t),UXo=i(ca),T(D5.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),XPe=i(f),td=n(f,"H2",{class:!0});var Hqe=s(td);G5=n(Hqe,"A",{id:!0,class:!0,href:!0});var act=s(G5);ihe=n(act,"SPAN",{});var nct=s(ihe);T(Fy.$$.fragment,nct),nct.forEach(t),act.forEach(t),JXo=i(Hqe),dhe=n(Hqe,"SPAN",{});var sct=s(dhe);YXo=r(sct,"AutoModelForVision2Seq"),sct.forEach(t),Hqe.forEach(t),zPe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Ty.$$.fragment,Ks),KXo=i(Ks),ad=n(Ks,"P",{});var pK=s(ad);ZXo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FV=n(pK,"A",{href:!0});var lct=s(FV);ezo=r(lct,"from_pretrained()"),lct.forEach(t),ozo=r(pK," class method or the "),TV=n(pK,"A",{href:!0});var ict=s(TV);rzo=r(ict,"from_config()"),ict.forEach(t),tzo=r(pK,` class
method.`),pK.forEach(t),azo=i(Ks),My=n(Ks,"P",{});var Uqe=s(My);nzo=r(Uqe,"This class cannot be instantiated directly using "),che=n(Uqe,"CODE",{});var dct=s(che);szo=r(dct,"__init__()"),dct.forEach(t),lzo=r(Uqe," (throws an error)."),Uqe.forEach(t),izo=i(Ks),ht=n(Ks,"DIV",{class:!0});var pw=s(ht);T(Ey.$$.fragment,pw),dzo=i(pw),fhe=n(pw,"P",{});var cct=s(fhe);czo=r(cct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cct.forEach(t),fzo=i(pw),nd=n(pw,"P",{});var uK=s(nd);mzo=r(uK,`Note:
Loading a model from its configuration file does `),mhe=n(uK,"STRONG",{});var fct=s(mhe);gzo=r(fct,"not"),fct.forEach(t),hzo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(uK,"A",{href:!0});var mct=s(MV);pzo=r(mct,"from_pretrained()"),mct.forEach(t),uzo=r(uK," to load the model weights."),uK.forEach(t),_zo=i(pw),T(O5.$$.fragment,pw),pw.forEach(t),bzo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Cy.$$.fragment,fa),vzo=i(fa),ghe=n(fa,"P",{});var gct=s(ghe);Fzo=r(gct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gct.forEach(t),Tzo=i(fa),Na=n(fa,"P",{});var uw=s(Na);Mzo=r(uw,"The model class to instantiate is selected based on the "),hhe=n(uw,"CODE",{});var hct=s(hhe);Ezo=r(hct,"model_type"),hct.forEach(t),Czo=r(uw,` property of the config object (either
passed as an argument or loaded from `),phe=n(uw,"CODE",{});var pct=s(phe);wzo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),Azo=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(uw,"CODE",{});var uct=s(uhe);yzo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Lzo=r(uw,":"),uw.forEach(t),xzo=i(fa),_he=n(fa,"UL",{});var _ct=s(_he);V5=n(_ct,"LI",{});var kxe=s(V5);bhe=n(kxe,"STRONG",{});var bct=s(bhe);$zo=r(bct,"vision-encoder-decoder"),bct.forEach(t),kzo=r(kxe," \u2014 "),EV=n(kxe,"A",{href:!0});var vct=s(EV);Szo=r(vct,"VisionEncoderDecoderModel"),vct.forEach(t),Rzo=r(kxe," (Vision Encoder decoder model)"),kxe.forEach(t),_ct.forEach(t),Bzo=i(fa),X5=n(fa,"P",{});var Sxe=s(X5);Pzo=r(Sxe,"The model is set in evaluation mode by default using "),vhe=n(Sxe,"CODE",{});var Fct=s(vhe);Izo=r(Fct,"model.eval()"),Fct.forEach(t),qzo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(Sxe,"CODE",{});var Tct=s(Fhe);Nzo=r(Tct,"model.train()"),Tct.forEach(t),Sxe.forEach(t),jzo=i(fa),T(z5.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),QPe=i(f),sd=n(f,"H2",{class:!0});var Jqe=s(sd);Q5=n(Jqe,"A",{id:!0,class:!0,href:!0});var Mct=s(Q5);The=n(Mct,"SPAN",{});var Ect=s(The);T(wy.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),Dzo=i(Jqe),Mhe=n(Jqe,"SPAN",{});var Cct=s(Mhe);Gzo=r(Cct,"AutoModelForAudioClassification"),Cct.forEach(t),Jqe.forEach(t),WPe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(Ay.$$.fragment,Zs),Ozo=i(Zs),ld=n(Zs,"P",{});var _K=s(ld);Vzo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=n(_K,"A",{href:!0});var wct=s(CV);Xzo=r(wct,"from_pretrained()"),wct.forEach(t),zzo=r(_K," class method or the "),wV=n(_K,"A",{href:!0});var Act=s(wV);Qzo=r(Act,"from_config()"),Act.forEach(t),Wzo=r(_K,` class
method.`),_K.forEach(t),Hzo=i(Zs),yy=n(Zs,"P",{});var Yqe=s(yy);Uzo=r(Yqe,"This class cannot be instantiated directly using "),Ehe=n(Yqe,"CODE",{});var yct=s(Ehe);Jzo=r(yct,"__init__()"),yct.forEach(t),Yzo=r(Yqe," (throws an error)."),Yqe.forEach(t),Kzo=i(Zs),pt=n(Zs,"DIV",{class:!0});var _w=s(pt);T(Ly.$$.fragment,_w),Zzo=i(_w),Che=n(_w,"P",{});var Lct=s(Che);eQo=r(Lct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lct.forEach(t),oQo=i(_w),id=n(_w,"P",{});var bK=s(id);rQo=r(bK,`Note:
Loading a model from its configuration file does `),whe=n(bK,"STRONG",{});var xct=s(whe);tQo=r(xct,"not"),xct.forEach(t),aQo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(bK,"A",{href:!0});var $ct=s(AV);nQo=r($ct,"from_pretrained()"),$ct.forEach(t),sQo=r(bK," to load the model weights."),bK.forEach(t),lQo=i(_w),T(W5.$$.fragment,_w),_w.forEach(t),iQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(xy.$$.fragment,ma),dQo=i(ma),Ahe=n(ma,"P",{});var kct=s(Ahe);cQo=r(kct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kct.forEach(t),fQo=i(ma),ja=n(ma,"P",{});var bw=s(ja);mQo=r(bw,"The model class to instantiate is selected based on the "),yhe=n(bw,"CODE",{});var Sct=s(yhe);gQo=r(Sct,"model_type"),Sct.forEach(t),hQo=r(bw,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(bw,"CODE",{});var Rct=s(Lhe);pQo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),uQo=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(bw,"CODE",{});var Bct=s(xhe);_Qo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),bQo=r(bw,":"),bw.forEach(t),vQo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);H5=n(bo,"LI",{});var Rxe=s(H5);$he=n(Rxe,"STRONG",{});var Pct=s($he);FQo=r(Pct,"data2vec-audio"),Pct.forEach(t),TQo=r(Rxe," \u2014 "),yV=n(Rxe,"A",{href:!0});var Ict=s(yV);MQo=r(Ict,"Data2VecAudioForSequenceClassification"),Ict.forEach(t),EQo=r(Rxe," (Data2VecAudio model)"),Rxe.forEach(t),CQo=i(bo),U5=n(bo,"LI",{});var Bxe=s(U5);khe=n(Bxe,"STRONG",{});var qct=s(khe);wQo=r(qct,"hubert"),qct.forEach(t),AQo=r(Bxe," \u2014 "),LV=n(Bxe,"A",{href:!0});var Nct=s(LV);yQo=r(Nct,"HubertForSequenceClassification"),Nct.forEach(t),LQo=r(Bxe," (Hubert model)"),Bxe.forEach(t),xQo=i(bo),J5=n(bo,"LI",{});var Pxe=s(J5);She=n(Pxe,"STRONG",{});var jct=s(She);$Qo=r(jct,"sew"),jct.forEach(t),kQo=r(Pxe," \u2014 "),xV=n(Pxe,"A",{href:!0});var Dct=s(xV);SQo=r(Dct,"SEWForSequenceClassification"),Dct.forEach(t),RQo=r(Pxe," (SEW model)"),Pxe.forEach(t),BQo=i(bo),Y5=n(bo,"LI",{});var Ixe=s(Y5);Rhe=n(Ixe,"STRONG",{});var Gct=s(Rhe);PQo=r(Gct,"sew-d"),Gct.forEach(t),IQo=r(Ixe," \u2014 "),$V=n(Ixe,"A",{href:!0});var Oct=s($V);qQo=r(Oct,"SEWDForSequenceClassification"),Oct.forEach(t),NQo=r(Ixe," (SEW-D model)"),Ixe.forEach(t),jQo=i(bo),K5=n(bo,"LI",{});var qxe=s(K5);Bhe=n(qxe,"STRONG",{});var Vct=s(Bhe);DQo=r(Vct,"unispeech"),Vct.forEach(t),GQo=r(qxe," \u2014 "),kV=n(qxe,"A",{href:!0});var Xct=s(kV);OQo=r(Xct,"UniSpeechForSequenceClassification"),Xct.forEach(t),VQo=r(qxe," (UniSpeech model)"),qxe.forEach(t),XQo=i(bo),Z5=n(bo,"LI",{});var Nxe=s(Z5);Phe=n(Nxe,"STRONG",{});var zct=s(Phe);zQo=r(zct,"unispeech-sat"),zct.forEach(t),QQo=r(Nxe," \u2014 "),SV=n(Nxe,"A",{href:!0});var Qct=s(SV);WQo=r(Qct,"UniSpeechSatForSequenceClassification"),Qct.forEach(t),HQo=r(Nxe," (UniSpeechSat model)"),Nxe.forEach(t),UQo=i(bo),ev=n(bo,"LI",{});var jxe=s(ev);Ihe=n(jxe,"STRONG",{});var Wct=s(Ihe);JQo=r(Wct,"wav2vec2"),Wct.forEach(t),YQo=r(jxe," \u2014 "),RV=n(jxe,"A",{href:!0});var Hct=s(RV);KQo=r(Hct,"Wav2Vec2ForSequenceClassification"),Hct.forEach(t),ZQo=r(jxe," (Wav2Vec2 model)"),jxe.forEach(t),eWo=i(bo),ov=n(bo,"LI",{});var Dxe=s(ov);qhe=n(Dxe,"STRONG",{});var Uct=s(qhe);oWo=r(Uct,"wavlm"),Uct.forEach(t),rWo=r(Dxe," \u2014 "),BV=n(Dxe,"A",{href:!0});var Jct=s(BV);tWo=r(Jct,"WavLMForSequenceClassification"),Jct.forEach(t),aWo=r(Dxe," (WavLM model)"),Dxe.forEach(t),bo.forEach(t),nWo=i(ma),rv=n(ma,"P",{});var Gxe=s(rv);sWo=r(Gxe,"The model is set in evaluation mode by default using "),Nhe=n(Gxe,"CODE",{});var Yct=s(Nhe);lWo=r(Yct,"model.eval()"),Yct.forEach(t),iWo=r(Gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(Gxe,"CODE",{});var Kct=s(jhe);dWo=r(Kct,"model.train()"),Kct.forEach(t),Gxe.forEach(t),cWo=i(ma),T(tv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),HPe=i(f),dd=n(f,"H2",{class:!0});var Kqe=s(dd);av=n(Kqe,"A",{id:!0,class:!0,href:!0});var Zct=s(av);Dhe=n(Zct,"SPAN",{});var eft=s(Dhe);T($y.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),fWo=i(Kqe),Ghe=n(Kqe,"SPAN",{});var oft=s(Ghe);mWo=r(oft,"AutoModelForAudioFrameClassification"),oft.forEach(t),Kqe.forEach(t),UPe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(ky.$$.fragment,el),gWo=i(el),cd=n(el,"P",{});var vK=s(cd);hWo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=n(vK,"A",{href:!0});var rft=s(PV);pWo=r(rft,"from_pretrained()"),rft.forEach(t),uWo=r(vK," class method or the "),IV=n(vK,"A",{href:!0});var tft=s(IV);_Wo=r(tft,"from_config()"),tft.forEach(t),bWo=r(vK,` class
method.`),vK.forEach(t),vWo=i(el),Sy=n(el,"P",{});var Zqe=s(Sy);FWo=r(Zqe,"This class cannot be instantiated directly using "),Ohe=n(Zqe,"CODE",{});var aft=s(Ohe);TWo=r(aft,"__init__()"),aft.forEach(t),MWo=r(Zqe," (throws an error)."),Zqe.forEach(t),EWo=i(el),ut=n(el,"DIV",{class:!0});var vw=s(ut);T(Ry.$$.fragment,vw),CWo=i(vw),Vhe=n(vw,"P",{});var nft=s(Vhe);wWo=r(nft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nft.forEach(t),AWo=i(vw),fd=n(vw,"P",{});var FK=s(fd);yWo=r(FK,`Note:
Loading a model from its configuration file does `),Xhe=n(FK,"STRONG",{});var sft=s(Xhe);LWo=r(sft,"not"),sft.forEach(t),xWo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(FK,"A",{href:!0});var lft=s(qV);$Wo=r(lft,"from_pretrained()"),lft.forEach(t),kWo=r(FK," to load the model weights."),FK.forEach(t),SWo=i(vw),T(nv.$$.fragment,vw),vw.forEach(t),RWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(By.$$.fragment,ga),BWo=i(ga),zhe=n(ga,"P",{});var ift=s(zhe);PWo=r(ift,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ift.forEach(t),IWo=i(ga),Da=n(ga,"P",{});var Fw=s(Da);qWo=r(Fw,"The model class to instantiate is selected based on the "),Qhe=n(Fw,"CODE",{});var dft=s(Qhe);NWo=r(dft,"model_type"),dft.forEach(t),jWo=r(Fw,` property of the config object (either
passed as an argument or loaded from `),Whe=n(Fw,"CODE",{});var cft=s(Whe);DWo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),GWo=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(Fw,"CODE",{});var fft=s(Hhe);OWo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),VWo=r(Fw,":"),Fw.forEach(t),XWo=i(ga),Ga=n(ga,"UL",{});var Tw=s(Ga);sv=n(Tw,"LI",{});var Oxe=s(sv);Uhe=n(Oxe,"STRONG",{});var mft=s(Uhe);zWo=r(mft,"data2vec-audio"),mft.forEach(t),QWo=r(Oxe," \u2014 "),NV=n(Oxe,"A",{href:!0});var gft=s(NV);WWo=r(gft,"Data2VecAudioForAudioFrameClassification"),gft.forEach(t),HWo=r(Oxe," (Data2VecAudio model)"),Oxe.forEach(t),UWo=i(Tw),lv=n(Tw,"LI",{});var Vxe=s(lv);Jhe=n(Vxe,"STRONG",{});var hft=s(Jhe);JWo=r(hft,"unispeech-sat"),hft.forEach(t),YWo=r(Vxe," \u2014 "),jV=n(Vxe,"A",{href:!0});var pft=s(jV);KWo=r(pft,"UniSpeechSatForAudioFrameClassification"),pft.forEach(t),ZWo=r(Vxe," (UniSpeechSat model)"),Vxe.forEach(t),eHo=i(Tw),iv=n(Tw,"LI",{});var Xxe=s(iv);Yhe=n(Xxe,"STRONG",{});var uft=s(Yhe);oHo=r(uft,"wav2vec2"),uft.forEach(t),rHo=r(Xxe," \u2014 "),DV=n(Xxe,"A",{href:!0});var _ft=s(DV);tHo=r(_ft,"Wav2Vec2ForAudioFrameClassification"),_ft.forEach(t),aHo=r(Xxe," (Wav2Vec2 model)"),Xxe.forEach(t),nHo=i(Tw),dv=n(Tw,"LI",{});var zxe=s(dv);Khe=n(zxe,"STRONG",{});var bft=s(Khe);sHo=r(bft,"wavlm"),bft.forEach(t),lHo=r(zxe," \u2014 "),GV=n(zxe,"A",{href:!0});var vft=s(GV);iHo=r(vft,"WavLMForAudioFrameClassification"),vft.forEach(t),dHo=r(zxe," (WavLM model)"),zxe.forEach(t),Tw.forEach(t),cHo=i(ga),cv=n(ga,"P",{});var Qxe=s(cv);fHo=r(Qxe,"The model is set in evaluation mode by default using "),Zhe=n(Qxe,"CODE",{});var Fft=s(Zhe);mHo=r(Fft,"model.eval()"),Fft.forEach(t),gHo=r(Qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(Qxe,"CODE",{});var Tft=s(epe);hHo=r(Tft,"model.train()"),Tft.forEach(t),Qxe.forEach(t),pHo=i(ga),T(fv.$$.fragment,ga),ga.forEach(t),el.forEach(t),JPe=i(f),md=n(f,"H2",{class:!0});var eNe=s(md);mv=n(eNe,"A",{id:!0,class:!0,href:!0});var Mft=s(mv);ope=n(Mft,"SPAN",{});var Eft=s(ope);T(Py.$$.fragment,Eft),Eft.forEach(t),Mft.forEach(t),uHo=i(eNe),rpe=n(eNe,"SPAN",{});var Cft=s(rpe);_Ho=r(Cft,"AutoModelForCTC"),Cft.forEach(t),eNe.forEach(t),YPe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Iy.$$.fragment,ol),bHo=i(ol),gd=n(ol,"P",{});var TK=s(gd);vHo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=n(TK,"A",{href:!0});var wft=s(OV);FHo=r(wft,"from_pretrained()"),wft.forEach(t),THo=r(TK," class method or the "),VV=n(TK,"A",{href:!0});var Aft=s(VV);MHo=r(Aft,"from_config()"),Aft.forEach(t),EHo=r(TK,` class
method.`),TK.forEach(t),CHo=i(ol),qy=n(ol,"P",{});var oNe=s(qy);wHo=r(oNe,"This class cannot be instantiated directly using "),tpe=n(oNe,"CODE",{});var yft=s(tpe);AHo=r(yft,"__init__()"),yft.forEach(t),yHo=r(oNe," (throws an error)."),oNe.forEach(t),LHo=i(ol),_t=n(ol,"DIV",{class:!0});var Mw=s(_t);T(Ny.$$.fragment,Mw),xHo=i(Mw),ape=n(Mw,"P",{});var Lft=s(ape);$Ho=r(Lft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lft.forEach(t),kHo=i(Mw),hd=n(Mw,"P",{});var MK=s(hd);SHo=r(MK,`Note:
Loading a model from its configuration file does `),npe=n(MK,"STRONG",{});var xft=s(npe);RHo=r(xft,"not"),xft.forEach(t),BHo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(MK,"A",{href:!0});var $ft=s(XV);PHo=r($ft,"from_pretrained()"),$ft.forEach(t),IHo=r(MK," to load the model weights."),MK.forEach(t),qHo=i(Mw),T(gv.$$.fragment,Mw),Mw.forEach(t),NHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(jy.$$.fragment,ha),jHo=i(ha),spe=n(ha,"P",{});var kft=s(spe);DHo=r(kft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kft.forEach(t),GHo=i(ha),Oa=n(ha,"P",{});var Ew=s(Oa);OHo=r(Ew,"The model class to instantiate is selected based on the "),lpe=n(Ew,"CODE",{});var Sft=s(lpe);VHo=r(Sft,"model_type"),Sft.forEach(t),XHo=r(Ew,` property of the config object (either
passed as an argument or loaded from `),ipe=n(Ew,"CODE",{});var Rft=s(ipe);zHo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),QHo=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(Ew,"CODE",{});var Bft=s(dpe);WHo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),HHo=r(Ew,":"),Ew.forEach(t),UHo=i(ha),je=n(ha,"UL",{});var vo=s(je);hv=n(vo,"LI",{});var Wxe=s(hv);cpe=n(Wxe,"STRONG",{});var Pft=s(cpe);JHo=r(Pft,"data2vec-audio"),Pft.forEach(t),YHo=r(Wxe," \u2014 "),zV=n(Wxe,"A",{href:!0});var Ift=s(zV);KHo=r(Ift,"Data2VecAudioForCTC"),Ift.forEach(t),ZHo=r(Wxe," (Data2VecAudio model)"),Wxe.forEach(t),eUo=i(vo),pv=n(vo,"LI",{});var Hxe=s(pv);fpe=n(Hxe,"STRONG",{});var qft=s(fpe);oUo=r(qft,"hubert"),qft.forEach(t),rUo=r(Hxe," \u2014 "),QV=n(Hxe,"A",{href:!0});var Nft=s(QV);tUo=r(Nft,"HubertForCTC"),Nft.forEach(t),aUo=r(Hxe," (Hubert model)"),Hxe.forEach(t),nUo=i(vo),uv=n(vo,"LI",{});var Uxe=s(uv);mpe=n(Uxe,"STRONG",{});var jft=s(mpe);sUo=r(jft,"sew"),jft.forEach(t),lUo=r(Uxe," \u2014 "),WV=n(Uxe,"A",{href:!0});var Dft=s(WV);iUo=r(Dft,"SEWForCTC"),Dft.forEach(t),dUo=r(Uxe," (SEW model)"),Uxe.forEach(t),cUo=i(vo),_v=n(vo,"LI",{});var Jxe=s(_v);gpe=n(Jxe,"STRONG",{});var Gft=s(gpe);fUo=r(Gft,"sew-d"),Gft.forEach(t),mUo=r(Jxe," \u2014 "),HV=n(Jxe,"A",{href:!0});var Oft=s(HV);gUo=r(Oft,"SEWDForCTC"),Oft.forEach(t),hUo=r(Jxe," (SEW-D model)"),Jxe.forEach(t),pUo=i(vo),bv=n(vo,"LI",{});var Yxe=s(bv);hpe=n(Yxe,"STRONG",{});var Vft=s(hpe);uUo=r(Vft,"unispeech"),Vft.forEach(t),_Uo=r(Yxe," \u2014 "),UV=n(Yxe,"A",{href:!0});var Xft=s(UV);bUo=r(Xft,"UniSpeechForCTC"),Xft.forEach(t),vUo=r(Yxe," (UniSpeech model)"),Yxe.forEach(t),FUo=i(vo),vv=n(vo,"LI",{});var Kxe=s(vv);ppe=n(Kxe,"STRONG",{});var zft=s(ppe);TUo=r(zft,"unispeech-sat"),zft.forEach(t),MUo=r(Kxe," \u2014 "),JV=n(Kxe,"A",{href:!0});var Qft=s(JV);EUo=r(Qft,"UniSpeechSatForCTC"),Qft.forEach(t),CUo=r(Kxe," (UniSpeechSat model)"),Kxe.forEach(t),wUo=i(vo),Fv=n(vo,"LI",{});var Zxe=s(Fv);upe=n(Zxe,"STRONG",{});var Wft=s(upe);AUo=r(Wft,"wav2vec2"),Wft.forEach(t),yUo=r(Zxe," \u2014 "),YV=n(Zxe,"A",{href:!0});var Hft=s(YV);LUo=r(Hft,"Wav2Vec2ForCTC"),Hft.forEach(t),xUo=r(Zxe," (Wav2Vec2 model)"),Zxe.forEach(t),$Uo=i(vo),Tv=n(vo,"LI",{});var e9e=s(Tv);_pe=n(e9e,"STRONG",{});var Uft=s(_pe);kUo=r(Uft,"wavlm"),Uft.forEach(t),SUo=r(e9e," \u2014 "),KV=n(e9e,"A",{href:!0});var Jft=s(KV);RUo=r(Jft,"WavLMForCTC"),Jft.forEach(t),BUo=r(e9e," (WavLM model)"),e9e.forEach(t),vo.forEach(t),PUo=i(ha),Mv=n(ha,"P",{});var o9e=s(Mv);IUo=r(o9e,"The model is set in evaluation mode by default using "),bpe=n(o9e,"CODE",{});var Yft=s(bpe);qUo=r(Yft,"model.eval()"),Yft.forEach(t),NUo=r(o9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(o9e,"CODE",{});var Kft=s(vpe);jUo=r(Kft,"model.train()"),Kft.forEach(t),o9e.forEach(t),DUo=i(ha),T(Ev.$$.fragment,ha),ha.forEach(t),ol.forEach(t),KPe=i(f),pd=n(f,"H2",{class:!0});var rNe=s(pd);Cv=n(rNe,"A",{id:!0,class:!0,href:!0});var Zft=s(Cv);Fpe=n(Zft,"SPAN",{});var emt=s(Fpe);T(Dy.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),GUo=i(rNe),Tpe=n(rNe,"SPAN",{});var omt=s(Tpe);OUo=r(omt,"AutoModelForSpeechSeq2Seq"),omt.forEach(t),rNe.forEach(t),ZPe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Gy.$$.fragment,rl),VUo=i(rl),ud=n(rl,"P",{});var EK=s(ud);XUo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=n(EK,"A",{href:!0});var rmt=s(ZV);zUo=r(rmt,"from_pretrained()"),rmt.forEach(t),QUo=r(EK," class method or the "),eX=n(EK,"A",{href:!0});var tmt=s(eX);WUo=r(tmt,"from_config()"),tmt.forEach(t),HUo=r(EK,` class
method.`),EK.forEach(t),UUo=i(rl),Oy=n(rl,"P",{});var tNe=s(Oy);JUo=r(tNe,"This class cannot be instantiated directly using "),Mpe=n(tNe,"CODE",{});var amt=s(Mpe);YUo=r(amt,"__init__()"),amt.forEach(t),KUo=r(tNe," (throws an error)."),tNe.forEach(t),ZUo=i(rl),bt=n(rl,"DIV",{class:!0});var Cw=s(bt);T(Vy.$$.fragment,Cw),eJo=i(Cw),Epe=n(Cw,"P",{});var nmt=s(Epe);oJo=r(nmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nmt.forEach(t),rJo=i(Cw),_d=n(Cw,"P",{});var CK=s(_d);tJo=r(CK,`Note:
Loading a model from its configuration file does `),Cpe=n(CK,"STRONG",{});var smt=s(Cpe);aJo=r(smt,"not"),smt.forEach(t),nJo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(CK,"A",{href:!0});var lmt=s(oX);sJo=r(lmt,"from_pretrained()"),lmt.forEach(t),lJo=r(CK," to load the model weights."),CK.forEach(t),iJo=i(Cw),T(wv.$$.fragment,Cw),Cw.forEach(t),dJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Xy.$$.fragment,pa),cJo=i(pa),wpe=n(pa,"P",{});var imt=s(wpe);fJo=r(imt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),imt.forEach(t),mJo=i(pa),Va=n(pa,"P",{});var ww=s(Va);gJo=r(ww,"The model class to instantiate is selected based on the "),Ape=n(ww,"CODE",{});var dmt=s(Ape);hJo=r(dmt,"model_type"),dmt.forEach(t),pJo=r(ww,` property of the config object (either
passed as an argument or loaded from `),ype=n(ww,"CODE",{});var cmt=s(ype);uJo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),_Jo=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(ww,"CODE",{});var fmt=s(Lpe);bJo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),vJo=r(ww,":"),ww.forEach(t),FJo=i(pa),zy=n(pa,"UL",{});var aNe=s(zy);Av=n(aNe,"LI",{});var r9e=s(Av);xpe=n(r9e,"STRONG",{});var mmt=s(xpe);TJo=r(mmt,"speech-encoder-decoder"),mmt.forEach(t),MJo=r(r9e," \u2014 "),rX=n(r9e,"A",{href:!0});var gmt=s(rX);EJo=r(gmt,"SpeechEncoderDecoderModel"),gmt.forEach(t),CJo=r(r9e," (Speech Encoder decoder model)"),r9e.forEach(t),wJo=i(aNe),yv=n(aNe,"LI",{});var t9e=s(yv);$pe=n(t9e,"STRONG",{});var hmt=s($pe);AJo=r(hmt,"speech_to_text"),hmt.forEach(t),yJo=r(t9e," \u2014 "),tX=n(t9e,"A",{href:!0});var pmt=s(tX);LJo=r(pmt,"Speech2TextForConditionalGeneration"),pmt.forEach(t),xJo=r(t9e," (Speech2Text model)"),t9e.forEach(t),aNe.forEach(t),$Jo=i(pa),Lv=n(pa,"P",{});var a9e=s(Lv);kJo=r(a9e,"The model is set in evaluation mode by default using "),kpe=n(a9e,"CODE",{});var umt=s(kpe);SJo=r(umt,"model.eval()"),umt.forEach(t),RJo=r(a9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(a9e,"CODE",{});var _mt=s(Spe);BJo=r(_mt,"model.train()"),_mt.forEach(t),a9e.forEach(t),PJo=i(pa),T(xv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),eIe=i(f),bd=n(f,"H2",{class:!0});var nNe=s(bd);$v=n(nNe,"A",{id:!0,class:!0,href:!0});var bmt=s($v);Rpe=n(bmt,"SPAN",{});var vmt=s(Rpe);T(Qy.$$.fragment,vmt),vmt.forEach(t),bmt.forEach(t),IJo=i(nNe),Bpe=n(nNe,"SPAN",{});var Fmt=s(Bpe);qJo=r(Fmt,"AutoModelForAudioXVector"),Fmt.forEach(t),nNe.forEach(t),oIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(Wy.$$.fragment,tl),NJo=i(tl),vd=n(tl,"P",{});var wK=s(vd);jJo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=n(wK,"A",{href:!0});var Tmt=s(aX);DJo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),GJo=r(wK," class method or the "),nX=n(wK,"A",{href:!0});var Mmt=s(nX);OJo=r(Mmt,"from_config()"),Mmt.forEach(t),VJo=r(wK,` class
method.`),wK.forEach(t),XJo=i(tl),Hy=n(tl,"P",{});var sNe=s(Hy);zJo=r(sNe,"This class cannot be instantiated directly using "),Ppe=n(sNe,"CODE",{});var Emt=s(Ppe);QJo=r(Emt,"__init__()"),Emt.forEach(t),WJo=r(sNe," (throws an error)."),sNe.forEach(t),HJo=i(tl),vt=n(tl,"DIV",{class:!0});var Aw=s(vt);T(Uy.$$.fragment,Aw),UJo=i(Aw),Ipe=n(Aw,"P",{});var Cmt=s(Ipe);JJo=r(Cmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Cmt.forEach(t),YJo=i(Aw),Fd=n(Aw,"P",{});var AK=s(Fd);KJo=r(AK,`Note:
Loading a model from its configuration file does `),qpe=n(AK,"STRONG",{});var wmt=s(qpe);ZJo=r(wmt,"not"),wmt.forEach(t),eYo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(AK,"A",{href:!0});var Amt=s(sX);oYo=r(Amt,"from_pretrained()"),Amt.forEach(t),rYo=r(AK," to load the model weights."),AK.forEach(t),tYo=i(Aw),T(kv.$$.fragment,Aw),Aw.forEach(t),aYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(Jy.$$.fragment,ua),nYo=i(ua),Npe=n(ua,"P",{});var ymt=s(Npe);sYo=r(ymt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ymt.forEach(t),lYo=i(ua),Xa=n(ua,"P",{});var yw=s(Xa);iYo=r(yw,"The model class to instantiate is selected based on the "),jpe=n(yw,"CODE",{});var Lmt=s(jpe);dYo=r(Lmt,"model_type"),Lmt.forEach(t),cYo=r(yw,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(yw,"CODE",{});var xmt=s(Dpe);fYo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),mYo=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(yw,"CODE",{});var $mt=s(Gpe);gYo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),hYo=r(yw,":"),yw.forEach(t),pYo=i(ua),za=n(ua,"UL",{});var Lw=s(za);Sv=n(Lw,"LI",{});var n9e=s(Sv);Ope=n(n9e,"STRONG",{});var kmt=s(Ope);uYo=r(kmt,"data2vec-audio"),kmt.forEach(t),_Yo=r(n9e," \u2014 "),lX=n(n9e,"A",{href:!0});var Smt=s(lX);bYo=r(Smt,"Data2VecAudioForXVector"),Smt.forEach(t),vYo=r(n9e," (Data2VecAudio model)"),n9e.forEach(t),FYo=i(Lw),Rv=n(Lw,"LI",{});var s9e=s(Rv);Vpe=n(s9e,"STRONG",{});var Rmt=s(Vpe);TYo=r(Rmt,"unispeech-sat"),Rmt.forEach(t),MYo=r(s9e," \u2014 "),iX=n(s9e,"A",{href:!0});var Bmt=s(iX);EYo=r(Bmt,"UniSpeechSatForXVector"),Bmt.forEach(t),CYo=r(s9e," (UniSpeechSat model)"),s9e.forEach(t),wYo=i(Lw),Bv=n(Lw,"LI",{});var l9e=s(Bv);Xpe=n(l9e,"STRONG",{});var Pmt=s(Xpe);AYo=r(Pmt,"wav2vec2"),Pmt.forEach(t),yYo=r(l9e," \u2014 "),dX=n(l9e,"A",{href:!0});var Imt=s(dX);LYo=r(Imt,"Wav2Vec2ForXVector"),Imt.forEach(t),xYo=r(l9e," (Wav2Vec2 model)"),l9e.forEach(t),$Yo=i(Lw),Pv=n(Lw,"LI",{});var i9e=s(Pv);zpe=n(i9e,"STRONG",{});var qmt=s(zpe);kYo=r(qmt,"wavlm"),qmt.forEach(t),SYo=r(i9e," \u2014 "),cX=n(i9e,"A",{href:!0});var Nmt=s(cX);RYo=r(Nmt,"WavLMForXVector"),Nmt.forEach(t),BYo=r(i9e," (WavLM model)"),i9e.forEach(t),Lw.forEach(t),PYo=i(ua),Iv=n(ua,"P",{});var d9e=s(Iv);IYo=r(d9e,"The model is set in evaluation mode by default using "),Qpe=n(d9e,"CODE",{});var jmt=s(Qpe);qYo=r(jmt,"model.eval()"),jmt.forEach(t),NYo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(d9e,"CODE",{});var Dmt=s(Wpe);jYo=r(Dmt,"model.train()"),Dmt.forEach(t),d9e.forEach(t),DYo=i(ua),T(qv.$$.fragment,ua),ua.forEach(t),tl.forEach(t),rIe=i(f),Td=n(f,"H2",{class:!0});var lNe=s(Td);Nv=n(lNe,"A",{id:!0,class:!0,href:!0});var Gmt=s(Nv);Hpe=n(Gmt,"SPAN",{});var Omt=s(Hpe);T(Yy.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),GYo=i(lNe),Upe=n(lNe,"SPAN",{});var Vmt=s(Upe);OYo=r(Vmt,"AutoModelForMaskedImageModeling"),Vmt.forEach(t),lNe.forEach(t),tIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(Ky.$$.fragment,al),VYo=i(al),Md=n(al,"P",{});var yK=s(Md);XYo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fX=n(yK,"A",{href:!0});var Xmt=s(fX);zYo=r(Xmt,"from_pretrained()"),Xmt.forEach(t),QYo=r(yK," class method or the "),mX=n(yK,"A",{href:!0});var zmt=s(mX);WYo=r(zmt,"from_config()"),zmt.forEach(t),HYo=r(yK,` class
method.`),yK.forEach(t),UYo=i(al),Zy=n(al,"P",{});var iNe=s(Zy);JYo=r(iNe,"This class cannot be instantiated directly using "),Jpe=n(iNe,"CODE",{});var Qmt=s(Jpe);YYo=r(Qmt,"__init__()"),Qmt.forEach(t),KYo=r(iNe," (throws an error)."),iNe.forEach(t),ZYo=i(al),Ft=n(al,"DIV",{class:!0});var xw=s(Ft);T(eL.$$.fragment,xw),eKo=i(xw),Ype=n(xw,"P",{});var Wmt=s(Ype);oKo=r(Wmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wmt.forEach(t),rKo=i(xw),Ed=n(xw,"P",{});var LK=s(Ed);tKo=r(LK,`Note:
Loading a model from its configuration file does `),Kpe=n(LK,"STRONG",{});var Hmt=s(Kpe);aKo=r(Hmt,"not"),Hmt.forEach(t),nKo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(LK,"A",{href:!0});var Umt=s(gX);sKo=r(Umt,"from_pretrained()"),Umt.forEach(t),lKo=r(LK," to load the model weights."),LK.forEach(t),iKo=i(xw),T(jv.$$.fragment,xw),xw.forEach(t),dKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(oL.$$.fragment,_a),cKo=i(_a),Zpe=n(_a,"P",{});var Jmt=s(Zpe);fKo=r(Jmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jmt.forEach(t),mKo=i(_a),Qa=n(_a,"P",{});var $w=s(Qa);gKo=r($w,"The model class to instantiate is selected based on the "),eue=n($w,"CODE",{});var Ymt=s(eue);hKo=r(Ymt,"model_type"),Ymt.forEach(t),pKo=r($w,` property of the config object (either
passed as an argument or loaded from `),oue=n($w,"CODE",{});var Kmt=s(oue);uKo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),_Ko=r($w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n($w,"CODE",{});var Zmt=s(rue);bKo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),vKo=r($w,":"),$w.forEach(t),FKo=i(_a),Cd=n(_a,"UL",{});var xK=s(Cd);Dv=n(xK,"LI",{});var c9e=s(Dv);tue=n(c9e,"STRONG",{});var egt=s(tue);TKo=r(egt,"deit"),egt.forEach(t),MKo=r(c9e," \u2014 "),hX=n(c9e,"A",{href:!0});var ogt=s(hX);EKo=r(ogt,"DeiTForMaskedImageModeling"),ogt.forEach(t),CKo=r(c9e," (DeiT model)"),c9e.forEach(t),wKo=i(xK),Gv=n(xK,"LI",{});var f9e=s(Gv);aue=n(f9e,"STRONG",{});var rgt=s(aue);AKo=r(rgt,"swin"),rgt.forEach(t),yKo=r(f9e," \u2014 "),pX=n(f9e,"A",{href:!0});var tgt=s(pX);LKo=r(tgt,"SwinForMaskedImageModeling"),tgt.forEach(t),xKo=r(f9e," (Swin model)"),f9e.forEach(t),$Ko=i(xK),Ov=n(xK,"LI",{});var m9e=s(Ov);nue=n(m9e,"STRONG",{});var agt=s(nue);kKo=r(agt,"vit"),agt.forEach(t),SKo=r(m9e," \u2014 "),uX=n(m9e,"A",{href:!0});var ngt=s(uX);RKo=r(ngt,"ViTForMaskedImageModeling"),ngt.forEach(t),BKo=r(m9e," (ViT model)"),m9e.forEach(t),xK.forEach(t),PKo=i(_a),Vv=n(_a,"P",{});var g9e=s(Vv);IKo=r(g9e,"The model is set in evaluation mode by default using "),sue=n(g9e,"CODE",{});var sgt=s(sue);qKo=r(sgt,"model.eval()"),sgt.forEach(t),NKo=r(g9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(g9e,"CODE",{});var lgt=s(lue);jKo=r(lgt,"model.train()"),lgt.forEach(t),g9e.forEach(t),DKo=i(_a),T(Xv.$$.fragment,_a),_a.forEach(t),al.forEach(t),aIe=i(f),wd=n(f,"H2",{class:!0});var dNe=s(wd);zv=n(dNe,"A",{id:!0,class:!0,href:!0});var igt=s(zv);iue=n(igt,"SPAN",{});var dgt=s(iue);T(rL.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),GKo=i(dNe),due=n(dNe,"SPAN",{});var cgt=s(due);OKo=r(cgt,"AutoModelForObjectDetection"),cgt.forEach(t),dNe.forEach(t),nIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(tL.$$.fragment,nl),VKo=i(nl),Ad=n(nl,"P",{});var $K=s(Ad);XKo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=n($K,"A",{href:!0});var fgt=s(_X);zKo=r(fgt,"from_pretrained()"),fgt.forEach(t),QKo=r($K," class method or the "),bX=n($K,"A",{href:!0});var mgt=s(bX);WKo=r(mgt,"from_config()"),mgt.forEach(t),HKo=r($K,` class
method.`),$K.forEach(t),UKo=i(nl),aL=n(nl,"P",{});var cNe=s(aL);JKo=r(cNe,"This class cannot be instantiated directly using "),cue=n(cNe,"CODE",{});var ggt=s(cue);YKo=r(ggt,"__init__()"),ggt.forEach(t),KKo=r(cNe," (throws an error)."),cNe.forEach(t),ZKo=i(nl),Tt=n(nl,"DIV",{class:!0});var kw=s(Tt);T(nL.$$.fragment,kw),eZo=i(kw),fue=n(kw,"P",{});var hgt=s(fue);oZo=r(hgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hgt.forEach(t),rZo=i(kw),yd=n(kw,"P",{});var kK=s(yd);tZo=r(kK,`Note:
Loading a model from its configuration file does `),mue=n(kK,"STRONG",{});var pgt=s(mue);aZo=r(pgt,"not"),pgt.forEach(t),nZo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(kK,"A",{href:!0});var ugt=s(vX);sZo=r(ugt,"from_pretrained()"),ugt.forEach(t),lZo=r(kK," to load the model weights."),kK.forEach(t),iZo=i(kw),T(Qv.$$.fragment,kw),kw.forEach(t),dZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(sL.$$.fragment,ba),cZo=i(ba),gue=n(ba,"P",{});var _gt=s(gue);fZo=r(_gt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_gt.forEach(t),mZo=i(ba),Wa=n(ba,"P",{});var Sw=s(Wa);gZo=r(Sw,"The model class to instantiate is selected based on the "),hue=n(Sw,"CODE",{});var bgt=s(hue);hZo=r(bgt,"model_type"),bgt.forEach(t),pZo=r(Sw,` property of the config object (either
passed as an argument or loaded from `),pue=n(Sw,"CODE",{});var vgt=s(pue);uZo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),_Zo=r(Sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(Sw,"CODE",{});var Fgt=s(uue);bZo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),vZo=r(Sw,":"),Sw.forEach(t),FZo=i(ba),lL=n(ba,"UL",{});var fNe=s(lL);Wv=n(fNe,"LI",{});var h9e=s(Wv);_ue=n(h9e,"STRONG",{});var Tgt=s(_ue);TZo=r(Tgt,"detr"),Tgt.forEach(t),MZo=r(h9e," \u2014 "),FX=n(h9e,"A",{href:!0});var Mgt=s(FX);EZo=r(Mgt,"DetrForObjectDetection"),Mgt.forEach(t),CZo=r(h9e," (DETR model)"),h9e.forEach(t),wZo=i(fNe),Hv=n(fNe,"LI",{});var p9e=s(Hv);bue=n(p9e,"STRONG",{});var Egt=s(bue);AZo=r(Egt,"yolos"),Egt.forEach(t),yZo=r(p9e," \u2014 "),TX=n(p9e,"A",{href:!0});var Cgt=s(TX);LZo=r(Cgt,"YolosForObjectDetection"),Cgt.forEach(t),xZo=r(p9e," (YOLOS model)"),p9e.forEach(t),fNe.forEach(t),$Zo=i(ba),Uv=n(ba,"P",{});var u9e=s(Uv);kZo=r(u9e,"The model is set in evaluation mode by default using "),vue=n(u9e,"CODE",{});var wgt=s(vue);SZo=r(wgt,"model.eval()"),wgt.forEach(t),RZo=r(u9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(u9e,"CODE",{});var Agt=s(Fue);BZo=r(Agt,"model.train()"),Agt.forEach(t),u9e.forEach(t),PZo=i(ba),T(Jv.$$.fragment,ba),ba.forEach(t),nl.forEach(t),sIe=i(f),Ld=n(f,"H2",{class:!0});var mNe=s(Ld);Yv=n(mNe,"A",{id:!0,class:!0,href:!0});var ygt=s(Yv);Tue=n(ygt,"SPAN",{});var Lgt=s(Tue);T(iL.$$.fragment,Lgt),Lgt.forEach(t),ygt.forEach(t),IZo=i(mNe),Mue=n(mNe,"SPAN",{});var xgt=s(Mue);qZo=r(xgt,"AutoModelForImageSegmentation"),xgt.forEach(t),mNe.forEach(t),lIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(dL.$$.fragment,sl),NZo=i(sl),xd=n(sl,"P",{});var SK=s(xd);jZo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=n(SK,"A",{href:!0});var $gt=s(MX);DZo=r($gt,"from_pretrained()"),$gt.forEach(t),GZo=r(SK," class method or the "),EX=n(SK,"A",{href:!0});var kgt=s(EX);OZo=r(kgt,"from_config()"),kgt.forEach(t),VZo=r(SK,` class
method.`),SK.forEach(t),XZo=i(sl),cL=n(sl,"P",{});var gNe=s(cL);zZo=r(gNe,"This class cannot be instantiated directly using "),Eue=n(gNe,"CODE",{});var Sgt=s(Eue);QZo=r(Sgt,"__init__()"),Sgt.forEach(t),WZo=r(gNe," (throws an error)."),gNe.forEach(t),HZo=i(sl),Mt=n(sl,"DIV",{class:!0});var Rw=s(Mt);T(fL.$$.fragment,Rw),UZo=i(Rw),Cue=n(Rw,"P",{});var Rgt=s(Cue);JZo=r(Rgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rgt.forEach(t),YZo=i(Rw),$d=n(Rw,"P",{});var RK=s($d);KZo=r(RK,`Note:
Loading a model from its configuration file does `),wue=n(RK,"STRONG",{});var Bgt=s(wue);ZZo=r(Bgt,"not"),Bgt.forEach(t),eer=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(RK,"A",{href:!0});var Pgt=s(CX);oer=r(Pgt,"from_pretrained()"),Pgt.forEach(t),rer=r(RK," to load the model weights."),RK.forEach(t),ter=i(Rw),T(Kv.$$.fragment,Rw),Rw.forEach(t),aer=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(mL.$$.fragment,va),ner=i(va),Aue=n(va,"P",{});var Igt=s(Aue);ser=r(Igt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Igt.forEach(t),ler=i(va),Ha=n(va,"P",{});var Bw=s(Ha);ier=r(Bw,"The model class to instantiate is selected based on the "),yue=n(Bw,"CODE",{});var qgt=s(yue);der=r(qgt,"model_type"),qgt.forEach(t),cer=r(Bw,` property of the config object (either
passed as an argument or loaded from `),Lue=n(Bw,"CODE",{});var Ngt=s(Lue);fer=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),mer=r(Bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(Bw,"CODE",{});var jgt=s(xue);ger=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),her=r(Bw,":"),Bw.forEach(t),per=i(va),$ue=n(va,"UL",{});var Dgt=s($ue);Zv=n(Dgt,"LI",{});var _9e=s(Zv);kue=n(_9e,"STRONG",{});var Ggt=s(kue);uer=r(Ggt,"detr"),Ggt.forEach(t),_er=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var Ogt=s(wX);ber=r(Ogt,"DetrForSegmentation"),Ogt.forEach(t),ver=r(_9e," (DETR model)"),_9e.forEach(t),Dgt.forEach(t),Fer=i(va),eF=n(va,"P",{});var b9e=s(eF);Ter=r(b9e,"The model is set in evaluation mode by default using "),Sue=n(b9e,"CODE",{});var Vgt=s(Sue);Mer=r(Vgt,"model.eval()"),Vgt.forEach(t),Eer=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(b9e,"CODE",{});var Xgt=s(Rue);Cer=r(Xgt,"model.train()"),Xgt.forEach(t),b9e.forEach(t),wer=i(va),T(oF.$$.fragment,va),va.forEach(t),sl.forEach(t),iIe=i(f),kd=n(f,"H2",{class:!0});var hNe=s(kd);rF=n(hNe,"A",{id:!0,class:!0,href:!0});var zgt=s(rF);Bue=n(zgt,"SPAN",{});var Qgt=s(Bue);T(gL.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),Aer=i(hNe),Pue=n(hNe,"SPAN",{});var Wgt=s(Pue);yer=r(Wgt,"AutoModelForSemanticSegmentation"),Wgt.forEach(t),hNe.forEach(t),dIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(hL.$$.fragment,ll),Ler=i(ll),Sd=n(ll,"P",{});var BK=s(Sd);xer=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=n(BK,"A",{href:!0});var Hgt=s(AX);$er=r(Hgt,"from_pretrained()"),Hgt.forEach(t),ker=r(BK," class method or the "),yX=n(BK,"A",{href:!0});var Ugt=s(yX);Ser=r(Ugt,"from_config()"),Ugt.forEach(t),Rer=r(BK,` class
method.`),BK.forEach(t),Ber=i(ll),pL=n(ll,"P",{});var pNe=s(pL);Per=r(pNe,"This class cannot be instantiated directly using "),Iue=n(pNe,"CODE",{});var Jgt=s(Iue);Ier=r(Jgt,"__init__()"),Jgt.forEach(t),qer=r(pNe," (throws an error)."),pNe.forEach(t),Ner=i(ll),Et=n(ll,"DIV",{class:!0});var Pw=s(Et);T(uL.$$.fragment,Pw),jer=i(Pw),que=n(Pw,"P",{});var Ygt=s(que);Der=r(Ygt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ygt.forEach(t),Ger=i(Pw),Rd=n(Pw,"P",{});var PK=s(Rd);Oer=r(PK,`Note:
Loading a model from its configuration file does `),Nue=n(PK,"STRONG",{});var Kgt=s(Nue);Ver=r(Kgt,"not"),Kgt.forEach(t),Xer=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(PK,"A",{href:!0});var Zgt=s(LX);zer=r(Zgt,"from_pretrained()"),Zgt.forEach(t),Qer=r(PK," to load the model weights."),PK.forEach(t),Wer=i(Pw),T(tF.$$.fragment,Pw),Pw.forEach(t),Her=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(_L.$$.fragment,Fa),Uer=i(Fa),jue=n(Fa,"P",{});var eht=s(jue);Jer=r(eht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eht.forEach(t),Yer=i(Fa),Ua=n(Fa,"P",{});var Iw=s(Ua);Ker=r(Iw,"The model class to instantiate is selected based on the "),Due=n(Iw,"CODE",{});var oht=s(Due);Zer=r(oht,"model_type"),oht.forEach(t),eor=r(Iw,` property of the config object (either
passed as an argument or loaded from `),Gue=n(Iw,"CODE",{});var rht=s(Gue);oor=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),ror=r(Iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(Iw,"CODE",{});var tht=s(Oue);tor=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),aor=r(Iw,":"),Iw.forEach(t),nor=i(Fa),Ja=n(Fa,"UL",{});var qw=s(Ja);aF=n(qw,"LI",{});var v9e=s(aF);Vue=n(v9e,"STRONG",{});var aht=s(Vue);sor=r(aht,"beit"),aht.forEach(t),lor=r(v9e," \u2014 "),xX=n(v9e,"A",{href:!0});var nht=s(xX);ior=r(nht,"BeitForSemanticSegmentation"),nht.forEach(t),dor=r(v9e," (BEiT model)"),v9e.forEach(t),cor=i(qw),nF=n(qw,"LI",{});var F9e=s(nF);Xue=n(F9e,"STRONG",{});var sht=s(Xue);mor=r(sht,"data2vec-vision"),sht.forEach(t),gor=r(F9e," \u2014 "),$X=n(F9e,"A",{href:!0});var lht=s($X);hor=r(lht,"Data2VecVisionForSemanticSegmentation"),lht.forEach(t),por=r(F9e," (Data2VecVision model)"),F9e.forEach(t),uor=i(qw),sF=n(qw,"LI",{});var T9e=s(sF);zue=n(T9e,"STRONG",{});var iht=s(zue);_or=r(iht,"dpt"),iht.forEach(t),bor=r(T9e," \u2014 "),kX=n(T9e,"A",{href:!0});var dht=s(kX);vor=r(dht,"DPTForSemanticSegmentation"),dht.forEach(t),For=r(T9e," (DPT model)"),T9e.forEach(t),Tor=i(qw),lF=n(qw,"LI",{});var M9e=s(lF);Que=n(M9e,"STRONG",{});var cht=s(Que);Mor=r(cht,"segformer"),cht.forEach(t),Eor=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var fht=s(SX);Cor=r(fht,"SegformerForSemanticSegmentation"),fht.forEach(t),wor=r(M9e," (SegFormer model)"),M9e.forEach(t),qw.forEach(t),Aor=i(Fa),iF=n(Fa,"P",{});var E9e=s(iF);yor=r(E9e,"The model is set in evaluation mode by default using "),Wue=n(E9e,"CODE",{});var mht=s(Wue);Lor=r(mht,"model.eval()"),mht.forEach(t),xor=r(E9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(E9e,"CODE",{});var ght=s(Hue);$or=r(ght,"model.train()"),ght.forEach(t),E9e.forEach(t),kor=i(Fa),T(dF.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),cIe=i(f),Bd=n(f,"H2",{class:!0});var uNe=s(Bd);cF=n(uNe,"A",{id:!0,class:!0,href:!0});var hht=s(cF);Uue=n(hht,"SPAN",{});var pht=s(Uue);T(bL.$$.fragment,pht),pht.forEach(t),hht.forEach(t),Sor=i(uNe),Jue=n(uNe,"SPAN",{});var uht=s(Jue);Ror=r(uht,"AutoModelForInstanceSegmentation"),uht.forEach(t),uNe.forEach(t),fIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(vL.$$.fragment,il),Bor=i(il),Pd=n(il,"P",{});var IK=s(Pd);Por=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=n(IK,"A",{href:!0});var _ht=s(RX);Ior=r(_ht,"from_pretrained()"),_ht.forEach(t),qor=r(IK," class method or the "),BX=n(IK,"A",{href:!0});var bht=s(BX);Nor=r(bht,"from_config()"),bht.forEach(t),jor=r(IK,` class
method.`),IK.forEach(t),Dor=i(il),FL=n(il,"P",{});var _Ne=s(FL);Gor=r(_Ne,"This class cannot be instantiated directly using "),Yue=n(_Ne,"CODE",{});var vht=s(Yue);Oor=r(vht,"__init__()"),vht.forEach(t),Vor=r(_Ne," (throws an error)."),_Ne.forEach(t),Xor=i(il),Ct=n(il,"DIV",{class:!0});var Nw=s(Ct);T(TL.$$.fragment,Nw),zor=i(Nw),Kue=n(Nw,"P",{});var Fht=s(Kue);Qor=r(Fht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fht.forEach(t),Wor=i(Nw),Id=n(Nw,"P",{});var qK=s(Id);Hor=r(qK,`Note:
Loading a model from its configuration file does `),Zue=n(qK,"STRONG",{});var Tht=s(Zue);Uor=r(Tht,"not"),Tht.forEach(t),Jor=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(qK,"A",{href:!0});var Mht=s(PX);Yor=r(Mht,"from_pretrained()"),Mht.forEach(t),Kor=r(qK," to load the model weights."),qK.forEach(t),Zor=i(Nw),T(fF.$$.fragment,Nw),Nw.forEach(t),err=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(ML.$$.fragment,Ta),orr=i(Ta),e_e=n(Ta,"P",{});var Eht=s(e_e);rrr=r(Eht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eht.forEach(t),trr=i(Ta),Ya=n(Ta,"P",{});var jw=s(Ya);arr=r(jw,"The model class to instantiate is selected based on the "),o_e=n(jw,"CODE",{});var Cht=s(o_e);nrr=r(Cht,"model_type"),Cht.forEach(t),srr=r(jw,` property of the config object (either
passed as an argument or loaded from `),r_e=n(jw,"CODE",{});var wht=s(r_e);lrr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),irr=r(jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(jw,"CODE",{});var Aht=s(t_e);drr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),crr=r(jw,":"),jw.forEach(t),frr=i(Ta),a_e=n(Ta,"UL",{});var yht=s(a_e);mF=n(yht,"LI",{});var C9e=s(mF);n_e=n(C9e,"STRONG",{});var Lht=s(n_e);mrr=r(Lht,"maskformer"),Lht.forEach(t),grr=r(C9e," \u2014 "),IX=n(C9e,"A",{href:!0});var xht=s(IX);hrr=r(xht,"MaskFormerForInstanceSegmentation"),xht.forEach(t),prr=r(C9e," (MaskFormer model)"),C9e.forEach(t),yht.forEach(t),urr=i(Ta),gF=n(Ta,"P",{});var w9e=s(gF);_rr=r(w9e,"The model is set in evaluation mode by default using "),s_e=n(w9e,"CODE",{});var $ht=s(s_e);brr=r($ht,"model.eval()"),$ht.forEach(t),vrr=r(w9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(w9e,"CODE",{});var kht=s(l_e);Frr=r(kht,"model.train()"),kht.forEach(t),w9e.forEach(t),Trr=i(Ta),T(hF.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),mIe=i(f),qd=n(f,"H2",{class:!0});var bNe=s(qd);pF=n(bNe,"A",{id:!0,class:!0,href:!0});var Sht=s(pF);i_e=n(Sht,"SPAN",{});var Rht=s(i_e);T(EL.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),Mrr=i(bNe),d_e=n(bNe,"SPAN",{});var Bht=s(d_e);Err=r(Bht,"TFAutoModel"),Bht.forEach(t),bNe.forEach(t),gIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(CL.$$.fragment,dl),Crr=i(dl),Nd=n(dl,"P",{});var NK=s(Nd);wrr=r(NK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=n(NK,"A",{href:!0});var Pht=s(qX);Arr=r(Pht,"from_pretrained()"),Pht.forEach(t),yrr=r(NK," class method or the "),NX=n(NK,"A",{href:!0});var Iht=s(NX);Lrr=r(Iht,"from_config()"),Iht.forEach(t),xrr=r(NK,` class
method.`),NK.forEach(t),$rr=i(dl),wL=n(dl,"P",{});var vNe=s(wL);krr=r(vNe,"This class cannot be instantiated directly using "),c_e=n(vNe,"CODE",{});var qht=s(c_e);Srr=r(qht,"__init__()"),qht.forEach(t),Rrr=r(vNe," (throws an error)."),vNe.forEach(t),Brr=i(dl),wt=n(dl,"DIV",{class:!0});var Dw=s(wt);T(AL.$$.fragment,Dw),Prr=i(Dw),f_e=n(Dw,"P",{});var Nht=s(f_e);Irr=r(Nht,"Instantiates one of the base model classes of the library from a configuration."),Nht.forEach(t),qrr=i(Dw),jd=n(Dw,"P",{});var jK=s(jd);Nrr=r(jK,`Note:
Loading a model from its configuration file does `),m_e=n(jK,"STRONG",{});var jht=s(m_e);jrr=r(jht,"not"),jht.forEach(t),Drr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(jK,"A",{href:!0});var Dht=s(jX);Grr=r(Dht,"from_pretrained()"),Dht.forEach(t),Orr=r(jK," to load the model weights."),jK.forEach(t),Vrr=i(Dw),T(uF.$$.fragment,Dw),Dw.forEach(t),Xrr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(yL.$$.fragment,cl),zrr=i(cl),g_e=n(cl,"P",{});var Ght=s(g_e);Qrr=r(Ght,"Instantiate one of the base model classes of the library from a pretrained model."),Ght.forEach(t),Wrr=i(cl),Ka=n(cl,"P",{});var Gw=s(Ka);Hrr=r(Gw,"The model class to instantiate is selected based on the "),h_e=n(Gw,"CODE",{});var Oht=s(h_e);Urr=r(Oht,"model_type"),Oht.forEach(t),Jrr=r(Gw,` property of the config object (either
passed as an argument or loaded from `),p_e=n(Gw,"CODE",{});var Vht=s(p_e);Yrr=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),Krr=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(Gw,"CODE",{});var Xht=s(u_e);Zrr=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),etr=r(Gw,":"),Gw.forEach(t),otr=i(cl),j=n(cl,"UL",{});var D=s(j);_F=n(D,"LI",{});var A9e=s(_F);__e=n(A9e,"STRONG",{});var zht=s(__e);rtr=r(zht,"albert"),zht.forEach(t),ttr=r(A9e," \u2014 "),DX=n(A9e,"A",{href:!0});var Qht=s(DX);atr=r(Qht,"TFAlbertModel"),Qht.forEach(t),ntr=r(A9e," (ALBERT model)"),A9e.forEach(t),str=i(D),bF=n(D,"LI",{});var y9e=s(bF);b_e=n(y9e,"STRONG",{});var Wht=s(b_e);ltr=r(Wht,"bart"),Wht.forEach(t),itr=r(y9e," \u2014 "),GX=n(y9e,"A",{href:!0});var Hht=s(GX);dtr=r(Hht,"TFBartModel"),Hht.forEach(t),ctr=r(y9e," (BART model)"),y9e.forEach(t),ftr=i(D),vF=n(D,"LI",{});var L9e=s(vF);v_e=n(L9e,"STRONG",{});var Uht=s(v_e);mtr=r(Uht,"bert"),Uht.forEach(t),gtr=r(L9e," \u2014 "),OX=n(L9e,"A",{href:!0});var Jht=s(OX);htr=r(Jht,"TFBertModel"),Jht.forEach(t),ptr=r(L9e," (BERT model)"),L9e.forEach(t),utr=i(D),FF=n(D,"LI",{});var x9e=s(FF);F_e=n(x9e,"STRONG",{});var Yht=s(F_e);_tr=r(Yht,"blenderbot"),Yht.forEach(t),btr=r(x9e," \u2014 "),VX=n(x9e,"A",{href:!0});var Kht=s(VX);vtr=r(Kht,"TFBlenderbotModel"),Kht.forEach(t),Ftr=r(x9e," (Blenderbot model)"),x9e.forEach(t),Ttr=i(D),TF=n(D,"LI",{});var $9e=s(TF);T_e=n($9e,"STRONG",{});var Zht=s(T_e);Mtr=r(Zht,"blenderbot-small"),Zht.forEach(t),Etr=r($9e," \u2014 "),XX=n($9e,"A",{href:!0});var ept=s(XX);Ctr=r(ept,"TFBlenderbotSmallModel"),ept.forEach(t),wtr=r($9e," (BlenderbotSmall model)"),$9e.forEach(t),Atr=i(D),MF=n(D,"LI",{});var k9e=s(MF);M_e=n(k9e,"STRONG",{});var opt=s(M_e);ytr=r(opt,"camembert"),opt.forEach(t),Ltr=r(k9e," \u2014 "),zX=n(k9e,"A",{href:!0});var rpt=s(zX);xtr=r(rpt,"TFCamembertModel"),rpt.forEach(t),$tr=r(k9e," (CamemBERT model)"),k9e.forEach(t),ktr=i(D),EF=n(D,"LI",{});var S9e=s(EF);E_e=n(S9e,"STRONG",{});var tpt=s(E_e);Str=r(tpt,"clip"),tpt.forEach(t),Rtr=r(S9e," \u2014 "),QX=n(S9e,"A",{href:!0});var apt=s(QX);Btr=r(apt,"TFCLIPModel"),apt.forEach(t),Ptr=r(S9e," (CLIP model)"),S9e.forEach(t),Itr=i(D),CF=n(D,"LI",{});var R9e=s(CF);C_e=n(R9e,"STRONG",{});var npt=s(C_e);qtr=r(npt,"convbert"),npt.forEach(t),Ntr=r(R9e," \u2014 "),WX=n(R9e,"A",{href:!0});var spt=s(WX);jtr=r(spt,"TFConvBertModel"),spt.forEach(t),Dtr=r(R9e," (ConvBERT model)"),R9e.forEach(t),Gtr=i(D),wF=n(D,"LI",{});var B9e=s(wF);w_e=n(B9e,"STRONG",{});var lpt=s(w_e);Otr=r(lpt,"convnext"),lpt.forEach(t),Vtr=r(B9e," \u2014 "),HX=n(B9e,"A",{href:!0});var ipt=s(HX);Xtr=r(ipt,"TFConvNextModel"),ipt.forEach(t),ztr=r(B9e," (ConvNext model)"),B9e.forEach(t),Qtr=i(D),AF=n(D,"LI",{});var P9e=s(AF);A_e=n(P9e,"STRONG",{});var dpt=s(A_e);Wtr=r(dpt,"ctrl"),dpt.forEach(t),Htr=r(P9e," \u2014 "),UX=n(P9e,"A",{href:!0});var cpt=s(UX);Utr=r(cpt,"TFCTRLModel"),cpt.forEach(t),Jtr=r(P9e," (CTRL model)"),P9e.forEach(t),Ytr=i(D),yF=n(D,"LI",{});var I9e=s(yF);y_e=n(I9e,"STRONG",{});var fpt=s(y_e);Ktr=r(fpt,"data2vec-vision"),fpt.forEach(t),Ztr=r(I9e," \u2014 "),JX=n(I9e,"A",{href:!0});var mpt=s(JX);ear=r(mpt,"TFData2VecVisionModel"),mpt.forEach(t),oar=r(I9e," (Data2VecVision model)"),I9e.forEach(t),rar=i(D),LF=n(D,"LI",{});var q9e=s(LF);L_e=n(q9e,"STRONG",{});var gpt=s(L_e);tar=r(gpt,"deberta"),gpt.forEach(t),aar=r(q9e," \u2014 "),YX=n(q9e,"A",{href:!0});var hpt=s(YX);nar=r(hpt,"TFDebertaModel"),hpt.forEach(t),sar=r(q9e," (DeBERTa model)"),q9e.forEach(t),lar=i(D),xF=n(D,"LI",{});var N9e=s(xF);x_e=n(N9e,"STRONG",{});var ppt=s(x_e);iar=r(ppt,"deberta-v2"),ppt.forEach(t),dar=r(N9e," \u2014 "),KX=n(N9e,"A",{href:!0});var upt=s(KX);car=r(upt,"TFDebertaV2Model"),upt.forEach(t),far=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),mar=i(D),$F=n(D,"LI",{});var j9e=s($F);$_e=n(j9e,"STRONG",{});var _pt=s($_e);gar=r(_pt,"distilbert"),_pt.forEach(t),har=r(j9e," \u2014 "),ZX=n(j9e,"A",{href:!0});var bpt=s(ZX);par=r(bpt,"TFDistilBertModel"),bpt.forEach(t),uar=r(j9e," (DistilBERT model)"),j9e.forEach(t),_ar=i(D),kF=n(D,"LI",{});var D9e=s(kF);k_e=n(D9e,"STRONG",{});var vpt=s(k_e);bar=r(vpt,"dpr"),vpt.forEach(t),Far=r(D9e," \u2014 "),ez=n(D9e,"A",{href:!0});var Fpt=s(ez);Tar=r(Fpt,"TFDPRQuestionEncoder"),Fpt.forEach(t),Mar=r(D9e," (DPR model)"),D9e.forEach(t),Ear=i(D),SF=n(D,"LI",{});var G9e=s(SF);S_e=n(G9e,"STRONG",{});var Tpt=s(S_e);Car=r(Tpt,"electra"),Tpt.forEach(t),war=r(G9e," \u2014 "),oz=n(G9e,"A",{href:!0});var Mpt=s(oz);Aar=r(Mpt,"TFElectraModel"),Mpt.forEach(t),yar=r(G9e," (ELECTRA model)"),G9e.forEach(t),Lar=i(D),RF=n(D,"LI",{});var O9e=s(RF);R_e=n(O9e,"STRONG",{});var Ept=s(R_e);xar=r(Ept,"flaubert"),Ept.forEach(t),$ar=r(O9e," \u2014 "),rz=n(O9e,"A",{href:!0});var Cpt=s(rz);kar=r(Cpt,"TFFlaubertModel"),Cpt.forEach(t),Sar=r(O9e," (FlauBERT model)"),O9e.forEach(t),Rar=i(D),Bs=n(D,"LI",{});var a$=s(Bs);B_e=n(a$,"STRONG",{});var wpt=s(B_e);Bar=r(wpt,"funnel"),wpt.forEach(t),Par=r(a$," \u2014 "),tz=n(a$,"A",{href:!0});var Apt=s(tz);Iar=r(Apt,"TFFunnelModel"),Apt.forEach(t),qar=r(a$," or "),az=n(a$,"A",{href:!0});var ypt=s(az);Nar=r(ypt,"TFFunnelBaseModel"),ypt.forEach(t),jar=r(a$," (Funnel Transformer model)"),a$.forEach(t),Dar=i(D),BF=n(D,"LI",{});var V9e=s(BF);P_e=n(V9e,"STRONG",{});var Lpt=s(P_e);Gar=r(Lpt,"gpt2"),Lpt.forEach(t),Oar=r(V9e," \u2014 "),nz=n(V9e,"A",{href:!0});var xpt=s(nz);Var=r(xpt,"TFGPT2Model"),xpt.forEach(t),Xar=r(V9e," (OpenAI GPT-2 model)"),V9e.forEach(t),zar=i(D),PF=n(D,"LI",{});var X9e=s(PF);I_e=n(X9e,"STRONG",{});var $pt=s(I_e);Qar=r($pt,"gptj"),$pt.forEach(t),War=r(X9e," \u2014 "),sz=n(X9e,"A",{href:!0});var kpt=s(sz);Har=r(kpt,"TFGPTJModel"),kpt.forEach(t),Uar=r(X9e," (GPT-J model)"),X9e.forEach(t),Jar=i(D),IF=n(D,"LI",{});var z9e=s(IF);q_e=n(z9e,"STRONG",{});var Spt=s(q_e);Yar=r(Spt,"hubert"),Spt.forEach(t),Kar=r(z9e," \u2014 "),lz=n(z9e,"A",{href:!0});var Rpt=s(lz);Zar=r(Rpt,"TFHubertModel"),Rpt.forEach(t),enr=r(z9e," (Hubert model)"),z9e.forEach(t),onr=i(D),qF=n(D,"LI",{});var Q9e=s(qF);N_e=n(Q9e,"STRONG",{});var Bpt=s(N_e);rnr=r(Bpt,"layoutlm"),Bpt.forEach(t),tnr=r(Q9e," \u2014 "),iz=n(Q9e,"A",{href:!0});var Ppt=s(iz);anr=r(Ppt,"TFLayoutLMModel"),Ppt.forEach(t),nnr=r(Q9e," (LayoutLM model)"),Q9e.forEach(t),snr=i(D),NF=n(D,"LI",{});var W9e=s(NF);j_e=n(W9e,"STRONG",{});var Ipt=s(j_e);lnr=r(Ipt,"led"),Ipt.forEach(t),inr=r(W9e," \u2014 "),dz=n(W9e,"A",{href:!0});var qpt=s(dz);dnr=r(qpt,"TFLEDModel"),qpt.forEach(t),cnr=r(W9e," (LED model)"),W9e.forEach(t),fnr=i(D),jF=n(D,"LI",{});var H9e=s(jF);D_e=n(H9e,"STRONG",{});var Npt=s(D_e);mnr=r(Npt,"longformer"),Npt.forEach(t),gnr=r(H9e," \u2014 "),cz=n(H9e,"A",{href:!0});var jpt=s(cz);hnr=r(jpt,"TFLongformerModel"),jpt.forEach(t),pnr=r(H9e," (Longformer model)"),H9e.forEach(t),unr=i(D),DF=n(D,"LI",{});var U9e=s(DF);G_e=n(U9e,"STRONG",{});var Dpt=s(G_e);_nr=r(Dpt,"lxmert"),Dpt.forEach(t),bnr=r(U9e," \u2014 "),fz=n(U9e,"A",{href:!0});var Gpt=s(fz);vnr=r(Gpt,"TFLxmertModel"),Gpt.forEach(t),Fnr=r(U9e," (LXMERT model)"),U9e.forEach(t),Tnr=i(D),GF=n(D,"LI",{});var J9e=s(GF);O_e=n(J9e,"STRONG",{});var Opt=s(O_e);Mnr=r(Opt,"marian"),Opt.forEach(t),Enr=r(J9e," \u2014 "),mz=n(J9e,"A",{href:!0});var Vpt=s(mz);Cnr=r(Vpt,"TFMarianModel"),Vpt.forEach(t),wnr=r(J9e," (Marian model)"),J9e.forEach(t),Anr=i(D),OF=n(D,"LI",{});var Y9e=s(OF);V_e=n(Y9e,"STRONG",{});var Xpt=s(V_e);ynr=r(Xpt,"mbart"),Xpt.forEach(t),Lnr=r(Y9e," \u2014 "),gz=n(Y9e,"A",{href:!0});var zpt=s(gz);xnr=r(zpt,"TFMBartModel"),zpt.forEach(t),$nr=r(Y9e," (mBART model)"),Y9e.forEach(t),knr=i(D),VF=n(D,"LI",{});var K9e=s(VF);X_e=n(K9e,"STRONG",{});var Qpt=s(X_e);Snr=r(Qpt,"mobilebert"),Qpt.forEach(t),Rnr=r(K9e," \u2014 "),hz=n(K9e,"A",{href:!0});var Wpt=s(hz);Bnr=r(Wpt,"TFMobileBertModel"),Wpt.forEach(t),Pnr=r(K9e," (MobileBERT model)"),K9e.forEach(t),Inr=i(D),XF=n(D,"LI",{});var Z9e=s(XF);z_e=n(Z9e,"STRONG",{});var Hpt=s(z_e);qnr=r(Hpt,"mpnet"),Hpt.forEach(t),Nnr=r(Z9e," \u2014 "),pz=n(Z9e,"A",{href:!0});var Upt=s(pz);jnr=r(Upt,"TFMPNetModel"),Upt.forEach(t),Dnr=r(Z9e," (MPNet model)"),Z9e.forEach(t),Gnr=i(D),zF=n(D,"LI",{});var e$e=s(zF);Q_e=n(e$e,"STRONG",{});var Jpt=s(Q_e);Onr=r(Jpt,"mt5"),Jpt.forEach(t),Vnr=r(e$e," \u2014 "),uz=n(e$e,"A",{href:!0});var Ypt=s(uz);Xnr=r(Ypt,"TFMT5Model"),Ypt.forEach(t),znr=r(e$e," (mT5 model)"),e$e.forEach(t),Qnr=i(D),QF=n(D,"LI",{});var o$e=s(QF);W_e=n(o$e,"STRONG",{});var Kpt=s(W_e);Wnr=r(Kpt,"openai-gpt"),Kpt.forEach(t),Hnr=r(o$e," \u2014 "),_z=n(o$e,"A",{href:!0});var Zpt=s(_z);Unr=r(Zpt,"TFOpenAIGPTModel"),Zpt.forEach(t),Jnr=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),Ynr=i(D),WF=n(D,"LI",{});var r$e=s(WF);H_e=n(r$e,"STRONG",{});var eut=s(H_e);Knr=r(eut,"pegasus"),eut.forEach(t),Znr=r(r$e," \u2014 "),bz=n(r$e,"A",{href:!0});var out=s(bz);esr=r(out,"TFPegasusModel"),out.forEach(t),osr=r(r$e," (Pegasus model)"),r$e.forEach(t),rsr=i(D),HF=n(D,"LI",{});var t$e=s(HF);U_e=n(t$e,"STRONG",{});var rut=s(U_e);tsr=r(rut,"rembert"),rut.forEach(t),asr=r(t$e," \u2014 "),vz=n(t$e,"A",{href:!0});var tut=s(vz);nsr=r(tut,"TFRemBertModel"),tut.forEach(t),ssr=r(t$e," (RemBERT model)"),t$e.forEach(t),lsr=i(D),UF=n(D,"LI",{});var a$e=s(UF);J_e=n(a$e,"STRONG",{});var aut=s(J_e);isr=r(aut,"roberta"),aut.forEach(t),dsr=r(a$e," \u2014 "),Fz=n(a$e,"A",{href:!0});var nut=s(Fz);csr=r(nut,"TFRobertaModel"),nut.forEach(t),fsr=r(a$e," (RoBERTa model)"),a$e.forEach(t),msr=i(D),JF=n(D,"LI",{});var n$e=s(JF);Y_e=n(n$e,"STRONG",{});var sut=s(Y_e);gsr=r(sut,"roformer"),sut.forEach(t),hsr=r(n$e," \u2014 "),Tz=n(n$e,"A",{href:!0});var lut=s(Tz);psr=r(lut,"TFRoFormerModel"),lut.forEach(t),usr=r(n$e," (RoFormer model)"),n$e.forEach(t),_sr=i(D),YF=n(D,"LI",{});var s$e=s(YF);K_e=n(s$e,"STRONG",{});var iut=s(K_e);bsr=r(iut,"speech_to_text"),iut.forEach(t),vsr=r(s$e," \u2014 "),Mz=n(s$e,"A",{href:!0});var dut=s(Mz);Fsr=r(dut,"TFSpeech2TextModel"),dut.forEach(t),Tsr=r(s$e," (Speech2Text model)"),s$e.forEach(t),Msr=i(D),KF=n(D,"LI",{});var l$e=s(KF);Z_e=n(l$e,"STRONG",{});var cut=s(Z_e);Esr=r(cut,"t5"),cut.forEach(t),Csr=r(l$e," \u2014 "),Ez=n(l$e,"A",{href:!0});var fut=s(Ez);wsr=r(fut,"TFT5Model"),fut.forEach(t),Asr=r(l$e," (T5 model)"),l$e.forEach(t),ysr=i(D),ZF=n(D,"LI",{});var i$e=s(ZF);e1e=n(i$e,"STRONG",{});var mut=s(e1e);Lsr=r(mut,"tapas"),mut.forEach(t),xsr=r(i$e," \u2014 "),Cz=n(i$e,"A",{href:!0});var gut=s(Cz);$sr=r(gut,"TFTapasModel"),gut.forEach(t),ksr=r(i$e," (TAPAS model)"),i$e.forEach(t),Ssr=i(D),e0=n(D,"LI",{});var d$e=s(e0);o1e=n(d$e,"STRONG",{});var hut=s(o1e);Rsr=r(hut,"transfo-xl"),hut.forEach(t),Bsr=r(d$e," \u2014 "),wz=n(d$e,"A",{href:!0});var put=s(wz);Psr=r(put,"TFTransfoXLModel"),put.forEach(t),Isr=r(d$e," (Transformer-XL model)"),d$e.forEach(t),qsr=i(D),o0=n(D,"LI",{});var c$e=s(o0);r1e=n(c$e,"STRONG",{});var uut=s(r1e);Nsr=r(uut,"vit"),uut.forEach(t),jsr=r(c$e," \u2014 "),Az=n(c$e,"A",{href:!0});var _ut=s(Az);Dsr=r(_ut,"TFViTModel"),_ut.forEach(t),Gsr=r(c$e," (ViT model)"),c$e.forEach(t),Osr=i(D),r0=n(D,"LI",{});var f$e=s(r0);t1e=n(f$e,"STRONG",{});var but=s(t1e);Vsr=r(but,"vit_mae"),but.forEach(t),Xsr=r(f$e," \u2014 "),yz=n(f$e,"A",{href:!0});var vut=s(yz);zsr=r(vut,"TFViTMAEModel"),vut.forEach(t),Qsr=r(f$e," (ViTMAE model)"),f$e.forEach(t),Wsr=i(D),t0=n(D,"LI",{});var m$e=s(t0);a1e=n(m$e,"STRONG",{});var Fut=s(a1e);Hsr=r(Fut,"wav2vec2"),Fut.forEach(t),Usr=r(m$e," \u2014 "),Lz=n(m$e,"A",{href:!0});var Tut=s(Lz);Jsr=r(Tut,"TFWav2Vec2Model"),Tut.forEach(t),Ysr=r(m$e," (Wav2Vec2 model)"),m$e.forEach(t),Ksr=i(D),a0=n(D,"LI",{});var g$e=s(a0);n1e=n(g$e,"STRONG",{});var Mut=s(n1e);Zsr=r(Mut,"xlm"),Mut.forEach(t),elr=r(g$e," \u2014 "),xz=n(g$e,"A",{href:!0});var Eut=s(xz);olr=r(Eut,"TFXLMModel"),Eut.forEach(t),rlr=r(g$e," (XLM model)"),g$e.forEach(t),tlr=i(D),n0=n(D,"LI",{});var h$e=s(n0);s1e=n(h$e,"STRONG",{});var Cut=s(s1e);alr=r(Cut,"xlm-roberta"),Cut.forEach(t),nlr=r(h$e," \u2014 "),$z=n(h$e,"A",{href:!0});var wut=s($z);slr=r(wut,"TFXLMRobertaModel"),wut.forEach(t),llr=r(h$e," (XLM-RoBERTa model)"),h$e.forEach(t),ilr=i(D),s0=n(D,"LI",{});var p$e=s(s0);l1e=n(p$e,"STRONG",{});var Aut=s(l1e);dlr=r(Aut,"xlnet"),Aut.forEach(t),clr=r(p$e," \u2014 "),kz=n(p$e,"A",{href:!0});var yut=s(kz);flr=r(yut,"TFXLNetModel"),yut.forEach(t),mlr=r(p$e," (XLNet model)"),p$e.forEach(t),D.forEach(t),glr=i(cl),T(l0.$$.fragment,cl),cl.forEach(t),dl.forEach(t),hIe=i(f),Dd=n(f,"H2",{class:!0});var FNe=s(Dd);i0=n(FNe,"A",{id:!0,class:!0,href:!0});var Lut=s(i0);i1e=n(Lut,"SPAN",{});var xut=s(i1e);T(LL.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),hlr=i(FNe),d1e=n(FNe,"SPAN",{});var $ut=s(d1e);plr=r($ut,"TFAutoModelForPreTraining"),$ut.forEach(t),FNe.forEach(t),pIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(xL.$$.fragment,fl),ulr=i(fl),Gd=n(fl,"P",{});var DK=s(Gd);_lr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=n(DK,"A",{href:!0});var kut=s(Sz);blr=r(kut,"from_pretrained()"),kut.forEach(t),vlr=r(DK," class method or the "),Rz=n(DK,"A",{href:!0});var Sut=s(Rz);Flr=r(Sut,"from_config()"),Sut.forEach(t),Tlr=r(DK,` class
method.`),DK.forEach(t),Mlr=i(fl),$L=n(fl,"P",{});var TNe=s($L);Elr=r(TNe,"This class cannot be instantiated directly using "),c1e=n(TNe,"CODE",{});var Rut=s(c1e);Clr=r(Rut,"__init__()"),Rut.forEach(t),wlr=r(TNe," (throws an error)."),TNe.forEach(t),Alr=i(fl),At=n(fl,"DIV",{class:!0});var Ow=s(At);T(kL.$$.fragment,Ow),ylr=i(Ow),f1e=n(Ow,"P",{});var But=s(f1e);Llr=r(But,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),But.forEach(t),xlr=i(Ow),Od=n(Ow,"P",{});var GK=s(Od);$lr=r(GK,`Note:
Loading a model from its configuration file does `),m1e=n(GK,"STRONG",{});var Put=s(m1e);klr=r(Put,"not"),Put.forEach(t),Slr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(GK,"A",{href:!0});var Iut=s(Bz);Rlr=r(Iut,"from_pretrained()"),Iut.forEach(t),Blr=r(GK," to load the model weights."),GK.forEach(t),Plr=i(Ow),T(d0.$$.fragment,Ow),Ow.forEach(t),Ilr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(SL.$$.fragment,ml),qlr=i(ml),g1e=n(ml,"P",{});var qut=s(g1e);Nlr=r(qut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qut.forEach(t),jlr=i(ml),Za=n(ml,"P",{});var Vw=s(Za);Dlr=r(Vw,"The model class to instantiate is selected based on the "),h1e=n(Vw,"CODE",{});var Nut=s(h1e);Glr=r(Nut,"model_type"),Nut.forEach(t),Olr=r(Vw,` property of the config object (either
passed as an argument or loaded from `),p1e=n(Vw,"CODE",{});var jut=s(p1e);Vlr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),Xlr=r(Vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(Vw,"CODE",{});var Dut=s(u1e);zlr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Qlr=r(Vw,":"),Vw.forEach(t),Wlr=i(ml),ne=n(ml,"UL",{});var le=s(ne);c0=n(le,"LI",{});var u$e=s(c0);_1e=n(u$e,"STRONG",{});var Gut=s(_1e);Hlr=r(Gut,"albert"),Gut.forEach(t),Ulr=r(u$e," \u2014 "),Pz=n(u$e,"A",{href:!0});var Out=s(Pz);Jlr=r(Out,"TFAlbertForPreTraining"),Out.forEach(t),Ylr=r(u$e," (ALBERT model)"),u$e.forEach(t),Klr=i(le),f0=n(le,"LI",{});var _$e=s(f0);b1e=n(_$e,"STRONG",{});var Vut=s(b1e);Zlr=r(Vut,"bart"),Vut.forEach(t),eir=r(_$e," \u2014 "),Iz=n(_$e,"A",{href:!0});var Xut=s(Iz);oir=r(Xut,"TFBartForConditionalGeneration"),Xut.forEach(t),rir=r(_$e," (BART model)"),_$e.forEach(t),tir=i(le),m0=n(le,"LI",{});var b$e=s(m0);v1e=n(b$e,"STRONG",{});var zut=s(v1e);air=r(zut,"bert"),zut.forEach(t),nir=r(b$e," \u2014 "),qz=n(b$e,"A",{href:!0});var Qut=s(qz);sir=r(Qut,"TFBertForPreTraining"),Qut.forEach(t),lir=r(b$e," (BERT model)"),b$e.forEach(t),iir=i(le),g0=n(le,"LI",{});var v$e=s(g0);F1e=n(v$e,"STRONG",{});var Wut=s(F1e);dir=r(Wut,"camembert"),Wut.forEach(t),cir=r(v$e," \u2014 "),Nz=n(v$e,"A",{href:!0});var Hut=s(Nz);fir=r(Hut,"TFCamembertForMaskedLM"),Hut.forEach(t),mir=r(v$e," (CamemBERT model)"),v$e.forEach(t),gir=i(le),h0=n(le,"LI",{});var F$e=s(h0);T1e=n(F$e,"STRONG",{});var Uut=s(T1e);hir=r(Uut,"ctrl"),Uut.forEach(t),pir=r(F$e," \u2014 "),jz=n(F$e,"A",{href:!0});var Jut=s(jz);uir=r(Jut,"TFCTRLLMHeadModel"),Jut.forEach(t),_ir=r(F$e," (CTRL model)"),F$e.forEach(t),bir=i(le),p0=n(le,"LI",{});var T$e=s(p0);M1e=n(T$e,"STRONG",{});var Yut=s(M1e);vir=r(Yut,"distilbert"),Yut.forEach(t),Fir=r(T$e," \u2014 "),Dz=n(T$e,"A",{href:!0});var Kut=s(Dz);Tir=r(Kut,"TFDistilBertForMaskedLM"),Kut.forEach(t),Mir=r(T$e," (DistilBERT model)"),T$e.forEach(t),Eir=i(le),u0=n(le,"LI",{});var M$e=s(u0);E1e=n(M$e,"STRONG",{});var Zut=s(E1e);Cir=r(Zut,"electra"),Zut.forEach(t),wir=r(M$e," \u2014 "),Gz=n(M$e,"A",{href:!0});var e_t=s(Gz);Air=r(e_t,"TFElectraForPreTraining"),e_t.forEach(t),yir=r(M$e," (ELECTRA model)"),M$e.forEach(t),Lir=i(le),_0=n(le,"LI",{});var E$e=s(_0);C1e=n(E$e,"STRONG",{});var o_t=s(C1e);xir=r(o_t,"flaubert"),o_t.forEach(t),$ir=r(E$e," \u2014 "),Oz=n(E$e,"A",{href:!0});var r_t=s(Oz);kir=r(r_t,"TFFlaubertWithLMHeadModel"),r_t.forEach(t),Sir=r(E$e," (FlauBERT model)"),E$e.forEach(t),Rir=i(le),b0=n(le,"LI",{});var C$e=s(b0);w1e=n(C$e,"STRONG",{});var t_t=s(w1e);Bir=r(t_t,"funnel"),t_t.forEach(t),Pir=r(C$e," \u2014 "),Vz=n(C$e,"A",{href:!0});var a_t=s(Vz);Iir=r(a_t,"TFFunnelForPreTraining"),a_t.forEach(t),qir=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),Nir=i(le),v0=n(le,"LI",{});var w$e=s(v0);A1e=n(w$e,"STRONG",{});var n_t=s(A1e);jir=r(n_t,"gpt2"),n_t.forEach(t),Dir=r(w$e," \u2014 "),Xz=n(w$e,"A",{href:!0});var s_t=s(Xz);Gir=r(s_t,"TFGPT2LMHeadModel"),s_t.forEach(t),Oir=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),Vir=i(le),F0=n(le,"LI",{});var A$e=s(F0);y1e=n(A$e,"STRONG",{});var l_t=s(y1e);Xir=r(l_t,"layoutlm"),l_t.forEach(t),zir=r(A$e," \u2014 "),zz=n(A$e,"A",{href:!0});var i_t=s(zz);Qir=r(i_t,"TFLayoutLMForMaskedLM"),i_t.forEach(t),Wir=r(A$e," (LayoutLM model)"),A$e.forEach(t),Hir=i(le),T0=n(le,"LI",{});var y$e=s(T0);L1e=n(y$e,"STRONG",{});var d_t=s(L1e);Uir=r(d_t,"lxmert"),d_t.forEach(t),Jir=r(y$e," \u2014 "),Qz=n(y$e,"A",{href:!0});var c_t=s(Qz);Yir=r(c_t,"TFLxmertForPreTraining"),c_t.forEach(t),Kir=r(y$e," (LXMERT model)"),y$e.forEach(t),Zir=i(le),M0=n(le,"LI",{});var L$e=s(M0);x1e=n(L$e,"STRONG",{});var f_t=s(x1e);edr=r(f_t,"mobilebert"),f_t.forEach(t),odr=r(L$e," \u2014 "),Wz=n(L$e,"A",{href:!0});var m_t=s(Wz);rdr=r(m_t,"TFMobileBertForPreTraining"),m_t.forEach(t),tdr=r(L$e," (MobileBERT model)"),L$e.forEach(t),adr=i(le),E0=n(le,"LI",{});var x$e=s(E0);$1e=n(x$e,"STRONG",{});var g_t=s($1e);ndr=r(g_t,"mpnet"),g_t.forEach(t),sdr=r(x$e," \u2014 "),Hz=n(x$e,"A",{href:!0});var h_t=s(Hz);ldr=r(h_t,"TFMPNetForMaskedLM"),h_t.forEach(t),idr=r(x$e," (MPNet model)"),x$e.forEach(t),ddr=i(le),C0=n(le,"LI",{});var $$e=s(C0);k1e=n($$e,"STRONG",{});var p_t=s(k1e);cdr=r(p_t,"openai-gpt"),p_t.forEach(t),fdr=r($$e," \u2014 "),Uz=n($$e,"A",{href:!0});var u_t=s(Uz);mdr=r(u_t,"TFOpenAIGPTLMHeadModel"),u_t.forEach(t),gdr=r($$e," (OpenAI GPT model)"),$$e.forEach(t),hdr=i(le),w0=n(le,"LI",{});var k$e=s(w0);S1e=n(k$e,"STRONG",{});var __t=s(S1e);pdr=r(__t,"roberta"),__t.forEach(t),udr=r(k$e," \u2014 "),Jz=n(k$e,"A",{href:!0});var b_t=s(Jz);_dr=r(b_t,"TFRobertaForMaskedLM"),b_t.forEach(t),bdr=r(k$e," (RoBERTa model)"),k$e.forEach(t),vdr=i(le),A0=n(le,"LI",{});var S$e=s(A0);R1e=n(S$e,"STRONG",{});var v_t=s(R1e);Fdr=r(v_t,"t5"),v_t.forEach(t),Tdr=r(S$e," \u2014 "),Yz=n(S$e,"A",{href:!0});var F_t=s(Yz);Mdr=r(F_t,"TFT5ForConditionalGeneration"),F_t.forEach(t),Edr=r(S$e," (T5 model)"),S$e.forEach(t),Cdr=i(le),y0=n(le,"LI",{});var R$e=s(y0);B1e=n(R$e,"STRONG",{});var T_t=s(B1e);wdr=r(T_t,"tapas"),T_t.forEach(t),Adr=r(R$e," \u2014 "),Kz=n(R$e,"A",{href:!0});var M_t=s(Kz);ydr=r(M_t,"TFTapasForMaskedLM"),M_t.forEach(t),Ldr=r(R$e," (TAPAS model)"),R$e.forEach(t),xdr=i(le),L0=n(le,"LI",{});var B$e=s(L0);P1e=n(B$e,"STRONG",{});var E_t=s(P1e);$dr=r(E_t,"transfo-xl"),E_t.forEach(t),kdr=r(B$e," \u2014 "),Zz=n(B$e,"A",{href:!0});var C_t=s(Zz);Sdr=r(C_t,"TFTransfoXLLMHeadModel"),C_t.forEach(t),Rdr=r(B$e," (Transformer-XL model)"),B$e.forEach(t),Bdr=i(le),x0=n(le,"LI",{});var P$e=s(x0);I1e=n(P$e,"STRONG",{});var w_t=s(I1e);Pdr=r(w_t,"vit_mae"),w_t.forEach(t),Idr=r(P$e," \u2014 "),eQ=n(P$e,"A",{href:!0});var A_t=s(eQ);qdr=r(A_t,"TFViTMAEForPreTraining"),A_t.forEach(t),Ndr=r(P$e," (ViTMAE model)"),P$e.forEach(t),jdr=i(le),$0=n(le,"LI",{});var I$e=s($0);q1e=n(I$e,"STRONG",{});var y_t=s(q1e);Ddr=r(y_t,"xlm"),y_t.forEach(t),Gdr=r(I$e," \u2014 "),oQ=n(I$e,"A",{href:!0});var L_t=s(oQ);Odr=r(L_t,"TFXLMWithLMHeadModel"),L_t.forEach(t),Vdr=r(I$e," (XLM model)"),I$e.forEach(t),Xdr=i(le),k0=n(le,"LI",{});var q$e=s(k0);N1e=n(q$e,"STRONG",{});var x_t=s(N1e);zdr=r(x_t,"xlm-roberta"),x_t.forEach(t),Qdr=r(q$e," \u2014 "),rQ=n(q$e,"A",{href:!0});var $_t=s(rQ);Wdr=r($_t,"TFXLMRobertaForMaskedLM"),$_t.forEach(t),Hdr=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),Udr=i(le),S0=n(le,"LI",{});var N$e=s(S0);j1e=n(N$e,"STRONG",{});var k_t=s(j1e);Jdr=r(k_t,"xlnet"),k_t.forEach(t),Ydr=r(N$e," \u2014 "),tQ=n(N$e,"A",{href:!0});var S_t=s(tQ);Kdr=r(S_t,"TFXLNetLMHeadModel"),S_t.forEach(t),Zdr=r(N$e," (XLNet model)"),N$e.forEach(t),le.forEach(t),ecr=i(ml),T(R0.$$.fragment,ml),ml.forEach(t),fl.forEach(t),uIe=i(f),Vd=n(f,"H2",{class:!0});var MNe=s(Vd);B0=n(MNe,"A",{id:!0,class:!0,href:!0});var R_t=s(B0);D1e=n(R_t,"SPAN",{});var B_t=s(D1e);T(RL.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),ocr=i(MNe),G1e=n(MNe,"SPAN",{});var P_t=s(G1e);rcr=r(P_t,"TFAutoModelForCausalLM"),P_t.forEach(t),MNe.forEach(t),_Ie=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(BL.$$.fragment,gl),tcr=i(gl),Xd=n(gl,"P",{});var OK=s(Xd);acr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=n(OK,"A",{href:!0});var I_t=s(aQ);ncr=r(I_t,"from_pretrained()"),I_t.forEach(t),scr=r(OK," class method or the "),nQ=n(OK,"A",{href:!0});var q_t=s(nQ);lcr=r(q_t,"from_config()"),q_t.forEach(t),icr=r(OK,` class
method.`),OK.forEach(t),dcr=i(gl),PL=n(gl,"P",{});var ENe=s(PL);ccr=r(ENe,"This class cannot be instantiated directly using "),O1e=n(ENe,"CODE",{});var N_t=s(O1e);fcr=r(N_t,"__init__()"),N_t.forEach(t),mcr=r(ENe," (throws an error)."),ENe.forEach(t),gcr=i(gl),yt=n(gl,"DIV",{class:!0});var Xw=s(yt);T(IL.$$.fragment,Xw),hcr=i(Xw),V1e=n(Xw,"P",{});var j_t=s(V1e);pcr=r(j_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j_t.forEach(t),ucr=i(Xw),zd=n(Xw,"P",{});var VK=s(zd);_cr=r(VK,`Note:
Loading a model from its configuration file does `),X1e=n(VK,"STRONG",{});var D_t=s(X1e);bcr=r(D_t,"not"),D_t.forEach(t),vcr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(VK,"A",{href:!0});var G_t=s(sQ);Fcr=r(G_t,"from_pretrained()"),G_t.forEach(t),Tcr=r(VK," to load the model weights."),VK.forEach(t),Mcr=i(Xw),T(P0.$$.fragment,Xw),Xw.forEach(t),Ecr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(qL.$$.fragment,hl),Ccr=i(hl),z1e=n(hl,"P",{});var O_t=s(z1e);wcr=r(O_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O_t.forEach(t),Acr=i(hl),en=n(hl,"P",{});var zw=s(en);ycr=r(zw,"The model class to instantiate is selected based on the "),Q1e=n(zw,"CODE",{});var V_t=s(Q1e);Lcr=r(V_t,"model_type"),V_t.forEach(t),xcr=r(zw,` property of the config object (either
passed as an argument or loaded from `),W1e=n(zw,"CODE",{});var X_t=s(W1e);$cr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),kcr=r(zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(zw,"CODE",{});var z_t=s(H1e);Scr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Rcr=r(zw,":"),zw.forEach(t),Bcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);I0=n(Ce,"LI",{});var j$e=s(I0);U1e=n(j$e,"STRONG",{});var Q_t=s(U1e);Pcr=r(Q_t,"bert"),Q_t.forEach(t),Icr=r(j$e," \u2014 "),lQ=n(j$e,"A",{href:!0});var W_t=s(lQ);qcr=r(W_t,"TFBertLMHeadModel"),W_t.forEach(t),Ncr=r(j$e," (BERT model)"),j$e.forEach(t),jcr=i(Ce),q0=n(Ce,"LI",{});var D$e=s(q0);J1e=n(D$e,"STRONG",{});var H_t=s(J1e);Dcr=r(H_t,"camembert"),H_t.forEach(t),Gcr=r(D$e," \u2014 "),iQ=n(D$e,"A",{href:!0});var U_t=s(iQ);Ocr=r(U_t,"TFCamembertForCausalLM"),U_t.forEach(t),Vcr=r(D$e," (CamemBERT model)"),D$e.forEach(t),Xcr=i(Ce),N0=n(Ce,"LI",{});var G$e=s(N0);Y1e=n(G$e,"STRONG",{});var J_t=s(Y1e);zcr=r(J_t,"ctrl"),J_t.forEach(t),Qcr=r(G$e," \u2014 "),dQ=n(G$e,"A",{href:!0});var Y_t=s(dQ);Wcr=r(Y_t,"TFCTRLLMHeadModel"),Y_t.forEach(t),Hcr=r(G$e," (CTRL model)"),G$e.forEach(t),Ucr=i(Ce),j0=n(Ce,"LI",{});var O$e=s(j0);K1e=n(O$e,"STRONG",{});var K_t=s(K1e);Jcr=r(K_t,"gpt2"),K_t.forEach(t),Ycr=r(O$e," \u2014 "),cQ=n(O$e,"A",{href:!0});var Z_t=s(cQ);Kcr=r(Z_t,"TFGPT2LMHeadModel"),Z_t.forEach(t),Zcr=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),efr=i(Ce),D0=n(Ce,"LI",{});var V$e=s(D0);Z1e=n(V$e,"STRONG",{});var e1t=s(Z1e);ofr=r(e1t,"gptj"),e1t.forEach(t),rfr=r(V$e," \u2014 "),fQ=n(V$e,"A",{href:!0});var o1t=s(fQ);tfr=r(o1t,"TFGPTJForCausalLM"),o1t.forEach(t),afr=r(V$e," (GPT-J model)"),V$e.forEach(t),nfr=i(Ce),G0=n(Ce,"LI",{});var X$e=s(G0);ebe=n(X$e,"STRONG",{});var r1t=s(ebe);sfr=r(r1t,"openai-gpt"),r1t.forEach(t),lfr=r(X$e," \u2014 "),mQ=n(X$e,"A",{href:!0});var t1t=s(mQ);ifr=r(t1t,"TFOpenAIGPTLMHeadModel"),t1t.forEach(t),dfr=r(X$e," (OpenAI GPT model)"),X$e.forEach(t),cfr=i(Ce),O0=n(Ce,"LI",{});var z$e=s(O0);obe=n(z$e,"STRONG",{});var a1t=s(obe);ffr=r(a1t,"rembert"),a1t.forEach(t),mfr=r(z$e," \u2014 "),gQ=n(z$e,"A",{href:!0});var n1t=s(gQ);gfr=r(n1t,"TFRemBertForCausalLM"),n1t.forEach(t),hfr=r(z$e," (RemBERT model)"),z$e.forEach(t),pfr=i(Ce),V0=n(Ce,"LI",{});var Q$e=s(V0);rbe=n(Q$e,"STRONG",{});var s1t=s(rbe);ufr=r(s1t,"roberta"),s1t.forEach(t),_fr=r(Q$e," \u2014 "),hQ=n(Q$e,"A",{href:!0});var l1t=s(hQ);bfr=r(l1t,"TFRobertaForCausalLM"),l1t.forEach(t),vfr=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),Ffr=i(Ce),X0=n(Ce,"LI",{});var W$e=s(X0);tbe=n(W$e,"STRONG",{});var i1t=s(tbe);Tfr=r(i1t,"roformer"),i1t.forEach(t),Mfr=r(W$e," \u2014 "),pQ=n(W$e,"A",{href:!0});var d1t=s(pQ);Efr=r(d1t,"TFRoFormerForCausalLM"),d1t.forEach(t),Cfr=r(W$e," (RoFormer model)"),W$e.forEach(t),wfr=i(Ce),z0=n(Ce,"LI",{});var H$e=s(z0);abe=n(H$e,"STRONG",{});var c1t=s(abe);Afr=r(c1t,"transfo-xl"),c1t.forEach(t),yfr=r(H$e," \u2014 "),uQ=n(H$e,"A",{href:!0});var f1t=s(uQ);Lfr=r(f1t,"TFTransfoXLLMHeadModel"),f1t.forEach(t),xfr=r(H$e," (Transformer-XL model)"),H$e.forEach(t),$fr=i(Ce),Q0=n(Ce,"LI",{});var U$e=s(Q0);nbe=n(U$e,"STRONG",{});var m1t=s(nbe);kfr=r(m1t,"xlm"),m1t.forEach(t),Sfr=r(U$e," \u2014 "),_Q=n(U$e,"A",{href:!0});var g1t=s(_Q);Rfr=r(g1t,"TFXLMWithLMHeadModel"),g1t.forEach(t),Bfr=r(U$e," (XLM model)"),U$e.forEach(t),Pfr=i(Ce),W0=n(Ce,"LI",{});var J$e=s(W0);sbe=n(J$e,"STRONG",{});var h1t=s(sbe);Ifr=r(h1t,"xlnet"),h1t.forEach(t),qfr=r(J$e," \u2014 "),bQ=n(J$e,"A",{href:!0});var p1t=s(bQ);Nfr=r(p1t,"TFXLNetLMHeadModel"),p1t.forEach(t),jfr=r(J$e," (XLNet model)"),J$e.forEach(t),Ce.forEach(t),Dfr=i(hl),T(H0.$$.fragment,hl),hl.forEach(t),gl.forEach(t),bIe=i(f),Qd=n(f,"H2",{class:!0});var CNe=s(Qd);U0=n(CNe,"A",{id:!0,class:!0,href:!0});var u1t=s(U0);lbe=n(u1t,"SPAN",{});var _1t=s(lbe);T(NL.$$.fragment,_1t),_1t.forEach(t),u1t.forEach(t),Gfr=i(CNe),ibe=n(CNe,"SPAN",{});var b1t=s(ibe);Ofr=r(b1t,"TFAutoModelForImageClassification"),b1t.forEach(t),CNe.forEach(t),vIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(jL.$$.fragment,pl),Vfr=i(pl),Wd=n(pl,"P",{});var XK=s(Wd);Xfr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=n(XK,"A",{href:!0});var v1t=s(vQ);zfr=r(v1t,"from_pretrained()"),v1t.forEach(t),Qfr=r(XK," class method or the "),FQ=n(XK,"A",{href:!0});var F1t=s(FQ);Wfr=r(F1t,"from_config()"),F1t.forEach(t),Hfr=r(XK,` class
method.`),XK.forEach(t),Ufr=i(pl),DL=n(pl,"P",{});var wNe=s(DL);Jfr=r(wNe,"This class cannot be instantiated directly using "),dbe=n(wNe,"CODE",{});var T1t=s(dbe);Yfr=r(T1t,"__init__()"),T1t.forEach(t),Kfr=r(wNe," (throws an error)."),wNe.forEach(t),Zfr=i(pl),Lt=n(pl,"DIV",{class:!0});var Qw=s(Lt);T(GL.$$.fragment,Qw),emr=i(Qw),cbe=n(Qw,"P",{});var M1t=s(cbe);omr=r(M1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),M1t.forEach(t),rmr=i(Qw),Hd=n(Qw,"P",{});var zK=s(Hd);tmr=r(zK,`Note:
Loading a model from its configuration file does `),fbe=n(zK,"STRONG",{});var E1t=s(fbe);amr=r(E1t,"not"),E1t.forEach(t),nmr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(zK,"A",{href:!0});var C1t=s(TQ);smr=r(C1t,"from_pretrained()"),C1t.forEach(t),lmr=r(zK," to load the model weights."),zK.forEach(t),imr=i(Qw),T(J0.$$.fragment,Qw),Qw.forEach(t),dmr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(OL.$$.fragment,ul),cmr=i(ul),mbe=n(ul,"P",{});var w1t=s(mbe);fmr=r(w1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w1t.forEach(t),mmr=i(ul),on=n(ul,"P",{});var Ww=s(on);gmr=r(Ww,"The model class to instantiate is selected based on the "),gbe=n(Ww,"CODE",{});var A1t=s(gbe);hmr=r(A1t,"model_type"),A1t.forEach(t),pmr=r(Ww,` property of the config object (either
passed as an argument or loaded from `),hbe=n(Ww,"CODE",{});var y1t=s(hbe);umr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),_mr=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(Ww,"CODE",{});var L1t=s(pbe);bmr=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),vmr=r(Ww,":"),Ww.forEach(t),Fmr=i(ul),Ud=n(ul,"UL",{});var QK=s(Ud);Y0=n(QK,"LI",{});var Y$e=s(Y0);ube=n(Y$e,"STRONG",{});var x1t=s(ube);Tmr=r(x1t,"convnext"),x1t.forEach(t),Mmr=r(Y$e," \u2014 "),MQ=n(Y$e,"A",{href:!0});var $1t=s(MQ);Emr=r($1t,"TFConvNextForImageClassification"),$1t.forEach(t),Cmr=r(Y$e," (ConvNext model)"),Y$e.forEach(t),wmr=i(QK),K0=n(QK,"LI",{});var K$e=s(K0);_be=n(K$e,"STRONG",{});var k1t=s(_be);Amr=r(k1t,"data2vec-vision"),k1t.forEach(t),ymr=r(K$e," \u2014 "),EQ=n(K$e,"A",{href:!0});var S1t=s(EQ);Lmr=r(S1t,"TFData2VecVisionForImageClassification"),S1t.forEach(t),xmr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),$mr=i(QK),Z0=n(QK,"LI",{});var Z$e=s(Z0);bbe=n(Z$e,"STRONG",{});var R1t=s(bbe);kmr=r(R1t,"vit"),R1t.forEach(t),Smr=r(Z$e," \u2014 "),CQ=n(Z$e,"A",{href:!0});var B1t=s(CQ);Rmr=r(B1t,"TFViTForImageClassification"),B1t.forEach(t),Bmr=r(Z$e," (ViT model)"),Z$e.forEach(t),QK.forEach(t),Pmr=i(ul),T(eT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),FIe=i(f),Jd=n(f,"H2",{class:!0});var ANe=s(Jd);oT=n(ANe,"A",{id:!0,class:!0,href:!0});var P1t=s(oT);vbe=n(P1t,"SPAN",{});var I1t=s(vbe);T(VL.$$.fragment,I1t),I1t.forEach(t),P1t.forEach(t),Imr=i(ANe),Fbe=n(ANe,"SPAN",{});var q1t=s(Fbe);qmr=r(q1t,"TFAutoModelForMaskedLM"),q1t.forEach(t),ANe.forEach(t),TIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(XL.$$.fragment,_l),Nmr=i(_l),Yd=n(_l,"P",{});var WK=s(Yd);jmr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=n(WK,"A",{href:!0});var N1t=s(wQ);Dmr=r(N1t,"from_pretrained()"),N1t.forEach(t),Gmr=r(WK," class method or the "),AQ=n(WK,"A",{href:!0});var j1t=s(AQ);Omr=r(j1t,"from_config()"),j1t.forEach(t),Vmr=r(WK,` class
method.`),WK.forEach(t),Xmr=i(_l),zL=n(_l,"P",{});var yNe=s(zL);zmr=r(yNe,"This class cannot be instantiated directly using "),Tbe=n(yNe,"CODE",{});var D1t=s(Tbe);Qmr=r(D1t,"__init__()"),D1t.forEach(t),Wmr=r(yNe," (throws an error)."),yNe.forEach(t),Hmr=i(_l),xt=n(_l,"DIV",{class:!0});var Hw=s(xt);T(QL.$$.fragment,Hw),Umr=i(Hw),Mbe=n(Hw,"P",{});var G1t=s(Mbe);Jmr=r(G1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G1t.forEach(t),Ymr=i(Hw),Kd=n(Hw,"P",{});var HK=s(Kd);Kmr=r(HK,`Note:
Loading a model from its configuration file does `),Ebe=n(HK,"STRONG",{});var O1t=s(Ebe);Zmr=r(O1t,"not"),O1t.forEach(t),egr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(HK,"A",{href:!0});var V1t=s(yQ);ogr=r(V1t,"from_pretrained()"),V1t.forEach(t),rgr=r(HK," to load the model weights."),HK.forEach(t),tgr=i(Hw),T(rT.$$.fragment,Hw),Hw.forEach(t),agr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(WL.$$.fragment,bl),ngr=i(bl),Cbe=n(bl,"P",{});var X1t=s(Cbe);sgr=r(X1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X1t.forEach(t),lgr=i(bl),rn=n(bl,"P",{});var Uw=s(rn);igr=r(Uw,"The model class to instantiate is selected based on the "),wbe=n(Uw,"CODE",{});var z1t=s(wbe);dgr=r(z1t,"model_type"),z1t.forEach(t),cgr=r(Uw,` property of the config object (either
passed as an argument or loaded from `),Abe=n(Uw,"CODE",{});var Q1t=s(Abe);fgr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),mgr=r(Uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(Uw,"CODE",{});var W1t=s(ybe);ggr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),hgr=r(Uw,":"),Uw.forEach(t),pgr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);tT=n(fe,"LI",{});var eke=s(tT);Lbe=n(eke,"STRONG",{});var H1t=s(Lbe);ugr=r(H1t,"albert"),H1t.forEach(t),_gr=r(eke," \u2014 "),LQ=n(eke,"A",{href:!0});var U1t=s(LQ);bgr=r(U1t,"TFAlbertForMaskedLM"),U1t.forEach(t),vgr=r(eke," (ALBERT model)"),eke.forEach(t),Fgr=i(fe),aT=n(fe,"LI",{});var oke=s(aT);xbe=n(oke,"STRONG",{});var J1t=s(xbe);Tgr=r(J1t,"bert"),J1t.forEach(t),Mgr=r(oke," \u2014 "),xQ=n(oke,"A",{href:!0});var Y1t=s(xQ);Egr=r(Y1t,"TFBertForMaskedLM"),Y1t.forEach(t),Cgr=r(oke," (BERT model)"),oke.forEach(t),wgr=i(fe),nT=n(fe,"LI",{});var rke=s(nT);$be=n(rke,"STRONG",{});var K1t=s($be);Agr=r(K1t,"camembert"),K1t.forEach(t),ygr=r(rke," \u2014 "),$Q=n(rke,"A",{href:!0});var Z1t=s($Q);Lgr=r(Z1t,"TFCamembertForMaskedLM"),Z1t.forEach(t),xgr=r(rke," (CamemBERT model)"),rke.forEach(t),$gr=i(fe),sT=n(fe,"LI",{});var tke=s(sT);kbe=n(tke,"STRONG",{});var ebt=s(kbe);kgr=r(ebt,"convbert"),ebt.forEach(t),Sgr=r(tke," \u2014 "),kQ=n(tke,"A",{href:!0});var obt=s(kQ);Rgr=r(obt,"TFConvBertForMaskedLM"),obt.forEach(t),Bgr=r(tke," (ConvBERT model)"),tke.forEach(t),Pgr=i(fe),lT=n(fe,"LI",{});var ake=s(lT);Sbe=n(ake,"STRONG",{});var rbt=s(Sbe);Igr=r(rbt,"deberta"),rbt.forEach(t),qgr=r(ake," \u2014 "),SQ=n(ake,"A",{href:!0});var tbt=s(SQ);Ngr=r(tbt,"TFDebertaForMaskedLM"),tbt.forEach(t),jgr=r(ake," (DeBERTa model)"),ake.forEach(t),Dgr=i(fe),iT=n(fe,"LI",{});var nke=s(iT);Rbe=n(nke,"STRONG",{});var abt=s(Rbe);Ggr=r(abt,"deberta-v2"),abt.forEach(t),Ogr=r(nke," \u2014 "),RQ=n(nke,"A",{href:!0});var nbt=s(RQ);Vgr=r(nbt,"TFDebertaV2ForMaskedLM"),nbt.forEach(t),Xgr=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),zgr=i(fe),dT=n(fe,"LI",{});var ske=s(dT);Bbe=n(ske,"STRONG",{});var sbt=s(Bbe);Qgr=r(sbt,"distilbert"),sbt.forEach(t),Wgr=r(ske," \u2014 "),BQ=n(ske,"A",{href:!0});var lbt=s(BQ);Hgr=r(lbt,"TFDistilBertForMaskedLM"),lbt.forEach(t),Ugr=r(ske," (DistilBERT model)"),ske.forEach(t),Jgr=i(fe),cT=n(fe,"LI",{});var lke=s(cT);Pbe=n(lke,"STRONG",{});var ibt=s(Pbe);Ygr=r(ibt,"electra"),ibt.forEach(t),Kgr=r(lke," \u2014 "),PQ=n(lke,"A",{href:!0});var dbt=s(PQ);Zgr=r(dbt,"TFElectraForMaskedLM"),dbt.forEach(t),ehr=r(lke," (ELECTRA model)"),lke.forEach(t),ohr=i(fe),fT=n(fe,"LI",{});var ike=s(fT);Ibe=n(ike,"STRONG",{});var cbt=s(Ibe);rhr=r(cbt,"flaubert"),cbt.forEach(t),thr=r(ike," \u2014 "),IQ=n(ike,"A",{href:!0});var fbt=s(IQ);ahr=r(fbt,"TFFlaubertWithLMHeadModel"),fbt.forEach(t),nhr=r(ike," (FlauBERT model)"),ike.forEach(t),shr=i(fe),mT=n(fe,"LI",{});var dke=s(mT);qbe=n(dke,"STRONG",{});var mbt=s(qbe);lhr=r(mbt,"funnel"),mbt.forEach(t),ihr=r(dke," \u2014 "),qQ=n(dke,"A",{href:!0});var gbt=s(qQ);dhr=r(gbt,"TFFunnelForMaskedLM"),gbt.forEach(t),chr=r(dke," (Funnel Transformer model)"),dke.forEach(t),fhr=i(fe),gT=n(fe,"LI",{});var cke=s(gT);Nbe=n(cke,"STRONG",{});var hbt=s(Nbe);mhr=r(hbt,"layoutlm"),hbt.forEach(t),ghr=r(cke," \u2014 "),NQ=n(cke,"A",{href:!0});var pbt=s(NQ);hhr=r(pbt,"TFLayoutLMForMaskedLM"),pbt.forEach(t),phr=r(cke," (LayoutLM model)"),cke.forEach(t),uhr=i(fe),hT=n(fe,"LI",{});var fke=s(hT);jbe=n(fke,"STRONG",{});var ubt=s(jbe);_hr=r(ubt,"longformer"),ubt.forEach(t),bhr=r(fke," \u2014 "),jQ=n(fke,"A",{href:!0});var _bt=s(jQ);vhr=r(_bt,"TFLongformerForMaskedLM"),_bt.forEach(t),Fhr=r(fke," (Longformer model)"),fke.forEach(t),Thr=i(fe),pT=n(fe,"LI",{});var mke=s(pT);Dbe=n(mke,"STRONG",{});var bbt=s(Dbe);Mhr=r(bbt,"mobilebert"),bbt.forEach(t),Ehr=r(mke," \u2014 "),DQ=n(mke,"A",{href:!0});var vbt=s(DQ);Chr=r(vbt,"TFMobileBertForMaskedLM"),vbt.forEach(t),whr=r(mke," (MobileBERT model)"),mke.forEach(t),Ahr=i(fe),uT=n(fe,"LI",{});var gke=s(uT);Gbe=n(gke,"STRONG",{});var Fbt=s(Gbe);yhr=r(Fbt,"mpnet"),Fbt.forEach(t),Lhr=r(gke," \u2014 "),GQ=n(gke,"A",{href:!0});var Tbt=s(GQ);xhr=r(Tbt,"TFMPNetForMaskedLM"),Tbt.forEach(t),$hr=r(gke," (MPNet model)"),gke.forEach(t),khr=i(fe),_T=n(fe,"LI",{});var hke=s(_T);Obe=n(hke,"STRONG",{});var Mbt=s(Obe);Shr=r(Mbt,"rembert"),Mbt.forEach(t),Rhr=r(hke," \u2014 "),OQ=n(hke,"A",{href:!0});var Ebt=s(OQ);Bhr=r(Ebt,"TFRemBertForMaskedLM"),Ebt.forEach(t),Phr=r(hke," (RemBERT model)"),hke.forEach(t),Ihr=i(fe),bT=n(fe,"LI",{});var pke=s(bT);Vbe=n(pke,"STRONG",{});var Cbt=s(Vbe);qhr=r(Cbt,"roberta"),Cbt.forEach(t),Nhr=r(pke," \u2014 "),VQ=n(pke,"A",{href:!0});var wbt=s(VQ);jhr=r(wbt,"TFRobertaForMaskedLM"),wbt.forEach(t),Dhr=r(pke," (RoBERTa model)"),pke.forEach(t),Ghr=i(fe),vT=n(fe,"LI",{});var uke=s(vT);Xbe=n(uke,"STRONG",{});var Abt=s(Xbe);Ohr=r(Abt,"roformer"),Abt.forEach(t),Vhr=r(uke," \u2014 "),XQ=n(uke,"A",{href:!0});var ybt=s(XQ);Xhr=r(ybt,"TFRoFormerForMaskedLM"),ybt.forEach(t),zhr=r(uke," (RoFormer model)"),uke.forEach(t),Qhr=i(fe),FT=n(fe,"LI",{});var _ke=s(FT);zbe=n(_ke,"STRONG",{});var Lbt=s(zbe);Whr=r(Lbt,"tapas"),Lbt.forEach(t),Hhr=r(_ke," \u2014 "),zQ=n(_ke,"A",{href:!0});var xbt=s(zQ);Uhr=r(xbt,"TFTapasForMaskedLM"),xbt.forEach(t),Jhr=r(_ke," (TAPAS model)"),_ke.forEach(t),Yhr=i(fe),TT=n(fe,"LI",{});var bke=s(TT);Qbe=n(bke,"STRONG",{});var $bt=s(Qbe);Khr=r($bt,"xlm"),$bt.forEach(t),Zhr=r(bke," \u2014 "),QQ=n(bke,"A",{href:!0});var kbt=s(QQ);epr=r(kbt,"TFXLMWithLMHeadModel"),kbt.forEach(t),opr=r(bke," (XLM model)"),bke.forEach(t),rpr=i(fe),MT=n(fe,"LI",{});var vke=s(MT);Wbe=n(vke,"STRONG",{});var Sbt=s(Wbe);tpr=r(Sbt,"xlm-roberta"),Sbt.forEach(t),apr=r(vke," \u2014 "),WQ=n(vke,"A",{href:!0});var Rbt=s(WQ);npr=r(Rbt,"TFXLMRobertaForMaskedLM"),Rbt.forEach(t),spr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),fe.forEach(t),lpr=i(bl),T(ET.$$.fragment,bl),bl.forEach(t),_l.forEach(t),MIe=i(f),Zd=n(f,"H2",{class:!0});var LNe=s(Zd);CT=n(LNe,"A",{id:!0,class:!0,href:!0});var Bbt=s(CT);Hbe=n(Bbt,"SPAN",{});var Pbt=s(Hbe);T(HL.$$.fragment,Pbt),Pbt.forEach(t),Bbt.forEach(t),ipr=i(LNe),Ube=n(LNe,"SPAN",{});var Ibt=s(Ube);dpr=r(Ibt,"TFAutoModelForSeq2SeqLM"),Ibt.forEach(t),LNe.forEach(t),EIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(UL.$$.fragment,vl),cpr=i(vl),ec=n(vl,"P",{});var UK=s(ec);fpr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=n(UK,"A",{href:!0});var qbt=s(HQ);mpr=r(qbt,"from_pretrained()"),qbt.forEach(t),gpr=r(UK," class method or the "),UQ=n(UK,"A",{href:!0});var Nbt=s(UQ);hpr=r(Nbt,"from_config()"),Nbt.forEach(t),ppr=r(UK,` class
method.`),UK.forEach(t),upr=i(vl),JL=n(vl,"P",{});var xNe=s(JL);_pr=r(xNe,"This class cannot be instantiated directly using "),Jbe=n(xNe,"CODE",{});var jbt=s(Jbe);bpr=r(jbt,"__init__()"),jbt.forEach(t),vpr=r(xNe," (throws an error)."),xNe.forEach(t),Fpr=i(vl),$t=n(vl,"DIV",{class:!0});var Jw=s($t);T(YL.$$.fragment,Jw),Tpr=i(Jw),Ybe=n(Jw,"P",{});var Dbt=s(Ybe);Mpr=r(Dbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dbt.forEach(t),Epr=i(Jw),oc=n(Jw,"P",{});var JK=s(oc);Cpr=r(JK,`Note:
Loading a model from its configuration file does `),Kbe=n(JK,"STRONG",{});var Gbt=s(Kbe);wpr=r(Gbt,"not"),Gbt.forEach(t),Apr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(JK,"A",{href:!0});var Obt=s(JQ);ypr=r(Obt,"from_pretrained()"),Obt.forEach(t),Lpr=r(JK," to load the model weights."),JK.forEach(t),xpr=i(Jw),T(wT.$$.fragment,Jw),Jw.forEach(t),$pr=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(KL.$$.fragment,Fl),kpr=i(Fl),Zbe=n(Fl,"P",{});var Vbt=s(Zbe);Spr=r(Vbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vbt.forEach(t),Rpr=i(Fl),tn=n(Fl,"P",{});var Yw=s(tn);Bpr=r(Yw,"The model class to instantiate is selected based on the "),e4e=n(Yw,"CODE",{});var Xbt=s(e4e);Ppr=r(Xbt,"model_type"),Xbt.forEach(t),Ipr=r(Yw,` property of the config object (either
passed as an argument or loaded from `),o4e=n(Yw,"CODE",{});var zbt=s(o4e);qpr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Npr=r(Yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(Yw,"CODE",{});var Qbt=s(r4e);jpr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),Dpr=r(Yw,":"),Yw.forEach(t),Gpr=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);AT=n(Re,"LI",{});var Fke=s(AT);t4e=n(Fke,"STRONG",{});var Wbt=s(t4e);Opr=r(Wbt,"bart"),Wbt.forEach(t),Vpr=r(Fke," \u2014 "),YQ=n(Fke,"A",{href:!0});var Hbt=s(YQ);Xpr=r(Hbt,"TFBartForConditionalGeneration"),Hbt.forEach(t),zpr=r(Fke," (BART model)"),Fke.forEach(t),Qpr=i(Re),yT=n(Re,"LI",{});var Tke=s(yT);a4e=n(Tke,"STRONG",{});var Ubt=s(a4e);Wpr=r(Ubt,"blenderbot"),Ubt.forEach(t),Hpr=r(Tke," \u2014 "),KQ=n(Tke,"A",{href:!0});var Jbt=s(KQ);Upr=r(Jbt,"TFBlenderbotForConditionalGeneration"),Jbt.forEach(t),Jpr=r(Tke," (Blenderbot model)"),Tke.forEach(t),Ypr=i(Re),LT=n(Re,"LI",{});var Mke=s(LT);n4e=n(Mke,"STRONG",{});var Ybt=s(n4e);Kpr=r(Ybt,"blenderbot-small"),Ybt.forEach(t),Zpr=r(Mke," \u2014 "),ZQ=n(Mke,"A",{href:!0});var Kbt=s(ZQ);eur=r(Kbt,"TFBlenderbotSmallForConditionalGeneration"),Kbt.forEach(t),our=r(Mke," (BlenderbotSmall model)"),Mke.forEach(t),rur=i(Re),xT=n(Re,"LI",{});var Eke=s(xT);s4e=n(Eke,"STRONG",{});var Zbt=s(s4e);tur=r(Zbt,"encoder-decoder"),Zbt.forEach(t),aur=r(Eke," \u2014 "),eW=n(Eke,"A",{href:!0});var e4t=s(eW);nur=r(e4t,"TFEncoderDecoderModel"),e4t.forEach(t),sur=r(Eke," (Encoder decoder model)"),Eke.forEach(t),lur=i(Re),$T=n(Re,"LI",{});var Cke=s($T);l4e=n(Cke,"STRONG",{});var o4t=s(l4e);iur=r(o4t,"led"),o4t.forEach(t),dur=r(Cke," \u2014 "),oW=n(Cke,"A",{href:!0});var r4t=s(oW);cur=r(r4t,"TFLEDForConditionalGeneration"),r4t.forEach(t),fur=r(Cke," (LED model)"),Cke.forEach(t),mur=i(Re),kT=n(Re,"LI",{});var wke=s(kT);i4e=n(wke,"STRONG",{});var t4t=s(i4e);gur=r(t4t,"marian"),t4t.forEach(t),hur=r(wke," \u2014 "),rW=n(wke,"A",{href:!0});var a4t=s(rW);pur=r(a4t,"TFMarianMTModel"),a4t.forEach(t),uur=r(wke," (Marian model)"),wke.forEach(t),_ur=i(Re),ST=n(Re,"LI",{});var Ake=s(ST);d4e=n(Ake,"STRONG",{});var n4t=s(d4e);bur=r(n4t,"mbart"),n4t.forEach(t),vur=r(Ake," \u2014 "),tW=n(Ake,"A",{href:!0});var s4t=s(tW);Fur=r(s4t,"TFMBartForConditionalGeneration"),s4t.forEach(t),Tur=r(Ake," (mBART model)"),Ake.forEach(t),Mur=i(Re),RT=n(Re,"LI",{});var yke=s(RT);c4e=n(yke,"STRONG",{});var l4t=s(c4e);Eur=r(l4t,"mt5"),l4t.forEach(t),Cur=r(yke," \u2014 "),aW=n(yke,"A",{href:!0});var i4t=s(aW);wur=r(i4t,"TFMT5ForConditionalGeneration"),i4t.forEach(t),Aur=r(yke," (mT5 model)"),yke.forEach(t),yur=i(Re),BT=n(Re,"LI",{});var Lke=s(BT);f4e=n(Lke,"STRONG",{});var d4t=s(f4e);Lur=r(d4t,"pegasus"),d4t.forEach(t),xur=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var c4t=s(nW);$ur=r(c4t,"TFPegasusForConditionalGeneration"),c4t.forEach(t),kur=r(Lke," (Pegasus model)"),Lke.forEach(t),Sur=i(Re),PT=n(Re,"LI",{});var xke=s(PT);m4e=n(xke,"STRONG",{});var f4t=s(m4e);Rur=r(f4t,"t5"),f4t.forEach(t),Bur=r(xke," \u2014 "),sW=n(xke,"A",{href:!0});var m4t=s(sW);Pur=r(m4t,"TFT5ForConditionalGeneration"),m4t.forEach(t),Iur=r(xke," (T5 model)"),xke.forEach(t),Re.forEach(t),qur=i(Fl),T(IT.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),CIe=i(f),rc=n(f,"H2",{class:!0});var $Ne=s(rc);qT=n($Ne,"A",{id:!0,class:!0,href:!0});var g4t=s(qT);g4e=n(g4t,"SPAN",{});var h4t=s(g4e);T(ZL.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),Nur=i($Ne),h4e=n($Ne,"SPAN",{});var p4t=s(h4e);jur=r(p4t,"TFAutoModelForSequenceClassification"),p4t.forEach(t),$Ne.forEach(t),wIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(e8.$$.fragment,Tl),Dur=i(Tl),tc=n(Tl,"P",{});var YK=s(tc);Gur=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=n(YK,"A",{href:!0});var u4t=s(lW);Our=r(u4t,"from_pretrained()"),u4t.forEach(t),Vur=r(YK," class method or the "),iW=n(YK,"A",{href:!0});var _4t=s(iW);Xur=r(_4t,"from_config()"),_4t.forEach(t),zur=r(YK,` class
method.`),YK.forEach(t),Qur=i(Tl),o8=n(Tl,"P",{});var kNe=s(o8);Wur=r(kNe,"This class cannot be instantiated directly using "),p4e=n(kNe,"CODE",{});var b4t=s(p4e);Hur=r(b4t,"__init__()"),b4t.forEach(t),Uur=r(kNe," (throws an error)."),kNe.forEach(t),Jur=i(Tl),kt=n(Tl,"DIV",{class:!0});var Kw=s(kt);T(r8.$$.fragment,Kw),Yur=i(Kw),u4e=n(Kw,"P",{});var v4t=s(u4e);Kur=r(v4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v4t.forEach(t),Zur=i(Kw),ac=n(Kw,"P",{});var KK=s(ac);e_r=r(KK,`Note:
Loading a model from its configuration file does `),_4e=n(KK,"STRONG",{});var F4t=s(_4e);o_r=r(F4t,"not"),F4t.forEach(t),r_r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(KK,"A",{href:!0});var T4t=s(dW);t_r=r(T4t,"from_pretrained()"),T4t.forEach(t),a_r=r(KK," to load the model weights."),KK.forEach(t),n_r=i(Kw),T(NT.$$.fragment,Kw),Kw.forEach(t),s_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(t8.$$.fragment,Ml),l_r=i(Ml),b4e=n(Ml,"P",{});var M4t=s(b4e);i_r=r(M4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M4t.forEach(t),d_r=i(Ml),an=n(Ml,"P",{});var Zw=s(an);c_r=r(Zw,"The model class to instantiate is selected based on the "),v4e=n(Zw,"CODE",{});var E4t=s(v4e);f_r=r(E4t,"model_type"),E4t.forEach(t),m_r=r(Zw,` property of the config object (either
passed as an argument or loaded from `),F4e=n(Zw,"CODE",{});var C4t=s(F4e);g_r=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),h_r=r(Zw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(Zw,"CODE",{});var w4t=s(T4e);p_r=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),u_r=r(Zw,":"),Zw.forEach(t),__r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);jT=n(re,"LI",{});var $ke=s(jT);M4e=n($ke,"STRONG",{});var A4t=s(M4e);b_r=r(A4t,"albert"),A4t.forEach(t),v_r=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var y4t=s(cW);F_r=r(y4t,"TFAlbertForSequenceClassification"),y4t.forEach(t),T_r=r($ke," (ALBERT model)"),$ke.forEach(t),M_r=i(re),DT=n(re,"LI",{});var kke=s(DT);E4e=n(kke,"STRONG",{});var L4t=s(E4e);E_r=r(L4t,"bert"),L4t.forEach(t),C_r=r(kke," \u2014 "),fW=n(kke,"A",{href:!0});var x4t=s(fW);w_r=r(x4t,"TFBertForSequenceClassification"),x4t.forEach(t),A_r=r(kke," (BERT model)"),kke.forEach(t),y_r=i(re),GT=n(re,"LI",{});var Ske=s(GT);C4e=n(Ske,"STRONG",{});var $4t=s(C4e);L_r=r($4t,"camembert"),$4t.forEach(t),x_r=r(Ske," \u2014 "),mW=n(Ske,"A",{href:!0});var k4t=s(mW);$_r=r(k4t,"TFCamembertForSequenceClassification"),k4t.forEach(t),k_r=r(Ske," (CamemBERT model)"),Ske.forEach(t),S_r=i(re),OT=n(re,"LI",{});var Rke=s(OT);w4e=n(Rke,"STRONG",{});var S4t=s(w4e);R_r=r(S4t,"convbert"),S4t.forEach(t),B_r=r(Rke," \u2014 "),gW=n(Rke,"A",{href:!0});var R4t=s(gW);P_r=r(R4t,"TFConvBertForSequenceClassification"),R4t.forEach(t),I_r=r(Rke," (ConvBERT model)"),Rke.forEach(t),q_r=i(re),VT=n(re,"LI",{});var Bke=s(VT);A4e=n(Bke,"STRONG",{});var B4t=s(A4e);N_r=r(B4t,"ctrl"),B4t.forEach(t),j_r=r(Bke," \u2014 "),hW=n(Bke,"A",{href:!0});var P4t=s(hW);D_r=r(P4t,"TFCTRLForSequenceClassification"),P4t.forEach(t),G_r=r(Bke," (CTRL model)"),Bke.forEach(t),O_r=i(re),XT=n(re,"LI",{});var Pke=s(XT);y4e=n(Pke,"STRONG",{});var I4t=s(y4e);V_r=r(I4t,"deberta"),I4t.forEach(t),X_r=r(Pke," \u2014 "),pW=n(Pke,"A",{href:!0});var q4t=s(pW);z_r=r(q4t,"TFDebertaForSequenceClassification"),q4t.forEach(t),Q_r=r(Pke," (DeBERTa model)"),Pke.forEach(t),W_r=i(re),zT=n(re,"LI",{});var Ike=s(zT);L4e=n(Ike,"STRONG",{});var N4t=s(L4e);H_r=r(N4t,"deberta-v2"),N4t.forEach(t),U_r=r(Ike," \u2014 "),uW=n(Ike,"A",{href:!0});var j4t=s(uW);J_r=r(j4t,"TFDebertaV2ForSequenceClassification"),j4t.forEach(t),Y_r=r(Ike," (DeBERTa-v2 model)"),Ike.forEach(t),K_r=i(re),QT=n(re,"LI",{});var qke=s(QT);x4e=n(qke,"STRONG",{});var D4t=s(x4e);Z_r=r(D4t,"distilbert"),D4t.forEach(t),e1r=r(qke," \u2014 "),_W=n(qke,"A",{href:!0});var G4t=s(_W);o1r=r(G4t,"TFDistilBertForSequenceClassification"),G4t.forEach(t),r1r=r(qke," (DistilBERT model)"),qke.forEach(t),t1r=i(re),WT=n(re,"LI",{});var Nke=s(WT);$4e=n(Nke,"STRONG",{});var O4t=s($4e);a1r=r(O4t,"electra"),O4t.forEach(t),n1r=r(Nke," \u2014 "),bW=n(Nke,"A",{href:!0});var V4t=s(bW);s1r=r(V4t,"TFElectraForSequenceClassification"),V4t.forEach(t),l1r=r(Nke," (ELECTRA model)"),Nke.forEach(t),i1r=i(re),HT=n(re,"LI",{});var jke=s(HT);k4e=n(jke,"STRONG",{});var X4t=s(k4e);d1r=r(X4t,"flaubert"),X4t.forEach(t),c1r=r(jke," \u2014 "),vW=n(jke,"A",{href:!0});var z4t=s(vW);f1r=r(z4t,"TFFlaubertForSequenceClassification"),z4t.forEach(t),m1r=r(jke," (FlauBERT model)"),jke.forEach(t),g1r=i(re),UT=n(re,"LI",{});var Dke=s(UT);S4e=n(Dke,"STRONG",{});var Q4t=s(S4e);h1r=r(Q4t,"funnel"),Q4t.forEach(t),p1r=r(Dke," \u2014 "),FW=n(Dke,"A",{href:!0});var W4t=s(FW);u1r=r(W4t,"TFFunnelForSequenceClassification"),W4t.forEach(t),_1r=r(Dke," (Funnel Transformer model)"),Dke.forEach(t),b1r=i(re),JT=n(re,"LI",{});var Gke=s(JT);R4e=n(Gke,"STRONG",{});var H4t=s(R4e);v1r=r(H4t,"gpt2"),H4t.forEach(t),F1r=r(Gke," \u2014 "),TW=n(Gke,"A",{href:!0});var U4t=s(TW);T1r=r(U4t,"TFGPT2ForSequenceClassification"),U4t.forEach(t),M1r=r(Gke," (OpenAI GPT-2 model)"),Gke.forEach(t),E1r=i(re),YT=n(re,"LI",{});var Oke=s(YT);B4e=n(Oke,"STRONG",{});var J4t=s(B4e);C1r=r(J4t,"gptj"),J4t.forEach(t),w1r=r(Oke," \u2014 "),MW=n(Oke,"A",{href:!0});var Y4t=s(MW);A1r=r(Y4t,"TFGPTJForSequenceClassification"),Y4t.forEach(t),y1r=r(Oke," (GPT-J model)"),Oke.forEach(t),L1r=i(re),KT=n(re,"LI",{});var Vke=s(KT);P4e=n(Vke,"STRONG",{});var K4t=s(P4e);x1r=r(K4t,"layoutlm"),K4t.forEach(t),$1r=r(Vke," \u2014 "),EW=n(Vke,"A",{href:!0});var Z4t=s(EW);k1r=r(Z4t,"TFLayoutLMForSequenceClassification"),Z4t.forEach(t),S1r=r(Vke," (LayoutLM model)"),Vke.forEach(t),R1r=i(re),ZT=n(re,"LI",{});var Xke=s(ZT);I4e=n(Xke,"STRONG",{});var e2t=s(I4e);B1r=r(e2t,"longformer"),e2t.forEach(t),P1r=r(Xke," \u2014 "),CW=n(Xke,"A",{href:!0});var o2t=s(CW);I1r=r(o2t,"TFLongformerForSequenceClassification"),o2t.forEach(t),q1r=r(Xke," (Longformer model)"),Xke.forEach(t),N1r=i(re),e7=n(re,"LI",{});var zke=s(e7);q4e=n(zke,"STRONG",{});var r2t=s(q4e);j1r=r(r2t,"mobilebert"),r2t.forEach(t),D1r=r(zke," \u2014 "),wW=n(zke,"A",{href:!0});var t2t=s(wW);G1r=r(t2t,"TFMobileBertForSequenceClassification"),t2t.forEach(t),O1r=r(zke," (MobileBERT model)"),zke.forEach(t),V1r=i(re),o7=n(re,"LI",{});var Qke=s(o7);N4e=n(Qke,"STRONG",{});var a2t=s(N4e);X1r=r(a2t,"mpnet"),a2t.forEach(t),z1r=r(Qke," \u2014 "),AW=n(Qke,"A",{href:!0});var n2t=s(AW);Q1r=r(n2t,"TFMPNetForSequenceClassification"),n2t.forEach(t),W1r=r(Qke," (MPNet model)"),Qke.forEach(t),H1r=i(re),r7=n(re,"LI",{});var Wke=s(r7);j4e=n(Wke,"STRONG",{});var s2t=s(j4e);U1r=r(s2t,"openai-gpt"),s2t.forEach(t),J1r=r(Wke," \u2014 "),yW=n(Wke,"A",{href:!0});var l2t=s(yW);Y1r=r(l2t,"TFOpenAIGPTForSequenceClassification"),l2t.forEach(t),K1r=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),Z1r=i(re),t7=n(re,"LI",{});var Hke=s(t7);D4e=n(Hke,"STRONG",{});var i2t=s(D4e);ebr=r(i2t,"rembert"),i2t.forEach(t),obr=r(Hke," \u2014 "),LW=n(Hke,"A",{href:!0});var d2t=s(LW);rbr=r(d2t,"TFRemBertForSequenceClassification"),d2t.forEach(t),tbr=r(Hke," (RemBERT model)"),Hke.forEach(t),abr=i(re),a7=n(re,"LI",{});var Uke=s(a7);G4e=n(Uke,"STRONG",{});var c2t=s(G4e);nbr=r(c2t,"roberta"),c2t.forEach(t),sbr=r(Uke," \u2014 "),xW=n(Uke,"A",{href:!0});var f2t=s(xW);lbr=r(f2t,"TFRobertaForSequenceClassification"),f2t.forEach(t),ibr=r(Uke," (RoBERTa model)"),Uke.forEach(t),dbr=i(re),n7=n(re,"LI",{});var Jke=s(n7);O4e=n(Jke,"STRONG",{});var m2t=s(O4e);cbr=r(m2t,"roformer"),m2t.forEach(t),fbr=r(Jke," \u2014 "),$W=n(Jke,"A",{href:!0});var g2t=s($W);mbr=r(g2t,"TFRoFormerForSequenceClassification"),g2t.forEach(t),gbr=r(Jke," (RoFormer model)"),Jke.forEach(t),hbr=i(re),s7=n(re,"LI",{});var Yke=s(s7);V4e=n(Yke,"STRONG",{});var h2t=s(V4e);pbr=r(h2t,"tapas"),h2t.forEach(t),ubr=r(Yke," \u2014 "),kW=n(Yke,"A",{href:!0});var p2t=s(kW);_br=r(p2t,"TFTapasForSequenceClassification"),p2t.forEach(t),bbr=r(Yke," (TAPAS model)"),Yke.forEach(t),vbr=i(re),l7=n(re,"LI",{});var Kke=s(l7);X4e=n(Kke,"STRONG",{});var u2t=s(X4e);Fbr=r(u2t,"transfo-xl"),u2t.forEach(t),Tbr=r(Kke," \u2014 "),SW=n(Kke,"A",{href:!0});var _2t=s(SW);Mbr=r(_2t,"TFTransfoXLForSequenceClassification"),_2t.forEach(t),Ebr=r(Kke," (Transformer-XL model)"),Kke.forEach(t),Cbr=i(re),i7=n(re,"LI",{});var Zke=s(i7);z4e=n(Zke,"STRONG",{});var b2t=s(z4e);wbr=r(b2t,"xlm"),b2t.forEach(t),Abr=r(Zke," \u2014 "),RW=n(Zke,"A",{href:!0});var v2t=s(RW);ybr=r(v2t,"TFXLMForSequenceClassification"),v2t.forEach(t),Lbr=r(Zke," (XLM model)"),Zke.forEach(t),xbr=i(re),d7=n(re,"LI",{});var eSe=s(d7);Q4e=n(eSe,"STRONG",{});var F2t=s(Q4e);$br=r(F2t,"xlm-roberta"),F2t.forEach(t),kbr=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var T2t=s(BW);Sbr=r(T2t,"TFXLMRobertaForSequenceClassification"),T2t.forEach(t),Rbr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),Bbr=i(re),c7=n(re,"LI",{});var oSe=s(c7);W4e=n(oSe,"STRONG",{});var M2t=s(W4e);Pbr=r(M2t,"xlnet"),M2t.forEach(t),Ibr=r(oSe," \u2014 "),PW=n(oSe,"A",{href:!0});var E2t=s(PW);qbr=r(E2t,"TFXLNetForSequenceClassification"),E2t.forEach(t),Nbr=r(oSe," (XLNet model)"),oSe.forEach(t),re.forEach(t),jbr=i(Ml),T(f7.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),AIe=i(f),nc=n(f,"H2",{class:!0});var SNe=s(nc);m7=n(SNe,"A",{id:!0,class:!0,href:!0});var C2t=s(m7);H4e=n(C2t,"SPAN",{});var w2t=s(H4e);T(a8.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),Dbr=i(SNe),U4e=n(SNe,"SPAN",{});var A2t=s(U4e);Gbr=r(A2t,"TFAutoModelForMultipleChoice"),A2t.forEach(t),SNe.forEach(t),yIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(n8.$$.fragment,El),Obr=i(El),sc=n(El,"P",{});var ZK=s(sc);Vbr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=n(ZK,"A",{href:!0});var y2t=s(IW);Xbr=r(y2t,"from_pretrained()"),y2t.forEach(t),zbr=r(ZK," class method or the "),qW=n(ZK,"A",{href:!0});var L2t=s(qW);Qbr=r(L2t,"from_config()"),L2t.forEach(t),Wbr=r(ZK,` class
method.`),ZK.forEach(t),Hbr=i(El),s8=n(El,"P",{});var RNe=s(s8);Ubr=r(RNe,"This class cannot be instantiated directly using "),J4e=n(RNe,"CODE",{});var x2t=s(J4e);Jbr=r(x2t,"__init__()"),x2t.forEach(t),Ybr=r(RNe," (throws an error)."),RNe.forEach(t),Kbr=i(El),St=n(El,"DIV",{class:!0});var eA=s(St);T(l8.$$.fragment,eA),Zbr=i(eA),Y4e=n(eA,"P",{});var $2t=s(Y4e);e4r=r($2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$2t.forEach(t),o4r=i(eA),lc=n(eA,"P",{});var eZ=s(lc);r4r=r(eZ,`Note:
Loading a model from its configuration file does `),K4e=n(eZ,"STRONG",{});var k2t=s(K4e);t4r=r(k2t,"not"),k2t.forEach(t),a4r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(eZ,"A",{href:!0});var S2t=s(NW);n4r=r(S2t,"from_pretrained()"),S2t.forEach(t),s4r=r(eZ," to load the model weights."),eZ.forEach(t),l4r=i(eA),T(g7.$$.fragment,eA),eA.forEach(t),i4r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(i8.$$.fragment,Cl),d4r=i(Cl),Z4e=n(Cl,"P",{});var R2t=s(Z4e);c4r=r(R2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R2t.forEach(t),f4r=i(Cl),nn=n(Cl,"P",{});var oA=s(nn);m4r=r(oA,"The model class to instantiate is selected based on the "),e2e=n(oA,"CODE",{});var B2t=s(e2e);g4r=r(B2t,"model_type"),B2t.forEach(t),h4r=r(oA,` property of the config object (either
passed as an argument or loaded from `),o2e=n(oA,"CODE",{});var P2t=s(o2e);p4r=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),u4r=r(oA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(oA,"CODE",{});var I2t=s(r2e);_4r=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),b4r=r(oA,":"),oA.forEach(t),v4r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);h7=n(_e,"LI",{});var rSe=s(h7);t2e=n(rSe,"STRONG",{});var q2t=s(t2e);F4r=r(q2t,"albert"),q2t.forEach(t),T4r=r(rSe," \u2014 "),jW=n(rSe,"A",{href:!0});var N2t=s(jW);M4r=r(N2t,"TFAlbertForMultipleChoice"),N2t.forEach(t),E4r=r(rSe," (ALBERT model)"),rSe.forEach(t),C4r=i(_e),p7=n(_e,"LI",{});var tSe=s(p7);a2e=n(tSe,"STRONG",{});var j2t=s(a2e);w4r=r(j2t,"bert"),j2t.forEach(t),A4r=r(tSe," \u2014 "),DW=n(tSe,"A",{href:!0});var D2t=s(DW);y4r=r(D2t,"TFBertForMultipleChoice"),D2t.forEach(t),L4r=r(tSe," (BERT model)"),tSe.forEach(t),x4r=i(_e),u7=n(_e,"LI",{});var aSe=s(u7);n2e=n(aSe,"STRONG",{});var G2t=s(n2e);$4r=r(G2t,"camembert"),G2t.forEach(t),k4r=r(aSe," \u2014 "),GW=n(aSe,"A",{href:!0});var O2t=s(GW);S4r=r(O2t,"TFCamembertForMultipleChoice"),O2t.forEach(t),R4r=r(aSe," (CamemBERT model)"),aSe.forEach(t),B4r=i(_e),_7=n(_e,"LI",{});var nSe=s(_7);s2e=n(nSe,"STRONG",{});var V2t=s(s2e);P4r=r(V2t,"convbert"),V2t.forEach(t),I4r=r(nSe," \u2014 "),OW=n(nSe,"A",{href:!0});var X2t=s(OW);q4r=r(X2t,"TFConvBertForMultipleChoice"),X2t.forEach(t),N4r=r(nSe," (ConvBERT model)"),nSe.forEach(t),j4r=i(_e),b7=n(_e,"LI",{});var sSe=s(b7);l2e=n(sSe,"STRONG",{});var z2t=s(l2e);D4r=r(z2t,"distilbert"),z2t.forEach(t),G4r=r(sSe," \u2014 "),VW=n(sSe,"A",{href:!0});var Q2t=s(VW);O4r=r(Q2t,"TFDistilBertForMultipleChoice"),Q2t.forEach(t),V4r=r(sSe," (DistilBERT model)"),sSe.forEach(t),X4r=i(_e),v7=n(_e,"LI",{});var lSe=s(v7);i2e=n(lSe,"STRONG",{});var W2t=s(i2e);z4r=r(W2t,"electra"),W2t.forEach(t),Q4r=r(lSe," \u2014 "),XW=n(lSe,"A",{href:!0});var H2t=s(XW);W4r=r(H2t,"TFElectraForMultipleChoice"),H2t.forEach(t),H4r=r(lSe," (ELECTRA model)"),lSe.forEach(t),U4r=i(_e),F7=n(_e,"LI",{});var iSe=s(F7);d2e=n(iSe,"STRONG",{});var U2t=s(d2e);J4r=r(U2t,"flaubert"),U2t.forEach(t),Y4r=r(iSe," \u2014 "),zW=n(iSe,"A",{href:!0});var J2t=s(zW);K4r=r(J2t,"TFFlaubertForMultipleChoice"),J2t.forEach(t),Z4r=r(iSe," (FlauBERT model)"),iSe.forEach(t),e2r=i(_e),T7=n(_e,"LI",{});var dSe=s(T7);c2e=n(dSe,"STRONG",{});var Y2t=s(c2e);o2r=r(Y2t,"funnel"),Y2t.forEach(t),r2r=r(dSe," \u2014 "),QW=n(dSe,"A",{href:!0});var K2t=s(QW);t2r=r(K2t,"TFFunnelForMultipleChoice"),K2t.forEach(t),a2r=r(dSe," (Funnel Transformer model)"),dSe.forEach(t),n2r=i(_e),M7=n(_e,"LI",{});var cSe=s(M7);f2e=n(cSe,"STRONG",{});var Z2t=s(f2e);s2r=r(Z2t,"longformer"),Z2t.forEach(t),l2r=r(cSe," \u2014 "),WW=n(cSe,"A",{href:!0});var e5t=s(WW);i2r=r(e5t,"TFLongformerForMultipleChoice"),e5t.forEach(t),d2r=r(cSe," (Longformer model)"),cSe.forEach(t),c2r=i(_e),E7=n(_e,"LI",{});var fSe=s(E7);m2e=n(fSe,"STRONG",{});var o5t=s(m2e);f2r=r(o5t,"mobilebert"),o5t.forEach(t),m2r=r(fSe," \u2014 "),HW=n(fSe,"A",{href:!0});var r5t=s(HW);g2r=r(r5t,"TFMobileBertForMultipleChoice"),r5t.forEach(t),h2r=r(fSe," (MobileBERT model)"),fSe.forEach(t),p2r=i(_e),C7=n(_e,"LI",{});var mSe=s(C7);g2e=n(mSe,"STRONG",{});var t5t=s(g2e);u2r=r(t5t,"mpnet"),t5t.forEach(t),_2r=r(mSe," \u2014 "),UW=n(mSe,"A",{href:!0});var a5t=s(UW);b2r=r(a5t,"TFMPNetForMultipleChoice"),a5t.forEach(t),v2r=r(mSe," (MPNet model)"),mSe.forEach(t),F2r=i(_e),w7=n(_e,"LI",{});var gSe=s(w7);h2e=n(gSe,"STRONG",{});var n5t=s(h2e);T2r=r(n5t,"rembert"),n5t.forEach(t),M2r=r(gSe," \u2014 "),JW=n(gSe,"A",{href:!0});var s5t=s(JW);E2r=r(s5t,"TFRemBertForMultipleChoice"),s5t.forEach(t),C2r=r(gSe," (RemBERT model)"),gSe.forEach(t),w2r=i(_e),A7=n(_e,"LI",{});var hSe=s(A7);p2e=n(hSe,"STRONG",{});var l5t=s(p2e);A2r=r(l5t,"roberta"),l5t.forEach(t),y2r=r(hSe," \u2014 "),YW=n(hSe,"A",{href:!0});var i5t=s(YW);L2r=r(i5t,"TFRobertaForMultipleChoice"),i5t.forEach(t),x2r=r(hSe," (RoBERTa model)"),hSe.forEach(t),$2r=i(_e),y7=n(_e,"LI",{});var pSe=s(y7);u2e=n(pSe,"STRONG",{});var d5t=s(u2e);k2r=r(d5t,"roformer"),d5t.forEach(t),S2r=r(pSe," \u2014 "),KW=n(pSe,"A",{href:!0});var c5t=s(KW);R2r=r(c5t,"TFRoFormerForMultipleChoice"),c5t.forEach(t),B2r=r(pSe," (RoFormer model)"),pSe.forEach(t),P2r=i(_e),L7=n(_e,"LI",{});var uSe=s(L7);_2e=n(uSe,"STRONG",{});var f5t=s(_2e);I2r=r(f5t,"xlm"),f5t.forEach(t),q2r=r(uSe," \u2014 "),ZW=n(uSe,"A",{href:!0});var m5t=s(ZW);N2r=r(m5t,"TFXLMForMultipleChoice"),m5t.forEach(t),j2r=r(uSe," (XLM model)"),uSe.forEach(t),D2r=i(_e),x7=n(_e,"LI",{});var _Se=s(x7);b2e=n(_Se,"STRONG",{});var g5t=s(b2e);G2r=r(g5t,"xlm-roberta"),g5t.forEach(t),O2r=r(_Se," \u2014 "),eH=n(_Se,"A",{href:!0});var h5t=s(eH);V2r=r(h5t,"TFXLMRobertaForMultipleChoice"),h5t.forEach(t),X2r=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),z2r=i(_e),$7=n(_e,"LI",{});var bSe=s($7);v2e=n(bSe,"STRONG",{});var p5t=s(v2e);Q2r=r(p5t,"xlnet"),p5t.forEach(t),W2r=r(bSe," \u2014 "),oH=n(bSe,"A",{href:!0});var u5t=s(oH);H2r=r(u5t,"TFXLNetForMultipleChoice"),u5t.forEach(t),U2r=r(bSe," (XLNet model)"),bSe.forEach(t),_e.forEach(t),J2r=i(Cl),T(k7.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),LIe=i(f),ic=n(f,"H2",{class:!0});var BNe=s(ic);S7=n(BNe,"A",{id:!0,class:!0,href:!0});var _5t=s(S7);F2e=n(_5t,"SPAN",{});var b5t=s(F2e);T(d8.$$.fragment,b5t),b5t.forEach(t),_5t.forEach(t),Y2r=i(BNe),T2e=n(BNe,"SPAN",{});var v5t=s(T2e);K2r=r(v5t,"TFAutoModelForNextSentencePrediction"),v5t.forEach(t),BNe.forEach(t),xIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(c8.$$.fragment,wl),Z2r=i(wl),dc=n(wl,"P",{});var oZ=s(dc);e5r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=n(oZ,"A",{href:!0});var F5t=s(rH);o5r=r(F5t,"from_pretrained()"),F5t.forEach(t),r5r=r(oZ," class method or the "),tH=n(oZ,"A",{href:!0});var T5t=s(tH);t5r=r(T5t,"from_config()"),T5t.forEach(t),a5r=r(oZ,` class
method.`),oZ.forEach(t),n5r=i(wl),f8=n(wl,"P",{});var PNe=s(f8);s5r=r(PNe,"This class cannot be instantiated directly using "),M2e=n(PNe,"CODE",{});var M5t=s(M2e);l5r=r(M5t,"__init__()"),M5t.forEach(t),i5r=r(PNe," (throws an error)."),PNe.forEach(t),d5r=i(wl),Rt=n(wl,"DIV",{class:!0});var rA=s(Rt);T(m8.$$.fragment,rA),c5r=i(rA),E2e=n(rA,"P",{});var E5t=s(E2e);f5r=r(E5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),E5t.forEach(t),m5r=i(rA),cc=n(rA,"P",{});var rZ=s(cc);g5r=r(rZ,`Note:
Loading a model from its configuration file does `),C2e=n(rZ,"STRONG",{});var C5t=s(C2e);h5r=r(C5t,"not"),C5t.forEach(t),p5r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(rZ,"A",{href:!0});var w5t=s(aH);u5r=r(w5t,"from_pretrained()"),w5t.forEach(t),_5r=r(rZ," to load the model weights."),rZ.forEach(t),b5r=i(rA),T(R7.$$.fragment,rA),rA.forEach(t),v5r=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(g8.$$.fragment,Al),F5r=i(Al),w2e=n(Al,"P",{});var A5t=s(w2e);T5r=r(A5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),A5t.forEach(t),M5r=i(Al),sn=n(Al,"P",{});var tA=s(sn);E5r=r(tA,"The model class to instantiate is selected based on the "),A2e=n(tA,"CODE",{});var y5t=s(A2e);C5r=r(y5t,"model_type"),y5t.forEach(t),w5r=r(tA,` property of the config object (either
passed as an argument or loaded from `),y2e=n(tA,"CODE",{});var L5t=s(y2e);A5r=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),y5r=r(tA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(tA,"CODE",{});var x5t=s(L2e);L5r=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),x5r=r(tA,":"),tA.forEach(t),$5r=i(Al),h8=n(Al,"UL",{});var INe=s(h8);B7=n(INe,"LI",{});var vSe=s(B7);x2e=n(vSe,"STRONG",{});var $5t=s(x2e);k5r=r($5t,"bert"),$5t.forEach(t),S5r=r(vSe," \u2014 "),nH=n(vSe,"A",{href:!0});var k5t=s(nH);R5r=r(k5t,"TFBertForNextSentencePrediction"),k5t.forEach(t),B5r=r(vSe," (BERT model)"),vSe.forEach(t),P5r=i(INe),P7=n(INe,"LI",{});var FSe=s(P7);$2e=n(FSe,"STRONG",{});var S5t=s($2e);I5r=r(S5t,"mobilebert"),S5t.forEach(t),q5r=r(FSe," \u2014 "),sH=n(FSe,"A",{href:!0});var R5t=s(sH);N5r=r(R5t,"TFMobileBertForNextSentencePrediction"),R5t.forEach(t),j5r=r(FSe," (MobileBERT model)"),FSe.forEach(t),INe.forEach(t),D5r=i(Al),T(I7.$$.fragment,Al),Al.forEach(t),wl.forEach(t),$Ie=i(f),fc=n(f,"H2",{class:!0});var qNe=s(fc);q7=n(qNe,"A",{id:!0,class:!0,href:!0});var B5t=s(q7);k2e=n(B5t,"SPAN",{});var P5t=s(k2e);T(p8.$$.fragment,P5t),P5t.forEach(t),B5t.forEach(t),G5r=i(qNe),S2e=n(qNe,"SPAN",{});var I5t=s(S2e);O5r=r(I5t,"TFAutoModelForTableQuestionAnswering"),I5t.forEach(t),qNe.forEach(t),kIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(u8.$$.fragment,yl),V5r=i(yl),mc=n(yl,"P",{});var tZ=s(mc);X5r=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=n(tZ,"A",{href:!0});var q5t=s(lH);z5r=r(q5t,"from_pretrained()"),q5t.forEach(t),Q5r=r(tZ," class method or the "),iH=n(tZ,"A",{href:!0});var N5t=s(iH);W5r=r(N5t,"from_config()"),N5t.forEach(t),H5r=r(tZ,` class
method.`),tZ.forEach(t),U5r=i(yl),_8=n(yl,"P",{});var NNe=s(_8);J5r=r(NNe,"This class cannot be instantiated directly using "),R2e=n(NNe,"CODE",{});var j5t=s(R2e);Y5r=r(j5t,"__init__()"),j5t.forEach(t),K5r=r(NNe," (throws an error)."),NNe.forEach(t),Z5r=i(yl),Bt=n(yl,"DIV",{class:!0});var aA=s(Bt);T(b8.$$.fragment,aA),evr=i(aA),B2e=n(aA,"P",{});var D5t=s(B2e);ovr=r(D5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),D5t.forEach(t),rvr=i(aA),gc=n(aA,"P",{});var aZ=s(gc);tvr=r(aZ,`Note:
Loading a model from its configuration file does `),P2e=n(aZ,"STRONG",{});var G5t=s(P2e);avr=r(G5t,"not"),G5t.forEach(t),nvr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(aZ,"A",{href:!0});var O5t=s(dH);svr=r(O5t,"from_pretrained()"),O5t.forEach(t),lvr=r(aZ," to load the model weights."),aZ.forEach(t),ivr=i(aA),T(N7.$$.fragment,aA),aA.forEach(t),dvr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(v8.$$.fragment,Ll),cvr=i(Ll),I2e=n(Ll,"P",{});var V5t=s(I2e);fvr=r(V5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),V5t.forEach(t),mvr=i(Ll),ln=n(Ll,"P",{});var nA=s(ln);gvr=r(nA,"The model class to instantiate is selected based on the "),q2e=n(nA,"CODE",{});var X5t=s(q2e);hvr=r(X5t,"model_type"),X5t.forEach(t),pvr=r(nA,` property of the config object (either
passed as an argument or loaded from `),N2e=n(nA,"CODE",{});var z5t=s(N2e);uvr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),_vr=r(nA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(nA,"CODE",{});var Q5t=s(j2e);bvr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),vvr=r(nA,":"),nA.forEach(t),Fvr=i(Ll),D2e=n(Ll,"UL",{});var W5t=s(D2e);j7=n(W5t,"LI",{});var TSe=s(j7);G2e=n(TSe,"STRONG",{});var H5t=s(G2e);Tvr=r(H5t,"tapas"),H5t.forEach(t),Mvr=r(TSe," \u2014 "),cH=n(TSe,"A",{href:!0});var U5t=s(cH);Evr=r(U5t,"TFTapasForQuestionAnswering"),U5t.forEach(t),Cvr=r(TSe," (TAPAS model)"),TSe.forEach(t),W5t.forEach(t),wvr=i(Ll),T(D7.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),SIe=i(f),hc=n(f,"H2",{class:!0});var jNe=s(hc);G7=n(jNe,"A",{id:!0,class:!0,href:!0});var J5t=s(G7);O2e=n(J5t,"SPAN",{});var Y5t=s(O2e);T(F8.$$.fragment,Y5t),Y5t.forEach(t),J5t.forEach(t),Avr=i(jNe),V2e=n(jNe,"SPAN",{});var K5t=s(V2e);yvr=r(K5t,"TFAutoModelForTokenClassification"),K5t.forEach(t),jNe.forEach(t),RIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(T8.$$.fragment,xl),Lvr=i(xl),pc=n(xl,"P",{});var nZ=s(pc);xvr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=n(nZ,"A",{href:!0});var Z5t=s(fH);$vr=r(Z5t,"from_pretrained()"),Z5t.forEach(t),kvr=r(nZ," class method or the "),mH=n(nZ,"A",{href:!0});var evt=s(mH);Svr=r(evt,"from_config()"),evt.forEach(t),Rvr=r(nZ,` class
method.`),nZ.forEach(t),Bvr=i(xl),M8=n(xl,"P",{});var DNe=s(M8);Pvr=r(DNe,"This class cannot be instantiated directly using "),X2e=n(DNe,"CODE",{});var ovt=s(X2e);Ivr=r(ovt,"__init__()"),ovt.forEach(t),qvr=r(DNe," (throws an error)."),DNe.forEach(t),Nvr=i(xl),Pt=n(xl,"DIV",{class:!0});var sA=s(Pt);T(E8.$$.fragment,sA),jvr=i(sA),z2e=n(sA,"P",{});var rvt=s(z2e);Dvr=r(rvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rvt.forEach(t),Gvr=i(sA),uc=n(sA,"P",{});var sZ=s(uc);Ovr=r(sZ,`Note:
Loading a model from its configuration file does `),Q2e=n(sZ,"STRONG",{});var tvt=s(Q2e);Vvr=r(tvt,"not"),tvt.forEach(t),Xvr=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(sZ,"A",{href:!0});var avt=s(gH);zvr=r(avt,"from_pretrained()"),avt.forEach(t),Qvr=r(sZ," to load the model weights."),sZ.forEach(t),Wvr=i(sA),T(O7.$$.fragment,sA),sA.forEach(t),Hvr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(C8.$$.fragment,$l),Uvr=i($l),W2e=n($l,"P",{});var nvt=s(W2e);Jvr=r(nvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nvt.forEach(t),Yvr=i($l),dn=n($l,"P",{});var lA=s(dn);Kvr=r(lA,"The model class to instantiate is selected based on the "),H2e=n(lA,"CODE",{});var svt=s(H2e);Zvr=r(svt,"model_type"),svt.forEach(t),eFr=r(lA,` property of the config object (either
passed as an argument or loaded from `),U2e=n(lA,"CODE",{});var lvt=s(U2e);oFr=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),rFr=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(lA,"CODE",{});var ivt=s(J2e);tFr=r(ivt,"pretrained_model_name_or_path"),ivt.forEach(t),aFr=r(lA,":"),lA.forEach(t),nFr=i($l),de=n($l,"UL",{});var me=s(de);V7=n(me,"LI",{});var MSe=s(V7);Y2e=n(MSe,"STRONG",{});var dvt=s(Y2e);sFr=r(dvt,"albert"),dvt.forEach(t),lFr=r(MSe," \u2014 "),hH=n(MSe,"A",{href:!0});var cvt=s(hH);iFr=r(cvt,"TFAlbertForTokenClassification"),cvt.forEach(t),dFr=r(MSe," (ALBERT model)"),MSe.forEach(t),cFr=i(me),X7=n(me,"LI",{});var ESe=s(X7);K2e=n(ESe,"STRONG",{});var fvt=s(K2e);fFr=r(fvt,"bert"),fvt.forEach(t),mFr=r(ESe," \u2014 "),pH=n(ESe,"A",{href:!0});var mvt=s(pH);gFr=r(mvt,"TFBertForTokenClassification"),mvt.forEach(t),hFr=r(ESe," (BERT model)"),ESe.forEach(t),pFr=i(me),z7=n(me,"LI",{});var CSe=s(z7);Z2e=n(CSe,"STRONG",{});var gvt=s(Z2e);uFr=r(gvt,"camembert"),gvt.forEach(t),_Fr=r(CSe," \u2014 "),uH=n(CSe,"A",{href:!0});var hvt=s(uH);bFr=r(hvt,"TFCamembertForTokenClassification"),hvt.forEach(t),vFr=r(CSe," (CamemBERT model)"),CSe.forEach(t),FFr=i(me),Q7=n(me,"LI",{});var wSe=s(Q7);e5e=n(wSe,"STRONG",{});var pvt=s(e5e);TFr=r(pvt,"convbert"),pvt.forEach(t),MFr=r(wSe," \u2014 "),_H=n(wSe,"A",{href:!0});var uvt=s(_H);EFr=r(uvt,"TFConvBertForTokenClassification"),uvt.forEach(t),CFr=r(wSe," (ConvBERT model)"),wSe.forEach(t),wFr=i(me),W7=n(me,"LI",{});var ASe=s(W7);o5e=n(ASe,"STRONG",{});var _vt=s(o5e);AFr=r(_vt,"deberta"),_vt.forEach(t),yFr=r(ASe," \u2014 "),bH=n(ASe,"A",{href:!0});var bvt=s(bH);LFr=r(bvt,"TFDebertaForTokenClassification"),bvt.forEach(t),xFr=r(ASe," (DeBERTa model)"),ASe.forEach(t),$Fr=i(me),H7=n(me,"LI",{});var ySe=s(H7);r5e=n(ySe,"STRONG",{});var vvt=s(r5e);kFr=r(vvt,"deberta-v2"),vvt.forEach(t),SFr=r(ySe," \u2014 "),vH=n(ySe,"A",{href:!0});var Fvt=s(vH);RFr=r(Fvt,"TFDebertaV2ForTokenClassification"),Fvt.forEach(t),BFr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),PFr=i(me),U7=n(me,"LI",{});var LSe=s(U7);t5e=n(LSe,"STRONG",{});var Tvt=s(t5e);IFr=r(Tvt,"distilbert"),Tvt.forEach(t),qFr=r(LSe," \u2014 "),FH=n(LSe,"A",{href:!0});var Mvt=s(FH);NFr=r(Mvt,"TFDistilBertForTokenClassification"),Mvt.forEach(t),jFr=r(LSe," (DistilBERT model)"),LSe.forEach(t),DFr=i(me),J7=n(me,"LI",{});var xSe=s(J7);a5e=n(xSe,"STRONG",{});var Evt=s(a5e);GFr=r(Evt,"electra"),Evt.forEach(t),OFr=r(xSe," \u2014 "),TH=n(xSe,"A",{href:!0});var Cvt=s(TH);VFr=r(Cvt,"TFElectraForTokenClassification"),Cvt.forEach(t),XFr=r(xSe," (ELECTRA model)"),xSe.forEach(t),zFr=i(me),Y7=n(me,"LI",{});var $Se=s(Y7);n5e=n($Se,"STRONG",{});var wvt=s(n5e);QFr=r(wvt,"flaubert"),wvt.forEach(t),WFr=r($Se," \u2014 "),MH=n($Se,"A",{href:!0});var Avt=s(MH);HFr=r(Avt,"TFFlaubertForTokenClassification"),Avt.forEach(t),UFr=r($Se," (FlauBERT model)"),$Se.forEach(t),JFr=i(me),K7=n(me,"LI",{});var kSe=s(K7);s5e=n(kSe,"STRONG",{});var yvt=s(s5e);YFr=r(yvt,"funnel"),yvt.forEach(t),KFr=r(kSe," \u2014 "),EH=n(kSe,"A",{href:!0});var Lvt=s(EH);ZFr=r(Lvt,"TFFunnelForTokenClassification"),Lvt.forEach(t),e0r=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),o0r=i(me),Z7=n(me,"LI",{});var SSe=s(Z7);l5e=n(SSe,"STRONG",{});var xvt=s(l5e);r0r=r(xvt,"layoutlm"),xvt.forEach(t),t0r=r(SSe," \u2014 "),CH=n(SSe,"A",{href:!0});var $vt=s(CH);a0r=r($vt,"TFLayoutLMForTokenClassification"),$vt.forEach(t),n0r=r(SSe," (LayoutLM model)"),SSe.forEach(t),s0r=i(me),eM=n(me,"LI",{});var RSe=s(eM);i5e=n(RSe,"STRONG",{});var kvt=s(i5e);l0r=r(kvt,"longformer"),kvt.forEach(t),i0r=r(RSe," \u2014 "),wH=n(RSe,"A",{href:!0});var Svt=s(wH);d0r=r(Svt,"TFLongformerForTokenClassification"),Svt.forEach(t),c0r=r(RSe," (Longformer model)"),RSe.forEach(t),f0r=i(me),oM=n(me,"LI",{});var BSe=s(oM);d5e=n(BSe,"STRONG",{});var Rvt=s(d5e);m0r=r(Rvt,"mobilebert"),Rvt.forEach(t),g0r=r(BSe," \u2014 "),AH=n(BSe,"A",{href:!0});var Bvt=s(AH);h0r=r(Bvt,"TFMobileBertForTokenClassification"),Bvt.forEach(t),p0r=r(BSe," (MobileBERT model)"),BSe.forEach(t),u0r=i(me),rM=n(me,"LI",{});var PSe=s(rM);c5e=n(PSe,"STRONG",{});var Pvt=s(c5e);_0r=r(Pvt,"mpnet"),Pvt.forEach(t),b0r=r(PSe," \u2014 "),yH=n(PSe,"A",{href:!0});var Ivt=s(yH);v0r=r(Ivt,"TFMPNetForTokenClassification"),Ivt.forEach(t),F0r=r(PSe," (MPNet model)"),PSe.forEach(t),T0r=i(me),tM=n(me,"LI",{});var ISe=s(tM);f5e=n(ISe,"STRONG",{});var qvt=s(f5e);M0r=r(qvt,"rembert"),qvt.forEach(t),E0r=r(ISe," \u2014 "),LH=n(ISe,"A",{href:!0});var Nvt=s(LH);C0r=r(Nvt,"TFRemBertForTokenClassification"),Nvt.forEach(t),w0r=r(ISe," (RemBERT model)"),ISe.forEach(t),A0r=i(me),aM=n(me,"LI",{});var qSe=s(aM);m5e=n(qSe,"STRONG",{});var jvt=s(m5e);y0r=r(jvt,"roberta"),jvt.forEach(t),L0r=r(qSe," \u2014 "),xH=n(qSe,"A",{href:!0});var Dvt=s(xH);x0r=r(Dvt,"TFRobertaForTokenClassification"),Dvt.forEach(t),$0r=r(qSe," (RoBERTa model)"),qSe.forEach(t),k0r=i(me),nM=n(me,"LI",{});var NSe=s(nM);g5e=n(NSe,"STRONG",{});var Gvt=s(g5e);S0r=r(Gvt,"roformer"),Gvt.forEach(t),R0r=r(NSe," \u2014 "),$H=n(NSe,"A",{href:!0});var Ovt=s($H);B0r=r(Ovt,"TFRoFormerForTokenClassification"),Ovt.forEach(t),P0r=r(NSe," (RoFormer model)"),NSe.forEach(t),I0r=i(me),sM=n(me,"LI",{});var jSe=s(sM);h5e=n(jSe,"STRONG",{});var Vvt=s(h5e);q0r=r(Vvt,"xlm"),Vvt.forEach(t),N0r=r(jSe," \u2014 "),kH=n(jSe,"A",{href:!0});var Xvt=s(kH);j0r=r(Xvt,"TFXLMForTokenClassification"),Xvt.forEach(t),D0r=r(jSe," (XLM model)"),jSe.forEach(t),G0r=i(me),lM=n(me,"LI",{});var DSe=s(lM);p5e=n(DSe,"STRONG",{});var zvt=s(p5e);O0r=r(zvt,"xlm-roberta"),zvt.forEach(t),V0r=r(DSe," \u2014 "),SH=n(DSe,"A",{href:!0});var Qvt=s(SH);X0r=r(Qvt,"TFXLMRobertaForTokenClassification"),Qvt.forEach(t),z0r=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),Q0r=i(me),iM=n(me,"LI",{});var GSe=s(iM);u5e=n(GSe,"STRONG",{});var Wvt=s(u5e);W0r=r(Wvt,"xlnet"),Wvt.forEach(t),H0r=r(GSe," \u2014 "),RH=n(GSe,"A",{href:!0});var Hvt=s(RH);U0r=r(Hvt,"TFXLNetForTokenClassification"),Hvt.forEach(t),J0r=r(GSe," (XLNet model)"),GSe.forEach(t),me.forEach(t),Y0r=i($l),T(dM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),BIe=i(f),_c=n(f,"H2",{class:!0});var GNe=s(_c);cM=n(GNe,"A",{id:!0,class:!0,href:!0});var Uvt=s(cM);_5e=n(Uvt,"SPAN",{});var Jvt=s(_5e);T(w8.$$.fragment,Jvt),Jvt.forEach(t),Uvt.forEach(t),K0r=i(GNe),b5e=n(GNe,"SPAN",{});var Yvt=s(b5e);Z0r=r(Yvt,"TFAutoModelForQuestionAnswering"),Yvt.forEach(t),GNe.forEach(t),PIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(A8.$$.fragment,kl),eTr=i(kl),bc=n(kl,"P",{});var lZ=s(bc);oTr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=n(lZ,"A",{href:!0});var Kvt=s(BH);rTr=r(Kvt,"from_pretrained()"),Kvt.forEach(t),tTr=r(lZ," class method or the "),PH=n(lZ,"A",{href:!0});var Zvt=s(PH);aTr=r(Zvt,"from_config()"),Zvt.forEach(t),nTr=r(lZ,` class
method.`),lZ.forEach(t),sTr=i(kl),y8=n(kl,"P",{});var ONe=s(y8);lTr=r(ONe,"This class cannot be instantiated directly using "),v5e=n(ONe,"CODE",{});var eFt=s(v5e);iTr=r(eFt,"__init__()"),eFt.forEach(t),dTr=r(ONe," (throws an error)."),ONe.forEach(t),cTr=i(kl),It=n(kl,"DIV",{class:!0});var iA=s(It);T(L8.$$.fragment,iA),fTr=i(iA),F5e=n(iA,"P",{});var oFt=s(F5e);mTr=r(oFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oFt.forEach(t),gTr=i(iA),vc=n(iA,"P",{});var iZ=s(vc);hTr=r(iZ,`Note:
Loading a model from its configuration file does `),T5e=n(iZ,"STRONG",{});var rFt=s(T5e);pTr=r(rFt,"not"),rFt.forEach(t),uTr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(iZ,"A",{href:!0});var tFt=s(IH);_Tr=r(tFt,"from_pretrained()"),tFt.forEach(t),bTr=r(iZ," to load the model weights."),iZ.forEach(t),vTr=i(iA),T(fM.$$.fragment,iA),iA.forEach(t),FTr=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(x8.$$.fragment,Sl),TTr=i(Sl),M5e=n(Sl,"P",{});var aFt=s(M5e);MTr=r(aFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),aFt.forEach(t),ETr=i(Sl),cn=n(Sl,"P",{});var dA=s(cn);CTr=r(dA,"The model class to instantiate is selected based on the "),E5e=n(dA,"CODE",{});var nFt=s(E5e);wTr=r(nFt,"model_type"),nFt.forEach(t),ATr=r(dA,` property of the config object (either
passed as an argument or loaded from `),C5e=n(dA,"CODE",{});var sFt=s(C5e);yTr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),LTr=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(dA,"CODE",{});var lFt=s(w5e);xTr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),$Tr=r(dA,":"),dA.forEach(t),kTr=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);mM=n(ge,"LI",{});var OSe=s(mM);A5e=n(OSe,"STRONG",{});var iFt=s(A5e);STr=r(iFt,"albert"),iFt.forEach(t),RTr=r(OSe," \u2014 "),qH=n(OSe,"A",{href:!0});var dFt=s(qH);BTr=r(dFt,"TFAlbertForQuestionAnswering"),dFt.forEach(t),PTr=r(OSe," (ALBERT model)"),OSe.forEach(t),ITr=i(ge),gM=n(ge,"LI",{});var VSe=s(gM);y5e=n(VSe,"STRONG",{});var cFt=s(y5e);qTr=r(cFt,"bert"),cFt.forEach(t),NTr=r(VSe," \u2014 "),NH=n(VSe,"A",{href:!0});var fFt=s(NH);jTr=r(fFt,"TFBertForQuestionAnswering"),fFt.forEach(t),DTr=r(VSe," (BERT model)"),VSe.forEach(t),GTr=i(ge),hM=n(ge,"LI",{});var XSe=s(hM);L5e=n(XSe,"STRONG",{});var mFt=s(L5e);OTr=r(mFt,"camembert"),mFt.forEach(t),VTr=r(XSe," \u2014 "),jH=n(XSe,"A",{href:!0});var gFt=s(jH);XTr=r(gFt,"TFCamembertForQuestionAnswering"),gFt.forEach(t),zTr=r(XSe," (CamemBERT model)"),XSe.forEach(t),QTr=i(ge),pM=n(ge,"LI",{});var zSe=s(pM);x5e=n(zSe,"STRONG",{});var hFt=s(x5e);WTr=r(hFt,"convbert"),hFt.forEach(t),HTr=r(zSe," \u2014 "),DH=n(zSe,"A",{href:!0});var pFt=s(DH);UTr=r(pFt,"TFConvBertForQuestionAnswering"),pFt.forEach(t),JTr=r(zSe," (ConvBERT model)"),zSe.forEach(t),YTr=i(ge),uM=n(ge,"LI",{});var QSe=s(uM);$5e=n(QSe,"STRONG",{});var uFt=s($5e);KTr=r(uFt,"deberta"),uFt.forEach(t),ZTr=r(QSe," \u2014 "),GH=n(QSe,"A",{href:!0});var _Ft=s(GH);e7r=r(_Ft,"TFDebertaForQuestionAnswering"),_Ft.forEach(t),o7r=r(QSe," (DeBERTa model)"),QSe.forEach(t),r7r=i(ge),_M=n(ge,"LI",{});var WSe=s(_M);k5e=n(WSe,"STRONG",{});var bFt=s(k5e);t7r=r(bFt,"deberta-v2"),bFt.forEach(t),a7r=r(WSe," \u2014 "),OH=n(WSe,"A",{href:!0});var vFt=s(OH);n7r=r(vFt,"TFDebertaV2ForQuestionAnswering"),vFt.forEach(t),s7r=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),l7r=i(ge),bM=n(ge,"LI",{});var HSe=s(bM);S5e=n(HSe,"STRONG",{});var FFt=s(S5e);i7r=r(FFt,"distilbert"),FFt.forEach(t),d7r=r(HSe," \u2014 "),VH=n(HSe,"A",{href:!0});var TFt=s(VH);c7r=r(TFt,"TFDistilBertForQuestionAnswering"),TFt.forEach(t),f7r=r(HSe," (DistilBERT model)"),HSe.forEach(t),m7r=i(ge),vM=n(ge,"LI",{});var USe=s(vM);R5e=n(USe,"STRONG",{});var MFt=s(R5e);g7r=r(MFt,"electra"),MFt.forEach(t),h7r=r(USe," \u2014 "),XH=n(USe,"A",{href:!0});var EFt=s(XH);p7r=r(EFt,"TFElectraForQuestionAnswering"),EFt.forEach(t),u7r=r(USe," (ELECTRA model)"),USe.forEach(t),_7r=i(ge),FM=n(ge,"LI",{});var JSe=s(FM);B5e=n(JSe,"STRONG",{});var CFt=s(B5e);b7r=r(CFt,"flaubert"),CFt.forEach(t),v7r=r(JSe," \u2014 "),zH=n(JSe,"A",{href:!0});var wFt=s(zH);F7r=r(wFt,"TFFlaubertForQuestionAnsweringSimple"),wFt.forEach(t),T7r=r(JSe," (FlauBERT model)"),JSe.forEach(t),M7r=i(ge),TM=n(ge,"LI",{});var YSe=s(TM);P5e=n(YSe,"STRONG",{});var AFt=s(P5e);E7r=r(AFt,"funnel"),AFt.forEach(t),C7r=r(YSe," \u2014 "),QH=n(YSe,"A",{href:!0});var yFt=s(QH);w7r=r(yFt,"TFFunnelForQuestionAnswering"),yFt.forEach(t),A7r=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),y7r=i(ge),MM=n(ge,"LI",{});var KSe=s(MM);I5e=n(KSe,"STRONG",{});var LFt=s(I5e);L7r=r(LFt,"gptj"),LFt.forEach(t),x7r=r(KSe," \u2014 "),WH=n(KSe,"A",{href:!0});var xFt=s(WH);$7r=r(xFt,"TFGPTJForQuestionAnswering"),xFt.forEach(t),k7r=r(KSe," (GPT-J model)"),KSe.forEach(t),S7r=i(ge),EM=n(ge,"LI",{});var ZSe=s(EM);q5e=n(ZSe,"STRONG",{});var $Ft=s(q5e);R7r=r($Ft,"longformer"),$Ft.forEach(t),B7r=r(ZSe," \u2014 "),HH=n(ZSe,"A",{href:!0});var kFt=s(HH);P7r=r(kFt,"TFLongformerForQuestionAnswering"),kFt.forEach(t),I7r=r(ZSe," (Longformer model)"),ZSe.forEach(t),q7r=i(ge),CM=n(ge,"LI",{});var eRe=s(CM);N5e=n(eRe,"STRONG",{});var SFt=s(N5e);N7r=r(SFt,"mobilebert"),SFt.forEach(t),j7r=r(eRe," \u2014 "),UH=n(eRe,"A",{href:!0});var RFt=s(UH);D7r=r(RFt,"TFMobileBertForQuestionAnswering"),RFt.forEach(t),G7r=r(eRe," (MobileBERT model)"),eRe.forEach(t),O7r=i(ge),wM=n(ge,"LI",{});var oRe=s(wM);j5e=n(oRe,"STRONG",{});var BFt=s(j5e);V7r=r(BFt,"mpnet"),BFt.forEach(t),X7r=r(oRe," \u2014 "),JH=n(oRe,"A",{href:!0});var PFt=s(JH);z7r=r(PFt,"TFMPNetForQuestionAnswering"),PFt.forEach(t),Q7r=r(oRe," (MPNet model)"),oRe.forEach(t),W7r=i(ge),AM=n(ge,"LI",{});var rRe=s(AM);D5e=n(rRe,"STRONG",{});var IFt=s(D5e);H7r=r(IFt,"rembert"),IFt.forEach(t),U7r=r(rRe," \u2014 "),YH=n(rRe,"A",{href:!0});var qFt=s(YH);J7r=r(qFt,"TFRemBertForQuestionAnswering"),qFt.forEach(t),Y7r=r(rRe," (RemBERT model)"),rRe.forEach(t),K7r=i(ge),yM=n(ge,"LI",{});var tRe=s(yM);G5e=n(tRe,"STRONG",{});var NFt=s(G5e);Z7r=r(NFt,"roberta"),NFt.forEach(t),eMr=r(tRe," \u2014 "),KH=n(tRe,"A",{href:!0});var jFt=s(KH);oMr=r(jFt,"TFRobertaForQuestionAnswering"),jFt.forEach(t),rMr=r(tRe," (RoBERTa model)"),tRe.forEach(t),tMr=i(ge),LM=n(ge,"LI",{});var aRe=s(LM);O5e=n(aRe,"STRONG",{});var DFt=s(O5e);aMr=r(DFt,"roformer"),DFt.forEach(t),nMr=r(aRe," \u2014 "),ZH=n(aRe,"A",{href:!0});var GFt=s(ZH);sMr=r(GFt,"TFRoFormerForQuestionAnswering"),GFt.forEach(t),lMr=r(aRe," (RoFormer model)"),aRe.forEach(t),iMr=i(ge),xM=n(ge,"LI",{});var nRe=s(xM);V5e=n(nRe,"STRONG",{});var OFt=s(V5e);dMr=r(OFt,"xlm"),OFt.forEach(t),cMr=r(nRe," \u2014 "),eU=n(nRe,"A",{href:!0});var VFt=s(eU);fMr=r(VFt,"TFXLMForQuestionAnsweringSimple"),VFt.forEach(t),mMr=r(nRe," (XLM model)"),nRe.forEach(t),gMr=i(ge),$M=n(ge,"LI",{});var sRe=s($M);X5e=n(sRe,"STRONG",{});var XFt=s(X5e);hMr=r(XFt,"xlm-roberta"),XFt.forEach(t),pMr=r(sRe," \u2014 "),oU=n(sRe,"A",{href:!0});var zFt=s(oU);uMr=r(zFt,"TFXLMRobertaForQuestionAnswering"),zFt.forEach(t),_Mr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),bMr=i(ge),kM=n(ge,"LI",{});var lRe=s(kM);z5e=n(lRe,"STRONG",{});var QFt=s(z5e);vMr=r(QFt,"xlnet"),QFt.forEach(t),FMr=r(lRe," \u2014 "),rU=n(lRe,"A",{href:!0});var WFt=s(rU);TMr=r(WFt,"TFXLNetForQuestionAnsweringSimple"),WFt.forEach(t),MMr=r(lRe," (XLNet model)"),lRe.forEach(t),ge.forEach(t),EMr=i(Sl),T(SM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),IIe=i(f),Fc=n(f,"H2",{class:!0});var VNe=s(Fc);RM=n(VNe,"A",{id:!0,class:!0,href:!0});var HFt=s(RM);Q5e=n(HFt,"SPAN",{});var UFt=s(Q5e);T($8.$$.fragment,UFt),UFt.forEach(t),HFt.forEach(t),CMr=i(VNe),W5e=n(VNe,"SPAN",{});var JFt=s(W5e);wMr=r(JFt,"TFAutoModelForVision2Seq"),JFt.forEach(t),VNe.forEach(t),qIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(k8.$$.fragment,Rl),AMr=i(Rl),Tc=n(Rl,"P",{});var dZ=s(Tc);yMr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=n(dZ,"A",{href:!0});var YFt=s(tU);LMr=r(YFt,"from_pretrained()"),YFt.forEach(t),xMr=r(dZ," class method or the "),aU=n(dZ,"A",{href:!0});var KFt=s(aU);$Mr=r(KFt,"from_config()"),KFt.forEach(t),kMr=r(dZ,` class
method.`),dZ.forEach(t),SMr=i(Rl),S8=n(Rl,"P",{});var XNe=s(S8);RMr=r(XNe,"This class cannot be instantiated directly using "),H5e=n(XNe,"CODE",{});var ZFt=s(H5e);BMr=r(ZFt,"__init__()"),ZFt.forEach(t),PMr=r(XNe," (throws an error)."),XNe.forEach(t),IMr=i(Rl),qt=n(Rl,"DIV",{class:!0});var cA=s(qt);T(R8.$$.fragment,cA),qMr=i(cA),U5e=n(cA,"P",{});var e0t=s(U5e);NMr=r(e0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),e0t.forEach(t),jMr=i(cA),Mc=n(cA,"P",{});var cZ=s(Mc);DMr=r(cZ,`Note:
Loading a model from its configuration file does `),J5e=n(cZ,"STRONG",{});var o0t=s(J5e);GMr=r(o0t,"not"),o0t.forEach(t),OMr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(cZ,"A",{href:!0});var r0t=s(nU);VMr=r(r0t,"from_pretrained()"),r0t.forEach(t),XMr=r(cZ," to load the model weights."),cZ.forEach(t),zMr=i(cA),T(BM.$$.fragment,cA),cA.forEach(t),QMr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(B8.$$.fragment,Bl),WMr=i(Bl),Y5e=n(Bl,"P",{});var t0t=s(Y5e);HMr=r(t0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),t0t.forEach(t),UMr=i(Bl),fn=n(Bl,"P",{});var fA=s(fn);JMr=r(fA,"The model class to instantiate is selected based on the "),K5e=n(fA,"CODE",{});var a0t=s(K5e);YMr=r(a0t,"model_type"),a0t.forEach(t),KMr=r(fA,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(fA,"CODE",{});var n0t=s(Z5e);ZMr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),eEr=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(fA,"CODE",{});var s0t=s(eve);oEr=r(s0t,"pretrained_model_name_or_path"),s0t.forEach(t),rEr=r(fA,":"),fA.forEach(t),tEr=i(Bl),ove=n(Bl,"UL",{});var l0t=s(ove);PM=n(l0t,"LI",{});var iRe=s(PM);rve=n(iRe,"STRONG",{});var i0t=s(rve);aEr=r(i0t,"vision-encoder-decoder"),i0t.forEach(t),nEr=r(iRe," \u2014 "),sU=n(iRe,"A",{href:!0});var d0t=s(sU);sEr=r(d0t,"TFVisionEncoderDecoderModel"),d0t.forEach(t),lEr=r(iRe," (Vision Encoder decoder model)"),iRe.forEach(t),l0t.forEach(t),iEr=i(Bl),T(IM.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),NIe=i(f),Ec=n(f,"H2",{class:!0});var zNe=s(Ec);qM=n(zNe,"A",{id:!0,class:!0,href:!0});var c0t=s(qM);tve=n(c0t,"SPAN",{});var f0t=s(tve);T(P8.$$.fragment,f0t),f0t.forEach(t),c0t.forEach(t),dEr=i(zNe),ave=n(zNe,"SPAN",{});var m0t=s(ave);cEr=r(m0t,"TFAutoModelForSpeechSeq2Seq"),m0t.forEach(t),zNe.forEach(t),jIe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(I8.$$.fragment,Pl),fEr=i(Pl),Cc=n(Pl,"P",{});var fZ=s(Cc);mEr=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=n(fZ,"A",{href:!0});var g0t=s(lU);gEr=r(g0t,"from_pretrained()"),g0t.forEach(t),hEr=r(fZ," class method or the "),iU=n(fZ,"A",{href:!0});var h0t=s(iU);pEr=r(h0t,"from_config()"),h0t.forEach(t),uEr=r(fZ,` class
method.`),fZ.forEach(t),_Er=i(Pl),q8=n(Pl,"P",{});var QNe=s(q8);bEr=r(QNe,"This class cannot be instantiated directly using "),nve=n(QNe,"CODE",{});var p0t=s(nve);vEr=r(p0t,"__init__()"),p0t.forEach(t),FEr=r(QNe," (throws an error)."),QNe.forEach(t),TEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var mA=s(Nt);T(N8.$$.fragment,mA),MEr=i(mA),sve=n(mA,"P",{});var u0t=s(sve);EEr=r(u0t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u0t.forEach(t),CEr=i(mA),wc=n(mA,"P",{});var mZ=s(wc);wEr=r(mZ,`Note:
Loading a model from its configuration file does `),lve=n(mZ,"STRONG",{});var _0t=s(lve);AEr=r(_0t,"not"),_0t.forEach(t),yEr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(mZ,"A",{href:!0});var b0t=s(dU);LEr=r(b0t,"from_pretrained()"),b0t.forEach(t),xEr=r(mZ," to load the model weights."),mZ.forEach(t),$Er=i(mA),T(NM.$$.fragment,mA),mA.forEach(t),kEr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(j8.$$.fragment,Il),SEr=i(Il),ive=n(Il,"P",{});var v0t=s(ive);REr=r(v0t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),v0t.forEach(t),BEr=i(Il),mn=n(Il,"P",{});var gA=s(mn);PEr=r(gA,"The model class to instantiate is selected based on the "),dve=n(gA,"CODE",{});var F0t=s(dve);IEr=r(F0t,"model_type"),F0t.forEach(t),qEr=r(gA,` property of the config object (either
passed as an argument or loaded from `),cve=n(gA,"CODE",{});var T0t=s(cve);NEr=r(T0t,"pretrained_model_name_or_path"),T0t.forEach(t),jEr=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fve=n(gA,"CODE",{});var M0t=s(fve);DEr=r(M0t,"pretrained_model_name_or_path"),M0t.forEach(t),GEr=r(gA,":"),gA.forEach(t),OEr=i(Il),mve=n(Il,"UL",{});var E0t=s(mve);jM=n(E0t,"LI",{});var dRe=s(jM);gve=n(dRe,"STRONG",{});var C0t=s(gve);VEr=r(C0t,"speech_to_text"),C0t.forEach(t),XEr=r(dRe," \u2014 "),cU=n(dRe,"A",{href:!0});var w0t=s(cU);zEr=r(w0t,"TFSpeech2TextForConditionalGeneration"),w0t.forEach(t),QEr=r(dRe," (Speech2Text model)"),dRe.forEach(t),E0t.forEach(t),WEr=i(Il),T(DM.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),DIe=i(f),Ac=n(f,"H2",{class:!0});var WNe=s(Ac);GM=n(WNe,"A",{id:!0,class:!0,href:!0});var A0t=s(GM);hve=n(A0t,"SPAN",{});var y0t=s(hve);T(D8.$$.fragment,y0t),y0t.forEach(t),A0t.forEach(t),HEr=i(WNe),pve=n(WNe,"SPAN",{});var L0t=s(pve);UEr=r(L0t,"FlaxAutoModel"),L0t.forEach(t),WNe.forEach(t),GIe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(G8.$$.fragment,ql),JEr=i(ql),yc=n(ql,"P",{});var gZ=s(yc);YEr=r(gZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=n(gZ,"A",{href:!0});var x0t=s(fU);KEr=r(x0t,"from_pretrained()"),x0t.forEach(t),ZEr=r(gZ," class method or the "),mU=n(gZ,"A",{href:!0});var $0t=s(mU);eCr=r($0t,"from_config()"),$0t.forEach(t),oCr=r(gZ,` class
method.`),gZ.forEach(t),rCr=i(ql),O8=n(ql,"P",{});var HNe=s(O8);tCr=r(HNe,"This class cannot be instantiated directly using "),uve=n(HNe,"CODE",{});var k0t=s(uve);aCr=r(k0t,"__init__()"),k0t.forEach(t),nCr=r(HNe," (throws an error)."),HNe.forEach(t),sCr=i(ql),jt=n(ql,"DIV",{class:!0});var hA=s(jt);T(V8.$$.fragment,hA),lCr=i(hA),_ve=n(hA,"P",{});var S0t=s(_ve);iCr=r(S0t,"Instantiates one of the base model classes of the library from a configuration."),S0t.forEach(t),dCr=i(hA),Lc=n(hA,"P",{});var hZ=s(Lc);cCr=r(hZ,`Note:
Loading a model from its configuration file does `),bve=n(hZ,"STRONG",{});var R0t=s(bve);fCr=r(R0t,"not"),R0t.forEach(t),mCr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(hZ,"A",{href:!0});var B0t=s(gU);gCr=r(B0t,"from_pretrained()"),B0t.forEach(t),hCr=r(hZ," to load the model weights."),hZ.forEach(t),pCr=i(hA),T(OM.$$.fragment,hA),hA.forEach(t),uCr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(X8.$$.fragment,Nl),_Cr=i(Nl),vve=n(Nl,"P",{});var P0t=s(vve);bCr=r(P0t,"Instantiate one of the base model classes of the library from a pretrained model."),P0t.forEach(t),vCr=i(Nl),gn=n(Nl,"P",{});var pA=s(gn);FCr=r(pA,"The model class to instantiate is selected based on the "),Fve=n(pA,"CODE",{});var I0t=s(Fve);TCr=r(I0t,"model_type"),I0t.forEach(t),MCr=r(pA,` property of the config object (either
passed as an argument or loaded from `),Tve=n(pA,"CODE",{});var q0t=s(Tve);ECr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),CCr=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(pA,"CODE",{});var N0t=s(Mve);wCr=r(N0t,"pretrained_model_name_or_path"),N0t.forEach(t),ACr=r(pA,":"),pA.forEach(t),yCr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);VM=n(ae,"LI",{});var cRe=s(VM);Eve=n(cRe,"STRONG",{});var j0t=s(Eve);LCr=r(j0t,"albert"),j0t.forEach(t),xCr=r(cRe," \u2014 "),hU=n(cRe,"A",{href:!0});var D0t=s(hU);$Cr=r(D0t,"FlaxAlbertModel"),D0t.forEach(t),kCr=r(cRe," (ALBERT model)"),cRe.forEach(t),SCr=i(ae),XM=n(ae,"LI",{});var fRe=s(XM);Cve=n(fRe,"STRONG",{});var G0t=s(Cve);RCr=r(G0t,"bart"),G0t.forEach(t),BCr=r(fRe," \u2014 "),pU=n(fRe,"A",{href:!0});var O0t=s(pU);PCr=r(O0t,"FlaxBartModel"),O0t.forEach(t),ICr=r(fRe," (BART model)"),fRe.forEach(t),qCr=i(ae),zM=n(ae,"LI",{});var mRe=s(zM);wve=n(mRe,"STRONG",{});var V0t=s(wve);NCr=r(V0t,"beit"),V0t.forEach(t),jCr=r(mRe," \u2014 "),uU=n(mRe,"A",{href:!0});var X0t=s(uU);DCr=r(X0t,"FlaxBeitModel"),X0t.forEach(t),GCr=r(mRe," (BEiT model)"),mRe.forEach(t),OCr=i(ae),QM=n(ae,"LI",{});var gRe=s(QM);Ave=n(gRe,"STRONG",{});var z0t=s(Ave);VCr=r(z0t,"bert"),z0t.forEach(t),XCr=r(gRe," \u2014 "),_U=n(gRe,"A",{href:!0});var Q0t=s(_U);zCr=r(Q0t,"FlaxBertModel"),Q0t.forEach(t),QCr=r(gRe," (BERT model)"),gRe.forEach(t),WCr=i(ae),WM=n(ae,"LI",{});var hRe=s(WM);yve=n(hRe,"STRONG",{});var W0t=s(yve);HCr=r(W0t,"big_bird"),W0t.forEach(t),UCr=r(hRe," \u2014 "),bU=n(hRe,"A",{href:!0});var H0t=s(bU);JCr=r(H0t,"FlaxBigBirdModel"),H0t.forEach(t),YCr=r(hRe," (BigBird model)"),hRe.forEach(t),KCr=i(ae),HM=n(ae,"LI",{});var pRe=s(HM);Lve=n(pRe,"STRONG",{});var U0t=s(Lve);ZCr=r(U0t,"blenderbot"),U0t.forEach(t),e3r=r(pRe," \u2014 "),vU=n(pRe,"A",{href:!0});var J0t=s(vU);o3r=r(J0t,"FlaxBlenderbotModel"),J0t.forEach(t),r3r=r(pRe," (Blenderbot model)"),pRe.forEach(t),t3r=i(ae),UM=n(ae,"LI",{});var uRe=s(UM);xve=n(uRe,"STRONG",{});var Y0t=s(xve);a3r=r(Y0t,"blenderbot-small"),Y0t.forEach(t),n3r=r(uRe," \u2014 "),FU=n(uRe,"A",{href:!0});var K0t=s(FU);s3r=r(K0t,"FlaxBlenderbotSmallModel"),K0t.forEach(t),l3r=r(uRe," (BlenderbotSmall model)"),uRe.forEach(t),i3r=i(ae),JM=n(ae,"LI",{});var _Re=s(JM);$ve=n(_Re,"STRONG",{});var Z0t=s($ve);d3r=r(Z0t,"clip"),Z0t.forEach(t),c3r=r(_Re," \u2014 "),TU=n(_Re,"A",{href:!0});var eTt=s(TU);f3r=r(eTt,"FlaxCLIPModel"),eTt.forEach(t),m3r=r(_Re," (CLIP model)"),_Re.forEach(t),g3r=i(ae),YM=n(ae,"LI",{});var bRe=s(YM);kve=n(bRe,"STRONG",{});var oTt=s(kve);h3r=r(oTt,"distilbert"),oTt.forEach(t),p3r=r(bRe," \u2014 "),MU=n(bRe,"A",{href:!0});var rTt=s(MU);u3r=r(rTt,"FlaxDistilBertModel"),rTt.forEach(t),_3r=r(bRe," (DistilBERT model)"),bRe.forEach(t),b3r=i(ae),KM=n(ae,"LI",{});var vRe=s(KM);Sve=n(vRe,"STRONG",{});var tTt=s(Sve);v3r=r(tTt,"electra"),tTt.forEach(t),F3r=r(vRe," \u2014 "),EU=n(vRe,"A",{href:!0});var aTt=s(EU);T3r=r(aTt,"FlaxElectraModel"),aTt.forEach(t),M3r=r(vRe," (ELECTRA model)"),vRe.forEach(t),E3r=i(ae),ZM=n(ae,"LI",{});var FRe=s(ZM);Rve=n(FRe,"STRONG",{});var nTt=s(Rve);C3r=r(nTt,"gpt2"),nTt.forEach(t),w3r=r(FRe," \u2014 "),CU=n(FRe,"A",{href:!0});var sTt=s(CU);A3r=r(sTt,"FlaxGPT2Model"),sTt.forEach(t),y3r=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),L3r=i(ae),eE=n(ae,"LI",{});var TRe=s(eE);Bve=n(TRe,"STRONG",{});var lTt=s(Bve);x3r=r(lTt,"gpt_neo"),lTt.forEach(t),$3r=r(TRe," \u2014 "),wU=n(TRe,"A",{href:!0});var iTt=s(wU);k3r=r(iTt,"FlaxGPTNeoModel"),iTt.forEach(t),S3r=r(TRe," (GPT Neo model)"),TRe.forEach(t),R3r=i(ae),oE=n(ae,"LI",{});var MRe=s(oE);Pve=n(MRe,"STRONG",{});var dTt=s(Pve);B3r=r(dTt,"gptj"),dTt.forEach(t),P3r=r(MRe," \u2014 "),AU=n(MRe,"A",{href:!0});var cTt=s(AU);I3r=r(cTt,"FlaxGPTJModel"),cTt.forEach(t),q3r=r(MRe," (GPT-J model)"),MRe.forEach(t),N3r=i(ae),rE=n(ae,"LI",{});var ERe=s(rE);Ive=n(ERe,"STRONG",{});var fTt=s(Ive);j3r=r(fTt,"marian"),fTt.forEach(t),D3r=r(ERe," \u2014 "),yU=n(ERe,"A",{href:!0});var mTt=s(yU);G3r=r(mTt,"FlaxMarianModel"),mTt.forEach(t),O3r=r(ERe," (Marian model)"),ERe.forEach(t),V3r=i(ae),tE=n(ae,"LI",{});var CRe=s(tE);qve=n(CRe,"STRONG",{});var gTt=s(qve);X3r=r(gTt,"mbart"),gTt.forEach(t),z3r=r(CRe," \u2014 "),LU=n(CRe,"A",{href:!0});var hTt=s(LU);Q3r=r(hTt,"FlaxMBartModel"),hTt.forEach(t),W3r=r(CRe," (mBART model)"),CRe.forEach(t),H3r=i(ae),aE=n(ae,"LI",{});var wRe=s(aE);Nve=n(wRe,"STRONG",{});var pTt=s(Nve);U3r=r(pTt,"mt5"),pTt.forEach(t),J3r=r(wRe," \u2014 "),xU=n(wRe,"A",{href:!0});var uTt=s(xU);Y3r=r(uTt,"FlaxMT5Model"),uTt.forEach(t),K3r=r(wRe," (mT5 model)"),wRe.forEach(t),Z3r=i(ae),nE=n(ae,"LI",{});var ARe=s(nE);jve=n(ARe,"STRONG",{});var _Tt=s(jve);ewr=r(_Tt,"pegasus"),_Tt.forEach(t),owr=r(ARe," \u2014 "),$U=n(ARe,"A",{href:!0});var bTt=s($U);rwr=r(bTt,"FlaxPegasusModel"),bTt.forEach(t),twr=r(ARe," (Pegasus model)"),ARe.forEach(t),awr=i(ae),sE=n(ae,"LI",{});var yRe=s(sE);Dve=n(yRe,"STRONG",{});var vTt=s(Dve);nwr=r(vTt,"roberta"),vTt.forEach(t),swr=r(yRe," \u2014 "),kU=n(yRe,"A",{href:!0});var FTt=s(kU);lwr=r(FTt,"FlaxRobertaModel"),FTt.forEach(t),iwr=r(yRe," (RoBERTa model)"),yRe.forEach(t),dwr=i(ae),lE=n(ae,"LI",{});var LRe=s(lE);Gve=n(LRe,"STRONG",{});var TTt=s(Gve);cwr=r(TTt,"roformer"),TTt.forEach(t),fwr=r(LRe," \u2014 "),SU=n(LRe,"A",{href:!0});var MTt=s(SU);mwr=r(MTt,"FlaxRoFormerModel"),MTt.forEach(t),gwr=r(LRe," (RoFormer model)"),LRe.forEach(t),hwr=i(ae),iE=n(ae,"LI",{});var xRe=s(iE);Ove=n(xRe,"STRONG",{});var ETt=s(Ove);pwr=r(ETt,"t5"),ETt.forEach(t),uwr=r(xRe," \u2014 "),RU=n(xRe,"A",{href:!0});var CTt=s(RU);_wr=r(CTt,"FlaxT5Model"),CTt.forEach(t),bwr=r(xRe," (T5 model)"),xRe.forEach(t),vwr=i(ae),dE=n(ae,"LI",{});var $Re=s(dE);Vve=n($Re,"STRONG",{});var wTt=s(Vve);Fwr=r(wTt,"vision-text-dual-encoder"),wTt.forEach(t),Twr=r($Re," \u2014 "),BU=n($Re,"A",{href:!0});var ATt=s(BU);Mwr=r(ATt,"FlaxVisionTextDualEncoderModel"),ATt.forEach(t),Ewr=r($Re," (VisionTextDualEncoder model)"),$Re.forEach(t),Cwr=i(ae),cE=n(ae,"LI",{});var kRe=s(cE);Xve=n(kRe,"STRONG",{});var yTt=s(Xve);wwr=r(yTt,"vit"),yTt.forEach(t),Awr=r(kRe," \u2014 "),PU=n(kRe,"A",{href:!0});var LTt=s(PU);ywr=r(LTt,"FlaxViTModel"),LTt.forEach(t),Lwr=r(kRe," (ViT model)"),kRe.forEach(t),xwr=i(ae),fE=n(ae,"LI",{});var SRe=s(fE);zve=n(SRe,"STRONG",{});var xTt=s(zve);$wr=r(xTt,"wav2vec2"),xTt.forEach(t),kwr=r(SRe," \u2014 "),IU=n(SRe,"A",{href:!0});var $Tt=s(IU);Swr=r($Tt,"FlaxWav2Vec2Model"),$Tt.forEach(t),Rwr=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),Bwr=i(ae),mE=n(ae,"LI",{});var RRe=s(mE);Qve=n(RRe,"STRONG",{});var kTt=s(Qve);Pwr=r(kTt,"xglm"),kTt.forEach(t),Iwr=r(RRe," \u2014 "),qU=n(RRe,"A",{href:!0});var STt=s(qU);qwr=r(STt,"FlaxXGLMModel"),STt.forEach(t),Nwr=r(RRe," (XGLM model)"),RRe.forEach(t),jwr=i(ae),gE=n(ae,"LI",{});var BRe=s(gE);Wve=n(BRe,"STRONG",{});var RTt=s(Wve);Dwr=r(RTt,"xlm-roberta"),RTt.forEach(t),Gwr=r(BRe," \u2014 "),NU=n(BRe,"A",{href:!0});var BTt=s(NU);Owr=r(BTt,"FlaxXLMRobertaModel"),BTt.forEach(t),Vwr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),ae.forEach(t),Xwr=i(Nl),T(hE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),OIe=i(f),xc=n(f,"H2",{class:!0});var UNe=s(xc);pE=n(UNe,"A",{id:!0,class:!0,href:!0});var PTt=s(pE);Hve=n(PTt,"SPAN",{});var ITt=s(Hve);T(z8.$$.fragment,ITt),ITt.forEach(t),PTt.forEach(t),zwr=i(UNe),Uve=n(UNe,"SPAN",{});var qTt=s(Uve);Qwr=r(qTt,"FlaxAutoModelForCausalLM"),qTt.forEach(t),UNe.forEach(t),VIe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(Q8.$$.fragment,jl),Wwr=i(jl),$c=n(jl,"P",{});var pZ=s($c);Hwr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=n(pZ,"A",{href:!0});var NTt=s(jU);Uwr=r(NTt,"from_pretrained()"),NTt.forEach(t),Jwr=r(pZ," class method or the "),DU=n(pZ,"A",{href:!0});var jTt=s(DU);Ywr=r(jTt,"from_config()"),jTt.forEach(t),Kwr=r(pZ,` class
method.`),pZ.forEach(t),Zwr=i(jl),W8=n(jl,"P",{});var JNe=s(W8);eAr=r(JNe,"This class cannot be instantiated directly using "),Jve=n(JNe,"CODE",{});var DTt=s(Jve);oAr=r(DTt,"__init__()"),DTt.forEach(t),rAr=r(JNe," (throws an error)."),JNe.forEach(t),tAr=i(jl),Dt=n(jl,"DIV",{class:!0});var uA=s(Dt);T(H8.$$.fragment,uA),aAr=i(uA),Yve=n(uA,"P",{});var GTt=s(Yve);nAr=r(GTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),GTt.forEach(t),sAr=i(uA),kc=n(uA,"P",{});var uZ=s(kc);lAr=r(uZ,`Note:
Loading a model from its configuration file does `),Kve=n(uZ,"STRONG",{});var OTt=s(Kve);iAr=r(OTt,"not"),OTt.forEach(t),dAr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(uZ,"A",{href:!0});var VTt=s(GU);cAr=r(VTt,"from_pretrained()"),VTt.forEach(t),fAr=r(uZ," to load the model weights."),uZ.forEach(t),mAr=i(uA),T(uE.$$.fragment,uA),uA.forEach(t),gAr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(U8.$$.fragment,Dl),hAr=i(Dl),Zve=n(Dl,"P",{});var XTt=s(Zve);pAr=r(XTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),XTt.forEach(t),uAr=i(Dl),hn=n(Dl,"P",{});var _A=s(hn);_Ar=r(_A,"The model class to instantiate is selected based on the "),eFe=n(_A,"CODE",{});var zTt=s(eFe);bAr=r(zTt,"model_type"),zTt.forEach(t),vAr=r(_A,` property of the config object (either
passed as an argument or loaded from `),oFe=n(_A,"CODE",{});var QTt=s(oFe);FAr=r(QTt,"pretrained_model_name_or_path"),QTt.forEach(t),TAr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(_A,"CODE",{});var WTt=s(rFe);MAr=r(WTt,"pretrained_model_name_or_path"),WTt.forEach(t),EAr=r(_A,":"),_A.forEach(t),CAr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);_E=n(Oe,"LI",{});var PRe=s(_E);tFe=n(PRe,"STRONG",{});var HTt=s(tFe);wAr=r(HTt,"bart"),HTt.forEach(t),AAr=r(PRe," \u2014 "),OU=n(PRe,"A",{href:!0});var UTt=s(OU);yAr=r(UTt,"FlaxBartForCausalLM"),UTt.forEach(t),LAr=r(PRe," (BART model)"),PRe.forEach(t),xAr=i(Oe),bE=n(Oe,"LI",{});var IRe=s(bE);aFe=n(IRe,"STRONG",{});var JTt=s(aFe);$Ar=r(JTt,"bert"),JTt.forEach(t),kAr=r(IRe," \u2014 "),VU=n(IRe,"A",{href:!0});var YTt=s(VU);SAr=r(YTt,"FlaxBertForCausalLM"),YTt.forEach(t),RAr=r(IRe," (BERT model)"),IRe.forEach(t),BAr=i(Oe),vE=n(Oe,"LI",{});var qRe=s(vE);nFe=n(qRe,"STRONG",{});var KTt=s(nFe);PAr=r(KTt,"big_bird"),KTt.forEach(t),IAr=r(qRe," \u2014 "),XU=n(qRe,"A",{href:!0});var ZTt=s(XU);qAr=r(ZTt,"FlaxBigBirdForCausalLM"),ZTt.forEach(t),NAr=r(qRe," (BigBird model)"),qRe.forEach(t),jAr=i(Oe),FE=n(Oe,"LI",{});var NRe=s(FE);sFe=n(NRe,"STRONG",{});var e7t=s(sFe);DAr=r(e7t,"electra"),e7t.forEach(t),GAr=r(NRe," \u2014 "),zU=n(NRe,"A",{href:!0});var o7t=s(zU);OAr=r(o7t,"FlaxElectraForCausalLM"),o7t.forEach(t),VAr=r(NRe," (ELECTRA model)"),NRe.forEach(t),XAr=i(Oe),TE=n(Oe,"LI",{});var jRe=s(TE);lFe=n(jRe,"STRONG",{});var r7t=s(lFe);zAr=r(r7t,"gpt2"),r7t.forEach(t),QAr=r(jRe," \u2014 "),QU=n(jRe,"A",{href:!0});var t7t=s(QU);WAr=r(t7t,"FlaxGPT2LMHeadModel"),t7t.forEach(t),HAr=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),UAr=i(Oe),ME=n(Oe,"LI",{});var DRe=s(ME);iFe=n(DRe,"STRONG",{});var a7t=s(iFe);JAr=r(a7t,"gpt_neo"),a7t.forEach(t),YAr=r(DRe," \u2014 "),WU=n(DRe,"A",{href:!0});var n7t=s(WU);KAr=r(n7t,"FlaxGPTNeoForCausalLM"),n7t.forEach(t),ZAr=r(DRe," (GPT Neo model)"),DRe.forEach(t),e6r=i(Oe),EE=n(Oe,"LI",{});var GRe=s(EE);dFe=n(GRe,"STRONG",{});var s7t=s(dFe);o6r=r(s7t,"gptj"),s7t.forEach(t),r6r=r(GRe," \u2014 "),HU=n(GRe,"A",{href:!0});var l7t=s(HU);t6r=r(l7t,"FlaxGPTJForCausalLM"),l7t.forEach(t),a6r=r(GRe," (GPT-J model)"),GRe.forEach(t),n6r=i(Oe),CE=n(Oe,"LI",{});var ORe=s(CE);cFe=n(ORe,"STRONG",{});var i7t=s(cFe);s6r=r(i7t,"roberta"),i7t.forEach(t),l6r=r(ORe," \u2014 "),UU=n(ORe,"A",{href:!0});var d7t=s(UU);i6r=r(d7t,"FlaxRobertaForCausalLM"),d7t.forEach(t),d6r=r(ORe," (RoBERTa model)"),ORe.forEach(t),c6r=i(Oe),wE=n(Oe,"LI",{});var VRe=s(wE);fFe=n(VRe,"STRONG",{});var c7t=s(fFe);f6r=r(c7t,"xglm"),c7t.forEach(t),m6r=r(VRe," \u2014 "),JU=n(VRe,"A",{href:!0});var f7t=s(JU);g6r=r(f7t,"FlaxXGLMForCausalLM"),f7t.forEach(t),h6r=r(VRe," (XGLM model)"),VRe.forEach(t),Oe.forEach(t),p6r=i(Dl),T(AE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),XIe=i(f),Sc=n(f,"H2",{class:!0});var YNe=s(Sc);yE=n(YNe,"A",{id:!0,class:!0,href:!0});var m7t=s(yE);mFe=n(m7t,"SPAN",{});var g7t=s(mFe);T(J8.$$.fragment,g7t),g7t.forEach(t),m7t.forEach(t),u6r=i(YNe),gFe=n(YNe,"SPAN",{});var h7t=s(gFe);_6r=r(h7t,"FlaxAutoModelForPreTraining"),h7t.forEach(t),YNe.forEach(t),zIe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(Y8.$$.fragment,Gl),b6r=i(Gl),Rc=n(Gl,"P",{});var _Z=s(Rc);v6r=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=n(_Z,"A",{href:!0});var p7t=s(YU);F6r=r(p7t,"from_pretrained()"),p7t.forEach(t),T6r=r(_Z," class method or the "),KU=n(_Z,"A",{href:!0});var u7t=s(KU);M6r=r(u7t,"from_config()"),u7t.forEach(t),E6r=r(_Z,` class
method.`),_Z.forEach(t),C6r=i(Gl),K8=n(Gl,"P",{});var KNe=s(K8);w6r=r(KNe,"This class cannot be instantiated directly using "),hFe=n(KNe,"CODE",{});var _7t=s(hFe);A6r=r(_7t,"__init__()"),_7t.forEach(t),y6r=r(KNe," (throws an error)."),KNe.forEach(t),L6r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var bA=s(Gt);T(Z8.$$.fragment,bA),x6r=i(bA),pFe=n(bA,"P",{});var b7t=s(pFe);$6r=r(b7t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b7t.forEach(t),k6r=i(bA),Bc=n(bA,"P",{});var bZ=s(Bc);S6r=r(bZ,`Note:
Loading a model from its configuration file does `),uFe=n(bZ,"STRONG",{});var v7t=s(uFe);R6r=r(v7t,"not"),v7t.forEach(t),B6r=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(bZ,"A",{href:!0});var F7t=s(ZU);P6r=r(F7t,"from_pretrained()"),F7t.forEach(t),I6r=r(bZ," to load the model weights."),bZ.forEach(t),q6r=i(bA),T(LE.$$.fragment,bA),bA.forEach(t),N6r=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(ex.$$.fragment,Ol),j6r=i(Ol),_Fe=n(Ol,"P",{});var T7t=s(_Fe);D6r=r(T7t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T7t.forEach(t),G6r=i(Ol),pn=n(Ol,"P",{});var vA=s(pn);O6r=r(vA,"The model class to instantiate is selected based on the "),bFe=n(vA,"CODE",{});var M7t=s(bFe);V6r=r(M7t,"model_type"),M7t.forEach(t),X6r=r(vA,` property of the config object (either
passed as an argument or loaded from `),vFe=n(vA,"CODE",{});var E7t=s(vFe);z6r=r(E7t,"pretrained_model_name_or_path"),E7t.forEach(t),Q6r=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(vA,"CODE",{});var C7t=s(FFe);W6r=r(C7t,"pretrained_model_name_or_path"),C7t.forEach(t),H6r=r(vA,":"),vA.forEach(t),U6r=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);xE=n(we,"LI",{});var XRe=s(xE);TFe=n(XRe,"STRONG",{});var w7t=s(TFe);J6r=r(w7t,"albert"),w7t.forEach(t),Y6r=r(XRe," \u2014 "),eJ=n(XRe,"A",{href:!0});var A7t=s(eJ);K6r=r(A7t,"FlaxAlbertForPreTraining"),A7t.forEach(t),Z6r=r(XRe," (ALBERT model)"),XRe.forEach(t),eyr=i(we),$E=n(we,"LI",{});var zRe=s($E);MFe=n(zRe,"STRONG",{});var y7t=s(MFe);oyr=r(y7t,"bart"),y7t.forEach(t),ryr=r(zRe," \u2014 "),oJ=n(zRe,"A",{href:!0});var L7t=s(oJ);tyr=r(L7t,"FlaxBartForConditionalGeneration"),L7t.forEach(t),ayr=r(zRe," (BART model)"),zRe.forEach(t),nyr=i(we),kE=n(we,"LI",{});var QRe=s(kE);EFe=n(QRe,"STRONG",{});var x7t=s(EFe);syr=r(x7t,"bert"),x7t.forEach(t),lyr=r(QRe," \u2014 "),rJ=n(QRe,"A",{href:!0});var $7t=s(rJ);iyr=r($7t,"FlaxBertForPreTraining"),$7t.forEach(t),dyr=r(QRe," (BERT model)"),QRe.forEach(t),cyr=i(we),SE=n(we,"LI",{});var WRe=s(SE);CFe=n(WRe,"STRONG",{});var k7t=s(CFe);fyr=r(k7t,"big_bird"),k7t.forEach(t),myr=r(WRe," \u2014 "),tJ=n(WRe,"A",{href:!0});var S7t=s(tJ);gyr=r(S7t,"FlaxBigBirdForPreTraining"),S7t.forEach(t),hyr=r(WRe," (BigBird model)"),WRe.forEach(t),pyr=i(we),RE=n(we,"LI",{});var HRe=s(RE);wFe=n(HRe,"STRONG",{});var R7t=s(wFe);uyr=r(R7t,"electra"),R7t.forEach(t),_yr=r(HRe," \u2014 "),aJ=n(HRe,"A",{href:!0});var B7t=s(aJ);byr=r(B7t,"FlaxElectraForPreTraining"),B7t.forEach(t),vyr=r(HRe," (ELECTRA model)"),HRe.forEach(t),Fyr=i(we),BE=n(we,"LI",{});var URe=s(BE);AFe=n(URe,"STRONG",{});var P7t=s(AFe);Tyr=r(P7t,"mbart"),P7t.forEach(t),Myr=r(URe," \u2014 "),nJ=n(URe,"A",{href:!0});var I7t=s(nJ);Eyr=r(I7t,"FlaxMBartForConditionalGeneration"),I7t.forEach(t),Cyr=r(URe," (mBART model)"),URe.forEach(t),wyr=i(we),PE=n(we,"LI",{});var JRe=s(PE);yFe=n(JRe,"STRONG",{});var q7t=s(yFe);Ayr=r(q7t,"mt5"),q7t.forEach(t),yyr=r(JRe," \u2014 "),sJ=n(JRe,"A",{href:!0});var N7t=s(sJ);Lyr=r(N7t,"FlaxMT5ForConditionalGeneration"),N7t.forEach(t),xyr=r(JRe," (mT5 model)"),JRe.forEach(t),$yr=i(we),IE=n(we,"LI",{});var YRe=s(IE);LFe=n(YRe,"STRONG",{});var j7t=s(LFe);kyr=r(j7t,"roberta"),j7t.forEach(t),Syr=r(YRe," \u2014 "),lJ=n(YRe,"A",{href:!0});var D7t=s(lJ);Ryr=r(D7t,"FlaxRobertaForMaskedLM"),D7t.forEach(t),Byr=r(YRe," (RoBERTa model)"),YRe.forEach(t),Pyr=i(we),qE=n(we,"LI",{});var KRe=s(qE);xFe=n(KRe,"STRONG",{});var G7t=s(xFe);Iyr=r(G7t,"roformer"),G7t.forEach(t),qyr=r(KRe," \u2014 "),iJ=n(KRe,"A",{href:!0});var O7t=s(iJ);Nyr=r(O7t,"FlaxRoFormerForMaskedLM"),O7t.forEach(t),jyr=r(KRe," (RoFormer model)"),KRe.forEach(t),Dyr=i(we),NE=n(we,"LI",{});var ZRe=s(NE);$Fe=n(ZRe,"STRONG",{});var V7t=s($Fe);Gyr=r(V7t,"t5"),V7t.forEach(t),Oyr=r(ZRe," \u2014 "),dJ=n(ZRe,"A",{href:!0});var X7t=s(dJ);Vyr=r(X7t,"FlaxT5ForConditionalGeneration"),X7t.forEach(t),Xyr=r(ZRe," (T5 model)"),ZRe.forEach(t),zyr=i(we),jE=n(we,"LI",{});var eBe=s(jE);kFe=n(eBe,"STRONG",{});var z7t=s(kFe);Qyr=r(z7t,"wav2vec2"),z7t.forEach(t),Wyr=r(eBe," \u2014 "),cJ=n(eBe,"A",{href:!0});var Q7t=s(cJ);Hyr=r(Q7t,"FlaxWav2Vec2ForPreTraining"),Q7t.forEach(t),Uyr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),Jyr=i(we),DE=n(we,"LI",{});var oBe=s(DE);SFe=n(oBe,"STRONG",{});var W7t=s(SFe);Yyr=r(W7t,"xlm-roberta"),W7t.forEach(t),Kyr=r(oBe," \u2014 "),fJ=n(oBe,"A",{href:!0});var H7t=s(fJ);Zyr=r(H7t,"FlaxXLMRobertaForMaskedLM"),H7t.forEach(t),eLr=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),we.forEach(t),oLr=i(Ol),T(GE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),QIe=i(f),Pc=n(f,"H2",{class:!0});var ZNe=s(Pc);OE=n(ZNe,"A",{id:!0,class:!0,href:!0});var U7t=s(OE);RFe=n(U7t,"SPAN",{});var J7t=s(RFe);T(ox.$$.fragment,J7t),J7t.forEach(t),U7t.forEach(t),rLr=i(ZNe),BFe=n(ZNe,"SPAN",{});var Y7t=s(BFe);tLr=r(Y7t,"FlaxAutoModelForMaskedLM"),Y7t.forEach(t),ZNe.forEach(t),WIe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(rx.$$.fragment,Vl),aLr=i(Vl),Ic=n(Vl,"P",{});var vZ=s(Ic);nLr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=n(vZ,"A",{href:!0});var K7t=s(mJ);sLr=r(K7t,"from_pretrained()"),K7t.forEach(t),lLr=r(vZ," class method or the "),gJ=n(vZ,"A",{href:!0});var Z7t=s(gJ);iLr=r(Z7t,"from_config()"),Z7t.forEach(t),dLr=r(vZ,` class
method.`),vZ.forEach(t),cLr=i(Vl),tx=n(Vl,"P",{});var eje=s(tx);fLr=r(eje,"This class cannot be instantiated directly using "),PFe=n(eje,"CODE",{});var eMt=s(PFe);mLr=r(eMt,"__init__()"),eMt.forEach(t),gLr=r(eje," (throws an error)."),eje.forEach(t),hLr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var FA=s(Ot);T(ax.$$.fragment,FA),pLr=i(FA),IFe=n(FA,"P",{});var oMt=s(IFe);uLr=r(oMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oMt.forEach(t),_Lr=i(FA),qc=n(FA,"P",{});var FZ=s(qc);bLr=r(FZ,`Note:
Loading a model from its configuration file does `),qFe=n(FZ,"STRONG",{});var rMt=s(qFe);vLr=r(rMt,"not"),rMt.forEach(t),FLr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(FZ,"A",{href:!0});var tMt=s(hJ);TLr=r(tMt,"from_pretrained()"),tMt.forEach(t),MLr=r(FZ," to load the model weights."),FZ.forEach(t),ELr=i(FA),T(VE.$$.fragment,FA),FA.forEach(t),CLr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(nx.$$.fragment,Xl),wLr=i(Xl),NFe=n(Xl,"P",{});var aMt=s(NFe);ALr=r(aMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aMt.forEach(t),yLr=i(Xl),un=n(Xl,"P",{});var TA=s(un);LLr=r(TA,"The model class to instantiate is selected based on the "),jFe=n(TA,"CODE",{});var nMt=s(jFe);xLr=r(nMt,"model_type"),nMt.forEach(t),$Lr=r(TA,` property of the config object (either
passed as an argument or loaded from `),DFe=n(TA,"CODE",{});var sMt=s(DFe);kLr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),SLr=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GFe=n(TA,"CODE",{});var lMt=s(GFe);RLr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),BLr=r(TA,":"),TA.forEach(t),PLr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);XE=n(Be,"LI",{});var rBe=s(XE);OFe=n(rBe,"STRONG",{});var iMt=s(OFe);ILr=r(iMt,"albert"),iMt.forEach(t),qLr=r(rBe," \u2014 "),pJ=n(rBe,"A",{href:!0});var dMt=s(pJ);NLr=r(dMt,"FlaxAlbertForMaskedLM"),dMt.forEach(t),jLr=r(rBe," (ALBERT model)"),rBe.forEach(t),DLr=i(Be),zE=n(Be,"LI",{});var tBe=s(zE);VFe=n(tBe,"STRONG",{});var cMt=s(VFe);GLr=r(cMt,"bart"),cMt.forEach(t),OLr=r(tBe," \u2014 "),uJ=n(tBe,"A",{href:!0});var fMt=s(uJ);VLr=r(fMt,"FlaxBartForConditionalGeneration"),fMt.forEach(t),XLr=r(tBe," (BART model)"),tBe.forEach(t),zLr=i(Be),QE=n(Be,"LI",{});var aBe=s(QE);XFe=n(aBe,"STRONG",{});var mMt=s(XFe);QLr=r(mMt,"bert"),mMt.forEach(t),WLr=r(aBe," \u2014 "),_J=n(aBe,"A",{href:!0});var gMt=s(_J);HLr=r(gMt,"FlaxBertForMaskedLM"),gMt.forEach(t),ULr=r(aBe," (BERT model)"),aBe.forEach(t),JLr=i(Be),WE=n(Be,"LI",{});var nBe=s(WE);zFe=n(nBe,"STRONG",{});var hMt=s(zFe);YLr=r(hMt,"big_bird"),hMt.forEach(t),KLr=r(nBe," \u2014 "),bJ=n(nBe,"A",{href:!0});var pMt=s(bJ);ZLr=r(pMt,"FlaxBigBirdForMaskedLM"),pMt.forEach(t),e8r=r(nBe," (BigBird model)"),nBe.forEach(t),o8r=i(Be),HE=n(Be,"LI",{});var sBe=s(HE);QFe=n(sBe,"STRONG",{});var uMt=s(QFe);r8r=r(uMt,"distilbert"),uMt.forEach(t),t8r=r(sBe," \u2014 "),vJ=n(sBe,"A",{href:!0});var _Mt=s(vJ);a8r=r(_Mt,"FlaxDistilBertForMaskedLM"),_Mt.forEach(t),n8r=r(sBe," (DistilBERT model)"),sBe.forEach(t),s8r=i(Be),UE=n(Be,"LI",{});var lBe=s(UE);WFe=n(lBe,"STRONG",{});var bMt=s(WFe);l8r=r(bMt,"electra"),bMt.forEach(t),i8r=r(lBe," \u2014 "),FJ=n(lBe,"A",{href:!0});var vMt=s(FJ);d8r=r(vMt,"FlaxElectraForMaskedLM"),vMt.forEach(t),c8r=r(lBe," (ELECTRA model)"),lBe.forEach(t),f8r=i(Be),JE=n(Be,"LI",{});var iBe=s(JE);HFe=n(iBe,"STRONG",{});var FMt=s(HFe);m8r=r(FMt,"mbart"),FMt.forEach(t),g8r=r(iBe," \u2014 "),TJ=n(iBe,"A",{href:!0});var TMt=s(TJ);h8r=r(TMt,"FlaxMBartForConditionalGeneration"),TMt.forEach(t),p8r=r(iBe," (mBART model)"),iBe.forEach(t),u8r=i(Be),YE=n(Be,"LI",{});var dBe=s(YE);UFe=n(dBe,"STRONG",{});var MMt=s(UFe);_8r=r(MMt,"roberta"),MMt.forEach(t),b8r=r(dBe," \u2014 "),MJ=n(dBe,"A",{href:!0});var EMt=s(MJ);v8r=r(EMt,"FlaxRobertaForMaskedLM"),EMt.forEach(t),F8r=r(dBe," (RoBERTa model)"),dBe.forEach(t),T8r=i(Be),KE=n(Be,"LI",{});var cBe=s(KE);JFe=n(cBe,"STRONG",{});var CMt=s(JFe);M8r=r(CMt,"roformer"),CMt.forEach(t),E8r=r(cBe," \u2014 "),EJ=n(cBe,"A",{href:!0});var wMt=s(EJ);C8r=r(wMt,"FlaxRoFormerForMaskedLM"),wMt.forEach(t),w8r=r(cBe," (RoFormer model)"),cBe.forEach(t),A8r=i(Be),ZE=n(Be,"LI",{});var fBe=s(ZE);YFe=n(fBe,"STRONG",{});var AMt=s(YFe);y8r=r(AMt,"xlm-roberta"),AMt.forEach(t),L8r=r(fBe," \u2014 "),CJ=n(fBe,"A",{href:!0});var yMt=s(CJ);x8r=r(yMt,"FlaxXLMRobertaForMaskedLM"),yMt.forEach(t),$8r=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),Be.forEach(t),k8r=i(Xl),T(eC.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),HIe=i(f),Nc=n(f,"H2",{class:!0});var oje=s(Nc);oC=n(oje,"A",{id:!0,class:!0,href:!0});var LMt=s(oC);KFe=n(LMt,"SPAN",{});var xMt=s(KFe);T(sx.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),S8r=i(oje),ZFe=n(oje,"SPAN",{});var $Mt=s(ZFe);R8r=r($Mt,"FlaxAutoModelForSeq2SeqLM"),$Mt.forEach(t),oje.forEach(t),UIe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(lx.$$.fragment,zl),B8r=i(zl),jc=n(zl,"P",{});var TZ=s(jc);P8r=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=n(TZ,"A",{href:!0});var kMt=s(wJ);I8r=r(kMt,"from_pretrained()"),kMt.forEach(t),q8r=r(TZ," class method or the "),AJ=n(TZ,"A",{href:!0});var SMt=s(AJ);N8r=r(SMt,"from_config()"),SMt.forEach(t),j8r=r(TZ,` class
method.`),TZ.forEach(t),D8r=i(zl),ix=n(zl,"P",{});var rje=s(ix);G8r=r(rje,"This class cannot be instantiated directly using "),e0e=n(rje,"CODE",{});var RMt=s(e0e);O8r=r(RMt,"__init__()"),RMt.forEach(t),V8r=r(rje," (throws an error)."),rje.forEach(t),X8r=i(zl),Vt=n(zl,"DIV",{class:!0});var MA=s(Vt);T(dx.$$.fragment,MA),z8r=i(MA),o0e=n(MA,"P",{});var BMt=s(o0e);Q8r=r(BMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BMt.forEach(t),W8r=i(MA),Dc=n(MA,"P",{});var MZ=s(Dc);H8r=r(MZ,`Note:
Loading a model from its configuration file does `),r0e=n(MZ,"STRONG",{});var PMt=s(r0e);U8r=r(PMt,"not"),PMt.forEach(t),J8r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(MZ,"A",{href:!0});var IMt=s(yJ);Y8r=r(IMt,"from_pretrained()"),IMt.forEach(t),K8r=r(MZ," to load the model weights."),MZ.forEach(t),Z8r=i(MA),T(rC.$$.fragment,MA),MA.forEach(t),exr=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(cx.$$.fragment,Ql),oxr=i(Ql),t0e=n(Ql,"P",{});var qMt=s(t0e);rxr=r(qMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qMt.forEach(t),txr=i(Ql),_n=n(Ql,"P",{});var EA=s(_n);axr=r(EA,"The model class to instantiate is selected based on the "),a0e=n(EA,"CODE",{});var NMt=s(a0e);nxr=r(NMt,"model_type"),NMt.forEach(t),sxr=r(EA,` property of the config object (either
passed as an argument or loaded from `),n0e=n(EA,"CODE",{});var jMt=s(n0e);lxr=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),ixr=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s0e=n(EA,"CODE",{});var DMt=s(s0e);dxr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),cxr=r(EA,":"),EA.forEach(t),fxr=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);tC=n(Ve,"LI",{});var mBe=s(tC);l0e=n(mBe,"STRONG",{});var GMt=s(l0e);mxr=r(GMt,"bart"),GMt.forEach(t),gxr=r(mBe," \u2014 "),LJ=n(mBe,"A",{href:!0});var OMt=s(LJ);hxr=r(OMt,"FlaxBartForConditionalGeneration"),OMt.forEach(t),pxr=r(mBe," (BART model)"),mBe.forEach(t),uxr=i(Ve),aC=n(Ve,"LI",{});var gBe=s(aC);i0e=n(gBe,"STRONG",{});var VMt=s(i0e);_xr=r(VMt,"blenderbot"),VMt.forEach(t),bxr=r(gBe," \u2014 "),xJ=n(gBe,"A",{href:!0});var XMt=s(xJ);vxr=r(XMt,"FlaxBlenderbotForConditionalGeneration"),XMt.forEach(t),Fxr=r(gBe," (Blenderbot model)"),gBe.forEach(t),Txr=i(Ve),nC=n(Ve,"LI",{});var hBe=s(nC);d0e=n(hBe,"STRONG",{});var zMt=s(d0e);Mxr=r(zMt,"blenderbot-small"),zMt.forEach(t),Exr=r(hBe," \u2014 "),$J=n(hBe,"A",{href:!0});var QMt=s($J);Cxr=r(QMt,"FlaxBlenderbotSmallForConditionalGeneration"),QMt.forEach(t),wxr=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),Axr=i(Ve),sC=n(Ve,"LI",{});var pBe=s(sC);c0e=n(pBe,"STRONG",{});var WMt=s(c0e);yxr=r(WMt,"encoder-decoder"),WMt.forEach(t),Lxr=r(pBe," \u2014 "),kJ=n(pBe,"A",{href:!0});var HMt=s(kJ);xxr=r(HMt,"FlaxEncoderDecoderModel"),HMt.forEach(t),$xr=r(pBe," (Encoder decoder model)"),pBe.forEach(t),kxr=i(Ve),lC=n(Ve,"LI",{});var uBe=s(lC);f0e=n(uBe,"STRONG",{});var UMt=s(f0e);Sxr=r(UMt,"marian"),UMt.forEach(t),Rxr=r(uBe," \u2014 "),SJ=n(uBe,"A",{href:!0});var JMt=s(SJ);Bxr=r(JMt,"FlaxMarianMTModel"),JMt.forEach(t),Pxr=r(uBe," (Marian model)"),uBe.forEach(t),Ixr=i(Ve),iC=n(Ve,"LI",{});var _Be=s(iC);m0e=n(_Be,"STRONG",{});var YMt=s(m0e);qxr=r(YMt,"mbart"),YMt.forEach(t),Nxr=r(_Be," \u2014 "),RJ=n(_Be,"A",{href:!0});var KMt=s(RJ);jxr=r(KMt,"FlaxMBartForConditionalGeneration"),KMt.forEach(t),Dxr=r(_Be," (mBART model)"),_Be.forEach(t),Gxr=i(Ve),dC=n(Ve,"LI",{});var bBe=s(dC);g0e=n(bBe,"STRONG",{});var ZMt=s(g0e);Oxr=r(ZMt,"mt5"),ZMt.forEach(t),Vxr=r(bBe," \u2014 "),BJ=n(bBe,"A",{href:!0});var eEt=s(BJ);Xxr=r(eEt,"FlaxMT5ForConditionalGeneration"),eEt.forEach(t),zxr=r(bBe," (mT5 model)"),bBe.forEach(t),Qxr=i(Ve),cC=n(Ve,"LI",{});var vBe=s(cC);h0e=n(vBe,"STRONG",{});var oEt=s(h0e);Wxr=r(oEt,"pegasus"),oEt.forEach(t),Hxr=r(vBe," \u2014 "),PJ=n(vBe,"A",{href:!0});var rEt=s(PJ);Uxr=r(rEt,"FlaxPegasusForConditionalGeneration"),rEt.forEach(t),Jxr=r(vBe," (Pegasus model)"),vBe.forEach(t),Yxr=i(Ve),fC=n(Ve,"LI",{});var FBe=s(fC);p0e=n(FBe,"STRONG",{});var tEt=s(p0e);Kxr=r(tEt,"t5"),tEt.forEach(t),Zxr=r(FBe," \u2014 "),IJ=n(FBe,"A",{href:!0});var aEt=s(IJ);e9r=r(aEt,"FlaxT5ForConditionalGeneration"),aEt.forEach(t),o9r=r(FBe," (T5 model)"),FBe.forEach(t),Ve.forEach(t),r9r=i(Ql),T(mC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),JIe=i(f),Gc=n(f,"H2",{class:!0});var tje=s(Gc);gC=n(tje,"A",{id:!0,class:!0,href:!0});var nEt=s(gC);u0e=n(nEt,"SPAN",{});var sEt=s(u0e);T(fx.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),t9r=i(tje),_0e=n(tje,"SPAN",{});var lEt=s(_0e);a9r=r(lEt,"FlaxAutoModelForSequenceClassification"),lEt.forEach(t),tje.forEach(t),YIe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(mx.$$.fragment,Wl),n9r=i(Wl),Oc=n(Wl,"P",{});var EZ=s(Oc);s9r=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=n(EZ,"A",{href:!0});var iEt=s(qJ);l9r=r(iEt,"from_pretrained()"),iEt.forEach(t),i9r=r(EZ," class method or the "),NJ=n(EZ,"A",{href:!0});var dEt=s(NJ);d9r=r(dEt,"from_config()"),dEt.forEach(t),c9r=r(EZ,` class
method.`),EZ.forEach(t),f9r=i(Wl),gx=n(Wl,"P",{});var aje=s(gx);m9r=r(aje,"This class cannot be instantiated directly using "),b0e=n(aje,"CODE",{});var cEt=s(b0e);g9r=r(cEt,"__init__()"),cEt.forEach(t),h9r=r(aje," (throws an error)."),aje.forEach(t),p9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var CA=s(Xt);T(hx.$$.fragment,CA),u9r=i(CA),v0e=n(CA,"P",{});var fEt=s(v0e);_9r=r(fEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fEt.forEach(t),b9r=i(CA),Vc=n(CA,"P",{});var CZ=s(Vc);v9r=r(CZ,`Note:
Loading a model from its configuration file does `),F0e=n(CZ,"STRONG",{});var mEt=s(F0e);F9r=r(mEt,"not"),mEt.forEach(t),T9r=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(CZ,"A",{href:!0});var gEt=s(jJ);M9r=r(gEt,"from_pretrained()"),gEt.forEach(t),E9r=r(CZ," to load the model weights."),CZ.forEach(t),C9r=i(CA),T(hC.$$.fragment,CA),CA.forEach(t),w9r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(px.$$.fragment,Hl),A9r=i(Hl),T0e=n(Hl,"P",{});var hEt=s(T0e);y9r=r(hEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hEt.forEach(t),L9r=i(Hl),bn=n(Hl,"P",{});var wA=s(bn);x9r=r(wA,"The model class to instantiate is selected based on the "),M0e=n(wA,"CODE",{});var pEt=s(M0e);$9r=r(pEt,"model_type"),pEt.forEach(t),k9r=r(wA,` property of the config object (either
passed as an argument or loaded from `),E0e=n(wA,"CODE",{});var uEt=s(E0e);S9r=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),R9r=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C0e=n(wA,"CODE",{});var _Et=s(C0e);B9r=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),P9r=r(wA,":"),wA.forEach(t),I9r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);pC=n(Pe,"LI",{});var TBe=s(pC);w0e=n(TBe,"STRONG",{});var bEt=s(w0e);q9r=r(bEt,"albert"),bEt.forEach(t),N9r=r(TBe," \u2014 "),DJ=n(TBe,"A",{href:!0});var vEt=s(DJ);j9r=r(vEt,"FlaxAlbertForSequenceClassification"),vEt.forEach(t),D9r=r(TBe," (ALBERT model)"),TBe.forEach(t),G9r=i(Pe),uC=n(Pe,"LI",{});var MBe=s(uC);A0e=n(MBe,"STRONG",{});var FEt=s(A0e);O9r=r(FEt,"bart"),FEt.forEach(t),V9r=r(MBe," \u2014 "),GJ=n(MBe,"A",{href:!0});var TEt=s(GJ);X9r=r(TEt,"FlaxBartForSequenceClassification"),TEt.forEach(t),z9r=r(MBe," (BART model)"),MBe.forEach(t),Q9r=i(Pe),_C=n(Pe,"LI",{});var EBe=s(_C);y0e=n(EBe,"STRONG",{});var MEt=s(y0e);W9r=r(MEt,"bert"),MEt.forEach(t),H9r=r(EBe," \u2014 "),OJ=n(EBe,"A",{href:!0});var EEt=s(OJ);U9r=r(EEt,"FlaxBertForSequenceClassification"),EEt.forEach(t),J9r=r(EBe," (BERT model)"),EBe.forEach(t),Y9r=i(Pe),bC=n(Pe,"LI",{});var CBe=s(bC);L0e=n(CBe,"STRONG",{});var CEt=s(L0e);K9r=r(CEt,"big_bird"),CEt.forEach(t),Z9r=r(CBe," \u2014 "),VJ=n(CBe,"A",{href:!0});var wEt=s(VJ);e$r=r(wEt,"FlaxBigBirdForSequenceClassification"),wEt.forEach(t),o$r=r(CBe," (BigBird model)"),CBe.forEach(t),r$r=i(Pe),vC=n(Pe,"LI",{});var wBe=s(vC);x0e=n(wBe,"STRONG",{});var AEt=s(x0e);t$r=r(AEt,"distilbert"),AEt.forEach(t),a$r=r(wBe," \u2014 "),XJ=n(wBe,"A",{href:!0});var yEt=s(XJ);n$r=r(yEt,"FlaxDistilBertForSequenceClassification"),yEt.forEach(t),s$r=r(wBe," (DistilBERT model)"),wBe.forEach(t),l$r=i(Pe),FC=n(Pe,"LI",{});var ABe=s(FC);$0e=n(ABe,"STRONG",{});var LEt=s($0e);i$r=r(LEt,"electra"),LEt.forEach(t),d$r=r(ABe," \u2014 "),zJ=n(ABe,"A",{href:!0});var xEt=s(zJ);c$r=r(xEt,"FlaxElectraForSequenceClassification"),xEt.forEach(t),f$r=r(ABe," (ELECTRA model)"),ABe.forEach(t),m$r=i(Pe),TC=n(Pe,"LI",{});var yBe=s(TC);k0e=n(yBe,"STRONG",{});var $Et=s(k0e);g$r=r($Et,"mbart"),$Et.forEach(t),h$r=r(yBe," \u2014 "),QJ=n(yBe,"A",{href:!0});var kEt=s(QJ);p$r=r(kEt,"FlaxMBartForSequenceClassification"),kEt.forEach(t),u$r=r(yBe," (mBART model)"),yBe.forEach(t),_$r=i(Pe),MC=n(Pe,"LI",{});var LBe=s(MC);S0e=n(LBe,"STRONG",{});var SEt=s(S0e);b$r=r(SEt,"roberta"),SEt.forEach(t),v$r=r(LBe," \u2014 "),WJ=n(LBe,"A",{href:!0});var REt=s(WJ);F$r=r(REt,"FlaxRobertaForSequenceClassification"),REt.forEach(t),T$r=r(LBe," (RoBERTa model)"),LBe.forEach(t),M$r=i(Pe),EC=n(Pe,"LI",{});var xBe=s(EC);R0e=n(xBe,"STRONG",{});var BEt=s(R0e);E$r=r(BEt,"roformer"),BEt.forEach(t),C$r=r(xBe," \u2014 "),HJ=n(xBe,"A",{href:!0});var PEt=s(HJ);w$r=r(PEt,"FlaxRoFormerForSequenceClassification"),PEt.forEach(t),A$r=r(xBe," (RoFormer model)"),xBe.forEach(t),y$r=i(Pe),CC=n(Pe,"LI",{});var $Be=s(CC);B0e=n($Be,"STRONG",{});var IEt=s(B0e);L$r=r(IEt,"xlm-roberta"),IEt.forEach(t),x$r=r($Be," \u2014 "),UJ=n($Be,"A",{href:!0});var qEt=s(UJ);$$r=r(qEt,"FlaxXLMRobertaForSequenceClassification"),qEt.forEach(t),k$r=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Pe.forEach(t),S$r=i(Hl),T(wC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),KIe=i(f),Xc=n(f,"H2",{class:!0});var nje=s(Xc);AC=n(nje,"A",{id:!0,class:!0,href:!0});var NEt=s(AC);P0e=n(NEt,"SPAN",{});var jEt=s(P0e);T(ux.$$.fragment,jEt),jEt.forEach(t),NEt.forEach(t),R$r=i(nje),I0e=n(nje,"SPAN",{});var DEt=s(I0e);B$r=r(DEt,"FlaxAutoModelForQuestionAnswering"),DEt.forEach(t),nje.forEach(t),ZIe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(_x.$$.fragment,Ul),P$r=i(Ul),zc=n(Ul,"P",{});var wZ=s(zc);I$r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=n(wZ,"A",{href:!0});var GEt=s(JJ);q$r=r(GEt,"from_pretrained()"),GEt.forEach(t),N$r=r(wZ," class method or the "),YJ=n(wZ,"A",{href:!0});var OEt=s(YJ);j$r=r(OEt,"from_config()"),OEt.forEach(t),D$r=r(wZ,` class
method.`),wZ.forEach(t),G$r=i(Ul),bx=n(Ul,"P",{});var sje=s(bx);O$r=r(sje,"This class cannot be instantiated directly using "),q0e=n(sje,"CODE",{});var VEt=s(q0e);V$r=r(VEt,"__init__()"),VEt.forEach(t),X$r=r(sje," (throws an error)."),sje.forEach(t),z$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var AA=s(zt);T(vx.$$.fragment,AA),Q$r=i(AA),N0e=n(AA,"P",{});var XEt=s(N0e);W$r=r(XEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XEt.forEach(t),H$r=i(AA),Qc=n(AA,"P",{});var AZ=s(Qc);U$r=r(AZ,`Note:
Loading a model from its configuration file does `),j0e=n(AZ,"STRONG",{});var zEt=s(j0e);J$r=r(zEt,"not"),zEt.forEach(t),Y$r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(AZ,"A",{href:!0});var QEt=s(KJ);K$r=r(QEt,"from_pretrained()"),QEt.forEach(t),Z$r=r(AZ," to load the model weights."),AZ.forEach(t),ekr=i(AA),T(yC.$$.fragment,AA),AA.forEach(t),okr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(Fx.$$.fragment,Jl),rkr=i(Jl),D0e=n(Jl,"P",{});var WEt=s(D0e);tkr=r(WEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WEt.forEach(t),akr=i(Jl),vn=n(Jl,"P",{});var yA=s(vn);nkr=r(yA,"The model class to instantiate is selected based on the "),G0e=n(yA,"CODE",{});var HEt=s(G0e);skr=r(HEt,"model_type"),HEt.forEach(t),lkr=r(yA,` property of the config object (either
passed as an argument or loaded from `),O0e=n(yA,"CODE",{});var UEt=s(O0e);ikr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),dkr=r(yA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V0e=n(yA,"CODE",{});var JEt=s(V0e);ckr=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),fkr=r(yA,":"),yA.forEach(t),mkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);LC=n(Ie,"LI",{});var kBe=s(LC);X0e=n(kBe,"STRONG",{});var YEt=s(X0e);gkr=r(YEt,"albert"),YEt.forEach(t),hkr=r(kBe," \u2014 "),ZJ=n(kBe,"A",{href:!0});var KEt=s(ZJ);pkr=r(KEt,"FlaxAlbertForQuestionAnswering"),KEt.forEach(t),ukr=r(kBe," (ALBERT model)"),kBe.forEach(t),_kr=i(Ie),xC=n(Ie,"LI",{});var SBe=s(xC);z0e=n(SBe,"STRONG",{});var ZEt=s(z0e);bkr=r(ZEt,"bart"),ZEt.forEach(t),vkr=r(SBe," \u2014 "),eY=n(SBe,"A",{href:!0});var eCt=s(eY);Fkr=r(eCt,"FlaxBartForQuestionAnswering"),eCt.forEach(t),Tkr=r(SBe," (BART model)"),SBe.forEach(t),Mkr=i(Ie),$C=n(Ie,"LI",{});var RBe=s($C);Q0e=n(RBe,"STRONG",{});var oCt=s(Q0e);Ekr=r(oCt,"bert"),oCt.forEach(t),Ckr=r(RBe," \u2014 "),oY=n(RBe,"A",{href:!0});var rCt=s(oY);wkr=r(rCt,"FlaxBertForQuestionAnswering"),rCt.forEach(t),Akr=r(RBe," (BERT model)"),RBe.forEach(t),ykr=i(Ie),kC=n(Ie,"LI",{});var BBe=s(kC);W0e=n(BBe,"STRONG",{});var tCt=s(W0e);Lkr=r(tCt,"big_bird"),tCt.forEach(t),xkr=r(BBe," \u2014 "),rY=n(BBe,"A",{href:!0});var aCt=s(rY);$kr=r(aCt,"FlaxBigBirdForQuestionAnswering"),aCt.forEach(t),kkr=r(BBe," (BigBird model)"),BBe.forEach(t),Skr=i(Ie),SC=n(Ie,"LI",{});var PBe=s(SC);H0e=n(PBe,"STRONG",{});var nCt=s(H0e);Rkr=r(nCt,"distilbert"),nCt.forEach(t),Bkr=r(PBe," \u2014 "),tY=n(PBe,"A",{href:!0});var sCt=s(tY);Pkr=r(sCt,"FlaxDistilBertForQuestionAnswering"),sCt.forEach(t),Ikr=r(PBe," (DistilBERT model)"),PBe.forEach(t),qkr=i(Ie),RC=n(Ie,"LI",{});var IBe=s(RC);U0e=n(IBe,"STRONG",{});var lCt=s(U0e);Nkr=r(lCt,"electra"),lCt.forEach(t),jkr=r(IBe," \u2014 "),aY=n(IBe,"A",{href:!0});var iCt=s(aY);Dkr=r(iCt,"FlaxElectraForQuestionAnswering"),iCt.forEach(t),Gkr=r(IBe," (ELECTRA model)"),IBe.forEach(t),Okr=i(Ie),BC=n(Ie,"LI",{});var qBe=s(BC);J0e=n(qBe,"STRONG",{});var dCt=s(J0e);Vkr=r(dCt,"mbart"),dCt.forEach(t),Xkr=r(qBe," \u2014 "),nY=n(qBe,"A",{href:!0});var cCt=s(nY);zkr=r(cCt,"FlaxMBartForQuestionAnswering"),cCt.forEach(t),Qkr=r(qBe," (mBART model)"),qBe.forEach(t),Wkr=i(Ie),PC=n(Ie,"LI",{});var NBe=s(PC);Y0e=n(NBe,"STRONG",{});var fCt=s(Y0e);Hkr=r(fCt,"roberta"),fCt.forEach(t),Ukr=r(NBe," \u2014 "),sY=n(NBe,"A",{href:!0});var mCt=s(sY);Jkr=r(mCt,"FlaxRobertaForQuestionAnswering"),mCt.forEach(t),Ykr=r(NBe," (RoBERTa model)"),NBe.forEach(t),Kkr=i(Ie),IC=n(Ie,"LI",{});var jBe=s(IC);K0e=n(jBe,"STRONG",{});var gCt=s(K0e);Zkr=r(gCt,"roformer"),gCt.forEach(t),eSr=r(jBe," \u2014 "),lY=n(jBe,"A",{href:!0});var hCt=s(lY);oSr=r(hCt,"FlaxRoFormerForQuestionAnswering"),hCt.forEach(t),rSr=r(jBe," (RoFormer model)"),jBe.forEach(t),tSr=i(Ie),qC=n(Ie,"LI",{});var DBe=s(qC);Z0e=n(DBe,"STRONG",{});var pCt=s(Z0e);aSr=r(pCt,"xlm-roberta"),pCt.forEach(t),nSr=r(DBe," \u2014 "),iY=n(DBe,"A",{href:!0});var uCt=s(iY);sSr=r(uCt,"FlaxXLMRobertaForQuestionAnswering"),uCt.forEach(t),lSr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),Ie.forEach(t),iSr=i(Jl),T(NC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),eqe=i(f),Wc=n(f,"H2",{class:!0});var lje=s(Wc);jC=n(lje,"A",{id:!0,class:!0,href:!0});var _Ct=s(jC);eTe=n(_Ct,"SPAN",{});var bCt=s(eTe);T(Tx.$$.fragment,bCt),bCt.forEach(t),_Ct.forEach(t),dSr=i(lje),oTe=n(lje,"SPAN",{});var vCt=s(oTe);cSr=r(vCt,"FlaxAutoModelForTokenClassification"),vCt.forEach(t),lje.forEach(t),oqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Mx.$$.fragment,Yl),fSr=i(Yl),Hc=n(Yl,"P",{});var yZ=s(Hc);mSr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=n(yZ,"A",{href:!0});var FCt=s(dY);gSr=r(FCt,"from_pretrained()"),FCt.forEach(t),hSr=r(yZ," class method or the "),cY=n(yZ,"A",{href:!0});var TCt=s(cY);pSr=r(TCt,"from_config()"),TCt.forEach(t),uSr=r(yZ,` class
method.`),yZ.forEach(t),_Sr=i(Yl),Ex=n(Yl,"P",{});var ije=s(Ex);bSr=r(ije,"This class cannot be instantiated directly using "),rTe=n(ije,"CODE",{});var MCt=s(rTe);vSr=r(MCt,"__init__()"),MCt.forEach(t),FSr=r(ije," (throws an error)."),ije.forEach(t),TSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var LA=s(Qt);T(Cx.$$.fragment,LA),MSr=i(LA),tTe=n(LA,"P",{});var ECt=s(tTe);ESr=r(ECt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ECt.forEach(t),CSr=i(LA),Uc=n(LA,"P",{});var LZ=s(Uc);wSr=r(LZ,`Note:
Loading a model from its configuration file does `),aTe=n(LZ,"STRONG",{});var CCt=s(aTe);ASr=r(CCt,"not"),CCt.forEach(t),ySr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(LZ,"A",{href:!0});var wCt=s(fY);LSr=r(wCt,"from_pretrained()"),wCt.forEach(t),xSr=r(LZ," to load the model weights."),LZ.forEach(t),$Sr=i(LA),T(DC.$$.fragment,LA),LA.forEach(t),kSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(wx.$$.fragment,Kl),SSr=i(Kl),nTe=n(Kl,"P",{});var ACt=s(nTe);RSr=r(ACt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ACt.forEach(t),BSr=i(Kl),Fn=n(Kl,"P",{});var xA=s(Fn);PSr=r(xA,"The model class to instantiate is selected based on the "),sTe=n(xA,"CODE",{});var yCt=s(sTe);ISr=r(yCt,"model_type"),yCt.forEach(t),qSr=r(xA,` property of the config object (either
passed as an argument or loaded from `),lTe=n(xA,"CODE",{});var LCt=s(lTe);NSr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),jSr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(xA,"CODE",{});var xCt=s(iTe);DSr=r(xCt,"pretrained_model_name_or_path"),xCt.forEach(t),GSr=r(xA,":"),xA.forEach(t),OSr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);GC=n(Fo,"LI",{});var GBe=s(GC);dTe=n(GBe,"STRONG",{});var $Ct=s(dTe);VSr=r($Ct,"albert"),$Ct.forEach(t),XSr=r(GBe," \u2014 "),mY=n(GBe,"A",{href:!0});var kCt=s(mY);zSr=r(kCt,"FlaxAlbertForTokenClassification"),kCt.forEach(t),QSr=r(GBe," (ALBERT model)"),GBe.forEach(t),WSr=i(Fo),OC=n(Fo,"LI",{});var OBe=s(OC);cTe=n(OBe,"STRONG",{});var SCt=s(cTe);HSr=r(SCt,"bert"),SCt.forEach(t),USr=r(OBe," \u2014 "),gY=n(OBe,"A",{href:!0});var RCt=s(gY);JSr=r(RCt,"FlaxBertForTokenClassification"),RCt.forEach(t),YSr=r(OBe," (BERT model)"),OBe.forEach(t),KSr=i(Fo),VC=n(Fo,"LI",{});var VBe=s(VC);fTe=n(VBe,"STRONG",{});var BCt=s(fTe);ZSr=r(BCt,"big_bird"),BCt.forEach(t),eRr=r(VBe," \u2014 "),hY=n(VBe,"A",{href:!0});var PCt=s(hY);oRr=r(PCt,"FlaxBigBirdForTokenClassification"),PCt.forEach(t),rRr=r(VBe," (BigBird model)"),VBe.forEach(t),tRr=i(Fo),XC=n(Fo,"LI",{});var XBe=s(XC);mTe=n(XBe,"STRONG",{});var ICt=s(mTe);aRr=r(ICt,"distilbert"),ICt.forEach(t),nRr=r(XBe," \u2014 "),pY=n(XBe,"A",{href:!0});var qCt=s(pY);sRr=r(qCt,"FlaxDistilBertForTokenClassification"),qCt.forEach(t),lRr=r(XBe," (DistilBERT model)"),XBe.forEach(t),iRr=i(Fo),zC=n(Fo,"LI",{});var zBe=s(zC);gTe=n(zBe,"STRONG",{});var NCt=s(gTe);dRr=r(NCt,"electra"),NCt.forEach(t),cRr=r(zBe," \u2014 "),uY=n(zBe,"A",{href:!0});var jCt=s(uY);fRr=r(jCt,"FlaxElectraForTokenClassification"),jCt.forEach(t),mRr=r(zBe," (ELECTRA model)"),zBe.forEach(t),gRr=i(Fo),QC=n(Fo,"LI",{});var QBe=s(QC);hTe=n(QBe,"STRONG",{});var DCt=s(hTe);hRr=r(DCt,"roberta"),DCt.forEach(t),pRr=r(QBe," \u2014 "),_Y=n(QBe,"A",{href:!0});var GCt=s(_Y);uRr=r(GCt,"FlaxRobertaForTokenClassification"),GCt.forEach(t),_Rr=r(QBe," (RoBERTa model)"),QBe.forEach(t),bRr=i(Fo),WC=n(Fo,"LI",{});var WBe=s(WC);pTe=n(WBe,"STRONG",{});var OCt=s(pTe);vRr=r(OCt,"roformer"),OCt.forEach(t),FRr=r(WBe," \u2014 "),bY=n(WBe,"A",{href:!0});var VCt=s(bY);TRr=r(VCt,"FlaxRoFormerForTokenClassification"),VCt.forEach(t),MRr=r(WBe," (RoFormer model)"),WBe.forEach(t),ERr=i(Fo),HC=n(Fo,"LI",{});var HBe=s(HC);uTe=n(HBe,"STRONG",{});var XCt=s(uTe);CRr=r(XCt,"xlm-roberta"),XCt.forEach(t),wRr=r(HBe," \u2014 "),vY=n(HBe,"A",{href:!0});var zCt=s(vY);ARr=r(zCt,"FlaxXLMRobertaForTokenClassification"),zCt.forEach(t),yRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Fo.forEach(t),LRr=i(Kl),T(UC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),rqe=i(f),Jc=n(f,"H2",{class:!0});var dje=s(Jc);JC=n(dje,"A",{id:!0,class:!0,href:!0});var QCt=s(JC);_Te=n(QCt,"SPAN",{});var WCt=s(_Te);T(Ax.$$.fragment,WCt),WCt.forEach(t),QCt.forEach(t),xRr=i(dje),bTe=n(dje,"SPAN",{});var HCt=s(bTe);$Rr=r(HCt,"FlaxAutoModelForMultipleChoice"),HCt.forEach(t),dje.forEach(t),tqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(yx.$$.fragment,Zl),kRr=i(Zl),Yc=n(Zl,"P",{});var xZ=s(Yc);SRr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FY=n(xZ,"A",{href:!0});var UCt=s(FY);RRr=r(UCt,"from_pretrained()"),UCt.forEach(t),BRr=r(xZ," class method or the "),TY=n(xZ,"A",{href:!0});var JCt=s(TY);PRr=r(JCt,"from_config()"),JCt.forEach(t),IRr=r(xZ,` class
method.`),xZ.forEach(t),qRr=i(Zl),Lx=n(Zl,"P",{});var cje=s(Lx);NRr=r(cje,"This class cannot be instantiated directly using "),vTe=n(cje,"CODE",{});var YCt=s(vTe);jRr=r(YCt,"__init__()"),YCt.forEach(t),DRr=r(cje," (throws an error)."),cje.forEach(t),GRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var $A=s(Wt);T(xx.$$.fragment,$A),ORr=i($A),FTe=n($A,"P",{});var KCt=s(FTe);VRr=r(KCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KCt.forEach(t),XRr=i($A),Kc=n($A,"P",{});var $Z=s(Kc);zRr=r($Z,`Note:
Loading a model from its configuration file does `),TTe=n($Z,"STRONG",{});var ZCt=s(TTe);QRr=r(ZCt,"not"),ZCt.forEach(t),WRr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n($Z,"A",{href:!0});var e3t=s(MY);HRr=r(e3t,"from_pretrained()"),e3t.forEach(t),URr=r($Z," to load the model weights."),$Z.forEach(t),JRr=i($A),T(YC.$$.fragment,$A),$A.forEach(t),YRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T($x.$$.fragment,ei),KRr=i(ei),MTe=n(ei,"P",{});var o3t=s(MTe);ZRr=r(o3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o3t.forEach(t),eBr=i(ei),Tn=n(ei,"P",{});var kA=s(Tn);oBr=r(kA,"The model class to instantiate is selected based on the "),ETe=n(kA,"CODE",{});var r3t=s(ETe);rBr=r(r3t,"model_type"),r3t.forEach(t),tBr=r(kA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(kA,"CODE",{});var t3t=s(CTe);aBr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),nBr=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(kA,"CODE",{});var a3t=s(wTe);sBr=r(a3t,"pretrained_model_name_or_path"),a3t.forEach(t),lBr=r(kA,":"),kA.forEach(t),iBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);KC=n(To,"LI",{});var UBe=s(KC);ATe=n(UBe,"STRONG",{});var n3t=s(ATe);dBr=r(n3t,"albert"),n3t.forEach(t),cBr=r(UBe," \u2014 "),EY=n(UBe,"A",{href:!0});var s3t=s(EY);fBr=r(s3t,"FlaxAlbertForMultipleChoice"),s3t.forEach(t),mBr=r(UBe," (ALBERT model)"),UBe.forEach(t),gBr=i(To),ZC=n(To,"LI",{});var JBe=s(ZC);yTe=n(JBe,"STRONG",{});var l3t=s(yTe);hBr=r(l3t,"bert"),l3t.forEach(t),pBr=r(JBe," \u2014 "),CY=n(JBe,"A",{href:!0});var i3t=s(CY);uBr=r(i3t,"FlaxBertForMultipleChoice"),i3t.forEach(t),_Br=r(JBe," (BERT model)"),JBe.forEach(t),bBr=i(To),e3=n(To,"LI",{});var YBe=s(e3);LTe=n(YBe,"STRONG",{});var d3t=s(LTe);vBr=r(d3t,"big_bird"),d3t.forEach(t),FBr=r(YBe," \u2014 "),wY=n(YBe,"A",{href:!0});var c3t=s(wY);TBr=r(c3t,"FlaxBigBirdForMultipleChoice"),c3t.forEach(t),MBr=r(YBe," (BigBird model)"),YBe.forEach(t),EBr=i(To),o3=n(To,"LI",{});var KBe=s(o3);xTe=n(KBe,"STRONG",{});var f3t=s(xTe);CBr=r(f3t,"distilbert"),f3t.forEach(t),wBr=r(KBe," \u2014 "),AY=n(KBe,"A",{href:!0});var m3t=s(AY);ABr=r(m3t,"FlaxDistilBertForMultipleChoice"),m3t.forEach(t),yBr=r(KBe," (DistilBERT model)"),KBe.forEach(t),LBr=i(To),r3=n(To,"LI",{});var ZBe=s(r3);$Te=n(ZBe,"STRONG",{});var g3t=s($Te);xBr=r(g3t,"electra"),g3t.forEach(t),$Br=r(ZBe," \u2014 "),yY=n(ZBe,"A",{href:!0});var h3t=s(yY);kBr=r(h3t,"FlaxElectraForMultipleChoice"),h3t.forEach(t),SBr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),RBr=i(To),t3=n(To,"LI",{});var ePe=s(t3);kTe=n(ePe,"STRONG",{});var p3t=s(kTe);BBr=r(p3t,"roberta"),p3t.forEach(t),PBr=r(ePe," \u2014 "),LY=n(ePe,"A",{href:!0});var u3t=s(LY);IBr=r(u3t,"FlaxRobertaForMultipleChoice"),u3t.forEach(t),qBr=r(ePe," (RoBERTa model)"),ePe.forEach(t),NBr=i(To),a3=n(To,"LI",{});var oPe=s(a3);STe=n(oPe,"STRONG",{});var _3t=s(STe);jBr=r(_3t,"roformer"),_3t.forEach(t),DBr=r(oPe," \u2014 "),xY=n(oPe,"A",{href:!0});var b3t=s(xY);GBr=r(b3t,"FlaxRoFormerForMultipleChoice"),b3t.forEach(t),OBr=r(oPe," (RoFormer model)"),oPe.forEach(t),VBr=i(To),n3=n(To,"LI",{});var rPe=s(n3);RTe=n(rPe,"STRONG",{});var v3t=s(RTe);XBr=r(v3t,"xlm-roberta"),v3t.forEach(t),zBr=r(rPe," \u2014 "),$Y=n(rPe,"A",{href:!0});var F3t=s($Y);QBr=r(F3t,"FlaxXLMRobertaForMultipleChoice"),F3t.forEach(t),WBr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),To.forEach(t),HBr=i(ei),T(s3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),aqe=i(f),Zc=n(f,"H2",{class:!0});var fje=s(Zc);l3=n(fje,"A",{id:!0,class:!0,href:!0});var T3t=s(l3);BTe=n(T3t,"SPAN",{});var M3t=s(BTe);T(kx.$$.fragment,M3t),M3t.forEach(t),T3t.forEach(t),UBr=i(fje),PTe=n(fje,"SPAN",{});var E3t=s(PTe);JBr=r(E3t,"FlaxAutoModelForNextSentencePrediction"),E3t.forEach(t),fje.forEach(t),nqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(Sx.$$.fragment,oi),YBr=i(oi),ef=n(oi,"P",{});var kZ=s(ef);KBr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=n(kZ,"A",{href:!0});var C3t=s(kY);ZBr=r(C3t,"from_pretrained()"),C3t.forEach(t),ePr=r(kZ," class method or the "),SY=n(kZ,"A",{href:!0});var w3t=s(SY);oPr=r(w3t,"from_config()"),w3t.forEach(t),rPr=r(kZ,` class
method.`),kZ.forEach(t),tPr=i(oi),Rx=n(oi,"P",{});var mje=s(Rx);aPr=r(mje,"This class cannot be instantiated directly using "),ITe=n(mje,"CODE",{});var A3t=s(ITe);nPr=r(A3t,"__init__()"),A3t.forEach(t),sPr=r(mje," (throws an error)."),mje.forEach(t),lPr=i(oi),Ht=n(oi,"DIV",{class:!0});var SA=s(Ht);T(Bx.$$.fragment,SA),iPr=i(SA),qTe=n(SA,"P",{});var y3t=s(qTe);dPr=r(y3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y3t.forEach(t),cPr=i(SA),of=n(SA,"P",{});var SZ=s(of);fPr=r(SZ,`Note:
Loading a model from its configuration file does `),NTe=n(SZ,"STRONG",{});var L3t=s(NTe);mPr=r(L3t,"not"),L3t.forEach(t),gPr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(SZ,"A",{href:!0});var x3t=s(RY);hPr=r(x3t,"from_pretrained()"),x3t.forEach(t),pPr=r(SZ," to load the model weights."),SZ.forEach(t),uPr=i(SA),T(i3.$$.fragment,SA),SA.forEach(t),_Pr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Px.$$.fragment,ri),bPr=i(ri),jTe=n(ri,"P",{});var $3t=s(jTe);vPr=r($3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$3t.forEach(t),FPr=i(ri),Mn=n(ri,"P",{});var RA=s(Mn);TPr=r(RA,"The model class to instantiate is selected based on the "),DTe=n(RA,"CODE",{});var k3t=s(DTe);MPr=r(k3t,"model_type"),k3t.forEach(t),EPr=r(RA,` property of the config object (either
passed as an argument or loaded from `),GTe=n(RA,"CODE",{});var S3t=s(GTe);CPr=r(S3t,"pretrained_model_name_or_path"),S3t.forEach(t),wPr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OTe=n(RA,"CODE",{});var R3t=s(OTe);APr=r(R3t,"pretrained_model_name_or_path"),R3t.forEach(t),yPr=r(RA,":"),RA.forEach(t),LPr=i(ri),VTe=n(ri,"UL",{});var B3t=s(VTe);d3=n(B3t,"LI",{});var tPe=s(d3);XTe=n(tPe,"STRONG",{});var P3t=s(XTe);xPr=r(P3t,"bert"),P3t.forEach(t),$Pr=r(tPe," \u2014 "),BY=n(tPe,"A",{href:!0});var I3t=s(BY);kPr=r(I3t,"FlaxBertForNextSentencePrediction"),I3t.forEach(t),SPr=r(tPe," (BERT model)"),tPe.forEach(t),B3t.forEach(t),RPr=i(ri),T(c3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),sqe=i(f),rf=n(f,"H2",{class:!0});var gje=s(rf);f3=n(gje,"A",{id:!0,class:!0,href:!0});var q3t=s(f3);zTe=n(q3t,"SPAN",{});var N3t=s(zTe);T(Ix.$$.fragment,N3t),N3t.forEach(t),q3t.forEach(t),BPr=i(gje),QTe=n(gje,"SPAN",{});var j3t=s(QTe);PPr=r(j3t,"FlaxAutoModelForImageClassification"),j3t.forEach(t),gje.forEach(t),lqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(qx.$$.fragment,ti),IPr=i(ti),tf=n(ti,"P",{});var RZ=s(tf);qPr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=n(RZ,"A",{href:!0});var D3t=s(PY);NPr=r(D3t,"from_pretrained()"),D3t.forEach(t),jPr=r(RZ," class method or the "),IY=n(RZ,"A",{href:!0});var G3t=s(IY);DPr=r(G3t,"from_config()"),G3t.forEach(t),GPr=r(RZ,` class
method.`),RZ.forEach(t),OPr=i(ti),Nx=n(ti,"P",{});var hje=s(Nx);VPr=r(hje,"This class cannot be instantiated directly using "),WTe=n(hje,"CODE",{});var O3t=s(WTe);XPr=r(O3t,"__init__()"),O3t.forEach(t),zPr=r(hje," (throws an error)."),hje.forEach(t),QPr=i(ti),Ut=n(ti,"DIV",{class:!0});var BA=s(Ut);T(jx.$$.fragment,BA),WPr=i(BA),HTe=n(BA,"P",{});var V3t=s(HTe);HPr=r(V3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V3t.forEach(t),UPr=i(BA),af=n(BA,"P",{});var BZ=s(af);JPr=r(BZ,`Note:
Loading a model from its configuration file does `),UTe=n(BZ,"STRONG",{});var X3t=s(UTe);YPr=r(X3t,"not"),X3t.forEach(t),KPr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(BZ,"A",{href:!0});var z3t=s(qY);ZPr=r(z3t,"from_pretrained()"),z3t.forEach(t),eIr=r(BZ," to load the model weights."),BZ.forEach(t),oIr=i(BA),T(m3.$$.fragment,BA),BA.forEach(t),rIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(Dx.$$.fragment,ai),tIr=i(ai),JTe=n(ai,"P",{});var Q3t=s(JTe);aIr=r(Q3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q3t.forEach(t),nIr=i(ai),En=n(ai,"P",{});var PA=s(En);sIr=r(PA,"The model class to instantiate is selected based on the "),YTe=n(PA,"CODE",{});var W3t=s(YTe);lIr=r(W3t,"model_type"),W3t.forEach(t),iIr=r(PA,` property of the config object (either
passed as an argument or loaded from `),KTe=n(PA,"CODE",{});var H3t=s(KTe);dIr=r(H3t,"pretrained_model_name_or_path"),H3t.forEach(t),cIr=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZTe=n(PA,"CODE",{});var U3t=s(ZTe);fIr=r(U3t,"pretrained_model_name_or_path"),U3t.forEach(t),mIr=r(PA,":"),PA.forEach(t),gIr=i(ai),Gx=n(ai,"UL",{});var pje=s(Gx);g3=n(pje,"LI",{});var aPe=s(g3);e7e=n(aPe,"STRONG",{});var J3t=s(e7e);hIr=r(J3t,"beit"),J3t.forEach(t),pIr=r(aPe," \u2014 "),NY=n(aPe,"A",{href:!0});var Y3t=s(NY);uIr=r(Y3t,"FlaxBeitForImageClassification"),Y3t.forEach(t),_Ir=r(aPe," (BEiT model)"),aPe.forEach(t),bIr=i(pje),h3=n(pje,"LI",{});var nPe=s(h3);o7e=n(nPe,"STRONG",{});var K3t=s(o7e);vIr=r(K3t,"vit"),K3t.forEach(t),FIr=r(nPe," \u2014 "),jY=n(nPe,"A",{href:!0});var Z3t=s(jY);TIr=r(Z3t,"FlaxViTForImageClassification"),Z3t.forEach(t),MIr=r(nPe," (ViT model)"),nPe.forEach(t),pje.forEach(t),EIr=i(ai),T(p3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),iqe=i(f),nf=n(f,"H2",{class:!0});var uje=s(nf);u3=n(uje,"A",{id:!0,class:!0,href:!0});var ewt=s(u3);r7e=n(ewt,"SPAN",{});var owt=s(r7e);T(Ox.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),CIr=i(uje),t7e=n(uje,"SPAN",{});var rwt=s(t7e);wIr=r(rwt,"FlaxAutoModelForVision2Seq"),rwt.forEach(t),uje.forEach(t),dqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Vx.$$.fragment,ni),AIr=i(ni),sf=n(ni,"P",{});var PZ=s(sf);yIr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=n(PZ,"A",{href:!0});var twt=s(DY);LIr=r(twt,"from_pretrained()"),twt.forEach(t),xIr=r(PZ," class method or the "),GY=n(PZ,"A",{href:!0});var awt=s(GY);$Ir=r(awt,"from_config()"),awt.forEach(t),kIr=r(PZ,` class
method.`),PZ.forEach(t),SIr=i(ni),Xx=n(ni,"P",{});var _je=s(Xx);RIr=r(_je,"This class cannot be instantiated directly using "),a7e=n(_je,"CODE",{});var nwt=s(a7e);BIr=r(nwt,"__init__()"),nwt.forEach(t),PIr=r(_je," (throws an error)."),_je.forEach(t),IIr=i(ni),Jt=n(ni,"DIV",{class:!0});var IA=s(Jt);T(zx.$$.fragment,IA),qIr=i(IA),n7e=n(IA,"P",{});var swt=s(n7e);NIr=r(swt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),swt.forEach(t),jIr=i(IA),lf=n(IA,"P",{});var IZ=s(lf);DIr=r(IZ,`Note:
Loading a model from its configuration file does `),s7e=n(IZ,"STRONG",{});var lwt=s(s7e);GIr=r(lwt,"not"),lwt.forEach(t),OIr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(IZ,"A",{href:!0});var iwt=s(OY);VIr=r(iwt,"from_pretrained()"),iwt.forEach(t),XIr=r(IZ," to load the model weights."),IZ.forEach(t),zIr=i(IA),T(_3.$$.fragment,IA),IA.forEach(t),QIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Qx.$$.fragment,si),WIr=i(si),l7e=n(si,"P",{});var dwt=s(l7e);HIr=r(dwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dwt.forEach(t),UIr=i(si),Cn=n(si,"P",{});var qA=s(Cn);JIr=r(qA,"The model class to instantiate is selected based on the "),i7e=n(qA,"CODE",{});var cwt=s(i7e);YIr=r(cwt,"model_type"),cwt.forEach(t),KIr=r(qA,` property of the config object (either
passed as an argument or loaded from `),d7e=n(qA,"CODE",{});var fwt=s(d7e);ZIr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),eqr=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c7e=n(qA,"CODE",{});var mwt=s(c7e);oqr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),rqr=r(qA,":"),qA.forEach(t),tqr=i(si),f7e=n(si,"UL",{});var gwt=s(f7e);b3=n(gwt,"LI",{});var sPe=s(b3);m7e=n(sPe,"STRONG",{});var hwt=s(m7e);aqr=r(hwt,"vision-encoder-decoder"),hwt.forEach(t),nqr=r(sPe," \u2014 "),VY=n(sPe,"A",{href:!0});var pwt=s(VY);sqr=r(pwt,"FlaxVisionEncoderDecoderModel"),pwt.forEach(t),lqr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),gwt.forEach(t),iqr=i(si),T(v3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(v6t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(f$,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(m$,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertConfig"),c(g$,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig"),c(h$,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitConfig"),c(p$,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertConfig"),c(u$,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(_$,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdConfig"),c(b$,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(v$,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(F$,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(T$,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertConfig"),c(M$,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineConfig"),c(E$,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPConfig"),c(C$,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertConfig"),c(w$,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextConfig"),c(A$,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLConfig"),c(y$,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(L$,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(x$,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c($$,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaConfig"),c(k$,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(S$,"href","/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(R$,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTConfig"),c(B$,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrConfig"),c(P$,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertConfig"),c(I$,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRConfig"),c(q$,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTConfig"),c(N$,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraConfig"),c(j$,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(D$,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertConfig"),c(G$,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetConfig"),c(O$,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTConfig"),c(V$,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelConfig"),c(X$,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNConfig"),c(z$,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Config"),c(Q$,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(W$,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJConfig"),c(H$,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertConfig"),c(U$,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertConfig"),c(J$,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Y$,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(K$,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Z$,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDConfig"),c(ek,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerConfig"),c(ok,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeConfig"),c(rk,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertConfig"),c(tk,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Config"),c(ak,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianConfig"),c(nk,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sk,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartConfig"),c(lk,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ik,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dk,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetConfig"),c(ck,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Config"),c(fk,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mk,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gk,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusConfig"),c(hk,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pk,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartConfig"),c(uk,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_k,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bk,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vk,"href","/docs/transformers/pr_17054/en/model_doc/rag#transformers.RagConfig"),c(Fk,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmConfig"),c(Tk,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerConfig"),c(Mk,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetConfig"),c(Ek,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertConfig"),c(Ck,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetConfig"),c(wk,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ak,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaConfig"),c(yk,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerConfig"),c(Lk,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerConfig"),c(xk,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWConfig"),c($k,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDConfig"),c(kk,"href","/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Sk,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Rk,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Bk,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterConfig"),c(Pk,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Ik,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinConfig"),c(qk,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Config"),c(Nk,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasConfig"),c(jk,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartConfig"),c(Dk,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Gk,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ok,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Vk,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Xk,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanConfig"),c(zk,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltConfig"),c(Qk,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Wk,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Hk,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Uk,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTConfig"),c(Jk,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Yk,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Kk,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMConfig"),c(Zk,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMConfig"),c(eS,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMConfig"),c(oS,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rS,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tS,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aS,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetConfig"),c(nS,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosConfig"),c(sS,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(lS,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iS,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(dS,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cS,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartTokenizer"),c(fS,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartTokenizerFast"),c(mS,"href","/docs/transformers/pr_17054/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gS,"href","/docs/transformers/pr_17054/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hS,"href","/docs/transformers/pr_17054/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(pS,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(uS,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(_S,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bS,"href","/docs/transformers/pr_17054/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vS,"href","/docs/transformers/pr_17054/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FS,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TS,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MS,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ES,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CS,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wS,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AS,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yS,"href","/docs/transformers/pr_17054/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LS,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xS,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($S,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineTokenizer"),c(kS,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPTokenizer"),c(SS,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RS,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BS,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PS,"href","/docs/transformers/pr_17054/en/model_doc/cpm#transformers.CpmTokenizer"),c(IS,"href","/docs/transformers/pr_17054/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qS,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jS,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DS,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GS,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OS,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VS,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XS,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zS,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QS,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WS,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HS,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraTokenizer"),c(US,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JS,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YS,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetTokenizer"),c(KS,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZS,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eR,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oR,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lR,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iR,"href","/docs/transformers/pr_17054/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dR,"href","/docs/transformers/pr_17054/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cR,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fR,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mR,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gR,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hR,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pR,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uR,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_R,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bR,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vR,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDTokenizer"),c(FR,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDTokenizerFast"),c(TR,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MR,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ER,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeTokenizer"),c(CR,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wR,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AR,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yR,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianTokenizer"),c(LR,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartTokenizer"),c(xR,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($R,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kR,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(RR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17054/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PR,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IR,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NR,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5Tokenizer"),c(DR,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GR,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(OR,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VR,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XR,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zR,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QR,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WR,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(HR,"href","/docs/transformers/pr_17054/en/model_doc/phobert#transformers.PhobertTokenizer"),c(UR,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartTokenizer"),c(JR,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(YR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17054/en/model_doc/rag#transformers.RagTokenizer"),c(eB,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmTokenizer"),c(oB,"href","/docs/transformers/pr_17054/en/model_doc/realm#transformers.RealmTokenizerFast"),c(rB,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerTokenizer"),c(tB,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(aB,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertTokenizer"),c(nB,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(lB,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(fB,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(mB,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(gB,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(hB,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterTokenizer"),c(pB,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uB,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(_B,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5Tokenizer"),c(vB,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FB,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasTokenizer"),c(TB,"href","/docs/transformers/pr_17054/en/model_doc/tapex#transformers.TapexTokenizer"),c(MB,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(EB,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(yB,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMTokenizer"),c(LB,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(xB,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMTokenizer"),c($B,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(kB,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(SB,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(IB,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(qB,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizer"),c(NB,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(jB,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(DB,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(eP,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rP,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(tP,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(aP,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sP,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(cP,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fP,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPProcessor"),c(mP,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gP,"href","/docs/transformers/pr_17054/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(hP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uP,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(_P,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(bP,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRProcessor"),c(vP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltProcessor"),c(MP,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(EP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(wP,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AP,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yP,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LP,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertModel"),c(xP,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartModel"),c($P,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitModel"),c(kP,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertModel"),c(SP,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RP,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdModel"),c(BP,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(PP,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(IP,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(qP,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertModel"),c(NP,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineModel"),c(jP,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.CLIPModel"),c(DP,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertModel"),c(GP,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextModel"),c(OP,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLModel"),c(VP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(XP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zP,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QP,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaModel"),c(WP,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HP,"href","/docs/transformers/pr_17054/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(UP,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTModel"),c(JP,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrModel"),c(YP,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertModel"),c(KP,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ZP,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTModel"),c(eI,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraModel"),c(oI,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertModel"),c(rI,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetModel"),c(tI,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTModel"),c(aI,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelModel"),c(nI,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sI,"href","/docs/transformers/pr_17054/en/model_doc/glpn#transformers.GLPNModel"),c(lI,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2Model"),c(iI,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dI,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJModel"),c(cI,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertModel"),c(fI,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertModel"),c(mI,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gI,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hI,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pI,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDModel"),c(uI,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerModel"),c(_I,"href","/docs/transformers/pr_17054/en/model_doc/luke#transformers.LukeModel"),c(bI,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertModel"),c(vI,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100Model"),c(FI,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianModel"),c(TI,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerModel"),c(MI,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartModel"),c(EI,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(CI,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertModel"),c(wI,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetModel"),c(AI,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5Model"),c(yI,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerModel"),c(LI,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(xI,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusModel"),c($I,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverModel"),c(kI,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartModel"),c(SI,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerModel"),c(RI,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(BI,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertModel"),c(PI,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModel"),c(II,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetModel"),c(qI,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertModel"),c(NI,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetModel"),c(jI,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel"),c(DI,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaModel"),c(GI,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerModel"),c(OI,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerModel"),c(VI,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWModel"),c(XI,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDModel"),c(zI,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(QI,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterModel"),c(WI,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(HI,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinModel"),c(UI,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5Model"),c(JI,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasModel"),c(YI,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(KI,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ZI,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(eq,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanModel"),c(oq,"href","/docs/transformers/pr_17054/en/model_doc/vilt#transformers.ViltModel"),c(rq,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(tq,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertModel"),c(aq,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTModel"),c(nq,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(sq,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(lq,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMModel"),c(iq,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMModel"),c(dq,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMModel"),c(cq,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fq,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mq,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gq,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetModel"),c(hq,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosModel"),c(pq,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(uq,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_q,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bq,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vq,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Fq,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForPreTraining"),c(Mq,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Eq,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Cq,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wq,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Aq,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yq,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Lq,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xq,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForPreTraining"),c($q,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kq,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Sq,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Bq,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pq,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qq,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jq,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Dq,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Gq,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vq,"href","/docs/transformers/pr_17054/en/model_doc/retribert#transformers.RetriBertModel"),c(Xq,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zq,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Wq,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Hq,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Jq,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Yq,"href","/docs/transformers/pr_17054/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Zq,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eN,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tN,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v_,"id","transformers.AutoModelForCausalLM"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(aN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForCausalLM"),c(iN,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertLMHeadModel"),c(dN,"href","/docs/transformers/pr_17054/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(cN,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(fN,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(mN,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(gN,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(hN,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(pN,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uN,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(_N,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bN,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vN,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FN,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(TN,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianForCausalLM"),c(MN,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForCausalLM"),c(EN,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(CN,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wN,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AN,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(yN,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LN,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xN,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($N,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kN,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SN,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RN,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(BN,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PN,"href","/docs/transformers/pr_17054/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(IN,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(qN,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DN,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GN,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForMaskedLM"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(ON,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(QN,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMaskedLM"),c(HN,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(UN,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JN,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YN,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KN,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZN,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ej,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rj,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tj,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(aj,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(nj,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gj,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hj,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uj,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vj,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Tj,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Cj,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForSeq2SeqLM"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(wj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lj,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($j,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Rj,"href","/docs/transformers/pr_17054/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_17054/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.MarianMTModel"),c(qj,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_17054/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_17054/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cb,"id","transformers.AutoModelForSequenceClassification"),c(cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cb,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(zj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wj,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oD,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rD,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tD,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aD,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nD,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sD,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iD,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cD,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fD,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mD,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gD,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hD,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(uD,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_D,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bD,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(vD,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FD,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ED,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CD,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wD,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AD,"href","/docs/transformers/pr_17054/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(yD,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xD,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kD,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SD,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(BD,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qD,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ND,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(jD,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(DD,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l4,"id","transformers.AutoModelForMultipleChoice"),c(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l4,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(GD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(WD,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(UD,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(YD,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(KD,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(eG,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(rG,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(tG,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(nG,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(iG,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dG,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mG,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pG,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uG,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_G,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bG,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.AutoModelForNextSentencePrediction"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(vG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EG,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CG,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wG,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AG,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.AutoModelForTokenClassification"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(yG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kG,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForTokenClassification"),c(SG,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RG,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BG,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PG,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(qG,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jG,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GG,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OG,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(VG,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XG,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zG,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WG,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HG,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(UG,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(KG,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(ZG,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(rO,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(tO,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(aO,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(nO,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(sO,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(lO,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(iO,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForQuestionAnswering"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_17054/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_17054/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(AO,"href","/docs/transformers/pr_17054/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_17054/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_17054/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_17054/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_17054/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_17054/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_17054/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_17054/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_17054/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(WO,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JO,"href","/docs/transformers/pr_17054/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T5,"id","transformers.AutoModelForTableQuestionAnswering"),c(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T5,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(YO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.AutoModelForImageClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(oV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForImageClassification"),c(nV,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(sV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(lV,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iV,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dV,"href","/docs/transformers/pr_17054/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cV,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fV,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mV,"href","/docs/transformers/pr_17054/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gV,"href","/docs/transformers/pr_17054/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hV,"href","/docs/transformers/pr_17054/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pV,"href","/docs/transformers/pr_17054/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(uV,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_V,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForImageClassification"),c(bV,"href","/docs/transformers/pr_17054/en/model_doc/van#transformers.VanForImageClassification"),c(vV,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.AutoModelForVision2Seq"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(FV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q5,"id","transformers.AutoModelForAudioClassification"),c(Q5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q5,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(CV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(LV,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xV,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($V,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(av,"id","transformers.AutoModelForAudioFrameClassification"),c(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(av,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(PV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(DV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(GV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForCTC"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(OV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(QV,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.HubertForCTC"),c(WV,"href","/docs/transformers/pr_17054/en/model_doc/sew#transformers.SEWForCTC"),c(HV,"href","/docs/transformers/pr_17054/en/model_doc/sew-d#transformers.SEWDForCTC"),c(UV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(JV,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(YV,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(KV,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cv,"id","transformers.AutoModelForSpeechSeq2Seq"),c(Cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cv,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_17054/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tX,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForAudioXVector"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(aX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iX,"href","/docs/transformers/pr_17054/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dX,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cX,"href","/docs/transformers/pr_17054/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nv,"id","transformers.AutoModelForMaskedImageModeling"),c(Nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nv,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(fX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_17054/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(pX,"href","/docs/transformers/pr_17054/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(uX,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForObjectDetection"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForObjectDetection"),c(TX,"href","/docs/transformers/pr_17054/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForImageSegmentation"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(MX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_17054/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForSemanticSegmentation"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(AX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($X,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kX,"href","/docs/transformers/pr_17054/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(SX,"href","/docs/transformers/pr_17054/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForInstanceSegmentation"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(RX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_17054/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.TFAutoModel"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(qX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertModel"),c(GX,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartModel"),c(OX,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertModel"),c(VX,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(XX,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zX,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertModel"),c(QX,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.TFCLIPModel"),c(WX,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertModel"),c(HX,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextModel"),c(UX,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLModel"),c(JX,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(YX,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaModel"),c(KX,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ZX,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(ez,"href","/docs/transformers/pr_17054/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oz,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraModel"),c(rz,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tz,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelModel"),c(az,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nz,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2Model"),c(sz,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJModel"),c(lz,"href","/docs/transformers/pr_17054/en/model_doc/hubert#transformers.TFHubertModel"),c(iz,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dz,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDModel"),c(cz,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerModel"),c(fz,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertModel"),c(mz,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianModel"),c(gz,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartModel"),c(hz,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(pz,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetModel"),c(uz,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5Model"),c(_z,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(bz,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusModel"),c(vz,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertModel"),c(Fz,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaModel"),c(Tz,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Mz,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Ez,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5Model"),c(Cz,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasModel"),c(wz,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Az,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTModel"),c(yz,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Lz,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xz,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMModel"),c($z,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kz,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i0,"id","transformers.TFAutoModelForPreTraining"),c(i0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i0,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Iz,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qz,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Nz,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jz,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Dz,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Gz,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Oz,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Vz,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Xz,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zz,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Qz,"href","/docs/transformers/pr_17054/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Wz,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Hz,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Uz,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Yz,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Zz,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_17054/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(oQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B0,"id","transformers.TFAutoModelForCausalLM"),c(B0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B0,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(iQ,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(dQ,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fQ,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(mQ,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hQ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pQ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uQ,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bQ,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.TFAutoModelForImageClassification"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17054/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EQ,"href","/docs/transformers/pr_17054/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CQ,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oT,"id","transformers.TFAutoModelForMaskedLM"),c(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oT,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(IQ,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NQ,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jQ,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XQ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(zQ,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WQ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CT,"id","transformers.TFAutoModelForSeq2SeqLM"),c(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CT,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(eW,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(oW,"href","/docs/transformers/pr_17054/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(rW,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.TFMarianMTModel"),c(tW,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qT,"id","transformers.TFAutoModelForSequenceClassification"),c(qT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qT,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(lW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(gW,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_17054/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(pW,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uW,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(_W,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yW,"href","/docs/transformers/pr_17054/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(LW,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($W,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(SW,"href","/docs/transformers/pr_17054/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(RW,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BW,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(PW,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.TFAutoModelForMultipleChoice"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(IW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zW,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(WW,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(HW,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(JW,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(KW,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eH,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(oH,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.TFAutoModelForNextSentencePrediction"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(rH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(sH,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(lH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_17054/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.TFAutoModelForTokenClassification"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(fH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(pH,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(uH,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_H,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(bH,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(vH,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(FH,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(TH,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(MH,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(EH,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(CH,"href","/docs/transformers/pr_17054/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(wH,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(AH,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(LH,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(xH,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c($H,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(kH,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(SH,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(RH,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForQuestionAnswering"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(BH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_17054/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_17054/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_17054/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_17054/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(VH,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_17054/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QH,"href","/docs/transformers/pr_17054/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_17054/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_17054/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_17054/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_17054/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_17054/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(oU,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_17054/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForVision2Seq"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(tU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(lU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_17054/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.FlaxAutoModel"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(fU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertModel"),c(pU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartModel"),c(uU,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitModel"),c(_U,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertModel"),c(bU,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(vU,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(FU,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(TU,"href","/docs/transformers/pr_17054/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MU,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EU,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraModel"),c(CU,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wU,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AU,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yU,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianModel"),c(LU,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xU,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5Model"),c($U,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kU,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(SU,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(RU,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5Model"),c(BU,"href","/docs/transformers/pr_17054/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PU,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTModel"),c(IU,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qU,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NU,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pE,"id","transformers.FlaxAutoModelForCausalLM"),c(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(VU,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(XU,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zU,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(QU,"href","/docs/transformers/pr_17054/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WU,"href","/docs/transformers/pr_17054/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(HU,"href","/docs/transformers/pr_17054/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(UU,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JU,"href","/docs/transformers/pr_17054/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.FlaxAutoModelForPreTraining"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(YU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oJ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nJ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dJ,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_17054/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OE,"id","transformers.FlaxAutoModelForMaskedLM"),c(OE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TJ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($J,"href","/docs/transformers/pr_17054/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_17054/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SJ,"href","/docs/transformers/pr_17054/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RJ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_17054/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_17054/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_17054/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_17054/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_17054/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jC,"id","transformers.FlaxAutoModelForTokenClassification"),c(jC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(dY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gY,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hY,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pY,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uY,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bY,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vY,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(FY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_17054/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_17054/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AY,"href","/docs/transformers/pr_17054/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_17054/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(LY,"href","/docs/transformers/pr_17054/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xY,"href","/docs/transformers/pr_17054/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Y,"href","/docs/transformers/pr_17054/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(kY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17054/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f3,"id","transformers.FlaxAutoModelForImageClassification"),c(f3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(PY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_17054/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jY,"href","/docs/transformers/pr_17054/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u3,"id","transformers.FlaxAutoModelForVision2Seq"),c(u3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(DY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17054/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17054/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,NA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,jA),e(Xe,yn),e(Xe,Ln),e(Ln,DA),e(Xe,fi),e(Xe,xn),e(xn,GA),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,n$),e(Ae,gi),e(gi,s$),e(Ae,l$),b(f,Eo,_),b(f,Ea,_),e(Ea,i$),e(Ea,pf),e(pf,d$),e(Ea,bje),b(f,lPe,_),b(f,hi,_),e(hi,uf),e(uf,qZ),M(OA,qZ,null),e(hi,vje),e(hi,NZ),e(NZ,Fje),b(f,iPe,_),b(f,$n,_),e($n,Tje),e($n,jZ),e(jZ,Mje),e($n,Eje),e($n,DZ),e(DZ,Cje),e($n,wje),b(f,dPe,_),M(VA,f,_),b(f,cPe,_),b(f,c$,_),e(c$,Aje),b(f,fPe,_),M(_f,f,_),b(f,mPe,_),b(f,pi,_),e(pi,bf),e(bf,GZ),M(XA,GZ,null),e(pi,yje),e(pi,OZ),e(OZ,Lje),b(f,gPe,_),b(f,Co,_),M(zA,Co,null),e(Co,xje),e(Co,QA),e(QA,$je),e(QA,f$),e(f$,kje),e(QA,Sje),e(Co,Rje),e(Co,WA),e(WA,Bje),e(WA,VZ),e(VZ,Pje),e(WA,Ije),e(Co,qje),e(Co,Er),M(HA,Er,null),e(Er,Nje),e(Er,XZ),e(XZ,jje),e(Er,Dje),e(Er,ui),e(ui,Gje),e(ui,zZ),e(zZ,Oje),e(ui,Vje),e(ui,QZ),e(QZ,Xje),e(ui,zje),e(Er,Qje),e(Er,y),e(y,vf),e(vf,WZ),e(WZ,Wje),e(vf,Hje),e(vf,m$),e(m$,Uje),e(vf,Jje),e(y,Yje),e(y,Ff),e(Ff,HZ),e(HZ,Kje),e(Ff,Zje),e(Ff,g$),e(g$,eDe),e(Ff,oDe),e(y,rDe),e(y,Tf),e(Tf,UZ),e(UZ,tDe),e(Tf,aDe),e(Tf,h$),e(h$,nDe),e(Tf,sDe),e(y,lDe),e(y,Mf),e(Mf,JZ),e(JZ,iDe),e(Mf,dDe),e(Mf,p$),e(p$,cDe),e(Mf,fDe),e(y,mDe),e(y,Ef),e(Ef,YZ),e(YZ,gDe),e(Ef,hDe),e(Ef,u$),e(u$,pDe),e(Ef,uDe),e(y,_De),e(y,Cf),e(Cf,KZ),e(KZ,bDe),e(Cf,vDe),e(Cf,_$),e(_$,FDe),e(Cf,TDe),e(y,MDe),e(y,wf),e(wf,ZZ),e(ZZ,EDe),e(wf,CDe),e(wf,b$),e(b$,wDe),e(wf,ADe),e(y,yDe),e(y,Af),e(Af,eee),e(eee,LDe),e(Af,xDe),e(Af,v$),e(v$,$De),e(Af,kDe),e(y,SDe),e(y,yf),e(yf,oee),e(oee,RDe),e(yf,BDe),e(yf,F$),e(F$,PDe),e(yf,IDe),e(y,qDe),e(y,Lf),e(Lf,ree),e(ree,NDe),e(Lf,jDe),e(Lf,T$),e(T$,DDe),e(Lf,GDe),e(y,ODe),e(y,xf),e(xf,tee),e(tee,VDe),e(xf,XDe),e(xf,M$),e(M$,zDe),e(xf,QDe),e(y,WDe),e(y,$f),e($f,aee),e(aee,HDe),e($f,UDe),e($f,E$),e(E$,JDe),e($f,YDe),e(y,KDe),e(y,kf),e(kf,nee),e(nee,ZDe),e(kf,eGe),e(kf,C$),e(C$,oGe),e(kf,rGe),e(y,tGe),e(y,Sf),e(Sf,see),e(see,aGe),e(Sf,nGe),e(Sf,w$),e(w$,sGe),e(Sf,lGe),e(y,iGe),e(y,Rf),e(Rf,lee),e(lee,dGe),e(Rf,cGe),e(Rf,A$),e(A$,fGe),e(Rf,mGe),e(y,gGe),e(y,Bf),e(Bf,iee),e(iee,hGe),e(Bf,pGe),e(Bf,y$),e(y$,uGe),e(Bf,_Ge),e(y,bGe),e(y,Pf),e(Pf,dee),e(dee,vGe),e(Pf,FGe),e(Pf,L$),e(L$,TGe),e(Pf,MGe),e(y,EGe),e(y,If),e(If,cee),e(cee,CGe),e(If,wGe),e(If,x$),e(x$,AGe),e(If,yGe),e(y,LGe),e(y,qf),e(qf,fee),e(fee,xGe),e(qf,$Ge),e(qf,$$),e($$,kGe),e(qf,SGe),e(y,RGe),e(y,Nf),e(Nf,mee),e(mee,BGe),e(Nf,PGe),e(Nf,k$),e(k$,IGe),e(Nf,qGe),e(y,NGe),e(y,jf),e(jf,gee),e(gee,jGe),e(jf,DGe),e(jf,S$),e(S$,GGe),e(jf,OGe),e(y,VGe),e(y,Df),e(Df,hee),e(hee,XGe),e(Df,zGe),e(Df,R$),e(R$,QGe),e(Df,WGe),e(y,HGe),e(y,Gf),e(Gf,pee),e(pee,UGe),e(Gf,JGe),e(Gf,B$),e(B$,YGe),e(Gf,KGe),e(y,ZGe),e(y,Of),e(Of,uee),e(uee,eOe),e(Of,oOe),e(Of,P$),e(P$,rOe),e(Of,tOe),e(y,aOe),e(y,Vf),e(Vf,_ee),e(_ee,nOe),e(Vf,sOe),e(Vf,I$),e(I$,lOe),e(Vf,iOe),e(y,dOe),e(y,Xf),e(Xf,bee),e(bee,cOe),e(Xf,fOe),e(Xf,q$),e(q$,mOe),e(Xf,gOe),e(y,hOe),e(y,zf),e(zf,vee),e(vee,pOe),e(zf,uOe),e(zf,N$),e(N$,_Oe),e(zf,bOe),e(y,vOe),e(y,Qf),e(Qf,Fee),e(Fee,FOe),e(Qf,TOe),e(Qf,j$),e(j$,MOe),e(Qf,EOe),e(y,COe),e(y,Wf),e(Wf,Tee),e(Tee,wOe),e(Wf,AOe),e(Wf,D$),e(D$,yOe),e(Wf,LOe),e(y,xOe),e(y,Hf),e(Hf,Mee),e(Mee,$Oe),e(Hf,kOe),e(Hf,G$),e(G$,SOe),e(Hf,ROe),e(y,BOe),e(y,Uf),e(Uf,Eee),e(Eee,POe),e(Uf,IOe),e(Uf,O$),e(O$,qOe),e(Uf,NOe),e(y,jOe),e(y,Jf),e(Jf,Cee),e(Cee,DOe),e(Jf,GOe),e(Jf,V$),e(V$,OOe),e(Jf,VOe),e(y,XOe),e(y,Yf),e(Yf,wee),e(wee,zOe),e(Yf,QOe),e(Yf,X$),e(X$,WOe),e(Yf,HOe),e(y,UOe),e(y,Kf),e(Kf,Aee),e(Aee,JOe),e(Kf,YOe),e(Kf,z$),e(z$,KOe),e(Kf,ZOe),e(y,eVe),e(y,Zf),e(Zf,yee),e(yee,oVe),e(Zf,rVe),e(Zf,Q$),e(Q$,tVe),e(Zf,aVe),e(y,nVe),e(y,em),e(em,Lee),e(Lee,sVe),e(em,lVe),e(em,W$),e(W$,iVe),e(em,dVe),e(y,cVe),e(y,om),e(om,xee),e(xee,fVe),e(om,mVe),e(om,H$),e(H$,gVe),e(om,hVe),e(y,pVe),e(y,rm),e(rm,$ee),e($ee,uVe),e(rm,_Ve),e(rm,U$),e(U$,bVe),e(rm,vVe),e(y,FVe),e(y,tm),e(tm,kee),e(kee,TVe),e(tm,MVe),e(tm,J$),e(J$,EVe),e(tm,CVe),e(y,wVe),e(y,am),e(am,See),e(See,AVe),e(am,yVe),e(am,Y$),e(Y$,LVe),e(am,xVe),e(y,$Ve),e(y,nm),e(nm,Ree),e(Ree,kVe),e(nm,SVe),e(nm,K$),e(K$,RVe),e(nm,BVe),e(y,PVe),e(y,sm),e(sm,Bee),e(Bee,IVe),e(sm,qVe),e(sm,Z$),e(Z$,NVe),e(sm,jVe),e(y,DVe),e(y,lm),e(lm,Pee),e(Pee,GVe),e(lm,OVe),e(lm,ek),e(ek,VVe),e(lm,XVe),e(y,zVe),e(y,im),e(im,Iee),e(Iee,QVe),e(im,WVe),e(im,ok),e(ok,HVe),e(im,UVe),e(y,JVe),e(y,dm),e(dm,qee),e(qee,YVe),e(dm,KVe),e(dm,rk),e(rk,ZVe),e(dm,eXe),e(y,oXe),e(y,cm),e(cm,Nee),e(Nee,rXe),e(cm,tXe),e(cm,tk),e(tk,aXe),e(cm,nXe),e(y,sXe),e(y,fm),e(fm,jee),e(jee,lXe),e(fm,iXe),e(fm,ak),e(ak,dXe),e(fm,cXe),e(y,fXe),e(y,mm),e(mm,Dee),e(Dee,mXe),e(mm,gXe),e(mm,nk),e(nk,hXe),e(mm,pXe),e(y,uXe),e(y,gm),e(gm,Gee),e(Gee,_Xe),e(gm,bXe),e(gm,sk),e(sk,vXe),e(gm,FXe),e(y,TXe),e(y,hm),e(hm,Oee),e(Oee,MXe),e(hm,EXe),e(hm,lk),e(lk,CXe),e(hm,wXe),e(y,AXe),e(y,pm),e(pm,Vee),e(Vee,yXe),e(pm,LXe),e(pm,ik),e(ik,xXe),e(pm,$Xe),e(y,kXe),e(y,um),e(um,Xee),e(Xee,SXe),e(um,RXe),e(um,dk),e(dk,BXe),e(um,PXe),e(y,IXe),e(y,_m),e(_m,zee),e(zee,qXe),e(_m,NXe),e(_m,ck),e(ck,jXe),e(_m,DXe),e(y,GXe),e(y,bm),e(bm,Qee),e(Qee,OXe),e(bm,VXe),e(bm,fk),e(fk,XXe),e(bm,zXe),e(y,QXe),e(y,vm),e(vm,Wee),e(Wee,WXe),e(vm,HXe),e(vm,mk),e(mk,UXe),e(vm,JXe),e(y,YXe),e(y,Fm),e(Fm,Hee),e(Hee,KXe),e(Fm,ZXe),e(Fm,gk),e(gk,eze),e(Fm,oze),e(y,rze),e(y,Tm),e(Tm,Uee),e(Uee,tze),e(Tm,aze),e(Tm,hk),e(hk,nze),e(Tm,sze),e(y,lze),e(y,Mm),e(Mm,Jee),e(Jee,ize),e(Mm,dze),e(Mm,pk),e(pk,cze),e(Mm,fze),e(y,mze),e(y,Em),e(Em,Yee),e(Yee,gze),e(Em,hze),e(Em,uk),e(uk,pze),e(Em,uze),e(y,_ze),e(y,Cm),e(Cm,Kee),e(Kee,bze),e(Cm,vze),e(Cm,_k),e(_k,Fze),e(Cm,Tze),e(y,Mze),e(y,wm),e(wm,Zee),e(Zee,Eze),e(wm,Cze),e(wm,bk),e(bk,wze),e(wm,Aze),e(y,yze),e(y,Am),e(Am,eoe),e(eoe,Lze),e(Am,xze),e(Am,vk),e(vk,$ze),e(Am,kze),e(y,Sze),e(y,ym),e(ym,ooe),e(ooe,Rze),e(ym,Bze),e(ym,Fk),e(Fk,Pze),e(ym,Ize),e(y,qze),e(y,Lm),e(Lm,roe),e(roe,Nze),e(Lm,jze),e(Lm,Tk),e(Tk,Dze),e(Lm,Gze),e(y,Oze),e(y,xm),e(xm,toe),e(toe,Vze),e(xm,Xze),e(xm,Mk),e(Mk,zze),e(xm,Qze),e(y,Wze),e(y,$m),e($m,aoe),e(aoe,Hze),e($m,Uze),e($m,Ek),e(Ek,Jze),e($m,Yze),e(y,Kze),e(y,km),e(km,noe),e(noe,Zze),e(km,eQe),e(km,Ck),e(Ck,oQe),e(km,rQe),e(y,tQe),e(y,Sm),e(Sm,soe),e(soe,aQe),e(Sm,nQe),e(Sm,wk),e(wk,sQe),e(Sm,lQe),e(y,iQe),e(y,Rm),e(Rm,loe),e(loe,dQe),e(Rm,cQe),e(Rm,Ak),e(Ak,fQe),e(Rm,mQe),e(y,gQe),e(y,Bm),e(Bm,ioe),e(ioe,hQe),e(Bm,pQe),e(Bm,yk),e(yk,uQe),e(Bm,_Qe),e(y,bQe),e(y,Pm),e(Pm,doe),e(doe,vQe),e(Pm,FQe),e(Pm,Lk),e(Lk,TQe),e(Pm,MQe),e(y,EQe),e(y,Im),e(Im,coe),e(coe,CQe),e(Im,wQe),e(Im,xk),e(xk,AQe),e(Im,yQe),e(y,LQe),e(y,qm),e(qm,foe),e(foe,xQe),e(qm,$Qe),e(qm,$k),e($k,kQe),e(qm,SQe),e(y,RQe),e(y,Nm),e(Nm,moe),e(moe,BQe),e(Nm,PQe),e(Nm,kk),e(kk,IQe),e(Nm,qQe),e(y,NQe),e(y,jm),e(jm,goe),e(goe,jQe),e(jm,DQe),e(jm,Sk),e(Sk,GQe),e(jm,OQe),e(y,VQe),e(y,Dm),e(Dm,hoe),e(hoe,XQe),e(Dm,zQe),e(Dm,Rk),e(Rk,QQe),e(Dm,WQe),e(y,HQe),e(y,Gm),e(Gm,poe),e(poe,UQe),e(Gm,JQe),e(Gm,Bk),e(Bk,YQe),e(Gm,KQe),e(y,ZQe),e(y,Om),e(Om,uoe),e(uoe,eWe),e(Om,oWe),e(Om,Pk),e(Pk,rWe),e(Om,tWe),e(y,aWe),e(y,Vm),e(Vm,_oe),e(_oe,nWe),e(Vm,sWe),e(Vm,Ik),e(Ik,lWe),e(Vm,iWe),e(y,dWe),e(y,Xm),e(Xm,boe),e(boe,cWe),e(Xm,fWe),e(Xm,qk),e(qk,mWe),e(Xm,gWe),e(y,hWe),e(y,zm),e(zm,voe),e(voe,pWe),e(zm,uWe),e(zm,Nk),e(Nk,_We),e(zm,bWe),e(y,vWe),e(y,Qm),e(Qm,Foe),e(Foe,FWe),e(Qm,TWe),e(Qm,jk),e(jk,MWe),e(Qm,EWe),e(y,CWe),e(y,Wm),e(Wm,Toe),e(Toe,wWe),e(Wm,AWe),e(Wm,Dk),e(Dk,yWe),e(Wm,LWe),e(y,xWe),e(y,Hm),e(Hm,Moe),e(Moe,$We),e(Hm,kWe),e(Hm,Gk),e(Gk,SWe),e(Hm,RWe),e(y,BWe),e(y,Um),e(Um,Eoe),e(Eoe,PWe),e(Um,IWe),e(Um,Ok),e(Ok,qWe),e(Um,NWe),e(y,jWe),e(y,Jm),e(Jm,Coe),e(Coe,DWe),e(Jm,GWe),e(Jm,Vk),e(Vk,OWe),e(Jm,VWe),e(y,XWe),e(y,Ym),e(Ym,woe),e(woe,zWe),e(Ym,QWe),e(Ym,Xk),e(Xk,WWe),e(Ym,HWe),e(y,UWe),e(y,Km),e(Km,Aoe),e(Aoe,JWe),e(Km,YWe),e(Km,zk),e(zk,KWe),e(Km,ZWe),e(y,eHe),e(y,Zm),e(Zm,yoe),e(yoe,oHe),e(Zm,rHe),e(Zm,Qk),e(Qk,tHe),e(Zm,aHe),e(y,nHe),e(y,eg),e(eg,Loe),e(Loe,sHe),e(eg,lHe),e(eg,Wk),e(Wk,iHe),e(eg,dHe),e(y,cHe),e(y,og),e(og,xoe),e(xoe,fHe),e(og,mHe),e(og,Hk),e(Hk,gHe),e(og,hHe),e(y,pHe),e(y,rg),e(rg,$oe),e($oe,uHe),e(rg,_He),e(rg,Uk),e(Uk,bHe),e(rg,vHe),e(y,FHe),e(y,tg),e(tg,koe),e(koe,THe),e(tg,MHe),e(tg,Jk),e(Jk,EHe),e(tg,CHe),e(y,wHe),e(y,ag),e(ag,Soe),e(Soe,AHe),e(ag,yHe),e(ag,Yk),e(Yk,LHe),e(ag,xHe),e(y,$He),e(y,ng),e(ng,Roe),e(Roe,kHe),e(ng,SHe),e(ng,Kk),e(Kk,RHe),e(ng,BHe),e(y,PHe),e(y,sg),e(sg,Boe),e(Boe,IHe),e(sg,qHe),e(sg,Zk),e(Zk,NHe),e(sg,jHe),e(y,DHe),e(y,lg),e(lg,Poe),e(Poe,GHe),e(lg,OHe),e(lg,eS),e(eS,VHe),e(lg,XHe),e(y,zHe),e(y,ig),e(ig,Ioe),e(Ioe,QHe),e(ig,WHe),e(ig,oS),e(oS,HHe),e(ig,UHe),e(y,JHe),e(y,dg),e(dg,qoe),e(qoe,YHe),e(dg,KHe),e(dg,rS),e(rS,ZHe),e(dg,eUe),e(y,oUe),e(y,cg),e(cg,Noe),e(Noe,rUe),e(cg,tUe),e(cg,tS),e(tS,aUe),e(cg,nUe),e(y,sUe),e(y,fg),e(fg,joe),e(joe,lUe),e(fg,iUe),e(fg,aS),e(aS,dUe),e(fg,cUe),e(y,fUe),e(y,mg),e(mg,Doe),e(Doe,mUe),e(mg,gUe),e(mg,nS),e(nS,hUe),e(mg,pUe),e(y,uUe),e(y,gg),e(gg,Goe),e(Goe,_Ue),e(gg,bUe),e(gg,sS),e(sS,vUe),e(gg,FUe),e(Er,TUe),M(hg,Er,null),e(Co,MUe),e(Co,pg),M(UA,pg,null),e(pg,EUe),e(pg,Ooe),e(Ooe,CUe),b(f,hPe,_),b(f,_i,_),e(_i,ug),e(ug,Voe),M(JA,Voe,null),e(_i,wUe),e(_i,Xoe),e(Xoe,AUe),b(f,pPe,_),b(f,wo,_),M(YA,wo,null),e(wo,yUe),e(wo,KA),e(KA,LUe),e(KA,lS),e(lS,xUe),e(KA,$Ue),e(wo,kUe),e(wo,ZA),e(ZA,SUe),e(ZA,zoe),e(zoe,RUe),e(ZA,BUe),e(wo,PUe),e(wo,Cr),M(e6,Cr,null),e(Cr,IUe),e(Cr,Qoe),e(Qoe,qUe),e(Cr,NUe),e(Cr,Ca),e(Ca,jUe),e(Ca,Woe),e(Woe,DUe),e(Ca,GUe),e(Ca,Hoe),e(Hoe,OUe),e(Ca,VUe),e(Ca,Uoe),e(Uoe,XUe),e(Ca,zUe),e(Cr,QUe),e(Cr,k),e(k,kn),e(kn,Joe),e(Joe,WUe),e(kn,HUe),e(kn,iS),e(iS,UUe),e(kn,JUe),e(kn,dS),e(dS,YUe),e(kn,KUe),e(k,ZUe),e(k,Sn),e(Sn,Yoe),e(Yoe,eJe),e(Sn,oJe),e(Sn,cS),e(cS,rJe),e(Sn,tJe),e(Sn,fS),e(fS,aJe),e(Sn,nJe),e(k,sJe),e(k,Rn),e(Rn,Koe),e(Koe,lJe),e(Rn,iJe),e(Rn,mS),e(mS,dJe),e(Rn,cJe),e(Rn,gS),e(gS,fJe),e(Rn,mJe),e(k,gJe),e(k,_g),e(_g,Zoe),e(Zoe,hJe),e(_g,pJe),e(_g,hS),e(hS,uJe),e(_g,_Je),e(k,bJe),e(k,Bn),e(Bn,ere),e(ere,vJe),e(Bn,FJe),e(Bn,pS),e(pS,TJe),e(Bn,MJe),e(Bn,uS),e(uS,EJe),e(Bn,CJe),e(k,wJe),e(k,bg),e(bg,ore),e(ore,AJe),e(bg,yJe),e(bg,_S),e(_S,LJe),e(bg,xJe),e(k,$Je),e(k,vg),e(vg,rre),e(rre,kJe),e(vg,SJe),e(vg,bS),e(bS,RJe),e(vg,BJe),e(k,PJe),e(k,Fg),e(Fg,tre),e(tre,IJe),e(Fg,qJe),e(Fg,vS),e(vS,NJe),e(Fg,jJe),e(k,DJe),e(k,Pn),e(Pn,are),e(are,GJe),e(Pn,OJe),e(Pn,FS),e(FS,VJe),e(Pn,XJe),e(Pn,TS),e(TS,zJe),e(Pn,QJe),e(k,WJe),e(k,In),e(In,nre),e(nre,HJe),e(In,UJe),e(In,MS),e(MS,JJe),e(In,YJe),e(In,ES),e(ES,KJe),e(In,ZJe),e(k,eYe),e(k,qn),e(qn,sre),e(sre,oYe),e(qn,rYe),e(qn,CS),e(CS,tYe),e(qn,aYe),e(qn,wS),e(wS,nYe),e(qn,sYe),e(k,lYe),e(k,Tg),e(Tg,lre),e(lre,iYe),e(Tg,dYe),e(Tg,AS),e(AS,cYe),e(Tg,fYe),e(k,mYe),e(k,Mg),e(Mg,ire),e(ire,gYe),e(Mg,hYe),e(Mg,yS),e(yS,pYe),e(Mg,uYe),e(k,_Ye),e(k,Nn),e(Nn,dre),e(dre,bYe),e(Nn,vYe),e(Nn,LS),e(LS,FYe),e(Nn,TYe),e(Nn,xS),e(xS,MYe),e(Nn,EYe),e(k,CYe),e(k,Eg),e(Eg,cre),e(cre,wYe),e(Eg,AYe),e(Eg,$S),e($S,yYe),e(Eg,LYe),e(k,xYe),e(k,jn),e(jn,fre),e(fre,$Ye),e(jn,kYe),e(jn,kS),e(kS,SYe),e(jn,RYe),e(jn,SS),e(SS,BYe),e(jn,PYe),e(k,IYe),e(k,Dn),e(Dn,mre),e(mre,qYe),e(Dn,NYe),e(Dn,RS),e(RS,jYe),e(Dn,DYe),e(Dn,BS),e(BS,GYe),e(Dn,OYe),e(k,VYe),e(k,Gn),e(Gn,gre),e(gre,XYe),e(Gn,zYe),e(Gn,PS),e(PS,QYe),e(Gn,WYe),e(Gn,IS),e(IS,HYe),e(Gn,UYe),e(k,JYe),e(k,Cg),e(Cg,hre),e(hre,YYe),e(Cg,KYe),e(Cg,qS),e(qS,ZYe),e(Cg,eKe),e(k,oKe),e(k,On),e(On,pre),e(pre,rKe),e(On,tKe),e(On,NS),e(NS,aKe),e(On,nKe),e(On,jS),e(jS,sKe),e(On,lKe),e(k,iKe),e(k,Vn),e(Vn,ure),e(ure,dKe),e(Vn,cKe),e(Vn,DS),e(DS,fKe),e(Vn,mKe),e(Vn,GS),e(GS,gKe),e(Vn,hKe),e(k,pKe),e(k,Xn),e(Xn,_re),e(_re,uKe),e(Xn,_Ke),e(Xn,OS),e(OS,bKe),e(Xn,vKe),e(Xn,VS),e(VS,FKe),e(Xn,TKe),e(k,MKe),e(k,zn),e(zn,bre),e(bre,EKe),e(zn,CKe),e(zn,XS),e(XS,wKe),e(zn,AKe),e(zn,zS),e(zS,yKe),e(zn,LKe),e(k,xKe),e(k,Qn),e(Qn,vre),e(vre,$Ke),e(Qn,kKe),e(Qn,QS),e(QS,SKe),e(Qn,RKe),e(Qn,WS),e(WS,BKe),e(Qn,PKe),e(k,IKe),e(k,Wn),e(Wn,Fre),e(Fre,qKe),e(Wn,NKe),e(Wn,HS),e(HS,jKe),e(Wn,DKe),e(Wn,US),e(US,GKe),e(Wn,OKe),e(k,VKe),e(k,wg),e(wg,Tre),e(Tre,XKe),e(wg,zKe),e(wg,JS),e(JS,QKe),e(wg,WKe),e(k,HKe),e(k,Hn),e(Hn,Mre),e(Mre,UKe),e(Hn,JKe),e(Hn,YS),e(YS,YKe),e(Hn,KKe),e(Hn,KS),e(KS,ZKe),e(Hn,eZe),e(k,oZe),e(k,Ag),e(Ag,Ere),e(Ere,rZe),e(Ag,tZe),e(Ag,ZS),e(ZS,aZe),e(Ag,nZe),e(k,sZe),e(k,Un),e(Un,Cre),e(Cre,lZe),e(Un,iZe),e(Un,eR),e(eR,dZe),e(Un,cZe),e(Un,oR),e(oR,fZe),e(Un,mZe),e(k,gZe),e(k,Jn),e(Jn,wre),e(wre,hZe),e(Jn,pZe),e(Jn,rR),e(rR,uZe),e(Jn,_Ze),e(Jn,tR),e(tR,bZe),e(Jn,vZe),e(k,FZe),e(k,Yn),e(Yn,Are),e(Are,TZe),e(Yn,MZe),e(Yn,aR),e(aR,EZe),e(Yn,CZe),e(Yn,nR),e(nR,wZe),e(Yn,AZe),e(k,yZe),e(k,Kn),e(Kn,yre),e(yre,LZe),e(Kn,xZe),e(Kn,sR),e(sR,$Ze),e(Kn,kZe),e(Kn,lR),e(lR,SZe),e(Kn,RZe),e(k,BZe),e(k,Zn),e(Zn,Lre),e(Lre,PZe),e(Zn,IZe),e(Zn,iR),e(iR,qZe),e(Zn,NZe),e(Zn,dR),e(dR,jZe),e(Zn,DZe),e(k,GZe),e(k,yg),e(yg,xre),e(xre,OZe),e(yg,VZe),e(yg,cR),e(cR,XZe),e(yg,zZe),e(k,QZe),e(k,es),e(es,$re),e($re,WZe),e(es,HZe),e(es,fR),e(fR,UZe),e(es,JZe),e(es,mR),e(mR,YZe),e(es,KZe),e(k,ZZe),e(k,os),e(os,kre),e(kre,eeo),e(os,oeo),e(os,gR),e(gR,reo),e(os,teo),e(os,hR),e(hR,aeo),e(os,neo),e(k,seo),e(k,rs),e(rs,Sre),e(Sre,leo),e(rs,ieo),e(rs,pR),e(pR,deo),e(rs,ceo),e(rs,uR),e(uR,feo),e(rs,meo),e(k,geo),e(k,ts),e(ts,Rre),e(Rre,heo),e(ts,peo),e(ts,_R),e(_R,ueo),e(ts,_eo),e(ts,bR),e(bR,beo),e(ts,veo),e(k,Feo),e(k,as),e(as,Bre),e(Bre,Teo),e(as,Meo),e(as,vR),e(vR,Eeo),e(as,Ceo),e(as,FR),e(FR,weo),e(as,Aeo),e(k,yeo),e(k,ns),e(ns,Pre),e(Pre,Leo),e(ns,xeo),e(ns,TR),e(TR,$eo),e(ns,keo),e(ns,MR),e(MR,Seo),e(ns,Reo),e(k,Beo),e(k,Lg),e(Lg,Ire),e(Ire,Peo),e(Lg,Ieo),e(Lg,ER),e(ER,qeo),e(Lg,Neo),e(k,jeo),e(k,ss),e(ss,qre),e(qre,Deo),e(ss,Geo),e(ss,CR),e(CR,Oeo),e(ss,Veo),e(ss,wR),e(wR,Xeo),e(ss,zeo),e(k,Qeo),e(k,xg),e(xg,Nre),e(Nre,Weo),e(xg,Heo),e(xg,AR),e(AR,Ueo),e(xg,Jeo),e(k,Yeo),e(k,$g),e($g,jre),e(jre,Keo),e($g,Zeo),e($g,yR),e(yR,eoo),e($g,ooo),e(k,roo),e(k,ls),e(ls,Dre),e(Dre,too),e(ls,aoo),e(ls,LR),e(LR,noo),e(ls,soo),e(ls,xR),e(xR,loo),e(ls,ioo),e(k,doo),e(k,is),e(is,Gre),e(Gre,coo),e(is,foo),e(is,$R),e($R,moo),e(is,goo),e(is,kR),e(kR,hoo),e(is,poo),e(k,uoo),e(k,ds),e(ds,Ore),e(Ore,_oo),e(ds,boo),e(ds,SR),e(SR,voo),e(ds,Foo),e(ds,RR),e(RR,Too),e(ds,Moo),e(k,Eoo),e(k,kg),e(kg,Vre),e(Vre,Coo),e(kg,woo),e(kg,BR),e(BR,Aoo),e(kg,yoo),e(k,Loo),e(k,cs),e(cs,Xre),e(Xre,xoo),e(cs,$oo),e(cs,PR),e(PR,koo),e(cs,Soo),e(cs,IR),e(IR,Roo),e(cs,Boo),e(k,Poo),e(k,fs),e(fs,zre),e(zre,Ioo),e(fs,qoo),e(fs,qR),e(qR,Noo),e(fs,joo),e(fs,NR),e(NR,Doo),e(fs,Goo),e(k,Ooo),e(k,ms),e(ms,Qre),e(Qre,Voo),e(ms,Xoo),e(ms,jR),e(jR,zoo),e(ms,Qoo),e(ms,DR),e(DR,Woo),e(ms,Hoo),e(k,Uoo),e(k,gs),e(gs,Wre),e(Wre,Joo),e(gs,Yoo),e(gs,GR),e(GR,Koo),e(gs,Zoo),e(gs,OR),e(OR,ero),e(gs,oro),e(k,rro),e(k,hs),e(hs,Hre),e(Hre,tro),e(hs,aro),e(hs,VR),e(VR,nro),e(hs,sro),e(hs,XR),e(XR,lro),e(hs,iro),e(k,dro),e(k,ps),e(ps,Ure),e(Ure,cro),e(ps,fro),e(ps,zR),e(zR,mro),e(ps,gro),e(ps,QR),e(QR,hro),e(ps,pro),e(k,uro),e(k,Sg),e(Sg,Jre),e(Jre,_ro),e(Sg,bro),e(Sg,WR),e(WR,vro),e(Sg,Fro),e(k,Tro),e(k,Rg),e(Rg,Yre),e(Yre,Mro),e(Rg,Ero),e(Rg,HR),e(HR,Cro),e(Rg,wro),e(k,Aro),e(k,Bg),e(Bg,Kre),e(Kre,yro),e(Bg,Lro),e(Bg,UR),e(UR,xro),e(Bg,$ro),e(k,kro),e(k,Pg),e(Pg,Zre),e(Zre,Sro),e(Pg,Rro),e(Pg,JR),e(JR,Bro),e(Pg,Pro),e(k,Iro),e(k,us),e(us,ete),e(ete,qro),e(us,Nro),e(us,YR),e(YR,jro),e(us,Dro),e(us,KR),e(KR,Gro),e(us,Oro),e(k,Vro),e(k,Ig),e(Ig,ote),e(ote,Xro),e(Ig,zro),e(Ig,ZR),e(ZR,Qro),e(Ig,Wro),e(k,Hro),e(k,_s),e(_s,rte),e(rte,Uro),e(_s,Jro),e(_s,eB),e(eB,Yro),e(_s,Kro),e(_s,oB),e(oB,Zro),e(_s,eto),e(k,oto),e(k,bs),e(bs,tte),e(tte,rto),e(bs,tto),e(bs,rB),e(rB,ato),e(bs,nto),e(bs,tB),e(tB,sto),e(bs,lto),e(k,ito),e(k,vs),e(vs,ate),e(ate,dto),e(vs,cto),e(vs,aB),e(aB,fto),e(vs,mto),e(vs,nB),e(nB,gto),e(vs,hto),e(k,pto),e(k,Fs),e(Fs,nte),e(nte,uto),e(Fs,_to),e(Fs,sB),e(sB,bto),e(Fs,vto),e(Fs,lB),e(lB,Fto),e(Fs,Tto),e(k,Mto),e(k,Ts),e(Ts,ste),e(ste,Eto),e(Ts,Cto),e(Ts,iB),e(iB,wto),e(Ts,Ato),e(Ts,dB),e(dB,yto),e(Ts,Lto),e(k,xto),e(k,Ms),e(Ms,lte),e(lte,$to),e(Ms,kto),e(Ms,cB),e(cB,Sto),e(Ms,Rto),e(Ms,fB),e(fB,Bto),e(Ms,Pto),e(k,Ito),e(k,qg),e(qg,ite),e(ite,qto),e(qg,Nto),e(qg,mB),e(mB,jto),e(qg,Dto),e(k,Gto),e(k,Ng),e(Ng,dte),e(dte,Oto),e(Ng,Vto),e(Ng,gB),e(gB,Xto),e(Ng,zto),e(k,Qto),e(k,Es),e(Es,cte),e(cte,Wto),e(Es,Hto),e(Es,hB),e(hB,Uto),e(Es,Jto),e(Es,pB),e(pB,Yto),e(Es,Kto),e(k,Zto),e(k,Cs),e(Cs,fte),e(fte,eao),e(Cs,oao),e(Cs,uB),e(uB,rao),e(Cs,tao),e(Cs,_B),e(_B,aao),e(Cs,nao),e(k,sao),e(k,ws),e(ws,mte),e(mte,lao),e(ws,iao),e(ws,bB),e(bB,dao),e(ws,cao),e(ws,vB),e(vB,fao),e(ws,mao),e(k,gao),e(k,jg),e(jg,gte),e(gte,hao),e(jg,pao),e(jg,FB),e(FB,uao),e(jg,_ao),e(k,bao),e(k,Dg),e(Dg,hte),e(hte,vao),e(Dg,Fao),e(Dg,TB),e(TB,Tao),e(Dg,Mao),e(k,Eao),e(k,Gg),e(Gg,pte),e(pte,Cao),e(Gg,wao),e(Gg,MB),e(MB,Aao),e(Gg,yao),e(k,Lao),e(k,As),e(As,ute),e(ute,xao),e(As,$ao),e(As,EB),e(EB,kao),e(As,Sao),e(As,CB),e(CB,Rao),e(As,Bao),e(k,Pao),e(k,Og),e(Og,_te),e(_te,Iao),e(Og,qao),e(Og,wB),e(wB,Nao),e(Og,jao),e(k,Dao),e(k,Vg),e(Vg,bte),e(bte,Gao),e(Vg,Oao),e(Vg,AB),e(AB,Vao),e(Vg,Xao),e(k,zao),e(k,ys),e(ys,vte),e(vte,Qao),e(ys,Wao),e(ys,yB),e(yB,Hao),e(ys,Uao),e(ys,LB),e(LB,Jao),e(ys,Yao),e(k,Kao),e(k,Xg),e(Xg,Fte),e(Fte,Zao),e(Xg,eno),e(Xg,xB),e(xB,ono),e(Xg,rno),e(k,tno),e(k,zg),e(zg,Tte),e(Tte,ano),e(zg,nno),e(zg,$B),e($B,sno),e(zg,lno),e(k,ino),e(k,Ls),e(Ls,Mte),e(Mte,dno),e(Ls,cno),e(Ls,kB),e(kB,fno),e(Ls,mno),e(Ls,SB),e(SB,gno),e(Ls,hno),e(k,pno),e(k,xs),e(xs,Ete),e(Ete,uno),e(xs,_no),e(xs,RB),e(RB,bno),e(xs,vno),e(xs,BB),e(BB,Fno),e(xs,Tno),e(k,Mno),e(k,$s),e($s,Cte),e(Cte,Eno),e($s,Cno),e($s,PB),e(PB,wno),e($s,Ano),e($s,IB),e(IB,yno),e($s,Lno),e(k,xno),e(k,ks),e(ks,wte),e(wte,$no),e(ks,kno),e(ks,qB),e(qB,Sno),e(ks,Rno),e(ks,NB),e(NB,Bno),e(ks,Pno),e(Cr,Ino),M(Qg,Cr,null),e(wo,qno),e(wo,Wg),M(o6,Wg,null),e(Wg,Nno),e(Wg,Ate),e(Ate,jno),b(f,uPe,_),b(f,bi,_),e(bi,Hg),e(Hg,yte),M(r6,yte,null),e(bi,Dno),e(bi,Lte),e(Lte,Gno),b(f,_Pe,_),b(f,Ao,_),M(t6,Ao,null),e(Ao,Ono),e(Ao,a6),e(a6,Vno),e(a6,jB),e(jB,Xno),e(a6,zno),e(Ao,Qno),e(Ao,n6),e(n6,Wno),e(n6,xte),e(xte,Hno),e(n6,Uno),e(Ao,Jno),e(Ao,Qe),M(s6,Qe,null),e(Qe,Yno),e(Qe,$te),e($te,Kno),e(Qe,Zno),e(Qe,wa),e(wa,eso),e(wa,kte),e(kte,oso),e(wa,rso),e(wa,Ste),e(Ste,tso),e(wa,aso),e(wa,Rte),e(Rte,nso),e(wa,sso),e(Qe,lso),e(Qe,te),e(te,Ug),e(Ug,Bte),e(Bte,iso),e(Ug,dso),e(Ug,DB),e(DB,cso),e(Ug,fso),e(te,mso),e(te,Jg),e(Jg,Pte),e(Pte,gso),e(Jg,hso),e(Jg,GB),e(GB,pso),e(Jg,uso),e(te,_so),e(te,Yg),e(Yg,Ite),e(Ite,bso),e(Yg,vso),e(Yg,OB),e(OB,Fso),e(Yg,Tso),e(te,Mso),e(te,Kg),e(Kg,qte),e(qte,Eso),e(Kg,Cso),e(Kg,VB),e(VB,wso),e(Kg,Aso),e(te,yso),e(te,Zg),e(Zg,Nte),e(Nte,Lso),e(Zg,xso),e(Zg,XB),e(XB,$so),e(Zg,kso),e(te,Sso),e(te,eh),e(eh,jte),e(jte,Rso),e(eh,Bso),e(eh,zB),e(zB,Pso),e(eh,Iso),e(te,qso),e(te,oh),e(oh,Dte),e(Dte,Nso),e(oh,jso),e(oh,QB),e(QB,Dso),e(oh,Gso),e(te,Oso),e(te,rh),e(rh,Gte),e(Gte,Vso),e(rh,Xso),e(rh,WB),e(WB,zso),e(rh,Qso),e(te,Wso),e(te,th),e(th,Ote),e(Ote,Hso),e(th,Uso),e(th,HB),e(HB,Jso),e(th,Yso),e(te,Kso),e(te,ah),e(ah,Vte),e(Vte,Zso),e(ah,elo),e(ah,UB),e(UB,olo),e(ah,rlo),e(te,tlo),e(te,nh),e(nh,Xte),e(Xte,alo),e(nh,nlo),e(nh,JB),e(JB,slo),e(nh,llo),e(te,ilo),e(te,sh),e(sh,zte),e(zte,dlo),e(sh,clo),e(sh,YB),e(YB,flo),e(sh,mlo),e(te,glo),e(te,lh),e(lh,Qte),e(Qte,hlo),e(lh,plo),e(lh,KB),e(KB,ulo),e(lh,_lo),e(te,blo),e(te,ih),e(ih,Wte),e(Wte,vlo),e(ih,Flo),e(ih,ZB),e(ZB,Tlo),e(ih,Mlo),e(te,Elo),e(te,dh),e(dh,Hte),e(Hte,Clo),e(dh,wlo),e(dh,eP),e(eP,Alo),e(dh,ylo),e(te,Llo),e(te,ch),e(ch,Ute),e(Ute,xlo),e(ch,$lo),e(ch,oP),e(oP,klo),e(ch,Slo),e(te,Rlo),e(te,fh),e(fh,Jte),e(Jte,Blo),e(fh,Plo),e(fh,rP),e(rP,Ilo),e(fh,qlo),e(te,Nlo),e(te,mh),e(mh,Yte),e(Yte,jlo),e(mh,Dlo),e(mh,tP),e(tP,Glo),e(mh,Olo),e(te,Vlo),e(te,gh),e(gh,Kte),e(Kte,Xlo),e(gh,zlo),e(gh,aP),e(aP,Qlo),e(gh,Wlo),e(te,Hlo),e(te,hh),e(hh,Zte),e(Zte,Ulo),e(hh,Jlo),e(hh,nP),e(nP,Ylo),e(hh,Klo),e(te,Zlo),e(te,ph),e(ph,eae),e(eae,eio),e(ph,oio),e(ph,sP),e(sP,rio),e(ph,tio),e(te,aio),e(te,uh),e(uh,oae),e(oae,nio),e(uh,sio),e(uh,lP),e(lP,lio),e(uh,iio),e(te,dio),e(te,_h),e(_h,rae),e(rae,cio),e(_h,fio),e(_h,iP),e(iP,mio),e(_h,gio),e(te,hio),e(te,bh),e(bh,tae),e(tae,pio),e(bh,uio),e(bh,dP),e(dP,_io),e(bh,bio),e(Qe,vio),M(vh,Qe,null),e(Qe,Fio),M(Fh,Qe,null),e(Ao,Tio),e(Ao,Th),M(l6,Th,null),e(Th,Mio),e(Th,aae),e(aae,Eio),b(f,bPe,_),b(f,vi,_),e(vi,Mh),e(Mh,nae),M(i6,nae,null),e(vi,Cio),e(vi,sae),e(sae,wio),b(f,vPe,_),b(f,yo,_),M(d6,yo,null),e(yo,Aio),e(yo,c6),e(c6,yio),e(c6,cP),e(cP,Lio),e(c6,xio),e(yo,$io),e(yo,f6),e(f6,kio),e(f6,lae),e(lae,Sio),e(f6,Rio),e(yo,Bio),e(yo,We),M(m6,We,null),e(We,Pio),e(We,iae),e(iae,Iio),e(We,qio),e(We,Fi),e(Fi,Nio),e(Fi,dae),e(dae,jio),e(Fi,Dio),e(Fi,cae),e(cae,Gio),e(Fi,Oio),e(We,Vio),e(We,be),e(be,Eh),e(Eh,fae),e(fae,Xio),e(Eh,zio),e(Eh,fP),e(fP,Qio),e(Eh,Wio),e(be,Hio),e(be,Ch),e(Ch,mae),e(mae,Uio),e(Ch,Jio),e(Ch,mP),e(mP,Yio),e(Ch,Kio),e(be,Zio),e(be,wh),e(wh,gae),e(gae,edo),e(wh,odo),e(wh,gP),e(gP,rdo),e(wh,tdo),e(be,ado),e(be,Ah),e(Ah,hae),e(hae,ndo),e(Ah,sdo),e(Ah,hP),e(hP,ldo),e(Ah,ido),e(be,ddo),e(be,yh),e(yh,pae),e(pae,cdo),e(yh,fdo),e(yh,pP),e(pP,mdo),e(yh,gdo),e(be,hdo),e(be,Lh),e(Lh,uae),e(uae,pdo),e(Lh,udo),e(Lh,uP),e(uP,_do),e(Lh,bdo),e(be,vdo),e(be,xh),e(xh,_ae),e(_ae,Fdo),e(xh,Tdo),e(xh,_P),e(_P,Mdo),e(xh,Edo),e(be,Cdo),e(be,$h),e($h,bae),e(bae,wdo),e($h,Ado),e($h,bP),e(bP,ydo),e($h,Ldo),e(be,xdo),e(be,kh),e(kh,vae),e(vae,$do),e(kh,kdo),e(kh,vP),e(vP,Sdo),e(kh,Rdo),e(be,Bdo),e(be,Sh),e(Sh,Fae),e(Fae,Pdo),e(Sh,Ido),e(Sh,FP),e(FP,qdo),e(Sh,Ndo),e(be,jdo),e(be,Rh),e(Rh,Tae),e(Tae,Ddo),e(Rh,Gdo),e(Rh,TP),e(TP,Odo),e(Rh,Vdo),e(be,Xdo),e(be,Bh),e(Bh,Mae),e(Mae,zdo),e(Bh,Qdo),e(Bh,MP),e(MP,Wdo),e(Bh,Hdo),e(be,Udo),e(be,Ph),e(Ph,Eae),e(Eae,Jdo),e(Ph,Ydo),e(Ph,EP),e(EP,Kdo),e(Ph,Zdo),e(be,eco),e(be,Ih),e(Ih,Cae),e(Cae,oco),e(Ih,rco),e(Ih,CP),e(CP,tco),e(Ih,aco),e(We,nco),M(qh,We,null),e(We,sco),M(Nh,We,null),e(yo,lco),e(yo,jh),M(g6,jh,null),e(jh,ico),e(jh,wae),e(wae,dco),b(f,FPe,_),b(f,Ti,_),e(Ti,Dh),e(Dh,Aae),M(h6,Aae,null),e(Ti,cco),e(Ti,yae),e(yae,fco),b(f,TPe,_),b(f,Lo,_),M(p6,Lo,null),e(Lo,mco),e(Lo,Mi),e(Mi,gco),e(Mi,wP),e(wP,hco),e(Mi,pco),e(Mi,AP),e(AP,uco),e(Mi,_co),e(Lo,bco),e(Lo,u6),e(u6,vco),e(u6,Lae),e(Lae,Fco),e(u6,Tco),e(Lo,Mco),e(Lo,ot),M(_6,ot,null),e(ot,Eco),e(ot,xae),e(xae,Cco),e(ot,wco),e(ot,Ei),e(Ei,Aco),e(Ei,$ae),e($ae,yco),e(Ei,Lco),e(Ei,yP),e(yP,xco),e(Ei,$co),e(ot,kco),M(Gh,ot,null),e(Lo,Sco),e(Lo,He),M(b6,He,null),e(He,Rco),e(He,kae),e(kae,Bco),e(He,Pco),e(He,Aa),e(Aa,Ico),e(Aa,Sae),e(Sae,qco),e(Aa,Nco),e(Aa,Rae),e(Rae,jco),e(Aa,Dco),e(Aa,Bae),e(Bae,Gco),e(Aa,Oco),e(He,Vco),e(He,x),e(x,Oh),e(Oh,Pae),e(Pae,Xco),e(Oh,zco),e(Oh,LP),e(LP,Qco),e(Oh,Wco),e(x,Hco),e(x,Vh),e(Vh,Iae),e(Iae,Uco),e(Vh,Jco),e(Vh,xP),e(xP,Yco),e(Vh,Kco),e(x,Zco),e(x,Xh),e(Xh,qae),e(qae,efo),e(Xh,ofo),e(Xh,$P),e($P,rfo),e(Xh,tfo),e(x,afo),e(x,zh),e(zh,Nae),e(Nae,nfo),e(zh,sfo),e(zh,kP),e(kP,lfo),e(zh,ifo),e(x,dfo),e(x,Qh),e(Qh,jae),e(jae,cfo),e(Qh,ffo),e(Qh,SP),e(SP,mfo),e(Qh,gfo),e(x,hfo),e(x,Wh),e(Wh,Dae),e(Dae,pfo),e(Wh,ufo),e(Wh,RP),e(RP,_fo),e(Wh,bfo),e(x,vfo),e(x,Hh),e(Hh,Gae),e(Gae,Ffo),e(Hh,Tfo),e(Hh,BP),e(BP,Mfo),e(Hh,Efo),e(x,Cfo),e(x,Uh),e(Uh,Oae),e(Oae,wfo),e(Uh,Afo),e(Uh,PP),e(PP,yfo),e(Uh,Lfo),e(x,xfo),e(x,Jh),e(Jh,Vae),e(Vae,$fo),e(Jh,kfo),e(Jh,IP),e(IP,Sfo),e(Jh,Rfo),e(x,Bfo),e(x,Yh),e(Yh,Xae),e(Xae,Pfo),e(Yh,Ifo),e(Yh,qP),e(qP,qfo),e(Yh,Nfo),e(x,jfo),e(x,Kh),e(Kh,zae),e(zae,Dfo),e(Kh,Gfo),e(Kh,NP),e(NP,Ofo),e(Kh,Vfo),e(x,Xfo),e(x,Zh),e(Zh,Qae),e(Qae,zfo),e(Zh,Qfo),e(Zh,jP),e(jP,Wfo),e(Zh,Hfo),e(x,Ufo),e(x,ep),e(ep,Wae),e(Wae,Jfo),e(ep,Yfo),e(ep,DP),e(DP,Kfo),e(ep,Zfo),e(x,emo),e(x,op),e(op,Hae),e(Hae,omo),e(op,rmo),e(op,GP),e(GP,tmo),e(op,amo),e(x,nmo),e(x,rp),e(rp,Uae),e(Uae,smo),e(rp,lmo),e(rp,OP),e(OP,imo),e(rp,dmo),e(x,cmo),e(x,tp),e(tp,Jae),e(Jae,fmo),e(tp,mmo),e(tp,VP),e(VP,gmo),e(tp,hmo),e(x,pmo),e(x,ap),e(ap,Yae),e(Yae,umo),e(ap,_mo),e(ap,XP),e(XP,bmo),e(ap,vmo),e(x,Fmo),e(x,np),e(np,Kae),e(Kae,Tmo),e(np,Mmo),e(np,zP),e(zP,Emo),e(np,Cmo),e(x,wmo),e(x,sp),e(sp,Zae),e(Zae,Amo),e(sp,ymo),e(sp,QP),e(QP,Lmo),e(sp,xmo),e(x,$mo),e(x,lp),e(lp,ene),e(ene,kmo),e(lp,Smo),e(lp,WP),e(WP,Rmo),e(lp,Bmo),e(x,Pmo),e(x,ip),e(ip,one),e(one,Imo),e(ip,qmo),e(ip,HP),e(HP,Nmo),e(ip,jmo),e(x,Dmo),e(x,dp),e(dp,rne),e(rne,Gmo),e(dp,Omo),e(dp,UP),e(UP,Vmo),e(dp,Xmo),e(x,zmo),e(x,cp),e(cp,tne),e(tne,Qmo),e(cp,Wmo),e(cp,JP),e(JP,Hmo),e(cp,Umo),e(x,Jmo),e(x,fp),e(fp,ane),e(ane,Ymo),e(fp,Kmo),e(fp,YP),e(YP,Zmo),e(fp,ego),e(x,ogo),e(x,mp),e(mp,nne),e(nne,rgo),e(mp,tgo),e(mp,KP),e(KP,ago),e(mp,ngo),e(x,sgo),e(x,gp),e(gp,sne),e(sne,lgo),e(gp,igo),e(gp,ZP),e(ZP,dgo),e(gp,cgo),e(x,fgo),e(x,hp),e(hp,lne),e(lne,mgo),e(hp,ggo),e(hp,eI),e(eI,hgo),e(hp,pgo),e(x,ugo),e(x,pp),e(pp,ine),e(ine,_go),e(pp,bgo),e(pp,oI),e(oI,vgo),e(pp,Fgo),e(x,Tgo),e(x,up),e(up,dne),e(dne,Mgo),e(up,Ego),e(up,rI),e(rI,Cgo),e(up,wgo),e(x,Ago),e(x,_p),e(_p,cne),e(cne,ygo),e(_p,Lgo),e(_p,tI),e(tI,xgo),e(_p,$go),e(x,kgo),e(x,Ss),e(Ss,fne),e(fne,Sgo),e(Ss,Rgo),e(Ss,aI),e(aI,Bgo),e(Ss,Pgo),e(Ss,nI),e(nI,Igo),e(Ss,qgo),e(x,Ngo),e(x,bp),e(bp,mne),e(mne,jgo),e(bp,Dgo),e(bp,sI),e(sI,Ggo),e(bp,Ogo),e(x,Vgo),e(x,vp),e(vp,gne),e(gne,Xgo),e(vp,zgo),e(vp,lI),e(lI,Qgo),e(vp,Wgo),e(x,Hgo),e(x,Fp),e(Fp,hne),e(hne,Ugo),e(Fp,Jgo),e(Fp,iI),e(iI,Ygo),e(Fp,Kgo),e(x,Zgo),e(x,Tp),e(Tp,pne),e(pne,eho),e(Tp,oho),e(Tp,dI),e(dI,rho),e(Tp,tho),e(x,aho),e(x,Mp),e(Mp,une),e(une,nho),e(Mp,sho),e(Mp,cI),e(cI,lho),e(Mp,iho),e(x,dho),e(x,Ep),e(Ep,_ne),e(_ne,cho),e(Ep,fho),e(Ep,fI),e(fI,mho),e(Ep,gho),e(x,hho),e(x,Cp),e(Cp,bne),e(bne,pho),e(Cp,uho),e(Cp,mI),e(mI,_ho),e(Cp,bho),e(x,vho),e(x,wp),e(wp,vne),e(vne,Fho),e(wp,Tho),e(wp,gI),e(gI,Mho),e(wp,Eho),e(x,Cho),e(x,Ap),e(Ap,Fne),e(Fne,who),e(Ap,Aho),e(Ap,hI),e(hI,yho),e(Ap,Lho),e(x,xho),e(x,yp),e(yp,Tne),e(Tne,$ho),e(yp,kho),e(yp,pI),e(pI,Sho),e(yp,Rho),e(x,Bho),e(x,Lp),e(Lp,Mne),e(Mne,Pho),e(Lp,Iho),e(Lp,uI),e(uI,qho),e(Lp,Nho),e(x,jho),e(x,xp),e(xp,Ene),e(Ene,Dho),e(xp,Gho),e(xp,_I),e(_I,Oho),e(xp,Vho),e(x,Xho),e(x,$p),e($p,Cne),e(Cne,zho),e($p,Qho),e($p,bI),e(bI,Who),e($p,Hho),e(x,Uho),e(x,kp),e(kp,wne),e(wne,Jho),e(kp,Yho),e(kp,vI),e(vI,Kho),e(kp,Zho),e(x,epo),e(x,Sp),e(Sp,Ane),e(Ane,opo),e(Sp,rpo),e(Sp,FI),e(FI,tpo),e(Sp,apo),e(x,npo),e(x,Rp),e(Rp,yne),e(yne,spo),e(Rp,lpo),e(Rp,TI),e(TI,ipo),e(Rp,dpo),e(x,cpo),e(x,Bp),e(Bp,Lne),e(Lne,fpo),e(Bp,mpo),e(Bp,MI),e(MI,gpo),e(Bp,hpo),e(x,ppo),e(x,Pp),e(Pp,xne),e(xne,upo),e(Pp,_po),e(Pp,EI),e(EI,bpo),e(Pp,vpo),e(x,Fpo),e(x,Ip),e(Ip,$ne),e($ne,Tpo),e(Ip,Mpo),e(Ip,CI),e(CI,Epo),e(Ip,Cpo),e(x,wpo),e(x,qp),e(qp,kne),e(kne,Apo),e(qp,ypo),e(qp,wI),e(wI,Lpo),e(qp,xpo),e(x,$po),e(x,Np),e(Np,Sne),e(Sne,kpo),e(Np,Spo),e(Np,AI),e(AI,Rpo),e(Np,Bpo),e(x,Ppo),e(x,jp),e(jp,Rne),e(Rne,Ipo),e(jp,qpo),e(jp,yI),e(yI,Npo),e(jp,jpo),e(x,Dpo),e(x,Dp),e(Dp,Bne),e(Bne,Gpo),e(Dp,Opo),e(Dp,LI),e(LI,Vpo),e(Dp,Xpo),e(x,zpo),e(x,Gp),e(Gp,Pne),e(Pne,Qpo),e(Gp,Wpo),e(Gp,xI),e(xI,Hpo),e(Gp,Upo),e(x,Jpo),e(x,Op),e(Op,Ine),e(Ine,Ypo),e(Op,Kpo),e(Op,$I),e($I,Zpo),e(Op,euo),e(x,ouo),e(x,Vp),e(Vp,qne),e(qne,ruo),e(Vp,tuo),e(Vp,kI),e(kI,auo),e(Vp,nuo),e(x,suo),e(x,Xp),e(Xp,Nne),e(Nne,luo),e(Xp,iuo),e(Xp,SI),e(SI,duo),e(Xp,cuo),e(x,fuo),e(x,zp),e(zp,jne),e(jne,muo),e(zp,guo),e(zp,RI),e(RI,huo),e(zp,puo),e(x,uuo),e(x,Qp),e(Qp,Dne),e(Dne,_uo),e(Qp,buo),e(Qp,BI),e(BI,vuo),e(Qp,Fuo),e(x,Tuo),e(x,Wp),e(Wp,Gne),e(Gne,Muo),e(Wp,Euo),e(Wp,PI),e(PI,Cuo),e(Wp,wuo),e(x,Auo),e(x,Hp),e(Hp,One),e(One,yuo),e(Hp,Luo),e(Hp,II),e(II,xuo),e(Hp,$uo),e(x,kuo),e(x,Up),e(Up,Vne),e(Vne,Suo),e(Up,Ruo),e(Up,qI),e(qI,Buo),e(Up,Puo),e(x,Iuo),e(x,Jp),e(Jp,Xne),e(Xne,quo),e(Jp,Nuo),e(Jp,NI),e(NI,juo),e(Jp,Duo),e(x,Guo),e(x,Yp),e(Yp,zne),e(zne,Ouo),e(Yp,Vuo),e(Yp,jI),e(jI,Xuo),e(Yp,zuo),e(x,Quo),e(x,Kp),e(Kp,Qne),e(Qne,Wuo),e(Kp,Huo),e(Kp,DI),e(DI,Uuo),e(Kp,Juo),e(x,Yuo),e(x,Zp),e(Zp,Wne),e(Wne,Kuo),e(Zp,Zuo),e(Zp,GI),e(GI,e_o),e(Zp,o_o),e(x,r_o),e(x,eu),e(eu,Hne),e(Hne,t_o),e(eu,a_o),e(eu,OI),e(OI,n_o),e(eu,s_o),e(x,l_o),e(x,ou),e(ou,Une),e(Une,i_o),e(ou,d_o),e(ou,VI),e(VI,c_o),e(ou,f_o),e(x,m_o),e(x,ru),e(ru,Jne),e(Jne,g_o),e(ru,h_o),e(ru,XI),e(XI,p_o),e(ru,u_o),e(x,__o),e(x,tu),e(tu,Yne),e(Yne,b_o),e(tu,v_o),e(tu,zI),e(zI,F_o),e(tu,T_o),e(x,M_o),e(x,au),e(au,Kne),e(Kne,E_o),e(au,C_o),e(au,QI),e(QI,w_o),e(au,A_o),e(x,y_o),e(x,nu),e(nu,Zne),e(Zne,L_o),e(nu,x_o),e(nu,WI),e(WI,$_o),e(nu,k_o),e(x,S_o),e(x,su),e(su,ese),e(ese,R_o),e(su,B_o),e(su,HI),e(HI,P_o),e(su,I_o),e(x,q_o),e(x,lu),e(lu,ose),e(ose,N_o),e(lu,j_o),e(lu,UI),e(UI,D_o),e(lu,G_o),e(x,O_o),e(x,iu),e(iu,rse),e(rse,V_o),e(iu,X_o),e(iu,JI),e(JI,z_o),e(iu,Q_o),e(x,W_o),e(x,du),e(du,tse),e(tse,H_o),e(du,U_o),e(du,YI),e(YI,J_o),e(du,Y_o),e(x,K_o),e(x,cu),e(cu,ase),e(ase,Z_o),e(cu,e1o),e(cu,KI),e(KI,o1o),e(cu,r1o),e(x,t1o),e(x,fu),e(fu,nse),e(nse,a1o),e(fu,n1o),e(fu,ZI),e(ZI,s1o),e(fu,l1o),e(x,i1o),e(x,mu),e(mu,sse),e(sse,d1o),e(mu,c1o),e(mu,eq),e(eq,f1o),e(mu,m1o),e(x,g1o),e(x,gu),e(gu,lse),e(lse,h1o),e(gu,p1o),e(gu,oq),e(oq,u1o),e(gu,_1o),e(x,b1o),e(x,hu),e(hu,ise),e(ise,v1o),e(hu,F1o),e(hu,rq),e(rq,T1o),e(hu,M1o),e(x,E1o),e(x,pu),e(pu,dse),e(dse,C1o),e(pu,w1o),e(pu,tq),e(tq,A1o),e(pu,y1o),e(x,L1o),e(x,uu),e(uu,cse),e(cse,x1o),e(uu,$1o),e(uu,aq),e(aq,k1o),e(uu,S1o),e(x,R1o),e(x,_u),e(_u,fse),e(fse,B1o),e(_u,P1o),e(_u,nq),e(nq,I1o),e(_u,q1o),e(x,N1o),e(x,bu),e(bu,mse),e(mse,j1o),e(bu,D1o),e(bu,sq),e(sq,G1o),e(bu,O1o),e(x,V1o),e(x,vu),e(vu,gse),e(gse,X1o),e(vu,z1o),e(vu,lq),e(lq,Q1o),e(vu,W1o),e(x,H1o),e(x,Fu),e(Fu,hse),e(hse,U1o),e(Fu,J1o),e(Fu,iq),e(iq,Y1o),e(Fu,K1o),e(x,Z1o),e(x,Tu),e(Tu,pse),e(pse,ebo),e(Tu,obo),e(Tu,dq),e(dq,rbo),e(Tu,tbo),e(x,abo),e(x,Mu),e(Mu,use),e(use,nbo),e(Mu,sbo),e(Mu,cq),e(cq,lbo),e(Mu,ibo),e(x,dbo),e(x,Eu),e(Eu,_se),e(_se,cbo),e(Eu,fbo),e(Eu,fq),e(fq,mbo),e(Eu,gbo),e(x,hbo),e(x,Cu),e(Cu,bse),e(bse,pbo),e(Cu,ubo),e(Cu,mq),e(mq,_bo),e(Cu,bbo),e(x,vbo),e(x,wu),e(wu,vse),e(vse,Fbo),e(wu,Tbo),e(wu,gq),e(gq,Mbo),e(wu,Ebo),e(x,Cbo),e(x,Au),e(Au,Fse),e(Fse,wbo),e(Au,Abo),e(Au,hq),e(hq,ybo),e(Au,Lbo),e(x,xbo),e(x,yu),e(yu,Tse),e(Tse,$bo),e(yu,kbo),e(yu,pq),e(pq,Sbo),e(yu,Rbo),e(He,Bbo),e(He,Lu),e(Lu,Pbo),e(Lu,Mse),e(Mse,Ibo),e(Lu,qbo),e(Lu,Ese),e(Ese,Nbo),e(He,jbo),M(xu,He,null),b(f,MPe,_),b(f,Ci,_),e(Ci,$u),e($u,Cse),M(v6,Cse,null),e(Ci,Dbo),e(Ci,wse),e(wse,Gbo),b(f,EPe,_),b(f,xo,_),M(F6,xo,null),e(xo,Obo),e(xo,wi),e(wi,Vbo),e(wi,uq),e(uq,Xbo),e(wi,zbo),e(wi,_q),e(_q,Qbo),e(wi,Wbo),e(xo,Hbo),e(xo,T6),e(T6,Ubo),e(T6,Ase),e(Ase,Jbo),e(T6,Ybo),e(xo,Kbo),e(xo,rt),M(M6,rt,null),e(rt,Zbo),e(rt,yse),e(yse,e4o),e(rt,o4o),e(rt,Ai),e(Ai,r4o),e(Ai,Lse),e(Lse,t4o),e(Ai,a4o),e(Ai,bq),e(bq,n4o),e(Ai,s4o),e(rt,l4o),M(ku,rt,null),e(xo,i4o),e(xo,Ue),M(E6,Ue,null),e(Ue,d4o),e(Ue,xse),e(xse,c4o),e(Ue,f4o),e(Ue,ya),e(ya,m4o),e(ya,$se),e($se,g4o),e(ya,h4o),e(ya,kse),e(kse,p4o),e(ya,u4o),e(ya,Sse),e(Sse,_4o),e(ya,b4o),e(Ue,v4o),e(Ue,G),e(G,Su),e(Su,Rse),e(Rse,F4o),e(Su,T4o),e(Su,vq),e(vq,M4o),e(Su,E4o),e(G,C4o),e(G,Ru),e(Ru,Bse),e(Bse,w4o),e(Ru,A4o),e(Ru,Fq),e(Fq,y4o),e(Ru,L4o),e(G,x4o),e(G,Bu),e(Bu,Pse),e(Pse,$4o),e(Bu,k4o),e(Bu,Tq),e(Tq,S4o),e(Bu,R4o),e(G,B4o),e(G,Pu),e(Pu,Ise),e(Ise,P4o),e(Pu,I4o),e(Pu,Mq),e(Mq,q4o),e(Pu,N4o),e(G,j4o),e(G,Iu),e(Iu,qse),e(qse,D4o),e(Iu,G4o),e(Iu,Eq),e(Eq,O4o),e(Iu,V4o),e(G,X4o),e(G,qu),e(qu,Nse),e(Nse,z4o),e(qu,Q4o),e(qu,Cq),e(Cq,W4o),e(qu,H4o),e(G,U4o),e(G,Nu),e(Nu,jse),e(jse,J4o),e(Nu,Y4o),e(Nu,wq),e(wq,K4o),e(Nu,Z4o),e(G,e2o),e(G,ju),e(ju,Dse),e(Dse,o2o),e(ju,r2o),e(ju,Aq),e(Aq,t2o),e(ju,a2o),e(G,n2o),e(G,Du),e(Du,Gse),e(Gse,s2o),e(Du,l2o),e(Du,yq),e(yq,i2o),e(Du,d2o),e(G,c2o),e(G,Gu),e(Gu,Ose),e(Ose,f2o),e(Gu,m2o),e(Gu,Lq),e(Lq,g2o),e(Gu,h2o),e(G,p2o),e(G,Ou),e(Ou,Vse),e(Vse,u2o),e(Ou,_2o),e(Ou,xq),e(xq,b2o),e(Ou,v2o),e(G,F2o),e(G,Vu),e(Vu,Xse),e(Xse,T2o),e(Vu,M2o),e(Vu,$q),e($q,E2o),e(Vu,C2o),e(G,w2o),e(G,Xu),e(Xu,zse),e(zse,A2o),e(Xu,y2o),e(Xu,kq),e(kq,L2o),e(Xu,x2o),e(G,$2o),e(G,zu),e(zu,Qse),e(Qse,k2o),e(zu,S2o),e(zu,Sq),e(Sq,R2o),e(zu,B2o),e(G,P2o),e(G,Qu),e(Qu,Wse),e(Wse,I2o),e(Qu,q2o),e(Qu,Rq),e(Rq,N2o),e(Qu,j2o),e(G,D2o),e(G,Wu),e(Wu,Hse),e(Hse,G2o),e(Wu,O2o),e(Wu,Bq),e(Bq,V2o),e(Wu,X2o),e(G,z2o),e(G,Hu),e(Hu,Use),e(Use,Q2o),e(Hu,W2o),e(Hu,Pq),e(Pq,H2o),e(Hu,U2o),e(G,J2o),e(G,Uu),e(Uu,Jse),e(Jse,Y2o),e(Uu,K2o),e(Uu,Iq),e(Iq,Z2o),e(Uu,e5o),e(G,o5o),e(G,Ju),e(Ju,Yse),e(Yse,r5o),e(Ju,t5o),e(Ju,qq),e(qq,a5o),e(Ju,n5o),e(G,s5o),e(G,Yu),e(Yu,Kse),e(Kse,l5o),e(Yu,i5o),e(Yu,Nq),e(Nq,d5o),e(Yu,c5o),e(G,f5o),e(G,Ku),e(Ku,Zse),e(Zse,m5o),e(Ku,g5o),e(Ku,jq),e(jq,h5o),e(Ku,p5o),e(G,u5o),e(G,Zu),e(Zu,ele),e(ele,_5o),e(Zu,b5o),e(Zu,Dq),e(Dq,v5o),e(Zu,F5o),e(G,T5o),e(G,e_),e(e_,ole),e(ole,M5o),e(e_,E5o),e(e_,Gq),e(Gq,C5o),e(e_,w5o),e(G,A5o),e(G,o_),e(o_,rle),e(rle,y5o),e(o_,L5o),e(o_,Oq),e(Oq,x5o),e(o_,$5o),e(G,k5o),e(G,r_),e(r_,tle),e(tle,S5o),e(r_,R5o),e(r_,Vq),e(Vq,B5o),e(r_,P5o),e(G,I5o),e(G,t_),e(t_,ale),e(ale,q5o),e(t_,N5o),e(t_,Xq),e(Xq,j5o),e(t_,D5o),e(G,G5o),e(G,a_),e(a_,nle),e(nle,O5o),e(a_,V5o),e(a_,zq),e(zq,X5o),e(a_,z5o),e(G,Q5o),e(G,n_),e(n_,sle),e(sle,W5o),e(n_,H5o),e(n_,Qq),e(Qq,U5o),e(n_,J5o),e(G,Y5o),e(G,s_),e(s_,lle),e(lle,K5o),e(s_,Z5o),e(s_,Wq),e(Wq,evo),e(s_,ovo),e(G,rvo),e(G,l_),e(l_,ile),e(ile,tvo),e(l_,avo),e(l_,Hq),e(Hq,nvo),e(l_,svo),e(G,lvo),e(G,i_),e(i_,dle),e(dle,ivo),e(i_,dvo),e(i_,Uq),e(Uq,cvo),e(i_,fvo),e(G,mvo),e(G,d_),e(d_,cle),e(cle,gvo),e(d_,hvo),e(d_,Jq),e(Jq,pvo),e(d_,uvo),e(G,_vo),e(G,c_),e(c_,fle),e(fle,bvo),e(c_,vvo),e(c_,Yq),e(Yq,Fvo),e(c_,Tvo),e(G,Mvo),e(G,f_),e(f_,mle),e(mle,Evo),e(f_,Cvo),e(f_,Kq),e(Kq,wvo),e(f_,Avo),e(G,yvo),e(G,m_),e(m_,gle),e(gle,Lvo),e(m_,xvo),e(m_,Zq),e(Zq,$vo),e(m_,kvo),e(G,Svo),e(G,g_),e(g_,hle),e(hle,Rvo),e(g_,Bvo),e(g_,eN),e(eN,Pvo),e(g_,Ivo),e(G,qvo),e(G,h_),e(h_,ple),e(ple,Nvo),e(h_,jvo),e(h_,oN),e(oN,Dvo),e(h_,Gvo),e(G,Ovo),e(G,p_),e(p_,ule),e(ule,Vvo),e(p_,Xvo),e(p_,rN),e(rN,zvo),e(p_,Qvo),e(G,Wvo),e(G,u_),e(u_,_le),e(_le,Hvo),e(u_,Uvo),e(u_,tN),e(tN,Jvo),e(u_,Yvo),e(Ue,Kvo),e(Ue,__),e(__,Zvo),e(__,ble),e(ble,eFo),e(__,oFo),e(__,vle),e(vle,rFo),e(Ue,tFo),M(b_,Ue,null),b(f,CPe,_),b(f,yi,_),e(yi,v_),e(v_,Fle),M(C6,Fle,null),e(yi,aFo),e(yi,Tle),e(Tle,nFo),b(f,wPe,_),b(f,$o,_),M(w6,$o,null),e($o,sFo),e($o,Li),e(Li,lFo),e(Li,aN),e(aN,iFo),e(Li,dFo),e(Li,nN),e(nN,cFo),e(Li,fFo),e($o,mFo),e($o,A6),e(A6,gFo),e(A6,Mle),e(Mle,hFo),e(A6,pFo),e($o,uFo),e($o,tt),M(y6,tt,null),e(tt,_Fo),e(tt,Ele),e(Ele,bFo),e(tt,vFo),e(tt,xi),e(xi,FFo),e(xi,Cle),e(Cle,TFo),e(xi,MFo),e(xi,sN),e(sN,EFo),e(xi,CFo),e(tt,wFo),M(F_,tt,null),e($o,AFo),e($o,Je),M(L6,Je,null),e(Je,yFo),e(Je,wle),e(wle,LFo),e(Je,xFo),e(Je,La),e(La,$Fo),e(La,Ale),e(Ale,kFo),e(La,SFo),e(La,yle),e(yle,RFo),e(La,BFo),e(La,Lle),e(Lle,PFo),e(La,IFo),e(Je,qFo),e(Je,z),e(z,T_),e(T_,xle),e(xle,NFo),e(T_,jFo),e(T_,lN),e(lN,DFo),e(T_,GFo),e(z,OFo),e(z,M_),e(M_,$le),e($le,VFo),e(M_,XFo),e(M_,iN),e(iN,zFo),e(M_,QFo),e(z,WFo),e(z,E_),e(E_,kle),e(kle,HFo),e(E_,UFo),e(E_,dN),e(dN,JFo),e(E_,YFo),e(z,KFo),e(z,C_),e(C_,Sle),e(Sle,ZFo),e(C_,e0o),e(C_,cN),e(cN,o0o),e(C_,r0o),e(z,t0o),e(z,w_),e(w_,Rle),e(Rle,a0o),e(w_,n0o),e(w_,fN),e(fN,s0o),e(w_,l0o),e(z,i0o),e(z,A_),e(A_,Ble),e(Ble,d0o),e(A_,c0o),e(A_,mN),e(mN,f0o),e(A_,m0o),e(z,g0o),e(z,y_),e(y_,Ple),e(Ple,h0o),e(y_,p0o),e(y_,gN),e(gN,u0o),e(y_,_0o),e(z,b0o),e(z,L_),e(L_,Ile),e(Ile,v0o),e(L_,F0o),e(L_,hN),e(hN,T0o),e(L_,M0o),e(z,E0o),e(z,x_),e(x_,qle),e(qle,C0o),e(x_,w0o),e(x_,pN),e(pN,A0o),e(x_,y0o),e(z,L0o),e(z,$_),e($_,Nle),e(Nle,x0o),e($_,$0o),e($_,uN),e(uN,k0o),e($_,S0o),e(z,R0o),e(z,k_),e(k_,jle),e(jle,B0o),e(k_,P0o),e(k_,_N),e(_N,I0o),e(k_,q0o),e(z,N0o),e(z,S_),e(S_,Dle),e(Dle,j0o),e(S_,D0o),e(S_,bN),e(bN,G0o),e(S_,O0o),e(z,V0o),e(z,R_),e(R_,Gle),e(Gle,X0o),e(R_,z0o),e(R_,vN),e(vN,Q0o),e(R_,W0o),e(z,H0o),e(z,B_),e(B_,Ole),e(Ole,U0o),e(B_,J0o),e(B_,FN),e(FN,Y0o),e(B_,K0o),e(z,Z0o),e(z,P_),e(P_,Vle),e(Vle,eTo),e(P_,oTo),e(P_,TN),e(TN,rTo),e(P_,tTo),e(z,aTo),e(z,I_),e(I_,Xle),e(Xle,nTo),e(I_,sTo),e(I_,MN),e(MN,lTo),e(I_,iTo),e(z,dTo),e(z,q_),e(q_,zle),e(zle,cTo),e(q_,fTo),e(q_,EN),e(EN,mTo),e(q_,gTo),e(z,hTo),e(z,N_),e(N_,Qle),e(Qle,pTo),e(N_,uTo),e(N_,CN),e(CN,_To),e(N_,bTo),e(z,vTo),e(z,j_),e(j_,Wle),e(Wle,FTo),e(j_,TTo),e(j_,wN),e(wN,MTo),e(j_,ETo),e(z,CTo),e(z,D_),e(D_,Hle),e(Hle,wTo),e(D_,ATo),e(D_,AN),e(AN,yTo),e(D_,LTo),e(z,xTo),e(z,G_),e(G_,Ule),e(Ule,$To),e(G_,kTo),e(G_,yN),e(yN,STo),e(G_,RTo),e(z,BTo),e(z,O_),e(O_,Jle),e(Jle,PTo),e(O_,ITo),e(O_,LN),e(LN,qTo),e(O_,NTo),e(z,jTo),e(z,V_),e(V_,Yle),e(Yle,DTo),e(V_,GTo),e(V_,xN),e(xN,OTo),e(V_,VTo),e(z,XTo),e(z,X_),e(X_,Kle),e(Kle,zTo),e(X_,QTo),e(X_,$N),e($N,WTo),e(X_,HTo),e(z,UTo),e(z,z_),e(z_,Zle),e(Zle,JTo),e(z_,YTo),e(z_,kN),e(kN,KTo),e(z_,ZTo),e(z,e7o),e(z,Q_),e(Q_,eie),e(eie,o7o),e(Q_,r7o),e(Q_,SN),e(SN,t7o),e(Q_,a7o),e(z,n7o),e(z,W_),e(W_,oie),e(oie,s7o),e(W_,l7o),e(W_,RN),e(RN,i7o),e(W_,d7o),e(z,c7o),e(z,H_),e(H_,rie),e(rie,f7o),e(H_,m7o),e(H_,BN),e(BN,g7o),e(H_,h7o),e(z,p7o),e(z,U_),e(U_,tie),e(tie,u7o),e(U_,_7o),e(U_,PN),e(PN,b7o),e(U_,v7o),e(z,F7o),e(z,J_),e(J_,aie),e(aie,T7o),e(J_,M7o),e(J_,IN),e(IN,E7o),e(J_,C7o),e(z,w7o),e(z,Y_),e(Y_,nie),e(nie,A7o),e(Y_,y7o),e(Y_,qN),e(qN,L7o),e(Y_,x7o),e(z,$7o),e(z,K_),e(K_,sie),e(sie,k7o),e(K_,S7o),e(K_,NN),e(NN,R7o),e(K_,B7o),e(z,P7o),e(z,Z_),e(Z_,lie),e(lie,I7o),e(Z_,q7o),e(Z_,jN),e(jN,N7o),e(Z_,j7o),e(z,D7o),e(z,e1),e(e1,iie),e(iie,G7o),e(e1,O7o),e(e1,DN),e(DN,V7o),e(e1,X7o),e(z,z7o),e(z,o1),e(o1,die),e(die,Q7o),e(o1,W7o),e(o1,GN),e(GN,H7o),e(o1,U7o),e(Je,J7o),e(Je,r1),e(r1,Y7o),e(r1,cie),e(cie,K7o),e(r1,Z7o),e(r1,fie),e(fie,eMo),e(Je,oMo),M(t1,Je,null),b(f,APe,_),b(f,$i,_),e($i,a1),e(a1,mie),M(x6,mie,null),e($i,rMo),e($i,gie),e(gie,tMo),b(f,yPe,_),b(f,ko,_),M($6,ko,null),e(ko,aMo),e(ko,ki),e(ki,nMo),e(ki,ON),e(ON,sMo),e(ki,lMo),e(ki,VN),e(VN,iMo),e(ki,dMo),e(ko,cMo),e(ko,k6),e(k6,fMo),e(k6,hie),e(hie,mMo),e(k6,gMo),e(ko,hMo),e(ko,at),M(S6,at,null),e(at,pMo),e(at,pie),e(pie,uMo),e(at,_Mo),e(at,Si),e(Si,bMo),e(Si,uie),e(uie,vMo),e(Si,FMo),e(Si,XN),e(XN,TMo),e(Si,MMo),e(at,EMo),M(n1,at,null),e(ko,CMo),e(ko,Ye),M(R6,Ye,null),e(Ye,wMo),e(Ye,_ie),e(_ie,AMo),e(Ye,yMo),e(Ye,xa),e(xa,LMo),e(xa,bie),e(bie,xMo),e(xa,$Mo),e(xa,vie),e(vie,kMo),e(xa,SMo),e(xa,Fie),e(Fie,RMo),e(xa,BMo),e(Ye,PMo),e(Ye,Q),e(Q,s1),e(s1,Tie),e(Tie,IMo),e(s1,qMo),e(s1,zN),e(zN,NMo),e(s1,jMo),e(Q,DMo),e(Q,l1),e(l1,Mie),e(Mie,GMo),e(l1,OMo),e(l1,QN),e(QN,VMo),e(l1,XMo),e(Q,zMo),e(Q,i1),e(i1,Eie),e(Eie,QMo),e(i1,WMo),e(i1,WN),e(WN,HMo),e(i1,UMo),e(Q,JMo),e(Q,d1),e(d1,Cie),e(Cie,YMo),e(d1,KMo),e(d1,HN),e(HN,ZMo),e(d1,eEo),e(Q,oEo),e(Q,c1),e(c1,wie),e(wie,rEo),e(c1,tEo),e(c1,UN),e(UN,aEo),e(c1,nEo),e(Q,sEo),e(Q,f1),e(f1,Aie),e(Aie,lEo),e(f1,iEo),e(f1,JN),e(JN,dEo),e(f1,cEo),e(Q,fEo),e(Q,m1),e(m1,yie),e(yie,mEo),e(m1,gEo),e(m1,YN),e(YN,hEo),e(m1,pEo),e(Q,uEo),e(Q,g1),e(g1,Lie),e(Lie,_Eo),e(g1,bEo),e(g1,KN),e(KN,vEo),e(g1,FEo),e(Q,TEo),e(Q,h1),e(h1,xie),e(xie,MEo),e(h1,EEo),e(h1,ZN),e(ZN,CEo),e(h1,wEo),e(Q,AEo),e(Q,p1),e(p1,$ie),e($ie,yEo),e(p1,LEo),e(p1,ej),e(ej,xEo),e(p1,$Eo),e(Q,kEo),e(Q,u1),e(u1,kie),e(kie,SEo),e(u1,REo),e(u1,oj),e(oj,BEo),e(u1,PEo),e(Q,IEo),e(Q,_1),e(_1,Sie),e(Sie,qEo),e(_1,NEo),e(_1,rj),e(rj,jEo),e(_1,DEo),e(Q,GEo),e(Q,b1),e(b1,Rie),e(Rie,OEo),e(b1,VEo),e(b1,tj),e(tj,XEo),e(b1,zEo),e(Q,QEo),e(Q,v1),e(v1,Bie),e(Bie,WEo),e(v1,HEo),e(v1,aj),e(aj,UEo),e(v1,JEo),e(Q,YEo),e(Q,F1),e(F1,Pie),e(Pie,KEo),e(F1,ZEo),e(F1,nj),e(nj,eCo),e(F1,oCo),e(Q,rCo),e(Q,T1),e(T1,Iie),e(Iie,tCo),e(T1,aCo),e(T1,sj),e(sj,nCo),e(T1,sCo),e(Q,lCo),e(Q,M1),e(M1,qie),e(qie,iCo),e(M1,dCo),e(M1,lj),e(lj,cCo),e(M1,fCo),e(Q,mCo),e(Q,E1),e(E1,Nie),e(Nie,gCo),e(E1,hCo),e(E1,ij),e(ij,pCo),e(E1,uCo),e(Q,_Co),e(Q,C1),e(C1,jie),e(jie,bCo),e(C1,vCo),e(C1,dj),e(dj,FCo),e(C1,TCo),e(Q,MCo),e(Q,w1),e(w1,Die),e(Die,ECo),e(w1,CCo),e(w1,cj),e(cj,wCo),e(w1,ACo),e(Q,yCo),e(Q,A1),e(A1,Gie),e(Gie,LCo),e(A1,xCo),e(A1,fj),e(fj,$Co),e(A1,kCo),e(Q,SCo),e(Q,y1),e(y1,Oie),e(Oie,RCo),e(y1,BCo),e(y1,mj),e(mj,PCo),e(y1,ICo),e(Q,qCo),e(Q,L1),e(L1,Vie),e(Vie,NCo),e(L1,jCo),e(L1,gj),e(gj,DCo),e(L1,GCo),e(Q,OCo),e(Q,x1),e(x1,Xie),e(Xie,VCo),e(x1,XCo),e(x1,hj),e(hj,zCo),e(x1,QCo),e(Q,WCo),e(Q,$1),e($1,zie),e(zie,HCo),e($1,UCo),e($1,pj),e(pj,JCo),e($1,YCo),e(Q,KCo),e(Q,k1),e(k1,Qie),e(Qie,ZCo),e(k1,e3o),e(k1,uj),e(uj,o3o),e(k1,r3o),e(Q,t3o),e(Q,S1),e(S1,Wie),e(Wie,a3o),e(S1,n3o),e(S1,_j),e(_j,s3o),e(S1,l3o),e(Q,i3o),e(Q,R1),e(R1,Hie),e(Hie,d3o),e(R1,c3o),e(R1,bj),e(bj,f3o),e(R1,m3o),e(Q,g3o),e(Q,B1),e(B1,Uie),e(Uie,h3o),e(B1,p3o),e(B1,vj),e(vj,u3o),e(B1,_3o),e(Q,b3o),e(Q,P1),e(P1,Jie),e(Jie,v3o),e(P1,F3o),e(P1,Fj),e(Fj,T3o),e(P1,M3o),e(Q,E3o),e(Q,I1),e(I1,Yie),e(Yie,C3o),e(I1,w3o),e(I1,Kie),e(Kie,A3o),e(I1,y3o),e(Q,L3o),e(Q,q1),e(q1,Zie),e(Zie,x3o),e(q1,$3o),e(q1,Tj),e(Tj,k3o),e(q1,S3o),e(Q,R3o),e(Q,N1),e(N1,ede),e(ede,B3o),e(N1,P3o),e(N1,Mj),e(Mj,I3o),e(N1,q3o),e(Q,N3o),e(Q,j1),e(j1,ode),e(ode,j3o),e(j1,D3o),e(j1,Ej),e(Ej,G3o),e(j1,O3o),e(Q,V3o),e(Q,D1),e(D1,rde),e(rde,X3o),e(D1,z3o),e(D1,Cj),e(Cj,Q3o),e(D1,W3o),e(Ye,H3o),e(Ye,G1),e(G1,U3o),e(G1,tde),e(tde,J3o),e(G1,Y3o),e(G1,ade),e(ade,K3o),e(Ye,Z3o),M(O1,Ye,null),b(f,LPe,_),b(f,Ri,_),e(Ri,V1),e(V1,nde),M(B6,nde,null),e(Ri,ewo),e(Ri,sde),e(sde,owo),b(f,xPe,_),b(f,So,_),M(P6,So,null),e(So,rwo),e(So,Bi),e(Bi,two),e(Bi,wj),e(wj,awo),e(Bi,nwo),e(Bi,Aj),e(Aj,swo),e(Bi,lwo),e(So,iwo),e(So,I6),e(I6,dwo),e(I6,lde),e(lde,cwo),e(I6,fwo),e(So,mwo),e(So,nt),M(q6,nt,null),e(nt,gwo),e(nt,ide),e(ide,hwo),e(nt,pwo),e(nt,Pi),e(Pi,uwo),e(Pi,dde),e(dde,_wo),e(Pi,bwo),e(Pi,yj),e(yj,vwo),e(Pi,Fwo),e(nt,Two),M(X1,nt,null),e(So,Mwo),e(So,Ke),M(N6,Ke,null),e(Ke,Ewo),e(Ke,cde),e(cde,Cwo),e(Ke,wwo),e(Ke,$a),e($a,Awo),e($a,fde),e(fde,ywo),e($a,Lwo),e($a,mde),e(mde,xwo),e($a,$wo),e($a,gde),e(gde,kwo),e($a,Swo),e(Ke,Rwo),e(Ke,he),e(he,z1),e(z1,hde),e(hde,Bwo),e(z1,Pwo),e(z1,Lj),e(Lj,Iwo),e(z1,qwo),e(he,Nwo),e(he,Q1),e(Q1,pde),e(pde,jwo),e(Q1,Dwo),e(Q1,xj),e(xj,Gwo),e(Q1,Owo),e(he,Vwo),e(he,W1),e(W1,ude),e(ude,Xwo),e(W1,zwo),e(W1,$j),e($j,Qwo),e(W1,Wwo),e(he,Hwo),e(he,H1),e(H1,_de),e(_de,Uwo),e(H1,Jwo),e(H1,kj),e(kj,Ywo),e(H1,Kwo),e(he,Zwo),e(he,U1),e(U1,bde),e(bde,eAo),e(U1,oAo),e(U1,Sj),e(Sj,rAo),e(U1,tAo),e(he,aAo),e(he,J1),e(J1,vde),e(vde,nAo),e(J1,sAo),e(J1,Rj),e(Rj,lAo),e(J1,iAo),e(he,dAo),e(he,Y1),e(Y1,Fde),e(Fde,cAo),e(Y1,fAo),e(Y1,Bj),e(Bj,mAo),e(Y1,gAo),e(he,hAo),e(he,K1),e(K1,Tde),e(Tde,pAo),e(K1,uAo),e(K1,Pj),e(Pj,_Ao),e(K1,bAo),e(he,vAo),e(he,Z1),e(Z1,Mde),e(Mde,FAo),e(Z1,TAo),e(Z1,Ij),e(Ij,MAo),e(Z1,EAo),e(he,CAo),e(he,eb),e(eb,Ede),e(Ede,wAo),e(eb,AAo),e(eb,qj),e(qj,yAo),e(eb,LAo),e(he,xAo),e(he,ob),e(ob,Cde),e(Cde,$Ao),e(ob,kAo),e(ob,Nj),e(Nj,SAo),e(ob,RAo),e(he,BAo),e(he,rb),e(rb,wde),e(wde,PAo),e(rb,IAo),e(rb,jj),e(jj,qAo),e(rb,NAo),e(he,jAo),e(he,tb),e(tb,Ade),e(Ade,DAo),e(tb,GAo),e(tb,Dj),e(Dj,OAo),e(tb,VAo),e(he,XAo),e(he,ab),e(ab,yde),e(yde,zAo),e(ab,QAo),e(ab,Gj),e(Gj,WAo),e(ab,HAo),e(he,UAo),e(he,nb),e(nb,Lde),e(Lde,JAo),e(nb,YAo),e(nb,Oj),e(Oj,KAo),e(nb,ZAo),e(he,e6o),e(he,sb),e(sb,xde),e(xde,o6o),e(sb,r6o),e(sb,Vj),e(Vj,t6o),e(sb,a6o),e(he,n6o),e(he,lb),e(lb,$de),e($de,s6o),e(lb,l6o),e(lb,Xj),e(Xj,i6o),e(lb,d6o),e(Ke,c6o),e(Ke,ib),e(ib,f6o),e(ib,kde),e(kde,m6o),e(ib,g6o),e(ib,Sde),e(Sde,h6o),e(Ke,p6o),M(db,Ke,null),b(f,$Pe,_),b(f,Ii,_),e(Ii,cb),e(cb,Rde),M(j6,Rde,null),e(Ii,u6o),e(Ii,Bde),e(Bde,_6o),b(f,kPe,_),b(f,Ro,_),M(D6,Ro,null),e(Ro,b6o),e(Ro,qi),e(qi,v6o),e(qi,zj),e(zj,F6o),e(qi,T6o),e(qi,Qj),e(Qj,M6o),e(qi,E6o),e(Ro,C6o),e(Ro,G6),e(G6,w6o),e(G6,Pde),e(Pde,A6o),e(G6,y6o),e(Ro,L6o),e(Ro,st),M(O6,st,null),e(st,x6o),e(st,Ide),e(Ide,$6o),e(st,k6o),e(st,Ni),e(Ni,S6o),e(Ni,qde),e(qde,R6o),e(Ni,B6o),e(Ni,Wj),e(Wj,P6o),e(Ni,I6o),e(st,q6o),M(fb,st,null),e(Ro,N6o),e(Ro,Ze),M(V6,Ze,null),e(Ze,j6o),e(Ze,Nde),e(Nde,D6o),e(Ze,G6o),e(Ze,ka),e(ka,O6o),e(ka,jde),e(jde,V6o),e(ka,X6o),e(ka,Dde),e(Dde,z6o),e(ka,Q6o),e(ka,Gde),e(Gde,W6o),e(ka,H6o),e(Ze,U6o),e(Ze,q),e(q,mb),e(mb,Ode),e(Ode,J6o),e(mb,Y6o),e(mb,Hj),e(Hj,K6o),e(mb,Z6o),e(q,eyo),e(q,gb),e(gb,Vde),e(Vde,oyo),e(gb,ryo),e(gb,Uj),e(Uj,tyo),e(gb,ayo),e(q,nyo),e(q,hb),e(hb,Xde),e(Xde,syo),e(hb,lyo),e(hb,Jj),e(Jj,iyo),e(hb,dyo),e(q,cyo),e(q,pb),e(pb,zde),e(zde,fyo),e(pb,myo),e(pb,Yj),e(Yj,gyo),e(pb,hyo),e(q,pyo),e(q,ub),e(ub,Qde),e(Qde,uyo),e(ub,_yo),e(ub,Kj),e(Kj,byo),e(ub,vyo),e(q,Fyo),e(q,_b),e(_b,Wde),e(Wde,Tyo),e(_b,Myo),e(_b,Zj),e(Zj,Eyo),e(_b,Cyo),e(q,wyo),e(q,bb),e(bb,Hde),e(Hde,Ayo),e(bb,yyo),e(bb,eD),e(eD,Lyo),e(bb,xyo),e(q,$yo),e(q,vb),e(vb,Ude),e(Ude,kyo),e(vb,Syo),e(vb,oD),e(oD,Ryo),e(vb,Byo),e(q,Pyo),e(q,Fb),e(Fb,Jde),e(Jde,Iyo),e(Fb,qyo),e(Fb,rD),e(rD,Nyo),e(Fb,jyo),e(q,Dyo),e(q,Tb),e(Tb,Yde),e(Yde,Gyo),e(Tb,Oyo),e(Tb,tD),e(tD,Vyo),e(Tb,Xyo),e(q,zyo),e(q,Mb),e(Mb,Kde),e(Kde,Qyo),e(Mb,Wyo),e(Mb,aD),e(aD,Hyo),e(Mb,Uyo),e(q,Jyo),e(q,Eb),e(Eb,Zde),e(Zde,Yyo),e(Eb,Kyo),e(Eb,nD),e(nD,Zyo),e(Eb,eLo),e(q,oLo),e(q,Cb),e(Cb,ece),e(ece,rLo),e(Cb,tLo),e(Cb,sD),e(sD,aLo),e(Cb,nLo),e(q,sLo),e(q,wb),e(wb,oce),e(oce,lLo),e(wb,iLo),e(wb,lD),e(lD,dLo),e(wb,cLo),e(q,fLo),e(q,Ab),e(Ab,rce),e(rce,mLo),e(Ab,gLo),e(Ab,iD),e(iD,hLo),e(Ab,pLo),e(q,uLo),e(q,yb),e(yb,tce),e(tce,_Lo),e(yb,bLo),e(yb,dD),e(dD,vLo),e(yb,FLo),e(q,TLo),e(q,Lb),e(Lb,ace),e(ace,MLo),e(Lb,ELo),e(Lb,cD),e(cD,CLo),e(Lb,wLo),e(q,ALo),e(q,xb),e(xb,nce),e(nce,yLo),e(xb,LLo),e(xb,fD),e(fD,xLo),e(xb,$Lo),e(q,kLo),e(q,$b),e($b,sce),e(sce,SLo),e($b,RLo),e($b,mD),e(mD,BLo),e($b,PLo),e(q,ILo),e(q,kb),e(kb,lce),e(lce,qLo),e(kb,NLo),e(kb,gD),e(gD,jLo),e(kb,DLo),e(q,GLo),e(q,Sb),e(Sb,ice),e(ice,OLo),e(Sb,VLo),e(Sb,hD),e(hD,XLo),e(Sb,zLo),e(q,QLo),e(q,Rb),e(Rb,dce),e(dce,WLo),e(Rb,HLo),e(Rb,pD),e(pD,ULo),e(Rb,JLo),e(q,YLo),e(q,Bb),e(Bb,cce),e(cce,KLo),e(Bb,ZLo),e(Bb,uD),e(uD,e8o),e(Bb,o8o),e(q,r8o),e(q,Pb),e(Pb,fce),e(fce,t8o),e(Pb,a8o),e(Pb,_D),e(_D,n8o),e(Pb,s8o),e(q,l8o),e(q,Ib),e(Ib,mce),e(mce,i8o),e(Ib,d8o),e(Ib,bD),e(bD,c8o),e(Ib,f8o),e(q,m8o),e(q,qb),e(qb,gce),e(gce,g8o),e(qb,h8o),e(qb,vD),e(vD,p8o),e(qb,u8o),e(q,_8o),e(q,Nb),e(Nb,hce),e(hce,b8o),e(Nb,v8o),e(Nb,FD),e(FD,F8o),e(Nb,T8o),e(q,M8o),e(q,jb),e(jb,pce),e(pce,E8o),e(jb,C8o),e(jb,TD),e(TD,w8o),e(jb,A8o),e(q,y8o),e(q,Db),e(Db,uce),e(uce,L8o),e(Db,x8o),e(Db,MD),e(MD,$8o),e(Db,k8o),e(q,S8o),e(q,Gb),e(Gb,_ce),e(_ce,R8o),e(Gb,B8o),e(Gb,ED),e(ED,P8o),e(Gb,I8o),e(q,q8o),e(q,Ob),e(Ob,bce),e(bce,N8o),e(Ob,j8o),e(Ob,CD),e(CD,D8o),e(Ob,G8o),e(q,O8o),e(q,Vb),e(Vb,vce),e(vce,V8o),e(Vb,X8o),e(Vb,wD),e(wD,z8o),e(Vb,Q8o),e(q,W8o),e(q,Xb),e(Xb,Fce),e(Fce,H8o),e(Xb,U8o),e(Xb,AD),e(AD,J8o),e(Xb,Y8o),e(q,K8o),e(q,zb),e(zb,Tce),e(Tce,Z8o),e(zb,exo),e(zb,yD),e(yD,oxo),e(zb,rxo),e(q,txo),e(q,Qb),e(Qb,Mce),e(Mce,axo),e(Qb,nxo),e(Qb,LD),e(LD,sxo),e(Qb,lxo),e(q,ixo),e(q,Wb),e(Wb,Ece),e(Ece,dxo),e(Wb,cxo),e(Wb,xD),e(xD,fxo),e(Wb,mxo),e(q,gxo),e(q,Hb),e(Hb,Cce),e(Cce,hxo),e(Hb,pxo),e(Hb,$D),e($D,uxo),e(Hb,_xo),e(q,bxo),e(q,Ub),e(Ub,wce),e(wce,vxo),e(Ub,Fxo),e(Ub,kD),e(kD,Txo),e(Ub,Mxo),e(q,Exo),e(q,Jb),e(Jb,Ace),e(Ace,Cxo),e(Jb,wxo),e(Jb,SD),e(SD,Axo),e(Jb,yxo),e(q,Lxo),e(q,Yb),e(Yb,yce),e(yce,xxo),e(Yb,$xo),e(Yb,RD),e(RD,kxo),e(Yb,Sxo),e(q,Rxo),e(q,Kb),e(Kb,Lce),e(Lce,Bxo),e(Kb,Pxo),e(Kb,BD),e(BD,Ixo),e(Kb,qxo),e(q,Nxo),e(q,Zb),e(Zb,xce),e(xce,jxo),e(Zb,Dxo),e(Zb,PD),e(PD,Gxo),e(Zb,Oxo),e(q,Vxo),e(q,e4),e(e4,$ce),e($ce,Xxo),e(e4,zxo),e(e4,ID),e(ID,Qxo),e(e4,Wxo),e(q,Hxo),e(q,o4),e(o4,kce),e(kce,Uxo),e(o4,Jxo),e(o4,qD),e(qD,Yxo),e(o4,Kxo),e(q,Zxo),e(q,r4),e(r4,Sce),e(Sce,e9o),e(r4,o9o),e(r4,ND),e(ND,r9o),e(r4,t9o),e(q,a9o),e(q,t4),e(t4,Rce),e(Rce,n9o),e(t4,s9o),e(t4,jD),e(jD,l9o),e(t4,i9o),e(q,d9o),e(q,a4),e(a4,Bce),e(Bce,c9o),e(a4,f9o),e(a4,DD),e(DD,m9o),e(a4,g9o),e(Ze,h9o),e(Ze,n4),e(n4,p9o),e(n4,Pce),e(Pce,u9o),e(n4,_9o),e(n4,Ice),e(Ice,b9o),e(Ze,v9o),M(s4,Ze,null),b(f,SPe,_),b(f,ji,_),e(ji,l4),e(l4,qce),M(X6,qce,null),e(ji,F9o),e(ji,Nce),e(Nce,T9o),b(f,RPe,_),b(f,Bo,_),M(z6,Bo,null),e(Bo,M9o),e(Bo,Di),e(Di,E9o),e(Di,GD),e(GD,C9o),e(Di,w9o),e(Di,OD),e(OD,A9o),e(Di,y9o),e(Bo,L9o),e(Bo,Q6),e(Q6,x9o),e(Q6,jce),e(jce,$9o),e(Q6,k9o),e(Bo,S9o),e(Bo,lt),M(W6,lt,null),e(lt,R9o),e(lt,Dce),e(Dce,B9o),e(lt,P9o),e(lt,Gi),e(Gi,I9o),e(Gi,Gce),e(Gce,q9o),e(Gi,N9o),e(Gi,VD),e(VD,j9o),e(Gi,D9o),e(lt,G9o),M(i4,lt,null),e(Bo,O9o),e(Bo,eo),M(H6,eo,null),e(eo,V9o),e(eo,Oce),e(Oce,X9o),e(eo,z9o),e(eo,Sa),e(Sa,Q9o),e(Sa,Vce),e(Vce,W9o),e(Sa,H9o),e(Sa,Xce),e(Xce,U9o),e(Sa,J9o),e(Sa,zce),e(zce,Y9o),e(Sa,K9o),e(eo,Z9o),e(eo,Y),e(Y,d4),e(d4,Qce),e(Qce,e$o),e(d4,o$o),e(d4,XD),e(XD,r$o),e(d4,t$o),e(Y,a$o),e(Y,c4),e(c4,Wce),e(Wce,n$o),e(c4,s$o),e(c4,zD),e(zD,l$o),e(c4,i$o),e(Y,d$o),e(Y,f4),e(f4,Hce),e(Hce,c$o),e(f4,f$o),e(f4,QD),e(QD,m$o),e(f4,g$o),e(Y,h$o),e(Y,m4),e(m4,Uce),e(Uce,p$o),e(m4,u$o),e(m4,WD),e(WD,_$o),e(m4,b$o),e(Y,v$o),e(Y,g4),e(g4,Jce),e(Jce,F$o),e(g4,T$o),e(g4,HD),e(HD,M$o),e(g4,E$o),e(Y,C$o),e(Y,h4),e(h4,Yce),e(Yce,w$o),e(h4,A$o),e(h4,UD),e(UD,y$o),e(h4,L$o),e(Y,x$o),e(Y,p4),e(p4,Kce),e(Kce,$$o),e(p4,k$o),e(p4,JD),e(JD,S$o),e(p4,R$o),e(Y,B$o),e(Y,u4),e(u4,Zce),e(Zce,P$o),e(u4,I$o),e(u4,YD),e(YD,q$o),e(u4,N$o),e(Y,j$o),e(Y,_4),e(_4,efe),e(efe,D$o),e(_4,G$o),e(_4,KD),e(KD,O$o),e(_4,V$o),e(Y,X$o),e(Y,b4),e(b4,ofe),e(ofe,z$o),e(b4,Q$o),e(b4,ZD),e(ZD,W$o),e(b4,H$o),e(Y,U$o),e(Y,v4),e(v4,rfe),e(rfe,J$o),e(v4,Y$o),e(v4,eG),e(eG,K$o),e(v4,Z$o),e(Y,eko),e(Y,F4),e(F4,tfe),e(tfe,oko),e(F4,rko),e(F4,oG),e(oG,tko),e(F4,ako),e(Y,nko),e(Y,T4),e(T4,afe),e(afe,sko),e(T4,lko),e(T4,rG),e(rG,iko),e(T4,dko),e(Y,cko),e(Y,M4),e(M4,nfe),e(nfe,fko),e(M4,mko),e(M4,tG),e(tG,gko),e(M4,hko),e(Y,pko),e(Y,E4),e(E4,sfe),e(sfe,uko),e(E4,_ko),e(E4,aG),e(aG,bko),e(E4,vko),e(Y,Fko),e(Y,C4),e(C4,lfe),e(lfe,Tko),e(C4,Mko),e(C4,nG),e(nG,Eko),e(C4,Cko),e(Y,wko),e(Y,w4),e(w4,ife),e(ife,Ako),e(w4,yko),e(w4,sG),e(sG,Lko),e(w4,xko),e(Y,$ko),e(Y,A4),e(A4,dfe),e(dfe,kko),e(A4,Sko),e(A4,lG),e(lG,Rko),e(A4,Bko),e(Y,Pko),e(Y,y4),e(y4,cfe),e(cfe,Iko),e(y4,qko),e(y4,iG),e(iG,Nko),e(y4,jko),e(Y,Dko),e(Y,L4),e(L4,ffe),e(ffe,Gko),e(L4,Oko),e(L4,dG),e(dG,Vko),e(L4,Xko),e(Y,zko),e(Y,x4),e(x4,mfe),e(mfe,Qko),e(x4,Wko),e(x4,cG),e(cG,Hko),e(x4,Uko),e(Y,Jko),e(Y,$4),e($4,gfe),e(gfe,Yko),e($4,Kko),e($4,fG),e(fG,Zko),e($4,eSo),e(Y,oSo),e(Y,k4),e(k4,hfe),e(hfe,rSo),e(k4,tSo),e(k4,mG),e(mG,aSo),e(k4,nSo),e(Y,sSo),e(Y,S4),e(S4,pfe),e(pfe,lSo),e(S4,iSo),e(S4,gG),e(gG,dSo),e(S4,cSo),e(Y,fSo),e(Y,R4),e(R4,ufe),e(ufe,mSo),e(R4,gSo),e(R4,hG),e(hG,hSo),e(R4,pSo),e(Y,uSo),e(Y,B4),e(B4,_fe),e(_fe,_So),e(B4,bSo),e(B4,pG),e(pG,vSo),e(B4,FSo),e(Y,TSo),e(Y,P4),e(P4,bfe),e(bfe,MSo),e(P4,ESo),e(P4,uG),e(uG,CSo),e(P4,wSo),e(Y,ASo),e(Y,I4),e(I4,vfe),e(vfe,ySo),e(I4,LSo),e(I4,_G),e(_G,xSo),e(I4,$So),e(Y,kSo),e(Y,q4),e(q4,Ffe),e(Ffe,SSo),e(q4,RSo),e(q4,bG),e(bG,BSo),e(q4,PSo),e(eo,ISo),e(eo,N4),e(N4,qSo),e(N4,Tfe),e(Tfe,NSo),e(N4,jSo),e(N4,Mfe),e(Mfe,DSo),e(eo,GSo),M(j4,eo,null),b(f,BPe,_),b(f,Oi,_),e(Oi,D4),e(D4,Efe),M(U6,Efe,null),e(Oi,OSo),e(Oi,Cfe),e(Cfe,VSo),b(f,PPe,_),b(f,Po,_),M(J6,Po,null),e(Po,XSo),e(Po,Vi),e(Vi,zSo),e(Vi,vG),e(vG,QSo),e(Vi,WSo),e(Vi,FG),e(FG,HSo),e(Vi,USo),e(Po,JSo),e(Po,Y6),e(Y6,YSo),e(Y6,wfe),e(wfe,KSo),e(Y6,ZSo),e(Po,eRo),e(Po,it),M(K6,it,null),e(it,oRo),e(it,Afe),e(Afe,rRo),e(it,tRo),e(it,Xi),e(Xi,aRo),e(Xi,yfe),e(yfe,nRo),e(Xi,sRo),e(Xi,TG),e(TG,lRo),e(Xi,iRo),e(it,dRo),M(G4,it,null),e(Po,cRo),e(Po,oo),M(Z6,oo,null),e(oo,fRo),e(oo,Lfe),e(Lfe,mRo),e(oo,gRo),e(oo,Ra),e(Ra,hRo),e(Ra,xfe),e(xfe,pRo),e(Ra,uRo),e(Ra,$fe),e($fe,_Ro),e(Ra,bRo),e(Ra,kfe),e(kfe,vRo),e(Ra,FRo),e(oo,TRo),e(oo,Yr),e(Yr,O4),e(O4,Sfe),e(Sfe,MRo),e(O4,ERo),e(O4,MG),e(MG,CRo),e(O4,wRo),e(Yr,ARo),e(Yr,V4),e(V4,Rfe),e(Rfe,yRo),e(V4,LRo),e(V4,EG),e(EG,xRo),e(V4,$Ro),e(Yr,kRo),e(Yr,X4),e(X4,Bfe),e(Bfe,SRo),e(X4,RRo),e(X4,CG),e(CG,BRo),e(X4,PRo),e(Yr,IRo),e(Yr,z4),e(z4,Pfe),e(Pfe,qRo),e(z4,NRo),e(z4,wG),e(wG,jRo),e(z4,DRo),e(Yr,GRo),e(Yr,Q4),e(Q4,Ife),e(Ife,ORo),e(Q4,VRo),e(Q4,AG),e(AG,XRo),e(Q4,zRo),e(oo,QRo),e(oo,W4),e(W4,WRo),e(W4,qfe),e(qfe,HRo),e(W4,URo),e(W4,Nfe),e(Nfe,JRo),e(oo,YRo),M(H4,oo,null),b(f,IPe,_),b(f,zi,_),e(zi,U4),e(U4,jfe),M(ey,jfe,null),e(zi,KRo),e(zi,Dfe),e(Dfe,ZRo),b(f,qPe,_),b(f,Io,_),M(oy,Io,null),e(Io,eBo),e(Io,Qi),e(Qi,oBo),e(Qi,yG),e(yG,rBo),e(Qi,tBo),e(Qi,LG),e(LG,aBo),e(Qi,nBo),e(Io,sBo),e(Io,ry),e(ry,lBo),e(ry,Gfe),e(Gfe,iBo),e(ry,dBo),e(Io,cBo),e(Io,dt),M(ty,dt,null),e(dt,fBo),e(dt,Ofe),e(Ofe,mBo),e(dt,gBo),e(dt,Wi),e(Wi,hBo),e(Wi,Vfe),e(Vfe,pBo),e(Wi,uBo),e(Wi,xG),e(xG,_Bo),e(Wi,bBo),e(dt,vBo),M(J4,dt,null),e(Io,FBo),e(Io,ro),M(ay,ro,null),e(ro,TBo),e(ro,Xfe),e(Xfe,MBo),e(ro,EBo),e(ro,Ba),e(Ba,CBo),e(Ba,zfe),e(zfe,wBo),e(Ba,ABo),e(Ba,Qfe),e(Qfe,yBo),e(Ba,LBo),e(Ba,Wfe),e(Wfe,xBo),e(Ba,$Bo),e(ro,kBo),e(ro,U),e(U,Y4),e(Y4,Hfe),e(Hfe,SBo),e(Y4,RBo),e(Y4,$G),e($G,BBo),e(Y4,PBo),e(U,IBo),e(U,K4),e(K4,Ufe),e(Ufe,qBo),e(K4,NBo),e(K4,kG),e(kG,jBo),e(K4,DBo),e(U,GBo),e(U,Z4),e(Z4,Jfe),e(Jfe,OBo),e(Z4,VBo),e(Z4,SG),e(SG,XBo),e(Z4,zBo),e(U,QBo),e(U,e2),e(e2,Yfe),e(Yfe,WBo),e(e2,HBo),e(e2,RG),e(RG,UBo),e(e2,JBo),e(U,YBo),e(U,o2),e(o2,Kfe),e(Kfe,KBo),e(o2,ZBo),e(o2,BG),e(BG,ePo),e(o2,oPo),e(U,rPo),e(U,r2),e(r2,Zfe),e(Zfe,tPo),e(r2,aPo),e(r2,PG),e(PG,nPo),e(r2,sPo),e(U,lPo),e(U,t2),e(t2,eme),e(eme,iPo),e(t2,dPo),e(t2,IG),e(IG,cPo),e(t2,fPo),e(U,mPo),e(U,a2),e(a2,ome),e(ome,gPo),e(a2,hPo),e(a2,qG),e(qG,pPo),e(a2,uPo),e(U,_Po),e(U,n2),e(n2,rme),e(rme,bPo),e(n2,vPo),e(n2,NG),e(NG,FPo),e(n2,TPo),e(U,MPo),e(U,s2),e(s2,tme),e(tme,EPo),e(s2,CPo),e(s2,jG),e(jG,wPo),e(s2,APo),e(U,yPo),e(U,l2),e(l2,ame),e(ame,LPo),e(l2,xPo),e(l2,DG),e(DG,$Po),e(l2,kPo),e(U,SPo),e(U,i2),e(i2,nme),e(nme,RPo),e(i2,BPo),e(i2,GG),e(GG,PPo),e(i2,IPo),e(U,qPo),e(U,d2),e(d2,sme),e(sme,NPo),e(d2,jPo),e(d2,OG),e(OG,DPo),e(d2,GPo),e(U,OPo),e(U,c2),e(c2,lme),e(lme,VPo),e(c2,XPo),e(c2,VG),e(VG,zPo),e(c2,QPo),e(U,WPo),e(U,f2),e(f2,ime),e(ime,HPo),e(f2,UPo),e(f2,XG),e(XG,JPo),e(f2,YPo),e(U,KPo),e(U,m2),e(m2,dme),e(dme,ZPo),e(m2,eIo),e(m2,zG),e(zG,oIo),e(m2,rIo),e(U,tIo),e(U,g2),e(g2,cme),e(cme,aIo),e(g2,nIo),e(g2,QG),e(QG,sIo),e(g2,lIo),e(U,iIo),e(U,h2),e(h2,fme),e(fme,dIo),e(h2,cIo),e(h2,WG),e(WG,fIo),e(h2,mIo),e(U,gIo),e(U,p2),e(p2,mme),e(mme,hIo),e(p2,pIo),e(p2,HG),e(HG,uIo),e(p2,_Io),e(U,bIo),e(U,u2),e(u2,gme),e(gme,vIo),e(u2,FIo),e(u2,UG),e(UG,TIo),e(u2,MIo),e(U,EIo),e(U,_2),e(_2,hme),e(hme,CIo),e(_2,wIo),e(_2,JG),e(JG,AIo),e(_2,yIo),e(U,LIo),e(U,b2),e(b2,pme),e(pme,xIo),e(b2,$Io),e(b2,YG),e(YG,kIo),e(b2,SIo),e(U,RIo),e(U,v2),e(v2,ume),e(ume,BIo),e(v2,PIo),e(v2,KG),e(KG,IIo),e(v2,qIo),e(U,NIo),e(U,F2),e(F2,_me),e(_me,jIo),e(F2,DIo),e(F2,ZG),e(ZG,GIo),e(F2,OIo),e(U,VIo),e(U,T2),e(T2,bme),e(bme,XIo),e(T2,zIo),e(T2,eO),e(eO,QIo),e(T2,WIo),e(U,HIo),e(U,M2),e(M2,vme),e(vme,UIo),e(M2,JIo),e(M2,oO),e(oO,YIo),e(M2,KIo),e(U,ZIo),e(U,E2),e(E2,Fme),e(Fme,eqo),e(E2,oqo),e(E2,rO),e(rO,rqo),e(E2,tqo),e(U,aqo),e(U,C2),e(C2,Tme),e(Tme,nqo),e(C2,sqo),e(C2,tO),e(tO,lqo),e(C2,iqo),e(U,dqo),e(U,w2),e(w2,Mme),e(Mme,cqo),e(w2,fqo),e(w2,aO),e(aO,mqo),e(w2,gqo),e(U,hqo),e(U,A2),e(A2,Eme),e(Eme,pqo),e(A2,uqo),e(A2,nO),e(nO,_qo),e(A2,bqo),e(U,vqo),e(U,y2),e(y2,Cme),e(Cme,Fqo),e(y2,Tqo),e(y2,sO),e(sO,Mqo),e(y2,Eqo),e(U,Cqo),e(U,L2),e(L2,wme),e(wme,wqo),e(L2,Aqo),e(L2,lO),e(lO,yqo),e(L2,Lqo),e(U,xqo),e(U,x2),e(x2,Ame),e(Ame,$qo),e(x2,kqo),e(x2,iO),e(iO,Sqo),e(x2,Rqo),e(ro,Bqo),e(ro,$2),e($2,Pqo),e($2,yme),e(yme,Iqo),e($2,qqo),e($2,Lme),e(Lme,Nqo),e(ro,jqo),M(k2,ro,null),b(f,NPe,_),b(f,Hi,_),e(Hi,S2),e(S2,xme),M(ny,xme,null),e(Hi,Dqo),e(Hi,$me),e($me,Gqo),b(f,jPe,_),b(f,qo,_),M(sy,qo,null),e(qo,Oqo),e(qo,Ui),e(Ui,Vqo),e(Ui,dO),e(dO,Xqo),e(Ui,zqo),e(Ui,cO),e(cO,Qqo),e(Ui,Wqo),e(qo,Hqo),e(qo,ly),e(ly,Uqo),e(ly,kme),e(kme,Jqo),e(ly,Yqo),e(qo,Kqo),e(qo,ct),M(iy,ct,null),e(ct,Zqo),e(ct,Sme),e(Sme,eNo),e(ct,oNo),e(ct,Ji),e(Ji,rNo),e(Ji,Rme),e(Rme,tNo),e(Ji,aNo),e(Ji,fO),e(fO,nNo),e(Ji,sNo),e(ct,lNo),M(R2,ct,null),e(qo,iNo),e(qo,to),M(dy,to,null),e(to,dNo),e(to,Bme),e(Bme,cNo),e(to,fNo),e(to,Pa),e(Pa,mNo),e(Pa,Pme),e(Pme,gNo),e(Pa,hNo),e(Pa,Ime),e(Ime,pNo),e(Pa,uNo),e(Pa,qme),e(qme,_No),e(Pa,bNo),e(to,vNo),e(to,O),e(O,B2),e(B2,Nme),e(Nme,FNo),e(B2,TNo),e(B2,mO),e(mO,MNo),e(B2,ENo),e(O,CNo),e(O,P2),e(P2,jme),e(jme,wNo),e(P2,ANo),e(P2,gO),e(gO,yNo),e(P2,LNo),e(O,xNo),e(O,I2),e(I2,Dme),e(Dme,$No),e(I2,kNo),e(I2,hO),e(hO,SNo),e(I2,RNo),e(O,BNo),e(O,q2),e(q2,Gme),e(Gme,PNo),e(q2,INo),e(q2,pO),e(pO,qNo),e(q2,NNo),e(O,jNo),e(O,N2),e(N2,Ome),e(Ome,DNo),e(N2,GNo),e(N2,uO),e(uO,ONo),e(N2,VNo),e(O,XNo),e(O,j2),e(j2,Vme),e(Vme,zNo),e(j2,QNo),e(j2,_O),e(_O,WNo),e(j2,HNo),e(O,UNo),e(O,D2),e(D2,Xme),e(Xme,JNo),e(D2,YNo),e(D2,bO),e(bO,KNo),e(D2,ZNo),e(O,ejo),e(O,G2),e(G2,zme),e(zme,ojo),e(G2,rjo),e(G2,vO),e(vO,tjo),e(G2,ajo),e(O,njo),e(O,O2),e(O2,Qme),e(Qme,sjo),e(O2,ljo),e(O2,FO),e(FO,ijo),e(O2,djo),e(O,cjo),e(O,V2),e(V2,Wme),e(Wme,fjo),e(V2,mjo),e(V2,TO),e(TO,gjo),e(V2,hjo),e(O,pjo),e(O,X2),e(X2,Hme),e(Hme,ujo),e(X2,_jo),e(X2,MO),e(MO,bjo),e(X2,vjo),e(O,Fjo),e(O,z2),e(z2,Ume),e(Ume,Tjo),e(z2,Mjo),e(z2,EO),e(EO,Ejo),e(z2,Cjo),e(O,wjo),e(O,Q2),e(Q2,Jme),e(Jme,Ajo),e(Q2,yjo),e(Q2,CO),e(CO,Ljo),e(Q2,xjo),e(O,$jo),e(O,W2),e(W2,Yme),e(Yme,kjo),e(W2,Sjo),e(W2,wO),e(wO,Rjo),e(W2,Bjo),e(O,Pjo),e(O,H2),e(H2,Kme),e(Kme,Ijo),e(H2,qjo),e(H2,AO),e(AO,Njo),e(H2,jjo),e(O,Djo),e(O,U2),e(U2,Zme),e(Zme,Gjo),e(U2,Ojo),e(U2,yO),e(yO,Vjo),e(U2,Xjo),e(O,zjo),e(O,J2),e(J2,ege),e(ege,Qjo),e(J2,Wjo),e(J2,LO),e(LO,Hjo),e(J2,Ujo),e(O,Jjo),e(O,Y2),e(Y2,oge),e(oge,Yjo),e(Y2,Kjo),e(Y2,xO),e(xO,Zjo),e(Y2,eDo),e(O,oDo),e(O,K2),e(K2,rge),e(rge,rDo),e(K2,tDo),e(K2,$O),e($O,aDo),e(K2,nDo),e(O,sDo),e(O,Z2),e(Z2,tge),e(tge,lDo),e(Z2,iDo),e(Z2,kO),e(kO,dDo),e(Z2,cDo),e(O,fDo),e(O,e5),e(e5,age),e(age,mDo),e(e5,gDo),e(e5,SO),e(SO,hDo),e(e5,pDo),e(O,uDo),e(O,o5),e(o5,nge),e(nge,_Do),e(o5,bDo),e(o5,RO),e(RO,vDo),e(o5,FDo),e(O,TDo),e(O,r5),e(r5,sge),e(sge,MDo),e(r5,EDo),e(r5,BO),e(BO,CDo),e(r5,wDo),e(O,ADo),e(O,t5),e(t5,lge),e(lge,yDo),e(t5,LDo),e(t5,PO),e(PO,xDo),e(t5,$Do),e(O,kDo),e(O,a5),e(a5,ige),e(ige,SDo),e(a5,RDo),e(a5,IO),e(IO,BDo),e(a5,PDo),e(O,IDo),e(O,n5),e(n5,dge),e(dge,qDo),e(n5,NDo),e(n5,qO),e(qO,jDo),e(n5,DDo),e(O,GDo),e(O,s5),e(s5,cge),e(cge,ODo),e(s5,VDo),e(s5,NO),e(NO,XDo),e(s5,zDo),e(O,QDo),e(O,l5),e(l5,fge),e(fge,WDo),e(l5,HDo),e(l5,jO),e(jO,UDo),e(l5,JDo),e(O,YDo),e(O,i5),e(i5,mge),e(mge,KDo),e(i5,ZDo),e(i5,DO),e(DO,eGo),e(i5,oGo),e(O,rGo),e(O,d5),e(d5,gge),e(gge,tGo),e(d5,aGo),e(d5,GO),e(GO,nGo),e(d5,sGo),e(O,lGo),e(O,c5),e(c5,hge),e(hge,iGo),e(c5,dGo),e(c5,OO),e(OO,cGo),e(c5,fGo),e(O,mGo),e(O,f5),e(f5,pge),e(pge,gGo),e(f5,hGo),e(f5,VO),e(VO,pGo),e(f5,uGo),e(O,_Go),e(O,m5),e(m5,uge),e(uge,bGo),e(m5,vGo),e(m5,XO),e(XO,FGo),e(m5,TGo),e(O,MGo),e(O,g5),e(g5,_ge),e(_ge,EGo),e(g5,CGo),e(g5,zO),e(zO,wGo),e(g5,AGo),e(O,yGo),e(O,h5),e(h5,bge),e(bge,LGo),e(h5,xGo),e(h5,QO),e(QO,$Go),e(h5,kGo),e(O,SGo),e(O,p5),e(p5,vge),e(vge,RGo),e(p5,BGo),e(p5,WO),e(WO,PGo),e(p5,IGo),e(O,qGo),e(O,u5),e(u5,Fge),e(Fge,NGo),e(u5,jGo),e(u5,HO),e(HO,DGo),e(u5,GGo),e(O,OGo),e(O,_5),e(_5,Tge),e(Tge,VGo),e(_5,XGo),e(_5,UO),e(UO,zGo),e(_5,QGo),e(O,WGo),e(O,b5),e(b5,Mge),e(Mge,HGo),e(b5,UGo),e(b5,JO),e(JO,JGo),e(b5,YGo),e(to,KGo),e(to,v5),e(v5,ZGo),e(v5,Ege),e(Ege,eOo),e(v5,oOo),e(v5,Cge),e(Cge,rOo),e(to,tOo),M(F5,to,null),b(f,DPe,_),b(f,Yi,_),e(Yi,T5),e(T5,wge),M(cy,wge,null),e(Yi,aOo),e(Yi,Age),e(Age,nOo),b(f,GPe,_),b(f,No,_),M(fy,No,null),e(No,sOo),e(No,Ki),e(Ki,lOo),e(Ki,YO),e(YO,iOo),e(Ki,dOo),e(Ki,KO),e(KO,cOo),e(Ki,fOo),e(No,mOo),e(No,my),e(my,gOo),e(my,yge),e(yge,hOo),e(my,pOo),e(No,uOo),e(No,ft),M(gy,ft,null),e(ft,_Oo),e(ft,Lge),e(Lge,bOo),e(ft,vOo),e(ft,Zi),e(Zi,FOo),e(Zi,xge),e(xge,TOo),e(Zi,MOo),e(Zi,ZO),e(ZO,EOo),e(Zi,COo),e(ft,wOo),M(M5,ft,null),e(No,AOo),e(No,ao),M(hy,ao,null),e(ao,yOo),e(ao,$ge),e($ge,LOo),e(ao,xOo),e(ao,Ia),e(Ia,$Oo),e(Ia,kge),e(kge,kOo),e(Ia,SOo),e(Ia,Sge),e(Sge,ROo),e(Ia,BOo),e(Ia,Rge),e(Rge,POo),e(Ia,IOo),e(ao,qOo),e(ao,Bge),e(Bge,E5),e(E5,Pge),e(Pge,NOo),e(E5,jOo),e(E5,eV),e(eV,DOo),e(E5,GOo),e(ao,OOo),e(ao,C5),e(C5,VOo),e(C5,Ige),e(Ige,XOo),e(C5,zOo),e(C5,qge),e(qge,QOo),e(ao,WOo),M(w5,ao,null),b(f,OPe,_),b(f,ed,_),e(ed,A5),e(A5,Nge),M(py,Nge,null),e(ed,HOo),e(ed,jge),e(jge,UOo),b(f,VPe,_),b(f,jo,_),M(uy,jo,null),e(jo,JOo),e(jo,od),e(od,YOo),e(od,oV),e(oV,KOo),e(od,ZOo),e(od,rV),e(rV,eVo),e(od,oVo),e(jo,rVo),e(jo,_y),e(_y,tVo),e(_y,Dge),e(Dge,aVo),e(_y,nVo),e(jo,sVo),e(jo,mt),M(by,mt,null),e(mt,lVo),e(mt,Gge),e(Gge,iVo),e(mt,dVo),e(mt,rd),e(rd,cVo),e(rd,Oge),e(Oge,fVo),e(rd,mVo),e(rd,tV),e(tV,gVo),e(rd,hVo),e(mt,pVo),M(y5,mt,null),e(jo,uVo),e(jo,no),M(vy,no,null),e(no,_Vo),e(no,Vge),e(Vge,bVo),e(no,vVo),e(no,qa),e(qa,FVo),e(qa,Xge),e(Xge,TVo),e(qa,MVo),e(qa,zge),e(zge,EVo),e(qa,CVo),e(qa,Qge),e(Qge,wVo),e(qa,AVo),e(no,yVo),e(no,ve),e(ve,L5),e(L5,Wge),e(Wge,LVo),e(L5,xVo),e(L5,aV),e(aV,$Vo),e(L5,kVo),e(ve,SVo),e(ve,x5),e(x5,Hge),e(Hge,RVo),e(x5,BVo),e(x5,nV),e(nV,PVo),e(x5,IVo),e(ve,qVo),e(ve,$5),e($5,Uge),e(Uge,NVo),e($5,jVo),e($5,sV),e(sV,DVo),e($5,GVo),e(ve,OVo),e(ve,Rs),e(Rs,Jge),e(Jge,VVo),e(Rs,XVo),e(Rs,lV),e(lV,zVo),e(Rs,QVo),e(Rs,iV),e(iV,WVo),e(Rs,HVo),e(ve,UVo),e(ve,k5),e(k5,Yge),e(Yge,JVo),e(k5,YVo),e(k5,dV),e(dV,KVo),e(k5,ZVo),e(ve,eXo),e(ve,gt),e(gt,Kge),e(Kge,oXo),e(gt,rXo),e(gt,cV),e(cV,tXo),e(gt,aXo),e(gt,fV),e(fV,nXo),e(gt,sXo),e(gt,mV),e(mV,lXo),e(gt,iXo),e(ve,dXo),e(ve,S5),e(S5,Zge),e(Zge,cXo),e(S5,fXo),e(S5,gV),e(gV,mXo),e(S5,gXo),e(ve,hXo),e(ve,R5),e(R5,ehe),e(ehe,pXo),e(R5,uXo),e(R5,hV),e(hV,_Xo),e(R5,bXo),e(ve,vXo),e(ve,B5),e(B5,ohe),e(ohe,FXo),e(B5,TXo),e(B5,pV),e(pV,MXo),e(B5,EXo),e(ve,CXo),e(ve,P5),e(P5,rhe),e(rhe,wXo),e(P5,AXo),e(P5,uV),e(uV,yXo),e(P5,LXo),e(ve,xXo),e(ve,I5),e(I5,the),e(the,$Xo),e(I5,kXo),e(I5,_V),e(_V,SXo),e(I5,RXo),e(ve,BXo),e(ve,q5),e(q5,ahe),e(ahe,PXo),e(q5,IXo),e(q5,bV),e(bV,qXo),e(q5,NXo),e(ve,jXo),e(ve,N5),e(N5,nhe),e(nhe,DXo),e(N5,GXo),e(N5,vV),e(vV,OXo),e(N5,VXo),e(no,XXo),e(no,j5),e(j5,zXo),e(j5,she),e(she,QXo),e(j5,WXo),e(j5,lhe),e(lhe,HXo),e(no,UXo),M(D5,no,null),b(f,XPe,_),b(f,td,_),e(td,G5),e(G5,ihe),M(Fy,ihe,null),e(td,JXo),e(td,dhe),e(dhe,YXo),b(f,zPe,_),b(f,Do,_),M(Ty,Do,null),e(Do,KXo),e(Do,ad),e(ad,ZXo),e(ad,FV),e(FV,ezo),e(ad,ozo),e(ad,TV),e(TV,rzo),e(ad,tzo),e(Do,azo),e(Do,My),e(My,nzo),e(My,che),e(che,szo),e(My,lzo),e(Do,izo),e(Do,ht),M(Ey,ht,null),e(ht,dzo),e(ht,fhe),e(fhe,czo),e(ht,fzo),e(ht,nd),e(nd,mzo),e(nd,mhe),e(mhe,gzo),e(nd,hzo),e(nd,MV),e(MV,pzo),e(nd,uzo),e(ht,_zo),M(O5,ht,null),e(Do,bzo),e(Do,so),M(Cy,so,null),e(so,vzo),e(so,ghe),e(ghe,Fzo),e(so,Tzo),e(so,Na),e(Na,Mzo),e(Na,hhe),e(hhe,Ezo),e(Na,Czo),e(Na,phe),e(phe,wzo),e(Na,Azo),e(Na,uhe),e(uhe,yzo),e(Na,Lzo),e(so,xzo),e(so,_he),e(_he,V5),e(V5,bhe),e(bhe,$zo),e(V5,kzo),e(V5,EV),e(EV,Szo),e(V5,Rzo),e(so,Bzo),e(so,X5),e(X5,Pzo),e(X5,vhe),e(vhe,Izo),e(X5,qzo),e(X5,Fhe),e(Fhe,Nzo),e(so,jzo),M(z5,so,null),b(f,QPe,_),b(f,sd,_),e(sd,Q5),e(Q5,The),M(wy,The,null),e(sd,Dzo),e(sd,Mhe),e(Mhe,Gzo),b(f,WPe,_),b(f,Go,_),M(Ay,Go,null),e(Go,Ozo),e(Go,ld),e(ld,Vzo),e(ld,CV),e(CV,Xzo),e(ld,zzo),e(ld,wV),e(wV,Qzo),e(ld,Wzo),e(Go,Hzo),e(Go,yy),e(yy,Uzo),e(yy,Ehe),e(Ehe,Jzo),e(yy,Yzo),e(Go,Kzo),e(Go,pt),M(Ly,pt,null),e(pt,Zzo),e(pt,Che),e(Che,eQo),e(pt,oQo),e(pt,id),e(id,rQo),e(id,whe),e(whe,tQo),e(id,aQo),e(id,AV),e(AV,nQo),e(id,sQo),e(pt,lQo),M(W5,pt,null),e(Go,iQo),e(Go,lo),M(xy,lo,null),e(lo,dQo),e(lo,Ahe),e(Ahe,cQo),e(lo,fQo),e(lo,ja),e(ja,mQo),e(ja,yhe),e(yhe,gQo),e(ja,hQo),e(ja,Lhe),e(Lhe,pQo),e(ja,uQo),e(ja,xhe),e(xhe,_Qo),e(ja,bQo),e(lo,vQo),e(lo,Ne),e(Ne,H5),e(H5,$he),e($he,FQo),e(H5,TQo),e(H5,yV),e(yV,MQo),e(H5,EQo),e(Ne,CQo),e(Ne,U5),e(U5,khe),e(khe,wQo),e(U5,AQo),e(U5,LV),e(LV,yQo),e(U5,LQo),e(Ne,xQo),e(Ne,J5),e(J5,She),e(She,$Qo),e(J5,kQo),e(J5,xV),e(xV,SQo),e(J5,RQo),e(Ne,BQo),e(Ne,Y5),e(Y5,Rhe),e(Rhe,PQo),e(Y5,IQo),e(Y5,$V),e($V,qQo),e(Y5,NQo),e(Ne,jQo),e(Ne,K5),e(K5,Bhe),e(Bhe,DQo),e(K5,GQo),e(K5,kV),e(kV,OQo),e(K5,VQo),e(Ne,XQo),e(Ne,Z5),e(Z5,Phe),e(Phe,zQo),e(Z5,QQo),e(Z5,SV),e(SV,WQo),e(Z5,HQo),e(Ne,UQo),e(Ne,ev),e(ev,Ihe),e(Ihe,JQo),e(ev,YQo),e(ev,RV),e(RV,KQo),e(ev,ZQo),e(Ne,eWo),e(Ne,ov),e(ov,qhe),e(qhe,oWo),e(ov,rWo),e(ov,BV),e(BV,tWo),e(ov,aWo),e(lo,nWo),e(lo,rv),e(rv,sWo),e(rv,Nhe),e(Nhe,lWo),e(rv,iWo),e(rv,jhe),e(jhe,dWo),e(lo,cWo),M(tv,lo,null),b(f,HPe,_),b(f,dd,_),e(dd,av),e(av,Dhe),M($y,Dhe,null),e(dd,fWo),e(dd,Ghe),e(Ghe,mWo),b(f,UPe,_),b(f,Oo,_),M(ky,Oo,null),e(Oo,gWo),e(Oo,cd),e(cd,hWo),e(cd,PV),e(PV,pWo),e(cd,uWo),e(cd,IV),e(IV,_Wo),e(cd,bWo),e(Oo,vWo),e(Oo,Sy),e(Sy,FWo),e(Sy,Ohe),e(Ohe,TWo),e(Sy,MWo),e(Oo,EWo),e(Oo,ut),M(Ry,ut,null),e(ut,CWo),e(ut,Vhe),e(Vhe,wWo),e(ut,AWo),e(ut,fd),e(fd,yWo),e(fd,Xhe),e(Xhe,LWo),e(fd,xWo),e(fd,qV),e(qV,$Wo),e(fd,kWo),e(ut,SWo),M(nv,ut,null),e(Oo,RWo),e(Oo,io),M(By,io,null),e(io,BWo),e(io,zhe),e(zhe,PWo),e(io,IWo),e(io,Da),e(Da,qWo),e(Da,Qhe),e(Qhe,NWo),e(Da,jWo),e(Da,Whe),e(Whe,DWo),e(Da,GWo),e(Da,Hhe),e(Hhe,OWo),e(Da,VWo),e(io,XWo),e(io,Ga),e(Ga,sv),e(sv,Uhe),e(Uhe,zWo),e(sv,QWo),e(sv,NV),e(NV,WWo),e(sv,HWo),e(Ga,UWo),e(Ga,lv),e(lv,Jhe),e(Jhe,JWo),e(lv,YWo),e(lv,jV),e(jV,KWo),e(lv,ZWo),e(Ga,eHo),e(Ga,iv),e(iv,Yhe),e(Yhe,oHo),e(iv,rHo),e(iv,DV),e(DV,tHo),e(iv,aHo),e(Ga,nHo),e(Ga,dv),e(dv,Khe),e(Khe,sHo),e(dv,lHo),e(dv,GV),e(GV,iHo),e(dv,dHo),e(io,cHo),e(io,cv),e(cv,fHo),e(cv,Zhe),e(Zhe,mHo),e(cv,gHo),e(cv,epe),e(epe,hHo),e(io,pHo),M(fv,io,null),b(f,JPe,_),b(f,md,_),e(md,mv),e(mv,ope),M(Py,ope,null),e(md,uHo),e(md,rpe),e(rpe,_Ho),b(f,YPe,_),b(f,Vo,_),M(Iy,Vo,null),e(Vo,bHo),e(Vo,gd),e(gd,vHo),e(gd,OV),e(OV,FHo),e(gd,THo),e(gd,VV),e(VV,MHo),e(gd,EHo),e(Vo,CHo),e(Vo,qy),e(qy,wHo),e(qy,tpe),e(tpe,AHo),e(qy,yHo),e(Vo,LHo),e(Vo,_t),M(Ny,_t,null),e(_t,xHo),e(_t,ape),e(ape,$Ho),e(_t,kHo),e(_t,hd),e(hd,SHo),e(hd,npe),e(npe,RHo),e(hd,BHo),e(hd,XV),e(XV,PHo),e(hd,IHo),e(_t,qHo),M(gv,_t,null),e(Vo,NHo),e(Vo,co),M(jy,co,null),e(co,jHo),e(co,spe),e(spe,DHo),e(co,GHo),e(co,Oa),e(Oa,OHo),e(Oa,lpe),e(lpe,VHo),e(Oa,XHo),e(Oa,ipe),e(ipe,zHo),e(Oa,QHo),e(Oa,dpe),e(dpe,WHo),e(Oa,HHo),e(co,UHo),e(co,je),e(je,hv),e(hv,cpe),e(cpe,JHo),e(hv,YHo),e(hv,zV),e(zV,KHo),e(hv,ZHo),e(je,eUo),e(je,pv),e(pv,fpe),e(fpe,oUo),e(pv,rUo),e(pv,QV),e(QV,tUo),e(pv,aUo),e(je,nUo),e(je,uv),e(uv,mpe),e(mpe,sUo),e(uv,lUo),e(uv,WV),e(WV,iUo),e(uv,dUo),e(je,cUo),e(je,_v),e(_v,gpe),e(gpe,fUo),e(_v,mUo),e(_v,HV),e(HV,gUo),e(_v,hUo),e(je,pUo),e(je,bv),e(bv,hpe),e(hpe,uUo),e(bv,_Uo),e(bv,UV),e(UV,bUo),e(bv,vUo),e(je,FUo),e(je,vv),e(vv,ppe),e(ppe,TUo),e(vv,MUo),e(vv,JV),e(JV,EUo),e(vv,CUo),e(je,wUo),e(je,Fv),e(Fv,upe),e(upe,AUo),e(Fv,yUo),e(Fv,YV),e(YV,LUo),e(Fv,xUo),e(je,$Uo),e(je,Tv),e(Tv,_pe),e(_pe,kUo),e(Tv,SUo),e(Tv,KV),e(KV,RUo),e(Tv,BUo),e(co,PUo),e(co,Mv),e(Mv,IUo),e(Mv,bpe),e(bpe,qUo),e(Mv,NUo),e(Mv,vpe),e(vpe,jUo),e(co,DUo),M(Ev,co,null),b(f,KPe,_),b(f,pd,_),e(pd,Cv),e(Cv,Fpe),M(Dy,Fpe,null),e(pd,GUo),e(pd,Tpe),e(Tpe,OUo),b(f,ZPe,_),b(f,Xo,_),M(Gy,Xo,null),e(Xo,VUo),e(Xo,ud),e(ud,XUo),e(ud,ZV),e(ZV,zUo),e(ud,QUo),e(ud,eX),e(eX,WUo),e(ud,HUo),e(Xo,UUo),e(Xo,Oy),e(Oy,JUo),e(Oy,Mpe),e(Mpe,YUo),e(Oy,KUo),e(Xo,ZUo),e(Xo,bt),M(Vy,bt,null),e(bt,eJo),e(bt,Epe),e(Epe,oJo),e(bt,rJo),e(bt,_d),e(_d,tJo),e(_d,Cpe),e(Cpe,aJo),e(_d,nJo),e(_d,oX),e(oX,sJo),e(_d,lJo),e(bt,iJo),M(wv,bt,null),e(Xo,dJo),e(Xo,fo),M(Xy,fo,null),e(fo,cJo),e(fo,wpe),e(wpe,fJo),e(fo,mJo),e(fo,Va),e(Va,gJo),e(Va,Ape),e(Ape,hJo),e(Va,pJo),e(Va,ype),e(ype,uJo),e(Va,_Jo),e(Va,Lpe),e(Lpe,bJo),e(Va,vJo),e(fo,FJo),e(fo,zy),e(zy,Av),e(Av,xpe),e(xpe,TJo),e(Av,MJo),e(Av,rX),e(rX,EJo),e(Av,CJo),e(zy,wJo),e(zy,yv),e(yv,$pe),e($pe,AJo),e(yv,yJo),e(yv,tX),e(tX,LJo),e(yv,xJo),e(fo,$Jo),e(fo,Lv),e(Lv,kJo),e(Lv,kpe),e(kpe,SJo),e(Lv,RJo),e(Lv,Spe),e(Spe,BJo),e(fo,PJo),M(xv,fo,null),b(f,eIe,_),b(f,bd,_),e(bd,$v),e($v,Rpe),M(Qy,Rpe,null),e(bd,IJo),e(bd,Bpe),e(Bpe,qJo),b(f,oIe,_),b(f,zo,_),M(Wy,zo,null),e(zo,NJo),e(zo,vd),e(vd,jJo),e(vd,aX),e(aX,DJo),e(vd,GJo),e(vd,nX),e(nX,OJo),e(vd,VJo),e(zo,XJo),e(zo,Hy),e(Hy,zJo),e(Hy,Ppe),e(Ppe,QJo),e(Hy,WJo),e(zo,HJo),e(zo,vt),M(Uy,vt,null),e(vt,UJo),e(vt,Ipe),e(Ipe,JJo),e(vt,YJo),e(vt,Fd),e(Fd,KJo),e(Fd,qpe),e(qpe,ZJo),e(Fd,eYo),e(Fd,sX),e(sX,oYo),e(Fd,rYo),e(vt,tYo),M(kv,vt,null),e(zo,aYo),e(zo,mo),M(Jy,mo,null),e(mo,nYo),e(mo,Npe),e(Npe,sYo),e(mo,lYo),e(mo,Xa),e(Xa,iYo),e(Xa,jpe),e(jpe,dYo),e(Xa,cYo),e(Xa,Dpe),e(Dpe,fYo),e(Xa,mYo),e(Xa,Gpe),e(Gpe,gYo),e(Xa,hYo),e(mo,pYo),e(mo,za),e(za,Sv),e(Sv,Ope),e(Ope,uYo),e(Sv,_Yo),e(Sv,lX),e(lX,bYo),e(Sv,vYo),e(za,FYo),e(za,Rv),e(Rv,Vpe),e(Vpe,TYo),e(Rv,MYo),e(Rv,iX),e(iX,EYo),e(Rv,CYo),e(za,wYo),e(za,Bv),e(Bv,Xpe),e(Xpe,AYo),e(Bv,yYo),e(Bv,dX),e(dX,LYo),e(Bv,xYo),e(za,$Yo),e(za,Pv),e(Pv,zpe),e(zpe,kYo),e(Pv,SYo),e(Pv,cX),e(cX,RYo),e(Pv,BYo),e(mo,PYo),e(mo,Iv),e(Iv,IYo),e(Iv,Qpe),e(Qpe,qYo),e(Iv,NYo),e(Iv,Wpe),e(Wpe,jYo),e(mo,DYo),M(qv,mo,null),b(f,rIe,_),b(f,Td,_),e(Td,Nv),e(Nv,Hpe),M(Yy,Hpe,null),e(Td,GYo),e(Td,Upe),e(Upe,OYo),b(f,tIe,_),b(f,Qo,_),M(Ky,Qo,null),e(Qo,VYo),e(Qo,Md),e(Md,XYo),e(Md,fX),e(fX,zYo),e(Md,QYo),e(Md,mX),e(mX,WYo),e(Md,HYo),e(Qo,UYo),e(Qo,Zy),e(Zy,JYo),e(Zy,Jpe),e(Jpe,YYo),e(Zy,KYo),e(Qo,ZYo),e(Qo,Ft),M(eL,Ft,null),e(Ft,eKo),e(Ft,Ype),e(Ype,oKo),e(Ft,rKo),e(Ft,Ed),e(Ed,tKo),e(Ed,Kpe),e(Kpe,aKo),e(Ed,nKo),e(Ed,gX),e(gX,sKo),e(Ed,lKo),e(Ft,iKo),M(jv,Ft,null),e(Qo,dKo),e(Qo,go),M(oL,go,null),e(go,cKo),e(go,Zpe),e(Zpe,fKo),e(go,mKo),e(go,Qa),e(Qa,gKo),e(Qa,eue),e(eue,hKo),e(Qa,pKo),e(Qa,oue),e(oue,uKo),e(Qa,_Ko),e(Qa,rue),e(rue,bKo),e(Qa,vKo),e(go,FKo),e(go,Cd),e(Cd,Dv),e(Dv,tue),e(tue,TKo),e(Dv,MKo),e(Dv,hX),e(hX,EKo),e(Dv,CKo),e(Cd,wKo),e(Cd,Gv),e(Gv,aue),e(aue,AKo),e(Gv,yKo),e(Gv,pX),e(pX,LKo),e(Gv,xKo),e(Cd,$Ko),e(Cd,Ov),e(Ov,nue),e(nue,kKo),e(Ov,SKo),e(Ov,uX),e(uX,RKo),e(Ov,BKo),e(go,PKo),e(go,Vv),e(Vv,IKo),e(Vv,sue),e(sue,qKo),e(Vv,NKo),e(Vv,lue),e(lue,jKo),e(go,DKo),M(Xv,go,null),b(f,aIe,_),b(f,wd,_),e(wd,zv),e(zv,iue),M(rL,iue,null),e(wd,GKo),e(wd,due),e(due,OKo),b(f,nIe,_),b(f,Wo,_),M(tL,Wo,null),e(Wo,VKo),e(Wo,Ad),e(Ad,XKo),e(Ad,_X),e(_X,zKo),e(Ad,QKo),e(Ad,bX),e(bX,WKo),e(Ad,HKo),e(Wo,UKo),e(Wo,aL),e(aL,JKo),e(aL,cue),e(cue,YKo),e(aL,KKo),e(Wo,ZKo),e(Wo,Tt),M(nL,Tt,null),e(Tt,eZo),e(Tt,fue),e(fue,oZo),e(Tt,rZo),e(Tt,yd),e(yd,tZo),e(yd,mue),e(mue,aZo),e(yd,nZo),e(yd,vX),e(vX,sZo),e(yd,lZo),e(Tt,iZo),M(Qv,Tt,null),e(Wo,dZo),e(Wo,ho),M(sL,ho,null),e(ho,cZo),e(ho,gue),e(gue,fZo),e(ho,mZo),e(ho,Wa),e(Wa,gZo),e(Wa,hue),e(hue,hZo),e(Wa,pZo),e(Wa,pue),e(pue,uZo),e(Wa,_Zo),e(Wa,uue),e(uue,bZo),e(Wa,vZo),e(ho,FZo),e(ho,lL),e(lL,Wv),e(Wv,_ue),e(_ue,TZo),e(Wv,MZo),e(Wv,FX),e(FX,EZo),e(Wv,CZo),e(lL,wZo),e(lL,Hv),e(Hv,bue),e(bue,AZo),e(Hv,yZo),e(Hv,TX),e(TX,LZo),e(Hv,xZo),e(ho,$Zo),e(ho,Uv),e(Uv,kZo),e(Uv,vue),e(vue,SZo),e(Uv,RZo),e(Uv,Fue),e(Fue,BZo),e(ho,PZo),M(Jv,ho,null),b(f,sIe,_),b(f,Ld,_),e(Ld,Yv),e(Yv,Tue),M(iL,Tue,null),e(Ld,IZo),e(Ld,Mue),e(Mue,qZo),b(f,lIe,_),b(f,Ho,_),M(dL,Ho,null),e(Ho,NZo),e(Ho,xd),e(xd,jZo),e(xd,MX),e(MX,DZo),e(xd,GZo),e(xd,EX),e(EX,OZo),e(xd,VZo),e(Ho,XZo),e(Ho,cL),e(cL,zZo),e(cL,Eue),e(Eue,QZo),e(cL,WZo),e(Ho,HZo),e(Ho,Mt),M(fL,Mt,null),e(Mt,UZo),e(Mt,Cue),e(Cue,JZo),e(Mt,YZo),e(Mt,$d),e($d,KZo),e($d,wue),e(wue,ZZo),e($d,eer),e($d,CX),e(CX,oer),e($d,rer),e(Mt,ter),M(Kv,Mt,null),e(Ho,aer),e(Ho,po),M(mL,po,null),e(po,ner),e(po,Aue),e(Aue,ser),e(po,ler),e(po,Ha),e(Ha,ier),e(Ha,yue),e(yue,der),e(Ha,cer),e(Ha,Lue),e(Lue,fer),e(Ha,mer),e(Ha,xue),e(xue,ger),e(Ha,her),e(po,per),e(po,$ue),e($ue,Zv),e(Zv,kue),e(kue,uer),e(Zv,_er),e(Zv,wX),e(wX,ber),e(Zv,ver),e(po,Fer),e(po,eF),e(eF,Ter),e(eF,Sue),e(Sue,Mer),e(eF,Eer),e(eF,Rue),e(Rue,Cer),e(po,wer),M(oF,po,null),b(f,iIe,_),b(f,kd,_),e(kd,rF),e(rF,Bue),M(gL,Bue,null),e(kd,Aer),e(kd,Pue),e(Pue,yer),b(f,dIe,_),b(f,Uo,_),M(hL,Uo,null),e(Uo,Ler),e(Uo,Sd),e(Sd,xer),e(Sd,AX),e(AX,$er),e(Sd,ker),e(Sd,yX),e(yX,Ser),e(Sd,Rer),e(Uo,Ber),e(Uo,pL),e(pL,Per),e(pL,Iue),e(Iue,Ier),e(pL,qer),e(Uo,Ner),e(Uo,Et),M(uL,Et,null),e(Et,jer),e(Et,que),e(que,Der),e(Et,Ger),e(Et,Rd),e(Rd,Oer),e(Rd,Nue),e(Nue,Ver),e(Rd,Xer),e(Rd,LX),e(LX,zer),e(Rd,Qer),e(Et,Wer),M(tF,Et,null),e(Uo,Her),e(Uo,uo),M(_L,uo,null),e(uo,Uer),e(uo,jue),e(jue,Jer),e(uo,Yer),e(uo,Ua),e(Ua,Ker),e(Ua,Due),e(Due,Zer),e(Ua,eor),e(Ua,Gue),e(Gue,oor),e(Ua,ror),e(Ua,Oue),e(Oue,tor),e(Ua,aor),e(uo,nor),e(uo,Ja),e(Ja,aF),e(aF,Vue),e(Vue,sor),e(aF,lor),e(aF,xX),e(xX,ior),e(aF,dor),e(Ja,cor),e(Ja,nF),e(nF,Xue),e(Xue,mor),e(nF,gor),e(nF,$X),e($X,hor),e(nF,por),e(Ja,uor),e(Ja,sF),e(sF,zue),e(zue,_or),e(sF,bor),e(sF,kX),e(kX,vor),e(sF,For),e(Ja,Tor),e(Ja,lF),e(lF,Que),e(Que,Mor),e(lF,Eor),e(lF,SX),e(SX,Cor),e(lF,wor),e(uo,Aor),e(uo,iF),e(iF,yor),e(iF,Wue),e(Wue,Lor),e(iF,xor),e(iF,Hue),e(Hue,$or),e(uo,kor),M(dF,uo,null),b(f,cIe,_),b(f,Bd,_),e(Bd,cF),e(cF,Uue),M(bL,Uue,null),e(Bd,Sor),e(Bd,Jue),e(Jue,Ror),b(f,fIe,_),b(f,Jo,_),M(vL,Jo,null),e(Jo,Bor),e(Jo,Pd),e(Pd,Por),e(Pd,RX),e(RX,Ior),e(Pd,qor),e(Pd,BX),e(BX,Nor),e(Pd,jor),e(Jo,Dor),e(Jo,FL),e(FL,Gor),e(FL,Yue),e(Yue,Oor),e(FL,Vor),e(Jo,Xor),e(Jo,Ct),M(TL,Ct,null),e(Ct,zor),e(Ct,Kue),e(Kue,Qor),e(Ct,Wor),e(Ct,Id),e(Id,Hor),e(Id,Zue),e(Zue,Uor),e(Id,Jor),e(Id,PX),e(PX,Yor),e(Id,Kor),e(Ct,Zor),M(fF,Ct,null),e(Jo,err),e(Jo,_o),M(ML,_o,null),e(_o,orr),e(_o,e_e),e(e_e,rrr),e(_o,trr),e(_o,Ya),e(Ya,arr),e(Ya,o_e),e(o_e,nrr),e(Ya,srr),e(Ya,r_e),e(r_e,lrr),e(Ya,irr),e(Ya,t_e),e(t_e,drr),e(Ya,crr),e(_o,frr),e(_o,a_e),e(a_e,mF),e(mF,n_e),e(n_e,mrr),e(mF,grr),e(mF,IX),e(IX,hrr),e(mF,prr),e(_o,urr),e(_o,gF),e(gF,_rr),e(gF,s_e),e(s_e,brr),e(gF,vrr),e(gF,l_e),e(l_e,Frr),e(_o,Trr),M(hF,_o,null),b(f,mIe,_),b(f,qd,_),e(qd,pF),e(pF,i_e),M(EL,i_e,null),e(qd,Mrr),e(qd,d_e),e(d_e,Err),b(f,gIe,_),b(f,Yo,_),M(CL,Yo,null),e(Yo,Crr),e(Yo,Nd),e(Nd,wrr),e(Nd,qX),e(qX,Arr),e(Nd,yrr),e(Nd,NX),e(NX,Lrr),e(Nd,xrr),e(Yo,$rr),e(Yo,wL),e(wL,krr),e(wL,c_e),e(c_e,Srr),e(wL,Rrr),e(Yo,Brr),e(Yo,wt),M(AL,wt,null),e(wt,Prr),e(wt,f_e),e(f_e,Irr),e(wt,qrr),e(wt,jd),e(jd,Nrr),e(jd,m_e),e(m_e,jrr),e(jd,Drr),e(jd,jX),e(jX,Grr),e(jd,Orr),e(wt,Vrr),M(uF,wt,null),e(Yo,Xrr),e(Yo,wr),M(yL,wr,null),e(wr,zrr),e(wr,g_e),e(g_e,Qrr),e(wr,Wrr),e(wr,Ka),e(Ka,Hrr),e(Ka,h_e),e(h_e,Urr),e(Ka,Jrr),e(Ka,p_e),e(p_e,Yrr),e(Ka,Krr),e(Ka,u_e),e(u_e,Zrr),e(Ka,etr),e(wr,otr),e(wr,j),e(j,_F),e(_F,__e),e(__e,rtr),e(_F,ttr),e(_F,DX),e(DX,atr),e(_F,ntr),e(j,str),e(j,bF),e(bF,b_e),e(b_e,ltr),e(bF,itr),e(bF,GX),e(GX,dtr),e(bF,ctr),e(j,ftr),e(j,vF),e(vF,v_e),e(v_e,mtr),e(vF,gtr),e(vF,OX),e(OX,htr),e(vF,ptr),e(j,utr),e(j,FF),e(FF,F_e),e(F_e,_tr),e(FF,btr),e(FF,VX),e(VX,vtr),e(FF,Ftr),e(j,Ttr),e(j,TF),e(TF,T_e),e(T_e,Mtr),e(TF,Etr),e(TF,XX),e(XX,Ctr),e(TF,wtr),e(j,Atr),e(j,MF),e(MF,M_e),e(M_e,ytr),e(MF,Ltr),e(MF,zX),e(zX,xtr),e(MF,$tr),e(j,ktr),e(j,EF),e(EF,E_e),e(E_e,Str),e(EF,Rtr),e(EF,QX),e(QX,Btr),e(EF,Ptr),e(j,Itr),e(j,CF),e(CF,C_e),e(C_e,qtr),e(CF,Ntr),e(CF,WX),e(WX,jtr),e(CF,Dtr),e(j,Gtr),e(j,wF),e(wF,w_e),e(w_e,Otr),e(wF,Vtr),e(wF,HX),e(HX,Xtr),e(wF,ztr),e(j,Qtr),e(j,AF),e(AF,A_e),e(A_e,Wtr),e(AF,Htr),e(AF,UX),e(UX,Utr),e(AF,Jtr),e(j,Ytr),e(j,yF),e(yF,y_e),e(y_e,Ktr),e(yF,Ztr),e(yF,JX),e(JX,ear),e(yF,oar),e(j,rar),e(j,LF),e(LF,L_e),e(L_e,tar),e(LF,aar),e(LF,YX),e(YX,nar),e(LF,sar),e(j,lar),e(j,xF),e(xF,x_e),e(x_e,iar),e(xF,dar),e(xF,KX),e(KX,car),e(xF,far),e(j,mar),e(j,$F),e($F,$_e),e($_e,gar),e($F,har),e($F,ZX),e(ZX,par),e($F,uar),e(j,_ar),e(j,kF),e(kF,k_e),e(k_e,bar),e(kF,Far),e(kF,ez),e(ez,Tar),e(kF,Mar),e(j,Ear),e(j,SF),e(SF,S_e),e(S_e,Car),e(SF,war),e(SF,oz),e(oz,Aar),e(SF,yar),e(j,Lar),e(j,RF),e(RF,R_e),e(R_e,xar),e(RF,$ar),e(RF,rz),e(rz,kar),e(RF,Sar),e(j,Rar),e(j,Bs),e(Bs,B_e),e(B_e,Bar),e(Bs,Par),e(Bs,tz),e(tz,Iar),e(Bs,qar),e(Bs,az),e(az,Nar),e(Bs,jar),e(j,Dar),e(j,BF),e(BF,P_e),e(P_e,Gar),e(BF,Oar),e(BF,nz),e(nz,Var),e(BF,Xar),e(j,zar),e(j,PF),e(PF,I_e),e(I_e,Qar),e(PF,War),e(PF,sz),e(sz,Har),e(PF,Uar),e(j,Jar),e(j,IF),e(IF,q_e),e(q_e,Yar),e(IF,Kar),e(IF,lz),e(lz,Zar),e(IF,enr),e(j,onr),e(j,qF),e(qF,N_e),e(N_e,rnr),e(qF,tnr),e(qF,iz),e(iz,anr),e(qF,nnr),e(j,snr),e(j,NF),e(NF,j_e),e(j_e,lnr),e(NF,inr),e(NF,dz),e(dz,dnr),e(NF,cnr),e(j,fnr),e(j,jF),e(jF,D_e),e(D_e,mnr),e(jF,gnr),e(jF,cz),e(cz,hnr),e(jF,pnr),e(j,unr),e(j,DF),e(DF,G_e),e(G_e,_nr),e(DF,bnr),e(DF,fz),e(fz,vnr),e(DF,Fnr),e(j,Tnr),e(j,GF),e(GF,O_e),e(O_e,Mnr),e(GF,Enr),e(GF,mz),e(mz,Cnr),e(GF,wnr),e(j,Anr),e(j,OF),e(OF,V_e),e(V_e,ynr),e(OF,Lnr),e(OF,gz),e(gz,xnr),e(OF,$nr),e(j,knr),e(j,VF),e(VF,X_e),e(X_e,Snr),e(VF,Rnr),e(VF,hz),e(hz,Bnr),e(VF,Pnr),e(j,Inr),e(j,XF),e(XF,z_e),e(z_e,qnr),e(XF,Nnr),e(XF,pz),e(pz,jnr),e(XF,Dnr),e(j,Gnr),e(j,zF),e(zF,Q_e),e(Q_e,Onr),e(zF,Vnr),e(zF,uz),e(uz,Xnr),e(zF,znr),e(j,Qnr),e(j,QF),e(QF,W_e),e(W_e,Wnr),e(QF,Hnr),e(QF,_z),e(_z,Unr),e(QF,Jnr),e(j,Ynr),e(j,WF),e(WF,H_e),e(H_e,Knr),e(WF,Znr),e(WF,bz),e(bz,esr),e(WF,osr),e(j,rsr),e(j,HF),e(HF,U_e),e(U_e,tsr),e(HF,asr),e(HF,vz),e(vz,nsr),e(HF,ssr),e(j,lsr),e(j,UF),e(UF,J_e),e(J_e,isr),e(UF,dsr),e(UF,Fz),e(Fz,csr),e(UF,fsr),e(j,msr),e(j,JF),e(JF,Y_e),e(Y_e,gsr),e(JF,hsr),e(JF,Tz),e(Tz,psr),e(JF,usr),e(j,_sr),e(j,YF),e(YF,K_e),e(K_e,bsr),e(YF,vsr),e(YF,Mz),e(Mz,Fsr),e(YF,Tsr),e(j,Msr),e(j,KF),e(KF,Z_e),e(Z_e,Esr),e(KF,Csr),e(KF,Ez),e(Ez,wsr),e(KF,Asr),e(j,ysr),e(j,ZF),e(ZF,e1e),e(e1e,Lsr),e(ZF,xsr),e(ZF,Cz),e(Cz,$sr),e(ZF,ksr),e(j,Ssr),e(j,e0),e(e0,o1e),e(o1e,Rsr),e(e0,Bsr),e(e0,wz),e(wz,Psr),e(e0,Isr),e(j,qsr),e(j,o0),e(o0,r1e),e(r1e,Nsr),e(o0,jsr),e(o0,Az),e(Az,Dsr),e(o0,Gsr),e(j,Osr),e(j,r0),e(r0,t1e),e(t1e,Vsr),e(r0,Xsr),e(r0,yz),e(yz,zsr),e(r0,Qsr),e(j,Wsr),e(j,t0),e(t0,a1e),e(a1e,Hsr),e(t0,Usr),e(t0,Lz),e(Lz,Jsr),e(t0,Ysr),e(j,Ksr),e(j,a0),e(a0,n1e),e(n1e,Zsr),e(a0,elr),e(a0,xz),e(xz,olr),e(a0,rlr),e(j,tlr),e(j,n0),e(n0,s1e),e(s1e,alr),e(n0,nlr),e(n0,$z),e($z,slr),e(n0,llr),e(j,ilr),e(j,s0),e(s0,l1e),e(l1e,dlr),e(s0,clr),e(s0,kz),e(kz,flr),e(s0,mlr),e(wr,glr),M(l0,wr,null),b(f,hIe,_),b(f,Dd,_),e(Dd,i0),e(i0,i1e),M(LL,i1e,null),e(Dd,hlr),e(Dd,d1e),e(d1e,plr),b(f,pIe,_),b(f,Ko,_),M(xL,Ko,null),e(Ko,ulr),e(Ko,Gd),e(Gd,_lr),e(Gd,Sz),e(Sz,blr),e(Gd,vlr),e(Gd,Rz),e(Rz,Flr),e(Gd,Tlr),e(Ko,Mlr),e(Ko,$L),e($L,Elr),e($L,c1e),e(c1e,Clr),e($L,wlr),e(Ko,Alr),e(Ko,At),M(kL,At,null),e(At,ylr),e(At,f1e),e(f1e,Llr),e(At,xlr),e(At,Od),e(Od,$lr),e(Od,m1e),e(m1e,klr),e(Od,Slr),e(Od,Bz),e(Bz,Rlr),e(Od,Blr),e(At,Plr),M(d0,At,null),e(Ko,Ilr),e(Ko,Ar),M(SL,Ar,null),e(Ar,qlr),e(Ar,g1e),e(g1e,Nlr),e(Ar,jlr),e(Ar,Za),e(Za,Dlr),e(Za,h1e),e(h1e,Glr),e(Za,Olr),e(Za,p1e),e(p1e,Vlr),e(Za,Xlr),e(Za,u1e),e(u1e,zlr),e(Za,Qlr),e(Ar,Wlr),e(Ar,ne),e(ne,c0),e(c0,_1e),e(_1e,Hlr),e(c0,Ulr),e(c0,Pz),e(Pz,Jlr),e(c0,Ylr),e(ne,Klr),e(ne,f0),e(f0,b1e),e(b1e,Zlr),e(f0,eir),e(f0,Iz),e(Iz,oir),e(f0,rir),e(ne,tir),e(ne,m0),e(m0,v1e),e(v1e,air),e(m0,nir),e(m0,qz),e(qz,sir),e(m0,lir),e(ne,iir),e(ne,g0),e(g0,F1e),e(F1e,dir),e(g0,cir),e(g0,Nz),e(Nz,fir),e(g0,mir),e(ne,gir),e(ne,h0),e(h0,T1e),e(T1e,hir),e(h0,pir),e(h0,jz),e(jz,uir),e(h0,_ir),e(ne,bir),e(ne,p0),e(p0,M1e),e(M1e,vir),e(p0,Fir),e(p0,Dz),e(Dz,Tir),e(p0,Mir),e(ne,Eir),e(ne,u0),e(u0,E1e),e(E1e,Cir),e(u0,wir),e(u0,Gz),e(Gz,Air),e(u0,yir),e(ne,Lir),e(ne,_0),e(_0,C1e),e(C1e,xir),e(_0,$ir),e(_0,Oz),e(Oz,kir),e(_0,Sir),e(ne,Rir),e(ne,b0),e(b0,w1e),e(w1e,Bir),e(b0,Pir),e(b0,Vz),e(Vz,Iir),e(b0,qir),e(ne,Nir),e(ne,v0),e(v0,A1e),e(A1e,jir),e(v0,Dir),e(v0,Xz),e(Xz,Gir),e(v0,Oir),e(ne,Vir),e(ne,F0),e(F0,y1e),e(y1e,Xir),e(F0,zir),e(F0,zz),e(zz,Qir),e(F0,Wir),e(ne,Hir),e(ne,T0),e(T0,L1e),e(L1e,Uir),e(T0,Jir),e(T0,Qz),e(Qz,Yir),e(T0,Kir),e(ne,Zir),e(ne,M0),e(M0,x1e),e(x1e,edr),e(M0,odr),e(M0,Wz),e(Wz,rdr),e(M0,tdr),e(ne,adr),e(ne,E0),e(E0,$1e),e($1e,ndr),e(E0,sdr),e(E0,Hz),e(Hz,ldr),e(E0,idr),e(ne,ddr),e(ne,C0),e(C0,k1e),e(k1e,cdr),e(C0,fdr),e(C0,Uz),e(Uz,mdr),e(C0,gdr),e(ne,hdr),e(ne,w0),e(w0,S1e),e(S1e,pdr),e(w0,udr),e(w0,Jz),e(Jz,_dr),e(w0,bdr),e(ne,vdr),e(ne,A0),e(A0,R1e),e(R1e,Fdr),e(A0,Tdr),e(A0,Yz),e(Yz,Mdr),e(A0,Edr),e(ne,Cdr),e(ne,y0),e(y0,B1e),e(B1e,wdr),e(y0,Adr),e(y0,Kz),e(Kz,ydr),e(y0,Ldr),e(ne,xdr),e(ne,L0),e(L0,P1e),e(P1e,$dr),e(L0,kdr),e(L0,Zz),e(Zz,Sdr),e(L0,Rdr),e(ne,Bdr),e(ne,x0),e(x0,I1e),e(I1e,Pdr),e(x0,Idr),e(x0,eQ),e(eQ,qdr),e(x0,Ndr),e(ne,jdr),e(ne,$0),e($0,q1e),e(q1e,Ddr),e($0,Gdr),e($0,oQ),e(oQ,Odr),e($0,Vdr),e(ne,Xdr),e(ne,k0),e(k0,N1e),e(N1e,zdr),e(k0,Qdr),e(k0,rQ),e(rQ,Wdr),e(k0,Hdr),e(ne,Udr),e(ne,S0),e(S0,j1e),e(j1e,Jdr),e(S0,Ydr),e(S0,tQ),e(tQ,Kdr),e(S0,Zdr),e(Ar,ecr),M(R0,Ar,null),b(f,uIe,_),b(f,Vd,_),e(Vd,B0),e(B0,D1e),M(RL,D1e,null),e(Vd,ocr),e(Vd,G1e),e(G1e,rcr),b(f,_Ie,_),b(f,Zo,_),M(BL,Zo,null),e(Zo,tcr),e(Zo,Xd),e(Xd,acr),e(Xd,aQ),e(aQ,ncr),e(Xd,scr),e(Xd,nQ),e(nQ,lcr),e(Xd,icr),e(Zo,dcr),e(Zo,PL),e(PL,ccr),e(PL,O1e),e(O1e,fcr),e(PL,mcr),e(Zo,gcr),e(Zo,yt),M(IL,yt,null),e(yt,hcr),e(yt,V1e),e(V1e,pcr),e(yt,ucr),e(yt,zd),e(zd,_cr),e(zd,X1e),e(X1e,bcr),e(zd,vcr),e(zd,sQ),e(sQ,Fcr),e(zd,Tcr),e(yt,Mcr),M(P0,yt,null),e(Zo,Ecr),e(Zo,yr),M(qL,yr,null),e(yr,Ccr),e(yr,z1e),e(z1e,wcr),e(yr,Acr),e(yr,en),e(en,ycr),e(en,Q1e),e(Q1e,Lcr),e(en,xcr),e(en,W1e),e(W1e,$cr),e(en,kcr),e(en,H1e),e(H1e,Scr),e(en,Rcr),e(yr,Bcr),e(yr,Te),e(Te,I0),e(I0,U1e),e(U1e,Pcr),e(I0,Icr),e(I0,lQ),e(lQ,qcr),e(I0,Ncr),e(Te,jcr),e(Te,q0),e(q0,J1e),e(J1e,Dcr),e(q0,Gcr),e(q0,iQ),e(iQ,Ocr),e(q0,Vcr),e(Te,Xcr),e(Te,N0),e(N0,Y1e),e(Y1e,zcr),e(N0,Qcr),e(N0,dQ),e(dQ,Wcr),e(N0,Hcr),e(Te,Ucr),e(Te,j0),e(j0,K1e),e(K1e,Jcr),e(j0,Ycr),e(j0,cQ),e(cQ,Kcr),e(j0,Zcr),e(Te,efr),e(Te,D0),e(D0,Z1e),e(Z1e,ofr),e(D0,rfr),e(D0,fQ),e(fQ,tfr),e(D0,afr),e(Te,nfr),e(Te,G0),e(G0,ebe),e(ebe,sfr),e(G0,lfr),e(G0,mQ),e(mQ,ifr),e(G0,dfr),e(Te,cfr),e(Te,O0),e(O0,obe),e(obe,ffr),e(O0,mfr),e(O0,gQ),e(gQ,gfr),e(O0,hfr),e(Te,pfr),e(Te,V0),e(V0,rbe),e(rbe,ufr),e(V0,_fr),e(V0,hQ),e(hQ,bfr),e(V0,vfr),e(Te,Ffr),e(Te,X0),e(X0,tbe),e(tbe,Tfr),e(X0,Mfr),e(X0,pQ),e(pQ,Efr),e(X0,Cfr),e(Te,wfr),e(Te,z0),e(z0,abe),e(abe,Afr),e(z0,yfr),e(z0,uQ),e(uQ,Lfr),e(z0,xfr),e(Te,$fr),e(Te,Q0),e(Q0,nbe),e(nbe,kfr),e(Q0,Sfr),e(Q0,_Q),e(_Q,Rfr),e(Q0,Bfr),e(Te,Pfr),e(Te,W0),e(W0,sbe),e(sbe,Ifr),e(W0,qfr),e(W0,bQ),e(bQ,Nfr),e(W0,jfr),e(yr,Dfr),M(H0,yr,null),b(f,bIe,_),b(f,Qd,_),e(Qd,U0),e(U0,lbe),M(NL,lbe,null),e(Qd,Gfr),e(Qd,ibe),e(ibe,Ofr),b(f,vIe,_),b(f,er,_),M(jL,er,null),e(er,Vfr),e(er,Wd),e(Wd,Xfr),e(Wd,vQ),e(vQ,zfr),e(Wd,Qfr),e(Wd,FQ),e(FQ,Wfr),e(Wd,Hfr),e(er,Ufr),e(er,DL),e(DL,Jfr),e(DL,dbe),e(dbe,Yfr),e(DL,Kfr),e(er,Zfr),e(er,Lt),M(GL,Lt,null),e(Lt,emr),e(Lt,cbe),e(cbe,omr),e(Lt,rmr),e(Lt,Hd),e(Hd,tmr),e(Hd,fbe),e(fbe,amr),e(Hd,nmr),e(Hd,TQ),e(TQ,smr),e(Hd,lmr),e(Lt,imr),M(J0,Lt,null),e(er,dmr),e(er,Lr),M(OL,Lr,null),e(Lr,cmr),e(Lr,mbe),e(mbe,fmr),e(Lr,mmr),e(Lr,on),e(on,gmr),e(on,gbe),e(gbe,hmr),e(on,pmr),e(on,hbe),e(hbe,umr),e(on,_mr),e(on,pbe),e(pbe,bmr),e(on,vmr),e(Lr,Fmr),e(Lr,Ud),e(Ud,Y0),e(Y0,ube),e(ube,Tmr),e(Y0,Mmr),e(Y0,MQ),e(MQ,Emr),e(Y0,Cmr),e(Ud,wmr),e(Ud,K0),e(K0,_be),e(_be,Amr),e(K0,ymr),e(K0,EQ),e(EQ,Lmr),e(K0,xmr),e(Ud,$mr),e(Ud,Z0),e(Z0,bbe),e(bbe,kmr),e(Z0,Smr),e(Z0,CQ),e(CQ,Rmr),e(Z0,Bmr),e(Lr,Pmr),M(eT,Lr,null),b(f,FIe,_),b(f,Jd,_),e(Jd,oT),e(oT,vbe),M(VL,vbe,null),e(Jd,Imr),e(Jd,Fbe),e(Fbe,qmr),b(f,TIe,_),b(f,or,_),M(XL,or,null),e(or,Nmr),e(or,Yd),e(Yd,jmr),e(Yd,wQ),e(wQ,Dmr),e(Yd,Gmr),e(Yd,AQ),e(AQ,Omr),e(Yd,Vmr),e(or,Xmr),e(or,zL),e(zL,zmr),e(zL,Tbe),e(Tbe,Qmr),e(zL,Wmr),e(or,Hmr),e(or,xt),M(QL,xt,null),e(xt,Umr),e(xt,Mbe),e(Mbe,Jmr),e(xt,Ymr),e(xt,Kd),e(Kd,Kmr),e(Kd,Ebe),e(Ebe,Zmr),e(Kd,egr),e(Kd,yQ),e(yQ,ogr),e(Kd,rgr),e(xt,tgr),M(rT,xt,null),e(or,agr),e(or,xr),M(WL,xr,null),e(xr,ngr),e(xr,Cbe),e(Cbe,sgr),e(xr,lgr),e(xr,rn),e(rn,igr),e(rn,wbe),e(wbe,dgr),e(rn,cgr),e(rn,Abe),e(Abe,fgr),e(rn,mgr),e(rn,ybe),e(ybe,ggr),e(rn,hgr),e(xr,pgr),e(xr,ie),e(ie,tT),e(tT,Lbe),e(Lbe,ugr),e(tT,_gr),e(tT,LQ),e(LQ,bgr),e(tT,vgr),e(ie,Fgr),e(ie,aT),e(aT,xbe),e(xbe,Tgr),e(aT,Mgr),e(aT,xQ),e(xQ,Egr),e(aT,Cgr),e(ie,wgr),e(ie,nT),e(nT,$be),e($be,Agr),e(nT,ygr),e(nT,$Q),e($Q,Lgr),e(nT,xgr),e(ie,$gr),e(ie,sT),e(sT,kbe),e(kbe,kgr),e(sT,Sgr),e(sT,kQ),e(kQ,Rgr),e(sT,Bgr),e(ie,Pgr),e(ie,lT),e(lT,Sbe),e(Sbe,Igr),e(lT,qgr),e(lT,SQ),e(SQ,Ngr),e(lT,jgr),e(ie,Dgr),e(ie,iT),e(iT,Rbe),e(Rbe,Ggr),e(iT,Ogr),e(iT,RQ),e(RQ,Vgr),e(iT,Xgr),e(ie,zgr),e(ie,dT),e(dT,Bbe),e(Bbe,Qgr),e(dT,Wgr),e(dT,BQ),e(BQ,Hgr),e(dT,Ugr),e(ie,Jgr),e(ie,cT),e(cT,Pbe),e(Pbe,Ygr),e(cT,Kgr),e(cT,PQ),e(PQ,Zgr),e(cT,ehr),e(ie,ohr),e(ie,fT),e(fT,Ibe),e(Ibe,rhr),e(fT,thr),e(fT,IQ),e(IQ,ahr),e(fT,nhr),e(ie,shr),e(ie,mT),e(mT,qbe),e(qbe,lhr),e(mT,ihr),e(mT,qQ),e(qQ,dhr),e(mT,chr),e(ie,fhr),e(ie,gT),e(gT,Nbe),e(Nbe,mhr),e(gT,ghr),e(gT,NQ),e(NQ,hhr),e(gT,phr),e(ie,uhr),e(ie,hT),e(hT,jbe),e(jbe,_hr),e(hT,bhr),e(hT,jQ),e(jQ,vhr),e(hT,Fhr),e(ie,Thr),e(ie,pT),e(pT,Dbe),e(Dbe,Mhr),e(pT,Ehr),e(pT,DQ),e(DQ,Chr),e(pT,whr),e(ie,Ahr),e(ie,uT),e(uT,Gbe),e(Gbe,yhr),e(uT,Lhr),e(uT,GQ),e(GQ,xhr),e(uT,$hr),e(ie,khr),e(ie,_T),e(_T,Obe),e(Obe,Shr),e(_T,Rhr),e(_T,OQ),e(OQ,Bhr),e(_T,Phr),e(ie,Ihr),e(ie,bT),e(bT,Vbe),e(Vbe,qhr),e(bT,Nhr),e(bT,VQ),e(VQ,jhr),e(bT,Dhr),e(ie,Ghr),e(ie,vT),e(vT,Xbe),e(Xbe,Ohr),e(vT,Vhr),e(vT,XQ),e(XQ,Xhr),e(vT,zhr),e(ie,Qhr),e(ie,FT),e(FT,zbe),e(zbe,Whr),e(FT,Hhr),e(FT,zQ),e(zQ,Uhr),e(FT,Jhr),e(ie,Yhr),e(ie,TT),e(TT,Qbe),e(Qbe,Khr),e(TT,Zhr),e(TT,QQ),e(QQ,epr),e(TT,opr),e(ie,rpr),e(ie,MT),e(MT,Wbe),e(Wbe,tpr),e(MT,apr),e(MT,WQ),e(WQ,npr),e(MT,spr),e(xr,lpr),M(ET,xr,null),b(f,MIe,_),b(f,Zd,_),e(Zd,CT),e(CT,Hbe),M(HL,Hbe,null),e(Zd,ipr),e(Zd,Ube),e(Ube,dpr),b(f,EIe,_),b(f,rr,_),M(UL,rr,null),e(rr,cpr),e(rr,ec),e(ec,fpr),e(ec,HQ),e(HQ,mpr),e(ec,gpr),e(ec,UQ),e(UQ,hpr),e(ec,ppr),e(rr,upr),e(rr,JL),e(JL,_pr),e(JL,Jbe),e(Jbe,bpr),e(JL,vpr),e(rr,Fpr),e(rr,$t),M(YL,$t,null),e($t,Tpr),e($t,Ybe),e(Ybe,Mpr),e($t,Epr),e($t,oc),e(oc,Cpr),e(oc,Kbe),e(Kbe,wpr),e(oc,Apr),e(oc,JQ),e(JQ,ypr),e(oc,Lpr),e($t,xpr),M(wT,$t,null),e(rr,$pr),e(rr,$r),M(KL,$r,null),e($r,kpr),e($r,Zbe),e(Zbe,Spr),e($r,Rpr),e($r,tn),e(tn,Bpr),e(tn,e4e),e(e4e,Ppr),e(tn,Ipr),e(tn,o4e),e(o4e,qpr),e(tn,Npr),e(tn,r4e),e(r4e,jpr),e(tn,Dpr),e($r,Gpr),e($r,ye),e(ye,AT),e(AT,t4e),e(t4e,Opr),e(AT,Vpr),e(AT,YQ),e(YQ,Xpr),e(AT,zpr),e(ye,Qpr),e(ye,yT),e(yT,a4e),e(a4e,Wpr),e(yT,Hpr),e(yT,KQ),e(KQ,Upr),e(yT,Jpr),e(ye,Ypr),e(ye,LT),e(LT,n4e),e(n4e,Kpr),e(LT,Zpr),e(LT,ZQ),e(ZQ,eur),e(LT,our),e(ye,rur),e(ye,xT),e(xT,s4e),e(s4e,tur),e(xT,aur),e(xT,eW),e(eW,nur),e(xT,sur),e(ye,lur),e(ye,$T),e($T,l4e),e(l4e,iur),e($T,dur),e($T,oW),e(oW,cur),e($T,fur),e(ye,mur),e(ye,kT),e(kT,i4e),e(i4e,gur),e(kT,hur),e(kT,rW),e(rW,pur),e(kT,uur),e(ye,_ur),e(ye,ST),e(ST,d4e),e(d4e,bur),e(ST,vur),e(ST,tW),e(tW,Fur),e(ST,Tur),e(ye,Mur),e(ye,RT),e(RT,c4e),e(c4e,Eur),e(RT,Cur),e(RT,aW),e(aW,wur),e(RT,Aur),e(ye,yur),e(ye,BT),e(BT,f4e),e(f4e,Lur),e(BT,xur),e(BT,nW),e(nW,$ur),e(BT,kur),e(ye,Sur),e(ye,PT),e(PT,m4e),e(m4e,Rur),e(PT,Bur),e(PT,sW),e(sW,Pur),e(PT,Iur),e($r,qur),M(IT,$r,null),b(f,CIe,_),b(f,rc,_),e(rc,qT),e(qT,g4e),M(ZL,g4e,null),e(rc,Nur),e(rc,h4e),e(h4e,jur),b(f,wIe,_),b(f,tr,_),M(e8,tr,null),e(tr,Dur),e(tr,tc),e(tc,Gur),e(tc,lW),e(lW,Our),e(tc,Vur),e(tc,iW),e(iW,Xur),e(tc,zur),e(tr,Qur),e(tr,o8),e(o8,Wur),e(o8,p4e),e(p4e,Hur),e(o8,Uur),e(tr,Jur),e(tr,kt),M(r8,kt,null),e(kt,Yur),e(kt,u4e),e(u4e,Kur),e(kt,Zur),e(kt,ac),e(ac,e_r),e(ac,_4e),e(_4e,o_r),e(ac,r_r),e(ac,dW),e(dW,t_r),e(ac,a_r),e(kt,n_r),M(NT,kt,null),e(tr,s_r),e(tr,kr),M(t8,kr,null),e(kr,l_r),e(kr,b4e),e(b4e,i_r),e(kr,d_r),e(kr,an),e(an,c_r),e(an,v4e),e(v4e,f_r),e(an,m_r),e(an,F4e),e(F4e,g_r),e(an,h_r),e(an,T4e),e(T4e,p_r),e(an,u_r),e(kr,__r),e(kr,Z),e(Z,jT),e(jT,M4e),e(M4e,b_r),e(jT,v_r),e(jT,cW),e(cW,F_r),e(jT,T_r),e(Z,M_r),e(Z,DT),e(DT,E4e),e(E4e,E_r),e(DT,C_r),e(DT,fW),e(fW,w_r),e(DT,A_r),e(Z,y_r),e(Z,GT),e(GT,C4e),e(C4e,L_r),e(GT,x_r),e(GT,mW),e(mW,$_r),e(GT,k_r),e(Z,S_r),e(Z,OT),e(OT,w4e),e(w4e,R_r),e(OT,B_r),e(OT,gW),e(gW,P_r),e(OT,I_r),e(Z,q_r),e(Z,VT),e(VT,A4e),e(A4e,N_r),e(VT,j_r),e(VT,hW),e(hW,D_r),e(VT,G_r),e(Z,O_r),e(Z,XT),e(XT,y4e),e(y4e,V_r),e(XT,X_r),e(XT,pW),e(pW,z_r),e(XT,Q_r),e(Z,W_r),e(Z,zT),e(zT,L4e),e(L4e,H_r),e(zT,U_r),e(zT,uW),e(uW,J_r),e(zT,Y_r),e(Z,K_r),e(Z,QT),e(QT,x4e),e(x4e,Z_r),e(QT,e1r),e(QT,_W),e(_W,o1r),e(QT,r1r),e(Z,t1r),e(Z,WT),e(WT,$4e),e($4e,a1r),e(WT,n1r),e(WT,bW),e(bW,s1r),e(WT,l1r),e(Z,i1r),e(Z,HT),e(HT,k4e),e(k4e,d1r),e(HT,c1r),e(HT,vW),e(vW,f1r),e(HT,m1r),e(Z,g1r),e(Z,UT),e(UT,S4e),e(S4e,h1r),e(UT,p1r),e(UT,FW),e(FW,u1r),e(UT,_1r),e(Z,b1r),e(Z,JT),e(JT,R4e),e(R4e,v1r),e(JT,F1r),e(JT,TW),e(TW,T1r),e(JT,M1r),e(Z,E1r),e(Z,YT),e(YT,B4e),e(B4e,C1r),e(YT,w1r),e(YT,MW),e(MW,A1r),e(YT,y1r),e(Z,L1r),e(Z,KT),e(KT,P4e),e(P4e,x1r),e(KT,$1r),e(KT,EW),e(EW,k1r),e(KT,S1r),e(Z,R1r),e(Z,ZT),e(ZT,I4e),e(I4e,B1r),e(ZT,P1r),e(ZT,CW),e(CW,I1r),e(ZT,q1r),e(Z,N1r),e(Z,e7),e(e7,q4e),e(q4e,j1r),e(e7,D1r),e(e7,wW),e(wW,G1r),e(e7,O1r),e(Z,V1r),e(Z,o7),e(o7,N4e),e(N4e,X1r),e(o7,z1r),e(o7,AW),e(AW,Q1r),e(o7,W1r),e(Z,H1r),e(Z,r7),e(r7,j4e),e(j4e,U1r),e(r7,J1r),e(r7,yW),e(yW,Y1r),e(r7,K1r),e(Z,Z1r),e(Z,t7),e(t7,D4e),e(D4e,ebr),e(t7,obr),e(t7,LW),e(LW,rbr),e(t7,tbr),e(Z,abr),e(Z,a7),e(a7,G4e),e(G4e,nbr),e(a7,sbr),e(a7,xW),e(xW,lbr),e(a7,ibr),e(Z,dbr),e(Z,n7),e(n7,O4e),e(O4e,cbr),e(n7,fbr),e(n7,$W),e($W,mbr),e(n7,gbr),e(Z,hbr),e(Z,s7),e(s7,V4e),e(V4e,pbr),e(s7,ubr),e(s7,kW),e(kW,_br),e(s7,bbr),e(Z,vbr),e(Z,l7),e(l7,X4e),e(X4e,Fbr),e(l7,Tbr),e(l7,SW),e(SW,Mbr),e(l7,Ebr),e(Z,Cbr),e(Z,i7),e(i7,z4e),e(z4e,wbr),e(i7,Abr),e(i7,RW),e(RW,ybr),e(i7,Lbr),e(Z,xbr),e(Z,d7),e(d7,Q4e),e(Q4e,$br),e(d7,kbr),e(d7,BW),e(BW,Sbr),e(d7,Rbr),e(Z,Bbr),e(Z,c7),e(c7,W4e),e(W4e,Pbr),e(c7,Ibr),e(c7,PW),e(PW,qbr),e(c7,Nbr),e(kr,jbr),M(f7,kr,null),b(f,AIe,_),b(f,nc,_),e(nc,m7),e(m7,H4e),M(a8,H4e,null),e(nc,Dbr),e(nc,U4e),e(U4e,Gbr),b(f,yIe,_),b(f,ar,_),M(n8,ar,null),e(ar,Obr),e(ar,sc),e(sc,Vbr),e(sc,IW),e(IW,Xbr),e(sc,zbr),e(sc,qW),e(qW,Qbr),e(sc,Wbr),e(ar,Hbr),e(ar,s8),e(s8,Ubr),e(s8,J4e),e(J4e,Jbr),e(s8,Ybr),e(ar,Kbr),e(ar,St),M(l8,St,null),e(St,Zbr),e(St,Y4e),e(Y4e,e4r),e(St,o4r),e(St,lc),e(lc,r4r),e(lc,K4e),e(K4e,t4r),e(lc,a4r),e(lc,NW),e(NW,n4r),e(lc,s4r),e(St,l4r),M(g7,St,null),e(ar,i4r),e(ar,Sr),M(i8,Sr,null),e(Sr,d4r),e(Sr,Z4e),e(Z4e,c4r),e(Sr,f4r),e(Sr,nn),e(nn,m4r),e(nn,e2e),e(e2e,g4r),e(nn,h4r),e(nn,o2e),e(o2e,p4r),e(nn,u4r),e(nn,r2e),e(r2e,_4r),e(nn,b4r),e(Sr,v4r),e(Sr,pe),e(pe,h7),e(h7,t2e),e(t2e,F4r),e(h7,T4r),e(h7,jW),e(jW,M4r),e(h7,E4r),e(pe,C4r),e(pe,p7),e(p7,a2e),e(a2e,w4r),e(p7,A4r),e(p7,DW),e(DW,y4r),e(p7,L4r),e(pe,x4r),e(pe,u7),e(u7,n2e),e(n2e,$4r),e(u7,k4r),e(u7,GW),e(GW,S4r),e(u7,R4r),e(pe,B4r),e(pe,_7),e(_7,s2e),e(s2e,P4r),e(_7,I4r),e(_7,OW),e(OW,q4r),e(_7,N4r),e(pe,j4r),e(pe,b7),e(b7,l2e),e(l2e,D4r),e(b7,G4r),e(b7,VW),e(VW,O4r),e(b7,V4r),e(pe,X4r),e(pe,v7),e(v7,i2e),e(i2e,z4r),e(v7,Q4r),e(v7,XW),e(XW,W4r),e(v7,H4r),e(pe,U4r),e(pe,F7),e(F7,d2e),e(d2e,J4r),e(F7,Y4r),e(F7,zW),e(zW,K4r),e(F7,Z4r),e(pe,e2r),e(pe,T7),e(T7,c2e),e(c2e,o2r),e(T7,r2r),e(T7,QW),e(QW,t2r),e(T7,a2r),e(pe,n2r),e(pe,M7),e(M7,f2e),e(f2e,s2r),e(M7,l2r),e(M7,WW),e(WW,i2r),e(M7,d2r),e(pe,c2r),e(pe,E7),e(E7,m2e),e(m2e,f2r),e(E7,m2r),e(E7,HW),e(HW,g2r),e(E7,h2r),e(pe,p2r),e(pe,C7),e(C7,g2e),e(g2e,u2r),e(C7,_2r),e(C7,UW),e(UW,b2r),e(C7,v2r),e(pe,F2r),e(pe,w7),e(w7,h2e),e(h2e,T2r),e(w7,M2r),e(w7,JW),e(JW,E2r),e(w7,C2r),e(pe,w2r),e(pe,A7),e(A7,p2e),e(p2e,A2r),e(A7,y2r),e(A7,YW),e(YW,L2r),e(A7,x2r),e(pe,$2r),e(pe,y7),e(y7,u2e),e(u2e,k2r),e(y7,S2r),e(y7,KW),e(KW,R2r),e(y7,B2r),e(pe,P2r),e(pe,L7),e(L7,_2e),e(_2e,I2r),e(L7,q2r),e(L7,ZW),e(ZW,N2r),e(L7,j2r),e(pe,D2r),e(pe,x7),e(x7,b2e),e(b2e,G2r),e(x7,O2r),e(x7,eH),e(eH,V2r),e(x7,X2r),e(pe,z2r),e(pe,$7),e($7,v2e),e(v2e,Q2r),e($7,W2r),e($7,oH),e(oH,H2r),e($7,U2r),e(Sr,J2r),M(k7,Sr,null),b(f,LIe,_),b(f,ic,_),e(ic,S7),e(S7,F2e),M(d8,F2e,null),e(ic,Y2r),e(ic,T2e),e(T2e,K2r),b(f,xIe,_),b(f,nr,_),M(c8,nr,null),e(nr,Z2r),e(nr,dc),e(dc,e5r),e(dc,rH),e(rH,o5r),e(dc,r5r),e(dc,tH),e(tH,t5r),e(dc,a5r),e(nr,n5r),e(nr,f8),e(f8,s5r),e(f8,M2e),e(M2e,l5r),e(f8,i5r),e(nr,d5r),e(nr,Rt),M(m8,Rt,null),e(Rt,c5r),e(Rt,E2e),e(E2e,f5r),e(Rt,m5r),e(Rt,cc),e(cc,g5r),e(cc,C2e),e(C2e,h5r),e(cc,p5r),e(cc,aH),e(aH,u5r),e(cc,_5r),e(Rt,b5r),M(R7,Rt,null),e(nr,v5r),e(nr,Rr),M(g8,Rr,null),e(Rr,F5r),e(Rr,w2e),e(w2e,T5r),e(Rr,M5r),e(Rr,sn),e(sn,E5r),e(sn,A2e),e(A2e,C5r),e(sn,w5r),e(sn,y2e),e(y2e,A5r),e(sn,y5r),e(sn,L2e),e(L2e,L5r),e(sn,x5r),e(Rr,$5r),e(Rr,h8),e(h8,B7),e(B7,x2e),e(x2e,k5r),e(B7,S5r),e(B7,nH),e(nH,R5r),e(B7,B5r),e(h8,P5r),e(h8,P7),e(P7,$2e),e($2e,I5r),e(P7,q5r),e(P7,sH),e(sH,N5r),e(P7,j5r),e(Rr,D5r),M(I7,Rr,null),b(f,$Ie,_),b(f,fc,_),e(fc,q7),e(q7,k2e),M(p8,k2e,null),e(fc,G5r),e(fc,S2e),e(S2e,O5r),b(f,kIe,_),b(f,sr,_),M(u8,sr,null),e(sr,V5r),e(sr,mc),e(mc,X5r),e(mc,lH),e(lH,z5r),e(mc,Q5r),e(mc,iH),e(iH,W5r),e(mc,H5r),e(sr,U5r),e(sr,_8),e(_8,J5r),e(_8,R2e),e(R2e,Y5r),e(_8,K5r),e(sr,Z5r),e(sr,Bt),M(b8,Bt,null),e(Bt,evr),e(Bt,B2e),e(B2e,ovr),e(Bt,rvr),e(Bt,gc),e(gc,tvr),e(gc,P2e),e(P2e,avr),e(gc,nvr),e(gc,dH),e(dH,svr),e(gc,lvr),e(Bt,ivr),M(N7,Bt,null),e(sr,dvr),e(sr,Br),M(v8,Br,null),e(Br,cvr),e(Br,I2e),e(I2e,fvr),e(Br,mvr),e(Br,ln),e(ln,gvr),e(ln,q2e),e(q2e,hvr),e(ln,pvr),e(ln,N2e),e(N2e,uvr),e(ln,_vr),e(ln,j2e),e(j2e,bvr),e(ln,vvr),e(Br,Fvr),e(Br,D2e),e(D2e,j7),e(j7,G2e),e(G2e,Tvr),e(j7,Mvr),e(j7,cH),e(cH,Evr),e(j7,Cvr),e(Br,wvr),M(D7,Br,null),b(f,SIe,_),b(f,hc,_),e(hc,G7),e(G7,O2e),M(F8,O2e,null),e(hc,Avr),e(hc,V2e),e(V2e,yvr),b(f,RIe,_),b(f,lr,_),M(T8,lr,null),e(lr,Lvr),e(lr,pc),e(pc,xvr),e(pc,fH),e(fH,$vr),e(pc,kvr),e(pc,mH),e(mH,Svr),e(pc,Rvr),e(lr,Bvr),e(lr,M8),e(M8,Pvr),e(M8,X2e),e(X2e,Ivr),e(M8,qvr),e(lr,Nvr),e(lr,Pt),M(E8,Pt,null),e(Pt,jvr),e(Pt,z2e),e(z2e,Dvr),e(Pt,Gvr),e(Pt,uc),e(uc,Ovr),e(uc,Q2e),e(Q2e,Vvr),e(uc,Xvr),e(uc,gH),e(gH,zvr),e(uc,Qvr),e(Pt,Wvr),M(O7,Pt,null),e(lr,Hvr),e(lr,Pr),M(C8,Pr,null),e(Pr,Uvr),e(Pr,W2e),e(W2e,Jvr),e(Pr,Yvr),e(Pr,dn),e(dn,Kvr),e(dn,H2e),e(H2e,Zvr),e(dn,eFr),e(dn,U2e),e(U2e,oFr),e(dn,rFr),e(dn,J2e),e(J2e,tFr),e(dn,aFr),e(Pr,nFr),e(Pr,de),e(de,V7),e(V7,Y2e),e(Y2e,sFr),e(V7,lFr),e(V7,hH),e(hH,iFr),e(V7,dFr),e(de,cFr),e(de,X7),e(X7,K2e),e(K2e,fFr),e(X7,mFr),e(X7,pH),e(pH,gFr),e(X7,hFr),e(de,pFr),e(de,z7),e(z7,Z2e),e(Z2e,uFr),e(z7,_Fr),e(z7,uH),e(uH,bFr),e(z7,vFr),e(de,FFr),e(de,Q7),e(Q7,e5e),e(e5e,TFr),e(Q7,MFr),e(Q7,_H),e(_H,EFr),e(Q7,CFr),e(de,wFr),e(de,W7),e(W7,o5e),e(o5e,AFr),e(W7,yFr),e(W7,bH),e(bH,LFr),e(W7,xFr),e(de,$Fr),e(de,H7),e(H7,r5e),e(r5e,kFr),e(H7,SFr),e(H7,vH),e(vH,RFr),e(H7,BFr),e(de,PFr),e(de,U7),e(U7,t5e),e(t5e,IFr),e(U7,qFr),e(U7,FH),e(FH,NFr),e(U7,jFr),e(de,DFr),e(de,J7),e(J7,a5e),e(a5e,GFr),e(J7,OFr),e(J7,TH),e(TH,VFr),e(J7,XFr),e(de,zFr),e(de,Y7),e(Y7,n5e),e(n5e,QFr),e(Y7,WFr),e(Y7,MH),e(MH,HFr),e(Y7,UFr),e(de,JFr),e(de,K7),e(K7,s5e),e(s5e,YFr),e(K7,KFr),e(K7,EH),e(EH,ZFr),e(K7,e0r),e(de,o0r),e(de,Z7),e(Z7,l5e),e(l5e,r0r),e(Z7,t0r),e(Z7,CH),e(CH,a0r),e(Z7,n0r),e(de,s0r),e(de,eM),e(eM,i5e),e(i5e,l0r),e(eM,i0r),e(eM,wH),e(wH,d0r),e(eM,c0r),e(de,f0r),e(de,oM),e(oM,d5e),e(d5e,m0r),e(oM,g0r),e(oM,AH),e(AH,h0r),e(oM,p0r),e(de,u0r),e(de,rM),e(rM,c5e),e(c5e,_0r),e(rM,b0r),e(rM,yH),e(yH,v0r),e(rM,F0r),e(de,T0r),e(de,tM),e(tM,f5e),e(f5e,M0r),e(tM,E0r),e(tM,LH),e(LH,C0r),e(tM,w0r),e(de,A0r),e(de,aM),e(aM,m5e),e(m5e,y0r),e(aM,L0r),e(aM,xH),e(xH,x0r),e(aM,$0r),e(de,k0r),e(de,nM),e(nM,g5e),e(g5e,S0r),e(nM,R0r),e(nM,$H),e($H,B0r),e(nM,P0r),e(de,I0r),e(de,sM),e(sM,h5e),e(h5e,q0r),e(sM,N0r),e(sM,kH),e(kH,j0r),e(sM,D0r),e(de,G0r),e(de,lM),e(lM,p5e),e(p5e,O0r),e(lM,V0r),e(lM,SH),e(SH,X0r),e(lM,z0r),e(de,Q0r),e(de,iM),e(iM,u5e),e(u5e,W0r),e(iM,H0r),e(iM,RH),e(RH,U0r),e(iM,J0r),e(Pr,Y0r),M(dM,Pr,null),b(f,BIe,_),b(f,_c,_),e(_c,cM),e(cM,_5e),M(w8,_5e,null),e(_c,K0r),e(_c,b5e),e(b5e,Z0r),b(f,PIe,_),b(f,ir,_),M(A8,ir,null),e(ir,eTr),e(ir,bc),e(bc,oTr),e(bc,BH),e(BH,rTr),e(bc,tTr),e(bc,PH),e(PH,aTr),e(bc,nTr),e(ir,sTr),e(ir,y8),e(y8,lTr),e(y8,v5e),e(v5e,iTr),e(y8,dTr),e(ir,cTr),e(ir,It),M(L8,It,null),e(It,fTr),e(It,F5e),e(F5e,mTr),e(It,gTr),e(It,vc),e(vc,hTr),e(vc,T5e),e(T5e,pTr),e(vc,uTr),e(vc,IH),e(IH,_Tr),e(vc,bTr),e(It,vTr),M(fM,It,null),e(ir,FTr),e(ir,Ir),M(x8,Ir,null),e(Ir,TTr),e(Ir,M5e),e(M5e,MTr),e(Ir,ETr),e(Ir,cn),e(cn,CTr),e(cn,E5e),e(E5e,wTr),e(cn,ATr),e(cn,C5e),e(C5e,yTr),e(cn,LTr),e(cn,w5e),e(w5e,xTr),e(cn,$Tr),e(Ir,kTr),e(Ir,ce),e(ce,mM),e(mM,A5e),e(A5e,STr),e(mM,RTr),e(mM,qH),e(qH,BTr),e(mM,PTr),e(ce,ITr),e(ce,gM),e(gM,y5e),e(y5e,qTr),e(gM,NTr),e(gM,NH),e(NH,jTr),e(gM,DTr),e(ce,GTr),e(ce,hM),e(hM,L5e),e(L5e,OTr),e(hM,VTr),e(hM,jH),e(jH,XTr),e(hM,zTr),e(ce,QTr),e(ce,pM),e(pM,x5e),e(x5e,WTr),e(pM,HTr),e(pM,DH),e(DH,UTr),e(pM,JTr),e(ce,YTr),e(ce,uM),e(uM,$5e),e($5e,KTr),e(uM,ZTr),e(uM,GH),e(GH,e7r),e(uM,o7r),e(ce,r7r),e(ce,_M),e(_M,k5e),e(k5e,t7r),e(_M,a7r),e(_M,OH),e(OH,n7r),e(_M,s7r),e(ce,l7r),e(ce,bM),e(bM,S5e),e(S5e,i7r),e(bM,d7r),e(bM,VH),e(VH,c7r),e(bM,f7r),e(ce,m7r),e(ce,vM),e(vM,R5e),e(R5e,g7r),e(vM,h7r),e(vM,XH),e(XH,p7r),e(vM,u7r),e(ce,_7r),e(ce,FM),e(FM,B5e),e(B5e,b7r),e(FM,v7r),e(FM,zH),e(zH,F7r),e(FM,T7r),e(ce,M7r),e(ce,TM),e(TM,P5e),e(P5e,E7r),e(TM,C7r),e(TM,QH),e(QH,w7r),e(TM,A7r),e(ce,y7r),e(ce,MM),e(MM,I5e),e(I5e,L7r),e(MM,x7r),e(MM,WH),e(WH,$7r),e(MM,k7r),e(ce,S7r),e(ce,EM),e(EM,q5e),e(q5e,R7r),e(EM,B7r),e(EM,HH),e(HH,P7r),e(EM,I7r),e(ce,q7r),e(ce,CM),e(CM,N5e),e(N5e,N7r),e(CM,j7r),e(CM,UH),e(UH,D7r),e(CM,G7r),e(ce,O7r),e(ce,wM),e(wM,j5e),e(j5e,V7r),e(wM,X7r),e(wM,JH),e(JH,z7r),e(wM,Q7r),e(ce,W7r),e(ce,AM),e(AM,D5e),e(D5e,H7r),e(AM,U7r),e(AM,YH),e(YH,J7r),e(AM,Y7r),e(ce,K7r),e(ce,yM),e(yM,G5e),e(G5e,Z7r),e(yM,eMr),e(yM,KH),e(KH,oMr),e(yM,rMr),e(ce,tMr),e(ce,LM),e(LM,O5e),e(O5e,aMr),e(LM,nMr),e(LM,ZH),e(ZH,sMr),e(LM,lMr),e(ce,iMr),e(ce,xM),e(xM,V5e),e(V5e,dMr),e(xM,cMr),e(xM,eU),e(eU,fMr),e(xM,mMr),e(ce,gMr),e(ce,$M),e($M,X5e),e(X5e,hMr),e($M,pMr),e($M,oU),e(oU,uMr),e($M,_Mr),e(ce,bMr),e(ce,kM),e(kM,z5e),e(z5e,vMr),e(kM,FMr),e(kM,rU),e(rU,TMr),e(kM,MMr),e(Ir,EMr),M(SM,Ir,null),b(f,IIe,_),b(f,Fc,_),e(Fc,RM),e(RM,Q5e),M($8,Q5e,null),e(Fc,CMr),e(Fc,W5e),e(W5e,wMr),b(f,qIe,_),b(f,dr,_),M(k8,dr,null),e(dr,AMr),e(dr,Tc),e(Tc,yMr),e(Tc,tU),e(tU,LMr),e(Tc,xMr),e(Tc,aU),e(aU,$Mr),e(Tc,kMr),e(dr,SMr),e(dr,S8),e(S8,RMr),e(S8,H5e),e(H5e,BMr),e(S8,PMr),e(dr,IMr),e(dr,qt),M(R8,qt,null),e(qt,qMr),e(qt,U5e),e(U5e,NMr),e(qt,jMr),e(qt,Mc),e(Mc,DMr),e(Mc,J5e),e(J5e,GMr),e(Mc,OMr),e(Mc,nU),e(nU,VMr),e(Mc,XMr),e(qt,zMr),M(BM,qt,null),e(dr,QMr),e(dr,qr),M(B8,qr,null),e(qr,WMr),e(qr,Y5e),e(Y5e,HMr),e(qr,UMr),e(qr,fn),e(fn,JMr),e(fn,K5e),e(K5e,YMr),e(fn,KMr),e(fn,Z5e),e(Z5e,ZMr),e(fn,eEr),e(fn,eve),e(eve,oEr),e(fn,rEr),e(qr,tEr),e(qr,ove),e(ove,PM),e(PM,rve),e(rve,aEr),e(PM,nEr),e(PM,sU),e(sU,sEr),e(PM,lEr),e(qr,iEr),M(IM,qr,null),b(f,NIe,_),b(f,Ec,_),e(Ec,qM),e(qM,tve),M(P8,tve,null),e(Ec,dEr),e(Ec,ave),e(ave,cEr),b(f,jIe,_),b(f,cr,_),M(I8,cr,null),e(cr,fEr),e(cr,Cc),e(Cc,mEr),e(Cc,lU),e(lU,gEr),e(Cc,hEr),e(Cc,iU),e(iU,pEr),e(Cc,uEr),e(cr,_Er),e(cr,q8),e(q8,bEr),e(q8,nve),e(nve,vEr),e(q8,FEr),e(cr,TEr),e(cr,Nt),M(N8,Nt,null),e(Nt,MEr),e(Nt,sve),e(sve,EEr),e(Nt,CEr),e(Nt,wc),e(wc,wEr),e(wc,lve),e(lve,AEr),e(wc,yEr),e(wc,dU),e(dU,LEr),e(wc,xEr),e(Nt,$Er),M(NM,Nt,null),e(cr,kEr),e(cr,Nr),M(j8,Nr,null),e(Nr,SEr),e(Nr,ive),e(ive,REr),e(Nr,BEr),e(Nr,mn),e(mn,PEr),e(mn,dve),e(dve,IEr),e(mn,qEr),e(mn,cve),e(cve,NEr),e(mn,jEr),e(mn,fve),e(fve,DEr),e(mn,GEr),e(Nr,OEr),e(Nr,mve),e(mve,jM),e(jM,gve),e(gve,VEr),e(jM,XEr),e(jM,cU),e(cU,zEr),e(jM,QEr),e(Nr,WEr),M(DM,Nr,null),b(f,DIe,_),b(f,Ac,_),e(Ac,GM),e(GM,hve),M(D8,hve,null),e(Ac,HEr),e(Ac,pve),e(pve,UEr),b(f,GIe,_),b(f,fr,_),M(G8,fr,null),e(fr,JEr),e(fr,yc),e(yc,YEr),e(yc,fU),e(fU,KEr),e(yc,ZEr),e(yc,mU),e(mU,eCr),e(yc,oCr),e(fr,rCr),e(fr,O8),e(O8,tCr),e(O8,uve),e(uve,aCr),e(O8,nCr),e(fr,sCr),e(fr,jt),M(V8,jt,null),e(jt,lCr),e(jt,_ve),e(_ve,iCr),e(jt,dCr),e(jt,Lc),e(Lc,cCr),e(Lc,bve),e(bve,fCr),e(Lc,mCr),e(Lc,gU),e(gU,gCr),e(Lc,hCr),e(jt,pCr),M(OM,jt,null),e(fr,uCr),e(fr,jr),M(X8,jr,null),e(jr,_Cr),e(jr,vve),e(vve,bCr),e(jr,vCr),e(jr,gn),e(gn,FCr),e(gn,Fve),e(Fve,TCr),e(gn,MCr),e(gn,Tve),e(Tve,ECr),e(gn,CCr),e(gn,Mve),e(Mve,wCr),e(gn,ACr),e(jr,yCr),e(jr,oe),e(oe,VM),e(VM,Eve),e(Eve,LCr),e(VM,xCr),e(VM,hU),e(hU,$Cr),e(VM,kCr),e(oe,SCr),e(oe,XM),e(XM,Cve),e(Cve,RCr),e(XM,BCr),e(XM,pU),e(pU,PCr),e(XM,ICr),e(oe,qCr),e(oe,zM),e(zM,wve),e(wve,NCr),e(zM,jCr),e(zM,uU),e(uU,DCr),e(zM,GCr),e(oe,OCr),e(oe,QM),e(QM,Ave),e(Ave,VCr),e(QM,XCr),e(QM,_U),e(_U,zCr),e(QM,QCr),e(oe,WCr),e(oe,WM),e(WM,yve),e(yve,HCr),e(WM,UCr),e(WM,bU),e(bU,JCr),e(WM,YCr),e(oe,KCr),e(oe,HM),e(HM,Lve),e(Lve,ZCr),e(HM,e3r),e(HM,vU),e(vU,o3r),e(HM,r3r),e(oe,t3r),e(oe,UM),e(UM,xve),e(xve,a3r),e(UM,n3r),e(UM,FU),e(FU,s3r),e(UM,l3r),e(oe,i3r),e(oe,JM),e(JM,$ve),e($ve,d3r),e(JM,c3r),e(JM,TU),e(TU,f3r),e(JM,m3r),e(oe,g3r),e(oe,YM),e(YM,kve),e(kve,h3r),e(YM,p3r),e(YM,MU),e(MU,u3r),e(YM,_3r),e(oe,b3r),e(oe,KM),e(KM,Sve),e(Sve,v3r),e(KM,F3r),e(KM,EU),e(EU,T3r),e(KM,M3r),e(oe,E3r),e(oe,ZM),e(ZM,Rve),e(Rve,C3r),e(ZM,w3r),e(ZM,CU),e(CU,A3r),e(ZM,y3r),e(oe,L3r),e(oe,eE),e(eE,Bve),e(Bve,x3r),e(eE,$3r),e(eE,wU),e(wU,k3r),e(eE,S3r),e(oe,R3r),e(oe,oE),e(oE,Pve),e(Pve,B3r),e(oE,P3r),e(oE,AU),e(AU,I3r),e(oE,q3r),e(oe,N3r),e(oe,rE),e(rE,Ive),e(Ive,j3r),e(rE,D3r),e(rE,yU),e(yU,G3r),e(rE,O3r),e(oe,V3r),e(oe,tE),e(tE,qve),e(qve,X3r),e(tE,z3r),e(tE,LU),e(LU,Q3r),e(tE,W3r),e(oe,H3r),e(oe,aE),e(aE,Nve),e(Nve,U3r),e(aE,J3r),e(aE,xU),e(xU,Y3r),e(aE,K3r),e(oe,Z3r),e(oe,nE),e(nE,jve),e(jve,ewr),e(nE,owr),e(nE,$U),e($U,rwr),e(nE,twr),e(oe,awr),e(oe,sE),e(sE,Dve),e(Dve,nwr),e(sE,swr),e(sE,kU),e(kU,lwr),e(sE,iwr),e(oe,dwr),e(oe,lE),e(lE,Gve),e(Gve,cwr),e(lE,fwr),e(lE,SU),e(SU,mwr),e(lE,gwr),e(oe,hwr),e(oe,iE),e(iE,Ove),e(Ove,pwr),e(iE,uwr),e(iE,RU),e(RU,_wr),e(iE,bwr),e(oe,vwr),e(oe,dE),e(dE,Vve),e(Vve,Fwr),e(dE,Twr),e(dE,BU),e(BU,Mwr),e(dE,Ewr),e(oe,Cwr),e(oe,cE),e(cE,Xve),e(Xve,wwr),e(cE,Awr),e(cE,PU),e(PU,ywr),e(cE,Lwr),e(oe,xwr),e(oe,fE),e(fE,zve),e(zve,$wr),e(fE,kwr),e(fE,IU),e(IU,Swr),e(fE,Rwr),e(oe,Bwr),e(oe,mE),e(mE,Qve),e(Qve,Pwr),e(mE,Iwr),e(mE,qU),e(qU,qwr),e(mE,Nwr),e(oe,jwr),e(oe,gE),e(gE,Wve),e(Wve,Dwr),e(gE,Gwr),e(gE,NU),e(NU,Owr),e(gE,Vwr),e(jr,Xwr),M(hE,jr,null),b(f,OIe,_),b(f,xc,_),e(xc,pE),e(pE,Hve),M(z8,Hve,null),e(xc,zwr),e(xc,Uve),e(Uve,Qwr),b(f,VIe,_),b(f,mr,_),M(Q8,mr,null),e(mr,Wwr),e(mr,$c),e($c,Hwr),e($c,jU),e(jU,Uwr),e($c,Jwr),e($c,DU),e(DU,Ywr),e($c,Kwr),e(mr,Zwr),e(mr,W8),e(W8,eAr),e(W8,Jve),e(Jve,oAr),e(W8,rAr),e(mr,tAr),e(mr,Dt),M(H8,Dt,null),e(Dt,aAr),e(Dt,Yve),e(Yve,nAr),e(Dt,sAr),e(Dt,kc),e(kc,lAr),e(kc,Kve),e(Kve,iAr),e(kc,dAr),e(kc,GU),e(GU,cAr),e(kc,fAr),e(Dt,mAr),M(uE,Dt,null),e(mr,gAr),e(mr,Dr),M(U8,Dr,null),e(Dr,hAr),e(Dr,Zve),e(Zve,pAr),e(Dr,uAr),e(Dr,hn),e(hn,_Ar),e(hn,eFe),e(eFe,bAr),e(hn,vAr),e(hn,oFe),e(oFe,FAr),e(hn,TAr),e(hn,rFe),e(rFe,MAr),e(hn,EAr),e(Dr,CAr),e(Dr,ke),e(ke,_E),e(_E,tFe),e(tFe,wAr),e(_E,AAr),e(_E,OU),e(OU,yAr),e(_E,LAr),e(ke,xAr),e(ke,bE),e(bE,aFe),e(aFe,$Ar),e(bE,kAr),e(bE,VU),e(VU,SAr),e(bE,RAr),e(ke,BAr),e(ke,vE),e(vE,nFe),e(nFe,PAr),e(vE,IAr),e(vE,XU),e(XU,qAr),e(vE,NAr),e(ke,jAr),e(ke,FE),e(FE,sFe),e(sFe,DAr),e(FE,GAr),e(FE,zU),e(zU,OAr),e(FE,VAr),e(ke,XAr),e(ke,TE),e(TE,lFe),e(lFe,zAr),e(TE,QAr),e(TE,QU),e(QU,WAr),e(TE,HAr),e(ke,UAr),e(ke,ME),e(ME,iFe),e(iFe,JAr),e(ME,YAr),e(ME,WU),e(WU,KAr),e(ME,ZAr),e(ke,e6r),e(ke,EE),e(EE,dFe),e(dFe,o6r),e(EE,r6r),e(EE,HU),e(HU,t6r),e(EE,a6r),e(ke,n6r),e(ke,CE),e(CE,cFe),e(cFe,s6r),e(CE,l6r),e(CE,UU),e(UU,i6r),e(CE,d6r),e(ke,c6r),e(ke,wE),e(wE,fFe),e(fFe,f6r),e(wE,m6r),e(wE,JU),e(JU,g6r),e(wE,h6r),e(Dr,p6r),M(AE,Dr,null),b(f,XIe,_),b(f,Sc,_),e(Sc,yE),e(yE,mFe),M(J8,mFe,null),e(Sc,u6r),e(Sc,gFe),e(gFe,_6r),b(f,zIe,_),b(f,gr,_),M(Y8,gr,null),e(gr,b6r),e(gr,Rc),e(Rc,v6r),e(Rc,YU),e(YU,F6r),e(Rc,T6r),e(Rc,KU),e(KU,M6r),e(Rc,E6r),e(gr,C6r),e(gr,K8),e(K8,w6r),e(K8,hFe),e(hFe,A6r),e(K8,y6r),e(gr,L6r),e(gr,Gt),M(Z8,Gt,null),e(Gt,x6r),e(Gt,pFe),e(pFe,$6r),e(Gt,k6r),e(Gt,Bc),e(Bc,S6r),e(Bc,uFe),e(uFe,R6r),e(Bc,B6r),e(Bc,ZU),e(ZU,P6r),e(Bc,I6r),e(Gt,q6r),M(LE,Gt,null),e(gr,N6r),e(gr,Gr),M(ex,Gr,null),e(Gr,j6r),e(Gr,_Fe),e(_Fe,D6r),e(Gr,G6r),e(Gr,pn),e(pn,O6r),e(pn,bFe),e(bFe,V6r),e(pn,X6r),e(pn,vFe),e(vFe,z6r),e(pn,Q6r),e(pn,FFe),e(FFe,W6r),e(pn,H6r),e(Gr,U6r),e(Gr,Me),e(Me,xE),e(xE,TFe),e(TFe,J6r),e(xE,Y6r),e(xE,eJ),e(eJ,K6r),e(xE,Z6r),e(Me,eyr),e(Me,$E),e($E,MFe),e(MFe,oyr),e($E,ryr),e($E,oJ),e(oJ,tyr),e($E,ayr),e(Me,nyr),e(Me,kE),e(kE,EFe),e(EFe,syr),e(kE,lyr),e(kE,rJ),e(rJ,iyr),e(kE,dyr),e(Me,cyr),e(Me,SE),e(SE,CFe),e(CFe,fyr),e(SE,myr),e(SE,tJ),e(tJ,gyr),e(SE,hyr),e(Me,pyr),e(Me,RE),e(RE,wFe),e(wFe,uyr),e(RE,_yr),e(RE,aJ),e(aJ,byr),e(RE,vyr),e(Me,Fyr),e(Me,BE),e(BE,AFe),e(AFe,Tyr),e(BE,Myr),e(BE,nJ),e(nJ,Eyr),e(BE,Cyr),e(Me,wyr),e(Me,PE),e(PE,yFe),e(yFe,Ayr),e(PE,yyr),e(PE,sJ),e(sJ,Lyr),e(PE,xyr),e(Me,$yr),e(Me,IE),e(IE,LFe),e(LFe,kyr),e(IE,Syr),e(IE,lJ),e(lJ,Ryr),e(IE,Byr),e(Me,Pyr),e(Me,qE),e(qE,xFe),e(xFe,Iyr),e(qE,qyr),e(qE,iJ),e(iJ,Nyr),e(qE,jyr),e(Me,Dyr),e(Me,NE),e(NE,$Fe),e($Fe,Gyr),e(NE,Oyr),e(NE,dJ),e(dJ,Vyr),e(NE,Xyr),e(Me,zyr),e(Me,jE),e(jE,kFe),e(kFe,Qyr),e(jE,Wyr),e(jE,cJ),e(cJ,Hyr),e(jE,Uyr),e(Me,Jyr),e(Me,DE),e(DE,SFe),e(SFe,Yyr),e(DE,Kyr),e(DE,fJ),e(fJ,Zyr),e(DE,eLr),e(Gr,oLr),M(GE,Gr,null),b(f,QIe,_),b(f,Pc,_),e(Pc,OE),e(OE,RFe),M(ox,RFe,null),e(Pc,rLr),e(Pc,BFe),e(BFe,tLr),b(f,WIe,_),b(f,hr,_),M(rx,hr,null),e(hr,aLr),e(hr,Ic),e(Ic,nLr),e(Ic,mJ),e(mJ,sLr),e(Ic,lLr),e(Ic,gJ),e(gJ,iLr),e(Ic,dLr),e(hr,cLr),e(hr,tx),e(tx,fLr),e(tx,PFe),e(PFe,mLr),e(tx,gLr),e(hr,hLr),e(hr,Ot),M(ax,Ot,null),e(Ot,pLr),e(Ot,IFe),e(IFe,uLr),e(Ot,_Lr),e(Ot,qc),e(qc,bLr),e(qc,qFe),e(qFe,vLr),e(qc,FLr),e(qc,hJ),e(hJ,TLr),e(qc,MLr),e(Ot,ELr),M(VE,Ot,null),e(hr,CLr),e(hr,Or),M(nx,Or,null),e(Or,wLr),e(Or,NFe),e(NFe,ALr),e(Or,yLr),e(Or,un),e(un,LLr),e(un,jFe),e(jFe,xLr),e(un,$Lr),e(un,DFe),e(DFe,kLr),e(un,SLr),e(un,GFe),e(GFe,RLr),e(un,BLr),e(Or,PLr),e(Or,Le),e(Le,XE),e(XE,OFe),e(OFe,ILr),e(XE,qLr),e(XE,pJ),e(pJ,NLr),e(XE,jLr),e(Le,DLr),e(Le,zE),e(zE,VFe),e(VFe,GLr),e(zE,OLr),e(zE,uJ),e(uJ,VLr),e(zE,XLr),e(Le,zLr),e(Le,QE),e(QE,XFe),e(XFe,QLr),e(QE,WLr),e(QE,_J),e(_J,HLr),e(QE,ULr),e(Le,JLr),e(Le,WE),e(WE,zFe),e(zFe,YLr),e(WE,KLr),e(WE,bJ),e(bJ,ZLr),e(WE,e8r),e(Le,o8r),e(Le,HE),e(HE,QFe),e(QFe,r8r),e(HE,t8r),e(HE,vJ),e(vJ,a8r),e(HE,n8r),e(Le,s8r),e(Le,UE),e(UE,WFe),e(WFe,l8r),e(UE,i8r),e(UE,FJ),e(FJ,d8r),e(UE,c8r),e(Le,f8r),e(Le,JE),e(JE,HFe),e(HFe,m8r),e(JE,g8r),e(JE,TJ),e(TJ,h8r),e(JE,p8r),e(Le,u8r),e(Le,YE),e(YE,UFe),e(UFe,_8r),e(YE,b8r),e(YE,MJ),e(MJ,v8r),e(YE,F8r),e(Le,T8r),e(Le,KE),e(KE,JFe),e(JFe,M8r),e(KE,E8r),e(KE,EJ),e(EJ,C8r),e(KE,w8r),e(Le,A8r),e(Le,ZE),e(ZE,YFe),e(YFe,y8r),e(ZE,L8r),e(ZE,CJ),e(CJ,x8r),e(ZE,$8r),e(Or,k8r),M(eC,Or,null),b(f,HIe,_),b(f,Nc,_),e(Nc,oC),e(oC,KFe),M(sx,KFe,null),e(Nc,S8r),e(Nc,ZFe),e(ZFe,R8r),b(f,UIe,_),b(f,pr,_),M(lx,pr,null),e(pr,B8r),e(pr,jc),e(jc,P8r),e(jc,wJ),e(wJ,I8r),e(jc,q8r),e(jc,AJ),e(AJ,N8r),e(jc,j8r),e(pr,D8r),e(pr,ix),e(ix,G8r),e(ix,e0e),e(e0e,O8r),e(ix,V8r),e(pr,X8r),e(pr,Vt),M(dx,Vt,null),e(Vt,z8r),e(Vt,o0e),e(o0e,Q8r),e(Vt,W8r),e(Vt,Dc),e(Dc,H8r),e(Dc,r0e),e(r0e,U8r),e(Dc,J8r),e(Dc,yJ),e(yJ,Y8r),e(Dc,K8r),e(Vt,Z8r),M(rC,Vt,null),e(pr,exr),e(pr,Vr),M(cx,Vr,null),e(Vr,oxr),e(Vr,t0e),e(t0e,rxr),e(Vr,txr),e(Vr,_n),e(_n,axr),e(_n,a0e),e(a0e,nxr),e(_n,sxr),e(_n,n0e),e(n0e,lxr),e(_n,ixr),e(_n,s0e),e(s0e,dxr),e(_n,cxr),e(Vr,fxr),e(Vr,Se),e(Se,tC),e(tC,l0e),e(l0e,mxr),e(tC,gxr),e(tC,LJ),e(LJ,hxr),e(tC,pxr),e(Se,uxr),e(Se,aC),e(aC,i0e),e(i0e,_xr),e(aC,bxr),e(aC,xJ),e(xJ,vxr),e(aC,Fxr),e(Se,Txr),e(Se,nC),e(nC,d0e),e(d0e,Mxr),e(nC,Exr),e(nC,$J),e($J,Cxr),e(nC,wxr),e(Se,Axr),e(Se,sC),e(sC,c0e),e(c0e,yxr),e(sC,Lxr),e(sC,kJ),e(kJ,xxr),e(sC,$xr),e(Se,kxr),e(Se,lC),e(lC,f0e),e(f0e,Sxr),e(lC,Rxr),e(lC,SJ),e(SJ,Bxr),e(lC,Pxr),e(Se,Ixr),e(Se,iC),e(iC,m0e),e(m0e,qxr),e(iC,Nxr),e(iC,RJ),e(RJ,jxr),e(iC,Dxr),e(Se,Gxr),e(Se,dC),e(dC,g0e),e(g0e,Oxr),e(dC,Vxr),e(dC,BJ),e(BJ,Xxr),e(dC,zxr),e(Se,Qxr),e(Se,cC),e(cC,h0e),e(h0e,Wxr),e(cC,Hxr),e(cC,PJ),e(PJ,Uxr),e(cC,Jxr),e(Se,Yxr),e(Se,fC),e(fC,p0e),e(p0e,Kxr),e(fC,Zxr),e(fC,IJ),e(IJ,e9r),e(fC,o9r),e(Vr,r9r),M(mC,Vr,null),b(f,JIe,_),b(f,Gc,_),e(Gc,gC),e(gC,u0e),M(fx,u0e,null),e(Gc,t9r),e(Gc,_0e),e(_0e,a9r),b(f,YIe,_),b(f,ur,_),M(mx,ur,null),e(ur,n9r),e(ur,Oc),e(Oc,s9r),e(Oc,qJ),e(qJ,l9r),e(Oc,i9r),e(Oc,NJ),e(NJ,d9r),e(Oc,c9r),e(ur,f9r),e(ur,gx),e(gx,m9r),e(gx,b0e),e(b0e,g9r),e(gx,h9r),e(ur,p9r),e(ur,Xt),M(hx,Xt,null),e(Xt,u9r),e(Xt,v0e),e(v0e,_9r),e(Xt,b9r),e(Xt,Vc),e(Vc,v9r),e(Vc,F0e),e(F0e,F9r),e(Vc,T9r),e(Vc,jJ),e(jJ,M9r),e(Vc,E9r),e(Xt,C9r),M(hC,Xt,null),e(ur,w9r),e(ur,Xr),M(px,Xr,null),e(Xr,A9r),e(Xr,T0e),e(T0e,y9r),e(Xr,L9r),e(Xr,bn),e(bn,x9r),e(bn,M0e),e(M0e,$9r),e(bn,k9r),e(bn,E0e),e(E0e,S9r),e(bn,R9r),e(bn,C0e),e(C0e,B9r),e(bn,P9r),e(Xr,I9r),e(Xr,xe),e(xe,pC),e(pC,w0e),e(w0e,q9r),e(pC,N9r),e(pC,DJ),e(DJ,j9r),e(pC,D9r),e(xe,G9r),e(xe,uC),e(uC,A0e),e(A0e,O9r),e(uC,V9r),e(uC,GJ),e(GJ,X9r),e(uC,z9r),e(xe,Q9r),e(xe,_C),e(_C,y0e),e(y0e,W9r),e(_C,H9r),e(_C,OJ),e(OJ,U9r),e(_C,J9r),e(xe,Y9r),e(xe,bC),e(bC,L0e),e(L0e,K9r),e(bC,Z9r),e(bC,VJ),e(VJ,e$r),e(bC,o$r),e(xe,r$r),e(xe,vC),e(vC,x0e),e(x0e,t$r),e(vC,a$r),e(vC,XJ),e(XJ,n$r),e(vC,s$r),e(xe,l$r),e(xe,FC),e(FC,$0e),e($0e,i$r),e(FC,d$r),e(FC,zJ),e(zJ,c$r),e(FC,f$r),e(xe,m$r),e(xe,TC),e(TC,k0e),e(k0e,g$r),e(TC,h$r),e(TC,QJ),e(QJ,p$r),e(TC,u$r),e(xe,_$r),e(xe,MC),e(MC,S0e),e(S0e,b$r),e(MC,v$r),e(MC,WJ),e(WJ,F$r),e(MC,T$r),e(xe,M$r),e(xe,EC),e(EC,R0e),e(R0e,E$r),e(EC,C$r),e(EC,HJ),e(HJ,w$r),e(EC,A$r),e(xe,y$r),e(xe,CC),e(CC,B0e),e(B0e,L$r),e(CC,x$r),e(CC,UJ),e(UJ,$$r),e(CC,k$r),e(Xr,S$r),M(wC,Xr,null),b(f,KIe,_),b(f,Xc,_),e(Xc,AC),e(AC,P0e),M(ux,P0e,null),e(Xc,R$r),e(Xc,I0e),e(I0e,B$r),b(f,ZIe,_),b(f,_r,_),M(_x,_r,null),e(_r,P$r),e(_r,zc),e(zc,I$r),e(zc,JJ),e(JJ,q$r),e(zc,N$r),e(zc,YJ),e(YJ,j$r),e(zc,D$r),e(_r,G$r),e(_r,bx),e(bx,O$r),e(bx,q0e),e(q0e,V$r),e(bx,X$r),e(_r,z$r),e(_r,zt),M(vx,zt,null),e(zt,Q$r),e(zt,N0e),e(N0e,W$r),e(zt,H$r),e(zt,Qc),e(Qc,U$r),e(Qc,j0e),e(j0e,J$r),e(Qc,Y$r),e(Qc,KJ),e(KJ,K$r),e(Qc,Z$r),e(zt,ekr),M(yC,zt,null),e(_r,okr),e(_r,zr),M(Fx,zr,null),e(zr,rkr),e(zr,D0e),e(D0e,tkr),e(zr,akr),e(zr,vn),e(vn,nkr),e(vn,G0e),e(G0e,skr),e(vn,lkr),e(vn,O0e),e(O0e,ikr),e(vn,dkr),e(vn,V0e),e(V0e,ckr),e(vn,fkr),e(zr,mkr),e(zr,$e),e($e,LC),e(LC,X0e),e(X0e,gkr),e(LC,hkr),e(LC,ZJ),e(ZJ,pkr),e(LC,ukr),e($e,_kr),e($e,xC),e(xC,z0e),e(z0e,bkr),e(xC,vkr),e(xC,eY),e(eY,Fkr),e(xC,Tkr),e($e,Mkr),e($e,$C),e($C,Q0e),e(Q0e,Ekr),e($C,Ckr),e($C,oY),e(oY,wkr),e($C,Akr),e($e,ykr),e($e,kC),e(kC,W0e),e(W0e,Lkr),e(kC,xkr),e(kC,rY),e(rY,$kr),e(kC,kkr),e($e,Skr),e($e,SC),e(SC,H0e),e(H0e,Rkr),e(SC,Bkr),e(SC,tY),e(tY,Pkr),e(SC,Ikr),e($e,qkr),e($e,RC),e(RC,U0e),e(U0e,Nkr),e(RC,jkr),e(RC,aY),e(aY,Dkr),e(RC,Gkr),e($e,Okr),e($e,BC),e(BC,J0e),e(J0e,Vkr),e(BC,Xkr),e(BC,nY),e(nY,zkr),e(BC,Qkr),e($e,Wkr),e($e,PC),e(PC,Y0e),e(Y0e,Hkr),e(PC,Ukr),e(PC,sY),e(sY,Jkr),e(PC,Ykr),e($e,Kkr),e($e,IC),e(IC,K0e),e(K0e,Zkr),e(IC,eSr),e(IC,lY),e(lY,oSr),e(IC,rSr),e($e,tSr),e($e,qC),e(qC,Z0e),e(Z0e,aSr),e(qC,nSr),e(qC,iY),e(iY,sSr),e(qC,lSr),e(zr,iSr),M(NC,zr,null),b(f,eqe,_),b(f,Wc,_),e(Wc,jC),e(jC,eTe),M(Tx,eTe,null),e(Wc,dSr),e(Wc,oTe),e(oTe,cSr),b(f,oqe,_),b(f,br,_),M(Mx,br,null),e(br,fSr),e(br,Hc),e(Hc,mSr),e(Hc,dY),e(dY,gSr),e(Hc,hSr),e(Hc,cY),e(cY,pSr),e(Hc,uSr),e(br,_Sr),e(br,Ex),e(Ex,bSr),e(Ex,rTe),e(rTe,vSr),e(Ex,FSr),e(br,TSr),e(br,Qt),M(Cx,Qt,null),e(Qt,MSr),e(Qt,tTe),e(tTe,ESr),e(Qt,CSr),e(Qt,Uc),e(Uc,wSr),e(Uc,aTe),e(aTe,ASr),e(Uc,ySr),e(Uc,fY),e(fY,LSr),e(Uc,xSr),e(Qt,$Sr),M(DC,Qt,null),e(br,kSr),e(br,Qr),M(wx,Qr,null),e(Qr,SSr),e(Qr,nTe),e(nTe,RSr),e(Qr,BSr),e(Qr,Fn),e(Fn,PSr),e(Fn,sTe),e(sTe,ISr),e(Fn,qSr),e(Fn,lTe),e(lTe,NSr),e(Fn,jSr),e(Fn,iTe),e(iTe,DSr),e(Fn,GSr),e(Qr,OSr),e(Qr,De),e(De,GC),e(GC,dTe),e(dTe,VSr),e(GC,XSr),e(GC,mY),e(mY,zSr),e(GC,QSr),e(De,WSr),e(De,OC),e(OC,cTe),e(cTe,HSr),e(OC,USr),e(OC,gY),e(gY,JSr),e(OC,YSr),e(De,KSr),e(De,VC),e(VC,fTe),e(fTe,ZSr),e(VC,eRr),e(VC,hY),e(hY,oRr),e(VC,rRr),e(De,tRr),e(De,XC),e(XC,mTe),e(mTe,aRr),e(XC,nRr),e(XC,pY),e(pY,sRr),e(XC,lRr),e(De,iRr),e(De,zC),e(zC,gTe),e(gTe,dRr),e(zC,cRr),e(zC,uY),e(uY,fRr),e(zC,mRr),e(De,gRr),e(De,QC),e(QC,hTe),e(hTe,hRr),e(QC,pRr),e(QC,_Y),e(_Y,uRr),e(QC,_Rr),e(De,bRr),e(De,WC),e(WC,pTe),e(pTe,vRr),e(WC,FRr),e(WC,bY),e(bY,TRr),e(WC,MRr),e(De,ERr),e(De,HC),e(HC,uTe),e(uTe,CRr),e(HC,wRr),e(HC,vY),e(vY,ARr),e(HC,yRr),e(Qr,LRr),M(UC,Qr,null),b(f,rqe,_),b(f,Jc,_),e(Jc,JC),e(JC,_Te),M(Ax,_Te,null),e(Jc,xRr),e(Jc,bTe),e(bTe,$Rr),b(f,tqe,_),b(f,vr,_),M(yx,vr,null),e(vr,kRr),e(vr,Yc),e(Yc,SRr),e(Yc,FY),e(FY,RRr),e(Yc,BRr),e(Yc,TY),e(TY,PRr),e(Yc,IRr),e(vr,qRr),e(vr,Lx),e(Lx,NRr),e(Lx,vTe),e(vTe,jRr),e(Lx,DRr),e(vr,GRr),e(vr,Wt),M(xx,Wt,null),e(Wt,ORr),e(Wt,FTe),e(FTe,VRr),e(Wt,XRr),e(Wt,Kc),e(Kc,zRr),e(Kc,TTe),e(TTe,QRr),e(Kc,WRr),e(Kc,MY),e(MY,HRr),e(Kc,URr),e(Wt,JRr),M(YC,Wt,null),e(vr,YRr),e(vr,Wr),M($x,Wr,null),e(Wr,KRr),e(Wr,MTe),e(MTe,ZRr),e(Wr,eBr),e(Wr,Tn),e(Tn,oBr),e(Tn,ETe),e(ETe,rBr),e(Tn,tBr),e(Tn,CTe),e(CTe,aBr),e(Tn,nBr),e(Tn,wTe),e(wTe,sBr),e(Tn,lBr),e(Wr,iBr),e(Wr,Ge),e(Ge,KC),e(KC,ATe),e(ATe,dBr),e(KC,cBr),e(KC,EY),e(EY,fBr),e(KC,mBr),e(Ge,gBr),e(Ge,ZC),e(ZC,yTe),e(yTe,hBr),e(ZC,pBr),e(ZC,CY),e(CY,uBr),e(ZC,_Br),e(Ge,bBr),e(Ge,e3),e(e3,LTe),e(LTe,vBr),e(e3,FBr),e(e3,wY),e(wY,TBr),e(e3,MBr),e(Ge,EBr),e(Ge,o3),e(o3,xTe),e(xTe,CBr),e(o3,wBr),e(o3,AY),e(AY,ABr),e(o3,yBr),e(Ge,LBr),e(Ge,r3),e(r3,$Te),e($Te,xBr),e(r3,$Br),e(r3,yY),e(yY,kBr),e(r3,SBr),e(Ge,RBr),e(Ge,t3),e(t3,kTe),e(kTe,BBr),e(t3,PBr),e(t3,LY),e(LY,IBr),e(t3,qBr),e(Ge,NBr),e(Ge,a3),e(a3,STe),e(STe,jBr),e(a3,DBr),e(a3,xY),e(xY,GBr),e(a3,OBr),e(Ge,VBr),e(Ge,n3),e(n3,RTe),e(RTe,XBr),e(n3,zBr),e(n3,$Y),e($Y,QBr),e(n3,WBr),e(Wr,HBr),M(s3,Wr,null),b(f,aqe,_),b(f,Zc,_),e(Zc,l3),e(l3,BTe),M(kx,BTe,null),e(Zc,UBr),e(Zc,PTe),e(PTe,JBr),b(f,nqe,_),b(f,Fr,_),M(Sx,Fr,null),e(Fr,YBr),e(Fr,ef),e(ef,KBr),e(ef,kY),e(kY,ZBr),e(ef,ePr),e(ef,SY),e(SY,oPr),e(ef,rPr),e(Fr,tPr),e(Fr,Rx),e(Rx,aPr),e(Rx,ITe),e(ITe,nPr),e(Rx,sPr),e(Fr,lPr),e(Fr,Ht),M(Bx,Ht,null),e(Ht,iPr),e(Ht,qTe),e(qTe,dPr),e(Ht,cPr),e(Ht,of),e(of,fPr),e(of,NTe),e(NTe,mPr),e(of,gPr),e(of,RY),e(RY,hPr),e(of,pPr),e(Ht,uPr),M(i3,Ht,null),e(Fr,_Pr),e(Fr,Hr),M(Px,Hr,null),e(Hr,bPr),e(Hr,jTe),e(jTe,vPr),e(Hr,FPr),e(Hr,Mn),e(Mn,TPr),e(Mn,DTe),e(DTe,MPr),e(Mn,EPr),e(Mn,GTe),e(GTe,CPr),e(Mn,wPr),e(Mn,OTe),e(OTe,APr),e(Mn,yPr),e(Hr,LPr),e(Hr,VTe),e(VTe,d3),e(d3,XTe),e(XTe,xPr),e(d3,$Pr),e(d3,BY),e(BY,kPr),e(d3,SPr),e(Hr,RPr),M(c3,Hr,null),b(f,sqe,_),b(f,rf,_),e(rf,f3),e(f3,zTe),M(Ix,zTe,null),e(rf,BPr),e(rf,QTe),e(QTe,PPr),b(f,lqe,_),b(f,Tr,_),M(qx,Tr,null),e(Tr,IPr),e(Tr,tf),e(tf,qPr),e(tf,PY),e(PY,NPr),e(tf,jPr),e(tf,IY),e(IY,DPr),e(tf,GPr),e(Tr,OPr),e(Tr,Nx),e(Nx,VPr),e(Nx,WTe),e(WTe,XPr),e(Nx,zPr),e(Tr,QPr),e(Tr,Ut),M(jx,Ut,null),e(Ut,WPr),e(Ut,HTe),e(HTe,HPr),e(Ut,UPr),e(Ut,af),e(af,JPr),e(af,UTe),e(UTe,YPr),e(af,KPr),e(af,qY),e(qY,ZPr),e(af,eIr),e(Ut,oIr),M(m3,Ut,null),e(Tr,rIr),e(Tr,Ur),M(Dx,Ur,null),e(Ur,tIr),e(Ur,JTe),e(JTe,aIr),e(Ur,nIr),e(Ur,En),e(En,sIr),e(En,YTe),e(YTe,lIr),e(En,iIr),e(En,KTe),e(KTe,dIr),e(En,cIr),e(En,ZTe),e(ZTe,fIr),e(En,mIr),e(Ur,gIr),e(Ur,Gx),e(Gx,g3),e(g3,e7e),e(e7e,hIr),e(g3,pIr),e(g3,NY),e(NY,uIr),e(g3,_Ir),e(Gx,bIr),e(Gx,h3),e(h3,o7e),e(o7e,vIr),e(h3,FIr),e(h3,jY),e(jY,TIr),e(h3,MIr),e(Ur,EIr),M(p3,Ur,null),b(f,iqe,_),b(f,nf,_),e(nf,u3),e(u3,r7e),M(Ox,r7e,null),e(nf,CIr),e(nf,t7e),e(t7e,wIr),b(f,dqe,_),b(f,Mr,_),M(Vx,Mr,null),e(Mr,AIr),e(Mr,sf),e(sf,yIr),e(sf,DY),e(DY,LIr),e(sf,xIr),e(sf,GY),e(GY,$Ir),e(sf,kIr),e(Mr,SIr),e(Mr,Xx),e(Xx,RIr),e(Xx,a7e),e(a7e,BIr),e(Xx,PIr),e(Mr,IIr),e(Mr,Jt),M(zx,Jt,null),e(Jt,qIr),e(Jt,n7e),e(n7e,NIr),e(Jt,jIr),e(Jt,lf),e(lf,DIr),e(lf,s7e),e(s7e,GIr),e(lf,OIr),e(lf,OY),e(OY,VIr),e(lf,XIr),e(Jt,zIr),M(_3,Jt,null),e(Mr,QIr),e(Mr,Jr),M(Qx,Jr,null),e(Jr,WIr),e(Jr,l7e),e(l7e,HIr),e(Jr,UIr),e(Jr,Cn),e(Cn,JIr),e(Cn,i7e),e(i7e,YIr),e(Cn,KIr),e(Cn,d7e),e(d7e,ZIr),e(Cn,eqr),e(Cn,c7e),e(c7e,oqr),e(Cn,rqr),e(Jr,tqr),e(Jr,f7e),e(f7e,b3),e(b3,m7e),e(m7e,aqr),e(b3,nqr),e(b3,VY),e(VY,sqr),e(b3,lqr),e(Jr,iqr),M(v3,Jr,null),cqe=!0},p(f,[_]){const Wx={};_&2&&(Wx.$$scope={dirty:_,ctx:f}),_f.$set(Wx);const g7e={};_&2&&(g7e.$$scope={dirty:_,ctx:f}),hg.$set(g7e);const h7e={};_&2&&(h7e.$$scope={dirty:_,ctx:f}),Qg.$set(h7e);const p7e={};_&2&&(p7e.$$scope={dirty:_,ctx:f}),vh.$set(p7e);const Hx={};_&2&&(Hx.$$scope={dirty:_,ctx:f}),Fh.$set(Hx);const u7e={};_&2&&(u7e.$$scope={dirty:_,ctx:f}),qh.$set(u7e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Nh.$set(wn);const _7e={};_&2&&(_7e.$$scope={dirty:_,ctx:f}),Gh.$set(_7e);const b7e={};_&2&&(b7e.$$scope={dirty:_,ctx:f}),xu.$set(b7e);const v7e={};_&2&&(v7e.$$scope={dirty:_,ctx:f}),ku.$set(v7e);const Ux={};_&2&&(Ux.$$scope={dirty:_,ctx:f}),b_.$set(Ux);const F7e={};_&2&&(F7e.$$scope={dirty:_,ctx:f}),F_.$set(F7e);const Jx={};_&2&&(Jx.$$scope={dirty:_,ctx:f}),t1.$set(Jx);const T7e={};_&2&&(T7e.$$scope={dirty:_,ctx:f}),n1.$set(T7e);const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:f}),O1.$set(Yx);const M7e={};_&2&&(M7e.$$scope={dirty:_,ctx:f}),X1.$set(M7e);const E7e={};_&2&&(E7e.$$scope={dirty:_,ctx:f}),db.$set(E7e);const C7e={};_&2&&(C7e.$$scope={dirty:_,ctx:f}),fb.$set(C7e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),s4.$set(df);const w7e={};_&2&&(w7e.$$scope={dirty:_,ctx:f}),i4.$set(w7e);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:f}),j4.$set(A7e);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:f}),G4.$set(y7e);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),H4.$set(Kx);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:f}),J4.$set(L7e);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:f}),k2.$set(x7e);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:f}),R2.$set($7e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),F5.$set(Kr);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),M5.$set(Zx);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:f}),w5.$set(k7e);const e9={};_&2&&(e9.$$scope={dirty:_,ctx:f}),y5.$set(e9);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:f}),D5.$set(S7e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),O5.$set(Zr);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:f}),z5.$set(R7e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),W5.$set(cf);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:f}),tv.$set(B7e);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:f}),nv.$set(P7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),fv.$set(L);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),gv.$set(F3);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:f}),Ev.$set(I7e);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:f}),wv.$set(q7e);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),xv.$set(T3);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:f}),kv.$set(N7e);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:f}),qv.$set(j7e);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),jv.$set(M3);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:f}),Xv.$set(D7e);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:f}),Qv.$set(G7e);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),Jv.$set(E3);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:f}),Kv.$set(O7e);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:f}),oF.$set(V7e);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),tF.$set(C3);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:f}),dF.$set(X7e);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:f}),fF.$set(z7e);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),hF.$set(w3);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),uF.$set(Q7e);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),l0.$set(W7e);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),d0.$set(A3);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),R0.$set(H7e);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),P0.$set(U7e);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),H0.$set(y3);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),J0.$set(J7e);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),eT.$set(Y7e);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),rT.$set(L3);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),ET.$set(K7e);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),wT.$set(Z7e);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),IT.$set(x3);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),NT.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),f7.$set(oMe);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),g7.$set($3);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),k7.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),R7.$set(tMe);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),I7.$set(k3);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),N7.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),D7.$set(nMe);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),O7.$set(S3);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),dM.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),fM.$set(lMe);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),SM.$set(R3);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),BM.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),IM.$set(dMe);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),NM.$set(B3);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),DM.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),OM.$set(fMe);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),hE.$set(P3);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),uE.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),AE.$set(gMe);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),LE.$set(I3);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),GE.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),VE.$set(pMe);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),eC.$set(q3);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),rC.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),mC.$set(_Me);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),hC.$set(N3);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),wC.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),yC.$set(vMe);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),NC.$set(j3);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),DC.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),UC.$set(TMe);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),YC.$set(D3);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),s3.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),i3.$set(EMe);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),c3.$set(G3);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),m3.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),p3.$set(wMe);const O3={};_&2&&(O3.$$scope={dirty:_,ctx:f}),_3.$set(O3);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),v3.$set(AMe)},i(f){cqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(_f.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(HA.$$.fragment,f),E(hg.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(e6.$$.fragment,f),E(Qg.$$.fragment,f),E(o6.$$.fragment,f),E(r6.$$.fragment,f),E(t6.$$.fragment,f),E(s6.$$.fragment,f),E(vh.$$.fragment,f),E(Fh.$$.fragment,f),E(l6.$$.fragment,f),E(i6.$$.fragment,f),E(d6.$$.fragment,f),E(m6.$$.fragment,f),E(qh.$$.fragment,f),E(Nh.$$.fragment,f),E(g6.$$.fragment,f),E(h6.$$.fragment,f),E(p6.$$.fragment,f),E(_6.$$.fragment,f),E(Gh.$$.fragment,f),E(b6.$$.fragment,f),E(xu.$$.fragment,f),E(v6.$$.fragment,f),E(F6.$$.fragment,f),E(M6.$$.fragment,f),E(ku.$$.fragment,f),E(E6.$$.fragment,f),E(b_.$$.fragment,f),E(C6.$$.fragment,f),E(w6.$$.fragment,f),E(y6.$$.fragment,f),E(F_.$$.fragment,f),E(L6.$$.fragment,f),E(t1.$$.fragment,f),E(x6.$$.fragment,f),E($6.$$.fragment,f),E(S6.$$.fragment,f),E(n1.$$.fragment,f),E(R6.$$.fragment,f),E(O1.$$.fragment,f),E(B6.$$.fragment,f),E(P6.$$.fragment,f),E(q6.$$.fragment,f),E(X1.$$.fragment,f),E(N6.$$.fragment,f),E(db.$$.fragment,f),E(j6.$$.fragment,f),E(D6.$$.fragment,f),E(O6.$$.fragment,f),E(fb.$$.fragment,f),E(V6.$$.fragment,f),E(s4.$$.fragment,f),E(X6.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(i4.$$.fragment,f),E(H6.$$.fragment,f),E(j4.$$.fragment,f),E(U6.$$.fragment,f),E(J6.$$.fragment,f),E(K6.$$.fragment,f),E(G4.$$.fragment,f),E(Z6.$$.fragment,f),E(H4.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ty.$$.fragment,f),E(J4.$$.fragment,f),E(ay.$$.fragment,f),E(k2.$$.fragment,f),E(ny.$$.fragment,f),E(sy.$$.fragment,f),E(iy.$$.fragment,f),E(R2.$$.fragment,f),E(dy.$$.fragment,f),E(F5.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(M5.$$.fragment,f),E(hy.$$.fragment,f),E(w5.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(by.$$.fragment,f),E(y5.$$.fragment,f),E(vy.$$.fragment,f),E(D5.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(O5.$$.fragment,f),E(Cy.$$.fragment,f),E(z5.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(W5.$$.fragment,f),E(xy.$$.fragment,f),E(tv.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(nv.$$.fragment,f),E(By.$$.fragment,f),E(fv.$$.fragment,f),E(Py.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(gv.$$.fragment,f),E(jy.$$.fragment,f),E(Ev.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(wv.$$.fragment,f),E(Xy.$$.fragment,f),E(xv.$$.fragment,f),E(Qy.$$.fragment,f),E(Wy.$$.fragment,f),E(Uy.$$.fragment,f),E(kv.$$.fragment,f),E(Jy.$$.fragment,f),E(qv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(jv.$$.fragment,f),E(oL.$$.fragment,f),E(Xv.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(Qv.$$.fragment,f),E(sL.$$.fragment,f),E(Jv.$$.fragment,f),E(iL.$$.fragment,f),E(dL.$$.fragment,f),E(fL.$$.fragment,f),E(Kv.$$.fragment,f),E(mL.$$.fragment,f),E(oF.$$.fragment,f),E(gL.$$.fragment,f),E(hL.$$.fragment,f),E(uL.$$.fragment,f),E(tF.$$.fragment,f),E(_L.$$.fragment,f),E(dF.$$.fragment,f),E(bL.$$.fragment,f),E(vL.$$.fragment,f),E(TL.$$.fragment,f),E(fF.$$.fragment,f),E(ML.$$.fragment,f),E(hF.$$.fragment,f),E(EL.$$.fragment,f),E(CL.$$.fragment,f),E(AL.$$.fragment,f),E(uF.$$.fragment,f),E(yL.$$.fragment,f),E(l0.$$.fragment,f),E(LL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(d0.$$.fragment,f),E(SL.$$.fragment,f),E(R0.$$.fragment,f),E(RL.$$.fragment,f),E(BL.$$.fragment,f),E(IL.$$.fragment,f),E(P0.$$.fragment,f),E(qL.$$.fragment,f),E(H0.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(J0.$$.fragment,f),E(OL.$$.fragment,f),E(eT.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(rT.$$.fragment,f),E(WL.$$.fragment,f),E(ET.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(wT.$$.fragment,f),E(KL.$$.fragment,f),E(IT.$$.fragment,f),E(ZL.$$.fragment,f),E(e8.$$.fragment,f),E(r8.$$.fragment,f),E(NT.$$.fragment,f),E(t8.$$.fragment,f),E(f7.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(g7.$$.fragment,f),E(i8.$$.fragment,f),E(k7.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(R7.$$.fragment,f),E(g8.$$.fragment,f),E(I7.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(N7.$$.fragment,f),E(v8.$$.fragment,f),E(D7.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(O7.$$.fragment,f),E(C8.$$.fragment,f),E(dM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(fM.$$.fragment,f),E(x8.$$.fragment,f),E(SM.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(BM.$$.fragment,f),E(B8.$$.fragment,f),E(IM.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(N8.$$.fragment,f),E(NM.$$.fragment,f),E(j8.$$.fragment,f),E(DM.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(OM.$$.fragment,f),E(X8.$$.fragment,f),E(hE.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(uE.$$.fragment,f),E(U8.$$.fragment,f),E(AE.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(LE.$$.fragment,f),E(ex.$$.fragment,f),E(GE.$$.fragment,f),E(ox.$$.fragment,f),E(rx.$$.fragment,f),E(ax.$$.fragment,f),E(VE.$$.fragment,f),E(nx.$$.fragment,f),E(eC.$$.fragment,f),E(sx.$$.fragment,f),E(lx.$$.fragment,f),E(dx.$$.fragment,f),E(rC.$$.fragment,f),E(cx.$$.fragment,f),E(mC.$$.fragment,f),E(fx.$$.fragment,f),E(mx.$$.fragment,f),E(hx.$$.fragment,f),E(hC.$$.fragment,f),E(px.$$.fragment,f),E(wC.$$.fragment,f),E(ux.$$.fragment,f),E(_x.$$.fragment,f),E(vx.$$.fragment,f),E(yC.$$.fragment,f),E(Fx.$$.fragment,f),E(NC.$$.fragment,f),E(Tx.$$.fragment,f),E(Mx.$$.fragment,f),E(Cx.$$.fragment,f),E(DC.$$.fragment,f),E(wx.$$.fragment,f),E(UC.$$.fragment,f),E(Ax.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(YC.$$.fragment,f),E($x.$$.fragment,f),E(s3.$$.fragment,f),E(kx.$$.fragment,f),E(Sx.$$.fragment,f),E(Bx.$$.fragment,f),E(i3.$$.fragment,f),E(Px.$$.fragment,f),E(c3.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(m3.$$.fragment,f),E(Dx.$$.fragment,f),E(p3.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(_3.$$.fragment,f),E(Qx.$$.fragment,f),E(v3.$$.fragment,f),cqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(_f.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(HA.$$.fragment,f),C(hg.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(e6.$$.fragment,f),C(Qg.$$.fragment,f),C(o6.$$.fragment,f),C(r6.$$.fragment,f),C(t6.$$.fragment,f),C(s6.$$.fragment,f),C(vh.$$.fragment,f),C(Fh.$$.fragment,f),C(l6.$$.fragment,f),C(i6.$$.fragment,f),C(d6.$$.fragment,f),C(m6.$$.fragment,f),C(qh.$$.fragment,f),C(Nh.$$.fragment,f),C(g6.$$.fragment,f),C(h6.$$.fragment,f),C(p6.$$.fragment,f),C(_6.$$.fragment,f),C(Gh.$$.fragment,f),C(b6.$$.fragment,f),C(xu.$$.fragment,f),C(v6.$$.fragment,f),C(F6.$$.fragment,f),C(M6.$$.fragment,f),C(ku.$$.fragment,f),C(E6.$$.fragment,f),C(b_.$$.fragment,f),C(C6.$$.fragment,f),C(w6.$$.fragment,f),C(y6.$$.fragment,f),C(F_.$$.fragment,f),C(L6.$$.fragment,f),C(t1.$$.fragment,f),C(x6.$$.fragment,f),C($6.$$.fragment,f),C(S6.$$.fragment,f),C(n1.$$.fragment,f),C(R6.$$.fragment,f),C(O1.$$.fragment,f),C(B6.$$.fragment,f),C(P6.$$.fragment,f),C(q6.$$.fragment,f),C(X1.$$.fragment,f),C(N6.$$.fragment,f),C(db.$$.fragment,f),C(j6.$$.fragment,f),C(D6.$$.fragment,f),C(O6.$$.fragment,f),C(fb.$$.fragment,f),C(V6.$$.fragment,f),C(s4.$$.fragment,f),C(X6.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(i4.$$.fragment,f),C(H6.$$.fragment,f),C(j4.$$.fragment,f),C(U6.$$.fragment,f),C(J6.$$.fragment,f),C(K6.$$.fragment,f),C(G4.$$.fragment,f),C(Z6.$$.fragment,f),C(H4.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ty.$$.fragment,f),C(J4.$$.fragment,f),C(ay.$$.fragment,f),C(k2.$$.fragment,f),C(ny.$$.fragment,f),C(sy.$$.fragment,f),C(iy.$$.fragment,f),C(R2.$$.fragment,f),C(dy.$$.fragment,f),C(F5.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(M5.$$.fragment,f),C(hy.$$.fragment,f),C(w5.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(by.$$.fragment,f),C(y5.$$.fragment,f),C(vy.$$.fragment,f),C(D5.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(O5.$$.fragment,f),C(Cy.$$.fragment,f),C(z5.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(W5.$$.fragment,f),C(xy.$$.fragment,f),C(tv.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(nv.$$.fragment,f),C(By.$$.fragment,f),C(fv.$$.fragment,f),C(Py.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(gv.$$.fragment,f),C(jy.$$.fragment,f),C(Ev.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(wv.$$.fragment,f),C(Xy.$$.fragment,f),C(xv.$$.fragment,f),C(Qy.$$.fragment,f),C(Wy.$$.fragment,f),C(Uy.$$.fragment,f),C(kv.$$.fragment,f),C(Jy.$$.fragment,f),C(qv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(jv.$$.fragment,f),C(oL.$$.fragment,f),C(Xv.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(Qv.$$.fragment,f),C(sL.$$.fragment,f),C(Jv.$$.fragment,f),C(iL.$$.fragment,f),C(dL.$$.fragment,f),C(fL.$$.fragment,f),C(Kv.$$.fragment,f),C(mL.$$.fragment,f),C(oF.$$.fragment,f),C(gL.$$.fragment,f),C(hL.$$.fragment,f),C(uL.$$.fragment,f),C(tF.$$.fragment,f),C(_L.$$.fragment,f),C(dF.$$.fragment,f),C(bL.$$.fragment,f),C(vL.$$.fragment,f),C(TL.$$.fragment,f),C(fF.$$.fragment,f),C(ML.$$.fragment,f),C(hF.$$.fragment,f),C(EL.$$.fragment,f),C(CL.$$.fragment,f),C(AL.$$.fragment,f),C(uF.$$.fragment,f),C(yL.$$.fragment,f),C(l0.$$.fragment,f),C(LL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(d0.$$.fragment,f),C(SL.$$.fragment,f),C(R0.$$.fragment,f),C(RL.$$.fragment,f),C(BL.$$.fragment,f),C(IL.$$.fragment,f),C(P0.$$.fragment,f),C(qL.$$.fragment,f),C(H0.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(J0.$$.fragment,f),C(OL.$$.fragment,f),C(eT.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(rT.$$.fragment,f),C(WL.$$.fragment,f),C(ET.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(wT.$$.fragment,f),C(KL.$$.fragment,f),C(IT.$$.fragment,f),C(ZL.$$.fragment,f),C(e8.$$.fragment,f),C(r8.$$.fragment,f),C(NT.$$.fragment,f),C(t8.$$.fragment,f),C(f7.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(g7.$$.fragment,f),C(i8.$$.fragment,f),C(k7.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(R7.$$.fragment,f),C(g8.$$.fragment,f),C(I7.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(N7.$$.fragment,f),C(v8.$$.fragment,f),C(D7.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(O7.$$.fragment,f),C(C8.$$.fragment,f),C(dM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(fM.$$.fragment,f),C(x8.$$.fragment,f),C(SM.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(BM.$$.fragment,f),C(B8.$$.fragment,f),C(IM.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(N8.$$.fragment,f),C(NM.$$.fragment,f),C(j8.$$.fragment,f),C(DM.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(OM.$$.fragment,f),C(X8.$$.fragment,f),C(hE.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(uE.$$.fragment,f),C(U8.$$.fragment,f),C(AE.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(LE.$$.fragment,f),C(ex.$$.fragment,f),C(GE.$$.fragment,f),C(ox.$$.fragment,f),C(rx.$$.fragment,f),C(ax.$$.fragment,f),C(VE.$$.fragment,f),C(nx.$$.fragment,f),C(eC.$$.fragment,f),C(sx.$$.fragment,f),C(lx.$$.fragment,f),C(dx.$$.fragment,f),C(rC.$$.fragment,f),C(cx.$$.fragment,f),C(mC.$$.fragment,f),C(fx.$$.fragment,f),C(mx.$$.fragment,f),C(hx.$$.fragment,f),C(hC.$$.fragment,f),C(px.$$.fragment,f),C(wC.$$.fragment,f),C(ux.$$.fragment,f),C(_x.$$.fragment,f),C(vx.$$.fragment,f),C(yC.$$.fragment,f),C(Fx.$$.fragment,f),C(NC.$$.fragment,f),C(Tx.$$.fragment,f),C(Mx.$$.fragment,f),C(Cx.$$.fragment,f),C(DC.$$.fragment,f),C(wx.$$.fragment,f),C(UC.$$.fragment,f),C(Ax.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(YC.$$.fragment,f),C($x.$$.fragment,f),C(s3.$$.fragment,f),C(kx.$$.fragment,f),C(Sx.$$.fragment,f),C(Bx.$$.fragment,f),C(i3.$$.fragment,f),C(Px.$$.fragment,f),C(c3.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(m3.$$.fragment,f),C(Dx.$$.fragment,f),C(p3.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(_3.$$.fragment,f),C(Qx.$$.fragment,f),C(v3.$$.fragment,f),cqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(lPe),f&&t(hi),w(OA),f&&t(iPe),f&&t($n),f&&t(dPe),w(VA,f),f&&t(cPe),f&&t(c$),f&&t(fPe),w(_f,f),f&&t(mPe),f&&t(pi),w(XA),f&&t(gPe),f&&t(Co),w(zA),w(HA),w(hg),w(UA),f&&t(hPe),f&&t(_i),w(JA),f&&t(pPe),f&&t(wo),w(YA),w(e6),w(Qg),w(o6),f&&t(uPe),f&&t(bi),w(r6),f&&t(_Pe),f&&t(Ao),w(t6),w(s6),w(vh),w(Fh),w(l6),f&&t(bPe),f&&t(vi),w(i6),f&&t(vPe),f&&t(yo),w(d6),w(m6),w(qh),w(Nh),w(g6),f&&t(FPe),f&&t(Ti),w(h6),f&&t(TPe),f&&t(Lo),w(p6),w(_6),w(Gh),w(b6),w(xu),f&&t(MPe),f&&t(Ci),w(v6),f&&t(EPe),f&&t(xo),w(F6),w(M6),w(ku),w(E6),w(b_),f&&t(CPe),f&&t(yi),w(C6),f&&t(wPe),f&&t($o),w(w6),w(y6),w(F_),w(L6),w(t1),f&&t(APe),f&&t($i),w(x6),f&&t(yPe),f&&t(ko),w($6),w(S6),w(n1),w(R6),w(O1),f&&t(LPe),f&&t(Ri),w(B6),f&&t(xPe),f&&t(So),w(P6),w(q6),w(X1),w(N6),w(db),f&&t($Pe),f&&t(Ii),w(j6),f&&t(kPe),f&&t(Ro),w(D6),w(O6),w(fb),w(V6),w(s4),f&&t(SPe),f&&t(ji),w(X6),f&&t(RPe),f&&t(Bo),w(z6),w(W6),w(i4),w(H6),w(j4),f&&t(BPe),f&&t(Oi),w(U6),f&&t(PPe),f&&t(Po),w(J6),w(K6),w(G4),w(Z6),w(H4),f&&t(IPe),f&&t(zi),w(ey),f&&t(qPe),f&&t(Io),w(oy),w(ty),w(J4),w(ay),w(k2),f&&t(NPe),f&&t(Hi),w(ny),f&&t(jPe),f&&t(qo),w(sy),w(iy),w(R2),w(dy),w(F5),f&&t(DPe),f&&t(Yi),w(cy),f&&t(GPe),f&&t(No),w(fy),w(gy),w(M5),w(hy),w(w5),f&&t(OPe),f&&t(ed),w(py),f&&t(VPe),f&&t(jo),w(uy),w(by),w(y5),w(vy),w(D5),f&&t(XPe),f&&t(td),w(Fy),f&&t(zPe),f&&t(Do),w(Ty),w(Ey),w(O5),w(Cy),w(z5),f&&t(QPe),f&&t(sd),w(wy),f&&t(WPe),f&&t(Go),w(Ay),w(Ly),w(W5),w(xy),w(tv),f&&t(HPe),f&&t(dd),w($y),f&&t(UPe),f&&t(Oo),w(ky),w(Ry),w(nv),w(By),w(fv),f&&t(JPe),f&&t(md),w(Py),f&&t(YPe),f&&t(Vo),w(Iy),w(Ny),w(gv),w(jy),w(Ev),f&&t(KPe),f&&t(pd),w(Dy),f&&t(ZPe),f&&t(Xo),w(Gy),w(Vy),w(wv),w(Xy),w(xv),f&&t(eIe),f&&t(bd),w(Qy),f&&t(oIe),f&&t(zo),w(Wy),w(Uy),w(kv),w(Jy),w(qv),f&&t(rIe),f&&t(Td),w(Yy),f&&t(tIe),f&&t(Qo),w(Ky),w(eL),w(jv),w(oL),w(Xv),f&&t(aIe),f&&t(wd),w(rL),f&&t(nIe),f&&t(Wo),w(tL),w(nL),w(Qv),w(sL),w(Jv),f&&t(sIe),f&&t(Ld),w(iL),f&&t(lIe),f&&t(Ho),w(dL),w(fL),w(Kv),w(mL),w(oF),f&&t(iIe),f&&t(kd),w(gL),f&&t(dIe),f&&t(Uo),w(hL),w(uL),w(tF),w(_L),w(dF),f&&t(cIe),f&&t(Bd),w(bL),f&&t(fIe),f&&t(Jo),w(vL),w(TL),w(fF),w(ML),w(hF),f&&t(mIe),f&&t(qd),w(EL),f&&t(gIe),f&&t(Yo),w(CL),w(AL),w(uF),w(yL),w(l0),f&&t(hIe),f&&t(Dd),w(LL),f&&t(pIe),f&&t(Ko),w(xL),w(kL),w(d0),w(SL),w(R0),f&&t(uIe),f&&t(Vd),w(RL),f&&t(_Ie),f&&t(Zo),w(BL),w(IL),w(P0),w(qL),w(H0),f&&t(bIe),f&&t(Qd),w(NL),f&&t(vIe),f&&t(er),w(jL),w(GL),w(J0),w(OL),w(eT),f&&t(FIe),f&&t(Jd),w(VL),f&&t(TIe),f&&t(or),w(XL),w(QL),w(rT),w(WL),w(ET),f&&t(MIe),f&&t(Zd),w(HL),f&&t(EIe),f&&t(rr),w(UL),w(YL),w(wT),w(KL),w(IT),f&&t(CIe),f&&t(rc),w(ZL),f&&t(wIe),f&&t(tr),w(e8),w(r8),w(NT),w(t8),w(f7),f&&t(AIe),f&&t(nc),w(a8),f&&t(yIe),f&&t(ar),w(n8),w(l8),w(g7),w(i8),w(k7),f&&t(LIe),f&&t(ic),w(d8),f&&t(xIe),f&&t(nr),w(c8),w(m8),w(R7),w(g8),w(I7),f&&t($Ie),f&&t(fc),w(p8),f&&t(kIe),f&&t(sr),w(u8),w(b8),w(N7),w(v8),w(D7),f&&t(SIe),f&&t(hc),w(F8),f&&t(RIe),f&&t(lr),w(T8),w(E8),w(O7),w(C8),w(dM),f&&t(BIe),f&&t(_c),w(w8),f&&t(PIe),f&&t(ir),w(A8),w(L8),w(fM),w(x8),w(SM),f&&t(IIe),f&&t(Fc),w($8),f&&t(qIe),f&&t(dr),w(k8),w(R8),w(BM),w(B8),w(IM),f&&t(NIe),f&&t(Ec),w(P8),f&&t(jIe),f&&t(cr),w(I8),w(N8),w(NM),w(j8),w(DM),f&&t(DIe),f&&t(Ac),w(D8),f&&t(GIe),f&&t(fr),w(G8),w(V8),w(OM),w(X8),w(hE),f&&t(OIe),f&&t(xc),w(z8),f&&t(VIe),f&&t(mr),w(Q8),w(H8),w(uE),w(U8),w(AE),f&&t(XIe),f&&t(Sc),w(J8),f&&t(zIe),f&&t(gr),w(Y8),w(Z8),w(LE),w(ex),w(GE),f&&t(QIe),f&&t(Pc),w(ox),f&&t(WIe),f&&t(hr),w(rx),w(ax),w(VE),w(nx),w(eC),f&&t(HIe),f&&t(Nc),w(sx),f&&t(UIe),f&&t(pr),w(lx),w(dx),w(rC),w(cx),w(mC),f&&t(JIe),f&&t(Gc),w(fx),f&&t(YIe),f&&t(ur),w(mx),w(hx),w(hC),w(px),w(wC),f&&t(KIe),f&&t(Xc),w(ux),f&&t(ZIe),f&&t(_r),w(_x),w(vx),w(yC),w(Fx),w(NC),f&&t(eqe),f&&t(Wc),w(Tx),f&&t(oqe),f&&t(br),w(Mx),w(Cx),w(DC),w(wx),w(UC),f&&t(rqe),f&&t(Jc),w(Ax),f&&t(tqe),f&&t(vr),w(yx),w(xx),w(YC),w($x),w(s3),f&&t(aqe),f&&t(Zc),w(kx),f&&t(nqe),f&&t(Fr),w(Sx),w(Bx),w(i3),w(Px),w(c3),f&&t(sqe),f&&t(rf),w(Ix),f&&t(lqe),f&&t(Tr),w(qx),w(jx),w(m3),w(Dx),w(p3),f&&t(iqe),f&&t(nf),w(Ox),f&&t(dqe),f&&t(Mr),w(Vx),w(zx),w(_3),w(Qx),w(v3)}}}const v6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function F6t(A){return Fwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class y6t extends uwt{constructor(g){super();_wt(this,g,F6t,b6t,bwt,{})}}export{y6t as default,v6t as metadata};
