import{S as $n,i as wn,s as vn,e as r,k as c,w as b,t as o,L as yn,c as i,d as a,m as h,a as l,x as $,h as n,b as m,J as t,g as p,y as w,q as v,o as y,B as q}from"../../chunks/vendor-9e2b328e.js";import{T as Ma}from"../../chunks/Tip-76f97a76.js";import{Y as qn}from"../../chunks/Youtube-cb4469d8.js";import{I as Ft}from"../../chunks/IconCopyLink-fd0e58fd.js";import{C as A}from"../../chunks/CodeBlock-88e23343.js";import{C as kn}from"../../chunks/CodeBlockFw-9c69f7d0.js";import"../../chunks/CopyButton-4ae140ab.js";function jn(P){let f,k,u,g,S;return{c(){f=r("p"),k=o("See the summarization "),u=r("a"),g=o("task page"),S=o(" for more information about its associated models, datasets, and metrics."),this.h()},l(d){f=i(d,"P",{});var _=l(f);k=n(_,"See the summarization "),u=i(_,"A",{href:!0,rel:!0});var E=l(u);g=n(E,"task page"),E.forEach(a),S=n(_," for more information about its associated models, datasets, and metrics."),_.forEach(a),this.h()},h(){m(u,"href","https://huggingface.co/tasks/summarization"),m(u,"rel","nofollow")},m(d,_){p(d,f,_),t(f,k),t(f,u),t(u,g),t(f,S)},d(d){d&&a(f)}}}function Sn(P){let f,k,u,g,S,d,_,E;return{c(){f=r("p"),k=o("If you aren\u2019t familiar with fine-tuning a model with the "),u=r("a"),g=o("Trainer"),S=o(", take a look at the basic tutorial "),d=r("a"),_=o("here"),E=o("!"),this.h()},l(z){f=i(z,"P",{});var j=l(f);k=n(j,"If you aren\u2019t familiar with fine-tuning a model with the "),u=i(j,"A",{href:!0});var x=l(u);g=n(x,"Trainer"),x.forEach(a),S=n(j,", take a look at the basic tutorial "),d=i(j,"A",{href:!0});var D=l(d);_=n(D,"here"),D.forEach(a),E=n(j,"!"),j.forEach(a),this.h()},h(){m(u,"href","/docs/transformers/pr_15729/en/main_classes/trainer#transformers.Trainer"),m(d,"href","training#finetune-with-trainer")},m(z,j){p(z,f,j),t(f,k),t(f,u),t(u,g),t(f,S),t(f,d),t(d,_),t(f,E)},d(z){z&&a(f)}}}function En(P){let f,k,u,g,S;return{c(){f=r("p"),k=o("If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),u=r("a"),g=o("here"),S=o("!"),this.h()},l(d){f=i(d,"P",{});var _=l(f);k=n(_,"If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),u=i(_,"A",{href:!0});var E=l(u);g=n(E,"here"),E.forEach(a),S=n(_,"!"),_.forEach(a),this.h()},h(){m(u,"href","training#finetune-with-keras")},m(d,_){p(d,f,_),t(f,k),t(f,u),t(u,g),t(f,S)},d(d){d&&a(f)}}}function zn(P){let f,k,u,g,S,d,_,E;return{c(){f=r("p"),k=o(`For a more in-depth example of how to fine-tune a model for summarization, take a look at the corresponding
`),u=r("a"),g=o("PyTorch notebook"),S=o(`
or `),d=r("a"),_=o("TensorFlow notebook"),E=o("."),this.h()},l(z){f=i(z,"P",{});var j=l(f);k=n(j,`For a more in-depth example of how to fine-tune a model for summarization, take a look at the corresponding
`),u=i(j,"A",{href:!0,rel:!0});var x=l(u);g=n(x,"PyTorch notebook"),x.forEach(a),S=n(j,`
or `),d=i(j,"A",{href:!0,rel:!0});var D=l(d);_=n(D,"TensorFlow notebook"),D.forEach(a),E=n(j,"."),j.forEach(a),this.h()},h(){m(u,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/master/examples/summarization.ipynb"),m(u,"rel","nofollow"),m(d,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/master/examples/summarization-tf.ipynb"),m(d,"rel","nofollow")},m(z,j){p(z,f,j),t(f,k),t(f,u),t(u,g),t(f,S),t(f,d),t(d,_),t(f,E)},d(z){z&&a(f)}}}function Tn(P){let f,k,u,g,S,d,_,E,z,j,x,D,Me,Ia,Pt,G,at,Oa,Na,st,Ba,Dt,L,Ua,ie,Ha,Wa,le,Ya,Ga,Lt,J,Mt,U,K,ot,pe,Ja,nt,Ka,It,Ie,Xa,Ot,ce,Nt,Oe,Qa,Bt,he,Ut,Ne,Ra,Ht,fe,Wt,M,Va,rt,Za,es,it,ts,as,Yt,H,X,lt,me,ss,pt,os,Gt,I,ns,ct,rs,is,ht,ls,ps,Jt,ue,Kt,Be,cs,Xt,O,ft,hs,fs,de,ms,mt,us,ds,gs,ge,_s,ut,bs,$s,Qt,_e,Rt,C,ws,be,dt,vs,ys,gt,qs,ks,_t,js,Ss,Vt,$e,Zt,T,Es,Ue,zs,Ts,bt,xs,As,$t,Cs,Fs,wt,Ps,Ds,ea,we,ta,W,Q,vt,ve,Ls,yt,Ms,aa,R,Is,He,Os,Ns,sa,ye,oa,V,na,We,Bs,ra,N,qe,Us,Ye,Hs,Ws,Ys,ke,Gs,Ge,Js,Ks,Xs,je,Qs,Je,Rs,Vs,ia,Se,la,Y,Z,qt,Ee,Zs,kt,eo,pa,Ke,to,ca,ee,ha,F,ao,jt,so,oo,ze,St,no,ro,Et,io,lo,fa,Te,ma,Xe,po,ua,xe,da,te,co,Qe,ho,fo,ga,Ae,_a,ae,mo,Ce,zt,uo,go,ba,Fe,$a,se,_o,Pe,Tt,bo,$o,wa,De,va,oe,ya;return d=new Ft({}),x=new qn({props:{id:"yHnr5Dk2zCI"}}),J=new Ma({props:{$$slots:{default:[jn]},$$scope:{ctx:P}}}),pe=new Ft({}),ce=new A({props:{code:`from datasets import load_dataset

billsum = load_dataset("billsum", split="ca_test"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>billsum = load_dataset(<span class="hljs-string">&quot;billsum&quot;</span>, split=<span class="hljs-string">&quot;ca_test&quot;</span>)`}}),he=new A({props:{code:"billsum = billsum.train_test_split(test_size=0.2),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>billsum = billsum.train_test_split(test_size=<span class="hljs-number">0.2</span>)'}}),fe=new A({props:{code:'billsum["train"][0],',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>billsum[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;summary&#x27;</span>: <span class="hljs-string">&#x27;Existing law authorizes state agencies to enter into contracts for the acquisition of goods or services upon approval by the Department of General Services. Existing law sets forth various requirements and prohibitions for those contracts, including, but not limited to, a prohibition on entering into contracts for the acquisition of goods or services of $100,000 or more with a contractor that discriminates between spouses and domestic partners or same-sex and different-sex couples in the provision of benefits. Existing law provides that a contract entered into in violation of those requirements and prohibitions is void and authorizes the state or any person acting on behalf of the state to bring a civil action seeking a determination that a contract is in violation and therefore void. Under existing law, a willful violation of those requirements and prohibitions is a misdemeanor.\\nThis bill would also prohibit a state agency from entering into contracts for the acquisition of goods or services of $100,000 or more with a contractor that discriminates between employees on the basis of gender identity in the provision of benefits, as specified. By expanding the scope of a crime, this bill would impose a state-mandated local program.\\nThe California Constitution requires the state to reimburse local agencies and school districts for certain costs mandated by the state. Statutory provisions establish procedures for making that reimbursement.\\nThis bill would provide that no reimbursement is required by this act for a specified reason.&#x27;</span>,
 <span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;The people of the State of California do enact as follows:\\n\\n\\nSECTION 1.\\nSection 10295.35 is added to the Public Contract Code, to read:\\n10295.35.\\n(a) (1) Notwithstanding any other law, a state agency shall not enter into any contract for the acquisition of goods or services in the amount of one hundred thousand dollars ($100,000) or more with a contractor that, in the provision of benefits, discriminates between employees on the basis of an employee\u2019s or dependent\u2019s actual or perceived gender identity, including, but not limited to, the employee\u2019s or dependent\u2019s identification as transgender.\\n(2) For purposes of this section, \u201Ccontract\u201D includes contracts with a cumulative amount of one hundred thousand dollars ($100,000) or more per contractor in each fiscal year.\\n(3) For purposes of this section, an employee health plan is discriminatory if the plan is not consistent with Section 1365.5 of the Health and Safety Code and Section 10140 of the Insurance Code.\\n(4) The requirements of this section shall apply only to those portions of a contractor\u2019s operations that occur under any of the following conditions:\\n(A) Within the state.\\n(B) On real property outside the state if the property is owned by the state or if the state has a right to occupy the property, and if the contractor\u2019s presence at that location is connected to a contract with the state.\\n(C) Elsewhere in the United States where work related to a state contract is being performed.\\n(b) Contractors shall treat as confidential, to the maximum extent allowed by law or by the requirement of the contractor\u2019s insurance provider, any request by an employee or applicant for employment benefits or any documentation of eligibility for benefits submitted by an employee or applicant for employment.\\n(c) After taking all reasonable measures to find a contractor that complies with this section, as determined by the state agency, the requirements of this section may be waived under any of the following circumstances:\\n(1) There is only one prospective contractor willing to enter into a specific contract with the state agency.\\n(2) The contract is necessary to respond to an emergency, as determined by the state agency, that endangers the public health, welfare, or safety, or the contract is necessary for the provision of essential services, and no entity that complies with the requirements of this section capable of responding to the emergency is immediately available.\\n(3) The requirements of this section violate, or are inconsistent with, the terms or conditions of a grant, subvention, or agreement, if the agency has made a good faith attempt to change the terms or conditions of any grant, subvention, or agreement to authorize application of this section.\\n(4) The contractor is providing wholesale or bulk water, power, or natural gas, the conveyance or transmission of the same, or ancillary services, as required for ensuring reliable services in accordance with good utility practice, if the purchase of the same cannot practically be accomplished through the standard competitive bidding procedures and the contractor is not providing direct retail services to end users.\\n(d) (1) A contractor shall not be deemed to discriminate in the provision of benefits if the contractor, in providing the benefits, pays the actual costs incurred in obtaining the benefit.\\n(2) If a contractor is unable to provide a certain benefit, despite taking reasonable measures to do so, the contractor shall not be deemed to discriminate in the provision of benefits.\\n(e) (1) Every contract subject to this chapter shall contain a statement by which the contractor certifies that the contractor is in compliance with this section.\\n(2) The department or other contracting agency shall enforce this section pursuant to its existing enforcement powers.\\n(3) (A) If a contractor falsely certifies that it is in compliance with this section, the contract with that contractor shall be subject to Article 9 (commencing with Section 10420), unless, within a time period specified by the department or other contracting agency, the contractor provides to the department or agency proof that it has complied, or is in the process of complying, with this section.\\n(B) The application of the remedies or penalties contained in Article 9 (commencing with Section 10420) to a contract subject to this chapter shall not preclude the application of any existing remedies otherwise available to the department or other contracting agency under its existing enforcement powers.\\n(f) Nothing in this section is intended to regulate the contracting practices of any local jurisdiction.\\n(g) This section shall be construed so as not to conflict with applicable federal laws, rules, or regulations. In the event that a court or agency of competent jurisdiction holds that federal law, rule, or regulation invalidates any clause, sentence, paragraph, or section of this code or the application thereof to any person or circumstances, it is the intent of the state that the court or agency sever that clause, sentence, paragraph, or section so that the remainder of this section shall remain in effect.\\nSEC. 2.\\nSection 10295.35 of the Public Contract Code shall not be construed to create any new enforcement authority or responsibility in the Department of General Services or any other contracting agency.\\nSEC. 3.\\nNo reimbursement is required by this act pursuant to Section 6 of Article XIII\\u2009B of the California Constitution because the only costs that may be incurred by a local agency or school district will be incurred because this act creates a new crime or infraction, eliminates a crime or infraction, or changes the penalty for a crime or infraction, within the meaning of Section 17556 of the Government Code, or changes the definition of a crime within the meaning of Section 6 of Article XIII\\u2009B of the California Constitution.&#x27;</span>,
 <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;An act to add Section 10295.35 to the Public Contract Code, relating to public contracts.&#x27;</span>}`}}),me=new Ft({}),ue=new A({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("t5-small"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;t5-small&quot;</span>)`}}),_e=new A({props:{code:`prefix = "summarize: "


def preprocess_function(examples):
    inputs = [prefix + doc for doc in examples["text"]]
    model_inputs = tokenizer(inputs, max_length=1024, truncation=True)

    with tokenizer.as_target_tokenizer():
        labels = tokenizer(examples["summary"], max_length=128, truncation=True)

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>prefix = <span class="hljs-string">&quot;summarize: &quot;</span>


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    inputs = [prefix + doc <span class="hljs-keyword">for</span> doc <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;text&quot;</span>]]
<span class="hljs-meta">... </span>    model_inputs = tokenizer(inputs, max_length=<span class="hljs-number">1024</span>, truncation=<span class="hljs-literal">True</span>)

<span class="hljs-meta">... </span>    <span class="hljs-keyword">with</span> tokenizer.as_target_tokenizer():
<span class="hljs-meta">... </span>        labels = tokenizer(examples[<span class="hljs-string">&quot;summary&quot;</span>], max_length=<span class="hljs-number">128</span>, truncation=<span class="hljs-literal">True</span>)

<span class="hljs-meta">... </span>    model_inputs[<span class="hljs-string">&quot;labels&quot;</span>] = labels[<span class="hljs-string">&quot;input_ids&quot;</span>]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> model_inputs`}}),$e=new A({props:{code:"tokenized_billsum = billsum.map(preprocess_function, batched=True),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_billsum = billsum.<span class="hljs-built_in">map</span>(preprocess_function, batched=<span class="hljs-literal">True</span>)'}}),we=new kn({props:{pt:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model)`},tf:{code:`from transformers import DataCollatorForSeq2Seq

data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model, return_tensors="tf")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForSeq2Seq(tokenizer=tokenizer, model=model, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}}),ve=new Ft({}),ye=new A({props:{code:`from transformers import AutoModelForSeq2SeqLM, Seq2SeqTrainingArguments, Seq2SeqTrainer

model = AutoModelForSeq2SeqLM.from_pretrained("t5-small"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSeq2SeqLM, Seq2SeqTrainingArguments, Seq2SeqTrainer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-small&quot;</span>)`}}),V=new Ma({props:{$$slots:{default:[Sn]},$$scope:{ctx:P}}}),Se=new A({props:{code:`training_args = Seq2SeqTrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=1,
    fp16=True,
)

trainer = Seq2SeqTrainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_billsum["train"],
    eval_dataset=tokenized_billsum["test"],
    tokenizer=tokenizer,
    data_collator=data_collator,
)

trainer.train(),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = Seq2SeqTrainingArguments(
<span class="hljs-meta">... </span>    output_dir=<span class="hljs-string">&quot;./results&quot;</span>,
<span class="hljs-meta">... </span>    evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
<span class="hljs-meta">... </span>    learning_rate=<span class="hljs-number">2e-5</span>,
<span class="hljs-meta">... </span>    per_device_train_batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    per_device_eval_batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    weight_decay=<span class="hljs-number">0.01</span>,
<span class="hljs-meta">... </span>    save_total_limit=<span class="hljs-number">3</span>,
<span class="hljs-meta">... </span>    num_train_epochs=<span class="hljs-number">1</span>,
<span class="hljs-meta">... </span>    fp16=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Seq2SeqTrainer(
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    train_dataset=tokenized_billsum[<span class="hljs-string">&quot;train&quot;</span>],
<span class="hljs-meta">... </span>    eval_dataset=tokenized_billsum[<span class="hljs-string">&quot;test&quot;</span>],
<span class="hljs-meta">... </span>    tokenizer=tokenizer,
<span class="hljs-meta">... </span>    data_collator=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.train()`}}),Ee=new Ft({}),ee=new Ma({props:{$$slots:{default:[En]},$$scope:{ctx:P}}}),Te=new A({props:{code:`tf_train_set = tokenized_billsum["train"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    shuffle=True,
    batch_size=16,
    collate_fn=data_collator,
)

tf_test_set = tokenized_billsum["test"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    shuffle=False,
    batch_size=16,
    collate_fn=data_collator,
),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_train_set = tokenized_billsum[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_test_set = tokenized_billsum[<span class="hljs-string">&quot;test&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),xe=new A({props:{code:`from transformers import create_optimizer, AdamWeightDecay

optimizer = AdamWeightDecay(learning_rate=2e-5, weight_decay_rate=0.01),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer, AdamWeightDecay

<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = AdamWeightDecay(learning_rate=<span class="hljs-number">2e-5</span>, weight_decay_rate=<span class="hljs-number">0.01</span>)`}}),Ae=new A({props:{code:`from transformers import TFAutoModelForSeq2SeqLM

model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-small"),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-small&quot;</span>)`}}),Fe=new A({props:{code:"model.compile(optimizer=optimizer),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)'}}),De=new A({props:{code:"model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=3),",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=<span class="hljs-number">3</span>)'}}),oe=new Ma({props:{$$slots:{default:[zn]},$$scope:{ctx:P}}}),{c(){f=r("meta"),k=c(),u=r("h1"),g=r("a"),S=r("span"),b(d.$$.fragment),_=c(),E=r("span"),z=o("Summarization"),j=c(),b(x.$$.fragment),D=c(),Me=r("p"),Ia=o("Summarization creates a shorter version of a document or an article that captures all the important information. Along with translation, it is another example of a task that can be formulated as a sequence-to-sequence task. Summarization can be:"),Pt=c(),G=r("ul"),at=r("li"),Oa=o("Extractive: extract the most relevant information from a document."),Na=c(),st=r("li"),Ba=o("Abstractive: generate new text that captures the most relevant information."),Dt=c(),L=r("p"),Ua=o("This guide will show you how to fine-tune "),ie=r("a"),Ha=o("T5"),Wa=o(" on the California state bill subset of the "),le=r("a"),Ya=o("BillSum"),Ga=o(" dataset for abstractive summarization."),Lt=c(),b(J.$$.fragment),Mt=c(),U=r("h2"),K=r("a"),ot=r("span"),b(pe.$$.fragment),Ja=c(),nt=r("span"),Ka=o("Load BillSum dataset"),It=c(),Ie=r("p"),Xa=o("Load the BillSum dataset from the \u{1F917} Datasets library:"),Ot=c(),b(ce.$$.fragment),Nt=c(),Oe=r("p"),Qa=o("Split this dataset into a train and test set:"),Bt=c(),b(he.$$.fragment),Ut=c(),Ne=r("p"),Ra=o("Then take a look at an example:"),Ht=c(),b(fe.$$.fragment),Wt=c(),M=r("p"),Va=o("The "),rt=r("code"),Za=o("text"),es=o(" field is the input and the "),it=r("code"),ts=o("summary"),as=o(" field is the target."),Yt=c(),H=r("h2"),X=r("a"),lt=r("span"),b(me.$$.fragment),ss=c(),pt=r("span"),os=o("Preprocess"),Gt=c(),I=r("p"),ns=o("Load the T5 tokenizer to process "),ct=r("code"),rs=o("text"),is=o(" and "),ht=r("code"),ls=o("summary"),ps=o(":"),Jt=c(),b(ue.$$.fragment),Kt=c(),Be=r("p"),cs=o("The preprocessing function needs to:"),Xt=c(),O=r("ol"),ft=r("li"),hs=o("Prefix the input with a prompt so T5 knows this is a summarization task. Some models capable of multiple NLP tasks require prompting for specific tasks."),fs=c(),de=r("li"),ms=o("Use a context manager with the "),mt=r("code"),us=o("as_target_tokenizer()"),ds=o(" function to parallelize tokenization of inputs and labels."),gs=c(),ge=r("li"),_s=o("Truncate sequences to be no longer than the maximum length set by the "),ut=r("code"),bs=o("max_length"),$s=o(" parameter."),Qt=c(),b(_e.$$.fragment),Rt=c(),C=r("p"),ws=o("Use \u{1F917} Datasets "),be=r("a"),dt=r("code"),vs=o("map"),ys=o(" function to apply the preprocessing function over the entire dataset. You can speed up the "),gt=r("code"),qs=o("map"),ks=o(" function by setting "),_t=r("code"),js=o("batched=True"),Ss=o(" to process multiple elements of the dataset at once:"),Vt=c(),b($e.$$.fragment),Zt=c(),T=r("p"),Es=o("Use "),Ue=r("a"),zs=o("DataCollatorForSeq2Seq"),Ts=o(" to create a batch of examples. It will also "),bt=r("em"),xs=o("dynamically pad"),As=o(" your text and labels to the length of the longest element in its batch, so they are a uniform length. While it is possible to pad your text in the "),$t=r("code"),Cs=o("tokenizer"),Fs=o(" function by setting "),wt=r("code"),Ps=o("padding=True"),Ds=o(", dynamic padding is more efficient."),ea=c(),b(we.$$.fragment),ta=c(),W=r("h2"),Q=r("a"),vt=r("span"),b(ve.$$.fragment),Ls=c(),yt=r("span"),Ms=o("Fine-tune with Trainer"),aa=c(),R=r("p"),Is=o("Load T5 with "),He=r("a"),Os=o("AutoModelForSeq2SeqLM"),Ns=o(":"),sa=c(),b(ye.$$.fragment),oa=c(),b(V.$$.fragment),na=c(),We=r("p"),Bs=o("At this point, only three steps remain:"),ra=c(),N=r("ol"),qe=r("li"),Us=o("Define your training hyperparameters in "),Ye=r("a"),Hs=o("Seq2SeqTrainingArguments"),Ws=o("."),Ys=c(),ke=r("li"),Gs=o("Pass the training arguments to "),Ge=r("a"),Js=o("Seq2SeqTrainer"),Ks=o(" along with the model, dataset, tokenizer, and data collator."),Xs=c(),je=r("li"),Qs=o("Call "),Je=r("a"),Rs=o("train()"),Vs=o(" to fine-tune your model."),ia=c(),b(Se.$$.fragment),la=c(),Y=r("h2"),Z=r("a"),qt=r("span"),b(Ee.$$.fragment),Zs=c(),kt=r("span"),eo=o("Fine-tune with TensorFlow"),pa=c(),Ke=r("p"),to=o("To fine-tune a model in TensorFlow is just as easy, with only a few differences."),ca=c(),b(ee.$$.fragment),ha=c(),F=r("p"),ao=o("Convert your datasets to the "),jt=r("code"),so=o("tf.data.Dataset"),oo=o(" format with "),ze=r("a"),St=r("code"),no=o("to_tf_dataset"),ro=o(". Specify inputs and labels in "),Et=r("code"),io=o("columns"),lo=o(", whether to shuffle the dataset order, batch size, and the data collator:"),fa=c(),b(Te.$$.fragment),ma=c(),Xe=r("p"),po=o("Set up an optimizer function, learning rate schedule, and some training hyperparameters:"),ua=c(),b(xe.$$.fragment),da=c(),te=r("p"),co=o("Load T5 with "),Qe=r("a"),ho=o("TFAutoModelForSeq2SeqLM"),fo=o(":"),ga=c(),b(Ae.$$.fragment),_a=c(),ae=r("p"),mo=o("Configure the model for training with "),Ce=r("a"),zt=r("code"),uo=o("compile"),go=o(":"),ba=c(),b(Fe.$$.fragment),$a=c(),se=r("p"),_o=o("Call "),Pe=r("a"),Tt=r("code"),bo=o("fit"),$o=o(" to fine-tune the model:"),wa=c(),b(De.$$.fragment),va=c(),b(oe.$$.fragment),this.h()},l(e){const s=yn('[data-svelte="svelte-1phssyn"]',document.head);f=i(s,"META",{name:!0,content:!0}),s.forEach(a),k=h(e),u=i(e,"H1",{class:!0});var Le=l(u);g=i(Le,"A",{id:!0,class:!0,href:!0});var xt=l(g);S=i(xt,"SPAN",{});var At=l(S);$(d.$$.fragment,At),At.forEach(a),xt.forEach(a),_=h(Le),E=i(Le,"SPAN",{});var Ct=l(E);z=n(Ct,"Summarization"),Ct.forEach(a),Le.forEach(a),j=h(e),$(x.$$.fragment,e),D=h(e),Me=i(e,"P",{});var wo=l(Me);Ia=n(wo,"Summarization creates a shorter version of a document or an article that captures all the important information. Along with translation, it is another example of a task that can be formulated as a sequence-to-sequence task. Summarization can be:"),wo.forEach(a),Pt=h(e),G=i(e,"UL",{});var qa=l(G);at=i(qa,"LI",{});var vo=l(at);Oa=n(vo,"Extractive: extract the most relevant information from a document."),vo.forEach(a),Na=h(qa),st=i(qa,"LI",{});var yo=l(st);Ba=n(yo,"Abstractive: generate new text that captures the most relevant information."),yo.forEach(a),qa.forEach(a),Dt=h(e),L=i(e,"P",{});var Re=l(L);Ua=n(Re,"This guide will show you how to fine-tune "),ie=i(Re,"A",{href:!0,rel:!0});var qo=l(ie);Ha=n(qo,"T5"),qo.forEach(a),Wa=n(Re," on the California state bill subset of the "),le=i(Re,"A",{href:!0,rel:!0});var ko=l(le);Ya=n(ko,"BillSum"),ko.forEach(a),Ga=n(Re," dataset for abstractive summarization."),Re.forEach(a),Lt=h(e),$(J.$$.fragment,e),Mt=h(e),U=i(e,"H2",{class:!0});var ka=l(U);K=i(ka,"A",{id:!0,class:!0,href:!0});var jo=l(K);ot=i(jo,"SPAN",{});var So=l(ot);$(pe.$$.fragment,So),So.forEach(a),jo.forEach(a),Ja=h(ka),nt=i(ka,"SPAN",{});var Eo=l(nt);Ka=n(Eo,"Load BillSum dataset"),Eo.forEach(a),ka.forEach(a),It=h(e),Ie=i(e,"P",{});var zo=l(Ie);Xa=n(zo,"Load the BillSum dataset from the \u{1F917} Datasets library:"),zo.forEach(a),Ot=h(e),$(ce.$$.fragment,e),Nt=h(e),Oe=i(e,"P",{});var To=l(Oe);Qa=n(To,"Split this dataset into a train and test set:"),To.forEach(a),Bt=h(e),$(he.$$.fragment,e),Ut=h(e),Ne=i(e,"P",{});var xo=l(Ne);Ra=n(xo,"Then take a look at an example:"),xo.forEach(a),Ht=h(e),$(fe.$$.fragment,e),Wt=h(e),M=i(e,"P",{});var Ve=l(M);Va=n(Ve,"The "),rt=i(Ve,"CODE",{});var Ao=l(rt);Za=n(Ao,"text"),Ao.forEach(a),es=n(Ve," field is the input and the "),it=i(Ve,"CODE",{});var Co=l(it);ts=n(Co,"summary"),Co.forEach(a),as=n(Ve," field is the target."),Ve.forEach(a),Yt=h(e),H=i(e,"H2",{class:!0});var ja=l(H);X=i(ja,"A",{id:!0,class:!0,href:!0});var Fo=l(X);lt=i(Fo,"SPAN",{});var Po=l(lt);$(me.$$.fragment,Po),Po.forEach(a),Fo.forEach(a),ss=h(ja),pt=i(ja,"SPAN",{});var Do=l(pt);os=n(Do,"Preprocess"),Do.forEach(a),ja.forEach(a),Gt=h(e),I=i(e,"P",{});var Ze=l(I);ns=n(Ze,"Load the T5 tokenizer to process "),ct=i(Ze,"CODE",{});var Lo=l(ct);rs=n(Lo,"text"),Lo.forEach(a),is=n(Ze," and "),ht=i(Ze,"CODE",{});var Mo=l(ht);ls=n(Mo,"summary"),Mo.forEach(a),ps=n(Ze,":"),Ze.forEach(a),Jt=h(e),$(ue.$$.fragment,e),Kt=h(e),Be=i(e,"P",{});var Io=l(Be);cs=n(Io,"The preprocessing function needs to:"),Io.forEach(a),Xt=h(e),O=i(e,"OL",{});var et=l(O);ft=i(et,"LI",{});var Oo=l(ft);hs=n(Oo,"Prefix the input with a prompt so T5 knows this is a summarization task. Some models capable of multiple NLP tasks require prompting for specific tasks."),Oo.forEach(a),fs=h(et),de=i(et,"LI",{});var Sa=l(de);ms=n(Sa,"Use a context manager with the "),mt=i(Sa,"CODE",{});var No=l(mt);us=n(No,"as_target_tokenizer()"),No.forEach(a),ds=n(Sa," function to parallelize tokenization of inputs and labels."),Sa.forEach(a),gs=h(et),ge=i(et,"LI",{});var Ea=l(ge);_s=n(Ea,"Truncate sequences to be no longer than the maximum length set by the "),ut=i(Ea,"CODE",{});var Bo=l(ut);bs=n(Bo,"max_length"),Bo.forEach(a),$s=n(Ea," parameter."),Ea.forEach(a),et.forEach(a),Qt=h(e),$(_e.$$.fragment,e),Rt=h(e),C=i(e,"P",{});var ne=l(C);ws=n(ne,"Use \u{1F917} Datasets "),be=i(ne,"A",{href:!0,rel:!0});var Uo=l(be);dt=i(Uo,"CODE",{});var Ho=l(dt);vs=n(Ho,"map"),Ho.forEach(a),Uo.forEach(a),ys=n(ne," function to apply the preprocessing function over the entire dataset. You can speed up the "),gt=i(ne,"CODE",{});var Wo=l(gt);qs=n(Wo,"map"),Wo.forEach(a),ks=n(ne," function by setting "),_t=i(ne,"CODE",{});var Yo=l(_t);js=n(Yo,"batched=True"),Yo.forEach(a),Ss=n(ne," to process multiple elements of the dataset at once:"),ne.forEach(a),Vt=h(e),$($e.$$.fragment,e),Zt=h(e),T=i(e,"P",{});var B=l(T);Es=n(B,"Use "),Ue=i(B,"A",{href:!0});var Go=l(Ue);zs=n(Go,"DataCollatorForSeq2Seq"),Go.forEach(a),Ts=n(B," to create a batch of examples. It will also "),bt=i(B,"EM",{});var Jo=l(bt);xs=n(Jo,"dynamically pad"),Jo.forEach(a),As=n(B," your text and labels to the length of the longest element in its batch, so they are a uniform length. While it is possible to pad your text in the "),$t=i(B,"CODE",{});var Ko=l($t);Cs=n(Ko,"tokenizer"),Ko.forEach(a),Fs=n(B," function by setting "),wt=i(B,"CODE",{});var Xo=l(wt);Ps=n(Xo,"padding=True"),Xo.forEach(a),Ds=n(B,", dynamic padding is more efficient."),B.forEach(a),ea=h(e),$(we.$$.fragment,e),ta=h(e),W=i(e,"H2",{class:!0});var za=l(W);Q=i(za,"A",{id:!0,class:!0,href:!0});var Qo=l(Q);vt=i(Qo,"SPAN",{});var Ro=l(vt);$(ve.$$.fragment,Ro),Ro.forEach(a),Qo.forEach(a),Ls=h(za),yt=i(za,"SPAN",{});var Vo=l(yt);Ms=n(Vo,"Fine-tune with Trainer"),Vo.forEach(a),za.forEach(a),aa=h(e),R=i(e,"P",{});var Ta=l(R);Is=n(Ta,"Load T5 with "),He=i(Ta,"A",{href:!0});var Zo=l(He);Os=n(Zo,"AutoModelForSeq2SeqLM"),Zo.forEach(a),Ns=n(Ta,":"),Ta.forEach(a),sa=h(e),$(ye.$$.fragment,e),oa=h(e),$(V.$$.fragment,e),na=h(e),We=i(e,"P",{});var en=l(We);Bs=n(en,"At this point, only three steps remain:"),en.forEach(a),ra=h(e),N=i(e,"OL",{});var tt=l(N);qe=i(tt,"LI",{});var xa=l(qe);Us=n(xa,"Define your training hyperparameters in "),Ye=i(xa,"A",{href:!0});var tn=l(Ye);Hs=n(tn,"Seq2SeqTrainingArguments"),tn.forEach(a),Ws=n(xa,"."),xa.forEach(a),Ys=h(tt),ke=i(tt,"LI",{});var Aa=l(ke);Gs=n(Aa,"Pass the training arguments to "),Ge=i(Aa,"A",{href:!0});var an=l(Ge);Js=n(an,"Seq2SeqTrainer"),an.forEach(a),Ks=n(Aa," along with the model, dataset, tokenizer, and data collator."),Aa.forEach(a),Xs=h(tt),je=i(tt,"LI",{});var Ca=l(je);Qs=n(Ca,"Call "),Je=i(Ca,"A",{href:!0});var sn=l(Je);Rs=n(sn,"train()"),sn.forEach(a),Vs=n(Ca," to fine-tune your model."),Ca.forEach(a),tt.forEach(a),ia=h(e),$(Se.$$.fragment,e),la=h(e),Y=i(e,"H2",{class:!0});var Fa=l(Y);Z=i(Fa,"A",{id:!0,class:!0,href:!0});var on=l(Z);qt=i(on,"SPAN",{});var nn=l(qt);$(Ee.$$.fragment,nn),nn.forEach(a),on.forEach(a),Zs=h(Fa),kt=i(Fa,"SPAN",{});var rn=l(kt);eo=n(rn,"Fine-tune with TensorFlow"),rn.forEach(a),Fa.forEach(a),pa=h(e),Ke=i(e,"P",{});var ln=l(Ke);to=n(ln,"To fine-tune a model in TensorFlow is just as easy, with only a few differences."),ln.forEach(a),ca=h(e),$(ee.$$.fragment,e),ha=h(e),F=i(e,"P",{});var re=l(F);ao=n(re,"Convert your datasets to the "),jt=i(re,"CODE",{});var pn=l(jt);so=n(pn,"tf.data.Dataset"),pn.forEach(a),oo=n(re," format with "),ze=i(re,"A",{href:!0,rel:!0});var cn=l(ze);St=i(cn,"CODE",{});var hn=l(St);no=n(hn,"to_tf_dataset"),hn.forEach(a),cn.forEach(a),ro=n(re,". Specify inputs and labels in "),Et=i(re,"CODE",{});var fn=l(Et);io=n(fn,"columns"),fn.forEach(a),lo=n(re,", whether to shuffle the dataset order, batch size, and the data collator:"),re.forEach(a),fa=h(e),$(Te.$$.fragment,e),ma=h(e),Xe=i(e,"P",{});var mn=l(Xe);po=n(mn,"Set up an optimizer function, learning rate schedule, and some training hyperparameters:"),mn.forEach(a),ua=h(e),$(xe.$$.fragment,e),da=h(e),te=i(e,"P",{});var Pa=l(te);co=n(Pa,"Load T5 with "),Qe=i(Pa,"A",{href:!0});var un=l(Qe);ho=n(un,"TFAutoModelForSeq2SeqLM"),un.forEach(a),fo=n(Pa,":"),Pa.forEach(a),ga=h(e),$(Ae.$$.fragment,e),_a=h(e),ae=i(e,"P",{});var Da=l(ae);mo=n(Da,"Configure the model for training with "),Ce=i(Da,"A",{href:!0,rel:!0});var dn=l(Ce);zt=i(dn,"CODE",{});var gn=l(zt);uo=n(gn,"compile"),gn.forEach(a),dn.forEach(a),go=n(Da,":"),Da.forEach(a),ba=h(e),$(Fe.$$.fragment,e),$a=h(e),se=i(e,"P",{});var La=l(se);_o=n(La,"Call "),Pe=i(La,"A",{href:!0,rel:!0});var _n=l(Pe);Tt=i(_n,"CODE",{});var bn=l(Tt);bo=n(bn,"fit"),bn.forEach(a),_n.forEach(a),$o=n(La," to fine-tune the model:"),La.forEach(a),wa=h(e),$(De.$$.fragment,e),va=h(e),$(oe.$$.fragment,e),this.h()},h(){m(f,"name","hf:doc:metadata"),m(f,"content",JSON.stringify(xn)),m(g,"id","summarization"),m(g,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(g,"href","#summarization"),m(u,"class","relative group"),m(ie,"href","https://huggingface.co/t5-small"),m(ie,"rel","nofollow"),m(le,"href","https://huggingface.co/datasets/billsum"),m(le,"rel","nofollow"),m(K,"id","load-billsum-dataset"),m(K,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(K,"href","#load-billsum-dataset"),m(U,"class","relative group"),m(X,"id","preprocess"),m(X,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(X,"href","#preprocess"),m(H,"class","relative group"),m(be,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.map"),m(be,"rel","nofollow"),m(Ue,"href","/docs/transformers/pr_15729/en/main_classes/data_collator#transformers.DataCollatorForSeq2Seq"),m(Q,"id","finetune-with-trainer"),m(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Q,"href","#finetune-with-trainer"),m(W,"class","relative group"),m(He,"href","/docs/transformers/pr_15729/en/model_doc/auto#transformers.AutoModelForSeq2SeqLM"),m(Ye,"href","/docs/transformers/pr_15729/en/main_classes/trainer#transformers.Seq2SeqTrainingArguments"),m(Ge,"href","/docs/transformers/pr_15729/en/main_classes/trainer#transformers.Seq2SeqTrainer"),m(Je,"href","/docs/transformers/pr_15729/en/main_classes/trainer#transformers.Trainer.train"),m(Z,"id","finetune-with-tensorflow"),m(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Z,"href","#finetune-with-tensorflow"),m(Y,"class","relative group"),m(ze,"href","https://huggingface.co/docs/datasets/package_reference/main_classes.html#datasets.Dataset.to_tf_dataset"),m(ze,"rel","nofollow"),m(Qe,"href","/docs/transformers/pr_15729/en/model_doc/auto#transformers.TFAutoModelForSeq2SeqLM"),m(Ce,"href","https://keras.io/api/models/model_training_apis/#compile-method"),m(Ce,"rel","nofollow"),m(Pe,"href","https://keras.io/api/models/model_training_apis/#fit-method"),m(Pe,"rel","nofollow")},m(e,s){t(document.head,f),p(e,k,s),p(e,u,s),t(u,g),t(g,S),w(d,S,null),t(u,_),t(u,E),t(E,z),p(e,j,s),w(x,e,s),p(e,D,s),p(e,Me,s),t(Me,Ia),p(e,Pt,s),p(e,G,s),t(G,at),t(at,Oa),t(G,Na),t(G,st),t(st,Ba),p(e,Dt,s),p(e,L,s),t(L,Ua),t(L,ie),t(ie,Ha),t(L,Wa),t(L,le),t(le,Ya),t(L,Ga),p(e,Lt,s),w(J,e,s),p(e,Mt,s),p(e,U,s),t(U,K),t(K,ot),w(pe,ot,null),t(U,Ja),t(U,nt),t(nt,Ka),p(e,It,s),p(e,Ie,s),t(Ie,Xa),p(e,Ot,s),w(ce,e,s),p(e,Nt,s),p(e,Oe,s),t(Oe,Qa),p(e,Bt,s),w(he,e,s),p(e,Ut,s),p(e,Ne,s),t(Ne,Ra),p(e,Ht,s),w(fe,e,s),p(e,Wt,s),p(e,M,s),t(M,Va),t(M,rt),t(rt,Za),t(M,es),t(M,it),t(it,ts),t(M,as),p(e,Yt,s),p(e,H,s),t(H,X),t(X,lt),w(me,lt,null),t(H,ss),t(H,pt),t(pt,os),p(e,Gt,s),p(e,I,s),t(I,ns),t(I,ct),t(ct,rs),t(I,is),t(I,ht),t(ht,ls),t(I,ps),p(e,Jt,s),w(ue,e,s),p(e,Kt,s),p(e,Be,s),t(Be,cs),p(e,Xt,s),p(e,O,s),t(O,ft),t(ft,hs),t(O,fs),t(O,de),t(de,ms),t(de,mt),t(mt,us),t(de,ds),t(O,gs),t(O,ge),t(ge,_s),t(ge,ut),t(ut,bs),t(ge,$s),p(e,Qt,s),w(_e,e,s),p(e,Rt,s),p(e,C,s),t(C,ws),t(C,be),t(be,dt),t(dt,vs),t(C,ys),t(C,gt),t(gt,qs),t(C,ks),t(C,_t),t(_t,js),t(C,Ss),p(e,Vt,s),w($e,e,s),p(e,Zt,s),p(e,T,s),t(T,Es),t(T,Ue),t(Ue,zs),t(T,Ts),t(T,bt),t(bt,xs),t(T,As),t(T,$t),t($t,Cs),t(T,Fs),t(T,wt),t(wt,Ps),t(T,Ds),p(e,ea,s),w(we,e,s),p(e,ta,s),p(e,W,s),t(W,Q),t(Q,vt),w(ve,vt,null),t(W,Ls),t(W,yt),t(yt,Ms),p(e,aa,s),p(e,R,s),t(R,Is),t(R,He),t(He,Os),t(R,Ns),p(e,sa,s),w(ye,e,s),p(e,oa,s),w(V,e,s),p(e,na,s),p(e,We,s),t(We,Bs),p(e,ra,s),p(e,N,s),t(N,qe),t(qe,Us),t(qe,Ye),t(Ye,Hs),t(qe,Ws),t(N,Ys),t(N,ke),t(ke,Gs),t(ke,Ge),t(Ge,Js),t(ke,Ks),t(N,Xs),t(N,je),t(je,Qs),t(je,Je),t(Je,Rs),t(je,Vs),p(e,ia,s),w(Se,e,s),p(e,la,s),p(e,Y,s),t(Y,Z),t(Z,qt),w(Ee,qt,null),t(Y,Zs),t(Y,kt),t(kt,eo),p(e,pa,s),p(e,Ke,s),t(Ke,to),p(e,ca,s),w(ee,e,s),p(e,ha,s),p(e,F,s),t(F,ao),t(F,jt),t(jt,so),t(F,oo),t(F,ze),t(ze,St),t(St,no),t(F,ro),t(F,Et),t(Et,io),t(F,lo),p(e,fa,s),w(Te,e,s),p(e,ma,s),p(e,Xe,s),t(Xe,po),p(e,ua,s),w(xe,e,s),p(e,da,s),p(e,te,s),t(te,co),t(te,Qe),t(Qe,ho),t(te,fo),p(e,ga,s),w(Ae,e,s),p(e,_a,s),p(e,ae,s),t(ae,mo),t(ae,Ce),t(Ce,zt),t(zt,uo),t(ae,go),p(e,ba,s),w(Fe,e,s),p(e,$a,s),p(e,se,s),t(se,_o),t(se,Pe),t(Pe,Tt),t(Tt,bo),t(se,$o),p(e,wa,s),w(De,e,s),p(e,va,s),w(oe,e,s),ya=!0},p(e,[s]){const Le={};s&2&&(Le.$$scope={dirty:s,ctx:e}),J.$set(Le);const xt={};s&2&&(xt.$$scope={dirty:s,ctx:e}),V.$set(xt);const At={};s&2&&(At.$$scope={dirty:s,ctx:e}),ee.$set(At);const Ct={};s&2&&(Ct.$$scope={dirty:s,ctx:e}),oe.$set(Ct)},i(e){ya||(v(d.$$.fragment,e),v(x.$$.fragment,e),v(J.$$.fragment,e),v(pe.$$.fragment,e),v(ce.$$.fragment,e),v(he.$$.fragment,e),v(fe.$$.fragment,e),v(me.$$.fragment,e),v(ue.$$.fragment,e),v(_e.$$.fragment,e),v($e.$$.fragment,e),v(we.$$.fragment,e),v(ve.$$.fragment,e),v(ye.$$.fragment,e),v(V.$$.fragment,e),v(Se.$$.fragment,e),v(Ee.$$.fragment,e),v(ee.$$.fragment,e),v(Te.$$.fragment,e),v(xe.$$.fragment,e),v(Ae.$$.fragment,e),v(Fe.$$.fragment,e),v(De.$$.fragment,e),v(oe.$$.fragment,e),ya=!0)},o(e){y(d.$$.fragment,e),y(x.$$.fragment,e),y(J.$$.fragment,e),y(pe.$$.fragment,e),y(ce.$$.fragment,e),y(he.$$.fragment,e),y(fe.$$.fragment,e),y(me.$$.fragment,e),y(ue.$$.fragment,e),y(_e.$$.fragment,e),y($e.$$.fragment,e),y(we.$$.fragment,e),y(ve.$$.fragment,e),y(ye.$$.fragment,e),y(V.$$.fragment,e),y(Se.$$.fragment,e),y(Ee.$$.fragment,e),y(ee.$$.fragment,e),y(Te.$$.fragment,e),y(xe.$$.fragment,e),y(Ae.$$.fragment,e),y(Fe.$$.fragment,e),y(De.$$.fragment,e),y(oe.$$.fragment,e),ya=!1},d(e){a(f),e&&a(k),e&&a(u),q(d),e&&a(j),q(x,e),e&&a(D),e&&a(Me),e&&a(Pt),e&&a(G),e&&a(Dt),e&&a(L),e&&a(Lt),q(J,e),e&&a(Mt),e&&a(U),q(pe),e&&a(It),e&&a(Ie),e&&a(Ot),q(ce,e),e&&a(Nt),e&&a(Oe),e&&a(Bt),q(he,e),e&&a(Ut),e&&a(Ne),e&&a(Ht),q(fe,e),e&&a(Wt),e&&a(M),e&&a(Yt),e&&a(H),q(me),e&&a(Gt),e&&a(I),e&&a(Jt),q(ue,e),e&&a(Kt),e&&a(Be),e&&a(Xt),e&&a(O),e&&a(Qt),q(_e,e),e&&a(Rt),e&&a(C),e&&a(Vt),q($e,e),e&&a(Zt),e&&a(T),e&&a(ea),q(we,e),e&&a(ta),e&&a(W),q(ve),e&&a(aa),e&&a(R),e&&a(sa),q(ye,e),e&&a(oa),q(V,e),e&&a(na),e&&a(We),e&&a(ra),e&&a(N),e&&a(ia),q(Se,e),e&&a(la),e&&a(Y),q(Ee),e&&a(pa),e&&a(Ke),e&&a(ca),q(ee,e),e&&a(ha),e&&a(F),e&&a(fa),q(Te,e),e&&a(ma),e&&a(Xe),e&&a(ua),q(xe,e),e&&a(da),e&&a(te),e&&a(ga),q(Ae,e),e&&a(_a),e&&a(ae),e&&a(ba),q(Fe,e),e&&a($a),e&&a(se),e&&a(wa),q(De,e),e&&a(va),q(oe,e)}}}const xn={local:"summarization",sections:[{local:"load-billsum-dataset",title:"Load BillSum dataset"},{local:"preprocess",title:"Preprocess"},{local:"finetune-with-trainer",title:"Fine-tune with Trainer"},{local:"finetune-with-tensorflow",title:"Fine-tune with TensorFlow"}],title:"Summarization"};function An(P,f,k){let{fw:u}=f;return P.$$set=g=>{"fw"in g&&k(0,u=g.fw)},[u]}class On extends $n{constructor(f){super();wn(this,f,An,Tn,vn,{fw:0})}}export{On as default,xn as metadata};
