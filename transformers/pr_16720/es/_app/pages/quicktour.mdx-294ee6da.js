import{D as Xp,S as Ge,i as Be,s as Je,O as I,P as N,a as n,d as r,b as d,g as $,F as s,L as ne,t as i,h as p,e as u,w as M,k as v,c as f,x as O,m as E,y as P,Q as ii,q as j,o as q,B as S,n as Aa,p as qa,Y as ec,v as Qp,Z as lo,X as tc,V as ac,H as Ds,I as Is,J as Ns,K as Fs,M as sc}from"../chunks/vendor-c570b7f7.js";import{T as ya}from"../chunks/Tip-4965f0b6.js";import{Y as Wp}from"../chunks/Youtube-ea859fc9.js";import{I as wt,C as Q}from"../chunks/CodeBlock-8a2530c2.js";import{D as rc}from"../chunks/DocNotebookDropdown-e51be72e.js";var Fe=(m=>(m.OPEN="OPEN",m.CLOSED="CLOSED",m.HASHASHLINK="HASHASHLINK",m))(Fe||{});const ni={};function oc(m){return ni[m]||(ni[m]=Xp("OPEN")),ni[m]}function lc(m){let e,l,a,o,c,_;return{c(){e=I("svg"),l=I("defs"),a=I("clipPath"),o=I("rect"),c=I("g"),_=I("path"),this.h()},l(g){e=N(g,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var b=n(e);l=N(b,"defs",{});var k=n(l);a=N(k,"clipPath",{id:!0});var C=n(a);o=N(C,"rect",{x:!0,y:!0,width:!0,height:!0,fill:!0}),n(o).forEach(r),C.forEach(r),k.forEach(r),c=N(b,"g",{"clip-path":!0});var A=n(c);_=N(A,"path",{d:!0,fill:!0}),n(_).forEach(r),A.forEach(r),b.forEach(r),this.h()},h(){d(o,"x","3.05"),d(o,"y","0.5"),d(o,"width","25.73"),d(o,"height","31"),d(o,"fill","none"),d(a,"id","a"),d(_,"d","M24.94,9.51a12.81,12.81,0,0,1,0,18.16,12.68,12.68,0,0,1-18,0,12.81,12.81,0,0,1,0-18.16l9-9V5l-.84.83-6,6a9.58,9.58,0,1,0,13.55,0ZM20.44,9a1.68,1.68,0,1,1,1.67-1.67A1.68,1.68,0,0,1,20.44,9Z"),d(_,"fill","#ee4c2c"),d(c,"clip-path","url(#a)"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 32 32")},m(g,b){$(g,e,b),s(e,l),s(l,a),s(a,o),s(e,c),s(c,_)},p(g,[b]){b&1&&d(e,"class",g[0])},i:ne,o:ne,d(g){g&&r(e)}}}function nc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class ic extends Ge{constructor(e){super();Be(this,e,nc,lc,Je,{classNames:0})}}function pc(m){let e,l,a,o;return{c(){e=I("svg"),l=I("path"),a=I("path"),o=I("path"),this.h()},l(c){e=N(c,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var _=n(e);l=N(_,"path",{d:!0,fill:!0}),n(l).forEach(r),a=N(_,"path",{d:!0,fill:!0}),n(a).forEach(r),o=N(_,"path",{d:!0,fill:!0}),n(o).forEach(r),_.forEach(r),this.h()},h(){d(l,"d","M145.726 42.065v42.07l72.861 42.07v-42.07l-72.86-42.07zM0 84.135v42.07l36.43 21.03V105.17L0 84.135zm109.291 21.035l-36.43 21.034v126.2l36.43 21.035v-84.135l36.435 21.035v-42.07l-36.435-21.034V105.17z"),d(l,"fill","#E55B2D"),d(a,"d","M145.726 42.065L36.43 105.17v42.065l72.861-42.065v42.065l36.435-21.03v-84.14zM255.022 63.1l-36.435 21.035v42.07l36.435-21.035V63.1zm-72.865 84.135l-36.43 21.035v42.07l36.43-21.036v-42.07zm-36.43 63.104l-36.436-21.035v84.135l36.435-21.035V210.34z"),d(a,"fill","#ED8E24"),d(o,"d","M145.726 0L0 84.135l36.43 21.035l109.296-63.105l72.861 42.07L255.022 63.1L145.726 0zm0 126.204l-36.435 21.03l36.435 21.036l36.43-21.035l-36.43-21.03z"),d(o,"fill","#F8BF3C"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","0.94em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 256 274")},m(c,_){$(c,e,_),s(e,l),s(e,a),s(e,o)},p(c,[_]){_&1&&d(e,"class",c[0])},i:ne,o:ne,d(c){c&&r(e)}}}function cc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class uc extends Ge{constructor(e){super();Be(this,e,cc,pc,Je,{classNames:0})}}function fc(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W,w,z,B,R,L,V,Y,K,J,oe,se,re,ue,ie,fe,le,X,pe,de,D,H,te,x,G,ce;return{c(){e=I("svg"),l=I("style"),a=i(`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),o=I("g"),c=I("path"),_=I("path"),g=I("path"),b=I("path"),k=I("path"),C=I("path"),A=I("path"),y=I("path"),T=I("g"),U=I("path"),F=I("path"),W=I("path"),w=I("g"),z=I("path"),B=I("path"),R=I("path"),L=I("g"),V=I("path"),Y=I("path"),K=I("g"),J=I("path"),oe=I("path"),se=I("path"),re=I("path"),ue=I("path"),ie=I("path"),fe=I("path"),le=I("path"),X=I("g"),pe=I("path"),de=I("path"),D=I("path"),H=I("path"),te=I("g"),x=I("path"),G=I("path"),ce=I("path"),this.h()},l($e){e=N($e,"svg",{class:!0,xmlns:!0,"xmlns:xlink":!0,"aria-hidden":!0,focusable:!0,role:!0,width:!0,height:!0,preserveAspectRatio:!0,viewBox:!0});var Z=n(e);l=N(Z,"style",{});var ke=n(l);a=p(ke,`.J {
			stroke: #dce0df;
		}
		.K {
			stroke-linejoin: round;
		}
	`),ke.forEach(r),o=N(Z,"g",{fill:!0,class:!0});var ae=n(o);c=N(ae,"path",{d:!0}),n(c).forEach(r),_=N(ae,"path",{d:!0}),n(_).forEach(r),g=N(ae,"path",{d:!0}),n(g).forEach(r),b=N(ae,"path",{d:!0}),n(b).forEach(r),k=N(ae,"path",{d:!0}),n(k).forEach(r),C=N(ae,"path",{d:!0}),n(C).forEach(r),A=N(ae,"path",{d:!0}),n(A).forEach(r),y=N(ae,"path",{d:!0}),n(y).forEach(r),ae.forEach(r),T=N(Z,"g",{fill:!0,class:!0});var je=n(T);U=N(je,"path",{d:!0}),n(U).forEach(r),F=N(je,"path",{d:!0}),n(F).forEach(r),W=N(je,"path",{d:!0}),n(W).forEach(r),je.forEach(r),w=N(Z,"g",{fill:!0,class:!0});var ve=n(w);z=N(ve,"path",{d:!0}),n(z).forEach(r),B=N(ve,"path",{d:!0}),n(B).forEach(r),ve.forEach(r),R=N(Z,"path",{d:!0,fill:!0,class:!0}),n(R).forEach(r),L=N(Z,"g",{fill:!0,class:!0});var qe=n(L);V=N(qe,"path",{d:!0}),n(V).forEach(r),Y=N(qe,"path",{d:!0}),n(Y).forEach(r),qe.forEach(r),K=N(Z,"g",{fill:!0,class:!0});var _e=n(K);J=N(_e,"path",{d:!0}),n(J).forEach(r),oe=N(_e,"path",{d:!0}),n(oe).forEach(r),se=N(_e,"path",{d:!0}),n(se).forEach(r),re=N(_e,"path",{d:!0}),n(re).forEach(r),ue=N(_e,"path",{d:!0}),n(ue).forEach(r),ie=N(_e,"path",{d:!0}),n(ie).forEach(r),fe=N(_e,"path",{d:!0}),n(fe).forEach(r),_e.forEach(r),le=N(Z,"path",{d:!0,fill:!0,class:!0}),n(le).forEach(r),X=N(Z,"g",{fill:!0,class:!0});var ee=n(X);pe=N(ee,"path",{d:!0}),n(pe).forEach(r),de=N(ee,"path",{d:!0}),n(de).forEach(r),D=N(ee,"path",{d:!0}),n(D).forEach(r),H=N(ee,"path",{d:!0}),n(H).forEach(r),ee.forEach(r),te=N(Z,"g",{fill:!0,class:!0});var Ce=n(te);x=N(Ce,"path",{d:!0}),n(x).forEach(r),G=N(Ce,"path",{d:!0}),n(G).forEach(r),ce=N(Ce,"path",{d:!0}),n(ce).forEach(r),Ce.forEach(r),Z.forEach(r),this.h()},h(){d(c,"d","M50.5 130.4l-25 43.31h50l25-43.31h-50z"),d(_,"d","M.5 217.01l25-43.3h50l-25 43.3H.5z"),d(g,"d","M125.5 173.71h-50l-25 43.3h50l25-43.3z"),d(b,"d","M175.5 173.71h-50l-25 43.3h50l25-43.3z"),d(k,"d","M150.5 130.4l-25 43.31h50l25-43.31h-50z"),d(C,"d","M175.5 87.1l-25 43.3h50l25-43.3h-50z"),d(A,"d","M200.5 43.8l-25 43.3h50l25-43.3h-50z"),d(y,"d","M225.5.5l-25 43.3h50l25-43.3h-50z"),d(o,"fill","#5e97f6"),d(o,"class","J K"),d(U,"d","M.5 217.01l25 43.3h50l-25-43.3H.5z"),d(F,"d","M125.5 260.31h-50l-25-43.3h50l25 43.3z"),d(W,"d","M175.5 260.31h-50l-25-43.3h50l25 43.3z"),d(T,"fill","#2a56c6"),d(T,"class","J K"),d(z,"d","M200.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zm50-86.61l-25-43.3-25 43.3h50z"),d(B,"d","M250.5 43.8l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(w,"fill","#00796b"),d(w,"class","J K"),d(R,"d","M125.5 173.71l-25-43.31-25 43.31h50z"),d(R,"fill","#3367d6"),d(R,"class","J K"),d(V,"d","M250.5 130.4h-50l-25 43.31h50l25-43.31z"),d(Y,"d","M300.5 130.4h-50l-25 43.31h50l25-43.31z"),d(L,"fill","#26a69a"),d(L,"class","J K"),d(J,"d","M350.5 43.8L325.5.5l-25 43.3 25 43.3 25-43.3z"),d(oe,"d","M375.5 87.1l-25-43.3-25 43.3 25 43.3 25-43.3z"),d(se,"d","M400.5 130.4l-25-43.3-25 43.3 25 43.31 25-43.31z"),d(re,"d","M425.5 173.71l-25-43.31-25 43.31 25 43.3 25-43.3z"),d(ue,"d","M450.5 217.01l-25-43.3-25 43.3 25 43.3 25-43.3zM425.5.5l-25 43.3 25 43.3 25-43.3-25-43.3z"),d(ie,"d","M375.5 87.1l25-43.3 25 43.3-25 43.3-25-43.3zm-25 43.3l-25 43.31 25 43.3 25-43.3-25-43.31z"),d(fe,"d","M325.5 260.31l-25-43.3 25-43.3 25 43.3-25 43.3z"),d(K,"fill","#9c27b0"),d(K,"class","J K"),d(le,"d","M275.5 260.31l-25-43.3h50l25 43.3h-50z"),d(le,"fill","#6a1b9a"),d(le,"class","J K"),d(pe,"d","M225.5 173.71h-50l25 43.3h50l-25-43.3z"),d(de,"d","M275.5 173.71h-50l25 43.3 25-43.3zm0-86.61l25 43.3h50l-25-43.3h-50z"),d(D,"d","M300.5 43.8h-50l25 43.3h50l-25-43.3zm125 216.51l-25-43.3h-50l25 43.3h50z"),d(H,"d","M375.5 173.71l-25 43.3h50l-25-43.3z"),d(X,"fill","#00695c"),d(X,"class","J K"),d(x,"d","M325.5.5h-50l-25 43.3h50l25-43.3zm0 173.21h-50l-25 43.3h50l25-43.3z"),d(G,"d","M350.5 130.4h-50l-25 43.31h50l25-43.31zM425.5.5h-50l-25 43.3h50l25-43.3z"),d(ce,"d","M375.5 87.1l-25-43.3h50l-25 43.3z"),d(te,"fill","#ea80fc"),d(te,"class","J K"),d(e,"class",m[0]),d(e,"xmlns","http://www.w3.org/2000/svg"),d(e,"xmlns:xlink","http://www.w3.org/1999/xlink"),d(e,"aria-hidden","true"),d(e,"focusable","false"),d(e,"role","img"),d(e,"width","1.73em"),d(e,"height","1em"),d(e,"preserveAspectRatio","xMidYMid meet"),d(e,"viewBox","0 0 451 260.81")},m($e,Z){$($e,e,Z),s(e,l),s(l,a),s(e,o),s(o,c),s(o,_),s(o,g),s(o,b),s(o,k),s(o,C),s(o,A),s(o,y),s(e,T),s(T,U),s(T,F),s(T,W),s(e,w),s(w,z),s(w,B),s(e,R),s(e,L),s(L,V),s(L,Y),s(e,K),s(K,J),s(K,oe),s(K,se),s(K,re),s(K,ue),s(K,ie),s(K,fe),s(e,le),s(e,X),s(X,pe),s(X,de),s(X,D),s(X,H),s(e,te),s(te,x),s(te,G),s(te,ce)},p($e,[Z]){Z&1&&d(e,"class",$e[0])},i:ne,o:ne,d($e){$e&&r(e)}}}function dc(m,e,l){let{classNames:a=""}=e;return m.$$set=o=>{"classNames"in o&&l(0,a=o.classNames)},[a]}class mc extends Ge{constructor(e){super();Be(this,e,dc,fc,Je,{classNames:0})}}function hc(m){let e,l;return{c(){e=I("svg"),l=I("path"),this.h()},l(a){e=N(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var o=n(e);l=N(o,"path",{d:!0,fill:!0}),n(l).forEach(r),o.forEach(r),this.h()},h(){d(l,"d","M0 4.50001C0.390979 2.37042 2.25728 0.756592 4.5 0.756592C6.74272 0.756592 8.60861 2.37042 9 4.50001C8.60902 6.62959 6.74272 8.24342 4.5 8.24342C2.25728 8.24342 0.391395 6.62959 0 4.50001ZM4.5 6.57968C5.05156 6.57968 5.58054 6.36057 5.97055 5.97056C6.36057 5.58054 6.57967 5.05157 6.57967 4.50001C6.57967 3.94844 6.36057 3.41947 5.97055 3.02945C5.58054 2.63944 5.05156 2.42033 4.5 2.42033C3.94844 2.42033 3.41946 2.63944 3.02945 3.02945C2.63943 3.41947 2.42033 3.94844 2.42033 4.50001C2.42033 5.05157 2.63943 5.58054 3.02945 5.97056C3.41946 6.36057 3.94844 6.57968 4.5 6.57968ZM4.5 5.74781C4.16906 5.74781 3.85168 5.61635 3.61767 5.38234C3.38366 5.14833 3.2522 4.83094 3.2522 4.50001C3.2522 4.16907 3.38366 3.85168 3.61767 3.61767C3.85168 3.38367 4.16906 3.2522 4.5 3.2522C4.83094 3.2522 5.14832 3.38367 5.38233 3.61767C5.61634 3.85168 5.7478 4.16907 5.7478 4.50001C5.7478 4.83094 5.61634 5.14833 5.38233 5.38234C5.14832 5.61635 4.83094 5.74781 4.5 5.74781Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 9 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,o){$(a,e,o),s(e,l)},p(a,[o]){o&1&&d(e,"class",a[0]),o&2&&d(e,"width",a[1]),o&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&r(e)}}}function $c(m,e,l){let{classNames:a=""}=e,{size:o="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,o=c.size)},[a,o]}class _c extends Ge{constructor(e){super();Be(this,e,$c,hc,Je,{classNames:0,size:1})}}function gc(m){let e,l;return{c(){e=I("svg"),l=I("path"),this.h()},l(a){e=N(a,"svg",{class:!0,width:!0,height:!0,viewBox:!0,fill:!0,xmlns:!0});var o=n(e);l=N(o,"path",{d:!0,fill:!0}),n(l).forEach(r),o.forEach(r),this.h()},h(){d(l,"d","M1.39125 1.9725L0.0883333 0.669997L0.677917 0.0804138L8.9275 8.33041L8.33792 8.91958L6.95875 7.54041C6.22592 8.00523 5.37572 8.25138 4.50792 8.25C2.26125 8.25 0.392083 6.63333 0 4.5C0.179179 3.52946 0.667345 2.64287 1.39167 1.9725H1.39125ZM5.65667 6.23833L5.04667 5.62833C4.81335 5.73996 4.55116 5.77647 4.29622 5.73282C4.04129 5.68918 3.80617 5.56752 3.62328 5.38463C3.44039 5.20175 3.31874 4.96663 3.27509 4.71169C3.23144 4.45676 3.26795 4.19456 3.37958 3.96125L2.76958 3.35125C2.50447 3.75187 2.38595 4.2318 2.4341 4.70978C2.48225 5.18777 2.6941 5.63442 3.0338 5.97411C3.37349 6.31381 3.82015 6.52567 4.29813 6.57382C4.77611 6.62197 5.25605 6.50345 5.65667 6.23833ZM2.83042 1.06666C3.35 0.862497 3.91625 0.749997 4.50792 0.749997C6.75458 0.749997 8.62375 2.36666 9.01583 4.5C8.88816 5.19404 8.60119 5.84899 8.1775 6.41333L6.56917 4.805C6.61694 4.48317 6.58868 4.15463 6.48664 3.84569C6.3846 3.53675 6.21162 3.256 5.98156 3.02594C5.7515 2.79588 5.47075 2.6229 5.16181 2.52086C4.85287 2.41882 4.52433 2.39056 4.2025 2.43833L2.83042 1.06708V1.06666Z"),d(l,"fill","currentColor"),d(e,"class",m[0]),d(e,"width",m[1]),d(e,"height",m[1]),d(e,"viewBox","0 0 10 9"),d(e,"fill","currentColor"),d(e,"xmlns","http://www.w3.org/2000/svg")},m(a,o){$(a,e,o),s(e,l)},p(a,[o]){o&1&&d(e,"class",a[0]),o&2&&d(e,"width",a[1]),o&2&&d(e,"height",a[1])},i:ne,o:ne,d(a){a&&r(e)}}}function vc(m,e,l){let{classNames:a=""}=e,{size:o="1em"}=e;return m.$$set=c=>{"classNames"in c&&l(0,a=c.classNames),"size"in c&&l(1,o=c.size)},[a,o]}class Ec extends Ge{constructor(e){super();Be(this,e,vc,gc,Je,{classNames:0,size:1})}}const{window:bc}=tc;function Vp(m){let e,l,a,o,c,_,g,b,k,C;return l=new Ec({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),o=u("span"),c=i("Hide "),_=i(m[3]),g=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);O(l.$$.fragment,y),a=E(y),o=f(y,"SPAN",{});var T=n(o);c=p(T,"Hide "),_=p(T,m[3]),g=p(T," content"),T.forEach(r),y.forEach(r),this.h()},h(){d(e,"class","cursor-pointer flex items-center justify-center space-x-1 text-sm px-2 bg-white dark:bg-gray-950 hover:underline leading-none")},m(A,y){$(A,e,y),P(l,e,null),s(e,a),s(e,o),s(o,c),s(o,_),s(o,g),b=!0,k||(C=ii(e,"click",m[5]),k=!0)},p:ne,i(A){b||(j(l.$$.fragment,A),b=!0)},o(A){q(l.$$.fragment,A),b=!1},d(A){A&&r(e),S(l),k=!1,C()}}}function wc(m){let e,l;const a=m[10].default,o=Ds(a,m,m[9],null);return{c(){e=u("div"),o&&o.c(),this.h()},l(c){e=f(c,"DIV",{class:!0});var _=n(e);o&&o.l(_),_.forEach(r),this.h()},h(){d(e,"class","framework-content")},m(c,_){$(c,e,_),o&&o.m(e,null),l=!0},p(c,_){o&&o.p&&(!l||_&512)&&Is(o,a,c,c[9],l?Fs(a,c[9],_,null):Ns(c[9]),null)},i(c){l||(j(o,c),l=!0)},o(c){q(o,c),l=!1},d(c){c&&r(e),o&&o.d(c)}}}function kc(m){let e,l,a,o,c,_,g,b,k,C;return l=new _c({props:{size:"0.9em"}}),{c(){e=u("div"),M(l.$$.fragment),a=v(),o=u("span"),c=i("Show "),_=i(m[3]),g=i(" content"),this.h()},l(A){e=f(A,"DIV",{class:!0});var y=n(e);O(l.$$.fragment,y),a=E(y),o=f(y,"SPAN",{});var T=n(o);c=p(T,"Show "),_=p(T,m[3]),g=p(T," content"),T.forEach(r),y.forEach(r),this.h()},h(){d(e,"class","cursor-pointer mt-[-12.5px] flex items-center justify-center space-x-1 py-4 text-sm hover:underline leading-none")},m(A,y){$(A,e,y),P(l,e,null),s(e,a),s(e,o),s(o,c),s(o,_),s(o,g),b=!0,k||(C=ii(e,"click",m[5]),k=!0)},p:ne,i(A){b||(j(l.$$.fragment,A),b=!0)},o(A){q(l.$$.fragment,A),b=!1},d(A){A&&r(e),S(l),k=!1,C()}}}function jc(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U;var F=m[2];function W(L){return{}}F&&(o=new F(W()));let w=!m[1]&&Vp(m);const z=[kc,wc],B=[];function R(L,V){return L[1]?0:1}return C=R(m),A=B[C]=z[C](m),{c(){e=u("div"),l=u("div"),a=u("div"),o&&M(o.$$.fragment),c=v(),_=u("span"),g=i(m[3]),b=v(),w&&w.c(),k=v(),A.c(),this.h()},l(L){e=f(L,"DIV",{class:!0});var V=n(e);l=f(V,"DIV",{class:!0});var Y=n(l);a=f(Y,"DIV",{class:!0});var K=n(a);o&&O(o.$$.fragment,K),c=E(K),_=f(K,"SPAN",{});var J=n(_);g=p(J,m[3]),J.forEach(r),K.forEach(r),b=E(Y),w&&w.l(Y),Y.forEach(r),k=E(V),A.l(V),V.forEach(r),this.h()},h(){d(a,"class","flex px-1 items-center space-x-1 bg-white dark:bg-gray-950"),d(l,"class","flex h-[22px] mt-[-12.5px] justify-between leading-none"),d(e,"class","border border-gray-200 rounded-xl px-4 relative")},m(L,V){$(L,e,V),s(e,l),s(l,a),o&&P(o,a,null),s(a,c),s(a,_),s(_,g),s(l,b),w&&w.m(l,null),s(e,k),B[C].m(e,null),m[11](e),y=!0,T||(U=ii(bc,"hashchange",m[6]),T=!0)},p(L,[V]){if(F!==(F=L[2])){if(o){Aa();const K=o;q(K.$$.fragment,1,0,()=>{S(K,1)}),qa()}F?(o=new F(W()),M(o.$$.fragment),j(o.$$.fragment,1),P(o,a,c)):o=null}L[1]?w&&(Aa(),q(w,1,1,()=>{w=null}),qa()):w?(w.p(L,V),V&2&&j(w,1)):(w=Vp(L),w.c(),j(w,1),w.m(l,null));let Y=C;C=R(L),C===Y?B[C].p(L,V):(Aa(),q(B[Y],1,1,()=>{B[Y]=null}),qa(),A=B[C],A?A.p(L,V):(A=B[C]=z[C](L),A.c()),j(A,1),A.m(e,null))},i(L){y||(o&&j(o.$$.fragment,L),j(w),j(A),y=!0)},o(L){o&&q(o.$$.fragment,L),q(w),q(A),y=!1},d(L){L&&r(e),o&&S(o),w&&w.d(),B[C].d(),m[11](null),T=!1,U()}}}function yc(m,e,l){let a,o,{$$slots:c={},$$scope:_}=e,{framework:g}=e,b,k=new Set;const C={pytorch:{Icon:ic,label:"Pytorch"},tensorflow:{Icon:uc,label:"TensorFlow"},jax:{Icon:mc,label:"JAX"}},{Icon:A,label:y}=C[g],T=`hf_doc_framework_${g}_is_hidden`,U=oc(g);ec(m,U,z=>l(8,o=z));function F(){lo(U,o=o!==Fe.CLOSED?Fe.CLOSED:Fe.OPEN,o),localStorage.setItem(T,o)}function W(){const z=window.location.hash.slice(1);k.has(z)&&(lo(U,o=Fe.HASHASHLINK,o),localStorage.setItem(T,o))}Qp(()=>{const z=window.location.hash.slice(1),B="header-link",R=b.querySelectorAll(`.${B}`);k=new Set([...R].map(V=>V.id));const L=localStorage.getItem(T);k.has(z)?lo(U,o=Fe.HASHASHLINK,o):L===Fe.CLOSED&&o!==Fe.HASHASHLINK&&lo(U,o=Fe.CLOSED,o)});function w(z){ac[z?"unshift":"push"](()=>{b=z,l(0,b)})}return m.$$set=z=>{"framework"in z&&l(7,g=z.framework),"$$scope"in z&&l(9,_=z.$$scope)},m.$$.update=()=>{m.$$.dirty&256&&l(1,a=o===Fe.CLOSED)},[b,a,A,y,U,F,W,g,o,_,c,w]}class pi extends Ge{constructor(e){super();Be(this,e,yc,jc,Je,{framework:7})}}const Ac=m=>({}),Kp=m=>({}),qc=m=>({}),Gp=m=>({}),Cc=m=>({}),Bp=m=>({});function Jp(m){let e,l;return e=new pi({props:{framework:"pytorch",$$slots:{default:[Tc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Tc(m){let e;const l=m[3].pytorch,a=Ds(l,m,m[4],Bp);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Is(a,l,o,o[4],e?Fs(l,o[4],c,Cc):Ns(o[4]),Bp)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Yp(m){let e,l;return e=new pi({props:{framework:"tensorflow",$$slots:{default:[zc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function zc(m){let e;const l=m[3].tensorflow,a=Ds(l,m,m[4],Gp);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Is(a,l,o,o[4],e?Fs(l,o[4],c,qc):Ns(o[4]),Gp)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Zp(m){let e,l;return e=new pi({props:{framework:"jax",$$slots:{default:[xc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&16&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function xc(m){let e;const l=m[3].jax,a=Ds(l,m,m[4],Kp);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,c){a&&a.p&&(!e||c&16)&&Is(a,l,o,o[4],e?Fs(l,o[4],c,Ac):Ns(o[4]),Kp)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Mc(m){let e,l,a,o,c=m[0]&&Jp(m),_=m[1]&&Yp(m),g=m[2]&&Zp(m);return{c(){e=u("div"),c&&c.c(),l=v(),_&&_.c(),a=v(),g&&g.c(),this.h()},l(b){e=f(b,"DIV",{class:!0});var k=n(e);c&&c.l(k),l=E(k),_&&_.l(k),a=E(k),g&&g.l(k),k.forEach(r),this.h()},h(){d(e,"class","space-y-10 py-6 2xl:py-8 2xl:-mx-4")},m(b,k){$(b,e,k),c&&c.m(e,null),s(e,l),_&&_.m(e,null),s(e,a),g&&g.m(e,null),o=!0},p(b,[k]){b[0]?c?(c.p(b,k),k&1&&j(c,1)):(c=Jp(b),c.c(),j(c,1),c.m(e,l)):c&&(Aa(),q(c,1,1,()=>{c=null}),qa()),b[1]?_?(_.p(b,k),k&2&&j(_,1)):(_=Yp(b),_.c(),j(_,1),_.m(e,a)):_&&(Aa(),q(_,1,1,()=>{_=null}),qa()),b[2]?g?(g.p(b,k),k&4&&j(g,1)):(g=Zp(b),g.c(),j(g,1),g.m(e,null)):g&&(Aa(),q(g,1,1,()=>{g=null}),qa())},i(b){o||(j(c),j(_),j(g),o=!0)},o(b){q(c),q(_),q(g),o=!1},d(b){b&&r(e),c&&c.d(),_&&_.d(),g&&g.d()}}}function Pc(m,e,l){let{$$slots:a={},$$scope:o}=e,{pytorch:c=!1}=e,{tensorflow:_=!1}=e,{jax:g=!1}=e;return m.$$set=b=>{"pytorch"in b&&l(0,c=b.pytorch),"tensorflow"in b&&l(1,_=b.tensorflow),"jax"in b&&l(2,g=b.jax),"$$scope"in b&&l(4,o=b.$$scope)},[c,_,g,a,o]}class ja extends Ge{constructor(e){super();Be(this,e,Pc,Mc,Je,{pytorch:0,tensorflow:1,jax:2})}}function Sc(m){let e;const l=m[1].default,a=Ds(l,m,m[0],null);return{c(){a&&a.c()},l(o){a&&a.l(o)},m(o,c){a&&a.m(o,c),e=!0},p(o,[c]){a&&a.p&&(!e||c&1)&&Is(a,l,o,o[0],e?Fs(l,o[0],c,null):Ns(o[0]),null)},i(o){e||(j(a,o),e=!0)},o(o){q(a,o),e=!1},d(o){a&&a.d(o)}}}function Oc(m,e,l){let{$$slots:a={},$$scope:o}=e;return m.$$set=c=>{"$$scope"in c&&l(0,o=c.$$scope)},[o,a]}class Ae extends Ge{constructor(e){super();Be(this,e,Oc,Sc,Je,{})}}function Dc(m){let e,l;return{c(){e=u("p"),l=i(`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`)},l(a){e=f(a,"P",{});var o=n(e);l=p(o,`Todos los ejemplos de c\xF3digo presentados en la documentaci\xF3n tienen un bot\xF3n arriba a la izquierda para elegir entre Pytorch y TensorFlow.
Si no fuese as\xED, se espera que el c\xF3digo funcione para ambos backends sin ning\xFAn cambio.`),o.forEach(r)},m(a,o){$(a,e,o),s(e,l)},d(a){a&&r(e)}}}function Ic(m){let e,l,a,o,c,_,g,b;return{c(){e=u("p"),l=i("Para m\xE1s detalles acerca del "),a=u("code"),o=i("pipeline()"),c=i(" y tareas asociadas, consulta la documentaci\xF3n "),_=u("a"),g=i("aqu\xED"),b=i("."),this.h()},l(k){e=f(k,"P",{});var C=n(e);l=p(C,"Para m\xE1s detalles acerca del "),a=f(C,"CODE",{});var A=n(a);o=p(A,"pipeline()"),A.forEach(r),c=p(C," y tareas asociadas, consulta la documentaci\xF3n "),_=f(C,"A",{href:!0});var y=n(_);g=p(y,"aqu\xED"),y.forEach(r),b=p(C,"."),C.forEach(r),this.h()},h(){d(_,"href","./main_classes/pipelines")},m(k,C){$(k,e,C),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b)},d(k){k&&r(e)}}}function Nc(m){let e,l;return e=new Q({props:{code:"pip install torch",highlighted:"pip install torch"}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Fc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Nc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Lc(m){let e,l;return e=new Q({props:{code:"pip install tensorflow",highlighted:"pip install tensorflow"}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Hc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Lc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Uc(m){let e,l,a,o,c,_,g,b,k,C,A;return C=new Q({props:{code:`from transformers import AutoTokenizer, AutoModelForSequenceClassification

model = AutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),o=i("AutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),g=i("AutoClass"),b=i(" debajo):"),k=v(),M(C.$$.fragment)},l(y){e=f(y,"P",{});var T=n(e);l=p(T,"Usa "),a=f(T,"CODE",{});var U=n(a);o=p(U,"AutoModelForSequenceClassification"),U.forEach(r),c=p(T," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(T,"CODE",{});var F=n(_);g=p(F,"AutoClass"),F.forEach(r),b=p(T," debajo):"),T.forEach(r),k=E(y),O(C.$$.fragment,y)},m(y,T){$(y,e,T),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b),$(y,k,T),P(C,y,T),A=!0},p:ne,i(y){A||(j(C.$$.fragment,y),A=!0)},o(y){q(C.$$.fragment,y),A=!1},d(y){y&&r(e),y&&r(k),S(C,y)}}}function Rc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Uc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Wc(m){let e,l,a,o,c,_,g,b,k,C,A;return C=new Q({props:{code:`from transformers import AutoTokenizer, TFAutoModelForSequenceClassification

model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(model_name)
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),{c(){e=u("p"),l=i("Usa "),a=u("code"),o=i("TFAutoModelForSequenceClassification"),c=i(" y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=u("code"),g=i("TFAutoClass"),b=i(" debajo):"),k=v(),M(C.$$.fragment)},l(y){e=f(y,"P",{});var T=n(e);l=p(T,"Usa "),a=f(T,"CODE",{});var U=n(a);o=p(U,"TFAutoModelForSequenceClassification"),U.forEach(r),c=p(T," y [\u2018AutoTokenizer\u2019] para cargar un modelo preentrenado y un tokenizador asociado (m\xE1s en un "),_=f(T,"CODE",{});var F=n(_);g=p(F,"TFAutoClass"),F.forEach(r),b=p(T," debajo):"),T.forEach(r),k=E(y),O(C.$$.fragment,y)},m(y,T){$(y,e,T),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b),$(y,k,T),P(C,y,T),A=!0},p:ne,i(y){A||(j(C.$$.fragment,y),A=!0)},o(y){q(C.$$.fragment,y),A=!1},d(y){y&&r(e),y&&r(k),S(C,y)}}}function Vc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Wc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Kc(m){let e,l;return e=new Q({props:{code:`pt_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="pt",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;pt&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Gc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Kc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Bc(m){let e,l;return e=new Q({props:{code:`tf_batch = tokenizer(
    ["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."],
    padding=True,
    truncation=True,
    max_length=512,
    return_tensors="tf",
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_batch = tokenizer(
<span class="hljs-meta">... </span>    [<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>],
<span class="hljs-meta">... </span>    padding=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    truncation=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    max_length=<span class="hljs-number">512</span>,
<span class="hljs-meta">... </span>    return_tensors=<span class="hljs-string">&quot;tf&quot;</span>,
<span class="hljs-meta">... </span>)`}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Jc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Bc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Yc(m){let e,l,a,o,c,_,g,b;return{c(){e=u("p"),l=i("Ve el "),a=u("a"),o=i("task summary"),c=i(" para revisar qu\xE9 clase del "),_=u("code"),g=i("AutoModel"),b=i(" deber\xEDas usar para cada tarea."),this.h()},l(k){e=f(k,"P",{});var C=n(e);l=p(C,"Ve el "),a=f(C,"A",{href:!0});var A=n(a);o=p(A,"task summary"),A.forEach(r),c=p(C," para revisar qu\xE9 clase del "),_=f(C,"CODE",{});var y=n(_);g=p(y,"AutoModel"),y.forEach(r),b=p(C," deber\xEDas usar para cada tarea."),C.forEach(r),this.h()},h(){d(a,"href","./task_summary")},m(k,C){$(k,e,C),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b)},d(k){k&&r(e)}}}function Zc(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W,w,z,B,R,L,V,Y,K,J,oe,se,re,ue,ie,fe,le,X,pe,de,D,H,te;return W=new Q({props:{code:`from transformers import AutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(model_name)`}}),z=new ya({props:{$$slots:{default:[Yc]},$$scope:{ctx:m}}}),oe=new Q({props:{code:"pt_outputs = pt_model(**pt_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_outputs = pt_model(**pt_batch)'}}),H=new Q({props:{code:`from torch import nn

pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-1)
print(pt_predictions)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn

<span class="hljs-meta">&gt;&gt;&gt; </span>pt_predictions = nn.functional.softmax(pt_outputs.logits, dim=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(pt_predictions)
tensor([[<span class="hljs-number">0.0021</span>, <span class="hljs-number">0.0018</span>, <span class="hljs-number">0.0115</span>, <span class="hljs-number">0.2121</span>, <span class="hljs-number">0.7725</span>],
        [<span class="hljs-number">0.2084</span>, <span class="hljs-number">0.1826</span>, <span class="hljs-number">0.1969</span>, <span class="hljs-number">0.1755</span>, <span class="hljs-number">0.2365</span>]], grad_fn=&lt;SoftmaxBackward0&gt;)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),o=i("AutoModel"),c=i(" como cargar\xEDas un "),_=u("code"),g=i("AutoTokenizer"),b=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),C=i("AutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),T=i("AutoModelForSequenceClassification"),U=i(":"),F=v(),M(W.$$.fragment),w=v(),M(z.$$.fragment),B=v(),R=u("p"),L=i("Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),V=u("code"),Y=i("**"),K=i(":"),J=v(),M(oe.$$.fragment),se=v(),re=u("p"),ue=i("El modelo producir\xE1 las activaciones finales en el atributo "),ie=u("code"),fe=i("logits"),le=i(". Aplica la funci\xF3n softmax a "),X=u("code"),pe=i("logits"),de=i(" para obtener las probabilidades:"),D=v(),M(H.$$.fragment)},l(x){e=f(x,"P",{});var G=n(e);l=p(G,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(G,"CODE",{});var ce=n(a);o=p(ce,"AutoModel"),ce.forEach(r),c=p(G," como cargar\xEDas un "),_=f(G,"CODE",{});var $e=n(_);g=p($e,"AutoTokenizer"),$e.forEach(r),b=p(G,". La \xFAnica diferencia es seleccionar el "),k=f(G,"CODE",{});var Z=n(k);C=p(Z,"AutoModel"),Z.forEach(r),A=p(G," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(G,"CODE",{});var ke=n(y);T=p(ke,"AutoModelForSequenceClassification"),ke.forEach(r),U=p(G,":"),G.forEach(r),F=E(x),O(W.$$.fragment,x),w=E(x),O(z.$$.fragment,x),B=E(x),R=f(x,"P",{});var ae=n(R);L=p(ae,"Ahora puedes pasar tu lote (batch) preprocesado de inputs directamente al modelo. Solo tienes que desempacar el diccionario a\xF1adiendo "),V=f(ae,"CODE",{});var je=n(V);Y=p(je,"**"),je.forEach(r),K=p(ae,":"),ae.forEach(r),J=E(x),O(oe.$$.fragment,x),se=E(x),re=f(x,"P",{});var ve=n(re);ue=p(ve,"El modelo producir\xE1 las activaciones finales en el atributo "),ie=f(ve,"CODE",{});var qe=n(ie);fe=p(qe,"logits"),qe.forEach(r),le=p(ve,". Aplica la funci\xF3n softmax a "),X=f(ve,"CODE",{});var _e=n(X);pe=p(_e,"logits"),_e.forEach(r),de=p(ve," para obtener las probabilidades:"),ve.forEach(r),D=E(x),O(H.$$.fragment,x)},m(x,G){$(x,e,G),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b),s(e,k),s(k,C),s(e,A),s(e,y),s(y,T),s(e,U),$(x,F,G),P(W,x,G),$(x,w,G),P(z,x,G),$(x,B,G),$(x,R,G),s(R,L),s(R,V),s(V,Y),s(R,K),$(x,J,G),P(oe,x,G),$(x,se,G),$(x,re,G),s(re,ue),s(re,ie),s(ie,fe),s(re,le),s(re,X),s(X,pe),s(re,de),$(x,D,G),P(H,x,G),te=!0},p(x,G){const ce={};G&2&&(ce.$$scope={dirty:G,ctx:x}),z.$set(ce)},i(x){te||(j(W.$$.fragment,x),j(z.$$.fragment,x),j(oe.$$.fragment,x),j(H.$$.fragment,x),te=!0)},o(x){q(W.$$.fragment,x),q(z.$$.fragment,x),q(oe.$$.fragment,x),q(H.$$.fragment,x),te=!1},d(x){x&&r(e),x&&r(F),S(W,x),x&&r(w),S(z,x),x&&r(B),x&&r(R),x&&r(J),S(oe,x),x&&r(se),x&&r(re),x&&r(D),S(H,x)}}}function Qc(m){let e,l;return e=new Ae({props:{$$slots:{default:[Zc]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function Xc(m){let e;return{c(){e=i("Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},l(l){e=p(l,"Ve el [task summary](./task_summary) para revisar qu\xE9 clase del `AutoModel`\n  deber\xEDas usar para cada tarea.")},m(l,a){$(l,e,a)},d(l){l&&r(e)}}}function eu(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W,w,z,B,R,L,V,Y,K,J,oe,se,re,ue,ie,fe,le,X,pe,de;return W=new Q({props:{code:`from transformers import TFAutoModelForSequenceClassification

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(model_name)`}}),z=new ya({props:{$$slots:{default:[Xc]},$$scope:{ctx:m}}}),Y=new Q({props:{code:"tf_outputs = tf_model(tf_batch)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_outputs = tf_model(tf_batch)'}}),pe=new Q({props:{code:`import tensorflow as tf

tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-1)
print(tf.math.round(tf_predictions * 10**4) / 10**4)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_predictions = tf.nn.softmax(tf_outputs.logits, axis=-<span class="hljs-number">1</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tf.math.<span class="hljs-built_in">round</span>(tf_predictions * <span class="hljs-number">10</span>**<span class="hljs-number">4</span>) / <span class="hljs-number">10</span>**<span class="hljs-number">4</span>)
tf.Tensor(
[[<span class="hljs-number">0.0021</span> <span class="hljs-number">0.0018</span> <span class="hljs-number">0.0116</span> <span class="hljs-number">0.2121</span> <span class="hljs-number">0.7725</span>]
 [<span class="hljs-number">0.2084</span> <span class="hljs-number">0.1826</span> <span class="hljs-number">0.1969</span> <span class="hljs-number">0.1755</span>  <span class="hljs-number">0.2365</span>]], shape=(<span class="hljs-number">2</span>, <span class="hljs-number">5</span>), dtype=float32)`}}),{c(){e=u("p"),l=i("\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=u("code"),o=i("TFAutoModel"),c=i(" como cargar\xEDas un "),_=u("code"),g=i("AutoTokenizer"),b=i(". La \xFAnica diferencia es seleccionar el "),k=u("code"),C=i("TFAutoModel"),A=i(" correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=u("code"),T=i("TFAutoModelForSequenceClassification"),U=i(":"),F=v(),M(W.$$.fragment),w=v(),M(z.$$.fragment),B=v(),R=u("p"),L=i("Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),V=v(),M(Y.$$.fragment),K=v(),J=u("p"),oe=i("El modelo producir\xE1 las activaciones finales en el atributo "),se=u("code"),re=i("logits"),ue=i(". Aplica la funci\xF3n softmax a "),ie=u("code"),fe=i("logits"),le=i(" para obtener las probabilidades:"),X=v(),M(pe.$$.fragment)},l(D){e=f(D,"P",{});var H=n(e);l=p(H,"\u{1F917} Transformers provee una forma simple y unificada de cargar tus instancias preentrenadas. Esto significa que puedes cargar un "),a=f(H,"CODE",{});var te=n(a);o=p(te,"TFAutoModel"),te.forEach(r),c=p(H," como cargar\xEDas un "),_=f(H,"CODE",{});var x=n(_);g=p(x,"AutoTokenizer"),x.forEach(r),b=p(H,". La \xFAnica diferencia es seleccionar el "),k=f(H,"CODE",{});var G=n(k);C=p(G,"TFAutoModel"),G.forEach(r),A=p(H," correcto para la tarea. Ya que est\xE1s clasificando texto, o secuencias, carga "),y=f(H,"CODE",{});var ce=n(y);T=p(ce,"TFAutoModelForSequenceClassification"),ce.forEach(r),U=p(H,":"),H.forEach(r),F=E(D),O(W.$$.fragment,D),w=E(D),O(z.$$.fragment,D),B=E(D),R=f(D,"P",{});var $e=n(R);L=p($e,"Ahora puedes pasar tu lote preprocesado de inputs directamente al modelo pasando las llaves del diccionario directamente a los tensores:"),$e.forEach(r),V=E(D),O(Y.$$.fragment,D),K=E(D),J=f(D,"P",{});var Z=n(J);oe=p(Z,"El modelo producir\xE1 las activaciones finales en el atributo "),se=f(Z,"CODE",{});var ke=n(se);re=p(ke,"logits"),ke.forEach(r),ue=p(Z,". Aplica la funci\xF3n softmax a "),ie=f(Z,"CODE",{});var ae=n(ie);fe=p(ae,"logits"),ae.forEach(r),le=p(Z," para obtener las probabilidades:"),Z.forEach(r),X=E(D),O(pe.$$.fragment,D)},m(D,H){$(D,e,H),s(e,l),s(e,a),s(a,o),s(e,c),s(e,_),s(_,g),s(e,b),s(e,k),s(k,C),s(e,A),s(e,y),s(y,T),s(e,U),$(D,F,H),P(W,D,H),$(D,w,H),P(z,D,H),$(D,B,H),$(D,R,H),s(R,L),$(D,V,H),P(Y,D,H),$(D,K,H),$(D,J,H),s(J,oe),s(J,se),s(se,re),s(J,ue),s(J,ie),s(ie,fe),s(J,le),$(D,X,H),P(pe,D,H),de=!0},p(D,H){const te={};H&2&&(te.$$scope={dirty:H,ctx:D}),z.$set(te)},i(D){de||(j(W.$$.fragment,D),j(z.$$.fragment,D),j(Y.$$.fragment,D),j(pe.$$.fragment,D),de=!0)},o(D){q(W.$$.fragment,D),q(z.$$.fragment,D),q(Y.$$.fragment,D),q(pe.$$.fragment,D),de=!1},d(D){D&&r(e),D&&r(F),S(W,D),D&&r(w),S(z,D),D&&r(B),D&&r(R),D&&r(V),S(Y,D),D&&r(K),D&&r(J),D&&r(X),S(pe,D)}}}function tu(m){let e,l;return e=new Ae({props:{$$slots:{default:[eu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function au(m){let e,l,a,o,c;return{c(){e=u("p"),l=i("Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=u("em"),o=i("antes"),c=i(` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`)},l(_){e=f(_,"P",{});var g=n(e);l=p(g,"Todos los modelos de \u{1F917} Transformers (PyTorch o TensorFlow) producir\xE1n los tensores "),a=f(g,"EM",{});var b=n(a);o=p(b,"antes"),b.forEach(r),c=p(g,` de la funci\xF3n de activaci\xF3n
final (como softmax) porque la funci\xF3n de activaci\xF3n final es com\xFAnmente fusionada con la p\xE9rdida.`),g.forEach(r)},m(_,g){$(_,e,g),s(e,l),s(e,a),s(a,o),s(e,c)},d(_){_&&r(e)}}}function su(m){let e,l,a,o,c;return{c(){e=u("p"),l=i(`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=u("code"),o=i("None"),c=i(" son ignorados.")},l(_){e=f(_,"P",{});var g=n(e);l=p(g,`Los outputs del modelo de \u{1F917} Transformers son dataclasses especiales por lo que sus atributos pueden ser completados en un IDE.
Los outputs del modelo tambi\xE9n se comportan como tuplas o diccionarios (e.g., puedes indexar con un entero, un slice o una cadena) en cuyo caso los atributos que son `),a=f(g,"CODE",{});var b=n(a);o=p(b,"None"),b.forEach(r),c=p(g," son ignorados."),g.forEach(r)},m(_,g){$(_,e,g),s(e,l),s(e,a),s(a,o),s(e,c)},d(_){_&&r(e)}}}function ru(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W;return g=new Q({props:{code:`pt_save_directory = "./pt_save_pretrained"
tokenizer.save_pretrained(pt_save_directory)
pt_model.save_pretrained(pt_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>pt_save_directory = <span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model.save_pretrained(pt_save_directory)`}}),F=new Q({props:{code:'pt_model = AutoModelForSequenceClassification.from_pretrained("./pt_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./pt_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),o=i("PreTrainedModel.save_pretrained()"),c=i(":"),_=v(),M(g.$$.fragment),b=v(),k=u("p"),C=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("PreTrainedModel.from_pretrained()"),T=i(":"),U=v(),M(F.$$.fragment)},l(w){e=f(w,"P",{});var z=n(e);l=p(z,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(z,"CODE",{});var B=n(a);o=p(B,"PreTrainedModel.save_pretrained()"),B.forEach(r),c=p(z,":"),z.forEach(r),_=E(w),O(g.$$.fragment,w),b=E(w),k=f(w,"P",{});var R=n(k);C=p(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(R,"CODE",{});var L=n(A);y=p(L,"PreTrainedModel.from_pretrained()"),L.forEach(r),T=p(R,":"),R.forEach(r),U=E(w),O(F.$$.fragment,w)},m(w,z){$(w,e,z),s(e,l),s(e,a),s(a,o),s(e,c),$(w,_,z),P(g,w,z),$(w,b,z),$(w,k,z),s(k,C),s(k,A),s(A,y),s(k,T),$(w,U,z),P(F,w,z),W=!0},p:ne,i(w){W||(j(g.$$.fragment,w),j(F.$$.fragment,w),W=!0)},o(w){q(g.$$.fragment,w),q(F.$$.fragment,w),W=!1},d(w){w&&r(e),w&&r(_),S(g,w),w&&r(b),w&&r(k),w&&r(U),S(F,w)}}}function ou(m){let e,l;return e=new Ae({props:{$$slots:{default:[ru]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function lu(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W;return g=new Q({props:{code:`tf_save_directory = "./tf_save_pretrained"
tokenizer.save_pretrained(tf_save_directory)
tf_model.save_pretrained(tf_save_directory)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_save_directory = <span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.save_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model.save_pretrained(tf_save_directory)`}}),F=new Q({props:{code:'tf_model = TFAutoModelForSequenceClassification.from_pretrained("./tf_save_pretrained")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;./tf_save_pretrained&quot;</span>)'}}),{c(){e=u("p"),l=i("Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=u("code"),o=i("TFPreTrainedModel.save_pretrained()"),c=i(":"),_=v(),M(g.$$.fragment),b=v(),k=u("p"),C=i("Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=u("code"),y=i("TFPreTrainedModel.from_pretrained()"),T=i(":"),U=v(),M(F.$$.fragment)},l(w){e=f(w,"P",{});var z=n(e);l=p(z,"Una vez que tu modelo est\xE9 fine-tuned puedes guardarlo con tu tokenizador usando "),a=f(z,"CODE",{});var B=n(a);o=p(B,"TFPreTrainedModel.save_pretrained()"),B.forEach(r),c=p(z,":"),z.forEach(r),_=E(w),O(g.$$.fragment,w),b=E(w),k=f(w,"P",{});var R=n(k);C=p(R,"Cuando quieras usar el modelo otra vez c\xE1rgalo con "),A=f(R,"CODE",{});var L=n(A);y=p(L,"TFPreTrainedModel.from_pretrained()"),L.forEach(r),T=p(R,":"),R.forEach(r),U=E(w),O(F.$$.fragment,w)},m(w,z){$(w,e,z),s(e,l),s(e,a),s(a,o),s(e,c),$(w,_,z),P(g,w,z),$(w,b,z),$(w,k,z),s(k,C),s(k,A),s(A,y),s(k,T),$(w,U,z),P(F,w,z),W=!0},p:ne,i(w){W||(j(g.$$.fragment,w),j(F.$$.fragment,w),W=!0)},o(w){q(g.$$.fragment,w),q(F.$$.fragment,w),W=!1},d(w){w&&r(e),w&&r(_),S(g,w),w&&r(b),w&&r(k),w&&r(U),S(F,w)}}}function nu(m){let e,l;return e=new Ae({props:{$$slots:{default:[lu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function iu(m){let e,l;return e=new Q({props:{code:`from transformers import AutoModel

tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(tf_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>pt_model = AutoModelForSequenceClassification.from_pretrained(tf_save_directory, from_tf=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function pu(m){let e,l;return e=new Ae({props:{$$slots:{default:[iu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function cu(m){let e,l;return e=new Q({props:{code:`from transformers import TFAutoModel

tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(pt_save_directory)
<span class="hljs-meta">&gt;&gt;&gt; </span>tf_model = TFAutoModelForSequenceClassification.from_pretrained(pt_save_directory, from_pt=<span class="hljs-literal">True</span>)`}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p:ne,i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function uu(m){let e,l;return e=new Ae({props:{$$slots:{default:[cu]},$$scope:{ctx:m}}}),{c(){M(e.$$.fragment)},l(a){O(e.$$.fragment,a)},m(a,o){P(e,a,o),l=!0},p(a,o){const c={};o&2&&(c.$$scope={dirty:o,ctx:a}),e.$set(c)},i(a){l||(j(e.$$.fragment,a),l=!0)},o(a){q(e.$$.fragment,a),l=!1},d(a){S(e,a)}}}function fu(m){let e,l,a,o,c,_,g,b,k,C,A,y,T,U,F,W,w,z,B,R,L,V,Y,K,J,oe,se,re,ue,ie,fe,le,X,pe,de,D,H,te,x,G,ce,$e,Z,ke,ae,je,ve,qe,_e,ee,Ce,no,io,Ca,po,co,Ta,uo,fo,za,mo,ho,xa,$o,_o,Ma,go,vo,Pa,Eo,bo,Sa,wo,Ls,kt,Oa,ko,jo,Hs,Te,Da,yo,Ao,Ia,qo,Co,Na,To,Us,jt,Fa,zo,xo,Rs,Ye,La,Mo,Po,Ha,So,Ws,Ze,Vs,Le,Qe,Ua,yt,Oo,Ra,Do,Ks,Xe,Io,Wa,No,Fo,Gs,ea,Lo,Bs,et,Js,tt,Ho,Va,Uo,Ro,Ys,At,Zs,ze,Wo,qt,Vo,Ko,Ka,Go,Bo,Qs,Ct,Xs,at,Jo,Ga,Yo,Zo,er,Tt,tr,xe,Qo,Ba,Xo,el,zt,tl,al,ar,xt,sr,ye,sl,Ja,rl,ol,Ya,ll,nl,Za,il,pl,rr,Mt,or,Me,cl,Pt,ul,fl,St,dl,ml,lr,Ot,nr,ta,hl,ir,Dt,pr,st,$l,aa,_l,gl,cr,He,rt,Qa,It,vl,Xa,El,ur,Ee,bl,es,wl,kl,Nt,jl,yl,ts,Al,ql,Ft,Cl,Tl,fr,Lt,dr,ot,mr,Pe,zl,as,xl,Ml,ss,Pl,Sl,hr,Ht,$r,Se,Ol,sa,Dl,Il,ra,Nl,Fl,_r,Ue,lt,rs,Ut,Ll,os,Hl,gr,Rt,vr,me,Ul,ls,Rl,Wl,ns,Vl,Kl,is,Gl,Bl,oa,Jl,Yl,ps,Zl,Ql,cs,Xl,en,Er,Oe,tn,us,an,sn,fs,rn,on,br,Re,nt,ds,Wt,ln,ms,nn,wr,De,pn,hs,cn,un,la,fn,dn,kr,it,mn,$s,hn,$n,jr,Vt,yr,pt,_n,_s,gn,vn,Ar,na,En,qr,Kt,Cr,ia,bn,Tr,ct,pa,ca,wn,kn,jn,ua,fa,yn,An,zr,ut,qn,gs,Cn,Tn,xr,ft,Mr,dt,zn,da,xn,Mn,Pr,We,mt,vs,Gt,Pn,Es,Sn,Sr,ht,Or,$t,Dr,he,On,Bt,bs,Dn,In,Jt,ws,Nn,Fn,ks,Ln,Hn,js,Un,Rn,Yt,Wn,Vn,ma,Kn,Gn,Ir,_t,Nr,Ve,gt,ys,Zt,Bn,As,Jn,Fr,vt,Lr,Ie,Yn,qs,Zn,Qn,Cs,Xn,ei,Hr,Et,Ur;return _=new wt({}),A=new rc({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/quicktour.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/pytorch/quicktour.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/main/transformers_doc/es/tensorflow/quicktour.ipynb"}]}}),V=new ya({props:{$$slots:{default:[Dc]},$$scope:{ctx:m}}}),se=new wt({}),H=new Wp({props:{id:"tiZFewofSLM"}}),Ze=new ya({props:{$$slots:{default:[Ic]},$$scope:{ctx:m}}}),yt=new wt({}),et=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Hc],pytorch:[Fc]},$$scope:{ctx:m}}}),At=new Q({props:{code:`from transformers import pipeline

classifier = pipeline("sentiment-analysis")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>)`}}),Ct=new Q({props:{code:'classifier("We are very happy to show you the \u{1F917} Transformers library.")',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;POSITIVE&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9998</span>}]`}}),Tt=new Q({props:{code:`results = classifier(["We are very happy to show you the \u{1F917} Transformers library.", "We hope you don't hate it."])
for result in results:
    print(f"label: {result['label']}, with score: {round(result['score'], 4)}")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>results = classifier([<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>, <span class="hljs-string">&quot;We hope you don&#x27;t hate it.&quot;</span>])
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> results:
<span class="hljs-meta">... </span>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;label: <span class="hljs-subst">{result[<span class="hljs-string">&#x27;label&#x27;</span>]}</span>, with score: <span class="hljs-subst">{<span class="hljs-built_in">round</span>(result[<span class="hljs-string">&#x27;score&#x27;</span>], <span class="hljs-number">4</span>)}</span>&quot;</span>)
label: POSITIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.9998</span>
label: NEGATIVE, <span class="hljs-keyword">with</span> score: <span class="hljs-number">0.5309</span>`}}),xt=new Q({props:{code:"pip install datasets",highlighted:"pip install datasets"}}),Mt=new Q({props:{code:`import torch
from transformers import pipeline

speech_recognizer = pipeline("automatic-speech-recognition", model="facebook/wav2vec2-base-960h", device=0)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer = pipeline(<span class="hljs-string">&quot;automatic-speech-recognition&quot;</span>, model=<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>, device=<span class="hljs-number">0</span>)`}}),Ot=new Q({props:{code:`import datasets

dataset = datasets.load_dataset("PolyAI/minds14", name="en-US", split="train")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = datasets.load_dataset(<span class="hljs-string">&quot;PolyAI/minds14&quot;</span>, name=<span class="hljs-string">&quot;en-US&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)`}}),Dt=new Q({props:{code:`files = dataset["path"]
speech_recognizer(files[:4])`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>files = dataset[<span class="hljs-string">&quot;path&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>speech_recognizer(files[:<span class="hljs-number">4</span>])
[{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;I WOULD LIKE TO SET UP A JOINT ACCOUNT WITH MY PARTNER HOW DO I PROCEED WITH DOING THAT&#x27;</span>}, 
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;FONDERING HOW I&#x27;D SET UP A JOIN TO HELL T WITH MY WIFE AND WHERE THE AP MIGHT BE&quot;</span>}, 
 {<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;I I&#x27;D LIKE TOY SET UP A JOINT ACCOUNT WITH MY PARTNER I&#x27;M NOT SEEING THE OPTION TO DO IT ON THE APSO I CALLED IN TO GET SOME HELP CAN I JUST DO IT OVER THE PHONE WITH YOU AND GIVE YOU THE INFORMATION OR SHOULD I DO IT IN THE AP AN I&#x27;M MISSING SOMETHING UQUETTE HAD PREFERRED TO JUST DO IT OVER THE PHONE OF POSSIBLE THINGS&quot;</span>},`}}),It=new wt({}),Lt=new Q({props:{code:'model_name = "nlptown/bert-base-multilingual-uncased-sentiment"',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>'}}),ot=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Vc],pytorch:[Rc]},$$scope:{ctx:m}}}),Ht=new Q({props:{code:`classifier = pipeline("sentiment-analysis", model=model, tokenizer=tokenizer)
classifier("Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>classifier = pipeline(<span class="hljs-string">&quot;sentiment-analysis&quot;</span>, model=model, tokenizer=tokenizer)
<span class="hljs-meta">&gt;&gt;&gt; </span>classifier(<span class="hljs-string">&quot;Nous sommes tr\xE8s heureux de vous pr\xE9senter la biblioth\xE8que \u{1F917} Transformers.&quot;</span>)
[{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-string">&#x27;5 stars&#x27;</span>, <span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.7273</span>}]`}}),Ut=new wt({}),Rt=new Wp({props:{id:"AhChOFRegn4"}}),Wt=new wt({}),Vt=new Q({props:{code:`from transformers import AutoTokenizer

model_name = "nlptown/bert-base-multilingual-uncased-sentiment"
tokenizer = AutoTokenizer.from_pretrained(model_name)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>model_name = <span class="hljs-string">&quot;nlptown/bert-base-multilingual-uncased-sentiment&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(model_name)`}}),Kt=new Q({props:{code:`encoding = tokenizer("We are very happy to show you the \u{1F917} Transformers library.")
print(encoding)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>encoding = tokenizer(<span class="hljs-string">&quot;We are very happy to show you the \u{1F917} Transformers library.&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(encoding)
{<span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">11312</span>, <span class="hljs-number">10320</span>, <span class="hljs-number">12495</span>, <span class="hljs-number">19308</span>, <span class="hljs-number">10114</span>, <span class="hljs-number">11391</span>, <span class="hljs-number">10855</span>, <span class="hljs-number">10103</span>, <span class="hljs-number">100</span>, <span class="hljs-number">58263</span>, <span class="hljs-number">13299</span>, <span class="hljs-number">119</span>, <span class="hljs-number">102</span>],
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]}`}}),ft=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Jc],pytorch:[Gc]},$$scope:{ctx:m}}}),Gt=new wt({}),ht=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[tu],pytorch:[Qc]},$$scope:{ctx:m}}}),$t=new ya({props:{$$slots:{default:[au]},$$scope:{ctx:m}}}),_t=new ya({props:{$$slots:{default:[su]},$$scope:{ctx:m}}}),Zt=new wt({}),vt=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[nu],pytorch:[ou]},$$scope:{ctx:m}}}),Et=new ja({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[uu],pytorch:[pu]},$$scope:{ctx:m}}}),{c(){e=u("meta"),l=v(),a=u("h1"),o=u("a"),c=u("span"),M(_.$$.fragment),g=v(),b=u("span"),k=i("Quick tour"),C=v(),M(A.$$.fragment),y=v(),T=u("p"),U=i("\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),F=u("code"),W=i("pipeline()"),w=i(" para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),z=u("a"),B=i("AutoClass"),R=i(" para resolver tu tarea de texto, visi\xF3n o audio."),L=v(),M(V.$$.fragment),Y=v(),K=u("h2"),J=u("a"),oe=u("span"),M(se.$$.fragment),re=v(),ue=u("span"),ie=i("Pipeline"),fe=v(),le=u("p"),X=u("code"),pe=i("pipeline()"),de=i(" es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),D=v(),M(H.$$.fragment),te=v(),x=u("p"),G=i("El "),ce=u("code"),$e=i("pipeline()"),Z=i(" soporta muchas tareas comunes listas para usar:"),ke=v(),ae=u("p"),je=u("strong"),ve=i("Texto"),qe=i(":"),_e=v(),ee=u("ul"),Ce=u("li"),no=i("An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),io=v(),Ca=u("li"),po=i("Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),co=v(),Ta=u("li"),uo=i("Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),fo=v(),za=u("li"),mo=i("Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),ho=v(),xa=u("li"),$o=i("Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),_o=v(),Ma=u("li"),go=i("Summarization: genera un resumen de una secuencia larga de texto o un documento."),vo=v(),Pa=u("li"),Eo=i("Traducci\xF3n: traduce un texto a otro idioma."),bo=v(),Sa=u("li"),wo=i("Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),Ls=v(),kt=u("p"),Oa=u("strong"),ko=i("Imagen"),jo=i(":"),Hs=v(),Te=u("ul"),Da=u("li"),yo=i("Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),Ao=v(),Ia=u("li"),qo=i("Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),Co=v(),Na=u("li"),To=i("Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),Us=v(),jt=u("p"),Fa=u("strong"),zo=i("Audio"),xo=i(":"),Rs=v(),Ye=u("ul"),La=u("li"),Mo=i("Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),Po=v(),Ha=u("li"),So=i("Automatic speech recognition (ASR): transcribe datos de audio a un texto."),Ws=v(),M(Ze.$$.fragment),Vs=v(),Le=u("h3"),Qe=u("a"),Ua=u("span"),M(yt.$$.fragment),Oo=v(),Ra=u("span"),Do=i("Uso del Pipeline"),Ks=v(),Xe=u("p"),Io=i("En el siguiente ejemplo, usar\xE1s el "),Wa=u("code"),No=i("pipeline()"),Fo=i(" para an\xE1lisis de sentimiento."),Gs=v(),ea=u("p"),Lo=i("Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Bs=v(),M(et.$$.fragment),Js=v(),tt=u("p"),Ho=i("Importa "),Va=u("code"),Uo=i("pipeline()"),Ro=i(" y especifica la tarea que deseas completar:"),Ys=v(),M(At.$$.fragment),Zs=v(),ze=u("p"),Wo=i("El pipeline descarga y almacena en cach\xE9 un "),qt=u("a"),Vo=i("modelo preentrenado"),Ko=i(" por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Ka=u("code"),Go=i("classifier"),Bo=i(" en tu texto objetivo:"),Qs=v(),M(Ct.$$.fragment),Xs=v(),at=u("p"),Jo=i("Para m\xE1s de un enunciado entrega una lista de frases al "),Ga=u("code"),Yo=i("pipeline()"),Zo=i(" que devolver\xE1 una lista de diccionarios:"),er=v(),M(Tt.$$.fragment),tr=v(),xe=u("p"),Qo=i("El "),Ba=u("code"),Xo=i("pipeline()"),el=i(" tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),zt=u("a"),tl=i("\u{1F917} Datasets"),al=i(":"),ar=v(),M(xt.$$.fragment),sr=v(),ye=u("p"),sl=i("Crea un "),Ja=u("code"),rl=i("pipeline()"),ol=i(" con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Ya=u("code"),ll=i("device"),nl=i(" a "),Za=u("code"),il=i("0"),pl=i(" para poner los tensores en un dispositivo CUDA:"),rr=v(),M(Mt.$$.fragment),or=v(),Me=u("p"),cl=i("A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Pt=u("a"),ul=i("Quick Start"),fl=i(" para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),St=u("a"),dl=i("MInDS-14"),ml=i(":"),lr=v(),M(Ot.$$.fragment),nr=v(),ta=u("p"),hl=i("Puedes pasar un pipeline para un dataset:"),ir=v(),M(Dt.$$.fragment),pr=v(),st=u("p"),$l=i("Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=u("a"),_l=i("documentaci\xF3n del pipeline"),gl=i(" para m\xE1s informaci\xF3n."),cr=v(),He=u("h3"),rt=u("a"),Qa=u("span"),M(It.$$.fragment),vl=v(),Xa=u("span"),El=i("Use otro modelo y otro tokenizador en el pipeline"),ur=v(),Ee=u("p"),bl=i("El "),es=u("code"),wl=i("pipeline()"),kl=i(" puede adaptarse a cualquier modelo del "),Nt=u("a"),jl=i("Model Hub"),yl=i(" haciendo m\xE1s f\xE1cil adaptar el "),ts=u("code"),Al=i("pipeline()"),ql=i(" para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ft=u("a"),Cl=i("modelo BERT"),Tl=i(" multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),fr=v(),M(Lt.$$.fragment),dr=v(),M(ot.$$.fragment),mr=v(),Pe=u("p"),zl=i("Despu\xE9s puedes especificar el modelo y el tokenizador en el "),as=u("code"),xl=i("pipeline()"),Ml=i(", y aplicar el "),ss=u("code"),Pl=i("classifier"),Sl=i(" en tu texto objetivo:"),hr=v(),M(Ht.$$.fragment),$r=v(),Se=u("p"),Ol=i("Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=u("a"),Dl=i("tutorial de fine-tuning"),Il=i(" para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=u("a"),Nl=i("aqu\xED"),Fl=i(") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),_r=v(),Ue=u("h2"),lt=u("a"),rs=u("span"),M(Ut.$$.fragment),Ll=v(),os=u("span"),Hl=i("AutoClass"),gr=v(),M(Rt.$$.fragment),vr=v(),me=u("p"),Ul=i("Debajo del cap\xF3, las clases "),ls=u("code"),Rl=i("AutoModelForSequenceClassification"),Wl=i(" y "),ns=u("code"),Vl=i("AutoTokenizer"),Kl=i(" trabajan juntas para dar poder al "),is=u("code"),Gl=i("pipeline()"),Bl=i(". Una "),oa=u("a"),Jl=i("AutoClass"),Yl=i(" es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ps=u("code"),Zl=i("AutoClass"),Ql=i(" apropiado para tu tarea y tu tokenizador asociado con "),cs=u("code"),Xl=i("AutoTokenizer"),en=i("."),Er=v(),Oe=u("p"),tn=i("Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),us=u("code"),an=i("AutoClass"),sn=i(" para reproducir los resultados del "),fs=u("code"),rn=i("pipeline()"),on=i("."),br=v(),Re=u("h3"),nt=u("a"),ds=u("span"),M(Wt.$$.fragment),ln=v(),ms=u("span"),nn=i("AutoTokenizer"),wr=v(),De=u("p"),pn=i("Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),hs=u("em"),cn=i("tokens"),un=i(". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=u("a"),fn=i("aqu\xED"),dn=i("). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),kr=v(),it=u("p"),mn=i("Carga un tokenizador con "),$s=u("code"),hn=i("AutoTokenizer"),$n=i(":"),jr=v(),M(Vt.$$.fragment),yr=v(),pt=u("p"),_n=i("Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),_s=u("em"),gn=i("vocabulario"),vn=i(" del modelo."),Ar=v(),na=u("p"),En=i("Pasa tu texto al tokenizador:"),qr=v(),M(Kt.$$.fragment),Cr=v(),ia=u("p"),bn=i("El tokenizador devolver\xE1 un diccionario conteniendo:"),Tr=v(),ct=u("ul"),pa=u("li"),ca=u("a"),wn=i("input_ids"),kn=i(": representaciones num\xE9ricas de los tokens."),jn=v(),ua=u("li"),fa=u("a"),yn=i("atttention_mask"),An=i(": indica cu\xE1les tokens deben ser atendidos."),zr=v(),ut=u("p"),qn=i("Como con el "),gs=u("code"),Cn=i("pipeline()"),Tn=i(", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),xr=v(),M(ft.$$.fragment),Mr=v(),dt=u("p"),zn=i("Lee el tutorial de "),da=u("a"),xn=i("preprocessing"),Mn=i(" para m\xE1s detalles acerca de la tokenizaci\xF3n."),Pr=v(),We=u("h3"),mt=u("a"),vs=u("span"),M(Gt.$$.fragment),Pn=v(),Es=u("span"),Sn=i("AutoModel"),Sr=v(),M(ht.$$.fragment),Or=v(),M($t.$$.fragment),Dr=v(),he=u("p"),On=i("Los modelos son "),Bt=u("a"),bs=u("code"),Dn=i("torch.nn.Module"),In=i(" o "),Jt=u("a"),ws=u("code"),Nn=i("tf.keras.Model"),Fn=i(" est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ks=u("code"),Ln=i("Trainer"),Hn=i(" para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),js=u("code"),Un=i("fit"),Rn=i(" desde "),Yt=u("a"),Wn=i("Keras"),Vn=i(". Consulta el "),ma=u("a"),Kn=i("tutorial de entrenamiento"),Gn=i(" para m\xE1s detalles."),Ir=v(),M(_t.$$.fragment),Nr=v(),Ve=u("h3"),gt=u("a"),ys=u("span"),M(Zt.$$.fragment),Bn=v(),As=u("span"),Jn=i("Guarda un modelo"),Fr=v(),M(vt.$$.fragment),Lr=v(),Ie=u("p"),Yn=i("Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),qs=u("code"),Zn=i("from_pt"),Qn=i(" o "),Cs=u("code"),Xn=i("from_tf"),ei=i(" puede convertir el modelo de un framework al otro:"),Hr=v(),M(Et.$$.fragment),this.h()},l(t){const h=sc('[data-svelte="svelte-1phssyn"]',document.head);e=f(h,"META",{name:!0,content:!0}),h.forEach(r),l=E(t),a=f(t,"H1",{class:!0});var Qt=n(a);o=f(Qt,"A",{id:!0,class:!0,href:!0});var Ts=n(o);c=f(Ts,"SPAN",{});var zs=n(c);O(_.$$.fragment,zs),zs.forEach(r),Ts.forEach(r),g=E(Qt),b=f(Qt,"SPAN",{});var xs=n(b);k=p(xs,"Quick tour"),xs.forEach(r),Qt.forEach(r),C=E(t),O(A.$$.fragment,t),y=E(t),T=f(t,"P",{});var Ke=n(T);U=p(Ke,"\xA1Entra en marcha con los \u{1F917} Transformers! Comienza usando "),F=f(Ke,"CODE",{});var Ms=n(F);W=p(Ms,"pipeline()"),Ms.forEach(r),w=p(Ke," para una inferencia veloz, carga un modelo preentrenado y un tokenizador con una "),z=f(Ke,"A",{href:!0});var Ps=n(z);B=p(Ps,"AutoClass"),Ps.forEach(r),R=p(Ke," para resolver tu tarea de texto, visi\xF3n o audio."),Ke.forEach(r),L=E(t),O(V.$$.fragment,t),Y=E(t),K=f(t,"H2",{class:!0});var Xt=n(K);J=f(Xt,"A",{id:!0,class:!0,href:!0});var Ss=n(J);oe=f(Ss,"SPAN",{});var Os=n(oe);O(se.$$.fragment,Os),Os.forEach(r),Ss.forEach(r),re=E(Xt),ue=f(Xt,"SPAN",{});var ci=n(ue);ie=p(ci,"Pipeline"),ci.forEach(r),Xt.forEach(r),fe=E(t),le=f(t,"P",{});var ti=n(le);X=f(ti,"CODE",{});var ui=n(X);pe=p(ui,"pipeline()"),ui.forEach(r),de=p(ti," es la forma m\xE1s f\xE1cil de usar un modelo preentrenado para una tarea dada."),ti.forEach(r),D=E(t),O(H.$$.fragment,t),te=E(t),x=f(t,"P",{});var Rr=n(x);G=p(Rr,"El "),ce=f(Rr,"CODE",{});var fi=n(ce);$e=p(fi,"pipeline()"),fi.forEach(r),Z=p(Rr," soporta muchas tareas comunes listas para usar:"),Rr.forEach(r),ke=E(t),ae=f(t,"P",{});var ai=n(ae);je=f(ai,"STRONG",{});var di=n(je);ve=p(di,"Texto"),di.forEach(r),qe=p(ai,":"),ai.forEach(r),_e=E(t),ee=f(t,"UL",{});var ge=n(ee);Ce=f(ge,"LI",{});var mi=n(Ce);no=p(mi,"An\xE1lisis de Sentimientos: clasifica la polaridad de un texto dado."),mi.forEach(r),io=E(ge),Ca=f(ge,"LI",{});var hi=n(Ca);po=p(hi,"Generaci\xF3n de texto (solo en ingl\xE9s): genera texto a partir de un input dado."),hi.forEach(r),co=E(ge),Ta=f(ge,"LI",{});var $i=n(Ta);uo=p($i,"Name entity recognition (NER): etiqueta cada palabra con la entidad que representa (persona, fecha, ubicaci\xF3n, etc.)."),$i.forEach(r),fo=E(ge),za=f(ge,"LI",{});var _i=n(za);mo=p(_i,"Responder preguntas: extrae la respuesta del contexto dado un contexto y una pregunta."),_i.forEach(r),ho=E(ge),xa=f(ge,"LI",{});var gi=n(xa);$o=p(gi,"Fill-mask: rellena el espacio faltante dado un texto con palabras enmascaradas."),gi.forEach(r),_o=E(ge),Ma=f(ge,"LI",{});var vi=n(Ma);go=p(vi,"Summarization: genera un resumen de una secuencia larga de texto o un documento."),vi.forEach(r),vo=E(ge),Pa=f(ge,"LI",{});var Ei=n(Pa);Eo=p(Ei,"Traducci\xF3n: traduce un texto a otro idioma."),Ei.forEach(r),bo=E(ge),Sa=f(ge,"LI",{});var bi=n(Sa);wo=p(bi,"Extracci\xF3n de caracter\xEDsticas: crea una representaci\xF3n tensorial del texto."),bi.forEach(r),ge.forEach(r),Ls=E(t),kt=f(t,"P",{});var si=n(kt);Oa=f(si,"STRONG",{});var wi=n(Oa);ko=p(wi,"Imagen"),wi.forEach(r),jo=p(si,":"),si.forEach(r),Hs=E(t),Te=f(t,"UL",{});var ha=n(Te);Da=f(ha,"LI",{});var ki=n(Da);yo=p(ki,"Clasificaci\xF3n de im\xE1genes: clasifica una imagen."),ki.forEach(r),Ao=E(ha),Ia=f(ha,"LI",{});var ji=n(Ia);qo=p(ji,"Segmentaci\xF3n de im\xE1genes: clasifica cada pixel de una imagen."),ji.forEach(r),Co=E(ha),Na=f(ha,"LI",{});var yi=n(Na);To=p(yi,"Detecci\xF3n de objetos: detecta objetos dentro de una imagen."),yi.forEach(r),ha.forEach(r),Us=E(t),jt=f(t,"P",{});var ri=n(jt);Fa=f(ri,"STRONG",{});var Ai=n(Fa);zo=p(Ai,"Audio"),Ai.forEach(r),xo=p(ri,":"),ri.forEach(r),Rs=E(t),Ye=f(t,"UL",{});var Wr=n(Ye);La=f(Wr,"LI",{});var qi=n(La);Mo=p(qi,"Clasificaci\xF3n de audios: asigna una etiqueta a un segmento de audio."),qi.forEach(r),Po=E(Wr),Ha=f(Wr,"LI",{});var Ci=n(Ha);So=p(Ci,"Automatic speech recognition (ASR): transcribe datos de audio a un texto."),Ci.forEach(r),Wr.forEach(r),Ws=E(t),O(Ze.$$.fragment,t),Vs=E(t),Le=f(t,"H3",{class:!0});var Vr=n(Le);Qe=f(Vr,"A",{id:!0,class:!0,href:!0});var Ti=n(Qe);Ua=f(Ti,"SPAN",{});var zi=n(Ua);O(yt.$$.fragment,zi),zi.forEach(r),Ti.forEach(r),Oo=E(Vr),Ra=f(Vr,"SPAN",{});var xi=n(Ra);Do=p(xi,"Uso del Pipeline"),xi.forEach(r),Vr.forEach(r),Ks=E(t),Xe=f(t,"P",{});var Kr=n(Xe);Io=p(Kr,"En el siguiente ejemplo, usar\xE1s el "),Wa=f(Kr,"CODE",{});var Mi=n(Wa);No=p(Mi,"pipeline()"),Mi.forEach(r),Fo=p(Kr," para an\xE1lisis de sentimiento."),Kr.forEach(r),Gs=E(t),ea=f(t,"P",{});var Pi=n(ea);Lo=p(Pi,"Instala las siguientes dependencias si a\xFAn no lo has hecho:"),Pi.forEach(r),Bs=E(t),O(et.$$.fragment,t),Js=E(t),tt=f(t,"P",{});var Gr=n(tt);Ho=p(Gr,"Importa "),Va=f(Gr,"CODE",{});var Si=n(Va);Uo=p(Si,"pipeline()"),Si.forEach(r),Ro=p(Gr," y especifica la tarea que deseas completar:"),Gr.forEach(r),Ys=E(t),O(At.$$.fragment,t),Zs=E(t),ze=f(t,"P",{});var $a=n(ze);Wo=p($a,"El pipeline descarga y almacena en cach\xE9 un "),qt=f($a,"A",{href:!0,rel:!0});var Oi=n(qt);Vo=p(Oi,"modelo preentrenado"),Oi.forEach(r),Ko=p($a," por defecto y tokeniza para an\xE1lisis de sentimiento. Ahora puedes usar "),Ka=f($a,"CODE",{});var Di=n(Ka);Go=p(Di,"classifier"),Di.forEach(r),Bo=p($a," en tu texto objetivo:"),$a.forEach(r),Qs=E(t),O(Ct.$$.fragment,t),Xs=E(t),at=f(t,"P",{});var Br=n(at);Jo=p(Br,"Para m\xE1s de un enunciado entrega una lista de frases al "),Ga=f(Br,"CODE",{});var Ii=n(Ga);Yo=p(Ii,"pipeline()"),Ii.forEach(r),Zo=p(Br," que devolver\xE1 una lista de diccionarios:"),Br.forEach(r),er=E(t),O(Tt.$$.fragment,t),tr=E(t),xe=f(t,"P",{});var _a=n(xe);Qo=p(_a,"El "),Ba=f(_a,"CODE",{});var Ni=n(Ba);Xo=p(Ni,"pipeline()"),Ni.forEach(r),el=p(_a," tambi\xE9n puede iterar sobre un dataset entero. Comienza instalando la biblioteca "),zt=f(_a,"A",{href:!0,rel:!0});var Fi=n(zt);tl=p(Fi,"\u{1F917} Datasets"),Fi.forEach(r),al=p(_a,":"),_a.forEach(r),ar=E(t),O(xt.$$.fragment,t),sr=E(t),ye=f(t,"P",{});var bt=n(ye);sl=p(bt,"Crea un "),Ja=f(bt,"CODE",{});var Li=n(Ja);rl=p(Li,"pipeline()"),Li.forEach(r),ol=p(bt," con la tarea que deseas resolver y el modelo que quieres usar. Coloca el par\xE1metro "),Ya=f(bt,"CODE",{});var Hi=n(Ya);ll=p(Hi,"device"),Hi.forEach(r),nl=p(bt," a "),Za=f(bt,"CODE",{});var Ui=n(Za);il=p(Ui,"0"),Ui.forEach(r),pl=p(bt," para poner los tensores en un dispositivo CUDA:"),bt.forEach(r),rr=E(t),O(Mt.$$.fragment,t),or=E(t),Me=f(t,"P",{});var ga=n(Me);cl=p(ga,"A continuaci\xF3n, carga el dataset (ve \u{1F917} Datasets "),Pt=f(ga,"A",{href:!0,rel:!0});var Ri=n(Pt);ul=p(Ri,"Quick Start"),Ri.forEach(r),fl=p(ga," para m\xE1s detalles) sobre el que quisieras iterar. Por ejemplo, vamos a cargar el dataset "),St=f(ga,"A",{href:!0,rel:!0});var Wi=n(St);dl=p(Wi,"MInDS-14"),Wi.forEach(r),ml=p(ga,":"),ga.forEach(r),lr=E(t),O(Ot.$$.fragment,t),nr=E(t),ta=f(t,"P",{});var Vi=n(ta);hl=p(Vi,"Puedes pasar un pipeline para un dataset:"),Vi.forEach(r),ir=E(t),O(Dt.$$.fragment,t),pr=E(t),st=f(t,"P",{});var Jr=n(st);$l=p(Jr,"Para un dataset m\xE1s grande, donde los inputs son de mayor tama\xF1o (como en habla/audio o visi\xF3n), querr\xE1s pasar un generador en lugar de una lista que carga todos los inputs en memoria. Ve la "),aa=f(Jr,"A",{href:!0});var Ki=n(aa);_l=p(Ki,"documentaci\xF3n del pipeline"),Ki.forEach(r),gl=p(Jr," para m\xE1s informaci\xF3n."),Jr.forEach(r),cr=E(t),He=f(t,"H3",{class:!0});var Yr=n(He);rt=f(Yr,"A",{id:!0,class:!0,href:!0});var Gi=n(rt);Qa=f(Gi,"SPAN",{});var Bi=n(Qa);O(It.$$.fragment,Bi),Bi.forEach(r),Gi.forEach(r),vl=E(Yr),Xa=f(Yr,"SPAN",{});var Ji=n(Xa);El=p(Ji,"Use otro modelo y otro tokenizador en el pipeline"),Ji.forEach(r),Yr.forEach(r),ur=E(t),Ee=f(t,"P",{});var Ne=n(Ee);bl=p(Ne,"El "),es=f(Ne,"CODE",{});var Yi=n(es);wl=p(Yi,"pipeline()"),Yi.forEach(r),kl=p(Ne," puede adaptarse a cualquier modelo del "),Nt=f(Ne,"A",{href:!0,rel:!0});var Zi=n(Nt);jl=p(Zi,"Model Hub"),Zi.forEach(r),yl=p(Ne," haciendo m\xE1s f\xE1cil adaptar el "),ts=f(Ne,"CODE",{});var Qi=n(ts);Al=p(Qi,"pipeline()"),Qi.forEach(r),ql=p(Ne," para otros casos de uso. Por ejemplo, si quisieras un modelo capaz de manejar texto en franc\xE9s, usa los tags en el Model Hub para filtrar entre los modelos apropiados. El resultado mejor filtrado devuelve un "),Ft=f(Ne,"A",{href:!0,rel:!0});var Xi=n(Ft);Cl=p(Xi,"modelo BERT"),Xi.forEach(r),Tl=p(Ne," multilingual fine-tuned para el an\xE1lisis de sentimiento. Genial, \xA1vamos a usar este modelo!"),Ne.forEach(r),fr=E(t),O(Lt.$$.fragment,t),dr=E(t),O(ot.$$.fragment,t),mr=E(t),Pe=f(t,"P",{});var va=n(Pe);zl=p(va,"Despu\xE9s puedes especificar el modelo y el tokenizador en el "),as=f(va,"CODE",{});var ep=n(as);xl=p(ep,"pipeline()"),ep.forEach(r),Ml=p(va,", y aplicar el "),ss=f(va,"CODE",{});var tp=n(ss);Pl=p(tp,"classifier"),tp.forEach(r),Sl=p(va," en tu texto objetivo:"),va.forEach(r),hr=E(t),O(Ht.$$.fragment,t),$r=E(t),Se=f(t,"P",{});var Ea=n(Se);Ol=p(Ea,"Si no pudieras encontrar el modelo para tu caso respectivo de uso necesitar\xE1s ajustar un modelo preentrenado a tus datos. Mira nuestro "),sa=f(Ea,"A",{href:!0});var ap=n(sa);Dl=p(ap,"tutorial de fine-tuning"),ap.forEach(r),Il=p(Ea," para aprender c\xF3mo. Finalmente, despu\xE9s de que has ajustado tu modelo preentrenado, \xA1por favor considera compartirlo (ve el tutorial "),ra=f(Ea,"A",{href:!0});var sp=n(ra);Nl=p(sp,"aqu\xED"),sp.forEach(r),Fl=p(Ea,") con la comunidad en el Model Hub para democratizar el NLP! \u{1F917}"),Ea.forEach(r),_r=E(t),Ue=f(t,"H2",{class:!0});var Zr=n(Ue);lt=f(Zr,"A",{id:!0,class:!0,href:!0});var rp=n(lt);rs=f(rp,"SPAN",{});var op=n(rs);O(Ut.$$.fragment,op),op.forEach(r),rp.forEach(r),Ll=E(Zr),os=f(Zr,"SPAN",{});var lp=n(os);Hl=p(lp,"AutoClass"),lp.forEach(r),Zr.forEach(r),gr=E(t),O(Rt.$$.fragment,t),vr=E(t),me=f(t,"P",{});var be=n(me);Ul=p(be,"Debajo del cap\xF3, las clases "),ls=f(be,"CODE",{});var np=n(ls);Rl=p(np,"AutoModelForSequenceClassification"),np.forEach(r),Wl=p(be," y "),ns=f(be,"CODE",{});var ip=n(ns);Vl=p(ip,"AutoTokenizer"),ip.forEach(r),Kl=p(be," trabajan juntas para dar poder al "),is=f(be,"CODE",{});var pp=n(is);Gl=p(pp,"pipeline()"),pp.forEach(r),Bl=p(be,". Una "),oa=f(be,"A",{href:!0});var cp=n(oa);Jl=p(cp,"AutoClass"),cp.forEach(r),Yl=p(be," es un atajo que autom\xE1ticamente recupera la arquitectura de un modelo preentrenado con su nombre o el path. S\xF3lo necesitar\xE1s seleccionar el "),ps=f(be,"CODE",{});var up=n(ps);Zl=p(up,"AutoClass"),up.forEach(r),Ql=p(be," apropiado para tu tarea y tu tokenizador asociado con "),cs=f(be,"CODE",{});var fp=n(cs);Xl=p(fp,"AutoTokenizer"),fp.forEach(r),en=p(be,"."),be.forEach(r),Er=E(t),Oe=f(t,"P",{});var ba=n(Oe);tn=p(ba,"Regresemos a nuestro ejemplo y veamos c\xF3mo puedes usar el "),us=f(ba,"CODE",{});var dp=n(us);an=p(dp,"AutoClass"),dp.forEach(r),sn=p(ba," para reproducir los resultados del "),fs=f(ba,"CODE",{});var mp=n(fs);rn=p(mp,"pipeline()"),mp.forEach(r),on=p(ba,"."),ba.forEach(r),br=E(t),Re=f(t,"H3",{class:!0});var Qr=n(Re);nt=f(Qr,"A",{id:!0,class:!0,href:!0});var hp=n(nt);ds=f(hp,"SPAN",{});var $p=n(ds);O(Wt.$$.fragment,$p),$p.forEach(r),hp.forEach(r),ln=E(Qr),ms=f(Qr,"SPAN",{});var _p=n(ms);nn=p(_p,"AutoTokenizer"),_p.forEach(r),Qr.forEach(r),wr=E(t),De=f(t,"P",{});var wa=n(De);pn=p(wa,"Un tokenizador es responsable de procesar el texto a un formato que sea entendible para el modelo. Primero, el tokenizador separar\xE1 el texto en palabras llamadas "),hs=f(wa,"EM",{});var gp=n(hs);cn=p(gp,"tokens"),gp.forEach(r),un=p(wa,". Hay m\xFAltiples reglas que gobiernan el proceso de tokenizaci\xF3n incluyendo el c\xF3mo separar una palabra y en qu\xE9 nivel (aprende m\xE1s sobre tokenizaci\xF3n "),la=f(wa,"A",{href:!0});var vp=n(la);fn=p(vp,"aqu\xED"),vp.forEach(r),dn=p(wa,"). Lo m\xE1s importante es recordar que necesitar\xE1s instanciar el tokenizador con el mismo nombre del modelo para asegurar que est\xE1s usando las mismas reglas de tokenizaci\xF3n con las que el modelo fue preentrenado."),wa.forEach(r),kr=E(t),it=f(t,"P",{});var Xr=n(it);mn=p(Xr,"Carga un tokenizador con "),$s=f(Xr,"CODE",{});var Ep=n($s);hn=p(Ep,"AutoTokenizer"),Ep.forEach(r),$n=p(Xr,":"),Xr.forEach(r),jr=E(t),O(Vt.$$.fragment,t),yr=E(t),pt=f(t,"P",{});var eo=n(pt);_n=p(eo,"Despu\xE9s, el tokenizador convierte los tokens a n\xFAmeros para construir un tensor que servir\xE1 como input para el modelo. Esto es conocido como el "),_s=f(eo,"EM",{});var bp=n(_s);gn=p(bp,"vocabulario"),bp.forEach(r),vn=p(eo," del modelo."),eo.forEach(r),Ar=E(t),na=f(t,"P",{});var wp=n(na);En=p(wp,"Pasa tu texto al tokenizador:"),wp.forEach(r),qr=E(t),O(Kt.$$.fragment,t),Cr=E(t),ia=f(t,"P",{});var kp=n(ia);bn=p(kp,"El tokenizador devolver\xE1 un diccionario conteniendo:"),kp.forEach(r),Tr=E(t),ct=f(t,"UL",{});var to=n(ct);pa=f(to,"LI",{});var oi=n(pa);ca=f(oi,"A",{href:!0});var jp=n(ca);wn=p(jp,"input_ids"),jp.forEach(r),kn=p(oi,": representaciones num\xE9ricas de los tokens."),oi.forEach(r),jn=E(to),ua=f(to,"LI",{});var li=n(ua);fa=f(li,"A",{href:!0});var yp=n(fa);yn=p(yp,"atttention_mask"),yp.forEach(r),An=p(li,": indica cu\xE1les tokens deben ser atendidos."),li.forEach(r),to.forEach(r),zr=E(t),ut=f(t,"P",{});var ao=n(ut);qn=p(ao,"Como con el "),gs=f(ao,"CODE",{});var Ap=n(gs);Cn=p(Ap,"pipeline()"),Ap.forEach(r),Tn=p(ao,", el tokenizador aceptar\xE1 una lista de inputs. Adem\xE1s, el tokenizador tambi\xE9n puede rellenar (pad, en ingl\xE9s) y truncar el texto para devolver un lote (batch, en ingl\xE9s) de longitud uniforme:"),ao.forEach(r),xr=E(t),O(ft.$$.fragment,t),Mr=E(t),dt=f(t,"P",{});var so=n(dt);zn=p(so,"Lee el tutorial de "),da=f(so,"A",{href:!0});var qp=n(da);xn=p(qp,"preprocessing"),qp.forEach(r),Mn=p(so," para m\xE1s detalles acerca de la tokenizaci\xF3n."),so.forEach(r),Pr=E(t),We=f(t,"H3",{class:!0});var ro=n(We);mt=f(ro,"A",{id:!0,class:!0,href:!0});var Cp=n(mt);vs=f(Cp,"SPAN",{});var Tp=n(vs);O(Gt.$$.fragment,Tp),Tp.forEach(r),Cp.forEach(r),Pn=E(ro),Es=f(ro,"SPAN",{});var zp=n(Es);Sn=p(zp,"AutoModel"),zp.forEach(r),ro.forEach(r),Sr=E(t),O(ht.$$.fragment,t),Or=E(t),O($t.$$.fragment,t),Dr=E(t),he=f(t,"P",{});var we=n(he);On=p(we,"Los modelos son "),Bt=f(we,"A",{href:!0,rel:!0});var xp=n(Bt);bs=f(xp,"CODE",{});var Mp=n(bs);Dn=p(Mp,"torch.nn.Module"),Mp.forEach(r),xp.forEach(r),In=p(we," o "),Jt=f(we,"A",{href:!0,rel:!0});var Pp=n(Jt);ws=f(Pp,"CODE",{});var Sp=n(ws);Nn=p(Sp,"tf.keras.Model"),Sp.forEach(r),Pp.forEach(r),Fn=p(we," est\xE1ndares as\xED que podr\xE1s usarlos en tu training loop usual. Sin embargo, para facilitar las cosas, \u{1F917} Transformers provee una clase "),ks=f(we,"CODE",{});var Op=n(ks);Ln=p(Op,"Trainer"),Op.forEach(r),Hn=p(we," para PyTorch que a\xF1ade funcionalidades para entrenamiento distribuido, precici\xF3n mixta, y m\xE1s. Para TensorFlow, puedes usar el m\xE9todo "),js=f(we,"CODE",{});var Dp=n(js);Un=p(Dp,"fit"),Dp.forEach(r),Rn=p(we," desde "),Yt=f(we,"A",{href:!0,rel:!0});var Ip=n(Yt);Wn=p(Ip,"Keras"),Ip.forEach(r),Vn=p(we,". Consulta el "),ma=f(we,"A",{href:!0});var Np=n(ma);Kn=p(Np,"tutorial de entrenamiento"),Np.forEach(r),Gn=p(we," para m\xE1s detalles."),we.forEach(r),Ir=E(t),O(_t.$$.fragment,t),Nr=E(t),Ve=f(t,"H3",{class:!0});var oo=n(Ve);gt=f(oo,"A",{id:!0,class:!0,href:!0});var Fp=n(gt);ys=f(Fp,"SPAN",{});var Lp=n(ys);O(Zt.$$.fragment,Lp),Lp.forEach(r),Fp.forEach(r),Bn=E(oo),As=f(oo,"SPAN",{});var Hp=n(As);Jn=p(Hp,"Guarda un modelo"),Hp.forEach(r),oo.forEach(r),Fr=E(t),O(vt.$$.fragment,t),Lr=E(t),Ie=f(t,"P",{});var ka=n(Ie);Yn=p(ka,"Una caracter\xEDstica particularmente cool de \u{1F917} Transformers es la habilidad de guardar el modelo y cargarlo como un modelo de PyTorch o TensorFlow. El par\xE1metro "),qs=f(ka,"CODE",{});var Up=n(qs);Zn=p(Up,"from_pt"),Up.forEach(r),Qn=p(ka," o "),Cs=f(ka,"CODE",{});var Rp=n(Cs);Xn=p(Rp,"from_tf"),Rp.forEach(r),ei=p(ka," puede convertir el modelo de un framework al otro:"),ka.forEach(r),Hr=E(t),O(Et.$$.fragment,t),this.h()},h(){d(e,"name","hf:doc:metadata"),d(e,"content",JSON.stringify(du)),d(o,"id","quick-tour"),d(o,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o,"href","#quick-tour"),d(a,"class","relative group"),d(z,"href","./model_doc/auto"),d(J,"id","pipeline"),d(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J,"href","#pipeline"),d(K,"class","relative group"),d(Qe,"id","uso-del-pipeline"),d(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qe,"href","#uso-del-pipeline"),d(Le,"class","relative group"),d(qt,"href","https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english"),d(qt,"rel","nofollow"),d(zt,"href","https://huggingface.co/docs/datasets/"),d(zt,"rel","nofollow"),d(Pt,"href","https://huggingface.co/docs/datasets/quickstart.html"),d(Pt,"rel","nofollow"),d(St,"href","https://huggingface.co/datasets/PolyAI/minds14"),d(St,"rel","nofollow"),d(aa,"href","./main_classes/pipelines"),d(rt,"id","use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rt,"href","#use-otro-modelo-y-otro-tokenizador-en-el-pipeline"),d(He,"class","relative group"),d(Nt,"href","https://huggingface.co/models"),d(Nt,"rel","nofollow"),d(Ft,"href","https://huggingface.co/nlptown/bert-base-multilingual-uncased-sentiment"),d(Ft,"rel","nofollow"),d(sa,"href","./training"),d(ra,"href","./model_sharing"),d(lt,"id","autoclass"),d(lt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lt,"href","#autoclass"),d(Ue,"class","relative group"),d(oa,"href","./model_doc/auto"),d(nt,"id","autotokenizer"),d(nt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nt,"href","#autotokenizer"),d(Re,"class","relative group"),d(la,"href","./tokenizer_summary"),d(ca,"href","./glossary#input-ids"),d(fa,"href",".glossary#attention-mask"),d(da,"href","./preprocessing"),d(mt,"id","automodel"),d(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mt,"href","#automodel"),d(We,"class","relative group"),d(Bt,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(Bt,"rel","nofollow"),d(Jt,"href","https://www.tensorflow.org/api_docs/python/tf/keras/Model"),d(Jt,"rel","nofollow"),d(Yt,"href","https://keras.io/"),d(Yt,"rel","nofollow"),d(ma,"href","./training"),d(gt,"id","guarda-un-modelo"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#guarda-un-modelo"),d(Ve,"class","relative group")},m(t,h){s(document.head,e),$(t,l,h),$(t,a,h),s(a,o),s(o,c),P(_,c,null),s(a,g),s(a,b),s(b,k),$(t,C,h),P(A,t,h),$(t,y,h),$(t,T,h),s(T,U),s(T,F),s(F,W),s(T,w),s(T,z),s(z,B),s(T,R),$(t,L,h),P(V,t,h),$(t,Y,h),$(t,K,h),s(K,J),s(J,oe),P(se,oe,null),s(K,re),s(K,ue),s(ue,ie),$(t,fe,h),$(t,le,h),s(le,X),s(X,pe),s(le,de),$(t,D,h),P(H,t,h),$(t,te,h),$(t,x,h),s(x,G),s(x,ce),s(ce,$e),s(x,Z),$(t,ke,h),$(t,ae,h),s(ae,je),s(je,ve),s(ae,qe),$(t,_e,h),$(t,ee,h),s(ee,Ce),s(Ce,no),s(ee,io),s(ee,Ca),s(Ca,po),s(ee,co),s(ee,Ta),s(Ta,uo),s(ee,fo),s(ee,za),s(za,mo),s(ee,ho),s(ee,xa),s(xa,$o),s(ee,_o),s(ee,Ma),s(Ma,go),s(ee,vo),s(ee,Pa),s(Pa,Eo),s(ee,bo),s(ee,Sa),s(Sa,wo),$(t,Ls,h),$(t,kt,h),s(kt,Oa),s(Oa,ko),s(kt,jo),$(t,Hs,h),$(t,Te,h),s(Te,Da),s(Da,yo),s(Te,Ao),s(Te,Ia),s(Ia,qo),s(Te,Co),s(Te,Na),s(Na,To),$(t,Us,h),$(t,jt,h),s(jt,Fa),s(Fa,zo),s(jt,xo),$(t,Rs,h),$(t,Ye,h),s(Ye,La),s(La,Mo),s(Ye,Po),s(Ye,Ha),s(Ha,So),$(t,Ws,h),P(Ze,t,h),$(t,Vs,h),$(t,Le,h),s(Le,Qe),s(Qe,Ua),P(yt,Ua,null),s(Le,Oo),s(Le,Ra),s(Ra,Do),$(t,Ks,h),$(t,Xe,h),s(Xe,Io),s(Xe,Wa),s(Wa,No),s(Xe,Fo),$(t,Gs,h),$(t,ea,h),s(ea,Lo),$(t,Bs,h),P(et,t,h),$(t,Js,h),$(t,tt,h),s(tt,Ho),s(tt,Va),s(Va,Uo),s(tt,Ro),$(t,Ys,h),P(At,t,h),$(t,Zs,h),$(t,ze,h),s(ze,Wo),s(ze,qt),s(qt,Vo),s(ze,Ko),s(ze,Ka),s(Ka,Go),s(ze,Bo),$(t,Qs,h),P(Ct,t,h),$(t,Xs,h),$(t,at,h),s(at,Jo),s(at,Ga),s(Ga,Yo),s(at,Zo),$(t,er,h),P(Tt,t,h),$(t,tr,h),$(t,xe,h),s(xe,Qo),s(xe,Ba),s(Ba,Xo),s(xe,el),s(xe,zt),s(zt,tl),s(xe,al),$(t,ar,h),P(xt,t,h),$(t,sr,h),$(t,ye,h),s(ye,sl),s(ye,Ja),s(Ja,rl),s(ye,ol),s(ye,Ya),s(Ya,ll),s(ye,nl),s(ye,Za),s(Za,il),s(ye,pl),$(t,rr,h),P(Mt,t,h),$(t,or,h),$(t,Me,h),s(Me,cl),s(Me,Pt),s(Pt,ul),s(Me,fl),s(Me,St),s(St,dl),s(Me,ml),$(t,lr,h),P(Ot,t,h),$(t,nr,h),$(t,ta,h),s(ta,hl),$(t,ir,h),P(Dt,t,h),$(t,pr,h),$(t,st,h),s(st,$l),s(st,aa),s(aa,_l),s(st,gl),$(t,cr,h),$(t,He,h),s(He,rt),s(rt,Qa),P(It,Qa,null),s(He,vl),s(He,Xa),s(Xa,El),$(t,ur,h),$(t,Ee,h),s(Ee,bl),s(Ee,es),s(es,wl),s(Ee,kl),s(Ee,Nt),s(Nt,jl),s(Ee,yl),s(Ee,ts),s(ts,Al),s(Ee,ql),s(Ee,Ft),s(Ft,Cl),s(Ee,Tl),$(t,fr,h),P(Lt,t,h),$(t,dr,h),P(ot,t,h),$(t,mr,h),$(t,Pe,h),s(Pe,zl),s(Pe,as),s(as,xl),s(Pe,Ml),s(Pe,ss),s(ss,Pl),s(Pe,Sl),$(t,hr,h),P(Ht,t,h),$(t,$r,h),$(t,Se,h),s(Se,Ol),s(Se,sa),s(sa,Dl),s(Se,Il),s(Se,ra),s(ra,Nl),s(Se,Fl),$(t,_r,h),$(t,Ue,h),s(Ue,lt),s(lt,rs),P(Ut,rs,null),s(Ue,Ll),s(Ue,os),s(os,Hl),$(t,gr,h),P(Rt,t,h),$(t,vr,h),$(t,me,h),s(me,Ul),s(me,ls),s(ls,Rl),s(me,Wl),s(me,ns),s(ns,Vl),s(me,Kl),s(me,is),s(is,Gl),s(me,Bl),s(me,oa),s(oa,Jl),s(me,Yl),s(me,ps),s(ps,Zl),s(me,Ql),s(me,cs),s(cs,Xl),s(me,en),$(t,Er,h),$(t,Oe,h),s(Oe,tn),s(Oe,us),s(us,an),s(Oe,sn),s(Oe,fs),s(fs,rn),s(Oe,on),$(t,br,h),$(t,Re,h),s(Re,nt),s(nt,ds),P(Wt,ds,null),s(Re,ln),s(Re,ms),s(ms,nn),$(t,wr,h),$(t,De,h),s(De,pn),s(De,hs),s(hs,cn),s(De,un),s(De,la),s(la,fn),s(De,dn),$(t,kr,h),$(t,it,h),s(it,mn),s(it,$s),s($s,hn),s(it,$n),$(t,jr,h),P(Vt,t,h),$(t,yr,h),$(t,pt,h),s(pt,_n),s(pt,_s),s(_s,gn),s(pt,vn),$(t,Ar,h),$(t,na,h),s(na,En),$(t,qr,h),P(Kt,t,h),$(t,Cr,h),$(t,ia,h),s(ia,bn),$(t,Tr,h),$(t,ct,h),s(ct,pa),s(pa,ca),s(ca,wn),s(pa,kn),s(ct,jn),s(ct,ua),s(ua,fa),s(fa,yn),s(ua,An),$(t,zr,h),$(t,ut,h),s(ut,qn),s(ut,gs),s(gs,Cn),s(ut,Tn),$(t,xr,h),P(ft,t,h),$(t,Mr,h),$(t,dt,h),s(dt,zn),s(dt,da),s(da,xn),s(dt,Mn),$(t,Pr,h),$(t,We,h),s(We,mt),s(mt,vs),P(Gt,vs,null),s(We,Pn),s(We,Es),s(Es,Sn),$(t,Sr,h),P(ht,t,h),$(t,Or,h),P($t,t,h),$(t,Dr,h),$(t,he,h),s(he,On),s(he,Bt),s(Bt,bs),s(bs,Dn),s(he,In),s(he,Jt),s(Jt,ws),s(ws,Nn),s(he,Fn),s(he,ks),s(ks,Ln),s(he,Hn),s(he,js),s(js,Un),s(he,Rn),s(he,Yt),s(Yt,Wn),s(he,Vn),s(he,ma),s(ma,Kn),s(he,Gn),$(t,Ir,h),P(_t,t,h),$(t,Nr,h),$(t,Ve,h),s(Ve,gt),s(gt,ys),P(Zt,ys,null),s(Ve,Bn),s(Ve,As),s(As,Jn),$(t,Fr,h),P(vt,t,h),$(t,Lr,h),$(t,Ie,h),s(Ie,Yn),s(Ie,qs),s(qs,Zn),s(Ie,Qn),s(Ie,Cs),s(Cs,Xn),s(Ie,ei),$(t,Hr,h),P(Et,t,h),Ur=!0},p(t,[h]){const Qt={};h&2&&(Qt.$$scope={dirty:h,ctx:t}),V.$set(Qt);const Ts={};h&2&&(Ts.$$scope={dirty:h,ctx:t}),Ze.$set(Ts);const zs={};h&2&&(zs.$$scope={dirty:h,ctx:t}),et.$set(zs);const xs={};h&2&&(xs.$$scope={dirty:h,ctx:t}),ot.$set(xs);const Ke={};h&2&&(Ke.$$scope={dirty:h,ctx:t}),ft.$set(Ke);const Ms={};h&2&&(Ms.$$scope={dirty:h,ctx:t}),ht.$set(Ms);const Ps={};h&2&&(Ps.$$scope={dirty:h,ctx:t}),$t.$set(Ps);const Xt={};h&2&&(Xt.$$scope={dirty:h,ctx:t}),_t.$set(Xt);const Ss={};h&2&&(Ss.$$scope={dirty:h,ctx:t}),vt.$set(Ss);const Os={};h&2&&(Os.$$scope={dirty:h,ctx:t}),Et.$set(Os)},i(t){Ur||(j(_.$$.fragment,t),j(A.$$.fragment,t),j(V.$$.fragment,t),j(se.$$.fragment,t),j(H.$$.fragment,t),j(Ze.$$.fragment,t),j(yt.$$.fragment,t),j(et.$$.fragment,t),j(At.$$.fragment,t),j(Ct.$$.fragment,t),j(Tt.$$.fragment,t),j(xt.$$.fragment,t),j(Mt.$$.fragment,t),j(Ot.$$.fragment,t),j(Dt.$$.fragment,t),j(It.$$.fragment,t),j(Lt.$$.fragment,t),j(ot.$$.fragment,t),j(Ht.$$.fragment,t),j(Ut.$$.fragment,t),j(Rt.$$.fragment,t),j(Wt.$$.fragment,t),j(Vt.$$.fragment,t),j(Kt.$$.fragment,t),j(ft.$$.fragment,t),j(Gt.$$.fragment,t),j(ht.$$.fragment,t),j($t.$$.fragment,t),j(_t.$$.fragment,t),j(Zt.$$.fragment,t),j(vt.$$.fragment,t),j(Et.$$.fragment,t),Ur=!0)},o(t){q(_.$$.fragment,t),q(A.$$.fragment,t),q(V.$$.fragment,t),q(se.$$.fragment,t),q(H.$$.fragment,t),q(Ze.$$.fragment,t),q(yt.$$.fragment,t),q(et.$$.fragment,t),q(At.$$.fragment,t),q(Ct.$$.fragment,t),q(Tt.$$.fragment,t),q(xt.$$.fragment,t),q(Mt.$$.fragment,t),q(Ot.$$.fragment,t),q(Dt.$$.fragment,t),q(It.$$.fragment,t),q(Lt.$$.fragment,t),q(ot.$$.fragment,t),q(Ht.$$.fragment,t),q(Ut.$$.fragment,t),q(Rt.$$.fragment,t),q(Wt.$$.fragment,t),q(Vt.$$.fragment,t),q(Kt.$$.fragment,t),q(ft.$$.fragment,t),q(Gt.$$.fragment,t),q(ht.$$.fragment,t),q($t.$$.fragment,t),q(_t.$$.fragment,t),q(Zt.$$.fragment,t),q(vt.$$.fragment,t),q(Et.$$.fragment,t),Ur=!1},d(t){r(e),t&&r(l),t&&r(a),S(_),t&&r(C),S(A,t),t&&r(y),t&&r(T),t&&r(L),S(V,t),t&&r(Y),t&&r(K),S(se),t&&r(fe),t&&r(le),t&&r(D),S(H,t),t&&r(te),t&&r(x),t&&r(ke),t&&r(ae),t&&r(_e),t&&r(ee),t&&r(Ls),t&&r(kt),t&&r(Hs),t&&r(Te),t&&r(Us),t&&r(jt),t&&r(Rs),t&&r(Ye),t&&r(Ws),S(Ze,t),t&&r(Vs),t&&r(Le),S(yt),t&&r(Ks),t&&r(Xe),t&&r(Gs),t&&r(ea),t&&r(Bs),S(et,t),t&&r(Js),t&&r(tt),t&&r(Ys),S(At,t),t&&r(Zs),t&&r(ze),t&&r(Qs),S(Ct,t),t&&r(Xs),t&&r(at),t&&r(er),S(Tt,t),t&&r(tr),t&&r(xe),t&&r(ar),S(xt,t),t&&r(sr),t&&r(ye),t&&r(rr),S(Mt,t),t&&r(or),t&&r(Me),t&&r(lr),S(Ot,t),t&&r(nr),t&&r(ta),t&&r(ir),S(Dt,t),t&&r(pr),t&&r(st),t&&r(cr),t&&r(He),S(It),t&&r(ur),t&&r(Ee),t&&r(fr),S(Lt,t),t&&r(dr),S(ot,t),t&&r(mr),t&&r(Pe),t&&r(hr),S(Ht,t),t&&r($r),t&&r(Se),t&&r(_r),t&&r(Ue),S(Ut),t&&r(gr),S(Rt,t),t&&r(vr),t&&r(me),t&&r(Er),t&&r(Oe),t&&r(br),t&&r(Re),S(Wt),t&&r(wr),t&&r(De),t&&r(kr),t&&r(it),t&&r(jr),S(Vt,t),t&&r(yr),t&&r(pt),t&&r(Ar),t&&r(na),t&&r(qr),S(Kt,t),t&&r(Cr),t&&r(ia),t&&r(Tr),t&&r(ct),t&&r(zr),t&&r(ut),t&&r(xr),S(ft,t),t&&r(Mr),t&&r(dt),t&&r(Pr),t&&r(We),S(Gt),t&&r(Sr),S(ht,t),t&&r(Or),S($t,t),t&&r(Dr),t&&r(he),t&&r(Ir),S(_t,t),t&&r(Nr),t&&r(Ve),S(Zt),t&&r(Fr),S(vt,t),t&&r(Lr),t&&r(Ie),t&&r(Hr),S(Et,t)}}}const du={local:"quick-tour",sections:[{local:"pipeline",sections:[{local:"uso-del-pipeline",title:"Uso del Pipeline"},{local:"use-otro-modelo-y-otro-tokenizador-en-el-pipeline",title:"Use otro modelo y otro tokenizador en el pipeline"}],title:"Pipeline"},{local:"autoclass",sections:[{local:"autotokenizer",title:"AutoTokenizer"},{local:"automodel",title:"AutoModel"},{local:"guarda-un-modelo",title:"Guarda un modelo"}],title:"AutoClass"}],title:"Quick tour"};function mu(m){return Qp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Eu extends Ge{constructor(e){super();Be(this,e,mu,fu,Je,{})}}export{Eu as default,du as metadata};
