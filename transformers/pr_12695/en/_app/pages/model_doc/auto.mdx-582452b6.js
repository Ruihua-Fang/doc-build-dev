import{S as nwt,i as swt,s as lwt,e as a,k as l,w as F,t as o,M as iwt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as dwt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as eqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function cwt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,qA,gf,qe,Xe,ci,An,NA,yn,Ln,jA,fi,xn,DA,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),qA=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),NA=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),jA=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),DA=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var a$=s(p);m=r(a$,"NewModelConfig"),a$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var n$=s(li);mf=r(n$,"model_type"),n$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var s$=s(ii);di=r(s$,'"new-model"'),s$.forEach(t),qA=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),NA=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var l$=s(yn);Ln=r(l$,"PreTrainedModel"),l$.forEach(t),jA=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),DA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var i$=s(mi);hf=r(i$,"NewModelConfig"),i$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,qA),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,NA),e(qe,yn),e(yn,Ln),e(qe,jA),e(qe,fi),e(fi,xn),e(qe,DA),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ywt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $At(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZAt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s0t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l0t(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,qA,gf,qe,Xe,ci,An,NA,yn,Ln,jA,fi,xn,DA,mi,hf,Ma,ze,Ae,a$,gi,n$,s$,Eo,Ea,l$,pf,i$,hje,tPe,hi,uf,PZ,GA,pje,IZ,uje,aPe,$n,_je,qZ,bje,vje,NZ,Fje,Tje,nPe,OA,sPe,d$,Mje,lPe,_f,iPe,pi,bf,jZ,VA,Eje,DZ,Cje,dPe,Co,XA,wje,zA,Aje,c$,yje,Lje,xje,QA,$je,GZ,kje,Sje,Rje,Er,WA,Bje,OZ,Pje,Ije,ui,qje,VZ,Nje,jje,XZ,Dje,Gje,Oje,y,vf,zZ,Vje,Xje,f$,zje,Qje,Wje,Ff,QZ,Hje,Uje,m$,Jje,Yje,Kje,Tf,WZ,Zje,eDe,g$,oDe,rDe,tDe,Mf,HZ,aDe,nDe,h$,sDe,lDe,iDe,Ef,UZ,dDe,cDe,p$,fDe,mDe,gDe,Cf,JZ,hDe,pDe,u$,uDe,_De,bDe,wf,YZ,vDe,FDe,_$,TDe,MDe,EDe,Af,KZ,CDe,wDe,b$,ADe,yDe,LDe,yf,ZZ,xDe,$De,v$,kDe,SDe,RDe,Lf,eee,BDe,PDe,F$,IDe,qDe,NDe,xf,oee,jDe,DDe,T$,GDe,ODe,VDe,$f,ree,XDe,zDe,M$,QDe,WDe,HDe,kf,tee,UDe,JDe,E$,YDe,KDe,ZDe,Sf,aee,eGe,oGe,C$,rGe,tGe,aGe,Rf,nee,nGe,sGe,w$,lGe,iGe,dGe,Bf,see,cGe,fGe,A$,mGe,gGe,hGe,Pf,lee,pGe,uGe,y$,_Ge,bGe,vGe,If,iee,FGe,TGe,L$,MGe,EGe,CGe,qf,dee,wGe,AGe,x$,yGe,LGe,xGe,Nf,cee,$Ge,kGe,$$,SGe,RGe,BGe,jf,fee,PGe,IGe,k$,qGe,NGe,jGe,Df,mee,DGe,GGe,S$,OGe,VGe,XGe,Gf,gee,zGe,QGe,R$,WGe,HGe,UGe,Of,hee,JGe,YGe,B$,KGe,ZGe,eOe,Vf,pee,oOe,rOe,P$,tOe,aOe,nOe,Xf,uee,sOe,lOe,I$,iOe,dOe,cOe,zf,_ee,fOe,mOe,q$,gOe,hOe,pOe,Qf,bee,uOe,_Oe,N$,bOe,vOe,FOe,Wf,vee,TOe,MOe,j$,EOe,COe,wOe,Hf,Fee,AOe,yOe,D$,LOe,xOe,$Oe,Uf,Tee,kOe,SOe,G$,ROe,BOe,POe,Jf,Mee,IOe,qOe,O$,NOe,jOe,DOe,Yf,Eee,GOe,OOe,V$,VOe,XOe,zOe,Kf,Cee,QOe,WOe,X$,HOe,UOe,JOe,Zf,wee,YOe,KOe,z$,ZOe,eVe,oVe,em,Aee,rVe,tVe,Q$,aVe,nVe,sVe,om,yee,lVe,iVe,W$,dVe,cVe,fVe,rm,Lee,mVe,gVe,H$,hVe,pVe,uVe,tm,xee,_Ve,bVe,U$,vVe,FVe,TVe,am,$ee,MVe,EVe,J$,CVe,wVe,AVe,nm,kee,yVe,LVe,Y$,xVe,$Ve,kVe,sm,See,SVe,RVe,K$,BVe,PVe,IVe,lm,Ree,qVe,NVe,Z$,jVe,DVe,GVe,im,Bee,OVe,VVe,ek,XVe,zVe,QVe,dm,Pee,WVe,HVe,ok,UVe,JVe,YVe,cm,Iee,KVe,ZVe,rk,eXe,oXe,rXe,fm,qee,tXe,aXe,tk,nXe,sXe,lXe,mm,Nee,iXe,dXe,ak,cXe,fXe,mXe,gm,jee,gXe,hXe,nk,pXe,uXe,_Xe,hm,Dee,bXe,vXe,sk,FXe,TXe,MXe,pm,Gee,EXe,CXe,lk,wXe,AXe,yXe,um,Oee,LXe,xXe,ik,$Xe,kXe,SXe,_m,Vee,RXe,BXe,dk,PXe,IXe,qXe,bm,Xee,NXe,jXe,ck,DXe,GXe,OXe,vm,zee,VXe,XXe,fk,zXe,QXe,WXe,Fm,Qee,HXe,UXe,mk,JXe,YXe,KXe,Tm,Wee,ZXe,eze,gk,oze,rze,tze,Mm,Hee,aze,nze,hk,sze,lze,ize,Em,Uee,dze,cze,pk,fze,mze,gze,Cm,Jee,hze,pze,uk,uze,_ze,bze,wm,Yee,vze,Fze,_k,Tze,Mze,Eze,Am,Kee,Cze,wze,bk,Aze,yze,Lze,ym,Zee,xze,$ze,vk,kze,Sze,Rze,Lm,eoe,Bze,Pze,Fk,Ize,qze,Nze,xm,ooe,jze,Dze,Tk,Gze,Oze,Vze,$m,roe,Xze,zze,Mk,Qze,Wze,Hze,km,toe,Uze,Jze,Ek,Yze,Kze,Zze,Sm,aoe,eQe,oQe,Ck,rQe,tQe,aQe,Rm,noe,nQe,sQe,wk,lQe,iQe,dQe,Bm,soe,cQe,fQe,Ak,mQe,gQe,hQe,Pm,loe,pQe,uQe,yk,_Qe,bQe,vQe,Im,ioe,FQe,TQe,Lk,MQe,EQe,CQe,qm,doe,wQe,AQe,xk,yQe,LQe,xQe,Nm,coe,$Qe,kQe,$k,SQe,RQe,BQe,jm,foe,PQe,IQe,kk,qQe,NQe,jQe,Dm,moe,DQe,GQe,Sk,OQe,VQe,XQe,Gm,goe,zQe,QQe,Rk,WQe,HQe,UQe,Om,hoe,JQe,YQe,Bk,KQe,ZQe,eWe,Vm,poe,oWe,rWe,Pk,tWe,aWe,nWe,Xm,uoe,sWe,lWe,Ik,iWe,dWe,cWe,zm,_oe,fWe,mWe,qk,gWe,hWe,pWe,Qm,boe,uWe,_We,Nk,bWe,vWe,FWe,Wm,voe,TWe,MWe,jk,EWe,CWe,wWe,Hm,Foe,AWe,yWe,Dk,LWe,xWe,$We,Um,Toe,kWe,SWe,Gk,RWe,BWe,PWe,Jm,Moe,IWe,qWe,Ok,NWe,jWe,DWe,Ym,Eoe,GWe,OWe,Vk,VWe,XWe,zWe,Km,Coe,QWe,WWe,Xk,HWe,UWe,JWe,Zm,woe,YWe,KWe,zk,ZWe,eHe,oHe,eg,Aoe,rHe,tHe,Qk,aHe,nHe,sHe,og,yoe,lHe,iHe,Wk,dHe,cHe,fHe,rg,Loe,mHe,gHe,Hk,hHe,pHe,uHe,tg,xoe,_He,bHe,Uk,vHe,FHe,THe,ag,$oe,MHe,EHe,Jk,CHe,wHe,AHe,ng,koe,yHe,LHe,Yk,xHe,$He,kHe,sg,Soe,SHe,RHe,Kk,BHe,PHe,IHe,lg,Roe,qHe,NHe,Zk,jHe,DHe,GHe,ig,Boe,OHe,VHe,eS,XHe,zHe,QHe,dg,Poe,WHe,HHe,oS,UHe,JHe,YHe,cg,Ioe,KHe,ZHe,rS,eUe,oUe,rUe,fg,qoe,tUe,aUe,tS,nUe,sUe,lUe,mg,Noe,iUe,dUe,aS,cUe,fUe,mUe,gg,joe,gUe,hUe,nS,pUe,uUe,_Ue,hg,bUe,pg,HA,vUe,Doe,FUe,cPe,_i,ug,Goe,UA,TUe,Ooe,MUe,fPe,wo,JA,EUe,YA,CUe,sS,wUe,AUe,yUe,KA,LUe,Voe,xUe,$Ue,kUe,Cr,ZA,SUe,Xoe,RUe,BUe,Ca,PUe,zoe,IUe,qUe,Qoe,NUe,jUe,Woe,DUe,GUe,OUe,k,kn,Hoe,VUe,XUe,lS,zUe,QUe,iS,WUe,HUe,UUe,Sn,Uoe,JUe,YUe,dS,KUe,ZUe,cS,eJe,oJe,rJe,Rn,Joe,tJe,aJe,fS,nJe,sJe,mS,lJe,iJe,dJe,_g,Yoe,cJe,fJe,gS,mJe,gJe,hJe,Bn,Koe,pJe,uJe,hS,_Je,bJe,pS,vJe,FJe,TJe,bg,Zoe,MJe,EJe,uS,CJe,wJe,AJe,vg,ere,yJe,LJe,_S,xJe,$Je,kJe,Fg,ore,SJe,RJe,bS,BJe,PJe,IJe,Pn,rre,qJe,NJe,vS,jJe,DJe,FS,GJe,OJe,VJe,In,tre,XJe,zJe,TS,QJe,WJe,MS,HJe,UJe,JJe,qn,are,YJe,KJe,ES,ZJe,eYe,CS,oYe,rYe,tYe,Tg,nre,aYe,nYe,wS,sYe,lYe,iYe,Mg,sre,dYe,cYe,AS,fYe,mYe,gYe,Nn,lre,hYe,pYe,yS,uYe,_Ye,LS,bYe,vYe,FYe,Eg,ire,TYe,MYe,xS,EYe,CYe,wYe,jn,dre,AYe,yYe,$S,LYe,xYe,kS,$Ye,kYe,SYe,Dn,cre,RYe,BYe,SS,PYe,IYe,RS,qYe,NYe,jYe,Gn,fre,DYe,GYe,BS,OYe,VYe,PS,XYe,zYe,QYe,Cg,mre,WYe,HYe,IS,UYe,JYe,YYe,On,gre,KYe,ZYe,qS,eKe,oKe,NS,rKe,tKe,aKe,Vn,hre,nKe,sKe,jS,lKe,iKe,DS,dKe,cKe,fKe,Xn,pre,mKe,gKe,GS,hKe,pKe,OS,uKe,_Ke,bKe,zn,ure,vKe,FKe,VS,TKe,MKe,XS,EKe,CKe,wKe,Qn,_re,AKe,yKe,zS,LKe,xKe,QS,$Ke,kKe,SKe,Wn,bre,RKe,BKe,WS,PKe,IKe,HS,qKe,NKe,jKe,wg,vre,DKe,GKe,US,OKe,VKe,XKe,Hn,Fre,zKe,QKe,JS,WKe,HKe,YS,UKe,JKe,YKe,Ag,Tre,KKe,ZKe,KS,eZe,oZe,rZe,Un,Mre,tZe,aZe,ZS,nZe,sZe,eR,lZe,iZe,dZe,Jn,Ere,cZe,fZe,oR,mZe,gZe,rR,hZe,pZe,uZe,Yn,Cre,_Ze,bZe,tR,vZe,FZe,aR,TZe,MZe,EZe,Kn,wre,CZe,wZe,nR,AZe,yZe,sR,LZe,xZe,$Ze,Zn,Are,kZe,SZe,lR,RZe,BZe,iR,PZe,IZe,qZe,yg,yre,NZe,jZe,dR,DZe,GZe,OZe,es,Lre,VZe,XZe,cR,zZe,QZe,fR,WZe,HZe,UZe,os,xre,JZe,YZe,mR,KZe,ZZe,gR,eeo,oeo,reo,rs,$re,teo,aeo,hR,neo,seo,pR,leo,ieo,deo,ts,kre,ceo,feo,uR,meo,geo,_R,heo,peo,ueo,as,Sre,_eo,beo,bR,veo,Feo,vR,Teo,Meo,Eeo,ns,Rre,Ceo,weo,FR,Aeo,yeo,TR,Leo,xeo,$eo,Lg,Bre,keo,Seo,MR,Reo,Beo,Peo,ss,Pre,Ieo,qeo,ER,Neo,jeo,CR,Deo,Geo,Oeo,xg,Ire,Veo,Xeo,wR,zeo,Qeo,Weo,$g,qre,Heo,Ueo,AR,Jeo,Yeo,Keo,ls,Nre,Zeo,eoo,yR,ooo,roo,LR,too,aoo,noo,is,jre,soo,loo,xR,ioo,doo,$R,coo,foo,moo,ds,Dre,goo,hoo,kR,poo,uoo,SR,_oo,boo,voo,kg,Gre,Foo,Too,RR,Moo,Eoo,Coo,cs,Ore,woo,Aoo,BR,yoo,Loo,PR,xoo,$oo,koo,fs,Vre,Soo,Roo,IR,Boo,Poo,qR,Ioo,qoo,Noo,ms,Xre,joo,Doo,NR,Goo,Ooo,jR,Voo,Xoo,zoo,gs,zre,Qoo,Woo,DR,Hoo,Uoo,GR,Joo,Yoo,Koo,hs,Qre,Zoo,ero,OR,oro,rro,VR,tro,aro,nro,ps,Wre,sro,lro,XR,iro,dro,zR,cro,fro,mro,Sg,Hre,gro,hro,QR,pro,uro,_ro,Rg,Ure,bro,vro,WR,Fro,Tro,Mro,Bg,Jre,Ero,Cro,HR,wro,Aro,yro,Pg,Yre,Lro,xro,UR,$ro,kro,Sro,us,Kre,Rro,Bro,JR,Pro,Iro,YR,qro,Nro,jro,Ig,Zre,Dro,Gro,KR,Oro,Vro,Xro,_s,ete,zro,Qro,ZR,Wro,Hro,eB,Uro,Jro,Yro,bs,ote,Kro,Zro,oB,eto,oto,rB,rto,tto,ato,vs,rte,nto,sto,tB,lto,ito,aB,dto,cto,fto,Fs,tte,mto,gto,nB,hto,pto,sB,uto,_to,bto,Ts,ate,vto,Fto,lB,Tto,Mto,iB,Eto,Cto,wto,Ms,nte,Ato,yto,dB,Lto,xto,cB,$to,kto,Sto,qg,ste,Rto,Bto,fB,Pto,Ito,qto,Ng,lte,Nto,jto,mB,Dto,Gto,Oto,Es,ite,Vto,Xto,gB,zto,Qto,hB,Wto,Hto,Uto,Cs,dte,Jto,Yto,pB,Kto,Zto,uB,eao,oao,rao,ws,cte,tao,aao,_B,nao,sao,bB,lao,iao,dao,jg,fte,cao,fao,vB,mao,gao,hao,Dg,mte,pao,uao,FB,_ao,bao,vao,Gg,gte,Fao,Tao,TB,Mao,Eao,Cao,As,hte,wao,Aao,MB,yao,Lao,EB,xao,$ao,kao,Og,pte,Sao,Rao,CB,Bao,Pao,Iao,Vg,ute,qao,Nao,wB,jao,Dao,Gao,ys,_te,Oao,Vao,AB,Xao,zao,yB,Qao,Wao,Hao,Xg,bte,Uao,Jao,LB,Yao,Kao,Zao,zg,vte,eno,ono,xB,rno,tno,ano,Ls,Fte,nno,sno,$B,lno,ino,kB,dno,cno,fno,xs,Tte,mno,gno,SB,hno,pno,RB,uno,_no,bno,$s,Mte,vno,Fno,BB,Tno,Mno,PB,Eno,Cno,wno,ks,Ete,Ano,yno,IB,Lno,xno,qB,$no,kno,Sno,Qg,Rno,Wg,e0,Bno,Cte,Pno,mPe,bi,Hg,wte,o0,Ino,Ate,qno,gPe,Ao,r0,Nno,t0,jno,NB,Dno,Gno,Ono,a0,Vno,yte,Xno,zno,Qno,Qe,n0,Wno,Lte,Hno,Uno,wa,Jno,xte,Yno,Kno,$te,Zno,eso,kte,oso,rso,tso,te,Ug,Ste,aso,nso,jB,sso,lso,iso,Jg,Rte,dso,cso,DB,fso,mso,gso,Yg,Bte,hso,pso,GB,uso,_so,bso,Kg,Pte,vso,Fso,OB,Tso,Mso,Eso,Zg,Ite,Cso,wso,VB,Aso,yso,Lso,eh,qte,xso,$so,XB,kso,Sso,Rso,oh,Nte,Bso,Pso,zB,Iso,qso,Nso,rh,jte,jso,Dso,QB,Gso,Oso,Vso,th,Dte,Xso,zso,WB,Qso,Wso,Hso,ah,Gte,Uso,Jso,HB,Yso,Kso,Zso,nh,Ote,elo,olo,UB,rlo,tlo,alo,sh,Vte,nlo,slo,JB,llo,ilo,dlo,lh,Xte,clo,flo,YB,mlo,glo,hlo,ih,zte,plo,ulo,KB,_lo,blo,vlo,dh,Qte,Flo,Tlo,ZB,Mlo,Elo,Clo,ch,Wte,wlo,Alo,eP,ylo,Llo,xlo,fh,Hte,$lo,klo,oP,Slo,Rlo,Blo,mh,Ute,Plo,Ilo,rP,qlo,Nlo,jlo,gh,Jte,Dlo,Glo,tP,Olo,Vlo,Xlo,hh,Yte,zlo,Qlo,aP,Wlo,Hlo,Ulo,ph,Kte,Jlo,Ylo,nP,Klo,Zlo,eio,uh,Zte,oio,rio,sP,tio,aio,nio,_h,eae,sio,lio,lP,iio,dio,cio,bh,oae,fio,mio,iP,gio,hio,pio,vh,uio,Fh,_io,Th,s0,bio,rae,vio,hPe,vi,Mh,tae,l0,Fio,aae,Tio,pPe,yo,i0,Mio,d0,Eio,dP,Cio,wio,Aio,c0,yio,nae,Lio,xio,$io,We,f0,kio,sae,Sio,Rio,Fi,Bio,lae,Pio,Iio,iae,qio,Nio,jio,be,Eh,dae,Dio,Gio,cP,Oio,Vio,Xio,Ch,cae,zio,Qio,fP,Wio,Hio,Uio,wh,fae,Jio,Yio,mP,Kio,Zio,edo,Ah,mae,odo,rdo,gP,tdo,ado,ndo,yh,gae,sdo,ldo,hP,ido,ddo,cdo,Lh,hae,fdo,mdo,pP,gdo,hdo,pdo,xh,pae,udo,_do,uP,bdo,vdo,Fdo,$h,uae,Tdo,Mdo,_P,Edo,Cdo,wdo,kh,_ae,Ado,ydo,bP,Ldo,xdo,$do,Sh,bae,kdo,Sdo,vP,Rdo,Bdo,Pdo,Rh,vae,Ido,qdo,FP,Ndo,jdo,Ddo,Bh,Fae,Gdo,Odo,TP,Vdo,Xdo,zdo,Ph,Tae,Qdo,Wdo,MP,Hdo,Udo,Jdo,Ih,Mae,Ydo,Kdo,EP,Zdo,eco,oco,qh,rco,Nh,tco,jh,m0,aco,Eae,nco,uPe,Ti,Dh,Cae,g0,sco,wae,lco,_Pe,Lo,h0,ico,Mi,dco,CP,cco,fco,wP,mco,gco,hco,p0,pco,Aae,uco,_co,bco,ot,u0,vco,yae,Fco,Tco,Ei,Mco,Lae,Eco,Cco,AP,wco,Aco,yco,Gh,Lco,He,_0,xco,xae,$co,kco,Aa,Sco,$ae,Rco,Bco,kae,Pco,Ico,Sae,qco,Nco,jco,x,Oh,Rae,Dco,Gco,yP,Oco,Vco,Xco,Vh,Bae,zco,Qco,LP,Wco,Hco,Uco,Xh,Pae,Jco,Yco,xP,Kco,Zco,efo,zh,Iae,ofo,rfo,$P,tfo,afo,nfo,Qh,qae,sfo,lfo,kP,ifo,dfo,cfo,Wh,Nae,ffo,mfo,SP,gfo,hfo,pfo,Hh,jae,ufo,_fo,RP,bfo,vfo,Ffo,Uh,Dae,Tfo,Mfo,BP,Efo,Cfo,wfo,Jh,Gae,Afo,yfo,PP,Lfo,xfo,$fo,Yh,Oae,kfo,Sfo,IP,Rfo,Bfo,Pfo,Kh,Vae,Ifo,qfo,qP,Nfo,jfo,Dfo,Zh,Xae,Gfo,Ofo,NP,Vfo,Xfo,zfo,ep,zae,Qfo,Wfo,jP,Hfo,Ufo,Jfo,op,Qae,Yfo,Kfo,DP,Zfo,emo,omo,rp,Wae,rmo,tmo,GP,amo,nmo,smo,tp,Hae,lmo,imo,OP,dmo,cmo,fmo,ap,Uae,mmo,gmo,VP,hmo,pmo,umo,np,Jae,_mo,bmo,XP,vmo,Fmo,Tmo,sp,Yae,Mmo,Emo,zP,Cmo,wmo,Amo,lp,Kae,ymo,Lmo,QP,xmo,$mo,kmo,ip,Zae,Smo,Rmo,WP,Bmo,Pmo,Imo,dp,ene,qmo,Nmo,HP,jmo,Dmo,Gmo,cp,one,Omo,Vmo,UP,Xmo,zmo,Qmo,fp,rne,Wmo,Hmo,JP,Umo,Jmo,Ymo,mp,tne,Kmo,Zmo,YP,ego,ogo,rgo,gp,ane,tgo,ago,KP,ngo,sgo,lgo,hp,nne,igo,dgo,ZP,cgo,fgo,mgo,pp,sne,ggo,hgo,eI,pgo,ugo,_go,up,lne,bgo,vgo,oI,Fgo,Tgo,Mgo,_p,ine,Ego,Cgo,rI,wgo,Ago,ygo,Ss,dne,Lgo,xgo,tI,$go,kgo,aI,Sgo,Rgo,Bgo,bp,cne,Pgo,Igo,nI,qgo,Ngo,jgo,vp,fne,Dgo,Ggo,sI,Ogo,Vgo,Xgo,Fp,mne,zgo,Qgo,lI,Wgo,Hgo,Ugo,Tp,gne,Jgo,Ygo,iI,Kgo,Zgo,eho,Mp,hne,oho,rho,dI,tho,aho,nho,Ep,pne,sho,lho,cI,iho,dho,cho,Cp,une,fho,mho,fI,gho,hho,pho,wp,_ne,uho,_ho,mI,bho,vho,Fho,Ap,bne,Tho,Mho,gI,Eho,Cho,who,yp,vne,Aho,yho,hI,Lho,xho,$ho,Lp,Fne,kho,Sho,pI,Rho,Bho,Pho,xp,Tne,Iho,qho,uI,Nho,jho,Dho,$p,Mne,Gho,Oho,_I,Vho,Xho,zho,kp,Ene,Qho,Who,bI,Hho,Uho,Jho,Sp,Cne,Yho,Kho,vI,Zho,epo,opo,Rp,wne,rpo,tpo,FI,apo,npo,spo,Bp,Ane,lpo,ipo,TI,dpo,cpo,fpo,Pp,yne,mpo,gpo,MI,hpo,ppo,upo,Ip,Lne,_po,bpo,EI,vpo,Fpo,Tpo,qp,xne,Mpo,Epo,CI,Cpo,wpo,Apo,Np,$ne,ypo,Lpo,wI,xpo,$po,kpo,jp,kne,Spo,Rpo,AI,Bpo,Ppo,Ipo,Dp,Sne,qpo,Npo,yI,jpo,Dpo,Gpo,Gp,Rne,Opo,Vpo,LI,Xpo,zpo,Qpo,Op,Bne,Wpo,Hpo,xI,Upo,Jpo,Ypo,Vp,Pne,Kpo,Zpo,$I,euo,ouo,ruo,Xp,Ine,tuo,auo,kI,nuo,suo,luo,zp,qne,iuo,duo,SI,cuo,fuo,muo,Qp,Nne,guo,huo,RI,puo,uuo,_uo,Wp,jne,buo,vuo,BI,Fuo,Tuo,Muo,Hp,Dne,Euo,Cuo,PI,wuo,Auo,yuo,Up,Gne,Luo,xuo,II,$uo,kuo,Suo,Jp,One,Ruo,Buo,qI,Puo,Iuo,quo,Yp,Vne,Nuo,juo,NI,Duo,Guo,Ouo,Kp,Xne,Vuo,Xuo,jI,zuo,Quo,Wuo,Zp,zne,Huo,Uuo,DI,Juo,Yuo,Kuo,eu,Qne,Zuo,e_o,GI,o_o,r_o,t_o,ou,Wne,a_o,n_o,OI,s_o,l_o,i_o,ru,Hne,d_o,c_o,VI,f_o,m_o,g_o,tu,Une,h_o,p_o,XI,u_o,__o,b_o,au,Jne,v_o,F_o,zI,T_o,M_o,E_o,nu,Yne,C_o,w_o,QI,A_o,y_o,L_o,su,Kne,x_o,$_o,WI,k_o,S_o,R_o,lu,Zne,B_o,P_o,HI,I_o,q_o,N_o,iu,ese,j_o,D_o,UI,G_o,O_o,V_o,du,ose,X_o,z_o,JI,Q_o,W_o,H_o,cu,rse,U_o,J_o,YI,Y_o,K_o,Z_o,fu,tse,e2o,o2o,KI,r2o,t2o,a2o,mu,ase,n2o,s2o,ZI,l2o,i2o,d2o,gu,nse,c2o,f2o,eq,m2o,g2o,h2o,hu,sse,p2o,u2o,oq,_2o,b2o,v2o,pu,lse,F2o,T2o,rq,M2o,E2o,C2o,uu,ise,w2o,A2o,tq,y2o,L2o,x2o,_u,dse,$2o,k2o,aq,S2o,R2o,B2o,bu,cse,P2o,I2o,nq,q2o,N2o,j2o,vu,fse,D2o,G2o,sq,O2o,V2o,X2o,Fu,mse,z2o,Q2o,lq,W2o,H2o,U2o,Tu,gse,J2o,Y2o,iq,K2o,Z2o,e1o,Mu,hse,o1o,r1o,dq,t1o,a1o,n1o,Eu,pse,s1o,l1o,cq,i1o,d1o,c1o,Cu,use,f1o,m1o,fq,g1o,h1o,p1o,wu,_se,u1o,_1o,mq,b1o,v1o,F1o,Au,bse,T1o,M1o,gq,E1o,C1o,w1o,yu,vse,A1o,y1o,hq,L1o,x1o,$1o,Lu,k1o,Fse,S1o,R1o,Tse,B1o,P1o,xu,bPe,Ci,$u,Mse,b0,I1o,Ese,q1o,vPe,xo,v0,N1o,wi,j1o,pq,D1o,G1o,uq,O1o,V1o,X1o,F0,z1o,Cse,Q1o,W1o,H1o,rt,T0,U1o,wse,J1o,Y1o,Ai,K1o,Ase,Z1o,ebo,_q,obo,rbo,tbo,ku,abo,Ue,M0,nbo,yse,sbo,lbo,ya,ibo,Lse,dbo,cbo,xse,fbo,mbo,$se,gbo,hbo,pbo,G,Su,kse,ubo,_bo,bq,bbo,vbo,Fbo,Ru,Sse,Tbo,Mbo,vq,Ebo,Cbo,wbo,Bu,Rse,Abo,ybo,Fq,Lbo,xbo,$bo,Pu,Bse,kbo,Sbo,Tq,Rbo,Bbo,Pbo,Iu,Pse,Ibo,qbo,Mq,Nbo,jbo,Dbo,qu,Ise,Gbo,Obo,Eq,Vbo,Xbo,zbo,Nu,qse,Qbo,Wbo,Cq,Hbo,Ubo,Jbo,ju,Nse,Ybo,Kbo,wq,Zbo,e5o,o5o,Du,jse,r5o,t5o,Aq,a5o,n5o,s5o,Gu,Dse,l5o,i5o,yq,d5o,c5o,f5o,Ou,Gse,m5o,g5o,Lq,h5o,p5o,u5o,Vu,Ose,_5o,b5o,xq,v5o,F5o,T5o,Xu,Vse,M5o,E5o,$q,C5o,w5o,A5o,zu,Xse,y5o,L5o,kq,x5o,$5o,k5o,Qu,zse,S5o,R5o,Sq,B5o,P5o,I5o,Wu,Qse,q5o,N5o,Rq,j5o,D5o,G5o,Hu,Wse,O5o,V5o,Bq,X5o,z5o,Q5o,Uu,Hse,W5o,H5o,Pq,U5o,J5o,Y5o,Ju,Use,K5o,Z5o,Iq,evo,ovo,rvo,Yu,Jse,tvo,avo,qq,nvo,svo,lvo,Ku,Yse,ivo,dvo,Nq,cvo,fvo,mvo,Zu,Kse,gvo,hvo,jq,pvo,uvo,_vo,e_,Zse,bvo,vvo,Dq,Fvo,Tvo,Mvo,o_,ele,Evo,Cvo,Gq,wvo,Avo,yvo,r_,ole,Lvo,xvo,Oq,$vo,kvo,Svo,t_,rle,Rvo,Bvo,Vq,Pvo,Ivo,qvo,a_,tle,Nvo,jvo,Xq,Dvo,Gvo,Ovo,n_,ale,Vvo,Xvo,zq,zvo,Qvo,Wvo,s_,nle,Hvo,Uvo,Qq,Jvo,Yvo,Kvo,l_,sle,Zvo,eFo,Wq,oFo,rFo,tFo,i_,lle,aFo,nFo,Hq,sFo,lFo,iFo,d_,ile,dFo,cFo,Uq,fFo,mFo,gFo,c_,dle,hFo,pFo,Jq,uFo,_Fo,bFo,f_,cle,vFo,FFo,Yq,TFo,MFo,EFo,m_,fle,CFo,wFo,Kq,AFo,yFo,LFo,g_,mle,xFo,$Fo,Zq,kFo,SFo,RFo,h_,gle,BFo,PFo,eN,IFo,qFo,NFo,p_,hle,jFo,DFo,oN,GFo,OFo,VFo,u_,ple,XFo,zFo,rN,QFo,WFo,HFo,__,UFo,ule,JFo,YFo,_le,KFo,ZFo,b_,FPe,yi,v_,ble,E0,e6o,vle,o6o,TPe,$o,C0,r6o,Li,t6o,tN,a6o,n6o,aN,s6o,l6o,i6o,w0,d6o,Fle,c6o,f6o,m6o,tt,A0,g6o,Tle,h6o,p6o,xi,u6o,Mle,_6o,b6o,nN,v6o,F6o,T6o,F_,M6o,Je,y0,E6o,Ele,C6o,w6o,La,A6o,Cle,y6o,L6o,wle,x6o,$6o,Ale,k6o,S6o,R6o,z,T_,yle,B6o,P6o,sN,I6o,q6o,N6o,M_,Lle,j6o,D6o,lN,G6o,O6o,V6o,E_,xle,X6o,z6o,iN,Q6o,W6o,H6o,C_,$le,U6o,J6o,dN,Y6o,K6o,Z6o,w_,kle,eTo,oTo,cN,rTo,tTo,aTo,A_,Sle,nTo,sTo,fN,lTo,iTo,dTo,y_,Rle,cTo,fTo,mN,mTo,gTo,hTo,L_,Ble,pTo,uTo,gN,_To,bTo,vTo,x_,Ple,FTo,TTo,hN,MTo,ETo,CTo,$_,Ile,wTo,ATo,pN,yTo,LTo,xTo,k_,qle,$To,kTo,uN,STo,RTo,BTo,S_,Nle,PTo,ITo,_N,qTo,NTo,jTo,R_,jle,DTo,GTo,bN,OTo,VTo,XTo,B_,Dle,zTo,QTo,vN,WTo,HTo,UTo,P_,Gle,JTo,YTo,FN,KTo,ZTo,e9o,I_,Ole,o9o,r9o,TN,t9o,a9o,n9o,q_,Vle,s9o,l9o,MN,i9o,d9o,c9o,N_,Xle,f9o,m9o,EN,g9o,h9o,p9o,j_,zle,u9o,_9o,CN,b9o,v9o,F9o,D_,Qle,T9o,M9o,wN,E9o,C9o,w9o,G_,Wle,A9o,y9o,AN,L9o,x9o,$9o,O_,Hle,k9o,S9o,yN,R9o,B9o,P9o,V_,Ule,I9o,q9o,LN,N9o,j9o,D9o,X_,Jle,G9o,O9o,xN,V9o,X9o,z9o,z_,Yle,Q9o,W9o,$N,H9o,U9o,J9o,Q_,Kle,Y9o,K9o,kN,Z9o,eMo,oMo,W_,Zle,rMo,tMo,SN,aMo,nMo,sMo,H_,eie,lMo,iMo,RN,dMo,cMo,fMo,U_,oie,mMo,gMo,BN,hMo,pMo,uMo,J_,rie,_Mo,bMo,PN,vMo,FMo,TMo,Y_,tie,MMo,EMo,IN,CMo,wMo,AMo,K_,aie,yMo,LMo,qN,xMo,$Mo,kMo,Z_,nie,SMo,RMo,NN,BMo,PMo,IMo,e2,sie,qMo,NMo,jN,jMo,DMo,GMo,o2,lie,OMo,VMo,DN,XMo,zMo,QMo,r2,WMo,iie,HMo,UMo,die,JMo,YMo,t2,MPe,$i,a2,cie,L0,KMo,fie,ZMo,EPe,ko,x0,e4o,ki,o4o,GN,r4o,t4o,ON,a4o,n4o,s4o,$0,l4o,mie,i4o,d4o,c4o,at,k0,f4o,gie,m4o,g4o,Si,h4o,hie,p4o,u4o,VN,_4o,b4o,v4o,n2,F4o,Ye,S0,T4o,pie,M4o,E4o,xa,C4o,uie,w4o,A4o,_ie,y4o,L4o,bie,x4o,$4o,k4o,Q,s2,vie,S4o,R4o,XN,B4o,P4o,I4o,l2,Fie,q4o,N4o,zN,j4o,D4o,G4o,i2,Tie,O4o,V4o,QN,X4o,z4o,Q4o,d2,Mie,W4o,H4o,WN,U4o,J4o,Y4o,c2,Eie,K4o,Z4o,HN,eEo,oEo,rEo,f2,Cie,tEo,aEo,UN,nEo,sEo,lEo,m2,wie,iEo,dEo,JN,cEo,fEo,mEo,g2,Aie,gEo,hEo,YN,pEo,uEo,_Eo,h2,yie,bEo,vEo,KN,FEo,TEo,MEo,p2,Lie,EEo,CEo,ZN,wEo,AEo,yEo,u2,xie,LEo,xEo,ej,$Eo,kEo,SEo,_2,$ie,REo,BEo,oj,PEo,IEo,qEo,b2,kie,NEo,jEo,rj,DEo,GEo,OEo,v2,Sie,VEo,XEo,tj,zEo,QEo,WEo,F2,Rie,HEo,UEo,aj,JEo,YEo,KEo,T2,Bie,ZEo,eCo,nj,oCo,rCo,tCo,M2,Pie,aCo,nCo,sj,sCo,lCo,iCo,E2,Iie,dCo,cCo,lj,fCo,mCo,gCo,C2,qie,hCo,pCo,ij,uCo,_Co,bCo,w2,Nie,vCo,FCo,dj,TCo,MCo,ECo,A2,jie,CCo,wCo,cj,ACo,yCo,LCo,y2,Die,xCo,$Co,fj,kCo,SCo,RCo,L2,Gie,BCo,PCo,mj,ICo,qCo,NCo,x2,Oie,jCo,DCo,gj,GCo,OCo,VCo,$2,Vie,XCo,zCo,hj,QCo,WCo,HCo,k2,Xie,UCo,JCo,pj,YCo,KCo,ZCo,S2,zie,e3o,o3o,uj,r3o,t3o,a3o,R2,Qie,n3o,s3o,_j,l3o,i3o,d3o,B2,Wie,c3o,f3o,bj,m3o,g3o,h3o,P2,Hie,p3o,u3o,vj,_3o,b3o,v3o,I2,Uie,F3o,T3o,Jie,M3o,E3o,C3o,q2,Yie,w3o,A3o,Fj,y3o,L3o,x3o,N2,Kie,$3o,k3o,Tj,S3o,R3o,B3o,j2,Zie,P3o,I3o,Mj,q3o,N3o,j3o,D2,ede,D3o,G3o,Ej,O3o,V3o,X3o,G2,z3o,ode,Q3o,W3o,rde,H3o,U3o,O2,CPe,Ri,V2,tde,R0,J3o,ade,Y3o,wPe,So,B0,K3o,Bi,Z3o,Cj,ewo,owo,wj,rwo,two,awo,P0,nwo,nde,swo,lwo,iwo,nt,I0,dwo,sde,cwo,fwo,Pi,mwo,lde,gwo,hwo,Aj,pwo,uwo,_wo,X2,bwo,Ke,q0,vwo,ide,Fwo,Two,$a,Mwo,dde,Ewo,Cwo,cde,wwo,Awo,fde,ywo,Lwo,xwo,he,z2,mde,$wo,kwo,yj,Swo,Rwo,Bwo,Q2,gde,Pwo,Iwo,Lj,qwo,Nwo,jwo,W2,hde,Dwo,Gwo,xj,Owo,Vwo,Xwo,H2,pde,zwo,Qwo,$j,Wwo,Hwo,Uwo,U2,ude,Jwo,Ywo,kj,Kwo,Zwo,eAo,J2,_de,oAo,rAo,Sj,tAo,aAo,nAo,Y2,bde,sAo,lAo,Rj,iAo,dAo,cAo,K2,vde,fAo,mAo,Bj,gAo,hAo,pAo,Z2,Fde,uAo,_Ao,Pj,bAo,vAo,FAo,e1,Tde,TAo,MAo,Ij,EAo,CAo,wAo,o1,Mde,AAo,yAo,qj,LAo,xAo,$Ao,r1,Ede,kAo,SAo,Nj,RAo,BAo,PAo,t1,Cde,IAo,qAo,jj,NAo,jAo,DAo,a1,wde,GAo,OAo,Dj,VAo,XAo,zAo,n1,Ade,QAo,WAo,Gj,HAo,UAo,JAo,s1,yde,YAo,KAo,Oj,ZAo,e0o,o0o,l1,Lde,r0o,t0o,Vj,a0o,n0o,s0o,i1,l0o,xde,i0o,d0o,$de,c0o,f0o,d1,APe,Ii,c1,kde,N0,m0o,Sde,g0o,yPe,Ro,j0,h0o,qi,p0o,Xj,u0o,_0o,zj,b0o,v0o,F0o,D0,T0o,Rde,M0o,E0o,C0o,st,G0,w0o,Bde,A0o,y0o,Ni,L0o,Pde,x0o,$0o,Qj,k0o,S0o,R0o,f1,B0o,Ze,O0,P0o,Ide,I0o,q0o,ka,N0o,qde,j0o,D0o,Nde,G0o,O0o,jde,V0o,X0o,z0o,q,m1,Dde,Q0o,W0o,Wj,H0o,U0o,J0o,g1,Gde,Y0o,K0o,Hj,Z0o,eyo,oyo,h1,Ode,ryo,tyo,Uj,ayo,nyo,syo,p1,Vde,lyo,iyo,Jj,dyo,cyo,fyo,u1,Xde,myo,gyo,Yj,hyo,pyo,uyo,_1,zde,_yo,byo,Kj,vyo,Fyo,Tyo,b1,Qde,Myo,Eyo,Zj,Cyo,wyo,Ayo,v1,Wde,yyo,Lyo,eD,xyo,$yo,kyo,F1,Hde,Syo,Ryo,oD,Byo,Pyo,Iyo,T1,Ude,qyo,Nyo,rD,jyo,Dyo,Gyo,M1,Jde,Oyo,Vyo,tD,Xyo,zyo,Qyo,E1,Yde,Wyo,Hyo,aD,Uyo,Jyo,Yyo,C1,Kde,Kyo,Zyo,nD,eLo,oLo,rLo,w1,Zde,tLo,aLo,sD,nLo,sLo,lLo,A1,ece,iLo,dLo,lD,cLo,fLo,mLo,y1,oce,gLo,hLo,iD,pLo,uLo,_Lo,L1,rce,bLo,vLo,dD,FLo,TLo,MLo,x1,tce,ELo,CLo,cD,wLo,ALo,yLo,$1,ace,LLo,xLo,fD,$Lo,kLo,SLo,k1,nce,RLo,BLo,mD,PLo,ILo,qLo,S1,sce,NLo,jLo,gD,DLo,GLo,OLo,R1,lce,VLo,XLo,hD,zLo,QLo,WLo,B1,ice,HLo,ULo,pD,JLo,YLo,KLo,P1,dce,ZLo,e8o,uD,o8o,r8o,t8o,I1,cce,a8o,n8o,_D,s8o,l8o,i8o,q1,fce,d8o,c8o,bD,f8o,m8o,g8o,N1,mce,h8o,p8o,vD,u8o,_8o,b8o,j1,gce,v8o,F8o,FD,T8o,M8o,E8o,D1,hce,C8o,w8o,TD,A8o,y8o,L8o,G1,pce,x8o,$8o,MD,k8o,S8o,R8o,O1,uce,B8o,P8o,ED,I8o,q8o,N8o,V1,_ce,j8o,D8o,CD,G8o,O8o,V8o,X1,bce,X8o,z8o,wD,Q8o,W8o,H8o,z1,vce,U8o,J8o,AD,Y8o,K8o,Z8o,Q1,Fce,exo,oxo,yD,rxo,txo,axo,W1,Tce,nxo,sxo,LD,lxo,ixo,dxo,H1,Mce,cxo,fxo,xD,mxo,gxo,hxo,U1,Ece,pxo,uxo,$D,_xo,bxo,vxo,J1,Cce,Fxo,Txo,kD,Mxo,Exo,Cxo,Y1,wce,wxo,Axo,SD,yxo,Lxo,xxo,K1,Ace,$xo,kxo,RD,Sxo,Rxo,Bxo,Z1,yce,Pxo,Ixo,BD,qxo,Nxo,jxo,eb,Lce,Dxo,Gxo,PD,Oxo,Vxo,Xxo,ob,xce,zxo,Qxo,ID,Wxo,Hxo,Uxo,rb,$ce,Jxo,Yxo,qD,Kxo,Zxo,e7o,tb,kce,o7o,r7o,ND,t7o,a7o,n7o,ab,Sce,s7o,l7o,jD,i7o,d7o,c7o,nb,f7o,Rce,m7o,g7o,Bce,h7o,p7o,sb,LPe,ji,lb,Pce,V0,u7o,Ice,_7o,xPe,Bo,X0,b7o,Di,v7o,DD,F7o,T7o,GD,M7o,E7o,C7o,z0,w7o,qce,A7o,y7o,L7o,lt,Q0,x7o,Nce,$7o,k7o,Gi,S7o,jce,R7o,B7o,OD,P7o,I7o,q7o,ib,N7o,eo,W0,j7o,Dce,D7o,G7o,Sa,O7o,Gce,V7o,X7o,Oce,z7o,Q7o,Vce,W7o,H7o,U7o,Y,db,Xce,J7o,Y7o,VD,K7o,Z7o,e$o,cb,zce,o$o,r$o,XD,t$o,a$o,n$o,fb,Qce,s$o,l$o,zD,i$o,d$o,c$o,mb,Wce,f$o,m$o,QD,g$o,h$o,p$o,gb,Hce,u$o,_$o,WD,b$o,v$o,F$o,hb,Uce,T$o,M$o,HD,E$o,C$o,w$o,pb,Jce,A$o,y$o,UD,L$o,x$o,$$o,ub,Yce,k$o,S$o,JD,R$o,B$o,P$o,_b,Kce,I$o,q$o,YD,N$o,j$o,D$o,bb,Zce,G$o,O$o,KD,V$o,X$o,z$o,vb,efe,Q$o,W$o,ZD,H$o,U$o,J$o,Fb,ofe,Y$o,K$o,eG,Z$o,eko,oko,Tb,rfe,rko,tko,oG,ako,nko,sko,Mb,tfe,lko,iko,rG,dko,cko,fko,Eb,afe,mko,gko,tG,hko,pko,uko,Cb,nfe,_ko,bko,aG,vko,Fko,Tko,wb,sfe,Mko,Eko,nG,Cko,wko,Ako,Ab,lfe,yko,Lko,sG,xko,$ko,kko,yb,ife,Sko,Rko,lG,Bko,Pko,Iko,Lb,dfe,qko,Nko,iG,jko,Dko,Gko,xb,cfe,Oko,Vko,dG,Xko,zko,Qko,$b,ffe,Wko,Hko,cG,Uko,Jko,Yko,kb,mfe,Kko,Zko,fG,eSo,oSo,rSo,Sb,gfe,tSo,aSo,mG,nSo,sSo,lSo,Rb,hfe,iSo,dSo,gG,cSo,fSo,mSo,Bb,pfe,gSo,hSo,hG,pSo,uSo,_So,Pb,ufe,bSo,vSo,pG,FSo,TSo,MSo,Ib,_fe,ESo,CSo,uG,wSo,ASo,ySo,qb,LSo,bfe,xSo,$So,vfe,kSo,SSo,Nb,$Pe,Oi,jb,Ffe,H0,RSo,Tfe,BSo,kPe,Po,U0,PSo,Vi,ISo,_G,qSo,NSo,bG,jSo,DSo,GSo,J0,OSo,Mfe,VSo,XSo,zSo,it,Y0,QSo,Efe,WSo,HSo,Xi,USo,Cfe,JSo,YSo,vG,KSo,ZSo,eRo,Db,oRo,oo,K0,rRo,wfe,tRo,aRo,Ra,nRo,Afe,sRo,lRo,yfe,iRo,dRo,Lfe,cRo,fRo,mRo,Yr,Gb,xfe,gRo,hRo,FG,pRo,uRo,_Ro,Ob,$fe,bRo,vRo,TG,FRo,TRo,MRo,Vb,kfe,ERo,CRo,MG,wRo,ARo,yRo,Xb,Sfe,LRo,xRo,EG,$Ro,kRo,SRo,zb,Rfe,RRo,BRo,CG,PRo,IRo,qRo,Qb,NRo,Bfe,jRo,DRo,Pfe,GRo,ORo,Wb,SPe,zi,Hb,Ife,Z0,VRo,qfe,XRo,RPe,Io,ey,zRo,Qi,QRo,wG,WRo,HRo,AG,URo,JRo,YRo,oy,KRo,Nfe,ZRo,eBo,oBo,dt,ry,rBo,jfe,tBo,aBo,Wi,nBo,Dfe,sBo,lBo,yG,iBo,dBo,cBo,Ub,fBo,ro,ty,mBo,Gfe,gBo,hBo,Ba,pBo,Ofe,uBo,_Bo,Vfe,bBo,vBo,Xfe,FBo,TBo,MBo,U,Jb,zfe,EBo,CBo,LG,wBo,ABo,yBo,Yb,Qfe,LBo,xBo,xG,$Bo,kBo,SBo,Kb,Wfe,RBo,BBo,$G,PBo,IBo,qBo,Zb,Hfe,NBo,jBo,kG,DBo,GBo,OBo,e5,Ufe,VBo,XBo,SG,zBo,QBo,WBo,o5,Jfe,HBo,UBo,RG,JBo,YBo,KBo,r5,Yfe,ZBo,ePo,BG,oPo,rPo,tPo,t5,Kfe,aPo,nPo,PG,sPo,lPo,iPo,a5,Zfe,dPo,cPo,IG,fPo,mPo,gPo,n5,eme,hPo,pPo,qG,uPo,_Po,bPo,s5,ome,vPo,FPo,NG,TPo,MPo,EPo,l5,rme,CPo,wPo,jG,APo,yPo,LPo,i5,tme,xPo,$Po,DG,kPo,SPo,RPo,d5,ame,BPo,PPo,GG,IPo,qPo,NPo,c5,nme,jPo,DPo,OG,GPo,OPo,VPo,f5,sme,XPo,zPo,VG,QPo,WPo,HPo,m5,lme,UPo,JPo,XG,YPo,KPo,ZPo,g5,ime,eIo,oIo,zG,rIo,tIo,aIo,h5,dme,nIo,sIo,QG,lIo,iIo,dIo,p5,cme,cIo,fIo,WG,mIo,gIo,hIo,u5,fme,pIo,uIo,HG,_Io,bIo,vIo,_5,mme,FIo,TIo,UG,MIo,EIo,CIo,b5,gme,wIo,AIo,JG,yIo,LIo,xIo,v5,hme,$Io,kIo,YG,SIo,RIo,BIo,F5,pme,PIo,IIo,KG,qIo,NIo,jIo,T5,ume,DIo,GIo,ZG,OIo,VIo,XIo,M5,_me,zIo,QIo,eO,WIo,HIo,UIo,E5,bme,JIo,YIo,oO,KIo,ZIo,eqo,C5,vme,oqo,rqo,rO,tqo,aqo,nqo,w5,Fme,sqo,lqo,tO,iqo,dqo,cqo,A5,Tme,fqo,mqo,aO,gqo,hqo,pqo,y5,Mme,uqo,_qo,nO,bqo,vqo,Fqo,L5,Eme,Tqo,Mqo,sO,Eqo,Cqo,wqo,x5,Aqo,Cme,yqo,Lqo,wme,xqo,$qo,$5,BPe,Hi,k5,Ame,ay,kqo,yme,Sqo,PPe,qo,ny,Rqo,Ui,Bqo,lO,Pqo,Iqo,iO,qqo,Nqo,jqo,sy,Dqo,Lme,Gqo,Oqo,Vqo,ct,ly,Xqo,xme,zqo,Qqo,Ji,Wqo,$me,Hqo,Uqo,dO,Jqo,Yqo,Kqo,S5,Zqo,to,iy,eNo,kme,oNo,rNo,Pa,tNo,Sme,aNo,nNo,Rme,sNo,lNo,Bme,iNo,dNo,cNo,O,R5,Pme,fNo,mNo,cO,gNo,hNo,pNo,B5,Ime,uNo,_No,fO,bNo,vNo,FNo,P5,qme,TNo,MNo,mO,ENo,CNo,wNo,I5,Nme,ANo,yNo,gO,LNo,xNo,$No,q5,jme,kNo,SNo,hO,RNo,BNo,PNo,N5,Dme,INo,qNo,pO,NNo,jNo,DNo,j5,Gme,GNo,ONo,uO,VNo,XNo,zNo,D5,Ome,QNo,WNo,_O,HNo,UNo,JNo,G5,Vme,YNo,KNo,bO,ZNo,ejo,ojo,O5,Xme,rjo,tjo,vO,ajo,njo,sjo,V5,zme,ljo,ijo,FO,djo,cjo,fjo,X5,Qme,mjo,gjo,TO,hjo,pjo,ujo,z5,Wme,_jo,bjo,MO,vjo,Fjo,Tjo,Q5,Hme,Mjo,Ejo,EO,Cjo,wjo,Ajo,W5,Ume,yjo,Ljo,CO,xjo,$jo,kjo,H5,Jme,Sjo,Rjo,wO,Bjo,Pjo,Ijo,U5,Yme,qjo,Njo,AO,jjo,Djo,Gjo,J5,Kme,Ojo,Vjo,yO,Xjo,zjo,Qjo,Y5,Zme,Wjo,Hjo,LO,Ujo,Jjo,Yjo,K5,ege,Kjo,Zjo,xO,eDo,oDo,rDo,Z5,oge,tDo,aDo,$O,nDo,sDo,lDo,ev,rge,iDo,dDo,kO,cDo,fDo,mDo,ov,tge,gDo,hDo,SO,pDo,uDo,_Do,rv,age,bDo,vDo,RO,FDo,TDo,MDo,tv,nge,EDo,CDo,BO,wDo,ADo,yDo,av,sge,LDo,xDo,PO,$Do,kDo,SDo,nv,lge,RDo,BDo,IO,PDo,IDo,qDo,sv,ige,NDo,jDo,qO,DDo,GDo,ODo,lv,dge,VDo,XDo,NO,zDo,QDo,WDo,iv,cge,HDo,UDo,jO,JDo,YDo,KDo,dv,fge,ZDo,eGo,DO,oGo,rGo,tGo,cv,mge,aGo,nGo,GO,sGo,lGo,iGo,fv,gge,dGo,cGo,OO,fGo,mGo,gGo,mv,hge,hGo,pGo,VO,uGo,_Go,bGo,gv,pge,vGo,FGo,XO,TGo,MGo,EGo,hv,uge,CGo,wGo,zO,AGo,yGo,LGo,pv,_ge,xGo,$Go,QO,kGo,SGo,RGo,uv,bge,BGo,PGo,WO,IGo,qGo,NGo,_v,vge,jGo,DGo,HO,GGo,OGo,VGo,bv,XGo,Fge,zGo,QGo,Tge,WGo,HGo,vv,IPe,Yi,Fv,Mge,dy,UGo,Ege,JGo,qPe,No,cy,YGo,Ki,KGo,UO,ZGo,eOo,JO,oOo,rOo,tOo,fy,aOo,Cge,nOo,sOo,lOo,ft,my,iOo,wge,dOo,cOo,Zi,fOo,Age,mOo,gOo,YO,hOo,pOo,uOo,Tv,_Oo,ao,gy,bOo,yge,vOo,FOo,Ia,TOo,Lge,MOo,EOo,xge,COo,wOo,$ge,AOo,yOo,LOo,kge,Mv,Sge,xOo,$Oo,KO,kOo,SOo,ROo,Ev,BOo,Rge,POo,IOo,Bge,qOo,NOo,Cv,NPe,ed,wv,Pge,hy,jOo,Ige,DOo,jPe,jo,py,GOo,od,OOo,ZO,VOo,XOo,eV,zOo,QOo,WOo,uy,HOo,qge,UOo,JOo,YOo,mt,_y,KOo,Nge,ZOo,eVo,rd,oVo,jge,rVo,tVo,oV,aVo,nVo,sVo,Av,lVo,no,by,iVo,Dge,dVo,cVo,qa,fVo,Gge,mVo,gVo,Oge,hVo,pVo,Vge,uVo,_Vo,bVo,ve,yv,Xge,vVo,FVo,rV,TVo,MVo,EVo,Lv,zge,CVo,wVo,tV,AVo,yVo,LVo,xv,Qge,xVo,$Vo,aV,kVo,SVo,RVo,Rs,Wge,BVo,PVo,nV,IVo,qVo,sV,NVo,jVo,DVo,$v,Hge,GVo,OVo,lV,VVo,XVo,zVo,gt,Uge,QVo,WVo,iV,HVo,UVo,dV,JVo,YVo,cV,KVo,ZVo,eXo,kv,Jge,oXo,rXo,fV,tXo,aXo,nXo,Sv,Yge,sXo,lXo,mV,iXo,dXo,cXo,Rv,Kge,fXo,mXo,gV,gXo,hXo,pXo,Bv,Zge,uXo,_Xo,hV,bXo,vXo,FXo,Pv,ehe,TXo,MXo,pV,EXo,CXo,wXo,Iv,ohe,AXo,yXo,uV,LXo,xXo,$Xo,qv,rhe,kXo,SXo,_V,RXo,BXo,PXo,Nv,IXo,the,qXo,NXo,ahe,jXo,DXo,jv,DPe,td,Dv,nhe,vy,GXo,she,OXo,GPe,Do,Fy,VXo,ad,XXo,bV,zXo,QXo,vV,WXo,HXo,UXo,Ty,JXo,lhe,YXo,KXo,ZXo,ht,My,ezo,ihe,ozo,rzo,nd,tzo,dhe,azo,nzo,FV,szo,lzo,izo,Gv,dzo,so,Ey,czo,che,fzo,mzo,Na,gzo,fhe,hzo,pzo,mhe,uzo,_zo,ghe,bzo,vzo,Fzo,hhe,Ov,phe,Tzo,Mzo,TV,Ezo,Czo,wzo,Vv,Azo,uhe,yzo,Lzo,_he,xzo,$zo,Xv,OPe,sd,zv,bhe,Cy,kzo,vhe,Szo,VPe,Go,wy,Rzo,ld,Bzo,MV,Pzo,Izo,EV,qzo,Nzo,jzo,Ay,Dzo,Fhe,Gzo,Ozo,Vzo,pt,yy,Xzo,The,zzo,Qzo,id,Wzo,Mhe,Hzo,Uzo,CV,Jzo,Yzo,Kzo,Qv,Zzo,lo,Ly,eQo,Ehe,oQo,rQo,ja,tQo,Che,aQo,nQo,whe,sQo,lQo,Ahe,iQo,dQo,cQo,Ne,Wv,yhe,fQo,mQo,wV,gQo,hQo,pQo,Hv,Lhe,uQo,_Qo,AV,bQo,vQo,FQo,Uv,xhe,TQo,MQo,yV,EQo,CQo,wQo,Jv,$he,AQo,yQo,LV,LQo,xQo,$Qo,Yv,khe,kQo,SQo,xV,RQo,BQo,PQo,Kv,She,IQo,qQo,$V,NQo,jQo,DQo,Zv,Rhe,GQo,OQo,kV,VQo,XQo,zQo,eF,Bhe,QQo,WQo,SV,HQo,UQo,JQo,oF,YQo,Phe,KQo,ZQo,Ihe,eWo,oWo,rF,XPe,dd,tF,qhe,xy,rWo,Nhe,tWo,zPe,Oo,$y,aWo,cd,nWo,RV,sWo,lWo,BV,iWo,dWo,cWo,ky,fWo,jhe,mWo,gWo,hWo,ut,Sy,pWo,Dhe,uWo,_Wo,fd,bWo,Ghe,vWo,FWo,PV,TWo,MWo,EWo,aF,CWo,io,Ry,wWo,Ohe,AWo,yWo,Da,LWo,Vhe,xWo,$Wo,Xhe,kWo,SWo,zhe,RWo,BWo,PWo,Ga,nF,Qhe,IWo,qWo,IV,NWo,jWo,DWo,sF,Whe,GWo,OWo,qV,VWo,XWo,zWo,lF,Hhe,QWo,WWo,NV,HWo,UWo,JWo,iF,Uhe,YWo,KWo,jV,ZWo,eHo,oHo,dF,rHo,Jhe,tHo,aHo,Yhe,nHo,sHo,cF,QPe,md,fF,Khe,By,lHo,Zhe,iHo,WPe,Vo,Py,dHo,gd,cHo,DV,fHo,mHo,GV,gHo,hHo,pHo,Iy,uHo,epe,_Ho,bHo,vHo,_t,qy,FHo,ope,THo,MHo,hd,EHo,rpe,CHo,wHo,OV,AHo,yHo,LHo,mF,xHo,co,Ny,$Ho,tpe,kHo,SHo,Oa,RHo,ape,BHo,PHo,npe,IHo,qHo,spe,NHo,jHo,DHo,je,gF,lpe,GHo,OHo,VV,VHo,XHo,zHo,hF,ipe,QHo,WHo,XV,HHo,UHo,JHo,pF,dpe,YHo,KHo,zV,ZHo,eUo,oUo,uF,cpe,rUo,tUo,QV,aUo,nUo,sUo,_F,fpe,lUo,iUo,WV,dUo,cUo,fUo,bF,mpe,mUo,gUo,HV,hUo,pUo,uUo,vF,gpe,_Uo,bUo,UV,vUo,FUo,TUo,FF,hpe,MUo,EUo,JV,CUo,wUo,AUo,TF,yUo,ppe,LUo,xUo,upe,$Uo,kUo,MF,HPe,pd,EF,_pe,jy,SUo,bpe,RUo,UPe,Xo,Dy,BUo,ud,PUo,YV,IUo,qUo,KV,NUo,jUo,DUo,Gy,GUo,vpe,OUo,VUo,XUo,bt,Oy,zUo,Fpe,QUo,WUo,_d,HUo,Tpe,UUo,JUo,ZV,YUo,KUo,ZUo,CF,eJo,fo,Vy,oJo,Mpe,rJo,tJo,Va,aJo,Epe,nJo,sJo,Cpe,lJo,iJo,wpe,dJo,cJo,fJo,Xy,wF,Ape,mJo,gJo,eX,hJo,pJo,uJo,AF,ype,_Jo,bJo,oX,vJo,FJo,TJo,yF,MJo,Lpe,EJo,CJo,xpe,wJo,AJo,LF,JPe,bd,xF,$pe,zy,yJo,kpe,LJo,YPe,zo,Qy,xJo,vd,$Jo,rX,kJo,SJo,tX,RJo,BJo,PJo,Wy,IJo,Spe,qJo,NJo,jJo,vt,Hy,DJo,Rpe,GJo,OJo,Fd,VJo,Bpe,XJo,zJo,aX,QJo,WJo,HJo,$F,UJo,mo,Uy,JJo,Ppe,YJo,KJo,Xa,ZJo,Ipe,eYo,oYo,qpe,rYo,tYo,Npe,aYo,nYo,sYo,za,kF,jpe,lYo,iYo,nX,dYo,cYo,fYo,SF,Dpe,mYo,gYo,sX,hYo,pYo,uYo,RF,Gpe,_Yo,bYo,lX,vYo,FYo,TYo,BF,Ope,MYo,EYo,iX,CYo,wYo,AYo,PF,yYo,Vpe,LYo,xYo,Xpe,$Yo,kYo,IF,KPe,Td,qF,zpe,Jy,SYo,Qpe,RYo,ZPe,Qo,Yy,BYo,Md,PYo,dX,IYo,qYo,cX,NYo,jYo,DYo,Ky,GYo,Wpe,OYo,VYo,XYo,Ft,Zy,zYo,Hpe,QYo,WYo,Ed,HYo,Upe,UYo,JYo,fX,YYo,KYo,ZYo,NF,eKo,go,eL,oKo,Jpe,rKo,tKo,Qa,aKo,Ype,nKo,sKo,Kpe,lKo,iKo,Zpe,dKo,cKo,fKo,Cd,jF,eue,mKo,gKo,mX,hKo,pKo,uKo,DF,oue,_Ko,bKo,gX,vKo,FKo,TKo,GF,rue,MKo,EKo,hX,CKo,wKo,AKo,OF,yKo,tue,LKo,xKo,aue,$Ko,kKo,VF,eIe,wd,XF,nue,oL,SKo,sue,RKo,oIe,Wo,rL,BKo,Ad,PKo,pX,IKo,qKo,uX,NKo,jKo,DKo,tL,GKo,lue,OKo,VKo,XKo,Tt,aL,zKo,iue,QKo,WKo,yd,HKo,due,UKo,JKo,_X,YKo,KKo,ZKo,zF,eZo,ho,nL,oZo,cue,rZo,tZo,Wa,aZo,fue,nZo,sZo,mue,lZo,iZo,gue,dZo,cZo,fZo,sL,QF,hue,mZo,gZo,bX,hZo,pZo,uZo,WF,pue,_Zo,bZo,vX,vZo,FZo,TZo,HF,MZo,uue,EZo,CZo,_ue,wZo,AZo,UF,rIe,Ld,JF,bue,lL,yZo,vue,LZo,tIe,Ho,iL,xZo,xd,$Zo,FX,kZo,SZo,TX,RZo,BZo,PZo,dL,IZo,Fue,qZo,NZo,jZo,Mt,cL,DZo,Tue,GZo,OZo,$d,VZo,Mue,XZo,zZo,MX,QZo,WZo,HZo,YF,UZo,po,fL,JZo,Eue,YZo,KZo,Ha,ZZo,Cue,eer,oer,wue,rer,ter,Aue,aer,ner,ser,yue,KF,Lue,ler,ier,EX,der,cer,fer,ZF,mer,xue,ger,her,$ue,per,uer,e6,aIe,kd,o6,kue,mL,_er,Sue,ber,nIe,Uo,gL,ver,Sd,Fer,CX,Ter,Mer,wX,Eer,Cer,wer,hL,Aer,Rue,yer,Ler,xer,Et,pL,$er,Bue,ker,Ser,Rd,Rer,Pue,Ber,Per,AX,Ier,qer,Ner,r6,jer,uo,uL,Der,Iue,Ger,Oer,Ua,Ver,que,Xer,zer,Nue,Qer,Wer,jue,Her,Uer,Jer,Ja,t6,Due,Yer,Ker,yX,Zer,eor,oor,a6,Gue,ror,tor,LX,aor,nor,sor,n6,Oue,lor,ior,xX,dor,cor,mor,s6,Vue,gor,hor,$X,por,uor,_or,l6,bor,Xue,vor,For,zue,Tor,Mor,i6,sIe,Bd,d6,Que,_L,Eor,Wue,Cor,lIe,Jo,bL,wor,Pd,Aor,kX,yor,Lor,SX,xor,$or,kor,vL,Sor,Hue,Ror,Bor,Por,Ct,FL,Ior,Uue,qor,Nor,Id,jor,Jue,Dor,Gor,RX,Oor,Vor,Xor,c6,zor,_o,TL,Qor,Yue,Wor,Hor,Ya,Uor,Kue,Jor,Yor,Zue,Kor,Zor,e_e,err,orr,rrr,o_e,f6,r_e,trr,arr,BX,nrr,srr,lrr,m6,irr,t_e,drr,crr,a_e,frr,mrr,g6,iIe,qd,h6,n_e,ML,grr,s_e,hrr,dIe,Yo,EL,prr,Nd,urr,PX,_rr,brr,IX,vrr,Frr,Trr,CL,Mrr,l_e,Err,Crr,wrr,wt,wL,Arr,i_e,yrr,Lrr,jd,xrr,d_e,$rr,krr,qX,Srr,Rrr,Brr,p6,Prr,wr,AL,Irr,c_e,qrr,Nrr,Ka,jrr,f_e,Drr,Grr,m_e,Orr,Vrr,g_e,Xrr,zrr,Qrr,j,u6,h_e,Wrr,Hrr,NX,Urr,Jrr,Yrr,_6,p_e,Krr,Zrr,jX,etr,otr,rtr,b6,u_e,ttr,atr,DX,ntr,str,ltr,v6,__e,itr,dtr,GX,ctr,ftr,mtr,F6,b_e,gtr,htr,OX,ptr,utr,_tr,T6,v_e,btr,vtr,VX,Ftr,Ttr,Mtr,M6,F_e,Etr,Ctr,XX,wtr,Atr,ytr,E6,T_e,Ltr,xtr,zX,$tr,ktr,Str,C6,M_e,Rtr,Btr,QX,Ptr,Itr,qtr,w6,E_e,Ntr,jtr,WX,Dtr,Gtr,Otr,A6,C_e,Vtr,Xtr,HX,ztr,Qtr,Wtr,y6,w_e,Htr,Utr,UX,Jtr,Ytr,Ktr,L6,A_e,Ztr,ear,JX,oar,rar,tar,x6,y_e,aar,nar,YX,sar,lar,iar,$6,L_e,dar,car,KX,far,mar,gar,k6,x_e,har,par,ZX,uar,_ar,bar,S6,$_e,Far,Tar,ez,Mar,Ear,Car,Bs,k_e,war,Aar,oz,yar,Lar,rz,xar,$ar,kar,R6,S_e,Sar,Rar,tz,Bar,Par,Iar,B6,R_e,qar,Nar,az,jar,Dar,Gar,P6,B_e,Oar,Var,nz,Xar,zar,Qar,I6,P_e,War,Har,sz,Uar,Jar,Yar,q6,I_e,Kar,Zar,lz,enr,onr,rnr,N6,q_e,tnr,anr,iz,nnr,snr,lnr,j6,N_e,inr,dnr,dz,cnr,fnr,mnr,D6,j_e,gnr,hnr,cz,pnr,unr,_nr,G6,D_e,bnr,vnr,fz,Fnr,Tnr,Mnr,O6,G_e,Enr,Cnr,mz,wnr,Anr,ynr,V6,O_e,Lnr,xnr,gz,$nr,knr,Snr,X6,V_e,Rnr,Bnr,hz,Pnr,Inr,qnr,z6,X_e,Nnr,jnr,pz,Dnr,Gnr,Onr,Q6,z_e,Vnr,Xnr,uz,znr,Qnr,Wnr,W6,Q_e,Hnr,Unr,_z,Jnr,Ynr,Knr,H6,W_e,Znr,esr,bz,osr,rsr,tsr,U6,H_e,asr,nsr,vz,ssr,lsr,isr,J6,U_e,dsr,csr,Fz,fsr,msr,gsr,Y6,J_e,hsr,psr,Tz,usr,_sr,bsr,K6,Y_e,vsr,Fsr,Mz,Tsr,Msr,Esr,Z6,K_e,Csr,wsr,Ez,Asr,ysr,Lsr,eT,Z_e,xsr,$sr,Cz,ksr,Ssr,Rsr,oT,e2e,Bsr,Psr,wz,Isr,qsr,Nsr,rT,o2e,jsr,Dsr,Az,Gsr,Osr,Vsr,tT,r2e,Xsr,zsr,yz,Qsr,Wsr,Hsr,aT,t2e,Usr,Jsr,Lz,Ysr,Ksr,Zsr,nT,a2e,elr,olr,xz,rlr,tlr,alr,sT,cIe,Dd,lT,n2e,yL,nlr,s2e,slr,fIe,Ko,LL,llr,Gd,ilr,$z,dlr,clr,kz,flr,mlr,glr,xL,hlr,l2e,plr,ulr,_lr,At,$L,blr,i2e,vlr,Flr,Od,Tlr,d2e,Mlr,Elr,Sz,Clr,wlr,Alr,iT,ylr,Ar,kL,Llr,c2e,xlr,$lr,Za,klr,f2e,Slr,Rlr,m2e,Blr,Plr,g2e,Ilr,qlr,Nlr,ne,dT,h2e,jlr,Dlr,Rz,Glr,Olr,Vlr,cT,p2e,Xlr,zlr,Bz,Qlr,Wlr,Hlr,fT,u2e,Ulr,Jlr,Pz,Ylr,Klr,Zlr,mT,_2e,eir,oir,Iz,rir,tir,air,gT,b2e,nir,sir,qz,lir,iir,dir,hT,v2e,cir,fir,Nz,mir,gir,hir,pT,F2e,pir,uir,jz,_ir,bir,vir,uT,T2e,Fir,Tir,Dz,Mir,Eir,Cir,_T,M2e,wir,Air,Gz,yir,Lir,xir,bT,E2e,$ir,kir,Oz,Sir,Rir,Bir,vT,C2e,Pir,Iir,Vz,qir,Nir,jir,FT,w2e,Dir,Gir,Xz,Oir,Vir,Xir,TT,A2e,zir,Qir,zz,Wir,Hir,Uir,MT,y2e,Jir,Yir,Qz,Kir,Zir,edr,ET,L2e,odr,rdr,Wz,tdr,adr,ndr,CT,x2e,sdr,ldr,Hz,idr,ddr,cdr,wT,$2e,fdr,mdr,Uz,gdr,hdr,pdr,AT,k2e,udr,_dr,Jz,bdr,vdr,Fdr,yT,S2e,Tdr,Mdr,Yz,Edr,Cdr,wdr,LT,R2e,Adr,ydr,Kz,Ldr,xdr,$dr,xT,B2e,kdr,Sdr,Zz,Rdr,Bdr,Pdr,$T,P2e,Idr,qdr,eQ,Ndr,jdr,Ddr,kT,I2e,Gdr,Odr,oQ,Vdr,Xdr,zdr,ST,mIe,Vd,RT,q2e,SL,Qdr,N2e,Wdr,gIe,Zo,RL,Hdr,Xd,Udr,rQ,Jdr,Ydr,tQ,Kdr,Zdr,ecr,BL,ocr,j2e,rcr,tcr,acr,yt,PL,ncr,D2e,scr,lcr,zd,icr,G2e,dcr,ccr,aQ,fcr,mcr,gcr,BT,hcr,yr,IL,pcr,O2e,ucr,_cr,en,bcr,V2e,vcr,Fcr,X2e,Tcr,Mcr,z2e,Ecr,Ccr,wcr,Te,PT,Q2e,Acr,ycr,nQ,Lcr,xcr,$cr,IT,W2e,kcr,Scr,sQ,Rcr,Bcr,Pcr,qT,H2e,Icr,qcr,lQ,Ncr,jcr,Dcr,NT,U2e,Gcr,Ocr,iQ,Vcr,Xcr,zcr,jT,J2e,Qcr,Wcr,dQ,Hcr,Ucr,Jcr,DT,Y2e,Ycr,Kcr,cQ,Zcr,efr,ofr,GT,K2e,rfr,tfr,fQ,afr,nfr,sfr,OT,Z2e,lfr,ifr,mQ,dfr,cfr,ffr,VT,e1e,mfr,gfr,gQ,hfr,pfr,ufr,XT,o1e,_fr,bfr,hQ,vfr,Ffr,Tfr,zT,r1e,Mfr,Efr,pQ,Cfr,wfr,Afr,QT,t1e,yfr,Lfr,uQ,xfr,$fr,kfr,WT,hIe,Qd,HT,a1e,qL,Sfr,n1e,Rfr,pIe,er,NL,Bfr,Wd,Pfr,_Q,Ifr,qfr,bQ,Nfr,jfr,Dfr,jL,Gfr,s1e,Ofr,Vfr,Xfr,Lt,DL,zfr,l1e,Qfr,Wfr,Hd,Hfr,i1e,Ufr,Jfr,vQ,Yfr,Kfr,Zfr,UT,emr,Lr,GL,omr,d1e,rmr,tmr,on,amr,c1e,nmr,smr,f1e,lmr,imr,m1e,dmr,cmr,fmr,Ud,JT,g1e,mmr,gmr,FQ,hmr,pmr,umr,YT,h1e,_mr,bmr,TQ,vmr,Fmr,Tmr,KT,p1e,Mmr,Emr,MQ,Cmr,wmr,Amr,ZT,uIe,Jd,e9,u1e,OL,ymr,_1e,Lmr,_Ie,or,VL,xmr,Yd,$mr,EQ,kmr,Smr,CQ,Rmr,Bmr,Pmr,XL,Imr,b1e,qmr,Nmr,jmr,xt,zL,Dmr,v1e,Gmr,Omr,Kd,Vmr,F1e,Xmr,zmr,wQ,Qmr,Wmr,Hmr,o9,Umr,xr,QL,Jmr,T1e,Ymr,Kmr,rn,Zmr,M1e,egr,ogr,E1e,rgr,tgr,C1e,agr,ngr,sgr,ie,r9,w1e,lgr,igr,AQ,dgr,cgr,fgr,t9,A1e,mgr,ggr,yQ,hgr,pgr,ugr,a9,y1e,_gr,bgr,LQ,vgr,Fgr,Tgr,n9,L1e,Mgr,Egr,xQ,Cgr,wgr,Agr,s9,x1e,ygr,Lgr,$Q,xgr,$gr,kgr,l9,$1e,Sgr,Rgr,kQ,Bgr,Pgr,Igr,i9,k1e,qgr,Ngr,SQ,jgr,Dgr,Ggr,d9,S1e,Ogr,Vgr,RQ,Xgr,zgr,Qgr,c9,R1e,Wgr,Hgr,BQ,Ugr,Jgr,Ygr,f9,B1e,Kgr,Zgr,PQ,ehr,ohr,rhr,m9,P1e,thr,ahr,IQ,nhr,shr,lhr,g9,I1e,ihr,dhr,qQ,chr,fhr,mhr,h9,q1e,ghr,hhr,NQ,phr,uhr,_hr,p9,N1e,bhr,vhr,jQ,Fhr,Thr,Mhr,u9,j1e,Ehr,Chr,DQ,whr,Ahr,yhr,_9,D1e,Lhr,xhr,GQ,$hr,khr,Shr,b9,G1e,Rhr,Bhr,OQ,Phr,Ihr,qhr,v9,O1e,Nhr,jhr,VQ,Dhr,Ghr,Ohr,F9,V1e,Vhr,Xhr,XQ,zhr,Qhr,Whr,T9,X1e,Hhr,Uhr,zQ,Jhr,Yhr,Khr,M9,bIe,Zd,E9,z1e,WL,Zhr,Q1e,epr,vIe,rr,HL,opr,ec,rpr,QQ,tpr,apr,WQ,npr,spr,lpr,UL,ipr,W1e,dpr,cpr,fpr,$t,JL,mpr,H1e,gpr,hpr,oc,ppr,U1e,upr,_pr,HQ,bpr,vpr,Fpr,C9,Tpr,$r,YL,Mpr,J1e,Epr,Cpr,tn,wpr,Y1e,Apr,ypr,K1e,Lpr,xpr,Z1e,$pr,kpr,Spr,ye,w9,ebe,Rpr,Bpr,UQ,Ppr,Ipr,qpr,A9,obe,Npr,jpr,JQ,Dpr,Gpr,Opr,y9,rbe,Vpr,Xpr,YQ,zpr,Qpr,Wpr,L9,tbe,Hpr,Upr,KQ,Jpr,Ypr,Kpr,x9,abe,Zpr,eur,ZQ,our,rur,tur,$9,nbe,aur,nur,eW,sur,lur,iur,k9,sbe,dur,cur,oW,fur,mur,gur,S9,lbe,hur,pur,rW,uur,_ur,bur,R9,ibe,vur,Fur,tW,Tur,Mur,Eur,B9,dbe,Cur,wur,aW,Aur,yur,Lur,P9,FIe,rc,I9,cbe,KL,xur,fbe,$ur,TIe,tr,ZL,kur,tc,Sur,nW,Rur,Bur,sW,Pur,Iur,qur,e8,Nur,mbe,jur,Dur,Gur,kt,o8,Our,gbe,Vur,Xur,ac,zur,hbe,Qur,Wur,lW,Hur,Uur,Jur,q9,Yur,kr,r8,Kur,pbe,Zur,e_r,an,o_r,ube,r_r,t_r,_be,a_r,n_r,bbe,s_r,l_r,i_r,Z,N9,vbe,d_r,c_r,iW,f_r,m_r,g_r,j9,Fbe,h_r,p_r,dW,u_r,__r,b_r,D9,Tbe,v_r,F_r,cW,T_r,M_r,E_r,G9,Mbe,C_r,w_r,fW,A_r,y_r,L_r,O9,Ebe,x_r,$_r,mW,k_r,S_r,R_r,V9,Cbe,B_r,P_r,gW,I_r,q_r,N_r,X9,wbe,j_r,D_r,hW,G_r,O_r,V_r,z9,Abe,X_r,z_r,pW,Q_r,W_r,H_r,Q9,ybe,U_r,J_r,uW,Y_r,K_r,Z_r,W9,Lbe,e2r,o2r,_W,r2r,t2r,a2r,H9,xbe,n2r,s2r,bW,l2r,i2r,d2r,U9,$be,c2r,f2r,vW,m2r,g2r,h2r,J9,kbe,p2r,u2r,FW,_2r,b2r,v2r,Y9,Sbe,F2r,T2r,TW,M2r,E2r,C2r,K9,Rbe,w2r,A2r,MW,y2r,L2r,x2r,Z9,Bbe,$2r,k2r,EW,S2r,R2r,B2r,eM,Pbe,P2r,I2r,CW,q2r,N2r,j2r,oM,Ibe,D2r,G2r,wW,O2r,V2r,X2r,rM,qbe,z2r,Q2r,AW,W2r,H2r,U2r,tM,Nbe,J2r,Y2r,yW,K2r,Z2r,e1r,aM,jbe,o1r,r1r,LW,t1r,a1r,n1r,nM,Dbe,s1r,l1r,xW,i1r,d1r,c1r,sM,Gbe,f1r,m1r,$W,g1r,h1r,p1r,lM,Obe,u1r,_1r,kW,b1r,v1r,F1r,iM,Vbe,T1r,M1r,SW,E1r,C1r,w1r,dM,Xbe,A1r,y1r,RW,L1r,x1r,$1r,cM,MIe,nc,fM,zbe,t8,k1r,Qbe,S1r,EIe,ar,a8,R1r,sc,B1r,BW,P1r,I1r,PW,q1r,N1r,j1r,n8,D1r,Wbe,G1r,O1r,V1r,St,s8,X1r,Hbe,z1r,Q1r,lc,W1r,Ube,H1r,U1r,IW,J1r,Y1r,K1r,mM,Z1r,Sr,l8,ebr,Jbe,obr,rbr,nn,tbr,Ybe,abr,nbr,Kbe,sbr,lbr,Zbe,ibr,dbr,cbr,pe,gM,e5e,fbr,mbr,qW,gbr,hbr,pbr,hM,o5e,ubr,_br,NW,bbr,vbr,Fbr,pM,r5e,Tbr,Mbr,jW,Ebr,Cbr,wbr,uM,t5e,Abr,ybr,DW,Lbr,xbr,$br,_M,a5e,kbr,Sbr,GW,Rbr,Bbr,Pbr,bM,n5e,Ibr,qbr,OW,Nbr,jbr,Dbr,vM,s5e,Gbr,Obr,VW,Vbr,Xbr,zbr,FM,l5e,Qbr,Wbr,XW,Hbr,Ubr,Jbr,TM,i5e,Ybr,Kbr,zW,Zbr,e5r,o5r,MM,d5e,r5r,t5r,QW,a5r,n5r,s5r,EM,c5e,l5r,i5r,WW,d5r,c5r,f5r,CM,f5e,m5r,g5r,HW,h5r,p5r,u5r,wM,m5e,_5r,b5r,UW,v5r,F5r,T5r,AM,g5e,M5r,E5r,JW,C5r,w5r,A5r,yM,h5e,y5r,L5r,YW,x5r,$5r,k5r,LM,p5e,S5r,R5r,KW,B5r,P5r,I5r,xM,u5e,q5r,N5r,ZW,j5r,D5r,G5r,$M,CIe,ic,kM,_5e,i8,O5r,b5e,V5r,wIe,nr,d8,X5r,dc,z5r,eH,Q5r,W5r,oH,H5r,U5r,J5r,c8,Y5r,v5e,K5r,Z5r,evr,Rt,f8,ovr,F5e,rvr,tvr,cc,avr,T5e,nvr,svr,rH,lvr,ivr,dvr,SM,cvr,Rr,m8,fvr,M5e,mvr,gvr,sn,hvr,E5e,pvr,uvr,C5e,_vr,bvr,w5e,vvr,Fvr,Tvr,g8,RM,A5e,Mvr,Evr,tH,Cvr,wvr,Avr,BM,y5e,yvr,Lvr,aH,xvr,$vr,kvr,PM,AIe,fc,IM,L5e,h8,Svr,x5e,Rvr,yIe,sr,p8,Bvr,mc,Pvr,nH,Ivr,qvr,sH,Nvr,jvr,Dvr,u8,Gvr,$5e,Ovr,Vvr,Xvr,Bt,_8,zvr,k5e,Qvr,Wvr,gc,Hvr,S5e,Uvr,Jvr,lH,Yvr,Kvr,Zvr,qM,eFr,Br,b8,oFr,R5e,rFr,tFr,ln,aFr,B5e,nFr,sFr,P5e,lFr,iFr,I5e,dFr,cFr,fFr,q5e,NM,N5e,mFr,gFr,iH,hFr,pFr,uFr,jM,LIe,hc,DM,j5e,v8,_Fr,D5e,bFr,xIe,lr,F8,vFr,pc,FFr,dH,TFr,MFr,cH,EFr,CFr,wFr,T8,AFr,G5e,yFr,LFr,xFr,Pt,M8,$Fr,O5e,kFr,SFr,uc,RFr,V5e,BFr,PFr,fH,IFr,qFr,NFr,GM,jFr,Pr,E8,DFr,X5e,GFr,OFr,dn,VFr,z5e,XFr,zFr,Q5e,QFr,WFr,W5e,HFr,UFr,JFr,de,OM,H5e,YFr,KFr,mH,ZFr,e6r,o6r,VM,U5e,r6r,t6r,gH,a6r,n6r,s6r,XM,J5e,l6r,i6r,hH,d6r,c6r,f6r,zM,Y5e,m6r,g6r,pH,h6r,p6r,u6r,QM,K5e,_6r,b6r,uH,v6r,F6r,T6r,WM,Z5e,M6r,E6r,_H,C6r,w6r,A6r,HM,eve,y6r,L6r,bH,x6r,$6r,k6r,UM,ove,S6r,R6r,vH,B6r,P6r,I6r,JM,rve,q6r,N6r,FH,j6r,D6r,G6r,YM,tve,O6r,V6r,TH,X6r,z6r,Q6r,KM,ave,W6r,H6r,MH,U6r,J6r,Y6r,ZM,nve,K6r,Z6r,EH,eTr,oTr,rTr,e4,sve,tTr,aTr,CH,nTr,sTr,lTr,o4,lve,iTr,dTr,wH,cTr,fTr,mTr,r4,ive,gTr,hTr,AH,pTr,uTr,_Tr,t4,dve,bTr,vTr,yH,FTr,TTr,MTr,a4,cve,ETr,CTr,LH,wTr,ATr,yTr,n4,fve,LTr,xTr,xH,$Tr,kTr,STr,s4,mve,RTr,BTr,$H,PTr,ITr,qTr,l4,gve,NTr,jTr,kH,DTr,GTr,OTr,i4,$Ie,_c,d4,hve,C8,VTr,pve,XTr,kIe,ir,w8,zTr,bc,QTr,SH,WTr,HTr,RH,UTr,JTr,YTr,A8,KTr,uve,ZTr,e9r,o9r,It,y8,r9r,_ve,t9r,a9r,vc,n9r,bve,s9r,l9r,BH,i9r,d9r,c9r,c4,f9r,Ir,L8,m9r,vve,g9r,h9r,cn,p9r,Fve,u9r,_9r,Tve,b9r,v9r,Mve,F9r,T9r,M9r,ce,f4,Eve,E9r,C9r,PH,w9r,A9r,y9r,m4,Cve,L9r,x9r,IH,$9r,k9r,S9r,g4,wve,R9r,B9r,qH,P9r,I9r,q9r,h4,Ave,N9r,j9r,NH,D9r,G9r,O9r,p4,yve,V9r,X9r,jH,z9r,Q9r,W9r,u4,Lve,H9r,U9r,DH,J9r,Y9r,K9r,_4,xve,Z9r,eMr,GH,oMr,rMr,tMr,b4,$ve,aMr,nMr,OH,sMr,lMr,iMr,v4,kve,dMr,cMr,VH,fMr,mMr,gMr,F4,Sve,hMr,pMr,XH,uMr,_Mr,bMr,T4,Rve,vMr,FMr,zH,TMr,MMr,EMr,M4,Bve,CMr,wMr,QH,AMr,yMr,LMr,E4,Pve,xMr,$Mr,WH,kMr,SMr,RMr,C4,Ive,BMr,PMr,HH,IMr,qMr,NMr,w4,qve,jMr,DMr,UH,GMr,OMr,VMr,A4,Nve,XMr,zMr,JH,QMr,WMr,HMr,y4,jve,UMr,JMr,YH,YMr,KMr,ZMr,L4,Dve,e4r,o4r,KH,r4r,t4r,a4r,x4,Gve,n4r,s4r,ZH,l4r,i4r,d4r,$4,Ove,c4r,f4r,eU,m4r,g4r,h4r,k4,SIe,Fc,S4,Vve,x8,p4r,Xve,u4r,RIe,dr,$8,_4r,Tc,b4r,oU,v4r,F4r,rU,T4r,M4r,E4r,k8,C4r,zve,w4r,A4r,y4r,qt,S8,L4r,Qve,x4r,$4r,Mc,k4r,Wve,S4r,R4r,tU,B4r,P4r,I4r,R4,q4r,qr,R8,N4r,Hve,j4r,D4r,fn,G4r,Uve,O4r,V4r,Jve,X4r,z4r,Yve,Q4r,W4r,H4r,Kve,B4,Zve,U4r,J4r,aU,Y4r,K4r,Z4r,P4,BIe,Ec,I4,eFe,B8,eEr,oFe,oEr,PIe,cr,P8,rEr,Cc,tEr,nU,aEr,nEr,sU,sEr,lEr,iEr,I8,dEr,rFe,cEr,fEr,mEr,Nt,q8,gEr,tFe,hEr,pEr,wc,uEr,aFe,_Er,bEr,lU,vEr,FEr,TEr,q4,MEr,Nr,N8,EEr,nFe,CEr,wEr,mn,AEr,sFe,yEr,LEr,lFe,xEr,$Er,iFe,kEr,SEr,REr,dFe,N4,cFe,BEr,PEr,iU,IEr,qEr,NEr,j4,IIe,Ac,D4,fFe,j8,jEr,mFe,DEr,qIe,fr,D8,GEr,yc,OEr,dU,VEr,XEr,cU,zEr,QEr,WEr,G8,HEr,gFe,UEr,JEr,YEr,jt,O8,KEr,hFe,ZEr,eCr,Lc,oCr,pFe,rCr,tCr,fU,aCr,nCr,sCr,G4,lCr,jr,V8,iCr,uFe,dCr,cCr,gn,fCr,_Fe,mCr,gCr,bFe,hCr,pCr,vFe,uCr,_Cr,bCr,oe,O4,FFe,vCr,FCr,mU,TCr,MCr,ECr,V4,TFe,CCr,wCr,gU,ACr,yCr,LCr,X4,MFe,xCr,$Cr,hU,kCr,SCr,RCr,z4,EFe,BCr,PCr,pU,ICr,qCr,NCr,Q4,CFe,jCr,DCr,uU,GCr,OCr,VCr,W4,wFe,XCr,zCr,_U,QCr,WCr,HCr,H4,AFe,UCr,JCr,bU,YCr,KCr,ZCr,U4,yFe,e3r,o3r,vU,r3r,t3r,a3r,J4,LFe,n3r,s3r,FU,l3r,i3r,d3r,Y4,xFe,c3r,f3r,TU,m3r,g3r,h3r,K4,$Fe,p3r,u3r,MU,_3r,b3r,v3r,Z4,kFe,F3r,T3r,EU,M3r,E3r,C3r,eE,SFe,w3r,A3r,CU,y3r,L3r,x3r,oE,RFe,$3r,k3r,wU,S3r,R3r,B3r,rE,BFe,P3r,I3r,AU,q3r,N3r,j3r,tE,PFe,D3r,G3r,yU,O3r,V3r,X3r,aE,IFe,z3r,Q3r,LU,W3r,H3r,U3r,nE,qFe,J3r,Y3r,xU,K3r,Z3r,ewr,sE,NFe,owr,rwr,$U,twr,awr,nwr,lE,jFe,swr,lwr,kU,iwr,dwr,cwr,iE,DFe,fwr,mwr,SU,gwr,hwr,pwr,dE,GFe,uwr,_wr,RU,bwr,vwr,Fwr,cE,OFe,Twr,Mwr,BU,Ewr,Cwr,wwr,fE,VFe,Awr,ywr,PU,Lwr,xwr,$wr,mE,XFe,kwr,Swr,IU,Rwr,Bwr,Pwr,gE,NIe,xc,hE,zFe,X8,Iwr,QFe,qwr,jIe,mr,z8,Nwr,$c,jwr,qU,Dwr,Gwr,NU,Owr,Vwr,Xwr,Q8,zwr,WFe,Qwr,Wwr,Hwr,Dt,W8,Uwr,HFe,Jwr,Ywr,kc,Kwr,UFe,Zwr,eAr,jU,oAr,rAr,tAr,pE,aAr,Dr,H8,nAr,JFe,sAr,lAr,hn,iAr,YFe,dAr,cAr,KFe,fAr,mAr,ZFe,gAr,hAr,pAr,ke,uE,e6e,uAr,_Ar,DU,bAr,vAr,FAr,_E,o6e,TAr,MAr,GU,EAr,CAr,wAr,bE,r6e,AAr,yAr,OU,LAr,xAr,$Ar,vE,t6e,kAr,SAr,VU,RAr,BAr,PAr,FE,a6e,IAr,qAr,XU,NAr,jAr,DAr,TE,n6e,GAr,OAr,zU,VAr,XAr,zAr,ME,s6e,QAr,WAr,QU,HAr,UAr,JAr,EE,l6e,YAr,KAr,WU,ZAr,e0r,o0r,CE,i6e,r0r,t0r,HU,a0r,n0r,s0r,wE,DIe,Sc,AE,d6e,U8,l0r,c6e,i0r,GIe,gr,J8,d0r,Rc,c0r,UU,f0r,m0r,JU,g0r,h0r,p0r,Y8,u0r,f6e,_0r,b0r,v0r,Gt,K8,F0r,m6e,T0r,M0r,Bc,E0r,g6e,C0r,w0r,YU,A0r,y0r,L0r,yE,x0r,Gr,Z8,$0r,h6e,k0r,S0r,pn,R0r,p6e,B0r,P0r,u6e,I0r,q0r,_6e,N0r,j0r,D0r,Me,LE,b6e,G0r,O0r,KU,V0r,X0r,z0r,xE,v6e,Q0r,W0r,ZU,H0r,U0r,J0r,$E,F6e,Y0r,K0r,eJ,Z0r,eyr,oyr,kE,T6e,ryr,tyr,oJ,ayr,nyr,syr,SE,M6e,lyr,iyr,rJ,dyr,cyr,fyr,RE,E6e,myr,gyr,tJ,hyr,pyr,uyr,BE,C6e,_yr,byr,aJ,vyr,Fyr,Tyr,PE,w6e,Myr,Eyr,nJ,Cyr,wyr,Ayr,IE,A6e,yyr,Lyr,sJ,xyr,$yr,kyr,qE,y6e,Syr,Ryr,lJ,Byr,Pyr,Iyr,NE,L6e,qyr,Nyr,iJ,jyr,Dyr,Gyr,jE,x6e,Oyr,Vyr,dJ,Xyr,zyr,Qyr,DE,OIe,Pc,GE,$6e,ex,Wyr,k6e,Hyr,VIe,hr,ox,Uyr,Ic,Jyr,cJ,Yyr,Kyr,fJ,Zyr,eLr,oLr,rx,rLr,S6e,tLr,aLr,nLr,Ot,tx,sLr,R6e,lLr,iLr,qc,dLr,B6e,cLr,fLr,mJ,mLr,gLr,hLr,OE,pLr,Or,ax,uLr,P6e,_Lr,bLr,un,vLr,I6e,FLr,TLr,q6e,MLr,ELr,N6e,CLr,wLr,ALr,Le,VE,j6e,yLr,LLr,gJ,xLr,$Lr,kLr,XE,D6e,SLr,RLr,hJ,BLr,PLr,ILr,zE,G6e,qLr,NLr,pJ,jLr,DLr,GLr,QE,O6e,OLr,VLr,uJ,XLr,zLr,QLr,WE,V6e,WLr,HLr,_J,ULr,JLr,YLr,HE,X6e,KLr,ZLr,bJ,e8r,o8r,r8r,UE,z6e,t8r,a8r,vJ,n8r,s8r,l8r,JE,Q6e,i8r,d8r,FJ,c8r,f8r,m8r,YE,W6e,g8r,h8r,TJ,p8r,u8r,_8r,KE,H6e,b8r,v8r,MJ,F8r,T8r,M8r,ZE,XIe,Nc,eC,U6e,nx,E8r,J6e,C8r,zIe,pr,sx,w8r,jc,A8r,EJ,y8r,L8r,CJ,x8r,$8r,k8r,lx,S8r,Y6e,R8r,B8r,P8r,Vt,ix,I8r,K6e,q8r,N8r,Dc,j8r,Z6e,D8r,G8r,wJ,O8r,V8r,X8r,oC,z8r,Vr,dx,Q8r,eTe,W8r,H8r,_n,U8r,oTe,J8r,Y8r,rTe,K8r,Z8r,tTe,exr,oxr,rxr,Se,rC,aTe,txr,axr,AJ,nxr,sxr,lxr,tC,nTe,ixr,dxr,yJ,cxr,fxr,mxr,aC,sTe,gxr,hxr,LJ,pxr,uxr,_xr,nC,lTe,bxr,vxr,xJ,Fxr,Txr,Mxr,sC,iTe,Exr,Cxr,$J,wxr,Axr,yxr,lC,dTe,Lxr,xxr,kJ,$xr,kxr,Sxr,iC,cTe,Rxr,Bxr,SJ,Pxr,Ixr,qxr,dC,fTe,Nxr,jxr,RJ,Dxr,Gxr,Oxr,cC,mTe,Vxr,Xxr,BJ,zxr,Qxr,Wxr,fC,QIe,Gc,mC,gTe,cx,Hxr,hTe,Uxr,WIe,ur,fx,Jxr,Oc,Yxr,PJ,Kxr,Zxr,IJ,e7r,o7r,r7r,mx,t7r,pTe,a7r,n7r,s7r,Xt,gx,l7r,uTe,i7r,d7r,Vc,c7r,_Te,f7r,m7r,qJ,g7r,h7r,p7r,gC,u7r,Xr,hx,_7r,bTe,b7r,v7r,bn,F7r,vTe,T7r,M7r,FTe,E7r,C7r,TTe,w7r,A7r,y7r,xe,hC,MTe,L7r,x7r,NJ,$7r,k7r,S7r,pC,ETe,R7r,B7r,jJ,P7r,I7r,q7r,uC,CTe,N7r,j7r,DJ,D7r,G7r,O7r,_C,wTe,V7r,X7r,GJ,z7r,Q7r,W7r,bC,ATe,H7r,U7r,OJ,J7r,Y7r,K7r,vC,yTe,Z7r,e$r,VJ,o$r,r$r,t$r,FC,LTe,a$r,n$r,XJ,s$r,l$r,i$r,TC,xTe,d$r,c$r,zJ,f$r,m$r,g$r,MC,$Te,h$r,p$r,QJ,u$r,_$r,b$r,EC,kTe,v$r,F$r,WJ,T$r,M$r,E$r,CC,HIe,Xc,wC,STe,px,C$r,RTe,w$r,UIe,_r,ux,A$r,zc,y$r,HJ,L$r,x$r,UJ,$$r,k$r,S$r,_x,R$r,BTe,B$r,P$r,I$r,zt,bx,q$r,PTe,N$r,j$r,Qc,D$r,ITe,G$r,O$r,JJ,V$r,X$r,z$r,AC,Q$r,zr,vx,W$r,qTe,H$r,U$r,vn,J$r,NTe,Y$r,K$r,jTe,Z$r,ekr,DTe,okr,rkr,tkr,$e,yC,GTe,akr,nkr,YJ,skr,lkr,ikr,LC,OTe,dkr,ckr,KJ,fkr,mkr,gkr,xC,VTe,hkr,pkr,ZJ,ukr,_kr,bkr,$C,XTe,vkr,Fkr,eY,Tkr,Mkr,Ekr,kC,zTe,Ckr,wkr,oY,Akr,ykr,Lkr,SC,QTe,xkr,$kr,rY,kkr,Skr,Rkr,RC,WTe,Bkr,Pkr,tY,Ikr,qkr,Nkr,BC,HTe,jkr,Dkr,aY,Gkr,Okr,Vkr,PC,UTe,Xkr,zkr,nY,Qkr,Wkr,Hkr,IC,JTe,Ukr,Jkr,sY,Ykr,Kkr,Zkr,qC,JIe,Wc,NC,YTe,Fx,eSr,KTe,oSr,YIe,br,Tx,rSr,Hc,tSr,lY,aSr,nSr,iY,sSr,lSr,iSr,Mx,dSr,ZTe,cSr,fSr,mSr,Qt,Ex,gSr,e9e,hSr,pSr,Uc,uSr,o9e,_Sr,bSr,dY,vSr,FSr,TSr,jC,MSr,Qr,Cx,ESr,r9e,CSr,wSr,Fn,ASr,t9e,ySr,LSr,a9e,xSr,$Sr,n9e,kSr,SSr,RSr,De,DC,s9e,BSr,PSr,cY,ISr,qSr,NSr,GC,l9e,jSr,DSr,fY,GSr,OSr,VSr,OC,i9e,XSr,zSr,mY,QSr,WSr,HSr,VC,d9e,USr,JSr,gY,YSr,KSr,ZSr,XC,c9e,eRr,oRr,hY,rRr,tRr,aRr,zC,f9e,nRr,sRr,pY,lRr,iRr,dRr,QC,m9e,cRr,fRr,uY,mRr,gRr,hRr,WC,g9e,pRr,uRr,_Y,_Rr,bRr,vRr,HC,KIe,Jc,UC,h9e,wx,FRr,p9e,TRr,ZIe,vr,Ax,MRr,Yc,ERr,bY,CRr,wRr,vY,ARr,yRr,LRr,yx,xRr,u9e,$Rr,kRr,SRr,Wt,Lx,RRr,_9e,BRr,PRr,Kc,IRr,b9e,qRr,NRr,FY,jRr,DRr,GRr,JC,ORr,Wr,xx,VRr,v9e,XRr,zRr,Tn,QRr,F9e,WRr,HRr,T9e,URr,JRr,M9e,YRr,KRr,ZRr,Ge,YC,E9e,eBr,oBr,TY,rBr,tBr,aBr,KC,C9e,nBr,sBr,MY,lBr,iBr,dBr,ZC,w9e,cBr,fBr,EY,mBr,gBr,hBr,e3,A9e,pBr,uBr,CY,_Br,bBr,vBr,o3,y9e,FBr,TBr,wY,MBr,EBr,CBr,r3,L9e,wBr,ABr,AY,yBr,LBr,xBr,t3,x9e,$Br,kBr,yY,SBr,RBr,BBr,a3,$9e,PBr,IBr,LY,qBr,NBr,jBr,n3,eqe,Zc,s3,k9e,$x,DBr,S9e,GBr,oqe,Fr,kx,OBr,ef,VBr,xY,XBr,zBr,$Y,QBr,WBr,HBr,Sx,UBr,R9e,JBr,YBr,KBr,Ht,Rx,ZBr,B9e,ePr,oPr,of,rPr,P9e,tPr,aPr,kY,nPr,sPr,lPr,l3,iPr,Hr,Bx,dPr,I9e,cPr,fPr,Mn,mPr,q9e,gPr,hPr,N9e,pPr,uPr,j9e,_Pr,bPr,vPr,D9e,i3,G9e,FPr,TPr,SY,MPr,EPr,CPr,d3,rqe,rf,c3,O9e,Px,wPr,V9e,APr,tqe,Tr,Ix,yPr,tf,LPr,RY,xPr,$Pr,BY,kPr,SPr,RPr,qx,BPr,X9e,PPr,IPr,qPr,Ut,Nx,NPr,z9e,jPr,DPr,af,GPr,Q9e,OPr,VPr,PY,XPr,zPr,QPr,f3,WPr,Ur,jx,HPr,W9e,UPr,JPr,En,YPr,H9e,KPr,ZPr,U9e,eIr,oIr,J9e,rIr,tIr,aIr,Dx,m3,Y9e,nIr,sIr,IY,lIr,iIr,dIr,g3,K9e,cIr,fIr,qY,mIr,gIr,hIr,h3,aqe,nf,p3,Z9e,Gx,pIr,eMe,uIr,nqe,Mr,Ox,_Ir,sf,bIr,NY,vIr,FIr,jY,TIr,MIr,EIr,Vx,CIr,oMe,wIr,AIr,yIr,Jt,Xx,LIr,rMe,xIr,$Ir,lf,kIr,tMe,SIr,RIr,DY,BIr,PIr,IIr,u3,qIr,Jr,zx,NIr,aMe,jIr,DIr,Cn,GIr,nMe,OIr,VIr,sMe,XIr,zIr,lMe,QIr,WIr,HIr,iMe,_3,dMe,UIr,JIr,GY,YIr,KIr,ZIr,b3,sqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),GA=new ee({}),OA=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new eqr({props:{warning:!0,$$slots:{default:[cwt]},$$scope:{ctx:A}}}),VA=new ee({}),XA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/configuration_auto.py#L563"}}),WA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:A}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/configuration_auto.py#L708"}}),UA=new ee({}),JA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/tokenization_auto.py#L377"}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_12695/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:A}}}),e0=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/tokenization_auto.py#L587"}}),o0=new ee({}),r0=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),n0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_12695/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),vh=new eqr({props:{$$slots:{default:[gwt]},$$scope:{ctx:A}}}),Fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:A}}}),s0=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),l0=new ee({}),i0=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/processing_auto.py#L76"}}),f0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new eqr({props:{$$slots:{default:[pwt]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:A}}}),m0=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/processing_auto.py#L243"}}),g0=new ee({}),h0=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L716"}}),u0=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),_0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:A}}}),b0=new ee({}),v0=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L723"}}),T0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:A}}}),M0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:A}}}),E0=new ee({}),C0=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L738"}}),A0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:A}}}),y0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),t2=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:A}}}),L0=new ee({}),x0=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L745"}}),k0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),n2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:A}}}),S0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),O2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:A}}}),R0=new ee({}),B0=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L752"}}),I0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),X2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:A}}}),q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),d1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:A}}}),N0=new ee({}),j0=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L761"}}),G0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),f1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:A}}}),O0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),sb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:A}}}),V0=new ee({}),X0=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L795"}}),Q0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),ib=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:A}}}),W0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),Nb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:A}}}),H0=new ee({}),U0=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L802"}}),Y0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Db=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:A}}}),K0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:A}}}),Z0=new ee({}),ey=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L788"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:A}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:A}}}),ay=new ee({}),ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L770"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:A}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),vv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:A}}}),dy=new ee({}),cy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L777"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Tv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:A}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:A}}}),hy=new ee({}),py=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L811"}}),_y=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:A}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L850"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L857"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Vwt]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),rF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Xwt]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L880"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),aF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[zwt]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),cF=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Qwt]},$$scope:{ctx:A}}}),By=new ee({}),Py=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L864"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Wwt]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Hwt]},$$scope:{ctx:A}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L871"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Uwt]},$$scope:{ctx:A}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Jwt]},$$scope:{ctx:A}}}),zy=new ee({}),Qy=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L889"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),$F=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Ywt]},$$scope:{ctx:A}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),IF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Kwt]},$$scope:{ctx:A}}}),Jy=new ee({}),Yy=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L896"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Zwt]},$$scope:{ctx:A}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[eAt]},$$scope:{ctx:A}}}),oL=new ee({}),rL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L843"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[oAt]},$$scope:{ctx:A}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),UF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[rAt]},$$scope:{ctx:A}}}),lL=new ee({}),iL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L818"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),YF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[tAt]},$$scope:{ctx:A}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[aAt]},$$scope:{ctx:A}}}),mL=new ee({}),gL=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L825"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[nAt]},$$scope:{ctx:A}}}),uL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),i6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[sAt]},$$scope:{ctx:A}}}),_L=new ee({}),bL=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_auto.py#L834"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[lAt]},$$scope:{ctx:A}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[iAt]},$$scope:{ctx:A}}}),ML=new ee({}),EL=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),wL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),p6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[dAt]},$$scope:{ctx:A}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[cAt]},$$scope:{ctx:A}}}),yL=new ee({}),LL=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),$L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[fAt]},$$scope:{ctx:A}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[mAt]},$$scope:{ctx:A}}}),SL=new ee({}),RL=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),PL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[gAt]},$$scope:{ctx:A}}}),IL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),WT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[hAt]},$$scope:{ctx:A}}}),qL=new ee({}),NL=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),DL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[pAt]},$$scope:{ctx:A}}}),GL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uAt]},$$scope:{ctx:A}}}),OL=new ee({}),VL=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),zL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),o9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[_At]},$$scope:{ctx:A}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),M9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[bAt]},$$scope:{ctx:A}}}),WL=new ee({}),HL=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),JL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),C9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[vAt]},$$scope:{ctx:A}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),P9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[FAt]},$$scope:{ctx:A}}}),KL=new ee({}),ZL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),o8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),q9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[TAt]},$$scope:{ctx:A}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[MAt]},$$scope:{ctx:A}}}),t8=new ee({}),a8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),s8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[EAt]},$$scope:{ctx:A}}}),l8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[CAt]},$$scope:{ctx:A}}}),i8=new ee({}),d8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),f8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[wAt]},$$scope:{ctx:A}}}),m8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),PM=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[AAt]},$$scope:{ctx:A}}}),h8=new ee({}),p8=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),_8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),qM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yAt]},$$scope:{ctx:A}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),jM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[LAt]},$$scope:{ctx:A}}}),v8=new ee({}),F8=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),GM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[xAt]},$$scope:{ctx:A}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[$At]},$$scope:{ctx:A}}}),C8=new ee({}),w8=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kAt]},$$scope:{ctx:A}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),k4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[SAt]},$$scope:{ctx:A}}}),x8=new ee({}),$8=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),R4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[RAt]},$$scope:{ctx:A}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BAt]},$$scope:{ctx:A}}}),B8=new ee({}),P8=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),q4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[PAt]},$$scope:{ctx:A}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),j4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[IAt]},$$scope:{ctx:A}}}),j8=new ee({}),D8=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),O8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),G4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qAt]},$$scope:{ctx:A}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[NAt]},$$scope:{ctx:A}}}),X8=new ee({}),z8=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),W8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[jAt]},$$scope:{ctx:A}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DAt]},$$scope:{ctx:A}}}),U8=new ee({}),J8=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),K8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[GAt]},$$scope:{ctx:A}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[OAt]},$$scope:{ctx:A}}}),ex=new ee({}),ox=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[VAt]},$$scope:{ctx:A}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[XAt]},$$scope:{ctx:A}}}),nx=new ee({}),sx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),ix=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[zAt]},$$scope:{ctx:A}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[QAt]},$$scope:{ctx:A}}}),cx=new ee({}),fx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),gC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[WAt]},$$scope:{ctx:A}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[HAt]},$$scope:{ctx:A}}}),px=new ee({}),ux=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[UAt]},$$scope:{ctx:A}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),qC=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JAt]},$$scope:{ctx:A}}}),Fx=new ee({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[YAt]},$$scope:{ctx:A}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KAt]},$$scope:{ctx:A}}}),wx=new ee({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[ZAt]},$$scope:{ctx:A}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),n3=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[e0t]},$$scope:{ctx:A}}}),$x=new ee({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),l3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[o0t]},$$scope:{ctx:A}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),d3=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[r0t]},$$scope:{ctx:A}}}),Px=new ee({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),f3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[t0t]},$$scope:{ctx:A}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),h3=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[a0t]},$$scope:{ctx:A}}}),Gx=new ee({}),Ox=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[n0t]},$$scope:{ctx:A}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_12695/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_12695/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_12695/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[s0t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),qA=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),NA=o("AutoConfig"),yn=o(", "),Ln=a("a"),jA=o("AutoModel"),fi=o(`, and
`),xn=a("a"),DA=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),a$=o("will create a model that is an instance of "),gi=a("a"),n$=o("BertModel"),s$=o("."),Eo=l(),Ea=a("p"),l$=o("There is one class of "),pf=a("code"),i$=o("AutoModel"),hje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tPe=l(),hi=a("h2"),uf=a("a"),PZ=a("span"),F(GA.$$.fragment),pje=l(),IZ=a("span"),uje=o("Extending the Auto Classes"),aPe=l(),$n=a("p"),_je=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qZ=a("code"),bje=o("NewModel"),vje=o(", make sure you have a "),NZ=a("code"),Fje=o("NewModelConfig"),Tje=o(` then you can add those to the auto
classes like this:`),nPe=l(),F(OA.$$.fragment),sPe=l(),d$=a("p"),Mje=o("You will then be able to use the auto classes like you would usually do!"),lPe=l(),F(_f.$$.fragment),iPe=l(),pi=a("h2"),bf=a("a"),jZ=a("span"),F(VA.$$.fragment),Eje=l(),DZ=a("span"),Cje=o("AutoConfig"),dPe=l(),Co=a("div"),F(XA.$$.fragment),wje=l(),zA=a("p"),Aje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c$=a("a"),yje=o("from_pretrained()"),Lje=o(" class method."),xje=l(),QA=a("p"),$je=o("This class cannot be instantiated directly using "),GZ=a("code"),kje=o("__init__()"),Sje=o(" (throws an error)."),Rje=l(),Er=a("div"),F(WA.$$.fragment),Bje=l(),OZ=a("p"),Pje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Ije=l(),ui=a("p"),qje=o("The configuration class to instantiate is selected based on the "),VZ=a("code"),Nje=o("model_type"),jje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XZ=a("code"),Dje=o("pretrained_model_name_or_path"),Gje=o(":"),Oje=l(),y=a("ul"),vf=a("li"),zZ=a("strong"),Vje=o("albert"),Xje=o(" \u2014 "),f$=a("a"),zje=o("AlbertConfig"),Qje=o(" (ALBERT model)"),Wje=l(),Ff=a("li"),QZ=a("strong"),Hje=o("bart"),Uje=o(" \u2014 "),m$=a("a"),Jje=o("BartConfig"),Yje=o(" (BART model)"),Kje=l(),Tf=a("li"),WZ=a("strong"),Zje=o("beit"),eDe=o(" \u2014 "),g$=a("a"),oDe=o("BeitConfig"),rDe=o(" (BEiT model)"),tDe=l(),Mf=a("li"),HZ=a("strong"),aDe=o("bert"),nDe=o(" \u2014 "),h$=a("a"),sDe=o("BertConfig"),lDe=o(" (BERT model)"),iDe=l(),Ef=a("li"),UZ=a("strong"),dDe=o("bert-generation"),cDe=o(" \u2014 "),p$=a("a"),fDe=o("BertGenerationConfig"),mDe=o(" (Bert Generation model)"),gDe=l(),Cf=a("li"),JZ=a("strong"),hDe=o("big_bird"),pDe=o(" \u2014 "),u$=a("a"),uDe=o("BigBirdConfig"),_De=o(" (BigBird model)"),bDe=l(),wf=a("li"),YZ=a("strong"),vDe=o("bigbird_pegasus"),FDe=o(" \u2014 "),_$=a("a"),TDe=o("BigBirdPegasusConfig"),MDe=o(" (BigBirdPegasus model)"),EDe=l(),Af=a("li"),KZ=a("strong"),CDe=o("blenderbot"),wDe=o(" \u2014 "),b$=a("a"),ADe=o("BlenderbotConfig"),yDe=o(" (Blenderbot model)"),LDe=l(),yf=a("li"),ZZ=a("strong"),xDe=o("blenderbot-small"),$De=o(" \u2014 "),v$=a("a"),kDe=o("BlenderbotSmallConfig"),SDe=o(" (BlenderbotSmall model)"),RDe=l(),Lf=a("li"),eee=a("strong"),BDe=o("camembert"),PDe=o(" \u2014 "),F$=a("a"),IDe=o("CamembertConfig"),qDe=o(" (CamemBERT model)"),NDe=l(),xf=a("li"),oee=a("strong"),jDe=o("canine"),DDe=o(" \u2014 "),T$=a("a"),GDe=o("CanineConfig"),ODe=o(" (Canine model)"),VDe=l(),$f=a("li"),ree=a("strong"),XDe=o("clip"),zDe=o(" \u2014 "),M$=a("a"),QDe=o("CLIPConfig"),WDe=o(" (CLIP model)"),HDe=l(),kf=a("li"),tee=a("strong"),UDe=o("convbert"),JDe=o(" \u2014 "),E$=a("a"),YDe=o("ConvBertConfig"),KDe=o(" (ConvBERT model)"),ZDe=l(),Sf=a("li"),aee=a("strong"),eGe=o("convnext"),oGe=o(" \u2014 "),C$=a("a"),rGe=o("ConvNextConfig"),tGe=o(" (ConvNext model)"),aGe=l(),Rf=a("li"),nee=a("strong"),nGe=o("ctrl"),sGe=o(" \u2014 "),w$=a("a"),lGe=o("CTRLConfig"),iGe=o(" (CTRL model)"),dGe=l(),Bf=a("li"),see=a("strong"),cGe=o("data2vec-audio"),fGe=o(" \u2014 "),A$=a("a"),mGe=o("Data2VecAudioConfig"),gGe=o(" (Data2VecAudio model)"),hGe=l(),Pf=a("li"),lee=a("strong"),pGe=o("data2vec-text"),uGe=o(" \u2014 "),y$=a("a"),_Ge=o("Data2VecTextConfig"),bGe=o(" (Data2VecText model)"),vGe=l(),If=a("li"),iee=a("strong"),FGe=o("data2vec-vision"),TGe=o(" \u2014 "),L$=a("a"),MGe=o("Data2VecVisionConfig"),EGe=o(" (Data2VecVision model)"),CGe=l(),qf=a("li"),dee=a("strong"),wGe=o("deberta"),AGe=o(" \u2014 "),x$=a("a"),yGe=o("DebertaConfig"),LGe=o(" (DeBERTa model)"),xGe=l(),Nf=a("li"),cee=a("strong"),$Ge=o("deberta-v2"),kGe=o(" \u2014 "),$$=a("a"),SGe=o("DebertaV2Config"),RGe=o(" (DeBERTa-v2 model)"),BGe=l(),jf=a("li"),fee=a("strong"),PGe=o("decision_transformer"),IGe=o(" \u2014 "),k$=a("a"),qGe=o("DecisionTransformerConfig"),NGe=o(" (Decision Transformer model)"),jGe=l(),Df=a("li"),mee=a("strong"),DGe=o("deit"),GGe=o(" \u2014 "),S$=a("a"),OGe=o("DeiTConfig"),VGe=o(" (DeiT model)"),XGe=l(),Gf=a("li"),gee=a("strong"),zGe=o("detr"),QGe=o(" \u2014 "),R$=a("a"),WGe=o("DetrConfig"),HGe=o(" (DETR model)"),UGe=l(),Of=a("li"),hee=a("strong"),JGe=o("distilbert"),YGe=o(" \u2014 "),B$=a("a"),KGe=o("DistilBertConfig"),ZGe=o(" (DistilBERT model)"),eOe=l(),Vf=a("li"),pee=a("strong"),oOe=o("dpr"),rOe=o(" \u2014 "),P$=a("a"),tOe=o("DPRConfig"),aOe=o(" (DPR model)"),nOe=l(),Xf=a("li"),uee=a("strong"),sOe=o("dpt"),lOe=o(" \u2014 "),I$=a("a"),iOe=o("DPTConfig"),dOe=o(" (DPT model)"),cOe=l(),zf=a("li"),_ee=a("strong"),fOe=o("electra"),mOe=o(" \u2014 "),q$=a("a"),gOe=o("ElectraConfig"),hOe=o(" (ELECTRA model)"),pOe=l(),Qf=a("li"),bee=a("strong"),uOe=o("encoder-decoder"),_Oe=o(" \u2014 "),N$=a("a"),bOe=o("EncoderDecoderConfig"),vOe=o(" (Encoder decoder model)"),FOe=l(),Wf=a("li"),vee=a("strong"),TOe=o("flaubert"),MOe=o(" \u2014 "),j$=a("a"),EOe=o("FlaubertConfig"),COe=o(" (FlauBERT model)"),wOe=l(),Hf=a("li"),Fee=a("strong"),AOe=o("fnet"),yOe=o(" \u2014 "),D$=a("a"),LOe=o("FNetConfig"),xOe=o(" (FNet model)"),$Oe=l(),Uf=a("li"),Tee=a("strong"),kOe=o("fsmt"),SOe=o(" \u2014 "),G$=a("a"),ROe=o("FSMTConfig"),BOe=o(" (FairSeq Machine-Translation model)"),POe=l(),Jf=a("li"),Mee=a("strong"),IOe=o("funnel"),qOe=o(" \u2014 "),O$=a("a"),NOe=o("FunnelConfig"),jOe=o(" (Funnel Transformer model)"),DOe=l(),Yf=a("li"),Eee=a("strong"),GOe=o("glpn"),OOe=o(" \u2014 "),V$=a("a"),VOe=o("GLPNConfig"),XOe=o(" (GLPN model)"),zOe=l(),Kf=a("li"),Cee=a("strong"),QOe=o("gpt2"),WOe=o(" \u2014 "),X$=a("a"),HOe=o("GPT2Config"),UOe=o(" (OpenAI GPT-2 model)"),JOe=l(),Zf=a("li"),wee=a("strong"),YOe=o("gpt_neo"),KOe=o(" \u2014 "),z$=a("a"),ZOe=o("GPTNeoConfig"),eVe=o(" (GPT Neo model)"),oVe=l(),em=a("li"),Aee=a("strong"),rVe=o("gptj"),tVe=o(" \u2014 "),Q$=a("a"),aVe=o("GPTJConfig"),nVe=o(" (GPT-J model)"),sVe=l(),om=a("li"),yee=a("strong"),lVe=o("hubert"),iVe=o(" \u2014 "),W$=a("a"),dVe=o("HubertConfig"),cVe=o(" (Hubert model)"),fVe=l(),rm=a("li"),Lee=a("strong"),mVe=o("ibert"),gVe=o(" \u2014 "),H$=a("a"),hVe=o("IBertConfig"),pVe=o(" (I-BERT model)"),uVe=l(),tm=a("li"),xee=a("strong"),_Ve=o("imagegpt"),bVe=o(" \u2014 "),U$=a("a"),vVe=o("ImageGPTConfig"),FVe=o(" (ImageGPT model)"),TVe=l(),am=a("li"),$ee=a("strong"),MVe=o("layoutlm"),EVe=o(" \u2014 "),J$=a("a"),CVe=o("LayoutLMConfig"),wVe=o(" (LayoutLM model)"),AVe=l(),nm=a("li"),kee=a("strong"),yVe=o("layoutlmv2"),LVe=o(" \u2014 "),Y$=a("a"),xVe=o("LayoutLMv2Config"),$Ve=o(" (LayoutLMv2 model)"),kVe=l(),sm=a("li"),See=a("strong"),SVe=o("led"),RVe=o(" \u2014 "),K$=a("a"),BVe=o("LEDConfig"),PVe=o(" (LED model)"),IVe=l(),lm=a("li"),Ree=a("strong"),qVe=o("longformer"),NVe=o(" \u2014 "),Z$=a("a"),jVe=o("LongformerConfig"),DVe=o(" (Longformer model)"),GVe=l(),im=a("li"),Bee=a("strong"),OVe=o("luke"),VVe=o(" \u2014 "),ek=a("a"),XVe=o("LukeConfig"),zVe=o(" (LUKE model)"),QVe=l(),dm=a("li"),Pee=a("strong"),WVe=o("lxmert"),HVe=o(" \u2014 "),ok=a("a"),UVe=o("LxmertConfig"),JVe=o(" (LXMERT model)"),YVe=l(),cm=a("li"),Iee=a("strong"),KVe=o("m2m_100"),ZVe=o(" \u2014 "),rk=a("a"),eXe=o("M2M100Config"),oXe=o(" (M2M100 model)"),rXe=l(),fm=a("li"),qee=a("strong"),tXe=o("marian"),aXe=o(" \u2014 "),tk=a("a"),nXe=o("MarianConfig"),sXe=o(" (Marian model)"),lXe=l(),mm=a("li"),Nee=a("strong"),iXe=o("maskformer"),dXe=o(" \u2014 "),ak=a("a"),cXe=o("MaskFormerConfig"),fXe=o(" (MaskFormer model)"),mXe=l(),gm=a("li"),jee=a("strong"),gXe=o("mbart"),hXe=o(" \u2014 "),nk=a("a"),pXe=o("MBartConfig"),uXe=o(" (mBART model)"),_Xe=l(),hm=a("li"),Dee=a("strong"),bXe=o("megatron-bert"),vXe=o(" \u2014 "),sk=a("a"),FXe=o("MegatronBertConfig"),TXe=o(" (MegatronBert model)"),MXe=l(),pm=a("li"),Gee=a("strong"),EXe=o("mobilebert"),CXe=o(" \u2014 "),lk=a("a"),wXe=o("MobileBertConfig"),AXe=o(" (MobileBERT model)"),yXe=l(),um=a("li"),Oee=a("strong"),LXe=o("mpnet"),xXe=o(" \u2014 "),ik=a("a"),$Xe=o("MPNetConfig"),kXe=o(" (MPNet model)"),SXe=l(),_m=a("li"),Vee=a("strong"),RXe=o("mt5"),BXe=o(" \u2014 "),dk=a("a"),PXe=o("MT5Config"),IXe=o(" (mT5 model)"),qXe=l(),bm=a("li"),Xee=a("strong"),NXe=o("nystromformer"),jXe=o(" \u2014 "),ck=a("a"),DXe=o("NystromformerConfig"),GXe=o(" (Nystromformer model)"),OXe=l(),vm=a("li"),zee=a("strong"),VXe=o("openai-gpt"),XXe=o(" \u2014 "),fk=a("a"),zXe=o("OpenAIGPTConfig"),QXe=o(" (OpenAI GPT model)"),WXe=l(),Fm=a("li"),Qee=a("strong"),HXe=o("pegasus"),UXe=o(" \u2014 "),mk=a("a"),JXe=o("PegasusConfig"),YXe=o(" (Pegasus model)"),KXe=l(),Tm=a("li"),Wee=a("strong"),ZXe=o("perceiver"),eze=o(" \u2014 "),gk=a("a"),oze=o("PerceiverConfig"),rze=o(" (Perceiver model)"),tze=l(),Mm=a("li"),Hee=a("strong"),aze=o("plbart"),nze=o(" \u2014 "),hk=a("a"),sze=o("PLBartConfig"),lze=o(" (PLBart model)"),ize=l(),Em=a("li"),Uee=a("strong"),dze=o("poolformer"),cze=o(" \u2014 "),pk=a("a"),fze=o("PoolFormerConfig"),mze=o(" (PoolFormer model)"),gze=l(),Cm=a("li"),Jee=a("strong"),hze=o("prophetnet"),pze=o(" \u2014 "),uk=a("a"),uze=o("ProphetNetConfig"),_ze=o(" (ProphetNet model)"),bze=l(),wm=a("li"),Yee=a("strong"),vze=o("qdqbert"),Fze=o(" \u2014 "),_k=a("a"),Tze=o("QDQBertConfig"),Mze=o(" (QDQBert model)"),Eze=l(),Am=a("li"),Kee=a("strong"),Cze=o("rag"),wze=o(" \u2014 "),bk=a("a"),Aze=o("RagConfig"),yze=o(" (RAG model)"),Lze=l(),ym=a("li"),Zee=a("strong"),xze=o("realm"),$ze=o(" \u2014 "),vk=a("a"),kze=o("RealmConfig"),Sze=o(" (Realm model)"),Rze=l(),Lm=a("li"),eoe=a("strong"),Bze=o("reformer"),Pze=o(" \u2014 "),Fk=a("a"),Ize=o("ReformerConfig"),qze=o(" (Reformer model)"),Nze=l(),xm=a("li"),ooe=a("strong"),jze=o("regnet"),Dze=o(" \u2014 "),Tk=a("a"),Gze=o("RegNetConfig"),Oze=o(" (RegNet model)"),Vze=l(),$m=a("li"),roe=a("strong"),Xze=o("rembert"),zze=o(" \u2014 "),Mk=a("a"),Qze=o("RemBertConfig"),Wze=o(" (RemBERT model)"),Hze=l(),km=a("li"),toe=a("strong"),Uze=o("resnet"),Jze=o(" \u2014 "),Ek=a("a"),Yze=o("ResNetConfig"),Kze=o(" (ResNet model)"),Zze=l(),Sm=a("li"),aoe=a("strong"),eQe=o("retribert"),oQe=o(" \u2014 "),Ck=a("a"),rQe=o("RetriBertConfig"),tQe=o(" (RetriBERT model)"),aQe=l(),Rm=a("li"),noe=a("strong"),nQe=o("roberta"),sQe=o(" \u2014 "),wk=a("a"),lQe=o("RobertaConfig"),iQe=o(" (RoBERTa model)"),dQe=l(),Bm=a("li"),soe=a("strong"),cQe=o("roformer"),fQe=o(" \u2014 "),Ak=a("a"),mQe=o("RoFormerConfig"),gQe=o(" (RoFormer model)"),hQe=l(),Pm=a("li"),loe=a("strong"),pQe=o("segformer"),uQe=o(" \u2014 "),yk=a("a"),_Qe=o("SegformerConfig"),bQe=o(" (SegFormer model)"),vQe=l(),Im=a("li"),ioe=a("strong"),FQe=o("sew"),TQe=o(" \u2014 "),Lk=a("a"),MQe=o("SEWConfig"),EQe=o(" (SEW model)"),CQe=l(),qm=a("li"),doe=a("strong"),wQe=o("sew-d"),AQe=o(" \u2014 "),xk=a("a"),yQe=o("SEWDConfig"),LQe=o(" (SEW-D model)"),xQe=l(),Nm=a("li"),coe=a("strong"),$Qe=o("speech-encoder-decoder"),kQe=o(" \u2014 "),$k=a("a"),SQe=o("SpeechEncoderDecoderConfig"),RQe=o(" (Speech Encoder decoder model)"),BQe=l(),jm=a("li"),foe=a("strong"),PQe=o("speech_to_text"),IQe=o(" \u2014 "),kk=a("a"),qQe=o("Speech2TextConfig"),NQe=o(" (Speech2Text model)"),jQe=l(),Dm=a("li"),moe=a("strong"),DQe=o("speech_to_text_2"),GQe=o(" \u2014 "),Sk=a("a"),OQe=o("Speech2Text2Config"),VQe=o(" (Speech2Text2 model)"),XQe=l(),Gm=a("li"),goe=a("strong"),zQe=o("splinter"),QQe=o(" \u2014 "),Rk=a("a"),WQe=o("SplinterConfig"),HQe=o(" (Splinter model)"),UQe=l(),Om=a("li"),hoe=a("strong"),JQe=o("squeezebert"),YQe=o(" \u2014 "),Bk=a("a"),KQe=o("SqueezeBertConfig"),ZQe=o(" (SqueezeBERT model)"),eWe=l(),Vm=a("li"),poe=a("strong"),oWe=o("swin"),rWe=o(" \u2014 "),Pk=a("a"),tWe=o("SwinConfig"),aWe=o(" (Swin model)"),nWe=l(),Xm=a("li"),uoe=a("strong"),sWe=o("t5"),lWe=o(" \u2014 "),Ik=a("a"),iWe=o("T5Config"),dWe=o(" (T5 model)"),cWe=l(),zm=a("li"),_oe=a("strong"),fWe=o("tapas"),mWe=o(" \u2014 "),qk=a("a"),gWe=o("TapasConfig"),hWe=o(" (TAPAS model)"),pWe=l(),Qm=a("li"),boe=a("strong"),uWe=o("tapex"),_We=o(" \u2014 "),Nk=a("a"),bWe=o("BartConfig"),vWe=o(" (TAPEX model)"),FWe=l(),Wm=a("li"),voe=a("strong"),TWe=o("transfo-xl"),MWe=o(" \u2014 "),jk=a("a"),EWe=o("TransfoXLConfig"),CWe=o(" (Transformer-XL model)"),wWe=l(),Hm=a("li"),Foe=a("strong"),AWe=o("trocr"),yWe=o(" \u2014 "),Dk=a("a"),LWe=o("TrOCRConfig"),xWe=o(" (TrOCR model)"),$We=l(),Um=a("li"),Toe=a("strong"),kWe=o("unispeech"),SWe=o(" \u2014 "),Gk=a("a"),RWe=o("UniSpeechConfig"),BWe=o(" (UniSpeech model)"),PWe=l(),Jm=a("li"),Moe=a("strong"),IWe=o("unispeech-sat"),qWe=o(" \u2014 "),Ok=a("a"),NWe=o("UniSpeechSatConfig"),jWe=o(" (UniSpeechSat model)"),DWe=l(),Ym=a("li"),Eoe=a("strong"),GWe=o("van"),OWe=o(" \u2014 "),Vk=a("a"),VWe=o("VanConfig"),XWe=o(" (VAN model)"),zWe=l(),Km=a("li"),Coe=a("strong"),QWe=o("vilt"),WWe=o(" \u2014 "),Xk=a("a"),HWe=o("ViltConfig"),UWe=o(" (ViLT model)"),JWe=l(),Zm=a("li"),woe=a("strong"),YWe=o("vision-encoder-decoder"),KWe=o(" \u2014 "),zk=a("a"),ZWe=o("VisionEncoderDecoderConfig"),eHe=o(" (Vision Encoder decoder model)"),oHe=l(),eg=a("li"),Aoe=a("strong"),rHe=o("vision-text-dual-encoder"),tHe=o(" \u2014 "),Qk=a("a"),aHe=o("VisionTextDualEncoderConfig"),nHe=o(" (VisionTextDualEncoder model)"),sHe=l(),og=a("li"),yoe=a("strong"),lHe=o("visual_bert"),iHe=o(" \u2014 "),Wk=a("a"),dHe=o("VisualBertConfig"),cHe=o(" (VisualBert model)"),fHe=l(),rg=a("li"),Loe=a("strong"),mHe=o("vit"),gHe=o(" \u2014 "),Hk=a("a"),hHe=o("ViTConfig"),pHe=o(" (ViT model)"),uHe=l(),tg=a("li"),xoe=a("strong"),_He=o("vit_mae"),bHe=o(" \u2014 "),Uk=a("a"),vHe=o("ViTMAEConfig"),FHe=o(" (ViTMAE model)"),THe=l(),ag=a("li"),$oe=a("strong"),MHe=o("wav2vec2"),EHe=o(" \u2014 "),Jk=a("a"),CHe=o("Wav2Vec2Config"),wHe=o(" (Wav2Vec2 model)"),AHe=l(),ng=a("li"),koe=a("strong"),yHe=o("wavlm"),LHe=o(" \u2014 "),Yk=a("a"),xHe=o("WavLMConfig"),$He=o(" (WavLM model)"),kHe=l(),sg=a("li"),Soe=a("strong"),SHe=o("xglm"),RHe=o(" \u2014 "),Kk=a("a"),BHe=o("XGLMConfig"),PHe=o(" (XGLM model)"),IHe=l(),lg=a("li"),Roe=a("strong"),qHe=o("xlm"),NHe=o(" \u2014 "),Zk=a("a"),jHe=o("XLMConfig"),DHe=o(" (XLM model)"),GHe=l(),ig=a("li"),Boe=a("strong"),OHe=o("xlm-prophetnet"),VHe=o(" \u2014 "),eS=a("a"),XHe=o("XLMProphetNetConfig"),zHe=o(" (XLMProphetNet model)"),QHe=l(),dg=a("li"),Poe=a("strong"),WHe=o("xlm-roberta"),HHe=o(" \u2014 "),oS=a("a"),UHe=o("XLMRobertaConfig"),JHe=o(" (XLM-RoBERTa model)"),YHe=l(),cg=a("li"),Ioe=a("strong"),KHe=o("xlm-roberta-xl"),ZHe=o(" \u2014 "),rS=a("a"),eUe=o("XLMRobertaXLConfig"),oUe=o(" (XLM-RoBERTa-XL model)"),rUe=l(),fg=a("li"),qoe=a("strong"),tUe=o("xlnet"),aUe=o(" \u2014 "),tS=a("a"),nUe=o("XLNetConfig"),sUe=o(" (XLNet model)"),lUe=l(),mg=a("li"),Noe=a("strong"),iUe=o("yolos"),dUe=o(" \u2014 "),aS=a("a"),cUe=o("YolosConfig"),fUe=o(" (YOLOS model)"),mUe=l(),gg=a("li"),joe=a("strong"),gUe=o("yoso"),hUe=o(" \u2014 "),nS=a("a"),pUe=o("YosoConfig"),uUe=o(" (YOSO model)"),_Ue=l(),F(hg.$$.fragment),bUe=l(),pg=a("div"),F(HA.$$.fragment),vUe=l(),Doe=a("p"),FUe=o("Register a new configuration for this class."),cPe=l(),_i=a("h2"),ug=a("a"),Goe=a("span"),F(UA.$$.fragment),TUe=l(),Ooe=a("span"),MUe=o("AutoTokenizer"),fPe=l(),wo=a("div"),F(JA.$$.fragment),EUe=l(),YA=a("p"),CUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sS=a("a"),wUe=o("AutoTokenizer.from_pretrained()"),AUe=o(" class method."),yUe=l(),KA=a("p"),LUe=o("This class cannot be instantiated directly using "),Voe=a("code"),xUe=o("__init__()"),$Ue=o(" (throws an error)."),kUe=l(),Cr=a("div"),F(ZA.$$.fragment),SUe=l(),Xoe=a("p"),RUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BUe=l(),Ca=a("p"),PUe=o("The tokenizer class to instantiate is selected based on the "),zoe=a("code"),IUe=o("model_type"),qUe=o(` property of the config object (either
passed as an argument or loaded from `),Qoe=a("code"),NUe=o("pretrained_model_name_or_path"),jUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=a("code"),DUe=o("pretrained_model_name_or_path"),GUe=o(":"),OUe=l(),k=a("ul"),kn=a("li"),Hoe=a("strong"),VUe=o("albert"),XUe=o(" \u2014 "),lS=a("a"),zUe=o("AlbertTokenizer"),QUe=o(" or "),iS=a("a"),WUe=o("AlbertTokenizerFast"),HUe=o(" (ALBERT model)"),UUe=l(),Sn=a("li"),Uoe=a("strong"),JUe=o("bart"),YUe=o(" \u2014 "),dS=a("a"),KUe=o("BartTokenizer"),ZUe=o(" or "),cS=a("a"),eJe=o("BartTokenizerFast"),oJe=o(" (BART model)"),rJe=l(),Rn=a("li"),Joe=a("strong"),tJe=o("barthez"),aJe=o(" \u2014 "),fS=a("a"),nJe=o("BarthezTokenizer"),sJe=o(" or "),mS=a("a"),lJe=o("BarthezTokenizerFast"),iJe=o(" (BARThez model)"),dJe=l(),_g=a("li"),Yoe=a("strong"),cJe=o("bartpho"),fJe=o(" \u2014 "),gS=a("a"),mJe=o("BartphoTokenizer"),gJe=o(" (BARTpho model)"),hJe=l(),Bn=a("li"),Koe=a("strong"),pJe=o("bert"),uJe=o(" \u2014 "),hS=a("a"),_Je=o("BertTokenizer"),bJe=o(" or "),pS=a("a"),vJe=o("BertTokenizerFast"),FJe=o(" (BERT model)"),TJe=l(),bg=a("li"),Zoe=a("strong"),MJe=o("bert-generation"),EJe=o(" \u2014 "),uS=a("a"),CJe=o("BertGenerationTokenizer"),wJe=o(" (Bert Generation model)"),AJe=l(),vg=a("li"),ere=a("strong"),yJe=o("bert-japanese"),LJe=o(" \u2014 "),_S=a("a"),xJe=o("BertJapaneseTokenizer"),$Je=o(" (BertJapanese model)"),kJe=l(),Fg=a("li"),ore=a("strong"),SJe=o("bertweet"),RJe=o(" \u2014 "),bS=a("a"),BJe=o("BertweetTokenizer"),PJe=o(" (Bertweet model)"),IJe=l(),Pn=a("li"),rre=a("strong"),qJe=o("big_bird"),NJe=o(" \u2014 "),vS=a("a"),jJe=o("BigBirdTokenizer"),DJe=o(" or "),FS=a("a"),GJe=o("BigBirdTokenizerFast"),OJe=o(" (BigBird model)"),VJe=l(),In=a("li"),tre=a("strong"),XJe=o("bigbird_pegasus"),zJe=o(" \u2014 "),TS=a("a"),QJe=o("PegasusTokenizer"),WJe=o(" or "),MS=a("a"),HJe=o("PegasusTokenizerFast"),UJe=o(" (BigBirdPegasus model)"),JJe=l(),qn=a("li"),are=a("strong"),YJe=o("blenderbot"),KJe=o(" \u2014 "),ES=a("a"),ZJe=o("BlenderbotTokenizer"),eYe=o(" or "),CS=a("a"),oYe=o("BlenderbotTokenizerFast"),rYe=o(" (Blenderbot model)"),tYe=l(),Tg=a("li"),nre=a("strong"),aYe=o("blenderbot-small"),nYe=o(" \u2014 "),wS=a("a"),sYe=o("BlenderbotSmallTokenizer"),lYe=o(" (BlenderbotSmall model)"),iYe=l(),Mg=a("li"),sre=a("strong"),dYe=o("byt5"),cYe=o(" \u2014 "),AS=a("a"),fYe=o("ByT5Tokenizer"),mYe=o(" (ByT5 model)"),gYe=l(),Nn=a("li"),lre=a("strong"),hYe=o("camembert"),pYe=o(" \u2014 "),yS=a("a"),uYe=o("CamembertTokenizer"),_Ye=o(" or "),LS=a("a"),bYe=o("CamembertTokenizerFast"),vYe=o(" (CamemBERT model)"),FYe=l(),Eg=a("li"),ire=a("strong"),TYe=o("canine"),MYe=o(" \u2014 "),xS=a("a"),EYe=o("CanineTokenizer"),CYe=o(" (Canine model)"),wYe=l(),jn=a("li"),dre=a("strong"),AYe=o("clip"),yYe=o(" \u2014 "),$S=a("a"),LYe=o("CLIPTokenizer"),xYe=o(" or "),kS=a("a"),$Ye=o("CLIPTokenizerFast"),kYe=o(" (CLIP model)"),SYe=l(),Dn=a("li"),cre=a("strong"),RYe=o("convbert"),BYe=o(" \u2014 "),SS=a("a"),PYe=o("ConvBertTokenizer"),IYe=o(" or "),RS=a("a"),qYe=o("ConvBertTokenizerFast"),NYe=o(" (ConvBERT model)"),jYe=l(),Gn=a("li"),fre=a("strong"),DYe=o("cpm"),GYe=o(" \u2014 "),BS=a("a"),OYe=o("CpmTokenizer"),VYe=o(" or "),PS=a("a"),XYe=o("CpmTokenizerFast"),zYe=o(" (CPM model)"),QYe=l(),Cg=a("li"),mre=a("strong"),WYe=o("ctrl"),HYe=o(" \u2014 "),IS=a("a"),UYe=o("CTRLTokenizer"),JYe=o(" (CTRL model)"),YYe=l(),On=a("li"),gre=a("strong"),KYe=o("data2vec-text"),ZYe=o(" \u2014 "),qS=a("a"),eKe=o("RobertaTokenizer"),oKe=o(" or "),NS=a("a"),rKe=o("RobertaTokenizerFast"),tKe=o(" (Data2VecText model)"),aKe=l(),Vn=a("li"),hre=a("strong"),nKe=o("deberta"),sKe=o(" \u2014 "),jS=a("a"),lKe=o("DebertaTokenizer"),iKe=o(" or "),DS=a("a"),dKe=o("DebertaTokenizerFast"),cKe=o(" (DeBERTa model)"),fKe=l(),Xn=a("li"),pre=a("strong"),mKe=o("deberta-v2"),gKe=o(" \u2014 "),GS=a("a"),hKe=o("DebertaV2Tokenizer"),pKe=o(" or "),OS=a("a"),uKe=o("DebertaV2TokenizerFast"),_Ke=o(" (DeBERTa-v2 model)"),bKe=l(),zn=a("li"),ure=a("strong"),vKe=o("distilbert"),FKe=o(" \u2014 "),VS=a("a"),TKe=o("DistilBertTokenizer"),MKe=o(" or "),XS=a("a"),EKe=o("DistilBertTokenizerFast"),CKe=o(" (DistilBERT model)"),wKe=l(),Qn=a("li"),_re=a("strong"),AKe=o("dpr"),yKe=o(" \u2014 "),zS=a("a"),LKe=o("DPRQuestionEncoderTokenizer"),xKe=o(" or "),QS=a("a"),$Ke=o("DPRQuestionEncoderTokenizerFast"),kKe=o(" (DPR model)"),SKe=l(),Wn=a("li"),bre=a("strong"),RKe=o("electra"),BKe=o(" \u2014 "),WS=a("a"),PKe=o("ElectraTokenizer"),IKe=o(" or "),HS=a("a"),qKe=o("ElectraTokenizerFast"),NKe=o(" (ELECTRA model)"),jKe=l(),wg=a("li"),vre=a("strong"),DKe=o("flaubert"),GKe=o(" \u2014 "),US=a("a"),OKe=o("FlaubertTokenizer"),VKe=o(" (FlauBERT model)"),XKe=l(),Hn=a("li"),Fre=a("strong"),zKe=o("fnet"),QKe=o(" \u2014 "),JS=a("a"),WKe=o("FNetTokenizer"),HKe=o(" or "),YS=a("a"),UKe=o("FNetTokenizerFast"),JKe=o(" (FNet model)"),YKe=l(),Ag=a("li"),Tre=a("strong"),KKe=o("fsmt"),ZKe=o(" \u2014 "),KS=a("a"),eZe=o("FSMTTokenizer"),oZe=o(" (FairSeq Machine-Translation model)"),rZe=l(),Un=a("li"),Mre=a("strong"),tZe=o("funnel"),aZe=o(" \u2014 "),ZS=a("a"),nZe=o("FunnelTokenizer"),sZe=o(" or "),eR=a("a"),lZe=o("FunnelTokenizerFast"),iZe=o(" (Funnel Transformer model)"),dZe=l(),Jn=a("li"),Ere=a("strong"),cZe=o("gpt2"),fZe=o(" \u2014 "),oR=a("a"),mZe=o("GPT2Tokenizer"),gZe=o(" or "),rR=a("a"),hZe=o("GPT2TokenizerFast"),pZe=o(" (OpenAI GPT-2 model)"),uZe=l(),Yn=a("li"),Cre=a("strong"),_Ze=o("gpt_neo"),bZe=o(" \u2014 "),tR=a("a"),vZe=o("GPT2Tokenizer"),FZe=o(" or "),aR=a("a"),TZe=o("GPT2TokenizerFast"),MZe=o(" (GPT Neo model)"),EZe=l(),Kn=a("li"),wre=a("strong"),CZe=o("gptj"),wZe=o(" \u2014 "),nR=a("a"),AZe=o("GPT2Tokenizer"),yZe=o(" or "),sR=a("a"),LZe=o("GPT2TokenizerFast"),xZe=o(" (GPT-J model)"),$Ze=l(),Zn=a("li"),Are=a("strong"),kZe=o("herbert"),SZe=o(" \u2014 "),lR=a("a"),RZe=o("HerbertTokenizer"),BZe=o(" or "),iR=a("a"),PZe=o("HerbertTokenizerFast"),IZe=o(" (HerBERT model)"),qZe=l(),yg=a("li"),yre=a("strong"),NZe=o("hubert"),jZe=o(" \u2014 "),dR=a("a"),DZe=o("Wav2Vec2CTCTokenizer"),GZe=o(" (Hubert model)"),OZe=l(),es=a("li"),Lre=a("strong"),VZe=o("ibert"),XZe=o(" \u2014 "),cR=a("a"),zZe=o("RobertaTokenizer"),QZe=o(" or "),fR=a("a"),WZe=o("RobertaTokenizerFast"),HZe=o(" (I-BERT model)"),UZe=l(),os=a("li"),xre=a("strong"),JZe=o("layoutlm"),YZe=o(" \u2014 "),mR=a("a"),KZe=o("LayoutLMTokenizer"),ZZe=o(" or "),gR=a("a"),eeo=o("LayoutLMTokenizerFast"),oeo=o(" (LayoutLM model)"),reo=l(),rs=a("li"),$re=a("strong"),teo=o("layoutlmv2"),aeo=o(" \u2014 "),hR=a("a"),neo=o("LayoutLMv2Tokenizer"),seo=o(" or "),pR=a("a"),leo=o("LayoutLMv2TokenizerFast"),ieo=o(" (LayoutLMv2 model)"),deo=l(),ts=a("li"),kre=a("strong"),ceo=o("layoutxlm"),feo=o(" \u2014 "),uR=a("a"),meo=o("LayoutXLMTokenizer"),geo=o(" or "),_R=a("a"),heo=o("LayoutXLMTokenizerFast"),peo=o(" (LayoutXLM model)"),ueo=l(),as=a("li"),Sre=a("strong"),_eo=o("led"),beo=o(" \u2014 "),bR=a("a"),veo=o("LEDTokenizer"),Feo=o(" or "),vR=a("a"),Teo=o("LEDTokenizerFast"),Meo=o(" (LED model)"),Eeo=l(),ns=a("li"),Rre=a("strong"),Ceo=o("longformer"),weo=o(" \u2014 "),FR=a("a"),Aeo=o("LongformerTokenizer"),yeo=o(" or "),TR=a("a"),Leo=o("LongformerTokenizerFast"),xeo=o(" (Longformer model)"),$eo=l(),Lg=a("li"),Bre=a("strong"),keo=o("luke"),Seo=o(" \u2014 "),MR=a("a"),Reo=o("LukeTokenizer"),Beo=o(" (LUKE model)"),Peo=l(),ss=a("li"),Pre=a("strong"),Ieo=o("lxmert"),qeo=o(" \u2014 "),ER=a("a"),Neo=o("LxmertTokenizer"),jeo=o(" or "),CR=a("a"),Deo=o("LxmertTokenizerFast"),Geo=o(" (LXMERT model)"),Oeo=l(),xg=a("li"),Ire=a("strong"),Veo=o("m2m_100"),Xeo=o(" \u2014 "),wR=a("a"),zeo=o("M2M100Tokenizer"),Qeo=o(" (M2M100 model)"),Weo=l(),$g=a("li"),qre=a("strong"),Heo=o("marian"),Ueo=o(" \u2014 "),AR=a("a"),Jeo=o("MarianTokenizer"),Yeo=o(" (Marian model)"),Keo=l(),ls=a("li"),Nre=a("strong"),Zeo=o("mbart"),eoo=o(" \u2014 "),yR=a("a"),ooo=o("MBartTokenizer"),roo=o(" or "),LR=a("a"),too=o("MBartTokenizerFast"),aoo=o(" (mBART model)"),noo=l(),is=a("li"),jre=a("strong"),soo=o("mbart50"),loo=o(" \u2014 "),xR=a("a"),ioo=o("MBart50Tokenizer"),doo=o(" or "),$R=a("a"),coo=o("MBart50TokenizerFast"),foo=o(" (mBART-50 model)"),moo=l(),ds=a("li"),Dre=a("strong"),goo=o("megatron-bert"),hoo=o(" \u2014 "),kR=a("a"),poo=o("BertTokenizer"),uoo=o(" or "),SR=a("a"),_oo=o("BertTokenizerFast"),boo=o(" (MegatronBert model)"),voo=l(),kg=a("li"),Gre=a("strong"),Foo=o("mluke"),Too=o(" \u2014 "),RR=a("a"),Moo=o("MLukeTokenizer"),Eoo=o(" (mLUKE model)"),Coo=l(),cs=a("li"),Ore=a("strong"),woo=o("mobilebert"),Aoo=o(" \u2014 "),BR=a("a"),yoo=o("MobileBertTokenizer"),Loo=o(" or "),PR=a("a"),xoo=o("MobileBertTokenizerFast"),$oo=o(" (MobileBERT model)"),koo=l(),fs=a("li"),Vre=a("strong"),Soo=o("mpnet"),Roo=o(" \u2014 "),IR=a("a"),Boo=o("MPNetTokenizer"),Poo=o(" or "),qR=a("a"),Ioo=o("MPNetTokenizerFast"),qoo=o(" (MPNet model)"),Noo=l(),ms=a("li"),Xre=a("strong"),joo=o("mt5"),Doo=o(" \u2014 "),NR=a("a"),Goo=o("MT5Tokenizer"),Ooo=o(" or "),jR=a("a"),Voo=o("MT5TokenizerFast"),Xoo=o(" (mT5 model)"),zoo=l(),gs=a("li"),zre=a("strong"),Qoo=o("nystromformer"),Woo=o(" \u2014 "),DR=a("a"),Hoo=o("AlbertTokenizer"),Uoo=o(" or "),GR=a("a"),Joo=o("AlbertTokenizerFast"),Yoo=o(" (Nystromformer model)"),Koo=l(),hs=a("li"),Qre=a("strong"),Zoo=o("openai-gpt"),ero=o(" \u2014 "),OR=a("a"),oro=o("OpenAIGPTTokenizer"),rro=o(" or "),VR=a("a"),tro=o("OpenAIGPTTokenizerFast"),aro=o(" (OpenAI GPT model)"),nro=l(),ps=a("li"),Wre=a("strong"),sro=o("pegasus"),lro=o(" \u2014 "),XR=a("a"),iro=o("PegasusTokenizer"),dro=o(" or "),zR=a("a"),cro=o("PegasusTokenizerFast"),fro=o(" (Pegasus model)"),mro=l(),Sg=a("li"),Hre=a("strong"),gro=o("perceiver"),hro=o(" \u2014 "),QR=a("a"),pro=o("PerceiverTokenizer"),uro=o(" (Perceiver model)"),_ro=l(),Rg=a("li"),Ure=a("strong"),bro=o("phobert"),vro=o(" \u2014 "),WR=a("a"),Fro=o("PhobertTokenizer"),Tro=o(" (PhoBERT model)"),Mro=l(),Bg=a("li"),Jre=a("strong"),Ero=o("plbart"),Cro=o(" \u2014 "),HR=a("a"),wro=o("PLBartTokenizer"),Aro=o(" (PLBart model)"),yro=l(),Pg=a("li"),Yre=a("strong"),Lro=o("prophetnet"),xro=o(" \u2014 "),UR=a("a"),$ro=o("ProphetNetTokenizer"),kro=o(" (ProphetNet model)"),Sro=l(),us=a("li"),Kre=a("strong"),Rro=o("qdqbert"),Bro=o(" \u2014 "),JR=a("a"),Pro=o("BertTokenizer"),Iro=o(" or "),YR=a("a"),qro=o("BertTokenizerFast"),Nro=o(" (QDQBert model)"),jro=l(),Ig=a("li"),Zre=a("strong"),Dro=o("rag"),Gro=o(" \u2014 "),KR=a("a"),Oro=o("RagTokenizer"),Vro=o(" (RAG model)"),Xro=l(),_s=a("li"),ete=a("strong"),zro=o("realm"),Qro=o(" \u2014 "),ZR=a("a"),Wro=o("RealmTokenizer"),Hro=o(" or "),eB=a("a"),Uro=o("RealmTokenizerFast"),Jro=o(" (Realm model)"),Yro=l(),bs=a("li"),ote=a("strong"),Kro=o("reformer"),Zro=o(" \u2014 "),oB=a("a"),eto=o("ReformerTokenizer"),oto=o(" or "),rB=a("a"),rto=o("ReformerTokenizerFast"),tto=o(" (Reformer model)"),ato=l(),vs=a("li"),rte=a("strong"),nto=o("rembert"),sto=o(" \u2014 "),tB=a("a"),lto=o("RemBertTokenizer"),ito=o(" or "),aB=a("a"),dto=o("RemBertTokenizerFast"),cto=o(" (RemBERT model)"),fto=l(),Fs=a("li"),tte=a("strong"),mto=o("retribert"),gto=o(" \u2014 "),nB=a("a"),hto=o("RetriBertTokenizer"),pto=o(" or "),sB=a("a"),uto=o("RetriBertTokenizerFast"),_to=o(" (RetriBERT model)"),bto=l(),Ts=a("li"),ate=a("strong"),vto=o("roberta"),Fto=o(" \u2014 "),lB=a("a"),Tto=o("RobertaTokenizer"),Mto=o(" or "),iB=a("a"),Eto=o("RobertaTokenizerFast"),Cto=o(" (RoBERTa model)"),wto=l(),Ms=a("li"),nte=a("strong"),Ato=o("roformer"),yto=o(" \u2014 "),dB=a("a"),Lto=o("RoFormerTokenizer"),xto=o(" or "),cB=a("a"),$to=o("RoFormerTokenizerFast"),kto=o(" (RoFormer model)"),Sto=l(),qg=a("li"),ste=a("strong"),Rto=o("speech_to_text"),Bto=o(" \u2014 "),fB=a("a"),Pto=o("Speech2TextTokenizer"),Ito=o(" (Speech2Text model)"),qto=l(),Ng=a("li"),lte=a("strong"),Nto=o("speech_to_text_2"),jto=o(" \u2014 "),mB=a("a"),Dto=o("Speech2Text2Tokenizer"),Gto=o(" (Speech2Text2 model)"),Oto=l(),Es=a("li"),ite=a("strong"),Vto=o("splinter"),Xto=o(" \u2014 "),gB=a("a"),zto=o("SplinterTokenizer"),Qto=o(" or "),hB=a("a"),Wto=o("SplinterTokenizerFast"),Hto=o(" (Splinter model)"),Uto=l(),Cs=a("li"),dte=a("strong"),Jto=o("squeezebert"),Yto=o(" \u2014 "),pB=a("a"),Kto=o("SqueezeBertTokenizer"),Zto=o(" or "),uB=a("a"),eao=o("SqueezeBertTokenizerFast"),oao=o(" (SqueezeBERT model)"),rao=l(),ws=a("li"),cte=a("strong"),tao=o("t5"),aao=o(" \u2014 "),_B=a("a"),nao=o("T5Tokenizer"),sao=o(" or "),bB=a("a"),lao=o("T5TokenizerFast"),iao=o(" (T5 model)"),dao=l(),jg=a("li"),fte=a("strong"),cao=o("tapas"),fao=o(" \u2014 "),vB=a("a"),mao=o("TapasTokenizer"),gao=o(" (TAPAS model)"),hao=l(),Dg=a("li"),mte=a("strong"),pao=o("tapex"),uao=o(" \u2014 "),FB=a("a"),_ao=o("TapexTokenizer"),bao=o(" (TAPEX model)"),vao=l(),Gg=a("li"),gte=a("strong"),Fao=o("transfo-xl"),Tao=o(" \u2014 "),TB=a("a"),Mao=o("TransfoXLTokenizer"),Eao=o(" (Transformer-XL model)"),Cao=l(),As=a("li"),hte=a("strong"),wao=o("visual_bert"),Aao=o(" \u2014 "),MB=a("a"),yao=o("BertTokenizer"),Lao=o(" or "),EB=a("a"),xao=o("BertTokenizerFast"),$ao=o(" (VisualBert model)"),kao=l(),Og=a("li"),pte=a("strong"),Sao=o("wav2vec2"),Rao=o(" \u2014 "),CB=a("a"),Bao=o("Wav2Vec2CTCTokenizer"),Pao=o(" (Wav2Vec2 model)"),Iao=l(),Vg=a("li"),ute=a("strong"),qao=o("wav2vec2_phoneme"),Nao=o(" \u2014 "),wB=a("a"),jao=o("Wav2Vec2PhonemeCTCTokenizer"),Dao=o(" (Wav2Vec2Phoneme model)"),Gao=l(),ys=a("li"),_te=a("strong"),Oao=o("xglm"),Vao=o(" \u2014 "),AB=a("a"),Xao=o("XGLMTokenizer"),zao=o(" or "),yB=a("a"),Qao=o("XGLMTokenizerFast"),Wao=o(" (XGLM model)"),Hao=l(),Xg=a("li"),bte=a("strong"),Uao=o("xlm"),Jao=o(" \u2014 "),LB=a("a"),Yao=o("XLMTokenizer"),Kao=o(" (XLM model)"),Zao=l(),zg=a("li"),vte=a("strong"),eno=o("xlm-prophetnet"),ono=o(" \u2014 "),xB=a("a"),rno=o("XLMProphetNetTokenizer"),tno=o(" (XLMProphetNet model)"),ano=l(),Ls=a("li"),Fte=a("strong"),nno=o("xlm-roberta"),sno=o(" \u2014 "),$B=a("a"),lno=o("XLMRobertaTokenizer"),ino=o(" or "),kB=a("a"),dno=o("XLMRobertaTokenizerFast"),cno=o(" (XLM-RoBERTa model)"),fno=l(),xs=a("li"),Tte=a("strong"),mno=o("xlm-roberta-xl"),gno=o(" \u2014 "),SB=a("a"),hno=o("RobertaTokenizer"),pno=o(" or "),RB=a("a"),uno=o("RobertaTokenizerFast"),_no=o(" (XLM-RoBERTa-XL model)"),bno=l(),$s=a("li"),Mte=a("strong"),vno=o("xlnet"),Fno=o(" \u2014 "),BB=a("a"),Tno=o("XLNetTokenizer"),Mno=o(" or "),PB=a("a"),Eno=o("XLNetTokenizerFast"),Cno=o(" (XLNet model)"),wno=l(),ks=a("li"),Ete=a("strong"),Ano=o("yoso"),yno=o(" \u2014 "),IB=a("a"),Lno=o("AlbertTokenizer"),xno=o(" or "),qB=a("a"),$no=o("AlbertTokenizerFast"),kno=o(" (YOSO model)"),Sno=l(),F(Qg.$$.fragment),Rno=l(),Wg=a("div"),F(e0.$$.fragment),Bno=l(),Cte=a("p"),Pno=o("Register a new tokenizer in this mapping."),mPe=l(),bi=a("h2"),Hg=a("a"),wte=a("span"),F(o0.$$.fragment),Ino=l(),Ate=a("span"),qno=o("AutoFeatureExtractor"),gPe=l(),Ao=a("div"),F(r0.$$.fragment),Nno=l(),t0=a("p"),jno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=a("a"),Dno=o("AutoFeatureExtractor.from_pretrained()"),Gno=o(" class method."),Ono=l(),a0=a("p"),Vno=o("This class cannot be instantiated directly using "),yte=a("code"),Xno=o("__init__()"),zno=o(" (throws an error)."),Qno=l(),Qe=a("div"),F(n0.$$.fragment),Wno=l(),Lte=a("p"),Hno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uno=l(),wa=a("p"),Jno=o("The feature extractor class to instantiate is selected based on the "),xte=a("code"),Yno=o("model_type"),Kno=o(` property of the config object
(either passed as an argument or loaded from `),$te=a("code"),Zno=o("pretrained_model_name_or_path"),eso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kte=a("code"),oso=o("pretrained_model_name_or_path"),rso=o(":"),tso=l(),te=a("ul"),Ug=a("li"),Ste=a("strong"),aso=o("beit"),nso=o(" \u2014 "),jB=a("a"),sso=o("BeitFeatureExtractor"),lso=o(" (BEiT model)"),iso=l(),Jg=a("li"),Rte=a("strong"),dso=o("clip"),cso=o(" \u2014 "),DB=a("a"),fso=o("CLIPFeatureExtractor"),mso=o(" (CLIP model)"),gso=l(),Yg=a("li"),Bte=a("strong"),hso=o("convnext"),pso=o(" \u2014 "),GB=a("a"),uso=o("ConvNextFeatureExtractor"),_so=o(" (ConvNext model)"),bso=l(),Kg=a("li"),Pte=a("strong"),vso=o("data2vec-audio"),Fso=o(" \u2014 "),OB=a("a"),Tso=o("Wav2Vec2FeatureExtractor"),Mso=o(" (Data2VecAudio model)"),Eso=l(),Zg=a("li"),Ite=a("strong"),Cso=o("data2vec-vision"),wso=o(" \u2014 "),VB=a("a"),Aso=o("BeitFeatureExtractor"),yso=o(" (Data2VecVision model)"),Lso=l(),eh=a("li"),qte=a("strong"),xso=o("deit"),$so=o(" \u2014 "),XB=a("a"),kso=o("DeiTFeatureExtractor"),Sso=o(" (DeiT model)"),Rso=l(),oh=a("li"),Nte=a("strong"),Bso=o("detr"),Pso=o(" \u2014 "),zB=a("a"),Iso=o("DetrFeatureExtractor"),qso=o(" (DETR model)"),Nso=l(),rh=a("li"),jte=a("strong"),jso=o("dpt"),Dso=o(" \u2014 "),QB=a("a"),Gso=o("DPTFeatureExtractor"),Oso=o(" (DPT model)"),Vso=l(),th=a("li"),Dte=a("strong"),Xso=o("glpn"),zso=o(" \u2014 "),WB=a("a"),Qso=o("GLPNFeatureExtractor"),Wso=o(" (GLPN model)"),Hso=l(),ah=a("li"),Gte=a("strong"),Uso=o("hubert"),Jso=o(" \u2014 "),HB=a("a"),Yso=o("Wav2Vec2FeatureExtractor"),Kso=o(" (Hubert model)"),Zso=l(),nh=a("li"),Ote=a("strong"),elo=o("layoutlmv2"),olo=o(" \u2014 "),UB=a("a"),rlo=o("LayoutLMv2FeatureExtractor"),tlo=o(" (LayoutLMv2 model)"),alo=l(),sh=a("li"),Vte=a("strong"),nlo=o("maskformer"),slo=o(" \u2014 "),JB=a("a"),llo=o("MaskFormerFeatureExtractor"),ilo=o(" (MaskFormer model)"),dlo=l(),lh=a("li"),Xte=a("strong"),clo=o("perceiver"),flo=o(" \u2014 "),YB=a("a"),mlo=o("PerceiverFeatureExtractor"),glo=o(" (Perceiver model)"),hlo=l(),ih=a("li"),zte=a("strong"),plo=o("poolformer"),ulo=o(" \u2014 "),KB=a("a"),_lo=o("PoolFormerFeatureExtractor"),blo=o(" (PoolFormer model)"),vlo=l(),dh=a("li"),Qte=a("strong"),Flo=o("regnet"),Tlo=o(" \u2014 "),ZB=a("a"),Mlo=o("ConvNextFeatureExtractor"),Elo=o(" (RegNet model)"),Clo=l(),ch=a("li"),Wte=a("strong"),wlo=o("resnet"),Alo=o(" \u2014 "),eP=a("a"),ylo=o("ConvNextFeatureExtractor"),Llo=o(" (ResNet model)"),xlo=l(),fh=a("li"),Hte=a("strong"),$lo=o("segformer"),klo=o(" \u2014 "),oP=a("a"),Slo=o("SegformerFeatureExtractor"),Rlo=o(" (SegFormer model)"),Blo=l(),mh=a("li"),Ute=a("strong"),Plo=o("speech_to_text"),Ilo=o(" \u2014 "),rP=a("a"),qlo=o("Speech2TextFeatureExtractor"),Nlo=o(" (Speech2Text model)"),jlo=l(),gh=a("li"),Jte=a("strong"),Dlo=o("swin"),Glo=o(" \u2014 "),tP=a("a"),Olo=o("ViTFeatureExtractor"),Vlo=o(" (Swin model)"),Xlo=l(),hh=a("li"),Yte=a("strong"),zlo=o("van"),Qlo=o(" \u2014 "),aP=a("a"),Wlo=o("ConvNextFeatureExtractor"),Hlo=o(" (VAN model)"),Ulo=l(),ph=a("li"),Kte=a("strong"),Jlo=o("vit"),Ylo=o(" \u2014 "),nP=a("a"),Klo=o("ViTFeatureExtractor"),Zlo=o(" (ViT model)"),eio=l(),uh=a("li"),Zte=a("strong"),oio=o("vit_mae"),rio=o(" \u2014 "),sP=a("a"),tio=o("ViTFeatureExtractor"),aio=o(" (ViTMAE model)"),nio=l(),_h=a("li"),eae=a("strong"),sio=o("wav2vec2"),lio=o(" \u2014 "),lP=a("a"),iio=o("Wav2Vec2FeatureExtractor"),dio=o(" (Wav2Vec2 model)"),cio=l(),bh=a("li"),oae=a("strong"),fio=o("yolos"),mio=o(" \u2014 "),iP=a("a"),gio=o("YolosFeatureExtractor"),hio=o(" (YOLOS model)"),pio=l(),F(vh.$$.fragment),uio=l(),F(Fh.$$.fragment),_io=l(),Th=a("div"),F(s0.$$.fragment),bio=l(),rae=a("p"),vio=o("Register a new feature extractor for this class."),hPe=l(),vi=a("h2"),Mh=a("a"),tae=a("span"),F(l0.$$.fragment),Fio=l(),aae=a("span"),Tio=o("AutoProcessor"),pPe=l(),yo=a("div"),F(i0.$$.fragment),Mio=l(),d0=a("p"),Eio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dP=a("a"),Cio=o("AutoProcessor.from_pretrained()"),wio=o(" class method."),Aio=l(),c0=a("p"),yio=o("This class cannot be instantiated directly using "),nae=a("code"),Lio=o("__init__()"),xio=o(" (throws an error)."),$io=l(),We=a("div"),F(f0.$$.fragment),kio=l(),sae=a("p"),Sio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Rio=l(),Fi=a("p"),Bio=o("The processor class to instantiate is selected based on the "),lae=a("code"),Pio=o("model_type"),Iio=o(` property of the config object (either
passed as an argument or loaded from `),iae=a("code"),qio=o("pretrained_model_name_or_path"),Nio=o(" if possible):"),jio=l(),be=a("ul"),Eh=a("li"),dae=a("strong"),Dio=o("clip"),Gio=o(" \u2014 "),cP=a("a"),Oio=o("CLIPProcessor"),Vio=o(" (CLIP model)"),Xio=l(),Ch=a("li"),cae=a("strong"),zio=o("layoutlmv2"),Qio=o(" \u2014 "),fP=a("a"),Wio=o("LayoutLMv2Processor"),Hio=o(" (LayoutLMv2 model)"),Uio=l(),wh=a("li"),fae=a("strong"),Jio=o("layoutxlm"),Yio=o(" \u2014 "),mP=a("a"),Kio=o("LayoutXLMProcessor"),Zio=o(" (LayoutXLM model)"),edo=l(),Ah=a("li"),mae=a("strong"),odo=o("sew"),rdo=o(" \u2014 "),gP=a("a"),tdo=o("Wav2Vec2Processor"),ado=o(" (SEW model)"),ndo=l(),yh=a("li"),gae=a("strong"),sdo=o("sew-d"),ldo=o(" \u2014 "),hP=a("a"),ido=o("Wav2Vec2Processor"),ddo=o(" (SEW-D model)"),cdo=l(),Lh=a("li"),hae=a("strong"),fdo=o("speech_to_text"),mdo=o(" \u2014 "),pP=a("a"),gdo=o("Speech2TextProcessor"),hdo=o(" (Speech2Text model)"),pdo=l(),xh=a("li"),pae=a("strong"),udo=o("speech_to_text_2"),_do=o(" \u2014 "),uP=a("a"),bdo=o("Speech2Text2Processor"),vdo=o(" (Speech2Text2 model)"),Fdo=l(),$h=a("li"),uae=a("strong"),Tdo=o("trocr"),Mdo=o(" \u2014 "),_P=a("a"),Edo=o("TrOCRProcessor"),Cdo=o(" (TrOCR model)"),wdo=l(),kh=a("li"),_ae=a("strong"),Ado=o("unispeech"),ydo=o(" \u2014 "),bP=a("a"),Ldo=o("Wav2Vec2Processor"),xdo=o(" (UniSpeech model)"),$do=l(),Sh=a("li"),bae=a("strong"),kdo=o("unispeech-sat"),Sdo=o(" \u2014 "),vP=a("a"),Rdo=o("Wav2Vec2Processor"),Bdo=o(" (UniSpeechSat model)"),Pdo=l(),Rh=a("li"),vae=a("strong"),Ido=o("vilt"),qdo=o(" \u2014 "),FP=a("a"),Ndo=o("ViltProcessor"),jdo=o(" (ViLT model)"),Ddo=l(),Bh=a("li"),Fae=a("strong"),Gdo=o("vision-text-dual-encoder"),Odo=o(" \u2014 "),TP=a("a"),Vdo=o("VisionTextDualEncoderProcessor"),Xdo=o(" (VisionTextDualEncoder model)"),zdo=l(),Ph=a("li"),Tae=a("strong"),Qdo=o("wav2vec2"),Wdo=o(" \u2014 "),MP=a("a"),Hdo=o("Wav2Vec2Processor"),Udo=o(" (Wav2Vec2 model)"),Jdo=l(),Ih=a("li"),Mae=a("strong"),Ydo=o("wavlm"),Kdo=o(" \u2014 "),EP=a("a"),Zdo=o("Wav2Vec2Processor"),eco=o(" (WavLM model)"),oco=l(),F(qh.$$.fragment),rco=l(),F(Nh.$$.fragment),tco=l(),jh=a("div"),F(m0.$$.fragment),aco=l(),Eae=a("p"),nco=o("Register a new processor for this class."),uPe=l(),Ti=a("h2"),Dh=a("a"),Cae=a("span"),F(g0.$$.fragment),sco=l(),wae=a("span"),lco=o("AutoModel"),_Pe=l(),Lo=a("div"),F(h0.$$.fragment),ico=l(),Mi=a("p"),dco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CP=a("a"),cco=o("from_pretrained()"),fco=o(" class method or the "),wP=a("a"),mco=o("from_config()"),gco=o(` class
method.`),hco=l(),p0=a("p"),pco=o("This class cannot be instantiated directly using "),Aae=a("code"),uco=o("__init__()"),_co=o(" (throws an error)."),bco=l(),ot=a("div"),F(u0.$$.fragment),vco=l(),yae=a("p"),Fco=o("Instantiates one of the base model classes of the library from a configuration."),Tco=l(),Ei=a("p"),Mco=o(`Note:
Loading a model from its configuration file does `),Lae=a("strong"),Eco=o("not"),Cco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AP=a("a"),wco=o("from_pretrained()"),Aco=o(" to load the model weights."),yco=l(),F(Gh.$$.fragment),Lco=l(),He=a("div"),F(_0.$$.fragment),xco=l(),xae=a("p"),$co=o("Instantiate one of the base model classes of the library from a pretrained model."),kco=l(),Aa=a("p"),Sco=o("The model class to instantiate is selected based on the "),$ae=a("code"),Rco=o("model_type"),Bco=o(` property of the config object (either
passed as an argument or loaded from `),kae=a("code"),Pco=o("pretrained_model_name_or_path"),Ico=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=a("code"),qco=o("pretrained_model_name_or_path"),Nco=o(":"),jco=l(),x=a("ul"),Oh=a("li"),Rae=a("strong"),Dco=o("albert"),Gco=o(" \u2014 "),yP=a("a"),Oco=o("AlbertModel"),Vco=o(" (ALBERT model)"),Xco=l(),Vh=a("li"),Bae=a("strong"),zco=o("bart"),Qco=o(" \u2014 "),LP=a("a"),Wco=o("BartModel"),Hco=o(" (BART model)"),Uco=l(),Xh=a("li"),Pae=a("strong"),Jco=o("beit"),Yco=o(" \u2014 "),xP=a("a"),Kco=o("BeitModel"),Zco=o(" (BEiT model)"),efo=l(),zh=a("li"),Iae=a("strong"),ofo=o("bert"),rfo=o(" \u2014 "),$P=a("a"),tfo=o("BertModel"),afo=o(" (BERT model)"),nfo=l(),Qh=a("li"),qae=a("strong"),sfo=o("bert-generation"),lfo=o(" \u2014 "),kP=a("a"),ifo=o("BertGenerationEncoder"),dfo=o(" (Bert Generation model)"),cfo=l(),Wh=a("li"),Nae=a("strong"),ffo=o("big_bird"),mfo=o(" \u2014 "),SP=a("a"),gfo=o("BigBirdModel"),hfo=o(" (BigBird model)"),pfo=l(),Hh=a("li"),jae=a("strong"),ufo=o("bigbird_pegasus"),_fo=o(" \u2014 "),RP=a("a"),bfo=o("BigBirdPegasusModel"),vfo=o(" (BigBirdPegasus model)"),Ffo=l(),Uh=a("li"),Dae=a("strong"),Tfo=o("blenderbot"),Mfo=o(" \u2014 "),BP=a("a"),Efo=o("BlenderbotModel"),Cfo=o(" (Blenderbot model)"),wfo=l(),Jh=a("li"),Gae=a("strong"),Afo=o("blenderbot-small"),yfo=o(" \u2014 "),PP=a("a"),Lfo=o("BlenderbotSmallModel"),xfo=o(" (BlenderbotSmall model)"),$fo=l(),Yh=a("li"),Oae=a("strong"),kfo=o("camembert"),Sfo=o(" \u2014 "),IP=a("a"),Rfo=o("CamembertModel"),Bfo=o(" (CamemBERT model)"),Pfo=l(),Kh=a("li"),Vae=a("strong"),Ifo=o("canine"),qfo=o(" \u2014 "),qP=a("a"),Nfo=o("CanineModel"),jfo=o(" (Canine model)"),Dfo=l(),Zh=a("li"),Xae=a("strong"),Gfo=o("clip"),Ofo=o(" \u2014 "),NP=a("a"),Vfo=o("CLIPModel"),Xfo=o(" (CLIP model)"),zfo=l(),ep=a("li"),zae=a("strong"),Qfo=o("convbert"),Wfo=o(" \u2014 "),jP=a("a"),Hfo=o("ConvBertModel"),Ufo=o(" (ConvBERT model)"),Jfo=l(),op=a("li"),Qae=a("strong"),Yfo=o("convnext"),Kfo=o(" \u2014 "),DP=a("a"),Zfo=o("ConvNextModel"),emo=o(" (ConvNext model)"),omo=l(),rp=a("li"),Wae=a("strong"),rmo=o("ctrl"),tmo=o(" \u2014 "),GP=a("a"),amo=o("CTRLModel"),nmo=o(" (CTRL model)"),smo=l(),tp=a("li"),Hae=a("strong"),lmo=o("data2vec-audio"),imo=o(" \u2014 "),OP=a("a"),dmo=o("Data2VecAudioModel"),cmo=o(" (Data2VecAudio model)"),fmo=l(),ap=a("li"),Uae=a("strong"),mmo=o("data2vec-text"),gmo=o(" \u2014 "),VP=a("a"),hmo=o("Data2VecTextModel"),pmo=o(" (Data2VecText model)"),umo=l(),np=a("li"),Jae=a("strong"),_mo=o("data2vec-vision"),bmo=o(" \u2014 "),XP=a("a"),vmo=o("Data2VecVisionModel"),Fmo=o(" (Data2VecVision model)"),Tmo=l(),sp=a("li"),Yae=a("strong"),Mmo=o("deberta"),Emo=o(" \u2014 "),zP=a("a"),Cmo=o("DebertaModel"),wmo=o(" (DeBERTa model)"),Amo=l(),lp=a("li"),Kae=a("strong"),ymo=o("deberta-v2"),Lmo=o(" \u2014 "),QP=a("a"),xmo=o("DebertaV2Model"),$mo=o(" (DeBERTa-v2 model)"),kmo=l(),ip=a("li"),Zae=a("strong"),Smo=o("decision_transformer"),Rmo=o(" \u2014 "),WP=a("a"),Bmo=o("DecisionTransformerModel"),Pmo=o(" (Decision Transformer model)"),Imo=l(),dp=a("li"),ene=a("strong"),qmo=o("deit"),Nmo=o(" \u2014 "),HP=a("a"),jmo=o("DeiTModel"),Dmo=o(" (DeiT model)"),Gmo=l(),cp=a("li"),one=a("strong"),Omo=o("detr"),Vmo=o(" \u2014 "),UP=a("a"),Xmo=o("DetrModel"),zmo=o(" (DETR model)"),Qmo=l(),fp=a("li"),rne=a("strong"),Wmo=o("distilbert"),Hmo=o(" \u2014 "),JP=a("a"),Umo=o("DistilBertModel"),Jmo=o(" (DistilBERT model)"),Ymo=l(),mp=a("li"),tne=a("strong"),Kmo=o("dpr"),Zmo=o(" \u2014 "),YP=a("a"),ego=o("DPRQuestionEncoder"),ogo=o(" (DPR model)"),rgo=l(),gp=a("li"),ane=a("strong"),tgo=o("dpt"),ago=o(" \u2014 "),KP=a("a"),ngo=o("DPTModel"),sgo=o(" (DPT model)"),lgo=l(),hp=a("li"),nne=a("strong"),igo=o("electra"),dgo=o(" \u2014 "),ZP=a("a"),cgo=o("ElectraModel"),fgo=o(" (ELECTRA model)"),mgo=l(),pp=a("li"),sne=a("strong"),ggo=o("flaubert"),hgo=o(" \u2014 "),eI=a("a"),pgo=o("FlaubertModel"),ugo=o(" (FlauBERT model)"),_go=l(),up=a("li"),lne=a("strong"),bgo=o("fnet"),vgo=o(" \u2014 "),oI=a("a"),Fgo=o("FNetModel"),Tgo=o(" (FNet model)"),Mgo=l(),_p=a("li"),ine=a("strong"),Ego=o("fsmt"),Cgo=o(" \u2014 "),rI=a("a"),wgo=o("FSMTModel"),Ago=o(" (FairSeq Machine-Translation model)"),ygo=l(),Ss=a("li"),dne=a("strong"),Lgo=o("funnel"),xgo=o(" \u2014 "),tI=a("a"),$go=o("FunnelModel"),kgo=o(" or "),aI=a("a"),Sgo=o("FunnelBaseModel"),Rgo=o(" (Funnel Transformer model)"),Bgo=l(),bp=a("li"),cne=a("strong"),Pgo=o("glpn"),Igo=o(" \u2014 "),nI=a("a"),qgo=o("GLPNModel"),Ngo=o(" (GLPN model)"),jgo=l(),vp=a("li"),fne=a("strong"),Dgo=o("gpt2"),Ggo=o(" \u2014 "),sI=a("a"),Ogo=o("GPT2Model"),Vgo=o(" (OpenAI GPT-2 model)"),Xgo=l(),Fp=a("li"),mne=a("strong"),zgo=o("gpt_neo"),Qgo=o(" \u2014 "),lI=a("a"),Wgo=o("GPTNeoModel"),Hgo=o(" (GPT Neo model)"),Ugo=l(),Tp=a("li"),gne=a("strong"),Jgo=o("gptj"),Ygo=o(" \u2014 "),iI=a("a"),Kgo=o("GPTJModel"),Zgo=o(" (GPT-J model)"),eho=l(),Mp=a("li"),hne=a("strong"),oho=o("hubert"),rho=o(" \u2014 "),dI=a("a"),tho=o("HubertModel"),aho=o(" (Hubert model)"),nho=l(),Ep=a("li"),pne=a("strong"),sho=o("ibert"),lho=o(" \u2014 "),cI=a("a"),iho=o("IBertModel"),dho=o(" (I-BERT model)"),cho=l(),Cp=a("li"),une=a("strong"),fho=o("imagegpt"),mho=o(" \u2014 "),fI=a("a"),gho=o("ImageGPTModel"),hho=o(" (ImageGPT model)"),pho=l(),wp=a("li"),_ne=a("strong"),uho=o("layoutlm"),_ho=o(" \u2014 "),mI=a("a"),bho=o("LayoutLMModel"),vho=o(" (LayoutLM model)"),Fho=l(),Ap=a("li"),bne=a("strong"),Tho=o("layoutlmv2"),Mho=o(" \u2014 "),gI=a("a"),Eho=o("LayoutLMv2Model"),Cho=o(" (LayoutLMv2 model)"),who=l(),yp=a("li"),vne=a("strong"),Aho=o("led"),yho=o(" \u2014 "),hI=a("a"),Lho=o("LEDModel"),xho=o(" (LED model)"),$ho=l(),Lp=a("li"),Fne=a("strong"),kho=o("longformer"),Sho=o(" \u2014 "),pI=a("a"),Rho=o("LongformerModel"),Bho=o(" (Longformer model)"),Pho=l(),xp=a("li"),Tne=a("strong"),Iho=o("luke"),qho=o(" \u2014 "),uI=a("a"),Nho=o("LukeModel"),jho=o(" (LUKE model)"),Dho=l(),$p=a("li"),Mne=a("strong"),Gho=o("lxmert"),Oho=o(" \u2014 "),_I=a("a"),Vho=o("LxmertModel"),Xho=o(" (LXMERT model)"),zho=l(),kp=a("li"),Ene=a("strong"),Qho=o("m2m_100"),Who=o(" \u2014 "),bI=a("a"),Hho=o("M2M100Model"),Uho=o(" (M2M100 model)"),Jho=l(),Sp=a("li"),Cne=a("strong"),Yho=o("marian"),Kho=o(" \u2014 "),vI=a("a"),Zho=o("MarianModel"),epo=o(" (Marian model)"),opo=l(),Rp=a("li"),wne=a("strong"),rpo=o("maskformer"),tpo=o(" \u2014 "),FI=a("a"),apo=o("MaskFormerModel"),npo=o(" (MaskFormer model)"),spo=l(),Bp=a("li"),Ane=a("strong"),lpo=o("mbart"),ipo=o(" \u2014 "),TI=a("a"),dpo=o("MBartModel"),cpo=o(" (mBART model)"),fpo=l(),Pp=a("li"),yne=a("strong"),mpo=o("megatron-bert"),gpo=o(" \u2014 "),MI=a("a"),hpo=o("MegatronBertModel"),ppo=o(" (MegatronBert model)"),upo=l(),Ip=a("li"),Lne=a("strong"),_po=o("mobilebert"),bpo=o(" \u2014 "),EI=a("a"),vpo=o("MobileBertModel"),Fpo=o(" (MobileBERT model)"),Tpo=l(),qp=a("li"),xne=a("strong"),Mpo=o("mpnet"),Epo=o(" \u2014 "),CI=a("a"),Cpo=o("MPNetModel"),wpo=o(" (MPNet model)"),Apo=l(),Np=a("li"),$ne=a("strong"),ypo=o("mt5"),Lpo=o(" \u2014 "),wI=a("a"),xpo=o("MT5Model"),$po=o(" (mT5 model)"),kpo=l(),jp=a("li"),kne=a("strong"),Spo=o("nystromformer"),Rpo=o(" \u2014 "),AI=a("a"),Bpo=o("NystromformerModel"),Ppo=o(" (Nystromformer model)"),Ipo=l(),Dp=a("li"),Sne=a("strong"),qpo=o("openai-gpt"),Npo=o(" \u2014 "),yI=a("a"),jpo=o("OpenAIGPTModel"),Dpo=o(" (OpenAI GPT model)"),Gpo=l(),Gp=a("li"),Rne=a("strong"),Opo=o("pegasus"),Vpo=o(" \u2014 "),LI=a("a"),Xpo=o("PegasusModel"),zpo=o(" (Pegasus model)"),Qpo=l(),Op=a("li"),Bne=a("strong"),Wpo=o("perceiver"),Hpo=o(" \u2014 "),xI=a("a"),Upo=o("PerceiverModel"),Jpo=o(" (Perceiver model)"),Ypo=l(),Vp=a("li"),Pne=a("strong"),Kpo=o("plbart"),Zpo=o(" \u2014 "),$I=a("a"),euo=o("PLBartModel"),ouo=o(" (PLBart model)"),ruo=l(),Xp=a("li"),Ine=a("strong"),tuo=o("poolformer"),auo=o(" \u2014 "),kI=a("a"),nuo=o("PoolFormerModel"),suo=o(" (PoolFormer model)"),luo=l(),zp=a("li"),qne=a("strong"),iuo=o("prophetnet"),duo=o(" \u2014 "),SI=a("a"),cuo=o("ProphetNetModel"),fuo=o(" (ProphetNet model)"),muo=l(),Qp=a("li"),Nne=a("strong"),guo=o("qdqbert"),huo=o(" \u2014 "),RI=a("a"),puo=o("QDQBertModel"),uuo=o(" (QDQBert model)"),_uo=l(),Wp=a("li"),jne=a("strong"),buo=o("reformer"),vuo=o(" \u2014 "),BI=a("a"),Fuo=o("ReformerModel"),Tuo=o(" (Reformer model)"),Muo=l(),Hp=a("li"),Dne=a("strong"),Euo=o("regnet"),Cuo=o(" \u2014 "),PI=a("a"),wuo=o("RegNetModel"),Auo=o(" (RegNet model)"),yuo=l(),Up=a("li"),Gne=a("strong"),Luo=o("rembert"),xuo=o(" \u2014 "),II=a("a"),$uo=o("RemBertModel"),kuo=o(" (RemBERT model)"),Suo=l(),Jp=a("li"),One=a("strong"),Ruo=o("resnet"),Buo=o(" \u2014 "),qI=a("a"),Puo=o("ResNetModel"),Iuo=o(" (ResNet model)"),quo=l(),Yp=a("li"),Vne=a("strong"),Nuo=o("retribert"),juo=o(" \u2014 "),NI=a("a"),Duo=o("RetriBertModel"),Guo=o(" (RetriBERT model)"),Ouo=l(),Kp=a("li"),Xne=a("strong"),Vuo=o("roberta"),Xuo=o(" \u2014 "),jI=a("a"),zuo=o("RobertaModel"),Quo=o(" (RoBERTa model)"),Wuo=l(),Zp=a("li"),zne=a("strong"),Huo=o("roformer"),Uuo=o(" \u2014 "),DI=a("a"),Juo=o("RoFormerModel"),Yuo=o(" (RoFormer model)"),Kuo=l(),eu=a("li"),Qne=a("strong"),Zuo=o("segformer"),e_o=o(" \u2014 "),GI=a("a"),o_o=o("SegformerModel"),r_o=o(" (SegFormer model)"),t_o=l(),ou=a("li"),Wne=a("strong"),a_o=o("sew"),n_o=o(" \u2014 "),OI=a("a"),s_o=o("SEWModel"),l_o=o(" (SEW model)"),i_o=l(),ru=a("li"),Hne=a("strong"),d_o=o("sew-d"),c_o=o(" \u2014 "),VI=a("a"),f_o=o("SEWDModel"),m_o=o(" (SEW-D model)"),g_o=l(),tu=a("li"),Une=a("strong"),h_o=o("speech_to_text"),p_o=o(" \u2014 "),XI=a("a"),u_o=o("Speech2TextModel"),__o=o(" (Speech2Text model)"),b_o=l(),au=a("li"),Jne=a("strong"),v_o=o("splinter"),F_o=o(" \u2014 "),zI=a("a"),T_o=o("SplinterModel"),M_o=o(" (Splinter model)"),E_o=l(),nu=a("li"),Yne=a("strong"),C_o=o("squeezebert"),w_o=o(" \u2014 "),QI=a("a"),A_o=o("SqueezeBertModel"),y_o=o(" (SqueezeBERT model)"),L_o=l(),su=a("li"),Kne=a("strong"),x_o=o("swin"),$_o=o(" \u2014 "),WI=a("a"),k_o=o("SwinModel"),S_o=o(" (Swin model)"),R_o=l(),lu=a("li"),Zne=a("strong"),B_o=o("t5"),P_o=o(" \u2014 "),HI=a("a"),I_o=o("T5Model"),q_o=o(" (T5 model)"),N_o=l(),iu=a("li"),ese=a("strong"),j_o=o("tapas"),D_o=o(" \u2014 "),UI=a("a"),G_o=o("TapasModel"),O_o=o(" (TAPAS model)"),V_o=l(),du=a("li"),ose=a("strong"),X_o=o("transfo-xl"),z_o=o(" \u2014 "),JI=a("a"),Q_o=o("TransfoXLModel"),W_o=o(" (Transformer-XL model)"),H_o=l(),cu=a("li"),rse=a("strong"),U_o=o("unispeech"),J_o=o(" \u2014 "),YI=a("a"),Y_o=o("UniSpeechModel"),K_o=o(" (UniSpeech model)"),Z_o=l(),fu=a("li"),tse=a("strong"),e2o=o("unispeech-sat"),o2o=o(" \u2014 "),KI=a("a"),r2o=o("UniSpeechSatModel"),t2o=o(" (UniSpeechSat model)"),a2o=l(),mu=a("li"),ase=a("strong"),n2o=o("van"),s2o=o(" \u2014 "),ZI=a("a"),l2o=o("VanModel"),i2o=o(" (VAN model)"),d2o=l(),gu=a("li"),nse=a("strong"),c2o=o("vilt"),f2o=o(" \u2014 "),eq=a("a"),m2o=o("ViltModel"),g2o=o(" (ViLT model)"),h2o=l(),hu=a("li"),sse=a("strong"),p2o=o("vision-text-dual-encoder"),u2o=o(" \u2014 "),oq=a("a"),_2o=o("VisionTextDualEncoderModel"),b2o=o(" (VisionTextDualEncoder model)"),v2o=l(),pu=a("li"),lse=a("strong"),F2o=o("visual_bert"),T2o=o(" \u2014 "),rq=a("a"),M2o=o("VisualBertModel"),E2o=o(" (VisualBert model)"),C2o=l(),uu=a("li"),ise=a("strong"),w2o=o("vit"),A2o=o(" \u2014 "),tq=a("a"),y2o=o("ViTModel"),L2o=o(" (ViT model)"),x2o=l(),_u=a("li"),dse=a("strong"),$2o=o("vit_mae"),k2o=o(" \u2014 "),aq=a("a"),S2o=o("ViTMAEModel"),R2o=o(" (ViTMAE model)"),B2o=l(),bu=a("li"),cse=a("strong"),P2o=o("wav2vec2"),I2o=o(" \u2014 "),nq=a("a"),q2o=o("Wav2Vec2Model"),N2o=o(" (Wav2Vec2 model)"),j2o=l(),vu=a("li"),fse=a("strong"),D2o=o("wavlm"),G2o=o(" \u2014 "),sq=a("a"),O2o=o("WavLMModel"),V2o=o(" (WavLM model)"),X2o=l(),Fu=a("li"),mse=a("strong"),z2o=o("xglm"),Q2o=o(" \u2014 "),lq=a("a"),W2o=o("XGLMModel"),H2o=o(" (XGLM model)"),U2o=l(),Tu=a("li"),gse=a("strong"),J2o=o("xlm"),Y2o=o(" \u2014 "),iq=a("a"),K2o=o("XLMModel"),Z2o=o(" (XLM model)"),e1o=l(),Mu=a("li"),hse=a("strong"),o1o=o("xlm-prophetnet"),r1o=o(" \u2014 "),dq=a("a"),t1o=o("XLMProphetNetModel"),a1o=o(" (XLMProphetNet model)"),n1o=l(),Eu=a("li"),pse=a("strong"),s1o=o("xlm-roberta"),l1o=o(" \u2014 "),cq=a("a"),i1o=o("XLMRobertaModel"),d1o=o(" (XLM-RoBERTa model)"),c1o=l(),Cu=a("li"),use=a("strong"),f1o=o("xlm-roberta-xl"),m1o=o(" \u2014 "),fq=a("a"),g1o=o("XLMRobertaXLModel"),h1o=o(" (XLM-RoBERTa-XL model)"),p1o=l(),wu=a("li"),_se=a("strong"),u1o=o("xlnet"),_1o=o(" \u2014 "),mq=a("a"),b1o=o("XLNetModel"),v1o=o(" (XLNet model)"),F1o=l(),Au=a("li"),bse=a("strong"),T1o=o("yolos"),M1o=o(" \u2014 "),gq=a("a"),E1o=o("YolosModel"),C1o=o(" (YOLOS model)"),w1o=l(),yu=a("li"),vse=a("strong"),A1o=o("yoso"),y1o=o(" \u2014 "),hq=a("a"),L1o=o("YosoModel"),x1o=o(" (YOSO model)"),$1o=l(),Lu=a("p"),k1o=o("The model is set in evaluation mode by default using "),Fse=a("code"),S1o=o("model.eval()"),R1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=a("code"),B1o=o("model.train()"),P1o=l(),F(xu.$$.fragment),bPe=l(),Ci=a("h2"),$u=a("a"),Mse=a("span"),F(b0.$$.fragment),I1o=l(),Ese=a("span"),q1o=o("AutoModelForPreTraining"),vPe=l(),xo=a("div"),F(v0.$$.fragment),N1o=l(),wi=a("p"),j1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pq=a("a"),D1o=o("from_pretrained()"),G1o=o(" class method or the "),uq=a("a"),O1o=o("from_config()"),V1o=o(` class
method.`),X1o=l(),F0=a("p"),z1o=o("This class cannot be instantiated directly using "),Cse=a("code"),Q1o=o("__init__()"),W1o=o(" (throws an error)."),H1o=l(),rt=a("div"),F(T0.$$.fragment),U1o=l(),wse=a("p"),J1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Y1o=l(),Ai=a("p"),K1o=o(`Note:
Loading a model from its configuration file does `),Ase=a("strong"),Z1o=o("not"),ebo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_q=a("a"),obo=o("from_pretrained()"),rbo=o(" to load the model weights."),tbo=l(),F(ku.$$.fragment),abo=l(),Ue=a("div"),F(M0.$$.fragment),nbo=l(),yse=a("p"),sbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),lbo=l(),ya=a("p"),ibo=o("The model class to instantiate is selected based on the "),Lse=a("code"),dbo=o("model_type"),cbo=o(` property of the config object (either
passed as an argument or loaded from `),xse=a("code"),fbo=o("pretrained_model_name_or_path"),mbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),gbo=o("pretrained_model_name_or_path"),hbo=o(":"),pbo=l(),G=a("ul"),Su=a("li"),kse=a("strong"),ubo=o("albert"),_bo=o(" \u2014 "),bq=a("a"),bbo=o("AlbertForPreTraining"),vbo=o(" (ALBERT model)"),Fbo=l(),Ru=a("li"),Sse=a("strong"),Tbo=o("bart"),Mbo=o(" \u2014 "),vq=a("a"),Ebo=o("BartForConditionalGeneration"),Cbo=o(" (BART model)"),wbo=l(),Bu=a("li"),Rse=a("strong"),Abo=o("bert"),ybo=o(" \u2014 "),Fq=a("a"),Lbo=o("BertForPreTraining"),xbo=o(" (BERT model)"),$bo=l(),Pu=a("li"),Bse=a("strong"),kbo=o("big_bird"),Sbo=o(" \u2014 "),Tq=a("a"),Rbo=o("BigBirdForPreTraining"),Bbo=o(" (BigBird model)"),Pbo=l(),Iu=a("li"),Pse=a("strong"),Ibo=o("camembert"),qbo=o(" \u2014 "),Mq=a("a"),Nbo=o("CamembertForMaskedLM"),jbo=o(" (CamemBERT model)"),Dbo=l(),qu=a("li"),Ise=a("strong"),Gbo=o("ctrl"),Obo=o(" \u2014 "),Eq=a("a"),Vbo=o("CTRLLMHeadModel"),Xbo=o(" (CTRL model)"),zbo=l(),Nu=a("li"),qse=a("strong"),Qbo=o("data2vec-text"),Wbo=o(" \u2014 "),Cq=a("a"),Hbo=o("Data2VecTextForMaskedLM"),Ubo=o(" (Data2VecText model)"),Jbo=l(),ju=a("li"),Nse=a("strong"),Ybo=o("deberta"),Kbo=o(" \u2014 "),wq=a("a"),Zbo=o("DebertaForMaskedLM"),e5o=o(" (DeBERTa model)"),o5o=l(),Du=a("li"),jse=a("strong"),r5o=o("deberta-v2"),t5o=o(" \u2014 "),Aq=a("a"),a5o=o("DebertaV2ForMaskedLM"),n5o=o(" (DeBERTa-v2 model)"),s5o=l(),Gu=a("li"),Dse=a("strong"),l5o=o("distilbert"),i5o=o(" \u2014 "),yq=a("a"),d5o=o("DistilBertForMaskedLM"),c5o=o(" (DistilBERT model)"),f5o=l(),Ou=a("li"),Gse=a("strong"),m5o=o("electra"),g5o=o(" \u2014 "),Lq=a("a"),h5o=o("ElectraForPreTraining"),p5o=o(" (ELECTRA model)"),u5o=l(),Vu=a("li"),Ose=a("strong"),_5o=o("flaubert"),b5o=o(" \u2014 "),xq=a("a"),v5o=o("FlaubertWithLMHeadModel"),F5o=o(" (FlauBERT model)"),T5o=l(),Xu=a("li"),Vse=a("strong"),M5o=o("fnet"),E5o=o(" \u2014 "),$q=a("a"),C5o=o("FNetForPreTraining"),w5o=o(" (FNet model)"),A5o=l(),zu=a("li"),Xse=a("strong"),y5o=o("fsmt"),L5o=o(" \u2014 "),kq=a("a"),x5o=o("FSMTForConditionalGeneration"),$5o=o(" (FairSeq Machine-Translation model)"),k5o=l(),Qu=a("li"),zse=a("strong"),S5o=o("funnel"),R5o=o(" \u2014 "),Sq=a("a"),B5o=o("FunnelForPreTraining"),P5o=o(" (Funnel Transformer model)"),I5o=l(),Wu=a("li"),Qse=a("strong"),q5o=o("gpt2"),N5o=o(" \u2014 "),Rq=a("a"),j5o=o("GPT2LMHeadModel"),D5o=o(" (OpenAI GPT-2 model)"),G5o=l(),Hu=a("li"),Wse=a("strong"),O5o=o("ibert"),V5o=o(" \u2014 "),Bq=a("a"),X5o=o("IBertForMaskedLM"),z5o=o(" (I-BERT model)"),Q5o=l(),Uu=a("li"),Hse=a("strong"),W5o=o("layoutlm"),H5o=o(" \u2014 "),Pq=a("a"),U5o=o("LayoutLMForMaskedLM"),J5o=o(" (LayoutLM model)"),Y5o=l(),Ju=a("li"),Use=a("strong"),K5o=o("longformer"),Z5o=o(" \u2014 "),Iq=a("a"),evo=o("LongformerForMaskedLM"),ovo=o(" (Longformer model)"),rvo=l(),Yu=a("li"),Jse=a("strong"),tvo=o("lxmert"),avo=o(" \u2014 "),qq=a("a"),nvo=o("LxmertForPreTraining"),svo=o(" (LXMERT model)"),lvo=l(),Ku=a("li"),Yse=a("strong"),ivo=o("megatron-bert"),dvo=o(" \u2014 "),Nq=a("a"),cvo=o("MegatronBertForPreTraining"),fvo=o(" (MegatronBert model)"),mvo=l(),Zu=a("li"),Kse=a("strong"),gvo=o("mobilebert"),hvo=o(" \u2014 "),jq=a("a"),pvo=o("MobileBertForPreTraining"),uvo=o(" (MobileBERT model)"),_vo=l(),e_=a("li"),Zse=a("strong"),bvo=o("mpnet"),vvo=o(" \u2014 "),Dq=a("a"),Fvo=o("MPNetForMaskedLM"),Tvo=o(" (MPNet model)"),Mvo=l(),o_=a("li"),ele=a("strong"),Evo=o("openai-gpt"),Cvo=o(" \u2014 "),Gq=a("a"),wvo=o("OpenAIGPTLMHeadModel"),Avo=o(" (OpenAI GPT model)"),yvo=l(),r_=a("li"),ole=a("strong"),Lvo=o("retribert"),xvo=o(" \u2014 "),Oq=a("a"),$vo=o("RetriBertModel"),kvo=o(" (RetriBERT model)"),Svo=l(),t_=a("li"),rle=a("strong"),Rvo=o("roberta"),Bvo=o(" \u2014 "),Vq=a("a"),Pvo=o("RobertaForMaskedLM"),Ivo=o(" (RoBERTa model)"),qvo=l(),a_=a("li"),tle=a("strong"),Nvo=o("squeezebert"),jvo=o(" \u2014 "),Xq=a("a"),Dvo=o("SqueezeBertForMaskedLM"),Gvo=o(" (SqueezeBERT model)"),Ovo=l(),n_=a("li"),ale=a("strong"),Vvo=o("t5"),Xvo=o(" \u2014 "),zq=a("a"),zvo=o("T5ForConditionalGeneration"),Qvo=o(" (T5 model)"),Wvo=l(),s_=a("li"),nle=a("strong"),Hvo=o("tapas"),Uvo=o(" \u2014 "),Qq=a("a"),Jvo=o("TapasForMaskedLM"),Yvo=o(" (TAPAS model)"),Kvo=l(),l_=a("li"),sle=a("strong"),Zvo=o("transfo-xl"),eFo=o(" \u2014 "),Wq=a("a"),oFo=o("TransfoXLLMHeadModel"),rFo=o(" (Transformer-XL model)"),tFo=l(),i_=a("li"),lle=a("strong"),aFo=o("unispeech"),nFo=o(" \u2014 "),Hq=a("a"),sFo=o("UniSpeechForPreTraining"),lFo=o(" (UniSpeech model)"),iFo=l(),d_=a("li"),ile=a("strong"),dFo=o("unispeech-sat"),cFo=o(" \u2014 "),Uq=a("a"),fFo=o("UniSpeechSatForPreTraining"),mFo=o(" (UniSpeechSat model)"),gFo=l(),c_=a("li"),dle=a("strong"),hFo=o("visual_bert"),pFo=o(" \u2014 "),Jq=a("a"),uFo=o("VisualBertForPreTraining"),_Fo=o(" (VisualBert model)"),bFo=l(),f_=a("li"),cle=a("strong"),vFo=o("vit_mae"),FFo=o(" \u2014 "),Yq=a("a"),TFo=o("ViTMAEForPreTraining"),MFo=o(" (ViTMAE model)"),EFo=l(),m_=a("li"),fle=a("strong"),CFo=o("wav2vec2"),wFo=o(" \u2014 "),Kq=a("a"),AFo=o("Wav2Vec2ForPreTraining"),yFo=o(" (Wav2Vec2 model)"),LFo=l(),g_=a("li"),mle=a("strong"),xFo=o("xlm"),$Fo=o(" \u2014 "),Zq=a("a"),kFo=o("XLMWithLMHeadModel"),SFo=o(" (XLM model)"),RFo=l(),h_=a("li"),gle=a("strong"),BFo=o("xlm-roberta"),PFo=o(" \u2014 "),eN=a("a"),IFo=o("XLMRobertaForMaskedLM"),qFo=o(" (XLM-RoBERTa model)"),NFo=l(),p_=a("li"),hle=a("strong"),jFo=o("xlm-roberta-xl"),DFo=o(" \u2014 "),oN=a("a"),GFo=o("XLMRobertaXLForMaskedLM"),OFo=o(" (XLM-RoBERTa-XL model)"),VFo=l(),u_=a("li"),ple=a("strong"),XFo=o("xlnet"),zFo=o(" \u2014 "),rN=a("a"),QFo=o("XLNetLMHeadModel"),WFo=o(" (XLNet model)"),HFo=l(),__=a("p"),UFo=o("The model is set in evaluation mode by default using "),ule=a("code"),JFo=o("model.eval()"),YFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_le=a("code"),KFo=o("model.train()"),ZFo=l(),F(b_.$$.fragment),FPe=l(),yi=a("h2"),v_=a("a"),ble=a("span"),F(E0.$$.fragment),e6o=l(),vle=a("span"),o6o=o("AutoModelForCausalLM"),TPe=l(),$o=a("div"),F(C0.$$.fragment),r6o=l(),Li=a("p"),t6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tN=a("a"),a6o=o("from_pretrained()"),n6o=o(" class method or the "),aN=a("a"),s6o=o("from_config()"),l6o=o(` class
method.`),i6o=l(),w0=a("p"),d6o=o("This class cannot be instantiated directly using "),Fle=a("code"),c6o=o("__init__()"),f6o=o(" (throws an error)."),m6o=l(),tt=a("div"),F(A0.$$.fragment),g6o=l(),Tle=a("p"),h6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),p6o=l(),xi=a("p"),u6o=o(`Note:
Loading a model from its configuration file does `),Mle=a("strong"),_6o=o("not"),b6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),v6o=o("from_pretrained()"),F6o=o(" to load the model weights."),T6o=l(),F(F_.$$.fragment),M6o=l(),Je=a("div"),F(y0.$$.fragment),E6o=l(),Ele=a("p"),C6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w6o=l(),La=a("p"),A6o=o("The model class to instantiate is selected based on the "),Cle=a("code"),y6o=o("model_type"),L6o=o(` property of the config object (either
passed as an argument or loaded from `),wle=a("code"),x6o=o("pretrained_model_name_or_path"),$6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=a("code"),k6o=o("pretrained_model_name_or_path"),S6o=o(":"),R6o=l(),z=a("ul"),T_=a("li"),yle=a("strong"),B6o=o("bart"),P6o=o(" \u2014 "),sN=a("a"),I6o=o("BartForCausalLM"),q6o=o(" (BART model)"),N6o=l(),M_=a("li"),Lle=a("strong"),j6o=o("bert"),D6o=o(" \u2014 "),lN=a("a"),G6o=o("BertLMHeadModel"),O6o=o(" (BERT model)"),V6o=l(),E_=a("li"),xle=a("strong"),X6o=o("bert-generation"),z6o=o(" \u2014 "),iN=a("a"),Q6o=o("BertGenerationDecoder"),W6o=o(" (Bert Generation model)"),H6o=l(),C_=a("li"),$le=a("strong"),U6o=o("big_bird"),J6o=o(" \u2014 "),dN=a("a"),Y6o=o("BigBirdForCausalLM"),K6o=o(" (BigBird model)"),Z6o=l(),w_=a("li"),kle=a("strong"),eTo=o("bigbird_pegasus"),oTo=o(" \u2014 "),cN=a("a"),rTo=o("BigBirdPegasusForCausalLM"),tTo=o(" (BigBirdPegasus model)"),aTo=l(),A_=a("li"),Sle=a("strong"),nTo=o("blenderbot"),sTo=o(" \u2014 "),fN=a("a"),lTo=o("BlenderbotForCausalLM"),iTo=o(" (Blenderbot model)"),dTo=l(),y_=a("li"),Rle=a("strong"),cTo=o("blenderbot-small"),fTo=o(" \u2014 "),mN=a("a"),mTo=o("BlenderbotSmallForCausalLM"),gTo=o(" (BlenderbotSmall model)"),hTo=l(),L_=a("li"),Ble=a("strong"),pTo=o("camembert"),uTo=o(" \u2014 "),gN=a("a"),_To=o("CamembertForCausalLM"),bTo=o(" (CamemBERT model)"),vTo=l(),x_=a("li"),Ple=a("strong"),FTo=o("ctrl"),TTo=o(" \u2014 "),hN=a("a"),MTo=o("CTRLLMHeadModel"),ETo=o(" (CTRL model)"),CTo=l(),$_=a("li"),Ile=a("strong"),wTo=o("data2vec-text"),ATo=o(" \u2014 "),pN=a("a"),yTo=o("Data2VecTextForCausalLM"),LTo=o(" (Data2VecText model)"),xTo=l(),k_=a("li"),qle=a("strong"),$To=o("electra"),kTo=o(" \u2014 "),uN=a("a"),STo=o("ElectraForCausalLM"),RTo=o(" (ELECTRA model)"),BTo=l(),S_=a("li"),Nle=a("strong"),PTo=o("gpt2"),ITo=o(" \u2014 "),_N=a("a"),qTo=o("GPT2LMHeadModel"),NTo=o(" (OpenAI GPT-2 model)"),jTo=l(),R_=a("li"),jle=a("strong"),DTo=o("gpt_neo"),GTo=o(" \u2014 "),bN=a("a"),OTo=o("GPTNeoForCausalLM"),VTo=o(" (GPT Neo model)"),XTo=l(),B_=a("li"),Dle=a("strong"),zTo=o("gptj"),QTo=o(" \u2014 "),vN=a("a"),WTo=o("GPTJForCausalLM"),HTo=o(" (GPT-J model)"),UTo=l(),P_=a("li"),Gle=a("strong"),JTo=o("marian"),YTo=o(" \u2014 "),FN=a("a"),KTo=o("MarianForCausalLM"),ZTo=o(" (Marian model)"),e9o=l(),I_=a("li"),Ole=a("strong"),o9o=o("mbart"),r9o=o(" \u2014 "),TN=a("a"),t9o=o("MBartForCausalLM"),a9o=o(" (mBART model)"),n9o=l(),q_=a("li"),Vle=a("strong"),s9o=o("megatron-bert"),l9o=o(" \u2014 "),MN=a("a"),i9o=o("MegatronBertForCausalLM"),d9o=o(" (MegatronBert model)"),c9o=l(),N_=a("li"),Xle=a("strong"),f9o=o("openai-gpt"),m9o=o(" \u2014 "),EN=a("a"),g9o=o("OpenAIGPTLMHeadModel"),h9o=o(" (OpenAI GPT model)"),p9o=l(),j_=a("li"),zle=a("strong"),u9o=o("pegasus"),_9o=o(" \u2014 "),CN=a("a"),b9o=o("PegasusForCausalLM"),v9o=o(" (Pegasus model)"),F9o=l(),D_=a("li"),Qle=a("strong"),T9o=o("plbart"),M9o=o(" \u2014 "),wN=a("a"),E9o=o("PLBartForCausalLM"),C9o=o(" (PLBart model)"),w9o=l(),G_=a("li"),Wle=a("strong"),A9o=o("prophetnet"),y9o=o(" \u2014 "),AN=a("a"),L9o=o("ProphetNetForCausalLM"),x9o=o(" (ProphetNet model)"),$9o=l(),O_=a("li"),Hle=a("strong"),k9o=o("qdqbert"),S9o=o(" \u2014 "),yN=a("a"),R9o=o("QDQBertLMHeadModel"),B9o=o(" (QDQBert model)"),P9o=l(),V_=a("li"),Ule=a("strong"),I9o=o("reformer"),q9o=o(" \u2014 "),LN=a("a"),N9o=o("ReformerModelWithLMHead"),j9o=o(" (Reformer model)"),D9o=l(),X_=a("li"),Jle=a("strong"),G9o=o("rembert"),O9o=o(" \u2014 "),xN=a("a"),V9o=o("RemBertForCausalLM"),X9o=o(" (RemBERT model)"),z9o=l(),z_=a("li"),Yle=a("strong"),Q9o=o("roberta"),W9o=o(" \u2014 "),$N=a("a"),H9o=o("RobertaForCausalLM"),U9o=o(" (RoBERTa model)"),J9o=l(),Q_=a("li"),Kle=a("strong"),Y9o=o("roformer"),K9o=o(" \u2014 "),kN=a("a"),Z9o=o("RoFormerForCausalLM"),eMo=o(" (RoFormer model)"),oMo=l(),W_=a("li"),Zle=a("strong"),rMo=o("speech_to_text_2"),tMo=o(" \u2014 "),SN=a("a"),aMo=o("Speech2Text2ForCausalLM"),nMo=o(" (Speech2Text2 model)"),sMo=l(),H_=a("li"),eie=a("strong"),lMo=o("transfo-xl"),iMo=o(" \u2014 "),RN=a("a"),dMo=o("TransfoXLLMHeadModel"),cMo=o(" (Transformer-XL model)"),fMo=l(),U_=a("li"),oie=a("strong"),mMo=o("trocr"),gMo=o(" \u2014 "),BN=a("a"),hMo=o("TrOCRForCausalLM"),pMo=o(" (TrOCR model)"),uMo=l(),J_=a("li"),rie=a("strong"),_Mo=o("xglm"),bMo=o(" \u2014 "),PN=a("a"),vMo=o("XGLMForCausalLM"),FMo=o(" (XGLM model)"),TMo=l(),Y_=a("li"),tie=a("strong"),MMo=o("xlm"),EMo=o(" \u2014 "),IN=a("a"),CMo=o("XLMWithLMHeadModel"),wMo=o(" (XLM model)"),AMo=l(),K_=a("li"),aie=a("strong"),yMo=o("xlm-prophetnet"),LMo=o(" \u2014 "),qN=a("a"),xMo=o("XLMProphetNetForCausalLM"),$Mo=o(" (XLMProphetNet model)"),kMo=l(),Z_=a("li"),nie=a("strong"),SMo=o("xlm-roberta"),RMo=o(" \u2014 "),NN=a("a"),BMo=o("XLMRobertaForCausalLM"),PMo=o(" (XLM-RoBERTa model)"),IMo=l(),e2=a("li"),sie=a("strong"),qMo=o("xlm-roberta-xl"),NMo=o(" \u2014 "),jN=a("a"),jMo=o("XLMRobertaXLForCausalLM"),DMo=o(" (XLM-RoBERTa-XL model)"),GMo=l(),o2=a("li"),lie=a("strong"),OMo=o("xlnet"),VMo=o(" \u2014 "),DN=a("a"),XMo=o("XLNetLMHeadModel"),zMo=o(" (XLNet model)"),QMo=l(),r2=a("p"),WMo=o("The model is set in evaluation mode by default using "),iie=a("code"),HMo=o("model.eval()"),UMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=a("code"),JMo=o("model.train()"),YMo=l(),F(t2.$$.fragment),MPe=l(),$i=a("h2"),a2=a("a"),cie=a("span"),F(L0.$$.fragment),KMo=l(),fie=a("span"),ZMo=o("AutoModelForMaskedLM"),EPe=l(),ko=a("div"),F(x0.$$.fragment),e4o=l(),ki=a("p"),o4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GN=a("a"),r4o=o("from_pretrained()"),t4o=o(" class method or the "),ON=a("a"),a4o=o("from_config()"),n4o=o(` class
method.`),s4o=l(),$0=a("p"),l4o=o("This class cannot be instantiated directly using "),mie=a("code"),i4o=o("__init__()"),d4o=o(" (throws an error)."),c4o=l(),at=a("div"),F(k0.$$.fragment),f4o=l(),gie=a("p"),m4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),g4o=l(),Si=a("p"),h4o=o(`Note:
Loading a model from its configuration file does `),hie=a("strong"),p4o=o("not"),u4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),_4o=o("from_pretrained()"),b4o=o(" to load the model weights."),v4o=l(),F(n2.$$.fragment),F4o=l(),Ye=a("div"),F(S0.$$.fragment),T4o=l(),pie=a("p"),M4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),E4o=l(),xa=a("p"),C4o=o("The model class to instantiate is selected based on the "),uie=a("code"),w4o=o("model_type"),A4o=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),y4o=o("pretrained_model_name_or_path"),L4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=a("code"),x4o=o("pretrained_model_name_or_path"),$4o=o(":"),k4o=l(),Q=a("ul"),s2=a("li"),vie=a("strong"),S4o=o("albert"),R4o=o(" \u2014 "),XN=a("a"),B4o=o("AlbertForMaskedLM"),P4o=o(" (ALBERT model)"),I4o=l(),l2=a("li"),Fie=a("strong"),q4o=o("bart"),N4o=o(" \u2014 "),zN=a("a"),j4o=o("BartForConditionalGeneration"),D4o=o(" (BART model)"),G4o=l(),i2=a("li"),Tie=a("strong"),O4o=o("bert"),V4o=o(" \u2014 "),QN=a("a"),X4o=o("BertForMaskedLM"),z4o=o(" (BERT model)"),Q4o=l(),d2=a("li"),Mie=a("strong"),W4o=o("big_bird"),H4o=o(" \u2014 "),WN=a("a"),U4o=o("BigBirdForMaskedLM"),J4o=o(" (BigBird model)"),Y4o=l(),c2=a("li"),Eie=a("strong"),K4o=o("camembert"),Z4o=o(" \u2014 "),HN=a("a"),eEo=o("CamembertForMaskedLM"),oEo=o(" (CamemBERT model)"),rEo=l(),f2=a("li"),Cie=a("strong"),tEo=o("convbert"),aEo=o(" \u2014 "),UN=a("a"),nEo=o("ConvBertForMaskedLM"),sEo=o(" (ConvBERT model)"),lEo=l(),m2=a("li"),wie=a("strong"),iEo=o("data2vec-text"),dEo=o(" \u2014 "),JN=a("a"),cEo=o("Data2VecTextForMaskedLM"),fEo=o(" (Data2VecText model)"),mEo=l(),g2=a("li"),Aie=a("strong"),gEo=o("deberta"),hEo=o(" \u2014 "),YN=a("a"),pEo=o("DebertaForMaskedLM"),uEo=o(" (DeBERTa model)"),_Eo=l(),h2=a("li"),yie=a("strong"),bEo=o("deberta-v2"),vEo=o(" \u2014 "),KN=a("a"),FEo=o("DebertaV2ForMaskedLM"),TEo=o(" (DeBERTa-v2 model)"),MEo=l(),p2=a("li"),Lie=a("strong"),EEo=o("distilbert"),CEo=o(" \u2014 "),ZN=a("a"),wEo=o("DistilBertForMaskedLM"),AEo=o(" (DistilBERT model)"),yEo=l(),u2=a("li"),xie=a("strong"),LEo=o("electra"),xEo=o(" \u2014 "),ej=a("a"),$Eo=o("ElectraForMaskedLM"),kEo=o(" (ELECTRA model)"),SEo=l(),_2=a("li"),$ie=a("strong"),REo=o("flaubert"),BEo=o(" \u2014 "),oj=a("a"),PEo=o("FlaubertWithLMHeadModel"),IEo=o(" (FlauBERT model)"),qEo=l(),b2=a("li"),kie=a("strong"),NEo=o("fnet"),jEo=o(" \u2014 "),rj=a("a"),DEo=o("FNetForMaskedLM"),GEo=o(" (FNet model)"),OEo=l(),v2=a("li"),Sie=a("strong"),VEo=o("funnel"),XEo=o(" \u2014 "),tj=a("a"),zEo=o("FunnelForMaskedLM"),QEo=o(" (Funnel Transformer model)"),WEo=l(),F2=a("li"),Rie=a("strong"),HEo=o("ibert"),UEo=o(" \u2014 "),aj=a("a"),JEo=o("IBertForMaskedLM"),YEo=o(" (I-BERT model)"),KEo=l(),T2=a("li"),Bie=a("strong"),ZEo=o("layoutlm"),eCo=o(" \u2014 "),nj=a("a"),oCo=o("LayoutLMForMaskedLM"),rCo=o(" (LayoutLM model)"),tCo=l(),M2=a("li"),Pie=a("strong"),aCo=o("longformer"),nCo=o(" \u2014 "),sj=a("a"),sCo=o("LongformerForMaskedLM"),lCo=o(" (Longformer model)"),iCo=l(),E2=a("li"),Iie=a("strong"),dCo=o("mbart"),cCo=o(" \u2014 "),lj=a("a"),fCo=o("MBartForConditionalGeneration"),mCo=o(" (mBART model)"),gCo=l(),C2=a("li"),qie=a("strong"),hCo=o("megatron-bert"),pCo=o(" \u2014 "),ij=a("a"),uCo=o("MegatronBertForMaskedLM"),_Co=o(" (MegatronBert model)"),bCo=l(),w2=a("li"),Nie=a("strong"),vCo=o("mobilebert"),FCo=o(" \u2014 "),dj=a("a"),TCo=o("MobileBertForMaskedLM"),MCo=o(" (MobileBERT model)"),ECo=l(),A2=a("li"),jie=a("strong"),CCo=o("mpnet"),wCo=o(" \u2014 "),cj=a("a"),ACo=o("MPNetForMaskedLM"),yCo=o(" (MPNet model)"),LCo=l(),y2=a("li"),Die=a("strong"),xCo=o("nystromformer"),$Co=o(" \u2014 "),fj=a("a"),kCo=o("NystromformerForMaskedLM"),SCo=o(" (Nystromformer model)"),RCo=l(),L2=a("li"),Gie=a("strong"),BCo=o("perceiver"),PCo=o(" \u2014 "),mj=a("a"),ICo=o("PerceiverForMaskedLM"),qCo=o(" (Perceiver model)"),NCo=l(),x2=a("li"),Oie=a("strong"),jCo=o("qdqbert"),DCo=o(" \u2014 "),gj=a("a"),GCo=o("QDQBertForMaskedLM"),OCo=o(" (QDQBert model)"),VCo=l(),$2=a("li"),Vie=a("strong"),XCo=o("reformer"),zCo=o(" \u2014 "),hj=a("a"),QCo=o("ReformerForMaskedLM"),WCo=o(" (Reformer model)"),HCo=l(),k2=a("li"),Xie=a("strong"),UCo=o("rembert"),JCo=o(" \u2014 "),pj=a("a"),YCo=o("RemBertForMaskedLM"),KCo=o(" (RemBERT model)"),ZCo=l(),S2=a("li"),zie=a("strong"),e3o=o("roberta"),o3o=o(" \u2014 "),uj=a("a"),r3o=o("RobertaForMaskedLM"),t3o=o(" (RoBERTa model)"),a3o=l(),R2=a("li"),Qie=a("strong"),n3o=o("roformer"),s3o=o(" \u2014 "),_j=a("a"),l3o=o("RoFormerForMaskedLM"),i3o=o(" (RoFormer model)"),d3o=l(),B2=a("li"),Wie=a("strong"),c3o=o("squeezebert"),f3o=o(" \u2014 "),bj=a("a"),m3o=o("SqueezeBertForMaskedLM"),g3o=o(" (SqueezeBERT model)"),h3o=l(),P2=a("li"),Hie=a("strong"),p3o=o("tapas"),u3o=o(" \u2014 "),vj=a("a"),_3o=o("TapasForMaskedLM"),b3o=o(" (TAPAS model)"),v3o=l(),I2=a("li"),Uie=a("strong"),F3o=o("wav2vec2"),T3o=o(" \u2014 "),Jie=a("code"),M3o=o("Wav2Vec2ForMaskedLM"),E3o=o(" (Wav2Vec2 model)"),C3o=l(),q2=a("li"),Yie=a("strong"),w3o=o("xlm"),A3o=o(" \u2014 "),Fj=a("a"),y3o=o("XLMWithLMHeadModel"),L3o=o(" (XLM model)"),x3o=l(),N2=a("li"),Kie=a("strong"),$3o=o("xlm-roberta"),k3o=o(" \u2014 "),Tj=a("a"),S3o=o("XLMRobertaForMaskedLM"),R3o=o(" (XLM-RoBERTa model)"),B3o=l(),j2=a("li"),Zie=a("strong"),P3o=o("xlm-roberta-xl"),I3o=o(" \u2014 "),Mj=a("a"),q3o=o("XLMRobertaXLForMaskedLM"),N3o=o(" (XLM-RoBERTa-XL model)"),j3o=l(),D2=a("li"),ede=a("strong"),D3o=o("yoso"),G3o=o(" \u2014 "),Ej=a("a"),O3o=o("YosoForMaskedLM"),V3o=o(" (YOSO model)"),X3o=l(),G2=a("p"),z3o=o("The model is set in evaluation mode by default using "),ode=a("code"),Q3o=o("model.eval()"),W3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=a("code"),H3o=o("model.train()"),U3o=l(),F(O2.$$.fragment),CPe=l(),Ri=a("h2"),V2=a("a"),tde=a("span"),F(R0.$$.fragment),J3o=l(),ade=a("span"),Y3o=o("AutoModelForSeq2SeqLM"),wPe=l(),So=a("div"),F(B0.$$.fragment),K3o=l(),Bi=a("p"),Z3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cj=a("a"),ewo=o("from_pretrained()"),owo=o(" class method or the "),wj=a("a"),rwo=o("from_config()"),two=o(` class
method.`),awo=l(),P0=a("p"),nwo=o("This class cannot be instantiated directly using "),nde=a("code"),swo=o("__init__()"),lwo=o(" (throws an error)."),iwo=l(),nt=a("div"),F(I0.$$.fragment),dwo=l(),sde=a("p"),cwo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fwo=l(),Pi=a("p"),mwo=o(`Note:
Loading a model from its configuration file does `),lde=a("strong"),gwo=o("not"),hwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=a("a"),pwo=o("from_pretrained()"),uwo=o(" to load the model weights."),_wo=l(),F(X2.$$.fragment),bwo=l(),Ke=a("div"),F(q0.$$.fragment),vwo=l(),ide=a("p"),Fwo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Two=l(),$a=a("p"),Mwo=o("The model class to instantiate is selected based on the "),dde=a("code"),Ewo=o("model_type"),Cwo=o(` property of the config object (either
passed as an argument or loaded from `),cde=a("code"),wwo=o("pretrained_model_name_or_path"),Awo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=a("code"),ywo=o("pretrained_model_name_or_path"),Lwo=o(":"),xwo=l(),he=a("ul"),z2=a("li"),mde=a("strong"),$wo=o("bart"),kwo=o(" \u2014 "),yj=a("a"),Swo=o("BartForConditionalGeneration"),Rwo=o(" (BART model)"),Bwo=l(),Q2=a("li"),gde=a("strong"),Pwo=o("bigbird_pegasus"),Iwo=o(" \u2014 "),Lj=a("a"),qwo=o("BigBirdPegasusForConditionalGeneration"),Nwo=o(" (BigBirdPegasus model)"),jwo=l(),W2=a("li"),hde=a("strong"),Dwo=o("blenderbot"),Gwo=o(" \u2014 "),xj=a("a"),Owo=o("BlenderbotForConditionalGeneration"),Vwo=o(" (Blenderbot model)"),Xwo=l(),H2=a("li"),pde=a("strong"),zwo=o("blenderbot-small"),Qwo=o(" \u2014 "),$j=a("a"),Wwo=o("BlenderbotSmallForConditionalGeneration"),Hwo=o(" (BlenderbotSmall model)"),Uwo=l(),U2=a("li"),ude=a("strong"),Jwo=o("encoder-decoder"),Ywo=o(" \u2014 "),kj=a("a"),Kwo=o("EncoderDecoderModel"),Zwo=o(" (Encoder decoder model)"),eAo=l(),J2=a("li"),_de=a("strong"),oAo=o("fsmt"),rAo=o(" \u2014 "),Sj=a("a"),tAo=o("FSMTForConditionalGeneration"),aAo=o(" (FairSeq Machine-Translation model)"),nAo=l(),Y2=a("li"),bde=a("strong"),sAo=o("led"),lAo=o(" \u2014 "),Rj=a("a"),iAo=o("LEDForConditionalGeneration"),dAo=o(" (LED model)"),cAo=l(),K2=a("li"),vde=a("strong"),fAo=o("m2m_100"),mAo=o(" \u2014 "),Bj=a("a"),gAo=o("M2M100ForConditionalGeneration"),hAo=o(" (M2M100 model)"),pAo=l(),Z2=a("li"),Fde=a("strong"),uAo=o("marian"),_Ao=o(" \u2014 "),Pj=a("a"),bAo=o("MarianMTModel"),vAo=o(" (Marian model)"),FAo=l(),e1=a("li"),Tde=a("strong"),TAo=o("mbart"),MAo=o(" \u2014 "),Ij=a("a"),EAo=o("MBartForConditionalGeneration"),CAo=o(" (mBART model)"),wAo=l(),o1=a("li"),Mde=a("strong"),AAo=o("mt5"),yAo=o(" \u2014 "),qj=a("a"),LAo=o("MT5ForConditionalGeneration"),xAo=o(" (mT5 model)"),$Ao=l(),r1=a("li"),Ede=a("strong"),kAo=o("pegasus"),SAo=o(" \u2014 "),Nj=a("a"),RAo=o("PegasusForConditionalGeneration"),BAo=o(" (Pegasus model)"),PAo=l(),t1=a("li"),Cde=a("strong"),IAo=o("plbart"),qAo=o(" \u2014 "),jj=a("a"),NAo=o("PLBartForConditionalGeneration"),jAo=o(" (PLBart model)"),DAo=l(),a1=a("li"),wde=a("strong"),GAo=o("prophetnet"),OAo=o(" \u2014 "),Dj=a("a"),VAo=o("ProphetNetForConditionalGeneration"),XAo=o(" (ProphetNet model)"),zAo=l(),n1=a("li"),Ade=a("strong"),QAo=o("t5"),WAo=o(" \u2014 "),Gj=a("a"),HAo=o("T5ForConditionalGeneration"),UAo=o(" (T5 model)"),JAo=l(),s1=a("li"),yde=a("strong"),YAo=o("tapex"),KAo=o(" \u2014 "),Oj=a("a"),ZAo=o("BartForConditionalGeneration"),e0o=o(" (TAPEX model)"),o0o=l(),l1=a("li"),Lde=a("strong"),r0o=o("xlm-prophetnet"),t0o=o(" \u2014 "),Vj=a("a"),a0o=o("XLMProphetNetForConditionalGeneration"),n0o=o(" (XLMProphetNet model)"),s0o=l(),i1=a("p"),l0o=o("The model is set in evaluation mode by default using "),xde=a("code"),i0o=o("model.eval()"),d0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=a("code"),c0o=o("model.train()"),f0o=l(),F(d1.$$.fragment),APe=l(),Ii=a("h2"),c1=a("a"),kde=a("span"),F(N0.$$.fragment),m0o=l(),Sde=a("span"),g0o=o("AutoModelForSequenceClassification"),yPe=l(),Ro=a("div"),F(j0.$$.fragment),h0o=l(),qi=a("p"),p0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xj=a("a"),u0o=o("from_pretrained()"),_0o=o(" class method or the "),zj=a("a"),b0o=o("from_config()"),v0o=o(` class
method.`),F0o=l(),D0=a("p"),T0o=o("This class cannot be instantiated directly using "),Rde=a("code"),M0o=o("__init__()"),E0o=o(" (throws an error)."),C0o=l(),st=a("div"),F(G0.$$.fragment),w0o=l(),Bde=a("p"),A0o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),y0o=l(),Ni=a("p"),L0o=o(`Note:
Loading a model from its configuration file does `),Pde=a("strong"),x0o=o("not"),$0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),k0o=o("from_pretrained()"),S0o=o(" to load the model weights."),R0o=l(),F(f1.$$.fragment),B0o=l(),Ze=a("div"),F(O0.$$.fragment),P0o=l(),Ide=a("p"),I0o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q0o=l(),ka=a("p"),N0o=o("The model class to instantiate is selected based on the "),qde=a("code"),j0o=o("model_type"),D0o=o(` property of the config object (either
passed as an argument or loaded from `),Nde=a("code"),G0o=o("pretrained_model_name_or_path"),O0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=a("code"),V0o=o("pretrained_model_name_or_path"),X0o=o(":"),z0o=l(),q=a("ul"),m1=a("li"),Dde=a("strong"),Q0o=o("albert"),W0o=o(" \u2014 "),Wj=a("a"),H0o=o("AlbertForSequenceClassification"),U0o=o(" (ALBERT model)"),J0o=l(),g1=a("li"),Gde=a("strong"),Y0o=o("bart"),K0o=o(" \u2014 "),Hj=a("a"),Z0o=o("BartForSequenceClassification"),eyo=o(" (BART model)"),oyo=l(),h1=a("li"),Ode=a("strong"),ryo=o("bert"),tyo=o(" \u2014 "),Uj=a("a"),ayo=o("BertForSequenceClassification"),nyo=o(" (BERT model)"),syo=l(),p1=a("li"),Vde=a("strong"),lyo=o("big_bird"),iyo=o(" \u2014 "),Jj=a("a"),dyo=o("BigBirdForSequenceClassification"),cyo=o(" (BigBird model)"),fyo=l(),u1=a("li"),Xde=a("strong"),myo=o("bigbird_pegasus"),gyo=o(" \u2014 "),Yj=a("a"),hyo=o("BigBirdPegasusForSequenceClassification"),pyo=o(" (BigBirdPegasus model)"),uyo=l(),_1=a("li"),zde=a("strong"),_yo=o("camembert"),byo=o(" \u2014 "),Kj=a("a"),vyo=o("CamembertForSequenceClassification"),Fyo=o(" (CamemBERT model)"),Tyo=l(),b1=a("li"),Qde=a("strong"),Myo=o("canine"),Eyo=o(" \u2014 "),Zj=a("a"),Cyo=o("CanineForSequenceClassification"),wyo=o(" (Canine model)"),Ayo=l(),v1=a("li"),Wde=a("strong"),yyo=o("convbert"),Lyo=o(" \u2014 "),eD=a("a"),xyo=o("ConvBertForSequenceClassification"),$yo=o(" (ConvBERT model)"),kyo=l(),F1=a("li"),Hde=a("strong"),Syo=o("ctrl"),Ryo=o(" \u2014 "),oD=a("a"),Byo=o("CTRLForSequenceClassification"),Pyo=o(" (CTRL model)"),Iyo=l(),T1=a("li"),Ude=a("strong"),qyo=o("data2vec-text"),Nyo=o(" \u2014 "),rD=a("a"),jyo=o("Data2VecTextForSequenceClassification"),Dyo=o(" (Data2VecText model)"),Gyo=l(),M1=a("li"),Jde=a("strong"),Oyo=o("deberta"),Vyo=o(" \u2014 "),tD=a("a"),Xyo=o("DebertaForSequenceClassification"),zyo=o(" (DeBERTa model)"),Qyo=l(),E1=a("li"),Yde=a("strong"),Wyo=o("deberta-v2"),Hyo=o(" \u2014 "),aD=a("a"),Uyo=o("DebertaV2ForSequenceClassification"),Jyo=o(" (DeBERTa-v2 model)"),Yyo=l(),C1=a("li"),Kde=a("strong"),Kyo=o("distilbert"),Zyo=o(" \u2014 "),nD=a("a"),eLo=o("DistilBertForSequenceClassification"),oLo=o(" (DistilBERT model)"),rLo=l(),w1=a("li"),Zde=a("strong"),tLo=o("electra"),aLo=o(" \u2014 "),sD=a("a"),nLo=o("ElectraForSequenceClassification"),sLo=o(" (ELECTRA model)"),lLo=l(),A1=a("li"),ece=a("strong"),iLo=o("flaubert"),dLo=o(" \u2014 "),lD=a("a"),cLo=o("FlaubertForSequenceClassification"),fLo=o(" (FlauBERT model)"),mLo=l(),y1=a("li"),oce=a("strong"),gLo=o("fnet"),hLo=o(" \u2014 "),iD=a("a"),pLo=o("FNetForSequenceClassification"),uLo=o(" (FNet model)"),_Lo=l(),L1=a("li"),rce=a("strong"),bLo=o("funnel"),vLo=o(" \u2014 "),dD=a("a"),FLo=o("FunnelForSequenceClassification"),TLo=o(" (Funnel Transformer model)"),MLo=l(),x1=a("li"),tce=a("strong"),ELo=o("gpt2"),CLo=o(" \u2014 "),cD=a("a"),wLo=o("GPT2ForSequenceClassification"),ALo=o(" (OpenAI GPT-2 model)"),yLo=l(),$1=a("li"),ace=a("strong"),LLo=o("gpt_neo"),xLo=o(" \u2014 "),fD=a("a"),$Lo=o("GPTNeoForSequenceClassification"),kLo=o(" (GPT Neo model)"),SLo=l(),k1=a("li"),nce=a("strong"),RLo=o("gptj"),BLo=o(" \u2014 "),mD=a("a"),PLo=o("GPTJForSequenceClassification"),ILo=o(" (GPT-J model)"),qLo=l(),S1=a("li"),sce=a("strong"),NLo=o("ibert"),jLo=o(" \u2014 "),gD=a("a"),DLo=o("IBertForSequenceClassification"),GLo=o(" (I-BERT model)"),OLo=l(),R1=a("li"),lce=a("strong"),VLo=o("layoutlm"),XLo=o(" \u2014 "),hD=a("a"),zLo=o("LayoutLMForSequenceClassification"),QLo=o(" (LayoutLM model)"),WLo=l(),B1=a("li"),ice=a("strong"),HLo=o("layoutlmv2"),ULo=o(" \u2014 "),pD=a("a"),JLo=o("LayoutLMv2ForSequenceClassification"),YLo=o(" (LayoutLMv2 model)"),KLo=l(),P1=a("li"),dce=a("strong"),ZLo=o("led"),e8o=o(" \u2014 "),uD=a("a"),o8o=o("LEDForSequenceClassification"),r8o=o(" (LED model)"),t8o=l(),I1=a("li"),cce=a("strong"),a8o=o("longformer"),n8o=o(" \u2014 "),_D=a("a"),s8o=o("LongformerForSequenceClassification"),l8o=o(" (Longformer model)"),i8o=l(),q1=a("li"),fce=a("strong"),d8o=o("mbart"),c8o=o(" \u2014 "),bD=a("a"),f8o=o("MBartForSequenceClassification"),m8o=o(" (mBART model)"),g8o=l(),N1=a("li"),mce=a("strong"),h8o=o("megatron-bert"),p8o=o(" \u2014 "),vD=a("a"),u8o=o("MegatronBertForSequenceClassification"),_8o=o(" (MegatronBert model)"),b8o=l(),j1=a("li"),gce=a("strong"),v8o=o("mobilebert"),F8o=o(" \u2014 "),FD=a("a"),T8o=o("MobileBertForSequenceClassification"),M8o=o(" (MobileBERT model)"),E8o=l(),D1=a("li"),hce=a("strong"),C8o=o("mpnet"),w8o=o(" \u2014 "),TD=a("a"),A8o=o("MPNetForSequenceClassification"),y8o=o(" (MPNet model)"),L8o=l(),G1=a("li"),pce=a("strong"),x8o=o("nystromformer"),$8o=o(" \u2014 "),MD=a("a"),k8o=o("NystromformerForSequenceClassification"),S8o=o(" (Nystromformer model)"),R8o=l(),O1=a("li"),uce=a("strong"),B8o=o("openai-gpt"),P8o=o(" \u2014 "),ED=a("a"),I8o=o("OpenAIGPTForSequenceClassification"),q8o=o(" (OpenAI GPT model)"),N8o=l(),V1=a("li"),_ce=a("strong"),j8o=o("perceiver"),D8o=o(" \u2014 "),CD=a("a"),G8o=o("PerceiverForSequenceClassification"),O8o=o(" (Perceiver model)"),V8o=l(),X1=a("li"),bce=a("strong"),X8o=o("plbart"),z8o=o(" \u2014 "),wD=a("a"),Q8o=o("PLBartForSequenceClassification"),W8o=o(" (PLBart model)"),H8o=l(),z1=a("li"),vce=a("strong"),U8o=o("qdqbert"),J8o=o(" \u2014 "),AD=a("a"),Y8o=o("QDQBertForSequenceClassification"),K8o=o(" (QDQBert model)"),Z8o=l(),Q1=a("li"),Fce=a("strong"),exo=o("reformer"),oxo=o(" \u2014 "),yD=a("a"),rxo=o("ReformerForSequenceClassification"),txo=o(" (Reformer model)"),axo=l(),W1=a("li"),Tce=a("strong"),nxo=o("rembert"),sxo=o(" \u2014 "),LD=a("a"),lxo=o("RemBertForSequenceClassification"),ixo=o(" (RemBERT model)"),dxo=l(),H1=a("li"),Mce=a("strong"),cxo=o("roberta"),fxo=o(" \u2014 "),xD=a("a"),mxo=o("RobertaForSequenceClassification"),gxo=o(" (RoBERTa model)"),hxo=l(),U1=a("li"),Ece=a("strong"),pxo=o("roformer"),uxo=o(" \u2014 "),$D=a("a"),_xo=o("RoFormerForSequenceClassification"),bxo=o(" (RoFormer model)"),vxo=l(),J1=a("li"),Cce=a("strong"),Fxo=o("squeezebert"),Txo=o(" \u2014 "),kD=a("a"),Mxo=o("SqueezeBertForSequenceClassification"),Exo=o(" (SqueezeBERT model)"),Cxo=l(),Y1=a("li"),wce=a("strong"),wxo=o("tapas"),Axo=o(" \u2014 "),SD=a("a"),yxo=o("TapasForSequenceClassification"),Lxo=o(" (TAPAS model)"),xxo=l(),K1=a("li"),Ace=a("strong"),$xo=o("tapex"),kxo=o(" \u2014 "),RD=a("a"),Sxo=o("BartForSequenceClassification"),Rxo=o(" (TAPEX model)"),Bxo=l(),Z1=a("li"),yce=a("strong"),Pxo=o("transfo-xl"),Ixo=o(" \u2014 "),BD=a("a"),qxo=o("TransfoXLForSequenceClassification"),Nxo=o(" (Transformer-XL model)"),jxo=l(),eb=a("li"),Lce=a("strong"),Dxo=o("xlm"),Gxo=o(" \u2014 "),PD=a("a"),Oxo=o("XLMForSequenceClassification"),Vxo=o(" (XLM model)"),Xxo=l(),ob=a("li"),xce=a("strong"),zxo=o("xlm-roberta"),Qxo=o(" \u2014 "),ID=a("a"),Wxo=o("XLMRobertaForSequenceClassification"),Hxo=o(" (XLM-RoBERTa model)"),Uxo=l(),rb=a("li"),$ce=a("strong"),Jxo=o("xlm-roberta-xl"),Yxo=o(" \u2014 "),qD=a("a"),Kxo=o("XLMRobertaXLForSequenceClassification"),Zxo=o(" (XLM-RoBERTa-XL model)"),e7o=l(),tb=a("li"),kce=a("strong"),o7o=o("xlnet"),r7o=o(" \u2014 "),ND=a("a"),t7o=o("XLNetForSequenceClassification"),a7o=o(" (XLNet model)"),n7o=l(),ab=a("li"),Sce=a("strong"),s7o=o("yoso"),l7o=o(" \u2014 "),jD=a("a"),i7o=o("YosoForSequenceClassification"),d7o=o(" (YOSO model)"),c7o=l(),nb=a("p"),f7o=o("The model is set in evaluation mode by default using "),Rce=a("code"),m7o=o("model.eval()"),g7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=a("code"),h7o=o("model.train()"),p7o=l(),F(sb.$$.fragment),LPe=l(),ji=a("h2"),lb=a("a"),Pce=a("span"),F(V0.$$.fragment),u7o=l(),Ice=a("span"),_7o=o("AutoModelForMultipleChoice"),xPe=l(),Bo=a("div"),F(X0.$$.fragment),b7o=l(),Di=a("p"),v7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DD=a("a"),F7o=o("from_pretrained()"),T7o=o(" class method or the "),GD=a("a"),M7o=o("from_config()"),E7o=o(` class
method.`),C7o=l(),z0=a("p"),w7o=o("This class cannot be instantiated directly using "),qce=a("code"),A7o=o("__init__()"),y7o=o(" (throws an error)."),L7o=l(),lt=a("div"),F(Q0.$$.fragment),x7o=l(),Nce=a("p"),$7o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),k7o=l(),Gi=a("p"),S7o=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),R7o=o("not"),B7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),P7o=o("from_pretrained()"),I7o=o(" to load the model weights."),q7o=l(),F(ib.$$.fragment),N7o=l(),eo=a("div"),F(W0.$$.fragment),j7o=l(),Dce=a("p"),D7o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),G7o=l(),Sa=a("p"),O7o=o("The model class to instantiate is selected based on the "),Gce=a("code"),V7o=o("model_type"),X7o=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),z7o=o("pretrained_model_name_or_path"),Q7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),W7o=o("pretrained_model_name_or_path"),H7o=o(":"),U7o=l(),Y=a("ul"),db=a("li"),Xce=a("strong"),J7o=o("albert"),Y7o=o(" \u2014 "),VD=a("a"),K7o=o("AlbertForMultipleChoice"),Z7o=o(" (ALBERT model)"),e$o=l(),cb=a("li"),zce=a("strong"),o$o=o("bert"),r$o=o(" \u2014 "),XD=a("a"),t$o=o("BertForMultipleChoice"),a$o=o(" (BERT model)"),n$o=l(),fb=a("li"),Qce=a("strong"),s$o=o("big_bird"),l$o=o(" \u2014 "),zD=a("a"),i$o=o("BigBirdForMultipleChoice"),d$o=o(" (BigBird model)"),c$o=l(),mb=a("li"),Wce=a("strong"),f$o=o("camembert"),m$o=o(" \u2014 "),QD=a("a"),g$o=o("CamembertForMultipleChoice"),h$o=o(" (CamemBERT model)"),p$o=l(),gb=a("li"),Hce=a("strong"),u$o=o("canine"),_$o=o(" \u2014 "),WD=a("a"),b$o=o("CanineForMultipleChoice"),v$o=o(" (Canine model)"),F$o=l(),hb=a("li"),Uce=a("strong"),T$o=o("convbert"),M$o=o(" \u2014 "),HD=a("a"),E$o=o("ConvBertForMultipleChoice"),C$o=o(" (ConvBERT model)"),w$o=l(),pb=a("li"),Jce=a("strong"),A$o=o("data2vec-text"),y$o=o(" \u2014 "),UD=a("a"),L$o=o("Data2VecTextForMultipleChoice"),x$o=o(" (Data2VecText model)"),$$o=l(),ub=a("li"),Yce=a("strong"),k$o=o("distilbert"),S$o=o(" \u2014 "),JD=a("a"),R$o=o("DistilBertForMultipleChoice"),B$o=o(" (DistilBERT model)"),P$o=l(),_b=a("li"),Kce=a("strong"),I$o=o("electra"),q$o=o(" \u2014 "),YD=a("a"),N$o=o("ElectraForMultipleChoice"),j$o=o(" (ELECTRA model)"),D$o=l(),bb=a("li"),Zce=a("strong"),G$o=o("flaubert"),O$o=o(" \u2014 "),KD=a("a"),V$o=o("FlaubertForMultipleChoice"),X$o=o(" (FlauBERT model)"),z$o=l(),vb=a("li"),efe=a("strong"),Q$o=o("fnet"),W$o=o(" \u2014 "),ZD=a("a"),H$o=o("FNetForMultipleChoice"),U$o=o(" (FNet model)"),J$o=l(),Fb=a("li"),ofe=a("strong"),Y$o=o("funnel"),K$o=o(" \u2014 "),eG=a("a"),Z$o=o("FunnelForMultipleChoice"),eko=o(" (Funnel Transformer model)"),oko=l(),Tb=a("li"),rfe=a("strong"),rko=o("ibert"),tko=o(" \u2014 "),oG=a("a"),ako=o("IBertForMultipleChoice"),nko=o(" (I-BERT model)"),sko=l(),Mb=a("li"),tfe=a("strong"),lko=o("longformer"),iko=o(" \u2014 "),rG=a("a"),dko=o("LongformerForMultipleChoice"),cko=o(" (Longformer model)"),fko=l(),Eb=a("li"),afe=a("strong"),mko=o("megatron-bert"),gko=o(" \u2014 "),tG=a("a"),hko=o("MegatronBertForMultipleChoice"),pko=o(" (MegatronBert model)"),uko=l(),Cb=a("li"),nfe=a("strong"),_ko=o("mobilebert"),bko=o(" \u2014 "),aG=a("a"),vko=o("MobileBertForMultipleChoice"),Fko=o(" (MobileBERT model)"),Tko=l(),wb=a("li"),sfe=a("strong"),Mko=o("mpnet"),Eko=o(" \u2014 "),nG=a("a"),Cko=o("MPNetForMultipleChoice"),wko=o(" (MPNet model)"),Ako=l(),Ab=a("li"),lfe=a("strong"),yko=o("nystromformer"),Lko=o(" \u2014 "),sG=a("a"),xko=o("NystromformerForMultipleChoice"),$ko=o(" (Nystromformer model)"),kko=l(),yb=a("li"),ife=a("strong"),Sko=o("qdqbert"),Rko=o(" \u2014 "),lG=a("a"),Bko=o("QDQBertForMultipleChoice"),Pko=o(" (QDQBert model)"),Iko=l(),Lb=a("li"),dfe=a("strong"),qko=o("rembert"),Nko=o(" \u2014 "),iG=a("a"),jko=o("RemBertForMultipleChoice"),Dko=o(" (RemBERT model)"),Gko=l(),xb=a("li"),cfe=a("strong"),Oko=o("roberta"),Vko=o(" \u2014 "),dG=a("a"),Xko=o("RobertaForMultipleChoice"),zko=o(" (RoBERTa model)"),Qko=l(),$b=a("li"),ffe=a("strong"),Wko=o("roformer"),Hko=o(" \u2014 "),cG=a("a"),Uko=o("RoFormerForMultipleChoice"),Jko=o(" (RoFormer model)"),Yko=l(),kb=a("li"),mfe=a("strong"),Kko=o("squeezebert"),Zko=o(" \u2014 "),fG=a("a"),eSo=o("SqueezeBertForMultipleChoice"),oSo=o(" (SqueezeBERT model)"),rSo=l(),Sb=a("li"),gfe=a("strong"),tSo=o("xlm"),aSo=o(" \u2014 "),mG=a("a"),nSo=o("XLMForMultipleChoice"),sSo=o(" (XLM model)"),lSo=l(),Rb=a("li"),hfe=a("strong"),iSo=o("xlm-roberta"),dSo=o(" \u2014 "),gG=a("a"),cSo=o("XLMRobertaForMultipleChoice"),fSo=o(" (XLM-RoBERTa model)"),mSo=l(),Bb=a("li"),pfe=a("strong"),gSo=o("xlm-roberta-xl"),hSo=o(" \u2014 "),hG=a("a"),pSo=o("XLMRobertaXLForMultipleChoice"),uSo=o(" (XLM-RoBERTa-XL model)"),_So=l(),Pb=a("li"),ufe=a("strong"),bSo=o("xlnet"),vSo=o(" \u2014 "),pG=a("a"),FSo=o("XLNetForMultipleChoice"),TSo=o(" (XLNet model)"),MSo=l(),Ib=a("li"),_fe=a("strong"),ESo=o("yoso"),CSo=o(" \u2014 "),uG=a("a"),wSo=o("YosoForMultipleChoice"),ASo=o(" (YOSO model)"),ySo=l(),qb=a("p"),LSo=o("The model is set in evaluation mode by default using "),bfe=a("code"),xSo=o("model.eval()"),$So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),kSo=o("model.train()"),SSo=l(),F(Nb.$$.fragment),$Pe=l(),Oi=a("h2"),jb=a("a"),Ffe=a("span"),F(H0.$$.fragment),RSo=l(),Tfe=a("span"),BSo=o("AutoModelForNextSentencePrediction"),kPe=l(),Po=a("div"),F(U0.$$.fragment),PSo=l(),Vi=a("p"),ISo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_G=a("a"),qSo=o("from_pretrained()"),NSo=o(" class method or the "),bG=a("a"),jSo=o("from_config()"),DSo=o(` class
method.`),GSo=l(),J0=a("p"),OSo=o("This class cannot be instantiated directly using "),Mfe=a("code"),VSo=o("__init__()"),XSo=o(" (throws an error)."),zSo=l(),it=a("div"),F(Y0.$$.fragment),QSo=l(),Efe=a("p"),WSo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HSo=l(),Xi=a("p"),USo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),JSo=o("not"),YSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),KSo=o("from_pretrained()"),ZSo=o(" to load the model weights."),eRo=l(),F(Db.$$.fragment),oRo=l(),oo=a("div"),F(K0.$$.fragment),rRo=l(),wfe=a("p"),tRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aRo=l(),Ra=a("p"),nRo=o("The model class to instantiate is selected based on the "),Afe=a("code"),sRo=o("model_type"),lRo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),iRo=o("pretrained_model_name_or_path"),dRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),cRo=o("pretrained_model_name_or_path"),fRo=o(":"),mRo=l(),Yr=a("ul"),Gb=a("li"),xfe=a("strong"),gRo=o("bert"),hRo=o(" \u2014 "),FG=a("a"),pRo=o("BertForNextSentencePrediction"),uRo=o(" (BERT model)"),_Ro=l(),Ob=a("li"),$fe=a("strong"),bRo=o("fnet"),vRo=o(" \u2014 "),TG=a("a"),FRo=o("FNetForNextSentencePrediction"),TRo=o(" (FNet model)"),MRo=l(),Vb=a("li"),kfe=a("strong"),ERo=o("megatron-bert"),CRo=o(" \u2014 "),MG=a("a"),wRo=o("MegatronBertForNextSentencePrediction"),ARo=o(" (MegatronBert model)"),yRo=l(),Xb=a("li"),Sfe=a("strong"),LRo=o("mobilebert"),xRo=o(" \u2014 "),EG=a("a"),$Ro=o("MobileBertForNextSentencePrediction"),kRo=o(" (MobileBERT model)"),SRo=l(),zb=a("li"),Rfe=a("strong"),RRo=o("qdqbert"),BRo=o(" \u2014 "),CG=a("a"),PRo=o("QDQBertForNextSentencePrediction"),IRo=o(" (QDQBert model)"),qRo=l(),Qb=a("p"),NRo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),jRo=o("model.eval()"),DRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),GRo=o("model.train()"),ORo=l(),F(Wb.$$.fragment),SPe=l(),zi=a("h2"),Hb=a("a"),Ife=a("span"),F(Z0.$$.fragment),VRo=l(),qfe=a("span"),XRo=o("AutoModelForTokenClassification"),RPe=l(),Io=a("div"),F(ey.$$.fragment),zRo=l(),Qi=a("p"),QRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wG=a("a"),WRo=o("from_pretrained()"),HRo=o(" class method or the "),AG=a("a"),URo=o("from_config()"),JRo=o(` class
method.`),YRo=l(),oy=a("p"),KRo=o("This class cannot be instantiated directly using "),Nfe=a("code"),ZRo=o("__init__()"),eBo=o(" (throws an error)."),oBo=l(),dt=a("div"),F(ry.$$.fragment),rBo=l(),jfe=a("p"),tBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),aBo=l(),Wi=a("p"),nBo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),sBo=o("not"),lBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=a("a"),iBo=o("from_pretrained()"),dBo=o(" to load the model weights."),cBo=l(),F(Ub.$$.fragment),fBo=l(),ro=a("div"),F(ty.$$.fragment),mBo=l(),Gfe=a("p"),gBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hBo=l(),Ba=a("p"),pBo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),uBo=o("model_type"),_Bo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),bBo=o("pretrained_model_name_or_path"),vBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),FBo=o("pretrained_model_name_or_path"),TBo=o(":"),MBo=l(),U=a("ul"),Jb=a("li"),zfe=a("strong"),EBo=o("albert"),CBo=o(" \u2014 "),LG=a("a"),wBo=o("AlbertForTokenClassification"),ABo=o(" (ALBERT model)"),yBo=l(),Yb=a("li"),Qfe=a("strong"),LBo=o("bert"),xBo=o(" \u2014 "),xG=a("a"),$Bo=o("BertForTokenClassification"),kBo=o(" (BERT model)"),SBo=l(),Kb=a("li"),Wfe=a("strong"),RBo=o("big_bird"),BBo=o(" \u2014 "),$G=a("a"),PBo=o("BigBirdForTokenClassification"),IBo=o(" (BigBird model)"),qBo=l(),Zb=a("li"),Hfe=a("strong"),NBo=o("camembert"),jBo=o(" \u2014 "),kG=a("a"),DBo=o("CamembertForTokenClassification"),GBo=o(" (CamemBERT model)"),OBo=l(),e5=a("li"),Ufe=a("strong"),VBo=o("canine"),XBo=o(" \u2014 "),SG=a("a"),zBo=o("CanineForTokenClassification"),QBo=o(" (Canine model)"),WBo=l(),o5=a("li"),Jfe=a("strong"),HBo=o("convbert"),UBo=o(" \u2014 "),RG=a("a"),JBo=o("ConvBertForTokenClassification"),YBo=o(" (ConvBERT model)"),KBo=l(),r5=a("li"),Yfe=a("strong"),ZBo=o("data2vec-text"),ePo=o(" \u2014 "),BG=a("a"),oPo=o("Data2VecTextForTokenClassification"),rPo=o(" (Data2VecText model)"),tPo=l(),t5=a("li"),Kfe=a("strong"),aPo=o("deberta"),nPo=o(" \u2014 "),PG=a("a"),sPo=o("DebertaForTokenClassification"),lPo=o(" (DeBERTa model)"),iPo=l(),a5=a("li"),Zfe=a("strong"),dPo=o("deberta-v2"),cPo=o(" \u2014 "),IG=a("a"),fPo=o("DebertaV2ForTokenClassification"),mPo=o(" (DeBERTa-v2 model)"),gPo=l(),n5=a("li"),eme=a("strong"),hPo=o("distilbert"),pPo=o(" \u2014 "),qG=a("a"),uPo=o("DistilBertForTokenClassification"),_Po=o(" (DistilBERT model)"),bPo=l(),s5=a("li"),ome=a("strong"),vPo=o("electra"),FPo=o(" \u2014 "),NG=a("a"),TPo=o("ElectraForTokenClassification"),MPo=o(" (ELECTRA model)"),EPo=l(),l5=a("li"),rme=a("strong"),CPo=o("flaubert"),wPo=o(" \u2014 "),jG=a("a"),APo=o("FlaubertForTokenClassification"),yPo=o(" (FlauBERT model)"),LPo=l(),i5=a("li"),tme=a("strong"),xPo=o("fnet"),$Po=o(" \u2014 "),DG=a("a"),kPo=o("FNetForTokenClassification"),SPo=o(" (FNet model)"),RPo=l(),d5=a("li"),ame=a("strong"),BPo=o("funnel"),PPo=o(" \u2014 "),GG=a("a"),IPo=o("FunnelForTokenClassification"),qPo=o(" (Funnel Transformer model)"),NPo=l(),c5=a("li"),nme=a("strong"),jPo=o("gpt2"),DPo=o(" \u2014 "),OG=a("a"),GPo=o("GPT2ForTokenClassification"),OPo=o(" (OpenAI GPT-2 model)"),VPo=l(),f5=a("li"),sme=a("strong"),XPo=o("ibert"),zPo=o(" \u2014 "),VG=a("a"),QPo=o("IBertForTokenClassification"),WPo=o(" (I-BERT model)"),HPo=l(),m5=a("li"),lme=a("strong"),UPo=o("layoutlm"),JPo=o(" \u2014 "),XG=a("a"),YPo=o("LayoutLMForTokenClassification"),KPo=o(" (LayoutLM model)"),ZPo=l(),g5=a("li"),ime=a("strong"),eIo=o("layoutlmv2"),oIo=o(" \u2014 "),zG=a("a"),rIo=o("LayoutLMv2ForTokenClassification"),tIo=o(" (LayoutLMv2 model)"),aIo=l(),h5=a("li"),dme=a("strong"),nIo=o("longformer"),sIo=o(" \u2014 "),QG=a("a"),lIo=o("LongformerForTokenClassification"),iIo=o(" (Longformer model)"),dIo=l(),p5=a("li"),cme=a("strong"),cIo=o("megatron-bert"),fIo=o(" \u2014 "),WG=a("a"),mIo=o("MegatronBertForTokenClassification"),gIo=o(" (MegatronBert model)"),hIo=l(),u5=a("li"),fme=a("strong"),pIo=o("mobilebert"),uIo=o(" \u2014 "),HG=a("a"),_Io=o("MobileBertForTokenClassification"),bIo=o(" (MobileBERT model)"),vIo=l(),_5=a("li"),mme=a("strong"),FIo=o("mpnet"),TIo=o(" \u2014 "),UG=a("a"),MIo=o("MPNetForTokenClassification"),EIo=o(" (MPNet model)"),CIo=l(),b5=a("li"),gme=a("strong"),wIo=o("nystromformer"),AIo=o(" \u2014 "),JG=a("a"),yIo=o("NystromformerForTokenClassification"),LIo=o(" (Nystromformer model)"),xIo=l(),v5=a("li"),hme=a("strong"),$Io=o("qdqbert"),kIo=o(" \u2014 "),YG=a("a"),SIo=o("QDQBertForTokenClassification"),RIo=o(" (QDQBert model)"),BIo=l(),F5=a("li"),pme=a("strong"),PIo=o("rembert"),IIo=o(" \u2014 "),KG=a("a"),qIo=o("RemBertForTokenClassification"),NIo=o(" (RemBERT model)"),jIo=l(),T5=a("li"),ume=a("strong"),DIo=o("roberta"),GIo=o(" \u2014 "),ZG=a("a"),OIo=o("RobertaForTokenClassification"),VIo=o(" (RoBERTa model)"),XIo=l(),M5=a("li"),_me=a("strong"),zIo=o("roformer"),QIo=o(" \u2014 "),eO=a("a"),WIo=o("RoFormerForTokenClassification"),HIo=o(" (RoFormer model)"),UIo=l(),E5=a("li"),bme=a("strong"),JIo=o("squeezebert"),YIo=o(" \u2014 "),oO=a("a"),KIo=o("SqueezeBertForTokenClassification"),ZIo=o(" (SqueezeBERT model)"),eqo=l(),C5=a("li"),vme=a("strong"),oqo=o("xlm"),rqo=o(" \u2014 "),rO=a("a"),tqo=o("XLMForTokenClassification"),aqo=o(" (XLM model)"),nqo=l(),w5=a("li"),Fme=a("strong"),sqo=o("xlm-roberta"),lqo=o(" \u2014 "),tO=a("a"),iqo=o("XLMRobertaForTokenClassification"),dqo=o(" (XLM-RoBERTa model)"),cqo=l(),A5=a("li"),Tme=a("strong"),fqo=o("xlm-roberta-xl"),mqo=o(" \u2014 "),aO=a("a"),gqo=o("XLMRobertaXLForTokenClassification"),hqo=o(" (XLM-RoBERTa-XL model)"),pqo=l(),y5=a("li"),Mme=a("strong"),uqo=o("xlnet"),_qo=o(" \u2014 "),nO=a("a"),bqo=o("XLNetForTokenClassification"),vqo=o(" (XLNet model)"),Fqo=l(),L5=a("li"),Eme=a("strong"),Tqo=o("yoso"),Mqo=o(" \u2014 "),sO=a("a"),Eqo=o("YosoForTokenClassification"),Cqo=o(" (YOSO model)"),wqo=l(),x5=a("p"),Aqo=o("The model is set in evaluation mode by default using "),Cme=a("code"),yqo=o("model.eval()"),Lqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=a("code"),xqo=o("model.train()"),$qo=l(),F($5.$$.fragment),BPe=l(),Hi=a("h2"),k5=a("a"),Ame=a("span"),F(ay.$$.fragment),kqo=l(),yme=a("span"),Sqo=o("AutoModelForQuestionAnswering"),PPe=l(),qo=a("div"),F(ny.$$.fragment),Rqo=l(),Ui=a("p"),Bqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lO=a("a"),Pqo=o("from_pretrained()"),Iqo=o(" class method or the "),iO=a("a"),qqo=o("from_config()"),Nqo=o(` class
method.`),jqo=l(),sy=a("p"),Dqo=o("This class cannot be instantiated directly using "),Lme=a("code"),Gqo=o("__init__()"),Oqo=o(" (throws an error)."),Vqo=l(),ct=a("div"),F(ly.$$.fragment),Xqo=l(),xme=a("p"),zqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qqo=l(),Ji=a("p"),Wqo=o(`Note:
Loading a model from its configuration file does `),$me=a("strong"),Hqo=o("not"),Uqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=a("a"),Jqo=o("from_pretrained()"),Yqo=o(" to load the model weights."),Kqo=l(),F(S5.$$.fragment),Zqo=l(),to=a("div"),F(iy.$$.fragment),eNo=l(),kme=a("p"),oNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rNo=l(),Pa=a("p"),tNo=o("The model class to instantiate is selected based on the "),Sme=a("code"),aNo=o("model_type"),nNo=o(` property of the config object (either
passed as an argument or loaded from `),Rme=a("code"),sNo=o("pretrained_model_name_or_path"),lNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=a("code"),iNo=o("pretrained_model_name_or_path"),dNo=o(":"),cNo=l(),O=a("ul"),R5=a("li"),Pme=a("strong"),fNo=o("albert"),mNo=o(" \u2014 "),cO=a("a"),gNo=o("AlbertForQuestionAnswering"),hNo=o(" (ALBERT model)"),pNo=l(),B5=a("li"),Ime=a("strong"),uNo=o("bart"),_No=o(" \u2014 "),fO=a("a"),bNo=o("BartForQuestionAnswering"),vNo=o(" (BART model)"),FNo=l(),P5=a("li"),qme=a("strong"),TNo=o("bert"),MNo=o(" \u2014 "),mO=a("a"),ENo=o("BertForQuestionAnswering"),CNo=o(" (BERT model)"),wNo=l(),I5=a("li"),Nme=a("strong"),ANo=o("big_bird"),yNo=o(" \u2014 "),gO=a("a"),LNo=o("BigBirdForQuestionAnswering"),xNo=o(" (BigBird model)"),$No=l(),q5=a("li"),jme=a("strong"),kNo=o("bigbird_pegasus"),SNo=o(" \u2014 "),hO=a("a"),RNo=o("BigBirdPegasusForQuestionAnswering"),BNo=o(" (BigBirdPegasus model)"),PNo=l(),N5=a("li"),Dme=a("strong"),INo=o("camembert"),qNo=o(" \u2014 "),pO=a("a"),NNo=o("CamembertForQuestionAnswering"),jNo=o(" (CamemBERT model)"),DNo=l(),j5=a("li"),Gme=a("strong"),GNo=o("canine"),ONo=o(" \u2014 "),uO=a("a"),VNo=o("CanineForQuestionAnswering"),XNo=o(" (Canine model)"),zNo=l(),D5=a("li"),Ome=a("strong"),QNo=o("convbert"),WNo=o(" \u2014 "),_O=a("a"),HNo=o("ConvBertForQuestionAnswering"),UNo=o(" (ConvBERT model)"),JNo=l(),G5=a("li"),Vme=a("strong"),YNo=o("data2vec-text"),KNo=o(" \u2014 "),bO=a("a"),ZNo=o("Data2VecTextForQuestionAnswering"),ejo=o(" (Data2VecText model)"),ojo=l(),O5=a("li"),Xme=a("strong"),rjo=o("deberta"),tjo=o(" \u2014 "),vO=a("a"),ajo=o("DebertaForQuestionAnswering"),njo=o(" (DeBERTa model)"),sjo=l(),V5=a("li"),zme=a("strong"),ljo=o("deberta-v2"),ijo=o(" \u2014 "),FO=a("a"),djo=o("DebertaV2ForQuestionAnswering"),cjo=o(" (DeBERTa-v2 model)"),fjo=l(),X5=a("li"),Qme=a("strong"),mjo=o("distilbert"),gjo=o(" \u2014 "),TO=a("a"),hjo=o("DistilBertForQuestionAnswering"),pjo=o(" (DistilBERT model)"),ujo=l(),z5=a("li"),Wme=a("strong"),_jo=o("electra"),bjo=o(" \u2014 "),MO=a("a"),vjo=o("ElectraForQuestionAnswering"),Fjo=o(" (ELECTRA model)"),Tjo=l(),Q5=a("li"),Hme=a("strong"),Mjo=o("flaubert"),Ejo=o(" \u2014 "),EO=a("a"),Cjo=o("FlaubertForQuestionAnsweringSimple"),wjo=o(" (FlauBERT model)"),Ajo=l(),W5=a("li"),Ume=a("strong"),yjo=o("fnet"),Ljo=o(" \u2014 "),CO=a("a"),xjo=o("FNetForQuestionAnswering"),$jo=o(" (FNet model)"),kjo=l(),H5=a("li"),Jme=a("strong"),Sjo=o("funnel"),Rjo=o(" \u2014 "),wO=a("a"),Bjo=o("FunnelForQuestionAnswering"),Pjo=o(" (Funnel Transformer model)"),Ijo=l(),U5=a("li"),Yme=a("strong"),qjo=o("gptj"),Njo=o(" \u2014 "),AO=a("a"),jjo=o("GPTJForQuestionAnswering"),Djo=o(" (GPT-J model)"),Gjo=l(),J5=a("li"),Kme=a("strong"),Ojo=o("ibert"),Vjo=o(" \u2014 "),yO=a("a"),Xjo=o("IBertForQuestionAnswering"),zjo=o(" (I-BERT model)"),Qjo=l(),Y5=a("li"),Zme=a("strong"),Wjo=o("layoutlmv2"),Hjo=o(" \u2014 "),LO=a("a"),Ujo=o("LayoutLMv2ForQuestionAnswering"),Jjo=o(" (LayoutLMv2 model)"),Yjo=l(),K5=a("li"),ege=a("strong"),Kjo=o("led"),Zjo=o(" \u2014 "),xO=a("a"),eDo=o("LEDForQuestionAnswering"),oDo=o(" (LED model)"),rDo=l(),Z5=a("li"),oge=a("strong"),tDo=o("longformer"),aDo=o(" \u2014 "),$O=a("a"),nDo=o("LongformerForQuestionAnswering"),sDo=o(" (Longformer model)"),lDo=l(),ev=a("li"),rge=a("strong"),iDo=o("lxmert"),dDo=o(" \u2014 "),kO=a("a"),cDo=o("LxmertForQuestionAnswering"),fDo=o(" (LXMERT model)"),mDo=l(),ov=a("li"),tge=a("strong"),gDo=o("mbart"),hDo=o(" \u2014 "),SO=a("a"),pDo=o("MBartForQuestionAnswering"),uDo=o(" (mBART model)"),_Do=l(),rv=a("li"),age=a("strong"),bDo=o("megatron-bert"),vDo=o(" \u2014 "),RO=a("a"),FDo=o("MegatronBertForQuestionAnswering"),TDo=o(" (MegatronBert model)"),MDo=l(),tv=a("li"),nge=a("strong"),EDo=o("mobilebert"),CDo=o(" \u2014 "),BO=a("a"),wDo=o("MobileBertForQuestionAnswering"),ADo=o(" (MobileBERT model)"),yDo=l(),av=a("li"),sge=a("strong"),LDo=o("mpnet"),xDo=o(" \u2014 "),PO=a("a"),$Do=o("MPNetForQuestionAnswering"),kDo=o(" (MPNet model)"),SDo=l(),nv=a("li"),lge=a("strong"),RDo=o("nystromformer"),BDo=o(" \u2014 "),IO=a("a"),PDo=o("NystromformerForQuestionAnswering"),IDo=o(" (Nystromformer model)"),qDo=l(),sv=a("li"),ige=a("strong"),NDo=o("qdqbert"),jDo=o(" \u2014 "),qO=a("a"),DDo=o("QDQBertForQuestionAnswering"),GDo=o(" (QDQBert model)"),ODo=l(),lv=a("li"),dge=a("strong"),VDo=o("reformer"),XDo=o(" \u2014 "),NO=a("a"),zDo=o("ReformerForQuestionAnswering"),QDo=o(" (Reformer model)"),WDo=l(),iv=a("li"),cge=a("strong"),HDo=o("rembert"),UDo=o(" \u2014 "),jO=a("a"),JDo=o("RemBertForQuestionAnswering"),YDo=o(" (RemBERT model)"),KDo=l(),dv=a("li"),fge=a("strong"),ZDo=o("roberta"),eGo=o(" \u2014 "),DO=a("a"),oGo=o("RobertaForQuestionAnswering"),rGo=o(" (RoBERTa model)"),tGo=l(),cv=a("li"),mge=a("strong"),aGo=o("roformer"),nGo=o(" \u2014 "),GO=a("a"),sGo=o("RoFormerForQuestionAnswering"),lGo=o(" (RoFormer model)"),iGo=l(),fv=a("li"),gge=a("strong"),dGo=o("splinter"),cGo=o(" \u2014 "),OO=a("a"),fGo=o("SplinterForQuestionAnswering"),mGo=o(" (Splinter model)"),gGo=l(),mv=a("li"),hge=a("strong"),hGo=o("squeezebert"),pGo=o(" \u2014 "),VO=a("a"),uGo=o("SqueezeBertForQuestionAnswering"),_Go=o(" (SqueezeBERT model)"),bGo=l(),gv=a("li"),pge=a("strong"),vGo=o("xlm"),FGo=o(" \u2014 "),XO=a("a"),TGo=o("XLMForQuestionAnsweringSimple"),MGo=o(" (XLM model)"),EGo=l(),hv=a("li"),uge=a("strong"),CGo=o("xlm-roberta"),wGo=o(" \u2014 "),zO=a("a"),AGo=o("XLMRobertaForQuestionAnswering"),yGo=o(" (XLM-RoBERTa model)"),LGo=l(),pv=a("li"),_ge=a("strong"),xGo=o("xlm-roberta-xl"),$Go=o(" \u2014 "),QO=a("a"),kGo=o("XLMRobertaXLForQuestionAnswering"),SGo=o(" (XLM-RoBERTa-XL model)"),RGo=l(),uv=a("li"),bge=a("strong"),BGo=o("xlnet"),PGo=o(" \u2014 "),WO=a("a"),IGo=o("XLNetForQuestionAnsweringSimple"),qGo=o(" (XLNet model)"),NGo=l(),_v=a("li"),vge=a("strong"),jGo=o("yoso"),DGo=o(" \u2014 "),HO=a("a"),GGo=o("YosoForQuestionAnswering"),OGo=o(" (YOSO model)"),VGo=l(),bv=a("p"),XGo=o("The model is set in evaluation mode by default using "),Fge=a("code"),zGo=o("model.eval()"),QGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),WGo=o("model.train()"),HGo=l(),F(vv.$$.fragment),IPe=l(),Yi=a("h2"),Fv=a("a"),Mge=a("span"),F(dy.$$.fragment),UGo=l(),Ege=a("span"),JGo=o("AutoModelForTableQuestionAnswering"),qPe=l(),No=a("div"),F(cy.$$.fragment),YGo=l(),Ki=a("p"),KGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UO=a("a"),ZGo=o("from_pretrained()"),eOo=o(" class method or the "),JO=a("a"),oOo=o("from_config()"),rOo=o(` class
method.`),tOo=l(),fy=a("p"),aOo=o("This class cannot be instantiated directly using "),Cge=a("code"),nOo=o("__init__()"),sOo=o(" (throws an error)."),lOo=l(),ft=a("div"),F(my.$$.fragment),iOo=l(),wge=a("p"),dOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),cOo=l(),Zi=a("p"),fOo=o(`Note:
Loading a model from its configuration file does `),Age=a("strong"),mOo=o("not"),gOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),hOo=o("from_pretrained()"),pOo=o(" to load the model weights."),uOo=l(),F(Tv.$$.fragment),_Oo=l(),ao=a("div"),F(gy.$$.fragment),bOo=l(),yge=a("p"),vOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FOo=l(),Ia=a("p"),TOo=o("The model class to instantiate is selected based on the "),Lge=a("code"),MOo=o("model_type"),EOo=o(` property of the config object (either
passed as an argument or loaded from `),xge=a("code"),COo=o("pretrained_model_name_or_path"),wOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=a("code"),AOo=o("pretrained_model_name_or_path"),yOo=o(":"),LOo=l(),kge=a("ul"),Mv=a("li"),Sge=a("strong"),xOo=o("tapas"),$Oo=o(" \u2014 "),KO=a("a"),kOo=o("TapasForQuestionAnswering"),SOo=o(" (TAPAS model)"),ROo=l(),Ev=a("p"),BOo=o("The model is set in evaluation mode by default using "),Rge=a("code"),POo=o("model.eval()"),IOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=a("code"),qOo=o("model.train()"),NOo=l(),F(Cv.$$.fragment),NPe=l(),ed=a("h2"),wv=a("a"),Pge=a("span"),F(hy.$$.fragment),jOo=l(),Ige=a("span"),DOo=o("AutoModelForImageClassification"),jPe=l(),jo=a("div"),F(py.$$.fragment),GOo=l(),od=a("p"),OOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZO=a("a"),VOo=o("from_pretrained()"),XOo=o(" class method or the "),eV=a("a"),zOo=o("from_config()"),QOo=o(` class
method.`),WOo=l(),uy=a("p"),HOo=o("This class cannot be instantiated directly using "),qge=a("code"),UOo=o("__init__()"),JOo=o(" (throws an error)."),YOo=l(),mt=a("div"),F(_y.$$.fragment),KOo=l(),Nge=a("p"),ZOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),eVo=l(),rd=a("p"),oVo=o(`Note:
Loading a model from its configuration file does `),jge=a("strong"),rVo=o("not"),tVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=a("a"),aVo=o("from_pretrained()"),nVo=o(" to load the model weights."),sVo=l(),F(Av.$$.fragment),lVo=l(),no=a("div"),F(by.$$.fragment),iVo=l(),Dge=a("p"),dVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cVo=l(),qa=a("p"),fVo=o("The model class to instantiate is selected based on the "),Gge=a("code"),mVo=o("model_type"),gVo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),hVo=o("pretrained_model_name_or_path"),pVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),uVo=o("pretrained_model_name_or_path"),_Vo=o(":"),bVo=l(),ve=a("ul"),yv=a("li"),Xge=a("strong"),vVo=o("beit"),FVo=o(" \u2014 "),rV=a("a"),TVo=o("BeitForImageClassification"),MVo=o(" (BEiT model)"),EVo=l(),Lv=a("li"),zge=a("strong"),CVo=o("convnext"),wVo=o(" \u2014 "),tV=a("a"),AVo=o("ConvNextForImageClassification"),yVo=o(" (ConvNext model)"),LVo=l(),xv=a("li"),Qge=a("strong"),xVo=o("data2vec-vision"),$Vo=o(" \u2014 "),aV=a("a"),kVo=o("Data2VecVisionForImageClassification"),SVo=o(" (Data2VecVision model)"),RVo=l(),Rs=a("li"),Wge=a("strong"),BVo=o("deit"),PVo=o(" \u2014 "),nV=a("a"),IVo=o("DeiTForImageClassification"),qVo=o(" or "),sV=a("a"),NVo=o("DeiTForImageClassificationWithTeacher"),jVo=o(" (DeiT model)"),DVo=l(),$v=a("li"),Hge=a("strong"),GVo=o("imagegpt"),OVo=o(" \u2014 "),lV=a("a"),VVo=o("ImageGPTForImageClassification"),XVo=o(" (ImageGPT model)"),zVo=l(),gt=a("li"),Uge=a("strong"),QVo=o("perceiver"),WVo=o(" \u2014 "),iV=a("a"),HVo=o("PerceiverForImageClassificationLearned"),UVo=o(" or "),dV=a("a"),JVo=o("PerceiverForImageClassificationFourier"),YVo=o(" or "),cV=a("a"),KVo=o("PerceiverForImageClassificationConvProcessing"),ZVo=o(" (Perceiver model)"),eXo=l(),kv=a("li"),Jge=a("strong"),oXo=o("poolformer"),rXo=o(" \u2014 "),fV=a("a"),tXo=o("PoolFormerForImageClassification"),aXo=o(" (PoolFormer model)"),nXo=l(),Sv=a("li"),Yge=a("strong"),sXo=o("regnet"),lXo=o(" \u2014 "),mV=a("a"),iXo=o("RegNetForImageClassification"),dXo=o(" (RegNet model)"),cXo=l(),Rv=a("li"),Kge=a("strong"),fXo=o("resnet"),mXo=o(" \u2014 "),gV=a("a"),gXo=o("ResNetForImageClassification"),hXo=o(" (ResNet model)"),pXo=l(),Bv=a("li"),Zge=a("strong"),uXo=o("segformer"),_Xo=o(" \u2014 "),hV=a("a"),bXo=o("SegformerForImageClassification"),vXo=o(" (SegFormer model)"),FXo=l(),Pv=a("li"),ehe=a("strong"),TXo=o("swin"),MXo=o(" \u2014 "),pV=a("a"),EXo=o("SwinForImageClassification"),CXo=o(" (Swin model)"),wXo=l(),Iv=a("li"),ohe=a("strong"),AXo=o("van"),yXo=o(" \u2014 "),uV=a("a"),LXo=o("VanForImageClassification"),xXo=o(" (VAN model)"),$Xo=l(),qv=a("li"),rhe=a("strong"),kXo=o("vit"),SXo=o(" \u2014 "),_V=a("a"),RXo=o("ViTForImageClassification"),BXo=o(" (ViT model)"),PXo=l(),Nv=a("p"),IXo=o("The model is set in evaluation mode by default using "),the=a("code"),qXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=a("code"),jXo=o("model.train()"),DXo=l(),F(jv.$$.fragment),DPe=l(),td=a("h2"),Dv=a("a"),nhe=a("span"),F(vy.$$.fragment),GXo=l(),she=a("span"),OXo=o("AutoModelForVision2Seq"),GPe=l(),Do=a("div"),F(Fy.$$.fragment),VXo=l(),ad=a("p"),XXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bV=a("a"),zXo=o("from_pretrained()"),QXo=o(" class method or the "),vV=a("a"),WXo=o("from_config()"),HXo=o(` class
method.`),UXo=l(),Ty=a("p"),JXo=o("This class cannot be instantiated directly using "),lhe=a("code"),YXo=o("__init__()"),KXo=o(" (throws an error)."),ZXo=l(),ht=a("div"),F(My.$$.fragment),ezo=l(),ihe=a("p"),ozo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rzo=l(),nd=a("p"),tzo=o(`Note:
Loading a model from its configuration file does `),dhe=a("strong"),azo=o("not"),nzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),szo=o("from_pretrained()"),lzo=o(" to load the model weights."),izo=l(),F(Gv.$$.fragment),dzo=l(),so=a("div"),F(Ey.$$.fragment),czo=l(),che=a("p"),fzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mzo=l(),Na=a("p"),gzo=o("The model class to instantiate is selected based on the "),fhe=a("code"),hzo=o("model_type"),pzo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),uzo=o("pretrained_model_name_or_path"),_zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),bzo=o("pretrained_model_name_or_path"),vzo=o(":"),Fzo=l(),hhe=a("ul"),Ov=a("li"),phe=a("strong"),Tzo=o("vision-encoder-decoder"),Mzo=o(" \u2014 "),TV=a("a"),Ezo=o("VisionEncoderDecoderModel"),Czo=o(" (Vision Encoder decoder model)"),wzo=l(),Vv=a("p"),Azo=o("The model is set in evaluation mode by default using "),uhe=a("code"),yzo=o("model.eval()"),Lzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),xzo=o("model.train()"),$zo=l(),F(Xv.$$.fragment),OPe=l(),sd=a("h2"),zv=a("a"),bhe=a("span"),F(Cy.$$.fragment),kzo=l(),vhe=a("span"),Szo=o("AutoModelForAudioClassification"),VPe=l(),Go=a("div"),F(wy.$$.fragment),Rzo=l(),ld=a("p"),Bzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),MV=a("a"),Pzo=o("from_pretrained()"),Izo=o(" class method or the "),EV=a("a"),qzo=o("from_config()"),Nzo=o(` class
method.`),jzo=l(),Ay=a("p"),Dzo=o("This class cannot be instantiated directly using "),Fhe=a("code"),Gzo=o("__init__()"),Ozo=o(" (throws an error)."),Vzo=l(),pt=a("div"),F(yy.$$.fragment),Xzo=l(),The=a("p"),zzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qzo=l(),id=a("p"),Wzo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),Hzo=o("not"),Uzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),Jzo=o("from_pretrained()"),Yzo=o(" to load the model weights."),Kzo=l(),F(Qv.$$.fragment),Zzo=l(),lo=a("div"),F(Ly.$$.fragment),eQo=l(),Ehe=a("p"),oQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rQo=l(),ja=a("p"),tQo=o("The model class to instantiate is selected based on the "),Che=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Ne=a("ul"),Wv=a("li"),yhe=a("strong"),fQo=o("data2vec-audio"),mQo=o(" \u2014 "),wV=a("a"),gQo=o("Data2VecAudioForSequenceClassification"),hQo=o(" (Data2VecAudio model)"),pQo=l(),Hv=a("li"),Lhe=a("strong"),uQo=o("hubert"),_Qo=o(" \u2014 "),AV=a("a"),bQo=o("HubertForSequenceClassification"),vQo=o(" (Hubert model)"),FQo=l(),Uv=a("li"),xhe=a("strong"),TQo=o("sew"),MQo=o(" \u2014 "),yV=a("a"),EQo=o("SEWForSequenceClassification"),CQo=o(" (SEW model)"),wQo=l(),Jv=a("li"),$he=a("strong"),AQo=o("sew-d"),yQo=o(" \u2014 "),LV=a("a"),LQo=o("SEWDForSequenceClassification"),xQo=o(" (SEW-D model)"),$Qo=l(),Yv=a("li"),khe=a("strong"),kQo=o("unispeech"),SQo=o(" \u2014 "),xV=a("a"),RQo=o("UniSpeechForSequenceClassification"),BQo=o(" (UniSpeech model)"),PQo=l(),Kv=a("li"),She=a("strong"),IQo=o("unispeech-sat"),qQo=o(" \u2014 "),$V=a("a"),NQo=o("UniSpeechSatForSequenceClassification"),jQo=o(" (UniSpeechSat model)"),DQo=l(),Zv=a("li"),Rhe=a("strong"),GQo=o("wav2vec2"),OQo=o(" \u2014 "),kV=a("a"),VQo=o("Wav2Vec2ForSequenceClassification"),XQo=o(" (Wav2Vec2 model)"),zQo=l(),eF=a("li"),Bhe=a("strong"),QQo=o("wavlm"),WQo=o(" \u2014 "),SV=a("a"),HQo=o("WavLMForSequenceClassification"),UQo=o(" (WavLM model)"),JQo=l(),oF=a("p"),YQo=o("The model is set in evaluation mode by default using "),Phe=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=a("code"),eWo=o("model.train()"),oWo=l(),F(rF.$$.fragment),XPe=l(),dd=a("h2"),tF=a("a"),qhe=a("span"),F(xy.$$.fragment),rWo=l(),Nhe=a("span"),tWo=o("AutoModelForAudioFrameClassification"),zPe=l(),Oo=a("div"),F($y.$$.fragment),aWo=l(),cd=a("p"),nWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RV=a("a"),sWo=o("from_pretrained()"),lWo=o(" class method or the "),BV=a("a"),iWo=o("from_config()"),dWo=o(` class
method.`),cWo=l(),ky=a("p"),fWo=o("This class cannot be instantiated directly using "),jhe=a("code"),mWo=o("__init__()"),gWo=o(" (throws an error)."),hWo=l(),ut=a("div"),F(Sy.$$.fragment),pWo=l(),Dhe=a("p"),uWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),_Wo=l(),fd=a("p"),bWo=o(`Note:
Loading a model from its configuration file does `),Ghe=a("strong"),vWo=o("not"),FWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),TWo=o("from_pretrained()"),MWo=o(" to load the model weights."),EWo=l(),F(aF.$$.fragment),CWo=l(),io=a("div"),F(Ry.$$.fragment),wWo=l(),Ohe=a("p"),AWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),yWo=l(),Da=a("p"),LWo=o("The model class to instantiate is selected based on the "),Vhe=a("code"),xWo=o("model_type"),$Wo=o(` property of the config object (either
passed as an argument or loaded from `),Xhe=a("code"),kWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=a("code"),RWo=o("pretrained_model_name_or_path"),BWo=o(":"),PWo=l(),Ga=a("ul"),nF=a("li"),Qhe=a("strong"),IWo=o("data2vec-audio"),qWo=o(" \u2014 "),IV=a("a"),NWo=o("Data2VecAudioForAudioFrameClassification"),jWo=o(" (Data2VecAudio model)"),DWo=l(),sF=a("li"),Whe=a("strong"),GWo=o("unispeech-sat"),OWo=o(" \u2014 "),qV=a("a"),VWo=o("UniSpeechSatForAudioFrameClassification"),XWo=o(" (UniSpeechSat model)"),zWo=l(),lF=a("li"),Hhe=a("strong"),QWo=o("wav2vec2"),WWo=o(" \u2014 "),NV=a("a"),HWo=o("Wav2Vec2ForAudioFrameClassification"),UWo=o(" (Wav2Vec2 model)"),JWo=l(),iF=a("li"),Uhe=a("strong"),YWo=o("wavlm"),KWo=o(" \u2014 "),jV=a("a"),ZWo=o("WavLMForAudioFrameClassification"),eHo=o(" (WavLM model)"),oHo=l(),dF=a("p"),rHo=o("The model is set in evaluation mode by default using "),Jhe=a("code"),tHo=o("model.eval()"),aHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=a("code"),nHo=o("model.train()"),sHo=l(),F(cF.$$.fragment),QPe=l(),md=a("h2"),fF=a("a"),Khe=a("span"),F(By.$$.fragment),lHo=l(),Zhe=a("span"),iHo=o("AutoModelForCTC"),WPe=l(),Vo=a("div"),F(Py.$$.fragment),dHo=l(),gd=a("p"),cHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DV=a("a"),fHo=o("from_pretrained()"),mHo=o(" class method or the "),GV=a("a"),gHo=o("from_config()"),hHo=o(` class
method.`),pHo=l(),Iy=a("p"),uHo=o("This class cannot be instantiated directly using "),epe=a("code"),_Ho=o("__init__()"),bHo=o(" (throws an error)."),vHo=l(),_t=a("div"),F(qy.$$.fragment),FHo=l(),ope=a("p"),THo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),MHo=l(),hd=a("p"),EHo=o(`Note:
Loading a model from its configuration file does `),rpe=a("strong"),CHo=o("not"),wHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=a("a"),AHo=o("from_pretrained()"),yHo=o(" to load the model weights."),LHo=l(),F(mF.$$.fragment),xHo=l(),co=a("div"),F(Ny.$$.fragment),$Ho=l(),tpe=a("p"),kHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),SHo=l(),Oa=a("p"),RHo=o("The model class to instantiate is selected based on the "),ape=a("code"),BHo=o("model_type"),PHo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),IHo=o("pretrained_model_name_or_path"),qHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),NHo=o("pretrained_model_name_or_path"),jHo=o(":"),DHo=l(),je=a("ul"),gF=a("li"),lpe=a("strong"),GHo=o("data2vec-audio"),OHo=o(" \u2014 "),VV=a("a"),VHo=o("Data2VecAudioForCTC"),XHo=o(" (Data2VecAudio model)"),zHo=l(),hF=a("li"),ipe=a("strong"),QHo=o("hubert"),WHo=o(" \u2014 "),XV=a("a"),HHo=o("HubertForCTC"),UHo=o(" (Hubert model)"),JHo=l(),pF=a("li"),dpe=a("strong"),YHo=o("sew"),KHo=o(" \u2014 "),zV=a("a"),ZHo=o("SEWForCTC"),eUo=o(" (SEW model)"),oUo=l(),uF=a("li"),cpe=a("strong"),rUo=o("sew-d"),tUo=o(" \u2014 "),QV=a("a"),aUo=o("SEWDForCTC"),nUo=o(" (SEW-D model)"),sUo=l(),_F=a("li"),fpe=a("strong"),lUo=o("unispeech"),iUo=o(" \u2014 "),WV=a("a"),dUo=o("UniSpeechForCTC"),cUo=o(" (UniSpeech model)"),fUo=l(),bF=a("li"),mpe=a("strong"),mUo=o("unispeech-sat"),gUo=o(" \u2014 "),HV=a("a"),hUo=o("UniSpeechSatForCTC"),pUo=o(" (UniSpeechSat model)"),uUo=l(),vF=a("li"),gpe=a("strong"),_Uo=o("wav2vec2"),bUo=o(" \u2014 "),UV=a("a"),vUo=o("Wav2Vec2ForCTC"),FUo=o(" (Wav2Vec2 model)"),TUo=l(),FF=a("li"),hpe=a("strong"),MUo=o("wavlm"),EUo=o(" \u2014 "),JV=a("a"),CUo=o("WavLMForCTC"),wUo=o(" (WavLM model)"),AUo=l(),TF=a("p"),yUo=o("The model is set in evaluation mode by default using "),ppe=a("code"),LUo=o("model.eval()"),xUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),$Uo=o("model.train()"),kUo=l(),F(MF.$$.fragment),HPe=l(),pd=a("h2"),EF=a("a"),_pe=a("span"),F(jy.$$.fragment),SUo=l(),bpe=a("span"),RUo=o("AutoModelForSpeechSeq2Seq"),UPe=l(),Xo=a("div"),F(Dy.$$.fragment),BUo=l(),ud=a("p"),PUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YV=a("a"),IUo=o("from_pretrained()"),qUo=o(" class method or the "),KV=a("a"),NUo=o("from_config()"),jUo=o(` class
method.`),DUo=l(),Gy=a("p"),GUo=o("This class cannot be instantiated directly using "),vpe=a("code"),OUo=o("__init__()"),VUo=o(" (throws an error)."),XUo=l(),bt=a("div"),F(Oy.$$.fragment),zUo=l(),Fpe=a("p"),QUo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),WUo=l(),_d=a("p"),HUo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),UUo=o("not"),JUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=a("a"),YUo=o("from_pretrained()"),KUo=o(" to load the model weights."),ZUo=l(),F(CF.$$.fragment),eJo=l(),fo=a("div"),F(Vy.$$.fragment),oJo=l(),Mpe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tJo=l(),Va=a("p"),aJo=o("The model class to instantiate is selected based on the "),Epe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),fJo=l(),Xy=a("ul"),wF=a("li"),Ape=a("strong"),mJo=o("speech-encoder-decoder"),gJo=o(" \u2014 "),eX=a("a"),hJo=o("SpeechEncoderDecoderModel"),pJo=o(" (Speech Encoder decoder model)"),uJo=l(),AF=a("li"),ype=a("strong"),_Jo=o("speech_to_text"),bJo=o(" \u2014 "),oX=a("a"),vJo=o("Speech2TextForConditionalGeneration"),FJo=o(" (Speech2Text model)"),TJo=l(),yF=a("p"),MJo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),EJo=o("model.eval()"),CJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),wJo=o("model.train()"),AJo=l(),F(LF.$$.fragment),JPe=l(),bd=a("h2"),xF=a("a"),$pe=a("span"),F(zy.$$.fragment),yJo=l(),kpe=a("span"),LJo=o("AutoModelForAudioXVector"),YPe=l(),zo=a("div"),F(Qy.$$.fragment),xJo=l(),vd=a("p"),$Jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rX=a("a"),kJo=o("from_pretrained()"),SJo=o(" class method or the "),tX=a("a"),RJo=o("from_config()"),BJo=o(` class
method.`),PJo=l(),Wy=a("p"),IJo=o("This class cannot be instantiated directly using "),Spe=a("code"),qJo=o("__init__()"),NJo=o(" (throws an error)."),jJo=l(),vt=a("div"),F(Hy.$$.fragment),DJo=l(),Rpe=a("p"),GJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),OJo=l(),Fd=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),XJo=o("not"),zJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),QJo=o("from_pretrained()"),WJo=o(" to load the model weights."),HJo=l(),F($F.$$.fragment),UJo=l(),mo=a("div"),F(Uy.$$.fragment),JJo=l(),Ppe=a("p"),YJo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),KJo=l(),Xa=a("p"),ZJo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),eYo=o("model_type"),oYo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),rYo=o("pretrained_model_name_or_path"),tYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(":"),sYo=l(),za=a("ul"),kF=a("li"),jpe=a("strong"),lYo=o("data2vec-audio"),iYo=o(" \u2014 "),nX=a("a"),dYo=o("Data2VecAudioForXVector"),cYo=o(" (Data2VecAudio model)"),fYo=l(),SF=a("li"),Dpe=a("strong"),mYo=o("unispeech-sat"),gYo=o(" \u2014 "),sX=a("a"),hYo=o("UniSpeechSatForXVector"),pYo=o(" (UniSpeechSat model)"),uYo=l(),RF=a("li"),Gpe=a("strong"),_Yo=o("wav2vec2"),bYo=o(" \u2014 "),lX=a("a"),vYo=o("Wav2Vec2ForXVector"),FYo=o(" (Wav2Vec2 model)"),TYo=l(),BF=a("li"),Ope=a("strong"),MYo=o("wavlm"),EYo=o(" \u2014 "),iX=a("a"),CYo=o("WavLMForXVector"),wYo=o(" (WavLM model)"),AYo=l(),PF=a("p"),yYo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),LYo=o("model.eval()"),xYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),$Yo=o("model.train()"),kYo=l(),F(IF.$$.fragment),KPe=l(),Td=a("h2"),qF=a("a"),zpe=a("span"),F(Jy.$$.fragment),SYo=l(),Qpe=a("span"),RYo=o("AutoModelForMaskedImageModeling"),ZPe=l(),Qo=a("div"),F(Yy.$$.fragment),BYo=l(),Md=a("p"),PYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dX=a("a"),IYo=o("from_pretrained()"),qYo=o(" class method or the "),cX=a("a"),NYo=o("from_config()"),jYo=o(` class
method.`),DYo=l(),Ky=a("p"),GYo=o("This class cannot be instantiated directly using "),Wpe=a("code"),OYo=o("__init__()"),VYo=o(" (throws an error)."),XYo=l(),Ft=a("div"),F(Zy.$$.fragment),zYo=l(),Hpe=a("p"),QYo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),WYo=l(),Ed=a("p"),HYo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),UYo=o("not"),JYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),YYo=o("from_pretrained()"),KYo=o(" to load the model weights."),ZYo=l(),F(NF.$$.fragment),eKo=l(),go=a("div"),F(eL.$$.fragment),oKo=l(),Jpe=a("p"),rKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tKo=l(),Qa=a("p"),aKo=o("The model class to instantiate is selected based on the "),Ype=a("code"),nKo=o("model_type"),sKo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),lKo=o("pretrained_model_name_or_path"),iKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(":"),fKo=l(),Cd=a("ul"),jF=a("li"),eue=a("strong"),mKo=o("deit"),gKo=o(" \u2014 "),mX=a("a"),hKo=o("DeiTForMaskedImageModeling"),pKo=o(" (DeiT model)"),uKo=l(),DF=a("li"),oue=a("strong"),_Ko=o("swin"),bKo=o(" \u2014 "),gX=a("a"),vKo=o("SwinForMaskedImageModeling"),FKo=o(" (Swin model)"),TKo=l(),GF=a("li"),rue=a("strong"),MKo=o("vit"),EKo=o(" \u2014 "),hX=a("a"),CKo=o("ViTForMaskedImageModeling"),wKo=o(" (ViT model)"),AKo=l(),OF=a("p"),yKo=o("The model is set in evaluation mode by default using "),tue=a("code"),LKo=o("model.eval()"),xKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),$Ko=o("model.train()"),kKo=l(),F(VF.$$.fragment),eIe=l(),wd=a("h2"),XF=a("a"),nue=a("span"),F(oL.$$.fragment),SKo=l(),sue=a("span"),RKo=o("AutoModelForObjectDetection"),oIe=l(),Wo=a("div"),F(rL.$$.fragment),BKo=l(),Ad=a("p"),PKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pX=a("a"),IKo=o("from_pretrained()"),qKo=o(" class method or the "),uX=a("a"),NKo=o("from_config()"),jKo=o(` class
method.`),DKo=l(),tL=a("p"),GKo=o("This class cannot be instantiated directly using "),lue=a("code"),OKo=o("__init__()"),VKo=o(" (throws an error)."),XKo=l(),Tt=a("div"),F(aL.$$.fragment),zKo=l(),iue=a("p"),QKo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),WKo=l(),yd=a("p"),HKo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),UKo=o("not"),JKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=a("a"),YKo=o("from_pretrained()"),KKo=o(" to load the model weights."),ZKo=l(),F(zF.$$.fragment),eZo=l(),ho=a("div"),F(nL.$$.fragment),oZo=l(),cue=a("p"),rZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tZo=l(),Wa=a("p"),aZo=o("The model class to instantiate is selected based on the "),fue=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),mue=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),sL=a("ul"),QF=a("li"),hue=a("strong"),mZo=o("detr"),gZo=o(" \u2014 "),bX=a("a"),hZo=o("DetrForObjectDetection"),pZo=o(" (DETR model)"),uZo=l(),WF=a("li"),pue=a("strong"),_Zo=o("yolos"),bZo=o(" \u2014 "),vX=a("a"),vZo=o("YolosForObjectDetection"),FZo=o(" (YOLOS model)"),TZo=l(),HF=a("p"),MZo=o("The model is set in evaluation mode by default using "),uue=a("code"),EZo=o("model.eval()"),CZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=a("code"),wZo=o("model.train()"),AZo=l(),F(UF.$$.fragment),rIe=l(),Ld=a("h2"),JF=a("a"),bue=a("span"),F(lL.$$.fragment),yZo=l(),vue=a("span"),LZo=o("AutoModelForImageSegmentation"),tIe=l(),Ho=a("div"),F(iL.$$.fragment),xZo=l(),xd=a("p"),$Zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FX=a("a"),kZo=o("from_pretrained()"),SZo=o(" class method or the "),TX=a("a"),RZo=o("from_config()"),BZo=o(` class
method.`),PZo=l(),dL=a("p"),IZo=o("This class cannot be instantiated directly using "),Fue=a("code"),qZo=o("__init__()"),NZo=o(" (throws an error)."),jZo=l(),Mt=a("div"),F(cL.$$.fragment),DZo=l(),Tue=a("p"),GZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OZo=l(),$d=a("p"),VZo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),XZo=o("not"),zZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),QZo=o("from_pretrained()"),WZo=o(" to load the model weights."),HZo=l(),F(YF.$$.fragment),UZo=l(),po=a("div"),F(fL.$$.fragment),JZo=l(),Eue=a("p"),YZo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),KZo=l(),Ha=a("p"),ZZo=o("The model class to instantiate is selected based on the "),Cue=a("code"),eer=o("model_type"),oer=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),rer=o("pretrained_model_name_or_path"),ter=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),aer=o("pretrained_model_name_or_path"),ner=o(":"),ser=l(),yue=a("ul"),KF=a("li"),Lue=a("strong"),ler=o("detr"),ier=o(" \u2014 "),EX=a("a"),der=o("DetrForSegmentation"),cer=o(" (DETR model)"),fer=l(),ZF=a("p"),mer=o("The model is set in evaluation mode by default using "),xue=a("code"),ger=o("model.eval()"),her=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),per=o("model.train()"),uer=l(),F(e6.$$.fragment),aIe=l(),kd=a("h2"),o6=a("a"),kue=a("span"),F(mL.$$.fragment),_er=l(),Sue=a("span"),ber=o("AutoModelForSemanticSegmentation"),nIe=l(),Uo=a("div"),F(gL.$$.fragment),ver=l(),Sd=a("p"),Fer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CX=a("a"),Ter=o("from_pretrained()"),Mer=o(" class method or the "),wX=a("a"),Eer=o("from_config()"),Cer=o(` class
method.`),wer=l(),hL=a("p"),Aer=o("This class cannot be instantiated directly using "),Rue=a("code"),yer=o("__init__()"),Ler=o(" (throws an error)."),xer=l(),Et=a("div"),F(pL.$$.fragment),$er=l(),Bue=a("p"),ker=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ser=l(),Rd=a("p"),Rer=o(`Note:
Loading a model from its configuration file does `),Pue=a("strong"),Ber=o("not"),Per=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),Ier=o("from_pretrained()"),qer=o(" to load the model weights."),Ner=l(),F(r6.$$.fragment),jer=l(),uo=a("div"),F(uL.$$.fragment),Der=l(),Iue=a("p"),Ger=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Oer=l(),Ua=a("p"),Ver=o("The model class to instantiate is selected based on the "),que=a("code"),Xer=o("model_type"),zer=o(` property of the config object (either
passed as an argument or loaded from `),Nue=a("code"),Qer=o("pretrained_model_name_or_path"),Wer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),Her=o("pretrained_model_name_or_path"),Uer=o(":"),Jer=l(),Ja=a("ul"),t6=a("li"),Due=a("strong"),Yer=o("beit"),Ker=o(" \u2014 "),yX=a("a"),Zer=o("BeitForSemanticSegmentation"),eor=o(" (BEiT model)"),oor=l(),a6=a("li"),Gue=a("strong"),ror=o("data2vec-vision"),tor=o(" \u2014 "),LX=a("a"),aor=o("Data2VecVisionForSemanticSegmentation"),nor=o(" (Data2VecVision model)"),sor=l(),n6=a("li"),Oue=a("strong"),lor=o("dpt"),ior=o(" \u2014 "),xX=a("a"),dor=o("DPTForSemanticSegmentation"),cor=o(" (DPT model)"),mor=l(),s6=a("li"),Vue=a("strong"),gor=o("segformer"),hor=o(" \u2014 "),$X=a("a"),por=o("SegformerForSemanticSegmentation"),uor=o(" (SegFormer model)"),_or=l(),l6=a("p"),bor=o("The model is set in evaluation mode by default using "),Xue=a("code"),vor=o("model.eval()"),For=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=a("code"),Tor=o("model.train()"),Mor=l(),F(i6.$$.fragment),sIe=l(),Bd=a("h2"),d6=a("a"),Que=a("span"),F(_L.$$.fragment),Eor=l(),Wue=a("span"),Cor=o("AutoModelForInstanceSegmentation"),lIe=l(),Jo=a("div"),F(bL.$$.fragment),wor=l(),Pd=a("p"),Aor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kX=a("a"),yor=o("from_pretrained()"),Lor=o(" class method or the "),SX=a("a"),xor=o("from_config()"),$or=o(` class
method.`),kor=l(),vL=a("p"),Sor=o("This class cannot be instantiated directly using "),Hue=a("code"),Ror=o("__init__()"),Bor=o(" (throws an error)."),Por=l(),Ct=a("div"),F(FL.$$.fragment),Ior=l(),Uue=a("p"),qor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Nor=l(),Id=a("p"),jor=o(`Note:
Loading a model from its configuration file does `),Jue=a("strong"),Dor=o("not"),Gor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),Oor=o("from_pretrained()"),Vor=o(" to load the model weights."),Xor=l(),F(c6.$$.fragment),zor=l(),_o=a("div"),F(TL.$$.fragment),Qor=l(),Yue=a("p"),Wor=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Hor=l(),Ya=a("p"),Uor=o("The model class to instantiate is selected based on the "),Kue=a("code"),Jor=o("model_type"),Yor=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Kor=o("pretrained_model_name_or_path"),Zor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),err=o("pretrained_model_name_or_path"),orr=o(":"),rrr=l(),o_e=a("ul"),f6=a("li"),r_e=a("strong"),trr=o("maskformer"),arr=o(" \u2014 "),BX=a("a"),nrr=o("MaskFormerForInstanceSegmentation"),srr=o(" (MaskFormer model)"),lrr=l(),m6=a("p"),irr=o("The model is set in evaluation mode by default using "),t_e=a("code"),drr=o("model.eval()"),crr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=a("code"),frr=o("model.train()"),mrr=l(),F(g6.$$.fragment),iIe=l(),qd=a("h2"),h6=a("a"),n_e=a("span"),F(ML.$$.fragment),grr=l(),s_e=a("span"),hrr=o("TFAutoModel"),dIe=l(),Yo=a("div"),F(EL.$$.fragment),prr=l(),Nd=a("p"),urr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PX=a("a"),_rr=o("from_pretrained()"),brr=o(" class method or the "),IX=a("a"),vrr=o("from_config()"),Frr=o(` class
method.`),Trr=l(),CL=a("p"),Mrr=o("This class cannot be instantiated directly using "),l_e=a("code"),Err=o("__init__()"),Crr=o(" (throws an error)."),wrr=l(),wt=a("div"),F(wL.$$.fragment),Arr=l(),i_e=a("p"),yrr=o("Instantiates one of the base model classes of the library from a configuration."),Lrr=l(),jd=a("p"),xrr=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),$rr=o("not"),krr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=a("a"),Srr=o("from_pretrained()"),Rrr=o(" to load the model weights."),Brr=l(),F(p6.$$.fragment),Prr=l(),wr=a("div"),F(AL.$$.fragment),Irr=l(),c_e=a("p"),qrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Nrr=l(),Ka=a("p"),jrr=o("The model class to instantiate is selected based on the "),f_e=a("code"),Drr=o("model_type"),Grr=o(` property of the config object (either
passed as an argument or loaded from `),m_e=a("code"),Orr=o("pretrained_model_name_or_path"),Vrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=a("code"),Xrr=o("pretrained_model_name_or_path"),zrr=o(":"),Qrr=l(),j=a("ul"),u6=a("li"),h_e=a("strong"),Wrr=o("albert"),Hrr=o(" \u2014 "),NX=a("a"),Urr=o("TFAlbertModel"),Jrr=o(" (ALBERT model)"),Yrr=l(),_6=a("li"),p_e=a("strong"),Krr=o("bart"),Zrr=o(" \u2014 "),jX=a("a"),etr=o("TFBartModel"),otr=o(" (BART model)"),rtr=l(),b6=a("li"),u_e=a("strong"),ttr=o("bert"),atr=o(" \u2014 "),DX=a("a"),ntr=o("TFBertModel"),str=o(" (BERT model)"),ltr=l(),v6=a("li"),__e=a("strong"),itr=o("blenderbot"),dtr=o(" \u2014 "),GX=a("a"),ctr=o("TFBlenderbotModel"),ftr=o(" (Blenderbot model)"),mtr=l(),F6=a("li"),b_e=a("strong"),gtr=o("blenderbot-small"),htr=o(" \u2014 "),OX=a("a"),ptr=o("TFBlenderbotSmallModel"),utr=o(" (BlenderbotSmall model)"),_tr=l(),T6=a("li"),v_e=a("strong"),btr=o("camembert"),vtr=o(" \u2014 "),VX=a("a"),Ftr=o("TFCamembertModel"),Ttr=o(" (CamemBERT model)"),Mtr=l(),M6=a("li"),F_e=a("strong"),Etr=o("clip"),Ctr=o(" \u2014 "),XX=a("a"),wtr=o("TFCLIPModel"),Atr=o(" (CLIP model)"),ytr=l(),E6=a("li"),T_e=a("strong"),Ltr=o("convbert"),xtr=o(" \u2014 "),zX=a("a"),$tr=o("TFConvBertModel"),ktr=o(" (ConvBERT model)"),Str=l(),C6=a("li"),M_e=a("strong"),Rtr=o("convnext"),Btr=o(" \u2014 "),QX=a("a"),Ptr=o("TFConvNextModel"),Itr=o(" (ConvNext model)"),qtr=l(),w6=a("li"),E_e=a("strong"),Ntr=o("ctrl"),jtr=o(" \u2014 "),WX=a("a"),Dtr=o("TFCTRLModel"),Gtr=o(" (CTRL model)"),Otr=l(),A6=a("li"),C_e=a("strong"),Vtr=o("data2vec-vision"),Xtr=o(" \u2014 "),HX=a("a"),ztr=o("TFData2VecVisionModel"),Qtr=o(" (Data2VecVision model)"),Wtr=l(),y6=a("li"),w_e=a("strong"),Htr=o("deberta"),Utr=o(" \u2014 "),UX=a("a"),Jtr=o("TFDebertaModel"),Ytr=o(" (DeBERTa model)"),Ktr=l(),L6=a("li"),A_e=a("strong"),Ztr=o("deberta-v2"),ear=o(" \u2014 "),JX=a("a"),oar=o("TFDebertaV2Model"),rar=o(" (DeBERTa-v2 model)"),tar=l(),x6=a("li"),y_e=a("strong"),aar=o("distilbert"),nar=o(" \u2014 "),YX=a("a"),sar=o("TFDistilBertModel"),lar=o(" (DistilBERT model)"),iar=l(),$6=a("li"),L_e=a("strong"),dar=o("dpr"),car=o(" \u2014 "),KX=a("a"),far=o("TFDPRQuestionEncoder"),mar=o(" (DPR model)"),gar=l(),k6=a("li"),x_e=a("strong"),har=o("electra"),par=o(" \u2014 "),ZX=a("a"),uar=o("TFElectraModel"),_ar=o(" (ELECTRA model)"),bar=l(),S6=a("li"),$_e=a("strong"),Far=o("flaubert"),Tar=o(" \u2014 "),ez=a("a"),Mar=o("TFFlaubertModel"),Ear=o(" (FlauBERT model)"),Car=l(),Bs=a("li"),k_e=a("strong"),war=o("funnel"),Aar=o(" \u2014 "),oz=a("a"),yar=o("TFFunnelModel"),Lar=o(" or "),rz=a("a"),xar=o("TFFunnelBaseModel"),$ar=o(" (Funnel Transformer model)"),kar=l(),R6=a("li"),S_e=a("strong"),Sar=o("gpt2"),Rar=o(" \u2014 "),tz=a("a"),Bar=o("TFGPT2Model"),Par=o(" (OpenAI GPT-2 model)"),Iar=l(),B6=a("li"),R_e=a("strong"),qar=o("gptj"),Nar=o(" \u2014 "),az=a("a"),jar=o("TFGPTJModel"),Dar=o(" (GPT-J model)"),Gar=l(),P6=a("li"),B_e=a("strong"),Oar=o("hubert"),Var=o(" \u2014 "),nz=a("a"),Xar=o("TFHubertModel"),zar=o(" (Hubert model)"),Qar=l(),I6=a("li"),P_e=a("strong"),War=o("layoutlm"),Har=o(" \u2014 "),sz=a("a"),Uar=o("TFLayoutLMModel"),Jar=o(" (LayoutLM model)"),Yar=l(),q6=a("li"),I_e=a("strong"),Kar=o("led"),Zar=o(" \u2014 "),lz=a("a"),enr=o("TFLEDModel"),onr=o(" (LED model)"),rnr=l(),N6=a("li"),q_e=a("strong"),tnr=o("longformer"),anr=o(" \u2014 "),iz=a("a"),nnr=o("TFLongformerModel"),snr=o(" (Longformer model)"),lnr=l(),j6=a("li"),N_e=a("strong"),inr=o("lxmert"),dnr=o(" \u2014 "),dz=a("a"),cnr=o("TFLxmertModel"),fnr=o(" (LXMERT model)"),mnr=l(),D6=a("li"),j_e=a("strong"),gnr=o("marian"),hnr=o(" \u2014 "),cz=a("a"),pnr=o("TFMarianModel"),unr=o(" (Marian model)"),_nr=l(),G6=a("li"),D_e=a("strong"),bnr=o("mbart"),vnr=o(" \u2014 "),fz=a("a"),Fnr=o("TFMBartModel"),Tnr=o(" (mBART model)"),Mnr=l(),O6=a("li"),G_e=a("strong"),Enr=o("mobilebert"),Cnr=o(" \u2014 "),mz=a("a"),wnr=o("TFMobileBertModel"),Anr=o(" (MobileBERT model)"),ynr=l(),V6=a("li"),O_e=a("strong"),Lnr=o("mpnet"),xnr=o(" \u2014 "),gz=a("a"),$nr=o("TFMPNetModel"),knr=o(" (MPNet model)"),Snr=l(),X6=a("li"),V_e=a("strong"),Rnr=o("mt5"),Bnr=o(" \u2014 "),hz=a("a"),Pnr=o("TFMT5Model"),Inr=o(" (mT5 model)"),qnr=l(),z6=a("li"),X_e=a("strong"),Nnr=o("openai-gpt"),jnr=o(" \u2014 "),pz=a("a"),Dnr=o("TFOpenAIGPTModel"),Gnr=o(" (OpenAI GPT model)"),Onr=l(),Q6=a("li"),z_e=a("strong"),Vnr=o("pegasus"),Xnr=o(" \u2014 "),uz=a("a"),znr=o("TFPegasusModel"),Qnr=o(" (Pegasus model)"),Wnr=l(),W6=a("li"),Q_e=a("strong"),Hnr=o("rembert"),Unr=o(" \u2014 "),_z=a("a"),Jnr=o("TFRemBertModel"),Ynr=o(" (RemBERT model)"),Knr=l(),H6=a("li"),W_e=a("strong"),Znr=o("roberta"),esr=o(" \u2014 "),bz=a("a"),osr=o("TFRobertaModel"),rsr=o(" (RoBERTa model)"),tsr=l(),U6=a("li"),H_e=a("strong"),asr=o("roformer"),nsr=o(" \u2014 "),vz=a("a"),ssr=o("TFRoFormerModel"),lsr=o(" (RoFormer model)"),isr=l(),J6=a("li"),U_e=a("strong"),dsr=o("speech_to_text"),csr=o(" \u2014 "),Fz=a("a"),fsr=o("TFSpeech2TextModel"),msr=o(" (Speech2Text model)"),gsr=l(),Y6=a("li"),J_e=a("strong"),hsr=o("t5"),psr=o(" \u2014 "),Tz=a("a"),usr=o("TFT5Model"),_sr=o(" (T5 model)"),bsr=l(),K6=a("li"),Y_e=a("strong"),vsr=o("tapas"),Fsr=o(" \u2014 "),Mz=a("a"),Tsr=o("TFTapasModel"),Msr=o(" (TAPAS model)"),Esr=l(),Z6=a("li"),K_e=a("strong"),Csr=o("transfo-xl"),wsr=o(" \u2014 "),Ez=a("a"),Asr=o("TFTransfoXLModel"),ysr=o(" (Transformer-XL model)"),Lsr=l(),eT=a("li"),Z_e=a("strong"),xsr=o("vit"),$sr=o(" \u2014 "),Cz=a("a"),ksr=o("TFViTModel"),Ssr=o(" (ViT model)"),Rsr=l(),oT=a("li"),e2e=a("strong"),Bsr=o("vit_mae"),Psr=o(" \u2014 "),wz=a("a"),Isr=o("TFViTMAEModel"),qsr=o(" (ViTMAE model)"),Nsr=l(),rT=a("li"),o2e=a("strong"),jsr=o("wav2vec2"),Dsr=o(" \u2014 "),Az=a("a"),Gsr=o("TFWav2Vec2Model"),Osr=o(" (Wav2Vec2 model)"),Vsr=l(),tT=a("li"),r2e=a("strong"),Xsr=o("xlm"),zsr=o(" \u2014 "),yz=a("a"),Qsr=o("TFXLMModel"),Wsr=o(" (XLM model)"),Hsr=l(),aT=a("li"),t2e=a("strong"),Usr=o("xlm-roberta"),Jsr=o(" \u2014 "),Lz=a("a"),Ysr=o("TFXLMRobertaModel"),Ksr=o(" (XLM-RoBERTa model)"),Zsr=l(),nT=a("li"),a2e=a("strong"),elr=o("xlnet"),olr=o(" \u2014 "),xz=a("a"),rlr=o("TFXLNetModel"),tlr=o(" (XLNet model)"),alr=l(),F(sT.$$.fragment),cIe=l(),Dd=a("h2"),lT=a("a"),n2e=a("span"),F(yL.$$.fragment),nlr=l(),s2e=a("span"),slr=o("TFAutoModelForPreTraining"),fIe=l(),Ko=a("div"),F(LL.$$.fragment),llr=l(),Gd=a("p"),ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$z=a("a"),dlr=o("from_pretrained()"),clr=o(" class method or the "),kz=a("a"),flr=o("from_config()"),mlr=o(` class
method.`),glr=l(),xL=a("p"),hlr=o("This class cannot be instantiated directly using "),l2e=a("code"),plr=o("__init__()"),ulr=o(" (throws an error)."),_lr=l(),At=a("div"),F($L.$$.fragment),blr=l(),i2e=a("p"),vlr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Flr=l(),Od=a("p"),Tlr=o(`Note:
Loading a model from its configuration file does `),d2e=a("strong"),Mlr=o("not"),Elr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=a("a"),Clr=o("from_pretrained()"),wlr=o(" to load the model weights."),Alr=l(),F(iT.$$.fragment),ylr=l(),Ar=a("div"),F(kL.$$.fragment),Llr=l(),c2e=a("p"),xlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$lr=l(),Za=a("p"),klr=o("The model class to instantiate is selected based on the "),f2e=a("code"),Slr=o("model_type"),Rlr=o(` property of the config object (either
passed as an argument or loaded from `),m2e=a("code"),Blr=o("pretrained_model_name_or_path"),Plr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=a("code"),Ilr=o("pretrained_model_name_or_path"),qlr=o(":"),Nlr=l(),ne=a("ul"),dT=a("li"),h2e=a("strong"),jlr=o("albert"),Dlr=o(" \u2014 "),Rz=a("a"),Glr=o("TFAlbertForPreTraining"),Olr=o(" (ALBERT model)"),Vlr=l(),cT=a("li"),p2e=a("strong"),Xlr=o("bart"),zlr=o(" \u2014 "),Bz=a("a"),Qlr=o("TFBartForConditionalGeneration"),Wlr=o(" (BART model)"),Hlr=l(),fT=a("li"),u2e=a("strong"),Ulr=o("bert"),Jlr=o(" \u2014 "),Pz=a("a"),Ylr=o("TFBertForPreTraining"),Klr=o(" (BERT model)"),Zlr=l(),mT=a("li"),_2e=a("strong"),eir=o("camembert"),oir=o(" \u2014 "),Iz=a("a"),rir=o("TFCamembertForMaskedLM"),tir=o(" (CamemBERT model)"),air=l(),gT=a("li"),b2e=a("strong"),nir=o("ctrl"),sir=o(" \u2014 "),qz=a("a"),lir=o("TFCTRLLMHeadModel"),iir=o(" (CTRL model)"),dir=l(),hT=a("li"),v2e=a("strong"),cir=o("distilbert"),fir=o(" \u2014 "),Nz=a("a"),mir=o("TFDistilBertForMaskedLM"),gir=o(" (DistilBERT model)"),hir=l(),pT=a("li"),F2e=a("strong"),pir=o("electra"),uir=o(" \u2014 "),jz=a("a"),_ir=o("TFElectraForPreTraining"),bir=o(" (ELECTRA model)"),vir=l(),uT=a("li"),T2e=a("strong"),Fir=o("flaubert"),Tir=o(" \u2014 "),Dz=a("a"),Mir=o("TFFlaubertWithLMHeadModel"),Eir=o(" (FlauBERT model)"),Cir=l(),_T=a("li"),M2e=a("strong"),wir=o("funnel"),Air=o(" \u2014 "),Gz=a("a"),yir=o("TFFunnelForPreTraining"),Lir=o(" (Funnel Transformer model)"),xir=l(),bT=a("li"),E2e=a("strong"),$ir=o("gpt2"),kir=o(" \u2014 "),Oz=a("a"),Sir=o("TFGPT2LMHeadModel"),Rir=o(" (OpenAI GPT-2 model)"),Bir=l(),vT=a("li"),C2e=a("strong"),Pir=o("layoutlm"),Iir=o(" \u2014 "),Vz=a("a"),qir=o("TFLayoutLMForMaskedLM"),Nir=o(" (LayoutLM model)"),jir=l(),FT=a("li"),w2e=a("strong"),Dir=o("lxmert"),Gir=o(" \u2014 "),Xz=a("a"),Oir=o("TFLxmertForPreTraining"),Vir=o(" (LXMERT model)"),Xir=l(),TT=a("li"),A2e=a("strong"),zir=o("mobilebert"),Qir=o(" \u2014 "),zz=a("a"),Wir=o("TFMobileBertForPreTraining"),Hir=o(" (MobileBERT model)"),Uir=l(),MT=a("li"),y2e=a("strong"),Jir=o("mpnet"),Yir=o(" \u2014 "),Qz=a("a"),Kir=o("TFMPNetForMaskedLM"),Zir=o(" (MPNet model)"),edr=l(),ET=a("li"),L2e=a("strong"),odr=o("openai-gpt"),rdr=o(" \u2014 "),Wz=a("a"),tdr=o("TFOpenAIGPTLMHeadModel"),adr=o(" (OpenAI GPT model)"),ndr=l(),CT=a("li"),x2e=a("strong"),sdr=o("roberta"),ldr=o(" \u2014 "),Hz=a("a"),idr=o("TFRobertaForMaskedLM"),ddr=o(" (RoBERTa model)"),cdr=l(),wT=a("li"),$2e=a("strong"),fdr=o("t5"),mdr=o(" \u2014 "),Uz=a("a"),gdr=o("TFT5ForConditionalGeneration"),hdr=o(" (T5 model)"),pdr=l(),AT=a("li"),k2e=a("strong"),udr=o("tapas"),_dr=o(" \u2014 "),Jz=a("a"),bdr=o("TFTapasForMaskedLM"),vdr=o(" (TAPAS model)"),Fdr=l(),yT=a("li"),S2e=a("strong"),Tdr=o("transfo-xl"),Mdr=o(" \u2014 "),Yz=a("a"),Edr=o("TFTransfoXLLMHeadModel"),Cdr=o(" (Transformer-XL model)"),wdr=l(),LT=a("li"),R2e=a("strong"),Adr=o("vit_mae"),ydr=o(" \u2014 "),Kz=a("a"),Ldr=o("TFViTMAEForPreTraining"),xdr=o(" (ViTMAE model)"),$dr=l(),xT=a("li"),B2e=a("strong"),kdr=o("xlm"),Sdr=o(" \u2014 "),Zz=a("a"),Rdr=o("TFXLMWithLMHeadModel"),Bdr=o(" (XLM model)"),Pdr=l(),$T=a("li"),P2e=a("strong"),Idr=o("xlm-roberta"),qdr=o(" \u2014 "),eQ=a("a"),Ndr=o("TFXLMRobertaForMaskedLM"),jdr=o(" (XLM-RoBERTa model)"),Ddr=l(),kT=a("li"),I2e=a("strong"),Gdr=o("xlnet"),Odr=o(" \u2014 "),oQ=a("a"),Vdr=o("TFXLNetLMHeadModel"),Xdr=o(" (XLNet model)"),zdr=l(),F(ST.$$.fragment),mIe=l(),Vd=a("h2"),RT=a("a"),q2e=a("span"),F(SL.$$.fragment),Qdr=l(),N2e=a("span"),Wdr=o("TFAutoModelForCausalLM"),gIe=l(),Zo=a("div"),F(RL.$$.fragment),Hdr=l(),Xd=a("p"),Udr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rQ=a("a"),Jdr=o("from_pretrained()"),Ydr=o(" class method or the "),tQ=a("a"),Kdr=o("from_config()"),Zdr=o(` class
method.`),ecr=l(),BL=a("p"),ocr=o("This class cannot be instantiated directly using "),j2e=a("code"),rcr=o("__init__()"),tcr=o(" (throws an error)."),acr=l(),yt=a("div"),F(PL.$$.fragment),ncr=l(),D2e=a("p"),scr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),lcr=l(),zd=a("p"),icr=o(`Note:
Loading a model from its configuration file does `),G2e=a("strong"),dcr=o("not"),ccr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),fcr=o("from_pretrained()"),mcr=o(" to load the model weights."),gcr=l(),F(BT.$$.fragment),hcr=l(),yr=a("div"),F(IL.$$.fragment),pcr=l(),O2e=a("p"),ucr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_cr=l(),en=a("p"),bcr=o("The model class to instantiate is selected based on the "),V2e=a("code"),vcr=o("model_type"),Fcr=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(":"),wcr=l(),Te=a("ul"),PT=a("li"),Q2e=a("strong"),Acr=o("bert"),ycr=o(" \u2014 "),nQ=a("a"),Lcr=o("TFBertLMHeadModel"),xcr=o(" (BERT model)"),$cr=l(),IT=a("li"),W2e=a("strong"),kcr=o("camembert"),Scr=o(" \u2014 "),sQ=a("a"),Rcr=o("TFCamembertForCausalLM"),Bcr=o(" (CamemBERT model)"),Pcr=l(),qT=a("li"),H2e=a("strong"),Icr=o("ctrl"),qcr=o(" \u2014 "),lQ=a("a"),Ncr=o("TFCTRLLMHeadModel"),jcr=o(" (CTRL model)"),Dcr=l(),NT=a("li"),U2e=a("strong"),Gcr=o("gpt2"),Ocr=o(" \u2014 "),iQ=a("a"),Vcr=o("TFGPT2LMHeadModel"),Xcr=o(" (OpenAI GPT-2 model)"),zcr=l(),jT=a("li"),J2e=a("strong"),Qcr=o("gptj"),Wcr=o(" \u2014 "),dQ=a("a"),Hcr=o("TFGPTJForCausalLM"),Ucr=o(" (GPT-J model)"),Jcr=l(),DT=a("li"),Y2e=a("strong"),Ycr=o("openai-gpt"),Kcr=o(" \u2014 "),cQ=a("a"),Zcr=o("TFOpenAIGPTLMHeadModel"),efr=o(" (OpenAI GPT model)"),ofr=l(),GT=a("li"),K2e=a("strong"),rfr=o("rembert"),tfr=o(" \u2014 "),fQ=a("a"),afr=o("TFRemBertForCausalLM"),nfr=o(" (RemBERT model)"),sfr=l(),OT=a("li"),Z2e=a("strong"),lfr=o("roberta"),ifr=o(" \u2014 "),mQ=a("a"),dfr=o("TFRobertaForCausalLM"),cfr=o(" (RoBERTa model)"),ffr=l(),VT=a("li"),e1e=a("strong"),mfr=o("roformer"),gfr=o(" \u2014 "),gQ=a("a"),hfr=o("TFRoFormerForCausalLM"),pfr=o(" (RoFormer model)"),ufr=l(),XT=a("li"),o1e=a("strong"),_fr=o("transfo-xl"),bfr=o(" \u2014 "),hQ=a("a"),vfr=o("TFTransfoXLLMHeadModel"),Ffr=o(" (Transformer-XL model)"),Tfr=l(),zT=a("li"),r1e=a("strong"),Mfr=o("xlm"),Efr=o(" \u2014 "),pQ=a("a"),Cfr=o("TFXLMWithLMHeadModel"),wfr=o(" (XLM model)"),Afr=l(),QT=a("li"),t1e=a("strong"),yfr=o("xlnet"),Lfr=o(" \u2014 "),uQ=a("a"),xfr=o("TFXLNetLMHeadModel"),$fr=o(" (XLNet model)"),kfr=l(),F(WT.$$.fragment),hIe=l(),Qd=a("h2"),HT=a("a"),a1e=a("span"),F(qL.$$.fragment),Sfr=l(),n1e=a("span"),Rfr=o("TFAutoModelForImageClassification"),pIe=l(),er=a("div"),F(NL.$$.fragment),Bfr=l(),Wd=a("p"),Pfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=a("a"),Ifr=o("from_pretrained()"),qfr=o(" class method or the "),bQ=a("a"),Nfr=o("from_config()"),jfr=o(` class
method.`),Dfr=l(),jL=a("p"),Gfr=o("This class cannot be instantiated directly using "),s1e=a("code"),Ofr=o("__init__()"),Vfr=o(" (throws an error)."),Xfr=l(),Lt=a("div"),F(DL.$$.fragment),zfr=l(),l1e=a("p"),Qfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wfr=l(),Hd=a("p"),Hfr=o(`Note:
Loading a model from its configuration file does `),i1e=a("strong"),Ufr=o("not"),Jfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),Yfr=o("from_pretrained()"),Kfr=o(" to load the model weights."),Zfr=l(),F(UT.$$.fragment),emr=l(),Lr=a("div"),F(GL.$$.fragment),omr=l(),d1e=a("p"),rmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tmr=l(),on=a("p"),amr=o("The model class to instantiate is selected based on the "),c1e=a("code"),nmr=o("model_type"),smr=o(` property of the config object (either
passed as an argument or loaded from `),f1e=a("code"),lmr=o("pretrained_model_name_or_path"),imr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(":"),fmr=l(),Ud=a("ul"),JT=a("li"),g1e=a("strong"),mmr=o("convnext"),gmr=o(" \u2014 "),FQ=a("a"),hmr=o("TFConvNextForImageClassification"),pmr=o(" (ConvNext model)"),umr=l(),YT=a("li"),h1e=a("strong"),_mr=o("data2vec-vision"),bmr=o(" \u2014 "),TQ=a("a"),vmr=o("TFData2VecVisionForImageClassification"),Fmr=o(" (Data2VecVision model)"),Tmr=l(),KT=a("li"),p1e=a("strong"),Mmr=o("vit"),Emr=o(" \u2014 "),MQ=a("a"),Cmr=o("TFViTForImageClassification"),wmr=o(" (ViT model)"),Amr=l(),F(ZT.$$.fragment),uIe=l(),Jd=a("h2"),e9=a("a"),u1e=a("span"),F(OL.$$.fragment),ymr=l(),_1e=a("span"),Lmr=o("TFAutoModelForMaskedLM"),_Ie=l(),or=a("div"),F(VL.$$.fragment),xmr=l(),Yd=a("p"),$mr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=a("a"),kmr=o("from_pretrained()"),Smr=o(" class method or the "),CQ=a("a"),Rmr=o("from_config()"),Bmr=o(` class
method.`),Pmr=l(),XL=a("p"),Imr=o("This class cannot be instantiated directly using "),b1e=a("code"),qmr=o("__init__()"),Nmr=o(" (throws an error)."),jmr=l(),xt=a("div"),F(zL.$$.fragment),Dmr=l(),v1e=a("p"),Gmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Omr=l(),Kd=a("p"),Vmr=o(`Note:
Loading a model from its configuration file does `),F1e=a("strong"),Xmr=o("not"),zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" to load the model weights."),Hmr=l(),F(o9.$$.fragment),Umr=l(),xr=a("div"),F(QL.$$.fragment),Jmr=l(),T1e=a("p"),Ymr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Kmr=l(),rn=a("p"),Zmr=o("The model class to instantiate is selected based on the "),M1e=a("code"),egr=o("model_type"),ogr=o(` property of the config object (either
passed as an argument or loaded from `),E1e=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=a("code"),agr=o("pretrained_model_name_or_path"),ngr=o(":"),sgr=l(),ie=a("ul"),r9=a("li"),w1e=a("strong"),lgr=o("albert"),igr=o(" \u2014 "),AQ=a("a"),dgr=o("TFAlbertForMaskedLM"),cgr=o(" (ALBERT model)"),fgr=l(),t9=a("li"),A1e=a("strong"),mgr=o("bert"),ggr=o(" \u2014 "),yQ=a("a"),hgr=o("TFBertForMaskedLM"),pgr=o(" (BERT model)"),ugr=l(),a9=a("li"),y1e=a("strong"),_gr=o("camembert"),bgr=o(" \u2014 "),LQ=a("a"),vgr=o("TFCamembertForMaskedLM"),Fgr=o(" (CamemBERT model)"),Tgr=l(),n9=a("li"),L1e=a("strong"),Mgr=o("convbert"),Egr=o(" \u2014 "),xQ=a("a"),Cgr=o("TFConvBertForMaskedLM"),wgr=o(" (ConvBERT model)"),Agr=l(),s9=a("li"),x1e=a("strong"),ygr=o("deberta"),Lgr=o(" \u2014 "),$Q=a("a"),xgr=o("TFDebertaForMaskedLM"),$gr=o(" (DeBERTa model)"),kgr=l(),l9=a("li"),$1e=a("strong"),Sgr=o("deberta-v2"),Rgr=o(" \u2014 "),kQ=a("a"),Bgr=o("TFDebertaV2ForMaskedLM"),Pgr=o(" (DeBERTa-v2 model)"),Igr=l(),i9=a("li"),k1e=a("strong"),qgr=o("distilbert"),Ngr=o(" \u2014 "),SQ=a("a"),jgr=o("TFDistilBertForMaskedLM"),Dgr=o(" (DistilBERT model)"),Ggr=l(),d9=a("li"),S1e=a("strong"),Ogr=o("electra"),Vgr=o(" \u2014 "),RQ=a("a"),Xgr=o("TFElectraForMaskedLM"),zgr=o(" (ELECTRA model)"),Qgr=l(),c9=a("li"),R1e=a("strong"),Wgr=o("flaubert"),Hgr=o(" \u2014 "),BQ=a("a"),Ugr=o("TFFlaubertWithLMHeadModel"),Jgr=o(" (FlauBERT model)"),Ygr=l(),f9=a("li"),B1e=a("strong"),Kgr=o("funnel"),Zgr=o(" \u2014 "),PQ=a("a"),ehr=o("TFFunnelForMaskedLM"),ohr=o(" (Funnel Transformer model)"),rhr=l(),m9=a("li"),P1e=a("strong"),thr=o("layoutlm"),ahr=o(" \u2014 "),IQ=a("a"),nhr=o("TFLayoutLMForMaskedLM"),shr=o(" (LayoutLM model)"),lhr=l(),g9=a("li"),I1e=a("strong"),ihr=o("longformer"),dhr=o(" \u2014 "),qQ=a("a"),chr=o("TFLongformerForMaskedLM"),fhr=o(" (Longformer model)"),mhr=l(),h9=a("li"),q1e=a("strong"),ghr=o("mobilebert"),hhr=o(" \u2014 "),NQ=a("a"),phr=o("TFMobileBertForMaskedLM"),uhr=o(" (MobileBERT model)"),_hr=l(),p9=a("li"),N1e=a("strong"),bhr=o("mpnet"),vhr=o(" \u2014 "),jQ=a("a"),Fhr=o("TFMPNetForMaskedLM"),Thr=o(" (MPNet model)"),Mhr=l(),u9=a("li"),j1e=a("strong"),Ehr=o("rembert"),Chr=o(" \u2014 "),DQ=a("a"),whr=o("TFRemBertForMaskedLM"),Ahr=o(" (RemBERT model)"),yhr=l(),_9=a("li"),D1e=a("strong"),Lhr=o("roberta"),xhr=o(" \u2014 "),GQ=a("a"),$hr=o("TFRobertaForMaskedLM"),khr=o(" (RoBERTa model)"),Shr=l(),b9=a("li"),G1e=a("strong"),Rhr=o("roformer"),Bhr=o(" \u2014 "),OQ=a("a"),Phr=o("TFRoFormerForMaskedLM"),Ihr=o(" (RoFormer model)"),qhr=l(),v9=a("li"),O1e=a("strong"),Nhr=o("tapas"),jhr=o(" \u2014 "),VQ=a("a"),Dhr=o("TFTapasForMaskedLM"),Ghr=o(" (TAPAS model)"),Ohr=l(),F9=a("li"),V1e=a("strong"),Vhr=o("xlm"),Xhr=o(" \u2014 "),XQ=a("a"),zhr=o("TFXLMWithLMHeadModel"),Qhr=o(" (XLM model)"),Whr=l(),T9=a("li"),X1e=a("strong"),Hhr=o("xlm-roberta"),Uhr=o(" \u2014 "),zQ=a("a"),Jhr=o("TFXLMRobertaForMaskedLM"),Yhr=o(" (XLM-RoBERTa model)"),Khr=l(),F(M9.$$.fragment),bIe=l(),Zd=a("h2"),E9=a("a"),z1e=a("span"),F(WL.$$.fragment),Zhr=l(),Q1e=a("span"),epr=o("TFAutoModelForSeq2SeqLM"),vIe=l(),rr=a("div"),F(HL.$$.fragment),opr=l(),ec=a("p"),rpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QQ=a("a"),tpr=o("from_pretrained()"),apr=o(" class method or the "),WQ=a("a"),npr=o("from_config()"),spr=o(` class
method.`),lpr=l(),UL=a("p"),ipr=o("This class cannot be instantiated directly using "),W1e=a("code"),dpr=o("__init__()"),cpr=o(" (throws an error)."),fpr=l(),$t=a("div"),F(JL.$$.fragment),mpr=l(),H1e=a("p"),gpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hpr=l(),oc=a("p"),ppr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),upr=o("not"),_pr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),bpr=o("from_pretrained()"),vpr=o(" to load the model weights."),Fpr=l(),F(C9.$$.fragment),Tpr=l(),$r=a("div"),F(YL.$$.fragment),Mpr=l(),J1e=a("p"),Epr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Cpr=l(),tn=a("p"),wpr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),Apr=o("model_type"),ypr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),Lpr=o("pretrained_model_name_or_path"),xpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),$pr=o("pretrained_model_name_or_path"),kpr=o(":"),Spr=l(),ye=a("ul"),w9=a("li"),ebe=a("strong"),Rpr=o("bart"),Bpr=o(" \u2014 "),UQ=a("a"),Ppr=o("TFBartForConditionalGeneration"),Ipr=o(" (BART model)"),qpr=l(),A9=a("li"),obe=a("strong"),Npr=o("blenderbot"),jpr=o(" \u2014 "),JQ=a("a"),Dpr=o("TFBlenderbotForConditionalGeneration"),Gpr=o(" (Blenderbot model)"),Opr=l(),y9=a("li"),rbe=a("strong"),Vpr=o("blenderbot-small"),Xpr=o(" \u2014 "),YQ=a("a"),zpr=o("TFBlenderbotSmallForConditionalGeneration"),Qpr=o(" (BlenderbotSmall model)"),Wpr=l(),L9=a("li"),tbe=a("strong"),Hpr=o("encoder-decoder"),Upr=o(" \u2014 "),KQ=a("a"),Jpr=o("TFEncoderDecoderModel"),Ypr=o(" (Encoder decoder model)"),Kpr=l(),x9=a("li"),abe=a("strong"),Zpr=o("led"),eur=o(" \u2014 "),ZQ=a("a"),our=o("TFLEDForConditionalGeneration"),rur=o(" (LED model)"),tur=l(),$9=a("li"),nbe=a("strong"),aur=o("marian"),nur=o(" \u2014 "),eW=a("a"),sur=o("TFMarianMTModel"),lur=o(" (Marian model)"),iur=l(),k9=a("li"),sbe=a("strong"),dur=o("mbart"),cur=o(" \u2014 "),oW=a("a"),fur=o("TFMBartForConditionalGeneration"),mur=o(" (mBART model)"),gur=l(),S9=a("li"),lbe=a("strong"),hur=o("mt5"),pur=o(" \u2014 "),rW=a("a"),uur=o("TFMT5ForConditionalGeneration"),_ur=o(" (mT5 model)"),bur=l(),R9=a("li"),ibe=a("strong"),vur=o("pegasus"),Fur=o(" \u2014 "),tW=a("a"),Tur=o("TFPegasusForConditionalGeneration"),Mur=o(" (Pegasus model)"),Eur=l(),B9=a("li"),dbe=a("strong"),Cur=o("t5"),wur=o(" \u2014 "),aW=a("a"),Aur=o("TFT5ForConditionalGeneration"),yur=o(" (T5 model)"),Lur=l(),F(P9.$$.fragment),FIe=l(),rc=a("h2"),I9=a("a"),cbe=a("span"),F(KL.$$.fragment),xur=l(),fbe=a("span"),$ur=o("TFAutoModelForSequenceClassification"),TIe=l(),tr=a("div"),F(ZL.$$.fragment),kur=l(),tc=a("p"),Sur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nW=a("a"),Rur=o("from_pretrained()"),Bur=o(" class method or the "),sW=a("a"),Pur=o("from_config()"),Iur=o(` class
method.`),qur=l(),e8=a("p"),Nur=o("This class cannot be instantiated directly using "),mbe=a("code"),jur=o("__init__()"),Dur=o(" (throws an error)."),Gur=l(),kt=a("div"),F(o8.$$.fragment),Our=l(),gbe=a("p"),Vur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xur=l(),ac=a("p"),zur=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Qur=o("not"),Wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),Hur=o("from_pretrained()"),Uur=o(" to load the model weights."),Jur=l(),F(q9.$$.fragment),Yur=l(),kr=a("div"),F(r8.$$.fragment),Kur=l(),pbe=a("p"),Zur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),e_r=l(),an=a("p"),o_r=o("The model class to instantiate is selected based on the "),ube=a("code"),r_r=o("model_type"),t_r=o(` property of the config object (either
passed as an argument or loaded from `),_be=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(":"),i_r=l(),Z=a("ul"),N9=a("li"),vbe=a("strong"),d_r=o("albert"),c_r=o(" \u2014 "),iW=a("a"),f_r=o("TFAlbertForSequenceClassification"),m_r=o(" (ALBERT model)"),g_r=l(),j9=a("li"),Fbe=a("strong"),h_r=o("bert"),p_r=o(" \u2014 "),dW=a("a"),u_r=o("TFBertForSequenceClassification"),__r=o(" (BERT model)"),b_r=l(),D9=a("li"),Tbe=a("strong"),v_r=o("camembert"),F_r=o(" \u2014 "),cW=a("a"),T_r=o("TFCamembertForSequenceClassification"),M_r=o(" (CamemBERT model)"),E_r=l(),G9=a("li"),Mbe=a("strong"),C_r=o("convbert"),w_r=o(" \u2014 "),fW=a("a"),A_r=o("TFConvBertForSequenceClassification"),y_r=o(" (ConvBERT model)"),L_r=l(),O9=a("li"),Ebe=a("strong"),x_r=o("ctrl"),$_r=o(" \u2014 "),mW=a("a"),k_r=o("TFCTRLForSequenceClassification"),S_r=o(" (CTRL model)"),R_r=l(),V9=a("li"),Cbe=a("strong"),B_r=o("deberta"),P_r=o(" \u2014 "),gW=a("a"),I_r=o("TFDebertaForSequenceClassification"),q_r=o(" (DeBERTa model)"),N_r=l(),X9=a("li"),wbe=a("strong"),j_r=o("deberta-v2"),D_r=o(" \u2014 "),hW=a("a"),G_r=o("TFDebertaV2ForSequenceClassification"),O_r=o(" (DeBERTa-v2 model)"),V_r=l(),z9=a("li"),Abe=a("strong"),X_r=o("distilbert"),z_r=o(" \u2014 "),pW=a("a"),Q_r=o("TFDistilBertForSequenceClassification"),W_r=o(" (DistilBERT model)"),H_r=l(),Q9=a("li"),ybe=a("strong"),U_r=o("electra"),J_r=o(" \u2014 "),uW=a("a"),Y_r=o("TFElectraForSequenceClassification"),K_r=o(" (ELECTRA model)"),Z_r=l(),W9=a("li"),Lbe=a("strong"),e2r=o("flaubert"),o2r=o(" \u2014 "),_W=a("a"),r2r=o("TFFlaubertForSequenceClassification"),t2r=o(" (FlauBERT model)"),a2r=l(),H9=a("li"),xbe=a("strong"),n2r=o("funnel"),s2r=o(" \u2014 "),bW=a("a"),l2r=o("TFFunnelForSequenceClassification"),i2r=o(" (Funnel Transformer model)"),d2r=l(),U9=a("li"),$be=a("strong"),c2r=o("gpt2"),f2r=o(" \u2014 "),vW=a("a"),m2r=o("TFGPT2ForSequenceClassification"),g2r=o(" (OpenAI GPT-2 model)"),h2r=l(),J9=a("li"),kbe=a("strong"),p2r=o("gptj"),u2r=o(" \u2014 "),FW=a("a"),_2r=o("TFGPTJForSequenceClassification"),b2r=o(" (GPT-J model)"),v2r=l(),Y9=a("li"),Sbe=a("strong"),F2r=o("layoutlm"),T2r=o(" \u2014 "),TW=a("a"),M2r=o("TFLayoutLMForSequenceClassification"),E2r=o(" (LayoutLM model)"),C2r=l(),K9=a("li"),Rbe=a("strong"),w2r=o("longformer"),A2r=o(" \u2014 "),MW=a("a"),y2r=o("TFLongformerForSequenceClassification"),L2r=o(" (Longformer model)"),x2r=l(),Z9=a("li"),Bbe=a("strong"),$2r=o("mobilebert"),k2r=o(" \u2014 "),EW=a("a"),S2r=o("TFMobileBertForSequenceClassification"),R2r=o(" (MobileBERT model)"),B2r=l(),eM=a("li"),Pbe=a("strong"),P2r=o("mpnet"),I2r=o(" \u2014 "),CW=a("a"),q2r=o("TFMPNetForSequenceClassification"),N2r=o(" (MPNet model)"),j2r=l(),oM=a("li"),Ibe=a("strong"),D2r=o("openai-gpt"),G2r=o(" \u2014 "),wW=a("a"),O2r=o("TFOpenAIGPTForSequenceClassification"),V2r=o(" (OpenAI GPT model)"),X2r=l(),rM=a("li"),qbe=a("strong"),z2r=o("rembert"),Q2r=o(" \u2014 "),AW=a("a"),W2r=o("TFRemBertForSequenceClassification"),H2r=o(" (RemBERT model)"),U2r=l(),tM=a("li"),Nbe=a("strong"),J2r=o("roberta"),Y2r=o(" \u2014 "),yW=a("a"),K2r=o("TFRobertaForSequenceClassification"),Z2r=o(" (RoBERTa model)"),e1r=l(),aM=a("li"),jbe=a("strong"),o1r=o("roformer"),r1r=o(" \u2014 "),LW=a("a"),t1r=o("TFRoFormerForSequenceClassification"),a1r=o(" (RoFormer model)"),n1r=l(),nM=a("li"),Dbe=a("strong"),s1r=o("tapas"),l1r=o(" \u2014 "),xW=a("a"),i1r=o("TFTapasForSequenceClassification"),d1r=o(" (TAPAS model)"),c1r=l(),sM=a("li"),Gbe=a("strong"),f1r=o("transfo-xl"),m1r=o(" \u2014 "),$W=a("a"),g1r=o("TFTransfoXLForSequenceClassification"),h1r=o(" (Transformer-XL model)"),p1r=l(),lM=a("li"),Obe=a("strong"),u1r=o("xlm"),_1r=o(" \u2014 "),kW=a("a"),b1r=o("TFXLMForSequenceClassification"),v1r=o(" (XLM model)"),F1r=l(),iM=a("li"),Vbe=a("strong"),T1r=o("xlm-roberta"),M1r=o(" \u2014 "),SW=a("a"),E1r=o("TFXLMRobertaForSequenceClassification"),C1r=o(" (XLM-RoBERTa model)"),w1r=l(),dM=a("li"),Xbe=a("strong"),A1r=o("xlnet"),y1r=o(" \u2014 "),RW=a("a"),L1r=o("TFXLNetForSequenceClassification"),x1r=o(" (XLNet model)"),$1r=l(),F(cM.$$.fragment),MIe=l(),nc=a("h2"),fM=a("a"),zbe=a("span"),F(t8.$$.fragment),k1r=l(),Qbe=a("span"),S1r=o("TFAutoModelForMultipleChoice"),EIe=l(),ar=a("div"),F(a8.$$.fragment),R1r=l(),sc=a("p"),B1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BW=a("a"),P1r=o("from_pretrained()"),I1r=o(" class method or the "),PW=a("a"),q1r=o("from_config()"),N1r=o(` class
method.`),j1r=l(),n8=a("p"),D1r=o("This class cannot be instantiated directly using "),Wbe=a("code"),G1r=o("__init__()"),O1r=o(" (throws an error)."),V1r=l(),St=a("div"),F(s8.$$.fragment),X1r=l(),Hbe=a("p"),z1r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Q1r=l(),lc=a("p"),W1r=o(`Note:
Loading a model from its configuration file does `),Ube=a("strong"),H1r=o("not"),U1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),J1r=o("from_pretrained()"),Y1r=o(" to load the model weights."),K1r=l(),F(mM.$$.fragment),Z1r=l(),Sr=a("div"),F(l8.$$.fragment),ebr=l(),Jbe=a("p"),obr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rbr=l(),nn=a("p"),tbr=o("The model class to instantiate is selected based on the "),Ybe=a("code"),abr=o("model_type"),nbr=o(` property of the config object (either
passed as an argument or loaded from `),Kbe=a("code"),sbr=o("pretrained_model_name_or_path"),lbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=a("code"),ibr=o("pretrained_model_name_or_path"),dbr=o(":"),cbr=l(),pe=a("ul"),gM=a("li"),e5e=a("strong"),fbr=o("albert"),mbr=o(" \u2014 "),qW=a("a"),gbr=o("TFAlbertForMultipleChoice"),hbr=o(" (ALBERT model)"),pbr=l(),hM=a("li"),o5e=a("strong"),ubr=o("bert"),_br=o(" \u2014 "),NW=a("a"),bbr=o("TFBertForMultipleChoice"),vbr=o(" (BERT model)"),Fbr=l(),pM=a("li"),r5e=a("strong"),Tbr=o("camembert"),Mbr=o(" \u2014 "),jW=a("a"),Ebr=o("TFCamembertForMultipleChoice"),Cbr=o(" (CamemBERT model)"),wbr=l(),uM=a("li"),t5e=a("strong"),Abr=o("convbert"),ybr=o(" \u2014 "),DW=a("a"),Lbr=o("TFConvBertForMultipleChoice"),xbr=o(" (ConvBERT model)"),$br=l(),_M=a("li"),a5e=a("strong"),kbr=o("distilbert"),Sbr=o(" \u2014 "),GW=a("a"),Rbr=o("TFDistilBertForMultipleChoice"),Bbr=o(" (DistilBERT model)"),Pbr=l(),bM=a("li"),n5e=a("strong"),Ibr=o("electra"),qbr=o(" \u2014 "),OW=a("a"),Nbr=o("TFElectraForMultipleChoice"),jbr=o(" (ELECTRA model)"),Dbr=l(),vM=a("li"),s5e=a("strong"),Gbr=o("flaubert"),Obr=o(" \u2014 "),VW=a("a"),Vbr=o("TFFlaubertForMultipleChoice"),Xbr=o(" (FlauBERT model)"),zbr=l(),FM=a("li"),l5e=a("strong"),Qbr=o("funnel"),Wbr=o(" \u2014 "),XW=a("a"),Hbr=o("TFFunnelForMultipleChoice"),Ubr=o(" (Funnel Transformer model)"),Jbr=l(),TM=a("li"),i5e=a("strong"),Ybr=o("longformer"),Kbr=o(" \u2014 "),zW=a("a"),Zbr=o("TFLongformerForMultipleChoice"),e5r=o(" (Longformer model)"),o5r=l(),MM=a("li"),d5e=a("strong"),r5r=o("mobilebert"),t5r=o(" \u2014 "),QW=a("a"),a5r=o("TFMobileBertForMultipleChoice"),n5r=o(" (MobileBERT model)"),s5r=l(),EM=a("li"),c5e=a("strong"),l5r=o("mpnet"),i5r=o(" \u2014 "),WW=a("a"),d5r=o("TFMPNetForMultipleChoice"),c5r=o(" (MPNet model)"),f5r=l(),CM=a("li"),f5e=a("strong"),m5r=o("rembert"),g5r=o(" \u2014 "),HW=a("a"),h5r=o("TFRemBertForMultipleChoice"),p5r=o(" (RemBERT model)"),u5r=l(),wM=a("li"),m5e=a("strong"),_5r=o("roberta"),b5r=o(" \u2014 "),UW=a("a"),v5r=o("TFRobertaForMultipleChoice"),F5r=o(" (RoBERTa model)"),T5r=l(),AM=a("li"),g5e=a("strong"),M5r=o("roformer"),E5r=o(" \u2014 "),JW=a("a"),C5r=o("TFRoFormerForMultipleChoice"),w5r=o(" (RoFormer model)"),A5r=l(),yM=a("li"),h5e=a("strong"),y5r=o("xlm"),L5r=o(" \u2014 "),YW=a("a"),x5r=o("TFXLMForMultipleChoice"),$5r=o(" (XLM model)"),k5r=l(),LM=a("li"),p5e=a("strong"),S5r=o("xlm-roberta"),R5r=o(" \u2014 "),KW=a("a"),B5r=o("TFXLMRobertaForMultipleChoice"),P5r=o(" (XLM-RoBERTa model)"),I5r=l(),xM=a("li"),u5e=a("strong"),q5r=o("xlnet"),N5r=o(" \u2014 "),ZW=a("a"),j5r=o("TFXLNetForMultipleChoice"),D5r=o(" (XLNet model)"),G5r=l(),F($M.$$.fragment),CIe=l(),ic=a("h2"),kM=a("a"),_5e=a("span"),F(i8.$$.fragment),O5r=l(),b5e=a("span"),V5r=o("TFAutoModelForNextSentencePrediction"),wIe=l(),nr=a("div"),F(d8.$$.fragment),X5r=l(),dc=a("p"),z5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eH=a("a"),Q5r=o("from_pretrained()"),W5r=o(" class method or the "),oH=a("a"),H5r=o("from_config()"),U5r=o(` class
method.`),J5r=l(),c8=a("p"),Y5r=o("This class cannot be instantiated directly using "),v5e=a("code"),K5r=o("__init__()"),Z5r=o(" (throws an error)."),evr=l(),Rt=a("div"),F(f8.$$.fragment),ovr=l(),F5e=a("p"),rvr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tvr=l(),cc=a("p"),avr=o(`Note:
Loading a model from its configuration file does `),T5e=a("strong"),nvr=o("not"),svr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),lvr=o("from_pretrained()"),ivr=o(" to load the model weights."),dvr=l(),F(SM.$$.fragment),cvr=l(),Rr=a("div"),F(m8.$$.fragment),fvr=l(),M5e=a("p"),mvr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gvr=l(),sn=a("p"),hvr=o("The model class to instantiate is selected based on the "),E5e=a("code"),pvr=o("model_type"),uvr=o(` property of the config object (either
passed as an argument or loaded from `),C5e=a("code"),_vr=o("pretrained_model_name_or_path"),bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=a("code"),vvr=o("pretrained_model_name_or_path"),Fvr=o(":"),Tvr=l(),g8=a("ul"),RM=a("li"),A5e=a("strong"),Mvr=o("bert"),Evr=o(" \u2014 "),tH=a("a"),Cvr=o("TFBertForNextSentencePrediction"),wvr=o(" (BERT model)"),Avr=l(),BM=a("li"),y5e=a("strong"),yvr=o("mobilebert"),Lvr=o(" \u2014 "),aH=a("a"),xvr=o("TFMobileBertForNextSentencePrediction"),$vr=o(" (MobileBERT model)"),kvr=l(),F(PM.$$.fragment),AIe=l(),fc=a("h2"),IM=a("a"),L5e=a("span"),F(h8.$$.fragment),Svr=l(),x5e=a("span"),Rvr=o("TFAutoModelForTableQuestionAnswering"),yIe=l(),sr=a("div"),F(p8.$$.fragment),Bvr=l(),mc=a("p"),Pvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=a("a"),Ivr=o("from_pretrained()"),qvr=o(" class method or the "),sH=a("a"),Nvr=o("from_config()"),jvr=o(` class
method.`),Dvr=l(),u8=a("p"),Gvr=o("This class cannot be instantiated directly using "),$5e=a("code"),Ovr=o("__init__()"),Vvr=o(" (throws an error)."),Xvr=l(),Bt=a("div"),F(_8.$$.fragment),zvr=l(),k5e=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wvr=l(),gc=a("p"),Hvr=o(`Note:
Loading a model from its configuration file does `),S5e=a("strong"),Uvr=o("not"),Jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" to load the model weights."),Zvr=l(),F(qM.$$.fragment),eFr=l(),Br=a("div"),F(b8.$$.fragment),oFr=l(),R5e=a("p"),rFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),tFr=l(),ln=a("p"),aFr=o("The model class to instantiate is selected based on the "),B5e=a("code"),nFr=o("model_type"),sFr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),lFr=o("pretrained_model_name_or_path"),iFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(":"),fFr=l(),q5e=a("ul"),NM=a("li"),N5e=a("strong"),mFr=o("tapas"),gFr=o(" \u2014 "),iH=a("a"),hFr=o("TFTapasForQuestionAnswering"),pFr=o(" (TAPAS model)"),uFr=l(),F(jM.$$.fragment),LIe=l(),hc=a("h2"),DM=a("a"),j5e=a("span"),F(v8.$$.fragment),_Fr=l(),D5e=a("span"),bFr=o("TFAutoModelForTokenClassification"),xIe=l(),lr=a("div"),F(F8.$$.fragment),vFr=l(),pc=a("p"),FFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=a("a"),TFr=o("from_pretrained()"),MFr=o(" class method or the "),cH=a("a"),EFr=o("from_config()"),CFr=o(` class
method.`),wFr=l(),T8=a("p"),AFr=o("This class cannot be instantiated directly using "),G5e=a("code"),yFr=o("__init__()"),LFr=o(" (throws an error)."),xFr=l(),Pt=a("div"),F(M8.$$.fragment),$Fr=l(),O5e=a("p"),kFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),SFr=l(),uc=a("p"),RFr=o(`Note:
Loading a model from its configuration file does `),V5e=a("strong"),BFr=o("not"),PFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),IFr=o("from_pretrained()"),qFr=o(" to load the model weights."),NFr=l(),F(GM.$$.fragment),jFr=l(),Pr=a("div"),F(E8.$$.fragment),DFr=l(),X5e=a("p"),GFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OFr=l(),dn=a("p"),VFr=o("The model class to instantiate is selected based on the "),z5e=a("code"),XFr=o("model_type"),zFr=o(` property of the config object (either
passed as an argument or loaded from `),Q5e=a("code"),QFr=o("pretrained_model_name_or_path"),WFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),HFr=o("pretrained_model_name_or_path"),UFr=o(":"),JFr=l(),de=a("ul"),OM=a("li"),H5e=a("strong"),YFr=o("albert"),KFr=o(" \u2014 "),mH=a("a"),ZFr=o("TFAlbertForTokenClassification"),e6r=o(" (ALBERT model)"),o6r=l(),VM=a("li"),U5e=a("strong"),r6r=o("bert"),t6r=o(" \u2014 "),gH=a("a"),a6r=o("TFBertForTokenClassification"),n6r=o(" (BERT model)"),s6r=l(),XM=a("li"),J5e=a("strong"),l6r=o("camembert"),i6r=o(" \u2014 "),hH=a("a"),d6r=o("TFCamembertForTokenClassification"),c6r=o(" (CamemBERT model)"),f6r=l(),zM=a("li"),Y5e=a("strong"),m6r=o("convbert"),g6r=o(" \u2014 "),pH=a("a"),h6r=o("TFConvBertForTokenClassification"),p6r=o(" (ConvBERT model)"),u6r=l(),QM=a("li"),K5e=a("strong"),_6r=o("deberta"),b6r=o(" \u2014 "),uH=a("a"),v6r=o("TFDebertaForTokenClassification"),F6r=o(" (DeBERTa model)"),T6r=l(),WM=a("li"),Z5e=a("strong"),M6r=o("deberta-v2"),E6r=o(" \u2014 "),_H=a("a"),C6r=o("TFDebertaV2ForTokenClassification"),w6r=o(" (DeBERTa-v2 model)"),A6r=l(),HM=a("li"),eve=a("strong"),y6r=o("distilbert"),L6r=o(" \u2014 "),bH=a("a"),x6r=o("TFDistilBertForTokenClassification"),$6r=o(" (DistilBERT model)"),k6r=l(),UM=a("li"),ove=a("strong"),S6r=o("electra"),R6r=o(" \u2014 "),vH=a("a"),B6r=o("TFElectraForTokenClassification"),P6r=o(" (ELECTRA model)"),I6r=l(),JM=a("li"),rve=a("strong"),q6r=o("flaubert"),N6r=o(" \u2014 "),FH=a("a"),j6r=o("TFFlaubertForTokenClassification"),D6r=o(" (FlauBERT model)"),G6r=l(),YM=a("li"),tve=a("strong"),O6r=o("funnel"),V6r=o(" \u2014 "),TH=a("a"),X6r=o("TFFunnelForTokenClassification"),z6r=o(" (Funnel Transformer model)"),Q6r=l(),KM=a("li"),ave=a("strong"),W6r=o("layoutlm"),H6r=o(" \u2014 "),MH=a("a"),U6r=o("TFLayoutLMForTokenClassification"),J6r=o(" (LayoutLM model)"),Y6r=l(),ZM=a("li"),nve=a("strong"),K6r=o("longformer"),Z6r=o(" \u2014 "),EH=a("a"),eTr=o("TFLongformerForTokenClassification"),oTr=o(" (Longformer model)"),rTr=l(),e4=a("li"),sve=a("strong"),tTr=o("mobilebert"),aTr=o(" \u2014 "),CH=a("a"),nTr=o("TFMobileBertForTokenClassification"),sTr=o(" (MobileBERT model)"),lTr=l(),o4=a("li"),lve=a("strong"),iTr=o("mpnet"),dTr=o(" \u2014 "),wH=a("a"),cTr=o("TFMPNetForTokenClassification"),fTr=o(" (MPNet model)"),mTr=l(),r4=a("li"),ive=a("strong"),gTr=o("rembert"),hTr=o(" \u2014 "),AH=a("a"),pTr=o("TFRemBertForTokenClassification"),uTr=o(" (RemBERT model)"),_Tr=l(),t4=a("li"),dve=a("strong"),bTr=o("roberta"),vTr=o(" \u2014 "),yH=a("a"),FTr=o("TFRobertaForTokenClassification"),TTr=o(" (RoBERTa model)"),MTr=l(),a4=a("li"),cve=a("strong"),ETr=o("roformer"),CTr=o(" \u2014 "),LH=a("a"),wTr=o("TFRoFormerForTokenClassification"),ATr=o(" (RoFormer model)"),yTr=l(),n4=a("li"),fve=a("strong"),LTr=o("xlm"),xTr=o(" \u2014 "),xH=a("a"),$Tr=o("TFXLMForTokenClassification"),kTr=o(" (XLM model)"),STr=l(),s4=a("li"),mve=a("strong"),RTr=o("xlm-roberta"),BTr=o(" \u2014 "),$H=a("a"),PTr=o("TFXLMRobertaForTokenClassification"),ITr=o(" (XLM-RoBERTa model)"),qTr=l(),l4=a("li"),gve=a("strong"),NTr=o("xlnet"),jTr=o(" \u2014 "),kH=a("a"),DTr=o("TFXLNetForTokenClassification"),GTr=o(" (XLNet model)"),OTr=l(),F(i4.$$.fragment),$Ie=l(),_c=a("h2"),d4=a("a"),hve=a("span"),F(C8.$$.fragment),VTr=l(),pve=a("span"),XTr=o("TFAutoModelForQuestionAnswering"),kIe=l(),ir=a("div"),F(w8.$$.fragment),zTr=l(),bc=a("p"),QTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=a("a"),WTr=o("from_pretrained()"),HTr=o(" class method or the "),RH=a("a"),UTr=o("from_config()"),JTr=o(` class
method.`),YTr=l(),A8=a("p"),KTr=o("This class cannot be instantiated directly using "),uve=a("code"),ZTr=o("__init__()"),e9r=o(" (throws an error)."),o9r=l(),It=a("div"),F(y8.$$.fragment),r9r=l(),_ve=a("p"),t9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a9r=l(),vc=a("p"),n9r=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),s9r=o("not"),l9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=a("a"),i9r=o("from_pretrained()"),d9r=o(" to load the model weights."),c9r=l(),F(c4.$$.fragment),f9r=l(),Ir=a("div"),F(L8.$$.fragment),m9r=l(),vve=a("p"),g9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h9r=l(),cn=a("p"),p9r=o("The model class to instantiate is selected based on the "),Fve=a("code"),u9r=o("model_type"),_9r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),b9r=o("pretrained_model_name_or_path"),v9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),F9r=o("pretrained_model_name_or_path"),T9r=o(":"),M9r=l(),ce=a("ul"),f4=a("li"),Eve=a("strong"),E9r=o("albert"),C9r=o(" \u2014 "),PH=a("a"),w9r=o("TFAlbertForQuestionAnswering"),A9r=o(" (ALBERT model)"),y9r=l(),m4=a("li"),Cve=a("strong"),L9r=o("bert"),x9r=o(" \u2014 "),IH=a("a"),$9r=o("TFBertForQuestionAnswering"),k9r=o(" (BERT model)"),S9r=l(),g4=a("li"),wve=a("strong"),R9r=o("camembert"),B9r=o(" \u2014 "),qH=a("a"),P9r=o("TFCamembertForQuestionAnswering"),I9r=o(" (CamemBERT model)"),q9r=l(),h4=a("li"),Ave=a("strong"),N9r=o("convbert"),j9r=o(" \u2014 "),NH=a("a"),D9r=o("TFConvBertForQuestionAnswering"),G9r=o(" (ConvBERT model)"),O9r=l(),p4=a("li"),yve=a("strong"),V9r=o("deberta"),X9r=o(" \u2014 "),jH=a("a"),z9r=o("TFDebertaForQuestionAnswering"),Q9r=o(" (DeBERTa model)"),W9r=l(),u4=a("li"),Lve=a("strong"),H9r=o("deberta-v2"),U9r=o(" \u2014 "),DH=a("a"),J9r=o("TFDebertaV2ForQuestionAnswering"),Y9r=o(" (DeBERTa-v2 model)"),K9r=l(),_4=a("li"),xve=a("strong"),Z9r=o("distilbert"),eMr=o(" \u2014 "),GH=a("a"),oMr=o("TFDistilBertForQuestionAnswering"),rMr=o(" (DistilBERT model)"),tMr=l(),b4=a("li"),$ve=a("strong"),aMr=o("electra"),nMr=o(" \u2014 "),OH=a("a"),sMr=o("TFElectraForQuestionAnswering"),lMr=o(" (ELECTRA model)"),iMr=l(),v4=a("li"),kve=a("strong"),dMr=o("flaubert"),cMr=o(" \u2014 "),VH=a("a"),fMr=o("TFFlaubertForQuestionAnsweringSimple"),mMr=o(" (FlauBERT model)"),gMr=l(),F4=a("li"),Sve=a("strong"),hMr=o("funnel"),pMr=o(" \u2014 "),XH=a("a"),uMr=o("TFFunnelForQuestionAnswering"),_Mr=o(" (Funnel Transformer model)"),bMr=l(),T4=a("li"),Rve=a("strong"),vMr=o("gptj"),FMr=o(" \u2014 "),zH=a("a"),TMr=o("TFGPTJForQuestionAnswering"),MMr=o(" (GPT-J model)"),EMr=l(),M4=a("li"),Bve=a("strong"),CMr=o("longformer"),wMr=o(" \u2014 "),QH=a("a"),AMr=o("TFLongformerForQuestionAnswering"),yMr=o(" (Longformer model)"),LMr=l(),E4=a("li"),Pve=a("strong"),xMr=o("mobilebert"),$Mr=o(" \u2014 "),WH=a("a"),kMr=o("TFMobileBertForQuestionAnswering"),SMr=o(" (MobileBERT model)"),RMr=l(),C4=a("li"),Ive=a("strong"),BMr=o("mpnet"),PMr=o(" \u2014 "),HH=a("a"),IMr=o("TFMPNetForQuestionAnswering"),qMr=o(" (MPNet model)"),NMr=l(),w4=a("li"),qve=a("strong"),jMr=o("rembert"),DMr=o(" \u2014 "),UH=a("a"),GMr=o("TFRemBertForQuestionAnswering"),OMr=o(" (RemBERT model)"),VMr=l(),A4=a("li"),Nve=a("strong"),XMr=o("roberta"),zMr=o(" \u2014 "),JH=a("a"),QMr=o("TFRobertaForQuestionAnswering"),WMr=o(" (RoBERTa model)"),HMr=l(),y4=a("li"),jve=a("strong"),UMr=o("roformer"),JMr=o(" \u2014 "),YH=a("a"),YMr=o("TFRoFormerForQuestionAnswering"),KMr=o(" (RoFormer model)"),ZMr=l(),L4=a("li"),Dve=a("strong"),e4r=o("xlm"),o4r=o(" \u2014 "),KH=a("a"),r4r=o("TFXLMForQuestionAnsweringSimple"),t4r=o(" (XLM model)"),a4r=l(),x4=a("li"),Gve=a("strong"),n4r=o("xlm-roberta"),s4r=o(" \u2014 "),ZH=a("a"),l4r=o("TFXLMRobertaForQuestionAnswering"),i4r=o(" (XLM-RoBERTa model)"),d4r=l(),$4=a("li"),Ove=a("strong"),c4r=o("xlnet"),f4r=o(" \u2014 "),eU=a("a"),m4r=o("TFXLNetForQuestionAnsweringSimple"),g4r=o(" (XLNet model)"),h4r=l(),F(k4.$$.fragment),SIe=l(),Fc=a("h2"),S4=a("a"),Vve=a("span"),F(x8.$$.fragment),p4r=l(),Xve=a("span"),u4r=o("TFAutoModelForVision2Seq"),RIe=l(),dr=a("div"),F($8.$$.fragment),_4r=l(),Tc=a("p"),b4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oU=a("a"),v4r=o("from_pretrained()"),F4r=o(" class method or the "),rU=a("a"),T4r=o("from_config()"),M4r=o(` class
method.`),E4r=l(),k8=a("p"),C4r=o("This class cannot be instantiated directly using "),zve=a("code"),w4r=o("__init__()"),A4r=o(" (throws an error)."),y4r=l(),qt=a("div"),F(S8.$$.fragment),L4r=l(),Qve=a("p"),x4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$4r=l(),Mc=a("p"),k4r=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),S4r=o("not"),R4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=a("a"),B4r=o("from_pretrained()"),P4r=o(" to load the model weights."),I4r=l(),F(R4.$$.fragment),q4r=l(),qr=a("div"),F(R8.$$.fragment),N4r=l(),Hve=a("p"),j4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),D4r=l(),fn=a("p"),G4r=o("The model class to instantiate is selected based on the "),Uve=a("code"),O4r=o("model_type"),V4r=o(` property of the config object (either
passed as an argument or loaded from `),Jve=a("code"),X4r=o("pretrained_model_name_or_path"),z4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=a("code"),Q4r=o("pretrained_model_name_or_path"),W4r=o(":"),H4r=l(),Kve=a("ul"),B4=a("li"),Zve=a("strong"),U4r=o("vision-encoder-decoder"),J4r=o(" \u2014 "),aU=a("a"),Y4r=o("TFVisionEncoderDecoderModel"),K4r=o(" (Vision Encoder decoder model)"),Z4r=l(),F(P4.$$.fragment),BIe=l(),Ec=a("h2"),I4=a("a"),eFe=a("span"),F(B8.$$.fragment),eEr=l(),oFe=a("span"),oEr=o("TFAutoModelForSpeechSeq2Seq"),PIe=l(),cr=a("div"),F(P8.$$.fragment),rEr=l(),Cc=a("p"),tEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nU=a("a"),aEr=o("from_pretrained()"),nEr=o(" class method or the "),sU=a("a"),sEr=o("from_config()"),lEr=o(` class
method.`),iEr=l(),I8=a("p"),dEr=o("This class cannot be instantiated directly using "),rFe=a("code"),cEr=o("__init__()"),fEr=o(" (throws an error)."),mEr=l(),Nt=a("div"),F(q8.$$.fragment),gEr=l(),tFe=a("p"),hEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pEr=l(),wc=a("p"),uEr=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),_Er=o("not"),bEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),vEr=o("from_pretrained()"),FEr=o(" to load the model weights."),TEr=l(),F(q4.$$.fragment),MEr=l(),Nr=a("div"),F(N8.$$.fragment),EEr=l(),nFe=a("p"),CEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wEr=l(),mn=a("p"),AEr=o("The model class to instantiate is selected based on the "),sFe=a("code"),yEr=o("model_type"),LEr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),xEr=o("pretrained_model_name_or_path"),$Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),kEr=o("pretrained_model_name_or_path"),SEr=o(":"),REr=l(),dFe=a("ul"),N4=a("li"),cFe=a("strong"),BEr=o("speech_to_text"),PEr=o(" \u2014 "),iU=a("a"),IEr=o("TFSpeech2TextForConditionalGeneration"),qEr=o(" (Speech2Text model)"),NEr=l(),F(j4.$$.fragment),IIe=l(),Ac=a("h2"),D4=a("a"),fFe=a("span"),F(j8.$$.fragment),jEr=l(),mFe=a("span"),DEr=o("FlaxAutoModel"),qIe=l(),fr=a("div"),F(D8.$$.fragment),GEr=l(),yc=a("p"),OEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=a("a"),VEr=o("from_pretrained()"),XEr=o(" class method or the "),cU=a("a"),zEr=o("from_config()"),QEr=o(` class
method.`),WEr=l(),G8=a("p"),HEr=o("This class cannot be instantiated directly using "),gFe=a("code"),UEr=o("__init__()"),JEr=o(" (throws an error)."),YEr=l(),jt=a("div"),F(O8.$$.fragment),KEr=l(),hFe=a("p"),ZEr=o("Instantiates one of the base model classes of the library from a configuration."),eCr=l(),Lc=a("p"),oCr=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),rCr=o("not"),tCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),aCr=o("from_pretrained()"),nCr=o(" to load the model weights."),sCr=l(),F(G4.$$.fragment),lCr=l(),jr=a("div"),F(V8.$$.fragment),iCr=l(),uFe=a("p"),dCr=o("Instantiate one of the base model classes of the library from a pretrained model."),cCr=l(),gn=a("p"),fCr=o("The model class to instantiate is selected based on the "),_Fe=a("code"),mCr=o("model_type"),gCr=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),hCr=o("pretrained_model_name_or_path"),pCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(":"),bCr=l(),oe=a("ul"),O4=a("li"),FFe=a("strong"),vCr=o("albert"),FCr=o(" \u2014 "),mU=a("a"),TCr=o("FlaxAlbertModel"),MCr=o(" (ALBERT model)"),ECr=l(),V4=a("li"),TFe=a("strong"),CCr=o("bart"),wCr=o(" \u2014 "),gU=a("a"),ACr=o("FlaxBartModel"),yCr=o(" (BART model)"),LCr=l(),X4=a("li"),MFe=a("strong"),xCr=o("beit"),$Cr=o(" \u2014 "),hU=a("a"),kCr=o("FlaxBeitModel"),SCr=o(" (BEiT model)"),RCr=l(),z4=a("li"),EFe=a("strong"),BCr=o("bert"),PCr=o(" \u2014 "),pU=a("a"),ICr=o("FlaxBertModel"),qCr=o(" (BERT model)"),NCr=l(),Q4=a("li"),CFe=a("strong"),jCr=o("big_bird"),DCr=o(" \u2014 "),uU=a("a"),GCr=o("FlaxBigBirdModel"),OCr=o(" (BigBird model)"),VCr=l(),W4=a("li"),wFe=a("strong"),XCr=o("blenderbot"),zCr=o(" \u2014 "),_U=a("a"),QCr=o("FlaxBlenderbotModel"),WCr=o(" (Blenderbot model)"),HCr=l(),H4=a("li"),AFe=a("strong"),UCr=o("blenderbot-small"),JCr=o(" \u2014 "),bU=a("a"),YCr=o("FlaxBlenderbotSmallModel"),KCr=o(" (BlenderbotSmall model)"),ZCr=l(),U4=a("li"),yFe=a("strong"),e3r=o("clip"),o3r=o(" \u2014 "),vU=a("a"),r3r=o("FlaxCLIPModel"),t3r=o(" (CLIP model)"),a3r=l(),J4=a("li"),LFe=a("strong"),n3r=o("distilbert"),s3r=o(" \u2014 "),FU=a("a"),l3r=o("FlaxDistilBertModel"),i3r=o(" (DistilBERT model)"),d3r=l(),Y4=a("li"),xFe=a("strong"),c3r=o("electra"),f3r=o(" \u2014 "),TU=a("a"),m3r=o("FlaxElectraModel"),g3r=o(" (ELECTRA model)"),h3r=l(),K4=a("li"),$Fe=a("strong"),p3r=o("gpt2"),u3r=o(" \u2014 "),MU=a("a"),_3r=o("FlaxGPT2Model"),b3r=o(" (OpenAI GPT-2 model)"),v3r=l(),Z4=a("li"),kFe=a("strong"),F3r=o("gpt_neo"),T3r=o(" \u2014 "),EU=a("a"),M3r=o("FlaxGPTNeoModel"),E3r=o(" (GPT Neo model)"),C3r=l(),eE=a("li"),SFe=a("strong"),w3r=o("gptj"),A3r=o(" \u2014 "),CU=a("a"),y3r=o("FlaxGPTJModel"),L3r=o(" (GPT-J model)"),x3r=l(),oE=a("li"),RFe=a("strong"),$3r=o("marian"),k3r=o(" \u2014 "),wU=a("a"),S3r=o("FlaxMarianModel"),R3r=o(" (Marian model)"),B3r=l(),rE=a("li"),BFe=a("strong"),P3r=o("mbart"),I3r=o(" \u2014 "),AU=a("a"),q3r=o("FlaxMBartModel"),N3r=o(" (mBART model)"),j3r=l(),tE=a("li"),PFe=a("strong"),D3r=o("mt5"),G3r=o(" \u2014 "),yU=a("a"),O3r=o("FlaxMT5Model"),V3r=o(" (mT5 model)"),X3r=l(),aE=a("li"),IFe=a("strong"),z3r=o("pegasus"),Q3r=o(" \u2014 "),LU=a("a"),W3r=o("FlaxPegasusModel"),H3r=o(" (Pegasus model)"),U3r=l(),nE=a("li"),qFe=a("strong"),J3r=o("roberta"),Y3r=o(" \u2014 "),xU=a("a"),K3r=o("FlaxRobertaModel"),Z3r=o(" (RoBERTa model)"),ewr=l(),sE=a("li"),NFe=a("strong"),owr=o("roformer"),rwr=o(" \u2014 "),$U=a("a"),twr=o("FlaxRoFormerModel"),awr=o(" (RoFormer model)"),nwr=l(),lE=a("li"),jFe=a("strong"),swr=o("t5"),lwr=o(" \u2014 "),kU=a("a"),iwr=o("FlaxT5Model"),dwr=o(" (T5 model)"),cwr=l(),iE=a("li"),DFe=a("strong"),fwr=o("vision-text-dual-encoder"),mwr=o(" \u2014 "),SU=a("a"),gwr=o("FlaxVisionTextDualEncoderModel"),hwr=o(" (VisionTextDualEncoder model)"),pwr=l(),dE=a("li"),GFe=a("strong"),uwr=o("vit"),_wr=o(" \u2014 "),RU=a("a"),bwr=o("FlaxViTModel"),vwr=o(" (ViT model)"),Fwr=l(),cE=a("li"),OFe=a("strong"),Twr=o("wav2vec2"),Mwr=o(" \u2014 "),BU=a("a"),Ewr=o("FlaxWav2Vec2Model"),Cwr=o(" (Wav2Vec2 model)"),wwr=l(),fE=a("li"),VFe=a("strong"),Awr=o("xglm"),ywr=o(" \u2014 "),PU=a("a"),Lwr=o("FlaxXGLMModel"),xwr=o(" (XGLM model)"),$wr=l(),mE=a("li"),XFe=a("strong"),kwr=o("xlm-roberta"),Swr=o(" \u2014 "),IU=a("a"),Rwr=o("FlaxXLMRobertaModel"),Bwr=o(" (XLM-RoBERTa model)"),Pwr=l(),F(gE.$$.fragment),NIe=l(),xc=a("h2"),hE=a("a"),zFe=a("span"),F(X8.$$.fragment),Iwr=l(),QFe=a("span"),qwr=o("FlaxAutoModelForCausalLM"),jIe=l(),mr=a("div"),F(z8.$$.fragment),Nwr=l(),$c=a("p"),jwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=a("a"),Dwr=o("from_pretrained()"),Gwr=o(" class method or the "),NU=a("a"),Owr=o("from_config()"),Vwr=o(` class
method.`),Xwr=l(),Q8=a("p"),zwr=o("This class cannot be instantiated directly using "),WFe=a("code"),Qwr=o("__init__()"),Wwr=o(" (throws an error)."),Hwr=l(),Dt=a("div"),F(W8.$$.fragment),Uwr=l(),HFe=a("p"),Jwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ywr=l(),kc=a("p"),Kwr=o(`Note:
Loading a model from its configuration file does `),UFe=a("strong"),Zwr=o("not"),eAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),oAr=o("from_pretrained()"),rAr=o(" to load the model weights."),tAr=l(),F(pE.$$.fragment),aAr=l(),Dr=a("div"),F(H8.$$.fragment),nAr=l(),JFe=a("p"),sAr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lAr=l(),hn=a("p"),iAr=o("The model class to instantiate is selected based on the "),YFe=a("code"),dAr=o("model_type"),cAr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),gAr=o("pretrained_model_name_or_path"),hAr=o(":"),pAr=l(),ke=a("ul"),uE=a("li"),e6e=a("strong"),uAr=o("bart"),_Ar=o(" \u2014 "),DU=a("a"),bAr=o("FlaxBartForCausalLM"),vAr=o(" (BART model)"),FAr=l(),_E=a("li"),o6e=a("strong"),TAr=o("bert"),MAr=o(" \u2014 "),GU=a("a"),EAr=o("FlaxBertForCausalLM"),CAr=o(" (BERT model)"),wAr=l(),bE=a("li"),r6e=a("strong"),AAr=o("big_bird"),yAr=o(" \u2014 "),OU=a("a"),LAr=o("FlaxBigBirdForCausalLM"),xAr=o(" (BigBird model)"),$Ar=l(),vE=a("li"),t6e=a("strong"),kAr=o("electra"),SAr=o(" \u2014 "),VU=a("a"),RAr=o("FlaxElectraForCausalLM"),BAr=o(" (ELECTRA model)"),PAr=l(),FE=a("li"),a6e=a("strong"),IAr=o("gpt2"),qAr=o(" \u2014 "),XU=a("a"),NAr=o("FlaxGPT2LMHeadModel"),jAr=o(" (OpenAI GPT-2 model)"),DAr=l(),TE=a("li"),n6e=a("strong"),GAr=o("gpt_neo"),OAr=o(" \u2014 "),zU=a("a"),VAr=o("FlaxGPTNeoForCausalLM"),XAr=o(" (GPT Neo model)"),zAr=l(),ME=a("li"),s6e=a("strong"),QAr=o("gptj"),WAr=o(" \u2014 "),QU=a("a"),HAr=o("FlaxGPTJForCausalLM"),UAr=o(" (GPT-J model)"),JAr=l(),EE=a("li"),l6e=a("strong"),YAr=o("roberta"),KAr=o(" \u2014 "),WU=a("a"),ZAr=o("FlaxRobertaForCausalLM"),e0r=o(" (RoBERTa model)"),o0r=l(),CE=a("li"),i6e=a("strong"),r0r=o("xglm"),t0r=o(" \u2014 "),HU=a("a"),a0r=o("FlaxXGLMForCausalLM"),n0r=o(" (XGLM model)"),s0r=l(),F(wE.$$.fragment),DIe=l(),Sc=a("h2"),AE=a("a"),d6e=a("span"),F(U8.$$.fragment),l0r=l(),c6e=a("span"),i0r=o("FlaxAutoModelForPreTraining"),GIe=l(),gr=a("div"),F(J8.$$.fragment),d0r=l(),Rc=a("p"),c0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UU=a("a"),f0r=o("from_pretrained()"),m0r=o(" class method or the "),JU=a("a"),g0r=o("from_config()"),h0r=o(` class
method.`),p0r=l(),Y8=a("p"),u0r=o("This class cannot be instantiated directly using "),f6e=a("code"),_0r=o("__init__()"),b0r=o(" (throws an error)."),v0r=l(),Gt=a("div"),F(K8.$$.fragment),F0r=l(),m6e=a("p"),T0r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M0r=l(),Bc=a("p"),E0r=o(`Note:
Loading a model from its configuration file does `),g6e=a("strong"),C0r=o("not"),w0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),A0r=o("from_pretrained()"),y0r=o(" to load the model weights."),L0r=l(),F(yE.$$.fragment),x0r=l(),Gr=a("div"),F(Z8.$$.fragment),$0r=l(),h6e=a("p"),k0r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S0r=l(),pn=a("p"),R0r=o("The model class to instantiate is selected based on the "),p6e=a("code"),B0r=o("model_type"),P0r=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),I0r=o("pretrained_model_name_or_path"),q0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=a("code"),N0r=o("pretrained_model_name_or_path"),j0r=o(":"),D0r=l(),Me=a("ul"),LE=a("li"),b6e=a("strong"),G0r=o("albert"),O0r=o(" \u2014 "),KU=a("a"),V0r=o("FlaxAlbertForPreTraining"),X0r=o(" (ALBERT model)"),z0r=l(),xE=a("li"),v6e=a("strong"),Q0r=o("bart"),W0r=o(" \u2014 "),ZU=a("a"),H0r=o("FlaxBartForConditionalGeneration"),U0r=o(" (BART model)"),J0r=l(),$E=a("li"),F6e=a("strong"),Y0r=o("bert"),K0r=o(" \u2014 "),eJ=a("a"),Z0r=o("FlaxBertForPreTraining"),eyr=o(" (BERT model)"),oyr=l(),kE=a("li"),T6e=a("strong"),ryr=o("big_bird"),tyr=o(" \u2014 "),oJ=a("a"),ayr=o("FlaxBigBirdForPreTraining"),nyr=o(" (BigBird model)"),syr=l(),SE=a("li"),M6e=a("strong"),lyr=o("electra"),iyr=o(" \u2014 "),rJ=a("a"),dyr=o("FlaxElectraForPreTraining"),cyr=o(" (ELECTRA model)"),fyr=l(),RE=a("li"),E6e=a("strong"),myr=o("mbart"),gyr=o(" \u2014 "),tJ=a("a"),hyr=o("FlaxMBartForConditionalGeneration"),pyr=o(" (mBART model)"),uyr=l(),BE=a("li"),C6e=a("strong"),_yr=o("mt5"),byr=o(" \u2014 "),aJ=a("a"),vyr=o("FlaxMT5ForConditionalGeneration"),Fyr=o(" (mT5 model)"),Tyr=l(),PE=a("li"),w6e=a("strong"),Myr=o("roberta"),Eyr=o(" \u2014 "),nJ=a("a"),Cyr=o("FlaxRobertaForMaskedLM"),wyr=o(" (RoBERTa model)"),Ayr=l(),IE=a("li"),A6e=a("strong"),yyr=o("roformer"),Lyr=o(" \u2014 "),sJ=a("a"),xyr=o("FlaxRoFormerForMaskedLM"),$yr=o(" (RoFormer model)"),kyr=l(),qE=a("li"),y6e=a("strong"),Syr=o("t5"),Ryr=o(" \u2014 "),lJ=a("a"),Byr=o("FlaxT5ForConditionalGeneration"),Pyr=o(" (T5 model)"),Iyr=l(),NE=a("li"),L6e=a("strong"),qyr=o("wav2vec2"),Nyr=o(" \u2014 "),iJ=a("a"),jyr=o("FlaxWav2Vec2ForPreTraining"),Dyr=o(" (Wav2Vec2 model)"),Gyr=l(),jE=a("li"),x6e=a("strong"),Oyr=o("xlm-roberta"),Vyr=o(" \u2014 "),dJ=a("a"),Xyr=o("FlaxXLMRobertaForMaskedLM"),zyr=o(" (XLM-RoBERTa model)"),Qyr=l(),F(DE.$$.fragment),OIe=l(),Pc=a("h2"),GE=a("a"),$6e=a("span"),F(ex.$$.fragment),Wyr=l(),k6e=a("span"),Hyr=o("FlaxAutoModelForMaskedLM"),VIe=l(),hr=a("div"),F(ox.$$.fragment),Uyr=l(),Ic=a("p"),Jyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=a("a"),Yyr=o("from_pretrained()"),Kyr=o(" class method or the "),fJ=a("a"),Zyr=o("from_config()"),eLr=o(` class
method.`),oLr=l(),rx=a("p"),rLr=o("This class cannot be instantiated directly using "),S6e=a("code"),tLr=o("__init__()"),aLr=o(" (throws an error)."),nLr=l(),Ot=a("div"),F(tx.$$.fragment),sLr=l(),R6e=a("p"),lLr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),iLr=l(),qc=a("p"),dLr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),cLr=o("not"),fLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),mLr=o("from_pretrained()"),gLr=o(" to load the model weights."),hLr=l(),F(OE.$$.fragment),pLr=l(),Or=a("div"),F(ax.$$.fragment),uLr=l(),P6e=a("p"),_Lr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bLr=l(),un=a("p"),vLr=o("The model class to instantiate is selected based on the "),I6e=a("code"),FLr=o("model_type"),TLr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),MLr=o("pretrained_model_name_or_path"),ELr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),CLr=o("pretrained_model_name_or_path"),wLr=o(":"),ALr=l(),Le=a("ul"),VE=a("li"),j6e=a("strong"),yLr=o("albert"),LLr=o(" \u2014 "),gJ=a("a"),xLr=o("FlaxAlbertForMaskedLM"),$Lr=o(" (ALBERT model)"),kLr=l(),XE=a("li"),D6e=a("strong"),SLr=o("bart"),RLr=o(" \u2014 "),hJ=a("a"),BLr=o("FlaxBartForConditionalGeneration"),PLr=o(" (BART model)"),ILr=l(),zE=a("li"),G6e=a("strong"),qLr=o("bert"),NLr=o(" \u2014 "),pJ=a("a"),jLr=o("FlaxBertForMaskedLM"),DLr=o(" (BERT model)"),GLr=l(),QE=a("li"),O6e=a("strong"),OLr=o("big_bird"),VLr=o(" \u2014 "),uJ=a("a"),XLr=o("FlaxBigBirdForMaskedLM"),zLr=o(" (BigBird model)"),QLr=l(),WE=a("li"),V6e=a("strong"),WLr=o("distilbert"),HLr=o(" \u2014 "),_J=a("a"),ULr=o("FlaxDistilBertForMaskedLM"),JLr=o(" (DistilBERT model)"),YLr=l(),HE=a("li"),X6e=a("strong"),KLr=o("electra"),ZLr=o(" \u2014 "),bJ=a("a"),e8r=o("FlaxElectraForMaskedLM"),o8r=o(" (ELECTRA model)"),r8r=l(),UE=a("li"),z6e=a("strong"),t8r=o("mbart"),a8r=o(" \u2014 "),vJ=a("a"),n8r=o("FlaxMBartForConditionalGeneration"),s8r=o(" (mBART model)"),l8r=l(),JE=a("li"),Q6e=a("strong"),i8r=o("roberta"),d8r=o(" \u2014 "),FJ=a("a"),c8r=o("FlaxRobertaForMaskedLM"),f8r=o(" (RoBERTa model)"),m8r=l(),YE=a("li"),W6e=a("strong"),g8r=o("roformer"),h8r=o(" \u2014 "),TJ=a("a"),p8r=o("FlaxRoFormerForMaskedLM"),u8r=o(" (RoFormer model)"),_8r=l(),KE=a("li"),H6e=a("strong"),b8r=o("xlm-roberta"),v8r=o(" \u2014 "),MJ=a("a"),F8r=o("FlaxXLMRobertaForMaskedLM"),T8r=o(" (XLM-RoBERTa model)"),M8r=l(),F(ZE.$$.fragment),XIe=l(),Nc=a("h2"),eC=a("a"),U6e=a("span"),F(nx.$$.fragment),E8r=l(),J6e=a("span"),C8r=o("FlaxAutoModelForSeq2SeqLM"),zIe=l(),pr=a("div"),F(sx.$$.fragment),w8r=l(),jc=a("p"),A8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=a("a"),y8r=o("from_pretrained()"),L8r=o(" class method or the "),CJ=a("a"),x8r=o("from_config()"),$8r=o(` class
method.`),k8r=l(),lx=a("p"),S8r=o("This class cannot be instantiated directly using "),Y6e=a("code"),R8r=o("__init__()"),B8r=o(" (throws an error)."),P8r=l(),Vt=a("div"),F(ix.$$.fragment),I8r=l(),K6e=a("p"),q8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),N8r=l(),Dc=a("p"),j8r=o(`Note:
Loading a model from its configuration file does `),Z6e=a("strong"),D8r=o("not"),G8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),O8r=o("from_pretrained()"),V8r=o(" to load the model weights."),X8r=l(),F(oC.$$.fragment),z8r=l(),Vr=a("div"),F(dx.$$.fragment),Q8r=l(),eTe=a("p"),W8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),H8r=l(),_n=a("p"),U8r=o("The model class to instantiate is selected based on the "),oTe=a("code"),J8r=o("model_type"),Y8r=o(` property of the config object (either
passed as an argument or loaded from `),rTe=a("code"),K8r=o("pretrained_model_name_or_path"),Z8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=a("code"),exr=o("pretrained_model_name_or_path"),oxr=o(":"),rxr=l(),Se=a("ul"),rC=a("li"),aTe=a("strong"),txr=o("bart"),axr=o(" \u2014 "),AJ=a("a"),nxr=o("FlaxBartForConditionalGeneration"),sxr=o(" (BART model)"),lxr=l(),tC=a("li"),nTe=a("strong"),ixr=o("blenderbot"),dxr=o(" \u2014 "),yJ=a("a"),cxr=o("FlaxBlenderbotForConditionalGeneration"),fxr=o(" (Blenderbot model)"),mxr=l(),aC=a("li"),sTe=a("strong"),gxr=o("blenderbot-small"),hxr=o(" \u2014 "),LJ=a("a"),pxr=o("FlaxBlenderbotSmallForConditionalGeneration"),uxr=o(" (BlenderbotSmall model)"),_xr=l(),nC=a("li"),lTe=a("strong"),bxr=o("encoder-decoder"),vxr=o(" \u2014 "),xJ=a("a"),Fxr=o("FlaxEncoderDecoderModel"),Txr=o(" (Encoder decoder model)"),Mxr=l(),sC=a("li"),iTe=a("strong"),Exr=o("marian"),Cxr=o(" \u2014 "),$J=a("a"),wxr=o("FlaxMarianMTModel"),Axr=o(" (Marian model)"),yxr=l(),lC=a("li"),dTe=a("strong"),Lxr=o("mbart"),xxr=o(" \u2014 "),kJ=a("a"),$xr=o("FlaxMBartForConditionalGeneration"),kxr=o(" (mBART model)"),Sxr=l(),iC=a("li"),cTe=a("strong"),Rxr=o("mt5"),Bxr=o(" \u2014 "),SJ=a("a"),Pxr=o("FlaxMT5ForConditionalGeneration"),Ixr=o(" (mT5 model)"),qxr=l(),dC=a("li"),fTe=a("strong"),Nxr=o("pegasus"),jxr=o(" \u2014 "),RJ=a("a"),Dxr=o("FlaxPegasusForConditionalGeneration"),Gxr=o(" (Pegasus model)"),Oxr=l(),cC=a("li"),mTe=a("strong"),Vxr=o("t5"),Xxr=o(" \u2014 "),BJ=a("a"),zxr=o("FlaxT5ForConditionalGeneration"),Qxr=o(" (T5 model)"),Wxr=l(),F(fC.$$.fragment),QIe=l(),Gc=a("h2"),mC=a("a"),gTe=a("span"),F(cx.$$.fragment),Hxr=l(),hTe=a("span"),Uxr=o("FlaxAutoModelForSequenceClassification"),WIe=l(),ur=a("div"),F(fx.$$.fragment),Jxr=l(),Oc=a("p"),Yxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PJ=a("a"),Kxr=o("from_pretrained()"),Zxr=o(" class method or the "),IJ=a("a"),e7r=o("from_config()"),o7r=o(` class
method.`),r7r=l(),mx=a("p"),t7r=o("This class cannot be instantiated directly using "),pTe=a("code"),a7r=o("__init__()"),n7r=o(" (throws an error)."),s7r=l(),Xt=a("div"),F(gx.$$.fragment),l7r=l(),uTe=a("p"),i7r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),d7r=l(),Vc=a("p"),c7r=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),f7r=o("not"),m7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),g7r=o("from_pretrained()"),h7r=o(" to load the model weights."),p7r=l(),F(gC.$$.fragment),u7r=l(),Xr=a("div"),F(hx.$$.fragment),_7r=l(),bTe=a("p"),b7r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),v7r=l(),bn=a("p"),F7r=o("The model class to instantiate is selected based on the "),vTe=a("code"),T7r=o("model_type"),M7r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),E7r=o("pretrained_model_name_or_path"),C7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),w7r=o("pretrained_model_name_or_path"),A7r=o(":"),y7r=l(),xe=a("ul"),hC=a("li"),MTe=a("strong"),L7r=o("albert"),x7r=o(" \u2014 "),NJ=a("a"),$7r=o("FlaxAlbertForSequenceClassification"),k7r=o(" (ALBERT model)"),S7r=l(),pC=a("li"),ETe=a("strong"),R7r=o("bart"),B7r=o(" \u2014 "),jJ=a("a"),P7r=o("FlaxBartForSequenceClassification"),I7r=o(" (BART model)"),q7r=l(),uC=a("li"),CTe=a("strong"),N7r=o("bert"),j7r=o(" \u2014 "),DJ=a("a"),D7r=o("FlaxBertForSequenceClassification"),G7r=o(" (BERT model)"),O7r=l(),_C=a("li"),wTe=a("strong"),V7r=o("big_bird"),X7r=o(" \u2014 "),GJ=a("a"),z7r=o("FlaxBigBirdForSequenceClassification"),Q7r=o(" (BigBird model)"),W7r=l(),bC=a("li"),ATe=a("strong"),H7r=o("distilbert"),U7r=o(" \u2014 "),OJ=a("a"),J7r=o("FlaxDistilBertForSequenceClassification"),Y7r=o(" (DistilBERT model)"),K7r=l(),vC=a("li"),yTe=a("strong"),Z7r=o("electra"),e$r=o(" \u2014 "),VJ=a("a"),o$r=o("FlaxElectraForSequenceClassification"),r$r=o(" (ELECTRA model)"),t$r=l(),FC=a("li"),LTe=a("strong"),a$r=o("mbart"),n$r=o(" \u2014 "),XJ=a("a"),s$r=o("FlaxMBartForSequenceClassification"),l$r=o(" (mBART model)"),i$r=l(),TC=a("li"),xTe=a("strong"),d$r=o("roberta"),c$r=o(" \u2014 "),zJ=a("a"),f$r=o("FlaxRobertaForSequenceClassification"),m$r=o(" (RoBERTa model)"),g$r=l(),MC=a("li"),$Te=a("strong"),h$r=o("roformer"),p$r=o(" \u2014 "),QJ=a("a"),u$r=o("FlaxRoFormerForSequenceClassification"),_$r=o(" (RoFormer model)"),b$r=l(),EC=a("li"),kTe=a("strong"),v$r=o("xlm-roberta"),F$r=o(" \u2014 "),WJ=a("a"),T$r=o("FlaxXLMRobertaForSequenceClassification"),M$r=o(" (XLM-RoBERTa model)"),E$r=l(),F(CC.$$.fragment),HIe=l(),Xc=a("h2"),wC=a("a"),STe=a("span"),F(px.$$.fragment),C$r=l(),RTe=a("span"),w$r=o("FlaxAutoModelForQuestionAnswering"),UIe=l(),_r=a("div"),F(ux.$$.fragment),A$r=l(),zc=a("p"),y$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HJ=a("a"),L$r=o("from_pretrained()"),x$r=o(" class method or the "),UJ=a("a"),$$r=o("from_config()"),k$r=o(` class
method.`),S$r=l(),_x=a("p"),R$r=o("This class cannot be instantiated directly using "),BTe=a("code"),B$r=o("__init__()"),P$r=o(" (throws an error)."),I$r=l(),zt=a("div"),F(bx.$$.fragment),q$r=l(),PTe=a("p"),N$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),j$r=l(),Qc=a("p"),D$r=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),G$r=o("not"),O$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),V$r=o("from_pretrained()"),X$r=o(" to load the model weights."),z$r=l(),F(AC.$$.fragment),Q$r=l(),zr=a("div"),F(vx.$$.fragment),W$r=l(),qTe=a("p"),H$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),U$r=l(),vn=a("p"),J$r=o("The model class to instantiate is selected based on the "),NTe=a("code"),Y$r=o("model_type"),K$r=o(` property of the config object (either
passed as an argument or loaded from `),jTe=a("code"),Z$r=o("pretrained_model_name_or_path"),ekr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=a("code"),okr=o("pretrained_model_name_or_path"),rkr=o(":"),tkr=l(),$e=a("ul"),yC=a("li"),GTe=a("strong"),akr=o("albert"),nkr=o(" \u2014 "),YJ=a("a"),skr=o("FlaxAlbertForQuestionAnswering"),lkr=o(" (ALBERT model)"),ikr=l(),LC=a("li"),OTe=a("strong"),dkr=o("bart"),ckr=o(" \u2014 "),KJ=a("a"),fkr=o("FlaxBartForQuestionAnswering"),mkr=o(" (BART model)"),gkr=l(),xC=a("li"),VTe=a("strong"),hkr=o("bert"),pkr=o(" \u2014 "),ZJ=a("a"),ukr=o("FlaxBertForQuestionAnswering"),_kr=o(" (BERT model)"),bkr=l(),$C=a("li"),XTe=a("strong"),vkr=o("big_bird"),Fkr=o(" \u2014 "),eY=a("a"),Tkr=o("FlaxBigBirdForQuestionAnswering"),Mkr=o(" (BigBird model)"),Ekr=l(),kC=a("li"),zTe=a("strong"),Ckr=o("distilbert"),wkr=o(" \u2014 "),oY=a("a"),Akr=o("FlaxDistilBertForQuestionAnswering"),ykr=o(" (DistilBERT model)"),Lkr=l(),SC=a("li"),QTe=a("strong"),xkr=o("electra"),$kr=o(" \u2014 "),rY=a("a"),kkr=o("FlaxElectraForQuestionAnswering"),Skr=o(" (ELECTRA model)"),Rkr=l(),RC=a("li"),WTe=a("strong"),Bkr=o("mbart"),Pkr=o(" \u2014 "),tY=a("a"),Ikr=o("FlaxMBartForQuestionAnswering"),qkr=o(" (mBART model)"),Nkr=l(),BC=a("li"),HTe=a("strong"),jkr=o("roberta"),Dkr=o(" \u2014 "),aY=a("a"),Gkr=o("FlaxRobertaForQuestionAnswering"),Okr=o(" (RoBERTa model)"),Vkr=l(),PC=a("li"),UTe=a("strong"),Xkr=o("roformer"),zkr=o(" \u2014 "),nY=a("a"),Qkr=o("FlaxRoFormerForQuestionAnswering"),Wkr=o(" (RoFormer model)"),Hkr=l(),IC=a("li"),JTe=a("strong"),Ukr=o("xlm-roberta"),Jkr=o(" \u2014 "),sY=a("a"),Ykr=o("FlaxXLMRobertaForQuestionAnswering"),Kkr=o(" (XLM-RoBERTa model)"),Zkr=l(),F(qC.$$.fragment),JIe=l(),Wc=a("h2"),NC=a("a"),YTe=a("span"),F(Fx.$$.fragment),eSr=l(),KTe=a("span"),oSr=o("FlaxAutoModelForTokenClassification"),YIe=l(),br=a("div"),F(Tx.$$.fragment),rSr=l(),Hc=a("p"),tSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=a("a"),aSr=o("from_pretrained()"),nSr=o(" class method or the "),iY=a("a"),sSr=o("from_config()"),lSr=o(` class
method.`),iSr=l(),Mx=a("p"),dSr=o("This class cannot be instantiated directly using "),ZTe=a("code"),cSr=o("__init__()"),fSr=o(" (throws an error)."),mSr=l(),Qt=a("div"),F(Ex.$$.fragment),gSr=l(),e9e=a("p"),hSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pSr=l(),Uc=a("p"),uSr=o(`Note:
Loading a model from its configuration file does `),o9e=a("strong"),_Sr=o("not"),bSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=a("a"),vSr=o("from_pretrained()"),FSr=o(" to load the model weights."),TSr=l(),F(jC.$$.fragment),MSr=l(),Qr=a("div"),F(Cx.$$.fragment),ESr=l(),r9e=a("p"),CSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wSr=l(),Fn=a("p"),ASr=o("The model class to instantiate is selected based on the "),t9e=a("code"),ySr=o("model_type"),LSr=o(` property of the config object (either
passed as an argument or loaded from `),a9e=a("code"),xSr=o("pretrained_model_name_or_path"),$Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=a("code"),kSr=o("pretrained_model_name_or_path"),SSr=o(":"),RSr=l(),De=a("ul"),DC=a("li"),s9e=a("strong"),BSr=o("albert"),PSr=o(" \u2014 "),cY=a("a"),ISr=o("FlaxAlbertForTokenClassification"),qSr=o(" (ALBERT model)"),NSr=l(),GC=a("li"),l9e=a("strong"),jSr=o("bert"),DSr=o(" \u2014 "),fY=a("a"),GSr=o("FlaxBertForTokenClassification"),OSr=o(" (BERT model)"),VSr=l(),OC=a("li"),i9e=a("strong"),XSr=o("big_bird"),zSr=o(" \u2014 "),mY=a("a"),QSr=o("FlaxBigBirdForTokenClassification"),WSr=o(" (BigBird model)"),HSr=l(),VC=a("li"),d9e=a("strong"),USr=o("distilbert"),JSr=o(" \u2014 "),gY=a("a"),YSr=o("FlaxDistilBertForTokenClassification"),KSr=o(" (DistilBERT model)"),ZSr=l(),XC=a("li"),c9e=a("strong"),eRr=o("electra"),oRr=o(" \u2014 "),hY=a("a"),rRr=o("FlaxElectraForTokenClassification"),tRr=o(" (ELECTRA model)"),aRr=l(),zC=a("li"),f9e=a("strong"),nRr=o("roberta"),sRr=o(" \u2014 "),pY=a("a"),lRr=o("FlaxRobertaForTokenClassification"),iRr=o(" (RoBERTa model)"),dRr=l(),QC=a("li"),m9e=a("strong"),cRr=o("roformer"),fRr=o(" \u2014 "),uY=a("a"),mRr=o("FlaxRoFormerForTokenClassification"),gRr=o(" (RoFormer model)"),hRr=l(),WC=a("li"),g9e=a("strong"),pRr=o("xlm-roberta"),uRr=o(" \u2014 "),_Y=a("a"),_Rr=o("FlaxXLMRobertaForTokenClassification"),bRr=o(" (XLM-RoBERTa model)"),vRr=l(),F(HC.$$.fragment),KIe=l(),Jc=a("h2"),UC=a("a"),h9e=a("span"),F(wx.$$.fragment),FRr=l(),p9e=a("span"),TRr=o("FlaxAutoModelForMultipleChoice"),ZIe=l(),vr=a("div"),F(Ax.$$.fragment),MRr=l(),Yc=a("p"),ERr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bY=a("a"),CRr=o("from_pretrained()"),wRr=o(" class method or the "),vY=a("a"),ARr=o("from_config()"),yRr=o(` class
method.`),LRr=l(),yx=a("p"),xRr=o("This class cannot be instantiated directly using "),u9e=a("code"),$Rr=o("__init__()"),kRr=o(" (throws an error)."),SRr=l(),Wt=a("div"),F(Lx.$$.fragment),RRr=l(),_9e=a("p"),BRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PRr=l(),Kc=a("p"),IRr=o(`Note:
Loading a model from its configuration file does `),b9e=a("strong"),qRr=o("not"),NRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=a("a"),jRr=o("from_pretrained()"),DRr=o(" to load the model weights."),GRr=l(),F(JC.$$.fragment),ORr=l(),Wr=a("div"),F(xx.$$.fragment),VRr=l(),v9e=a("p"),XRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zRr=l(),Tn=a("p"),QRr=o("The model class to instantiate is selected based on the "),F9e=a("code"),WRr=o("model_type"),HRr=o(` property of the config object (either
passed as an argument or loaded from `),T9e=a("code"),URr=o("pretrained_model_name_or_path"),JRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=a("code"),YRr=o("pretrained_model_name_or_path"),KRr=o(":"),ZRr=l(),Ge=a("ul"),YC=a("li"),E9e=a("strong"),eBr=o("albert"),oBr=o(" \u2014 "),TY=a("a"),rBr=o("FlaxAlbertForMultipleChoice"),tBr=o(" (ALBERT model)"),aBr=l(),KC=a("li"),C9e=a("strong"),nBr=o("bert"),sBr=o(" \u2014 "),MY=a("a"),lBr=o("FlaxBertForMultipleChoice"),iBr=o(" (BERT model)"),dBr=l(),ZC=a("li"),w9e=a("strong"),cBr=o("big_bird"),fBr=o(" \u2014 "),EY=a("a"),mBr=o("FlaxBigBirdForMultipleChoice"),gBr=o(" (BigBird model)"),hBr=l(),e3=a("li"),A9e=a("strong"),pBr=o("distilbert"),uBr=o(" \u2014 "),CY=a("a"),_Br=o("FlaxDistilBertForMultipleChoice"),bBr=o(" (DistilBERT model)"),vBr=l(),o3=a("li"),y9e=a("strong"),FBr=o("electra"),TBr=o(" \u2014 "),wY=a("a"),MBr=o("FlaxElectraForMultipleChoice"),EBr=o(" (ELECTRA model)"),CBr=l(),r3=a("li"),L9e=a("strong"),wBr=o("roberta"),ABr=o(" \u2014 "),AY=a("a"),yBr=o("FlaxRobertaForMultipleChoice"),LBr=o(" (RoBERTa model)"),xBr=l(),t3=a("li"),x9e=a("strong"),$Br=o("roformer"),kBr=o(" \u2014 "),yY=a("a"),SBr=o("FlaxRoFormerForMultipleChoice"),RBr=o(" (RoFormer model)"),BBr=l(),a3=a("li"),$9e=a("strong"),PBr=o("xlm-roberta"),IBr=o(" \u2014 "),LY=a("a"),qBr=o("FlaxXLMRobertaForMultipleChoice"),NBr=o(" (XLM-RoBERTa model)"),jBr=l(),F(n3.$$.fragment),eqe=l(),Zc=a("h2"),s3=a("a"),k9e=a("span"),F($x.$$.fragment),DBr=l(),S9e=a("span"),GBr=o("FlaxAutoModelForNextSentencePrediction"),oqe=l(),Fr=a("div"),F(kx.$$.fragment),OBr=l(),ef=a("p"),VBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xY=a("a"),XBr=o("from_pretrained()"),zBr=o(" class method or the "),$Y=a("a"),QBr=o("from_config()"),WBr=o(` class
method.`),HBr=l(),Sx=a("p"),UBr=o("This class cannot be instantiated directly using "),R9e=a("code"),JBr=o("__init__()"),YBr=o(" (throws an error)."),KBr=l(),Ht=a("div"),F(Rx.$$.fragment),ZBr=l(),B9e=a("p"),ePr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oPr=l(),of=a("p"),rPr=o(`Note:
Loading a model from its configuration file does `),P9e=a("strong"),tPr=o("not"),aPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=a("a"),nPr=o("from_pretrained()"),sPr=o(" to load the model weights."),lPr=l(),F(l3.$$.fragment),iPr=l(),Hr=a("div"),F(Bx.$$.fragment),dPr=l(),I9e=a("p"),cPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fPr=l(),Mn=a("p"),mPr=o("The model class to instantiate is selected based on the "),q9e=a("code"),gPr=o("model_type"),hPr=o(` property of the config object (either
passed as an argument or loaded from `),N9e=a("code"),pPr=o("pretrained_model_name_or_path"),uPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(":"),vPr=l(),D9e=a("ul"),i3=a("li"),G9e=a("strong"),FPr=o("bert"),TPr=o(" \u2014 "),SY=a("a"),MPr=o("FlaxBertForNextSentencePrediction"),EPr=o(" (BERT model)"),CPr=l(),F(d3.$$.fragment),rqe=l(),rf=a("h2"),c3=a("a"),O9e=a("span"),F(Px.$$.fragment),wPr=l(),V9e=a("span"),APr=o("FlaxAutoModelForImageClassification"),tqe=l(),Tr=a("div"),F(Ix.$$.fragment),yPr=l(),tf=a("p"),LPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RY=a("a"),xPr=o("from_pretrained()"),$Pr=o(" class method or the "),BY=a("a"),kPr=o("from_config()"),SPr=o(` class
method.`),RPr=l(),qx=a("p"),BPr=o("This class cannot be instantiated directly using "),X9e=a("code"),PPr=o("__init__()"),IPr=o(" (throws an error)."),qPr=l(),Ut=a("div"),F(Nx.$$.fragment),NPr=l(),z9e=a("p"),jPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DPr=l(),af=a("p"),GPr=o(`Note:
Loading a model from its configuration file does `),Q9e=a("strong"),OPr=o("not"),VPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),XPr=o("from_pretrained()"),zPr=o(" to load the model weights."),QPr=l(),F(f3.$$.fragment),WPr=l(),Ur=a("div"),F(jx.$$.fragment),HPr=l(),W9e=a("p"),UPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),JPr=l(),En=a("p"),YPr=o("The model class to instantiate is selected based on the "),H9e=a("code"),KPr=o("model_type"),ZPr=o(` property of the config object (either
passed as an argument or loaded from `),U9e=a("code"),eIr=o("pretrained_model_name_or_path"),oIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=a("code"),rIr=o("pretrained_model_name_or_path"),tIr=o(":"),aIr=l(),Dx=a("ul"),m3=a("li"),Y9e=a("strong"),nIr=o("beit"),sIr=o(" \u2014 "),IY=a("a"),lIr=o("FlaxBeitForImageClassification"),iIr=o(" (BEiT model)"),dIr=l(),g3=a("li"),K9e=a("strong"),cIr=o("vit"),fIr=o(" \u2014 "),qY=a("a"),mIr=o("FlaxViTForImageClassification"),gIr=o(" (ViT model)"),hIr=l(),F(h3.$$.fragment),aqe=l(),nf=a("h2"),p3=a("a"),Z9e=a("span"),F(Gx.$$.fragment),pIr=l(),eMe=a("span"),uIr=o("FlaxAutoModelForVision2Seq"),nqe=l(),Mr=a("div"),F(Ox.$$.fragment),_Ir=l(),sf=a("p"),bIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NY=a("a"),vIr=o("from_pretrained()"),FIr=o(" class method or the "),jY=a("a"),TIr=o("from_config()"),MIr=o(` class
method.`),EIr=l(),Vx=a("p"),CIr=o("This class cannot be instantiated directly using "),oMe=a("code"),wIr=o("__init__()"),AIr=o(" (throws an error)."),yIr=l(),Jt=a("div"),F(Xx.$$.fragment),LIr=l(),rMe=a("p"),xIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Ir=l(),lf=a("p"),kIr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),SIr=o("not"),RIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=a("a"),BIr=o("from_pretrained()"),PIr=o(" to load the model weights."),IIr=l(),F(u3.$$.fragment),qIr=l(),Jr=a("div"),F(zx.$$.fragment),NIr=l(),aMe=a("p"),jIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),DIr=l(),Cn=a("p"),GIr=o("The model class to instantiate is selected based on the "),nMe=a("code"),OIr=o("model_type"),VIr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),XIr=o("pretrained_model_name_or_path"),zIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),QIr=o("pretrained_model_name_or_path"),WIr=o(":"),HIr=l(),iMe=a("ul"),_3=a("li"),dMe=a("strong"),UIr=o("vision-encoder-decoder"),JIr=o(" \u2014 "),GY=a("a"),YIr=o("FlaxVisionEncoderDecoderModel"),KIr=o(" (Vision Encoder decoder model)"),ZIr=l(),F(b3.$$.fragment),this.h()},l(f){const _=iwt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Qx=s(p);m=n(Qx,"A",{id:!0,class:!0,href:!0});var cMe=s(m);u=n(cMe,"SPAN",{});var fMe=s(u);T(d.$$.fragment,fMe),fMe.forEach(t),cMe.forEach(t),h=i(Qx),Mo=n(Qx,"SPAN",{});var mMe=s(Mo);li=r(mMe,"Auto Classes"),mMe.forEach(t),Qx.forEach(t),mf=i(f),et=n(f,"P",{});var Wx=s(et);ii=r(Wx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(Wx,"CODE",{});var gMe=s(di);qA=r(gMe,"from_pretrained()"),gMe.forEach(t),gf=r(Wx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Wx.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var hMe=s(An);NA=r(hMe,"AutoConfig"),hMe.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var pMe=s(Ln);jA=r(pMe,"AutoModel"),pMe.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var uMe=s(xn);DA=r(uMe,"AutoTokenizer"),uMe.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var Hx=s(Ae);a$=r(Hx,"will create a model that is an instance of "),gi=n(Hx,"A",{href:!0});var _Me=s(gi);n$=r(_Me,"BertModel"),_Me.forEach(t),s$=r(Hx,"."),Hx.forEach(t),Eo=i(f),Ea=n(f,"P",{});var Ux=s(Ea);l$=r(Ux,"There is one class of "),pf=n(Ux,"CODE",{});var bMe=s(pf);i$=r(bMe,"AutoModel"),bMe.forEach(t),hje=r(Ux," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Ux.forEach(t),tPe=i(f),hi=n(f,"H2",{class:!0});var Jx=s(hi);uf=n(Jx,"A",{id:!0,class:!0,href:!0});var vMe=s(uf);PZ=n(vMe,"SPAN",{});var FMe=s(PZ);T(GA.$$.fragment,FMe),FMe.forEach(t),vMe.forEach(t),pje=i(Jx),IZ=n(Jx,"SPAN",{});var TMe=s(IZ);uje=r(TMe,"Extending the Auto Classes"),TMe.forEach(t),Jx.forEach(t),aPe=i(f),$n=n(f,"P",{});var df=s($n);_je=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),qZ=n(df,"CODE",{});var MMe=s(qZ);bje=r(MMe,"NewModel"),MMe.forEach(t),vje=r(df,", make sure you have a "),NZ=n(df,"CODE",{});var EMe=s(NZ);Fje=r(EMe,"NewModelConfig"),EMe.forEach(t),Tje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),nPe=i(f),T(OA.$$.fragment,f),sPe=i(f),d$=n(f,"P",{});var CMe=s(d$);Mje=r(CMe,"You will then be able to use the auto classes like you would usually do!"),CMe.forEach(t),lPe=i(f),T(_f.$$.fragment,f),iPe=i(f),pi=n(f,"H2",{class:!0});var Yx=s(pi);bf=n(Yx,"A",{id:!0,class:!0,href:!0});var wMe=s(bf);jZ=n(wMe,"SPAN",{});var AMe=s(jZ);T(VA.$$.fragment,AMe),AMe.forEach(t),wMe.forEach(t),Eje=i(Yx),DZ=n(Yx,"SPAN",{});var yMe=s(DZ);Cje=r(yMe,"AutoConfig"),yMe.forEach(t),Yx.forEach(t),dPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(XA.$$.fragment,Kr),wje=i(Kr),zA=n(Kr,"P",{});var Kx=s(zA);Aje=r(Kx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),c$=n(Kx,"A",{href:!0});var LMe=s(c$);yje=r(LMe,"from_pretrained()"),LMe.forEach(t),Lje=r(Kx," class method."),Kx.forEach(t),xje=i(Kr),QA=n(Kr,"P",{});var Zx=s(QA);$je=r(Zx,"This class cannot be instantiated directly using "),GZ=n(Zx,"CODE",{});var xMe=s(GZ);kje=r(xMe,"__init__()"),xMe.forEach(t),Sje=r(Zx," (throws an error)."),Zx.forEach(t),Rje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(WA.$$.fragment,Zr),Bje=i(Zr),OZ=n(Zr,"P",{});var $Me=s(OZ);Pje=r($Me,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),$Me.forEach(t),Ije=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);qje=r(cf,"The configuration class to instantiate is selected based on the "),VZ=n(cf,"CODE",{});var kMe=s(VZ);Nje=r(kMe,"model_type"),kMe.forEach(t),jje=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XZ=n(cf,"CODE",{});var SMe=s(XZ);Dje=r(SMe,"pretrained_model_name_or_path"),SMe.forEach(t),Gje=r(cf,":"),cf.forEach(t),Oje=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var v3=s(vf);zZ=n(v3,"STRONG",{});var RMe=s(zZ);Vje=r(RMe,"albert"),RMe.forEach(t),Xje=r(v3," \u2014 "),f$=n(v3,"A",{href:!0});var BMe=s(f$);zje=r(BMe,"AlbertConfig"),BMe.forEach(t),Qje=r(v3," (ALBERT model)"),v3.forEach(t),Wje=i(L),Ff=n(L,"LI",{});var F3=s(Ff);QZ=n(F3,"STRONG",{});var PMe=s(QZ);Hje=r(PMe,"bart"),PMe.forEach(t),Uje=r(F3," \u2014 "),m$=n(F3,"A",{href:!0});var IMe=s(m$);Jje=r(IMe,"BartConfig"),IMe.forEach(t),Yje=r(F3," (BART model)"),F3.forEach(t),Kje=i(L),Tf=n(L,"LI",{});var T3=s(Tf);WZ=n(T3,"STRONG",{});var qMe=s(WZ);Zje=r(qMe,"beit"),qMe.forEach(t),eDe=r(T3," \u2014 "),g$=n(T3,"A",{href:!0});var NMe=s(g$);oDe=r(NMe,"BeitConfig"),NMe.forEach(t),rDe=r(T3," (BEiT model)"),T3.forEach(t),tDe=i(L),Mf=n(L,"LI",{});var M3=s(Mf);HZ=n(M3,"STRONG",{});var jMe=s(HZ);aDe=r(jMe,"bert"),jMe.forEach(t),nDe=r(M3," \u2014 "),h$=n(M3,"A",{href:!0});var DMe=s(h$);sDe=r(DMe,"BertConfig"),DMe.forEach(t),lDe=r(M3," (BERT model)"),M3.forEach(t),iDe=i(L),Ef=n(L,"LI",{});var E3=s(Ef);UZ=n(E3,"STRONG",{});var GMe=s(UZ);dDe=r(GMe,"bert-generation"),GMe.forEach(t),cDe=r(E3," \u2014 "),p$=n(E3,"A",{href:!0});var OMe=s(p$);fDe=r(OMe,"BertGenerationConfig"),OMe.forEach(t),mDe=r(E3," (Bert Generation model)"),E3.forEach(t),gDe=i(L),Cf=n(L,"LI",{});var C3=s(Cf);JZ=n(C3,"STRONG",{});var VMe=s(JZ);hDe=r(VMe,"big_bird"),VMe.forEach(t),pDe=r(C3," \u2014 "),u$=n(C3,"A",{href:!0});var XMe=s(u$);uDe=r(XMe,"BigBirdConfig"),XMe.forEach(t),_De=r(C3," (BigBird model)"),C3.forEach(t),bDe=i(L),wf=n(L,"LI",{});var w3=s(wf);YZ=n(w3,"STRONG",{});var zMe=s(YZ);vDe=r(zMe,"bigbird_pegasus"),zMe.forEach(t),FDe=r(w3," \u2014 "),_$=n(w3,"A",{href:!0});var QMe=s(_$);TDe=r(QMe,"BigBirdPegasusConfig"),QMe.forEach(t),MDe=r(w3," (BigBirdPegasus model)"),w3.forEach(t),EDe=i(L),Af=n(L,"LI",{});var A3=s(Af);KZ=n(A3,"STRONG",{});var WMe=s(KZ);CDe=r(WMe,"blenderbot"),WMe.forEach(t),wDe=r(A3," \u2014 "),b$=n(A3,"A",{href:!0});var HMe=s(b$);ADe=r(HMe,"BlenderbotConfig"),HMe.forEach(t),yDe=r(A3," (Blenderbot model)"),A3.forEach(t),LDe=i(L),yf=n(L,"LI",{});var y3=s(yf);ZZ=n(y3,"STRONG",{});var UMe=s(ZZ);xDe=r(UMe,"blenderbot-small"),UMe.forEach(t),$De=r(y3," \u2014 "),v$=n(y3,"A",{href:!0});var JMe=s(v$);kDe=r(JMe,"BlenderbotSmallConfig"),JMe.forEach(t),SDe=r(y3," (BlenderbotSmall model)"),y3.forEach(t),RDe=i(L),Lf=n(L,"LI",{});var L3=s(Lf);eee=n(L3,"STRONG",{});var YMe=s(eee);BDe=r(YMe,"camembert"),YMe.forEach(t),PDe=r(L3," \u2014 "),F$=n(L3,"A",{href:!0});var KMe=s(F$);IDe=r(KMe,"CamembertConfig"),KMe.forEach(t),qDe=r(L3," (CamemBERT model)"),L3.forEach(t),NDe=i(L),xf=n(L,"LI",{});var x3=s(xf);oee=n(x3,"STRONG",{});var ZMe=s(oee);jDe=r(ZMe,"canine"),ZMe.forEach(t),DDe=r(x3," \u2014 "),T$=n(x3,"A",{href:!0});var e4e=s(T$);GDe=r(e4e,"CanineConfig"),e4e.forEach(t),ODe=r(x3," (Canine model)"),x3.forEach(t),VDe=i(L),$f=n(L,"LI",{});var $3=s($f);ree=n($3,"STRONG",{});var o4e=s(ree);XDe=r(o4e,"clip"),o4e.forEach(t),zDe=r($3," \u2014 "),M$=n($3,"A",{href:!0});var r4e=s(M$);QDe=r(r4e,"CLIPConfig"),r4e.forEach(t),WDe=r($3," (CLIP model)"),$3.forEach(t),HDe=i(L),kf=n(L,"LI",{});var k3=s(kf);tee=n(k3,"STRONG",{});var t4e=s(tee);UDe=r(t4e,"convbert"),t4e.forEach(t),JDe=r(k3," \u2014 "),E$=n(k3,"A",{href:!0});var a4e=s(E$);YDe=r(a4e,"ConvBertConfig"),a4e.forEach(t),KDe=r(k3," (ConvBERT model)"),k3.forEach(t),ZDe=i(L),Sf=n(L,"LI",{});var S3=s(Sf);aee=n(S3,"STRONG",{});var n4e=s(aee);eGe=r(n4e,"convnext"),n4e.forEach(t),oGe=r(S3," \u2014 "),C$=n(S3,"A",{href:!0});var s4e=s(C$);rGe=r(s4e,"ConvNextConfig"),s4e.forEach(t),tGe=r(S3," (ConvNext model)"),S3.forEach(t),aGe=i(L),Rf=n(L,"LI",{});var R3=s(Rf);nee=n(R3,"STRONG",{});var l4e=s(nee);nGe=r(l4e,"ctrl"),l4e.forEach(t),sGe=r(R3," \u2014 "),w$=n(R3,"A",{href:!0});var i4e=s(w$);lGe=r(i4e,"CTRLConfig"),i4e.forEach(t),iGe=r(R3," (CTRL model)"),R3.forEach(t),dGe=i(L),Bf=n(L,"LI",{});var B3=s(Bf);see=n(B3,"STRONG",{});var d4e=s(see);cGe=r(d4e,"data2vec-audio"),d4e.forEach(t),fGe=r(B3," \u2014 "),A$=n(B3,"A",{href:!0});var c4e=s(A$);mGe=r(c4e,"Data2VecAudioConfig"),c4e.forEach(t),gGe=r(B3," (Data2VecAudio model)"),B3.forEach(t),hGe=i(L),Pf=n(L,"LI",{});var P3=s(Pf);lee=n(P3,"STRONG",{});var f4e=s(lee);pGe=r(f4e,"data2vec-text"),f4e.forEach(t),uGe=r(P3," \u2014 "),y$=n(P3,"A",{href:!0});var m4e=s(y$);_Ge=r(m4e,"Data2VecTextConfig"),m4e.forEach(t),bGe=r(P3," (Data2VecText model)"),P3.forEach(t),vGe=i(L),If=n(L,"LI",{});var I3=s(If);iee=n(I3,"STRONG",{});var g4e=s(iee);FGe=r(g4e,"data2vec-vision"),g4e.forEach(t),TGe=r(I3," \u2014 "),L$=n(I3,"A",{href:!0});var h4e=s(L$);MGe=r(h4e,"Data2VecVisionConfig"),h4e.forEach(t),EGe=r(I3," (Data2VecVision model)"),I3.forEach(t),CGe=i(L),qf=n(L,"LI",{});var q3=s(qf);dee=n(q3,"STRONG",{});var p4e=s(dee);wGe=r(p4e,"deberta"),p4e.forEach(t),AGe=r(q3," \u2014 "),x$=n(q3,"A",{href:!0});var u4e=s(x$);yGe=r(u4e,"DebertaConfig"),u4e.forEach(t),LGe=r(q3," (DeBERTa model)"),q3.forEach(t),xGe=i(L),Nf=n(L,"LI",{});var N3=s(Nf);cee=n(N3,"STRONG",{});var _4e=s(cee);$Ge=r(_4e,"deberta-v2"),_4e.forEach(t),kGe=r(N3," \u2014 "),$$=n(N3,"A",{href:!0});var b4e=s($$);SGe=r(b4e,"DebertaV2Config"),b4e.forEach(t),RGe=r(N3," (DeBERTa-v2 model)"),N3.forEach(t),BGe=i(L),jf=n(L,"LI",{});var j3=s(jf);fee=n(j3,"STRONG",{});var v4e=s(fee);PGe=r(v4e,"decision_transformer"),v4e.forEach(t),IGe=r(j3," \u2014 "),k$=n(j3,"A",{href:!0});var F4e=s(k$);qGe=r(F4e,"DecisionTransformerConfig"),F4e.forEach(t),NGe=r(j3," (Decision Transformer model)"),j3.forEach(t),jGe=i(L),Df=n(L,"LI",{});var D3=s(Df);mee=n(D3,"STRONG",{});var T4e=s(mee);DGe=r(T4e,"deit"),T4e.forEach(t),GGe=r(D3," \u2014 "),S$=n(D3,"A",{href:!0});var M4e=s(S$);OGe=r(M4e,"DeiTConfig"),M4e.forEach(t),VGe=r(D3," (DeiT model)"),D3.forEach(t),XGe=i(L),Gf=n(L,"LI",{});var G3=s(Gf);gee=n(G3,"STRONG",{});var E4e=s(gee);zGe=r(E4e,"detr"),E4e.forEach(t),QGe=r(G3," \u2014 "),R$=n(G3,"A",{href:!0});var oqr=s(R$);WGe=r(oqr,"DetrConfig"),oqr.forEach(t),HGe=r(G3," (DETR model)"),G3.forEach(t),UGe=i(L),Of=n(L,"LI",{});var C4e=s(Of);hee=n(C4e,"STRONG",{});var rqr=s(hee);JGe=r(rqr,"distilbert"),rqr.forEach(t),YGe=r(C4e," \u2014 "),B$=n(C4e,"A",{href:!0});var tqr=s(B$);KGe=r(tqr,"DistilBertConfig"),tqr.forEach(t),ZGe=r(C4e," (DistilBERT model)"),C4e.forEach(t),eOe=i(L),Vf=n(L,"LI",{});var w4e=s(Vf);pee=n(w4e,"STRONG",{});var aqr=s(pee);oOe=r(aqr,"dpr"),aqr.forEach(t),rOe=r(w4e," \u2014 "),P$=n(w4e,"A",{href:!0});var nqr=s(P$);tOe=r(nqr,"DPRConfig"),nqr.forEach(t),aOe=r(w4e," (DPR model)"),w4e.forEach(t),nOe=i(L),Xf=n(L,"LI",{});var A4e=s(Xf);uee=n(A4e,"STRONG",{});var sqr=s(uee);sOe=r(sqr,"dpt"),sqr.forEach(t),lOe=r(A4e," \u2014 "),I$=n(A4e,"A",{href:!0});var lqr=s(I$);iOe=r(lqr,"DPTConfig"),lqr.forEach(t),dOe=r(A4e," (DPT model)"),A4e.forEach(t),cOe=i(L),zf=n(L,"LI",{});var y4e=s(zf);_ee=n(y4e,"STRONG",{});var iqr=s(_ee);fOe=r(iqr,"electra"),iqr.forEach(t),mOe=r(y4e," \u2014 "),q$=n(y4e,"A",{href:!0});var dqr=s(q$);gOe=r(dqr,"ElectraConfig"),dqr.forEach(t),hOe=r(y4e," (ELECTRA model)"),y4e.forEach(t),pOe=i(L),Qf=n(L,"LI",{});var L4e=s(Qf);bee=n(L4e,"STRONG",{});var cqr=s(bee);uOe=r(cqr,"encoder-decoder"),cqr.forEach(t),_Oe=r(L4e," \u2014 "),N$=n(L4e,"A",{href:!0});var fqr=s(N$);bOe=r(fqr,"EncoderDecoderConfig"),fqr.forEach(t),vOe=r(L4e," (Encoder decoder model)"),L4e.forEach(t),FOe=i(L),Wf=n(L,"LI",{});var x4e=s(Wf);vee=n(x4e,"STRONG",{});var mqr=s(vee);TOe=r(mqr,"flaubert"),mqr.forEach(t),MOe=r(x4e," \u2014 "),j$=n(x4e,"A",{href:!0});var gqr=s(j$);EOe=r(gqr,"FlaubertConfig"),gqr.forEach(t),COe=r(x4e," (FlauBERT model)"),x4e.forEach(t),wOe=i(L),Hf=n(L,"LI",{});var $4e=s(Hf);Fee=n($4e,"STRONG",{});var hqr=s(Fee);AOe=r(hqr,"fnet"),hqr.forEach(t),yOe=r($4e," \u2014 "),D$=n($4e,"A",{href:!0});var pqr=s(D$);LOe=r(pqr,"FNetConfig"),pqr.forEach(t),xOe=r($4e," (FNet model)"),$4e.forEach(t),$Oe=i(L),Uf=n(L,"LI",{});var k4e=s(Uf);Tee=n(k4e,"STRONG",{});var uqr=s(Tee);kOe=r(uqr,"fsmt"),uqr.forEach(t),SOe=r(k4e," \u2014 "),G$=n(k4e,"A",{href:!0});var _qr=s(G$);ROe=r(_qr,"FSMTConfig"),_qr.forEach(t),BOe=r(k4e," (FairSeq Machine-Translation model)"),k4e.forEach(t),POe=i(L),Jf=n(L,"LI",{});var S4e=s(Jf);Mee=n(S4e,"STRONG",{});var bqr=s(Mee);IOe=r(bqr,"funnel"),bqr.forEach(t),qOe=r(S4e," \u2014 "),O$=n(S4e,"A",{href:!0});var vqr=s(O$);NOe=r(vqr,"FunnelConfig"),vqr.forEach(t),jOe=r(S4e," (Funnel Transformer model)"),S4e.forEach(t),DOe=i(L),Yf=n(L,"LI",{});var R4e=s(Yf);Eee=n(R4e,"STRONG",{});var Fqr=s(Eee);GOe=r(Fqr,"glpn"),Fqr.forEach(t),OOe=r(R4e," \u2014 "),V$=n(R4e,"A",{href:!0});var Tqr=s(V$);VOe=r(Tqr,"GLPNConfig"),Tqr.forEach(t),XOe=r(R4e," (GLPN model)"),R4e.forEach(t),zOe=i(L),Kf=n(L,"LI",{});var B4e=s(Kf);Cee=n(B4e,"STRONG",{});var Mqr=s(Cee);QOe=r(Mqr,"gpt2"),Mqr.forEach(t),WOe=r(B4e," \u2014 "),X$=n(B4e,"A",{href:!0});var Eqr=s(X$);HOe=r(Eqr,"GPT2Config"),Eqr.forEach(t),UOe=r(B4e," (OpenAI GPT-2 model)"),B4e.forEach(t),JOe=i(L),Zf=n(L,"LI",{});var P4e=s(Zf);wee=n(P4e,"STRONG",{});var Cqr=s(wee);YOe=r(Cqr,"gpt_neo"),Cqr.forEach(t),KOe=r(P4e," \u2014 "),z$=n(P4e,"A",{href:!0});var wqr=s(z$);ZOe=r(wqr,"GPTNeoConfig"),wqr.forEach(t),eVe=r(P4e," (GPT Neo model)"),P4e.forEach(t),oVe=i(L),em=n(L,"LI",{});var I4e=s(em);Aee=n(I4e,"STRONG",{});var Aqr=s(Aee);rVe=r(Aqr,"gptj"),Aqr.forEach(t),tVe=r(I4e," \u2014 "),Q$=n(I4e,"A",{href:!0});var yqr=s(Q$);aVe=r(yqr,"GPTJConfig"),yqr.forEach(t),nVe=r(I4e," (GPT-J model)"),I4e.forEach(t),sVe=i(L),om=n(L,"LI",{});var q4e=s(om);yee=n(q4e,"STRONG",{});var Lqr=s(yee);lVe=r(Lqr,"hubert"),Lqr.forEach(t),iVe=r(q4e," \u2014 "),W$=n(q4e,"A",{href:!0});var xqr=s(W$);dVe=r(xqr,"HubertConfig"),xqr.forEach(t),cVe=r(q4e," (Hubert model)"),q4e.forEach(t),fVe=i(L),rm=n(L,"LI",{});var N4e=s(rm);Lee=n(N4e,"STRONG",{});var $qr=s(Lee);mVe=r($qr,"ibert"),$qr.forEach(t),gVe=r(N4e," \u2014 "),H$=n(N4e,"A",{href:!0});var kqr=s(H$);hVe=r(kqr,"IBertConfig"),kqr.forEach(t),pVe=r(N4e," (I-BERT model)"),N4e.forEach(t),uVe=i(L),tm=n(L,"LI",{});var j4e=s(tm);xee=n(j4e,"STRONG",{});var Sqr=s(xee);_Ve=r(Sqr,"imagegpt"),Sqr.forEach(t),bVe=r(j4e," \u2014 "),U$=n(j4e,"A",{href:!0});var Rqr=s(U$);vVe=r(Rqr,"ImageGPTConfig"),Rqr.forEach(t),FVe=r(j4e," (ImageGPT model)"),j4e.forEach(t),TVe=i(L),am=n(L,"LI",{});var D4e=s(am);$ee=n(D4e,"STRONG",{});var Bqr=s($ee);MVe=r(Bqr,"layoutlm"),Bqr.forEach(t),EVe=r(D4e," \u2014 "),J$=n(D4e,"A",{href:!0});var Pqr=s(J$);CVe=r(Pqr,"LayoutLMConfig"),Pqr.forEach(t),wVe=r(D4e," (LayoutLM model)"),D4e.forEach(t),AVe=i(L),nm=n(L,"LI",{});var G4e=s(nm);kee=n(G4e,"STRONG",{});var Iqr=s(kee);yVe=r(Iqr,"layoutlmv2"),Iqr.forEach(t),LVe=r(G4e," \u2014 "),Y$=n(G4e,"A",{href:!0});var qqr=s(Y$);xVe=r(qqr,"LayoutLMv2Config"),qqr.forEach(t),$Ve=r(G4e," (LayoutLMv2 model)"),G4e.forEach(t),kVe=i(L),sm=n(L,"LI",{});var O4e=s(sm);See=n(O4e,"STRONG",{});var Nqr=s(See);SVe=r(Nqr,"led"),Nqr.forEach(t),RVe=r(O4e," \u2014 "),K$=n(O4e,"A",{href:!0});var jqr=s(K$);BVe=r(jqr,"LEDConfig"),jqr.forEach(t),PVe=r(O4e," (LED model)"),O4e.forEach(t),IVe=i(L),lm=n(L,"LI",{});var V4e=s(lm);Ree=n(V4e,"STRONG",{});var Dqr=s(Ree);qVe=r(Dqr,"longformer"),Dqr.forEach(t),NVe=r(V4e," \u2014 "),Z$=n(V4e,"A",{href:!0});var Gqr=s(Z$);jVe=r(Gqr,"LongformerConfig"),Gqr.forEach(t),DVe=r(V4e," (Longformer model)"),V4e.forEach(t),GVe=i(L),im=n(L,"LI",{});var X4e=s(im);Bee=n(X4e,"STRONG",{});var Oqr=s(Bee);OVe=r(Oqr,"luke"),Oqr.forEach(t),VVe=r(X4e," \u2014 "),ek=n(X4e,"A",{href:!0});var Vqr=s(ek);XVe=r(Vqr,"LukeConfig"),Vqr.forEach(t),zVe=r(X4e," (LUKE model)"),X4e.forEach(t),QVe=i(L),dm=n(L,"LI",{});var z4e=s(dm);Pee=n(z4e,"STRONG",{});var Xqr=s(Pee);WVe=r(Xqr,"lxmert"),Xqr.forEach(t),HVe=r(z4e," \u2014 "),ok=n(z4e,"A",{href:!0});var zqr=s(ok);UVe=r(zqr,"LxmertConfig"),zqr.forEach(t),JVe=r(z4e," (LXMERT model)"),z4e.forEach(t),YVe=i(L),cm=n(L,"LI",{});var Q4e=s(cm);Iee=n(Q4e,"STRONG",{});var Qqr=s(Iee);KVe=r(Qqr,"m2m_100"),Qqr.forEach(t),ZVe=r(Q4e," \u2014 "),rk=n(Q4e,"A",{href:!0});var Wqr=s(rk);eXe=r(Wqr,"M2M100Config"),Wqr.forEach(t),oXe=r(Q4e," (M2M100 model)"),Q4e.forEach(t),rXe=i(L),fm=n(L,"LI",{});var W4e=s(fm);qee=n(W4e,"STRONG",{});var Hqr=s(qee);tXe=r(Hqr,"marian"),Hqr.forEach(t),aXe=r(W4e," \u2014 "),tk=n(W4e,"A",{href:!0});var Uqr=s(tk);nXe=r(Uqr,"MarianConfig"),Uqr.forEach(t),sXe=r(W4e," (Marian model)"),W4e.forEach(t),lXe=i(L),mm=n(L,"LI",{});var H4e=s(mm);Nee=n(H4e,"STRONG",{});var Jqr=s(Nee);iXe=r(Jqr,"maskformer"),Jqr.forEach(t),dXe=r(H4e," \u2014 "),ak=n(H4e,"A",{href:!0});var Yqr=s(ak);cXe=r(Yqr,"MaskFormerConfig"),Yqr.forEach(t),fXe=r(H4e," (MaskFormer model)"),H4e.forEach(t),mXe=i(L),gm=n(L,"LI",{});var U4e=s(gm);jee=n(U4e,"STRONG",{});var Kqr=s(jee);gXe=r(Kqr,"mbart"),Kqr.forEach(t),hXe=r(U4e," \u2014 "),nk=n(U4e,"A",{href:!0});var Zqr=s(nk);pXe=r(Zqr,"MBartConfig"),Zqr.forEach(t),uXe=r(U4e," (mBART model)"),U4e.forEach(t),_Xe=i(L),hm=n(L,"LI",{});var J4e=s(hm);Dee=n(J4e,"STRONG",{});var eNr=s(Dee);bXe=r(eNr,"megatron-bert"),eNr.forEach(t),vXe=r(J4e," \u2014 "),sk=n(J4e,"A",{href:!0});var oNr=s(sk);FXe=r(oNr,"MegatronBertConfig"),oNr.forEach(t),TXe=r(J4e," (MegatronBert model)"),J4e.forEach(t),MXe=i(L),pm=n(L,"LI",{});var Y4e=s(pm);Gee=n(Y4e,"STRONG",{});var rNr=s(Gee);EXe=r(rNr,"mobilebert"),rNr.forEach(t),CXe=r(Y4e," \u2014 "),lk=n(Y4e,"A",{href:!0});var tNr=s(lk);wXe=r(tNr,"MobileBertConfig"),tNr.forEach(t),AXe=r(Y4e," (MobileBERT model)"),Y4e.forEach(t),yXe=i(L),um=n(L,"LI",{});var K4e=s(um);Oee=n(K4e,"STRONG",{});var aNr=s(Oee);LXe=r(aNr,"mpnet"),aNr.forEach(t),xXe=r(K4e," \u2014 "),ik=n(K4e,"A",{href:!0});var nNr=s(ik);$Xe=r(nNr,"MPNetConfig"),nNr.forEach(t),kXe=r(K4e," (MPNet model)"),K4e.forEach(t),SXe=i(L),_m=n(L,"LI",{});var Z4e=s(_m);Vee=n(Z4e,"STRONG",{});var sNr=s(Vee);RXe=r(sNr,"mt5"),sNr.forEach(t),BXe=r(Z4e," \u2014 "),dk=n(Z4e,"A",{href:!0});var lNr=s(dk);PXe=r(lNr,"MT5Config"),lNr.forEach(t),IXe=r(Z4e," (mT5 model)"),Z4e.forEach(t),qXe=i(L),bm=n(L,"LI",{});var eEe=s(bm);Xee=n(eEe,"STRONG",{});var iNr=s(Xee);NXe=r(iNr,"nystromformer"),iNr.forEach(t),jXe=r(eEe," \u2014 "),ck=n(eEe,"A",{href:!0});var dNr=s(ck);DXe=r(dNr,"NystromformerConfig"),dNr.forEach(t),GXe=r(eEe," (Nystromformer model)"),eEe.forEach(t),OXe=i(L),vm=n(L,"LI",{});var oEe=s(vm);zee=n(oEe,"STRONG",{});var cNr=s(zee);VXe=r(cNr,"openai-gpt"),cNr.forEach(t),XXe=r(oEe," \u2014 "),fk=n(oEe,"A",{href:!0});var fNr=s(fk);zXe=r(fNr,"OpenAIGPTConfig"),fNr.forEach(t),QXe=r(oEe," (OpenAI GPT model)"),oEe.forEach(t),WXe=i(L),Fm=n(L,"LI",{});var rEe=s(Fm);Qee=n(rEe,"STRONG",{});var mNr=s(Qee);HXe=r(mNr,"pegasus"),mNr.forEach(t),UXe=r(rEe," \u2014 "),mk=n(rEe,"A",{href:!0});var gNr=s(mk);JXe=r(gNr,"PegasusConfig"),gNr.forEach(t),YXe=r(rEe," (Pegasus model)"),rEe.forEach(t),KXe=i(L),Tm=n(L,"LI",{});var tEe=s(Tm);Wee=n(tEe,"STRONG",{});var hNr=s(Wee);ZXe=r(hNr,"perceiver"),hNr.forEach(t),eze=r(tEe," \u2014 "),gk=n(tEe,"A",{href:!0});var pNr=s(gk);oze=r(pNr,"PerceiverConfig"),pNr.forEach(t),rze=r(tEe," (Perceiver model)"),tEe.forEach(t),tze=i(L),Mm=n(L,"LI",{});var aEe=s(Mm);Hee=n(aEe,"STRONG",{});var uNr=s(Hee);aze=r(uNr,"plbart"),uNr.forEach(t),nze=r(aEe," \u2014 "),hk=n(aEe,"A",{href:!0});var _Nr=s(hk);sze=r(_Nr,"PLBartConfig"),_Nr.forEach(t),lze=r(aEe," (PLBart model)"),aEe.forEach(t),ize=i(L),Em=n(L,"LI",{});var nEe=s(Em);Uee=n(nEe,"STRONG",{});var bNr=s(Uee);dze=r(bNr,"poolformer"),bNr.forEach(t),cze=r(nEe," \u2014 "),pk=n(nEe,"A",{href:!0});var vNr=s(pk);fze=r(vNr,"PoolFormerConfig"),vNr.forEach(t),mze=r(nEe," (PoolFormer model)"),nEe.forEach(t),gze=i(L),Cm=n(L,"LI",{});var sEe=s(Cm);Jee=n(sEe,"STRONG",{});var FNr=s(Jee);hze=r(FNr,"prophetnet"),FNr.forEach(t),pze=r(sEe," \u2014 "),uk=n(sEe,"A",{href:!0});var TNr=s(uk);uze=r(TNr,"ProphetNetConfig"),TNr.forEach(t),_ze=r(sEe," (ProphetNet model)"),sEe.forEach(t),bze=i(L),wm=n(L,"LI",{});var lEe=s(wm);Yee=n(lEe,"STRONG",{});var MNr=s(Yee);vze=r(MNr,"qdqbert"),MNr.forEach(t),Fze=r(lEe," \u2014 "),_k=n(lEe,"A",{href:!0});var ENr=s(_k);Tze=r(ENr,"QDQBertConfig"),ENr.forEach(t),Mze=r(lEe," (QDQBert model)"),lEe.forEach(t),Eze=i(L),Am=n(L,"LI",{});var iEe=s(Am);Kee=n(iEe,"STRONG",{});var CNr=s(Kee);Cze=r(CNr,"rag"),CNr.forEach(t),wze=r(iEe," \u2014 "),bk=n(iEe,"A",{href:!0});var wNr=s(bk);Aze=r(wNr,"RagConfig"),wNr.forEach(t),yze=r(iEe," (RAG model)"),iEe.forEach(t),Lze=i(L),ym=n(L,"LI",{});var dEe=s(ym);Zee=n(dEe,"STRONG",{});var ANr=s(Zee);xze=r(ANr,"realm"),ANr.forEach(t),$ze=r(dEe," \u2014 "),vk=n(dEe,"A",{href:!0});var yNr=s(vk);kze=r(yNr,"RealmConfig"),yNr.forEach(t),Sze=r(dEe," (Realm model)"),dEe.forEach(t),Rze=i(L),Lm=n(L,"LI",{});var cEe=s(Lm);eoe=n(cEe,"STRONG",{});var LNr=s(eoe);Bze=r(LNr,"reformer"),LNr.forEach(t),Pze=r(cEe," \u2014 "),Fk=n(cEe,"A",{href:!0});var xNr=s(Fk);Ize=r(xNr,"ReformerConfig"),xNr.forEach(t),qze=r(cEe," (Reformer model)"),cEe.forEach(t),Nze=i(L),xm=n(L,"LI",{});var fEe=s(xm);ooe=n(fEe,"STRONG",{});var $Nr=s(ooe);jze=r($Nr,"regnet"),$Nr.forEach(t),Dze=r(fEe," \u2014 "),Tk=n(fEe,"A",{href:!0});var kNr=s(Tk);Gze=r(kNr,"RegNetConfig"),kNr.forEach(t),Oze=r(fEe," (RegNet model)"),fEe.forEach(t),Vze=i(L),$m=n(L,"LI",{});var mEe=s($m);roe=n(mEe,"STRONG",{});var SNr=s(roe);Xze=r(SNr,"rembert"),SNr.forEach(t),zze=r(mEe," \u2014 "),Mk=n(mEe,"A",{href:!0});var RNr=s(Mk);Qze=r(RNr,"RemBertConfig"),RNr.forEach(t),Wze=r(mEe," (RemBERT model)"),mEe.forEach(t),Hze=i(L),km=n(L,"LI",{});var gEe=s(km);toe=n(gEe,"STRONG",{});var BNr=s(toe);Uze=r(BNr,"resnet"),BNr.forEach(t),Jze=r(gEe," \u2014 "),Ek=n(gEe,"A",{href:!0});var PNr=s(Ek);Yze=r(PNr,"ResNetConfig"),PNr.forEach(t),Kze=r(gEe," (ResNet model)"),gEe.forEach(t),Zze=i(L),Sm=n(L,"LI",{});var hEe=s(Sm);aoe=n(hEe,"STRONG",{});var INr=s(aoe);eQe=r(INr,"retribert"),INr.forEach(t),oQe=r(hEe," \u2014 "),Ck=n(hEe,"A",{href:!0});var qNr=s(Ck);rQe=r(qNr,"RetriBertConfig"),qNr.forEach(t),tQe=r(hEe," (RetriBERT model)"),hEe.forEach(t),aQe=i(L),Rm=n(L,"LI",{});var pEe=s(Rm);noe=n(pEe,"STRONG",{});var NNr=s(noe);nQe=r(NNr,"roberta"),NNr.forEach(t),sQe=r(pEe," \u2014 "),wk=n(pEe,"A",{href:!0});var jNr=s(wk);lQe=r(jNr,"RobertaConfig"),jNr.forEach(t),iQe=r(pEe," (RoBERTa model)"),pEe.forEach(t),dQe=i(L),Bm=n(L,"LI",{});var uEe=s(Bm);soe=n(uEe,"STRONG",{});var DNr=s(soe);cQe=r(DNr,"roformer"),DNr.forEach(t),fQe=r(uEe," \u2014 "),Ak=n(uEe,"A",{href:!0});var GNr=s(Ak);mQe=r(GNr,"RoFormerConfig"),GNr.forEach(t),gQe=r(uEe," (RoFormer model)"),uEe.forEach(t),hQe=i(L),Pm=n(L,"LI",{});var _Ee=s(Pm);loe=n(_Ee,"STRONG",{});var ONr=s(loe);pQe=r(ONr,"segformer"),ONr.forEach(t),uQe=r(_Ee," \u2014 "),yk=n(_Ee,"A",{href:!0});var VNr=s(yk);_Qe=r(VNr,"SegformerConfig"),VNr.forEach(t),bQe=r(_Ee," (SegFormer model)"),_Ee.forEach(t),vQe=i(L),Im=n(L,"LI",{});var bEe=s(Im);ioe=n(bEe,"STRONG",{});var XNr=s(ioe);FQe=r(XNr,"sew"),XNr.forEach(t),TQe=r(bEe," \u2014 "),Lk=n(bEe,"A",{href:!0});var zNr=s(Lk);MQe=r(zNr,"SEWConfig"),zNr.forEach(t),EQe=r(bEe," (SEW model)"),bEe.forEach(t),CQe=i(L),qm=n(L,"LI",{});var vEe=s(qm);doe=n(vEe,"STRONG",{});var QNr=s(doe);wQe=r(QNr,"sew-d"),QNr.forEach(t),AQe=r(vEe," \u2014 "),xk=n(vEe,"A",{href:!0});var WNr=s(xk);yQe=r(WNr,"SEWDConfig"),WNr.forEach(t),LQe=r(vEe," (SEW-D model)"),vEe.forEach(t),xQe=i(L),Nm=n(L,"LI",{});var FEe=s(Nm);coe=n(FEe,"STRONG",{});var HNr=s(coe);$Qe=r(HNr,"speech-encoder-decoder"),HNr.forEach(t),kQe=r(FEe," \u2014 "),$k=n(FEe,"A",{href:!0});var UNr=s($k);SQe=r(UNr,"SpeechEncoderDecoderConfig"),UNr.forEach(t),RQe=r(FEe," (Speech Encoder decoder model)"),FEe.forEach(t),BQe=i(L),jm=n(L,"LI",{});var TEe=s(jm);foe=n(TEe,"STRONG",{});var JNr=s(foe);PQe=r(JNr,"speech_to_text"),JNr.forEach(t),IQe=r(TEe," \u2014 "),kk=n(TEe,"A",{href:!0});var YNr=s(kk);qQe=r(YNr,"Speech2TextConfig"),YNr.forEach(t),NQe=r(TEe," (Speech2Text model)"),TEe.forEach(t),jQe=i(L),Dm=n(L,"LI",{});var MEe=s(Dm);moe=n(MEe,"STRONG",{});var KNr=s(moe);DQe=r(KNr,"speech_to_text_2"),KNr.forEach(t),GQe=r(MEe," \u2014 "),Sk=n(MEe,"A",{href:!0});var ZNr=s(Sk);OQe=r(ZNr,"Speech2Text2Config"),ZNr.forEach(t),VQe=r(MEe," (Speech2Text2 model)"),MEe.forEach(t),XQe=i(L),Gm=n(L,"LI",{});var EEe=s(Gm);goe=n(EEe,"STRONG",{});var ejr=s(goe);zQe=r(ejr,"splinter"),ejr.forEach(t),QQe=r(EEe," \u2014 "),Rk=n(EEe,"A",{href:!0});var ojr=s(Rk);WQe=r(ojr,"SplinterConfig"),ojr.forEach(t),HQe=r(EEe," (Splinter model)"),EEe.forEach(t),UQe=i(L),Om=n(L,"LI",{});var CEe=s(Om);hoe=n(CEe,"STRONG",{});var rjr=s(hoe);JQe=r(rjr,"squeezebert"),rjr.forEach(t),YQe=r(CEe," \u2014 "),Bk=n(CEe,"A",{href:!0});var tjr=s(Bk);KQe=r(tjr,"SqueezeBertConfig"),tjr.forEach(t),ZQe=r(CEe," (SqueezeBERT model)"),CEe.forEach(t),eWe=i(L),Vm=n(L,"LI",{});var wEe=s(Vm);poe=n(wEe,"STRONG",{});var ajr=s(poe);oWe=r(ajr,"swin"),ajr.forEach(t),rWe=r(wEe," \u2014 "),Pk=n(wEe,"A",{href:!0});var njr=s(Pk);tWe=r(njr,"SwinConfig"),njr.forEach(t),aWe=r(wEe," (Swin model)"),wEe.forEach(t),nWe=i(L),Xm=n(L,"LI",{});var AEe=s(Xm);uoe=n(AEe,"STRONG",{});var sjr=s(uoe);sWe=r(sjr,"t5"),sjr.forEach(t),lWe=r(AEe," \u2014 "),Ik=n(AEe,"A",{href:!0});var ljr=s(Ik);iWe=r(ljr,"T5Config"),ljr.forEach(t),dWe=r(AEe," (T5 model)"),AEe.forEach(t),cWe=i(L),zm=n(L,"LI",{});var yEe=s(zm);_oe=n(yEe,"STRONG",{});var ijr=s(_oe);fWe=r(ijr,"tapas"),ijr.forEach(t),mWe=r(yEe," \u2014 "),qk=n(yEe,"A",{href:!0});var djr=s(qk);gWe=r(djr,"TapasConfig"),djr.forEach(t),hWe=r(yEe," (TAPAS model)"),yEe.forEach(t),pWe=i(L),Qm=n(L,"LI",{});var LEe=s(Qm);boe=n(LEe,"STRONG",{});var cjr=s(boe);uWe=r(cjr,"tapex"),cjr.forEach(t),_We=r(LEe," \u2014 "),Nk=n(LEe,"A",{href:!0});var fjr=s(Nk);bWe=r(fjr,"BartConfig"),fjr.forEach(t),vWe=r(LEe," (TAPEX model)"),LEe.forEach(t),FWe=i(L),Wm=n(L,"LI",{});var xEe=s(Wm);voe=n(xEe,"STRONG",{});var mjr=s(voe);TWe=r(mjr,"transfo-xl"),mjr.forEach(t),MWe=r(xEe," \u2014 "),jk=n(xEe,"A",{href:!0});var gjr=s(jk);EWe=r(gjr,"TransfoXLConfig"),gjr.forEach(t),CWe=r(xEe," (Transformer-XL model)"),xEe.forEach(t),wWe=i(L),Hm=n(L,"LI",{});var $Ee=s(Hm);Foe=n($Ee,"STRONG",{});var hjr=s(Foe);AWe=r(hjr,"trocr"),hjr.forEach(t),yWe=r($Ee," \u2014 "),Dk=n($Ee,"A",{href:!0});var pjr=s(Dk);LWe=r(pjr,"TrOCRConfig"),pjr.forEach(t),xWe=r($Ee," (TrOCR model)"),$Ee.forEach(t),$We=i(L),Um=n(L,"LI",{});var kEe=s(Um);Toe=n(kEe,"STRONG",{});var ujr=s(Toe);kWe=r(ujr,"unispeech"),ujr.forEach(t),SWe=r(kEe," \u2014 "),Gk=n(kEe,"A",{href:!0});var _jr=s(Gk);RWe=r(_jr,"UniSpeechConfig"),_jr.forEach(t),BWe=r(kEe," (UniSpeech model)"),kEe.forEach(t),PWe=i(L),Jm=n(L,"LI",{});var SEe=s(Jm);Moe=n(SEe,"STRONG",{});var bjr=s(Moe);IWe=r(bjr,"unispeech-sat"),bjr.forEach(t),qWe=r(SEe," \u2014 "),Ok=n(SEe,"A",{href:!0});var vjr=s(Ok);NWe=r(vjr,"UniSpeechSatConfig"),vjr.forEach(t),jWe=r(SEe," (UniSpeechSat model)"),SEe.forEach(t),DWe=i(L),Ym=n(L,"LI",{});var REe=s(Ym);Eoe=n(REe,"STRONG",{});var Fjr=s(Eoe);GWe=r(Fjr,"van"),Fjr.forEach(t),OWe=r(REe," \u2014 "),Vk=n(REe,"A",{href:!0});var Tjr=s(Vk);VWe=r(Tjr,"VanConfig"),Tjr.forEach(t),XWe=r(REe," (VAN model)"),REe.forEach(t),zWe=i(L),Km=n(L,"LI",{});var BEe=s(Km);Coe=n(BEe,"STRONG",{});var Mjr=s(Coe);QWe=r(Mjr,"vilt"),Mjr.forEach(t),WWe=r(BEe," \u2014 "),Xk=n(BEe,"A",{href:!0});var Ejr=s(Xk);HWe=r(Ejr,"ViltConfig"),Ejr.forEach(t),UWe=r(BEe," (ViLT model)"),BEe.forEach(t),JWe=i(L),Zm=n(L,"LI",{});var PEe=s(Zm);woe=n(PEe,"STRONG",{});var Cjr=s(woe);YWe=r(Cjr,"vision-encoder-decoder"),Cjr.forEach(t),KWe=r(PEe," \u2014 "),zk=n(PEe,"A",{href:!0});var wjr=s(zk);ZWe=r(wjr,"VisionEncoderDecoderConfig"),wjr.forEach(t),eHe=r(PEe," (Vision Encoder decoder model)"),PEe.forEach(t),oHe=i(L),eg=n(L,"LI",{});var IEe=s(eg);Aoe=n(IEe,"STRONG",{});var Ajr=s(Aoe);rHe=r(Ajr,"vision-text-dual-encoder"),Ajr.forEach(t),tHe=r(IEe," \u2014 "),Qk=n(IEe,"A",{href:!0});var yjr=s(Qk);aHe=r(yjr,"VisionTextDualEncoderConfig"),yjr.forEach(t),nHe=r(IEe," (VisionTextDualEncoder model)"),IEe.forEach(t),sHe=i(L),og=n(L,"LI",{});var qEe=s(og);yoe=n(qEe,"STRONG",{});var Ljr=s(yoe);lHe=r(Ljr,"visual_bert"),Ljr.forEach(t),iHe=r(qEe," \u2014 "),Wk=n(qEe,"A",{href:!0});var xjr=s(Wk);dHe=r(xjr,"VisualBertConfig"),xjr.forEach(t),cHe=r(qEe," (VisualBert model)"),qEe.forEach(t),fHe=i(L),rg=n(L,"LI",{});var NEe=s(rg);Loe=n(NEe,"STRONG",{});var $jr=s(Loe);mHe=r($jr,"vit"),$jr.forEach(t),gHe=r(NEe," \u2014 "),Hk=n(NEe,"A",{href:!0});var kjr=s(Hk);hHe=r(kjr,"ViTConfig"),kjr.forEach(t),pHe=r(NEe," (ViT model)"),NEe.forEach(t),uHe=i(L),tg=n(L,"LI",{});var jEe=s(tg);xoe=n(jEe,"STRONG",{});var Sjr=s(xoe);_He=r(Sjr,"vit_mae"),Sjr.forEach(t),bHe=r(jEe," \u2014 "),Uk=n(jEe,"A",{href:!0});var Rjr=s(Uk);vHe=r(Rjr,"ViTMAEConfig"),Rjr.forEach(t),FHe=r(jEe," (ViTMAE model)"),jEe.forEach(t),THe=i(L),ag=n(L,"LI",{});var DEe=s(ag);$oe=n(DEe,"STRONG",{});var Bjr=s($oe);MHe=r(Bjr,"wav2vec2"),Bjr.forEach(t),EHe=r(DEe," \u2014 "),Jk=n(DEe,"A",{href:!0});var Pjr=s(Jk);CHe=r(Pjr,"Wav2Vec2Config"),Pjr.forEach(t),wHe=r(DEe," (Wav2Vec2 model)"),DEe.forEach(t),AHe=i(L),ng=n(L,"LI",{});var GEe=s(ng);koe=n(GEe,"STRONG",{});var Ijr=s(koe);yHe=r(Ijr,"wavlm"),Ijr.forEach(t),LHe=r(GEe," \u2014 "),Yk=n(GEe,"A",{href:!0});var qjr=s(Yk);xHe=r(qjr,"WavLMConfig"),qjr.forEach(t),$He=r(GEe," (WavLM model)"),GEe.forEach(t),kHe=i(L),sg=n(L,"LI",{});var OEe=s(sg);Soe=n(OEe,"STRONG",{});var Njr=s(Soe);SHe=r(Njr,"xglm"),Njr.forEach(t),RHe=r(OEe," \u2014 "),Kk=n(OEe,"A",{href:!0});var jjr=s(Kk);BHe=r(jjr,"XGLMConfig"),jjr.forEach(t),PHe=r(OEe," (XGLM model)"),OEe.forEach(t),IHe=i(L),lg=n(L,"LI",{});var VEe=s(lg);Roe=n(VEe,"STRONG",{});var Djr=s(Roe);qHe=r(Djr,"xlm"),Djr.forEach(t),NHe=r(VEe," \u2014 "),Zk=n(VEe,"A",{href:!0});var Gjr=s(Zk);jHe=r(Gjr,"XLMConfig"),Gjr.forEach(t),DHe=r(VEe," (XLM model)"),VEe.forEach(t),GHe=i(L),ig=n(L,"LI",{});var XEe=s(ig);Boe=n(XEe,"STRONG",{});var Ojr=s(Boe);OHe=r(Ojr,"xlm-prophetnet"),Ojr.forEach(t),VHe=r(XEe," \u2014 "),eS=n(XEe,"A",{href:!0});var Vjr=s(eS);XHe=r(Vjr,"XLMProphetNetConfig"),Vjr.forEach(t),zHe=r(XEe," (XLMProphetNet model)"),XEe.forEach(t),QHe=i(L),dg=n(L,"LI",{});var zEe=s(dg);Poe=n(zEe,"STRONG",{});var Xjr=s(Poe);WHe=r(Xjr,"xlm-roberta"),Xjr.forEach(t),HHe=r(zEe," \u2014 "),oS=n(zEe,"A",{href:!0});var zjr=s(oS);UHe=r(zjr,"XLMRobertaConfig"),zjr.forEach(t),JHe=r(zEe," (XLM-RoBERTa model)"),zEe.forEach(t),YHe=i(L),cg=n(L,"LI",{});var QEe=s(cg);Ioe=n(QEe,"STRONG",{});var Qjr=s(Ioe);KHe=r(Qjr,"xlm-roberta-xl"),Qjr.forEach(t),ZHe=r(QEe," \u2014 "),rS=n(QEe,"A",{href:!0});var Wjr=s(rS);eUe=r(Wjr,"XLMRobertaXLConfig"),Wjr.forEach(t),oUe=r(QEe," (XLM-RoBERTa-XL model)"),QEe.forEach(t),rUe=i(L),fg=n(L,"LI",{});var WEe=s(fg);qoe=n(WEe,"STRONG",{});var Hjr=s(qoe);tUe=r(Hjr,"xlnet"),Hjr.forEach(t),aUe=r(WEe," \u2014 "),tS=n(WEe,"A",{href:!0});var Ujr=s(tS);nUe=r(Ujr,"XLNetConfig"),Ujr.forEach(t),sUe=r(WEe," (XLNet model)"),WEe.forEach(t),lUe=i(L),mg=n(L,"LI",{});var HEe=s(mg);Noe=n(HEe,"STRONG",{});var Jjr=s(Noe);iUe=r(Jjr,"yolos"),Jjr.forEach(t),dUe=r(HEe," \u2014 "),aS=n(HEe,"A",{href:!0});var Yjr=s(aS);cUe=r(Yjr,"YolosConfig"),Yjr.forEach(t),fUe=r(HEe," (YOLOS model)"),HEe.forEach(t),mUe=i(L),gg=n(L,"LI",{});var UEe=s(gg);joe=n(UEe,"STRONG",{});var Kjr=s(joe);gUe=r(Kjr,"yoso"),Kjr.forEach(t),hUe=r(UEe," \u2014 "),nS=n(UEe,"A",{href:!0});var Zjr=s(nS);pUe=r(Zjr,"YosoConfig"),Zjr.forEach(t),uUe=r(UEe," (YOSO model)"),UEe.forEach(t),L.forEach(t),_Ue=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),bUe=i(Kr),pg=n(Kr,"DIV",{class:!0});var lqe=s(pg);T(HA.$$.fragment,lqe),vUe=i(lqe),Doe=n(lqe,"P",{});var eDr=s(Doe);FUe=r(eDr,"Register a new configuration for this class."),eDr.forEach(t),lqe.forEach(t),Kr.forEach(t),cPe=i(f),_i=n(f,"H2",{class:!0});var iqe=s(_i);ug=n(iqe,"A",{id:!0,class:!0,href:!0});var oDr=s(ug);Goe=n(oDr,"SPAN",{});var rDr=s(Goe);T(UA.$$.fragment,rDr),rDr.forEach(t),oDr.forEach(t),TUe=i(iqe),Ooe=n(iqe,"SPAN",{});var tDr=s(Ooe);MUe=r(tDr,"AutoTokenizer"),tDr.forEach(t),iqe.forEach(t),fPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(JA.$$.fragment,Ps),EUe=i(Ps),YA=n(Ps,"P",{});var dqe=s(YA);CUe=r(dqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sS=n(dqe,"A",{href:!0});var aDr=s(sS);wUe=r(aDr,"AutoTokenizer.from_pretrained()"),aDr.forEach(t),AUe=r(dqe," class method."),dqe.forEach(t),yUe=i(Ps),KA=n(Ps,"P",{});var cqe=s(KA);LUe=r(cqe,"This class cannot be instantiated directly using "),Voe=n(cqe,"CODE",{});var nDr=s(Voe);xUe=r(nDr,"__init__()"),nDr.forEach(t),$Ue=r(cqe," (throws an error)."),cqe.forEach(t),kUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(ZA.$$.fragment,Is),SUe=i(Is),Xoe=n(Is,"P",{});var sDr=s(Xoe);RUe=r(sDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),sDr.forEach(t),BUe=i(Is),Ca=n(Is,"P",{});var O3=s(Ca);PUe=r(O3,"The tokenizer class to instantiate is selected based on the "),zoe=n(O3,"CODE",{});var lDr=s(zoe);IUe=r(lDr,"model_type"),lDr.forEach(t),qUe=r(O3,` property of the config object (either
passed as an argument or loaded from `),Qoe=n(O3,"CODE",{});var iDr=s(Qoe);NUe=r(iDr,"pretrained_model_name_or_path"),iDr.forEach(t),jUe=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=n(O3,"CODE",{});var dDr=s(Woe);DUe=r(dDr,"pretrained_model_name_or_path"),dDr.forEach(t),GUe=r(O3,":"),O3.forEach(t),OUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var e7=s(kn);Hoe=n(e7,"STRONG",{});var cDr=s(Hoe);VUe=r(cDr,"albert"),cDr.forEach(t),XUe=r(e7," \u2014 "),lS=n(e7,"A",{href:!0});var fDr=s(lS);zUe=r(fDr,"AlbertTokenizer"),fDr.forEach(t),QUe=r(e7," or "),iS=n(e7,"A",{href:!0});var mDr=s(iS);WUe=r(mDr,"AlbertTokenizerFast"),mDr.forEach(t),HUe=r(e7," (ALBERT model)"),e7.forEach(t),UUe=i(S),Sn=n(S,"LI",{});var o7=s(Sn);Uoe=n(o7,"STRONG",{});var gDr=s(Uoe);JUe=r(gDr,"bart"),gDr.forEach(t),YUe=r(o7," \u2014 "),dS=n(o7,"A",{href:!0});var hDr=s(dS);KUe=r(hDr,"BartTokenizer"),hDr.forEach(t),ZUe=r(o7," or "),cS=n(o7,"A",{href:!0});var pDr=s(cS);eJe=r(pDr,"BartTokenizerFast"),pDr.forEach(t),oJe=r(o7," (BART model)"),o7.forEach(t),rJe=i(S),Rn=n(S,"LI",{});var r7=s(Rn);Joe=n(r7,"STRONG",{});var uDr=s(Joe);tJe=r(uDr,"barthez"),uDr.forEach(t),aJe=r(r7," \u2014 "),fS=n(r7,"A",{href:!0});var _Dr=s(fS);nJe=r(_Dr,"BarthezTokenizer"),_Dr.forEach(t),sJe=r(r7," or "),mS=n(r7,"A",{href:!0});var bDr=s(mS);lJe=r(bDr,"BarthezTokenizerFast"),bDr.forEach(t),iJe=r(r7," (BARThez model)"),r7.forEach(t),dJe=i(S),_g=n(S,"LI",{});var JEe=s(_g);Yoe=n(JEe,"STRONG",{});var vDr=s(Yoe);cJe=r(vDr,"bartpho"),vDr.forEach(t),fJe=r(JEe," \u2014 "),gS=n(JEe,"A",{href:!0});var FDr=s(gS);mJe=r(FDr,"BartphoTokenizer"),FDr.forEach(t),gJe=r(JEe," (BARTpho model)"),JEe.forEach(t),hJe=i(S),Bn=n(S,"LI",{});var t7=s(Bn);Koe=n(t7,"STRONG",{});var TDr=s(Koe);pJe=r(TDr,"bert"),TDr.forEach(t),uJe=r(t7," \u2014 "),hS=n(t7,"A",{href:!0});var MDr=s(hS);_Je=r(MDr,"BertTokenizer"),MDr.forEach(t),bJe=r(t7," or "),pS=n(t7,"A",{href:!0});var EDr=s(pS);vJe=r(EDr,"BertTokenizerFast"),EDr.forEach(t),FJe=r(t7," (BERT model)"),t7.forEach(t),TJe=i(S),bg=n(S,"LI",{});var YEe=s(bg);Zoe=n(YEe,"STRONG",{});var CDr=s(Zoe);MJe=r(CDr,"bert-generation"),CDr.forEach(t),EJe=r(YEe," \u2014 "),uS=n(YEe,"A",{href:!0});var wDr=s(uS);CJe=r(wDr,"BertGenerationTokenizer"),wDr.forEach(t),wJe=r(YEe," (Bert Generation model)"),YEe.forEach(t),AJe=i(S),vg=n(S,"LI",{});var KEe=s(vg);ere=n(KEe,"STRONG",{});var ADr=s(ere);yJe=r(ADr,"bert-japanese"),ADr.forEach(t),LJe=r(KEe," \u2014 "),_S=n(KEe,"A",{href:!0});var yDr=s(_S);xJe=r(yDr,"BertJapaneseTokenizer"),yDr.forEach(t),$Je=r(KEe," (BertJapanese model)"),KEe.forEach(t),kJe=i(S),Fg=n(S,"LI",{});var ZEe=s(Fg);ore=n(ZEe,"STRONG",{});var LDr=s(ore);SJe=r(LDr,"bertweet"),LDr.forEach(t),RJe=r(ZEe," \u2014 "),bS=n(ZEe,"A",{href:!0});var xDr=s(bS);BJe=r(xDr,"BertweetTokenizer"),xDr.forEach(t),PJe=r(ZEe," (Bertweet model)"),ZEe.forEach(t),IJe=i(S),Pn=n(S,"LI",{});var a7=s(Pn);rre=n(a7,"STRONG",{});var $Dr=s(rre);qJe=r($Dr,"big_bird"),$Dr.forEach(t),NJe=r(a7," \u2014 "),vS=n(a7,"A",{href:!0});var kDr=s(vS);jJe=r(kDr,"BigBirdTokenizer"),kDr.forEach(t),DJe=r(a7," or "),FS=n(a7,"A",{href:!0});var SDr=s(FS);GJe=r(SDr,"BigBirdTokenizerFast"),SDr.forEach(t),OJe=r(a7," (BigBird model)"),a7.forEach(t),VJe=i(S),In=n(S,"LI",{});var n7=s(In);tre=n(n7,"STRONG",{});var RDr=s(tre);XJe=r(RDr,"bigbird_pegasus"),RDr.forEach(t),zJe=r(n7," \u2014 "),TS=n(n7,"A",{href:!0});var BDr=s(TS);QJe=r(BDr,"PegasusTokenizer"),BDr.forEach(t),WJe=r(n7," or "),MS=n(n7,"A",{href:!0});var PDr=s(MS);HJe=r(PDr,"PegasusTokenizerFast"),PDr.forEach(t),UJe=r(n7," (BigBirdPegasus model)"),n7.forEach(t),JJe=i(S),qn=n(S,"LI",{});var s7=s(qn);are=n(s7,"STRONG",{});var IDr=s(are);YJe=r(IDr,"blenderbot"),IDr.forEach(t),KJe=r(s7," \u2014 "),ES=n(s7,"A",{href:!0});var qDr=s(ES);ZJe=r(qDr,"BlenderbotTokenizer"),qDr.forEach(t),eYe=r(s7," or "),CS=n(s7,"A",{href:!0});var NDr=s(CS);oYe=r(NDr,"BlenderbotTokenizerFast"),NDr.forEach(t),rYe=r(s7," (Blenderbot model)"),s7.forEach(t),tYe=i(S),Tg=n(S,"LI",{});var eCe=s(Tg);nre=n(eCe,"STRONG",{});var jDr=s(nre);aYe=r(jDr,"blenderbot-small"),jDr.forEach(t),nYe=r(eCe," \u2014 "),wS=n(eCe,"A",{href:!0});var DDr=s(wS);sYe=r(DDr,"BlenderbotSmallTokenizer"),DDr.forEach(t),lYe=r(eCe," (BlenderbotSmall model)"),eCe.forEach(t),iYe=i(S),Mg=n(S,"LI",{});var oCe=s(Mg);sre=n(oCe,"STRONG",{});var GDr=s(sre);dYe=r(GDr,"byt5"),GDr.forEach(t),cYe=r(oCe," \u2014 "),AS=n(oCe,"A",{href:!0});var ODr=s(AS);fYe=r(ODr,"ByT5Tokenizer"),ODr.forEach(t),mYe=r(oCe," (ByT5 model)"),oCe.forEach(t),gYe=i(S),Nn=n(S,"LI",{});var l7=s(Nn);lre=n(l7,"STRONG",{});var VDr=s(lre);hYe=r(VDr,"camembert"),VDr.forEach(t),pYe=r(l7," \u2014 "),yS=n(l7,"A",{href:!0});var XDr=s(yS);uYe=r(XDr,"CamembertTokenizer"),XDr.forEach(t),_Ye=r(l7," or "),LS=n(l7,"A",{href:!0});var zDr=s(LS);bYe=r(zDr,"CamembertTokenizerFast"),zDr.forEach(t),vYe=r(l7," (CamemBERT model)"),l7.forEach(t),FYe=i(S),Eg=n(S,"LI",{});var rCe=s(Eg);ire=n(rCe,"STRONG",{});var QDr=s(ire);TYe=r(QDr,"canine"),QDr.forEach(t),MYe=r(rCe," \u2014 "),xS=n(rCe,"A",{href:!0});var WDr=s(xS);EYe=r(WDr,"CanineTokenizer"),WDr.forEach(t),CYe=r(rCe," (Canine model)"),rCe.forEach(t),wYe=i(S),jn=n(S,"LI",{});var i7=s(jn);dre=n(i7,"STRONG",{});var HDr=s(dre);AYe=r(HDr,"clip"),HDr.forEach(t),yYe=r(i7," \u2014 "),$S=n(i7,"A",{href:!0});var UDr=s($S);LYe=r(UDr,"CLIPTokenizer"),UDr.forEach(t),xYe=r(i7," or "),kS=n(i7,"A",{href:!0});var JDr=s(kS);$Ye=r(JDr,"CLIPTokenizerFast"),JDr.forEach(t),kYe=r(i7," (CLIP model)"),i7.forEach(t),SYe=i(S),Dn=n(S,"LI",{});var d7=s(Dn);cre=n(d7,"STRONG",{});var YDr=s(cre);RYe=r(YDr,"convbert"),YDr.forEach(t),BYe=r(d7," \u2014 "),SS=n(d7,"A",{href:!0});var KDr=s(SS);PYe=r(KDr,"ConvBertTokenizer"),KDr.forEach(t),IYe=r(d7," or "),RS=n(d7,"A",{href:!0});var ZDr=s(RS);qYe=r(ZDr,"ConvBertTokenizerFast"),ZDr.forEach(t),NYe=r(d7," (ConvBERT model)"),d7.forEach(t),jYe=i(S),Gn=n(S,"LI",{});var c7=s(Gn);fre=n(c7,"STRONG",{});var eGr=s(fre);DYe=r(eGr,"cpm"),eGr.forEach(t),GYe=r(c7," \u2014 "),BS=n(c7,"A",{href:!0});var oGr=s(BS);OYe=r(oGr,"CpmTokenizer"),oGr.forEach(t),VYe=r(c7," or "),PS=n(c7,"A",{href:!0});var rGr=s(PS);XYe=r(rGr,"CpmTokenizerFast"),rGr.forEach(t),zYe=r(c7," (CPM model)"),c7.forEach(t),QYe=i(S),Cg=n(S,"LI",{});var tCe=s(Cg);mre=n(tCe,"STRONG",{});var tGr=s(mre);WYe=r(tGr,"ctrl"),tGr.forEach(t),HYe=r(tCe," \u2014 "),IS=n(tCe,"A",{href:!0});var aGr=s(IS);UYe=r(aGr,"CTRLTokenizer"),aGr.forEach(t),JYe=r(tCe," (CTRL model)"),tCe.forEach(t),YYe=i(S),On=n(S,"LI",{});var f7=s(On);gre=n(f7,"STRONG",{});var nGr=s(gre);KYe=r(nGr,"data2vec-text"),nGr.forEach(t),ZYe=r(f7," \u2014 "),qS=n(f7,"A",{href:!0});var sGr=s(qS);eKe=r(sGr,"RobertaTokenizer"),sGr.forEach(t),oKe=r(f7," or "),NS=n(f7,"A",{href:!0});var lGr=s(NS);rKe=r(lGr,"RobertaTokenizerFast"),lGr.forEach(t),tKe=r(f7," (Data2VecText model)"),f7.forEach(t),aKe=i(S),Vn=n(S,"LI",{});var m7=s(Vn);hre=n(m7,"STRONG",{});var iGr=s(hre);nKe=r(iGr,"deberta"),iGr.forEach(t),sKe=r(m7," \u2014 "),jS=n(m7,"A",{href:!0});var dGr=s(jS);lKe=r(dGr,"DebertaTokenizer"),dGr.forEach(t),iKe=r(m7," or "),DS=n(m7,"A",{href:!0});var cGr=s(DS);dKe=r(cGr,"DebertaTokenizerFast"),cGr.forEach(t),cKe=r(m7," (DeBERTa model)"),m7.forEach(t),fKe=i(S),Xn=n(S,"LI",{});var g7=s(Xn);pre=n(g7,"STRONG",{});var fGr=s(pre);mKe=r(fGr,"deberta-v2"),fGr.forEach(t),gKe=r(g7," \u2014 "),GS=n(g7,"A",{href:!0});var mGr=s(GS);hKe=r(mGr,"DebertaV2Tokenizer"),mGr.forEach(t),pKe=r(g7," or "),OS=n(g7,"A",{href:!0});var gGr=s(OS);uKe=r(gGr,"DebertaV2TokenizerFast"),gGr.forEach(t),_Ke=r(g7," (DeBERTa-v2 model)"),g7.forEach(t),bKe=i(S),zn=n(S,"LI",{});var h7=s(zn);ure=n(h7,"STRONG",{});var hGr=s(ure);vKe=r(hGr,"distilbert"),hGr.forEach(t),FKe=r(h7," \u2014 "),VS=n(h7,"A",{href:!0});var pGr=s(VS);TKe=r(pGr,"DistilBertTokenizer"),pGr.forEach(t),MKe=r(h7," or "),XS=n(h7,"A",{href:!0});var uGr=s(XS);EKe=r(uGr,"DistilBertTokenizerFast"),uGr.forEach(t),CKe=r(h7," (DistilBERT model)"),h7.forEach(t),wKe=i(S),Qn=n(S,"LI",{});var p7=s(Qn);_re=n(p7,"STRONG",{});var _Gr=s(_re);AKe=r(_Gr,"dpr"),_Gr.forEach(t),yKe=r(p7," \u2014 "),zS=n(p7,"A",{href:!0});var bGr=s(zS);LKe=r(bGr,"DPRQuestionEncoderTokenizer"),bGr.forEach(t),xKe=r(p7," or "),QS=n(p7,"A",{href:!0});var vGr=s(QS);$Ke=r(vGr,"DPRQuestionEncoderTokenizerFast"),vGr.forEach(t),kKe=r(p7," (DPR model)"),p7.forEach(t),SKe=i(S),Wn=n(S,"LI",{});var u7=s(Wn);bre=n(u7,"STRONG",{});var FGr=s(bre);RKe=r(FGr,"electra"),FGr.forEach(t),BKe=r(u7," \u2014 "),WS=n(u7,"A",{href:!0});var TGr=s(WS);PKe=r(TGr,"ElectraTokenizer"),TGr.forEach(t),IKe=r(u7," or "),HS=n(u7,"A",{href:!0});var MGr=s(HS);qKe=r(MGr,"ElectraTokenizerFast"),MGr.forEach(t),NKe=r(u7," (ELECTRA model)"),u7.forEach(t),jKe=i(S),wg=n(S,"LI",{});var aCe=s(wg);vre=n(aCe,"STRONG",{});var EGr=s(vre);DKe=r(EGr,"flaubert"),EGr.forEach(t),GKe=r(aCe," \u2014 "),US=n(aCe,"A",{href:!0});var CGr=s(US);OKe=r(CGr,"FlaubertTokenizer"),CGr.forEach(t),VKe=r(aCe," (FlauBERT model)"),aCe.forEach(t),XKe=i(S),Hn=n(S,"LI",{});var _7=s(Hn);Fre=n(_7,"STRONG",{});var wGr=s(Fre);zKe=r(wGr,"fnet"),wGr.forEach(t),QKe=r(_7," \u2014 "),JS=n(_7,"A",{href:!0});var AGr=s(JS);WKe=r(AGr,"FNetTokenizer"),AGr.forEach(t),HKe=r(_7," or "),YS=n(_7,"A",{href:!0});var yGr=s(YS);UKe=r(yGr,"FNetTokenizerFast"),yGr.forEach(t),JKe=r(_7," (FNet model)"),_7.forEach(t),YKe=i(S),Ag=n(S,"LI",{});var nCe=s(Ag);Tre=n(nCe,"STRONG",{});var LGr=s(Tre);KKe=r(LGr,"fsmt"),LGr.forEach(t),ZKe=r(nCe," \u2014 "),KS=n(nCe,"A",{href:!0});var xGr=s(KS);eZe=r(xGr,"FSMTTokenizer"),xGr.forEach(t),oZe=r(nCe," (FairSeq Machine-Translation model)"),nCe.forEach(t),rZe=i(S),Un=n(S,"LI",{});var b7=s(Un);Mre=n(b7,"STRONG",{});var $Gr=s(Mre);tZe=r($Gr,"funnel"),$Gr.forEach(t),aZe=r(b7," \u2014 "),ZS=n(b7,"A",{href:!0});var kGr=s(ZS);nZe=r(kGr,"FunnelTokenizer"),kGr.forEach(t),sZe=r(b7," or "),eR=n(b7,"A",{href:!0});var SGr=s(eR);lZe=r(SGr,"FunnelTokenizerFast"),SGr.forEach(t),iZe=r(b7," (Funnel Transformer model)"),b7.forEach(t),dZe=i(S),Jn=n(S,"LI",{});var v7=s(Jn);Ere=n(v7,"STRONG",{});var RGr=s(Ere);cZe=r(RGr,"gpt2"),RGr.forEach(t),fZe=r(v7," \u2014 "),oR=n(v7,"A",{href:!0});var BGr=s(oR);mZe=r(BGr,"GPT2Tokenizer"),BGr.forEach(t),gZe=r(v7," or "),rR=n(v7,"A",{href:!0});var PGr=s(rR);hZe=r(PGr,"GPT2TokenizerFast"),PGr.forEach(t),pZe=r(v7," (OpenAI GPT-2 model)"),v7.forEach(t),uZe=i(S),Yn=n(S,"LI",{});var F7=s(Yn);Cre=n(F7,"STRONG",{});var IGr=s(Cre);_Ze=r(IGr,"gpt_neo"),IGr.forEach(t),bZe=r(F7," \u2014 "),tR=n(F7,"A",{href:!0});var qGr=s(tR);vZe=r(qGr,"GPT2Tokenizer"),qGr.forEach(t),FZe=r(F7," or "),aR=n(F7,"A",{href:!0});var NGr=s(aR);TZe=r(NGr,"GPT2TokenizerFast"),NGr.forEach(t),MZe=r(F7," (GPT Neo model)"),F7.forEach(t),EZe=i(S),Kn=n(S,"LI",{});var T7=s(Kn);wre=n(T7,"STRONG",{});var jGr=s(wre);CZe=r(jGr,"gptj"),jGr.forEach(t),wZe=r(T7," \u2014 "),nR=n(T7,"A",{href:!0});var DGr=s(nR);AZe=r(DGr,"GPT2Tokenizer"),DGr.forEach(t),yZe=r(T7," or "),sR=n(T7,"A",{href:!0});var GGr=s(sR);LZe=r(GGr,"GPT2TokenizerFast"),GGr.forEach(t),xZe=r(T7," (GPT-J model)"),T7.forEach(t),$Ze=i(S),Zn=n(S,"LI",{});var M7=s(Zn);Are=n(M7,"STRONG",{});var OGr=s(Are);kZe=r(OGr,"herbert"),OGr.forEach(t),SZe=r(M7," \u2014 "),lR=n(M7,"A",{href:!0});var VGr=s(lR);RZe=r(VGr,"HerbertTokenizer"),VGr.forEach(t),BZe=r(M7," or "),iR=n(M7,"A",{href:!0});var XGr=s(iR);PZe=r(XGr,"HerbertTokenizerFast"),XGr.forEach(t),IZe=r(M7," (HerBERT model)"),M7.forEach(t),qZe=i(S),yg=n(S,"LI",{});var sCe=s(yg);yre=n(sCe,"STRONG",{});var zGr=s(yre);NZe=r(zGr,"hubert"),zGr.forEach(t),jZe=r(sCe," \u2014 "),dR=n(sCe,"A",{href:!0});var QGr=s(dR);DZe=r(QGr,"Wav2Vec2CTCTokenizer"),QGr.forEach(t),GZe=r(sCe," (Hubert model)"),sCe.forEach(t),OZe=i(S),es=n(S,"LI",{});var E7=s(es);Lre=n(E7,"STRONG",{});var WGr=s(Lre);VZe=r(WGr,"ibert"),WGr.forEach(t),XZe=r(E7," \u2014 "),cR=n(E7,"A",{href:!0});var HGr=s(cR);zZe=r(HGr,"RobertaTokenizer"),HGr.forEach(t),QZe=r(E7," or "),fR=n(E7,"A",{href:!0});var UGr=s(fR);WZe=r(UGr,"RobertaTokenizerFast"),UGr.forEach(t),HZe=r(E7," (I-BERT model)"),E7.forEach(t),UZe=i(S),os=n(S,"LI",{});var C7=s(os);xre=n(C7,"STRONG",{});var JGr=s(xre);JZe=r(JGr,"layoutlm"),JGr.forEach(t),YZe=r(C7," \u2014 "),mR=n(C7,"A",{href:!0});var YGr=s(mR);KZe=r(YGr,"LayoutLMTokenizer"),YGr.forEach(t),ZZe=r(C7," or "),gR=n(C7,"A",{href:!0});var KGr=s(gR);eeo=r(KGr,"LayoutLMTokenizerFast"),KGr.forEach(t),oeo=r(C7," (LayoutLM model)"),C7.forEach(t),reo=i(S),rs=n(S,"LI",{});var w7=s(rs);$re=n(w7,"STRONG",{});var ZGr=s($re);teo=r(ZGr,"layoutlmv2"),ZGr.forEach(t),aeo=r(w7," \u2014 "),hR=n(w7,"A",{href:!0});var eOr=s(hR);neo=r(eOr,"LayoutLMv2Tokenizer"),eOr.forEach(t),seo=r(w7," or "),pR=n(w7,"A",{href:!0});var oOr=s(pR);leo=r(oOr,"LayoutLMv2TokenizerFast"),oOr.forEach(t),ieo=r(w7," (LayoutLMv2 model)"),w7.forEach(t),deo=i(S),ts=n(S,"LI",{});var A7=s(ts);kre=n(A7,"STRONG",{});var rOr=s(kre);ceo=r(rOr,"layoutxlm"),rOr.forEach(t),feo=r(A7," \u2014 "),uR=n(A7,"A",{href:!0});var tOr=s(uR);meo=r(tOr,"LayoutXLMTokenizer"),tOr.forEach(t),geo=r(A7," or "),_R=n(A7,"A",{href:!0});var aOr=s(_R);heo=r(aOr,"LayoutXLMTokenizerFast"),aOr.forEach(t),peo=r(A7," (LayoutXLM model)"),A7.forEach(t),ueo=i(S),as=n(S,"LI",{});var y7=s(as);Sre=n(y7,"STRONG",{});var nOr=s(Sre);_eo=r(nOr,"led"),nOr.forEach(t),beo=r(y7," \u2014 "),bR=n(y7,"A",{href:!0});var sOr=s(bR);veo=r(sOr,"LEDTokenizer"),sOr.forEach(t),Feo=r(y7," or "),vR=n(y7,"A",{href:!0});var lOr=s(vR);Teo=r(lOr,"LEDTokenizerFast"),lOr.forEach(t),Meo=r(y7," (LED model)"),y7.forEach(t),Eeo=i(S),ns=n(S,"LI",{});var L7=s(ns);Rre=n(L7,"STRONG",{});var iOr=s(Rre);Ceo=r(iOr,"longformer"),iOr.forEach(t),weo=r(L7," \u2014 "),FR=n(L7,"A",{href:!0});var dOr=s(FR);Aeo=r(dOr,"LongformerTokenizer"),dOr.forEach(t),yeo=r(L7," or "),TR=n(L7,"A",{href:!0});var cOr=s(TR);Leo=r(cOr,"LongformerTokenizerFast"),cOr.forEach(t),xeo=r(L7," (Longformer model)"),L7.forEach(t),$eo=i(S),Lg=n(S,"LI",{});var lCe=s(Lg);Bre=n(lCe,"STRONG",{});var fOr=s(Bre);keo=r(fOr,"luke"),fOr.forEach(t),Seo=r(lCe," \u2014 "),MR=n(lCe,"A",{href:!0});var mOr=s(MR);Reo=r(mOr,"LukeTokenizer"),mOr.forEach(t),Beo=r(lCe," (LUKE model)"),lCe.forEach(t),Peo=i(S),ss=n(S,"LI",{});var x7=s(ss);Pre=n(x7,"STRONG",{});var gOr=s(Pre);Ieo=r(gOr,"lxmert"),gOr.forEach(t),qeo=r(x7," \u2014 "),ER=n(x7,"A",{href:!0});var hOr=s(ER);Neo=r(hOr,"LxmertTokenizer"),hOr.forEach(t),jeo=r(x7," or "),CR=n(x7,"A",{href:!0});var pOr=s(CR);Deo=r(pOr,"LxmertTokenizerFast"),pOr.forEach(t),Geo=r(x7," (LXMERT model)"),x7.forEach(t),Oeo=i(S),xg=n(S,"LI",{});var iCe=s(xg);Ire=n(iCe,"STRONG",{});var uOr=s(Ire);Veo=r(uOr,"m2m_100"),uOr.forEach(t),Xeo=r(iCe," \u2014 "),wR=n(iCe,"A",{href:!0});var _Or=s(wR);zeo=r(_Or,"M2M100Tokenizer"),_Or.forEach(t),Qeo=r(iCe," (M2M100 model)"),iCe.forEach(t),Weo=i(S),$g=n(S,"LI",{});var dCe=s($g);qre=n(dCe,"STRONG",{});var bOr=s(qre);Heo=r(bOr,"marian"),bOr.forEach(t),Ueo=r(dCe," \u2014 "),AR=n(dCe,"A",{href:!0});var vOr=s(AR);Jeo=r(vOr,"MarianTokenizer"),vOr.forEach(t),Yeo=r(dCe," (Marian model)"),dCe.forEach(t),Keo=i(S),ls=n(S,"LI",{});var $7=s(ls);Nre=n($7,"STRONG",{});var FOr=s(Nre);Zeo=r(FOr,"mbart"),FOr.forEach(t),eoo=r($7," \u2014 "),yR=n($7,"A",{href:!0});var TOr=s(yR);ooo=r(TOr,"MBartTokenizer"),TOr.forEach(t),roo=r($7," or "),LR=n($7,"A",{href:!0});var MOr=s(LR);too=r(MOr,"MBartTokenizerFast"),MOr.forEach(t),aoo=r($7," (mBART model)"),$7.forEach(t),noo=i(S),is=n(S,"LI",{});var k7=s(is);jre=n(k7,"STRONG",{});var EOr=s(jre);soo=r(EOr,"mbart50"),EOr.forEach(t),loo=r(k7," \u2014 "),xR=n(k7,"A",{href:!0});var COr=s(xR);ioo=r(COr,"MBart50Tokenizer"),COr.forEach(t),doo=r(k7," or "),$R=n(k7,"A",{href:!0});var wOr=s($R);coo=r(wOr,"MBart50TokenizerFast"),wOr.forEach(t),foo=r(k7," (mBART-50 model)"),k7.forEach(t),moo=i(S),ds=n(S,"LI",{});var S7=s(ds);Dre=n(S7,"STRONG",{});var AOr=s(Dre);goo=r(AOr,"megatron-bert"),AOr.forEach(t),hoo=r(S7," \u2014 "),kR=n(S7,"A",{href:!0});var yOr=s(kR);poo=r(yOr,"BertTokenizer"),yOr.forEach(t),uoo=r(S7," or "),SR=n(S7,"A",{href:!0});var LOr=s(SR);_oo=r(LOr,"BertTokenizerFast"),LOr.forEach(t),boo=r(S7," (MegatronBert model)"),S7.forEach(t),voo=i(S),kg=n(S,"LI",{});var cCe=s(kg);Gre=n(cCe,"STRONG",{});var xOr=s(Gre);Foo=r(xOr,"mluke"),xOr.forEach(t),Too=r(cCe," \u2014 "),RR=n(cCe,"A",{href:!0});var $Or=s(RR);Moo=r($Or,"MLukeTokenizer"),$Or.forEach(t),Eoo=r(cCe," (mLUKE model)"),cCe.forEach(t),Coo=i(S),cs=n(S,"LI",{});var R7=s(cs);Ore=n(R7,"STRONG",{});var kOr=s(Ore);woo=r(kOr,"mobilebert"),kOr.forEach(t),Aoo=r(R7," \u2014 "),BR=n(R7,"A",{href:!0});var SOr=s(BR);yoo=r(SOr,"MobileBertTokenizer"),SOr.forEach(t),Loo=r(R7," or "),PR=n(R7,"A",{href:!0});var ROr=s(PR);xoo=r(ROr,"MobileBertTokenizerFast"),ROr.forEach(t),$oo=r(R7," (MobileBERT model)"),R7.forEach(t),koo=i(S),fs=n(S,"LI",{});var B7=s(fs);Vre=n(B7,"STRONG",{});var BOr=s(Vre);Soo=r(BOr,"mpnet"),BOr.forEach(t),Roo=r(B7," \u2014 "),IR=n(B7,"A",{href:!0});var POr=s(IR);Boo=r(POr,"MPNetTokenizer"),POr.forEach(t),Poo=r(B7," or "),qR=n(B7,"A",{href:!0});var IOr=s(qR);Ioo=r(IOr,"MPNetTokenizerFast"),IOr.forEach(t),qoo=r(B7," (MPNet model)"),B7.forEach(t),Noo=i(S),ms=n(S,"LI",{});var P7=s(ms);Xre=n(P7,"STRONG",{});var qOr=s(Xre);joo=r(qOr,"mt5"),qOr.forEach(t),Doo=r(P7," \u2014 "),NR=n(P7,"A",{href:!0});var NOr=s(NR);Goo=r(NOr,"MT5Tokenizer"),NOr.forEach(t),Ooo=r(P7," or "),jR=n(P7,"A",{href:!0});var jOr=s(jR);Voo=r(jOr,"MT5TokenizerFast"),jOr.forEach(t),Xoo=r(P7," (mT5 model)"),P7.forEach(t),zoo=i(S),gs=n(S,"LI",{});var I7=s(gs);zre=n(I7,"STRONG",{});var DOr=s(zre);Qoo=r(DOr,"nystromformer"),DOr.forEach(t),Woo=r(I7," \u2014 "),DR=n(I7,"A",{href:!0});var GOr=s(DR);Hoo=r(GOr,"AlbertTokenizer"),GOr.forEach(t),Uoo=r(I7," or "),GR=n(I7,"A",{href:!0});var OOr=s(GR);Joo=r(OOr,"AlbertTokenizerFast"),OOr.forEach(t),Yoo=r(I7," (Nystromformer model)"),I7.forEach(t),Koo=i(S),hs=n(S,"LI",{});var q7=s(hs);Qre=n(q7,"STRONG",{});var VOr=s(Qre);Zoo=r(VOr,"openai-gpt"),VOr.forEach(t),ero=r(q7," \u2014 "),OR=n(q7,"A",{href:!0});var XOr=s(OR);oro=r(XOr,"OpenAIGPTTokenizer"),XOr.forEach(t),rro=r(q7," or "),VR=n(q7,"A",{href:!0});var zOr=s(VR);tro=r(zOr,"OpenAIGPTTokenizerFast"),zOr.forEach(t),aro=r(q7," (OpenAI GPT model)"),q7.forEach(t),nro=i(S),ps=n(S,"LI",{});var N7=s(ps);Wre=n(N7,"STRONG",{});var QOr=s(Wre);sro=r(QOr,"pegasus"),QOr.forEach(t),lro=r(N7," \u2014 "),XR=n(N7,"A",{href:!0});var WOr=s(XR);iro=r(WOr,"PegasusTokenizer"),WOr.forEach(t),dro=r(N7," or "),zR=n(N7,"A",{href:!0});var HOr=s(zR);cro=r(HOr,"PegasusTokenizerFast"),HOr.forEach(t),fro=r(N7," (Pegasus model)"),N7.forEach(t),mro=i(S),Sg=n(S,"LI",{});var fCe=s(Sg);Hre=n(fCe,"STRONG",{});var UOr=s(Hre);gro=r(UOr,"perceiver"),UOr.forEach(t),hro=r(fCe," \u2014 "),QR=n(fCe,"A",{href:!0});var JOr=s(QR);pro=r(JOr,"PerceiverTokenizer"),JOr.forEach(t),uro=r(fCe," (Perceiver model)"),fCe.forEach(t),_ro=i(S),Rg=n(S,"LI",{});var mCe=s(Rg);Ure=n(mCe,"STRONG",{});var YOr=s(Ure);bro=r(YOr,"phobert"),YOr.forEach(t),vro=r(mCe," \u2014 "),WR=n(mCe,"A",{href:!0});var KOr=s(WR);Fro=r(KOr,"PhobertTokenizer"),KOr.forEach(t),Tro=r(mCe," (PhoBERT model)"),mCe.forEach(t),Mro=i(S),Bg=n(S,"LI",{});var gCe=s(Bg);Jre=n(gCe,"STRONG",{});var ZOr=s(Jre);Ero=r(ZOr,"plbart"),ZOr.forEach(t),Cro=r(gCe," \u2014 "),HR=n(gCe,"A",{href:!0});var eVr=s(HR);wro=r(eVr,"PLBartTokenizer"),eVr.forEach(t),Aro=r(gCe," (PLBart model)"),gCe.forEach(t),yro=i(S),Pg=n(S,"LI",{});var hCe=s(Pg);Yre=n(hCe,"STRONG",{});var oVr=s(Yre);Lro=r(oVr,"prophetnet"),oVr.forEach(t),xro=r(hCe," \u2014 "),UR=n(hCe,"A",{href:!0});var rVr=s(UR);$ro=r(rVr,"ProphetNetTokenizer"),rVr.forEach(t),kro=r(hCe," (ProphetNet model)"),hCe.forEach(t),Sro=i(S),us=n(S,"LI",{});var j7=s(us);Kre=n(j7,"STRONG",{});var tVr=s(Kre);Rro=r(tVr,"qdqbert"),tVr.forEach(t),Bro=r(j7," \u2014 "),JR=n(j7,"A",{href:!0});var aVr=s(JR);Pro=r(aVr,"BertTokenizer"),aVr.forEach(t),Iro=r(j7," or "),YR=n(j7,"A",{href:!0});var nVr=s(YR);qro=r(nVr,"BertTokenizerFast"),nVr.forEach(t),Nro=r(j7," (QDQBert model)"),j7.forEach(t),jro=i(S),Ig=n(S,"LI",{});var pCe=s(Ig);Zre=n(pCe,"STRONG",{});var sVr=s(Zre);Dro=r(sVr,"rag"),sVr.forEach(t),Gro=r(pCe," \u2014 "),KR=n(pCe,"A",{href:!0});var lVr=s(KR);Oro=r(lVr,"RagTokenizer"),lVr.forEach(t),Vro=r(pCe," (RAG model)"),pCe.forEach(t),Xro=i(S),_s=n(S,"LI",{});var D7=s(_s);ete=n(D7,"STRONG",{});var iVr=s(ete);zro=r(iVr,"realm"),iVr.forEach(t),Qro=r(D7," \u2014 "),ZR=n(D7,"A",{href:!0});var dVr=s(ZR);Wro=r(dVr,"RealmTokenizer"),dVr.forEach(t),Hro=r(D7," or "),eB=n(D7,"A",{href:!0});var cVr=s(eB);Uro=r(cVr,"RealmTokenizerFast"),cVr.forEach(t),Jro=r(D7," (Realm model)"),D7.forEach(t),Yro=i(S),bs=n(S,"LI",{});var G7=s(bs);ote=n(G7,"STRONG",{});var fVr=s(ote);Kro=r(fVr,"reformer"),fVr.forEach(t),Zro=r(G7," \u2014 "),oB=n(G7,"A",{href:!0});var mVr=s(oB);eto=r(mVr,"ReformerTokenizer"),mVr.forEach(t),oto=r(G7," or "),rB=n(G7,"A",{href:!0});var gVr=s(rB);rto=r(gVr,"ReformerTokenizerFast"),gVr.forEach(t),tto=r(G7," (Reformer model)"),G7.forEach(t),ato=i(S),vs=n(S,"LI",{});var O7=s(vs);rte=n(O7,"STRONG",{});var hVr=s(rte);nto=r(hVr,"rembert"),hVr.forEach(t),sto=r(O7," \u2014 "),tB=n(O7,"A",{href:!0});var pVr=s(tB);lto=r(pVr,"RemBertTokenizer"),pVr.forEach(t),ito=r(O7," or "),aB=n(O7,"A",{href:!0});var uVr=s(aB);dto=r(uVr,"RemBertTokenizerFast"),uVr.forEach(t),cto=r(O7," (RemBERT model)"),O7.forEach(t),fto=i(S),Fs=n(S,"LI",{});var V7=s(Fs);tte=n(V7,"STRONG",{});var _Vr=s(tte);mto=r(_Vr,"retribert"),_Vr.forEach(t),gto=r(V7," \u2014 "),nB=n(V7,"A",{href:!0});var bVr=s(nB);hto=r(bVr,"RetriBertTokenizer"),bVr.forEach(t),pto=r(V7," or "),sB=n(V7,"A",{href:!0});var vVr=s(sB);uto=r(vVr,"RetriBertTokenizerFast"),vVr.forEach(t),_to=r(V7," (RetriBERT model)"),V7.forEach(t),bto=i(S),Ts=n(S,"LI",{});var X7=s(Ts);ate=n(X7,"STRONG",{});var FVr=s(ate);vto=r(FVr,"roberta"),FVr.forEach(t),Fto=r(X7," \u2014 "),lB=n(X7,"A",{href:!0});var TVr=s(lB);Tto=r(TVr,"RobertaTokenizer"),TVr.forEach(t),Mto=r(X7," or "),iB=n(X7,"A",{href:!0});var MVr=s(iB);Eto=r(MVr,"RobertaTokenizerFast"),MVr.forEach(t),Cto=r(X7," (RoBERTa model)"),X7.forEach(t),wto=i(S),Ms=n(S,"LI",{});var z7=s(Ms);nte=n(z7,"STRONG",{});var EVr=s(nte);Ato=r(EVr,"roformer"),EVr.forEach(t),yto=r(z7," \u2014 "),dB=n(z7,"A",{href:!0});var CVr=s(dB);Lto=r(CVr,"RoFormerTokenizer"),CVr.forEach(t),xto=r(z7," or "),cB=n(z7,"A",{href:!0});var wVr=s(cB);$to=r(wVr,"RoFormerTokenizerFast"),wVr.forEach(t),kto=r(z7," (RoFormer model)"),z7.forEach(t),Sto=i(S),qg=n(S,"LI",{});var uCe=s(qg);ste=n(uCe,"STRONG",{});var AVr=s(ste);Rto=r(AVr,"speech_to_text"),AVr.forEach(t),Bto=r(uCe," \u2014 "),fB=n(uCe,"A",{href:!0});var yVr=s(fB);Pto=r(yVr,"Speech2TextTokenizer"),yVr.forEach(t),Ito=r(uCe," (Speech2Text model)"),uCe.forEach(t),qto=i(S),Ng=n(S,"LI",{});var _Ce=s(Ng);lte=n(_Ce,"STRONG",{});var LVr=s(lte);Nto=r(LVr,"speech_to_text_2"),LVr.forEach(t),jto=r(_Ce," \u2014 "),mB=n(_Ce,"A",{href:!0});var xVr=s(mB);Dto=r(xVr,"Speech2Text2Tokenizer"),xVr.forEach(t),Gto=r(_Ce," (Speech2Text2 model)"),_Ce.forEach(t),Oto=i(S),Es=n(S,"LI",{});var Q7=s(Es);ite=n(Q7,"STRONG",{});var $Vr=s(ite);Vto=r($Vr,"splinter"),$Vr.forEach(t),Xto=r(Q7," \u2014 "),gB=n(Q7,"A",{href:!0});var kVr=s(gB);zto=r(kVr,"SplinterTokenizer"),kVr.forEach(t),Qto=r(Q7," or "),hB=n(Q7,"A",{href:!0});var SVr=s(hB);Wto=r(SVr,"SplinterTokenizerFast"),SVr.forEach(t),Hto=r(Q7," (Splinter model)"),Q7.forEach(t),Uto=i(S),Cs=n(S,"LI",{});var W7=s(Cs);dte=n(W7,"STRONG",{});var RVr=s(dte);Jto=r(RVr,"squeezebert"),RVr.forEach(t),Yto=r(W7," \u2014 "),pB=n(W7,"A",{href:!0});var BVr=s(pB);Kto=r(BVr,"SqueezeBertTokenizer"),BVr.forEach(t),Zto=r(W7," or "),uB=n(W7,"A",{href:!0});var PVr=s(uB);eao=r(PVr,"SqueezeBertTokenizerFast"),PVr.forEach(t),oao=r(W7," (SqueezeBERT model)"),W7.forEach(t),rao=i(S),ws=n(S,"LI",{});var H7=s(ws);cte=n(H7,"STRONG",{});var IVr=s(cte);tao=r(IVr,"t5"),IVr.forEach(t),aao=r(H7," \u2014 "),_B=n(H7,"A",{href:!0});var qVr=s(_B);nao=r(qVr,"T5Tokenizer"),qVr.forEach(t),sao=r(H7," or "),bB=n(H7,"A",{href:!0});var NVr=s(bB);lao=r(NVr,"T5TokenizerFast"),NVr.forEach(t),iao=r(H7," (T5 model)"),H7.forEach(t),dao=i(S),jg=n(S,"LI",{});var bCe=s(jg);fte=n(bCe,"STRONG",{});var jVr=s(fte);cao=r(jVr,"tapas"),jVr.forEach(t),fao=r(bCe," \u2014 "),vB=n(bCe,"A",{href:!0});var DVr=s(vB);mao=r(DVr,"TapasTokenizer"),DVr.forEach(t),gao=r(bCe," (TAPAS model)"),bCe.forEach(t),hao=i(S),Dg=n(S,"LI",{});var vCe=s(Dg);mte=n(vCe,"STRONG",{});var GVr=s(mte);pao=r(GVr,"tapex"),GVr.forEach(t),uao=r(vCe," \u2014 "),FB=n(vCe,"A",{href:!0});var OVr=s(FB);_ao=r(OVr,"TapexTokenizer"),OVr.forEach(t),bao=r(vCe," (TAPEX model)"),vCe.forEach(t),vao=i(S),Gg=n(S,"LI",{});var FCe=s(Gg);gte=n(FCe,"STRONG",{});var VVr=s(gte);Fao=r(VVr,"transfo-xl"),VVr.forEach(t),Tao=r(FCe," \u2014 "),TB=n(FCe,"A",{href:!0});var XVr=s(TB);Mao=r(XVr,"TransfoXLTokenizer"),XVr.forEach(t),Eao=r(FCe," (Transformer-XL model)"),FCe.forEach(t),Cao=i(S),As=n(S,"LI",{});var U7=s(As);hte=n(U7,"STRONG",{});var zVr=s(hte);wao=r(zVr,"visual_bert"),zVr.forEach(t),Aao=r(U7," \u2014 "),MB=n(U7,"A",{href:!0});var QVr=s(MB);yao=r(QVr,"BertTokenizer"),QVr.forEach(t),Lao=r(U7," or "),EB=n(U7,"A",{href:!0});var WVr=s(EB);xao=r(WVr,"BertTokenizerFast"),WVr.forEach(t),$ao=r(U7," (VisualBert model)"),U7.forEach(t),kao=i(S),Og=n(S,"LI",{});var TCe=s(Og);pte=n(TCe,"STRONG",{});var HVr=s(pte);Sao=r(HVr,"wav2vec2"),HVr.forEach(t),Rao=r(TCe," \u2014 "),CB=n(TCe,"A",{href:!0});var UVr=s(CB);Bao=r(UVr,"Wav2Vec2CTCTokenizer"),UVr.forEach(t),Pao=r(TCe," (Wav2Vec2 model)"),TCe.forEach(t),Iao=i(S),Vg=n(S,"LI",{});var MCe=s(Vg);ute=n(MCe,"STRONG",{});var JVr=s(ute);qao=r(JVr,"wav2vec2_phoneme"),JVr.forEach(t),Nao=r(MCe," \u2014 "),wB=n(MCe,"A",{href:!0});var YVr=s(wB);jao=r(YVr,"Wav2Vec2PhonemeCTCTokenizer"),YVr.forEach(t),Dao=r(MCe," (Wav2Vec2Phoneme model)"),MCe.forEach(t),Gao=i(S),ys=n(S,"LI",{});var J7=s(ys);_te=n(J7,"STRONG",{});var KVr=s(_te);Oao=r(KVr,"xglm"),KVr.forEach(t),Vao=r(J7," \u2014 "),AB=n(J7,"A",{href:!0});var ZVr=s(AB);Xao=r(ZVr,"XGLMTokenizer"),ZVr.forEach(t),zao=r(J7," or "),yB=n(J7,"A",{href:!0});var eXr=s(yB);Qao=r(eXr,"XGLMTokenizerFast"),eXr.forEach(t),Wao=r(J7," (XGLM model)"),J7.forEach(t),Hao=i(S),Xg=n(S,"LI",{});var ECe=s(Xg);bte=n(ECe,"STRONG",{});var oXr=s(bte);Uao=r(oXr,"xlm"),oXr.forEach(t),Jao=r(ECe," \u2014 "),LB=n(ECe,"A",{href:!0});var rXr=s(LB);Yao=r(rXr,"XLMTokenizer"),rXr.forEach(t),Kao=r(ECe," (XLM model)"),ECe.forEach(t),Zao=i(S),zg=n(S,"LI",{});var CCe=s(zg);vte=n(CCe,"STRONG",{});var tXr=s(vte);eno=r(tXr,"xlm-prophetnet"),tXr.forEach(t),ono=r(CCe," \u2014 "),xB=n(CCe,"A",{href:!0});var aXr=s(xB);rno=r(aXr,"XLMProphetNetTokenizer"),aXr.forEach(t),tno=r(CCe," (XLMProphetNet model)"),CCe.forEach(t),ano=i(S),Ls=n(S,"LI",{});var Y7=s(Ls);Fte=n(Y7,"STRONG",{});var nXr=s(Fte);nno=r(nXr,"xlm-roberta"),nXr.forEach(t),sno=r(Y7," \u2014 "),$B=n(Y7,"A",{href:!0});var sXr=s($B);lno=r(sXr,"XLMRobertaTokenizer"),sXr.forEach(t),ino=r(Y7," or "),kB=n(Y7,"A",{href:!0});var lXr=s(kB);dno=r(lXr,"XLMRobertaTokenizerFast"),lXr.forEach(t),cno=r(Y7," (XLM-RoBERTa model)"),Y7.forEach(t),fno=i(S),xs=n(S,"LI",{});var K7=s(xs);Tte=n(K7,"STRONG",{});var iXr=s(Tte);mno=r(iXr,"xlm-roberta-xl"),iXr.forEach(t),gno=r(K7," \u2014 "),SB=n(K7,"A",{href:!0});var dXr=s(SB);hno=r(dXr,"RobertaTokenizer"),dXr.forEach(t),pno=r(K7," or "),RB=n(K7,"A",{href:!0});var cXr=s(RB);uno=r(cXr,"RobertaTokenizerFast"),cXr.forEach(t),_no=r(K7," (XLM-RoBERTa-XL model)"),K7.forEach(t),bno=i(S),$s=n(S,"LI",{});var Z7=s($s);Mte=n(Z7,"STRONG",{});var fXr=s(Mte);vno=r(fXr,"xlnet"),fXr.forEach(t),Fno=r(Z7," \u2014 "),BB=n(Z7,"A",{href:!0});var mXr=s(BB);Tno=r(mXr,"XLNetTokenizer"),mXr.forEach(t),Mno=r(Z7," or "),PB=n(Z7,"A",{href:!0});var gXr=s(PB);Eno=r(gXr,"XLNetTokenizerFast"),gXr.forEach(t),Cno=r(Z7," (XLNet model)"),Z7.forEach(t),wno=i(S),ks=n(S,"LI",{});var e$=s(ks);Ete=n(e$,"STRONG",{});var hXr=s(Ete);Ano=r(hXr,"yoso"),hXr.forEach(t),yno=r(e$," \u2014 "),IB=n(e$,"A",{href:!0});var pXr=s(IB);Lno=r(pXr,"AlbertTokenizer"),pXr.forEach(t),xno=r(e$," or "),qB=n(e$,"A",{href:!0});var uXr=s(qB);$no=r(uXr,"AlbertTokenizerFast"),uXr.forEach(t),kno=r(e$," (YOSO model)"),e$.forEach(t),S.forEach(t),Sno=i(Is),T(Qg.$$.fragment,Is),Is.forEach(t),Rno=i(Ps),Wg=n(Ps,"DIV",{class:!0});var fqe=s(Wg);T(e0.$$.fragment,fqe),Bno=i(fqe),Cte=n(fqe,"P",{});var _Xr=s(Cte);Pno=r(_Xr,"Register a new tokenizer in this mapping."),_Xr.forEach(t),fqe.forEach(t),Ps.forEach(t),mPe=i(f),bi=n(f,"H2",{class:!0});var mqe=s(bi);Hg=n(mqe,"A",{id:!0,class:!0,href:!0});var bXr=s(Hg);wte=n(bXr,"SPAN",{});var vXr=s(wte);T(o0.$$.fragment,vXr),vXr.forEach(t),bXr.forEach(t),Ino=i(mqe),Ate=n(mqe,"SPAN",{});var FXr=s(Ate);qno=r(FXr,"AutoFeatureExtractor"),FXr.forEach(t),mqe.forEach(t),gPe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(r0.$$.fragment,qs),Nno=i(qs),t0=n(qs,"P",{});var gqe=s(t0);jno=r(gqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),NB=n(gqe,"A",{href:!0});var TXr=s(NB);Dno=r(TXr,"AutoFeatureExtractor.from_pretrained()"),TXr.forEach(t),Gno=r(gqe," class method."),gqe.forEach(t),Ono=i(qs),a0=n(qs,"P",{});var hqe=s(a0);Vno=r(hqe,"This class cannot be instantiated directly using "),yte=n(hqe,"CODE",{});var MXr=s(yte);Xno=r(MXr,"__init__()"),MXr.forEach(t),zno=r(hqe," (throws an error)."),hqe.forEach(t),Qno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(n0.$$.fragment,Yt),Wno=i(Yt),Lte=n(Yt,"P",{});var EXr=s(Lte);Hno=r(EXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),EXr.forEach(t),Uno=i(Yt),wa=n(Yt,"P",{});var V3=s(wa);Jno=r(V3,"The feature extractor class to instantiate is selected based on the "),xte=n(V3,"CODE",{});var CXr=s(xte);Yno=r(CXr,"model_type"),CXr.forEach(t),Kno=r(V3,` property of the config object
(either passed as an argument or loaded from `),$te=n(V3,"CODE",{});var wXr=s($te);Zno=r(wXr,"pretrained_model_name_or_path"),wXr.forEach(t),eso=r(V3,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),kte=n(V3,"CODE",{});var AXr=s(kte);oso=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),rso=r(V3,":"),V3.forEach(t),tso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var wCe=s(Ug);Ste=n(wCe,"STRONG",{});var yXr=s(Ste);aso=r(yXr,"beit"),yXr.forEach(t),nso=r(wCe," \u2014 "),jB=n(wCe,"A",{href:!0});var LXr=s(jB);sso=r(LXr,"BeitFeatureExtractor"),LXr.forEach(t),lso=r(wCe," (BEiT model)"),wCe.forEach(t),iso=i(se),Jg=n(se,"LI",{});var ACe=s(Jg);Rte=n(ACe,"STRONG",{});var xXr=s(Rte);dso=r(xXr,"clip"),xXr.forEach(t),cso=r(ACe," \u2014 "),DB=n(ACe,"A",{href:!0});var $Xr=s(DB);fso=r($Xr,"CLIPFeatureExtractor"),$Xr.forEach(t),mso=r(ACe," (CLIP model)"),ACe.forEach(t),gso=i(se),Yg=n(se,"LI",{});var yCe=s(Yg);Bte=n(yCe,"STRONG",{});var kXr=s(Bte);hso=r(kXr,"convnext"),kXr.forEach(t),pso=r(yCe," \u2014 "),GB=n(yCe,"A",{href:!0});var SXr=s(GB);uso=r(SXr,"ConvNextFeatureExtractor"),SXr.forEach(t),_so=r(yCe," (ConvNext model)"),yCe.forEach(t),bso=i(se),Kg=n(se,"LI",{});var LCe=s(Kg);Pte=n(LCe,"STRONG",{});var RXr=s(Pte);vso=r(RXr,"data2vec-audio"),RXr.forEach(t),Fso=r(LCe," \u2014 "),OB=n(LCe,"A",{href:!0});var BXr=s(OB);Tso=r(BXr,"Wav2Vec2FeatureExtractor"),BXr.forEach(t),Mso=r(LCe," (Data2VecAudio model)"),LCe.forEach(t),Eso=i(se),Zg=n(se,"LI",{});var xCe=s(Zg);Ite=n(xCe,"STRONG",{});var PXr=s(Ite);Cso=r(PXr,"data2vec-vision"),PXr.forEach(t),wso=r(xCe," \u2014 "),VB=n(xCe,"A",{href:!0});var IXr=s(VB);Aso=r(IXr,"BeitFeatureExtractor"),IXr.forEach(t),yso=r(xCe," (Data2VecVision model)"),xCe.forEach(t),Lso=i(se),eh=n(se,"LI",{});var $Ce=s(eh);qte=n($Ce,"STRONG",{});var qXr=s(qte);xso=r(qXr,"deit"),qXr.forEach(t),$so=r($Ce," \u2014 "),XB=n($Ce,"A",{href:!0});var NXr=s(XB);kso=r(NXr,"DeiTFeatureExtractor"),NXr.forEach(t),Sso=r($Ce," (DeiT model)"),$Ce.forEach(t),Rso=i(se),oh=n(se,"LI",{});var kCe=s(oh);Nte=n(kCe,"STRONG",{});var jXr=s(Nte);Bso=r(jXr,"detr"),jXr.forEach(t),Pso=r(kCe," \u2014 "),zB=n(kCe,"A",{href:!0});var DXr=s(zB);Iso=r(DXr,"DetrFeatureExtractor"),DXr.forEach(t),qso=r(kCe," (DETR model)"),kCe.forEach(t),Nso=i(se),rh=n(se,"LI",{});var SCe=s(rh);jte=n(SCe,"STRONG",{});var GXr=s(jte);jso=r(GXr,"dpt"),GXr.forEach(t),Dso=r(SCe," \u2014 "),QB=n(SCe,"A",{href:!0});var OXr=s(QB);Gso=r(OXr,"DPTFeatureExtractor"),OXr.forEach(t),Oso=r(SCe," (DPT model)"),SCe.forEach(t),Vso=i(se),th=n(se,"LI",{});var RCe=s(th);Dte=n(RCe,"STRONG",{});var VXr=s(Dte);Xso=r(VXr,"glpn"),VXr.forEach(t),zso=r(RCe," \u2014 "),WB=n(RCe,"A",{href:!0});var XXr=s(WB);Qso=r(XXr,"GLPNFeatureExtractor"),XXr.forEach(t),Wso=r(RCe," (GLPN model)"),RCe.forEach(t),Hso=i(se),ah=n(se,"LI",{});var BCe=s(ah);Gte=n(BCe,"STRONG",{});var zXr=s(Gte);Uso=r(zXr,"hubert"),zXr.forEach(t),Jso=r(BCe," \u2014 "),HB=n(BCe,"A",{href:!0});var QXr=s(HB);Yso=r(QXr,"Wav2Vec2FeatureExtractor"),QXr.forEach(t),Kso=r(BCe," (Hubert model)"),BCe.forEach(t),Zso=i(se),nh=n(se,"LI",{});var PCe=s(nh);Ote=n(PCe,"STRONG",{});var WXr=s(Ote);elo=r(WXr,"layoutlmv2"),WXr.forEach(t),olo=r(PCe," \u2014 "),UB=n(PCe,"A",{href:!0});var HXr=s(UB);rlo=r(HXr,"LayoutLMv2FeatureExtractor"),HXr.forEach(t),tlo=r(PCe," (LayoutLMv2 model)"),PCe.forEach(t),alo=i(se),sh=n(se,"LI",{});var ICe=s(sh);Vte=n(ICe,"STRONG",{});var UXr=s(Vte);nlo=r(UXr,"maskformer"),UXr.forEach(t),slo=r(ICe," \u2014 "),JB=n(ICe,"A",{href:!0});var JXr=s(JB);llo=r(JXr,"MaskFormerFeatureExtractor"),JXr.forEach(t),ilo=r(ICe," (MaskFormer model)"),ICe.forEach(t),dlo=i(se),lh=n(se,"LI",{});var qCe=s(lh);Xte=n(qCe,"STRONG",{});var YXr=s(Xte);clo=r(YXr,"perceiver"),YXr.forEach(t),flo=r(qCe," \u2014 "),YB=n(qCe,"A",{href:!0});var KXr=s(YB);mlo=r(KXr,"PerceiverFeatureExtractor"),KXr.forEach(t),glo=r(qCe," (Perceiver model)"),qCe.forEach(t),hlo=i(se),ih=n(se,"LI",{});var NCe=s(ih);zte=n(NCe,"STRONG",{});var ZXr=s(zte);plo=r(ZXr,"poolformer"),ZXr.forEach(t),ulo=r(NCe," \u2014 "),KB=n(NCe,"A",{href:!0});var ezr=s(KB);_lo=r(ezr,"PoolFormerFeatureExtractor"),ezr.forEach(t),blo=r(NCe," (PoolFormer model)"),NCe.forEach(t),vlo=i(se),dh=n(se,"LI",{});var jCe=s(dh);Qte=n(jCe,"STRONG",{});var ozr=s(Qte);Flo=r(ozr,"regnet"),ozr.forEach(t),Tlo=r(jCe," \u2014 "),ZB=n(jCe,"A",{href:!0});var rzr=s(ZB);Mlo=r(rzr,"ConvNextFeatureExtractor"),rzr.forEach(t),Elo=r(jCe," (RegNet model)"),jCe.forEach(t),Clo=i(se),ch=n(se,"LI",{});var DCe=s(ch);Wte=n(DCe,"STRONG",{});var tzr=s(Wte);wlo=r(tzr,"resnet"),tzr.forEach(t),Alo=r(DCe," \u2014 "),eP=n(DCe,"A",{href:!0});var azr=s(eP);ylo=r(azr,"ConvNextFeatureExtractor"),azr.forEach(t),Llo=r(DCe," (ResNet model)"),DCe.forEach(t),xlo=i(se),fh=n(se,"LI",{});var GCe=s(fh);Hte=n(GCe,"STRONG",{});var nzr=s(Hte);$lo=r(nzr,"segformer"),nzr.forEach(t),klo=r(GCe," \u2014 "),oP=n(GCe,"A",{href:!0});var szr=s(oP);Slo=r(szr,"SegformerFeatureExtractor"),szr.forEach(t),Rlo=r(GCe," (SegFormer model)"),GCe.forEach(t),Blo=i(se),mh=n(se,"LI",{});var OCe=s(mh);Ute=n(OCe,"STRONG",{});var lzr=s(Ute);Plo=r(lzr,"speech_to_text"),lzr.forEach(t),Ilo=r(OCe," \u2014 "),rP=n(OCe,"A",{href:!0});var izr=s(rP);qlo=r(izr,"Speech2TextFeatureExtractor"),izr.forEach(t),Nlo=r(OCe," (Speech2Text model)"),OCe.forEach(t),jlo=i(se),gh=n(se,"LI",{});var VCe=s(gh);Jte=n(VCe,"STRONG",{});var dzr=s(Jte);Dlo=r(dzr,"swin"),dzr.forEach(t),Glo=r(VCe," \u2014 "),tP=n(VCe,"A",{href:!0});var czr=s(tP);Olo=r(czr,"ViTFeatureExtractor"),czr.forEach(t),Vlo=r(VCe," (Swin model)"),VCe.forEach(t),Xlo=i(se),hh=n(se,"LI",{});var XCe=s(hh);Yte=n(XCe,"STRONG",{});var fzr=s(Yte);zlo=r(fzr,"van"),fzr.forEach(t),Qlo=r(XCe," \u2014 "),aP=n(XCe,"A",{href:!0});var mzr=s(aP);Wlo=r(mzr,"ConvNextFeatureExtractor"),mzr.forEach(t),Hlo=r(XCe," (VAN model)"),XCe.forEach(t),Ulo=i(se),ph=n(se,"LI",{});var zCe=s(ph);Kte=n(zCe,"STRONG",{});var gzr=s(Kte);Jlo=r(gzr,"vit"),gzr.forEach(t),Ylo=r(zCe," \u2014 "),nP=n(zCe,"A",{href:!0});var hzr=s(nP);Klo=r(hzr,"ViTFeatureExtractor"),hzr.forEach(t),Zlo=r(zCe," (ViT model)"),zCe.forEach(t),eio=i(se),uh=n(se,"LI",{});var QCe=s(uh);Zte=n(QCe,"STRONG",{});var pzr=s(Zte);oio=r(pzr,"vit_mae"),pzr.forEach(t),rio=r(QCe," \u2014 "),sP=n(QCe,"A",{href:!0});var uzr=s(sP);tio=r(uzr,"ViTFeatureExtractor"),uzr.forEach(t),aio=r(QCe," (ViTMAE model)"),QCe.forEach(t),nio=i(se),_h=n(se,"LI",{});var WCe=s(_h);eae=n(WCe,"STRONG",{});var _zr=s(eae);sio=r(_zr,"wav2vec2"),_zr.forEach(t),lio=r(WCe," \u2014 "),lP=n(WCe,"A",{href:!0});var bzr=s(lP);iio=r(bzr,"Wav2Vec2FeatureExtractor"),bzr.forEach(t),dio=r(WCe," (Wav2Vec2 model)"),WCe.forEach(t),cio=i(se),bh=n(se,"LI",{});var HCe=s(bh);oae=n(HCe,"STRONG",{});var vzr=s(oae);fio=r(vzr,"yolos"),vzr.forEach(t),mio=r(HCe," \u2014 "),iP=n(HCe,"A",{href:!0});var Fzr=s(iP);gio=r(Fzr,"YolosFeatureExtractor"),Fzr.forEach(t),hio=r(HCe," (YOLOS model)"),HCe.forEach(t),se.forEach(t),pio=i(Yt),T(vh.$$.fragment,Yt),uio=i(Yt),T(Fh.$$.fragment,Yt),Yt.forEach(t),_io=i(qs),Th=n(qs,"DIV",{class:!0});var pqe=s(Th);T(s0.$$.fragment,pqe),bio=i(pqe),rae=n(pqe,"P",{});var Tzr=s(rae);vio=r(Tzr,"Register a new feature extractor for this class."),Tzr.forEach(t),pqe.forEach(t),qs.forEach(t),hPe=i(f),vi=n(f,"H2",{class:!0});var uqe=s(vi);Mh=n(uqe,"A",{id:!0,class:!0,href:!0});var Mzr=s(Mh);tae=n(Mzr,"SPAN",{});var Ezr=s(tae);T(l0.$$.fragment,Ezr),Ezr.forEach(t),Mzr.forEach(t),Fio=i(uqe),aae=n(uqe,"SPAN",{});var Czr=s(aae);Tio=r(Czr,"AutoProcessor"),Czr.forEach(t),uqe.forEach(t),pPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(i0.$$.fragment,Ns),Mio=i(Ns),d0=n(Ns,"P",{});var _qe=s(d0);Eio=r(_qe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),dP=n(_qe,"A",{href:!0});var wzr=s(dP);Cio=r(wzr,"AutoProcessor.from_pretrained()"),wzr.forEach(t),wio=r(_qe," class method."),_qe.forEach(t),Aio=i(Ns),c0=n(Ns,"P",{});var bqe=s(c0);yio=r(bqe,"This class cannot be instantiated directly using "),nae=n(bqe,"CODE",{});var Azr=s(nae);Lio=r(Azr,"__init__()"),Azr.forEach(t),xio=r(bqe," (throws an error)."),bqe.forEach(t),$io=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(f0.$$.fragment,Kt),kio=i(Kt),sae=n(Kt,"P",{});var yzr=s(sae);Sio=r(yzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),yzr.forEach(t),Rio=i(Kt),Fi=n(Kt,"P",{});var OY=s(Fi);Bio=r(OY,"The processor class to instantiate is selected based on the "),lae=n(OY,"CODE",{});var Lzr=s(lae);Pio=r(Lzr,"model_type"),Lzr.forEach(t),Iio=r(OY,` property of the config object (either
passed as an argument or loaded from `),iae=n(OY,"CODE",{});var xzr=s(iae);qio=r(xzr,"pretrained_model_name_or_path"),xzr.forEach(t),Nio=r(OY," if possible):"),OY.forEach(t),jio=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Eh=n(Fe,"LI",{});var UCe=s(Eh);dae=n(UCe,"STRONG",{});var $zr=s(dae);Dio=r($zr,"clip"),$zr.forEach(t),Gio=r(UCe," \u2014 "),cP=n(UCe,"A",{href:!0});var kzr=s(cP);Oio=r(kzr,"CLIPProcessor"),kzr.forEach(t),Vio=r(UCe," (CLIP model)"),UCe.forEach(t),Xio=i(Fe),Ch=n(Fe,"LI",{});var JCe=s(Ch);cae=n(JCe,"STRONG",{});var Szr=s(cae);zio=r(Szr,"layoutlmv2"),Szr.forEach(t),Qio=r(JCe," \u2014 "),fP=n(JCe,"A",{href:!0});var Rzr=s(fP);Wio=r(Rzr,"LayoutLMv2Processor"),Rzr.forEach(t),Hio=r(JCe," (LayoutLMv2 model)"),JCe.forEach(t),Uio=i(Fe),wh=n(Fe,"LI",{});var YCe=s(wh);fae=n(YCe,"STRONG",{});var Bzr=s(fae);Jio=r(Bzr,"layoutxlm"),Bzr.forEach(t),Yio=r(YCe," \u2014 "),mP=n(YCe,"A",{href:!0});var Pzr=s(mP);Kio=r(Pzr,"LayoutXLMProcessor"),Pzr.forEach(t),Zio=r(YCe," (LayoutXLM model)"),YCe.forEach(t),edo=i(Fe),Ah=n(Fe,"LI",{});var KCe=s(Ah);mae=n(KCe,"STRONG",{});var Izr=s(mae);odo=r(Izr,"sew"),Izr.forEach(t),rdo=r(KCe," \u2014 "),gP=n(KCe,"A",{href:!0});var qzr=s(gP);tdo=r(qzr,"Wav2Vec2Processor"),qzr.forEach(t),ado=r(KCe," (SEW model)"),KCe.forEach(t),ndo=i(Fe),yh=n(Fe,"LI",{});var ZCe=s(yh);gae=n(ZCe,"STRONG",{});var Nzr=s(gae);sdo=r(Nzr,"sew-d"),Nzr.forEach(t),ldo=r(ZCe," \u2014 "),hP=n(ZCe,"A",{href:!0});var jzr=s(hP);ido=r(jzr,"Wav2Vec2Processor"),jzr.forEach(t),ddo=r(ZCe," (SEW-D model)"),ZCe.forEach(t),cdo=i(Fe),Lh=n(Fe,"LI",{});var e3e=s(Lh);hae=n(e3e,"STRONG",{});var Dzr=s(hae);fdo=r(Dzr,"speech_to_text"),Dzr.forEach(t),mdo=r(e3e," \u2014 "),pP=n(e3e,"A",{href:!0});var Gzr=s(pP);gdo=r(Gzr,"Speech2TextProcessor"),Gzr.forEach(t),hdo=r(e3e," (Speech2Text model)"),e3e.forEach(t),pdo=i(Fe),xh=n(Fe,"LI",{});var o3e=s(xh);pae=n(o3e,"STRONG",{});var Ozr=s(pae);udo=r(Ozr,"speech_to_text_2"),Ozr.forEach(t),_do=r(o3e," \u2014 "),uP=n(o3e,"A",{href:!0});var Vzr=s(uP);bdo=r(Vzr,"Speech2Text2Processor"),Vzr.forEach(t),vdo=r(o3e," (Speech2Text2 model)"),o3e.forEach(t),Fdo=i(Fe),$h=n(Fe,"LI",{});var r3e=s($h);uae=n(r3e,"STRONG",{});var Xzr=s(uae);Tdo=r(Xzr,"trocr"),Xzr.forEach(t),Mdo=r(r3e," \u2014 "),_P=n(r3e,"A",{href:!0});var zzr=s(_P);Edo=r(zzr,"TrOCRProcessor"),zzr.forEach(t),Cdo=r(r3e," (TrOCR model)"),r3e.forEach(t),wdo=i(Fe),kh=n(Fe,"LI",{});var t3e=s(kh);_ae=n(t3e,"STRONG",{});var Qzr=s(_ae);Ado=r(Qzr,"unispeech"),Qzr.forEach(t),ydo=r(t3e," \u2014 "),bP=n(t3e,"A",{href:!0});var Wzr=s(bP);Ldo=r(Wzr,"Wav2Vec2Processor"),Wzr.forEach(t),xdo=r(t3e," (UniSpeech model)"),t3e.forEach(t),$do=i(Fe),Sh=n(Fe,"LI",{});var a3e=s(Sh);bae=n(a3e,"STRONG",{});var Hzr=s(bae);kdo=r(Hzr,"unispeech-sat"),Hzr.forEach(t),Sdo=r(a3e," \u2014 "),vP=n(a3e,"A",{href:!0});var Uzr=s(vP);Rdo=r(Uzr,"Wav2Vec2Processor"),Uzr.forEach(t),Bdo=r(a3e," (UniSpeechSat model)"),a3e.forEach(t),Pdo=i(Fe),Rh=n(Fe,"LI",{});var n3e=s(Rh);vae=n(n3e,"STRONG",{});var Jzr=s(vae);Ido=r(Jzr,"vilt"),Jzr.forEach(t),qdo=r(n3e," \u2014 "),FP=n(n3e,"A",{href:!0});var Yzr=s(FP);Ndo=r(Yzr,"ViltProcessor"),Yzr.forEach(t),jdo=r(n3e," (ViLT model)"),n3e.forEach(t),Ddo=i(Fe),Bh=n(Fe,"LI",{});var s3e=s(Bh);Fae=n(s3e,"STRONG",{});var Kzr=s(Fae);Gdo=r(Kzr,"vision-text-dual-encoder"),Kzr.forEach(t),Odo=r(s3e," \u2014 "),TP=n(s3e,"A",{href:!0});var Zzr=s(TP);Vdo=r(Zzr,"VisionTextDualEncoderProcessor"),Zzr.forEach(t),Xdo=r(s3e," (VisionTextDualEncoder model)"),s3e.forEach(t),zdo=i(Fe),Ph=n(Fe,"LI",{});var l3e=s(Ph);Tae=n(l3e,"STRONG",{});var eQr=s(Tae);Qdo=r(eQr,"wav2vec2"),eQr.forEach(t),Wdo=r(l3e," \u2014 "),MP=n(l3e,"A",{href:!0});var oQr=s(MP);Hdo=r(oQr,"Wav2Vec2Processor"),oQr.forEach(t),Udo=r(l3e," (Wav2Vec2 model)"),l3e.forEach(t),Jdo=i(Fe),Ih=n(Fe,"LI",{});var i3e=s(Ih);Mae=n(i3e,"STRONG",{});var rQr=s(Mae);Ydo=r(rQr,"wavlm"),rQr.forEach(t),Kdo=r(i3e," \u2014 "),EP=n(i3e,"A",{href:!0});var tQr=s(EP);Zdo=r(tQr,"Wav2Vec2Processor"),tQr.forEach(t),eco=r(i3e," (WavLM model)"),i3e.forEach(t),Fe.forEach(t),oco=i(Kt),T(qh.$$.fragment,Kt),rco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),tco=i(Ns),jh=n(Ns,"DIV",{class:!0});var vqe=s(jh);T(m0.$$.fragment,vqe),aco=i(vqe),Eae=n(vqe,"P",{});var aQr=s(Eae);nco=r(aQr,"Register a new processor for this class."),aQr.forEach(t),vqe.forEach(t),Ns.forEach(t),uPe=i(f),Ti=n(f,"H2",{class:!0});var Fqe=s(Ti);Dh=n(Fqe,"A",{id:!0,class:!0,href:!0});var nQr=s(Dh);Cae=n(nQr,"SPAN",{});var sQr=s(Cae);T(g0.$$.fragment,sQr),sQr.forEach(t),nQr.forEach(t),sco=i(Fqe),wae=n(Fqe,"SPAN",{});var lQr=s(wae);lco=r(lQr,"AutoModel"),lQr.forEach(t),Fqe.forEach(t),_Pe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(h0.$$.fragment,js),ico=i(js),Mi=n(js,"P",{});var VY=s(Mi);dco=r(VY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CP=n(VY,"A",{href:!0});var iQr=s(CP);cco=r(iQr,"from_pretrained()"),iQr.forEach(t),fco=r(VY," class method or the "),wP=n(VY,"A",{href:!0});var dQr=s(wP);mco=r(dQr,"from_config()"),dQr.forEach(t),gco=r(VY,` class
method.`),VY.forEach(t),hco=i(js),p0=n(js,"P",{});var Tqe=s(p0);pco=r(Tqe,"This class cannot be instantiated directly using "),Aae=n(Tqe,"CODE",{});var cQr=s(Aae);uco=r(cQr,"__init__()"),cQr.forEach(t),_co=r(Tqe," (throws an error)."),Tqe.forEach(t),bco=i(js),ot=n(js,"DIV",{class:!0});var X3=s(ot);T(u0.$$.fragment,X3),vco=i(X3),yae=n(X3,"P",{});var fQr=s(yae);Fco=r(fQr,"Instantiates one of the base model classes of the library from a configuration."),fQr.forEach(t),Tco=i(X3),Ei=n(X3,"P",{});var XY=s(Ei);Mco=r(XY,`Note:
Loading a model from its configuration file does `),Lae=n(XY,"STRONG",{});var mQr=s(Lae);Eco=r(mQr,"not"),mQr.forEach(t),Cco=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AP=n(XY,"A",{href:!0});var gQr=s(AP);wco=r(gQr,"from_pretrained()"),gQr.forEach(t),Aco=r(XY," to load the model weights."),XY.forEach(t),yco=i(X3),T(Gh.$$.fragment,X3),X3.forEach(t),Lco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(_0.$$.fragment,Zt),xco=i(Zt),xae=n(Zt,"P",{});var hQr=s(xae);$co=r(hQr,"Instantiate one of the base model classes of the library from a pretrained model."),hQr.forEach(t),kco=i(Zt),Aa=n(Zt,"P",{});var z3=s(Aa);Sco=r(z3,"The model class to instantiate is selected based on the "),$ae=n(z3,"CODE",{});var pQr=s($ae);Rco=r(pQr,"model_type"),pQr.forEach(t),Bco=r(z3,` property of the config object (either
passed as an argument or loaded from `),kae=n(z3,"CODE",{});var uQr=s(kae);Pco=r(uQr,"pretrained_model_name_or_path"),uQr.forEach(t),Ico=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sae=n(z3,"CODE",{});var _Qr=s(Sae);qco=r(_Qr,"pretrained_model_name_or_path"),_Qr.forEach(t),Nco=r(z3,":"),z3.forEach(t),jco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var d3e=s(Oh);Rae=n(d3e,"STRONG",{});var bQr=s(Rae);Dco=r(bQr,"albert"),bQr.forEach(t),Gco=r(d3e," \u2014 "),yP=n(d3e,"A",{href:!0});var vQr=s(yP);Oco=r(vQr,"AlbertModel"),vQr.forEach(t),Vco=r(d3e," (ALBERT model)"),d3e.forEach(t),Xco=i($),Vh=n($,"LI",{});var c3e=s(Vh);Bae=n(c3e,"STRONG",{});var FQr=s(Bae);zco=r(FQr,"bart"),FQr.forEach(t),Qco=r(c3e," \u2014 "),LP=n(c3e,"A",{href:!0});var TQr=s(LP);Wco=r(TQr,"BartModel"),TQr.forEach(t),Hco=r(c3e," (BART model)"),c3e.forEach(t),Uco=i($),Xh=n($,"LI",{});var f3e=s(Xh);Pae=n(f3e,"STRONG",{});var MQr=s(Pae);Jco=r(MQr,"beit"),MQr.forEach(t),Yco=r(f3e," \u2014 "),xP=n(f3e,"A",{href:!0});var EQr=s(xP);Kco=r(EQr,"BeitModel"),EQr.forEach(t),Zco=r(f3e," (BEiT model)"),f3e.forEach(t),efo=i($),zh=n($,"LI",{});var m3e=s(zh);Iae=n(m3e,"STRONG",{});var CQr=s(Iae);ofo=r(CQr,"bert"),CQr.forEach(t),rfo=r(m3e," \u2014 "),$P=n(m3e,"A",{href:!0});var wQr=s($P);tfo=r(wQr,"BertModel"),wQr.forEach(t),afo=r(m3e," (BERT model)"),m3e.forEach(t),nfo=i($),Qh=n($,"LI",{});var g3e=s(Qh);qae=n(g3e,"STRONG",{});var AQr=s(qae);sfo=r(AQr,"bert-generation"),AQr.forEach(t),lfo=r(g3e," \u2014 "),kP=n(g3e,"A",{href:!0});var yQr=s(kP);ifo=r(yQr,"BertGenerationEncoder"),yQr.forEach(t),dfo=r(g3e," (Bert Generation model)"),g3e.forEach(t),cfo=i($),Wh=n($,"LI",{});var h3e=s(Wh);Nae=n(h3e,"STRONG",{});var LQr=s(Nae);ffo=r(LQr,"big_bird"),LQr.forEach(t),mfo=r(h3e," \u2014 "),SP=n(h3e,"A",{href:!0});var xQr=s(SP);gfo=r(xQr,"BigBirdModel"),xQr.forEach(t),hfo=r(h3e," (BigBird model)"),h3e.forEach(t),pfo=i($),Hh=n($,"LI",{});var p3e=s(Hh);jae=n(p3e,"STRONG",{});var $Qr=s(jae);ufo=r($Qr,"bigbird_pegasus"),$Qr.forEach(t),_fo=r(p3e," \u2014 "),RP=n(p3e,"A",{href:!0});var kQr=s(RP);bfo=r(kQr,"BigBirdPegasusModel"),kQr.forEach(t),vfo=r(p3e," (BigBirdPegasus model)"),p3e.forEach(t),Ffo=i($),Uh=n($,"LI",{});var u3e=s(Uh);Dae=n(u3e,"STRONG",{});var SQr=s(Dae);Tfo=r(SQr,"blenderbot"),SQr.forEach(t),Mfo=r(u3e," \u2014 "),BP=n(u3e,"A",{href:!0});var RQr=s(BP);Efo=r(RQr,"BlenderbotModel"),RQr.forEach(t),Cfo=r(u3e," (Blenderbot model)"),u3e.forEach(t),wfo=i($),Jh=n($,"LI",{});var _3e=s(Jh);Gae=n(_3e,"STRONG",{});var BQr=s(Gae);Afo=r(BQr,"blenderbot-small"),BQr.forEach(t),yfo=r(_3e," \u2014 "),PP=n(_3e,"A",{href:!0});var PQr=s(PP);Lfo=r(PQr,"BlenderbotSmallModel"),PQr.forEach(t),xfo=r(_3e," (BlenderbotSmall model)"),_3e.forEach(t),$fo=i($),Yh=n($,"LI",{});var b3e=s(Yh);Oae=n(b3e,"STRONG",{});var IQr=s(Oae);kfo=r(IQr,"camembert"),IQr.forEach(t),Sfo=r(b3e," \u2014 "),IP=n(b3e,"A",{href:!0});var qQr=s(IP);Rfo=r(qQr,"CamembertModel"),qQr.forEach(t),Bfo=r(b3e," (CamemBERT model)"),b3e.forEach(t),Pfo=i($),Kh=n($,"LI",{});var v3e=s(Kh);Vae=n(v3e,"STRONG",{});var NQr=s(Vae);Ifo=r(NQr,"canine"),NQr.forEach(t),qfo=r(v3e," \u2014 "),qP=n(v3e,"A",{href:!0});var jQr=s(qP);Nfo=r(jQr,"CanineModel"),jQr.forEach(t),jfo=r(v3e," (Canine model)"),v3e.forEach(t),Dfo=i($),Zh=n($,"LI",{});var F3e=s(Zh);Xae=n(F3e,"STRONG",{});var DQr=s(Xae);Gfo=r(DQr,"clip"),DQr.forEach(t),Ofo=r(F3e," \u2014 "),NP=n(F3e,"A",{href:!0});var GQr=s(NP);Vfo=r(GQr,"CLIPModel"),GQr.forEach(t),Xfo=r(F3e," (CLIP model)"),F3e.forEach(t),zfo=i($),ep=n($,"LI",{});var T3e=s(ep);zae=n(T3e,"STRONG",{});var OQr=s(zae);Qfo=r(OQr,"convbert"),OQr.forEach(t),Wfo=r(T3e," \u2014 "),jP=n(T3e,"A",{href:!0});var VQr=s(jP);Hfo=r(VQr,"ConvBertModel"),VQr.forEach(t),Ufo=r(T3e," (ConvBERT model)"),T3e.forEach(t),Jfo=i($),op=n($,"LI",{});var M3e=s(op);Qae=n(M3e,"STRONG",{});var XQr=s(Qae);Yfo=r(XQr,"convnext"),XQr.forEach(t),Kfo=r(M3e," \u2014 "),DP=n(M3e,"A",{href:!0});var zQr=s(DP);Zfo=r(zQr,"ConvNextModel"),zQr.forEach(t),emo=r(M3e," (ConvNext model)"),M3e.forEach(t),omo=i($),rp=n($,"LI",{});var E3e=s(rp);Wae=n(E3e,"STRONG",{});var QQr=s(Wae);rmo=r(QQr,"ctrl"),QQr.forEach(t),tmo=r(E3e," \u2014 "),GP=n(E3e,"A",{href:!0});var WQr=s(GP);amo=r(WQr,"CTRLModel"),WQr.forEach(t),nmo=r(E3e," (CTRL model)"),E3e.forEach(t),smo=i($),tp=n($,"LI",{});var C3e=s(tp);Hae=n(C3e,"STRONG",{});var HQr=s(Hae);lmo=r(HQr,"data2vec-audio"),HQr.forEach(t),imo=r(C3e," \u2014 "),OP=n(C3e,"A",{href:!0});var UQr=s(OP);dmo=r(UQr,"Data2VecAudioModel"),UQr.forEach(t),cmo=r(C3e," (Data2VecAudio model)"),C3e.forEach(t),fmo=i($),ap=n($,"LI",{});var w3e=s(ap);Uae=n(w3e,"STRONG",{});var JQr=s(Uae);mmo=r(JQr,"data2vec-text"),JQr.forEach(t),gmo=r(w3e," \u2014 "),VP=n(w3e,"A",{href:!0});var YQr=s(VP);hmo=r(YQr,"Data2VecTextModel"),YQr.forEach(t),pmo=r(w3e," (Data2VecText model)"),w3e.forEach(t),umo=i($),np=n($,"LI",{});var A3e=s(np);Jae=n(A3e,"STRONG",{});var KQr=s(Jae);_mo=r(KQr,"data2vec-vision"),KQr.forEach(t),bmo=r(A3e," \u2014 "),XP=n(A3e,"A",{href:!0});var ZQr=s(XP);vmo=r(ZQr,"Data2VecVisionModel"),ZQr.forEach(t),Fmo=r(A3e," (Data2VecVision model)"),A3e.forEach(t),Tmo=i($),sp=n($,"LI",{});var y3e=s(sp);Yae=n(y3e,"STRONG",{});var eWr=s(Yae);Mmo=r(eWr,"deberta"),eWr.forEach(t),Emo=r(y3e," \u2014 "),zP=n(y3e,"A",{href:!0});var oWr=s(zP);Cmo=r(oWr,"DebertaModel"),oWr.forEach(t),wmo=r(y3e," (DeBERTa model)"),y3e.forEach(t),Amo=i($),lp=n($,"LI",{});var L3e=s(lp);Kae=n(L3e,"STRONG",{});var rWr=s(Kae);ymo=r(rWr,"deberta-v2"),rWr.forEach(t),Lmo=r(L3e," \u2014 "),QP=n(L3e,"A",{href:!0});var tWr=s(QP);xmo=r(tWr,"DebertaV2Model"),tWr.forEach(t),$mo=r(L3e," (DeBERTa-v2 model)"),L3e.forEach(t),kmo=i($),ip=n($,"LI",{});var x3e=s(ip);Zae=n(x3e,"STRONG",{});var aWr=s(Zae);Smo=r(aWr,"decision_transformer"),aWr.forEach(t),Rmo=r(x3e," \u2014 "),WP=n(x3e,"A",{href:!0});var nWr=s(WP);Bmo=r(nWr,"DecisionTransformerModel"),nWr.forEach(t),Pmo=r(x3e," (Decision Transformer model)"),x3e.forEach(t),Imo=i($),dp=n($,"LI",{});var $3e=s(dp);ene=n($3e,"STRONG",{});var sWr=s(ene);qmo=r(sWr,"deit"),sWr.forEach(t),Nmo=r($3e," \u2014 "),HP=n($3e,"A",{href:!0});var lWr=s(HP);jmo=r(lWr,"DeiTModel"),lWr.forEach(t),Dmo=r($3e," (DeiT model)"),$3e.forEach(t),Gmo=i($),cp=n($,"LI",{});var k3e=s(cp);one=n(k3e,"STRONG",{});var iWr=s(one);Omo=r(iWr,"detr"),iWr.forEach(t),Vmo=r(k3e," \u2014 "),UP=n(k3e,"A",{href:!0});var dWr=s(UP);Xmo=r(dWr,"DetrModel"),dWr.forEach(t),zmo=r(k3e," (DETR model)"),k3e.forEach(t),Qmo=i($),fp=n($,"LI",{});var S3e=s(fp);rne=n(S3e,"STRONG",{});var cWr=s(rne);Wmo=r(cWr,"distilbert"),cWr.forEach(t),Hmo=r(S3e," \u2014 "),JP=n(S3e,"A",{href:!0});var fWr=s(JP);Umo=r(fWr,"DistilBertModel"),fWr.forEach(t),Jmo=r(S3e," (DistilBERT model)"),S3e.forEach(t),Ymo=i($),mp=n($,"LI",{});var R3e=s(mp);tne=n(R3e,"STRONG",{});var mWr=s(tne);Kmo=r(mWr,"dpr"),mWr.forEach(t),Zmo=r(R3e," \u2014 "),YP=n(R3e,"A",{href:!0});var gWr=s(YP);ego=r(gWr,"DPRQuestionEncoder"),gWr.forEach(t),ogo=r(R3e," (DPR model)"),R3e.forEach(t),rgo=i($),gp=n($,"LI",{});var B3e=s(gp);ane=n(B3e,"STRONG",{});var hWr=s(ane);tgo=r(hWr,"dpt"),hWr.forEach(t),ago=r(B3e," \u2014 "),KP=n(B3e,"A",{href:!0});var pWr=s(KP);ngo=r(pWr,"DPTModel"),pWr.forEach(t),sgo=r(B3e," (DPT model)"),B3e.forEach(t),lgo=i($),hp=n($,"LI",{});var P3e=s(hp);nne=n(P3e,"STRONG",{});var uWr=s(nne);igo=r(uWr,"electra"),uWr.forEach(t),dgo=r(P3e," \u2014 "),ZP=n(P3e,"A",{href:!0});var _Wr=s(ZP);cgo=r(_Wr,"ElectraModel"),_Wr.forEach(t),fgo=r(P3e," (ELECTRA model)"),P3e.forEach(t),mgo=i($),pp=n($,"LI",{});var I3e=s(pp);sne=n(I3e,"STRONG",{});var bWr=s(sne);ggo=r(bWr,"flaubert"),bWr.forEach(t),hgo=r(I3e," \u2014 "),eI=n(I3e,"A",{href:!0});var vWr=s(eI);pgo=r(vWr,"FlaubertModel"),vWr.forEach(t),ugo=r(I3e," (FlauBERT model)"),I3e.forEach(t),_go=i($),up=n($,"LI",{});var q3e=s(up);lne=n(q3e,"STRONG",{});var FWr=s(lne);bgo=r(FWr,"fnet"),FWr.forEach(t),vgo=r(q3e," \u2014 "),oI=n(q3e,"A",{href:!0});var TWr=s(oI);Fgo=r(TWr,"FNetModel"),TWr.forEach(t),Tgo=r(q3e," (FNet model)"),q3e.forEach(t),Mgo=i($),_p=n($,"LI",{});var N3e=s(_p);ine=n(N3e,"STRONG",{});var MWr=s(ine);Ego=r(MWr,"fsmt"),MWr.forEach(t),Cgo=r(N3e," \u2014 "),rI=n(N3e,"A",{href:!0});var EWr=s(rI);wgo=r(EWr,"FSMTModel"),EWr.forEach(t),Ago=r(N3e," (FairSeq Machine-Translation model)"),N3e.forEach(t),ygo=i($),Ss=n($,"LI",{});var o$=s(Ss);dne=n(o$,"STRONG",{});var CWr=s(dne);Lgo=r(CWr,"funnel"),CWr.forEach(t),xgo=r(o$," \u2014 "),tI=n(o$,"A",{href:!0});var wWr=s(tI);$go=r(wWr,"FunnelModel"),wWr.forEach(t),kgo=r(o$," or "),aI=n(o$,"A",{href:!0});var AWr=s(aI);Sgo=r(AWr,"FunnelBaseModel"),AWr.forEach(t),Rgo=r(o$," (Funnel Transformer model)"),o$.forEach(t),Bgo=i($),bp=n($,"LI",{});var j3e=s(bp);cne=n(j3e,"STRONG",{});var yWr=s(cne);Pgo=r(yWr,"glpn"),yWr.forEach(t),Igo=r(j3e," \u2014 "),nI=n(j3e,"A",{href:!0});var LWr=s(nI);qgo=r(LWr,"GLPNModel"),LWr.forEach(t),Ngo=r(j3e," (GLPN model)"),j3e.forEach(t),jgo=i($),vp=n($,"LI",{});var D3e=s(vp);fne=n(D3e,"STRONG",{});var xWr=s(fne);Dgo=r(xWr,"gpt2"),xWr.forEach(t),Ggo=r(D3e," \u2014 "),sI=n(D3e,"A",{href:!0});var $Wr=s(sI);Ogo=r($Wr,"GPT2Model"),$Wr.forEach(t),Vgo=r(D3e," (OpenAI GPT-2 model)"),D3e.forEach(t),Xgo=i($),Fp=n($,"LI",{});var G3e=s(Fp);mne=n(G3e,"STRONG",{});var kWr=s(mne);zgo=r(kWr,"gpt_neo"),kWr.forEach(t),Qgo=r(G3e," \u2014 "),lI=n(G3e,"A",{href:!0});var SWr=s(lI);Wgo=r(SWr,"GPTNeoModel"),SWr.forEach(t),Hgo=r(G3e," (GPT Neo model)"),G3e.forEach(t),Ugo=i($),Tp=n($,"LI",{});var O3e=s(Tp);gne=n(O3e,"STRONG",{});var RWr=s(gne);Jgo=r(RWr,"gptj"),RWr.forEach(t),Ygo=r(O3e," \u2014 "),iI=n(O3e,"A",{href:!0});var BWr=s(iI);Kgo=r(BWr,"GPTJModel"),BWr.forEach(t),Zgo=r(O3e," (GPT-J model)"),O3e.forEach(t),eho=i($),Mp=n($,"LI",{});var V3e=s(Mp);hne=n(V3e,"STRONG",{});var PWr=s(hne);oho=r(PWr,"hubert"),PWr.forEach(t),rho=r(V3e," \u2014 "),dI=n(V3e,"A",{href:!0});var IWr=s(dI);tho=r(IWr,"HubertModel"),IWr.forEach(t),aho=r(V3e," (Hubert model)"),V3e.forEach(t),nho=i($),Ep=n($,"LI",{});var X3e=s(Ep);pne=n(X3e,"STRONG",{});var qWr=s(pne);sho=r(qWr,"ibert"),qWr.forEach(t),lho=r(X3e," \u2014 "),cI=n(X3e,"A",{href:!0});var NWr=s(cI);iho=r(NWr,"IBertModel"),NWr.forEach(t),dho=r(X3e," (I-BERT model)"),X3e.forEach(t),cho=i($),Cp=n($,"LI",{});var z3e=s(Cp);une=n(z3e,"STRONG",{});var jWr=s(une);fho=r(jWr,"imagegpt"),jWr.forEach(t),mho=r(z3e," \u2014 "),fI=n(z3e,"A",{href:!0});var DWr=s(fI);gho=r(DWr,"ImageGPTModel"),DWr.forEach(t),hho=r(z3e," (ImageGPT model)"),z3e.forEach(t),pho=i($),wp=n($,"LI",{});var Q3e=s(wp);_ne=n(Q3e,"STRONG",{});var GWr=s(_ne);uho=r(GWr,"layoutlm"),GWr.forEach(t),_ho=r(Q3e," \u2014 "),mI=n(Q3e,"A",{href:!0});var OWr=s(mI);bho=r(OWr,"LayoutLMModel"),OWr.forEach(t),vho=r(Q3e," (LayoutLM model)"),Q3e.forEach(t),Fho=i($),Ap=n($,"LI",{});var W3e=s(Ap);bne=n(W3e,"STRONG",{});var VWr=s(bne);Tho=r(VWr,"layoutlmv2"),VWr.forEach(t),Mho=r(W3e," \u2014 "),gI=n(W3e,"A",{href:!0});var XWr=s(gI);Eho=r(XWr,"LayoutLMv2Model"),XWr.forEach(t),Cho=r(W3e," (LayoutLMv2 model)"),W3e.forEach(t),who=i($),yp=n($,"LI",{});var H3e=s(yp);vne=n(H3e,"STRONG",{});var zWr=s(vne);Aho=r(zWr,"led"),zWr.forEach(t),yho=r(H3e," \u2014 "),hI=n(H3e,"A",{href:!0});var QWr=s(hI);Lho=r(QWr,"LEDModel"),QWr.forEach(t),xho=r(H3e," (LED model)"),H3e.forEach(t),$ho=i($),Lp=n($,"LI",{});var U3e=s(Lp);Fne=n(U3e,"STRONG",{});var WWr=s(Fne);kho=r(WWr,"longformer"),WWr.forEach(t),Sho=r(U3e," \u2014 "),pI=n(U3e,"A",{href:!0});var HWr=s(pI);Rho=r(HWr,"LongformerModel"),HWr.forEach(t),Bho=r(U3e," (Longformer model)"),U3e.forEach(t),Pho=i($),xp=n($,"LI",{});var J3e=s(xp);Tne=n(J3e,"STRONG",{});var UWr=s(Tne);Iho=r(UWr,"luke"),UWr.forEach(t),qho=r(J3e," \u2014 "),uI=n(J3e,"A",{href:!0});var JWr=s(uI);Nho=r(JWr,"LukeModel"),JWr.forEach(t),jho=r(J3e," (LUKE model)"),J3e.forEach(t),Dho=i($),$p=n($,"LI",{});var Y3e=s($p);Mne=n(Y3e,"STRONG",{});var YWr=s(Mne);Gho=r(YWr,"lxmert"),YWr.forEach(t),Oho=r(Y3e," \u2014 "),_I=n(Y3e,"A",{href:!0});var KWr=s(_I);Vho=r(KWr,"LxmertModel"),KWr.forEach(t),Xho=r(Y3e," (LXMERT model)"),Y3e.forEach(t),zho=i($),kp=n($,"LI",{});var K3e=s(kp);Ene=n(K3e,"STRONG",{});var ZWr=s(Ene);Qho=r(ZWr,"m2m_100"),ZWr.forEach(t),Who=r(K3e," \u2014 "),bI=n(K3e,"A",{href:!0});var eHr=s(bI);Hho=r(eHr,"M2M100Model"),eHr.forEach(t),Uho=r(K3e," (M2M100 model)"),K3e.forEach(t),Jho=i($),Sp=n($,"LI",{});var Z3e=s(Sp);Cne=n(Z3e,"STRONG",{});var oHr=s(Cne);Yho=r(oHr,"marian"),oHr.forEach(t),Kho=r(Z3e," \u2014 "),vI=n(Z3e,"A",{href:!0});var rHr=s(vI);Zho=r(rHr,"MarianModel"),rHr.forEach(t),epo=r(Z3e," (Marian model)"),Z3e.forEach(t),opo=i($),Rp=n($,"LI",{});var ewe=s(Rp);wne=n(ewe,"STRONG",{});var tHr=s(wne);rpo=r(tHr,"maskformer"),tHr.forEach(t),tpo=r(ewe," \u2014 "),FI=n(ewe,"A",{href:!0});var aHr=s(FI);apo=r(aHr,"MaskFormerModel"),aHr.forEach(t),npo=r(ewe," (MaskFormer model)"),ewe.forEach(t),spo=i($),Bp=n($,"LI",{});var owe=s(Bp);Ane=n(owe,"STRONG",{});var nHr=s(Ane);lpo=r(nHr,"mbart"),nHr.forEach(t),ipo=r(owe," \u2014 "),TI=n(owe,"A",{href:!0});var sHr=s(TI);dpo=r(sHr,"MBartModel"),sHr.forEach(t),cpo=r(owe," (mBART model)"),owe.forEach(t),fpo=i($),Pp=n($,"LI",{});var rwe=s(Pp);yne=n(rwe,"STRONG",{});var lHr=s(yne);mpo=r(lHr,"megatron-bert"),lHr.forEach(t),gpo=r(rwe," \u2014 "),MI=n(rwe,"A",{href:!0});var iHr=s(MI);hpo=r(iHr,"MegatronBertModel"),iHr.forEach(t),ppo=r(rwe," (MegatronBert model)"),rwe.forEach(t),upo=i($),Ip=n($,"LI",{});var twe=s(Ip);Lne=n(twe,"STRONG",{});var dHr=s(Lne);_po=r(dHr,"mobilebert"),dHr.forEach(t),bpo=r(twe," \u2014 "),EI=n(twe,"A",{href:!0});var cHr=s(EI);vpo=r(cHr,"MobileBertModel"),cHr.forEach(t),Fpo=r(twe," (MobileBERT model)"),twe.forEach(t),Tpo=i($),qp=n($,"LI",{});var awe=s(qp);xne=n(awe,"STRONG",{});var fHr=s(xne);Mpo=r(fHr,"mpnet"),fHr.forEach(t),Epo=r(awe," \u2014 "),CI=n(awe,"A",{href:!0});var mHr=s(CI);Cpo=r(mHr,"MPNetModel"),mHr.forEach(t),wpo=r(awe," (MPNet model)"),awe.forEach(t),Apo=i($),Np=n($,"LI",{});var nwe=s(Np);$ne=n(nwe,"STRONG",{});var gHr=s($ne);ypo=r(gHr,"mt5"),gHr.forEach(t),Lpo=r(nwe," \u2014 "),wI=n(nwe,"A",{href:!0});var hHr=s(wI);xpo=r(hHr,"MT5Model"),hHr.forEach(t),$po=r(nwe," (mT5 model)"),nwe.forEach(t),kpo=i($),jp=n($,"LI",{});var swe=s(jp);kne=n(swe,"STRONG",{});var pHr=s(kne);Spo=r(pHr,"nystromformer"),pHr.forEach(t),Rpo=r(swe," \u2014 "),AI=n(swe,"A",{href:!0});var uHr=s(AI);Bpo=r(uHr,"NystromformerModel"),uHr.forEach(t),Ppo=r(swe," (Nystromformer model)"),swe.forEach(t),Ipo=i($),Dp=n($,"LI",{});var lwe=s(Dp);Sne=n(lwe,"STRONG",{});var _Hr=s(Sne);qpo=r(_Hr,"openai-gpt"),_Hr.forEach(t),Npo=r(lwe," \u2014 "),yI=n(lwe,"A",{href:!0});var bHr=s(yI);jpo=r(bHr,"OpenAIGPTModel"),bHr.forEach(t),Dpo=r(lwe," (OpenAI GPT model)"),lwe.forEach(t),Gpo=i($),Gp=n($,"LI",{});var iwe=s(Gp);Rne=n(iwe,"STRONG",{});var vHr=s(Rne);Opo=r(vHr,"pegasus"),vHr.forEach(t),Vpo=r(iwe," \u2014 "),LI=n(iwe,"A",{href:!0});var FHr=s(LI);Xpo=r(FHr,"PegasusModel"),FHr.forEach(t),zpo=r(iwe," (Pegasus model)"),iwe.forEach(t),Qpo=i($),Op=n($,"LI",{});var dwe=s(Op);Bne=n(dwe,"STRONG",{});var THr=s(Bne);Wpo=r(THr,"perceiver"),THr.forEach(t),Hpo=r(dwe," \u2014 "),xI=n(dwe,"A",{href:!0});var MHr=s(xI);Upo=r(MHr,"PerceiverModel"),MHr.forEach(t),Jpo=r(dwe," (Perceiver model)"),dwe.forEach(t),Ypo=i($),Vp=n($,"LI",{});var cwe=s(Vp);Pne=n(cwe,"STRONG",{});var EHr=s(Pne);Kpo=r(EHr,"plbart"),EHr.forEach(t),Zpo=r(cwe," \u2014 "),$I=n(cwe,"A",{href:!0});var CHr=s($I);euo=r(CHr,"PLBartModel"),CHr.forEach(t),ouo=r(cwe," (PLBart model)"),cwe.forEach(t),ruo=i($),Xp=n($,"LI",{});var fwe=s(Xp);Ine=n(fwe,"STRONG",{});var wHr=s(Ine);tuo=r(wHr,"poolformer"),wHr.forEach(t),auo=r(fwe," \u2014 "),kI=n(fwe,"A",{href:!0});var AHr=s(kI);nuo=r(AHr,"PoolFormerModel"),AHr.forEach(t),suo=r(fwe," (PoolFormer model)"),fwe.forEach(t),luo=i($),zp=n($,"LI",{});var mwe=s(zp);qne=n(mwe,"STRONG",{});var yHr=s(qne);iuo=r(yHr,"prophetnet"),yHr.forEach(t),duo=r(mwe," \u2014 "),SI=n(mwe,"A",{href:!0});var LHr=s(SI);cuo=r(LHr,"ProphetNetModel"),LHr.forEach(t),fuo=r(mwe," (ProphetNet model)"),mwe.forEach(t),muo=i($),Qp=n($,"LI",{});var gwe=s(Qp);Nne=n(gwe,"STRONG",{});var xHr=s(Nne);guo=r(xHr,"qdqbert"),xHr.forEach(t),huo=r(gwe," \u2014 "),RI=n(gwe,"A",{href:!0});var $Hr=s(RI);puo=r($Hr,"QDQBertModel"),$Hr.forEach(t),uuo=r(gwe," (QDQBert model)"),gwe.forEach(t),_uo=i($),Wp=n($,"LI",{});var hwe=s(Wp);jne=n(hwe,"STRONG",{});var kHr=s(jne);buo=r(kHr,"reformer"),kHr.forEach(t),vuo=r(hwe," \u2014 "),BI=n(hwe,"A",{href:!0});var SHr=s(BI);Fuo=r(SHr,"ReformerModel"),SHr.forEach(t),Tuo=r(hwe," (Reformer model)"),hwe.forEach(t),Muo=i($),Hp=n($,"LI",{});var pwe=s(Hp);Dne=n(pwe,"STRONG",{});var RHr=s(Dne);Euo=r(RHr,"regnet"),RHr.forEach(t),Cuo=r(pwe," \u2014 "),PI=n(pwe,"A",{href:!0});var BHr=s(PI);wuo=r(BHr,"RegNetModel"),BHr.forEach(t),Auo=r(pwe," (RegNet model)"),pwe.forEach(t),yuo=i($),Up=n($,"LI",{});var uwe=s(Up);Gne=n(uwe,"STRONG",{});var PHr=s(Gne);Luo=r(PHr,"rembert"),PHr.forEach(t),xuo=r(uwe," \u2014 "),II=n(uwe,"A",{href:!0});var IHr=s(II);$uo=r(IHr,"RemBertModel"),IHr.forEach(t),kuo=r(uwe," (RemBERT model)"),uwe.forEach(t),Suo=i($),Jp=n($,"LI",{});var _we=s(Jp);One=n(_we,"STRONG",{});var qHr=s(One);Ruo=r(qHr,"resnet"),qHr.forEach(t),Buo=r(_we," \u2014 "),qI=n(_we,"A",{href:!0});var NHr=s(qI);Puo=r(NHr,"ResNetModel"),NHr.forEach(t),Iuo=r(_we," (ResNet model)"),_we.forEach(t),quo=i($),Yp=n($,"LI",{});var bwe=s(Yp);Vne=n(bwe,"STRONG",{});var jHr=s(Vne);Nuo=r(jHr,"retribert"),jHr.forEach(t),juo=r(bwe," \u2014 "),NI=n(bwe,"A",{href:!0});var DHr=s(NI);Duo=r(DHr,"RetriBertModel"),DHr.forEach(t),Guo=r(bwe," (RetriBERT model)"),bwe.forEach(t),Ouo=i($),Kp=n($,"LI",{});var vwe=s(Kp);Xne=n(vwe,"STRONG",{});var GHr=s(Xne);Vuo=r(GHr,"roberta"),GHr.forEach(t),Xuo=r(vwe," \u2014 "),jI=n(vwe,"A",{href:!0});var OHr=s(jI);zuo=r(OHr,"RobertaModel"),OHr.forEach(t),Quo=r(vwe," (RoBERTa model)"),vwe.forEach(t),Wuo=i($),Zp=n($,"LI",{});var Fwe=s(Zp);zne=n(Fwe,"STRONG",{});var VHr=s(zne);Huo=r(VHr,"roformer"),VHr.forEach(t),Uuo=r(Fwe," \u2014 "),DI=n(Fwe,"A",{href:!0});var XHr=s(DI);Juo=r(XHr,"RoFormerModel"),XHr.forEach(t),Yuo=r(Fwe," (RoFormer model)"),Fwe.forEach(t),Kuo=i($),eu=n($,"LI",{});var Twe=s(eu);Qne=n(Twe,"STRONG",{});var zHr=s(Qne);Zuo=r(zHr,"segformer"),zHr.forEach(t),e_o=r(Twe," \u2014 "),GI=n(Twe,"A",{href:!0});var QHr=s(GI);o_o=r(QHr,"SegformerModel"),QHr.forEach(t),r_o=r(Twe," (SegFormer model)"),Twe.forEach(t),t_o=i($),ou=n($,"LI",{});var Mwe=s(ou);Wne=n(Mwe,"STRONG",{});var WHr=s(Wne);a_o=r(WHr,"sew"),WHr.forEach(t),n_o=r(Mwe," \u2014 "),OI=n(Mwe,"A",{href:!0});var HHr=s(OI);s_o=r(HHr,"SEWModel"),HHr.forEach(t),l_o=r(Mwe," (SEW model)"),Mwe.forEach(t),i_o=i($),ru=n($,"LI",{});var Ewe=s(ru);Hne=n(Ewe,"STRONG",{});var UHr=s(Hne);d_o=r(UHr,"sew-d"),UHr.forEach(t),c_o=r(Ewe," \u2014 "),VI=n(Ewe,"A",{href:!0});var JHr=s(VI);f_o=r(JHr,"SEWDModel"),JHr.forEach(t),m_o=r(Ewe," (SEW-D model)"),Ewe.forEach(t),g_o=i($),tu=n($,"LI",{});var Cwe=s(tu);Une=n(Cwe,"STRONG",{});var YHr=s(Une);h_o=r(YHr,"speech_to_text"),YHr.forEach(t),p_o=r(Cwe," \u2014 "),XI=n(Cwe,"A",{href:!0});var KHr=s(XI);u_o=r(KHr,"Speech2TextModel"),KHr.forEach(t),__o=r(Cwe," (Speech2Text model)"),Cwe.forEach(t),b_o=i($),au=n($,"LI",{});var wwe=s(au);Jne=n(wwe,"STRONG",{});var ZHr=s(Jne);v_o=r(ZHr,"splinter"),ZHr.forEach(t),F_o=r(wwe," \u2014 "),zI=n(wwe,"A",{href:!0});var eUr=s(zI);T_o=r(eUr,"SplinterModel"),eUr.forEach(t),M_o=r(wwe," (Splinter model)"),wwe.forEach(t),E_o=i($),nu=n($,"LI",{});var Awe=s(nu);Yne=n(Awe,"STRONG",{});var oUr=s(Yne);C_o=r(oUr,"squeezebert"),oUr.forEach(t),w_o=r(Awe," \u2014 "),QI=n(Awe,"A",{href:!0});var rUr=s(QI);A_o=r(rUr,"SqueezeBertModel"),rUr.forEach(t),y_o=r(Awe," (SqueezeBERT model)"),Awe.forEach(t),L_o=i($),su=n($,"LI",{});var ywe=s(su);Kne=n(ywe,"STRONG",{});var tUr=s(Kne);x_o=r(tUr,"swin"),tUr.forEach(t),$_o=r(ywe," \u2014 "),WI=n(ywe,"A",{href:!0});var aUr=s(WI);k_o=r(aUr,"SwinModel"),aUr.forEach(t),S_o=r(ywe," (Swin model)"),ywe.forEach(t),R_o=i($),lu=n($,"LI",{});var Lwe=s(lu);Zne=n(Lwe,"STRONG",{});var nUr=s(Zne);B_o=r(nUr,"t5"),nUr.forEach(t),P_o=r(Lwe," \u2014 "),HI=n(Lwe,"A",{href:!0});var sUr=s(HI);I_o=r(sUr,"T5Model"),sUr.forEach(t),q_o=r(Lwe," (T5 model)"),Lwe.forEach(t),N_o=i($),iu=n($,"LI",{});var xwe=s(iu);ese=n(xwe,"STRONG",{});var lUr=s(ese);j_o=r(lUr,"tapas"),lUr.forEach(t),D_o=r(xwe," \u2014 "),UI=n(xwe,"A",{href:!0});var iUr=s(UI);G_o=r(iUr,"TapasModel"),iUr.forEach(t),O_o=r(xwe," (TAPAS model)"),xwe.forEach(t),V_o=i($),du=n($,"LI",{});var $we=s(du);ose=n($we,"STRONG",{});var dUr=s(ose);X_o=r(dUr,"transfo-xl"),dUr.forEach(t),z_o=r($we," \u2014 "),JI=n($we,"A",{href:!0});var cUr=s(JI);Q_o=r(cUr,"TransfoXLModel"),cUr.forEach(t),W_o=r($we," (Transformer-XL model)"),$we.forEach(t),H_o=i($),cu=n($,"LI",{});var kwe=s(cu);rse=n(kwe,"STRONG",{});var fUr=s(rse);U_o=r(fUr,"unispeech"),fUr.forEach(t),J_o=r(kwe," \u2014 "),YI=n(kwe,"A",{href:!0});var mUr=s(YI);Y_o=r(mUr,"UniSpeechModel"),mUr.forEach(t),K_o=r(kwe," (UniSpeech model)"),kwe.forEach(t),Z_o=i($),fu=n($,"LI",{});var Swe=s(fu);tse=n(Swe,"STRONG",{});var gUr=s(tse);e2o=r(gUr,"unispeech-sat"),gUr.forEach(t),o2o=r(Swe," \u2014 "),KI=n(Swe,"A",{href:!0});var hUr=s(KI);r2o=r(hUr,"UniSpeechSatModel"),hUr.forEach(t),t2o=r(Swe," (UniSpeechSat model)"),Swe.forEach(t),a2o=i($),mu=n($,"LI",{});var Rwe=s(mu);ase=n(Rwe,"STRONG",{});var pUr=s(ase);n2o=r(pUr,"van"),pUr.forEach(t),s2o=r(Rwe," \u2014 "),ZI=n(Rwe,"A",{href:!0});var uUr=s(ZI);l2o=r(uUr,"VanModel"),uUr.forEach(t),i2o=r(Rwe," (VAN model)"),Rwe.forEach(t),d2o=i($),gu=n($,"LI",{});var Bwe=s(gu);nse=n(Bwe,"STRONG",{});var _Ur=s(nse);c2o=r(_Ur,"vilt"),_Ur.forEach(t),f2o=r(Bwe," \u2014 "),eq=n(Bwe,"A",{href:!0});var bUr=s(eq);m2o=r(bUr,"ViltModel"),bUr.forEach(t),g2o=r(Bwe," (ViLT model)"),Bwe.forEach(t),h2o=i($),hu=n($,"LI",{});var Pwe=s(hu);sse=n(Pwe,"STRONG",{});var vUr=s(sse);p2o=r(vUr,"vision-text-dual-encoder"),vUr.forEach(t),u2o=r(Pwe," \u2014 "),oq=n(Pwe,"A",{href:!0});var FUr=s(oq);_2o=r(FUr,"VisionTextDualEncoderModel"),FUr.forEach(t),b2o=r(Pwe," (VisionTextDualEncoder model)"),Pwe.forEach(t),v2o=i($),pu=n($,"LI",{});var Iwe=s(pu);lse=n(Iwe,"STRONG",{});var TUr=s(lse);F2o=r(TUr,"visual_bert"),TUr.forEach(t),T2o=r(Iwe," \u2014 "),rq=n(Iwe,"A",{href:!0});var MUr=s(rq);M2o=r(MUr,"VisualBertModel"),MUr.forEach(t),E2o=r(Iwe," (VisualBert model)"),Iwe.forEach(t),C2o=i($),uu=n($,"LI",{});var qwe=s(uu);ise=n(qwe,"STRONG",{});var EUr=s(ise);w2o=r(EUr,"vit"),EUr.forEach(t),A2o=r(qwe," \u2014 "),tq=n(qwe,"A",{href:!0});var CUr=s(tq);y2o=r(CUr,"ViTModel"),CUr.forEach(t),L2o=r(qwe," (ViT model)"),qwe.forEach(t),x2o=i($),_u=n($,"LI",{});var Nwe=s(_u);dse=n(Nwe,"STRONG",{});var wUr=s(dse);$2o=r(wUr,"vit_mae"),wUr.forEach(t),k2o=r(Nwe," \u2014 "),aq=n(Nwe,"A",{href:!0});var AUr=s(aq);S2o=r(AUr,"ViTMAEModel"),AUr.forEach(t),R2o=r(Nwe," (ViTMAE model)"),Nwe.forEach(t),B2o=i($),bu=n($,"LI",{});var jwe=s(bu);cse=n(jwe,"STRONG",{});var yUr=s(cse);P2o=r(yUr,"wav2vec2"),yUr.forEach(t),I2o=r(jwe," \u2014 "),nq=n(jwe,"A",{href:!0});var LUr=s(nq);q2o=r(LUr,"Wav2Vec2Model"),LUr.forEach(t),N2o=r(jwe," (Wav2Vec2 model)"),jwe.forEach(t),j2o=i($),vu=n($,"LI",{});var Dwe=s(vu);fse=n(Dwe,"STRONG",{});var xUr=s(fse);D2o=r(xUr,"wavlm"),xUr.forEach(t),G2o=r(Dwe," \u2014 "),sq=n(Dwe,"A",{href:!0});var $Ur=s(sq);O2o=r($Ur,"WavLMModel"),$Ur.forEach(t),V2o=r(Dwe," (WavLM model)"),Dwe.forEach(t),X2o=i($),Fu=n($,"LI",{});var Gwe=s(Fu);mse=n(Gwe,"STRONG",{});var kUr=s(mse);z2o=r(kUr,"xglm"),kUr.forEach(t),Q2o=r(Gwe," \u2014 "),lq=n(Gwe,"A",{href:!0});var SUr=s(lq);W2o=r(SUr,"XGLMModel"),SUr.forEach(t),H2o=r(Gwe," (XGLM model)"),Gwe.forEach(t),U2o=i($),Tu=n($,"LI",{});var Owe=s(Tu);gse=n(Owe,"STRONG",{});var RUr=s(gse);J2o=r(RUr,"xlm"),RUr.forEach(t),Y2o=r(Owe," \u2014 "),iq=n(Owe,"A",{href:!0});var BUr=s(iq);K2o=r(BUr,"XLMModel"),BUr.forEach(t),Z2o=r(Owe," (XLM model)"),Owe.forEach(t),e1o=i($),Mu=n($,"LI",{});var Vwe=s(Mu);hse=n(Vwe,"STRONG",{});var PUr=s(hse);o1o=r(PUr,"xlm-prophetnet"),PUr.forEach(t),r1o=r(Vwe," \u2014 "),dq=n(Vwe,"A",{href:!0});var IUr=s(dq);t1o=r(IUr,"XLMProphetNetModel"),IUr.forEach(t),a1o=r(Vwe," (XLMProphetNet model)"),Vwe.forEach(t),n1o=i($),Eu=n($,"LI",{});var Xwe=s(Eu);pse=n(Xwe,"STRONG",{});var qUr=s(pse);s1o=r(qUr,"xlm-roberta"),qUr.forEach(t),l1o=r(Xwe," \u2014 "),cq=n(Xwe,"A",{href:!0});var NUr=s(cq);i1o=r(NUr,"XLMRobertaModel"),NUr.forEach(t),d1o=r(Xwe," (XLM-RoBERTa model)"),Xwe.forEach(t),c1o=i($),Cu=n($,"LI",{});var zwe=s(Cu);use=n(zwe,"STRONG",{});var jUr=s(use);f1o=r(jUr,"xlm-roberta-xl"),jUr.forEach(t),m1o=r(zwe," \u2014 "),fq=n(zwe,"A",{href:!0});var DUr=s(fq);g1o=r(DUr,"XLMRobertaXLModel"),DUr.forEach(t),h1o=r(zwe," (XLM-RoBERTa-XL model)"),zwe.forEach(t),p1o=i($),wu=n($,"LI",{});var Qwe=s(wu);_se=n(Qwe,"STRONG",{});var GUr=s(_se);u1o=r(GUr,"xlnet"),GUr.forEach(t),_1o=r(Qwe," \u2014 "),mq=n(Qwe,"A",{href:!0});var OUr=s(mq);b1o=r(OUr,"XLNetModel"),OUr.forEach(t),v1o=r(Qwe," (XLNet model)"),Qwe.forEach(t),F1o=i($),Au=n($,"LI",{});var Wwe=s(Au);bse=n(Wwe,"STRONG",{});var VUr=s(bse);T1o=r(VUr,"yolos"),VUr.forEach(t),M1o=r(Wwe," \u2014 "),gq=n(Wwe,"A",{href:!0});var XUr=s(gq);E1o=r(XUr,"YolosModel"),XUr.forEach(t),C1o=r(Wwe," (YOLOS model)"),Wwe.forEach(t),w1o=i($),yu=n($,"LI",{});var Hwe=s(yu);vse=n(Hwe,"STRONG",{});var zUr=s(vse);A1o=r(zUr,"yoso"),zUr.forEach(t),y1o=r(Hwe," \u2014 "),hq=n(Hwe,"A",{href:!0});var QUr=s(hq);L1o=r(QUr,"YosoModel"),QUr.forEach(t),x1o=r(Hwe," (YOSO model)"),Hwe.forEach(t),$.forEach(t),$1o=i(Zt),Lu=n(Zt,"P",{});var Uwe=s(Lu);k1o=r(Uwe,"The model is set in evaluation mode by default using "),Fse=n(Uwe,"CODE",{});var WUr=s(Fse);S1o=r(WUr,"model.eval()"),WUr.forEach(t),R1o=r(Uwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tse=n(Uwe,"CODE",{});var HUr=s(Tse);B1o=r(HUr,"model.train()"),HUr.forEach(t),Uwe.forEach(t),P1o=i(Zt),T(xu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),bPe=i(f),Ci=n(f,"H2",{class:!0});var Mqe=s(Ci);$u=n(Mqe,"A",{id:!0,class:!0,href:!0});var UUr=s($u);Mse=n(UUr,"SPAN",{});var JUr=s(Mse);T(b0.$$.fragment,JUr),JUr.forEach(t),UUr.forEach(t),I1o=i(Mqe),Ese=n(Mqe,"SPAN",{});var YUr=s(Ese);q1o=r(YUr,"AutoModelForPreTraining"),YUr.forEach(t),Mqe.forEach(t),vPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(v0.$$.fragment,Ds),N1o=i(Ds),wi=n(Ds,"P",{});var zY=s(wi);j1o=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),pq=n(zY,"A",{href:!0});var KUr=s(pq);D1o=r(KUr,"from_pretrained()"),KUr.forEach(t),G1o=r(zY," class method or the "),uq=n(zY,"A",{href:!0});var ZUr=s(uq);O1o=r(ZUr,"from_config()"),ZUr.forEach(t),V1o=r(zY,` class
method.`),zY.forEach(t),X1o=i(Ds),F0=n(Ds,"P",{});var Eqe=s(F0);z1o=r(Eqe,"This class cannot be instantiated directly using "),Cse=n(Eqe,"CODE",{});var eJr=s(Cse);Q1o=r(eJr,"__init__()"),eJr.forEach(t),W1o=r(Eqe," (throws an error)."),Eqe.forEach(t),H1o=i(Ds),rt=n(Ds,"DIV",{class:!0});var Q3=s(rt);T(T0.$$.fragment,Q3),U1o=i(Q3),wse=n(Q3,"P",{});var oJr=s(wse);J1o=r(oJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oJr.forEach(t),Y1o=i(Q3),Ai=n(Q3,"P",{});var QY=s(Ai);K1o=r(QY,`Note:
Loading a model from its configuration file does `),Ase=n(QY,"STRONG",{});var rJr=s(Ase);Z1o=r(rJr,"not"),rJr.forEach(t),ebo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_q=n(QY,"A",{href:!0});var tJr=s(_q);obo=r(tJr,"from_pretrained()"),tJr.forEach(t),rbo=r(QY," to load the model weights."),QY.forEach(t),tbo=i(Q3),T(ku.$$.fragment,Q3),Q3.forEach(t),abo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(M0.$$.fragment,ea),nbo=i(ea),yse=n(ea,"P",{});var aJr=s(yse);sbo=r(aJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),aJr.forEach(t),lbo=i(ea),ya=n(ea,"P",{});var W3=s(ya);ibo=r(W3,"The model class to instantiate is selected based on the "),Lse=n(W3,"CODE",{});var nJr=s(Lse);dbo=r(nJr,"model_type"),nJr.forEach(t),cbo=r(W3,` property of the config object (either
passed as an argument or loaded from `),xse=n(W3,"CODE",{});var sJr=s(xse);fbo=r(sJr,"pretrained_model_name_or_path"),sJr.forEach(t),mbo=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n(W3,"CODE",{});var lJr=s($se);gbo=r(lJr,"pretrained_model_name_or_path"),lJr.forEach(t),hbo=r(W3,":"),W3.forEach(t),pbo=i(ea),G=n(ea,"UL",{});var V=s(G);Su=n(V,"LI",{});var Jwe=s(Su);kse=n(Jwe,"STRONG",{});var iJr=s(kse);ubo=r(iJr,"albert"),iJr.forEach(t),_bo=r(Jwe," \u2014 "),bq=n(Jwe,"A",{href:!0});var dJr=s(bq);bbo=r(dJr,"AlbertForPreTraining"),dJr.forEach(t),vbo=r(Jwe," (ALBERT model)"),Jwe.forEach(t),Fbo=i(V),Ru=n(V,"LI",{});var Ywe=s(Ru);Sse=n(Ywe,"STRONG",{});var cJr=s(Sse);Tbo=r(cJr,"bart"),cJr.forEach(t),Mbo=r(Ywe," \u2014 "),vq=n(Ywe,"A",{href:!0});var fJr=s(vq);Ebo=r(fJr,"BartForConditionalGeneration"),fJr.forEach(t),Cbo=r(Ywe," (BART model)"),Ywe.forEach(t),wbo=i(V),Bu=n(V,"LI",{});var Kwe=s(Bu);Rse=n(Kwe,"STRONG",{});var mJr=s(Rse);Abo=r(mJr,"bert"),mJr.forEach(t),ybo=r(Kwe," \u2014 "),Fq=n(Kwe,"A",{href:!0});var gJr=s(Fq);Lbo=r(gJr,"BertForPreTraining"),gJr.forEach(t),xbo=r(Kwe," (BERT model)"),Kwe.forEach(t),$bo=i(V),Pu=n(V,"LI",{});var Zwe=s(Pu);Bse=n(Zwe,"STRONG",{});var hJr=s(Bse);kbo=r(hJr,"big_bird"),hJr.forEach(t),Sbo=r(Zwe," \u2014 "),Tq=n(Zwe,"A",{href:!0});var pJr=s(Tq);Rbo=r(pJr,"BigBirdForPreTraining"),pJr.forEach(t),Bbo=r(Zwe," (BigBird model)"),Zwe.forEach(t),Pbo=i(V),Iu=n(V,"LI",{});var eAe=s(Iu);Pse=n(eAe,"STRONG",{});var uJr=s(Pse);Ibo=r(uJr,"camembert"),uJr.forEach(t),qbo=r(eAe," \u2014 "),Mq=n(eAe,"A",{href:!0});var _Jr=s(Mq);Nbo=r(_Jr,"CamembertForMaskedLM"),_Jr.forEach(t),jbo=r(eAe," (CamemBERT model)"),eAe.forEach(t),Dbo=i(V),qu=n(V,"LI",{});var oAe=s(qu);Ise=n(oAe,"STRONG",{});var bJr=s(Ise);Gbo=r(bJr,"ctrl"),bJr.forEach(t),Obo=r(oAe," \u2014 "),Eq=n(oAe,"A",{href:!0});var vJr=s(Eq);Vbo=r(vJr,"CTRLLMHeadModel"),vJr.forEach(t),Xbo=r(oAe," (CTRL model)"),oAe.forEach(t),zbo=i(V),Nu=n(V,"LI",{});var rAe=s(Nu);qse=n(rAe,"STRONG",{});var FJr=s(qse);Qbo=r(FJr,"data2vec-text"),FJr.forEach(t),Wbo=r(rAe," \u2014 "),Cq=n(rAe,"A",{href:!0});var TJr=s(Cq);Hbo=r(TJr,"Data2VecTextForMaskedLM"),TJr.forEach(t),Ubo=r(rAe," (Data2VecText model)"),rAe.forEach(t),Jbo=i(V),ju=n(V,"LI",{});var tAe=s(ju);Nse=n(tAe,"STRONG",{});var MJr=s(Nse);Ybo=r(MJr,"deberta"),MJr.forEach(t),Kbo=r(tAe," \u2014 "),wq=n(tAe,"A",{href:!0});var EJr=s(wq);Zbo=r(EJr,"DebertaForMaskedLM"),EJr.forEach(t),e5o=r(tAe," (DeBERTa model)"),tAe.forEach(t),o5o=i(V),Du=n(V,"LI",{});var aAe=s(Du);jse=n(aAe,"STRONG",{});var CJr=s(jse);r5o=r(CJr,"deberta-v2"),CJr.forEach(t),t5o=r(aAe," \u2014 "),Aq=n(aAe,"A",{href:!0});var wJr=s(Aq);a5o=r(wJr,"DebertaV2ForMaskedLM"),wJr.forEach(t),n5o=r(aAe," (DeBERTa-v2 model)"),aAe.forEach(t),s5o=i(V),Gu=n(V,"LI",{});var nAe=s(Gu);Dse=n(nAe,"STRONG",{});var AJr=s(Dse);l5o=r(AJr,"distilbert"),AJr.forEach(t),i5o=r(nAe," \u2014 "),yq=n(nAe,"A",{href:!0});var yJr=s(yq);d5o=r(yJr,"DistilBertForMaskedLM"),yJr.forEach(t),c5o=r(nAe," (DistilBERT model)"),nAe.forEach(t),f5o=i(V),Ou=n(V,"LI",{});var sAe=s(Ou);Gse=n(sAe,"STRONG",{});var LJr=s(Gse);m5o=r(LJr,"electra"),LJr.forEach(t),g5o=r(sAe," \u2014 "),Lq=n(sAe,"A",{href:!0});var xJr=s(Lq);h5o=r(xJr,"ElectraForPreTraining"),xJr.forEach(t),p5o=r(sAe," (ELECTRA model)"),sAe.forEach(t),u5o=i(V),Vu=n(V,"LI",{});var lAe=s(Vu);Ose=n(lAe,"STRONG",{});var $Jr=s(Ose);_5o=r($Jr,"flaubert"),$Jr.forEach(t),b5o=r(lAe," \u2014 "),xq=n(lAe,"A",{href:!0});var kJr=s(xq);v5o=r(kJr,"FlaubertWithLMHeadModel"),kJr.forEach(t),F5o=r(lAe," (FlauBERT model)"),lAe.forEach(t),T5o=i(V),Xu=n(V,"LI",{});var iAe=s(Xu);Vse=n(iAe,"STRONG",{});var SJr=s(Vse);M5o=r(SJr,"fnet"),SJr.forEach(t),E5o=r(iAe," \u2014 "),$q=n(iAe,"A",{href:!0});var RJr=s($q);C5o=r(RJr,"FNetForPreTraining"),RJr.forEach(t),w5o=r(iAe," (FNet model)"),iAe.forEach(t),A5o=i(V),zu=n(V,"LI",{});var dAe=s(zu);Xse=n(dAe,"STRONG",{});var BJr=s(Xse);y5o=r(BJr,"fsmt"),BJr.forEach(t),L5o=r(dAe," \u2014 "),kq=n(dAe,"A",{href:!0});var PJr=s(kq);x5o=r(PJr,"FSMTForConditionalGeneration"),PJr.forEach(t),$5o=r(dAe," (FairSeq Machine-Translation model)"),dAe.forEach(t),k5o=i(V),Qu=n(V,"LI",{});var cAe=s(Qu);zse=n(cAe,"STRONG",{});var IJr=s(zse);S5o=r(IJr,"funnel"),IJr.forEach(t),R5o=r(cAe," \u2014 "),Sq=n(cAe,"A",{href:!0});var qJr=s(Sq);B5o=r(qJr,"FunnelForPreTraining"),qJr.forEach(t),P5o=r(cAe," (Funnel Transformer model)"),cAe.forEach(t),I5o=i(V),Wu=n(V,"LI",{});var fAe=s(Wu);Qse=n(fAe,"STRONG",{});var NJr=s(Qse);q5o=r(NJr,"gpt2"),NJr.forEach(t),N5o=r(fAe," \u2014 "),Rq=n(fAe,"A",{href:!0});var jJr=s(Rq);j5o=r(jJr,"GPT2LMHeadModel"),jJr.forEach(t),D5o=r(fAe," (OpenAI GPT-2 model)"),fAe.forEach(t),G5o=i(V),Hu=n(V,"LI",{});var mAe=s(Hu);Wse=n(mAe,"STRONG",{});var DJr=s(Wse);O5o=r(DJr,"ibert"),DJr.forEach(t),V5o=r(mAe," \u2014 "),Bq=n(mAe,"A",{href:!0});var GJr=s(Bq);X5o=r(GJr,"IBertForMaskedLM"),GJr.forEach(t),z5o=r(mAe," (I-BERT model)"),mAe.forEach(t),Q5o=i(V),Uu=n(V,"LI",{});var gAe=s(Uu);Hse=n(gAe,"STRONG",{});var OJr=s(Hse);W5o=r(OJr,"layoutlm"),OJr.forEach(t),H5o=r(gAe," \u2014 "),Pq=n(gAe,"A",{href:!0});var VJr=s(Pq);U5o=r(VJr,"LayoutLMForMaskedLM"),VJr.forEach(t),J5o=r(gAe," (LayoutLM model)"),gAe.forEach(t),Y5o=i(V),Ju=n(V,"LI",{});var hAe=s(Ju);Use=n(hAe,"STRONG",{});var XJr=s(Use);K5o=r(XJr,"longformer"),XJr.forEach(t),Z5o=r(hAe," \u2014 "),Iq=n(hAe,"A",{href:!0});var zJr=s(Iq);evo=r(zJr,"LongformerForMaskedLM"),zJr.forEach(t),ovo=r(hAe," (Longformer model)"),hAe.forEach(t),rvo=i(V),Yu=n(V,"LI",{});var pAe=s(Yu);Jse=n(pAe,"STRONG",{});var QJr=s(Jse);tvo=r(QJr,"lxmert"),QJr.forEach(t),avo=r(pAe," \u2014 "),qq=n(pAe,"A",{href:!0});var WJr=s(qq);nvo=r(WJr,"LxmertForPreTraining"),WJr.forEach(t),svo=r(pAe," (LXMERT model)"),pAe.forEach(t),lvo=i(V),Ku=n(V,"LI",{});var uAe=s(Ku);Yse=n(uAe,"STRONG",{});var HJr=s(Yse);ivo=r(HJr,"megatron-bert"),HJr.forEach(t),dvo=r(uAe," \u2014 "),Nq=n(uAe,"A",{href:!0});var UJr=s(Nq);cvo=r(UJr,"MegatronBertForPreTraining"),UJr.forEach(t),fvo=r(uAe," (MegatronBert model)"),uAe.forEach(t),mvo=i(V),Zu=n(V,"LI",{});var _Ae=s(Zu);Kse=n(_Ae,"STRONG",{});var JJr=s(Kse);gvo=r(JJr,"mobilebert"),JJr.forEach(t),hvo=r(_Ae," \u2014 "),jq=n(_Ae,"A",{href:!0});var YJr=s(jq);pvo=r(YJr,"MobileBertForPreTraining"),YJr.forEach(t),uvo=r(_Ae," (MobileBERT model)"),_Ae.forEach(t),_vo=i(V),e_=n(V,"LI",{});var bAe=s(e_);Zse=n(bAe,"STRONG",{});var KJr=s(Zse);bvo=r(KJr,"mpnet"),KJr.forEach(t),vvo=r(bAe," \u2014 "),Dq=n(bAe,"A",{href:!0});var ZJr=s(Dq);Fvo=r(ZJr,"MPNetForMaskedLM"),ZJr.forEach(t),Tvo=r(bAe," (MPNet model)"),bAe.forEach(t),Mvo=i(V),o_=n(V,"LI",{});var vAe=s(o_);ele=n(vAe,"STRONG",{});var eYr=s(ele);Evo=r(eYr,"openai-gpt"),eYr.forEach(t),Cvo=r(vAe," \u2014 "),Gq=n(vAe,"A",{href:!0});var oYr=s(Gq);wvo=r(oYr,"OpenAIGPTLMHeadModel"),oYr.forEach(t),Avo=r(vAe," (OpenAI GPT model)"),vAe.forEach(t),yvo=i(V),r_=n(V,"LI",{});var FAe=s(r_);ole=n(FAe,"STRONG",{});var rYr=s(ole);Lvo=r(rYr,"retribert"),rYr.forEach(t),xvo=r(FAe," \u2014 "),Oq=n(FAe,"A",{href:!0});var tYr=s(Oq);$vo=r(tYr,"RetriBertModel"),tYr.forEach(t),kvo=r(FAe," (RetriBERT model)"),FAe.forEach(t),Svo=i(V),t_=n(V,"LI",{});var TAe=s(t_);rle=n(TAe,"STRONG",{});var aYr=s(rle);Rvo=r(aYr,"roberta"),aYr.forEach(t),Bvo=r(TAe," \u2014 "),Vq=n(TAe,"A",{href:!0});var nYr=s(Vq);Pvo=r(nYr,"RobertaForMaskedLM"),nYr.forEach(t),Ivo=r(TAe," (RoBERTa model)"),TAe.forEach(t),qvo=i(V),a_=n(V,"LI",{});var MAe=s(a_);tle=n(MAe,"STRONG",{});var sYr=s(tle);Nvo=r(sYr,"squeezebert"),sYr.forEach(t),jvo=r(MAe," \u2014 "),Xq=n(MAe,"A",{href:!0});var lYr=s(Xq);Dvo=r(lYr,"SqueezeBertForMaskedLM"),lYr.forEach(t),Gvo=r(MAe," (SqueezeBERT model)"),MAe.forEach(t),Ovo=i(V),n_=n(V,"LI",{});var EAe=s(n_);ale=n(EAe,"STRONG",{});var iYr=s(ale);Vvo=r(iYr,"t5"),iYr.forEach(t),Xvo=r(EAe," \u2014 "),zq=n(EAe,"A",{href:!0});var dYr=s(zq);zvo=r(dYr,"T5ForConditionalGeneration"),dYr.forEach(t),Qvo=r(EAe," (T5 model)"),EAe.forEach(t),Wvo=i(V),s_=n(V,"LI",{});var CAe=s(s_);nle=n(CAe,"STRONG",{});var cYr=s(nle);Hvo=r(cYr,"tapas"),cYr.forEach(t),Uvo=r(CAe," \u2014 "),Qq=n(CAe,"A",{href:!0});var fYr=s(Qq);Jvo=r(fYr,"TapasForMaskedLM"),fYr.forEach(t),Yvo=r(CAe," (TAPAS model)"),CAe.forEach(t),Kvo=i(V),l_=n(V,"LI",{});var wAe=s(l_);sle=n(wAe,"STRONG",{});var mYr=s(sle);Zvo=r(mYr,"transfo-xl"),mYr.forEach(t),eFo=r(wAe," \u2014 "),Wq=n(wAe,"A",{href:!0});var gYr=s(Wq);oFo=r(gYr,"TransfoXLLMHeadModel"),gYr.forEach(t),rFo=r(wAe," (Transformer-XL model)"),wAe.forEach(t),tFo=i(V),i_=n(V,"LI",{});var AAe=s(i_);lle=n(AAe,"STRONG",{});var hYr=s(lle);aFo=r(hYr,"unispeech"),hYr.forEach(t),nFo=r(AAe," \u2014 "),Hq=n(AAe,"A",{href:!0});var pYr=s(Hq);sFo=r(pYr,"UniSpeechForPreTraining"),pYr.forEach(t),lFo=r(AAe," (UniSpeech model)"),AAe.forEach(t),iFo=i(V),d_=n(V,"LI",{});var yAe=s(d_);ile=n(yAe,"STRONG",{});var uYr=s(ile);dFo=r(uYr,"unispeech-sat"),uYr.forEach(t),cFo=r(yAe," \u2014 "),Uq=n(yAe,"A",{href:!0});var _Yr=s(Uq);fFo=r(_Yr,"UniSpeechSatForPreTraining"),_Yr.forEach(t),mFo=r(yAe," (UniSpeechSat model)"),yAe.forEach(t),gFo=i(V),c_=n(V,"LI",{});var LAe=s(c_);dle=n(LAe,"STRONG",{});var bYr=s(dle);hFo=r(bYr,"visual_bert"),bYr.forEach(t),pFo=r(LAe," \u2014 "),Jq=n(LAe,"A",{href:!0});var vYr=s(Jq);uFo=r(vYr,"VisualBertForPreTraining"),vYr.forEach(t),_Fo=r(LAe," (VisualBert model)"),LAe.forEach(t),bFo=i(V),f_=n(V,"LI",{});var xAe=s(f_);cle=n(xAe,"STRONG",{});var FYr=s(cle);vFo=r(FYr,"vit_mae"),FYr.forEach(t),FFo=r(xAe," \u2014 "),Yq=n(xAe,"A",{href:!0});var TYr=s(Yq);TFo=r(TYr,"ViTMAEForPreTraining"),TYr.forEach(t),MFo=r(xAe," (ViTMAE model)"),xAe.forEach(t),EFo=i(V),m_=n(V,"LI",{});var $Ae=s(m_);fle=n($Ae,"STRONG",{});var MYr=s(fle);CFo=r(MYr,"wav2vec2"),MYr.forEach(t),wFo=r($Ae," \u2014 "),Kq=n($Ae,"A",{href:!0});var EYr=s(Kq);AFo=r(EYr,"Wav2Vec2ForPreTraining"),EYr.forEach(t),yFo=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),LFo=i(V),g_=n(V,"LI",{});var kAe=s(g_);mle=n(kAe,"STRONG",{});var CYr=s(mle);xFo=r(CYr,"xlm"),CYr.forEach(t),$Fo=r(kAe," \u2014 "),Zq=n(kAe,"A",{href:!0});var wYr=s(Zq);kFo=r(wYr,"XLMWithLMHeadModel"),wYr.forEach(t),SFo=r(kAe," (XLM model)"),kAe.forEach(t),RFo=i(V),h_=n(V,"LI",{});var SAe=s(h_);gle=n(SAe,"STRONG",{});var AYr=s(gle);BFo=r(AYr,"xlm-roberta"),AYr.forEach(t),PFo=r(SAe," \u2014 "),eN=n(SAe,"A",{href:!0});var yYr=s(eN);IFo=r(yYr,"XLMRobertaForMaskedLM"),yYr.forEach(t),qFo=r(SAe," (XLM-RoBERTa model)"),SAe.forEach(t),NFo=i(V),p_=n(V,"LI",{});var RAe=s(p_);hle=n(RAe,"STRONG",{});var LYr=s(hle);jFo=r(LYr,"xlm-roberta-xl"),LYr.forEach(t),DFo=r(RAe," \u2014 "),oN=n(RAe,"A",{href:!0});var xYr=s(oN);GFo=r(xYr,"XLMRobertaXLForMaskedLM"),xYr.forEach(t),OFo=r(RAe," (XLM-RoBERTa-XL model)"),RAe.forEach(t),VFo=i(V),u_=n(V,"LI",{});var BAe=s(u_);ple=n(BAe,"STRONG",{});var $Yr=s(ple);XFo=r($Yr,"xlnet"),$Yr.forEach(t),zFo=r(BAe," \u2014 "),rN=n(BAe,"A",{href:!0});var kYr=s(rN);QFo=r(kYr,"XLNetLMHeadModel"),kYr.forEach(t),WFo=r(BAe," (XLNet model)"),BAe.forEach(t),V.forEach(t),HFo=i(ea),__=n(ea,"P",{});var PAe=s(__);UFo=r(PAe,"The model is set in evaluation mode by default using "),ule=n(PAe,"CODE",{});var SYr=s(ule);JFo=r(SYr,"model.eval()"),SYr.forEach(t),YFo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_le=n(PAe,"CODE",{});var RYr=s(_le);KFo=r(RYr,"model.train()"),RYr.forEach(t),PAe.forEach(t),ZFo=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),FPe=i(f),yi=n(f,"H2",{class:!0});var Cqe=s(yi);v_=n(Cqe,"A",{id:!0,class:!0,href:!0});var BYr=s(v_);ble=n(BYr,"SPAN",{});var PYr=s(ble);T(E0.$$.fragment,PYr),PYr.forEach(t),BYr.forEach(t),e6o=i(Cqe),vle=n(Cqe,"SPAN",{});var IYr=s(vle);o6o=r(IYr,"AutoModelForCausalLM"),IYr.forEach(t),Cqe.forEach(t),TPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(C0.$$.fragment,Gs),r6o=i(Gs),Li=n(Gs,"P",{});var WY=s(Li);t6o=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),tN=n(WY,"A",{href:!0});var qYr=s(tN);a6o=r(qYr,"from_pretrained()"),qYr.forEach(t),n6o=r(WY," class method or the "),aN=n(WY,"A",{href:!0});var NYr=s(aN);s6o=r(NYr,"from_config()"),NYr.forEach(t),l6o=r(WY,` class
method.`),WY.forEach(t),i6o=i(Gs),w0=n(Gs,"P",{});var wqe=s(w0);d6o=r(wqe,"This class cannot be instantiated directly using "),Fle=n(wqe,"CODE",{});var jYr=s(Fle);c6o=r(jYr,"__init__()"),jYr.forEach(t),f6o=r(wqe," (throws an error)."),wqe.forEach(t),m6o=i(Gs),tt=n(Gs,"DIV",{class:!0});var H3=s(tt);T(A0.$$.fragment,H3),g6o=i(H3),Tle=n(H3,"P",{});var DYr=s(Tle);h6o=r(DYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),DYr.forEach(t),p6o=i(H3),xi=n(H3,"P",{});var HY=s(xi);u6o=r(HY,`Note:
Loading a model from its configuration file does `),Mle=n(HY,"STRONG",{});var GYr=s(Mle);_6o=r(GYr,"not"),GYr.forEach(t),b6o=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(HY,"A",{href:!0});var OYr=s(nN);v6o=r(OYr,"from_pretrained()"),OYr.forEach(t),F6o=r(HY," to load the model weights."),HY.forEach(t),T6o=i(H3),T(F_.$$.fragment,H3),H3.forEach(t),M6o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(y0.$$.fragment,oa),E6o=i(oa),Ele=n(oa,"P",{});var VYr=s(Ele);C6o=r(VYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),VYr.forEach(t),w6o=i(oa),La=n(oa,"P",{});var U3=s(La);A6o=r(U3,"The model class to instantiate is selected based on the "),Cle=n(U3,"CODE",{});var XYr=s(Cle);y6o=r(XYr,"model_type"),XYr.forEach(t),L6o=r(U3,` property of the config object (either
passed as an argument or loaded from `),wle=n(U3,"CODE",{});var zYr=s(wle);x6o=r(zYr,"pretrained_model_name_or_path"),zYr.forEach(t),$6o=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ale=n(U3,"CODE",{});var QYr=s(Ale);k6o=r(QYr,"pretrained_model_name_or_path"),QYr.forEach(t),S6o=r(U3,":"),U3.forEach(t),R6o=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var IAe=s(T_);yle=n(IAe,"STRONG",{});var WYr=s(yle);B6o=r(WYr,"bart"),WYr.forEach(t),P6o=r(IAe," \u2014 "),sN=n(IAe,"A",{href:!0});var HYr=s(sN);I6o=r(HYr,"BartForCausalLM"),HYr.forEach(t),q6o=r(IAe," (BART model)"),IAe.forEach(t),N6o=i(W),M_=n(W,"LI",{});var qAe=s(M_);Lle=n(qAe,"STRONG",{});var UYr=s(Lle);j6o=r(UYr,"bert"),UYr.forEach(t),D6o=r(qAe," \u2014 "),lN=n(qAe,"A",{href:!0});var JYr=s(lN);G6o=r(JYr,"BertLMHeadModel"),JYr.forEach(t),O6o=r(qAe," (BERT model)"),qAe.forEach(t),V6o=i(W),E_=n(W,"LI",{});var NAe=s(E_);xle=n(NAe,"STRONG",{});var YYr=s(xle);X6o=r(YYr,"bert-generation"),YYr.forEach(t),z6o=r(NAe," \u2014 "),iN=n(NAe,"A",{href:!0});var KYr=s(iN);Q6o=r(KYr,"BertGenerationDecoder"),KYr.forEach(t),W6o=r(NAe," (Bert Generation model)"),NAe.forEach(t),H6o=i(W),C_=n(W,"LI",{});var jAe=s(C_);$le=n(jAe,"STRONG",{});var ZYr=s($le);U6o=r(ZYr,"big_bird"),ZYr.forEach(t),J6o=r(jAe," \u2014 "),dN=n(jAe,"A",{href:!0});var eKr=s(dN);Y6o=r(eKr,"BigBirdForCausalLM"),eKr.forEach(t),K6o=r(jAe," (BigBird model)"),jAe.forEach(t),Z6o=i(W),w_=n(W,"LI",{});var DAe=s(w_);kle=n(DAe,"STRONG",{});var oKr=s(kle);eTo=r(oKr,"bigbird_pegasus"),oKr.forEach(t),oTo=r(DAe," \u2014 "),cN=n(DAe,"A",{href:!0});var rKr=s(cN);rTo=r(rKr,"BigBirdPegasusForCausalLM"),rKr.forEach(t),tTo=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),aTo=i(W),A_=n(W,"LI",{});var GAe=s(A_);Sle=n(GAe,"STRONG",{});var tKr=s(Sle);nTo=r(tKr,"blenderbot"),tKr.forEach(t),sTo=r(GAe," \u2014 "),fN=n(GAe,"A",{href:!0});var aKr=s(fN);lTo=r(aKr,"BlenderbotForCausalLM"),aKr.forEach(t),iTo=r(GAe," (Blenderbot model)"),GAe.forEach(t),dTo=i(W),y_=n(W,"LI",{});var OAe=s(y_);Rle=n(OAe,"STRONG",{});var nKr=s(Rle);cTo=r(nKr,"blenderbot-small"),nKr.forEach(t),fTo=r(OAe," \u2014 "),mN=n(OAe,"A",{href:!0});var sKr=s(mN);mTo=r(sKr,"BlenderbotSmallForCausalLM"),sKr.forEach(t),gTo=r(OAe," (BlenderbotSmall model)"),OAe.forEach(t),hTo=i(W),L_=n(W,"LI",{});var VAe=s(L_);Ble=n(VAe,"STRONG",{});var lKr=s(Ble);pTo=r(lKr,"camembert"),lKr.forEach(t),uTo=r(VAe," \u2014 "),gN=n(VAe,"A",{href:!0});var iKr=s(gN);_To=r(iKr,"CamembertForCausalLM"),iKr.forEach(t),bTo=r(VAe," (CamemBERT model)"),VAe.forEach(t),vTo=i(W),x_=n(W,"LI",{});var XAe=s(x_);Ple=n(XAe,"STRONG",{});var dKr=s(Ple);FTo=r(dKr,"ctrl"),dKr.forEach(t),TTo=r(XAe," \u2014 "),hN=n(XAe,"A",{href:!0});var cKr=s(hN);MTo=r(cKr,"CTRLLMHeadModel"),cKr.forEach(t),ETo=r(XAe," (CTRL model)"),XAe.forEach(t),CTo=i(W),$_=n(W,"LI",{});var zAe=s($_);Ile=n(zAe,"STRONG",{});var fKr=s(Ile);wTo=r(fKr,"data2vec-text"),fKr.forEach(t),ATo=r(zAe," \u2014 "),pN=n(zAe,"A",{href:!0});var mKr=s(pN);yTo=r(mKr,"Data2VecTextForCausalLM"),mKr.forEach(t),LTo=r(zAe," (Data2VecText model)"),zAe.forEach(t),xTo=i(W),k_=n(W,"LI",{});var QAe=s(k_);qle=n(QAe,"STRONG",{});var gKr=s(qle);$To=r(gKr,"electra"),gKr.forEach(t),kTo=r(QAe," \u2014 "),uN=n(QAe,"A",{href:!0});var hKr=s(uN);STo=r(hKr,"ElectraForCausalLM"),hKr.forEach(t),RTo=r(QAe," (ELECTRA model)"),QAe.forEach(t),BTo=i(W),S_=n(W,"LI",{});var WAe=s(S_);Nle=n(WAe,"STRONG",{});var pKr=s(Nle);PTo=r(pKr,"gpt2"),pKr.forEach(t),ITo=r(WAe," \u2014 "),_N=n(WAe,"A",{href:!0});var uKr=s(_N);qTo=r(uKr,"GPT2LMHeadModel"),uKr.forEach(t),NTo=r(WAe," (OpenAI GPT-2 model)"),WAe.forEach(t),jTo=i(W),R_=n(W,"LI",{});var HAe=s(R_);jle=n(HAe,"STRONG",{});var _Kr=s(jle);DTo=r(_Kr,"gpt_neo"),_Kr.forEach(t),GTo=r(HAe," \u2014 "),bN=n(HAe,"A",{href:!0});var bKr=s(bN);OTo=r(bKr,"GPTNeoForCausalLM"),bKr.forEach(t),VTo=r(HAe," (GPT Neo model)"),HAe.forEach(t),XTo=i(W),B_=n(W,"LI",{});var UAe=s(B_);Dle=n(UAe,"STRONG",{});var vKr=s(Dle);zTo=r(vKr,"gptj"),vKr.forEach(t),QTo=r(UAe," \u2014 "),vN=n(UAe,"A",{href:!0});var FKr=s(vN);WTo=r(FKr,"GPTJForCausalLM"),FKr.forEach(t),HTo=r(UAe," (GPT-J model)"),UAe.forEach(t),UTo=i(W),P_=n(W,"LI",{});var JAe=s(P_);Gle=n(JAe,"STRONG",{});var TKr=s(Gle);JTo=r(TKr,"marian"),TKr.forEach(t),YTo=r(JAe," \u2014 "),FN=n(JAe,"A",{href:!0});var MKr=s(FN);KTo=r(MKr,"MarianForCausalLM"),MKr.forEach(t),ZTo=r(JAe," (Marian model)"),JAe.forEach(t),e9o=i(W),I_=n(W,"LI",{});var YAe=s(I_);Ole=n(YAe,"STRONG",{});var EKr=s(Ole);o9o=r(EKr,"mbart"),EKr.forEach(t),r9o=r(YAe," \u2014 "),TN=n(YAe,"A",{href:!0});var CKr=s(TN);t9o=r(CKr,"MBartForCausalLM"),CKr.forEach(t),a9o=r(YAe," (mBART model)"),YAe.forEach(t),n9o=i(W),q_=n(W,"LI",{});var KAe=s(q_);Vle=n(KAe,"STRONG",{});var wKr=s(Vle);s9o=r(wKr,"megatron-bert"),wKr.forEach(t),l9o=r(KAe," \u2014 "),MN=n(KAe,"A",{href:!0});var AKr=s(MN);i9o=r(AKr,"MegatronBertForCausalLM"),AKr.forEach(t),d9o=r(KAe," (MegatronBert model)"),KAe.forEach(t),c9o=i(W),N_=n(W,"LI",{});var ZAe=s(N_);Xle=n(ZAe,"STRONG",{});var yKr=s(Xle);f9o=r(yKr,"openai-gpt"),yKr.forEach(t),m9o=r(ZAe," \u2014 "),EN=n(ZAe,"A",{href:!0});var LKr=s(EN);g9o=r(LKr,"OpenAIGPTLMHeadModel"),LKr.forEach(t),h9o=r(ZAe," (OpenAI GPT model)"),ZAe.forEach(t),p9o=i(W),j_=n(W,"LI",{});var e0e=s(j_);zle=n(e0e,"STRONG",{});var xKr=s(zle);u9o=r(xKr,"pegasus"),xKr.forEach(t),_9o=r(e0e," \u2014 "),CN=n(e0e,"A",{href:!0});var $Kr=s(CN);b9o=r($Kr,"PegasusForCausalLM"),$Kr.forEach(t),v9o=r(e0e," (Pegasus model)"),e0e.forEach(t),F9o=i(W),D_=n(W,"LI",{});var o0e=s(D_);Qle=n(o0e,"STRONG",{});var kKr=s(Qle);T9o=r(kKr,"plbart"),kKr.forEach(t),M9o=r(o0e," \u2014 "),wN=n(o0e,"A",{href:!0});var SKr=s(wN);E9o=r(SKr,"PLBartForCausalLM"),SKr.forEach(t),C9o=r(o0e," (PLBart model)"),o0e.forEach(t),w9o=i(W),G_=n(W,"LI",{});var r0e=s(G_);Wle=n(r0e,"STRONG",{});var RKr=s(Wle);A9o=r(RKr,"prophetnet"),RKr.forEach(t),y9o=r(r0e," \u2014 "),AN=n(r0e,"A",{href:!0});var BKr=s(AN);L9o=r(BKr,"ProphetNetForCausalLM"),BKr.forEach(t),x9o=r(r0e," (ProphetNet model)"),r0e.forEach(t),$9o=i(W),O_=n(W,"LI",{});var t0e=s(O_);Hle=n(t0e,"STRONG",{});var PKr=s(Hle);k9o=r(PKr,"qdqbert"),PKr.forEach(t),S9o=r(t0e," \u2014 "),yN=n(t0e,"A",{href:!0});var IKr=s(yN);R9o=r(IKr,"QDQBertLMHeadModel"),IKr.forEach(t),B9o=r(t0e," (QDQBert model)"),t0e.forEach(t),P9o=i(W),V_=n(W,"LI",{});var a0e=s(V_);Ule=n(a0e,"STRONG",{});var qKr=s(Ule);I9o=r(qKr,"reformer"),qKr.forEach(t),q9o=r(a0e," \u2014 "),LN=n(a0e,"A",{href:!0});var NKr=s(LN);N9o=r(NKr,"ReformerModelWithLMHead"),NKr.forEach(t),j9o=r(a0e," (Reformer model)"),a0e.forEach(t),D9o=i(W),X_=n(W,"LI",{});var n0e=s(X_);Jle=n(n0e,"STRONG",{});var jKr=s(Jle);G9o=r(jKr,"rembert"),jKr.forEach(t),O9o=r(n0e," \u2014 "),xN=n(n0e,"A",{href:!0});var DKr=s(xN);V9o=r(DKr,"RemBertForCausalLM"),DKr.forEach(t),X9o=r(n0e," (RemBERT model)"),n0e.forEach(t),z9o=i(W),z_=n(W,"LI",{});var s0e=s(z_);Yle=n(s0e,"STRONG",{});var GKr=s(Yle);Q9o=r(GKr,"roberta"),GKr.forEach(t),W9o=r(s0e," \u2014 "),$N=n(s0e,"A",{href:!0});var OKr=s($N);H9o=r(OKr,"RobertaForCausalLM"),OKr.forEach(t),U9o=r(s0e," (RoBERTa model)"),s0e.forEach(t),J9o=i(W),Q_=n(W,"LI",{});var l0e=s(Q_);Kle=n(l0e,"STRONG",{});var VKr=s(Kle);Y9o=r(VKr,"roformer"),VKr.forEach(t),K9o=r(l0e," \u2014 "),kN=n(l0e,"A",{href:!0});var XKr=s(kN);Z9o=r(XKr,"RoFormerForCausalLM"),XKr.forEach(t),eMo=r(l0e," (RoFormer model)"),l0e.forEach(t),oMo=i(W),W_=n(W,"LI",{});var i0e=s(W_);Zle=n(i0e,"STRONG",{});var zKr=s(Zle);rMo=r(zKr,"speech_to_text_2"),zKr.forEach(t),tMo=r(i0e," \u2014 "),SN=n(i0e,"A",{href:!0});var QKr=s(SN);aMo=r(QKr,"Speech2Text2ForCausalLM"),QKr.forEach(t),nMo=r(i0e," (Speech2Text2 model)"),i0e.forEach(t),sMo=i(W),H_=n(W,"LI",{});var d0e=s(H_);eie=n(d0e,"STRONG",{});var WKr=s(eie);lMo=r(WKr,"transfo-xl"),WKr.forEach(t),iMo=r(d0e," \u2014 "),RN=n(d0e,"A",{href:!0});var HKr=s(RN);dMo=r(HKr,"TransfoXLLMHeadModel"),HKr.forEach(t),cMo=r(d0e," (Transformer-XL model)"),d0e.forEach(t),fMo=i(W),U_=n(W,"LI",{});var c0e=s(U_);oie=n(c0e,"STRONG",{});var UKr=s(oie);mMo=r(UKr,"trocr"),UKr.forEach(t),gMo=r(c0e," \u2014 "),BN=n(c0e,"A",{href:!0});var JKr=s(BN);hMo=r(JKr,"TrOCRForCausalLM"),JKr.forEach(t),pMo=r(c0e," (TrOCR model)"),c0e.forEach(t),uMo=i(W),J_=n(W,"LI",{});var f0e=s(J_);rie=n(f0e,"STRONG",{});var YKr=s(rie);_Mo=r(YKr,"xglm"),YKr.forEach(t),bMo=r(f0e," \u2014 "),PN=n(f0e,"A",{href:!0});var KKr=s(PN);vMo=r(KKr,"XGLMForCausalLM"),KKr.forEach(t),FMo=r(f0e," (XGLM model)"),f0e.forEach(t),TMo=i(W),Y_=n(W,"LI",{});var m0e=s(Y_);tie=n(m0e,"STRONG",{});var ZKr=s(tie);MMo=r(ZKr,"xlm"),ZKr.forEach(t),EMo=r(m0e," \u2014 "),IN=n(m0e,"A",{href:!0});var eZr=s(IN);CMo=r(eZr,"XLMWithLMHeadModel"),eZr.forEach(t),wMo=r(m0e," (XLM model)"),m0e.forEach(t),AMo=i(W),K_=n(W,"LI",{});var g0e=s(K_);aie=n(g0e,"STRONG",{});var oZr=s(aie);yMo=r(oZr,"xlm-prophetnet"),oZr.forEach(t),LMo=r(g0e," \u2014 "),qN=n(g0e,"A",{href:!0});var rZr=s(qN);xMo=r(rZr,"XLMProphetNetForCausalLM"),rZr.forEach(t),$Mo=r(g0e," (XLMProphetNet model)"),g0e.forEach(t),kMo=i(W),Z_=n(W,"LI",{});var h0e=s(Z_);nie=n(h0e,"STRONG",{});var tZr=s(nie);SMo=r(tZr,"xlm-roberta"),tZr.forEach(t),RMo=r(h0e," \u2014 "),NN=n(h0e,"A",{href:!0});var aZr=s(NN);BMo=r(aZr,"XLMRobertaForCausalLM"),aZr.forEach(t),PMo=r(h0e," (XLM-RoBERTa model)"),h0e.forEach(t),IMo=i(W),e2=n(W,"LI",{});var p0e=s(e2);sie=n(p0e,"STRONG",{});var nZr=s(sie);qMo=r(nZr,"xlm-roberta-xl"),nZr.forEach(t),NMo=r(p0e," \u2014 "),jN=n(p0e,"A",{href:!0});var sZr=s(jN);jMo=r(sZr,"XLMRobertaXLForCausalLM"),sZr.forEach(t),DMo=r(p0e," (XLM-RoBERTa-XL model)"),p0e.forEach(t),GMo=i(W),o2=n(W,"LI",{});var u0e=s(o2);lie=n(u0e,"STRONG",{});var lZr=s(lie);OMo=r(lZr,"xlnet"),lZr.forEach(t),VMo=r(u0e," \u2014 "),DN=n(u0e,"A",{href:!0});var iZr=s(DN);XMo=r(iZr,"XLNetLMHeadModel"),iZr.forEach(t),zMo=r(u0e," (XLNet model)"),u0e.forEach(t),W.forEach(t),QMo=i(oa),r2=n(oa,"P",{});var _0e=s(r2);WMo=r(_0e,"The model is set in evaluation mode by default using "),iie=n(_0e,"CODE",{});var dZr=s(iie);HMo=r(dZr,"model.eval()"),dZr.forEach(t),UMo=r(_0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),die=n(_0e,"CODE",{});var cZr=s(die);JMo=r(cZr,"model.train()"),cZr.forEach(t),_0e.forEach(t),YMo=i(oa),T(t2.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),MPe=i(f),$i=n(f,"H2",{class:!0});var Aqe=s($i);a2=n(Aqe,"A",{id:!0,class:!0,href:!0});var fZr=s(a2);cie=n(fZr,"SPAN",{});var mZr=s(cie);T(L0.$$.fragment,mZr),mZr.forEach(t),fZr.forEach(t),KMo=i(Aqe),fie=n(Aqe,"SPAN",{});var gZr=s(fie);ZMo=r(gZr,"AutoModelForMaskedLM"),gZr.forEach(t),Aqe.forEach(t),EPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T(x0.$$.fragment,Os),e4o=i(Os),ki=n(Os,"P",{});var UY=s(ki);o4o=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GN=n(UY,"A",{href:!0});var hZr=s(GN);r4o=r(hZr,"from_pretrained()"),hZr.forEach(t),t4o=r(UY," class method or the "),ON=n(UY,"A",{href:!0});var pZr=s(ON);a4o=r(pZr,"from_config()"),pZr.forEach(t),n4o=r(UY,` class
method.`),UY.forEach(t),s4o=i(Os),$0=n(Os,"P",{});var yqe=s($0);l4o=r(yqe,"This class cannot be instantiated directly using "),mie=n(yqe,"CODE",{});var uZr=s(mie);i4o=r(uZr,"__init__()"),uZr.forEach(t),d4o=r(yqe," (throws an error)."),yqe.forEach(t),c4o=i(Os),at=n(Os,"DIV",{class:!0});var J3=s(at);T(k0.$$.fragment,J3),f4o=i(J3),gie=n(J3,"P",{});var _Zr=s(gie);m4o=r(_Zr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Zr.forEach(t),g4o=i(J3),Si=n(J3,"P",{});var JY=s(Si);h4o=r(JY,`Note:
Loading a model from its configuration file does `),hie=n(JY,"STRONG",{});var bZr=s(hie);p4o=r(bZr,"not"),bZr.forEach(t),u4o=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(JY,"A",{href:!0});var vZr=s(VN);_4o=r(vZr,"from_pretrained()"),vZr.forEach(t),b4o=r(JY," to load the model weights."),JY.forEach(t),v4o=i(J3),T(n2.$$.fragment,J3),J3.forEach(t),F4o=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(S0.$$.fragment,ra),T4o=i(ra),pie=n(ra,"P",{});var FZr=s(pie);M4o=r(FZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),FZr.forEach(t),E4o=i(ra),xa=n(ra,"P",{});var Y3=s(xa);C4o=r(Y3,"The model class to instantiate is selected based on the "),uie=n(Y3,"CODE",{});var TZr=s(uie);w4o=r(TZr,"model_type"),TZr.forEach(t),A4o=r(Y3,` property of the config object (either
passed as an argument or loaded from `),_ie=n(Y3,"CODE",{});var MZr=s(_ie);y4o=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),L4o=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bie=n(Y3,"CODE",{});var EZr=s(bie);x4o=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),$4o=r(Y3,":"),Y3.forEach(t),k4o=i(ra),Q=n(ra,"UL",{});var H=s(Q);s2=n(H,"LI",{});var b0e=s(s2);vie=n(b0e,"STRONG",{});var CZr=s(vie);S4o=r(CZr,"albert"),CZr.forEach(t),R4o=r(b0e," \u2014 "),XN=n(b0e,"A",{href:!0});var wZr=s(XN);B4o=r(wZr,"AlbertForMaskedLM"),wZr.forEach(t),P4o=r(b0e," (ALBERT model)"),b0e.forEach(t),I4o=i(H),l2=n(H,"LI",{});var v0e=s(l2);Fie=n(v0e,"STRONG",{});var AZr=s(Fie);q4o=r(AZr,"bart"),AZr.forEach(t),N4o=r(v0e," \u2014 "),zN=n(v0e,"A",{href:!0});var yZr=s(zN);j4o=r(yZr,"BartForConditionalGeneration"),yZr.forEach(t),D4o=r(v0e," (BART model)"),v0e.forEach(t),G4o=i(H),i2=n(H,"LI",{});var F0e=s(i2);Tie=n(F0e,"STRONG",{});var LZr=s(Tie);O4o=r(LZr,"bert"),LZr.forEach(t),V4o=r(F0e," \u2014 "),QN=n(F0e,"A",{href:!0});var xZr=s(QN);X4o=r(xZr,"BertForMaskedLM"),xZr.forEach(t),z4o=r(F0e," (BERT model)"),F0e.forEach(t),Q4o=i(H),d2=n(H,"LI",{});var T0e=s(d2);Mie=n(T0e,"STRONG",{});var $Zr=s(Mie);W4o=r($Zr,"big_bird"),$Zr.forEach(t),H4o=r(T0e," \u2014 "),WN=n(T0e,"A",{href:!0});var kZr=s(WN);U4o=r(kZr,"BigBirdForMaskedLM"),kZr.forEach(t),J4o=r(T0e," (BigBird model)"),T0e.forEach(t),Y4o=i(H),c2=n(H,"LI",{});var M0e=s(c2);Eie=n(M0e,"STRONG",{});var SZr=s(Eie);K4o=r(SZr,"camembert"),SZr.forEach(t),Z4o=r(M0e," \u2014 "),HN=n(M0e,"A",{href:!0});var RZr=s(HN);eEo=r(RZr,"CamembertForMaskedLM"),RZr.forEach(t),oEo=r(M0e," (CamemBERT model)"),M0e.forEach(t),rEo=i(H),f2=n(H,"LI",{});var E0e=s(f2);Cie=n(E0e,"STRONG",{});var BZr=s(Cie);tEo=r(BZr,"convbert"),BZr.forEach(t),aEo=r(E0e," \u2014 "),UN=n(E0e,"A",{href:!0});var PZr=s(UN);nEo=r(PZr,"ConvBertForMaskedLM"),PZr.forEach(t),sEo=r(E0e," (ConvBERT model)"),E0e.forEach(t),lEo=i(H),m2=n(H,"LI",{});var C0e=s(m2);wie=n(C0e,"STRONG",{});var IZr=s(wie);iEo=r(IZr,"data2vec-text"),IZr.forEach(t),dEo=r(C0e," \u2014 "),JN=n(C0e,"A",{href:!0});var qZr=s(JN);cEo=r(qZr,"Data2VecTextForMaskedLM"),qZr.forEach(t),fEo=r(C0e," (Data2VecText model)"),C0e.forEach(t),mEo=i(H),g2=n(H,"LI",{});var w0e=s(g2);Aie=n(w0e,"STRONG",{});var NZr=s(Aie);gEo=r(NZr,"deberta"),NZr.forEach(t),hEo=r(w0e," \u2014 "),YN=n(w0e,"A",{href:!0});var jZr=s(YN);pEo=r(jZr,"DebertaForMaskedLM"),jZr.forEach(t),uEo=r(w0e," (DeBERTa model)"),w0e.forEach(t),_Eo=i(H),h2=n(H,"LI",{});var A0e=s(h2);yie=n(A0e,"STRONG",{});var DZr=s(yie);bEo=r(DZr,"deberta-v2"),DZr.forEach(t),vEo=r(A0e," \u2014 "),KN=n(A0e,"A",{href:!0});var GZr=s(KN);FEo=r(GZr,"DebertaV2ForMaskedLM"),GZr.forEach(t),TEo=r(A0e," (DeBERTa-v2 model)"),A0e.forEach(t),MEo=i(H),p2=n(H,"LI",{});var y0e=s(p2);Lie=n(y0e,"STRONG",{});var OZr=s(Lie);EEo=r(OZr,"distilbert"),OZr.forEach(t),CEo=r(y0e," \u2014 "),ZN=n(y0e,"A",{href:!0});var VZr=s(ZN);wEo=r(VZr,"DistilBertForMaskedLM"),VZr.forEach(t),AEo=r(y0e," (DistilBERT model)"),y0e.forEach(t),yEo=i(H),u2=n(H,"LI",{});var L0e=s(u2);xie=n(L0e,"STRONG",{});var XZr=s(xie);LEo=r(XZr,"electra"),XZr.forEach(t),xEo=r(L0e," \u2014 "),ej=n(L0e,"A",{href:!0});var zZr=s(ej);$Eo=r(zZr,"ElectraForMaskedLM"),zZr.forEach(t),kEo=r(L0e," (ELECTRA model)"),L0e.forEach(t),SEo=i(H),_2=n(H,"LI",{});var x0e=s(_2);$ie=n(x0e,"STRONG",{});var QZr=s($ie);REo=r(QZr,"flaubert"),QZr.forEach(t),BEo=r(x0e," \u2014 "),oj=n(x0e,"A",{href:!0});var WZr=s(oj);PEo=r(WZr,"FlaubertWithLMHeadModel"),WZr.forEach(t),IEo=r(x0e," (FlauBERT model)"),x0e.forEach(t),qEo=i(H),b2=n(H,"LI",{});var $0e=s(b2);kie=n($0e,"STRONG",{});var HZr=s(kie);NEo=r(HZr,"fnet"),HZr.forEach(t),jEo=r($0e," \u2014 "),rj=n($0e,"A",{href:!0});var UZr=s(rj);DEo=r(UZr,"FNetForMaskedLM"),UZr.forEach(t),GEo=r($0e," (FNet model)"),$0e.forEach(t),OEo=i(H),v2=n(H,"LI",{});var k0e=s(v2);Sie=n(k0e,"STRONG",{});var JZr=s(Sie);VEo=r(JZr,"funnel"),JZr.forEach(t),XEo=r(k0e," \u2014 "),tj=n(k0e,"A",{href:!0});var YZr=s(tj);zEo=r(YZr,"FunnelForMaskedLM"),YZr.forEach(t),QEo=r(k0e," (Funnel Transformer model)"),k0e.forEach(t),WEo=i(H),F2=n(H,"LI",{});var S0e=s(F2);Rie=n(S0e,"STRONG",{});var KZr=s(Rie);HEo=r(KZr,"ibert"),KZr.forEach(t),UEo=r(S0e," \u2014 "),aj=n(S0e,"A",{href:!0});var ZZr=s(aj);JEo=r(ZZr,"IBertForMaskedLM"),ZZr.forEach(t),YEo=r(S0e," (I-BERT model)"),S0e.forEach(t),KEo=i(H),T2=n(H,"LI",{});var R0e=s(T2);Bie=n(R0e,"STRONG",{});var eet=s(Bie);ZEo=r(eet,"layoutlm"),eet.forEach(t),eCo=r(R0e," \u2014 "),nj=n(R0e,"A",{href:!0});var oet=s(nj);oCo=r(oet,"LayoutLMForMaskedLM"),oet.forEach(t),rCo=r(R0e," (LayoutLM model)"),R0e.forEach(t),tCo=i(H),M2=n(H,"LI",{});var B0e=s(M2);Pie=n(B0e,"STRONG",{});var ret=s(Pie);aCo=r(ret,"longformer"),ret.forEach(t),nCo=r(B0e," \u2014 "),sj=n(B0e,"A",{href:!0});var tet=s(sj);sCo=r(tet,"LongformerForMaskedLM"),tet.forEach(t),lCo=r(B0e," (Longformer model)"),B0e.forEach(t),iCo=i(H),E2=n(H,"LI",{});var P0e=s(E2);Iie=n(P0e,"STRONG",{});var aet=s(Iie);dCo=r(aet,"mbart"),aet.forEach(t),cCo=r(P0e," \u2014 "),lj=n(P0e,"A",{href:!0});var net=s(lj);fCo=r(net,"MBartForConditionalGeneration"),net.forEach(t),mCo=r(P0e," (mBART model)"),P0e.forEach(t),gCo=i(H),C2=n(H,"LI",{});var I0e=s(C2);qie=n(I0e,"STRONG",{});var set=s(qie);hCo=r(set,"megatron-bert"),set.forEach(t),pCo=r(I0e," \u2014 "),ij=n(I0e,"A",{href:!0});var iet=s(ij);uCo=r(iet,"MegatronBertForMaskedLM"),iet.forEach(t),_Co=r(I0e," (MegatronBert model)"),I0e.forEach(t),bCo=i(H),w2=n(H,"LI",{});var q0e=s(w2);Nie=n(q0e,"STRONG",{});var det=s(Nie);vCo=r(det,"mobilebert"),det.forEach(t),FCo=r(q0e," \u2014 "),dj=n(q0e,"A",{href:!0});var cet=s(dj);TCo=r(cet,"MobileBertForMaskedLM"),cet.forEach(t),MCo=r(q0e," (MobileBERT model)"),q0e.forEach(t),ECo=i(H),A2=n(H,"LI",{});var N0e=s(A2);jie=n(N0e,"STRONG",{});var fet=s(jie);CCo=r(fet,"mpnet"),fet.forEach(t),wCo=r(N0e," \u2014 "),cj=n(N0e,"A",{href:!0});var met=s(cj);ACo=r(met,"MPNetForMaskedLM"),met.forEach(t),yCo=r(N0e," (MPNet model)"),N0e.forEach(t),LCo=i(H),y2=n(H,"LI",{});var j0e=s(y2);Die=n(j0e,"STRONG",{});var get=s(Die);xCo=r(get,"nystromformer"),get.forEach(t),$Co=r(j0e," \u2014 "),fj=n(j0e,"A",{href:!0});var het=s(fj);kCo=r(het,"NystromformerForMaskedLM"),het.forEach(t),SCo=r(j0e," (Nystromformer model)"),j0e.forEach(t),RCo=i(H),L2=n(H,"LI",{});var D0e=s(L2);Gie=n(D0e,"STRONG",{});var pet=s(Gie);BCo=r(pet,"perceiver"),pet.forEach(t),PCo=r(D0e," \u2014 "),mj=n(D0e,"A",{href:!0});var uet=s(mj);ICo=r(uet,"PerceiverForMaskedLM"),uet.forEach(t),qCo=r(D0e," (Perceiver model)"),D0e.forEach(t),NCo=i(H),x2=n(H,"LI",{});var G0e=s(x2);Oie=n(G0e,"STRONG",{});var _et=s(Oie);jCo=r(_et,"qdqbert"),_et.forEach(t),DCo=r(G0e," \u2014 "),gj=n(G0e,"A",{href:!0});var bet=s(gj);GCo=r(bet,"QDQBertForMaskedLM"),bet.forEach(t),OCo=r(G0e," (QDQBert model)"),G0e.forEach(t),VCo=i(H),$2=n(H,"LI",{});var O0e=s($2);Vie=n(O0e,"STRONG",{});var vet=s(Vie);XCo=r(vet,"reformer"),vet.forEach(t),zCo=r(O0e," \u2014 "),hj=n(O0e,"A",{href:!0});var Fet=s(hj);QCo=r(Fet,"ReformerForMaskedLM"),Fet.forEach(t),WCo=r(O0e," (Reformer model)"),O0e.forEach(t),HCo=i(H),k2=n(H,"LI",{});var V0e=s(k2);Xie=n(V0e,"STRONG",{});var Tet=s(Xie);UCo=r(Tet,"rembert"),Tet.forEach(t),JCo=r(V0e," \u2014 "),pj=n(V0e,"A",{href:!0});var Met=s(pj);YCo=r(Met,"RemBertForMaskedLM"),Met.forEach(t),KCo=r(V0e," (RemBERT model)"),V0e.forEach(t),ZCo=i(H),S2=n(H,"LI",{});var X0e=s(S2);zie=n(X0e,"STRONG",{});var Eet=s(zie);e3o=r(Eet,"roberta"),Eet.forEach(t),o3o=r(X0e," \u2014 "),uj=n(X0e,"A",{href:!0});var Cet=s(uj);r3o=r(Cet,"RobertaForMaskedLM"),Cet.forEach(t),t3o=r(X0e," (RoBERTa model)"),X0e.forEach(t),a3o=i(H),R2=n(H,"LI",{});var z0e=s(R2);Qie=n(z0e,"STRONG",{});var wet=s(Qie);n3o=r(wet,"roformer"),wet.forEach(t),s3o=r(z0e," \u2014 "),_j=n(z0e,"A",{href:!0});var Aet=s(_j);l3o=r(Aet,"RoFormerForMaskedLM"),Aet.forEach(t),i3o=r(z0e," (RoFormer model)"),z0e.forEach(t),d3o=i(H),B2=n(H,"LI",{});var Q0e=s(B2);Wie=n(Q0e,"STRONG",{});var yet=s(Wie);c3o=r(yet,"squeezebert"),yet.forEach(t),f3o=r(Q0e," \u2014 "),bj=n(Q0e,"A",{href:!0});var Let=s(bj);m3o=r(Let,"SqueezeBertForMaskedLM"),Let.forEach(t),g3o=r(Q0e," (SqueezeBERT model)"),Q0e.forEach(t),h3o=i(H),P2=n(H,"LI",{});var W0e=s(P2);Hie=n(W0e,"STRONG",{});var xet=s(Hie);p3o=r(xet,"tapas"),xet.forEach(t),u3o=r(W0e," \u2014 "),vj=n(W0e,"A",{href:!0});var $et=s(vj);_3o=r($et,"TapasForMaskedLM"),$et.forEach(t),b3o=r(W0e," (TAPAS model)"),W0e.forEach(t),v3o=i(H),I2=n(H,"LI",{});var H0e=s(I2);Uie=n(H0e,"STRONG",{});var ket=s(Uie);F3o=r(ket,"wav2vec2"),ket.forEach(t),T3o=r(H0e," \u2014 "),Jie=n(H0e,"CODE",{});var Set=s(Jie);M3o=r(Set,"Wav2Vec2ForMaskedLM"),Set.forEach(t),E3o=r(H0e," (Wav2Vec2 model)"),H0e.forEach(t),C3o=i(H),q2=n(H,"LI",{});var U0e=s(q2);Yie=n(U0e,"STRONG",{});var Ret=s(Yie);w3o=r(Ret,"xlm"),Ret.forEach(t),A3o=r(U0e," \u2014 "),Fj=n(U0e,"A",{href:!0});var Bet=s(Fj);y3o=r(Bet,"XLMWithLMHeadModel"),Bet.forEach(t),L3o=r(U0e," (XLM model)"),U0e.forEach(t),x3o=i(H),N2=n(H,"LI",{});var J0e=s(N2);Kie=n(J0e,"STRONG",{});var Pet=s(Kie);$3o=r(Pet,"xlm-roberta"),Pet.forEach(t),k3o=r(J0e," \u2014 "),Tj=n(J0e,"A",{href:!0});var Iet=s(Tj);S3o=r(Iet,"XLMRobertaForMaskedLM"),Iet.forEach(t),R3o=r(J0e," (XLM-RoBERTa model)"),J0e.forEach(t),B3o=i(H),j2=n(H,"LI",{});var Y0e=s(j2);Zie=n(Y0e,"STRONG",{});var qet=s(Zie);P3o=r(qet,"xlm-roberta-xl"),qet.forEach(t),I3o=r(Y0e," \u2014 "),Mj=n(Y0e,"A",{href:!0});var Net=s(Mj);q3o=r(Net,"XLMRobertaXLForMaskedLM"),Net.forEach(t),N3o=r(Y0e," (XLM-RoBERTa-XL model)"),Y0e.forEach(t),j3o=i(H),D2=n(H,"LI",{});var K0e=s(D2);ede=n(K0e,"STRONG",{});var jet=s(ede);D3o=r(jet,"yoso"),jet.forEach(t),G3o=r(K0e," \u2014 "),Ej=n(K0e,"A",{href:!0});var Det=s(Ej);O3o=r(Det,"YosoForMaskedLM"),Det.forEach(t),V3o=r(K0e," (YOSO model)"),K0e.forEach(t),H.forEach(t),X3o=i(ra),G2=n(ra,"P",{});var Z0e=s(G2);z3o=r(Z0e,"The model is set in evaluation mode by default using "),ode=n(Z0e,"CODE",{});var Get=s(ode);Q3o=r(Get,"model.eval()"),Get.forEach(t),W3o=r(Z0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rde=n(Z0e,"CODE",{});var Oet=s(rde);H3o=r(Oet,"model.train()"),Oet.forEach(t),Z0e.forEach(t),U3o=i(ra),T(O2.$$.fragment,ra),ra.forEach(t),Os.forEach(t),CPe=i(f),Ri=n(f,"H2",{class:!0});var Lqe=s(Ri);V2=n(Lqe,"A",{id:!0,class:!0,href:!0});var Vet=s(V2);tde=n(Vet,"SPAN",{});var Xet=s(tde);T(R0.$$.fragment,Xet),Xet.forEach(t),Vet.forEach(t),J3o=i(Lqe),ade=n(Lqe,"SPAN",{});var zet=s(ade);Y3o=r(zet,"AutoModelForSeq2SeqLM"),zet.forEach(t),Lqe.forEach(t),wPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(B0.$$.fragment,Vs),K3o=i(Vs),Bi=n(Vs,"P",{});var YY=s(Bi);Z3o=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Cj=n(YY,"A",{href:!0});var Qet=s(Cj);ewo=r(Qet,"from_pretrained()"),Qet.forEach(t),owo=r(YY," class method or the "),wj=n(YY,"A",{href:!0});var Wet=s(wj);rwo=r(Wet,"from_config()"),Wet.forEach(t),two=r(YY,` class
method.`),YY.forEach(t),awo=i(Vs),P0=n(Vs,"P",{});var xqe=s(P0);nwo=r(xqe,"This class cannot be instantiated directly using "),nde=n(xqe,"CODE",{});var Het=s(nde);swo=r(Het,"__init__()"),Het.forEach(t),lwo=r(xqe," (throws an error)."),xqe.forEach(t),iwo=i(Vs),nt=n(Vs,"DIV",{class:!0});var K3=s(nt);T(I0.$$.fragment,K3),dwo=i(K3),sde=n(K3,"P",{});var Uet=s(sde);cwo=r(Uet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Uet.forEach(t),fwo=i(K3),Pi=n(K3,"P",{});var KY=s(Pi);mwo=r(KY,`Note:
Loading a model from its configuration file does `),lde=n(KY,"STRONG",{});var Jet=s(lde);gwo=r(Jet,"not"),Jet.forEach(t),hwo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Aj=n(KY,"A",{href:!0});var Yet=s(Aj);pwo=r(Yet,"from_pretrained()"),Yet.forEach(t),uwo=r(KY," to load the model weights."),KY.forEach(t),_wo=i(K3),T(X2.$$.fragment,K3),K3.forEach(t),bwo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(q0.$$.fragment,ta),vwo=i(ta),ide=n(ta,"P",{});var Ket=s(ide);Fwo=r(Ket,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ket.forEach(t),Two=i(ta),$a=n(ta,"P",{});var Z3=s($a);Mwo=r(Z3,"The model class to instantiate is selected based on the "),dde=n(Z3,"CODE",{});var Zet=s(dde);Ewo=r(Zet,"model_type"),Zet.forEach(t),Cwo=r(Z3,` property of the config object (either
passed as an argument or loaded from `),cde=n(Z3,"CODE",{});var eot=s(cde);wwo=r(eot,"pretrained_model_name_or_path"),eot.forEach(t),Awo=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=n(Z3,"CODE",{});var oot=s(fde);ywo=r(oot,"pretrained_model_name_or_path"),oot.forEach(t),Lwo=r(Z3,":"),Z3.forEach(t),xwo=i(ta),he=n(ta,"UL",{});var ue=s(he);z2=n(ue,"LI",{});var eye=s(z2);mde=n(eye,"STRONG",{});var rot=s(mde);$wo=r(rot,"bart"),rot.forEach(t),kwo=r(eye," \u2014 "),yj=n(eye,"A",{href:!0});var tot=s(yj);Swo=r(tot,"BartForConditionalGeneration"),tot.forEach(t),Rwo=r(eye," (BART model)"),eye.forEach(t),Bwo=i(ue),Q2=n(ue,"LI",{});var oye=s(Q2);gde=n(oye,"STRONG",{});var aot=s(gde);Pwo=r(aot,"bigbird_pegasus"),aot.forEach(t),Iwo=r(oye," \u2014 "),Lj=n(oye,"A",{href:!0});var not=s(Lj);qwo=r(not,"BigBirdPegasusForConditionalGeneration"),not.forEach(t),Nwo=r(oye," (BigBirdPegasus model)"),oye.forEach(t),jwo=i(ue),W2=n(ue,"LI",{});var rye=s(W2);hde=n(rye,"STRONG",{});var sot=s(hde);Dwo=r(sot,"blenderbot"),sot.forEach(t),Gwo=r(rye," \u2014 "),xj=n(rye,"A",{href:!0});var lot=s(xj);Owo=r(lot,"BlenderbotForConditionalGeneration"),lot.forEach(t),Vwo=r(rye," (Blenderbot model)"),rye.forEach(t),Xwo=i(ue),H2=n(ue,"LI",{});var tye=s(H2);pde=n(tye,"STRONG",{});var iot=s(pde);zwo=r(iot,"blenderbot-small"),iot.forEach(t),Qwo=r(tye," \u2014 "),$j=n(tye,"A",{href:!0});var dot=s($j);Wwo=r(dot,"BlenderbotSmallForConditionalGeneration"),dot.forEach(t),Hwo=r(tye," (BlenderbotSmall model)"),tye.forEach(t),Uwo=i(ue),U2=n(ue,"LI",{});var aye=s(U2);ude=n(aye,"STRONG",{});var cot=s(ude);Jwo=r(cot,"encoder-decoder"),cot.forEach(t),Ywo=r(aye," \u2014 "),kj=n(aye,"A",{href:!0});var fot=s(kj);Kwo=r(fot,"EncoderDecoderModel"),fot.forEach(t),Zwo=r(aye," (Encoder decoder model)"),aye.forEach(t),eAo=i(ue),J2=n(ue,"LI",{});var nye=s(J2);_de=n(nye,"STRONG",{});var mot=s(_de);oAo=r(mot,"fsmt"),mot.forEach(t),rAo=r(nye," \u2014 "),Sj=n(nye,"A",{href:!0});var got=s(Sj);tAo=r(got,"FSMTForConditionalGeneration"),got.forEach(t),aAo=r(nye," (FairSeq Machine-Translation model)"),nye.forEach(t),nAo=i(ue),Y2=n(ue,"LI",{});var sye=s(Y2);bde=n(sye,"STRONG",{});var hot=s(bde);sAo=r(hot,"led"),hot.forEach(t),lAo=r(sye," \u2014 "),Rj=n(sye,"A",{href:!0});var pot=s(Rj);iAo=r(pot,"LEDForConditionalGeneration"),pot.forEach(t),dAo=r(sye," (LED model)"),sye.forEach(t),cAo=i(ue),K2=n(ue,"LI",{});var lye=s(K2);vde=n(lye,"STRONG",{});var uot=s(vde);fAo=r(uot,"m2m_100"),uot.forEach(t),mAo=r(lye," \u2014 "),Bj=n(lye,"A",{href:!0});var _ot=s(Bj);gAo=r(_ot,"M2M100ForConditionalGeneration"),_ot.forEach(t),hAo=r(lye," (M2M100 model)"),lye.forEach(t),pAo=i(ue),Z2=n(ue,"LI",{});var iye=s(Z2);Fde=n(iye,"STRONG",{});var bot=s(Fde);uAo=r(bot,"marian"),bot.forEach(t),_Ao=r(iye," \u2014 "),Pj=n(iye,"A",{href:!0});var vot=s(Pj);bAo=r(vot,"MarianMTModel"),vot.forEach(t),vAo=r(iye," (Marian model)"),iye.forEach(t),FAo=i(ue),e1=n(ue,"LI",{});var dye=s(e1);Tde=n(dye,"STRONG",{});var Fot=s(Tde);TAo=r(Fot,"mbart"),Fot.forEach(t),MAo=r(dye," \u2014 "),Ij=n(dye,"A",{href:!0});var Tot=s(Ij);EAo=r(Tot,"MBartForConditionalGeneration"),Tot.forEach(t),CAo=r(dye," (mBART model)"),dye.forEach(t),wAo=i(ue),o1=n(ue,"LI",{});var cye=s(o1);Mde=n(cye,"STRONG",{});var Mot=s(Mde);AAo=r(Mot,"mt5"),Mot.forEach(t),yAo=r(cye," \u2014 "),qj=n(cye,"A",{href:!0});var Eot=s(qj);LAo=r(Eot,"MT5ForConditionalGeneration"),Eot.forEach(t),xAo=r(cye," (mT5 model)"),cye.forEach(t),$Ao=i(ue),r1=n(ue,"LI",{});var fye=s(r1);Ede=n(fye,"STRONG",{});var Cot=s(Ede);kAo=r(Cot,"pegasus"),Cot.forEach(t),SAo=r(fye," \u2014 "),Nj=n(fye,"A",{href:!0});var wot=s(Nj);RAo=r(wot,"PegasusForConditionalGeneration"),wot.forEach(t),BAo=r(fye," (Pegasus model)"),fye.forEach(t),PAo=i(ue),t1=n(ue,"LI",{});var mye=s(t1);Cde=n(mye,"STRONG",{});var Aot=s(Cde);IAo=r(Aot,"plbart"),Aot.forEach(t),qAo=r(mye," \u2014 "),jj=n(mye,"A",{href:!0});var yot=s(jj);NAo=r(yot,"PLBartForConditionalGeneration"),yot.forEach(t),jAo=r(mye," (PLBart model)"),mye.forEach(t),DAo=i(ue),a1=n(ue,"LI",{});var gye=s(a1);wde=n(gye,"STRONG",{});var Lot=s(wde);GAo=r(Lot,"prophetnet"),Lot.forEach(t),OAo=r(gye," \u2014 "),Dj=n(gye,"A",{href:!0});var xot=s(Dj);VAo=r(xot,"ProphetNetForConditionalGeneration"),xot.forEach(t),XAo=r(gye," (ProphetNet model)"),gye.forEach(t),zAo=i(ue),n1=n(ue,"LI",{});var hye=s(n1);Ade=n(hye,"STRONG",{});var $ot=s(Ade);QAo=r($ot,"t5"),$ot.forEach(t),WAo=r(hye," \u2014 "),Gj=n(hye,"A",{href:!0});var kot=s(Gj);HAo=r(kot,"T5ForConditionalGeneration"),kot.forEach(t),UAo=r(hye," (T5 model)"),hye.forEach(t),JAo=i(ue),s1=n(ue,"LI",{});var pye=s(s1);yde=n(pye,"STRONG",{});var Sot=s(yde);YAo=r(Sot,"tapex"),Sot.forEach(t),KAo=r(pye," \u2014 "),Oj=n(pye,"A",{href:!0});var Rot=s(Oj);ZAo=r(Rot,"BartForConditionalGeneration"),Rot.forEach(t),e0o=r(pye," (TAPEX model)"),pye.forEach(t),o0o=i(ue),l1=n(ue,"LI",{});var uye=s(l1);Lde=n(uye,"STRONG",{});var Bot=s(Lde);r0o=r(Bot,"xlm-prophetnet"),Bot.forEach(t),t0o=r(uye," \u2014 "),Vj=n(uye,"A",{href:!0});var Pot=s(Vj);a0o=r(Pot,"XLMProphetNetForConditionalGeneration"),Pot.forEach(t),n0o=r(uye," (XLMProphetNet model)"),uye.forEach(t),ue.forEach(t),s0o=i(ta),i1=n(ta,"P",{});var _ye=s(i1);l0o=r(_ye,"The model is set in evaluation mode by default using "),xde=n(_ye,"CODE",{});var Iot=s(xde);i0o=r(Iot,"model.eval()"),Iot.forEach(t),d0o=r(_ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$de=n(_ye,"CODE",{});var qot=s($de);c0o=r(qot,"model.train()"),qot.forEach(t),_ye.forEach(t),f0o=i(ta),T(d1.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),APe=i(f),Ii=n(f,"H2",{class:!0});var $qe=s(Ii);c1=n($qe,"A",{id:!0,class:!0,href:!0});var Not=s(c1);kde=n(Not,"SPAN",{});var jot=s(kde);T(N0.$$.fragment,jot),jot.forEach(t),Not.forEach(t),m0o=i($qe),Sde=n($qe,"SPAN",{});var Dot=s(Sde);g0o=r(Dot,"AutoModelForSequenceClassification"),Dot.forEach(t),$qe.forEach(t),yPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(j0.$$.fragment,Xs),h0o=i(Xs),qi=n(Xs,"P",{});var ZY=s(qi);p0o=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xj=n(ZY,"A",{href:!0});var Got=s(Xj);u0o=r(Got,"from_pretrained()"),Got.forEach(t),_0o=r(ZY," class method or the "),zj=n(ZY,"A",{href:!0});var Oot=s(zj);b0o=r(Oot,"from_config()"),Oot.forEach(t),v0o=r(ZY,` class
method.`),ZY.forEach(t),F0o=i(Xs),D0=n(Xs,"P",{});var kqe=s(D0);T0o=r(kqe,"This class cannot be instantiated directly using "),Rde=n(kqe,"CODE",{});var Vot=s(Rde);M0o=r(Vot,"__init__()"),Vot.forEach(t),E0o=r(kqe," (throws an error)."),kqe.forEach(t),C0o=i(Xs),st=n(Xs,"DIV",{class:!0});var ew=s(st);T(G0.$$.fragment,ew),w0o=i(ew),Bde=n(ew,"P",{});var Xot=s(Bde);A0o=r(Xot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Xot.forEach(t),y0o=i(ew),Ni=n(ew,"P",{});var eK=s(Ni);L0o=r(eK,`Note:
Loading a model from its configuration file does `),Pde=n(eK,"STRONG",{});var zot=s(Pde);x0o=r(zot,"not"),zot.forEach(t),$0o=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n(eK,"A",{href:!0});var Qot=s(Qj);k0o=r(Qot,"from_pretrained()"),Qot.forEach(t),S0o=r(eK," to load the model weights."),eK.forEach(t),R0o=i(ew),T(f1.$$.fragment,ew),ew.forEach(t),B0o=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(O0.$$.fragment,aa),P0o=i(aa),Ide=n(aa,"P",{});var Wot=s(Ide);I0o=r(Wot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wot.forEach(t),q0o=i(aa),ka=n(aa,"P",{});var ow=s(ka);N0o=r(ow,"The model class to instantiate is selected based on the "),qde=n(ow,"CODE",{});var Hot=s(qde);j0o=r(Hot,"model_type"),Hot.forEach(t),D0o=r(ow,` property of the config object (either
passed as an argument or loaded from `),Nde=n(ow,"CODE",{});var Uot=s(Nde);G0o=r(Uot,"pretrained_model_name_or_path"),Uot.forEach(t),O0o=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jde=n(ow,"CODE",{});var Jot=s(jde);V0o=r(Jot,"pretrained_model_name_or_path"),Jot.forEach(t),X0o=r(ow,":"),ow.forEach(t),z0o=i(aa),q=n(aa,"UL",{});var N=s(q);m1=n(N,"LI",{});var bye=s(m1);Dde=n(bye,"STRONG",{});var Yot=s(Dde);Q0o=r(Yot,"albert"),Yot.forEach(t),W0o=r(bye," \u2014 "),Wj=n(bye,"A",{href:!0});var Kot=s(Wj);H0o=r(Kot,"AlbertForSequenceClassification"),Kot.forEach(t),U0o=r(bye," (ALBERT model)"),bye.forEach(t),J0o=i(N),g1=n(N,"LI",{});var vye=s(g1);Gde=n(vye,"STRONG",{});var Zot=s(Gde);Y0o=r(Zot,"bart"),Zot.forEach(t),K0o=r(vye," \u2014 "),Hj=n(vye,"A",{href:!0});var ert=s(Hj);Z0o=r(ert,"BartForSequenceClassification"),ert.forEach(t),eyo=r(vye," (BART model)"),vye.forEach(t),oyo=i(N),h1=n(N,"LI",{});var Fye=s(h1);Ode=n(Fye,"STRONG",{});var ort=s(Ode);ryo=r(ort,"bert"),ort.forEach(t),tyo=r(Fye," \u2014 "),Uj=n(Fye,"A",{href:!0});var rrt=s(Uj);ayo=r(rrt,"BertForSequenceClassification"),rrt.forEach(t),nyo=r(Fye," (BERT model)"),Fye.forEach(t),syo=i(N),p1=n(N,"LI",{});var Tye=s(p1);Vde=n(Tye,"STRONG",{});var trt=s(Vde);lyo=r(trt,"big_bird"),trt.forEach(t),iyo=r(Tye," \u2014 "),Jj=n(Tye,"A",{href:!0});var art=s(Jj);dyo=r(art,"BigBirdForSequenceClassification"),art.forEach(t),cyo=r(Tye," (BigBird model)"),Tye.forEach(t),fyo=i(N),u1=n(N,"LI",{});var Mye=s(u1);Xde=n(Mye,"STRONG",{});var nrt=s(Xde);myo=r(nrt,"bigbird_pegasus"),nrt.forEach(t),gyo=r(Mye," \u2014 "),Yj=n(Mye,"A",{href:!0});var srt=s(Yj);hyo=r(srt,"BigBirdPegasusForSequenceClassification"),srt.forEach(t),pyo=r(Mye," (BigBirdPegasus model)"),Mye.forEach(t),uyo=i(N),_1=n(N,"LI",{});var Eye=s(_1);zde=n(Eye,"STRONG",{});var lrt=s(zde);_yo=r(lrt,"camembert"),lrt.forEach(t),byo=r(Eye," \u2014 "),Kj=n(Eye,"A",{href:!0});var irt=s(Kj);vyo=r(irt,"CamembertForSequenceClassification"),irt.forEach(t),Fyo=r(Eye," (CamemBERT model)"),Eye.forEach(t),Tyo=i(N),b1=n(N,"LI",{});var Cye=s(b1);Qde=n(Cye,"STRONG",{});var drt=s(Qde);Myo=r(drt,"canine"),drt.forEach(t),Eyo=r(Cye," \u2014 "),Zj=n(Cye,"A",{href:!0});var crt=s(Zj);Cyo=r(crt,"CanineForSequenceClassification"),crt.forEach(t),wyo=r(Cye," (Canine model)"),Cye.forEach(t),Ayo=i(N),v1=n(N,"LI",{});var wye=s(v1);Wde=n(wye,"STRONG",{});var frt=s(Wde);yyo=r(frt,"convbert"),frt.forEach(t),Lyo=r(wye," \u2014 "),eD=n(wye,"A",{href:!0});var mrt=s(eD);xyo=r(mrt,"ConvBertForSequenceClassification"),mrt.forEach(t),$yo=r(wye," (ConvBERT model)"),wye.forEach(t),kyo=i(N),F1=n(N,"LI",{});var Aye=s(F1);Hde=n(Aye,"STRONG",{});var grt=s(Hde);Syo=r(grt,"ctrl"),grt.forEach(t),Ryo=r(Aye," \u2014 "),oD=n(Aye,"A",{href:!0});var hrt=s(oD);Byo=r(hrt,"CTRLForSequenceClassification"),hrt.forEach(t),Pyo=r(Aye," (CTRL model)"),Aye.forEach(t),Iyo=i(N),T1=n(N,"LI",{});var yye=s(T1);Ude=n(yye,"STRONG",{});var prt=s(Ude);qyo=r(prt,"data2vec-text"),prt.forEach(t),Nyo=r(yye," \u2014 "),rD=n(yye,"A",{href:!0});var urt=s(rD);jyo=r(urt,"Data2VecTextForSequenceClassification"),urt.forEach(t),Dyo=r(yye," (Data2VecText model)"),yye.forEach(t),Gyo=i(N),M1=n(N,"LI",{});var Lye=s(M1);Jde=n(Lye,"STRONG",{});var _rt=s(Jde);Oyo=r(_rt,"deberta"),_rt.forEach(t),Vyo=r(Lye," \u2014 "),tD=n(Lye,"A",{href:!0});var brt=s(tD);Xyo=r(brt,"DebertaForSequenceClassification"),brt.forEach(t),zyo=r(Lye," (DeBERTa model)"),Lye.forEach(t),Qyo=i(N),E1=n(N,"LI",{});var xye=s(E1);Yde=n(xye,"STRONG",{});var vrt=s(Yde);Wyo=r(vrt,"deberta-v2"),vrt.forEach(t),Hyo=r(xye," \u2014 "),aD=n(xye,"A",{href:!0});var Frt=s(aD);Uyo=r(Frt,"DebertaV2ForSequenceClassification"),Frt.forEach(t),Jyo=r(xye," (DeBERTa-v2 model)"),xye.forEach(t),Yyo=i(N),C1=n(N,"LI",{});var $ye=s(C1);Kde=n($ye,"STRONG",{});var Trt=s(Kde);Kyo=r(Trt,"distilbert"),Trt.forEach(t),Zyo=r($ye," \u2014 "),nD=n($ye,"A",{href:!0});var Mrt=s(nD);eLo=r(Mrt,"DistilBertForSequenceClassification"),Mrt.forEach(t),oLo=r($ye," (DistilBERT model)"),$ye.forEach(t),rLo=i(N),w1=n(N,"LI",{});var kye=s(w1);Zde=n(kye,"STRONG",{});var Ert=s(Zde);tLo=r(Ert,"electra"),Ert.forEach(t),aLo=r(kye," \u2014 "),sD=n(kye,"A",{href:!0});var Crt=s(sD);nLo=r(Crt,"ElectraForSequenceClassification"),Crt.forEach(t),sLo=r(kye," (ELECTRA model)"),kye.forEach(t),lLo=i(N),A1=n(N,"LI",{});var Sye=s(A1);ece=n(Sye,"STRONG",{});var wrt=s(ece);iLo=r(wrt,"flaubert"),wrt.forEach(t),dLo=r(Sye," \u2014 "),lD=n(Sye,"A",{href:!0});var Art=s(lD);cLo=r(Art,"FlaubertForSequenceClassification"),Art.forEach(t),fLo=r(Sye," (FlauBERT model)"),Sye.forEach(t),mLo=i(N),y1=n(N,"LI",{});var Rye=s(y1);oce=n(Rye,"STRONG",{});var yrt=s(oce);gLo=r(yrt,"fnet"),yrt.forEach(t),hLo=r(Rye," \u2014 "),iD=n(Rye,"A",{href:!0});var Lrt=s(iD);pLo=r(Lrt,"FNetForSequenceClassification"),Lrt.forEach(t),uLo=r(Rye," (FNet model)"),Rye.forEach(t),_Lo=i(N),L1=n(N,"LI",{});var Bye=s(L1);rce=n(Bye,"STRONG",{});var xrt=s(rce);bLo=r(xrt,"funnel"),xrt.forEach(t),vLo=r(Bye," \u2014 "),dD=n(Bye,"A",{href:!0});var $rt=s(dD);FLo=r($rt,"FunnelForSequenceClassification"),$rt.forEach(t),TLo=r(Bye," (Funnel Transformer model)"),Bye.forEach(t),MLo=i(N),x1=n(N,"LI",{});var Pye=s(x1);tce=n(Pye,"STRONG",{});var krt=s(tce);ELo=r(krt,"gpt2"),krt.forEach(t),CLo=r(Pye," \u2014 "),cD=n(Pye,"A",{href:!0});var Srt=s(cD);wLo=r(Srt,"GPT2ForSequenceClassification"),Srt.forEach(t),ALo=r(Pye," (OpenAI GPT-2 model)"),Pye.forEach(t),yLo=i(N),$1=n(N,"LI",{});var Iye=s($1);ace=n(Iye,"STRONG",{});var Rrt=s(ace);LLo=r(Rrt,"gpt_neo"),Rrt.forEach(t),xLo=r(Iye," \u2014 "),fD=n(Iye,"A",{href:!0});var Brt=s(fD);$Lo=r(Brt,"GPTNeoForSequenceClassification"),Brt.forEach(t),kLo=r(Iye," (GPT Neo model)"),Iye.forEach(t),SLo=i(N),k1=n(N,"LI",{});var qye=s(k1);nce=n(qye,"STRONG",{});var Prt=s(nce);RLo=r(Prt,"gptj"),Prt.forEach(t),BLo=r(qye," \u2014 "),mD=n(qye,"A",{href:!0});var Irt=s(mD);PLo=r(Irt,"GPTJForSequenceClassification"),Irt.forEach(t),ILo=r(qye," (GPT-J model)"),qye.forEach(t),qLo=i(N),S1=n(N,"LI",{});var Nye=s(S1);sce=n(Nye,"STRONG",{});var qrt=s(sce);NLo=r(qrt,"ibert"),qrt.forEach(t),jLo=r(Nye," \u2014 "),gD=n(Nye,"A",{href:!0});var Nrt=s(gD);DLo=r(Nrt,"IBertForSequenceClassification"),Nrt.forEach(t),GLo=r(Nye," (I-BERT model)"),Nye.forEach(t),OLo=i(N),R1=n(N,"LI",{});var jye=s(R1);lce=n(jye,"STRONG",{});var jrt=s(lce);VLo=r(jrt,"layoutlm"),jrt.forEach(t),XLo=r(jye," \u2014 "),hD=n(jye,"A",{href:!0});var Drt=s(hD);zLo=r(Drt,"LayoutLMForSequenceClassification"),Drt.forEach(t),QLo=r(jye," (LayoutLM model)"),jye.forEach(t),WLo=i(N),B1=n(N,"LI",{});var Dye=s(B1);ice=n(Dye,"STRONG",{});var Grt=s(ice);HLo=r(Grt,"layoutlmv2"),Grt.forEach(t),ULo=r(Dye," \u2014 "),pD=n(Dye,"A",{href:!0});var Ort=s(pD);JLo=r(Ort,"LayoutLMv2ForSequenceClassification"),Ort.forEach(t),YLo=r(Dye," (LayoutLMv2 model)"),Dye.forEach(t),KLo=i(N),P1=n(N,"LI",{});var Gye=s(P1);dce=n(Gye,"STRONG",{});var Vrt=s(dce);ZLo=r(Vrt,"led"),Vrt.forEach(t),e8o=r(Gye," \u2014 "),uD=n(Gye,"A",{href:!0});var Xrt=s(uD);o8o=r(Xrt,"LEDForSequenceClassification"),Xrt.forEach(t),r8o=r(Gye," (LED model)"),Gye.forEach(t),t8o=i(N),I1=n(N,"LI",{});var Oye=s(I1);cce=n(Oye,"STRONG",{});var zrt=s(cce);a8o=r(zrt,"longformer"),zrt.forEach(t),n8o=r(Oye," \u2014 "),_D=n(Oye,"A",{href:!0});var Qrt=s(_D);s8o=r(Qrt,"LongformerForSequenceClassification"),Qrt.forEach(t),l8o=r(Oye," (Longformer model)"),Oye.forEach(t),i8o=i(N),q1=n(N,"LI",{});var Vye=s(q1);fce=n(Vye,"STRONG",{});var Wrt=s(fce);d8o=r(Wrt,"mbart"),Wrt.forEach(t),c8o=r(Vye," \u2014 "),bD=n(Vye,"A",{href:!0});var Hrt=s(bD);f8o=r(Hrt,"MBartForSequenceClassification"),Hrt.forEach(t),m8o=r(Vye," (mBART model)"),Vye.forEach(t),g8o=i(N),N1=n(N,"LI",{});var Xye=s(N1);mce=n(Xye,"STRONG",{});var Urt=s(mce);h8o=r(Urt,"megatron-bert"),Urt.forEach(t),p8o=r(Xye," \u2014 "),vD=n(Xye,"A",{href:!0});var Jrt=s(vD);u8o=r(Jrt,"MegatronBertForSequenceClassification"),Jrt.forEach(t),_8o=r(Xye," (MegatronBert model)"),Xye.forEach(t),b8o=i(N),j1=n(N,"LI",{});var zye=s(j1);gce=n(zye,"STRONG",{});var Yrt=s(gce);v8o=r(Yrt,"mobilebert"),Yrt.forEach(t),F8o=r(zye," \u2014 "),FD=n(zye,"A",{href:!0});var Krt=s(FD);T8o=r(Krt,"MobileBertForSequenceClassification"),Krt.forEach(t),M8o=r(zye," (MobileBERT model)"),zye.forEach(t),E8o=i(N),D1=n(N,"LI",{});var Qye=s(D1);hce=n(Qye,"STRONG",{});var Zrt=s(hce);C8o=r(Zrt,"mpnet"),Zrt.forEach(t),w8o=r(Qye," \u2014 "),TD=n(Qye,"A",{href:!0});var ett=s(TD);A8o=r(ett,"MPNetForSequenceClassification"),ett.forEach(t),y8o=r(Qye," (MPNet model)"),Qye.forEach(t),L8o=i(N),G1=n(N,"LI",{});var Wye=s(G1);pce=n(Wye,"STRONG",{});var ott=s(pce);x8o=r(ott,"nystromformer"),ott.forEach(t),$8o=r(Wye," \u2014 "),MD=n(Wye,"A",{href:!0});var rtt=s(MD);k8o=r(rtt,"NystromformerForSequenceClassification"),rtt.forEach(t),S8o=r(Wye," (Nystromformer model)"),Wye.forEach(t),R8o=i(N),O1=n(N,"LI",{});var Hye=s(O1);uce=n(Hye,"STRONG",{});var ttt=s(uce);B8o=r(ttt,"openai-gpt"),ttt.forEach(t),P8o=r(Hye," \u2014 "),ED=n(Hye,"A",{href:!0});var att=s(ED);I8o=r(att,"OpenAIGPTForSequenceClassification"),att.forEach(t),q8o=r(Hye," (OpenAI GPT model)"),Hye.forEach(t),N8o=i(N),V1=n(N,"LI",{});var Uye=s(V1);_ce=n(Uye,"STRONG",{});var ntt=s(_ce);j8o=r(ntt,"perceiver"),ntt.forEach(t),D8o=r(Uye," \u2014 "),CD=n(Uye,"A",{href:!0});var stt=s(CD);G8o=r(stt,"PerceiverForSequenceClassification"),stt.forEach(t),O8o=r(Uye," (Perceiver model)"),Uye.forEach(t),V8o=i(N),X1=n(N,"LI",{});var Jye=s(X1);bce=n(Jye,"STRONG",{});var ltt=s(bce);X8o=r(ltt,"plbart"),ltt.forEach(t),z8o=r(Jye," \u2014 "),wD=n(Jye,"A",{href:!0});var itt=s(wD);Q8o=r(itt,"PLBartForSequenceClassification"),itt.forEach(t),W8o=r(Jye," (PLBart model)"),Jye.forEach(t),H8o=i(N),z1=n(N,"LI",{});var Yye=s(z1);vce=n(Yye,"STRONG",{});var dtt=s(vce);U8o=r(dtt,"qdqbert"),dtt.forEach(t),J8o=r(Yye," \u2014 "),AD=n(Yye,"A",{href:!0});var ctt=s(AD);Y8o=r(ctt,"QDQBertForSequenceClassification"),ctt.forEach(t),K8o=r(Yye," (QDQBert model)"),Yye.forEach(t),Z8o=i(N),Q1=n(N,"LI",{});var Kye=s(Q1);Fce=n(Kye,"STRONG",{});var ftt=s(Fce);exo=r(ftt,"reformer"),ftt.forEach(t),oxo=r(Kye," \u2014 "),yD=n(Kye,"A",{href:!0});var mtt=s(yD);rxo=r(mtt,"ReformerForSequenceClassification"),mtt.forEach(t),txo=r(Kye," (Reformer model)"),Kye.forEach(t),axo=i(N),W1=n(N,"LI",{});var Zye=s(W1);Tce=n(Zye,"STRONG",{});var gtt=s(Tce);nxo=r(gtt,"rembert"),gtt.forEach(t),sxo=r(Zye," \u2014 "),LD=n(Zye,"A",{href:!0});var htt=s(LD);lxo=r(htt,"RemBertForSequenceClassification"),htt.forEach(t),ixo=r(Zye," (RemBERT model)"),Zye.forEach(t),dxo=i(N),H1=n(N,"LI",{});var eLe=s(H1);Mce=n(eLe,"STRONG",{});var ptt=s(Mce);cxo=r(ptt,"roberta"),ptt.forEach(t),fxo=r(eLe," \u2014 "),xD=n(eLe,"A",{href:!0});var utt=s(xD);mxo=r(utt,"RobertaForSequenceClassification"),utt.forEach(t),gxo=r(eLe," (RoBERTa model)"),eLe.forEach(t),hxo=i(N),U1=n(N,"LI",{});var oLe=s(U1);Ece=n(oLe,"STRONG",{});var _tt=s(Ece);pxo=r(_tt,"roformer"),_tt.forEach(t),uxo=r(oLe," \u2014 "),$D=n(oLe,"A",{href:!0});var btt=s($D);_xo=r(btt,"RoFormerForSequenceClassification"),btt.forEach(t),bxo=r(oLe," (RoFormer model)"),oLe.forEach(t),vxo=i(N),J1=n(N,"LI",{});var rLe=s(J1);Cce=n(rLe,"STRONG",{});var vtt=s(Cce);Fxo=r(vtt,"squeezebert"),vtt.forEach(t),Txo=r(rLe," \u2014 "),kD=n(rLe,"A",{href:!0});var Ftt=s(kD);Mxo=r(Ftt,"SqueezeBertForSequenceClassification"),Ftt.forEach(t),Exo=r(rLe," (SqueezeBERT model)"),rLe.forEach(t),Cxo=i(N),Y1=n(N,"LI",{});var tLe=s(Y1);wce=n(tLe,"STRONG",{});var Ttt=s(wce);wxo=r(Ttt,"tapas"),Ttt.forEach(t),Axo=r(tLe," \u2014 "),SD=n(tLe,"A",{href:!0});var Mtt=s(SD);yxo=r(Mtt,"TapasForSequenceClassification"),Mtt.forEach(t),Lxo=r(tLe," (TAPAS model)"),tLe.forEach(t),xxo=i(N),K1=n(N,"LI",{});var aLe=s(K1);Ace=n(aLe,"STRONG",{});var Ett=s(Ace);$xo=r(Ett,"tapex"),Ett.forEach(t),kxo=r(aLe," \u2014 "),RD=n(aLe,"A",{href:!0});var Ctt=s(RD);Sxo=r(Ctt,"BartForSequenceClassification"),Ctt.forEach(t),Rxo=r(aLe," (TAPEX model)"),aLe.forEach(t),Bxo=i(N),Z1=n(N,"LI",{});var nLe=s(Z1);yce=n(nLe,"STRONG",{});var wtt=s(yce);Pxo=r(wtt,"transfo-xl"),wtt.forEach(t),Ixo=r(nLe," \u2014 "),BD=n(nLe,"A",{href:!0});var Att=s(BD);qxo=r(Att,"TransfoXLForSequenceClassification"),Att.forEach(t),Nxo=r(nLe," (Transformer-XL model)"),nLe.forEach(t),jxo=i(N),eb=n(N,"LI",{});var sLe=s(eb);Lce=n(sLe,"STRONG",{});var ytt=s(Lce);Dxo=r(ytt,"xlm"),ytt.forEach(t),Gxo=r(sLe," \u2014 "),PD=n(sLe,"A",{href:!0});var Ltt=s(PD);Oxo=r(Ltt,"XLMForSequenceClassification"),Ltt.forEach(t),Vxo=r(sLe," (XLM model)"),sLe.forEach(t),Xxo=i(N),ob=n(N,"LI",{});var lLe=s(ob);xce=n(lLe,"STRONG",{});var xtt=s(xce);zxo=r(xtt,"xlm-roberta"),xtt.forEach(t),Qxo=r(lLe," \u2014 "),ID=n(lLe,"A",{href:!0});var $tt=s(ID);Wxo=r($tt,"XLMRobertaForSequenceClassification"),$tt.forEach(t),Hxo=r(lLe," (XLM-RoBERTa model)"),lLe.forEach(t),Uxo=i(N),rb=n(N,"LI",{});var iLe=s(rb);$ce=n(iLe,"STRONG",{});var ktt=s($ce);Jxo=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),Yxo=r(iLe," \u2014 "),qD=n(iLe,"A",{href:!0});var Stt=s(qD);Kxo=r(Stt,"XLMRobertaXLForSequenceClassification"),Stt.forEach(t),Zxo=r(iLe," (XLM-RoBERTa-XL model)"),iLe.forEach(t),e7o=i(N),tb=n(N,"LI",{});var dLe=s(tb);kce=n(dLe,"STRONG",{});var Rtt=s(kce);o7o=r(Rtt,"xlnet"),Rtt.forEach(t),r7o=r(dLe," \u2014 "),ND=n(dLe,"A",{href:!0});var Btt=s(ND);t7o=r(Btt,"XLNetForSequenceClassification"),Btt.forEach(t),a7o=r(dLe," (XLNet model)"),dLe.forEach(t),n7o=i(N),ab=n(N,"LI",{});var cLe=s(ab);Sce=n(cLe,"STRONG",{});var Ptt=s(Sce);s7o=r(Ptt,"yoso"),Ptt.forEach(t),l7o=r(cLe," \u2014 "),jD=n(cLe,"A",{href:!0});var Itt=s(jD);i7o=r(Itt,"YosoForSequenceClassification"),Itt.forEach(t),d7o=r(cLe," (YOSO model)"),cLe.forEach(t),N.forEach(t),c7o=i(aa),nb=n(aa,"P",{});var fLe=s(nb);f7o=r(fLe,"The model is set in evaluation mode by default using "),Rce=n(fLe,"CODE",{});var qtt=s(Rce);m7o=r(qtt,"model.eval()"),qtt.forEach(t),g7o=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=n(fLe,"CODE",{});var Ntt=s(Bce);h7o=r(Ntt,"model.train()"),Ntt.forEach(t),fLe.forEach(t),p7o=i(aa),T(sb.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),LPe=i(f),ji=n(f,"H2",{class:!0});var Sqe=s(ji);lb=n(Sqe,"A",{id:!0,class:!0,href:!0});var jtt=s(lb);Pce=n(jtt,"SPAN",{});var Dtt=s(Pce);T(V0.$$.fragment,Dtt),Dtt.forEach(t),jtt.forEach(t),u7o=i(Sqe),Ice=n(Sqe,"SPAN",{});var Gtt=s(Ice);_7o=r(Gtt,"AutoModelForMultipleChoice"),Gtt.forEach(t),Sqe.forEach(t),xPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(X0.$$.fragment,zs),b7o=i(zs),Di=n(zs,"P",{});var oK=s(Di);v7o=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DD=n(oK,"A",{href:!0});var Ott=s(DD);F7o=r(Ott,"from_pretrained()"),Ott.forEach(t),T7o=r(oK," class method or the "),GD=n(oK,"A",{href:!0});var Vtt=s(GD);M7o=r(Vtt,"from_config()"),Vtt.forEach(t),E7o=r(oK,` class
method.`),oK.forEach(t),C7o=i(zs),z0=n(zs,"P",{});var Rqe=s(z0);w7o=r(Rqe,"This class cannot be instantiated directly using "),qce=n(Rqe,"CODE",{});var Xtt=s(qce);A7o=r(Xtt,"__init__()"),Xtt.forEach(t),y7o=r(Rqe," (throws an error)."),Rqe.forEach(t),L7o=i(zs),lt=n(zs,"DIV",{class:!0});var rw=s(lt);T(Q0.$$.fragment,rw),x7o=i(rw),Nce=n(rw,"P",{});var ztt=s(Nce);$7o=r(ztt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ztt.forEach(t),k7o=i(rw),Gi=n(rw,"P",{});var rK=s(Gi);S7o=r(rK,`Note:
Loading a model from its configuration file does `),jce=n(rK,"STRONG",{});var Qtt=s(jce);R7o=r(Qtt,"not"),Qtt.forEach(t),B7o=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(rK,"A",{href:!0});var Wtt=s(OD);P7o=r(Wtt,"from_pretrained()"),Wtt.forEach(t),I7o=r(rK," to load the model weights."),rK.forEach(t),q7o=i(rw),T(ib.$$.fragment,rw),rw.forEach(t),N7o=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(W0.$$.fragment,na),j7o=i(na),Dce=n(na,"P",{});var Htt=s(Dce);D7o=r(Htt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Htt.forEach(t),G7o=i(na),Sa=n(na,"P",{});var tw=s(Sa);O7o=r(tw,"The model class to instantiate is selected based on the "),Gce=n(tw,"CODE",{});var Utt=s(Gce);V7o=r(Utt,"model_type"),Utt.forEach(t),X7o=r(tw,` property of the config object (either
passed as an argument or loaded from `),Oce=n(tw,"CODE",{});var Jtt=s(Oce);z7o=r(Jtt,"pretrained_model_name_or_path"),Jtt.forEach(t),Q7o=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(tw,"CODE",{});var Ytt=s(Vce);W7o=r(Ytt,"pretrained_model_name_or_path"),Ytt.forEach(t),H7o=r(tw,":"),tw.forEach(t),U7o=i(na),Y=n(na,"UL",{});var K=s(Y);db=n(K,"LI",{});var mLe=s(db);Xce=n(mLe,"STRONG",{});var Ktt=s(Xce);J7o=r(Ktt,"albert"),Ktt.forEach(t),Y7o=r(mLe," \u2014 "),VD=n(mLe,"A",{href:!0});var Ztt=s(VD);K7o=r(Ztt,"AlbertForMultipleChoice"),Ztt.forEach(t),Z7o=r(mLe," (ALBERT model)"),mLe.forEach(t),e$o=i(K),cb=n(K,"LI",{});var gLe=s(cb);zce=n(gLe,"STRONG",{});var eat=s(zce);o$o=r(eat,"bert"),eat.forEach(t),r$o=r(gLe," \u2014 "),XD=n(gLe,"A",{href:!0});var oat=s(XD);t$o=r(oat,"BertForMultipleChoice"),oat.forEach(t),a$o=r(gLe," (BERT model)"),gLe.forEach(t),n$o=i(K),fb=n(K,"LI",{});var hLe=s(fb);Qce=n(hLe,"STRONG",{});var rat=s(Qce);s$o=r(rat,"big_bird"),rat.forEach(t),l$o=r(hLe," \u2014 "),zD=n(hLe,"A",{href:!0});var tat=s(zD);i$o=r(tat,"BigBirdForMultipleChoice"),tat.forEach(t),d$o=r(hLe," (BigBird model)"),hLe.forEach(t),c$o=i(K),mb=n(K,"LI",{});var pLe=s(mb);Wce=n(pLe,"STRONG",{});var aat=s(Wce);f$o=r(aat,"camembert"),aat.forEach(t),m$o=r(pLe," \u2014 "),QD=n(pLe,"A",{href:!0});var nat=s(QD);g$o=r(nat,"CamembertForMultipleChoice"),nat.forEach(t),h$o=r(pLe," (CamemBERT model)"),pLe.forEach(t),p$o=i(K),gb=n(K,"LI",{});var uLe=s(gb);Hce=n(uLe,"STRONG",{});var sat=s(Hce);u$o=r(sat,"canine"),sat.forEach(t),_$o=r(uLe," \u2014 "),WD=n(uLe,"A",{href:!0});var lat=s(WD);b$o=r(lat,"CanineForMultipleChoice"),lat.forEach(t),v$o=r(uLe," (Canine model)"),uLe.forEach(t),F$o=i(K),hb=n(K,"LI",{});var _Le=s(hb);Uce=n(_Le,"STRONG",{});var iat=s(Uce);T$o=r(iat,"convbert"),iat.forEach(t),M$o=r(_Le," \u2014 "),HD=n(_Le,"A",{href:!0});var dat=s(HD);E$o=r(dat,"ConvBertForMultipleChoice"),dat.forEach(t),C$o=r(_Le," (ConvBERT model)"),_Le.forEach(t),w$o=i(K),pb=n(K,"LI",{});var bLe=s(pb);Jce=n(bLe,"STRONG",{});var cat=s(Jce);A$o=r(cat,"data2vec-text"),cat.forEach(t),y$o=r(bLe," \u2014 "),UD=n(bLe,"A",{href:!0});var fat=s(UD);L$o=r(fat,"Data2VecTextForMultipleChoice"),fat.forEach(t),x$o=r(bLe," (Data2VecText model)"),bLe.forEach(t),$$o=i(K),ub=n(K,"LI",{});var vLe=s(ub);Yce=n(vLe,"STRONG",{});var mat=s(Yce);k$o=r(mat,"distilbert"),mat.forEach(t),S$o=r(vLe," \u2014 "),JD=n(vLe,"A",{href:!0});var gat=s(JD);R$o=r(gat,"DistilBertForMultipleChoice"),gat.forEach(t),B$o=r(vLe," (DistilBERT model)"),vLe.forEach(t),P$o=i(K),_b=n(K,"LI",{});var FLe=s(_b);Kce=n(FLe,"STRONG",{});var hat=s(Kce);I$o=r(hat,"electra"),hat.forEach(t),q$o=r(FLe," \u2014 "),YD=n(FLe,"A",{href:!0});var pat=s(YD);N$o=r(pat,"ElectraForMultipleChoice"),pat.forEach(t),j$o=r(FLe," (ELECTRA model)"),FLe.forEach(t),D$o=i(K),bb=n(K,"LI",{});var TLe=s(bb);Zce=n(TLe,"STRONG",{});var uat=s(Zce);G$o=r(uat,"flaubert"),uat.forEach(t),O$o=r(TLe," \u2014 "),KD=n(TLe,"A",{href:!0});var _at=s(KD);V$o=r(_at,"FlaubertForMultipleChoice"),_at.forEach(t),X$o=r(TLe," (FlauBERT model)"),TLe.forEach(t),z$o=i(K),vb=n(K,"LI",{});var MLe=s(vb);efe=n(MLe,"STRONG",{});var bat=s(efe);Q$o=r(bat,"fnet"),bat.forEach(t),W$o=r(MLe," \u2014 "),ZD=n(MLe,"A",{href:!0});var vat=s(ZD);H$o=r(vat,"FNetForMultipleChoice"),vat.forEach(t),U$o=r(MLe," (FNet model)"),MLe.forEach(t),J$o=i(K),Fb=n(K,"LI",{});var ELe=s(Fb);ofe=n(ELe,"STRONG",{});var Fat=s(ofe);Y$o=r(Fat,"funnel"),Fat.forEach(t),K$o=r(ELe," \u2014 "),eG=n(ELe,"A",{href:!0});var Tat=s(eG);Z$o=r(Tat,"FunnelForMultipleChoice"),Tat.forEach(t),eko=r(ELe," (Funnel Transformer model)"),ELe.forEach(t),oko=i(K),Tb=n(K,"LI",{});var CLe=s(Tb);rfe=n(CLe,"STRONG",{});var Mat=s(rfe);rko=r(Mat,"ibert"),Mat.forEach(t),tko=r(CLe," \u2014 "),oG=n(CLe,"A",{href:!0});var Eat=s(oG);ako=r(Eat,"IBertForMultipleChoice"),Eat.forEach(t),nko=r(CLe," (I-BERT model)"),CLe.forEach(t),sko=i(K),Mb=n(K,"LI",{});var wLe=s(Mb);tfe=n(wLe,"STRONG",{});var Cat=s(tfe);lko=r(Cat,"longformer"),Cat.forEach(t),iko=r(wLe," \u2014 "),rG=n(wLe,"A",{href:!0});var wat=s(rG);dko=r(wat,"LongformerForMultipleChoice"),wat.forEach(t),cko=r(wLe," (Longformer model)"),wLe.forEach(t),fko=i(K),Eb=n(K,"LI",{});var ALe=s(Eb);afe=n(ALe,"STRONG",{});var Aat=s(afe);mko=r(Aat,"megatron-bert"),Aat.forEach(t),gko=r(ALe," \u2014 "),tG=n(ALe,"A",{href:!0});var yat=s(tG);hko=r(yat,"MegatronBertForMultipleChoice"),yat.forEach(t),pko=r(ALe," (MegatronBert model)"),ALe.forEach(t),uko=i(K),Cb=n(K,"LI",{});var yLe=s(Cb);nfe=n(yLe,"STRONG",{});var Lat=s(nfe);_ko=r(Lat,"mobilebert"),Lat.forEach(t),bko=r(yLe," \u2014 "),aG=n(yLe,"A",{href:!0});var xat=s(aG);vko=r(xat,"MobileBertForMultipleChoice"),xat.forEach(t),Fko=r(yLe," (MobileBERT model)"),yLe.forEach(t),Tko=i(K),wb=n(K,"LI",{});var LLe=s(wb);sfe=n(LLe,"STRONG",{});var $at=s(sfe);Mko=r($at,"mpnet"),$at.forEach(t),Eko=r(LLe," \u2014 "),nG=n(LLe,"A",{href:!0});var kat=s(nG);Cko=r(kat,"MPNetForMultipleChoice"),kat.forEach(t),wko=r(LLe," (MPNet model)"),LLe.forEach(t),Ako=i(K),Ab=n(K,"LI",{});var xLe=s(Ab);lfe=n(xLe,"STRONG",{});var Sat=s(lfe);yko=r(Sat,"nystromformer"),Sat.forEach(t),Lko=r(xLe," \u2014 "),sG=n(xLe,"A",{href:!0});var Rat=s(sG);xko=r(Rat,"NystromformerForMultipleChoice"),Rat.forEach(t),$ko=r(xLe," (Nystromformer model)"),xLe.forEach(t),kko=i(K),yb=n(K,"LI",{});var $Le=s(yb);ife=n($Le,"STRONG",{});var Bat=s(ife);Sko=r(Bat,"qdqbert"),Bat.forEach(t),Rko=r($Le," \u2014 "),lG=n($Le,"A",{href:!0});var Pat=s(lG);Bko=r(Pat,"QDQBertForMultipleChoice"),Pat.forEach(t),Pko=r($Le," (QDQBert model)"),$Le.forEach(t),Iko=i(K),Lb=n(K,"LI",{});var kLe=s(Lb);dfe=n(kLe,"STRONG",{});var Iat=s(dfe);qko=r(Iat,"rembert"),Iat.forEach(t),Nko=r(kLe," \u2014 "),iG=n(kLe,"A",{href:!0});var qat=s(iG);jko=r(qat,"RemBertForMultipleChoice"),qat.forEach(t),Dko=r(kLe," (RemBERT model)"),kLe.forEach(t),Gko=i(K),xb=n(K,"LI",{});var SLe=s(xb);cfe=n(SLe,"STRONG",{});var Nat=s(cfe);Oko=r(Nat,"roberta"),Nat.forEach(t),Vko=r(SLe," \u2014 "),dG=n(SLe,"A",{href:!0});var jat=s(dG);Xko=r(jat,"RobertaForMultipleChoice"),jat.forEach(t),zko=r(SLe," (RoBERTa model)"),SLe.forEach(t),Qko=i(K),$b=n(K,"LI",{});var RLe=s($b);ffe=n(RLe,"STRONG",{});var Dat=s(ffe);Wko=r(Dat,"roformer"),Dat.forEach(t),Hko=r(RLe," \u2014 "),cG=n(RLe,"A",{href:!0});var Gat=s(cG);Uko=r(Gat,"RoFormerForMultipleChoice"),Gat.forEach(t),Jko=r(RLe," (RoFormer model)"),RLe.forEach(t),Yko=i(K),kb=n(K,"LI",{});var BLe=s(kb);mfe=n(BLe,"STRONG",{});var Oat=s(mfe);Kko=r(Oat,"squeezebert"),Oat.forEach(t),Zko=r(BLe," \u2014 "),fG=n(BLe,"A",{href:!0});var Vat=s(fG);eSo=r(Vat,"SqueezeBertForMultipleChoice"),Vat.forEach(t),oSo=r(BLe," (SqueezeBERT model)"),BLe.forEach(t),rSo=i(K),Sb=n(K,"LI",{});var PLe=s(Sb);gfe=n(PLe,"STRONG",{});var Xat=s(gfe);tSo=r(Xat,"xlm"),Xat.forEach(t),aSo=r(PLe," \u2014 "),mG=n(PLe,"A",{href:!0});var zat=s(mG);nSo=r(zat,"XLMForMultipleChoice"),zat.forEach(t),sSo=r(PLe," (XLM model)"),PLe.forEach(t),lSo=i(K),Rb=n(K,"LI",{});var ILe=s(Rb);hfe=n(ILe,"STRONG",{});var Qat=s(hfe);iSo=r(Qat,"xlm-roberta"),Qat.forEach(t),dSo=r(ILe," \u2014 "),gG=n(ILe,"A",{href:!0});var Wat=s(gG);cSo=r(Wat,"XLMRobertaForMultipleChoice"),Wat.forEach(t),fSo=r(ILe," (XLM-RoBERTa model)"),ILe.forEach(t),mSo=i(K),Bb=n(K,"LI",{});var qLe=s(Bb);pfe=n(qLe,"STRONG",{});var Hat=s(pfe);gSo=r(Hat,"xlm-roberta-xl"),Hat.forEach(t),hSo=r(qLe," \u2014 "),hG=n(qLe,"A",{href:!0});var Uat=s(hG);pSo=r(Uat,"XLMRobertaXLForMultipleChoice"),Uat.forEach(t),uSo=r(qLe," (XLM-RoBERTa-XL model)"),qLe.forEach(t),_So=i(K),Pb=n(K,"LI",{});var NLe=s(Pb);ufe=n(NLe,"STRONG",{});var Jat=s(ufe);bSo=r(Jat,"xlnet"),Jat.forEach(t),vSo=r(NLe," \u2014 "),pG=n(NLe,"A",{href:!0});var Yat=s(pG);FSo=r(Yat,"XLNetForMultipleChoice"),Yat.forEach(t),TSo=r(NLe," (XLNet model)"),NLe.forEach(t),MSo=i(K),Ib=n(K,"LI",{});var jLe=s(Ib);_fe=n(jLe,"STRONG",{});var Kat=s(_fe);ESo=r(Kat,"yoso"),Kat.forEach(t),CSo=r(jLe," \u2014 "),uG=n(jLe,"A",{href:!0});var Zat=s(uG);wSo=r(Zat,"YosoForMultipleChoice"),Zat.forEach(t),ASo=r(jLe," (YOSO model)"),jLe.forEach(t),K.forEach(t),ySo=i(na),qb=n(na,"P",{});var DLe=s(qb);LSo=r(DLe,"The model is set in evaluation mode by default using "),bfe=n(DLe,"CODE",{});var ent=s(bfe);xSo=r(ent,"model.eval()"),ent.forEach(t),$So=r(DLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(DLe,"CODE",{});var ont=s(vfe);kSo=r(ont,"model.train()"),ont.forEach(t),DLe.forEach(t),SSo=i(na),T(Nb.$$.fragment,na),na.forEach(t),zs.forEach(t),$Pe=i(f),Oi=n(f,"H2",{class:!0});var Bqe=s(Oi);jb=n(Bqe,"A",{id:!0,class:!0,href:!0});var rnt=s(jb);Ffe=n(rnt,"SPAN",{});var tnt=s(Ffe);T(H0.$$.fragment,tnt),tnt.forEach(t),rnt.forEach(t),RSo=i(Bqe),Tfe=n(Bqe,"SPAN",{});var ant=s(Tfe);BSo=r(ant,"AutoModelForNextSentencePrediction"),ant.forEach(t),Bqe.forEach(t),kPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(U0.$$.fragment,Qs),PSo=i(Qs),Vi=n(Qs,"P",{});var tK=s(Vi);ISo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),_G=n(tK,"A",{href:!0});var nnt=s(_G);qSo=r(nnt,"from_pretrained()"),nnt.forEach(t),NSo=r(tK," class method or the "),bG=n(tK,"A",{href:!0});var snt=s(bG);jSo=r(snt,"from_config()"),snt.forEach(t),DSo=r(tK,` class
method.`),tK.forEach(t),GSo=i(Qs),J0=n(Qs,"P",{});var Pqe=s(J0);OSo=r(Pqe,"This class cannot be instantiated directly using "),Mfe=n(Pqe,"CODE",{});var lnt=s(Mfe);VSo=r(lnt,"__init__()"),lnt.forEach(t),XSo=r(Pqe," (throws an error)."),Pqe.forEach(t),zSo=i(Qs),it=n(Qs,"DIV",{class:!0});var aw=s(it);T(Y0.$$.fragment,aw),QSo=i(aw),Efe=n(aw,"P",{});var int=s(Efe);WSo=r(int,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),int.forEach(t),HSo=i(aw),Xi=n(aw,"P",{});var aK=s(Xi);USo=r(aK,`Note:
Loading a model from its configuration file does `),Cfe=n(aK,"STRONG",{});var dnt=s(Cfe);JSo=r(dnt,"not"),dnt.forEach(t),YSo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(aK,"A",{href:!0});var cnt=s(vG);KSo=r(cnt,"from_pretrained()"),cnt.forEach(t),ZSo=r(aK," to load the model weights."),aK.forEach(t),eRo=i(aw),T(Db.$$.fragment,aw),aw.forEach(t),oRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(K0.$$.fragment,sa),rRo=i(sa),wfe=n(sa,"P",{});var fnt=s(wfe);tRo=r(fnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fnt.forEach(t),aRo=i(sa),Ra=n(sa,"P",{});var nw=s(Ra);nRo=r(nw,"The model class to instantiate is selected based on the "),Afe=n(nw,"CODE",{});var mnt=s(Afe);sRo=r(mnt,"model_type"),mnt.forEach(t),lRo=r(nw,` property of the config object (either
passed as an argument or loaded from `),yfe=n(nw,"CODE",{});var gnt=s(yfe);iRo=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),dRo=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(nw,"CODE",{});var hnt=s(Lfe);cRo=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),fRo=r(nw,":"),nw.forEach(t),mRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);Gb=n(Ws,"LI",{});var GLe=s(Gb);xfe=n(GLe,"STRONG",{});var pnt=s(xfe);gRo=r(pnt,"bert"),pnt.forEach(t),hRo=r(GLe," \u2014 "),FG=n(GLe,"A",{href:!0});var unt=s(FG);pRo=r(unt,"BertForNextSentencePrediction"),unt.forEach(t),uRo=r(GLe," (BERT model)"),GLe.forEach(t),_Ro=i(Ws),Ob=n(Ws,"LI",{});var OLe=s(Ob);$fe=n(OLe,"STRONG",{});var _nt=s($fe);bRo=r(_nt,"fnet"),_nt.forEach(t),vRo=r(OLe," \u2014 "),TG=n(OLe,"A",{href:!0});var bnt=s(TG);FRo=r(bnt,"FNetForNextSentencePrediction"),bnt.forEach(t),TRo=r(OLe," (FNet model)"),OLe.forEach(t),MRo=i(Ws),Vb=n(Ws,"LI",{});var VLe=s(Vb);kfe=n(VLe,"STRONG",{});var vnt=s(kfe);ERo=r(vnt,"megatron-bert"),vnt.forEach(t),CRo=r(VLe," \u2014 "),MG=n(VLe,"A",{href:!0});var Fnt=s(MG);wRo=r(Fnt,"MegatronBertForNextSentencePrediction"),Fnt.forEach(t),ARo=r(VLe," (MegatronBert model)"),VLe.forEach(t),yRo=i(Ws),Xb=n(Ws,"LI",{});var XLe=s(Xb);Sfe=n(XLe,"STRONG",{});var Tnt=s(Sfe);LRo=r(Tnt,"mobilebert"),Tnt.forEach(t),xRo=r(XLe," \u2014 "),EG=n(XLe,"A",{href:!0});var Mnt=s(EG);$Ro=r(Mnt,"MobileBertForNextSentencePrediction"),Mnt.forEach(t),kRo=r(XLe," (MobileBERT model)"),XLe.forEach(t),SRo=i(Ws),zb=n(Ws,"LI",{});var zLe=s(zb);Rfe=n(zLe,"STRONG",{});var Ent=s(Rfe);RRo=r(Ent,"qdqbert"),Ent.forEach(t),BRo=r(zLe," \u2014 "),CG=n(zLe,"A",{href:!0});var Cnt=s(CG);PRo=r(Cnt,"QDQBertForNextSentencePrediction"),Cnt.forEach(t),IRo=r(zLe," (QDQBert model)"),zLe.forEach(t),Ws.forEach(t),qRo=i(sa),Qb=n(sa,"P",{});var QLe=s(Qb);NRo=r(QLe,"The model is set in evaluation mode by default using "),Bfe=n(QLe,"CODE",{});var wnt=s(Bfe);jRo=r(wnt,"model.eval()"),wnt.forEach(t),DRo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(QLe,"CODE",{});var Ant=s(Pfe);GRo=r(Ant,"model.train()"),Ant.forEach(t),QLe.forEach(t),ORo=i(sa),T(Wb.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),SPe=i(f),zi=n(f,"H2",{class:!0});var Iqe=s(zi);Hb=n(Iqe,"A",{id:!0,class:!0,href:!0});var ynt=s(Hb);Ife=n(ynt,"SPAN",{});var Lnt=s(Ife);T(Z0.$$.fragment,Lnt),Lnt.forEach(t),ynt.forEach(t),VRo=i(Iqe),qfe=n(Iqe,"SPAN",{});var xnt=s(qfe);XRo=r(xnt,"AutoModelForTokenClassification"),xnt.forEach(t),Iqe.forEach(t),RPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(ey.$$.fragment,Hs),zRo=i(Hs),Qi=n(Hs,"P",{});var nK=s(Qi);QRo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),wG=n(nK,"A",{href:!0});var $nt=s(wG);WRo=r($nt,"from_pretrained()"),$nt.forEach(t),HRo=r(nK," class method or the "),AG=n(nK,"A",{href:!0});var knt=s(AG);URo=r(knt,"from_config()"),knt.forEach(t),JRo=r(nK,` class
method.`),nK.forEach(t),YRo=i(Hs),oy=n(Hs,"P",{});var qqe=s(oy);KRo=r(qqe,"This class cannot be instantiated directly using "),Nfe=n(qqe,"CODE",{});var Snt=s(Nfe);ZRo=r(Snt,"__init__()"),Snt.forEach(t),eBo=r(qqe," (throws an error)."),qqe.forEach(t),oBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var sw=s(dt);T(ry.$$.fragment,sw),rBo=i(sw),jfe=n(sw,"P",{});var Rnt=s(jfe);tBo=r(Rnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Rnt.forEach(t),aBo=i(sw),Wi=n(sw,"P",{});var sK=s(Wi);nBo=r(sK,`Note:
Loading a model from its configuration file does `),Dfe=n(sK,"STRONG",{});var Bnt=s(Dfe);sBo=r(Bnt,"not"),Bnt.forEach(t),lBo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yG=n(sK,"A",{href:!0});var Pnt=s(yG);iBo=r(Pnt,"from_pretrained()"),Pnt.forEach(t),dBo=r(sK," to load the model weights."),sK.forEach(t),cBo=i(sw),T(Ub.$$.fragment,sw),sw.forEach(t),fBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(ty.$$.fragment,la),mBo=i(la),Gfe=n(la,"P",{});var Int=s(Gfe);gBo=r(Int,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Int.forEach(t),hBo=i(la),Ba=n(la,"P",{});var lw=s(Ba);pBo=r(lw,"The model class to instantiate is selected based on the "),Ofe=n(lw,"CODE",{});var qnt=s(Ofe);uBo=r(qnt,"model_type"),qnt.forEach(t),_Bo=r(lw,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(lw,"CODE",{});var Nnt=s(Vfe);bBo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),vBo=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(lw,"CODE",{});var jnt=s(Xfe);FBo=r(jnt,"pretrained_model_name_or_path"),jnt.forEach(t),TBo=r(lw,":"),lw.forEach(t),MBo=i(la),U=n(la,"UL",{});var J=s(U);Jb=n(J,"LI",{});var WLe=s(Jb);zfe=n(WLe,"STRONG",{});var Dnt=s(zfe);EBo=r(Dnt,"albert"),Dnt.forEach(t),CBo=r(WLe," \u2014 "),LG=n(WLe,"A",{href:!0});var Gnt=s(LG);wBo=r(Gnt,"AlbertForTokenClassification"),Gnt.forEach(t),ABo=r(WLe," (ALBERT model)"),WLe.forEach(t),yBo=i(J),Yb=n(J,"LI",{});var HLe=s(Yb);Qfe=n(HLe,"STRONG",{});var Ont=s(Qfe);LBo=r(Ont,"bert"),Ont.forEach(t),xBo=r(HLe," \u2014 "),xG=n(HLe,"A",{href:!0});var Vnt=s(xG);$Bo=r(Vnt,"BertForTokenClassification"),Vnt.forEach(t),kBo=r(HLe," (BERT model)"),HLe.forEach(t),SBo=i(J),Kb=n(J,"LI",{});var ULe=s(Kb);Wfe=n(ULe,"STRONG",{});var Xnt=s(Wfe);RBo=r(Xnt,"big_bird"),Xnt.forEach(t),BBo=r(ULe," \u2014 "),$G=n(ULe,"A",{href:!0});var znt=s($G);PBo=r(znt,"BigBirdForTokenClassification"),znt.forEach(t),IBo=r(ULe," (BigBird model)"),ULe.forEach(t),qBo=i(J),Zb=n(J,"LI",{});var JLe=s(Zb);Hfe=n(JLe,"STRONG",{});var Qnt=s(Hfe);NBo=r(Qnt,"camembert"),Qnt.forEach(t),jBo=r(JLe," \u2014 "),kG=n(JLe,"A",{href:!0});var Wnt=s(kG);DBo=r(Wnt,"CamembertForTokenClassification"),Wnt.forEach(t),GBo=r(JLe," (CamemBERT model)"),JLe.forEach(t),OBo=i(J),e5=n(J,"LI",{});var YLe=s(e5);Ufe=n(YLe,"STRONG",{});var Hnt=s(Ufe);VBo=r(Hnt,"canine"),Hnt.forEach(t),XBo=r(YLe," \u2014 "),SG=n(YLe,"A",{href:!0});var Unt=s(SG);zBo=r(Unt,"CanineForTokenClassification"),Unt.forEach(t),QBo=r(YLe," (Canine model)"),YLe.forEach(t),WBo=i(J),o5=n(J,"LI",{});var KLe=s(o5);Jfe=n(KLe,"STRONG",{});var Jnt=s(Jfe);HBo=r(Jnt,"convbert"),Jnt.forEach(t),UBo=r(KLe," \u2014 "),RG=n(KLe,"A",{href:!0});var Ynt=s(RG);JBo=r(Ynt,"ConvBertForTokenClassification"),Ynt.forEach(t),YBo=r(KLe," (ConvBERT model)"),KLe.forEach(t),KBo=i(J),r5=n(J,"LI",{});var ZLe=s(r5);Yfe=n(ZLe,"STRONG",{});var Knt=s(Yfe);ZBo=r(Knt,"data2vec-text"),Knt.forEach(t),ePo=r(ZLe," \u2014 "),BG=n(ZLe,"A",{href:!0});var Znt=s(BG);oPo=r(Znt,"Data2VecTextForTokenClassification"),Znt.forEach(t),rPo=r(ZLe," (Data2VecText model)"),ZLe.forEach(t),tPo=i(J),t5=n(J,"LI",{});var e8e=s(t5);Kfe=n(e8e,"STRONG",{});var est=s(Kfe);aPo=r(est,"deberta"),est.forEach(t),nPo=r(e8e," \u2014 "),PG=n(e8e,"A",{href:!0});var ost=s(PG);sPo=r(ost,"DebertaForTokenClassification"),ost.forEach(t),lPo=r(e8e," (DeBERTa model)"),e8e.forEach(t),iPo=i(J),a5=n(J,"LI",{});var o8e=s(a5);Zfe=n(o8e,"STRONG",{});var rst=s(Zfe);dPo=r(rst,"deberta-v2"),rst.forEach(t),cPo=r(o8e," \u2014 "),IG=n(o8e,"A",{href:!0});var tst=s(IG);fPo=r(tst,"DebertaV2ForTokenClassification"),tst.forEach(t),mPo=r(o8e," (DeBERTa-v2 model)"),o8e.forEach(t),gPo=i(J),n5=n(J,"LI",{});var r8e=s(n5);eme=n(r8e,"STRONG",{});var ast=s(eme);hPo=r(ast,"distilbert"),ast.forEach(t),pPo=r(r8e," \u2014 "),qG=n(r8e,"A",{href:!0});var nst=s(qG);uPo=r(nst,"DistilBertForTokenClassification"),nst.forEach(t),_Po=r(r8e," (DistilBERT model)"),r8e.forEach(t),bPo=i(J),s5=n(J,"LI",{});var t8e=s(s5);ome=n(t8e,"STRONG",{});var sst=s(ome);vPo=r(sst,"electra"),sst.forEach(t),FPo=r(t8e," \u2014 "),NG=n(t8e,"A",{href:!0});var lst=s(NG);TPo=r(lst,"ElectraForTokenClassification"),lst.forEach(t),MPo=r(t8e," (ELECTRA model)"),t8e.forEach(t),EPo=i(J),l5=n(J,"LI",{});var a8e=s(l5);rme=n(a8e,"STRONG",{});var ist=s(rme);CPo=r(ist,"flaubert"),ist.forEach(t),wPo=r(a8e," \u2014 "),jG=n(a8e,"A",{href:!0});var dst=s(jG);APo=r(dst,"FlaubertForTokenClassification"),dst.forEach(t),yPo=r(a8e," (FlauBERT model)"),a8e.forEach(t),LPo=i(J),i5=n(J,"LI",{});var n8e=s(i5);tme=n(n8e,"STRONG",{});var cst=s(tme);xPo=r(cst,"fnet"),cst.forEach(t),$Po=r(n8e," \u2014 "),DG=n(n8e,"A",{href:!0});var fst=s(DG);kPo=r(fst,"FNetForTokenClassification"),fst.forEach(t),SPo=r(n8e," (FNet model)"),n8e.forEach(t),RPo=i(J),d5=n(J,"LI",{});var s8e=s(d5);ame=n(s8e,"STRONG",{});var mst=s(ame);BPo=r(mst,"funnel"),mst.forEach(t),PPo=r(s8e," \u2014 "),GG=n(s8e,"A",{href:!0});var gst=s(GG);IPo=r(gst,"FunnelForTokenClassification"),gst.forEach(t),qPo=r(s8e," (Funnel Transformer model)"),s8e.forEach(t),NPo=i(J),c5=n(J,"LI",{});var l8e=s(c5);nme=n(l8e,"STRONG",{});var hst=s(nme);jPo=r(hst,"gpt2"),hst.forEach(t),DPo=r(l8e," \u2014 "),OG=n(l8e,"A",{href:!0});var pst=s(OG);GPo=r(pst,"GPT2ForTokenClassification"),pst.forEach(t),OPo=r(l8e," (OpenAI GPT-2 model)"),l8e.forEach(t),VPo=i(J),f5=n(J,"LI",{});var i8e=s(f5);sme=n(i8e,"STRONG",{});var ust=s(sme);XPo=r(ust,"ibert"),ust.forEach(t),zPo=r(i8e," \u2014 "),VG=n(i8e,"A",{href:!0});var _st=s(VG);QPo=r(_st,"IBertForTokenClassification"),_st.forEach(t),WPo=r(i8e," (I-BERT model)"),i8e.forEach(t),HPo=i(J),m5=n(J,"LI",{});var d8e=s(m5);lme=n(d8e,"STRONG",{});var bst=s(lme);UPo=r(bst,"layoutlm"),bst.forEach(t),JPo=r(d8e," \u2014 "),XG=n(d8e,"A",{href:!0});var vst=s(XG);YPo=r(vst,"LayoutLMForTokenClassification"),vst.forEach(t),KPo=r(d8e," (LayoutLM model)"),d8e.forEach(t),ZPo=i(J),g5=n(J,"LI",{});var c8e=s(g5);ime=n(c8e,"STRONG",{});var Fst=s(ime);eIo=r(Fst,"layoutlmv2"),Fst.forEach(t),oIo=r(c8e," \u2014 "),zG=n(c8e,"A",{href:!0});var Tst=s(zG);rIo=r(Tst,"LayoutLMv2ForTokenClassification"),Tst.forEach(t),tIo=r(c8e," (LayoutLMv2 model)"),c8e.forEach(t),aIo=i(J),h5=n(J,"LI",{});var f8e=s(h5);dme=n(f8e,"STRONG",{});var Mst=s(dme);nIo=r(Mst,"longformer"),Mst.forEach(t),sIo=r(f8e," \u2014 "),QG=n(f8e,"A",{href:!0});var Est=s(QG);lIo=r(Est,"LongformerForTokenClassification"),Est.forEach(t),iIo=r(f8e," (Longformer model)"),f8e.forEach(t),dIo=i(J),p5=n(J,"LI",{});var m8e=s(p5);cme=n(m8e,"STRONG",{});var Cst=s(cme);cIo=r(Cst,"megatron-bert"),Cst.forEach(t),fIo=r(m8e," \u2014 "),WG=n(m8e,"A",{href:!0});var wst=s(WG);mIo=r(wst,"MegatronBertForTokenClassification"),wst.forEach(t),gIo=r(m8e," (MegatronBert model)"),m8e.forEach(t),hIo=i(J),u5=n(J,"LI",{});var g8e=s(u5);fme=n(g8e,"STRONG",{});var Ast=s(fme);pIo=r(Ast,"mobilebert"),Ast.forEach(t),uIo=r(g8e," \u2014 "),HG=n(g8e,"A",{href:!0});var yst=s(HG);_Io=r(yst,"MobileBertForTokenClassification"),yst.forEach(t),bIo=r(g8e," (MobileBERT model)"),g8e.forEach(t),vIo=i(J),_5=n(J,"LI",{});var h8e=s(_5);mme=n(h8e,"STRONG",{});var Lst=s(mme);FIo=r(Lst,"mpnet"),Lst.forEach(t),TIo=r(h8e," \u2014 "),UG=n(h8e,"A",{href:!0});var xst=s(UG);MIo=r(xst,"MPNetForTokenClassification"),xst.forEach(t),EIo=r(h8e," (MPNet model)"),h8e.forEach(t),CIo=i(J),b5=n(J,"LI",{});var p8e=s(b5);gme=n(p8e,"STRONG",{});var $st=s(gme);wIo=r($st,"nystromformer"),$st.forEach(t),AIo=r(p8e," \u2014 "),JG=n(p8e,"A",{href:!0});var kst=s(JG);yIo=r(kst,"NystromformerForTokenClassification"),kst.forEach(t),LIo=r(p8e," (Nystromformer model)"),p8e.forEach(t),xIo=i(J),v5=n(J,"LI",{});var u8e=s(v5);hme=n(u8e,"STRONG",{});var Sst=s(hme);$Io=r(Sst,"qdqbert"),Sst.forEach(t),kIo=r(u8e," \u2014 "),YG=n(u8e,"A",{href:!0});var Rst=s(YG);SIo=r(Rst,"QDQBertForTokenClassification"),Rst.forEach(t),RIo=r(u8e," (QDQBert model)"),u8e.forEach(t),BIo=i(J),F5=n(J,"LI",{});var _8e=s(F5);pme=n(_8e,"STRONG",{});var Bst=s(pme);PIo=r(Bst,"rembert"),Bst.forEach(t),IIo=r(_8e," \u2014 "),KG=n(_8e,"A",{href:!0});var Pst=s(KG);qIo=r(Pst,"RemBertForTokenClassification"),Pst.forEach(t),NIo=r(_8e," (RemBERT model)"),_8e.forEach(t),jIo=i(J),T5=n(J,"LI",{});var b8e=s(T5);ume=n(b8e,"STRONG",{});var Ist=s(ume);DIo=r(Ist,"roberta"),Ist.forEach(t),GIo=r(b8e," \u2014 "),ZG=n(b8e,"A",{href:!0});var qst=s(ZG);OIo=r(qst,"RobertaForTokenClassification"),qst.forEach(t),VIo=r(b8e," (RoBERTa model)"),b8e.forEach(t),XIo=i(J),M5=n(J,"LI",{});var v8e=s(M5);_me=n(v8e,"STRONG",{});var Nst=s(_me);zIo=r(Nst,"roformer"),Nst.forEach(t),QIo=r(v8e," \u2014 "),eO=n(v8e,"A",{href:!0});var jst=s(eO);WIo=r(jst,"RoFormerForTokenClassification"),jst.forEach(t),HIo=r(v8e," (RoFormer model)"),v8e.forEach(t),UIo=i(J),E5=n(J,"LI",{});var F8e=s(E5);bme=n(F8e,"STRONG",{});var Dst=s(bme);JIo=r(Dst,"squeezebert"),Dst.forEach(t),YIo=r(F8e," \u2014 "),oO=n(F8e,"A",{href:!0});var Gst=s(oO);KIo=r(Gst,"SqueezeBertForTokenClassification"),Gst.forEach(t),ZIo=r(F8e," (SqueezeBERT model)"),F8e.forEach(t),eqo=i(J),C5=n(J,"LI",{});var T8e=s(C5);vme=n(T8e,"STRONG",{});var Ost=s(vme);oqo=r(Ost,"xlm"),Ost.forEach(t),rqo=r(T8e," \u2014 "),rO=n(T8e,"A",{href:!0});var Vst=s(rO);tqo=r(Vst,"XLMForTokenClassification"),Vst.forEach(t),aqo=r(T8e," (XLM model)"),T8e.forEach(t),nqo=i(J),w5=n(J,"LI",{});var M8e=s(w5);Fme=n(M8e,"STRONG",{});var Xst=s(Fme);sqo=r(Xst,"xlm-roberta"),Xst.forEach(t),lqo=r(M8e," \u2014 "),tO=n(M8e,"A",{href:!0});var zst=s(tO);iqo=r(zst,"XLMRobertaForTokenClassification"),zst.forEach(t),dqo=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),cqo=i(J),A5=n(J,"LI",{});var E8e=s(A5);Tme=n(E8e,"STRONG",{});var Qst=s(Tme);fqo=r(Qst,"xlm-roberta-xl"),Qst.forEach(t),mqo=r(E8e," \u2014 "),aO=n(E8e,"A",{href:!0});var Wst=s(aO);gqo=r(Wst,"XLMRobertaXLForTokenClassification"),Wst.forEach(t),hqo=r(E8e," (XLM-RoBERTa-XL model)"),E8e.forEach(t),pqo=i(J),y5=n(J,"LI",{});var C8e=s(y5);Mme=n(C8e,"STRONG",{});var Hst=s(Mme);uqo=r(Hst,"xlnet"),Hst.forEach(t),_qo=r(C8e," \u2014 "),nO=n(C8e,"A",{href:!0});var Ust=s(nO);bqo=r(Ust,"XLNetForTokenClassification"),Ust.forEach(t),vqo=r(C8e," (XLNet model)"),C8e.forEach(t),Fqo=i(J),L5=n(J,"LI",{});var w8e=s(L5);Eme=n(w8e,"STRONG",{});var Jst=s(Eme);Tqo=r(Jst,"yoso"),Jst.forEach(t),Mqo=r(w8e," \u2014 "),sO=n(w8e,"A",{href:!0});var Yst=s(sO);Eqo=r(Yst,"YosoForTokenClassification"),Yst.forEach(t),Cqo=r(w8e," (YOSO model)"),w8e.forEach(t),J.forEach(t),wqo=i(la),x5=n(la,"P",{});var A8e=s(x5);Aqo=r(A8e,"The model is set in evaluation mode by default using "),Cme=n(A8e,"CODE",{});var Kst=s(Cme);yqo=r(Kst,"model.eval()"),Kst.forEach(t),Lqo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wme=n(A8e,"CODE",{});var Zst=s(wme);xqo=r(Zst,"model.train()"),Zst.forEach(t),A8e.forEach(t),$qo=i(la),T($5.$$.fragment,la),la.forEach(t),Hs.forEach(t),BPe=i(f),Hi=n(f,"H2",{class:!0});var Nqe=s(Hi);k5=n(Nqe,"A",{id:!0,class:!0,href:!0});var elt=s(k5);Ame=n(elt,"SPAN",{});var olt=s(Ame);T(ay.$$.fragment,olt),olt.forEach(t),elt.forEach(t),kqo=i(Nqe),yme=n(Nqe,"SPAN",{});var rlt=s(yme);Sqo=r(rlt,"AutoModelForQuestionAnswering"),rlt.forEach(t),Nqe.forEach(t),PPe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(ny.$$.fragment,Us),Rqo=i(Us),Ui=n(Us,"P",{});var lK=s(Ui);Bqo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lO=n(lK,"A",{href:!0});var tlt=s(lO);Pqo=r(tlt,"from_pretrained()"),tlt.forEach(t),Iqo=r(lK," class method or the "),iO=n(lK,"A",{href:!0});var alt=s(iO);qqo=r(alt,"from_config()"),alt.forEach(t),Nqo=r(lK,` class
method.`),lK.forEach(t),jqo=i(Us),sy=n(Us,"P",{});var jqe=s(sy);Dqo=r(jqe,"This class cannot be instantiated directly using "),Lme=n(jqe,"CODE",{});var nlt=s(Lme);Gqo=r(nlt,"__init__()"),nlt.forEach(t),Oqo=r(jqe," (throws an error)."),jqe.forEach(t),Vqo=i(Us),ct=n(Us,"DIV",{class:!0});var iw=s(ct);T(ly.$$.fragment,iw),Xqo=i(iw),xme=n(iw,"P",{});var slt=s(xme);zqo=r(slt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),slt.forEach(t),Qqo=i(iw),Ji=n(iw,"P",{});var iK=s(Ji);Wqo=r(iK,`Note:
Loading a model from its configuration file does `),$me=n(iK,"STRONG",{});var llt=s($me);Hqo=r(llt,"not"),llt.forEach(t),Uqo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=n(iK,"A",{href:!0});var ilt=s(dO);Jqo=r(ilt,"from_pretrained()"),ilt.forEach(t),Yqo=r(iK," to load the model weights."),iK.forEach(t),Kqo=i(iw),T(S5.$$.fragment,iw),iw.forEach(t),Zqo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(iy.$$.fragment,ia),eNo=i(ia),kme=n(ia,"P",{});var dlt=s(kme);oNo=r(dlt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dlt.forEach(t),rNo=i(ia),Pa=n(ia,"P",{});var dw=s(Pa);tNo=r(dw,"The model class to instantiate is selected based on the "),Sme=n(dw,"CODE",{});var clt=s(Sme);aNo=r(clt,"model_type"),clt.forEach(t),nNo=r(dw,` property of the config object (either
passed as an argument or loaded from `),Rme=n(dw,"CODE",{});var flt=s(Rme);sNo=r(flt,"pretrained_model_name_or_path"),flt.forEach(t),lNo=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bme=n(dw,"CODE",{});var mlt=s(Bme);iNo=r(mlt,"pretrained_model_name_or_path"),mlt.forEach(t),dNo=r(dw,":"),dw.forEach(t),cNo=i(ia),O=n(ia,"UL",{});var X=s(O);R5=n(X,"LI",{});var y8e=s(R5);Pme=n(y8e,"STRONG",{});var glt=s(Pme);fNo=r(glt,"albert"),glt.forEach(t),mNo=r(y8e," \u2014 "),cO=n(y8e,"A",{href:!0});var hlt=s(cO);gNo=r(hlt,"AlbertForQuestionAnswering"),hlt.forEach(t),hNo=r(y8e," (ALBERT model)"),y8e.forEach(t),pNo=i(X),B5=n(X,"LI",{});var L8e=s(B5);Ime=n(L8e,"STRONG",{});var plt=s(Ime);uNo=r(plt,"bart"),plt.forEach(t),_No=r(L8e," \u2014 "),fO=n(L8e,"A",{href:!0});var ult=s(fO);bNo=r(ult,"BartForQuestionAnswering"),ult.forEach(t),vNo=r(L8e," (BART model)"),L8e.forEach(t),FNo=i(X),P5=n(X,"LI",{});var x8e=s(P5);qme=n(x8e,"STRONG",{});var _lt=s(qme);TNo=r(_lt,"bert"),_lt.forEach(t),MNo=r(x8e," \u2014 "),mO=n(x8e,"A",{href:!0});var blt=s(mO);ENo=r(blt,"BertForQuestionAnswering"),blt.forEach(t),CNo=r(x8e," (BERT model)"),x8e.forEach(t),wNo=i(X),I5=n(X,"LI",{});var $8e=s(I5);Nme=n($8e,"STRONG",{});var vlt=s(Nme);ANo=r(vlt,"big_bird"),vlt.forEach(t),yNo=r($8e," \u2014 "),gO=n($8e,"A",{href:!0});var Flt=s(gO);LNo=r(Flt,"BigBirdForQuestionAnswering"),Flt.forEach(t),xNo=r($8e," (BigBird model)"),$8e.forEach(t),$No=i(X),q5=n(X,"LI",{});var k8e=s(q5);jme=n(k8e,"STRONG",{});var Tlt=s(jme);kNo=r(Tlt,"bigbird_pegasus"),Tlt.forEach(t),SNo=r(k8e," \u2014 "),hO=n(k8e,"A",{href:!0});var Mlt=s(hO);RNo=r(Mlt,"BigBirdPegasusForQuestionAnswering"),Mlt.forEach(t),BNo=r(k8e," (BigBirdPegasus model)"),k8e.forEach(t),PNo=i(X),N5=n(X,"LI",{});var S8e=s(N5);Dme=n(S8e,"STRONG",{});var Elt=s(Dme);INo=r(Elt,"camembert"),Elt.forEach(t),qNo=r(S8e," \u2014 "),pO=n(S8e,"A",{href:!0});var Clt=s(pO);NNo=r(Clt,"CamembertForQuestionAnswering"),Clt.forEach(t),jNo=r(S8e," (CamemBERT model)"),S8e.forEach(t),DNo=i(X),j5=n(X,"LI",{});var R8e=s(j5);Gme=n(R8e,"STRONG",{});var wlt=s(Gme);GNo=r(wlt,"canine"),wlt.forEach(t),ONo=r(R8e," \u2014 "),uO=n(R8e,"A",{href:!0});var Alt=s(uO);VNo=r(Alt,"CanineForQuestionAnswering"),Alt.forEach(t),XNo=r(R8e," (Canine model)"),R8e.forEach(t),zNo=i(X),D5=n(X,"LI",{});var B8e=s(D5);Ome=n(B8e,"STRONG",{});var ylt=s(Ome);QNo=r(ylt,"convbert"),ylt.forEach(t),WNo=r(B8e," \u2014 "),_O=n(B8e,"A",{href:!0});var Llt=s(_O);HNo=r(Llt,"ConvBertForQuestionAnswering"),Llt.forEach(t),UNo=r(B8e," (ConvBERT model)"),B8e.forEach(t),JNo=i(X),G5=n(X,"LI",{});var P8e=s(G5);Vme=n(P8e,"STRONG",{});var xlt=s(Vme);YNo=r(xlt,"data2vec-text"),xlt.forEach(t),KNo=r(P8e," \u2014 "),bO=n(P8e,"A",{href:!0});var $lt=s(bO);ZNo=r($lt,"Data2VecTextForQuestionAnswering"),$lt.forEach(t),ejo=r(P8e," (Data2VecText model)"),P8e.forEach(t),ojo=i(X),O5=n(X,"LI",{});var I8e=s(O5);Xme=n(I8e,"STRONG",{});var klt=s(Xme);rjo=r(klt,"deberta"),klt.forEach(t),tjo=r(I8e," \u2014 "),vO=n(I8e,"A",{href:!0});var Slt=s(vO);ajo=r(Slt,"DebertaForQuestionAnswering"),Slt.forEach(t),njo=r(I8e," (DeBERTa model)"),I8e.forEach(t),sjo=i(X),V5=n(X,"LI",{});var q8e=s(V5);zme=n(q8e,"STRONG",{});var Rlt=s(zme);ljo=r(Rlt,"deberta-v2"),Rlt.forEach(t),ijo=r(q8e," \u2014 "),FO=n(q8e,"A",{href:!0});var Blt=s(FO);djo=r(Blt,"DebertaV2ForQuestionAnswering"),Blt.forEach(t),cjo=r(q8e," (DeBERTa-v2 model)"),q8e.forEach(t),fjo=i(X),X5=n(X,"LI",{});var N8e=s(X5);Qme=n(N8e,"STRONG",{});var Plt=s(Qme);mjo=r(Plt,"distilbert"),Plt.forEach(t),gjo=r(N8e," \u2014 "),TO=n(N8e,"A",{href:!0});var Ilt=s(TO);hjo=r(Ilt,"DistilBertForQuestionAnswering"),Ilt.forEach(t),pjo=r(N8e," (DistilBERT model)"),N8e.forEach(t),ujo=i(X),z5=n(X,"LI",{});var j8e=s(z5);Wme=n(j8e,"STRONG",{});var qlt=s(Wme);_jo=r(qlt,"electra"),qlt.forEach(t),bjo=r(j8e," \u2014 "),MO=n(j8e,"A",{href:!0});var Nlt=s(MO);vjo=r(Nlt,"ElectraForQuestionAnswering"),Nlt.forEach(t),Fjo=r(j8e," (ELECTRA model)"),j8e.forEach(t),Tjo=i(X),Q5=n(X,"LI",{});var D8e=s(Q5);Hme=n(D8e,"STRONG",{});var jlt=s(Hme);Mjo=r(jlt,"flaubert"),jlt.forEach(t),Ejo=r(D8e," \u2014 "),EO=n(D8e,"A",{href:!0});var Dlt=s(EO);Cjo=r(Dlt,"FlaubertForQuestionAnsweringSimple"),Dlt.forEach(t),wjo=r(D8e," (FlauBERT model)"),D8e.forEach(t),Ajo=i(X),W5=n(X,"LI",{});var G8e=s(W5);Ume=n(G8e,"STRONG",{});var Glt=s(Ume);yjo=r(Glt,"fnet"),Glt.forEach(t),Ljo=r(G8e," \u2014 "),CO=n(G8e,"A",{href:!0});var Olt=s(CO);xjo=r(Olt,"FNetForQuestionAnswering"),Olt.forEach(t),$jo=r(G8e," (FNet model)"),G8e.forEach(t),kjo=i(X),H5=n(X,"LI",{});var O8e=s(H5);Jme=n(O8e,"STRONG",{});var Vlt=s(Jme);Sjo=r(Vlt,"funnel"),Vlt.forEach(t),Rjo=r(O8e," \u2014 "),wO=n(O8e,"A",{href:!0});var Xlt=s(wO);Bjo=r(Xlt,"FunnelForQuestionAnswering"),Xlt.forEach(t),Pjo=r(O8e," (Funnel Transformer model)"),O8e.forEach(t),Ijo=i(X),U5=n(X,"LI",{});var V8e=s(U5);Yme=n(V8e,"STRONG",{});var zlt=s(Yme);qjo=r(zlt,"gptj"),zlt.forEach(t),Njo=r(V8e," \u2014 "),AO=n(V8e,"A",{href:!0});var Qlt=s(AO);jjo=r(Qlt,"GPTJForQuestionAnswering"),Qlt.forEach(t),Djo=r(V8e," (GPT-J model)"),V8e.forEach(t),Gjo=i(X),J5=n(X,"LI",{});var X8e=s(J5);Kme=n(X8e,"STRONG",{});var Wlt=s(Kme);Ojo=r(Wlt,"ibert"),Wlt.forEach(t),Vjo=r(X8e," \u2014 "),yO=n(X8e,"A",{href:!0});var Hlt=s(yO);Xjo=r(Hlt,"IBertForQuestionAnswering"),Hlt.forEach(t),zjo=r(X8e," (I-BERT model)"),X8e.forEach(t),Qjo=i(X),Y5=n(X,"LI",{});var z8e=s(Y5);Zme=n(z8e,"STRONG",{});var Ult=s(Zme);Wjo=r(Ult,"layoutlmv2"),Ult.forEach(t),Hjo=r(z8e," \u2014 "),LO=n(z8e,"A",{href:!0});var Jlt=s(LO);Ujo=r(Jlt,"LayoutLMv2ForQuestionAnswering"),Jlt.forEach(t),Jjo=r(z8e," (LayoutLMv2 model)"),z8e.forEach(t),Yjo=i(X),K5=n(X,"LI",{});var Q8e=s(K5);ege=n(Q8e,"STRONG",{});var Ylt=s(ege);Kjo=r(Ylt,"led"),Ylt.forEach(t),Zjo=r(Q8e," \u2014 "),xO=n(Q8e,"A",{href:!0});var Klt=s(xO);eDo=r(Klt,"LEDForQuestionAnswering"),Klt.forEach(t),oDo=r(Q8e," (LED model)"),Q8e.forEach(t),rDo=i(X),Z5=n(X,"LI",{});var W8e=s(Z5);oge=n(W8e,"STRONG",{});var Zlt=s(oge);tDo=r(Zlt,"longformer"),Zlt.forEach(t),aDo=r(W8e," \u2014 "),$O=n(W8e,"A",{href:!0});var eit=s($O);nDo=r(eit,"LongformerForQuestionAnswering"),eit.forEach(t),sDo=r(W8e," (Longformer model)"),W8e.forEach(t),lDo=i(X),ev=n(X,"LI",{});var H8e=s(ev);rge=n(H8e,"STRONG",{});var oit=s(rge);iDo=r(oit,"lxmert"),oit.forEach(t),dDo=r(H8e," \u2014 "),kO=n(H8e,"A",{href:!0});var rit=s(kO);cDo=r(rit,"LxmertForQuestionAnswering"),rit.forEach(t),fDo=r(H8e," (LXMERT model)"),H8e.forEach(t),mDo=i(X),ov=n(X,"LI",{});var U8e=s(ov);tge=n(U8e,"STRONG",{});var tit=s(tge);gDo=r(tit,"mbart"),tit.forEach(t),hDo=r(U8e," \u2014 "),SO=n(U8e,"A",{href:!0});var ait=s(SO);pDo=r(ait,"MBartForQuestionAnswering"),ait.forEach(t),uDo=r(U8e," (mBART model)"),U8e.forEach(t),_Do=i(X),rv=n(X,"LI",{});var J8e=s(rv);age=n(J8e,"STRONG",{});var nit=s(age);bDo=r(nit,"megatron-bert"),nit.forEach(t),vDo=r(J8e," \u2014 "),RO=n(J8e,"A",{href:!0});var sit=s(RO);FDo=r(sit,"MegatronBertForQuestionAnswering"),sit.forEach(t),TDo=r(J8e," (MegatronBert model)"),J8e.forEach(t),MDo=i(X),tv=n(X,"LI",{});var Y8e=s(tv);nge=n(Y8e,"STRONG",{});var lit=s(nge);EDo=r(lit,"mobilebert"),lit.forEach(t),CDo=r(Y8e," \u2014 "),BO=n(Y8e,"A",{href:!0});var iit=s(BO);wDo=r(iit,"MobileBertForQuestionAnswering"),iit.forEach(t),ADo=r(Y8e," (MobileBERT model)"),Y8e.forEach(t),yDo=i(X),av=n(X,"LI",{});var K8e=s(av);sge=n(K8e,"STRONG",{});var dit=s(sge);LDo=r(dit,"mpnet"),dit.forEach(t),xDo=r(K8e," \u2014 "),PO=n(K8e,"A",{href:!0});var cit=s(PO);$Do=r(cit,"MPNetForQuestionAnswering"),cit.forEach(t),kDo=r(K8e," (MPNet model)"),K8e.forEach(t),SDo=i(X),nv=n(X,"LI",{});var Z8e=s(nv);lge=n(Z8e,"STRONG",{});var fit=s(lge);RDo=r(fit,"nystromformer"),fit.forEach(t),BDo=r(Z8e," \u2014 "),IO=n(Z8e,"A",{href:!0});var mit=s(IO);PDo=r(mit,"NystromformerForQuestionAnswering"),mit.forEach(t),IDo=r(Z8e," (Nystromformer model)"),Z8e.forEach(t),qDo=i(X),sv=n(X,"LI",{});var exe=s(sv);ige=n(exe,"STRONG",{});var git=s(ige);NDo=r(git,"qdqbert"),git.forEach(t),jDo=r(exe," \u2014 "),qO=n(exe,"A",{href:!0});var hit=s(qO);DDo=r(hit,"QDQBertForQuestionAnswering"),hit.forEach(t),GDo=r(exe," (QDQBert model)"),exe.forEach(t),ODo=i(X),lv=n(X,"LI",{});var oxe=s(lv);dge=n(oxe,"STRONG",{});var pit=s(dge);VDo=r(pit,"reformer"),pit.forEach(t),XDo=r(oxe," \u2014 "),NO=n(oxe,"A",{href:!0});var uit=s(NO);zDo=r(uit,"ReformerForQuestionAnswering"),uit.forEach(t),QDo=r(oxe," (Reformer model)"),oxe.forEach(t),WDo=i(X),iv=n(X,"LI",{});var rxe=s(iv);cge=n(rxe,"STRONG",{});var _it=s(cge);HDo=r(_it,"rembert"),_it.forEach(t),UDo=r(rxe," \u2014 "),jO=n(rxe,"A",{href:!0});var bit=s(jO);JDo=r(bit,"RemBertForQuestionAnswering"),bit.forEach(t),YDo=r(rxe," (RemBERT model)"),rxe.forEach(t),KDo=i(X),dv=n(X,"LI",{});var txe=s(dv);fge=n(txe,"STRONG",{});var vit=s(fge);ZDo=r(vit,"roberta"),vit.forEach(t),eGo=r(txe," \u2014 "),DO=n(txe,"A",{href:!0});var Fit=s(DO);oGo=r(Fit,"RobertaForQuestionAnswering"),Fit.forEach(t),rGo=r(txe," (RoBERTa model)"),txe.forEach(t),tGo=i(X),cv=n(X,"LI",{});var axe=s(cv);mge=n(axe,"STRONG",{});var Tit=s(mge);aGo=r(Tit,"roformer"),Tit.forEach(t),nGo=r(axe," \u2014 "),GO=n(axe,"A",{href:!0});var Mit=s(GO);sGo=r(Mit,"RoFormerForQuestionAnswering"),Mit.forEach(t),lGo=r(axe," (RoFormer model)"),axe.forEach(t),iGo=i(X),fv=n(X,"LI",{});var nxe=s(fv);gge=n(nxe,"STRONG",{});var Eit=s(gge);dGo=r(Eit,"splinter"),Eit.forEach(t),cGo=r(nxe," \u2014 "),OO=n(nxe,"A",{href:!0});var Cit=s(OO);fGo=r(Cit,"SplinterForQuestionAnswering"),Cit.forEach(t),mGo=r(nxe," (Splinter model)"),nxe.forEach(t),gGo=i(X),mv=n(X,"LI",{});var sxe=s(mv);hge=n(sxe,"STRONG",{});var wit=s(hge);hGo=r(wit,"squeezebert"),wit.forEach(t),pGo=r(sxe," \u2014 "),VO=n(sxe,"A",{href:!0});var Ait=s(VO);uGo=r(Ait,"SqueezeBertForQuestionAnswering"),Ait.forEach(t),_Go=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),bGo=i(X),gv=n(X,"LI",{});var lxe=s(gv);pge=n(lxe,"STRONG",{});var yit=s(pge);vGo=r(yit,"xlm"),yit.forEach(t),FGo=r(lxe," \u2014 "),XO=n(lxe,"A",{href:!0});var Lit=s(XO);TGo=r(Lit,"XLMForQuestionAnsweringSimple"),Lit.forEach(t),MGo=r(lxe," (XLM model)"),lxe.forEach(t),EGo=i(X),hv=n(X,"LI",{});var ixe=s(hv);uge=n(ixe,"STRONG",{});var xit=s(uge);CGo=r(xit,"xlm-roberta"),xit.forEach(t),wGo=r(ixe," \u2014 "),zO=n(ixe,"A",{href:!0});var $it=s(zO);AGo=r($it,"XLMRobertaForQuestionAnswering"),$it.forEach(t),yGo=r(ixe," (XLM-RoBERTa model)"),ixe.forEach(t),LGo=i(X),pv=n(X,"LI",{});var dxe=s(pv);_ge=n(dxe,"STRONG",{});var kit=s(_ge);xGo=r(kit,"xlm-roberta-xl"),kit.forEach(t),$Go=r(dxe," \u2014 "),QO=n(dxe,"A",{href:!0});var Sit=s(QO);kGo=r(Sit,"XLMRobertaXLForQuestionAnswering"),Sit.forEach(t),SGo=r(dxe," (XLM-RoBERTa-XL model)"),dxe.forEach(t),RGo=i(X),uv=n(X,"LI",{});var cxe=s(uv);bge=n(cxe,"STRONG",{});var Rit=s(bge);BGo=r(Rit,"xlnet"),Rit.forEach(t),PGo=r(cxe," \u2014 "),WO=n(cxe,"A",{href:!0});var Bit=s(WO);IGo=r(Bit,"XLNetForQuestionAnsweringSimple"),Bit.forEach(t),qGo=r(cxe," (XLNet model)"),cxe.forEach(t),NGo=i(X),_v=n(X,"LI",{});var fxe=s(_v);vge=n(fxe,"STRONG",{});var Pit=s(vge);jGo=r(Pit,"yoso"),Pit.forEach(t),DGo=r(fxe," \u2014 "),HO=n(fxe,"A",{href:!0});var Iit=s(HO);GGo=r(Iit,"YosoForQuestionAnswering"),Iit.forEach(t),OGo=r(fxe," (YOSO model)"),fxe.forEach(t),X.forEach(t),VGo=i(ia),bv=n(ia,"P",{});var mxe=s(bv);XGo=r(mxe,"The model is set in evaluation mode by default using "),Fge=n(mxe,"CODE",{});var qit=s(Fge);zGo=r(qit,"model.eval()"),qit.forEach(t),QGo=r(mxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(mxe,"CODE",{});var Nit=s(Tge);WGo=r(Nit,"model.train()"),Nit.forEach(t),mxe.forEach(t),HGo=i(ia),T(vv.$$.fragment,ia),ia.forEach(t),Us.forEach(t),IPe=i(f),Yi=n(f,"H2",{class:!0});var Dqe=s(Yi);Fv=n(Dqe,"A",{id:!0,class:!0,href:!0});var jit=s(Fv);Mge=n(jit,"SPAN",{});var Dit=s(Mge);T(dy.$$.fragment,Dit),Dit.forEach(t),jit.forEach(t),UGo=i(Dqe),Ege=n(Dqe,"SPAN",{});var Git=s(Ege);JGo=r(Git,"AutoModelForTableQuestionAnswering"),Git.forEach(t),Dqe.forEach(t),qPe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(cy.$$.fragment,Js),YGo=i(Js),Ki=n(Js,"P",{});var dK=s(Ki);KGo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UO=n(dK,"A",{href:!0});var Oit=s(UO);ZGo=r(Oit,"from_pretrained()"),Oit.forEach(t),eOo=r(dK," class method or the "),JO=n(dK,"A",{href:!0});var Vit=s(JO);oOo=r(Vit,"from_config()"),Vit.forEach(t),rOo=r(dK,` class
method.`),dK.forEach(t),tOo=i(Js),fy=n(Js,"P",{});var Gqe=s(fy);aOo=r(Gqe,"This class cannot be instantiated directly using "),Cge=n(Gqe,"CODE",{});var Xit=s(Cge);nOo=r(Xit,"__init__()"),Xit.forEach(t),sOo=r(Gqe," (throws an error)."),Gqe.forEach(t),lOo=i(Js),ft=n(Js,"DIV",{class:!0});var cw=s(ft);T(my.$$.fragment,cw),iOo=i(cw),wge=n(cw,"P",{});var zit=s(wge);dOo=r(zit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),zit.forEach(t),cOo=i(cw),Zi=n(cw,"P",{});var cK=s(Zi);fOo=r(cK,`Note:
Loading a model from its configuration file does `),Age=n(cK,"STRONG",{});var Qit=s(Age);mOo=r(Qit,"not"),Qit.forEach(t),gOo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(cK,"A",{href:!0});var Wit=s(YO);hOo=r(Wit,"from_pretrained()"),Wit.forEach(t),pOo=r(cK," to load the model weights."),cK.forEach(t),uOo=i(cw),T(Tv.$$.fragment,cw),cw.forEach(t),_Oo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(gy.$$.fragment,da),bOo=i(da),yge=n(da,"P",{});var Hit=s(yge);vOo=r(Hit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Hit.forEach(t),FOo=i(da),Ia=n(da,"P",{});var fw=s(Ia);TOo=r(fw,"The model class to instantiate is selected based on the "),Lge=n(fw,"CODE",{});var Uit=s(Lge);MOo=r(Uit,"model_type"),Uit.forEach(t),EOo=r(fw,` property of the config object (either
passed as an argument or loaded from `),xge=n(fw,"CODE",{});var Jit=s(xge);COo=r(Jit,"pretrained_model_name_or_path"),Jit.forEach(t),wOo=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ge=n(fw,"CODE",{});var Yit=s($ge);AOo=r(Yit,"pretrained_model_name_or_path"),Yit.forEach(t),yOo=r(fw,":"),fw.forEach(t),LOo=i(da),kge=n(da,"UL",{});var Kit=s(kge);Mv=n(Kit,"LI",{});var gxe=s(Mv);Sge=n(gxe,"STRONG",{});var Zit=s(Sge);xOo=r(Zit,"tapas"),Zit.forEach(t),$Oo=r(gxe," \u2014 "),KO=n(gxe,"A",{href:!0});var edt=s(KO);kOo=r(edt,"TapasForQuestionAnswering"),edt.forEach(t),SOo=r(gxe," (TAPAS model)"),gxe.forEach(t),Kit.forEach(t),ROo=i(da),Ev=n(da,"P",{});var hxe=s(Ev);BOo=r(hxe,"The model is set in evaluation mode by default using "),Rge=n(hxe,"CODE",{});var odt=s(Rge);POo=r(odt,"model.eval()"),odt.forEach(t),IOo=r(hxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bge=n(hxe,"CODE",{});var rdt=s(Bge);qOo=r(rdt,"model.train()"),rdt.forEach(t),hxe.forEach(t),NOo=i(da),T(Cv.$$.fragment,da),da.forEach(t),Js.forEach(t),NPe=i(f),ed=n(f,"H2",{class:!0});var Oqe=s(ed);wv=n(Oqe,"A",{id:!0,class:!0,href:!0});var tdt=s(wv);Pge=n(tdt,"SPAN",{});var adt=s(Pge);T(hy.$$.fragment,adt),adt.forEach(t),tdt.forEach(t),jOo=i(Oqe),Ige=n(Oqe,"SPAN",{});var ndt=s(Ige);DOo=r(ndt,"AutoModelForImageClassification"),ndt.forEach(t),Oqe.forEach(t),jPe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(py.$$.fragment,Ys),GOo=i(Ys),od=n(Ys,"P",{});var fK=s(od);OOo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ZO=n(fK,"A",{href:!0});var sdt=s(ZO);VOo=r(sdt,"from_pretrained()"),sdt.forEach(t),XOo=r(fK," class method or the "),eV=n(fK,"A",{href:!0});var ldt=s(eV);zOo=r(ldt,"from_config()"),ldt.forEach(t),QOo=r(fK,` class
method.`),fK.forEach(t),WOo=i(Ys),uy=n(Ys,"P",{});var Vqe=s(uy);HOo=r(Vqe,"This class cannot be instantiated directly using "),qge=n(Vqe,"CODE",{});var idt=s(qge);UOo=r(idt,"__init__()"),idt.forEach(t),JOo=r(Vqe," (throws an error)."),Vqe.forEach(t),YOo=i(Ys),mt=n(Ys,"DIV",{class:!0});var mw=s(mt);T(_y.$$.fragment,mw),KOo=i(mw),Nge=n(mw,"P",{});var ddt=s(Nge);ZOo=r(ddt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddt.forEach(t),eVo=i(mw),rd=n(mw,"P",{});var mK=s(rd);oVo=r(mK,`Note:
Loading a model from its configuration file does `),jge=n(mK,"STRONG",{});var cdt=s(jge);rVo=r(cdt,"not"),cdt.forEach(t),tVo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oV=n(mK,"A",{href:!0});var fdt=s(oV);aVo=r(fdt,"from_pretrained()"),fdt.forEach(t),nVo=r(mK," to load the model weights."),mK.forEach(t),sVo=i(mw),T(Av.$$.fragment,mw),mw.forEach(t),lVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(by.$$.fragment,ca),iVo=i(ca),Dge=n(ca,"P",{});var mdt=s(Dge);dVo=r(mdt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mdt.forEach(t),cVo=i(ca),qa=n(ca,"P",{});var gw=s(qa);fVo=r(gw,"The model class to instantiate is selected based on the "),Gge=n(gw,"CODE",{});var gdt=s(Gge);mVo=r(gdt,"model_type"),gdt.forEach(t),gVo=r(gw,` property of the config object (either
passed as an argument or loaded from `),Oge=n(gw,"CODE",{});var hdt=s(Oge);hVo=r(hdt,"pretrained_model_name_or_path"),hdt.forEach(t),pVo=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(gw,"CODE",{});var pdt=s(Vge);uVo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),_Vo=r(gw,":"),gw.forEach(t),bVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);yv=n(Ee,"LI",{});var pxe=s(yv);Xge=n(pxe,"STRONG",{});var udt=s(Xge);vVo=r(udt,"beit"),udt.forEach(t),FVo=r(pxe," \u2014 "),rV=n(pxe,"A",{href:!0});var _dt=s(rV);TVo=r(_dt,"BeitForImageClassification"),_dt.forEach(t),MVo=r(pxe," (BEiT model)"),pxe.forEach(t),EVo=i(Ee),Lv=n(Ee,"LI",{});var uxe=s(Lv);zge=n(uxe,"STRONG",{});var bdt=s(zge);CVo=r(bdt,"convnext"),bdt.forEach(t),wVo=r(uxe," \u2014 "),tV=n(uxe,"A",{href:!0});var vdt=s(tV);AVo=r(vdt,"ConvNextForImageClassification"),vdt.forEach(t),yVo=r(uxe," (ConvNext model)"),uxe.forEach(t),LVo=i(Ee),xv=n(Ee,"LI",{});var _xe=s(xv);Qge=n(_xe,"STRONG",{});var Fdt=s(Qge);xVo=r(Fdt,"data2vec-vision"),Fdt.forEach(t),$Vo=r(_xe," \u2014 "),aV=n(_xe,"A",{href:!0});var Tdt=s(aV);kVo=r(Tdt,"Data2VecVisionForImageClassification"),Tdt.forEach(t),SVo=r(_xe," (Data2VecVision model)"),_xe.forEach(t),RVo=i(Ee),Rs=n(Ee,"LI",{});var r$=s(Rs);Wge=n(r$,"STRONG",{});var Mdt=s(Wge);BVo=r(Mdt,"deit"),Mdt.forEach(t),PVo=r(r$," \u2014 "),nV=n(r$,"A",{href:!0});var Edt=s(nV);IVo=r(Edt,"DeiTForImageClassification"),Edt.forEach(t),qVo=r(r$," or "),sV=n(r$,"A",{href:!0});var Cdt=s(sV);NVo=r(Cdt,"DeiTForImageClassificationWithTeacher"),Cdt.forEach(t),jVo=r(r$," (DeiT model)"),r$.forEach(t),DVo=i(Ee),$v=n(Ee,"LI",{});var bxe=s($v);Hge=n(bxe,"STRONG",{});var wdt=s(Hge);GVo=r(wdt,"imagegpt"),wdt.forEach(t),OVo=r(bxe," \u2014 "),lV=n(bxe,"A",{href:!0});var Adt=s(lV);VVo=r(Adt,"ImageGPTForImageClassification"),Adt.forEach(t),XVo=r(bxe," (ImageGPT model)"),bxe.forEach(t),zVo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Uge=n(ff,"STRONG",{});var ydt=s(Uge);QVo=r(ydt,"perceiver"),ydt.forEach(t),WVo=r(ff," \u2014 "),iV=n(ff,"A",{href:!0});var Ldt=s(iV);HVo=r(Ldt,"PerceiverForImageClassificationLearned"),Ldt.forEach(t),UVo=r(ff," or "),dV=n(ff,"A",{href:!0});var xdt=s(dV);JVo=r(xdt,"PerceiverForImageClassificationFourier"),xdt.forEach(t),YVo=r(ff," or "),cV=n(ff,"A",{href:!0});var $dt=s(cV);KVo=r($dt,"PerceiverForImageClassificationConvProcessing"),$dt.forEach(t),ZVo=r(ff," (Perceiver model)"),ff.forEach(t),eXo=i(Ee),kv=n(Ee,"LI",{});var vxe=s(kv);Jge=n(vxe,"STRONG",{});var kdt=s(Jge);oXo=r(kdt,"poolformer"),kdt.forEach(t),rXo=r(vxe," \u2014 "),fV=n(vxe,"A",{href:!0});var Sdt=s(fV);tXo=r(Sdt,"PoolFormerForImageClassification"),Sdt.forEach(t),aXo=r(vxe," (PoolFormer model)"),vxe.forEach(t),nXo=i(Ee),Sv=n(Ee,"LI",{});var Fxe=s(Sv);Yge=n(Fxe,"STRONG",{});var Rdt=s(Yge);sXo=r(Rdt,"regnet"),Rdt.forEach(t),lXo=r(Fxe," \u2014 "),mV=n(Fxe,"A",{href:!0});var Bdt=s(mV);iXo=r(Bdt,"RegNetForImageClassification"),Bdt.forEach(t),dXo=r(Fxe," (RegNet model)"),Fxe.forEach(t),cXo=i(Ee),Rv=n(Ee,"LI",{});var Txe=s(Rv);Kge=n(Txe,"STRONG",{});var Pdt=s(Kge);fXo=r(Pdt,"resnet"),Pdt.forEach(t),mXo=r(Txe," \u2014 "),gV=n(Txe,"A",{href:!0});var Idt=s(gV);gXo=r(Idt,"ResNetForImageClassification"),Idt.forEach(t),hXo=r(Txe," (ResNet model)"),Txe.forEach(t),pXo=i(Ee),Bv=n(Ee,"LI",{});var Mxe=s(Bv);Zge=n(Mxe,"STRONG",{});var qdt=s(Zge);uXo=r(qdt,"segformer"),qdt.forEach(t),_Xo=r(Mxe," \u2014 "),hV=n(Mxe,"A",{href:!0});var Ndt=s(hV);bXo=r(Ndt,"SegformerForImageClassification"),Ndt.forEach(t),vXo=r(Mxe," (SegFormer model)"),Mxe.forEach(t),FXo=i(Ee),Pv=n(Ee,"LI",{});var Exe=s(Pv);ehe=n(Exe,"STRONG",{});var jdt=s(ehe);TXo=r(jdt,"swin"),jdt.forEach(t),MXo=r(Exe," \u2014 "),pV=n(Exe,"A",{href:!0});var Ddt=s(pV);EXo=r(Ddt,"SwinForImageClassification"),Ddt.forEach(t),CXo=r(Exe," (Swin model)"),Exe.forEach(t),wXo=i(Ee),Iv=n(Ee,"LI",{});var Cxe=s(Iv);ohe=n(Cxe,"STRONG",{});var Gdt=s(ohe);AXo=r(Gdt,"van"),Gdt.forEach(t),yXo=r(Cxe," \u2014 "),uV=n(Cxe,"A",{href:!0});var Odt=s(uV);LXo=r(Odt,"VanForImageClassification"),Odt.forEach(t),xXo=r(Cxe," (VAN model)"),Cxe.forEach(t),$Xo=i(Ee),qv=n(Ee,"LI",{});var wxe=s(qv);rhe=n(wxe,"STRONG",{});var Vdt=s(rhe);kXo=r(Vdt,"vit"),Vdt.forEach(t),SXo=r(wxe," \u2014 "),_V=n(wxe,"A",{href:!0});var Xdt=s(_V);RXo=r(Xdt,"ViTForImageClassification"),Xdt.forEach(t),BXo=r(wxe," (ViT model)"),wxe.forEach(t),Ee.forEach(t),PXo=i(ca),Nv=n(ca,"P",{});var Axe=s(Nv);IXo=r(Axe,"The model is set in evaluation mode by default using "),the=n(Axe,"CODE",{});var zdt=s(the);qXo=r(zdt,"model.eval()"),zdt.forEach(t),NXo=r(Axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ahe=n(Axe,"CODE",{});var Qdt=s(ahe);jXo=r(Qdt,"model.train()"),Qdt.forEach(t),Axe.forEach(t),DXo=i(ca),T(jv.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),DPe=i(f),td=n(f,"H2",{class:!0});var Xqe=s(td);Dv=n(Xqe,"A",{id:!0,class:!0,href:!0});var Wdt=s(Dv);nhe=n(Wdt,"SPAN",{});var Hdt=s(nhe);T(vy.$$.fragment,Hdt),Hdt.forEach(t),Wdt.forEach(t),GXo=i(Xqe),she=n(Xqe,"SPAN",{});var Udt=s(she);OXo=r(Udt,"AutoModelForVision2Seq"),Udt.forEach(t),Xqe.forEach(t),GPe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(Fy.$$.fragment,Ks),VXo=i(Ks),ad=n(Ks,"P",{});var gK=s(ad);XXo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bV=n(gK,"A",{href:!0});var Jdt=s(bV);zXo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),QXo=r(gK," class method or the "),vV=n(gK,"A",{href:!0});var Ydt=s(vV);WXo=r(Ydt,"from_config()"),Ydt.forEach(t),HXo=r(gK,` class
method.`),gK.forEach(t),UXo=i(Ks),Ty=n(Ks,"P",{});var zqe=s(Ty);JXo=r(zqe,"This class cannot be instantiated directly using "),lhe=n(zqe,"CODE",{});var Kdt=s(lhe);YXo=r(Kdt,"__init__()"),Kdt.forEach(t),KXo=r(zqe," (throws an error)."),zqe.forEach(t),ZXo=i(Ks),ht=n(Ks,"DIV",{class:!0});var hw=s(ht);T(My.$$.fragment,hw),ezo=i(hw),ihe=n(hw,"P",{});var Zdt=s(ihe);ozo=r(Zdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Zdt.forEach(t),rzo=i(hw),nd=n(hw,"P",{});var hK=s(nd);tzo=r(hK,`Note:
Loading a model from its configuration file does `),dhe=n(hK,"STRONG",{});var ect=s(dhe);azo=r(ect,"not"),ect.forEach(t),nzo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(hK,"A",{href:!0});var oct=s(FV);szo=r(oct,"from_pretrained()"),oct.forEach(t),lzo=r(hK," to load the model weights."),hK.forEach(t),izo=i(hw),T(Gv.$$.fragment,hw),hw.forEach(t),dzo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(Ey.$$.fragment,fa),czo=i(fa),che=n(fa,"P",{});var rct=s(che);fzo=r(rct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rct.forEach(t),mzo=i(fa),Na=n(fa,"P",{});var pw=s(Na);gzo=r(pw,"The model class to instantiate is selected based on the "),fhe=n(pw,"CODE",{});var tct=s(fhe);hzo=r(tct,"model_type"),tct.forEach(t),pzo=r(pw,` property of the config object (either
passed as an argument or loaded from `),mhe=n(pw,"CODE",{});var act=s(mhe);uzo=r(act,"pretrained_model_name_or_path"),act.forEach(t),_zo=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(pw,"CODE",{});var nct=s(ghe);bzo=r(nct,"pretrained_model_name_or_path"),nct.forEach(t),vzo=r(pw,":"),pw.forEach(t),Fzo=i(fa),hhe=n(fa,"UL",{});var sct=s(hhe);Ov=n(sct,"LI",{});var yxe=s(Ov);phe=n(yxe,"STRONG",{});var lct=s(phe);Tzo=r(lct,"vision-encoder-decoder"),lct.forEach(t),Mzo=r(yxe," \u2014 "),TV=n(yxe,"A",{href:!0});var ict=s(TV);Ezo=r(ict,"VisionEncoderDecoderModel"),ict.forEach(t),Czo=r(yxe," (Vision Encoder decoder model)"),yxe.forEach(t),sct.forEach(t),wzo=i(fa),Vv=n(fa,"P",{});var Lxe=s(Vv);Azo=r(Lxe,"The model is set in evaluation mode by default using "),uhe=n(Lxe,"CODE",{});var dct=s(uhe);yzo=r(dct,"model.eval()"),dct.forEach(t),Lzo=r(Lxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(Lxe,"CODE",{});var cct=s(_he);xzo=r(cct,"model.train()"),cct.forEach(t),Lxe.forEach(t),$zo=i(fa),T(Xv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),OPe=i(f),sd=n(f,"H2",{class:!0});var Qqe=s(sd);zv=n(Qqe,"A",{id:!0,class:!0,href:!0});var fct=s(zv);bhe=n(fct,"SPAN",{});var mct=s(bhe);T(Cy.$$.fragment,mct),mct.forEach(t),fct.forEach(t),kzo=i(Qqe),vhe=n(Qqe,"SPAN",{});var gct=s(vhe);Szo=r(gct,"AutoModelForAudioClassification"),gct.forEach(t),Qqe.forEach(t),VPe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(wy.$$.fragment,Zs),Rzo=i(Zs),ld=n(Zs,"P",{});var pK=s(ld);Bzo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),MV=n(pK,"A",{href:!0});var hct=s(MV);Pzo=r(hct,"from_pretrained()"),hct.forEach(t),Izo=r(pK," class method or the "),EV=n(pK,"A",{href:!0});var pct=s(EV);qzo=r(pct,"from_config()"),pct.forEach(t),Nzo=r(pK,` class
method.`),pK.forEach(t),jzo=i(Zs),Ay=n(Zs,"P",{});var Wqe=s(Ay);Dzo=r(Wqe,"This class cannot be instantiated directly using "),Fhe=n(Wqe,"CODE",{});var uct=s(Fhe);Gzo=r(uct,"__init__()"),uct.forEach(t),Ozo=r(Wqe," (throws an error)."),Wqe.forEach(t),Vzo=i(Zs),pt=n(Zs,"DIV",{class:!0});var uw=s(pt);T(yy.$$.fragment,uw),Xzo=i(uw),The=n(uw,"P",{});var _ct=s(The);zzo=r(_ct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),_ct.forEach(t),Qzo=i(uw),id=n(uw,"P",{});var uK=s(id);Wzo=r(uK,`Note:
Loading a model from its configuration file does `),Mhe=n(uK,"STRONG",{});var bct=s(Mhe);Hzo=r(bct,"not"),bct.forEach(t),Uzo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(uK,"A",{href:!0});var vct=s(CV);Jzo=r(vct,"from_pretrained()"),vct.forEach(t),Yzo=r(uK," to load the model weights."),uK.forEach(t),Kzo=i(uw),T(Qv.$$.fragment,uw),uw.forEach(t),Zzo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(Ly.$$.fragment,ma),eQo=i(ma),Ehe=n(ma,"P",{});var Fct=s(Ehe);oQo=r(Fct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Fct.forEach(t),rQo=i(ma),ja=n(ma,"P",{});var _w=s(ja);tQo=r(_w,"The model class to instantiate is selected based on the "),Che=n(_w,"CODE",{});var Tct=s(Che);aQo=r(Tct,"model_type"),Tct.forEach(t),nQo=r(_w,` property of the config object (either
passed as an argument or loaded from `),whe=n(_w,"CODE",{});var Mct=s(whe);sQo=r(Mct,"pretrained_model_name_or_path"),Mct.forEach(t),lQo=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(_w,"CODE",{});var Ect=s(Ahe);iQo=r(Ect,"pretrained_model_name_or_path"),Ect.forEach(t),dQo=r(_w,":"),_w.forEach(t),cQo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);Wv=n(bo,"LI",{});var xxe=s(Wv);yhe=n(xxe,"STRONG",{});var Cct=s(yhe);fQo=r(Cct,"data2vec-audio"),Cct.forEach(t),mQo=r(xxe," \u2014 "),wV=n(xxe,"A",{href:!0});var wct=s(wV);gQo=r(wct,"Data2VecAudioForSequenceClassification"),wct.forEach(t),hQo=r(xxe," (Data2VecAudio model)"),xxe.forEach(t),pQo=i(bo),Hv=n(bo,"LI",{});var $xe=s(Hv);Lhe=n($xe,"STRONG",{});var Act=s(Lhe);uQo=r(Act,"hubert"),Act.forEach(t),_Qo=r($xe," \u2014 "),AV=n($xe,"A",{href:!0});var yct=s(AV);bQo=r(yct,"HubertForSequenceClassification"),yct.forEach(t),vQo=r($xe," (Hubert model)"),$xe.forEach(t),FQo=i(bo),Uv=n(bo,"LI",{});var kxe=s(Uv);xhe=n(kxe,"STRONG",{});var Lct=s(xhe);TQo=r(Lct,"sew"),Lct.forEach(t),MQo=r(kxe," \u2014 "),yV=n(kxe,"A",{href:!0});var xct=s(yV);EQo=r(xct,"SEWForSequenceClassification"),xct.forEach(t),CQo=r(kxe," (SEW model)"),kxe.forEach(t),wQo=i(bo),Jv=n(bo,"LI",{});var Sxe=s(Jv);$he=n(Sxe,"STRONG",{});var $ct=s($he);AQo=r($ct,"sew-d"),$ct.forEach(t),yQo=r(Sxe," \u2014 "),LV=n(Sxe,"A",{href:!0});var kct=s(LV);LQo=r(kct,"SEWDForSequenceClassification"),kct.forEach(t),xQo=r(Sxe," (SEW-D model)"),Sxe.forEach(t),$Qo=i(bo),Yv=n(bo,"LI",{});var Rxe=s(Yv);khe=n(Rxe,"STRONG",{});var Sct=s(khe);kQo=r(Sct,"unispeech"),Sct.forEach(t),SQo=r(Rxe," \u2014 "),xV=n(Rxe,"A",{href:!0});var Rct=s(xV);RQo=r(Rct,"UniSpeechForSequenceClassification"),Rct.forEach(t),BQo=r(Rxe," (UniSpeech model)"),Rxe.forEach(t),PQo=i(bo),Kv=n(bo,"LI",{});var Bxe=s(Kv);She=n(Bxe,"STRONG",{});var Bct=s(She);IQo=r(Bct,"unispeech-sat"),Bct.forEach(t),qQo=r(Bxe," \u2014 "),$V=n(Bxe,"A",{href:!0});var Pct=s($V);NQo=r(Pct,"UniSpeechSatForSequenceClassification"),Pct.forEach(t),jQo=r(Bxe," (UniSpeechSat model)"),Bxe.forEach(t),DQo=i(bo),Zv=n(bo,"LI",{});var Pxe=s(Zv);Rhe=n(Pxe,"STRONG",{});var Ict=s(Rhe);GQo=r(Ict,"wav2vec2"),Ict.forEach(t),OQo=r(Pxe," \u2014 "),kV=n(Pxe,"A",{href:!0});var qct=s(kV);VQo=r(qct,"Wav2Vec2ForSequenceClassification"),qct.forEach(t),XQo=r(Pxe," (Wav2Vec2 model)"),Pxe.forEach(t),zQo=i(bo),eF=n(bo,"LI",{});var Ixe=s(eF);Bhe=n(Ixe,"STRONG",{});var Nct=s(Bhe);QQo=r(Nct,"wavlm"),Nct.forEach(t),WQo=r(Ixe," \u2014 "),SV=n(Ixe,"A",{href:!0});var jct=s(SV);HQo=r(jct,"WavLMForSequenceClassification"),jct.forEach(t),UQo=r(Ixe," (WavLM model)"),Ixe.forEach(t),bo.forEach(t),JQo=i(ma),oF=n(ma,"P",{});var qxe=s(oF);YQo=r(qxe,"The model is set in evaluation mode by default using "),Phe=n(qxe,"CODE",{});var Dct=s(Phe);KQo=r(Dct,"model.eval()"),Dct.forEach(t),ZQo=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ihe=n(qxe,"CODE",{});var Gct=s(Ihe);eWo=r(Gct,"model.train()"),Gct.forEach(t),qxe.forEach(t),oWo=i(ma),T(rF.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),XPe=i(f),dd=n(f,"H2",{class:!0});var Hqe=s(dd);tF=n(Hqe,"A",{id:!0,class:!0,href:!0});var Oct=s(tF);qhe=n(Oct,"SPAN",{});var Vct=s(qhe);T(xy.$$.fragment,Vct),Vct.forEach(t),Oct.forEach(t),rWo=i(Hqe),Nhe=n(Hqe,"SPAN",{});var Xct=s(Nhe);tWo=r(Xct,"AutoModelForAudioFrameClassification"),Xct.forEach(t),Hqe.forEach(t),zPe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T($y.$$.fragment,el),aWo=i(el),cd=n(el,"P",{});var _K=s(cd);nWo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),RV=n(_K,"A",{href:!0});var zct=s(RV);sWo=r(zct,"from_pretrained()"),zct.forEach(t),lWo=r(_K," class method or the "),BV=n(_K,"A",{href:!0});var Qct=s(BV);iWo=r(Qct,"from_config()"),Qct.forEach(t),dWo=r(_K,` class
method.`),_K.forEach(t),cWo=i(el),ky=n(el,"P",{});var Uqe=s(ky);fWo=r(Uqe,"This class cannot be instantiated directly using "),jhe=n(Uqe,"CODE",{});var Wct=s(jhe);mWo=r(Wct,"__init__()"),Wct.forEach(t),gWo=r(Uqe," (throws an error)."),Uqe.forEach(t),hWo=i(el),ut=n(el,"DIV",{class:!0});var bw=s(ut);T(Sy.$$.fragment,bw),pWo=i(bw),Dhe=n(bw,"P",{});var Hct=s(Dhe);uWo=r(Hct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Hct.forEach(t),_Wo=i(bw),fd=n(bw,"P",{});var bK=s(fd);bWo=r(bK,`Note:
Loading a model from its configuration file does `),Ghe=n(bK,"STRONG",{});var Uct=s(Ghe);vWo=r(Uct,"not"),Uct.forEach(t),FWo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(bK,"A",{href:!0});var Jct=s(PV);TWo=r(Jct,"from_pretrained()"),Jct.forEach(t),MWo=r(bK," to load the model weights."),bK.forEach(t),EWo=i(bw),T(aF.$$.fragment,bw),bw.forEach(t),CWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(Ry.$$.fragment,ga),wWo=i(ga),Ohe=n(ga,"P",{});var Yct=s(Ohe);AWo=r(Yct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Yct.forEach(t),yWo=i(ga),Da=n(ga,"P",{});var vw=s(Da);LWo=r(vw,"The model class to instantiate is selected based on the "),Vhe=n(vw,"CODE",{});var Kct=s(Vhe);xWo=r(Kct,"model_type"),Kct.forEach(t),$Wo=r(vw,` property of the config object (either
passed as an argument or loaded from `),Xhe=n(vw,"CODE",{});var Zct=s(Xhe);kWo=r(Zct,"pretrained_model_name_or_path"),Zct.forEach(t),SWo=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zhe=n(vw,"CODE",{});var eft=s(zhe);RWo=r(eft,"pretrained_model_name_or_path"),eft.forEach(t),BWo=r(vw,":"),vw.forEach(t),PWo=i(ga),Ga=n(ga,"UL",{});var Fw=s(Ga);nF=n(Fw,"LI",{});var Nxe=s(nF);Qhe=n(Nxe,"STRONG",{});var oft=s(Qhe);IWo=r(oft,"data2vec-audio"),oft.forEach(t),qWo=r(Nxe," \u2014 "),IV=n(Nxe,"A",{href:!0});var rft=s(IV);NWo=r(rft,"Data2VecAudioForAudioFrameClassification"),rft.forEach(t),jWo=r(Nxe," (Data2VecAudio model)"),Nxe.forEach(t),DWo=i(Fw),sF=n(Fw,"LI",{});var jxe=s(sF);Whe=n(jxe,"STRONG",{});var tft=s(Whe);GWo=r(tft,"unispeech-sat"),tft.forEach(t),OWo=r(jxe," \u2014 "),qV=n(jxe,"A",{href:!0});var aft=s(qV);VWo=r(aft,"UniSpeechSatForAudioFrameClassification"),aft.forEach(t),XWo=r(jxe," (UniSpeechSat model)"),jxe.forEach(t),zWo=i(Fw),lF=n(Fw,"LI",{});var Dxe=s(lF);Hhe=n(Dxe,"STRONG",{});var nft=s(Hhe);QWo=r(nft,"wav2vec2"),nft.forEach(t),WWo=r(Dxe," \u2014 "),NV=n(Dxe,"A",{href:!0});var sft=s(NV);HWo=r(sft,"Wav2Vec2ForAudioFrameClassification"),sft.forEach(t),UWo=r(Dxe," (Wav2Vec2 model)"),Dxe.forEach(t),JWo=i(Fw),iF=n(Fw,"LI",{});var Gxe=s(iF);Uhe=n(Gxe,"STRONG",{});var lft=s(Uhe);YWo=r(lft,"wavlm"),lft.forEach(t),KWo=r(Gxe," \u2014 "),jV=n(Gxe,"A",{href:!0});var ift=s(jV);ZWo=r(ift,"WavLMForAudioFrameClassification"),ift.forEach(t),eHo=r(Gxe," (WavLM model)"),Gxe.forEach(t),Fw.forEach(t),oHo=i(ga),dF=n(ga,"P",{});var Oxe=s(dF);rHo=r(Oxe,"The model is set in evaluation mode by default using "),Jhe=n(Oxe,"CODE",{});var dft=s(Jhe);tHo=r(dft,"model.eval()"),dft.forEach(t),aHo=r(Oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yhe=n(Oxe,"CODE",{});var cft=s(Yhe);nHo=r(cft,"model.train()"),cft.forEach(t),Oxe.forEach(t),sHo=i(ga),T(cF.$$.fragment,ga),ga.forEach(t),el.forEach(t),QPe=i(f),md=n(f,"H2",{class:!0});var Jqe=s(md);fF=n(Jqe,"A",{id:!0,class:!0,href:!0});var fft=s(fF);Khe=n(fft,"SPAN",{});var mft=s(Khe);T(By.$$.fragment,mft),mft.forEach(t),fft.forEach(t),lHo=i(Jqe),Zhe=n(Jqe,"SPAN",{});var gft=s(Zhe);iHo=r(gft,"AutoModelForCTC"),gft.forEach(t),Jqe.forEach(t),WPe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(Py.$$.fragment,ol),dHo=i(ol),gd=n(ol,"P",{});var vK=s(gd);cHo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),DV=n(vK,"A",{href:!0});var hft=s(DV);fHo=r(hft,"from_pretrained()"),hft.forEach(t),mHo=r(vK," class method or the "),GV=n(vK,"A",{href:!0});var pft=s(GV);gHo=r(pft,"from_config()"),pft.forEach(t),hHo=r(vK,` class
method.`),vK.forEach(t),pHo=i(ol),Iy=n(ol,"P",{});var Yqe=s(Iy);uHo=r(Yqe,"This class cannot be instantiated directly using "),epe=n(Yqe,"CODE",{});var uft=s(epe);_Ho=r(uft,"__init__()"),uft.forEach(t),bHo=r(Yqe," (throws an error)."),Yqe.forEach(t),vHo=i(ol),_t=n(ol,"DIV",{class:!0});var Tw=s(_t);T(qy.$$.fragment,Tw),FHo=i(Tw),ope=n(Tw,"P",{});var _ft=s(ope);THo=r(_ft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),_ft.forEach(t),MHo=i(Tw),hd=n(Tw,"P",{});var FK=s(hd);EHo=r(FK,`Note:
Loading a model from its configuration file does `),rpe=n(FK,"STRONG",{});var bft=s(rpe);CHo=r(bft,"not"),bft.forEach(t),wHo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OV=n(FK,"A",{href:!0});var vft=s(OV);AHo=r(vft,"from_pretrained()"),vft.forEach(t),yHo=r(FK," to load the model weights."),FK.forEach(t),LHo=i(Tw),T(mF.$$.fragment,Tw),Tw.forEach(t),xHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(Ny.$$.fragment,ha),$Ho=i(ha),tpe=n(ha,"P",{});var Fft=s(tpe);kHo=r(Fft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Fft.forEach(t),SHo=i(ha),Oa=n(ha,"P",{});var Mw=s(Oa);RHo=r(Mw,"The model class to instantiate is selected based on the "),ape=n(Mw,"CODE",{});var Tft=s(ape);BHo=r(Tft,"model_type"),Tft.forEach(t),PHo=r(Mw,` property of the config object (either
passed as an argument or loaded from `),npe=n(Mw,"CODE",{});var Mft=s(npe);IHo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),qHo=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(Mw,"CODE",{});var Eft=s(spe);NHo=r(Eft,"pretrained_model_name_or_path"),Eft.forEach(t),jHo=r(Mw,":"),Mw.forEach(t),DHo=i(ha),je=n(ha,"UL",{});var vo=s(je);gF=n(vo,"LI",{});var Vxe=s(gF);lpe=n(Vxe,"STRONG",{});var Cft=s(lpe);GHo=r(Cft,"data2vec-audio"),Cft.forEach(t),OHo=r(Vxe," \u2014 "),VV=n(Vxe,"A",{href:!0});var wft=s(VV);VHo=r(wft,"Data2VecAudioForCTC"),wft.forEach(t),XHo=r(Vxe," (Data2VecAudio model)"),Vxe.forEach(t),zHo=i(vo),hF=n(vo,"LI",{});var Xxe=s(hF);ipe=n(Xxe,"STRONG",{});var Aft=s(ipe);QHo=r(Aft,"hubert"),Aft.forEach(t),WHo=r(Xxe," \u2014 "),XV=n(Xxe,"A",{href:!0});var yft=s(XV);HHo=r(yft,"HubertForCTC"),yft.forEach(t),UHo=r(Xxe," (Hubert model)"),Xxe.forEach(t),JHo=i(vo),pF=n(vo,"LI",{});var zxe=s(pF);dpe=n(zxe,"STRONG",{});var Lft=s(dpe);YHo=r(Lft,"sew"),Lft.forEach(t),KHo=r(zxe," \u2014 "),zV=n(zxe,"A",{href:!0});var xft=s(zV);ZHo=r(xft,"SEWForCTC"),xft.forEach(t),eUo=r(zxe," (SEW model)"),zxe.forEach(t),oUo=i(vo),uF=n(vo,"LI",{});var Qxe=s(uF);cpe=n(Qxe,"STRONG",{});var $ft=s(cpe);rUo=r($ft,"sew-d"),$ft.forEach(t),tUo=r(Qxe," \u2014 "),QV=n(Qxe,"A",{href:!0});var kft=s(QV);aUo=r(kft,"SEWDForCTC"),kft.forEach(t),nUo=r(Qxe," (SEW-D model)"),Qxe.forEach(t),sUo=i(vo),_F=n(vo,"LI",{});var Wxe=s(_F);fpe=n(Wxe,"STRONG",{});var Sft=s(fpe);lUo=r(Sft,"unispeech"),Sft.forEach(t),iUo=r(Wxe," \u2014 "),WV=n(Wxe,"A",{href:!0});var Rft=s(WV);dUo=r(Rft,"UniSpeechForCTC"),Rft.forEach(t),cUo=r(Wxe," (UniSpeech model)"),Wxe.forEach(t),fUo=i(vo),bF=n(vo,"LI",{});var Hxe=s(bF);mpe=n(Hxe,"STRONG",{});var Bft=s(mpe);mUo=r(Bft,"unispeech-sat"),Bft.forEach(t),gUo=r(Hxe," \u2014 "),HV=n(Hxe,"A",{href:!0});var Pft=s(HV);hUo=r(Pft,"UniSpeechSatForCTC"),Pft.forEach(t),pUo=r(Hxe," (UniSpeechSat model)"),Hxe.forEach(t),uUo=i(vo),vF=n(vo,"LI",{});var Uxe=s(vF);gpe=n(Uxe,"STRONG",{});var Ift=s(gpe);_Uo=r(Ift,"wav2vec2"),Ift.forEach(t),bUo=r(Uxe," \u2014 "),UV=n(Uxe,"A",{href:!0});var qft=s(UV);vUo=r(qft,"Wav2Vec2ForCTC"),qft.forEach(t),FUo=r(Uxe," (Wav2Vec2 model)"),Uxe.forEach(t),TUo=i(vo),FF=n(vo,"LI",{});var Jxe=s(FF);hpe=n(Jxe,"STRONG",{});var Nft=s(hpe);MUo=r(Nft,"wavlm"),Nft.forEach(t),EUo=r(Jxe," \u2014 "),JV=n(Jxe,"A",{href:!0});var jft=s(JV);CUo=r(jft,"WavLMForCTC"),jft.forEach(t),wUo=r(Jxe," (WavLM model)"),Jxe.forEach(t),vo.forEach(t),AUo=i(ha),TF=n(ha,"P",{});var Yxe=s(TF);yUo=r(Yxe,"The model is set in evaluation mode by default using "),ppe=n(Yxe,"CODE",{});var Dft=s(ppe);LUo=r(Dft,"model.eval()"),Dft.forEach(t),xUo=r(Yxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(Yxe,"CODE",{});var Gft=s(upe);$Uo=r(Gft,"model.train()"),Gft.forEach(t),Yxe.forEach(t),kUo=i(ha),T(MF.$$.fragment,ha),ha.forEach(t),ol.forEach(t),HPe=i(f),pd=n(f,"H2",{class:!0});var Kqe=s(pd);EF=n(Kqe,"A",{id:!0,class:!0,href:!0});var Oft=s(EF);_pe=n(Oft,"SPAN",{});var Vft=s(_pe);T(jy.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),SUo=i(Kqe),bpe=n(Kqe,"SPAN",{});var Xft=s(bpe);RUo=r(Xft,"AutoModelForSpeechSeq2Seq"),Xft.forEach(t),Kqe.forEach(t),UPe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(Dy.$$.fragment,rl),BUo=i(rl),ud=n(rl,"P",{});var TK=s(ud);PUo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),YV=n(TK,"A",{href:!0});var zft=s(YV);IUo=r(zft,"from_pretrained()"),zft.forEach(t),qUo=r(TK," class method or the "),KV=n(TK,"A",{href:!0});var Qft=s(KV);NUo=r(Qft,"from_config()"),Qft.forEach(t),jUo=r(TK,` class
method.`),TK.forEach(t),DUo=i(rl),Gy=n(rl,"P",{});var Zqe=s(Gy);GUo=r(Zqe,"This class cannot be instantiated directly using "),vpe=n(Zqe,"CODE",{});var Wft=s(vpe);OUo=r(Wft,"__init__()"),Wft.forEach(t),VUo=r(Zqe," (throws an error)."),Zqe.forEach(t),XUo=i(rl),bt=n(rl,"DIV",{class:!0});var Ew=s(bt);T(Oy.$$.fragment,Ew),zUo=i(Ew),Fpe=n(Ew,"P",{});var Hft=s(Fpe);QUo=r(Hft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hft.forEach(t),WUo=i(Ew),_d=n(Ew,"P",{});var MK=s(_d);HUo=r(MK,`Note:
Loading a model from its configuration file does `),Tpe=n(MK,"STRONG",{});var Uft=s(Tpe);UUo=r(Uft,"not"),Uft.forEach(t),JUo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZV=n(MK,"A",{href:!0});var Jft=s(ZV);YUo=r(Jft,"from_pretrained()"),Jft.forEach(t),KUo=r(MK," to load the model weights."),MK.forEach(t),ZUo=i(Ew),T(CF.$$.fragment,Ew),Ew.forEach(t),eJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(Vy.$$.fragment,pa),oJo=i(pa),Mpe=n(pa,"P",{});var Yft=s(Mpe);rJo=r(Yft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yft.forEach(t),tJo=i(pa),Va=n(pa,"P",{});var Cw=s(Va);aJo=r(Cw,"The model class to instantiate is selected based on the "),Epe=n(Cw,"CODE",{});var Kft=s(Epe);nJo=r(Kft,"model_type"),Kft.forEach(t),sJo=r(Cw,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(Cw,"CODE",{});var Zft=s(Cpe);lJo=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),iJo=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(Cw,"CODE",{});var emt=s(wpe);dJo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),cJo=r(Cw,":"),Cw.forEach(t),fJo=i(pa),Xy=n(pa,"UL",{});var eNe=s(Xy);wF=n(eNe,"LI",{});var Kxe=s(wF);Ape=n(Kxe,"STRONG",{});var omt=s(Ape);mJo=r(omt,"speech-encoder-decoder"),omt.forEach(t),gJo=r(Kxe," \u2014 "),eX=n(Kxe,"A",{href:!0});var rmt=s(eX);hJo=r(rmt,"SpeechEncoderDecoderModel"),rmt.forEach(t),pJo=r(Kxe," (Speech Encoder decoder model)"),Kxe.forEach(t),uJo=i(eNe),AF=n(eNe,"LI",{});var Zxe=s(AF);ype=n(Zxe,"STRONG",{});var tmt=s(ype);_Jo=r(tmt,"speech_to_text"),tmt.forEach(t),bJo=r(Zxe," \u2014 "),oX=n(Zxe,"A",{href:!0});var amt=s(oX);vJo=r(amt,"Speech2TextForConditionalGeneration"),amt.forEach(t),FJo=r(Zxe," (Speech2Text model)"),Zxe.forEach(t),eNe.forEach(t),TJo=i(pa),yF=n(pa,"P",{});var e7e=s(yF);MJo=r(e7e,"The model is set in evaluation mode by default using "),Lpe=n(e7e,"CODE",{});var nmt=s(Lpe);EJo=r(nmt,"model.eval()"),nmt.forEach(t),CJo=r(e7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(e7e,"CODE",{});var smt=s(xpe);wJo=r(smt,"model.train()"),smt.forEach(t),e7e.forEach(t),AJo=i(pa),T(LF.$$.fragment,pa),pa.forEach(t),rl.forEach(t),JPe=i(f),bd=n(f,"H2",{class:!0});var oNe=s(bd);xF=n(oNe,"A",{id:!0,class:!0,href:!0});var lmt=s(xF);$pe=n(lmt,"SPAN",{});var imt=s($pe);T(zy.$$.fragment,imt),imt.forEach(t),lmt.forEach(t),yJo=i(oNe),kpe=n(oNe,"SPAN",{});var dmt=s(kpe);LJo=r(dmt,"AutoModelForAudioXVector"),dmt.forEach(t),oNe.forEach(t),YPe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(Qy.$$.fragment,tl),xJo=i(tl),vd=n(tl,"P",{});var EK=s(vd);$Jo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),rX=n(EK,"A",{href:!0});var cmt=s(rX);kJo=r(cmt,"from_pretrained()"),cmt.forEach(t),SJo=r(EK," class method or the "),tX=n(EK,"A",{href:!0});var fmt=s(tX);RJo=r(fmt,"from_config()"),fmt.forEach(t),BJo=r(EK,` class
method.`),EK.forEach(t),PJo=i(tl),Wy=n(tl,"P",{});var rNe=s(Wy);IJo=r(rNe,"This class cannot be instantiated directly using "),Spe=n(rNe,"CODE",{});var mmt=s(Spe);qJo=r(mmt,"__init__()"),mmt.forEach(t),NJo=r(rNe," (throws an error)."),rNe.forEach(t),jJo=i(tl),vt=n(tl,"DIV",{class:!0});var ww=s(vt);T(Hy.$$.fragment,ww),DJo=i(ww),Rpe=n(ww,"P",{});var gmt=s(Rpe);GJo=r(gmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),gmt.forEach(t),OJo=i(ww),Fd=n(ww,"P",{});var CK=s(Fd);VJo=r(CK,`Note:
Loading a model from its configuration file does `),Bpe=n(CK,"STRONG",{});var hmt=s(Bpe);XJo=r(hmt,"not"),hmt.forEach(t),zJo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(CK,"A",{href:!0});var pmt=s(aX);QJo=r(pmt,"from_pretrained()"),pmt.forEach(t),WJo=r(CK," to load the model weights."),CK.forEach(t),HJo=i(ww),T($F.$$.fragment,ww),ww.forEach(t),UJo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(Uy.$$.fragment,ua),JJo=i(ua),Ppe=n(ua,"P",{});var umt=s(Ppe);YJo=r(umt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),umt.forEach(t),KJo=i(ua),Xa=n(ua,"P",{});var Aw=s(Xa);ZJo=r(Aw,"The model class to instantiate is selected based on the "),Ipe=n(Aw,"CODE",{});var _mt=s(Ipe);eYo=r(_mt,"model_type"),_mt.forEach(t),oYo=r(Aw,` property of the config object (either
passed as an argument or loaded from `),qpe=n(Aw,"CODE",{});var bmt=s(qpe);rYo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),tYo=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(Aw,"CODE",{});var vmt=s(Npe);aYo=r(vmt,"pretrained_model_name_or_path"),vmt.forEach(t),nYo=r(Aw,":"),Aw.forEach(t),sYo=i(ua),za=n(ua,"UL",{});var yw=s(za);kF=n(yw,"LI",{});var o7e=s(kF);jpe=n(o7e,"STRONG",{});var Fmt=s(jpe);lYo=r(Fmt,"data2vec-audio"),Fmt.forEach(t),iYo=r(o7e," \u2014 "),nX=n(o7e,"A",{href:!0});var Tmt=s(nX);dYo=r(Tmt,"Data2VecAudioForXVector"),Tmt.forEach(t),cYo=r(o7e," (Data2VecAudio model)"),o7e.forEach(t),fYo=i(yw),SF=n(yw,"LI",{});var r7e=s(SF);Dpe=n(r7e,"STRONG",{});var Mmt=s(Dpe);mYo=r(Mmt,"unispeech-sat"),Mmt.forEach(t),gYo=r(r7e," \u2014 "),sX=n(r7e,"A",{href:!0});var Emt=s(sX);hYo=r(Emt,"UniSpeechSatForXVector"),Emt.forEach(t),pYo=r(r7e," (UniSpeechSat model)"),r7e.forEach(t),uYo=i(yw),RF=n(yw,"LI",{});var t7e=s(RF);Gpe=n(t7e,"STRONG",{});var Cmt=s(Gpe);_Yo=r(Cmt,"wav2vec2"),Cmt.forEach(t),bYo=r(t7e," \u2014 "),lX=n(t7e,"A",{href:!0});var wmt=s(lX);vYo=r(wmt,"Wav2Vec2ForXVector"),wmt.forEach(t),FYo=r(t7e," (Wav2Vec2 model)"),t7e.forEach(t),TYo=i(yw),BF=n(yw,"LI",{});var a7e=s(BF);Ope=n(a7e,"STRONG",{});var Amt=s(Ope);MYo=r(Amt,"wavlm"),Amt.forEach(t),EYo=r(a7e," \u2014 "),iX=n(a7e,"A",{href:!0});var ymt=s(iX);CYo=r(ymt,"WavLMForXVector"),ymt.forEach(t),wYo=r(a7e," (WavLM model)"),a7e.forEach(t),yw.forEach(t),AYo=i(ua),PF=n(ua,"P",{});var n7e=s(PF);yYo=r(n7e,"The model is set in evaluation mode by default using "),Vpe=n(n7e,"CODE",{});var Lmt=s(Vpe);LYo=r(Lmt,"model.eval()"),Lmt.forEach(t),xYo=r(n7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(n7e,"CODE",{});var xmt=s(Xpe);$Yo=r(xmt,"model.train()"),xmt.forEach(t),n7e.forEach(t),kYo=i(ua),T(IF.$$.fragment,ua),ua.forEach(t),tl.forEach(t),KPe=i(f),Td=n(f,"H2",{class:!0});var tNe=s(Td);qF=n(tNe,"A",{id:!0,class:!0,href:!0});var $mt=s(qF);zpe=n($mt,"SPAN",{});var kmt=s(zpe);T(Jy.$$.fragment,kmt),kmt.forEach(t),$mt.forEach(t),SYo=i(tNe),Qpe=n(tNe,"SPAN",{});var Smt=s(Qpe);RYo=r(Smt,"AutoModelForMaskedImageModeling"),Smt.forEach(t),tNe.forEach(t),ZPe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(Yy.$$.fragment,al),BYo=i(al),Md=n(al,"P",{});var wK=s(Md);PYo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),dX=n(wK,"A",{href:!0});var Rmt=s(dX);IYo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),qYo=r(wK," class method or the "),cX=n(wK,"A",{href:!0});var Bmt=s(cX);NYo=r(Bmt,"from_config()"),Bmt.forEach(t),jYo=r(wK,` class
method.`),wK.forEach(t),DYo=i(al),Ky=n(al,"P",{});var aNe=s(Ky);GYo=r(aNe,"This class cannot be instantiated directly using "),Wpe=n(aNe,"CODE",{});var Pmt=s(Wpe);OYo=r(Pmt,"__init__()"),Pmt.forEach(t),VYo=r(aNe," (throws an error)."),aNe.forEach(t),XYo=i(al),Ft=n(al,"DIV",{class:!0});var Lw=s(Ft);T(Zy.$$.fragment,Lw),zYo=i(Lw),Hpe=n(Lw,"P",{});var Imt=s(Hpe);QYo=r(Imt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Imt.forEach(t),WYo=i(Lw),Ed=n(Lw,"P",{});var AK=s(Ed);HYo=r(AK,`Note:
Loading a model from its configuration file does `),Upe=n(AK,"STRONG",{});var qmt=s(Upe);UYo=r(qmt,"not"),qmt.forEach(t),JYo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(AK,"A",{href:!0});var Nmt=s(fX);YYo=r(Nmt,"from_pretrained()"),Nmt.forEach(t),KYo=r(AK," to load the model weights."),AK.forEach(t),ZYo=i(Lw),T(NF.$$.fragment,Lw),Lw.forEach(t),eKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(eL.$$.fragment,_a),oKo=i(_a),Jpe=n(_a,"P",{});var jmt=s(Jpe);rKo=r(jmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jmt.forEach(t),tKo=i(_a),Qa=n(_a,"P",{});var xw=s(Qa);aKo=r(xw,"The model class to instantiate is selected based on the "),Ype=n(xw,"CODE",{});var Dmt=s(Ype);nKo=r(Dmt,"model_type"),Dmt.forEach(t),sKo=r(xw,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(xw,"CODE",{});var Gmt=s(Kpe);lKo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),iKo=r(xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(xw,"CODE",{});var Omt=s(Zpe);dKo=r(Omt,"pretrained_model_name_or_path"),Omt.forEach(t),cKo=r(xw,":"),xw.forEach(t),fKo=i(_a),Cd=n(_a,"UL",{});var yK=s(Cd);jF=n(yK,"LI",{});var s7e=s(jF);eue=n(s7e,"STRONG",{});var Vmt=s(eue);mKo=r(Vmt,"deit"),Vmt.forEach(t),gKo=r(s7e," \u2014 "),mX=n(s7e,"A",{href:!0});var Xmt=s(mX);hKo=r(Xmt,"DeiTForMaskedImageModeling"),Xmt.forEach(t),pKo=r(s7e," (DeiT model)"),s7e.forEach(t),uKo=i(yK),DF=n(yK,"LI",{});var l7e=s(DF);oue=n(l7e,"STRONG",{});var zmt=s(oue);_Ko=r(zmt,"swin"),zmt.forEach(t),bKo=r(l7e," \u2014 "),gX=n(l7e,"A",{href:!0});var Qmt=s(gX);vKo=r(Qmt,"SwinForMaskedImageModeling"),Qmt.forEach(t),FKo=r(l7e," (Swin model)"),l7e.forEach(t),TKo=i(yK),GF=n(yK,"LI",{});var i7e=s(GF);rue=n(i7e,"STRONG",{});var Wmt=s(rue);MKo=r(Wmt,"vit"),Wmt.forEach(t),EKo=r(i7e," \u2014 "),hX=n(i7e,"A",{href:!0});var Hmt=s(hX);CKo=r(Hmt,"ViTForMaskedImageModeling"),Hmt.forEach(t),wKo=r(i7e," (ViT model)"),i7e.forEach(t),yK.forEach(t),AKo=i(_a),OF=n(_a,"P",{});var d7e=s(OF);yKo=r(d7e,"The model is set in evaluation mode by default using "),tue=n(d7e,"CODE",{});var Umt=s(tue);LKo=r(Umt,"model.eval()"),Umt.forEach(t),xKo=r(d7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(d7e,"CODE",{});var Jmt=s(aue);$Ko=r(Jmt,"model.train()"),Jmt.forEach(t),d7e.forEach(t),kKo=i(_a),T(VF.$$.fragment,_a),_a.forEach(t),al.forEach(t),eIe=i(f),wd=n(f,"H2",{class:!0});var nNe=s(wd);XF=n(nNe,"A",{id:!0,class:!0,href:!0});var Ymt=s(XF);nue=n(Ymt,"SPAN",{});var Kmt=s(nue);T(oL.$$.fragment,Kmt),Kmt.forEach(t),Ymt.forEach(t),SKo=i(nNe),sue=n(nNe,"SPAN",{});var Zmt=s(sue);RKo=r(Zmt,"AutoModelForObjectDetection"),Zmt.forEach(t),nNe.forEach(t),oIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(rL.$$.fragment,nl),BKo=i(nl),Ad=n(nl,"P",{});var LK=s(Ad);PKo=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),pX=n(LK,"A",{href:!0});var egt=s(pX);IKo=r(egt,"from_pretrained()"),egt.forEach(t),qKo=r(LK," class method or the "),uX=n(LK,"A",{href:!0});var ogt=s(uX);NKo=r(ogt,"from_config()"),ogt.forEach(t),jKo=r(LK,` class
method.`),LK.forEach(t),DKo=i(nl),tL=n(nl,"P",{});var sNe=s(tL);GKo=r(sNe,"This class cannot be instantiated directly using "),lue=n(sNe,"CODE",{});var rgt=s(lue);OKo=r(rgt,"__init__()"),rgt.forEach(t),VKo=r(sNe," (throws an error)."),sNe.forEach(t),XKo=i(nl),Tt=n(nl,"DIV",{class:!0});var $w=s(Tt);T(aL.$$.fragment,$w),zKo=i($w),iue=n($w,"P",{});var tgt=s(iue);QKo=r(tgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),tgt.forEach(t),WKo=i($w),yd=n($w,"P",{});var xK=s(yd);HKo=r(xK,`Note:
Loading a model from its configuration file does `),due=n(xK,"STRONG",{});var agt=s(due);UKo=r(agt,"not"),agt.forEach(t),JKo=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_X=n(xK,"A",{href:!0});var ngt=s(_X);YKo=r(ngt,"from_pretrained()"),ngt.forEach(t),KKo=r(xK," to load the model weights."),xK.forEach(t),ZKo=i($w),T(zF.$$.fragment,$w),$w.forEach(t),eZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(nL.$$.fragment,ba),oZo=i(ba),cue=n(ba,"P",{});var sgt=s(cue);rZo=r(sgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sgt.forEach(t),tZo=i(ba),Wa=n(ba,"P",{});var kw=s(Wa);aZo=r(kw,"The model class to instantiate is selected based on the "),fue=n(kw,"CODE",{});var lgt=s(fue);nZo=r(lgt,"model_type"),lgt.forEach(t),sZo=r(kw,` property of the config object (either
passed as an argument or loaded from `),mue=n(kw,"CODE",{});var igt=s(mue);lZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),iZo=r(kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(kw,"CODE",{});var dgt=s(gue);dZo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),cZo=r(kw,":"),kw.forEach(t),fZo=i(ba),sL=n(ba,"UL",{});var lNe=s(sL);QF=n(lNe,"LI",{});var c7e=s(QF);hue=n(c7e,"STRONG",{});var cgt=s(hue);mZo=r(cgt,"detr"),cgt.forEach(t),gZo=r(c7e," \u2014 "),bX=n(c7e,"A",{href:!0});var fgt=s(bX);hZo=r(fgt,"DetrForObjectDetection"),fgt.forEach(t),pZo=r(c7e," (DETR model)"),c7e.forEach(t),uZo=i(lNe),WF=n(lNe,"LI",{});var f7e=s(WF);pue=n(f7e,"STRONG",{});var mgt=s(pue);_Zo=r(mgt,"yolos"),mgt.forEach(t),bZo=r(f7e," \u2014 "),vX=n(f7e,"A",{href:!0});var ggt=s(vX);vZo=r(ggt,"YolosForObjectDetection"),ggt.forEach(t),FZo=r(f7e," (YOLOS model)"),f7e.forEach(t),lNe.forEach(t),TZo=i(ba),HF=n(ba,"P",{});var m7e=s(HF);MZo=r(m7e,"The model is set in evaluation mode by default using "),uue=n(m7e,"CODE",{});var hgt=s(uue);EZo=r(hgt,"model.eval()"),hgt.forEach(t),CZo=r(m7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=n(m7e,"CODE",{});var pgt=s(_ue);wZo=r(pgt,"model.train()"),pgt.forEach(t),m7e.forEach(t),AZo=i(ba),T(UF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),rIe=i(f),Ld=n(f,"H2",{class:!0});var iNe=s(Ld);JF=n(iNe,"A",{id:!0,class:!0,href:!0});var ugt=s(JF);bue=n(ugt,"SPAN",{});var _gt=s(bue);T(lL.$$.fragment,_gt),_gt.forEach(t),ugt.forEach(t),yZo=i(iNe),vue=n(iNe,"SPAN",{});var bgt=s(vue);LZo=r(bgt,"AutoModelForImageSegmentation"),bgt.forEach(t),iNe.forEach(t),tIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(iL.$$.fragment,sl),xZo=i(sl),xd=n(sl,"P",{});var $K=s(xd);$Zo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),FX=n($K,"A",{href:!0});var vgt=s(FX);kZo=r(vgt,"from_pretrained()"),vgt.forEach(t),SZo=r($K," class method or the "),TX=n($K,"A",{href:!0});var Fgt=s(TX);RZo=r(Fgt,"from_config()"),Fgt.forEach(t),BZo=r($K,` class
method.`),$K.forEach(t),PZo=i(sl),dL=n(sl,"P",{});var dNe=s(dL);IZo=r(dNe,"This class cannot be instantiated directly using "),Fue=n(dNe,"CODE",{});var Tgt=s(Fue);qZo=r(Tgt,"__init__()"),Tgt.forEach(t),NZo=r(dNe," (throws an error)."),dNe.forEach(t),jZo=i(sl),Mt=n(sl,"DIV",{class:!0});var Sw=s(Mt);T(cL.$$.fragment,Sw),DZo=i(Sw),Tue=n(Sw,"P",{});var Mgt=s(Tue);GZo=r(Mgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Mgt.forEach(t),OZo=i(Sw),$d=n(Sw,"P",{});var kK=s($d);VZo=r(kK,`Note:
Loading a model from its configuration file does `),Mue=n(kK,"STRONG",{});var Egt=s(Mue);XZo=r(Egt,"not"),Egt.forEach(t),zZo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(kK,"A",{href:!0});var Cgt=s(MX);QZo=r(Cgt,"from_pretrained()"),Cgt.forEach(t),WZo=r(kK," to load the model weights."),kK.forEach(t),HZo=i(Sw),T(YF.$$.fragment,Sw),Sw.forEach(t),UZo=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(fL.$$.fragment,va),JZo=i(va),Eue=n(va,"P",{});var wgt=s(Eue);YZo=r(wgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),wgt.forEach(t),KZo=i(va),Ha=n(va,"P",{});var Rw=s(Ha);ZZo=r(Rw,"The model class to instantiate is selected based on the "),Cue=n(Rw,"CODE",{});var Agt=s(Cue);eer=r(Agt,"model_type"),Agt.forEach(t),oer=r(Rw,` property of the config object (either
passed as an argument or loaded from `),wue=n(Rw,"CODE",{});var ygt=s(wue);rer=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ter=r(Rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(Rw,"CODE",{});var Lgt=s(Aue);aer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),ner=r(Rw,":"),Rw.forEach(t),ser=i(va),yue=n(va,"UL",{});var xgt=s(yue);KF=n(xgt,"LI",{});var g7e=s(KF);Lue=n(g7e,"STRONG",{});var $gt=s(Lue);ler=r($gt,"detr"),$gt.forEach(t),ier=r(g7e," \u2014 "),EX=n(g7e,"A",{href:!0});var kgt=s(EX);der=r(kgt,"DetrForSegmentation"),kgt.forEach(t),cer=r(g7e," (DETR model)"),g7e.forEach(t),xgt.forEach(t),fer=i(va),ZF=n(va,"P",{});var h7e=s(ZF);mer=r(h7e,"The model is set in evaluation mode by default using "),xue=n(h7e,"CODE",{});var Sgt=s(xue);ger=r(Sgt,"model.eval()"),Sgt.forEach(t),her=r(h7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(h7e,"CODE",{});var Rgt=s($ue);per=r(Rgt,"model.train()"),Rgt.forEach(t),h7e.forEach(t),uer=i(va),T(e6.$$.fragment,va),va.forEach(t),sl.forEach(t),aIe=i(f),kd=n(f,"H2",{class:!0});var cNe=s(kd);o6=n(cNe,"A",{id:!0,class:!0,href:!0});var Bgt=s(o6);kue=n(Bgt,"SPAN",{});var Pgt=s(kue);T(mL.$$.fragment,Pgt),Pgt.forEach(t),Bgt.forEach(t),_er=i(cNe),Sue=n(cNe,"SPAN",{});var Igt=s(Sue);ber=r(Igt,"AutoModelForSemanticSegmentation"),Igt.forEach(t),cNe.forEach(t),nIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(gL.$$.fragment,ll),ver=i(ll),Sd=n(ll,"P",{});var SK=s(Sd);Fer=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),CX=n(SK,"A",{href:!0});var qgt=s(CX);Ter=r(qgt,"from_pretrained()"),qgt.forEach(t),Mer=r(SK," class method or the "),wX=n(SK,"A",{href:!0});var Ngt=s(wX);Eer=r(Ngt,"from_config()"),Ngt.forEach(t),Cer=r(SK,` class
method.`),SK.forEach(t),wer=i(ll),hL=n(ll,"P",{});var fNe=s(hL);Aer=r(fNe,"This class cannot be instantiated directly using "),Rue=n(fNe,"CODE",{});var jgt=s(Rue);yer=r(jgt,"__init__()"),jgt.forEach(t),Ler=r(fNe," (throws an error)."),fNe.forEach(t),xer=i(ll),Et=n(ll,"DIV",{class:!0});var Bw=s(Et);T(pL.$$.fragment,Bw),$er=i(Bw),Bue=n(Bw,"P",{});var Dgt=s(Bue);ker=r(Dgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Dgt.forEach(t),Ser=i(Bw),Rd=n(Bw,"P",{});var RK=s(Rd);Rer=r(RK,`Note:
Loading a model from its configuration file does `),Pue=n(RK,"STRONG",{});var Ggt=s(Pue);Ber=r(Ggt,"not"),Ggt.forEach(t),Per=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(RK,"A",{href:!0});var Ogt=s(AX);Ier=r(Ogt,"from_pretrained()"),Ogt.forEach(t),qer=r(RK," to load the model weights."),RK.forEach(t),Ner=i(Bw),T(r6.$$.fragment,Bw),Bw.forEach(t),jer=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(uL.$$.fragment,Fa),Der=i(Fa),Iue=n(Fa,"P",{});var Vgt=s(Iue);Ger=r(Vgt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Vgt.forEach(t),Oer=i(Fa),Ua=n(Fa,"P",{});var Pw=s(Ua);Ver=r(Pw,"The model class to instantiate is selected based on the "),que=n(Pw,"CODE",{});var Xgt=s(que);Xer=r(Xgt,"model_type"),Xgt.forEach(t),zer=r(Pw,` property of the config object (either
passed as an argument or loaded from `),Nue=n(Pw,"CODE",{});var zgt=s(Nue);Qer=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),Wer=r(Pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(Pw,"CODE",{});var Qgt=s(jue);Her=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),Uer=r(Pw,":"),Pw.forEach(t),Jer=i(Fa),Ja=n(Fa,"UL",{});var Iw=s(Ja);t6=n(Iw,"LI",{});var p7e=s(t6);Due=n(p7e,"STRONG",{});var Wgt=s(Due);Yer=r(Wgt,"beit"),Wgt.forEach(t),Ker=r(p7e," \u2014 "),yX=n(p7e,"A",{href:!0});var Hgt=s(yX);Zer=r(Hgt,"BeitForSemanticSegmentation"),Hgt.forEach(t),eor=r(p7e," (BEiT model)"),p7e.forEach(t),oor=i(Iw),a6=n(Iw,"LI",{});var u7e=s(a6);Gue=n(u7e,"STRONG",{});var Ugt=s(Gue);ror=r(Ugt,"data2vec-vision"),Ugt.forEach(t),tor=r(u7e," \u2014 "),LX=n(u7e,"A",{href:!0});var Jgt=s(LX);aor=r(Jgt,"Data2VecVisionForSemanticSegmentation"),Jgt.forEach(t),nor=r(u7e," (Data2VecVision model)"),u7e.forEach(t),sor=i(Iw),n6=n(Iw,"LI",{});var _7e=s(n6);Oue=n(_7e,"STRONG",{});var Ygt=s(Oue);lor=r(Ygt,"dpt"),Ygt.forEach(t),ior=r(_7e," \u2014 "),xX=n(_7e,"A",{href:!0});var Kgt=s(xX);dor=r(Kgt,"DPTForSemanticSegmentation"),Kgt.forEach(t),cor=r(_7e," (DPT model)"),_7e.forEach(t),mor=i(Iw),s6=n(Iw,"LI",{});var b7e=s(s6);Vue=n(b7e,"STRONG",{});var Zgt=s(Vue);gor=r(Zgt,"segformer"),Zgt.forEach(t),hor=r(b7e," \u2014 "),$X=n(b7e,"A",{href:!0});var eht=s($X);por=r(eht,"SegformerForSemanticSegmentation"),eht.forEach(t),uor=r(b7e," (SegFormer model)"),b7e.forEach(t),Iw.forEach(t),_or=i(Fa),l6=n(Fa,"P",{});var v7e=s(l6);bor=r(v7e,"The model is set in evaluation mode by default using "),Xue=n(v7e,"CODE",{});var oht=s(Xue);vor=r(oht,"model.eval()"),oht.forEach(t),For=r(v7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zue=n(v7e,"CODE",{});var rht=s(zue);Tor=r(rht,"model.train()"),rht.forEach(t),v7e.forEach(t),Mor=i(Fa),T(i6.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),sIe=i(f),Bd=n(f,"H2",{class:!0});var mNe=s(Bd);d6=n(mNe,"A",{id:!0,class:!0,href:!0});var tht=s(d6);Que=n(tht,"SPAN",{});var aht=s(Que);T(_L.$$.fragment,aht),aht.forEach(t),tht.forEach(t),Eor=i(mNe),Wue=n(mNe,"SPAN",{});var nht=s(Wue);Cor=r(nht,"AutoModelForInstanceSegmentation"),nht.forEach(t),mNe.forEach(t),lIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(bL.$$.fragment,il),wor=i(il),Pd=n(il,"P",{});var BK=s(Pd);Aor=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),kX=n(BK,"A",{href:!0});var sht=s(kX);yor=r(sht,"from_pretrained()"),sht.forEach(t),Lor=r(BK," class method or the "),SX=n(BK,"A",{href:!0});var lht=s(SX);xor=r(lht,"from_config()"),lht.forEach(t),$or=r(BK,` class
method.`),BK.forEach(t),kor=i(il),vL=n(il,"P",{});var gNe=s(vL);Sor=r(gNe,"This class cannot be instantiated directly using "),Hue=n(gNe,"CODE",{});var iht=s(Hue);Ror=r(iht,"__init__()"),iht.forEach(t),Bor=r(gNe," (throws an error)."),gNe.forEach(t),Por=i(il),Ct=n(il,"DIV",{class:!0});var qw=s(Ct);T(FL.$$.fragment,qw),Ior=i(qw),Uue=n(qw,"P",{});var dht=s(Uue);qor=r(dht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dht.forEach(t),Nor=i(qw),Id=n(qw,"P",{});var PK=s(Id);jor=r(PK,`Note:
Loading a model from its configuration file does `),Jue=n(PK,"STRONG",{});var cht=s(Jue);Dor=r(cht,"not"),cht.forEach(t),Gor=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(PK,"A",{href:!0});var fht=s(RX);Oor=r(fht,"from_pretrained()"),fht.forEach(t),Vor=r(PK," to load the model weights."),PK.forEach(t),Xor=i(qw),T(c6.$$.fragment,qw),qw.forEach(t),zor=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(TL.$$.fragment,Ta),Qor=i(Ta),Yue=n(Ta,"P",{});var mht=s(Yue);Wor=r(mht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),mht.forEach(t),Hor=i(Ta),Ya=n(Ta,"P",{});var Nw=s(Ya);Uor=r(Nw,"The model class to instantiate is selected based on the "),Kue=n(Nw,"CODE",{});var ght=s(Kue);Jor=r(ght,"model_type"),ght.forEach(t),Yor=r(Nw,` property of the config object (either
passed as an argument or loaded from `),Zue=n(Nw,"CODE",{});var hht=s(Zue);Kor=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),Zor=r(Nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(Nw,"CODE",{});var pht=s(e_e);err=r(pht,"pretrained_model_name_or_path"),pht.forEach(t),orr=r(Nw,":"),Nw.forEach(t),rrr=i(Ta),o_e=n(Ta,"UL",{});var uht=s(o_e);f6=n(uht,"LI",{});var F7e=s(f6);r_e=n(F7e,"STRONG",{});var _ht=s(r_e);trr=r(_ht,"maskformer"),_ht.forEach(t),arr=r(F7e," \u2014 "),BX=n(F7e,"A",{href:!0});var bht=s(BX);nrr=r(bht,"MaskFormerForInstanceSegmentation"),bht.forEach(t),srr=r(F7e," (MaskFormer model)"),F7e.forEach(t),uht.forEach(t),lrr=i(Ta),m6=n(Ta,"P",{});var T7e=s(m6);irr=r(T7e,"The model is set in evaluation mode by default using "),t_e=n(T7e,"CODE",{});var vht=s(t_e);drr=r(vht,"model.eval()"),vht.forEach(t),crr=r(T7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a_e=n(T7e,"CODE",{});var Fht=s(a_e);frr=r(Fht,"model.train()"),Fht.forEach(t),T7e.forEach(t),mrr=i(Ta),T(g6.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),iIe=i(f),qd=n(f,"H2",{class:!0});var hNe=s(qd);h6=n(hNe,"A",{id:!0,class:!0,href:!0});var Tht=s(h6);n_e=n(Tht,"SPAN",{});var Mht=s(n_e);T(ML.$$.fragment,Mht),Mht.forEach(t),Tht.forEach(t),grr=i(hNe),s_e=n(hNe,"SPAN",{});var Eht=s(s_e);hrr=r(Eht,"TFAutoModel"),Eht.forEach(t),hNe.forEach(t),dIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(EL.$$.fragment,dl),prr=i(dl),Nd=n(dl,"P",{});var IK=s(Nd);urr=r(IK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),PX=n(IK,"A",{href:!0});var Cht=s(PX);_rr=r(Cht,"from_pretrained()"),Cht.forEach(t),brr=r(IK," class method or the "),IX=n(IK,"A",{href:!0});var wht=s(IX);vrr=r(wht,"from_config()"),wht.forEach(t),Frr=r(IK,` class
method.`),IK.forEach(t),Trr=i(dl),CL=n(dl,"P",{});var pNe=s(CL);Mrr=r(pNe,"This class cannot be instantiated directly using "),l_e=n(pNe,"CODE",{});var Aht=s(l_e);Err=r(Aht,"__init__()"),Aht.forEach(t),Crr=r(pNe," (throws an error)."),pNe.forEach(t),wrr=i(dl),wt=n(dl,"DIV",{class:!0});var jw=s(wt);T(wL.$$.fragment,jw),Arr=i(jw),i_e=n(jw,"P",{});var yht=s(i_e);yrr=r(yht,"Instantiates one of the base model classes of the library from a configuration."),yht.forEach(t),Lrr=i(jw),jd=n(jw,"P",{});var qK=s(jd);xrr=r(qK,`Note:
Loading a model from its configuration file does `),d_e=n(qK,"STRONG",{});var Lht=s(d_e);$rr=r(Lht,"not"),Lht.forEach(t),krr=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qX=n(qK,"A",{href:!0});var xht=s(qX);Srr=r(xht,"from_pretrained()"),xht.forEach(t),Rrr=r(qK," to load the model weights."),qK.forEach(t),Brr=i(jw),T(p6.$$.fragment,jw),jw.forEach(t),Prr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(AL.$$.fragment,cl),Irr=i(cl),c_e=n(cl,"P",{});var $ht=s(c_e);qrr=r($ht,"Instantiate one of the base model classes of the library from a pretrained model."),$ht.forEach(t),Nrr=i(cl),Ka=n(cl,"P",{});var Dw=s(Ka);jrr=r(Dw,"The model class to instantiate is selected based on the "),f_e=n(Dw,"CODE",{});var kht=s(f_e);Drr=r(kht,"model_type"),kht.forEach(t),Grr=r(Dw,` property of the config object (either
passed as an argument or loaded from `),m_e=n(Dw,"CODE",{});var Sht=s(m_e);Orr=r(Sht,"pretrained_model_name_or_path"),Sht.forEach(t),Vrr=r(Dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g_e=n(Dw,"CODE",{});var Rht=s(g_e);Xrr=r(Rht,"pretrained_model_name_or_path"),Rht.forEach(t),zrr=r(Dw,":"),Dw.forEach(t),Qrr=i(cl),j=n(cl,"UL",{});var D=s(j);u6=n(D,"LI",{});var M7e=s(u6);h_e=n(M7e,"STRONG",{});var Bht=s(h_e);Wrr=r(Bht,"albert"),Bht.forEach(t),Hrr=r(M7e," \u2014 "),NX=n(M7e,"A",{href:!0});var Pht=s(NX);Urr=r(Pht,"TFAlbertModel"),Pht.forEach(t),Jrr=r(M7e," (ALBERT model)"),M7e.forEach(t),Yrr=i(D),_6=n(D,"LI",{});var E7e=s(_6);p_e=n(E7e,"STRONG",{});var Iht=s(p_e);Krr=r(Iht,"bart"),Iht.forEach(t),Zrr=r(E7e," \u2014 "),jX=n(E7e,"A",{href:!0});var qht=s(jX);etr=r(qht,"TFBartModel"),qht.forEach(t),otr=r(E7e," (BART model)"),E7e.forEach(t),rtr=i(D),b6=n(D,"LI",{});var C7e=s(b6);u_e=n(C7e,"STRONG",{});var Nht=s(u_e);ttr=r(Nht,"bert"),Nht.forEach(t),atr=r(C7e," \u2014 "),DX=n(C7e,"A",{href:!0});var jht=s(DX);ntr=r(jht,"TFBertModel"),jht.forEach(t),str=r(C7e," (BERT model)"),C7e.forEach(t),ltr=i(D),v6=n(D,"LI",{});var w7e=s(v6);__e=n(w7e,"STRONG",{});var Dht=s(__e);itr=r(Dht,"blenderbot"),Dht.forEach(t),dtr=r(w7e," \u2014 "),GX=n(w7e,"A",{href:!0});var Ght=s(GX);ctr=r(Ght,"TFBlenderbotModel"),Ght.forEach(t),ftr=r(w7e," (Blenderbot model)"),w7e.forEach(t),mtr=i(D),F6=n(D,"LI",{});var A7e=s(F6);b_e=n(A7e,"STRONG",{});var Oht=s(b_e);gtr=r(Oht,"blenderbot-small"),Oht.forEach(t),htr=r(A7e," \u2014 "),OX=n(A7e,"A",{href:!0});var Vht=s(OX);ptr=r(Vht,"TFBlenderbotSmallModel"),Vht.forEach(t),utr=r(A7e," (BlenderbotSmall model)"),A7e.forEach(t),_tr=i(D),T6=n(D,"LI",{});var y7e=s(T6);v_e=n(y7e,"STRONG",{});var Xht=s(v_e);btr=r(Xht,"camembert"),Xht.forEach(t),vtr=r(y7e," \u2014 "),VX=n(y7e,"A",{href:!0});var zht=s(VX);Ftr=r(zht,"TFCamembertModel"),zht.forEach(t),Ttr=r(y7e," (CamemBERT model)"),y7e.forEach(t),Mtr=i(D),M6=n(D,"LI",{});var L7e=s(M6);F_e=n(L7e,"STRONG",{});var Qht=s(F_e);Etr=r(Qht,"clip"),Qht.forEach(t),Ctr=r(L7e," \u2014 "),XX=n(L7e,"A",{href:!0});var Wht=s(XX);wtr=r(Wht,"TFCLIPModel"),Wht.forEach(t),Atr=r(L7e," (CLIP model)"),L7e.forEach(t),ytr=i(D),E6=n(D,"LI",{});var x7e=s(E6);T_e=n(x7e,"STRONG",{});var Hht=s(T_e);Ltr=r(Hht,"convbert"),Hht.forEach(t),xtr=r(x7e," \u2014 "),zX=n(x7e,"A",{href:!0});var Uht=s(zX);$tr=r(Uht,"TFConvBertModel"),Uht.forEach(t),ktr=r(x7e," (ConvBERT model)"),x7e.forEach(t),Str=i(D),C6=n(D,"LI",{});var $7e=s(C6);M_e=n($7e,"STRONG",{});var Jht=s(M_e);Rtr=r(Jht,"convnext"),Jht.forEach(t),Btr=r($7e," \u2014 "),QX=n($7e,"A",{href:!0});var Yht=s(QX);Ptr=r(Yht,"TFConvNextModel"),Yht.forEach(t),Itr=r($7e," (ConvNext model)"),$7e.forEach(t),qtr=i(D),w6=n(D,"LI",{});var k7e=s(w6);E_e=n(k7e,"STRONG",{});var Kht=s(E_e);Ntr=r(Kht,"ctrl"),Kht.forEach(t),jtr=r(k7e," \u2014 "),WX=n(k7e,"A",{href:!0});var Zht=s(WX);Dtr=r(Zht,"TFCTRLModel"),Zht.forEach(t),Gtr=r(k7e," (CTRL model)"),k7e.forEach(t),Otr=i(D),A6=n(D,"LI",{});var S7e=s(A6);C_e=n(S7e,"STRONG",{});var ept=s(C_e);Vtr=r(ept,"data2vec-vision"),ept.forEach(t),Xtr=r(S7e," \u2014 "),HX=n(S7e,"A",{href:!0});var opt=s(HX);ztr=r(opt,"TFData2VecVisionModel"),opt.forEach(t),Qtr=r(S7e," (Data2VecVision model)"),S7e.forEach(t),Wtr=i(D),y6=n(D,"LI",{});var R7e=s(y6);w_e=n(R7e,"STRONG",{});var rpt=s(w_e);Htr=r(rpt,"deberta"),rpt.forEach(t),Utr=r(R7e," \u2014 "),UX=n(R7e,"A",{href:!0});var tpt=s(UX);Jtr=r(tpt,"TFDebertaModel"),tpt.forEach(t),Ytr=r(R7e," (DeBERTa model)"),R7e.forEach(t),Ktr=i(D),L6=n(D,"LI",{});var B7e=s(L6);A_e=n(B7e,"STRONG",{});var apt=s(A_e);Ztr=r(apt,"deberta-v2"),apt.forEach(t),ear=r(B7e," \u2014 "),JX=n(B7e,"A",{href:!0});var npt=s(JX);oar=r(npt,"TFDebertaV2Model"),npt.forEach(t),rar=r(B7e," (DeBERTa-v2 model)"),B7e.forEach(t),tar=i(D),x6=n(D,"LI",{});var P7e=s(x6);y_e=n(P7e,"STRONG",{});var spt=s(y_e);aar=r(spt,"distilbert"),spt.forEach(t),nar=r(P7e," \u2014 "),YX=n(P7e,"A",{href:!0});var lpt=s(YX);sar=r(lpt,"TFDistilBertModel"),lpt.forEach(t),lar=r(P7e," (DistilBERT model)"),P7e.forEach(t),iar=i(D),$6=n(D,"LI",{});var I7e=s($6);L_e=n(I7e,"STRONG",{});var ipt=s(L_e);dar=r(ipt,"dpr"),ipt.forEach(t),car=r(I7e," \u2014 "),KX=n(I7e,"A",{href:!0});var dpt=s(KX);far=r(dpt,"TFDPRQuestionEncoder"),dpt.forEach(t),mar=r(I7e," (DPR model)"),I7e.forEach(t),gar=i(D),k6=n(D,"LI",{});var q7e=s(k6);x_e=n(q7e,"STRONG",{});var cpt=s(x_e);har=r(cpt,"electra"),cpt.forEach(t),par=r(q7e," \u2014 "),ZX=n(q7e,"A",{href:!0});var fpt=s(ZX);uar=r(fpt,"TFElectraModel"),fpt.forEach(t),_ar=r(q7e," (ELECTRA model)"),q7e.forEach(t),bar=i(D),S6=n(D,"LI",{});var N7e=s(S6);$_e=n(N7e,"STRONG",{});var mpt=s($_e);Far=r(mpt,"flaubert"),mpt.forEach(t),Tar=r(N7e," \u2014 "),ez=n(N7e,"A",{href:!0});var gpt=s(ez);Mar=r(gpt,"TFFlaubertModel"),gpt.forEach(t),Ear=r(N7e," (FlauBERT model)"),N7e.forEach(t),Car=i(D),Bs=n(D,"LI",{});var t$=s(Bs);k_e=n(t$,"STRONG",{});var hpt=s(k_e);war=r(hpt,"funnel"),hpt.forEach(t),Aar=r(t$," \u2014 "),oz=n(t$,"A",{href:!0});var ppt=s(oz);yar=r(ppt,"TFFunnelModel"),ppt.forEach(t),Lar=r(t$," or "),rz=n(t$,"A",{href:!0});var upt=s(rz);xar=r(upt,"TFFunnelBaseModel"),upt.forEach(t),$ar=r(t$," (Funnel Transformer model)"),t$.forEach(t),kar=i(D),R6=n(D,"LI",{});var j7e=s(R6);S_e=n(j7e,"STRONG",{});var _pt=s(S_e);Sar=r(_pt,"gpt2"),_pt.forEach(t),Rar=r(j7e," \u2014 "),tz=n(j7e,"A",{href:!0});var bpt=s(tz);Bar=r(bpt,"TFGPT2Model"),bpt.forEach(t),Par=r(j7e," (OpenAI GPT-2 model)"),j7e.forEach(t),Iar=i(D),B6=n(D,"LI",{});var D7e=s(B6);R_e=n(D7e,"STRONG",{});var vpt=s(R_e);qar=r(vpt,"gptj"),vpt.forEach(t),Nar=r(D7e," \u2014 "),az=n(D7e,"A",{href:!0});var Fpt=s(az);jar=r(Fpt,"TFGPTJModel"),Fpt.forEach(t),Dar=r(D7e," (GPT-J model)"),D7e.forEach(t),Gar=i(D),P6=n(D,"LI",{});var G7e=s(P6);B_e=n(G7e,"STRONG",{});var Tpt=s(B_e);Oar=r(Tpt,"hubert"),Tpt.forEach(t),Var=r(G7e," \u2014 "),nz=n(G7e,"A",{href:!0});var Mpt=s(nz);Xar=r(Mpt,"TFHubertModel"),Mpt.forEach(t),zar=r(G7e," (Hubert model)"),G7e.forEach(t),Qar=i(D),I6=n(D,"LI",{});var O7e=s(I6);P_e=n(O7e,"STRONG",{});var Ept=s(P_e);War=r(Ept,"layoutlm"),Ept.forEach(t),Har=r(O7e," \u2014 "),sz=n(O7e,"A",{href:!0});var Cpt=s(sz);Uar=r(Cpt,"TFLayoutLMModel"),Cpt.forEach(t),Jar=r(O7e," (LayoutLM model)"),O7e.forEach(t),Yar=i(D),q6=n(D,"LI",{});var V7e=s(q6);I_e=n(V7e,"STRONG",{});var wpt=s(I_e);Kar=r(wpt,"led"),wpt.forEach(t),Zar=r(V7e," \u2014 "),lz=n(V7e,"A",{href:!0});var Apt=s(lz);enr=r(Apt,"TFLEDModel"),Apt.forEach(t),onr=r(V7e," (LED model)"),V7e.forEach(t),rnr=i(D),N6=n(D,"LI",{});var X7e=s(N6);q_e=n(X7e,"STRONG",{});var ypt=s(q_e);tnr=r(ypt,"longformer"),ypt.forEach(t),anr=r(X7e," \u2014 "),iz=n(X7e,"A",{href:!0});var Lpt=s(iz);nnr=r(Lpt,"TFLongformerModel"),Lpt.forEach(t),snr=r(X7e," (Longformer model)"),X7e.forEach(t),lnr=i(D),j6=n(D,"LI",{});var z7e=s(j6);N_e=n(z7e,"STRONG",{});var xpt=s(N_e);inr=r(xpt,"lxmert"),xpt.forEach(t),dnr=r(z7e," \u2014 "),dz=n(z7e,"A",{href:!0});var $pt=s(dz);cnr=r($pt,"TFLxmertModel"),$pt.forEach(t),fnr=r(z7e," (LXMERT model)"),z7e.forEach(t),mnr=i(D),D6=n(D,"LI",{});var Q7e=s(D6);j_e=n(Q7e,"STRONG",{});var kpt=s(j_e);gnr=r(kpt,"marian"),kpt.forEach(t),hnr=r(Q7e," \u2014 "),cz=n(Q7e,"A",{href:!0});var Spt=s(cz);pnr=r(Spt,"TFMarianModel"),Spt.forEach(t),unr=r(Q7e," (Marian model)"),Q7e.forEach(t),_nr=i(D),G6=n(D,"LI",{});var W7e=s(G6);D_e=n(W7e,"STRONG",{});var Rpt=s(D_e);bnr=r(Rpt,"mbart"),Rpt.forEach(t),vnr=r(W7e," \u2014 "),fz=n(W7e,"A",{href:!0});var Bpt=s(fz);Fnr=r(Bpt,"TFMBartModel"),Bpt.forEach(t),Tnr=r(W7e," (mBART model)"),W7e.forEach(t),Mnr=i(D),O6=n(D,"LI",{});var H7e=s(O6);G_e=n(H7e,"STRONG",{});var Ppt=s(G_e);Enr=r(Ppt,"mobilebert"),Ppt.forEach(t),Cnr=r(H7e," \u2014 "),mz=n(H7e,"A",{href:!0});var Ipt=s(mz);wnr=r(Ipt,"TFMobileBertModel"),Ipt.forEach(t),Anr=r(H7e," (MobileBERT model)"),H7e.forEach(t),ynr=i(D),V6=n(D,"LI",{});var U7e=s(V6);O_e=n(U7e,"STRONG",{});var qpt=s(O_e);Lnr=r(qpt,"mpnet"),qpt.forEach(t),xnr=r(U7e," \u2014 "),gz=n(U7e,"A",{href:!0});var Npt=s(gz);$nr=r(Npt,"TFMPNetModel"),Npt.forEach(t),knr=r(U7e," (MPNet model)"),U7e.forEach(t),Snr=i(D),X6=n(D,"LI",{});var J7e=s(X6);V_e=n(J7e,"STRONG",{});var jpt=s(V_e);Rnr=r(jpt,"mt5"),jpt.forEach(t),Bnr=r(J7e," \u2014 "),hz=n(J7e,"A",{href:!0});var Dpt=s(hz);Pnr=r(Dpt,"TFMT5Model"),Dpt.forEach(t),Inr=r(J7e," (mT5 model)"),J7e.forEach(t),qnr=i(D),z6=n(D,"LI",{});var Y7e=s(z6);X_e=n(Y7e,"STRONG",{});var Gpt=s(X_e);Nnr=r(Gpt,"openai-gpt"),Gpt.forEach(t),jnr=r(Y7e," \u2014 "),pz=n(Y7e,"A",{href:!0});var Opt=s(pz);Dnr=r(Opt,"TFOpenAIGPTModel"),Opt.forEach(t),Gnr=r(Y7e," (OpenAI GPT model)"),Y7e.forEach(t),Onr=i(D),Q6=n(D,"LI",{});var K7e=s(Q6);z_e=n(K7e,"STRONG",{});var Vpt=s(z_e);Vnr=r(Vpt,"pegasus"),Vpt.forEach(t),Xnr=r(K7e," \u2014 "),uz=n(K7e,"A",{href:!0});var Xpt=s(uz);znr=r(Xpt,"TFPegasusModel"),Xpt.forEach(t),Qnr=r(K7e," (Pegasus model)"),K7e.forEach(t),Wnr=i(D),W6=n(D,"LI",{});var Z7e=s(W6);Q_e=n(Z7e,"STRONG",{});var zpt=s(Q_e);Hnr=r(zpt,"rembert"),zpt.forEach(t),Unr=r(Z7e," \u2014 "),_z=n(Z7e,"A",{href:!0});var Qpt=s(_z);Jnr=r(Qpt,"TFRemBertModel"),Qpt.forEach(t),Ynr=r(Z7e," (RemBERT model)"),Z7e.forEach(t),Knr=i(D),H6=n(D,"LI",{});var e$e=s(H6);W_e=n(e$e,"STRONG",{});var Wpt=s(W_e);Znr=r(Wpt,"roberta"),Wpt.forEach(t),esr=r(e$e," \u2014 "),bz=n(e$e,"A",{href:!0});var Hpt=s(bz);osr=r(Hpt,"TFRobertaModel"),Hpt.forEach(t),rsr=r(e$e," (RoBERTa model)"),e$e.forEach(t),tsr=i(D),U6=n(D,"LI",{});var o$e=s(U6);H_e=n(o$e,"STRONG",{});var Upt=s(H_e);asr=r(Upt,"roformer"),Upt.forEach(t),nsr=r(o$e," \u2014 "),vz=n(o$e,"A",{href:!0});var Jpt=s(vz);ssr=r(Jpt,"TFRoFormerModel"),Jpt.forEach(t),lsr=r(o$e," (RoFormer model)"),o$e.forEach(t),isr=i(D),J6=n(D,"LI",{});var r$e=s(J6);U_e=n(r$e,"STRONG",{});var Ypt=s(U_e);dsr=r(Ypt,"speech_to_text"),Ypt.forEach(t),csr=r(r$e," \u2014 "),Fz=n(r$e,"A",{href:!0});var Kpt=s(Fz);fsr=r(Kpt,"TFSpeech2TextModel"),Kpt.forEach(t),msr=r(r$e," (Speech2Text model)"),r$e.forEach(t),gsr=i(D),Y6=n(D,"LI",{});var t$e=s(Y6);J_e=n(t$e,"STRONG",{});var Zpt=s(J_e);hsr=r(Zpt,"t5"),Zpt.forEach(t),psr=r(t$e," \u2014 "),Tz=n(t$e,"A",{href:!0});var eut=s(Tz);usr=r(eut,"TFT5Model"),eut.forEach(t),_sr=r(t$e," (T5 model)"),t$e.forEach(t),bsr=i(D),K6=n(D,"LI",{});var a$e=s(K6);Y_e=n(a$e,"STRONG",{});var out=s(Y_e);vsr=r(out,"tapas"),out.forEach(t),Fsr=r(a$e," \u2014 "),Mz=n(a$e,"A",{href:!0});var rut=s(Mz);Tsr=r(rut,"TFTapasModel"),rut.forEach(t),Msr=r(a$e," (TAPAS model)"),a$e.forEach(t),Esr=i(D),Z6=n(D,"LI",{});var n$e=s(Z6);K_e=n(n$e,"STRONG",{});var tut=s(K_e);Csr=r(tut,"transfo-xl"),tut.forEach(t),wsr=r(n$e," \u2014 "),Ez=n(n$e,"A",{href:!0});var aut=s(Ez);Asr=r(aut,"TFTransfoXLModel"),aut.forEach(t),ysr=r(n$e," (Transformer-XL model)"),n$e.forEach(t),Lsr=i(D),eT=n(D,"LI",{});var s$e=s(eT);Z_e=n(s$e,"STRONG",{});var nut=s(Z_e);xsr=r(nut,"vit"),nut.forEach(t),$sr=r(s$e," \u2014 "),Cz=n(s$e,"A",{href:!0});var sut=s(Cz);ksr=r(sut,"TFViTModel"),sut.forEach(t),Ssr=r(s$e," (ViT model)"),s$e.forEach(t),Rsr=i(D),oT=n(D,"LI",{});var l$e=s(oT);e2e=n(l$e,"STRONG",{});var lut=s(e2e);Bsr=r(lut,"vit_mae"),lut.forEach(t),Psr=r(l$e," \u2014 "),wz=n(l$e,"A",{href:!0});var iut=s(wz);Isr=r(iut,"TFViTMAEModel"),iut.forEach(t),qsr=r(l$e," (ViTMAE model)"),l$e.forEach(t),Nsr=i(D),rT=n(D,"LI",{});var i$e=s(rT);o2e=n(i$e,"STRONG",{});var dut=s(o2e);jsr=r(dut,"wav2vec2"),dut.forEach(t),Dsr=r(i$e," \u2014 "),Az=n(i$e,"A",{href:!0});var cut=s(Az);Gsr=r(cut,"TFWav2Vec2Model"),cut.forEach(t),Osr=r(i$e," (Wav2Vec2 model)"),i$e.forEach(t),Vsr=i(D),tT=n(D,"LI",{});var d$e=s(tT);r2e=n(d$e,"STRONG",{});var fut=s(r2e);Xsr=r(fut,"xlm"),fut.forEach(t),zsr=r(d$e," \u2014 "),yz=n(d$e,"A",{href:!0});var mut=s(yz);Qsr=r(mut,"TFXLMModel"),mut.forEach(t),Wsr=r(d$e," (XLM model)"),d$e.forEach(t),Hsr=i(D),aT=n(D,"LI",{});var c$e=s(aT);t2e=n(c$e,"STRONG",{});var gut=s(t2e);Usr=r(gut,"xlm-roberta"),gut.forEach(t),Jsr=r(c$e," \u2014 "),Lz=n(c$e,"A",{href:!0});var hut=s(Lz);Ysr=r(hut,"TFXLMRobertaModel"),hut.forEach(t),Ksr=r(c$e," (XLM-RoBERTa model)"),c$e.forEach(t),Zsr=i(D),nT=n(D,"LI",{});var f$e=s(nT);a2e=n(f$e,"STRONG",{});var put=s(a2e);elr=r(put,"xlnet"),put.forEach(t),olr=r(f$e," \u2014 "),xz=n(f$e,"A",{href:!0});var uut=s(xz);rlr=r(uut,"TFXLNetModel"),uut.forEach(t),tlr=r(f$e," (XLNet model)"),f$e.forEach(t),D.forEach(t),alr=i(cl),T(sT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),cIe=i(f),Dd=n(f,"H2",{class:!0});var uNe=s(Dd);lT=n(uNe,"A",{id:!0,class:!0,href:!0});var _ut=s(lT);n2e=n(_ut,"SPAN",{});var but=s(n2e);T(yL.$$.fragment,but),but.forEach(t),_ut.forEach(t),nlr=i(uNe),s2e=n(uNe,"SPAN",{});var vut=s(s2e);slr=r(vut,"TFAutoModelForPreTraining"),vut.forEach(t),uNe.forEach(t),fIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(LL.$$.fragment,fl),llr=i(fl),Gd=n(fl,"P",{});var NK=s(Gd);ilr=r(NK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$z=n(NK,"A",{href:!0});var Fut=s($z);dlr=r(Fut,"from_pretrained()"),Fut.forEach(t),clr=r(NK," class method or the "),kz=n(NK,"A",{href:!0});var Tut=s(kz);flr=r(Tut,"from_config()"),Tut.forEach(t),mlr=r(NK,` class
method.`),NK.forEach(t),glr=i(fl),xL=n(fl,"P",{});var _Ne=s(xL);hlr=r(_Ne,"This class cannot be instantiated directly using "),l2e=n(_Ne,"CODE",{});var Mut=s(l2e);plr=r(Mut,"__init__()"),Mut.forEach(t),ulr=r(_Ne," (throws an error)."),_Ne.forEach(t),_lr=i(fl),At=n(fl,"DIV",{class:!0});var Gw=s(At);T($L.$$.fragment,Gw),blr=i(Gw),i2e=n(Gw,"P",{});var Eut=s(i2e);vlr=r(Eut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Eut.forEach(t),Flr=i(Gw),Od=n(Gw,"P",{});var jK=s(Od);Tlr=r(jK,`Note:
Loading a model from its configuration file does `),d2e=n(jK,"STRONG",{});var Cut=s(d2e);Mlr=r(Cut,"not"),Cut.forEach(t),Elr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sz=n(jK,"A",{href:!0});var wut=s(Sz);Clr=r(wut,"from_pretrained()"),wut.forEach(t),wlr=r(jK," to load the model weights."),jK.forEach(t),Alr=i(Gw),T(iT.$$.fragment,Gw),Gw.forEach(t),ylr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(kL.$$.fragment,ml),Llr=i(ml),c2e=n(ml,"P",{});var Aut=s(c2e);xlr=r(Aut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Aut.forEach(t),$lr=i(ml),Za=n(ml,"P",{});var Ow=s(Za);klr=r(Ow,"The model class to instantiate is selected based on the "),f2e=n(Ow,"CODE",{});var yut=s(f2e);Slr=r(yut,"model_type"),yut.forEach(t),Rlr=r(Ow,` property of the config object (either
passed as an argument or loaded from `),m2e=n(Ow,"CODE",{});var Lut=s(m2e);Blr=r(Lut,"pretrained_model_name_or_path"),Lut.forEach(t),Plr=r(Ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g2e=n(Ow,"CODE",{});var xut=s(g2e);Ilr=r(xut,"pretrained_model_name_or_path"),xut.forEach(t),qlr=r(Ow,":"),Ow.forEach(t),Nlr=i(ml),ne=n(ml,"UL",{});var le=s(ne);dT=n(le,"LI",{});var m$e=s(dT);h2e=n(m$e,"STRONG",{});var $ut=s(h2e);jlr=r($ut,"albert"),$ut.forEach(t),Dlr=r(m$e," \u2014 "),Rz=n(m$e,"A",{href:!0});var kut=s(Rz);Glr=r(kut,"TFAlbertForPreTraining"),kut.forEach(t),Olr=r(m$e," (ALBERT model)"),m$e.forEach(t),Vlr=i(le),cT=n(le,"LI",{});var g$e=s(cT);p2e=n(g$e,"STRONG",{});var Sut=s(p2e);Xlr=r(Sut,"bart"),Sut.forEach(t),zlr=r(g$e," \u2014 "),Bz=n(g$e,"A",{href:!0});var Rut=s(Bz);Qlr=r(Rut,"TFBartForConditionalGeneration"),Rut.forEach(t),Wlr=r(g$e," (BART model)"),g$e.forEach(t),Hlr=i(le),fT=n(le,"LI",{});var h$e=s(fT);u2e=n(h$e,"STRONG",{});var But=s(u2e);Ulr=r(But,"bert"),But.forEach(t),Jlr=r(h$e," \u2014 "),Pz=n(h$e,"A",{href:!0});var Put=s(Pz);Ylr=r(Put,"TFBertForPreTraining"),Put.forEach(t),Klr=r(h$e," (BERT model)"),h$e.forEach(t),Zlr=i(le),mT=n(le,"LI",{});var p$e=s(mT);_2e=n(p$e,"STRONG",{});var Iut=s(_2e);eir=r(Iut,"camembert"),Iut.forEach(t),oir=r(p$e," \u2014 "),Iz=n(p$e,"A",{href:!0});var qut=s(Iz);rir=r(qut,"TFCamembertForMaskedLM"),qut.forEach(t),tir=r(p$e," (CamemBERT model)"),p$e.forEach(t),air=i(le),gT=n(le,"LI",{});var u$e=s(gT);b2e=n(u$e,"STRONG",{});var Nut=s(b2e);nir=r(Nut,"ctrl"),Nut.forEach(t),sir=r(u$e," \u2014 "),qz=n(u$e,"A",{href:!0});var jut=s(qz);lir=r(jut,"TFCTRLLMHeadModel"),jut.forEach(t),iir=r(u$e," (CTRL model)"),u$e.forEach(t),dir=i(le),hT=n(le,"LI",{});var _$e=s(hT);v2e=n(_$e,"STRONG",{});var Dut=s(v2e);cir=r(Dut,"distilbert"),Dut.forEach(t),fir=r(_$e," \u2014 "),Nz=n(_$e,"A",{href:!0});var Gut=s(Nz);mir=r(Gut,"TFDistilBertForMaskedLM"),Gut.forEach(t),gir=r(_$e," (DistilBERT model)"),_$e.forEach(t),hir=i(le),pT=n(le,"LI",{});var b$e=s(pT);F2e=n(b$e,"STRONG",{});var Out=s(F2e);pir=r(Out,"electra"),Out.forEach(t),uir=r(b$e," \u2014 "),jz=n(b$e,"A",{href:!0});var Vut=s(jz);_ir=r(Vut,"TFElectraForPreTraining"),Vut.forEach(t),bir=r(b$e," (ELECTRA model)"),b$e.forEach(t),vir=i(le),uT=n(le,"LI",{});var v$e=s(uT);T2e=n(v$e,"STRONG",{});var Xut=s(T2e);Fir=r(Xut,"flaubert"),Xut.forEach(t),Tir=r(v$e," \u2014 "),Dz=n(v$e,"A",{href:!0});var zut=s(Dz);Mir=r(zut,"TFFlaubertWithLMHeadModel"),zut.forEach(t),Eir=r(v$e," (FlauBERT model)"),v$e.forEach(t),Cir=i(le),_T=n(le,"LI",{});var F$e=s(_T);M2e=n(F$e,"STRONG",{});var Qut=s(M2e);wir=r(Qut,"funnel"),Qut.forEach(t),Air=r(F$e," \u2014 "),Gz=n(F$e,"A",{href:!0});var Wut=s(Gz);yir=r(Wut,"TFFunnelForPreTraining"),Wut.forEach(t),Lir=r(F$e," (Funnel Transformer model)"),F$e.forEach(t),xir=i(le),bT=n(le,"LI",{});var T$e=s(bT);E2e=n(T$e,"STRONG",{});var Hut=s(E2e);$ir=r(Hut,"gpt2"),Hut.forEach(t),kir=r(T$e," \u2014 "),Oz=n(T$e,"A",{href:!0});var Uut=s(Oz);Sir=r(Uut,"TFGPT2LMHeadModel"),Uut.forEach(t),Rir=r(T$e," (OpenAI GPT-2 model)"),T$e.forEach(t),Bir=i(le),vT=n(le,"LI",{});var M$e=s(vT);C2e=n(M$e,"STRONG",{});var Jut=s(C2e);Pir=r(Jut,"layoutlm"),Jut.forEach(t),Iir=r(M$e," \u2014 "),Vz=n(M$e,"A",{href:!0});var Yut=s(Vz);qir=r(Yut,"TFLayoutLMForMaskedLM"),Yut.forEach(t),Nir=r(M$e," (LayoutLM model)"),M$e.forEach(t),jir=i(le),FT=n(le,"LI",{});var E$e=s(FT);w2e=n(E$e,"STRONG",{});var Kut=s(w2e);Dir=r(Kut,"lxmert"),Kut.forEach(t),Gir=r(E$e," \u2014 "),Xz=n(E$e,"A",{href:!0});var Zut=s(Xz);Oir=r(Zut,"TFLxmertForPreTraining"),Zut.forEach(t),Vir=r(E$e," (LXMERT model)"),E$e.forEach(t),Xir=i(le),TT=n(le,"LI",{});var C$e=s(TT);A2e=n(C$e,"STRONG",{});var e_t=s(A2e);zir=r(e_t,"mobilebert"),e_t.forEach(t),Qir=r(C$e," \u2014 "),zz=n(C$e,"A",{href:!0});var o_t=s(zz);Wir=r(o_t,"TFMobileBertForPreTraining"),o_t.forEach(t),Hir=r(C$e," (MobileBERT model)"),C$e.forEach(t),Uir=i(le),MT=n(le,"LI",{});var w$e=s(MT);y2e=n(w$e,"STRONG",{});var r_t=s(y2e);Jir=r(r_t,"mpnet"),r_t.forEach(t),Yir=r(w$e," \u2014 "),Qz=n(w$e,"A",{href:!0});var t_t=s(Qz);Kir=r(t_t,"TFMPNetForMaskedLM"),t_t.forEach(t),Zir=r(w$e," (MPNet model)"),w$e.forEach(t),edr=i(le),ET=n(le,"LI",{});var A$e=s(ET);L2e=n(A$e,"STRONG",{});var a_t=s(L2e);odr=r(a_t,"openai-gpt"),a_t.forEach(t),rdr=r(A$e," \u2014 "),Wz=n(A$e,"A",{href:!0});var n_t=s(Wz);tdr=r(n_t,"TFOpenAIGPTLMHeadModel"),n_t.forEach(t),adr=r(A$e," (OpenAI GPT model)"),A$e.forEach(t),ndr=i(le),CT=n(le,"LI",{});var y$e=s(CT);x2e=n(y$e,"STRONG",{});var s_t=s(x2e);sdr=r(s_t,"roberta"),s_t.forEach(t),ldr=r(y$e," \u2014 "),Hz=n(y$e,"A",{href:!0});var l_t=s(Hz);idr=r(l_t,"TFRobertaForMaskedLM"),l_t.forEach(t),ddr=r(y$e," (RoBERTa model)"),y$e.forEach(t),cdr=i(le),wT=n(le,"LI",{});var L$e=s(wT);$2e=n(L$e,"STRONG",{});var i_t=s($2e);fdr=r(i_t,"t5"),i_t.forEach(t),mdr=r(L$e," \u2014 "),Uz=n(L$e,"A",{href:!0});var d_t=s(Uz);gdr=r(d_t,"TFT5ForConditionalGeneration"),d_t.forEach(t),hdr=r(L$e," (T5 model)"),L$e.forEach(t),pdr=i(le),AT=n(le,"LI",{});var x$e=s(AT);k2e=n(x$e,"STRONG",{});var c_t=s(k2e);udr=r(c_t,"tapas"),c_t.forEach(t),_dr=r(x$e," \u2014 "),Jz=n(x$e,"A",{href:!0});var f_t=s(Jz);bdr=r(f_t,"TFTapasForMaskedLM"),f_t.forEach(t),vdr=r(x$e," (TAPAS model)"),x$e.forEach(t),Fdr=i(le),yT=n(le,"LI",{});var $$e=s(yT);S2e=n($$e,"STRONG",{});var m_t=s(S2e);Tdr=r(m_t,"transfo-xl"),m_t.forEach(t),Mdr=r($$e," \u2014 "),Yz=n($$e,"A",{href:!0});var g_t=s(Yz);Edr=r(g_t,"TFTransfoXLLMHeadModel"),g_t.forEach(t),Cdr=r($$e," (Transformer-XL model)"),$$e.forEach(t),wdr=i(le),LT=n(le,"LI",{});var k$e=s(LT);R2e=n(k$e,"STRONG",{});var h_t=s(R2e);Adr=r(h_t,"vit_mae"),h_t.forEach(t),ydr=r(k$e," \u2014 "),Kz=n(k$e,"A",{href:!0});var p_t=s(Kz);Ldr=r(p_t,"TFViTMAEForPreTraining"),p_t.forEach(t),xdr=r(k$e," (ViTMAE model)"),k$e.forEach(t),$dr=i(le),xT=n(le,"LI",{});var S$e=s(xT);B2e=n(S$e,"STRONG",{});var u_t=s(B2e);kdr=r(u_t,"xlm"),u_t.forEach(t),Sdr=r(S$e," \u2014 "),Zz=n(S$e,"A",{href:!0});var __t=s(Zz);Rdr=r(__t,"TFXLMWithLMHeadModel"),__t.forEach(t),Bdr=r(S$e," (XLM model)"),S$e.forEach(t),Pdr=i(le),$T=n(le,"LI",{});var R$e=s($T);P2e=n(R$e,"STRONG",{});var b_t=s(P2e);Idr=r(b_t,"xlm-roberta"),b_t.forEach(t),qdr=r(R$e," \u2014 "),eQ=n(R$e,"A",{href:!0});var v_t=s(eQ);Ndr=r(v_t,"TFXLMRobertaForMaskedLM"),v_t.forEach(t),jdr=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),Ddr=i(le),kT=n(le,"LI",{});var B$e=s(kT);I2e=n(B$e,"STRONG",{});var F_t=s(I2e);Gdr=r(F_t,"xlnet"),F_t.forEach(t),Odr=r(B$e," \u2014 "),oQ=n(B$e,"A",{href:!0});var T_t=s(oQ);Vdr=r(T_t,"TFXLNetLMHeadModel"),T_t.forEach(t),Xdr=r(B$e," (XLNet model)"),B$e.forEach(t),le.forEach(t),zdr=i(ml),T(ST.$$.fragment,ml),ml.forEach(t),fl.forEach(t),mIe=i(f),Vd=n(f,"H2",{class:!0});var bNe=s(Vd);RT=n(bNe,"A",{id:!0,class:!0,href:!0});var M_t=s(RT);q2e=n(M_t,"SPAN",{});var E_t=s(q2e);T(SL.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Qdr=i(bNe),N2e=n(bNe,"SPAN",{});var C_t=s(N2e);Wdr=r(C_t,"TFAutoModelForCausalLM"),C_t.forEach(t),bNe.forEach(t),gIe=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(RL.$$.fragment,gl),Hdr=i(gl),Xd=n(gl,"P",{});var DK=s(Xd);Udr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rQ=n(DK,"A",{href:!0});var w_t=s(rQ);Jdr=r(w_t,"from_pretrained()"),w_t.forEach(t),Ydr=r(DK," class method or the "),tQ=n(DK,"A",{href:!0});var A_t=s(tQ);Kdr=r(A_t,"from_config()"),A_t.forEach(t),Zdr=r(DK,` class
method.`),DK.forEach(t),ecr=i(gl),BL=n(gl,"P",{});var vNe=s(BL);ocr=r(vNe,"This class cannot be instantiated directly using "),j2e=n(vNe,"CODE",{});var y_t=s(j2e);rcr=r(y_t,"__init__()"),y_t.forEach(t),tcr=r(vNe," (throws an error)."),vNe.forEach(t),acr=i(gl),yt=n(gl,"DIV",{class:!0});var Vw=s(yt);T(PL.$$.fragment,Vw),ncr=i(Vw),D2e=n(Vw,"P",{});var L_t=s(D2e);scr=r(L_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L_t.forEach(t),lcr=i(Vw),zd=n(Vw,"P",{});var GK=s(zd);icr=r(GK,`Note:
Loading a model from its configuration file does `),G2e=n(GK,"STRONG",{});var x_t=s(G2e);dcr=r(x_t,"not"),x_t.forEach(t),ccr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(GK,"A",{href:!0});var $_t=s(aQ);fcr=r($_t,"from_pretrained()"),$_t.forEach(t),mcr=r(GK," to load the model weights."),GK.forEach(t),gcr=i(Vw),T(BT.$$.fragment,Vw),Vw.forEach(t),hcr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(IL.$$.fragment,hl),pcr=i(hl),O2e=n(hl,"P",{});var k_t=s(O2e);ucr=r(k_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k_t.forEach(t),_cr=i(hl),en=n(hl,"P",{});var Xw=s(en);bcr=r(Xw,"The model class to instantiate is selected based on the "),V2e=n(Xw,"CODE",{});var S_t=s(V2e);vcr=r(S_t,"model_type"),S_t.forEach(t),Fcr=r(Xw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(Xw,"CODE",{});var R_t=s(X2e);Tcr=r(R_t,"pretrained_model_name_or_path"),R_t.forEach(t),Mcr=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(Xw,"CODE",{});var B_t=s(z2e);Ecr=r(B_t,"pretrained_model_name_or_path"),B_t.forEach(t),Ccr=r(Xw,":"),Xw.forEach(t),wcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);PT=n(Ce,"LI",{});var P$e=s(PT);Q2e=n(P$e,"STRONG",{});var P_t=s(Q2e);Acr=r(P_t,"bert"),P_t.forEach(t),ycr=r(P$e," \u2014 "),nQ=n(P$e,"A",{href:!0});var I_t=s(nQ);Lcr=r(I_t,"TFBertLMHeadModel"),I_t.forEach(t),xcr=r(P$e," (BERT model)"),P$e.forEach(t),$cr=i(Ce),IT=n(Ce,"LI",{});var I$e=s(IT);W2e=n(I$e,"STRONG",{});var q_t=s(W2e);kcr=r(q_t,"camembert"),q_t.forEach(t),Scr=r(I$e," \u2014 "),sQ=n(I$e,"A",{href:!0});var N_t=s(sQ);Rcr=r(N_t,"TFCamembertForCausalLM"),N_t.forEach(t),Bcr=r(I$e," (CamemBERT model)"),I$e.forEach(t),Pcr=i(Ce),qT=n(Ce,"LI",{});var q$e=s(qT);H2e=n(q$e,"STRONG",{});var j_t=s(H2e);Icr=r(j_t,"ctrl"),j_t.forEach(t),qcr=r(q$e," \u2014 "),lQ=n(q$e,"A",{href:!0});var D_t=s(lQ);Ncr=r(D_t,"TFCTRLLMHeadModel"),D_t.forEach(t),jcr=r(q$e," (CTRL model)"),q$e.forEach(t),Dcr=i(Ce),NT=n(Ce,"LI",{});var N$e=s(NT);U2e=n(N$e,"STRONG",{});var G_t=s(U2e);Gcr=r(G_t,"gpt2"),G_t.forEach(t),Ocr=r(N$e," \u2014 "),iQ=n(N$e,"A",{href:!0});var O_t=s(iQ);Vcr=r(O_t,"TFGPT2LMHeadModel"),O_t.forEach(t),Xcr=r(N$e," (OpenAI GPT-2 model)"),N$e.forEach(t),zcr=i(Ce),jT=n(Ce,"LI",{});var j$e=s(jT);J2e=n(j$e,"STRONG",{});var V_t=s(J2e);Qcr=r(V_t,"gptj"),V_t.forEach(t),Wcr=r(j$e," \u2014 "),dQ=n(j$e,"A",{href:!0});var X_t=s(dQ);Hcr=r(X_t,"TFGPTJForCausalLM"),X_t.forEach(t),Ucr=r(j$e," (GPT-J model)"),j$e.forEach(t),Jcr=i(Ce),DT=n(Ce,"LI",{});var D$e=s(DT);Y2e=n(D$e,"STRONG",{});var z_t=s(Y2e);Ycr=r(z_t,"openai-gpt"),z_t.forEach(t),Kcr=r(D$e," \u2014 "),cQ=n(D$e,"A",{href:!0});var Q_t=s(cQ);Zcr=r(Q_t,"TFOpenAIGPTLMHeadModel"),Q_t.forEach(t),efr=r(D$e," (OpenAI GPT model)"),D$e.forEach(t),ofr=i(Ce),GT=n(Ce,"LI",{});var G$e=s(GT);K2e=n(G$e,"STRONG",{});var W_t=s(K2e);rfr=r(W_t,"rembert"),W_t.forEach(t),tfr=r(G$e," \u2014 "),fQ=n(G$e,"A",{href:!0});var H_t=s(fQ);afr=r(H_t,"TFRemBertForCausalLM"),H_t.forEach(t),nfr=r(G$e," (RemBERT model)"),G$e.forEach(t),sfr=i(Ce),OT=n(Ce,"LI",{});var O$e=s(OT);Z2e=n(O$e,"STRONG",{});var U_t=s(Z2e);lfr=r(U_t,"roberta"),U_t.forEach(t),ifr=r(O$e," \u2014 "),mQ=n(O$e,"A",{href:!0});var J_t=s(mQ);dfr=r(J_t,"TFRobertaForCausalLM"),J_t.forEach(t),cfr=r(O$e," (RoBERTa model)"),O$e.forEach(t),ffr=i(Ce),VT=n(Ce,"LI",{});var V$e=s(VT);e1e=n(V$e,"STRONG",{});var Y_t=s(e1e);mfr=r(Y_t,"roformer"),Y_t.forEach(t),gfr=r(V$e," \u2014 "),gQ=n(V$e,"A",{href:!0});var K_t=s(gQ);hfr=r(K_t,"TFRoFormerForCausalLM"),K_t.forEach(t),pfr=r(V$e," (RoFormer model)"),V$e.forEach(t),ufr=i(Ce),XT=n(Ce,"LI",{});var X$e=s(XT);o1e=n(X$e,"STRONG",{});var Z_t=s(o1e);_fr=r(Z_t,"transfo-xl"),Z_t.forEach(t),bfr=r(X$e," \u2014 "),hQ=n(X$e,"A",{href:!0});var e2t=s(hQ);vfr=r(e2t,"TFTransfoXLLMHeadModel"),e2t.forEach(t),Ffr=r(X$e," (Transformer-XL model)"),X$e.forEach(t),Tfr=i(Ce),zT=n(Ce,"LI",{});var z$e=s(zT);r1e=n(z$e,"STRONG",{});var o2t=s(r1e);Mfr=r(o2t,"xlm"),o2t.forEach(t),Efr=r(z$e," \u2014 "),pQ=n(z$e,"A",{href:!0});var r2t=s(pQ);Cfr=r(r2t,"TFXLMWithLMHeadModel"),r2t.forEach(t),wfr=r(z$e," (XLM model)"),z$e.forEach(t),Afr=i(Ce),QT=n(Ce,"LI",{});var Q$e=s(QT);t1e=n(Q$e,"STRONG",{});var t2t=s(t1e);yfr=r(t2t,"xlnet"),t2t.forEach(t),Lfr=r(Q$e," \u2014 "),uQ=n(Q$e,"A",{href:!0});var a2t=s(uQ);xfr=r(a2t,"TFXLNetLMHeadModel"),a2t.forEach(t),$fr=r(Q$e," (XLNet model)"),Q$e.forEach(t),Ce.forEach(t),kfr=i(hl),T(WT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),hIe=i(f),Qd=n(f,"H2",{class:!0});var FNe=s(Qd);HT=n(FNe,"A",{id:!0,class:!0,href:!0});var n2t=s(HT);a1e=n(n2t,"SPAN",{});var s2t=s(a1e);T(qL.$$.fragment,s2t),s2t.forEach(t),n2t.forEach(t),Sfr=i(FNe),n1e=n(FNe,"SPAN",{});var l2t=s(n1e);Rfr=r(l2t,"TFAutoModelForImageClassification"),l2t.forEach(t),FNe.forEach(t),pIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(NL.$$.fragment,pl),Bfr=i(pl),Wd=n(pl,"P",{});var OK=s(Wd);Pfr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),_Q=n(OK,"A",{href:!0});var i2t=s(_Q);Ifr=r(i2t,"from_pretrained()"),i2t.forEach(t),qfr=r(OK," class method or the "),bQ=n(OK,"A",{href:!0});var d2t=s(bQ);Nfr=r(d2t,"from_config()"),d2t.forEach(t),jfr=r(OK,` class
method.`),OK.forEach(t),Dfr=i(pl),jL=n(pl,"P",{});var TNe=s(jL);Gfr=r(TNe,"This class cannot be instantiated directly using "),s1e=n(TNe,"CODE",{});var c2t=s(s1e);Ofr=r(c2t,"__init__()"),c2t.forEach(t),Vfr=r(TNe," (throws an error)."),TNe.forEach(t),Xfr=i(pl),Lt=n(pl,"DIV",{class:!0});var zw=s(Lt);T(DL.$$.fragment,zw),zfr=i(zw),l1e=n(zw,"P",{});var f2t=s(l1e);Qfr=r(f2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f2t.forEach(t),Wfr=i(zw),Hd=n(zw,"P",{});var VK=s(Hd);Hfr=r(VK,`Note:
Loading a model from its configuration file does `),i1e=n(VK,"STRONG",{});var m2t=s(i1e);Ufr=r(m2t,"not"),m2t.forEach(t),Jfr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(VK,"A",{href:!0});var g2t=s(vQ);Yfr=r(g2t,"from_pretrained()"),g2t.forEach(t),Kfr=r(VK," to load the model weights."),VK.forEach(t),Zfr=i(zw),T(UT.$$.fragment,zw),zw.forEach(t),emr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(GL.$$.fragment,ul),omr=i(ul),d1e=n(ul,"P",{});var h2t=s(d1e);rmr=r(h2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),h2t.forEach(t),tmr=i(ul),on=n(ul,"P",{});var Qw=s(on);amr=r(Qw,"The model class to instantiate is selected based on the "),c1e=n(Qw,"CODE",{});var p2t=s(c1e);nmr=r(p2t,"model_type"),p2t.forEach(t),smr=r(Qw,` property of the config object (either
passed as an argument or loaded from `),f1e=n(Qw,"CODE",{});var u2t=s(f1e);lmr=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),imr=r(Qw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m1e=n(Qw,"CODE",{});var _2t=s(m1e);dmr=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),cmr=r(Qw,":"),Qw.forEach(t),fmr=i(ul),Ud=n(ul,"UL",{});var XK=s(Ud);JT=n(XK,"LI",{});var W$e=s(JT);g1e=n(W$e,"STRONG",{});var b2t=s(g1e);mmr=r(b2t,"convnext"),b2t.forEach(t),gmr=r(W$e," \u2014 "),FQ=n(W$e,"A",{href:!0});var v2t=s(FQ);hmr=r(v2t,"TFConvNextForImageClassification"),v2t.forEach(t),pmr=r(W$e," (ConvNext model)"),W$e.forEach(t),umr=i(XK),YT=n(XK,"LI",{});var H$e=s(YT);h1e=n(H$e,"STRONG",{});var F2t=s(h1e);_mr=r(F2t,"data2vec-vision"),F2t.forEach(t),bmr=r(H$e," \u2014 "),TQ=n(H$e,"A",{href:!0});var T2t=s(TQ);vmr=r(T2t,"TFData2VecVisionForImageClassification"),T2t.forEach(t),Fmr=r(H$e," (Data2VecVision model)"),H$e.forEach(t),Tmr=i(XK),KT=n(XK,"LI",{});var U$e=s(KT);p1e=n(U$e,"STRONG",{});var M2t=s(p1e);Mmr=r(M2t,"vit"),M2t.forEach(t),Emr=r(U$e," \u2014 "),MQ=n(U$e,"A",{href:!0});var E2t=s(MQ);Cmr=r(E2t,"TFViTForImageClassification"),E2t.forEach(t),wmr=r(U$e," (ViT model)"),U$e.forEach(t),XK.forEach(t),Amr=i(ul),T(ZT.$$.fragment,ul),ul.forEach(t),pl.forEach(t),uIe=i(f),Jd=n(f,"H2",{class:!0});var MNe=s(Jd);e9=n(MNe,"A",{id:!0,class:!0,href:!0});var C2t=s(e9);u1e=n(C2t,"SPAN",{});var w2t=s(u1e);T(OL.$$.fragment,w2t),w2t.forEach(t),C2t.forEach(t),ymr=i(MNe),_1e=n(MNe,"SPAN",{});var A2t=s(_1e);Lmr=r(A2t,"TFAutoModelForMaskedLM"),A2t.forEach(t),MNe.forEach(t),_Ie=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(VL.$$.fragment,_l),xmr=i(_l),Yd=n(_l,"P",{});var zK=s(Yd);$mr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),EQ=n(zK,"A",{href:!0});var y2t=s(EQ);kmr=r(y2t,"from_pretrained()"),y2t.forEach(t),Smr=r(zK," class method or the "),CQ=n(zK,"A",{href:!0});var L2t=s(CQ);Rmr=r(L2t,"from_config()"),L2t.forEach(t),Bmr=r(zK,` class
method.`),zK.forEach(t),Pmr=i(_l),XL=n(_l,"P",{});var ENe=s(XL);Imr=r(ENe,"This class cannot be instantiated directly using "),b1e=n(ENe,"CODE",{});var x2t=s(b1e);qmr=r(x2t,"__init__()"),x2t.forEach(t),Nmr=r(ENe," (throws an error)."),ENe.forEach(t),jmr=i(_l),xt=n(_l,"DIV",{class:!0});var Ww=s(xt);T(zL.$$.fragment,Ww),Dmr=i(Ww),v1e=n(Ww,"P",{});var $2t=s(v1e);Gmr=r($2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$2t.forEach(t),Omr=i(Ww),Kd=n(Ww,"P",{});var QK=s(Kd);Vmr=r(QK,`Note:
Loading a model from its configuration file does `),F1e=n(QK,"STRONG",{});var k2t=s(F1e);Xmr=r(k2t,"not"),k2t.forEach(t),zmr=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wQ=n(QK,"A",{href:!0});var S2t=s(wQ);Qmr=r(S2t,"from_pretrained()"),S2t.forEach(t),Wmr=r(QK," to load the model weights."),QK.forEach(t),Hmr=i(Ww),T(o9.$$.fragment,Ww),Ww.forEach(t),Umr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(QL.$$.fragment,bl),Jmr=i(bl),T1e=n(bl,"P",{});var R2t=s(T1e);Ymr=r(R2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R2t.forEach(t),Kmr=i(bl),rn=n(bl,"P",{});var Hw=s(rn);Zmr=r(Hw,"The model class to instantiate is selected based on the "),M1e=n(Hw,"CODE",{});var B2t=s(M1e);egr=r(B2t,"model_type"),B2t.forEach(t),ogr=r(Hw,` property of the config object (either
passed as an argument or loaded from `),E1e=n(Hw,"CODE",{});var P2t=s(E1e);rgr=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),tgr=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C1e=n(Hw,"CODE",{});var I2t=s(C1e);agr=r(I2t,"pretrained_model_name_or_path"),I2t.forEach(t),ngr=r(Hw,":"),Hw.forEach(t),sgr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);r9=n(fe,"LI",{});var J$e=s(r9);w1e=n(J$e,"STRONG",{});var q2t=s(w1e);lgr=r(q2t,"albert"),q2t.forEach(t),igr=r(J$e," \u2014 "),AQ=n(J$e,"A",{href:!0});var N2t=s(AQ);dgr=r(N2t,"TFAlbertForMaskedLM"),N2t.forEach(t),cgr=r(J$e," (ALBERT model)"),J$e.forEach(t),fgr=i(fe),t9=n(fe,"LI",{});var Y$e=s(t9);A1e=n(Y$e,"STRONG",{});var j2t=s(A1e);mgr=r(j2t,"bert"),j2t.forEach(t),ggr=r(Y$e," \u2014 "),yQ=n(Y$e,"A",{href:!0});var D2t=s(yQ);hgr=r(D2t,"TFBertForMaskedLM"),D2t.forEach(t),pgr=r(Y$e," (BERT model)"),Y$e.forEach(t),ugr=i(fe),a9=n(fe,"LI",{});var K$e=s(a9);y1e=n(K$e,"STRONG",{});var G2t=s(y1e);_gr=r(G2t,"camembert"),G2t.forEach(t),bgr=r(K$e," \u2014 "),LQ=n(K$e,"A",{href:!0});var O2t=s(LQ);vgr=r(O2t,"TFCamembertForMaskedLM"),O2t.forEach(t),Fgr=r(K$e," (CamemBERT model)"),K$e.forEach(t),Tgr=i(fe),n9=n(fe,"LI",{});var Z$e=s(n9);L1e=n(Z$e,"STRONG",{});var V2t=s(L1e);Mgr=r(V2t,"convbert"),V2t.forEach(t),Egr=r(Z$e," \u2014 "),xQ=n(Z$e,"A",{href:!0});var X2t=s(xQ);Cgr=r(X2t,"TFConvBertForMaskedLM"),X2t.forEach(t),wgr=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Agr=i(fe),s9=n(fe,"LI",{});var eke=s(s9);x1e=n(eke,"STRONG",{});var z2t=s(x1e);ygr=r(z2t,"deberta"),z2t.forEach(t),Lgr=r(eke," \u2014 "),$Q=n(eke,"A",{href:!0});var Q2t=s($Q);xgr=r(Q2t,"TFDebertaForMaskedLM"),Q2t.forEach(t),$gr=r(eke," (DeBERTa model)"),eke.forEach(t),kgr=i(fe),l9=n(fe,"LI",{});var oke=s(l9);$1e=n(oke,"STRONG",{});var W2t=s($1e);Sgr=r(W2t,"deberta-v2"),W2t.forEach(t),Rgr=r(oke," \u2014 "),kQ=n(oke,"A",{href:!0});var H2t=s(kQ);Bgr=r(H2t,"TFDebertaV2ForMaskedLM"),H2t.forEach(t),Pgr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),Igr=i(fe),i9=n(fe,"LI",{});var rke=s(i9);k1e=n(rke,"STRONG",{});var U2t=s(k1e);qgr=r(U2t,"distilbert"),U2t.forEach(t),Ngr=r(rke," \u2014 "),SQ=n(rke,"A",{href:!0});var J2t=s(SQ);jgr=r(J2t,"TFDistilBertForMaskedLM"),J2t.forEach(t),Dgr=r(rke," (DistilBERT model)"),rke.forEach(t),Ggr=i(fe),d9=n(fe,"LI",{});var tke=s(d9);S1e=n(tke,"STRONG",{});var Y2t=s(S1e);Ogr=r(Y2t,"electra"),Y2t.forEach(t),Vgr=r(tke," \u2014 "),RQ=n(tke,"A",{href:!0});var K2t=s(RQ);Xgr=r(K2t,"TFElectraForMaskedLM"),K2t.forEach(t),zgr=r(tke," (ELECTRA model)"),tke.forEach(t),Qgr=i(fe),c9=n(fe,"LI",{});var ake=s(c9);R1e=n(ake,"STRONG",{});var Z2t=s(R1e);Wgr=r(Z2t,"flaubert"),Z2t.forEach(t),Hgr=r(ake," \u2014 "),BQ=n(ake,"A",{href:!0});var e1t=s(BQ);Ugr=r(e1t,"TFFlaubertWithLMHeadModel"),e1t.forEach(t),Jgr=r(ake," (FlauBERT model)"),ake.forEach(t),Ygr=i(fe),f9=n(fe,"LI",{});var nke=s(f9);B1e=n(nke,"STRONG",{});var o1t=s(B1e);Kgr=r(o1t,"funnel"),o1t.forEach(t),Zgr=r(nke," \u2014 "),PQ=n(nke,"A",{href:!0});var r1t=s(PQ);ehr=r(r1t,"TFFunnelForMaskedLM"),r1t.forEach(t),ohr=r(nke," (Funnel Transformer model)"),nke.forEach(t),rhr=i(fe),m9=n(fe,"LI",{});var ske=s(m9);P1e=n(ske,"STRONG",{});var t1t=s(P1e);thr=r(t1t,"layoutlm"),t1t.forEach(t),ahr=r(ske," \u2014 "),IQ=n(ske,"A",{href:!0});var a1t=s(IQ);nhr=r(a1t,"TFLayoutLMForMaskedLM"),a1t.forEach(t),shr=r(ske," (LayoutLM model)"),ske.forEach(t),lhr=i(fe),g9=n(fe,"LI",{});var lke=s(g9);I1e=n(lke,"STRONG",{});var n1t=s(I1e);ihr=r(n1t,"longformer"),n1t.forEach(t),dhr=r(lke," \u2014 "),qQ=n(lke,"A",{href:!0});var s1t=s(qQ);chr=r(s1t,"TFLongformerForMaskedLM"),s1t.forEach(t),fhr=r(lke," (Longformer model)"),lke.forEach(t),mhr=i(fe),h9=n(fe,"LI",{});var ike=s(h9);q1e=n(ike,"STRONG",{});var l1t=s(q1e);ghr=r(l1t,"mobilebert"),l1t.forEach(t),hhr=r(ike," \u2014 "),NQ=n(ike,"A",{href:!0});var i1t=s(NQ);phr=r(i1t,"TFMobileBertForMaskedLM"),i1t.forEach(t),uhr=r(ike," (MobileBERT model)"),ike.forEach(t),_hr=i(fe),p9=n(fe,"LI",{});var dke=s(p9);N1e=n(dke,"STRONG",{});var d1t=s(N1e);bhr=r(d1t,"mpnet"),d1t.forEach(t),vhr=r(dke," \u2014 "),jQ=n(dke,"A",{href:!0});var c1t=s(jQ);Fhr=r(c1t,"TFMPNetForMaskedLM"),c1t.forEach(t),Thr=r(dke," (MPNet model)"),dke.forEach(t),Mhr=i(fe),u9=n(fe,"LI",{});var cke=s(u9);j1e=n(cke,"STRONG",{});var f1t=s(j1e);Ehr=r(f1t,"rembert"),f1t.forEach(t),Chr=r(cke," \u2014 "),DQ=n(cke,"A",{href:!0});var m1t=s(DQ);whr=r(m1t,"TFRemBertForMaskedLM"),m1t.forEach(t),Ahr=r(cke," (RemBERT model)"),cke.forEach(t),yhr=i(fe),_9=n(fe,"LI",{});var fke=s(_9);D1e=n(fke,"STRONG",{});var g1t=s(D1e);Lhr=r(g1t,"roberta"),g1t.forEach(t),xhr=r(fke," \u2014 "),GQ=n(fke,"A",{href:!0});var h1t=s(GQ);$hr=r(h1t,"TFRobertaForMaskedLM"),h1t.forEach(t),khr=r(fke," (RoBERTa model)"),fke.forEach(t),Shr=i(fe),b9=n(fe,"LI",{});var mke=s(b9);G1e=n(mke,"STRONG",{});var p1t=s(G1e);Rhr=r(p1t,"roformer"),p1t.forEach(t),Bhr=r(mke," \u2014 "),OQ=n(mke,"A",{href:!0});var u1t=s(OQ);Phr=r(u1t,"TFRoFormerForMaskedLM"),u1t.forEach(t),Ihr=r(mke," (RoFormer model)"),mke.forEach(t),qhr=i(fe),v9=n(fe,"LI",{});var gke=s(v9);O1e=n(gke,"STRONG",{});var _1t=s(O1e);Nhr=r(_1t,"tapas"),_1t.forEach(t),jhr=r(gke," \u2014 "),VQ=n(gke,"A",{href:!0});var b1t=s(VQ);Dhr=r(b1t,"TFTapasForMaskedLM"),b1t.forEach(t),Ghr=r(gke," (TAPAS model)"),gke.forEach(t),Ohr=i(fe),F9=n(fe,"LI",{});var hke=s(F9);V1e=n(hke,"STRONG",{});var v1t=s(V1e);Vhr=r(v1t,"xlm"),v1t.forEach(t),Xhr=r(hke," \u2014 "),XQ=n(hke,"A",{href:!0});var F1t=s(XQ);zhr=r(F1t,"TFXLMWithLMHeadModel"),F1t.forEach(t),Qhr=r(hke," (XLM model)"),hke.forEach(t),Whr=i(fe),T9=n(fe,"LI",{});var pke=s(T9);X1e=n(pke,"STRONG",{});var T1t=s(X1e);Hhr=r(T1t,"xlm-roberta"),T1t.forEach(t),Uhr=r(pke," \u2014 "),zQ=n(pke,"A",{href:!0});var M1t=s(zQ);Jhr=r(M1t,"TFXLMRobertaForMaskedLM"),M1t.forEach(t),Yhr=r(pke," (XLM-RoBERTa model)"),pke.forEach(t),fe.forEach(t),Khr=i(bl),T(M9.$$.fragment,bl),bl.forEach(t),_l.forEach(t),bIe=i(f),Zd=n(f,"H2",{class:!0});var CNe=s(Zd);E9=n(CNe,"A",{id:!0,class:!0,href:!0});var E1t=s(E9);z1e=n(E1t,"SPAN",{});var C1t=s(z1e);T(WL.$$.fragment,C1t),C1t.forEach(t),E1t.forEach(t),Zhr=i(CNe),Q1e=n(CNe,"SPAN",{});var w1t=s(Q1e);epr=r(w1t,"TFAutoModelForSeq2SeqLM"),w1t.forEach(t),CNe.forEach(t),vIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(HL.$$.fragment,vl),opr=i(vl),ec=n(vl,"P",{});var WK=s(ec);rpr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QQ=n(WK,"A",{href:!0});var A1t=s(QQ);tpr=r(A1t,"from_pretrained()"),A1t.forEach(t),apr=r(WK," class method or the "),WQ=n(WK,"A",{href:!0});var y1t=s(WQ);npr=r(y1t,"from_config()"),y1t.forEach(t),spr=r(WK,` class
method.`),WK.forEach(t),lpr=i(vl),UL=n(vl,"P",{});var wNe=s(UL);ipr=r(wNe,"This class cannot be instantiated directly using "),W1e=n(wNe,"CODE",{});var L1t=s(W1e);dpr=r(L1t,"__init__()"),L1t.forEach(t),cpr=r(wNe," (throws an error)."),wNe.forEach(t),fpr=i(vl),$t=n(vl,"DIV",{class:!0});var Uw=s($t);T(JL.$$.fragment,Uw),mpr=i(Uw),H1e=n(Uw,"P",{});var x1t=s(H1e);gpr=r(x1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),x1t.forEach(t),hpr=i(Uw),oc=n(Uw,"P",{});var HK=s(oc);ppr=r(HK,`Note:
Loading a model from its configuration file does `),U1e=n(HK,"STRONG",{});var $1t=s(U1e);upr=r($1t,"not"),$1t.forEach(t),_pr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(HK,"A",{href:!0});var k1t=s(HQ);bpr=r(k1t,"from_pretrained()"),k1t.forEach(t),vpr=r(HK," to load the model weights."),HK.forEach(t),Fpr=i(Uw),T(C9.$$.fragment,Uw),Uw.forEach(t),Tpr=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(YL.$$.fragment,Fl),Mpr=i(Fl),J1e=n(Fl,"P",{});var S1t=s(J1e);Epr=r(S1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),S1t.forEach(t),Cpr=i(Fl),tn=n(Fl,"P",{});var Jw=s(tn);wpr=r(Jw,"The model class to instantiate is selected based on the "),Y1e=n(Jw,"CODE",{});var R1t=s(Y1e);Apr=r(R1t,"model_type"),R1t.forEach(t),ypr=r(Jw,` property of the config object (either
passed as an argument or loaded from `),K1e=n(Jw,"CODE",{});var B1t=s(K1e);Lpr=r(B1t,"pretrained_model_name_or_path"),B1t.forEach(t),xpr=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(Jw,"CODE",{});var P1t=s(Z1e);$pr=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),kpr=r(Jw,":"),Jw.forEach(t),Spr=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);w9=n(Re,"LI",{});var uke=s(w9);ebe=n(uke,"STRONG",{});var I1t=s(ebe);Rpr=r(I1t,"bart"),I1t.forEach(t),Bpr=r(uke," \u2014 "),UQ=n(uke,"A",{href:!0});var q1t=s(UQ);Ppr=r(q1t,"TFBartForConditionalGeneration"),q1t.forEach(t),Ipr=r(uke," (BART model)"),uke.forEach(t),qpr=i(Re),A9=n(Re,"LI",{});var _ke=s(A9);obe=n(_ke,"STRONG",{});var N1t=s(obe);Npr=r(N1t,"blenderbot"),N1t.forEach(t),jpr=r(_ke," \u2014 "),JQ=n(_ke,"A",{href:!0});var j1t=s(JQ);Dpr=r(j1t,"TFBlenderbotForConditionalGeneration"),j1t.forEach(t),Gpr=r(_ke," (Blenderbot model)"),_ke.forEach(t),Opr=i(Re),y9=n(Re,"LI",{});var bke=s(y9);rbe=n(bke,"STRONG",{});var D1t=s(rbe);Vpr=r(D1t,"blenderbot-small"),D1t.forEach(t),Xpr=r(bke," \u2014 "),YQ=n(bke,"A",{href:!0});var G1t=s(YQ);zpr=r(G1t,"TFBlenderbotSmallForConditionalGeneration"),G1t.forEach(t),Qpr=r(bke," (BlenderbotSmall model)"),bke.forEach(t),Wpr=i(Re),L9=n(Re,"LI",{});var vke=s(L9);tbe=n(vke,"STRONG",{});var O1t=s(tbe);Hpr=r(O1t,"encoder-decoder"),O1t.forEach(t),Upr=r(vke," \u2014 "),KQ=n(vke,"A",{href:!0});var V1t=s(KQ);Jpr=r(V1t,"TFEncoderDecoderModel"),V1t.forEach(t),Ypr=r(vke," (Encoder decoder model)"),vke.forEach(t),Kpr=i(Re),x9=n(Re,"LI",{});var Fke=s(x9);abe=n(Fke,"STRONG",{});var X1t=s(abe);Zpr=r(X1t,"led"),X1t.forEach(t),eur=r(Fke," \u2014 "),ZQ=n(Fke,"A",{href:!0});var z1t=s(ZQ);our=r(z1t,"TFLEDForConditionalGeneration"),z1t.forEach(t),rur=r(Fke," (LED model)"),Fke.forEach(t),tur=i(Re),$9=n(Re,"LI",{});var Tke=s($9);nbe=n(Tke,"STRONG",{});var Q1t=s(nbe);aur=r(Q1t,"marian"),Q1t.forEach(t),nur=r(Tke," \u2014 "),eW=n(Tke,"A",{href:!0});var W1t=s(eW);sur=r(W1t,"TFMarianMTModel"),W1t.forEach(t),lur=r(Tke," (Marian model)"),Tke.forEach(t),iur=i(Re),k9=n(Re,"LI",{});var Mke=s(k9);sbe=n(Mke,"STRONG",{});var H1t=s(sbe);dur=r(H1t,"mbart"),H1t.forEach(t),cur=r(Mke," \u2014 "),oW=n(Mke,"A",{href:!0});var U1t=s(oW);fur=r(U1t,"TFMBartForConditionalGeneration"),U1t.forEach(t),mur=r(Mke," (mBART model)"),Mke.forEach(t),gur=i(Re),S9=n(Re,"LI",{});var Eke=s(S9);lbe=n(Eke,"STRONG",{});var J1t=s(lbe);hur=r(J1t,"mt5"),J1t.forEach(t),pur=r(Eke," \u2014 "),rW=n(Eke,"A",{href:!0});var Y1t=s(rW);uur=r(Y1t,"TFMT5ForConditionalGeneration"),Y1t.forEach(t),_ur=r(Eke," (mT5 model)"),Eke.forEach(t),bur=i(Re),R9=n(Re,"LI",{});var Cke=s(R9);ibe=n(Cke,"STRONG",{});var K1t=s(ibe);vur=r(K1t,"pegasus"),K1t.forEach(t),Fur=r(Cke," \u2014 "),tW=n(Cke,"A",{href:!0});var Z1t=s(tW);Tur=r(Z1t,"TFPegasusForConditionalGeneration"),Z1t.forEach(t),Mur=r(Cke," (Pegasus model)"),Cke.forEach(t),Eur=i(Re),B9=n(Re,"LI",{});var wke=s(B9);dbe=n(wke,"STRONG",{});var ebt=s(dbe);Cur=r(ebt,"t5"),ebt.forEach(t),wur=r(wke," \u2014 "),aW=n(wke,"A",{href:!0});var obt=s(aW);Aur=r(obt,"TFT5ForConditionalGeneration"),obt.forEach(t),yur=r(wke," (T5 model)"),wke.forEach(t),Re.forEach(t),Lur=i(Fl),T(P9.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),FIe=i(f),rc=n(f,"H2",{class:!0});var ANe=s(rc);I9=n(ANe,"A",{id:!0,class:!0,href:!0});var rbt=s(I9);cbe=n(rbt,"SPAN",{});var tbt=s(cbe);T(KL.$$.fragment,tbt),tbt.forEach(t),rbt.forEach(t),xur=i(ANe),fbe=n(ANe,"SPAN",{});var abt=s(fbe);$ur=r(abt,"TFAutoModelForSequenceClassification"),abt.forEach(t),ANe.forEach(t),TIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(ZL.$$.fragment,Tl),kur=i(Tl),tc=n(Tl,"P",{});var UK=s(tc);Sur=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),nW=n(UK,"A",{href:!0});var nbt=s(nW);Rur=r(nbt,"from_pretrained()"),nbt.forEach(t),Bur=r(UK," class method or the "),sW=n(UK,"A",{href:!0});var sbt=s(sW);Pur=r(sbt,"from_config()"),sbt.forEach(t),Iur=r(UK,` class
method.`),UK.forEach(t),qur=i(Tl),e8=n(Tl,"P",{});var yNe=s(e8);Nur=r(yNe,"This class cannot be instantiated directly using "),mbe=n(yNe,"CODE",{});var lbt=s(mbe);jur=r(lbt,"__init__()"),lbt.forEach(t),Dur=r(yNe," (throws an error)."),yNe.forEach(t),Gur=i(Tl),kt=n(Tl,"DIV",{class:!0});var Yw=s(kt);T(o8.$$.fragment,Yw),Our=i(Yw),gbe=n(Yw,"P",{});var ibt=s(gbe);Vur=r(ibt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ibt.forEach(t),Xur=i(Yw),ac=n(Yw,"P",{});var JK=s(ac);zur=r(JK,`Note:
Loading a model from its configuration file does `),hbe=n(JK,"STRONG",{});var dbt=s(hbe);Qur=r(dbt,"not"),dbt.forEach(t),Wur=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(JK,"A",{href:!0});var cbt=s(lW);Hur=r(cbt,"from_pretrained()"),cbt.forEach(t),Uur=r(JK," to load the model weights."),JK.forEach(t),Jur=i(Yw),T(q9.$$.fragment,Yw),Yw.forEach(t),Yur=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(r8.$$.fragment,Ml),Kur=i(Ml),pbe=n(Ml,"P",{});var fbt=s(pbe);Zur=r(fbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fbt.forEach(t),e_r=i(Ml),an=n(Ml,"P",{});var Kw=s(an);o_r=r(Kw,"The model class to instantiate is selected based on the "),ube=n(Kw,"CODE",{});var mbt=s(ube);r_r=r(mbt,"model_type"),mbt.forEach(t),t_r=r(Kw,` property of the config object (either
passed as an argument or loaded from `),_be=n(Kw,"CODE",{});var gbt=s(_be);a_r=r(gbt,"pretrained_model_name_or_path"),gbt.forEach(t),n_r=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bbe=n(Kw,"CODE",{});var hbt=s(bbe);s_r=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),l_r=r(Kw,":"),Kw.forEach(t),i_r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);N9=n(re,"LI",{});var Ake=s(N9);vbe=n(Ake,"STRONG",{});var pbt=s(vbe);d_r=r(pbt,"albert"),pbt.forEach(t),c_r=r(Ake," \u2014 "),iW=n(Ake,"A",{href:!0});var ubt=s(iW);f_r=r(ubt,"TFAlbertForSequenceClassification"),ubt.forEach(t),m_r=r(Ake," (ALBERT model)"),Ake.forEach(t),g_r=i(re),j9=n(re,"LI",{});var yke=s(j9);Fbe=n(yke,"STRONG",{});var _bt=s(Fbe);h_r=r(_bt,"bert"),_bt.forEach(t),p_r=r(yke," \u2014 "),dW=n(yke,"A",{href:!0});var bbt=s(dW);u_r=r(bbt,"TFBertForSequenceClassification"),bbt.forEach(t),__r=r(yke," (BERT model)"),yke.forEach(t),b_r=i(re),D9=n(re,"LI",{});var Lke=s(D9);Tbe=n(Lke,"STRONG",{});var vbt=s(Tbe);v_r=r(vbt,"camembert"),vbt.forEach(t),F_r=r(Lke," \u2014 "),cW=n(Lke,"A",{href:!0});var Fbt=s(cW);T_r=r(Fbt,"TFCamembertForSequenceClassification"),Fbt.forEach(t),M_r=r(Lke," (CamemBERT model)"),Lke.forEach(t),E_r=i(re),G9=n(re,"LI",{});var xke=s(G9);Mbe=n(xke,"STRONG",{});var Tbt=s(Mbe);C_r=r(Tbt,"convbert"),Tbt.forEach(t),w_r=r(xke," \u2014 "),fW=n(xke,"A",{href:!0});var Mbt=s(fW);A_r=r(Mbt,"TFConvBertForSequenceClassification"),Mbt.forEach(t),y_r=r(xke," (ConvBERT model)"),xke.forEach(t),L_r=i(re),O9=n(re,"LI",{});var $ke=s(O9);Ebe=n($ke,"STRONG",{});var Ebt=s(Ebe);x_r=r(Ebt,"ctrl"),Ebt.forEach(t),$_r=r($ke," \u2014 "),mW=n($ke,"A",{href:!0});var Cbt=s(mW);k_r=r(Cbt,"TFCTRLForSequenceClassification"),Cbt.forEach(t),S_r=r($ke," (CTRL model)"),$ke.forEach(t),R_r=i(re),V9=n(re,"LI",{});var kke=s(V9);Cbe=n(kke,"STRONG",{});var wbt=s(Cbe);B_r=r(wbt,"deberta"),wbt.forEach(t),P_r=r(kke," \u2014 "),gW=n(kke,"A",{href:!0});var Abt=s(gW);I_r=r(Abt,"TFDebertaForSequenceClassification"),Abt.forEach(t),q_r=r(kke," (DeBERTa model)"),kke.forEach(t),N_r=i(re),X9=n(re,"LI",{});var Ske=s(X9);wbe=n(Ske,"STRONG",{});var ybt=s(wbe);j_r=r(ybt,"deberta-v2"),ybt.forEach(t),D_r=r(Ske," \u2014 "),hW=n(Ske,"A",{href:!0});var Lbt=s(hW);G_r=r(Lbt,"TFDebertaV2ForSequenceClassification"),Lbt.forEach(t),O_r=r(Ske," (DeBERTa-v2 model)"),Ske.forEach(t),V_r=i(re),z9=n(re,"LI",{});var Rke=s(z9);Abe=n(Rke,"STRONG",{});var xbt=s(Abe);X_r=r(xbt,"distilbert"),xbt.forEach(t),z_r=r(Rke," \u2014 "),pW=n(Rke,"A",{href:!0});var $bt=s(pW);Q_r=r($bt,"TFDistilBertForSequenceClassification"),$bt.forEach(t),W_r=r(Rke," (DistilBERT model)"),Rke.forEach(t),H_r=i(re),Q9=n(re,"LI",{});var Bke=s(Q9);ybe=n(Bke,"STRONG",{});var kbt=s(ybe);U_r=r(kbt,"electra"),kbt.forEach(t),J_r=r(Bke," \u2014 "),uW=n(Bke,"A",{href:!0});var Sbt=s(uW);Y_r=r(Sbt,"TFElectraForSequenceClassification"),Sbt.forEach(t),K_r=r(Bke," (ELECTRA model)"),Bke.forEach(t),Z_r=i(re),W9=n(re,"LI",{});var Pke=s(W9);Lbe=n(Pke,"STRONG",{});var Rbt=s(Lbe);e2r=r(Rbt,"flaubert"),Rbt.forEach(t),o2r=r(Pke," \u2014 "),_W=n(Pke,"A",{href:!0});var Bbt=s(_W);r2r=r(Bbt,"TFFlaubertForSequenceClassification"),Bbt.forEach(t),t2r=r(Pke," (FlauBERT model)"),Pke.forEach(t),a2r=i(re),H9=n(re,"LI",{});var Ike=s(H9);xbe=n(Ike,"STRONG",{});var Pbt=s(xbe);n2r=r(Pbt,"funnel"),Pbt.forEach(t),s2r=r(Ike," \u2014 "),bW=n(Ike,"A",{href:!0});var Ibt=s(bW);l2r=r(Ibt,"TFFunnelForSequenceClassification"),Ibt.forEach(t),i2r=r(Ike," (Funnel Transformer model)"),Ike.forEach(t),d2r=i(re),U9=n(re,"LI",{});var qke=s(U9);$be=n(qke,"STRONG",{});var qbt=s($be);c2r=r(qbt,"gpt2"),qbt.forEach(t),f2r=r(qke," \u2014 "),vW=n(qke,"A",{href:!0});var Nbt=s(vW);m2r=r(Nbt,"TFGPT2ForSequenceClassification"),Nbt.forEach(t),g2r=r(qke," (OpenAI GPT-2 model)"),qke.forEach(t),h2r=i(re),J9=n(re,"LI",{});var Nke=s(J9);kbe=n(Nke,"STRONG",{});var jbt=s(kbe);p2r=r(jbt,"gptj"),jbt.forEach(t),u2r=r(Nke," \u2014 "),FW=n(Nke,"A",{href:!0});var Dbt=s(FW);_2r=r(Dbt,"TFGPTJForSequenceClassification"),Dbt.forEach(t),b2r=r(Nke," (GPT-J model)"),Nke.forEach(t),v2r=i(re),Y9=n(re,"LI",{});var jke=s(Y9);Sbe=n(jke,"STRONG",{});var Gbt=s(Sbe);F2r=r(Gbt,"layoutlm"),Gbt.forEach(t),T2r=r(jke," \u2014 "),TW=n(jke,"A",{href:!0});var Obt=s(TW);M2r=r(Obt,"TFLayoutLMForSequenceClassification"),Obt.forEach(t),E2r=r(jke," (LayoutLM model)"),jke.forEach(t),C2r=i(re),K9=n(re,"LI",{});var Dke=s(K9);Rbe=n(Dke,"STRONG",{});var Vbt=s(Rbe);w2r=r(Vbt,"longformer"),Vbt.forEach(t),A2r=r(Dke," \u2014 "),MW=n(Dke,"A",{href:!0});var Xbt=s(MW);y2r=r(Xbt,"TFLongformerForSequenceClassification"),Xbt.forEach(t),L2r=r(Dke," (Longformer model)"),Dke.forEach(t),x2r=i(re),Z9=n(re,"LI",{});var Gke=s(Z9);Bbe=n(Gke,"STRONG",{});var zbt=s(Bbe);$2r=r(zbt,"mobilebert"),zbt.forEach(t),k2r=r(Gke," \u2014 "),EW=n(Gke,"A",{href:!0});var Qbt=s(EW);S2r=r(Qbt,"TFMobileBertForSequenceClassification"),Qbt.forEach(t),R2r=r(Gke," (MobileBERT model)"),Gke.forEach(t),B2r=i(re),eM=n(re,"LI",{});var Oke=s(eM);Pbe=n(Oke,"STRONG",{});var Wbt=s(Pbe);P2r=r(Wbt,"mpnet"),Wbt.forEach(t),I2r=r(Oke," \u2014 "),CW=n(Oke,"A",{href:!0});var Hbt=s(CW);q2r=r(Hbt,"TFMPNetForSequenceClassification"),Hbt.forEach(t),N2r=r(Oke," (MPNet model)"),Oke.forEach(t),j2r=i(re),oM=n(re,"LI",{});var Vke=s(oM);Ibe=n(Vke,"STRONG",{});var Ubt=s(Ibe);D2r=r(Ubt,"openai-gpt"),Ubt.forEach(t),G2r=r(Vke," \u2014 "),wW=n(Vke,"A",{href:!0});var Jbt=s(wW);O2r=r(Jbt,"TFOpenAIGPTForSequenceClassification"),Jbt.forEach(t),V2r=r(Vke," (OpenAI GPT model)"),Vke.forEach(t),X2r=i(re),rM=n(re,"LI",{});var Xke=s(rM);qbe=n(Xke,"STRONG",{});var Ybt=s(qbe);z2r=r(Ybt,"rembert"),Ybt.forEach(t),Q2r=r(Xke," \u2014 "),AW=n(Xke,"A",{href:!0});var Kbt=s(AW);W2r=r(Kbt,"TFRemBertForSequenceClassification"),Kbt.forEach(t),H2r=r(Xke," (RemBERT model)"),Xke.forEach(t),U2r=i(re),tM=n(re,"LI",{});var zke=s(tM);Nbe=n(zke,"STRONG",{});var Zbt=s(Nbe);J2r=r(Zbt,"roberta"),Zbt.forEach(t),Y2r=r(zke," \u2014 "),yW=n(zke,"A",{href:!0});var e5t=s(yW);K2r=r(e5t,"TFRobertaForSequenceClassification"),e5t.forEach(t),Z2r=r(zke," (RoBERTa model)"),zke.forEach(t),e1r=i(re),aM=n(re,"LI",{});var Qke=s(aM);jbe=n(Qke,"STRONG",{});var o5t=s(jbe);o1r=r(o5t,"roformer"),o5t.forEach(t),r1r=r(Qke," \u2014 "),LW=n(Qke,"A",{href:!0});var r5t=s(LW);t1r=r(r5t,"TFRoFormerForSequenceClassification"),r5t.forEach(t),a1r=r(Qke," (RoFormer model)"),Qke.forEach(t),n1r=i(re),nM=n(re,"LI",{});var Wke=s(nM);Dbe=n(Wke,"STRONG",{});var t5t=s(Dbe);s1r=r(t5t,"tapas"),t5t.forEach(t),l1r=r(Wke," \u2014 "),xW=n(Wke,"A",{href:!0});var a5t=s(xW);i1r=r(a5t,"TFTapasForSequenceClassification"),a5t.forEach(t),d1r=r(Wke," (TAPAS model)"),Wke.forEach(t),c1r=i(re),sM=n(re,"LI",{});var Hke=s(sM);Gbe=n(Hke,"STRONG",{});var n5t=s(Gbe);f1r=r(n5t,"transfo-xl"),n5t.forEach(t),m1r=r(Hke," \u2014 "),$W=n(Hke,"A",{href:!0});var s5t=s($W);g1r=r(s5t,"TFTransfoXLForSequenceClassification"),s5t.forEach(t),h1r=r(Hke," (Transformer-XL model)"),Hke.forEach(t),p1r=i(re),lM=n(re,"LI",{});var Uke=s(lM);Obe=n(Uke,"STRONG",{});var l5t=s(Obe);u1r=r(l5t,"xlm"),l5t.forEach(t),_1r=r(Uke," \u2014 "),kW=n(Uke,"A",{href:!0});var i5t=s(kW);b1r=r(i5t,"TFXLMForSequenceClassification"),i5t.forEach(t),v1r=r(Uke," (XLM model)"),Uke.forEach(t),F1r=i(re),iM=n(re,"LI",{});var Jke=s(iM);Vbe=n(Jke,"STRONG",{});var d5t=s(Vbe);T1r=r(d5t,"xlm-roberta"),d5t.forEach(t),M1r=r(Jke," \u2014 "),SW=n(Jke,"A",{href:!0});var c5t=s(SW);E1r=r(c5t,"TFXLMRobertaForSequenceClassification"),c5t.forEach(t),C1r=r(Jke," (XLM-RoBERTa model)"),Jke.forEach(t),w1r=i(re),dM=n(re,"LI",{});var Yke=s(dM);Xbe=n(Yke,"STRONG",{});var f5t=s(Xbe);A1r=r(f5t,"xlnet"),f5t.forEach(t),y1r=r(Yke," \u2014 "),RW=n(Yke,"A",{href:!0});var m5t=s(RW);L1r=r(m5t,"TFXLNetForSequenceClassification"),m5t.forEach(t),x1r=r(Yke," (XLNet model)"),Yke.forEach(t),re.forEach(t),$1r=i(Ml),T(cM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),MIe=i(f),nc=n(f,"H2",{class:!0});var LNe=s(nc);fM=n(LNe,"A",{id:!0,class:!0,href:!0});var g5t=s(fM);zbe=n(g5t,"SPAN",{});var h5t=s(zbe);T(t8.$$.fragment,h5t),h5t.forEach(t),g5t.forEach(t),k1r=i(LNe),Qbe=n(LNe,"SPAN",{});var p5t=s(Qbe);S1r=r(p5t,"TFAutoModelForMultipleChoice"),p5t.forEach(t),LNe.forEach(t),EIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(a8.$$.fragment,El),R1r=i(El),sc=n(El,"P",{});var YK=s(sc);B1r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BW=n(YK,"A",{href:!0});var u5t=s(BW);P1r=r(u5t,"from_pretrained()"),u5t.forEach(t),I1r=r(YK," class method or the "),PW=n(YK,"A",{href:!0});var _5t=s(PW);q1r=r(_5t,"from_config()"),_5t.forEach(t),N1r=r(YK,` class
method.`),YK.forEach(t),j1r=i(El),n8=n(El,"P",{});var xNe=s(n8);D1r=r(xNe,"This class cannot be instantiated directly using "),Wbe=n(xNe,"CODE",{});var b5t=s(Wbe);G1r=r(b5t,"__init__()"),b5t.forEach(t),O1r=r(xNe," (throws an error)."),xNe.forEach(t),V1r=i(El),St=n(El,"DIV",{class:!0});var Zw=s(St);T(s8.$$.fragment,Zw),X1r=i(Zw),Hbe=n(Zw,"P",{});var v5t=s(Hbe);z1r=r(v5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v5t.forEach(t),Q1r=i(Zw),lc=n(Zw,"P",{});var KK=s(lc);W1r=r(KK,`Note:
Loading a model from its configuration file does `),Ube=n(KK,"STRONG",{});var F5t=s(Ube);H1r=r(F5t,"not"),F5t.forEach(t),U1r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(KK,"A",{href:!0});var T5t=s(IW);J1r=r(T5t,"from_pretrained()"),T5t.forEach(t),Y1r=r(KK," to load the model weights."),KK.forEach(t),K1r=i(Zw),T(mM.$$.fragment,Zw),Zw.forEach(t),Z1r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(l8.$$.fragment,Cl),ebr=i(Cl),Jbe=n(Cl,"P",{});var M5t=s(Jbe);obr=r(M5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),M5t.forEach(t),rbr=i(Cl),nn=n(Cl,"P",{});var eA=s(nn);tbr=r(eA,"The model class to instantiate is selected based on the "),Ybe=n(eA,"CODE",{});var E5t=s(Ybe);abr=r(E5t,"model_type"),E5t.forEach(t),nbr=r(eA,` property of the config object (either
passed as an argument or loaded from `),Kbe=n(eA,"CODE",{});var C5t=s(Kbe);sbr=r(C5t,"pretrained_model_name_or_path"),C5t.forEach(t),lbr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zbe=n(eA,"CODE",{});var w5t=s(Zbe);ibr=r(w5t,"pretrained_model_name_or_path"),w5t.forEach(t),dbr=r(eA,":"),eA.forEach(t),cbr=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);gM=n(_e,"LI",{});var Kke=s(gM);e5e=n(Kke,"STRONG",{});var A5t=s(e5e);fbr=r(A5t,"albert"),A5t.forEach(t),mbr=r(Kke," \u2014 "),qW=n(Kke,"A",{href:!0});var y5t=s(qW);gbr=r(y5t,"TFAlbertForMultipleChoice"),y5t.forEach(t),hbr=r(Kke," (ALBERT model)"),Kke.forEach(t),pbr=i(_e),hM=n(_e,"LI",{});var Zke=s(hM);o5e=n(Zke,"STRONG",{});var L5t=s(o5e);ubr=r(L5t,"bert"),L5t.forEach(t),_br=r(Zke," \u2014 "),NW=n(Zke,"A",{href:!0});var x5t=s(NW);bbr=r(x5t,"TFBertForMultipleChoice"),x5t.forEach(t),vbr=r(Zke," (BERT model)"),Zke.forEach(t),Fbr=i(_e),pM=n(_e,"LI",{});var eSe=s(pM);r5e=n(eSe,"STRONG",{});var $5t=s(r5e);Tbr=r($5t,"camembert"),$5t.forEach(t),Mbr=r(eSe," \u2014 "),jW=n(eSe,"A",{href:!0});var k5t=s(jW);Ebr=r(k5t,"TFCamembertForMultipleChoice"),k5t.forEach(t),Cbr=r(eSe," (CamemBERT model)"),eSe.forEach(t),wbr=i(_e),uM=n(_e,"LI",{});var oSe=s(uM);t5e=n(oSe,"STRONG",{});var S5t=s(t5e);Abr=r(S5t,"convbert"),S5t.forEach(t),ybr=r(oSe," \u2014 "),DW=n(oSe,"A",{href:!0});var R5t=s(DW);Lbr=r(R5t,"TFConvBertForMultipleChoice"),R5t.forEach(t),xbr=r(oSe," (ConvBERT model)"),oSe.forEach(t),$br=i(_e),_M=n(_e,"LI",{});var rSe=s(_M);a5e=n(rSe,"STRONG",{});var B5t=s(a5e);kbr=r(B5t,"distilbert"),B5t.forEach(t),Sbr=r(rSe," \u2014 "),GW=n(rSe,"A",{href:!0});var P5t=s(GW);Rbr=r(P5t,"TFDistilBertForMultipleChoice"),P5t.forEach(t),Bbr=r(rSe," (DistilBERT model)"),rSe.forEach(t),Pbr=i(_e),bM=n(_e,"LI",{});var tSe=s(bM);n5e=n(tSe,"STRONG",{});var I5t=s(n5e);Ibr=r(I5t,"electra"),I5t.forEach(t),qbr=r(tSe," \u2014 "),OW=n(tSe,"A",{href:!0});var q5t=s(OW);Nbr=r(q5t,"TFElectraForMultipleChoice"),q5t.forEach(t),jbr=r(tSe," (ELECTRA model)"),tSe.forEach(t),Dbr=i(_e),vM=n(_e,"LI",{});var aSe=s(vM);s5e=n(aSe,"STRONG",{});var N5t=s(s5e);Gbr=r(N5t,"flaubert"),N5t.forEach(t),Obr=r(aSe," \u2014 "),VW=n(aSe,"A",{href:!0});var j5t=s(VW);Vbr=r(j5t,"TFFlaubertForMultipleChoice"),j5t.forEach(t),Xbr=r(aSe," (FlauBERT model)"),aSe.forEach(t),zbr=i(_e),FM=n(_e,"LI",{});var nSe=s(FM);l5e=n(nSe,"STRONG",{});var D5t=s(l5e);Qbr=r(D5t,"funnel"),D5t.forEach(t),Wbr=r(nSe," \u2014 "),XW=n(nSe,"A",{href:!0});var G5t=s(XW);Hbr=r(G5t,"TFFunnelForMultipleChoice"),G5t.forEach(t),Ubr=r(nSe," (Funnel Transformer model)"),nSe.forEach(t),Jbr=i(_e),TM=n(_e,"LI",{});var sSe=s(TM);i5e=n(sSe,"STRONG",{});var O5t=s(i5e);Ybr=r(O5t,"longformer"),O5t.forEach(t),Kbr=r(sSe," \u2014 "),zW=n(sSe,"A",{href:!0});var V5t=s(zW);Zbr=r(V5t,"TFLongformerForMultipleChoice"),V5t.forEach(t),e5r=r(sSe," (Longformer model)"),sSe.forEach(t),o5r=i(_e),MM=n(_e,"LI",{});var lSe=s(MM);d5e=n(lSe,"STRONG",{});var X5t=s(d5e);r5r=r(X5t,"mobilebert"),X5t.forEach(t),t5r=r(lSe," \u2014 "),QW=n(lSe,"A",{href:!0});var z5t=s(QW);a5r=r(z5t,"TFMobileBertForMultipleChoice"),z5t.forEach(t),n5r=r(lSe," (MobileBERT model)"),lSe.forEach(t),s5r=i(_e),EM=n(_e,"LI",{});var iSe=s(EM);c5e=n(iSe,"STRONG",{});var Q5t=s(c5e);l5r=r(Q5t,"mpnet"),Q5t.forEach(t),i5r=r(iSe," \u2014 "),WW=n(iSe,"A",{href:!0});var W5t=s(WW);d5r=r(W5t,"TFMPNetForMultipleChoice"),W5t.forEach(t),c5r=r(iSe," (MPNet model)"),iSe.forEach(t),f5r=i(_e),CM=n(_e,"LI",{});var dSe=s(CM);f5e=n(dSe,"STRONG",{});var H5t=s(f5e);m5r=r(H5t,"rembert"),H5t.forEach(t),g5r=r(dSe," \u2014 "),HW=n(dSe,"A",{href:!0});var U5t=s(HW);h5r=r(U5t,"TFRemBertForMultipleChoice"),U5t.forEach(t),p5r=r(dSe," (RemBERT model)"),dSe.forEach(t),u5r=i(_e),wM=n(_e,"LI",{});var cSe=s(wM);m5e=n(cSe,"STRONG",{});var J5t=s(m5e);_5r=r(J5t,"roberta"),J5t.forEach(t),b5r=r(cSe," \u2014 "),UW=n(cSe,"A",{href:!0});var Y5t=s(UW);v5r=r(Y5t,"TFRobertaForMultipleChoice"),Y5t.forEach(t),F5r=r(cSe," (RoBERTa model)"),cSe.forEach(t),T5r=i(_e),AM=n(_e,"LI",{});var fSe=s(AM);g5e=n(fSe,"STRONG",{});var K5t=s(g5e);M5r=r(K5t,"roformer"),K5t.forEach(t),E5r=r(fSe," \u2014 "),JW=n(fSe,"A",{href:!0});var Z5t=s(JW);C5r=r(Z5t,"TFRoFormerForMultipleChoice"),Z5t.forEach(t),w5r=r(fSe," (RoFormer model)"),fSe.forEach(t),A5r=i(_e),yM=n(_e,"LI",{});var mSe=s(yM);h5e=n(mSe,"STRONG",{});var evt=s(h5e);y5r=r(evt,"xlm"),evt.forEach(t),L5r=r(mSe," \u2014 "),YW=n(mSe,"A",{href:!0});var ovt=s(YW);x5r=r(ovt,"TFXLMForMultipleChoice"),ovt.forEach(t),$5r=r(mSe," (XLM model)"),mSe.forEach(t),k5r=i(_e),LM=n(_e,"LI",{});var gSe=s(LM);p5e=n(gSe,"STRONG",{});var rvt=s(p5e);S5r=r(rvt,"xlm-roberta"),rvt.forEach(t),R5r=r(gSe," \u2014 "),KW=n(gSe,"A",{href:!0});var tvt=s(KW);B5r=r(tvt,"TFXLMRobertaForMultipleChoice"),tvt.forEach(t),P5r=r(gSe," (XLM-RoBERTa model)"),gSe.forEach(t),I5r=i(_e),xM=n(_e,"LI",{});var hSe=s(xM);u5e=n(hSe,"STRONG",{});var avt=s(u5e);q5r=r(avt,"xlnet"),avt.forEach(t),N5r=r(hSe," \u2014 "),ZW=n(hSe,"A",{href:!0});var nvt=s(ZW);j5r=r(nvt,"TFXLNetForMultipleChoice"),nvt.forEach(t),D5r=r(hSe," (XLNet model)"),hSe.forEach(t),_e.forEach(t),G5r=i(Cl),T($M.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),CIe=i(f),ic=n(f,"H2",{class:!0});var $Ne=s(ic);kM=n($Ne,"A",{id:!0,class:!0,href:!0});var svt=s(kM);_5e=n(svt,"SPAN",{});var lvt=s(_5e);T(i8.$$.fragment,lvt),lvt.forEach(t),svt.forEach(t),O5r=i($Ne),b5e=n($Ne,"SPAN",{});var ivt=s(b5e);V5r=r(ivt,"TFAutoModelForNextSentencePrediction"),ivt.forEach(t),$Ne.forEach(t),wIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(d8.$$.fragment,wl),X5r=i(wl),dc=n(wl,"P",{});var ZK=s(dc);z5r=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eH=n(ZK,"A",{href:!0});var dvt=s(eH);Q5r=r(dvt,"from_pretrained()"),dvt.forEach(t),W5r=r(ZK," class method or the "),oH=n(ZK,"A",{href:!0});var cvt=s(oH);H5r=r(cvt,"from_config()"),cvt.forEach(t),U5r=r(ZK,` class
method.`),ZK.forEach(t),J5r=i(wl),c8=n(wl,"P",{});var kNe=s(c8);Y5r=r(kNe,"This class cannot be instantiated directly using "),v5e=n(kNe,"CODE",{});var fvt=s(v5e);K5r=r(fvt,"__init__()"),fvt.forEach(t),Z5r=r(kNe," (throws an error)."),kNe.forEach(t),evr=i(wl),Rt=n(wl,"DIV",{class:!0});var oA=s(Rt);T(f8.$$.fragment,oA),ovr=i(oA),F5e=n(oA,"P",{});var mvt=s(F5e);rvr=r(mvt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mvt.forEach(t),tvr=i(oA),cc=n(oA,"P",{});var eZ=s(cc);avr=r(eZ,`Note:
Loading a model from its configuration file does `),T5e=n(eZ,"STRONG",{});var gvt=s(T5e);nvr=r(gvt,"not"),gvt.forEach(t),svr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(eZ,"A",{href:!0});var hvt=s(rH);lvr=r(hvt,"from_pretrained()"),hvt.forEach(t),ivr=r(eZ," to load the model weights."),eZ.forEach(t),dvr=i(oA),T(SM.$$.fragment,oA),oA.forEach(t),cvr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(m8.$$.fragment,Al),fvr=i(Al),M5e=n(Al,"P",{});var pvt=s(M5e);mvr=r(pvt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pvt.forEach(t),gvr=i(Al),sn=n(Al,"P",{});var rA=s(sn);hvr=r(rA,"The model class to instantiate is selected based on the "),E5e=n(rA,"CODE",{});var uvt=s(E5e);pvr=r(uvt,"model_type"),uvt.forEach(t),uvr=r(rA,` property of the config object (either
passed as an argument or loaded from `),C5e=n(rA,"CODE",{});var _vt=s(C5e);_vr=r(_vt,"pretrained_model_name_or_path"),_vt.forEach(t),bvr=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w5e=n(rA,"CODE",{});var bvt=s(w5e);vvr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),Fvr=r(rA,":"),rA.forEach(t),Tvr=i(Al),g8=n(Al,"UL",{});var SNe=s(g8);RM=n(SNe,"LI",{});var pSe=s(RM);A5e=n(pSe,"STRONG",{});var vvt=s(A5e);Mvr=r(vvt,"bert"),vvt.forEach(t),Evr=r(pSe," \u2014 "),tH=n(pSe,"A",{href:!0});var Fvt=s(tH);Cvr=r(Fvt,"TFBertForNextSentencePrediction"),Fvt.forEach(t),wvr=r(pSe," (BERT model)"),pSe.forEach(t),Avr=i(SNe),BM=n(SNe,"LI",{});var uSe=s(BM);y5e=n(uSe,"STRONG",{});var Tvt=s(y5e);yvr=r(Tvt,"mobilebert"),Tvt.forEach(t),Lvr=r(uSe," \u2014 "),aH=n(uSe,"A",{href:!0});var Mvt=s(aH);xvr=r(Mvt,"TFMobileBertForNextSentencePrediction"),Mvt.forEach(t),$vr=r(uSe," (MobileBERT model)"),uSe.forEach(t),SNe.forEach(t),kvr=i(Al),T(PM.$$.fragment,Al),Al.forEach(t),wl.forEach(t),AIe=i(f),fc=n(f,"H2",{class:!0});var RNe=s(fc);IM=n(RNe,"A",{id:!0,class:!0,href:!0});var Evt=s(IM);L5e=n(Evt,"SPAN",{});var Cvt=s(L5e);T(h8.$$.fragment,Cvt),Cvt.forEach(t),Evt.forEach(t),Svr=i(RNe),x5e=n(RNe,"SPAN",{});var wvt=s(x5e);Rvr=r(wvt,"TFAutoModelForTableQuestionAnswering"),wvt.forEach(t),RNe.forEach(t),yIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(p8.$$.fragment,yl),Bvr=i(yl),mc=n(yl,"P",{});var oZ=s(mc);Pvr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),nH=n(oZ,"A",{href:!0});var Avt=s(nH);Ivr=r(Avt,"from_pretrained()"),Avt.forEach(t),qvr=r(oZ," class method or the "),sH=n(oZ,"A",{href:!0});var yvt=s(sH);Nvr=r(yvt,"from_config()"),yvt.forEach(t),jvr=r(oZ,` class
method.`),oZ.forEach(t),Dvr=i(yl),u8=n(yl,"P",{});var BNe=s(u8);Gvr=r(BNe,"This class cannot be instantiated directly using "),$5e=n(BNe,"CODE",{});var Lvt=s($5e);Ovr=r(Lvt,"__init__()"),Lvt.forEach(t),Vvr=r(BNe," (throws an error)."),BNe.forEach(t),Xvr=i(yl),Bt=n(yl,"DIV",{class:!0});var tA=s(Bt);T(_8.$$.fragment,tA),zvr=i(tA),k5e=n(tA,"P",{});var xvt=s(k5e);Qvr=r(xvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xvt.forEach(t),Wvr=i(tA),gc=n(tA,"P",{});var rZ=s(gc);Hvr=r(rZ,`Note:
Loading a model from its configuration file does `),S5e=n(rZ,"STRONG",{});var $vt=s(S5e);Uvr=r($vt,"not"),$vt.forEach(t),Jvr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(rZ,"A",{href:!0});var kvt=s(lH);Yvr=r(kvt,"from_pretrained()"),kvt.forEach(t),Kvr=r(rZ," to load the model weights."),rZ.forEach(t),Zvr=i(tA),T(qM.$$.fragment,tA),tA.forEach(t),eFr=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(b8.$$.fragment,Ll),oFr=i(Ll),R5e=n(Ll,"P",{});var Svt=s(R5e);rFr=r(Svt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Svt.forEach(t),tFr=i(Ll),ln=n(Ll,"P",{});var aA=s(ln);aFr=r(aA,"The model class to instantiate is selected based on the "),B5e=n(aA,"CODE",{});var Rvt=s(B5e);nFr=r(Rvt,"model_type"),Rvt.forEach(t),sFr=r(aA,` property of the config object (either
passed as an argument or loaded from `),P5e=n(aA,"CODE",{});var Bvt=s(P5e);lFr=r(Bvt,"pretrained_model_name_or_path"),Bvt.forEach(t),iFr=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(aA,"CODE",{});var Pvt=s(I5e);dFr=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),cFr=r(aA,":"),aA.forEach(t),fFr=i(Ll),q5e=n(Ll,"UL",{});var Ivt=s(q5e);NM=n(Ivt,"LI",{});var _Se=s(NM);N5e=n(_Se,"STRONG",{});var qvt=s(N5e);mFr=r(qvt,"tapas"),qvt.forEach(t),gFr=r(_Se," \u2014 "),iH=n(_Se,"A",{href:!0});var Nvt=s(iH);hFr=r(Nvt,"TFTapasForQuestionAnswering"),Nvt.forEach(t),pFr=r(_Se," (TAPAS model)"),_Se.forEach(t),Ivt.forEach(t),uFr=i(Ll),T(jM.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),LIe=i(f),hc=n(f,"H2",{class:!0});var PNe=s(hc);DM=n(PNe,"A",{id:!0,class:!0,href:!0});var jvt=s(DM);j5e=n(jvt,"SPAN",{});var Dvt=s(j5e);T(v8.$$.fragment,Dvt),Dvt.forEach(t),jvt.forEach(t),_Fr=i(PNe),D5e=n(PNe,"SPAN",{});var Gvt=s(D5e);bFr=r(Gvt,"TFAutoModelForTokenClassification"),Gvt.forEach(t),PNe.forEach(t),xIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(F8.$$.fragment,xl),vFr=i(xl),pc=n(xl,"P",{});var tZ=s(pc);FFr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dH=n(tZ,"A",{href:!0});var Ovt=s(dH);TFr=r(Ovt,"from_pretrained()"),Ovt.forEach(t),MFr=r(tZ," class method or the "),cH=n(tZ,"A",{href:!0});var Vvt=s(cH);EFr=r(Vvt,"from_config()"),Vvt.forEach(t),CFr=r(tZ,` class
method.`),tZ.forEach(t),wFr=i(xl),T8=n(xl,"P",{});var INe=s(T8);AFr=r(INe,"This class cannot be instantiated directly using "),G5e=n(INe,"CODE",{});var Xvt=s(G5e);yFr=r(Xvt,"__init__()"),Xvt.forEach(t),LFr=r(INe," (throws an error)."),INe.forEach(t),xFr=i(xl),Pt=n(xl,"DIV",{class:!0});var nA=s(Pt);T(M8.$$.fragment,nA),$Fr=i(nA),O5e=n(nA,"P",{});var zvt=s(O5e);kFr=r(zvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),zvt.forEach(t),SFr=i(nA),uc=n(nA,"P",{});var aZ=s(uc);RFr=r(aZ,`Note:
Loading a model from its configuration file does `),V5e=n(aZ,"STRONG",{});var Qvt=s(V5e);BFr=r(Qvt,"not"),Qvt.forEach(t),PFr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(aZ,"A",{href:!0});var Wvt=s(fH);IFr=r(Wvt,"from_pretrained()"),Wvt.forEach(t),qFr=r(aZ," to load the model weights."),aZ.forEach(t),NFr=i(nA),T(GM.$$.fragment,nA),nA.forEach(t),jFr=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(E8.$$.fragment,$l),DFr=i($l),X5e=n($l,"P",{});var Hvt=s(X5e);GFr=r(Hvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hvt.forEach(t),OFr=i($l),dn=n($l,"P",{});var sA=s(dn);VFr=r(sA,"The model class to instantiate is selected based on the "),z5e=n(sA,"CODE",{});var Uvt=s(z5e);XFr=r(Uvt,"model_type"),Uvt.forEach(t),zFr=r(sA,` property of the config object (either
passed as an argument or loaded from `),Q5e=n(sA,"CODE",{});var Jvt=s(Q5e);QFr=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),WFr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(sA,"CODE",{});var Yvt=s(W5e);HFr=r(Yvt,"pretrained_model_name_or_path"),Yvt.forEach(t),UFr=r(sA,":"),sA.forEach(t),JFr=i($l),de=n($l,"UL",{});var me=s(de);OM=n(me,"LI",{});var bSe=s(OM);H5e=n(bSe,"STRONG",{});var Kvt=s(H5e);YFr=r(Kvt,"albert"),Kvt.forEach(t),KFr=r(bSe," \u2014 "),mH=n(bSe,"A",{href:!0});var Zvt=s(mH);ZFr=r(Zvt,"TFAlbertForTokenClassification"),Zvt.forEach(t),e6r=r(bSe," (ALBERT model)"),bSe.forEach(t),o6r=i(me),VM=n(me,"LI",{});var vSe=s(VM);U5e=n(vSe,"STRONG",{});var eFt=s(U5e);r6r=r(eFt,"bert"),eFt.forEach(t),t6r=r(vSe," \u2014 "),gH=n(vSe,"A",{href:!0});var oFt=s(gH);a6r=r(oFt,"TFBertForTokenClassification"),oFt.forEach(t),n6r=r(vSe," (BERT model)"),vSe.forEach(t),s6r=i(me),XM=n(me,"LI",{});var FSe=s(XM);J5e=n(FSe,"STRONG",{});var rFt=s(J5e);l6r=r(rFt,"camembert"),rFt.forEach(t),i6r=r(FSe," \u2014 "),hH=n(FSe,"A",{href:!0});var tFt=s(hH);d6r=r(tFt,"TFCamembertForTokenClassification"),tFt.forEach(t),c6r=r(FSe," (CamemBERT model)"),FSe.forEach(t),f6r=i(me),zM=n(me,"LI",{});var TSe=s(zM);Y5e=n(TSe,"STRONG",{});var aFt=s(Y5e);m6r=r(aFt,"convbert"),aFt.forEach(t),g6r=r(TSe," \u2014 "),pH=n(TSe,"A",{href:!0});var nFt=s(pH);h6r=r(nFt,"TFConvBertForTokenClassification"),nFt.forEach(t),p6r=r(TSe," (ConvBERT model)"),TSe.forEach(t),u6r=i(me),QM=n(me,"LI",{});var MSe=s(QM);K5e=n(MSe,"STRONG",{});var sFt=s(K5e);_6r=r(sFt,"deberta"),sFt.forEach(t),b6r=r(MSe," \u2014 "),uH=n(MSe,"A",{href:!0});var lFt=s(uH);v6r=r(lFt,"TFDebertaForTokenClassification"),lFt.forEach(t),F6r=r(MSe," (DeBERTa model)"),MSe.forEach(t),T6r=i(me),WM=n(me,"LI",{});var ESe=s(WM);Z5e=n(ESe,"STRONG",{});var iFt=s(Z5e);M6r=r(iFt,"deberta-v2"),iFt.forEach(t),E6r=r(ESe," \u2014 "),_H=n(ESe,"A",{href:!0});var dFt=s(_H);C6r=r(dFt,"TFDebertaV2ForTokenClassification"),dFt.forEach(t),w6r=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),A6r=i(me),HM=n(me,"LI",{});var CSe=s(HM);eve=n(CSe,"STRONG",{});var cFt=s(eve);y6r=r(cFt,"distilbert"),cFt.forEach(t),L6r=r(CSe," \u2014 "),bH=n(CSe,"A",{href:!0});var fFt=s(bH);x6r=r(fFt,"TFDistilBertForTokenClassification"),fFt.forEach(t),$6r=r(CSe," (DistilBERT model)"),CSe.forEach(t),k6r=i(me),UM=n(me,"LI",{});var wSe=s(UM);ove=n(wSe,"STRONG",{});var mFt=s(ove);S6r=r(mFt,"electra"),mFt.forEach(t),R6r=r(wSe," \u2014 "),vH=n(wSe,"A",{href:!0});var gFt=s(vH);B6r=r(gFt,"TFElectraForTokenClassification"),gFt.forEach(t),P6r=r(wSe," (ELECTRA model)"),wSe.forEach(t),I6r=i(me),JM=n(me,"LI",{});var ASe=s(JM);rve=n(ASe,"STRONG",{});var hFt=s(rve);q6r=r(hFt,"flaubert"),hFt.forEach(t),N6r=r(ASe," \u2014 "),FH=n(ASe,"A",{href:!0});var pFt=s(FH);j6r=r(pFt,"TFFlaubertForTokenClassification"),pFt.forEach(t),D6r=r(ASe," (FlauBERT model)"),ASe.forEach(t),G6r=i(me),YM=n(me,"LI",{});var ySe=s(YM);tve=n(ySe,"STRONG",{});var uFt=s(tve);O6r=r(uFt,"funnel"),uFt.forEach(t),V6r=r(ySe," \u2014 "),TH=n(ySe,"A",{href:!0});var _Ft=s(TH);X6r=r(_Ft,"TFFunnelForTokenClassification"),_Ft.forEach(t),z6r=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),Q6r=i(me),KM=n(me,"LI",{});var LSe=s(KM);ave=n(LSe,"STRONG",{});var bFt=s(ave);W6r=r(bFt,"layoutlm"),bFt.forEach(t),H6r=r(LSe," \u2014 "),MH=n(LSe,"A",{href:!0});var vFt=s(MH);U6r=r(vFt,"TFLayoutLMForTokenClassification"),vFt.forEach(t),J6r=r(LSe," (LayoutLM model)"),LSe.forEach(t),Y6r=i(me),ZM=n(me,"LI",{});var xSe=s(ZM);nve=n(xSe,"STRONG",{});var FFt=s(nve);K6r=r(FFt,"longformer"),FFt.forEach(t),Z6r=r(xSe," \u2014 "),EH=n(xSe,"A",{href:!0});var TFt=s(EH);eTr=r(TFt,"TFLongformerForTokenClassification"),TFt.forEach(t),oTr=r(xSe," (Longformer model)"),xSe.forEach(t),rTr=i(me),e4=n(me,"LI",{});var $Se=s(e4);sve=n($Se,"STRONG",{});var MFt=s(sve);tTr=r(MFt,"mobilebert"),MFt.forEach(t),aTr=r($Se," \u2014 "),CH=n($Se,"A",{href:!0});var EFt=s(CH);nTr=r(EFt,"TFMobileBertForTokenClassification"),EFt.forEach(t),sTr=r($Se," (MobileBERT model)"),$Se.forEach(t),lTr=i(me),o4=n(me,"LI",{});var kSe=s(o4);lve=n(kSe,"STRONG",{});var CFt=s(lve);iTr=r(CFt,"mpnet"),CFt.forEach(t),dTr=r(kSe," \u2014 "),wH=n(kSe,"A",{href:!0});var wFt=s(wH);cTr=r(wFt,"TFMPNetForTokenClassification"),wFt.forEach(t),fTr=r(kSe," (MPNet model)"),kSe.forEach(t),mTr=i(me),r4=n(me,"LI",{});var SSe=s(r4);ive=n(SSe,"STRONG",{});var AFt=s(ive);gTr=r(AFt,"rembert"),AFt.forEach(t),hTr=r(SSe," \u2014 "),AH=n(SSe,"A",{href:!0});var yFt=s(AH);pTr=r(yFt,"TFRemBertForTokenClassification"),yFt.forEach(t),uTr=r(SSe," (RemBERT model)"),SSe.forEach(t),_Tr=i(me),t4=n(me,"LI",{});var RSe=s(t4);dve=n(RSe,"STRONG",{});var LFt=s(dve);bTr=r(LFt,"roberta"),LFt.forEach(t),vTr=r(RSe," \u2014 "),yH=n(RSe,"A",{href:!0});var xFt=s(yH);FTr=r(xFt,"TFRobertaForTokenClassification"),xFt.forEach(t),TTr=r(RSe," (RoBERTa model)"),RSe.forEach(t),MTr=i(me),a4=n(me,"LI",{});var BSe=s(a4);cve=n(BSe,"STRONG",{});var $Ft=s(cve);ETr=r($Ft,"roformer"),$Ft.forEach(t),CTr=r(BSe," \u2014 "),LH=n(BSe,"A",{href:!0});var kFt=s(LH);wTr=r(kFt,"TFRoFormerForTokenClassification"),kFt.forEach(t),ATr=r(BSe," (RoFormer model)"),BSe.forEach(t),yTr=i(me),n4=n(me,"LI",{});var PSe=s(n4);fve=n(PSe,"STRONG",{});var SFt=s(fve);LTr=r(SFt,"xlm"),SFt.forEach(t),xTr=r(PSe," \u2014 "),xH=n(PSe,"A",{href:!0});var RFt=s(xH);$Tr=r(RFt,"TFXLMForTokenClassification"),RFt.forEach(t),kTr=r(PSe," (XLM model)"),PSe.forEach(t),STr=i(me),s4=n(me,"LI",{});var ISe=s(s4);mve=n(ISe,"STRONG",{});var BFt=s(mve);RTr=r(BFt,"xlm-roberta"),BFt.forEach(t),BTr=r(ISe," \u2014 "),$H=n(ISe,"A",{href:!0});var PFt=s($H);PTr=r(PFt,"TFXLMRobertaForTokenClassification"),PFt.forEach(t),ITr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),qTr=i(me),l4=n(me,"LI",{});var qSe=s(l4);gve=n(qSe,"STRONG",{});var IFt=s(gve);NTr=r(IFt,"xlnet"),IFt.forEach(t),jTr=r(qSe," \u2014 "),kH=n(qSe,"A",{href:!0});var qFt=s(kH);DTr=r(qFt,"TFXLNetForTokenClassification"),qFt.forEach(t),GTr=r(qSe," (XLNet model)"),qSe.forEach(t),me.forEach(t),OTr=i($l),T(i4.$$.fragment,$l),$l.forEach(t),xl.forEach(t),$Ie=i(f),_c=n(f,"H2",{class:!0});var qNe=s(_c);d4=n(qNe,"A",{id:!0,class:!0,href:!0});var NFt=s(d4);hve=n(NFt,"SPAN",{});var jFt=s(hve);T(C8.$$.fragment,jFt),jFt.forEach(t),NFt.forEach(t),VTr=i(qNe),pve=n(qNe,"SPAN",{});var DFt=s(pve);XTr=r(DFt,"TFAutoModelForQuestionAnswering"),DFt.forEach(t),qNe.forEach(t),kIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(w8.$$.fragment,kl),zTr=i(kl),bc=n(kl,"P",{});var nZ=s(bc);QTr=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SH=n(nZ,"A",{href:!0});var GFt=s(SH);WTr=r(GFt,"from_pretrained()"),GFt.forEach(t),HTr=r(nZ," class method or the "),RH=n(nZ,"A",{href:!0});var OFt=s(RH);UTr=r(OFt,"from_config()"),OFt.forEach(t),JTr=r(nZ,` class
method.`),nZ.forEach(t),YTr=i(kl),A8=n(kl,"P",{});var NNe=s(A8);KTr=r(NNe,"This class cannot be instantiated directly using "),uve=n(NNe,"CODE",{});var VFt=s(uve);ZTr=r(VFt,"__init__()"),VFt.forEach(t),e9r=r(NNe," (throws an error)."),NNe.forEach(t),o9r=i(kl),It=n(kl,"DIV",{class:!0});var lA=s(It);T(y8.$$.fragment,lA),r9r=i(lA),_ve=n(lA,"P",{});var XFt=s(_ve);t9r=r(XFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XFt.forEach(t),a9r=i(lA),vc=n(lA,"P",{});var sZ=s(vc);n9r=r(sZ,`Note:
Loading a model from its configuration file does `),bve=n(sZ,"STRONG",{});var zFt=s(bve);s9r=r(zFt,"not"),zFt.forEach(t),l9r=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),BH=n(sZ,"A",{href:!0});var QFt=s(BH);i9r=r(QFt,"from_pretrained()"),QFt.forEach(t),d9r=r(sZ," to load the model weights."),sZ.forEach(t),c9r=i(lA),T(c4.$$.fragment,lA),lA.forEach(t),f9r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(L8.$$.fragment,Sl),m9r=i(Sl),vve=n(Sl,"P",{});var WFt=s(vve);g9r=r(WFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WFt.forEach(t),h9r=i(Sl),cn=n(Sl,"P",{});var iA=s(cn);p9r=r(iA,"The model class to instantiate is selected based on the "),Fve=n(iA,"CODE",{});var HFt=s(Fve);u9r=r(HFt,"model_type"),HFt.forEach(t),_9r=r(iA,` property of the config object (either
passed as an argument or loaded from `),Tve=n(iA,"CODE",{});var UFt=s(Tve);b9r=r(UFt,"pretrained_model_name_or_path"),UFt.forEach(t),v9r=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(iA,"CODE",{});var JFt=s(Mve);F9r=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),T9r=r(iA,":"),iA.forEach(t),M9r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);f4=n(ge,"LI",{});var NSe=s(f4);Eve=n(NSe,"STRONG",{});var YFt=s(Eve);E9r=r(YFt,"albert"),YFt.forEach(t),C9r=r(NSe," \u2014 "),PH=n(NSe,"A",{href:!0});var KFt=s(PH);w9r=r(KFt,"TFAlbertForQuestionAnswering"),KFt.forEach(t),A9r=r(NSe," (ALBERT model)"),NSe.forEach(t),y9r=i(ge),m4=n(ge,"LI",{});var jSe=s(m4);Cve=n(jSe,"STRONG",{});var ZFt=s(Cve);L9r=r(ZFt,"bert"),ZFt.forEach(t),x9r=r(jSe," \u2014 "),IH=n(jSe,"A",{href:!0});var e6t=s(IH);$9r=r(e6t,"TFBertForQuestionAnswering"),e6t.forEach(t),k9r=r(jSe," (BERT model)"),jSe.forEach(t),S9r=i(ge),g4=n(ge,"LI",{});var DSe=s(g4);wve=n(DSe,"STRONG",{});var o6t=s(wve);R9r=r(o6t,"camembert"),o6t.forEach(t),B9r=r(DSe," \u2014 "),qH=n(DSe,"A",{href:!0});var r6t=s(qH);P9r=r(r6t,"TFCamembertForQuestionAnswering"),r6t.forEach(t),I9r=r(DSe," (CamemBERT model)"),DSe.forEach(t),q9r=i(ge),h4=n(ge,"LI",{});var GSe=s(h4);Ave=n(GSe,"STRONG",{});var t6t=s(Ave);N9r=r(t6t,"convbert"),t6t.forEach(t),j9r=r(GSe," \u2014 "),NH=n(GSe,"A",{href:!0});var a6t=s(NH);D9r=r(a6t,"TFConvBertForQuestionAnswering"),a6t.forEach(t),G9r=r(GSe," (ConvBERT model)"),GSe.forEach(t),O9r=i(ge),p4=n(ge,"LI",{});var OSe=s(p4);yve=n(OSe,"STRONG",{});var n6t=s(yve);V9r=r(n6t,"deberta"),n6t.forEach(t),X9r=r(OSe," \u2014 "),jH=n(OSe,"A",{href:!0});var s6t=s(jH);z9r=r(s6t,"TFDebertaForQuestionAnswering"),s6t.forEach(t),Q9r=r(OSe," (DeBERTa model)"),OSe.forEach(t),W9r=i(ge),u4=n(ge,"LI",{});var VSe=s(u4);Lve=n(VSe,"STRONG",{});var l6t=s(Lve);H9r=r(l6t,"deberta-v2"),l6t.forEach(t),U9r=r(VSe," \u2014 "),DH=n(VSe,"A",{href:!0});var i6t=s(DH);J9r=r(i6t,"TFDebertaV2ForQuestionAnswering"),i6t.forEach(t),Y9r=r(VSe," (DeBERTa-v2 model)"),VSe.forEach(t),K9r=i(ge),_4=n(ge,"LI",{});var XSe=s(_4);xve=n(XSe,"STRONG",{});var d6t=s(xve);Z9r=r(d6t,"distilbert"),d6t.forEach(t),eMr=r(XSe," \u2014 "),GH=n(XSe,"A",{href:!0});var c6t=s(GH);oMr=r(c6t,"TFDistilBertForQuestionAnswering"),c6t.forEach(t),rMr=r(XSe," (DistilBERT model)"),XSe.forEach(t),tMr=i(ge),b4=n(ge,"LI",{});var zSe=s(b4);$ve=n(zSe,"STRONG",{});var f6t=s($ve);aMr=r(f6t,"electra"),f6t.forEach(t),nMr=r(zSe," \u2014 "),OH=n(zSe,"A",{href:!0});var m6t=s(OH);sMr=r(m6t,"TFElectraForQuestionAnswering"),m6t.forEach(t),lMr=r(zSe," (ELECTRA model)"),zSe.forEach(t),iMr=i(ge),v4=n(ge,"LI",{});var QSe=s(v4);kve=n(QSe,"STRONG",{});var g6t=s(kve);dMr=r(g6t,"flaubert"),g6t.forEach(t),cMr=r(QSe," \u2014 "),VH=n(QSe,"A",{href:!0});var h6t=s(VH);fMr=r(h6t,"TFFlaubertForQuestionAnsweringSimple"),h6t.forEach(t),mMr=r(QSe," (FlauBERT model)"),QSe.forEach(t),gMr=i(ge),F4=n(ge,"LI",{});var WSe=s(F4);Sve=n(WSe,"STRONG",{});var p6t=s(Sve);hMr=r(p6t,"funnel"),p6t.forEach(t),pMr=r(WSe," \u2014 "),XH=n(WSe,"A",{href:!0});var u6t=s(XH);uMr=r(u6t,"TFFunnelForQuestionAnswering"),u6t.forEach(t),_Mr=r(WSe," (Funnel Transformer model)"),WSe.forEach(t),bMr=i(ge),T4=n(ge,"LI",{});var HSe=s(T4);Rve=n(HSe,"STRONG",{});var _6t=s(Rve);vMr=r(_6t,"gptj"),_6t.forEach(t),FMr=r(HSe," \u2014 "),zH=n(HSe,"A",{href:!0});var b6t=s(zH);TMr=r(b6t,"TFGPTJForQuestionAnswering"),b6t.forEach(t),MMr=r(HSe," (GPT-J model)"),HSe.forEach(t),EMr=i(ge),M4=n(ge,"LI",{});var USe=s(M4);Bve=n(USe,"STRONG",{});var v6t=s(Bve);CMr=r(v6t,"longformer"),v6t.forEach(t),wMr=r(USe," \u2014 "),QH=n(USe,"A",{href:!0});var F6t=s(QH);AMr=r(F6t,"TFLongformerForQuestionAnswering"),F6t.forEach(t),yMr=r(USe," (Longformer model)"),USe.forEach(t),LMr=i(ge),E4=n(ge,"LI",{});var JSe=s(E4);Pve=n(JSe,"STRONG",{});var T6t=s(Pve);xMr=r(T6t,"mobilebert"),T6t.forEach(t),$Mr=r(JSe," \u2014 "),WH=n(JSe,"A",{href:!0});var M6t=s(WH);kMr=r(M6t,"TFMobileBertForQuestionAnswering"),M6t.forEach(t),SMr=r(JSe," (MobileBERT model)"),JSe.forEach(t),RMr=i(ge),C4=n(ge,"LI",{});var YSe=s(C4);Ive=n(YSe,"STRONG",{});var E6t=s(Ive);BMr=r(E6t,"mpnet"),E6t.forEach(t),PMr=r(YSe," \u2014 "),HH=n(YSe,"A",{href:!0});var C6t=s(HH);IMr=r(C6t,"TFMPNetForQuestionAnswering"),C6t.forEach(t),qMr=r(YSe," (MPNet model)"),YSe.forEach(t),NMr=i(ge),w4=n(ge,"LI",{});var KSe=s(w4);qve=n(KSe,"STRONG",{});var w6t=s(qve);jMr=r(w6t,"rembert"),w6t.forEach(t),DMr=r(KSe," \u2014 "),UH=n(KSe,"A",{href:!0});var A6t=s(UH);GMr=r(A6t,"TFRemBertForQuestionAnswering"),A6t.forEach(t),OMr=r(KSe," (RemBERT model)"),KSe.forEach(t),VMr=i(ge),A4=n(ge,"LI",{});var ZSe=s(A4);Nve=n(ZSe,"STRONG",{});var y6t=s(Nve);XMr=r(y6t,"roberta"),y6t.forEach(t),zMr=r(ZSe," \u2014 "),JH=n(ZSe,"A",{href:!0});var L6t=s(JH);QMr=r(L6t,"TFRobertaForQuestionAnswering"),L6t.forEach(t),WMr=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),HMr=i(ge),y4=n(ge,"LI",{});var eRe=s(y4);jve=n(eRe,"STRONG",{});var x6t=s(jve);UMr=r(x6t,"roformer"),x6t.forEach(t),JMr=r(eRe," \u2014 "),YH=n(eRe,"A",{href:!0});var $6t=s(YH);YMr=r($6t,"TFRoFormerForQuestionAnswering"),$6t.forEach(t),KMr=r(eRe," (RoFormer model)"),eRe.forEach(t),ZMr=i(ge),L4=n(ge,"LI",{});var oRe=s(L4);Dve=n(oRe,"STRONG",{});var k6t=s(Dve);e4r=r(k6t,"xlm"),k6t.forEach(t),o4r=r(oRe," \u2014 "),KH=n(oRe,"A",{href:!0});var S6t=s(KH);r4r=r(S6t,"TFXLMForQuestionAnsweringSimple"),S6t.forEach(t),t4r=r(oRe," (XLM model)"),oRe.forEach(t),a4r=i(ge),x4=n(ge,"LI",{});var rRe=s(x4);Gve=n(rRe,"STRONG",{});var R6t=s(Gve);n4r=r(R6t,"xlm-roberta"),R6t.forEach(t),s4r=r(rRe," \u2014 "),ZH=n(rRe,"A",{href:!0});var B6t=s(ZH);l4r=r(B6t,"TFXLMRobertaForQuestionAnswering"),B6t.forEach(t),i4r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),d4r=i(ge),$4=n(ge,"LI",{});var tRe=s($4);Ove=n(tRe,"STRONG",{});var P6t=s(Ove);c4r=r(P6t,"xlnet"),P6t.forEach(t),f4r=r(tRe," \u2014 "),eU=n(tRe,"A",{href:!0});var I6t=s(eU);m4r=r(I6t,"TFXLNetForQuestionAnsweringSimple"),I6t.forEach(t),g4r=r(tRe," (XLNet model)"),tRe.forEach(t),ge.forEach(t),h4r=i(Sl),T(k4.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),SIe=i(f),Fc=n(f,"H2",{class:!0});var jNe=s(Fc);S4=n(jNe,"A",{id:!0,class:!0,href:!0});var q6t=s(S4);Vve=n(q6t,"SPAN",{});var N6t=s(Vve);T(x8.$$.fragment,N6t),N6t.forEach(t),q6t.forEach(t),p4r=i(jNe),Xve=n(jNe,"SPAN",{});var j6t=s(Xve);u4r=r(j6t,"TFAutoModelForVision2Seq"),j6t.forEach(t),jNe.forEach(t),RIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T($8.$$.fragment,Rl),_4r=i(Rl),Tc=n(Rl,"P",{});var lZ=s(Tc);b4r=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oU=n(lZ,"A",{href:!0});var D6t=s(oU);v4r=r(D6t,"from_pretrained()"),D6t.forEach(t),F4r=r(lZ," class method or the "),rU=n(lZ,"A",{href:!0});var G6t=s(rU);T4r=r(G6t,"from_config()"),G6t.forEach(t),M4r=r(lZ,` class
method.`),lZ.forEach(t),E4r=i(Rl),k8=n(Rl,"P",{});var DNe=s(k8);C4r=r(DNe,"This class cannot be instantiated directly using "),zve=n(DNe,"CODE",{});var O6t=s(zve);w4r=r(O6t,"__init__()"),O6t.forEach(t),A4r=r(DNe," (throws an error)."),DNe.forEach(t),y4r=i(Rl),qt=n(Rl,"DIV",{class:!0});var dA=s(qt);T(S8.$$.fragment,dA),L4r=i(dA),Qve=n(dA,"P",{});var V6t=s(Qve);x4r=r(V6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),V6t.forEach(t),$4r=i(dA),Mc=n(dA,"P",{});var iZ=s(Mc);k4r=r(iZ,`Note:
Loading a model from its configuration file does `),Wve=n(iZ,"STRONG",{});var X6t=s(Wve);S4r=r(X6t,"not"),X6t.forEach(t),R4r=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tU=n(iZ,"A",{href:!0});var z6t=s(tU);B4r=r(z6t,"from_pretrained()"),z6t.forEach(t),P4r=r(iZ," to load the model weights."),iZ.forEach(t),I4r=i(dA),T(R4.$$.fragment,dA),dA.forEach(t),q4r=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(R8.$$.fragment,Bl),N4r=i(Bl),Hve=n(Bl,"P",{});var Q6t=s(Hve);j4r=r(Q6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Q6t.forEach(t),D4r=i(Bl),fn=n(Bl,"P",{});var cA=s(fn);G4r=r(cA,"The model class to instantiate is selected based on the "),Uve=n(cA,"CODE",{});var W6t=s(Uve);O4r=r(W6t,"model_type"),W6t.forEach(t),V4r=r(cA,` property of the config object (either
passed as an argument or loaded from `),Jve=n(cA,"CODE",{});var H6t=s(Jve);X4r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),z4r=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yve=n(cA,"CODE",{});var U6t=s(Yve);Q4r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),W4r=r(cA,":"),cA.forEach(t),H4r=i(Bl),Kve=n(Bl,"UL",{});var J6t=s(Kve);B4=n(J6t,"LI",{});var aRe=s(B4);Zve=n(aRe,"STRONG",{});var Y6t=s(Zve);U4r=r(Y6t,"vision-encoder-decoder"),Y6t.forEach(t),J4r=r(aRe," \u2014 "),aU=n(aRe,"A",{href:!0});var K6t=s(aU);Y4r=r(K6t,"TFVisionEncoderDecoderModel"),K6t.forEach(t),K4r=r(aRe," (Vision Encoder decoder model)"),aRe.forEach(t),J6t.forEach(t),Z4r=i(Bl),T(P4.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),BIe=i(f),Ec=n(f,"H2",{class:!0});var GNe=s(Ec);I4=n(GNe,"A",{id:!0,class:!0,href:!0});var Z6t=s(I4);eFe=n(Z6t,"SPAN",{});var eTt=s(eFe);T(B8.$$.fragment,eTt),eTt.forEach(t),Z6t.forEach(t),eEr=i(GNe),oFe=n(GNe,"SPAN",{});var oTt=s(oFe);oEr=r(oTt,"TFAutoModelForSpeechSeq2Seq"),oTt.forEach(t),GNe.forEach(t),PIe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(P8.$$.fragment,Pl),rEr=i(Pl),Cc=n(Pl,"P",{});var dZ=s(Cc);tEr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),nU=n(dZ,"A",{href:!0});var rTt=s(nU);aEr=r(rTt,"from_pretrained()"),rTt.forEach(t),nEr=r(dZ," class method or the "),sU=n(dZ,"A",{href:!0});var tTt=s(sU);sEr=r(tTt,"from_config()"),tTt.forEach(t),lEr=r(dZ,` class
method.`),dZ.forEach(t),iEr=i(Pl),I8=n(Pl,"P",{});var ONe=s(I8);dEr=r(ONe,"This class cannot be instantiated directly using "),rFe=n(ONe,"CODE",{});var aTt=s(rFe);cEr=r(aTt,"__init__()"),aTt.forEach(t),fEr=r(ONe," (throws an error)."),ONe.forEach(t),mEr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var fA=s(Nt);T(q8.$$.fragment,fA),gEr=i(fA),tFe=n(fA,"P",{});var nTt=s(tFe);hEr=r(nTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nTt.forEach(t),pEr=i(fA),wc=n(fA,"P",{});var cZ=s(wc);uEr=r(cZ,`Note:
Loading a model from its configuration file does `),aFe=n(cZ,"STRONG",{});var sTt=s(aFe);_Er=r(sTt,"not"),sTt.forEach(t),bEr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(cZ,"A",{href:!0});var lTt=s(lU);vEr=r(lTt,"from_pretrained()"),lTt.forEach(t),FEr=r(cZ," to load the model weights."),cZ.forEach(t),TEr=i(fA),T(q4.$$.fragment,fA),fA.forEach(t),MEr=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(N8.$$.fragment,Il),EEr=i(Il),nFe=n(Il,"P",{});var iTt=s(nFe);CEr=r(iTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),iTt.forEach(t),wEr=i(Il),mn=n(Il,"P",{});var mA=s(mn);AEr=r(mA,"The model class to instantiate is selected based on the "),sFe=n(mA,"CODE",{});var dTt=s(sFe);yEr=r(dTt,"model_type"),dTt.forEach(t),LEr=r(mA,` property of the config object (either
passed as an argument or loaded from `),lFe=n(mA,"CODE",{});var cTt=s(lFe);xEr=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),$Er=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(mA,"CODE",{});var fTt=s(iFe);kEr=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),SEr=r(mA,":"),mA.forEach(t),REr=i(Il),dFe=n(Il,"UL",{});var mTt=s(dFe);N4=n(mTt,"LI",{});var nRe=s(N4);cFe=n(nRe,"STRONG",{});var gTt=s(cFe);BEr=r(gTt,"speech_to_text"),gTt.forEach(t),PEr=r(nRe," \u2014 "),iU=n(nRe,"A",{href:!0});var hTt=s(iU);IEr=r(hTt,"TFSpeech2TextForConditionalGeneration"),hTt.forEach(t),qEr=r(nRe," (Speech2Text model)"),nRe.forEach(t),mTt.forEach(t),NEr=i(Il),T(j4.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),IIe=i(f),Ac=n(f,"H2",{class:!0});var VNe=s(Ac);D4=n(VNe,"A",{id:!0,class:!0,href:!0});var pTt=s(D4);fFe=n(pTt,"SPAN",{});var uTt=s(fFe);T(j8.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),jEr=i(VNe),mFe=n(VNe,"SPAN",{});var _Tt=s(mFe);DEr=r(_Tt,"FlaxAutoModel"),_Tt.forEach(t),VNe.forEach(t),qIe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(D8.$$.fragment,ql),GEr=i(ql),yc=n(ql,"P",{});var fZ=s(yc);OEr=r(fZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),dU=n(fZ,"A",{href:!0});var bTt=s(dU);VEr=r(bTt,"from_pretrained()"),bTt.forEach(t),XEr=r(fZ," class method or the "),cU=n(fZ,"A",{href:!0});var vTt=s(cU);zEr=r(vTt,"from_config()"),vTt.forEach(t),QEr=r(fZ,` class
method.`),fZ.forEach(t),WEr=i(ql),G8=n(ql,"P",{});var XNe=s(G8);HEr=r(XNe,"This class cannot be instantiated directly using "),gFe=n(XNe,"CODE",{});var FTt=s(gFe);UEr=r(FTt,"__init__()"),FTt.forEach(t),JEr=r(XNe," (throws an error)."),XNe.forEach(t),YEr=i(ql),jt=n(ql,"DIV",{class:!0});var gA=s(jt);T(O8.$$.fragment,gA),KEr=i(gA),hFe=n(gA,"P",{});var TTt=s(hFe);ZEr=r(TTt,"Instantiates one of the base model classes of the library from a configuration."),TTt.forEach(t),eCr=i(gA),Lc=n(gA,"P",{});var mZ=s(Lc);oCr=r(mZ,`Note:
Loading a model from its configuration file does `),pFe=n(mZ,"STRONG",{});var MTt=s(pFe);rCr=r(MTt,"not"),MTt.forEach(t),tCr=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(mZ,"A",{href:!0});var ETt=s(fU);aCr=r(ETt,"from_pretrained()"),ETt.forEach(t),nCr=r(mZ," to load the model weights."),mZ.forEach(t),sCr=i(gA),T(G4.$$.fragment,gA),gA.forEach(t),lCr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(V8.$$.fragment,Nl),iCr=i(Nl),uFe=n(Nl,"P",{});var CTt=s(uFe);dCr=r(CTt,"Instantiate one of the base model classes of the library from a pretrained model."),CTt.forEach(t),cCr=i(Nl),gn=n(Nl,"P",{});var hA=s(gn);fCr=r(hA,"The model class to instantiate is selected based on the "),_Fe=n(hA,"CODE",{});var wTt=s(_Fe);mCr=r(wTt,"model_type"),wTt.forEach(t),gCr=r(hA,` property of the config object (either
passed as an argument or loaded from `),bFe=n(hA,"CODE",{});var ATt=s(bFe);hCr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),pCr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(hA,"CODE",{});var yTt=s(vFe);uCr=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),_Cr=r(hA,":"),hA.forEach(t),bCr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);O4=n(ae,"LI",{});var sRe=s(O4);FFe=n(sRe,"STRONG",{});var LTt=s(FFe);vCr=r(LTt,"albert"),LTt.forEach(t),FCr=r(sRe," \u2014 "),mU=n(sRe,"A",{href:!0});var xTt=s(mU);TCr=r(xTt,"FlaxAlbertModel"),xTt.forEach(t),MCr=r(sRe," (ALBERT model)"),sRe.forEach(t),ECr=i(ae),V4=n(ae,"LI",{});var lRe=s(V4);TFe=n(lRe,"STRONG",{});var $Tt=s(TFe);CCr=r($Tt,"bart"),$Tt.forEach(t),wCr=r(lRe," \u2014 "),gU=n(lRe,"A",{href:!0});var kTt=s(gU);ACr=r(kTt,"FlaxBartModel"),kTt.forEach(t),yCr=r(lRe," (BART model)"),lRe.forEach(t),LCr=i(ae),X4=n(ae,"LI",{});var iRe=s(X4);MFe=n(iRe,"STRONG",{});var STt=s(MFe);xCr=r(STt,"beit"),STt.forEach(t),$Cr=r(iRe," \u2014 "),hU=n(iRe,"A",{href:!0});var RTt=s(hU);kCr=r(RTt,"FlaxBeitModel"),RTt.forEach(t),SCr=r(iRe," (BEiT model)"),iRe.forEach(t),RCr=i(ae),z4=n(ae,"LI",{});var dRe=s(z4);EFe=n(dRe,"STRONG",{});var BTt=s(EFe);BCr=r(BTt,"bert"),BTt.forEach(t),PCr=r(dRe," \u2014 "),pU=n(dRe,"A",{href:!0});var PTt=s(pU);ICr=r(PTt,"FlaxBertModel"),PTt.forEach(t),qCr=r(dRe," (BERT model)"),dRe.forEach(t),NCr=i(ae),Q4=n(ae,"LI",{});var cRe=s(Q4);CFe=n(cRe,"STRONG",{});var ITt=s(CFe);jCr=r(ITt,"big_bird"),ITt.forEach(t),DCr=r(cRe," \u2014 "),uU=n(cRe,"A",{href:!0});var qTt=s(uU);GCr=r(qTt,"FlaxBigBirdModel"),qTt.forEach(t),OCr=r(cRe," (BigBird model)"),cRe.forEach(t),VCr=i(ae),W4=n(ae,"LI",{});var fRe=s(W4);wFe=n(fRe,"STRONG",{});var NTt=s(wFe);XCr=r(NTt,"blenderbot"),NTt.forEach(t),zCr=r(fRe," \u2014 "),_U=n(fRe,"A",{href:!0});var jTt=s(_U);QCr=r(jTt,"FlaxBlenderbotModel"),jTt.forEach(t),WCr=r(fRe," (Blenderbot model)"),fRe.forEach(t),HCr=i(ae),H4=n(ae,"LI",{});var mRe=s(H4);AFe=n(mRe,"STRONG",{});var DTt=s(AFe);UCr=r(DTt,"blenderbot-small"),DTt.forEach(t),JCr=r(mRe," \u2014 "),bU=n(mRe,"A",{href:!0});var GTt=s(bU);YCr=r(GTt,"FlaxBlenderbotSmallModel"),GTt.forEach(t),KCr=r(mRe," (BlenderbotSmall model)"),mRe.forEach(t),ZCr=i(ae),U4=n(ae,"LI",{});var gRe=s(U4);yFe=n(gRe,"STRONG",{});var OTt=s(yFe);e3r=r(OTt,"clip"),OTt.forEach(t),o3r=r(gRe," \u2014 "),vU=n(gRe,"A",{href:!0});var VTt=s(vU);r3r=r(VTt,"FlaxCLIPModel"),VTt.forEach(t),t3r=r(gRe," (CLIP model)"),gRe.forEach(t),a3r=i(ae),J4=n(ae,"LI",{});var hRe=s(J4);LFe=n(hRe,"STRONG",{});var XTt=s(LFe);n3r=r(XTt,"distilbert"),XTt.forEach(t),s3r=r(hRe," \u2014 "),FU=n(hRe,"A",{href:!0});var zTt=s(FU);l3r=r(zTt,"FlaxDistilBertModel"),zTt.forEach(t),i3r=r(hRe," (DistilBERT model)"),hRe.forEach(t),d3r=i(ae),Y4=n(ae,"LI",{});var pRe=s(Y4);xFe=n(pRe,"STRONG",{});var QTt=s(xFe);c3r=r(QTt,"electra"),QTt.forEach(t),f3r=r(pRe," \u2014 "),TU=n(pRe,"A",{href:!0});var WTt=s(TU);m3r=r(WTt,"FlaxElectraModel"),WTt.forEach(t),g3r=r(pRe," (ELECTRA model)"),pRe.forEach(t),h3r=i(ae),K4=n(ae,"LI",{});var uRe=s(K4);$Fe=n(uRe,"STRONG",{});var HTt=s($Fe);p3r=r(HTt,"gpt2"),HTt.forEach(t),u3r=r(uRe," \u2014 "),MU=n(uRe,"A",{href:!0});var UTt=s(MU);_3r=r(UTt,"FlaxGPT2Model"),UTt.forEach(t),b3r=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),v3r=i(ae),Z4=n(ae,"LI",{});var _Re=s(Z4);kFe=n(_Re,"STRONG",{});var JTt=s(kFe);F3r=r(JTt,"gpt_neo"),JTt.forEach(t),T3r=r(_Re," \u2014 "),EU=n(_Re,"A",{href:!0});var YTt=s(EU);M3r=r(YTt,"FlaxGPTNeoModel"),YTt.forEach(t),E3r=r(_Re," (GPT Neo model)"),_Re.forEach(t),C3r=i(ae),eE=n(ae,"LI",{});var bRe=s(eE);SFe=n(bRe,"STRONG",{});var KTt=s(SFe);w3r=r(KTt,"gptj"),KTt.forEach(t),A3r=r(bRe," \u2014 "),CU=n(bRe,"A",{href:!0});var ZTt=s(CU);y3r=r(ZTt,"FlaxGPTJModel"),ZTt.forEach(t),L3r=r(bRe," (GPT-J model)"),bRe.forEach(t),x3r=i(ae),oE=n(ae,"LI",{});var vRe=s(oE);RFe=n(vRe,"STRONG",{});var e9t=s(RFe);$3r=r(e9t,"marian"),e9t.forEach(t),k3r=r(vRe," \u2014 "),wU=n(vRe,"A",{href:!0});var o9t=s(wU);S3r=r(o9t,"FlaxMarianModel"),o9t.forEach(t),R3r=r(vRe," (Marian model)"),vRe.forEach(t),B3r=i(ae),rE=n(ae,"LI",{});var FRe=s(rE);BFe=n(FRe,"STRONG",{});var r9t=s(BFe);P3r=r(r9t,"mbart"),r9t.forEach(t),I3r=r(FRe," \u2014 "),AU=n(FRe,"A",{href:!0});var t9t=s(AU);q3r=r(t9t,"FlaxMBartModel"),t9t.forEach(t),N3r=r(FRe," (mBART model)"),FRe.forEach(t),j3r=i(ae),tE=n(ae,"LI",{});var TRe=s(tE);PFe=n(TRe,"STRONG",{});var a9t=s(PFe);D3r=r(a9t,"mt5"),a9t.forEach(t),G3r=r(TRe," \u2014 "),yU=n(TRe,"A",{href:!0});var n9t=s(yU);O3r=r(n9t,"FlaxMT5Model"),n9t.forEach(t),V3r=r(TRe," (mT5 model)"),TRe.forEach(t),X3r=i(ae),aE=n(ae,"LI",{});var MRe=s(aE);IFe=n(MRe,"STRONG",{});var s9t=s(IFe);z3r=r(s9t,"pegasus"),s9t.forEach(t),Q3r=r(MRe," \u2014 "),LU=n(MRe,"A",{href:!0});var l9t=s(LU);W3r=r(l9t,"FlaxPegasusModel"),l9t.forEach(t),H3r=r(MRe," (Pegasus model)"),MRe.forEach(t),U3r=i(ae),nE=n(ae,"LI",{});var ERe=s(nE);qFe=n(ERe,"STRONG",{});var i9t=s(qFe);J3r=r(i9t,"roberta"),i9t.forEach(t),Y3r=r(ERe," \u2014 "),xU=n(ERe,"A",{href:!0});var d9t=s(xU);K3r=r(d9t,"FlaxRobertaModel"),d9t.forEach(t),Z3r=r(ERe," (RoBERTa model)"),ERe.forEach(t),ewr=i(ae),sE=n(ae,"LI",{});var CRe=s(sE);NFe=n(CRe,"STRONG",{});var c9t=s(NFe);owr=r(c9t,"roformer"),c9t.forEach(t),rwr=r(CRe," \u2014 "),$U=n(CRe,"A",{href:!0});var f9t=s($U);twr=r(f9t,"FlaxRoFormerModel"),f9t.forEach(t),awr=r(CRe," (RoFormer model)"),CRe.forEach(t),nwr=i(ae),lE=n(ae,"LI",{});var wRe=s(lE);jFe=n(wRe,"STRONG",{});var m9t=s(jFe);swr=r(m9t,"t5"),m9t.forEach(t),lwr=r(wRe," \u2014 "),kU=n(wRe,"A",{href:!0});var g9t=s(kU);iwr=r(g9t,"FlaxT5Model"),g9t.forEach(t),dwr=r(wRe," (T5 model)"),wRe.forEach(t),cwr=i(ae),iE=n(ae,"LI",{});var ARe=s(iE);DFe=n(ARe,"STRONG",{});var h9t=s(DFe);fwr=r(h9t,"vision-text-dual-encoder"),h9t.forEach(t),mwr=r(ARe," \u2014 "),SU=n(ARe,"A",{href:!0});var p9t=s(SU);gwr=r(p9t,"FlaxVisionTextDualEncoderModel"),p9t.forEach(t),hwr=r(ARe," (VisionTextDualEncoder model)"),ARe.forEach(t),pwr=i(ae),dE=n(ae,"LI",{});var yRe=s(dE);GFe=n(yRe,"STRONG",{});var u9t=s(GFe);uwr=r(u9t,"vit"),u9t.forEach(t),_wr=r(yRe," \u2014 "),RU=n(yRe,"A",{href:!0});var _9t=s(RU);bwr=r(_9t,"FlaxViTModel"),_9t.forEach(t),vwr=r(yRe," (ViT model)"),yRe.forEach(t),Fwr=i(ae),cE=n(ae,"LI",{});var LRe=s(cE);OFe=n(LRe,"STRONG",{});var b9t=s(OFe);Twr=r(b9t,"wav2vec2"),b9t.forEach(t),Mwr=r(LRe," \u2014 "),BU=n(LRe,"A",{href:!0});var v9t=s(BU);Ewr=r(v9t,"FlaxWav2Vec2Model"),v9t.forEach(t),Cwr=r(LRe," (Wav2Vec2 model)"),LRe.forEach(t),wwr=i(ae),fE=n(ae,"LI",{});var xRe=s(fE);VFe=n(xRe,"STRONG",{});var F9t=s(VFe);Awr=r(F9t,"xglm"),F9t.forEach(t),ywr=r(xRe," \u2014 "),PU=n(xRe,"A",{href:!0});var T9t=s(PU);Lwr=r(T9t,"FlaxXGLMModel"),T9t.forEach(t),xwr=r(xRe," (XGLM model)"),xRe.forEach(t),$wr=i(ae),mE=n(ae,"LI",{});var $Re=s(mE);XFe=n($Re,"STRONG",{});var M9t=s(XFe);kwr=r(M9t,"xlm-roberta"),M9t.forEach(t),Swr=r($Re," \u2014 "),IU=n($Re,"A",{href:!0});var E9t=s(IU);Rwr=r(E9t,"FlaxXLMRobertaModel"),E9t.forEach(t),Bwr=r($Re," (XLM-RoBERTa model)"),$Re.forEach(t),ae.forEach(t),Pwr=i(Nl),T(gE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),NIe=i(f),xc=n(f,"H2",{class:!0});var zNe=s(xc);hE=n(zNe,"A",{id:!0,class:!0,href:!0});var C9t=s(hE);zFe=n(C9t,"SPAN",{});var w9t=s(zFe);T(X8.$$.fragment,w9t),w9t.forEach(t),C9t.forEach(t),Iwr=i(zNe),QFe=n(zNe,"SPAN",{});var A9t=s(QFe);qwr=r(A9t,"FlaxAutoModelForCausalLM"),A9t.forEach(t),zNe.forEach(t),jIe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(z8.$$.fragment,jl),Nwr=i(jl),$c=n(jl,"P",{});var gZ=s($c);jwr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qU=n(gZ,"A",{href:!0});var y9t=s(qU);Dwr=r(y9t,"from_pretrained()"),y9t.forEach(t),Gwr=r(gZ," class method or the "),NU=n(gZ,"A",{href:!0});var L9t=s(NU);Owr=r(L9t,"from_config()"),L9t.forEach(t),Vwr=r(gZ,` class
method.`),gZ.forEach(t),Xwr=i(jl),Q8=n(jl,"P",{});var QNe=s(Q8);zwr=r(QNe,"This class cannot be instantiated directly using "),WFe=n(QNe,"CODE",{});var x9t=s(WFe);Qwr=r(x9t,"__init__()"),x9t.forEach(t),Wwr=r(QNe," (throws an error)."),QNe.forEach(t),Hwr=i(jl),Dt=n(jl,"DIV",{class:!0});var pA=s(Dt);T(W8.$$.fragment,pA),Uwr=i(pA),HFe=n(pA,"P",{});var $9t=s(HFe);Jwr=r($9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$9t.forEach(t),Ywr=i(pA),kc=n(pA,"P",{});var hZ=s(kc);Kwr=r(hZ,`Note:
Loading a model from its configuration file does `),UFe=n(hZ,"STRONG",{});var k9t=s(UFe);Zwr=r(k9t,"not"),k9t.forEach(t),eAr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(hZ,"A",{href:!0});var S9t=s(jU);oAr=r(S9t,"from_pretrained()"),S9t.forEach(t),rAr=r(hZ," to load the model weights."),hZ.forEach(t),tAr=i(pA),T(pE.$$.fragment,pA),pA.forEach(t),aAr=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(H8.$$.fragment,Dl),nAr=i(Dl),JFe=n(Dl,"P",{});var R9t=s(JFe);sAr=r(R9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R9t.forEach(t),lAr=i(Dl),hn=n(Dl,"P",{});var uA=s(hn);iAr=r(uA,"The model class to instantiate is selected based on the "),YFe=n(uA,"CODE",{});var B9t=s(YFe);dAr=r(B9t,"model_type"),B9t.forEach(t),cAr=r(uA,` property of the config object (either
passed as an argument or loaded from `),KFe=n(uA,"CODE",{});var P9t=s(KFe);fAr=r(P9t,"pretrained_model_name_or_path"),P9t.forEach(t),mAr=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(uA,"CODE",{});var I9t=s(ZFe);gAr=r(I9t,"pretrained_model_name_or_path"),I9t.forEach(t),hAr=r(uA,":"),uA.forEach(t),pAr=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);uE=n(Oe,"LI",{});var kRe=s(uE);e6e=n(kRe,"STRONG",{});var q9t=s(e6e);uAr=r(q9t,"bart"),q9t.forEach(t),_Ar=r(kRe," \u2014 "),DU=n(kRe,"A",{href:!0});var N9t=s(DU);bAr=r(N9t,"FlaxBartForCausalLM"),N9t.forEach(t),vAr=r(kRe," (BART model)"),kRe.forEach(t),FAr=i(Oe),_E=n(Oe,"LI",{});var SRe=s(_E);o6e=n(SRe,"STRONG",{});var j9t=s(o6e);TAr=r(j9t,"bert"),j9t.forEach(t),MAr=r(SRe," \u2014 "),GU=n(SRe,"A",{href:!0});var D9t=s(GU);EAr=r(D9t,"FlaxBertForCausalLM"),D9t.forEach(t),CAr=r(SRe," (BERT model)"),SRe.forEach(t),wAr=i(Oe),bE=n(Oe,"LI",{});var RRe=s(bE);r6e=n(RRe,"STRONG",{});var G9t=s(r6e);AAr=r(G9t,"big_bird"),G9t.forEach(t),yAr=r(RRe," \u2014 "),OU=n(RRe,"A",{href:!0});var O9t=s(OU);LAr=r(O9t,"FlaxBigBirdForCausalLM"),O9t.forEach(t),xAr=r(RRe," (BigBird model)"),RRe.forEach(t),$Ar=i(Oe),vE=n(Oe,"LI",{});var BRe=s(vE);t6e=n(BRe,"STRONG",{});var V9t=s(t6e);kAr=r(V9t,"electra"),V9t.forEach(t),SAr=r(BRe," \u2014 "),VU=n(BRe,"A",{href:!0});var X9t=s(VU);RAr=r(X9t,"FlaxElectraForCausalLM"),X9t.forEach(t),BAr=r(BRe," (ELECTRA model)"),BRe.forEach(t),PAr=i(Oe),FE=n(Oe,"LI",{});var PRe=s(FE);a6e=n(PRe,"STRONG",{});var z9t=s(a6e);IAr=r(z9t,"gpt2"),z9t.forEach(t),qAr=r(PRe," \u2014 "),XU=n(PRe,"A",{href:!0});var Q9t=s(XU);NAr=r(Q9t,"FlaxGPT2LMHeadModel"),Q9t.forEach(t),jAr=r(PRe," (OpenAI GPT-2 model)"),PRe.forEach(t),DAr=i(Oe),TE=n(Oe,"LI",{});var IRe=s(TE);n6e=n(IRe,"STRONG",{});var W9t=s(n6e);GAr=r(W9t,"gpt_neo"),W9t.forEach(t),OAr=r(IRe," \u2014 "),zU=n(IRe,"A",{href:!0});var H9t=s(zU);VAr=r(H9t,"FlaxGPTNeoForCausalLM"),H9t.forEach(t),XAr=r(IRe," (GPT Neo model)"),IRe.forEach(t),zAr=i(Oe),ME=n(Oe,"LI",{});var qRe=s(ME);s6e=n(qRe,"STRONG",{});var U9t=s(s6e);QAr=r(U9t,"gptj"),U9t.forEach(t),WAr=r(qRe," \u2014 "),QU=n(qRe,"A",{href:!0});var J9t=s(QU);HAr=r(J9t,"FlaxGPTJForCausalLM"),J9t.forEach(t),UAr=r(qRe," (GPT-J model)"),qRe.forEach(t),JAr=i(Oe),EE=n(Oe,"LI",{});var NRe=s(EE);l6e=n(NRe,"STRONG",{});var Y9t=s(l6e);YAr=r(Y9t,"roberta"),Y9t.forEach(t),KAr=r(NRe," \u2014 "),WU=n(NRe,"A",{href:!0});var K9t=s(WU);ZAr=r(K9t,"FlaxRobertaForCausalLM"),K9t.forEach(t),e0r=r(NRe," (RoBERTa model)"),NRe.forEach(t),o0r=i(Oe),CE=n(Oe,"LI",{});var jRe=s(CE);i6e=n(jRe,"STRONG",{});var Z9t=s(i6e);r0r=r(Z9t,"xglm"),Z9t.forEach(t),t0r=r(jRe," \u2014 "),HU=n(jRe,"A",{href:!0});var eMt=s(HU);a0r=r(eMt,"FlaxXGLMForCausalLM"),eMt.forEach(t),n0r=r(jRe," (XGLM model)"),jRe.forEach(t),Oe.forEach(t),s0r=i(Dl),T(wE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),DIe=i(f),Sc=n(f,"H2",{class:!0});var WNe=s(Sc);AE=n(WNe,"A",{id:!0,class:!0,href:!0});var oMt=s(AE);d6e=n(oMt,"SPAN",{});var rMt=s(d6e);T(U8.$$.fragment,rMt),rMt.forEach(t),oMt.forEach(t),l0r=i(WNe),c6e=n(WNe,"SPAN",{});var tMt=s(c6e);i0r=r(tMt,"FlaxAutoModelForPreTraining"),tMt.forEach(t),WNe.forEach(t),GIe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(J8.$$.fragment,Gl),d0r=i(Gl),Rc=n(Gl,"P",{});var pZ=s(Rc);c0r=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UU=n(pZ,"A",{href:!0});var aMt=s(UU);f0r=r(aMt,"from_pretrained()"),aMt.forEach(t),m0r=r(pZ," class method or the "),JU=n(pZ,"A",{href:!0});var nMt=s(JU);g0r=r(nMt,"from_config()"),nMt.forEach(t),h0r=r(pZ,` class
method.`),pZ.forEach(t),p0r=i(Gl),Y8=n(Gl,"P",{});var HNe=s(Y8);u0r=r(HNe,"This class cannot be instantiated directly using "),f6e=n(HNe,"CODE",{});var sMt=s(f6e);_0r=r(sMt,"__init__()"),sMt.forEach(t),b0r=r(HNe," (throws an error)."),HNe.forEach(t),v0r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var _A=s(Gt);T(K8.$$.fragment,_A),F0r=i(_A),m6e=n(_A,"P",{});var lMt=s(m6e);T0r=r(lMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lMt.forEach(t),M0r=i(_A),Bc=n(_A,"P",{});var uZ=s(Bc);E0r=r(uZ,`Note:
Loading a model from its configuration file does `),g6e=n(uZ,"STRONG",{});var iMt=s(g6e);C0r=r(iMt,"not"),iMt.forEach(t),w0r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(uZ,"A",{href:!0});var dMt=s(YU);A0r=r(dMt,"from_pretrained()"),dMt.forEach(t),y0r=r(uZ," to load the model weights."),uZ.forEach(t),L0r=i(_A),T(yE.$$.fragment,_A),_A.forEach(t),x0r=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(Z8.$$.fragment,Ol),$0r=i(Ol),h6e=n(Ol,"P",{});var cMt=s(h6e);k0r=r(cMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cMt.forEach(t),S0r=i(Ol),pn=n(Ol,"P",{});var bA=s(pn);R0r=r(bA,"The model class to instantiate is selected based on the "),p6e=n(bA,"CODE",{});var fMt=s(p6e);B0r=r(fMt,"model_type"),fMt.forEach(t),P0r=r(bA,` property of the config object (either
passed as an argument or loaded from `),u6e=n(bA,"CODE",{});var mMt=s(u6e);I0r=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),q0r=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_6e=n(bA,"CODE",{});var gMt=s(_6e);N0r=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),j0r=r(bA,":"),bA.forEach(t),D0r=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);LE=n(we,"LI",{});var DRe=s(LE);b6e=n(DRe,"STRONG",{});var hMt=s(b6e);G0r=r(hMt,"albert"),hMt.forEach(t),O0r=r(DRe," \u2014 "),KU=n(DRe,"A",{href:!0});var pMt=s(KU);V0r=r(pMt,"FlaxAlbertForPreTraining"),pMt.forEach(t),X0r=r(DRe," (ALBERT model)"),DRe.forEach(t),z0r=i(we),xE=n(we,"LI",{});var GRe=s(xE);v6e=n(GRe,"STRONG",{});var uMt=s(v6e);Q0r=r(uMt,"bart"),uMt.forEach(t),W0r=r(GRe," \u2014 "),ZU=n(GRe,"A",{href:!0});var _Mt=s(ZU);H0r=r(_Mt,"FlaxBartForConditionalGeneration"),_Mt.forEach(t),U0r=r(GRe," (BART model)"),GRe.forEach(t),J0r=i(we),$E=n(we,"LI",{});var ORe=s($E);F6e=n(ORe,"STRONG",{});var bMt=s(F6e);Y0r=r(bMt,"bert"),bMt.forEach(t),K0r=r(ORe," \u2014 "),eJ=n(ORe,"A",{href:!0});var vMt=s(eJ);Z0r=r(vMt,"FlaxBertForPreTraining"),vMt.forEach(t),eyr=r(ORe," (BERT model)"),ORe.forEach(t),oyr=i(we),kE=n(we,"LI",{});var VRe=s(kE);T6e=n(VRe,"STRONG",{});var FMt=s(T6e);ryr=r(FMt,"big_bird"),FMt.forEach(t),tyr=r(VRe," \u2014 "),oJ=n(VRe,"A",{href:!0});var TMt=s(oJ);ayr=r(TMt,"FlaxBigBirdForPreTraining"),TMt.forEach(t),nyr=r(VRe," (BigBird model)"),VRe.forEach(t),syr=i(we),SE=n(we,"LI",{});var XRe=s(SE);M6e=n(XRe,"STRONG",{});var MMt=s(M6e);lyr=r(MMt,"electra"),MMt.forEach(t),iyr=r(XRe," \u2014 "),rJ=n(XRe,"A",{href:!0});var EMt=s(rJ);dyr=r(EMt,"FlaxElectraForPreTraining"),EMt.forEach(t),cyr=r(XRe," (ELECTRA model)"),XRe.forEach(t),fyr=i(we),RE=n(we,"LI",{});var zRe=s(RE);E6e=n(zRe,"STRONG",{});var CMt=s(E6e);myr=r(CMt,"mbart"),CMt.forEach(t),gyr=r(zRe," \u2014 "),tJ=n(zRe,"A",{href:!0});var wMt=s(tJ);hyr=r(wMt,"FlaxMBartForConditionalGeneration"),wMt.forEach(t),pyr=r(zRe," (mBART model)"),zRe.forEach(t),uyr=i(we),BE=n(we,"LI",{});var QRe=s(BE);C6e=n(QRe,"STRONG",{});var AMt=s(C6e);_yr=r(AMt,"mt5"),AMt.forEach(t),byr=r(QRe," \u2014 "),aJ=n(QRe,"A",{href:!0});var yMt=s(aJ);vyr=r(yMt,"FlaxMT5ForConditionalGeneration"),yMt.forEach(t),Fyr=r(QRe," (mT5 model)"),QRe.forEach(t),Tyr=i(we),PE=n(we,"LI",{});var WRe=s(PE);w6e=n(WRe,"STRONG",{});var LMt=s(w6e);Myr=r(LMt,"roberta"),LMt.forEach(t),Eyr=r(WRe," \u2014 "),nJ=n(WRe,"A",{href:!0});var xMt=s(nJ);Cyr=r(xMt,"FlaxRobertaForMaskedLM"),xMt.forEach(t),wyr=r(WRe," (RoBERTa model)"),WRe.forEach(t),Ayr=i(we),IE=n(we,"LI",{});var HRe=s(IE);A6e=n(HRe,"STRONG",{});var $Mt=s(A6e);yyr=r($Mt,"roformer"),$Mt.forEach(t),Lyr=r(HRe," \u2014 "),sJ=n(HRe,"A",{href:!0});var kMt=s(sJ);xyr=r(kMt,"FlaxRoFormerForMaskedLM"),kMt.forEach(t),$yr=r(HRe," (RoFormer model)"),HRe.forEach(t),kyr=i(we),qE=n(we,"LI",{});var URe=s(qE);y6e=n(URe,"STRONG",{});var SMt=s(y6e);Syr=r(SMt,"t5"),SMt.forEach(t),Ryr=r(URe," \u2014 "),lJ=n(URe,"A",{href:!0});var RMt=s(lJ);Byr=r(RMt,"FlaxT5ForConditionalGeneration"),RMt.forEach(t),Pyr=r(URe," (T5 model)"),URe.forEach(t),Iyr=i(we),NE=n(we,"LI",{});var JRe=s(NE);L6e=n(JRe,"STRONG",{});var BMt=s(L6e);qyr=r(BMt,"wav2vec2"),BMt.forEach(t),Nyr=r(JRe," \u2014 "),iJ=n(JRe,"A",{href:!0});var PMt=s(iJ);jyr=r(PMt,"FlaxWav2Vec2ForPreTraining"),PMt.forEach(t),Dyr=r(JRe," (Wav2Vec2 model)"),JRe.forEach(t),Gyr=i(we),jE=n(we,"LI",{});var YRe=s(jE);x6e=n(YRe,"STRONG",{});var IMt=s(x6e);Oyr=r(IMt,"xlm-roberta"),IMt.forEach(t),Vyr=r(YRe," \u2014 "),dJ=n(YRe,"A",{href:!0});var qMt=s(dJ);Xyr=r(qMt,"FlaxXLMRobertaForMaskedLM"),qMt.forEach(t),zyr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),we.forEach(t),Qyr=i(Ol),T(DE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),OIe=i(f),Pc=n(f,"H2",{class:!0});var UNe=s(Pc);GE=n(UNe,"A",{id:!0,class:!0,href:!0});var NMt=s(GE);$6e=n(NMt,"SPAN",{});var jMt=s($6e);T(ex.$$.fragment,jMt),jMt.forEach(t),NMt.forEach(t),Wyr=i(UNe),k6e=n(UNe,"SPAN",{});var DMt=s(k6e);Hyr=r(DMt,"FlaxAutoModelForMaskedLM"),DMt.forEach(t),UNe.forEach(t),VIe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(ox.$$.fragment,Vl),Uyr=i(Vl),Ic=n(Vl,"P",{});var _Z=s(Ic);Jyr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cJ=n(_Z,"A",{href:!0});var GMt=s(cJ);Yyr=r(GMt,"from_pretrained()"),GMt.forEach(t),Kyr=r(_Z," class method or the "),fJ=n(_Z,"A",{href:!0});var OMt=s(fJ);Zyr=r(OMt,"from_config()"),OMt.forEach(t),eLr=r(_Z,` class
method.`),_Z.forEach(t),oLr=i(Vl),rx=n(Vl,"P",{});var JNe=s(rx);rLr=r(JNe,"This class cannot be instantiated directly using "),S6e=n(JNe,"CODE",{});var VMt=s(S6e);tLr=r(VMt,"__init__()"),VMt.forEach(t),aLr=r(JNe," (throws an error)."),JNe.forEach(t),nLr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var vA=s(Ot);T(tx.$$.fragment,vA),sLr=i(vA),R6e=n(vA,"P",{});var XMt=s(R6e);lLr=r(XMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XMt.forEach(t),iLr=i(vA),qc=n(vA,"P",{});var bZ=s(qc);dLr=r(bZ,`Note:
Loading a model from its configuration file does `),B6e=n(bZ,"STRONG",{});var zMt=s(B6e);cLr=r(zMt,"not"),zMt.forEach(t),fLr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(bZ,"A",{href:!0});var QMt=s(mJ);mLr=r(QMt,"from_pretrained()"),QMt.forEach(t),gLr=r(bZ," to load the model weights."),bZ.forEach(t),hLr=i(vA),T(OE.$$.fragment,vA),vA.forEach(t),pLr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(ax.$$.fragment,Xl),uLr=i(Xl),P6e=n(Xl,"P",{});var WMt=s(P6e);_Lr=r(WMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),WMt.forEach(t),bLr=i(Xl),un=n(Xl,"P",{});var FA=s(un);vLr=r(FA,"The model class to instantiate is selected based on the "),I6e=n(FA,"CODE",{});var HMt=s(I6e);FLr=r(HMt,"model_type"),HMt.forEach(t),TLr=r(FA,` property of the config object (either
passed as an argument or loaded from `),q6e=n(FA,"CODE",{});var UMt=s(q6e);MLr=r(UMt,"pretrained_model_name_or_path"),UMt.forEach(t),ELr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(FA,"CODE",{});var JMt=s(N6e);CLr=r(JMt,"pretrained_model_name_or_path"),JMt.forEach(t),wLr=r(FA,":"),FA.forEach(t),ALr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);VE=n(Be,"LI",{});var KRe=s(VE);j6e=n(KRe,"STRONG",{});var YMt=s(j6e);yLr=r(YMt,"albert"),YMt.forEach(t),LLr=r(KRe," \u2014 "),gJ=n(KRe,"A",{href:!0});var KMt=s(gJ);xLr=r(KMt,"FlaxAlbertForMaskedLM"),KMt.forEach(t),$Lr=r(KRe," (ALBERT model)"),KRe.forEach(t),kLr=i(Be),XE=n(Be,"LI",{});var ZRe=s(XE);D6e=n(ZRe,"STRONG",{});var ZMt=s(D6e);SLr=r(ZMt,"bart"),ZMt.forEach(t),RLr=r(ZRe," \u2014 "),hJ=n(ZRe,"A",{href:!0});var e4t=s(hJ);BLr=r(e4t,"FlaxBartForConditionalGeneration"),e4t.forEach(t),PLr=r(ZRe," (BART model)"),ZRe.forEach(t),ILr=i(Be),zE=n(Be,"LI",{});var eBe=s(zE);G6e=n(eBe,"STRONG",{});var o4t=s(G6e);qLr=r(o4t,"bert"),o4t.forEach(t),NLr=r(eBe," \u2014 "),pJ=n(eBe,"A",{href:!0});var r4t=s(pJ);jLr=r(r4t,"FlaxBertForMaskedLM"),r4t.forEach(t),DLr=r(eBe," (BERT model)"),eBe.forEach(t),GLr=i(Be),QE=n(Be,"LI",{});var oBe=s(QE);O6e=n(oBe,"STRONG",{});var t4t=s(O6e);OLr=r(t4t,"big_bird"),t4t.forEach(t),VLr=r(oBe," \u2014 "),uJ=n(oBe,"A",{href:!0});var a4t=s(uJ);XLr=r(a4t,"FlaxBigBirdForMaskedLM"),a4t.forEach(t),zLr=r(oBe," (BigBird model)"),oBe.forEach(t),QLr=i(Be),WE=n(Be,"LI",{});var rBe=s(WE);V6e=n(rBe,"STRONG",{});var n4t=s(V6e);WLr=r(n4t,"distilbert"),n4t.forEach(t),HLr=r(rBe," \u2014 "),_J=n(rBe,"A",{href:!0});var s4t=s(_J);ULr=r(s4t,"FlaxDistilBertForMaskedLM"),s4t.forEach(t),JLr=r(rBe," (DistilBERT model)"),rBe.forEach(t),YLr=i(Be),HE=n(Be,"LI",{});var tBe=s(HE);X6e=n(tBe,"STRONG",{});var l4t=s(X6e);KLr=r(l4t,"electra"),l4t.forEach(t),ZLr=r(tBe," \u2014 "),bJ=n(tBe,"A",{href:!0});var i4t=s(bJ);e8r=r(i4t,"FlaxElectraForMaskedLM"),i4t.forEach(t),o8r=r(tBe," (ELECTRA model)"),tBe.forEach(t),r8r=i(Be),UE=n(Be,"LI",{});var aBe=s(UE);z6e=n(aBe,"STRONG",{});var d4t=s(z6e);t8r=r(d4t,"mbart"),d4t.forEach(t),a8r=r(aBe," \u2014 "),vJ=n(aBe,"A",{href:!0});var c4t=s(vJ);n8r=r(c4t,"FlaxMBartForConditionalGeneration"),c4t.forEach(t),s8r=r(aBe," (mBART model)"),aBe.forEach(t),l8r=i(Be),JE=n(Be,"LI",{});var nBe=s(JE);Q6e=n(nBe,"STRONG",{});var f4t=s(Q6e);i8r=r(f4t,"roberta"),f4t.forEach(t),d8r=r(nBe," \u2014 "),FJ=n(nBe,"A",{href:!0});var m4t=s(FJ);c8r=r(m4t,"FlaxRobertaForMaskedLM"),m4t.forEach(t),f8r=r(nBe," (RoBERTa model)"),nBe.forEach(t),m8r=i(Be),YE=n(Be,"LI",{});var sBe=s(YE);W6e=n(sBe,"STRONG",{});var g4t=s(W6e);g8r=r(g4t,"roformer"),g4t.forEach(t),h8r=r(sBe," \u2014 "),TJ=n(sBe,"A",{href:!0});var h4t=s(TJ);p8r=r(h4t,"FlaxRoFormerForMaskedLM"),h4t.forEach(t),u8r=r(sBe," (RoFormer model)"),sBe.forEach(t),_8r=i(Be),KE=n(Be,"LI",{});var lBe=s(KE);H6e=n(lBe,"STRONG",{});var p4t=s(H6e);b8r=r(p4t,"xlm-roberta"),p4t.forEach(t),v8r=r(lBe," \u2014 "),MJ=n(lBe,"A",{href:!0});var u4t=s(MJ);F8r=r(u4t,"FlaxXLMRobertaForMaskedLM"),u4t.forEach(t),T8r=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),Be.forEach(t),M8r=i(Xl),T(ZE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),XIe=i(f),Nc=n(f,"H2",{class:!0});var YNe=s(Nc);eC=n(YNe,"A",{id:!0,class:!0,href:!0});var _4t=s(eC);U6e=n(_4t,"SPAN",{});var b4t=s(U6e);T(nx.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),E8r=i(YNe),J6e=n(YNe,"SPAN",{});var v4t=s(J6e);C8r=r(v4t,"FlaxAutoModelForSeq2SeqLM"),v4t.forEach(t),YNe.forEach(t),zIe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(sx.$$.fragment,zl),w8r=i(zl),jc=n(zl,"P",{});var vZ=s(jc);A8r=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EJ=n(vZ,"A",{href:!0});var F4t=s(EJ);y8r=r(F4t,"from_pretrained()"),F4t.forEach(t),L8r=r(vZ," class method or the "),CJ=n(vZ,"A",{href:!0});var T4t=s(CJ);x8r=r(T4t,"from_config()"),T4t.forEach(t),$8r=r(vZ,` class
method.`),vZ.forEach(t),k8r=i(zl),lx=n(zl,"P",{});var KNe=s(lx);S8r=r(KNe,"This class cannot be instantiated directly using "),Y6e=n(KNe,"CODE",{});var M4t=s(Y6e);R8r=r(M4t,"__init__()"),M4t.forEach(t),B8r=r(KNe," (throws an error)."),KNe.forEach(t),P8r=i(zl),Vt=n(zl,"DIV",{class:!0});var TA=s(Vt);T(ix.$$.fragment,TA),I8r=i(TA),K6e=n(TA,"P",{});var E4t=s(K6e);q8r=r(E4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),E4t.forEach(t),N8r=i(TA),Dc=n(TA,"P",{});var FZ=s(Dc);j8r=r(FZ,`Note:
Loading a model from its configuration file does `),Z6e=n(FZ,"STRONG",{});var C4t=s(Z6e);D8r=r(C4t,"not"),C4t.forEach(t),G8r=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(FZ,"A",{href:!0});var w4t=s(wJ);O8r=r(w4t,"from_pretrained()"),w4t.forEach(t),V8r=r(FZ," to load the model weights."),FZ.forEach(t),X8r=i(TA),T(oC.$$.fragment,TA),TA.forEach(t),z8r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(dx.$$.fragment,Ql),Q8r=i(Ql),eTe=n(Ql,"P",{});var A4t=s(eTe);W8r=r(A4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A4t.forEach(t),H8r=i(Ql),_n=n(Ql,"P",{});var MA=s(_n);U8r=r(MA,"The model class to instantiate is selected based on the "),oTe=n(MA,"CODE",{});var y4t=s(oTe);J8r=r(y4t,"model_type"),y4t.forEach(t),Y8r=r(MA,` property of the config object (either
passed as an argument or loaded from `),rTe=n(MA,"CODE",{});var L4t=s(rTe);K8r=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),Z8r=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tTe=n(MA,"CODE",{});var x4t=s(tTe);exr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),oxr=r(MA,":"),MA.forEach(t),rxr=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);rC=n(Ve,"LI",{});var iBe=s(rC);aTe=n(iBe,"STRONG",{});var $4t=s(aTe);txr=r($4t,"bart"),$4t.forEach(t),axr=r(iBe," \u2014 "),AJ=n(iBe,"A",{href:!0});var k4t=s(AJ);nxr=r(k4t,"FlaxBartForConditionalGeneration"),k4t.forEach(t),sxr=r(iBe," (BART model)"),iBe.forEach(t),lxr=i(Ve),tC=n(Ve,"LI",{});var dBe=s(tC);nTe=n(dBe,"STRONG",{});var S4t=s(nTe);ixr=r(S4t,"blenderbot"),S4t.forEach(t),dxr=r(dBe," \u2014 "),yJ=n(dBe,"A",{href:!0});var R4t=s(yJ);cxr=r(R4t,"FlaxBlenderbotForConditionalGeneration"),R4t.forEach(t),fxr=r(dBe," (Blenderbot model)"),dBe.forEach(t),mxr=i(Ve),aC=n(Ve,"LI",{});var cBe=s(aC);sTe=n(cBe,"STRONG",{});var B4t=s(sTe);gxr=r(B4t,"blenderbot-small"),B4t.forEach(t),hxr=r(cBe," \u2014 "),LJ=n(cBe,"A",{href:!0});var P4t=s(LJ);pxr=r(P4t,"FlaxBlenderbotSmallForConditionalGeneration"),P4t.forEach(t),uxr=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),_xr=i(Ve),nC=n(Ve,"LI",{});var fBe=s(nC);lTe=n(fBe,"STRONG",{});var I4t=s(lTe);bxr=r(I4t,"encoder-decoder"),I4t.forEach(t),vxr=r(fBe," \u2014 "),xJ=n(fBe,"A",{href:!0});var q4t=s(xJ);Fxr=r(q4t,"FlaxEncoderDecoderModel"),q4t.forEach(t),Txr=r(fBe," (Encoder decoder model)"),fBe.forEach(t),Mxr=i(Ve),sC=n(Ve,"LI",{});var mBe=s(sC);iTe=n(mBe,"STRONG",{});var N4t=s(iTe);Exr=r(N4t,"marian"),N4t.forEach(t),Cxr=r(mBe," \u2014 "),$J=n(mBe,"A",{href:!0});var j4t=s($J);wxr=r(j4t,"FlaxMarianMTModel"),j4t.forEach(t),Axr=r(mBe," (Marian model)"),mBe.forEach(t),yxr=i(Ve),lC=n(Ve,"LI",{});var gBe=s(lC);dTe=n(gBe,"STRONG",{});var D4t=s(dTe);Lxr=r(D4t,"mbart"),D4t.forEach(t),xxr=r(gBe," \u2014 "),kJ=n(gBe,"A",{href:!0});var G4t=s(kJ);$xr=r(G4t,"FlaxMBartForConditionalGeneration"),G4t.forEach(t),kxr=r(gBe," (mBART model)"),gBe.forEach(t),Sxr=i(Ve),iC=n(Ve,"LI",{});var hBe=s(iC);cTe=n(hBe,"STRONG",{});var O4t=s(cTe);Rxr=r(O4t,"mt5"),O4t.forEach(t),Bxr=r(hBe," \u2014 "),SJ=n(hBe,"A",{href:!0});var V4t=s(SJ);Pxr=r(V4t,"FlaxMT5ForConditionalGeneration"),V4t.forEach(t),Ixr=r(hBe," (mT5 model)"),hBe.forEach(t),qxr=i(Ve),dC=n(Ve,"LI",{});var pBe=s(dC);fTe=n(pBe,"STRONG",{});var X4t=s(fTe);Nxr=r(X4t,"pegasus"),X4t.forEach(t),jxr=r(pBe," \u2014 "),RJ=n(pBe,"A",{href:!0});var z4t=s(RJ);Dxr=r(z4t,"FlaxPegasusForConditionalGeneration"),z4t.forEach(t),Gxr=r(pBe," (Pegasus model)"),pBe.forEach(t),Oxr=i(Ve),cC=n(Ve,"LI",{});var uBe=s(cC);mTe=n(uBe,"STRONG",{});var Q4t=s(mTe);Vxr=r(Q4t,"t5"),Q4t.forEach(t),Xxr=r(uBe," \u2014 "),BJ=n(uBe,"A",{href:!0});var W4t=s(BJ);zxr=r(W4t,"FlaxT5ForConditionalGeneration"),W4t.forEach(t),Qxr=r(uBe," (T5 model)"),uBe.forEach(t),Ve.forEach(t),Wxr=i(Ql),T(fC.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),QIe=i(f),Gc=n(f,"H2",{class:!0});var ZNe=s(Gc);mC=n(ZNe,"A",{id:!0,class:!0,href:!0});var H4t=s(mC);gTe=n(H4t,"SPAN",{});var U4t=s(gTe);T(cx.$$.fragment,U4t),U4t.forEach(t),H4t.forEach(t),Hxr=i(ZNe),hTe=n(ZNe,"SPAN",{});var J4t=s(hTe);Uxr=r(J4t,"FlaxAutoModelForSequenceClassification"),J4t.forEach(t),ZNe.forEach(t),WIe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(fx.$$.fragment,Wl),Jxr=i(Wl),Oc=n(Wl,"P",{});var TZ=s(Oc);Yxr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),PJ=n(TZ,"A",{href:!0});var Y4t=s(PJ);Kxr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),Zxr=r(TZ," class method or the "),IJ=n(TZ,"A",{href:!0});var K4t=s(IJ);e7r=r(K4t,"from_config()"),K4t.forEach(t),o7r=r(TZ,` class
method.`),TZ.forEach(t),r7r=i(Wl),mx=n(Wl,"P",{});var eje=s(mx);t7r=r(eje,"This class cannot be instantiated directly using "),pTe=n(eje,"CODE",{});var Z4t=s(pTe);a7r=r(Z4t,"__init__()"),Z4t.forEach(t),n7r=r(eje," (throws an error)."),eje.forEach(t),s7r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var EA=s(Xt);T(gx.$$.fragment,EA),l7r=i(EA),uTe=n(EA,"P",{});var eEt=s(uTe);i7r=r(eEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),eEt.forEach(t),d7r=i(EA),Vc=n(EA,"P",{});var MZ=s(Vc);c7r=r(MZ,`Note:
Loading a model from its configuration file does `),_Te=n(MZ,"STRONG",{});var oEt=s(_Te);f7r=r(oEt,"not"),oEt.forEach(t),m7r=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(MZ,"A",{href:!0});var rEt=s(qJ);g7r=r(rEt,"from_pretrained()"),rEt.forEach(t),h7r=r(MZ," to load the model weights."),MZ.forEach(t),p7r=i(EA),T(gC.$$.fragment,EA),EA.forEach(t),u7r=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(hx.$$.fragment,Hl),_7r=i(Hl),bTe=n(Hl,"P",{});var tEt=s(bTe);b7r=r(tEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),tEt.forEach(t),v7r=i(Hl),bn=n(Hl,"P",{});var CA=s(bn);F7r=r(CA,"The model class to instantiate is selected based on the "),vTe=n(CA,"CODE",{});var aEt=s(vTe);T7r=r(aEt,"model_type"),aEt.forEach(t),M7r=r(CA,` property of the config object (either
passed as an argument or loaded from `),FTe=n(CA,"CODE",{});var nEt=s(FTe);E7r=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),C7r=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(CA,"CODE",{});var sEt=s(TTe);w7r=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),A7r=r(CA,":"),CA.forEach(t),y7r=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);hC=n(Pe,"LI",{});var _Be=s(hC);MTe=n(_Be,"STRONG",{});var lEt=s(MTe);L7r=r(lEt,"albert"),lEt.forEach(t),x7r=r(_Be," \u2014 "),NJ=n(_Be,"A",{href:!0});var iEt=s(NJ);$7r=r(iEt,"FlaxAlbertForSequenceClassification"),iEt.forEach(t),k7r=r(_Be," (ALBERT model)"),_Be.forEach(t),S7r=i(Pe),pC=n(Pe,"LI",{});var bBe=s(pC);ETe=n(bBe,"STRONG",{});var dEt=s(ETe);R7r=r(dEt,"bart"),dEt.forEach(t),B7r=r(bBe," \u2014 "),jJ=n(bBe,"A",{href:!0});var cEt=s(jJ);P7r=r(cEt,"FlaxBartForSequenceClassification"),cEt.forEach(t),I7r=r(bBe," (BART model)"),bBe.forEach(t),q7r=i(Pe),uC=n(Pe,"LI",{});var vBe=s(uC);CTe=n(vBe,"STRONG",{});var fEt=s(CTe);N7r=r(fEt,"bert"),fEt.forEach(t),j7r=r(vBe," \u2014 "),DJ=n(vBe,"A",{href:!0});var mEt=s(DJ);D7r=r(mEt,"FlaxBertForSequenceClassification"),mEt.forEach(t),G7r=r(vBe," (BERT model)"),vBe.forEach(t),O7r=i(Pe),_C=n(Pe,"LI",{});var FBe=s(_C);wTe=n(FBe,"STRONG",{});var gEt=s(wTe);V7r=r(gEt,"big_bird"),gEt.forEach(t),X7r=r(FBe," \u2014 "),GJ=n(FBe,"A",{href:!0});var hEt=s(GJ);z7r=r(hEt,"FlaxBigBirdForSequenceClassification"),hEt.forEach(t),Q7r=r(FBe," (BigBird model)"),FBe.forEach(t),W7r=i(Pe),bC=n(Pe,"LI",{});var TBe=s(bC);ATe=n(TBe,"STRONG",{});var pEt=s(ATe);H7r=r(pEt,"distilbert"),pEt.forEach(t),U7r=r(TBe," \u2014 "),OJ=n(TBe,"A",{href:!0});var uEt=s(OJ);J7r=r(uEt,"FlaxDistilBertForSequenceClassification"),uEt.forEach(t),Y7r=r(TBe," (DistilBERT model)"),TBe.forEach(t),K7r=i(Pe),vC=n(Pe,"LI",{});var MBe=s(vC);yTe=n(MBe,"STRONG",{});var _Et=s(yTe);Z7r=r(_Et,"electra"),_Et.forEach(t),e$r=r(MBe," \u2014 "),VJ=n(MBe,"A",{href:!0});var bEt=s(VJ);o$r=r(bEt,"FlaxElectraForSequenceClassification"),bEt.forEach(t),r$r=r(MBe," (ELECTRA model)"),MBe.forEach(t),t$r=i(Pe),FC=n(Pe,"LI",{});var EBe=s(FC);LTe=n(EBe,"STRONG",{});var vEt=s(LTe);a$r=r(vEt,"mbart"),vEt.forEach(t),n$r=r(EBe," \u2014 "),XJ=n(EBe,"A",{href:!0});var FEt=s(XJ);s$r=r(FEt,"FlaxMBartForSequenceClassification"),FEt.forEach(t),l$r=r(EBe," (mBART model)"),EBe.forEach(t),i$r=i(Pe),TC=n(Pe,"LI",{});var CBe=s(TC);xTe=n(CBe,"STRONG",{});var TEt=s(xTe);d$r=r(TEt,"roberta"),TEt.forEach(t),c$r=r(CBe," \u2014 "),zJ=n(CBe,"A",{href:!0});var MEt=s(zJ);f$r=r(MEt,"FlaxRobertaForSequenceClassification"),MEt.forEach(t),m$r=r(CBe," (RoBERTa model)"),CBe.forEach(t),g$r=i(Pe),MC=n(Pe,"LI",{});var wBe=s(MC);$Te=n(wBe,"STRONG",{});var EEt=s($Te);h$r=r(EEt,"roformer"),EEt.forEach(t),p$r=r(wBe," \u2014 "),QJ=n(wBe,"A",{href:!0});var CEt=s(QJ);u$r=r(CEt,"FlaxRoFormerForSequenceClassification"),CEt.forEach(t),_$r=r(wBe," (RoFormer model)"),wBe.forEach(t),b$r=i(Pe),EC=n(Pe,"LI",{});var ABe=s(EC);kTe=n(ABe,"STRONG",{});var wEt=s(kTe);v$r=r(wEt,"xlm-roberta"),wEt.forEach(t),F$r=r(ABe," \u2014 "),WJ=n(ABe,"A",{href:!0});var AEt=s(WJ);T$r=r(AEt,"FlaxXLMRobertaForSequenceClassification"),AEt.forEach(t),M$r=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),Pe.forEach(t),E$r=i(Hl),T(CC.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),HIe=i(f),Xc=n(f,"H2",{class:!0});var oje=s(Xc);wC=n(oje,"A",{id:!0,class:!0,href:!0});var yEt=s(wC);STe=n(yEt,"SPAN",{});var LEt=s(STe);T(px.$$.fragment,LEt),LEt.forEach(t),yEt.forEach(t),C$r=i(oje),RTe=n(oje,"SPAN",{});var xEt=s(RTe);w$r=r(xEt,"FlaxAutoModelForQuestionAnswering"),xEt.forEach(t),oje.forEach(t),UIe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(ux.$$.fragment,Ul),A$r=i(Ul),zc=n(Ul,"P",{});var EZ=s(zc);y$r=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),HJ=n(EZ,"A",{href:!0});var $Et=s(HJ);L$r=r($Et,"from_pretrained()"),$Et.forEach(t),x$r=r(EZ," class method or the "),UJ=n(EZ,"A",{href:!0});var kEt=s(UJ);$$r=r(kEt,"from_config()"),kEt.forEach(t),k$r=r(EZ,` class
method.`),EZ.forEach(t),S$r=i(Ul),_x=n(Ul,"P",{});var rje=s(_x);R$r=r(rje,"This class cannot be instantiated directly using "),BTe=n(rje,"CODE",{});var SEt=s(BTe);B$r=r(SEt,"__init__()"),SEt.forEach(t),P$r=r(rje," (throws an error)."),rje.forEach(t),I$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var wA=s(zt);T(bx.$$.fragment,wA),q$r=i(wA),PTe=n(wA,"P",{});var REt=s(PTe);N$r=r(REt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),REt.forEach(t),j$r=i(wA),Qc=n(wA,"P",{});var CZ=s(Qc);D$r=r(CZ,`Note:
Loading a model from its configuration file does `),ITe=n(CZ,"STRONG",{});var BEt=s(ITe);G$r=r(BEt,"not"),BEt.forEach(t),O$r=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(CZ,"A",{href:!0});var PEt=s(JJ);V$r=r(PEt,"from_pretrained()"),PEt.forEach(t),X$r=r(CZ," to load the model weights."),CZ.forEach(t),z$r=i(wA),T(AC.$$.fragment,wA),wA.forEach(t),Q$r=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(vx.$$.fragment,Jl),W$r=i(Jl),qTe=n(Jl,"P",{});var IEt=s(qTe);H$r=r(IEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IEt.forEach(t),U$r=i(Jl),vn=n(Jl,"P",{});var AA=s(vn);J$r=r(AA,"The model class to instantiate is selected based on the "),NTe=n(AA,"CODE",{});var qEt=s(NTe);Y$r=r(qEt,"model_type"),qEt.forEach(t),K$r=r(AA,` property of the config object (either
passed as an argument or loaded from `),jTe=n(AA,"CODE",{});var NEt=s(jTe);Z$r=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),ekr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DTe=n(AA,"CODE",{});var jEt=s(DTe);okr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),rkr=r(AA,":"),AA.forEach(t),tkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);yC=n(Ie,"LI",{});var yBe=s(yC);GTe=n(yBe,"STRONG",{});var DEt=s(GTe);akr=r(DEt,"albert"),DEt.forEach(t),nkr=r(yBe," \u2014 "),YJ=n(yBe,"A",{href:!0});var GEt=s(YJ);skr=r(GEt,"FlaxAlbertForQuestionAnswering"),GEt.forEach(t),lkr=r(yBe," (ALBERT model)"),yBe.forEach(t),ikr=i(Ie),LC=n(Ie,"LI",{});var LBe=s(LC);OTe=n(LBe,"STRONG",{});var OEt=s(OTe);dkr=r(OEt,"bart"),OEt.forEach(t),ckr=r(LBe," \u2014 "),KJ=n(LBe,"A",{href:!0});var VEt=s(KJ);fkr=r(VEt,"FlaxBartForQuestionAnswering"),VEt.forEach(t),mkr=r(LBe," (BART model)"),LBe.forEach(t),gkr=i(Ie),xC=n(Ie,"LI",{});var xBe=s(xC);VTe=n(xBe,"STRONG",{});var XEt=s(VTe);hkr=r(XEt,"bert"),XEt.forEach(t),pkr=r(xBe," \u2014 "),ZJ=n(xBe,"A",{href:!0});var zEt=s(ZJ);ukr=r(zEt,"FlaxBertForQuestionAnswering"),zEt.forEach(t),_kr=r(xBe," (BERT model)"),xBe.forEach(t),bkr=i(Ie),$C=n(Ie,"LI",{});var $Be=s($C);XTe=n($Be,"STRONG",{});var QEt=s(XTe);vkr=r(QEt,"big_bird"),QEt.forEach(t),Fkr=r($Be," \u2014 "),eY=n($Be,"A",{href:!0});var WEt=s(eY);Tkr=r(WEt,"FlaxBigBirdForQuestionAnswering"),WEt.forEach(t),Mkr=r($Be," (BigBird model)"),$Be.forEach(t),Ekr=i(Ie),kC=n(Ie,"LI",{});var kBe=s(kC);zTe=n(kBe,"STRONG",{});var HEt=s(zTe);Ckr=r(HEt,"distilbert"),HEt.forEach(t),wkr=r(kBe," \u2014 "),oY=n(kBe,"A",{href:!0});var UEt=s(oY);Akr=r(UEt,"FlaxDistilBertForQuestionAnswering"),UEt.forEach(t),ykr=r(kBe," (DistilBERT model)"),kBe.forEach(t),Lkr=i(Ie),SC=n(Ie,"LI",{});var SBe=s(SC);QTe=n(SBe,"STRONG",{});var JEt=s(QTe);xkr=r(JEt,"electra"),JEt.forEach(t),$kr=r(SBe," \u2014 "),rY=n(SBe,"A",{href:!0});var YEt=s(rY);kkr=r(YEt,"FlaxElectraForQuestionAnswering"),YEt.forEach(t),Skr=r(SBe," (ELECTRA model)"),SBe.forEach(t),Rkr=i(Ie),RC=n(Ie,"LI",{});var RBe=s(RC);WTe=n(RBe,"STRONG",{});var KEt=s(WTe);Bkr=r(KEt,"mbart"),KEt.forEach(t),Pkr=r(RBe," \u2014 "),tY=n(RBe,"A",{href:!0});var ZEt=s(tY);Ikr=r(ZEt,"FlaxMBartForQuestionAnswering"),ZEt.forEach(t),qkr=r(RBe," (mBART model)"),RBe.forEach(t),Nkr=i(Ie),BC=n(Ie,"LI",{});var BBe=s(BC);HTe=n(BBe,"STRONG",{});var eCt=s(HTe);jkr=r(eCt,"roberta"),eCt.forEach(t),Dkr=r(BBe," \u2014 "),aY=n(BBe,"A",{href:!0});var oCt=s(aY);Gkr=r(oCt,"FlaxRobertaForQuestionAnswering"),oCt.forEach(t),Okr=r(BBe," (RoBERTa model)"),BBe.forEach(t),Vkr=i(Ie),PC=n(Ie,"LI",{});var PBe=s(PC);UTe=n(PBe,"STRONG",{});var rCt=s(UTe);Xkr=r(rCt,"roformer"),rCt.forEach(t),zkr=r(PBe," \u2014 "),nY=n(PBe,"A",{href:!0});var tCt=s(nY);Qkr=r(tCt,"FlaxRoFormerForQuestionAnswering"),tCt.forEach(t),Wkr=r(PBe," (RoFormer model)"),PBe.forEach(t),Hkr=i(Ie),IC=n(Ie,"LI",{});var IBe=s(IC);JTe=n(IBe,"STRONG",{});var aCt=s(JTe);Ukr=r(aCt,"xlm-roberta"),aCt.forEach(t),Jkr=r(IBe," \u2014 "),sY=n(IBe,"A",{href:!0});var nCt=s(sY);Ykr=r(nCt,"FlaxXLMRobertaForQuestionAnswering"),nCt.forEach(t),Kkr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),Ie.forEach(t),Zkr=i(Jl),T(qC.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),JIe=i(f),Wc=n(f,"H2",{class:!0});var tje=s(Wc);NC=n(tje,"A",{id:!0,class:!0,href:!0});var sCt=s(NC);YTe=n(sCt,"SPAN",{});var lCt=s(YTe);T(Fx.$$.fragment,lCt),lCt.forEach(t),sCt.forEach(t),eSr=i(tje),KTe=n(tje,"SPAN",{});var iCt=s(KTe);oSr=r(iCt,"FlaxAutoModelForTokenClassification"),iCt.forEach(t),tje.forEach(t),YIe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(Tx.$$.fragment,Yl),rSr=i(Yl),Hc=n(Yl,"P",{});var wZ=s(Hc);tSr=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),lY=n(wZ,"A",{href:!0});var dCt=s(lY);aSr=r(dCt,"from_pretrained()"),dCt.forEach(t),nSr=r(wZ," class method or the "),iY=n(wZ,"A",{href:!0});var cCt=s(iY);sSr=r(cCt,"from_config()"),cCt.forEach(t),lSr=r(wZ,` class
method.`),wZ.forEach(t),iSr=i(Yl),Mx=n(Yl,"P",{});var aje=s(Mx);dSr=r(aje,"This class cannot be instantiated directly using "),ZTe=n(aje,"CODE",{});var fCt=s(ZTe);cSr=r(fCt,"__init__()"),fCt.forEach(t),fSr=r(aje," (throws an error)."),aje.forEach(t),mSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var yA=s(Qt);T(Ex.$$.fragment,yA),gSr=i(yA),e9e=n(yA,"P",{});var mCt=s(e9e);hSr=r(mCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mCt.forEach(t),pSr=i(yA),Uc=n(yA,"P",{});var AZ=s(Uc);uSr=r(AZ,`Note:
Loading a model from its configuration file does `),o9e=n(AZ,"STRONG",{});var gCt=s(o9e);_Sr=r(gCt,"not"),gCt.forEach(t),bSr=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dY=n(AZ,"A",{href:!0});var hCt=s(dY);vSr=r(hCt,"from_pretrained()"),hCt.forEach(t),FSr=r(AZ," to load the model weights."),AZ.forEach(t),TSr=i(yA),T(jC.$$.fragment,yA),yA.forEach(t),MSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(Cx.$$.fragment,Kl),ESr=i(Kl),r9e=n(Kl,"P",{});var pCt=s(r9e);CSr=r(pCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pCt.forEach(t),wSr=i(Kl),Fn=n(Kl,"P",{});var LA=s(Fn);ASr=r(LA,"The model class to instantiate is selected based on the "),t9e=n(LA,"CODE",{});var uCt=s(t9e);ySr=r(uCt,"model_type"),uCt.forEach(t),LSr=r(LA,` property of the config object (either
passed as an argument or loaded from `),a9e=n(LA,"CODE",{});var _Ct=s(a9e);xSr=r(_Ct,"pretrained_model_name_or_path"),_Ct.forEach(t),$Sr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=n(LA,"CODE",{});var bCt=s(n9e);kSr=r(bCt,"pretrained_model_name_or_path"),bCt.forEach(t),SSr=r(LA,":"),LA.forEach(t),RSr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);DC=n(Fo,"LI",{});var qBe=s(DC);s9e=n(qBe,"STRONG",{});var vCt=s(s9e);BSr=r(vCt,"albert"),vCt.forEach(t),PSr=r(qBe," \u2014 "),cY=n(qBe,"A",{href:!0});var FCt=s(cY);ISr=r(FCt,"FlaxAlbertForTokenClassification"),FCt.forEach(t),qSr=r(qBe," (ALBERT model)"),qBe.forEach(t),NSr=i(Fo),GC=n(Fo,"LI",{});var NBe=s(GC);l9e=n(NBe,"STRONG",{});var TCt=s(l9e);jSr=r(TCt,"bert"),TCt.forEach(t),DSr=r(NBe," \u2014 "),fY=n(NBe,"A",{href:!0});var MCt=s(fY);GSr=r(MCt,"FlaxBertForTokenClassification"),MCt.forEach(t),OSr=r(NBe," (BERT model)"),NBe.forEach(t),VSr=i(Fo),OC=n(Fo,"LI",{});var jBe=s(OC);i9e=n(jBe,"STRONG",{});var ECt=s(i9e);XSr=r(ECt,"big_bird"),ECt.forEach(t),zSr=r(jBe," \u2014 "),mY=n(jBe,"A",{href:!0});var CCt=s(mY);QSr=r(CCt,"FlaxBigBirdForTokenClassification"),CCt.forEach(t),WSr=r(jBe," (BigBird model)"),jBe.forEach(t),HSr=i(Fo),VC=n(Fo,"LI",{});var DBe=s(VC);d9e=n(DBe,"STRONG",{});var wCt=s(d9e);USr=r(wCt,"distilbert"),wCt.forEach(t),JSr=r(DBe," \u2014 "),gY=n(DBe,"A",{href:!0});var ACt=s(gY);YSr=r(ACt,"FlaxDistilBertForTokenClassification"),ACt.forEach(t),KSr=r(DBe," (DistilBERT model)"),DBe.forEach(t),ZSr=i(Fo),XC=n(Fo,"LI",{});var GBe=s(XC);c9e=n(GBe,"STRONG",{});var yCt=s(c9e);eRr=r(yCt,"electra"),yCt.forEach(t),oRr=r(GBe," \u2014 "),hY=n(GBe,"A",{href:!0});var LCt=s(hY);rRr=r(LCt,"FlaxElectraForTokenClassification"),LCt.forEach(t),tRr=r(GBe," (ELECTRA model)"),GBe.forEach(t),aRr=i(Fo),zC=n(Fo,"LI",{});var OBe=s(zC);f9e=n(OBe,"STRONG",{});var xCt=s(f9e);nRr=r(xCt,"roberta"),xCt.forEach(t),sRr=r(OBe," \u2014 "),pY=n(OBe,"A",{href:!0});var $Ct=s(pY);lRr=r($Ct,"FlaxRobertaForTokenClassification"),$Ct.forEach(t),iRr=r(OBe," (RoBERTa model)"),OBe.forEach(t),dRr=i(Fo),QC=n(Fo,"LI",{});var VBe=s(QC);m9e=n(VBe,"STRONG",{});var kCt=s(m9e);cRr=r(kCt,"roformer"),kCt.forEach(t),fRr=r(VBe," \u2014 "),uY=n(VBe,"A",{href:!0});var SCt=s(uY);mRr=r(SCt,"FlaxRoFormerForTokenClassification"),SCt.forEach(t),gRr=r(VBe," (RoFormer model)"),VBe.forEach(t),hRr=i(Fo),WC=n(Fo,"LI",{});var XBe=s(WC);g9e=n(XBe,"STRONG",{});var RCt=s(g9e);pRr=r(RCt,"xlm-roberta"),RCt.forEach(t),uRr=r(XBe," \u2014 "),_Y=n(XBe,"A",{href:!0});var BCt=s(_Y);_Rr=r(BCt,"FlaxXLMRobertaForTokenClassification"),BCt.forEach(t),bRr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Fo.forEach(t),vRr=i(Kl),T(HC.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),KIe=i(f),Jc=n(f,"H2",{class:!0});var nje=s(Jc);UC=n(nje,"A",{id:!0,class:!0,href:!0});var PCt=s(UC);h9e=n(PCt,"SPAN",{});var ICt=s(h9e);T(wx.$$.fragment,ICt),ICt.forEach(t),PCt.forEach(t),FRr=i(nje),p9e=n(nje,"SPAN",{});var qCt=s(p9e);TRr=r(qCt,"FlaxAutoModelForMultipleChoice"),qCt.forEach(t),nje.forEach(t),ZIe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(Ax.$$.fragment,Zl),MRr=i(Zl),Yc=n(Zl,"P",{});var yZ=s(Yc);ERr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bY=n(yZ,"A",{href:!0});var NCt=s(bY);CRr=r(NCt,"from_pretrained()"),NCt.forEach(t),wRr=r(yZ," class method or the "),vY=n(yZ,"A",{href:!0});var jCt=s(vY);ARr=r(jCt,"from_config()"),jCt.forEach(t),yRr=r(yZ,` class
method.`),yZ.forEach(t),LRr=i(Zl),yx=n(Zl,"P",{});var sje=s(yx);xRr=r(sje,"This class cannot be instantiated directly using "),u9e=n(sje,"CODE",{});var DCt=s(u9e);$Rr=r(DCt,"__init__()"),DCt.forEach(t),kRr=r(sje," (throws an error)."),sje.forEach(t),SRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var xA=s(Wt);T(Lx.$$.fragment,xA),RRr=i(xA),_9e=n(xA,"P",{});var GCt=s(_9e);BRr=r(GCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),GCt.forEach(t),PRr=i(xA),Kc=n(xA,"P",{});var LZ=s(Kc);IRr=r(LZ,`Note:
Loading a model from its configuration file does `),b9e=n(LZ,"STRONG",{});var OCt=s(b9e);qRr=r(OCt,"not"),OCt.forEach(t),NRr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FY=n(LZ,"A",{href:!0});var VCt=s(FY);jRr=r(VCt,"from_pretrained()"),VCt.forEach(t),DRr=r(LZ," to load the model weights."),LZ.forEach(t),GRr=i(xA),T(JC.$$.fragment,xA),xA.forEach(t),ORr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T(xx.$$.fragment,ei),VRr=i(ei),v9e=n(ei,"P",{});var XCt=s(v9e);XRr=r(XCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),XCt.forEach(t),zRr=i(ei),Tn=n(ei,"P",{});var $A=s(Tn);QRr=r($A,"The model class to instantiate is selected based on the "),F9e=n($A,"CODE",{});var zCt=s(F9e);WRr=r(zCt,"model_type"),zCt.forEach(t),HRr=r($A,` property of the config object (either
passed as an argument or loaded from `),T9e=n($A,"CODE",{});var QCt=s(T9e);URr=r(QCt,"pretrained_model_name_or_path"),QCt.forEach(t),JRr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M9e=n($A,"CODE",{});var WCt=s(M9e);YRr=r(WCt,"pretrained_model_name_or_path"),WCt.forEach(t),KRr=r($A,":"),$A.forEach(t),ZRr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);YC=n(To,"LI",{});var zBe=s(YC);E9e=n(zBe,"STRONG",{});var HCt=s(E9e);eBr=r(HCt,"albert"),HCt.forEach(t),oBr=r(zBe," \u2014 "),TY=n(zBe,"A",{href:!0});var UCt=s(TY);rBr=r(UCt,"FlaxAlbertForMultipleChoice"),UCt.forEach(t),tBr=r(zBe," (ALBERT model)"),zBe.forEach(t),aBr=i(To),KC=n(To,"LI",{});var QBe=s(KC);C9e=n(QBe,"STRONG",{});var JCt=s(C9e);nBr=r(JCt,"bert"),JCt.forEach(t),sBr=r(QBe," \u2014 "),MY=n(QBe,"A",{href:!0});var YCt=s(MY);lBr=r(YCt,"FlaxBertForMultipleChoice"),YCt.forEach(t),iBr=r(QBe," (BERT model)"),QBe.forEach(t),dBr=i(To),ZC=n(To,"LI",{});var WBe=s(ZC);w9e=n(WBe,"STRONG",{});var KCt=s(w9e);cBr=r(KCt,"big_bird"),KCt.forEach(t),fBr=r(WBe," \u2014 "),EY=n(WBe,"A",{href:!0});var ZCt=s(EY);mBr=r(ZCt,"FlaxBigBirdForMultipleChoice"),ZCt.forEach(t),gBr=r(WBe," (BigBird model)"),WBe.forEach(t),hBr=i(To),e3=n(To,"LI",{});var HBe=s(e3);A9e=n(HBe,"STRONG",{});var e3t=s(A9e);pBr=r(e3t,"distilbert"),e3t.forEach(t),uBr=r(HBe," \u2014 "),CY=n(HBe,"A",{href:!0});var o3t=s(CY);_Br=r(o3t,"FlaxDistilBertForMultipleChoice"),o3t.forEach(t),bBr=r(HBe," (DistilBERT model)"),HBe.forEach(t),vBr=i(To),o3=n(To,"LI",{});var UBe=s(o3);y9e=n(UBe,"STRONG",{});var r3t=s(y9e);FBr=r(r3t,"electra"),r3t.forEach(t),TBr=r(UBe," \u2014 "),wY=n(UBe,"A",{href:!0});var t3t=s(wY);MBr=r(t3t,"FlaxElectraForMultipleChoice"),t3t.forEach(t),EBr=r(UBe," (ELECTRA model)"),UBe.forEach(t),CBr=i(To),r3=n(To,"LI",{});var JBe=s(r3);L9e=n(JBe,"STRONG",{});var a3t=s(L9e);wBr=r(a3t,"roberta"),a3t.forEach(t),ABr=r(JBe," \u2014 "),AY=n(JBe,"A",{href:!0});var n3t=s(AY);yBr=r(n3t,"FlaxRobertaForMultipleChoice"),n3t.forEach(t),LBr=r(JBe," (RoBERTa model)"),JBe.forEach(t),xBr=i(To),t3=n(To,"LI",{});var YBe=s(t3);x9e=n(YBe,"STRONG",{});var s3t=s(x9e);$Br=r(s3t,"roformer"),s3t.forEach(t),kBr=r(YBe," \u2014 "),yY=n(YBe,"A",{href:!0});var l3t=s(yY);SBr=r(l3t,"FlaxRoFormerForMultipleChoice"),l3t.forEach(t),RBr=r(YBe," (RoFormer model)"),YBe.forEach(t),BBr=i(To),a3=n(To,"LI",{});var KBe=s(a3);$9e=n(KBe,"STRONG",{});var i3t=s($9e);PBr=r(i3t,"xlm-roberta"),i3t.forEach(t),IBr=r(KBe," \u2014 "),LY=n(KBe,"A",{href:!0});var d3t=s(LY);qBr=r(d3t,"FlaxXLMRobertaForMultipleChoice"),d3t.forEach(t),NBr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),To.forEach(t),jBr=i(ei),T(n3.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),eqe=i(f),Zc=n(f,"H2",{class:!0});var lje=s(Zc);s3=n(lje,"A",{id:!0,class:!0,href:!0});var c3t=s(s3);k9e=n(c3t,"SPAN",{});var f3t=s(k9e);T($x.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),DBr=i(lje),S9e=n(lje,"SPAN",{});var m3t=s(S9e);GBr=r(m3t,"FlaxAutoModelForNextSentencePrediction"),m3t.forEach(t),lje.forEach(t),oqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(kx.$$.fragment,oi),OBr=i(oi),ef=n(oi,"P",{});var xZ=s(ef);VBr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),xY=n(xZ,"A",{href:!0});var g3t=s(xY);XBr=r(g3t,"from_pretrained()"),g3t.forEach(t),zBr=r(xZ," class method or the "),$Y=n(xZ,"A",{href:!0});var h3t=s($Y);QBr=r(h3t,"from_config()"),h3t.forEach(t),WBr=r(xZ,` class
method.`),xZ.forEach(t),HBr=i(oi),Sx=n(oi,"P",{});var ije=s(Sx);UBr=r(ije,"This class cannot be instantiated directly using "),R9e=n(ije,"CODE",{});var p3t=s(R9e);JBr=r(p3t,"__init__()"),p3t.forEach(t),YBr=r(ije," (throws an error)."),ije.forEach(t),KBr=i(oi),Ht=n(oi,"DIV",{class:!0});var kA=s(Ht);T(Rx.$$.fragment,kA),ZBr=i(kA),B9e=n(kA,"P",{});var u3t=s(B9e);ePr=r(u3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u3t.forEach(t),oPr=i(kA),of=n(kA,"P",{});var $Z=s(of);rPr=r($Z,`Note:
Loading a model from its configuration file does `),P9e=n($Z,"STRONG",{});var _3t=s(P9e);tPr=r(_3t,"not"),_3t.forEach(t),aPr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),kY=n($Z,"A",{href:!0});var b3t=s(kY);nPr=r(b3t,"from_pretrained()"),b3t.forEach(t),sPr=r($Z," to load the model weights."),$Z.forEach(t),lPr=i(kA),T(l3.$$.fragment,kA),kA.forEach(t),iPr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(Bx.$$.fragment,ri),dPr=i(ri),I9e=n(ri,"P",{});var v3t=s(I9e);cPr=r(v3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v3t.forEach(t),fPr=i(ri),Mn=n(ri,"P",{});var SA=s(Mn);mPr=r(SA,"The model class to instantiate is selected based on the "),q9e=n(SA,"CODE",{});var F3t=s(q9e);gPr=r(F3t,"model_type"),F3t.forEach(t),hPr=r(SA,` property of the config object (either
passed as an argument or loaded from `),N9e=n(SA,"CODE",{});var T3t=s(N9e);pPr=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),uPr=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j9e=n(SA,"CODE",{});var M3t=s(j9e);_Pr=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),bPr=r(SA,":"),SA.forEach(t),vPr=i(ri),D9e=n(ri,"UL",{});var E3t=s(D9e);i3=n(E3t,"LI",{});var ZBe=s(i3);G9e=n(ZBe,"STRONG",{});var C3t=s(G9e);FPr=r(C3t,"bert"),C3t.forEach(t),TPr=r(ZBe," \u2014 "),SY=n(ZBe,"A",{href:!0});var w3t=s(SY);MPr=r(w3t,"FlaxBertForNextSentencePrediction"),w3t.forEach(t),EPr=r(ZBe," (BERT model)"),ZBe.forEach(t),E3t.forEach(t),CPr=i(ri),T(d3.$$.fragment,ri),ri.forEach(t),oi.forEach(t),rqe=i(f),rf=n(f,"H2",{class:!0});var dje=s(rf);c3=n(dje,"A",{id:!0,class:!0,href:!0});var A3t=s(c3);O9e=n(A3t,"SPAN",{});var y3t=s(O9e);T(Px.$$.fragment,y3t),y3t.forEach(t),A3t.forEach(t),wPr=i(dje),V9e=n(dje,"SPAN",{});var L3t=s(V9e);APr=r(L3t,"FlaxAutoModelForImageClassification"),L3t.forEach(t),dje.forEach(t),tqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(Ix.$$.fragment,ti),yPr=i(ti),tf=n(ti,"P",{});var kZ=s(tf);LPr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RY=n(kZ,"A",{href:!0});var x3t=s(RY);xPr=r(x3t,"from_pretrained()"),x3t.forEach(t),$Pr=r(kZ," class method or the "),BY=n(kZ,"A",{href:!0});var $3t=s(BY);kPr=r($3t,"from_config()"),$3t.forEach(t),SPr=r(kZ,` class
method.`),kZ.forEach(t),RPr=i(ti),qx=n(ti,"P",{});var cje=s(qx);BPr=r(cje,"This class cannot be instantiated directly using "),X9e=n(cje,"CODE",{});var k3t=s(X9e);PPr=r(k3t,"__init__()"),k3t.forEach(t),IPr=r(cje," (throws an error)."),cje.forEach(t),qPr=i(ti),Ut=n(ti,"DIV",{class:!0});var RA=s(Ut);T(Nx.$$.fragment,RA),NPr=i(RA),z9e=n(RA,"P",{});var S3t=s(z9e);jPr=r(S3t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),S3t.forEach(t),DPr=i(RA),af=n(RA,"P",{});var SZ=s(af);GPr=r(SZ,`Note:
Loading a model from its configuration file does `),Q9e=n(SZ,"STRONG",{});var R3t=s(Q9e);OPr=r(R3t,"not"),R3t.forEach(t),VPr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(SZ,"A",{href:!0});var B3t=s(PY);XPr=r(B3t,"from_pretrained()"),B3t.forEach(t),zPr=r(SZ," to load the model weights."),SZ.forEach(t),QPr=i(RA),T(f3.$$.fragment,RA),RA.forEach(t),WPr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(jx.$$.fragment,ai),HPr=i(ai),W9e=n(ai,"P",{});var P3t=s(W9e);UPr=r(P3t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),P3t.forEach(t),JPr=i(ai),En=n(ai,"P",{});var BA=s(En);YPr=r(BA,"The model class to instantiate is selected based on the "),H9e=n(BA,"CODE",{});var I3t=s(H9e);KPr=r(I3t,"model_type"),I3t.forEach(t),ZPr=r(BA,` property of the config object (either
passed as an argument or loaded from `),U9e=n(BA,"CODE",{});var q3t=s(U9e);eIr=r(q3t,"pretrained_model_name_or_path"),q3t.forEach(t),oIr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J9e=n(BA,"CODE",{});var N3t=s(J9e);rIr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),tIr=r(BA,":"),BA.forEach(t),aIr=i(ai),Dx=n(ai,"UL",{});var fje=s(Dx);m3=n(fje,"LI",{});var ePe=s(m3);Y9e=n(ePe,"STRONG",{});var j3t=s(Y9e);nIr=r(j3t,"beit"),j3t.forEach(t),sIr=r(ePe," \u2014 "),IY=n(ePe,"A",{href:!0});var D3t=s(IY);lIr=r(D3t,"FlaxBeitForImageClassification"),D3t.forEach(t),iIr=r(ePe," (BEiT model)"),ePe.forEach(t),dIr=i(fje),g3=n(fje,"LI",{});var oPe=s(g3);K9e=n(oPe,"STRONG",{});var G3t=s(K9e);cIr=r(G3t,"vit"),G3t.forEach(t),fIr=r(oPe," \u2014 "),qY=n(oPe,"A",{href:!0});var O3t=s(qY);mIr=r(O3t,"FlaxViTForImageClassification"),O3t.forEach(t),gIr=r(oPe," (ViT model)"),oPe.forEach(t),fje.forEach(t),hIr=i(ai),T(h3.$$.fragment,ai),ai.forEach(t),ti.forEach(t),aqe=i(f),nf=n(f,"H2",{class:!0});var mje=s(nf);p3=n(mje,"A",{id:!0,class:!0,href:!0});var V3t=s(p3);Z9e=n(V3t,"SPAN",{});var X3t=s(Z9e);T(Gx.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),pIr=i(mje),eMe=n(mje,"SPAN",{});var z3t=s(eMe);uIr=r(z3t,"FlaxAutoModelForVision2Seq"),z3t.forEach(t),mje.forEach(t),nqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(Ox.$$.fragment,ni),_Ir=i(ni),sf=n(ni,"P",{});var RZ=s(sf);bIr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),NY=n(RZ,"A",{href:!0});var Q3t=s(NY);vIr=r(Q3t,"from_pretrained()"),Q3t.forEach(t),FIr=r(RZ," class method or the "),jY=n(RZ,"A",{href:!0});var W3t=s(jY);TIr=r(W3t,"from_config()"),W3t.forEach(t),MIr=r(RZ,` class
method.`),RZ.forEach(t),EIr=i(ni),Vx=n(ni,"P",{});var gje=s(Vx);CIr=r(gje,"This class cannot be instantiated directly using "),oMe=n(gje,"CODE",{});var H3t=s(oMe);wIr=r(H3t,"__init__()"),H3t.forEach(t),AIr=r(gje," (throws an error)."),gje.forEach(t),yIr=i(ni),Jt=n(ni,"DIV",{class:!0});var PA=s(Jt);T(Xx.$$.fragment,PA),LIr=i(PA),rMe=n(PA,"P",{});var U3t=s(rMe);xIr=r(U3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U3t.forEach(t),$Ir=i(PA),lf=n(PA,"P",{});var BZ=s(lf);kIr=r(BZ,`Note:
Loading a model from its configuration file does `),tMe=n(BZ,"STRONG",{});var J3t=s(tMe);SIr=r(J3t,"not"),J3t.forEach(t),RIr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DY=n(BZ,"A",{href:!0});var Y3t=s(DY);BIr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),PIr=r(BZ," to load the model weights."),BZ.forEach(t),IIr=i(PA),T(u3.$$.fragment,PA),PA.forEach(t),qIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(zx.$$.fragment,si),NIr=i(si),aMe=n(si,"P",{});var K3t=s(aMe);jIr=r(K3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K3t.forEach(t),DIr=i(si),Cn=n(si,"P",{});var IA=s(Cn);GIr=r(IA,"The model class to instantiate is selected based on the "),nMe=n(IA,"CODE",{});var Z3t=s(nMe);OIr=r(Z3t,"model_type"),Z3t.forEach(t),VIr=r(IA,` property of the config object (either
passed as an argument or loaded from `),sMe=n(IA,"CODE",{});var ewt=s(sMe);XIr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),zIr=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(IA,"CODE",{});var owt=s(lMe);QIr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),WIr=r(IA,":"),IA.forEach(t),HIr=i(si),iMe=n(si,"UL",{});var rwt=s(iMe);_3=n(rwt,"LI",{});var rPe=s(_3);dMe=n(rPe,"STRONG",{});var twt=s(dMe);UIr=r(twt,"vision-encoder-decoder"),twt.forEach(t),JIr=r(rPe," \u2014 "),GY=n(rPe,"A",{href:!0});var awt=s(GY);YIr=r(awt,"FlaxVisionEncoderDecoderModel"),awt.forEach(t),KIr=r(rPe," (Vision Encoder decoder model)"),rPe.forEach(t),rwt.forEach(t),ZIr=i(si),T(b3.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(i0t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(c$,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(f$,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertConfig"),c(m$,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig"),c(g$,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitConfig"),c(h$,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertConfig"),c(p$,"href","/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(u$,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_$,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(b$,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(v$,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(F$,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertConfig"),c(T$,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineConfig"),c(M$,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPConfig"),c(E$,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertConfig"),c(C$,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextConfig"),c(w$,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLConfig"),c(A$,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(y$,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(L$,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(x$,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaConfig"),c($$,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(k$,"href","/docs/transformers/pr_12695/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(S$,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTConfig"),c(R$,"href","/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrConfig"),c(B$,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertConfig"),c(P$,"href","/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRConfig"),c(I$,"href","/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTConfig"),c(q$,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraConfig"),c(N$,"href","/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(j$,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertConfig"),c(D$,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetConfig"),c(G$,"href","/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTConfig"),c(O$,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelConfig"),c(V$,"href","/docs/transformers/pr_12695/en/model_doc/glpn#transformers.GLPNConfig"),c(X$,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Config"),c(z$,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Q$,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJConfig"),c(W$,"href","/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertConfig"),c(H$,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertConfig"),c(U$,"href","/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(J$,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Y$,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(K$,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDConfig"),c(Z$,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerConfig"),c(ek,"href","/docs/transformers/pr_12695/en/model_doc/luke#transformers.LukeConfig"),c(ok,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertConfig"),c(rk,"href","/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Config"),c(tk,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianConfig"),c(ak,"href","/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(nk,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartConfig"),c(sk,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(lk,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(ik,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetConfig"),c(dk,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Config"),c(ck,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(fk,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(mk,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusConfig"),c(gk,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverConfig"),c(hk,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartConfig"),c(pk,"href","/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(uk,"href","/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(_k,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(bk,"href","/docs/transformers/pr_12695/en/model_doc/rag#transformers.RagConfig"),c(vk,"href","/docs/transformers/pr_12695/en/model_doc/realm#transformers.RealmConfig"),c(Fk,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerConfig"),c(Tk,"href","/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetConfig"),c(Mk,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertConfig"),c(Ek,"href","/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetConfig"),c(Ck,"href","/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertConfig"),c(wk,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaConfig"),c(Ak,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerConfig"),c(yk,"href","/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerConfig"),c(Lk,"href","/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWConfig"),c(xk,"href","/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDConfig"),c($k,"href","/docs/transformers/pr_12695/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(kk,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Sk,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Rk,"href","/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterConfig"),c(Bk,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Pk,"href","/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinConfig"),c(Ik,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Config"),c(qk,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasConfig"),c(Nk,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartConfig"),c(jk,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Dk,"href","/docs/transformers/pr_12695/en/model_doc/trocr#transformers.TrOCRConfig"),c(Gk,"href","/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Ok,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Vk,"href","/docs/transformers/pr_12695/en/model_doc/van#transformers.VanConfig"),c(Xk,"href","/docs/transformers/pr_12695/en/model_doc/vilt#transformers.ViltConfig"),c(zk,"href","/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Qk,"href","/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Wk,"href","/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Hk,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTConfig"),c(Uk,"href","/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Jk,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Yk,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMConfig"),c(Kk,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMConfig"),c(Zk,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMConfig"),c(eS,"href","/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(oS,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(rS,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(tS,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetConfig"),c(aS,"href","/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosConfig"),c(nS,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(sS,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(lS,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizer"),c(iS,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(dS,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartTokenizer"),c(cS,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartTokenizerFast"),c(fS,"href","/docs/transformers/pr_12695/en/model_doc/barthez#transformers.BarthezTokenizer"),c(mS,"href","/docs/transformers/pr_12695/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(gS,"href","/docs/transformers/pr_12695/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(hS,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizer"),c(pS,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizerFast"),c(uS,"href","/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(_S,"href","/docs/transformers/pr_12695/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(bS,"href","/docs/transformers/pr_12695/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(vS,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(FS,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(TS,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(MS,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(ES,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(CS,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(wS,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(AS,"href","/docs/transformers/pr_12695/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(yS,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertTokenizer"),c(LS,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(xS,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineTokenizer"),c($S,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPTokenizer"),c(kS,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(SS,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(RS,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(BS,"href","/docs/transformers/pr_12695/en/model_doc/cpm#transformers.CpmTokenizer"),c(PS,"href","/docs/transformers/pr_12695/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(IS,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(qS,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizer"),c(NS,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jS,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaTokenizer"),c(DS,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(GS,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(OS,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(VS,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(XS,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(zS,"href","/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(QS,"href","/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(WS,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraTokenizer"),c(HS,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(US,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(JS,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetTokenizer"),c(YS,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(KS,"href","/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(ZS,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelTokenizer"),c(eR,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(oR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(aR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(nR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(sR,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(lR,"href","/docs/transformers/pr_12695/en/model_doc/herbert#transformers.HerbertTokenizer"),c(iR,"href","/docs/transformers/pr_12695/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(dR,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(cR,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizer"),c(fR,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mR,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(gR,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(hR,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(pR,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(uR,"href","/docs/transformers/pr_12695/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(_R,"href","/docs/transformers/pr_12695/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(bR,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDTokenizer"),c(vR,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDTokenizerFast"),c(FR,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerTokenizer"),c(TR,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(MR,"href","/docs/transformers/pr_12695/en/model_doc/luke#transformers.LukeTokenizer"),c(ER,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(CR,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(wR,"href","/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(AR,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianTokenizer"),c(yR,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartTokenizer"),c(LR,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(xR,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBart50Tokenizer"),c($R,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(kR,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizer"),c(SR,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizerFast"),c(RR,"href","/docs/transformers/pr_12695/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BR,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PR,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(IR,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qR,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(NR,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.T5Tokenizer"),c(jR,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.T5TokenizerFast"),c(DR,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizer"),c(GR,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(OR,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(VR,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(XR,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zR,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QR,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(WR,"href","/docs/transformers/pr_12695/en/model_doc/phobert#transformers.PhobertTokenizer"),c(HR,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartTokenizer"),c(UR,"href","/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(JR,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizer"),c(YR,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizerFast"),c(KR,"href","/docs/transformers/pr_12695/en/model_doc/rag#transformers.RagTokenizer"),c(ZR,"href","/docs/transformers/pr_12695/en/model_doc/realm#transformers.RealmTokenizer"),c(eB,"href","/docs/transformers/pr_12695/en/model_doc/realm#transformers.RealmTokenizerFast"),c(oB,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerTokenizer"),c(rB,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(tB,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertTokenizer"),c(aB,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(nB,"href","/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(sB,"href","/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(lB,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(cB,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(fB,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(mB,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(gB,"href","/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterTokenizer"),c(hB,"href","/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(pB,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(uB,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.T5Tokenizer"),c(bB,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.T5TokenizerFast"),c(vB,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasTokenizer"),c(FB,"href","/docs/transformers/pr_12695/en/model_doc/tapex#transformers.TapexTokenizer"),c(TB,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(MB,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizer"),c(EB,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertTokenizerFast"),c(CB,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(AB,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMTokenizer"),c(yB,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMTokenizer"),c(xB,"href","/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($B,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(kB,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BB,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(PB,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizer"),c(qB,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(NB,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(jB,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(GB,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(VB,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(XB,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(zB,"href","/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QB,"href","/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_12695/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(HB,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UB,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(YB,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(KB,"href","/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eP,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(rP,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(tP,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(aP,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nP,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sP,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iP,"href","/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(dP,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(cP,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPProcessor"),c(fP,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(mP,"href","/docs/transformers/pr_12695/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(gP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pP,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(uP,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(_P,"href","/docs/transformers/pr_12695/en/model_doc/trocr#transformers.TrOCRProcessor"),c(bP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FP,"href","/docs/transformers/pr_12695/en/model_doc/vilt#transformers.ViltProcessor"),c(TP,"href","/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(MP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(EP,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(CP,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wP,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AP,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yP,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertModel"),c(LP,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartModel"),c(xP,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitModel"),c($P,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertModel"),c(kP,"href","/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(SP,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdModel"),c(RP,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(BP,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(PP,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(IP,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertModel"),c(qP,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineModel"),c(NP,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.CLIPModel"),c(jP,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertModel"),c(DP,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextModel"),c(GP,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLModel"),c(OP,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(VP,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(XP,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(zP,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaModel"),c(QP,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(WP,"href","/docs/transformers/pr_12695/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(HP,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTModel"),c(UP,"href","/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrModel"),c(JP,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertModel"),c(YP,"href","/docs/transformers/pr_12695/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(KP,"href","/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTModel"),c(ZP,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraModel"),c(eI,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertModel"),c(oI,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetModel"),c(rI,"href","/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTModel"),c(tI,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelModel"),c(aI,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelBaseModel"),c(nI,"href","/docs/transformers/pr_12695/en/model_doc/glpn#transformers.GLPNModel"),c(sI,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2Model"),c(lI,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(iI,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJModel"),c(dI,"href","/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertModel"),c(cI,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertModel"),c(fI,"href","/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(mI,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(gI,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(hI,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDModel"),c(pI,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerModel"),c(uI,"href","/docs/transformers/pr_12695/en/model_doc/luke#transformers.LukeModel"),c(_I,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertModel"),c(bI,"href","/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100Model"),c(vI,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianModel"),c(FI,"href","/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerModel"),c(TI,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartModel"),c(MI,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(EI,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertModel"),c(CI,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetModel"),c(wI,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5Model"),c(AI,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerModel"),c(yI,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(LI,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusModel"),c(xI,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverModel"),c($I,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartModel"),c(kI,"href","/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerModel"),c(SI,"href","/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(RI,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertModel"),c(BI,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerModel"),c(PI,"href","/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetModel"),c(II,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertModel"),c(qI,"href","/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetModel"),c(NI,"href","/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertModel"),c(jI,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaModel"),c(DI,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerModel"),c(GI,"href","/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerModel"),c(OI,"href","/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWModel"),c(VI,"href","/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDModel"),c(XI,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(zI,"href","/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterModel"),c(QI,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(WI,"href","/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinModel"),c(HI,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5Model"),c(UI,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasModel"),c(JI,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(YI,"href","/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechModel"),c(KI,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(ZI,"href","/docs/transformers/pr_12695/en/model_doc/van#transformers.VanModel"),c(eq,"href","/docs/transformers/pr_12695/en/model_doc/vilt#transformers.ViltModel"),c(oq,"href","/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(rq,"href","/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertModel"),c(tq,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTModel"),c(aq,"href","/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(nq,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(sq,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMModel"),c(lq,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMModel"),c(iq,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMModel"),c(dq,"href","/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(cq,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(fq,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(mq,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetModel"),c(gq,"href","/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosModel"),c(hq,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(pq,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uq,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_q,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bq,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForPreTraining"),c(vq,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Fq,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForPreTraining"),c(Tq,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Mq,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Eq,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Cq,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(wq,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Aq,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(yq,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Lq,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForPreTraining"),c(xq,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c($q,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForPreTraining"),c(kq,"href","/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Sq,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Rq,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bq,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Pq,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Iq,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(qq,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Nq,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(jq,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Dq,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Gq,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oq,"href","/docs/transformers/pr_12695/en/model_doc/retribert#transformers.RetriBertModel"),c(Vq,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Xq,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(zq,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Wq,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Hq,"href","/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Uq,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Jq,"href","/docs/transformers/pr_12695/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Yq,"href","/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Kq,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Zq,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eN,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oN,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rN,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v_,"id","transformers.AutoModelForCausalLM"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(tN,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aN,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nN,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sN,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForCausalLM"),c(lN,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertLMHeadModel"),c(iN,"href","/docs/transformers/pr_12695/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(dN,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(cN,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(fN,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(mN,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(gN,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(hN,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(pN,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(uN,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForCausalLM"),c(_N,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bN,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(vN,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(FN,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianForCausalLM"),c(TN,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForCausalLM"),c(MN,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(EN,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(CN,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(wN,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(AN,"href","/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(yN,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(LN,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(xN,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForCausalLM"),c($N,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(kN,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(SN,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(RN,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BN,"href","/docs/transformers/pr_12695/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(PN,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(IN,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qN,"href","/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(NN,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(jN,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(DN,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a2,"id","transformers.AutoModelForMaskedLM"),c(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a2,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(GN,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(zN,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForMaskedLM"),c(WN,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(HN,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(UN,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(YN,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(KN,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ZN,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(oj,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(rj,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(tj,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(aj,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(sj,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(lj,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(fj,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(mj,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(gj,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(hj,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(pj,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(uj,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(_j,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(bj,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(vj,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Fj,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Tj,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Mj,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Ej,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V2,"id","transformers.AutoModelForSeq2SeqLM"),c(V2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(Cj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Aj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yj,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Lj,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c($j,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Sj,"href","/docs/transformers/pr_12695/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_12695/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.MarianMTModel"),c(Ij,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(qj,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_12695/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_12695/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c1,"id","transformers.AutoModelForSequenceClassification"),c(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c1,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(Xj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qj,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(eD,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(oD,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(rD,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(tD,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(aD,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(nD,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(lD,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(iD,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(dD,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(cD,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(fD,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(mD,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(gD,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(hD,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(pD,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(uD,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_D,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(bD,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vD,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FD,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MD,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(ED,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(CD,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(wD,"href","/docs/transformers/pr_12695/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(AD,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yD,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(LD,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(xD,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c($D,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(kD,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(SD,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(RD,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForSequenceClassification"),c(BD,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(PD,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(ID,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(qD,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(ND,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jD,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lb,"id","transformers.AutoModelForMultipleChoice"),c(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lb,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(DD,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GD,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OD,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VD,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XD,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QD,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WD,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HD,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UD,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JD,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(KD,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(eG,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(oG,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(rG,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(tG,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(nG,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(sG,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(lG,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(iG,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(dG,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(cG,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(fG,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(mG,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(gG,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(hG,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(pG,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(uG,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jb,"id","transformers.AutoModelForNextSentencePrediction"),c(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(_G,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vG,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(TG,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(MG,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(EG,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(CG,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForTokenClassification"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(wG,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AG,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yG,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LG,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(xG,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForTokenClassification"),c($G,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(kG,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(SG,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForTokenClassification"),c(RG,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(BG,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(PG,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(IG,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(qG,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(NG,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(jG,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(DG,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(GG,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(OG,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(VG,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(zG,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(QG,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(WG,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(HG,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(UG,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(JG,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(YG,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(KG,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(ZG,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(eO,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(oO,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(rO,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(tO,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(aO,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(nO,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(sO,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.AutoModelForQuestionAnswering"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(lO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cO,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_12695/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_12695/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(CO,"href","/docs/transformers/pr_12695/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_12695/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_12695/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.LEDForQuestionAnswering"),c($O,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_12695/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_12695/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_12695/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_12695/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_12695/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_12695/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(zO,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(WO,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(HO,"href","/docs/transformers/pr_12695/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fv,"id","transformers.AutoModelForTableQuestionAnswering"),c(Fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(UO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForImageClassification"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(ZO,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rV,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitForImageClassification"),c(tV,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(aV,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(nV,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForImageClassification"),c(sV,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(lV,"href","/docs/transformers/pr_12695/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(iV,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(dV,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(cV,"href","/docs/transformers/pr_12695/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(fV,"href","/docs/transformers/pr_12695/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(mV,"href","/docs/transformers/pr_12695/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(gV,"href","/docs/transformers/pr_12695/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(hV,"href","/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(pV,"href","/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinForImageClassification"),c(uV,"href","/docs/transformers/pr_12695/en/model_doc/van#transformers.VanForImageClassification"),c(_V,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForVision2Seq"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(bV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForAudioClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(MV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(AV,"href","/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(yV,"href","/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(LV,"href","/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(xV,"href","/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c($V,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(kV,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(SV,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tF,"id","transformers.AutoModelForAudioFrameClassification"),c(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tF,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(RV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(qV,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(NV,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(jV,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForCTC"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(DV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VV,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(XV,"href","/docs/transformers/pr_12695/en/model_doc/hubert#transformers.HubertForCTC"),c(zV,"href","/docs/transformers/pr_12695/en/model_doc/sew#transformers.SEWForCTC"),c(QV,"href","/docs/transformers/pr_12695/en/model_doc/sew-d#transformers.SEWDForCTC"),c(WV,"href","/docs/transformers/pr_12695/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(HV,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(UV,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(JV,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(YV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZV,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eX,"href","/docs/transformers/pr_12695/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(oX,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xF,"id","transformers.AutoModelForAudioXVector"),c(xF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xF,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(rX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(sX,"href","/docs/transformers/pr_12695/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(lX,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(iX,"href","/docs/transformers/pr_12695/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForMaskedImageModeling"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(dX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mX,"href","/docs/transformers/pr_12695/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(gX,"href","/docs/transformers/pr_12695/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(hX,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForObjectDetection"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(pX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_X,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bX,"href","/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrForObjectDetection"),c(vX,"href","/docs/transformers/pr_12695/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JF,"id","transformers.AutoModelForImageSegmentation"),c(JF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JF,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(FX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_12695/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.AutoModelForSemanticSegmentation"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(CX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yX,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(LX,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(xX,"href","/docs/transformers/pr_12695/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c($X,"href","/docs/transformers/pr_12695/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d6,"id","transformers.AutoModelForInstanceSegmentation"),c(d6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(kX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_12695/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h6,"id","transformers.TFAutoModel"),c(h6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h6,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(PX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qX,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertModel"),c(jX,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartModel"),c(DX,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertModel"),c(GX,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(OX,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(VX,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertModel"),c(XX,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.TFCLIPModel"),c(zX,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertModel"),c(QX,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.TFConvNextModel"),c(WX,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLModel"),c(HX,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(UX,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaModel"),c(JX,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(YX,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(KX,"href","/docs/transformers/pr_12695/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(ZX,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraModel"),c(ez,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(oz,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelModel"),c(rz,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(tz,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2Model"),c(az,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJModel"),c(nz,"href","/docs/transformers/pr_12695/en/model_doc/hubert#transformers.TFHubertModel"),c(sz,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(lz,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.TFLEDModel"),c(iz,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerModel"),c(dz,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.TFLxmertModel"),c(cz,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.TFMarianModel"),c(fz,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.TFMBartModel"),c(mz,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(gz,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetModel"),c(hz,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.TFMT5Model"),c(pz,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(uz,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.TFPegasusModel"),c(_z,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertModel"),c(bz,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaModel"),c(vz,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Fz,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Tz,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5Model"),c(Mz,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasModel"),c(Ez,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Cz,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.TFViTModel"),c(wz,"href","/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Az,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(yz,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMModel"),c(Lz,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(xz,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.TFAutoModelForPreTraining"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c($z,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kz,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Sz,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rz,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Bz,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(Pz,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Iz,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(qz,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Nz,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(jz,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Dz,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Gz,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Oz,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Vz,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Xz,"href","/docs/transformers/pr_12695/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(zz,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Qz,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Wz,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Hz,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Uz,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Jz,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Yz,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Kz,"href","/docs/transformers/pr_12695/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(Zz,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eQ,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(oQ,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.TFAutoModelForCausalLM"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(rQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(sQ,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(lQ,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iQ,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dQ,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(cQ,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fQ,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(mQ,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(gQ,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(hQ,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(pQ,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(uQ,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.TFAutoModelForImageClassification"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_12695/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(TQ,"href","/docs/transformers/pr_12695/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(MQ,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e9,"id","transformers.TFAutoModelForMaskedLM"),c(e9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e9,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(EQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AQ,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yQ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(kQ,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(SQ,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BQ,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PQ,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(IQ,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qQ,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NQ,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(jQ,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(DQ,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(OQ,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(VQ,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(XQ,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(E9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(QQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HQ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UQ,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(YQ,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(ZQ,"href","/docs/transformers/pr_12695/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(eW,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.TFMarianMTModel"),c(oW,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(rW,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(tW,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I9,"id","transformers.TFAutoModelForSequenceClassification"),c(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I9,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(nW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iW,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(dW,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(cW,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fW,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_12695/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(gW,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(hW,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pW,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(_W,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(vW,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(FW,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(TW,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(MW,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(EW,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(CW,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(wW,"href","/docs/transformers/pr_12695/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(AW,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(yW,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LW,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(xW,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c($W,"href","/docs/transformers/pr_12695/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(kW,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(SW,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(RW,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForMultipleChoice"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(BW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NW,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(jW,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(VW,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(zW,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(QW,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(WW,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(HW,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(JW,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(YW,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(KW,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForNextSentencePrediction"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(eH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tH,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(aH,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(nH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_12695/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DM,"id","transformers.TFAutoModelForTokenClassification"),c(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(DM,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(dH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(gH,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(hH,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(pH,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(uH,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(_H,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(bH,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(vH,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(FH,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(TH,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(MH,"href","/docs/transformers/pr_12695/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(EH,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(CH,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(wH,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(AH,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LH,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(xH,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c($H,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(kH,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.TFAutoModelForQuestionAnswering"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(SH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BH,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_12695/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_12695/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_12695/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_12695/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(VH,"href","/docs/transformers/pr_12695/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(XH,"href","/docs/transformers/pr_12695/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(QH,"href","/docs/transformers/pr_12695/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_12695/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_12695/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_12695/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_12695/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(ZH,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_12695/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S4,"id","transformers.TFAutoModelForVision2Seq"),c(S4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S4,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(oU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aU,"href","/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(I4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(nU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_12695/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D4,"id","transformers.FlaxAutoModel"),c(D4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D4,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(dU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mU,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertModel"),c(gU,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartModel"),c(hU,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.FlaxBeitModel"),c(pU,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertModel"),c(uU,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(_U,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(bU,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(vU,"href","/docs/transformers/pr_12695/en/model_doc/clip#transformers.FlaxCLIPModel"),c(FU,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(TU,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraModel"),c(MU,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(EU,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(CU,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(wU,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.FlaxMarianModel"),c(AU,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartModel"),c(yU,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5Model"),c(LU,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(xU,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaModel"),c($U,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(kU,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5Model"),c(SU,"href","/docs/transformers/pr_12695/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(RU,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.FlaxViTModel"),c(BU,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(PU,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(IU,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.FlaxAutoModelForCausalLM"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(qU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(GU,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(OU,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(VU,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(XU,"href","/docs/transformers/pr_12695/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(zU,"href","/docs/transformers/pr_12695/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QU,"href","/docs/transformers/pr_12695/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(WU,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(HU,"href","/docs/transformers/pr_12695/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.FlaxAutoModelForPreTraining"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(UU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ZU,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(oJ,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(rJ,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(tJ,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(sJ,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(lJ,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_12695/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(dJ,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForMaskedLM"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(cJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gJ,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(hJ,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(pJ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(_J,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(vJ,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(TJ,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(MJ,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(EJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(yJ,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(LJ,"href","/docs/transformers/pr_12695/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_12695/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c($J,"href","/docs/transformers/pr_12695/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(kJ,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(SJ,"href","/docs/transformers/pr_12695/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(RJ,"href","/docs/transformers/pr_12695/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_12695/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mC,"id","transformers.FlaxAutoModelForSequenceClassification"),c(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mC,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(PJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(jJ,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(DJ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wC,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(wC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(HJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(KJ,"href","/docs/transformers/pr_12695/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(ZJ,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_12695/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.FlaxAutoModelForTokenClassification"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(lY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cY,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(fY,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(mY,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(gY,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(hY,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(pY,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(uY,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(_Y,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UC,"id","transformers.FlaxAutoModelForMultipleChoice"),c(UC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UC,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(bY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TY,"href","/docs/transformers/pr_12695/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(MY,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(EY,"href","/docs/transformers/pr_12695/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(CY,"href","/docs/transformers/pr_12695/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_12695/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(AY,"href","/docs/transformers/pr_12695/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(yY,"href","/docs/transformers/pr_12695/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(LY,"href","/docs/transformers/pr_12695/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s3,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(s3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s3,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(xY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Y,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SY,"href","/docs/transformers/pr_12695/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c3,"id","transformers.FlaxAutoModelForImageClassification"),c(c3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c3,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(RY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IY,"href","/docs/transformers/pr_12695/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(qY,"href","/docs/transformers/pr_12695/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p3,"id","transformers.FlaxAutoModelForVision2Seq"),c(p3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p3,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(NY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DY,"href","/docs/transformers/pr_12695/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GY,"href","/docs/transformers/pr_12695/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,qA),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,NA),e(Xe,yn),e(Xe,Ln),e(Ln,jA),e(Xe,fi),e(Xe,xn),e(xn,DA),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,a$),e(Ae,gi),e(gi,n$),e(Ae,s$),b(f,Eo,_),b(f,Ea,_),e(Ea,l$),e(Ea,pf),e(pf,i$),e(Ea,hje),b(f,tPe,_),b(f,hi,_),e(hi,uf),e(uf,PZ),M(GA,PZ,null),e(hi,pje),e(hi,IZ),e(IZ,uje),b(f,aPe,_),b(f,$n,_),e($n,_je),e($n,qZ),e(qZ,bje),e($n,vje),e($n,NZ),e(NZ,Fje),e($n,Tje),b(f,nPe,_),M(OA,f,_),b(f,sPe,_),b(f,d$,_),e(d$,Mje),b(f,lPe,_),M(_f,f,_),b(f,iPe,_),b(f,pi,_),e(pi,bf),e(bf,jZ),M(VA,jZ,null),e(pi,Eje),e(pi,DZ),e(DZ,Cje),b(f,dPe,_),b(f,Co,_),M(XA,Co,null),e(Co,wje),e(Co,zA),e(zA,Aje),e(zA,c$),e(c$,yje),e(zA,Lje),e(Co,xje),e(Co,QA),e(QA,$je),e(QA,GZ),e(GZ,kje),e(QA,Sje),e(Co,Rje),e(Co,Er),M(WA,Er,null),e(Er,Bje),e(Er,OZ),e(OZ,Pje),e(Er,Ije),e(Er,ui),e(ui,qje),e(ui,VZ),e(VZ,Nje),e(ui,jje),e(ui,XZ),e(XZ,Dje),e(ui,Gje),e(Er,Oje),e(Er,y),e(y,vf),e(vf,zZ),e(zZ,Vje),e(vf,Xje),e(vf,f$),e(f$,zje),e(vf,Qje),e(y,Wje),e(y,Ff),e(Ff,QZ),e(QZ,Hje),e(Ff,Uje),e(Ff,m$),e(m$,Jje),e(Ff,Yje),e(y,Kje),e(y,Tf),e(Tf,WZ),e(WZ,Zje),e(Tf,eDe),e(Tf,g$),e(g$,oDe),e(Tf,rDe),e(y,tDe),e(y,Mf),e(Mf,HZ),e(HZ,aDe),e(Mf,nDe),e(Mf,h$),e(h$,sDe),e(Mf,lDe),e(y,iDe),e(y,Ef),e(Ef,UZ),e(UZ,dDe),e(Ef,cDe),e(Ef,p$),e(p$,fDe),e(Ef,mDe),e(y,gDe),e(y,Cf),e(Cf,JZ),e(JZ,hDe),e(Cf,pDe),e(Cf,u$),e(u$,uDe),e(Cf,_De),e(y,bDe),e(y,wf),e(wf,YZ),e(YZ,vDe),e(wf,FDe),e(wf,_$),e(_$,TDe),e(wf,MDe),e(y,EDe),e(y,Af),e(Af,KZ),e(KZ,CDe),e(Af,wDe),e(Af,b$),e(b$,ADe),e(Af,yDe),e(y,LDe),e(y,yf),e(yf,ZZ),e(ZZ,xDe),e(yf,$De),e(yf,v$),e(v$,kDe),e(yf,SDe),e(y,RDe),e(y,Lf),e(Lf,eee),e(eee,BDe),e(Lf,PDe),e(Lf,F$),e(F$,IDe),e(Lf,qDe),e(y,NDe),e(y,xf),e(xf,oee),e(oee,jDe),e(xf,DDe),e(xf,T$),e(T$,GDe),e(xf,ODe),e(y,VDe),e(y,$f),e($f,ree),e(ree,XDe),e($f,zDe),e($f,M$),e(M$,QDe),e($f,WDe),e(y,HDe),e(y,kf),e(kf,tee),e(tee,UDe),e(kf,JDe),e(kf,E$),e(E$,YDe),e(kf,KDe),e(y,ZDe),e(y,Sf),e(Sf,aee),e(aee,eGe),e(Sf,oGe),e(Sf,C$),e(C$,rGe),e(Sf,tGe),e(y,aGe),e(y,Rf),e(Rf,nee),e(nee,nGe),e(Rf,sGe),e(Rf,w$),e(w$,lGe),e(Rf,iGe),e(y,dGe),e(y,Bf),e(Bf,see),e(see,cGe),e(Bf,fGe),e(Bf,A$),e(A$,mGe),e(Bf,gGe),e(y,hGe),e(y,Pf),e(Pf,lee),e(lee,pGe),e(Pf,uGe),e(Pf,y$),e(y$,_Ge),e(Pf,bGe),e(y,vGe),e(y,If),e(If,iee),e(iee,FGe),e(If,TGe),e(If,L$),e(L$,MGe),e(If,EGe),e(y,CGe),e(y,qf),e(qf,dee),e(dee,wGe),e(qf,AGe),e(qf,x$),e(x$,yGe),e(qf,LGe),e(y,xGe),e(y,Nf),e(Nf,cee),e(cee,$Ge),e(Nf,kGe),e(Nf,$$),e($$,SGe),e(Nf,RGe),e(y,BGe),e(y,jf),e(jf,fee),e(fee,PGe),e(jf,IGe),e(jf,k$),e(k$,qGe),e(jf,NGe),e(y,jGe),e(y,Df),e(Df,mee),e(mee,DGe),e(Df,GGe),e(Df,S$),e(S$,OGe),e(Df,VGe),e(y,XGe),e(y,Gf),e(Gf,gee),e(gee,zGe),e(Gf,QGe),e(Gf,R$),e(R$,WGe),e(Gf,HGe),e(y,UGe),e(y,Of),e(Of,hee),e(hee,JGe),e(Of,YGe),e(Of,B$),e(B$,KGe),e(Of,ZGe),e(y,eOe),e(y,Vf),e(Vf,pee),e(pee,oOe),e(Vf,rOe),e(Vf,P$),e(P$,tOe),e(Vf,aOe),e(y,nOe),e(y,Xf),e(Xf,uee),e(uee,sOe),e(Xf,lOe),e(Xf,I$),e(I$,iOe),e(Xf,dOe),e(y,cOe),e(y,zf),e(zf,_ee),e(_ee,fOe),e(zf,mOe),e(zf,q$),e(q$,gOe),e(zf,hOe),e(y,pOe),e(y,Qf),e(Qf,bee),e(bee,uOe),e(Qf,_Oe),e(Qf,N$),e(N$,bOe),e(Qf,vOe),e(y,FOe),e(y,Wf),e(Wf,vee),e(vee,TOe),e(Wf,MOe),e(Wf,j$),e(j$,EOe),e(Wf,COe),e(y,wOe),e(y,Hf),e(Hf,Fee),e(Fee,AOe),e(Hf,yOe),e(Hf,D$),e(D$,LOe),e(Hf,xOe),e(y,$Oe),e(y,Uf),e(Uf,Tee),e(Tee,kOe),e(Uf,SOe),e(Uf,G$),e(G$,ROe),e(Uf,BOe),e(y,POe),e(y,Jf),e(Jf,Mee),e(Mee,IOe),e(Jf,qOe),e(Jf,O$),e(O$,NOe),e(Jf,jOe),e(y,DOe),e(y,Yf),e(Yf,Eee),e(Eee,GOe),e(Yf,OOe),e(Yf,V$),e(V$,VOe),e(Yf,XOe),e(y,zOe),e(y,Kf),e(Kf,Cee),e(Cee,QOe),e(Kf,WOe),e(Kf,X$),e(X$,HOe),e(Kf,UOe),e(y,JOe),e(y,Zf),e(Zf,wee),e(wee,YOe),e(Zf,KOe),e(Zf,z$),e(z$,ZOe),e(Zf,eVe),e(y,oVe),e(y,em),e(em,Aee),e(Aee,rVe),e(em,tVe),e(em,Q$),e(Q$,aVe),e(em,nVe),e(y,sVe),e(y,om),e(om,yee),e(yee,lVe),e(om,iVe),e(om,W$),e(W$,dVe),e(om,cVe),e(y,fVe),e(y,rm),e(rm,Lee),e(Lee,mVe),e(rm,gVe),e(rm,H$),e(H$,hVe),e(rm,pVe),e(y,uVe),e(y,tm),e(tm,xee),e(xee,_Ve),e(tm,bVe),e(tm,U$),e(U$,vVe),e(tm,FVe),e(y,TVe),e(y,am),e(am,$ee),e($ee,MVe),e(am,EVe),e(am,J$),e(J$,CVe),e(am,wVe),e(y,AVe),e(y,nm),e(nm,kee),e(kee,yVe),e(nm,LVe),e(nm,Y$),e(Y$,xVe),e(nm,$Ve),e(y,kVe),e(y,sm),e(sm,See),e(See,SVe),e(sm,RVe),e(sm,K$),e(K$,BVe),e(sm,PVe),e(y,IVe),e(y,lm),e(lm,Ree),e(Ree,qVe),e(lm,NVe),e(lm,Z$),e(Z$,jVe),e(lm,DVe),e(y,GVe),e(y,im),e(im,Bee),e(Bee,OVe),e(im,VVe),e(im,ek),e(ek,XVe),e(im,zVe),e(y,QVe),e(y,dm),e(dm,Pee),e(Pee,WVe),e(dm,HVe),e(dm,ok),e(ok,UVe),e(dm,JVe),e(y,YVe),e(y,cm),e(cm,Iee),e(Iee,KVe),e(cm,ZVe),e(cm,rk),e(rk,eXe),e(cm,oXe),e(y,rXe),e(y,fm),e(fm,qee),e(qee,tXe),e(fm,aXe),e(fm,tk),e(tk,nXe),e(fm,sXe),e(y,lXe),e(y,mm),e(mm,Nee),e(Nee,iXe),e(mm,dXe),e(mm,ak),e(ak,cXe),e(mm,fXe),e(y,mXe),e(y,gm),e(gm,jee),e(jee,gXe),e(gm,hXe),e(gm,nk),e(nk,pXe),e(gm,uXe),e(y,_Xe),e(y,hm),e(hm,Dee),e(Dee,bXe),e(hm,vXe),e(hm,sk),e(sk,FXe),e(hm,TXe),e(y,MXe),e(y,pm),e(pm,Gee),e(Gee,EXe),e(pm,CXe),e(pm,lk),e(lk,wXe),e(pm,AXe),e(y,yXe),e(y,um),e(um,Oee),e(Oee,LXe),e(um,xXe),e(um,ik),e(ik,$Xe),e(um,kXe),e(y,SXe),e(y,_m),e(_m,Vee),e(Vee,RXe),e(_m,BXe),e(_m,dk),e(dk,PXe),e(_m,IXe),e(y,qXe),e(y,bm),e(bm,Xee),e(Xee,NXe),e(bm,jXe),e(bm,ck),e(ck,DXe),e(bm,GXe),e(y,OXe),e(y,vm),e(vm,zee),e(zee,VXe),e(vm,XXe),e(vm,fk),e(fk,zXe),e(vm,QXe),e(y,WXe),e(y,Fm),e(Fm,Qee),e(Qee,HXe),e(Fm,UXe),e(Fm,mk),e(mk,JXe),e(Fm,YXe),e(y,KXe),e(y,Tm),e(Tm,Wee),e(Wee,ZXe),e(Tm,eze),e(Tm,gk),e(gk,oze),e(Tm,rze),e(y,tze),e(y,Mm),e(Mm,Hee),e(Hee,aze),e(Mm,nze),e(Mm,hk),e(hk,sze),e(Mm,lze),e(y,ize),e(y,Em),e(Em,Uee),e(Uee,dze),e(Em,cze),e(Em,pk),e(pk,fze),e(Em,mze),e(y,gze),e(y,Cm),e(Cm,Jee),e(Jee,hze),e(Cm,pze),e(Cm,uk),e(uk,uze),e(Cm,_ze),e(y,bze),e(y,wm),e(wm,Yee),e(Yee,vze),e(wm,Fze),e(wm,_k),e(_k,Tze),e(wm,Mze),e(y,Eze),e(y,Am),e(Am,Kee),e(Kee,Cze),e(Am,wze),e(Am,bk),e(bk,Aze),e(Am,yze),e(y,Lze),e(y,ym),e(ym,Zee),e(Zee,xze),e(ym,$ze),e(ym,vk),e(vk,kze),e(ym,Sze),e(y,Rze),e(y,Lm),e(Lm,eoe),e(eoe,Bze),e(Lm,Pze),e(Lm,Fk),e(Fk,Ize),e(Lm,qze),e(y,Nze),e(y,xm),e(xm,ooe),e(ooe,jze),e(xm,Dze),e(xm,Tk),e(Tk,Gze),e(xm,Oze),e(y,Vze),e(y,$m),e($m,roe),e(roe,Xze),e($m,zze),e($m,Mk),e(Mk,Qze),e($m,Wze),e(y,Hze),e(y,km),e(km,toe),e(toe,Uze),e(km,Jze),e(km,Ek),e(Ek,Yze),e(km,Kze),e(y,Zze),e(y,Sm),e(Sm,aoe),e(aoe,eQe),e(Sm,oQe),e(Sm,Ck),e(Ck,rQe),e(Sm,tQe),e(y,aQe),e(y,Rm),e(Rm,noe),e(noe,nQe),e(Rm,sQe),e(Rm,wk),e(wk,lQe),e(Rm,iQe),e(y,dQe),e(y,Bm),e(Bm,soe),e(soe,cQe),e(Bm,fQe),e(Bm,Ak),e(Ak,mQe),e(Bm,gQe),e(y,hQe),e(y,Pm),e(Pm,loe),e(loe,pQe),e(Pm,uQe),e(Pm,yk),e(yk,_Qe),e(Pm,bQe),e(y,vQe),e(y,Im),e(Im,ioe),e(ioe,FQe),e(Im,TQe),e(Im,Lk),e(Lk,MQe),e(Im,EQe),e(y,CQe),e(y,qm),e(qm,doe),e(doe,wQe),e(qm,AQe),e(qm,xk),e(xk,yQe),e(qm,LQe),e(y,xQe),e(y,Nm),e(Nm,coe),e(coe,$Qe),e(Nm,kQe),e(Nm,$k),e($k,SQe),e(Nm,RQe),e(y,BQe),e(y,jm),e(jm,foe),e(foe,PQe),e(jm,IQe),e(jm,kk),e(kk,qQe),e(jm,NQe),e(y,jQe),e(y,Dm),e(Dm,moe),e(moe,DQe),e(Dm,GQe),e(Dm,Sk),e(Sk,OQe),e(Dm,VQe),e(y,XQe),e(y,Gm),e(Gm,goe),e(goe,zQe),e(Gm,QQe),e(Gm,Rk),e(Rk,WQe),e(Gm,HQe),e(y,UQe),e(y,Om),e(Om,hoe),e(hoe,JQe),e(Om,YQe),e(Om,Bk),e(Bk,KQe),e(Om,ZQe),e(y,eWe),e(y,Vm),e(Vm,poe),e(poe,oWe),e(Vm,rWe),e(Vm,Pk),e(Pk,tWe),e(Vm,aWe),e(y,nWe),e(y,Xm),e(Xm,uoe),e(uoe,sWe),e(Xm,lWe),e(Xm,Ik),e(Ik,iWe),e(Xm,dWe),e(y,cWe),e(y,zm),e(zm,_oe),e(_oe,fWe),e(zm,mWe),e(zm,qk),e(qk,gWe),e(zm,hWe),e(y,pWe),e(y,Qm),e(Qm,boe),e(boe,uWe),e(Qm,_We),e(Qm,Nk),e(Nk,bWe),e(Qm,vWe),e(y,FWe),e(y,Wm),e(Wm,voe),e(voe,TWe),e(Wm,MWe),e(Wm,jk),e(jk,EWe),e(Wm,CWe),e(y,wWe),e(y,Hm),e(Hm,Foe),e(Foe,AWe),e(Hm,yWe),e(Hm,Dk),e(Dk,LWe),e(Hm,xWe),e(y,$We),e(y,Um),e(Um,Toe),e(Toe,kWe),e(Um,SWe),e(Um,Gk),e(Gk,RWe),e(Um,BWe),e(y,PWe),e(y,Jm),e(Jm,Moe),e(Moe,IWe),e(Jm,qWe),e(Jm,Ok),e(Ok,NWe),e(Jm,jWe),e(y,DWe),e(y,Ym),e(Ym,Eoe),e(Eoe,GWe),e(Ym,OWe),e(Ym,Vk),e(Vk,VWe),e(Ym,XWe),e(y,zWe),e(y,Km),e(Km,Coe),e(Coe,QWe),e(Km,WWe),e(Km,Xk),e(Xk,HWe),e(Km,UWe),e(y,JWe),e(y,Zm),e(Zm,woe),e(woe,YWe),e(Zm,KWe),e(Zm,zk),e(zk,ZWe),e(Zm,eHe),e(y,oHe),e(y,eg),e(eg,Aoe),e(Aoe,rHe),e(eg,tHe),e(eg,Qk),e(Qk,aHe),e(eg,nHe),e(y,sHe),e(y,og),e(og,yoe),e(yoe,lHe),e(og,iHe),e(og,Wk),e(Wk,dHe),e(og,cHe),e(y,fHe),e(y,rg),e(rg,Loe),e(Loe,mHe),e(rg,gHe),e(rg,Hk),e(Hk,hHe),e(rg,pHe),e(y,uHe),e(y,tg),e(tg,xoe),e(xoe,_He),e(tg,bHe),e(tg,Uk),e(Uk,vHe),e(tg,FHe),e(y,THe),e(y,ag),e(ag,$oe),e($oe,MHe),e(ag,EHe),e(ag,Jk),e(Jk,CHe),e(ag,wHe),e(y,AHe),e(y,ng),e(ng,koe),e(koe,yHe),e(ng,LHe),e(ng,Yk),e(Yk,xHe),e(ng,$He),e(y,kHe),e(y,sg),e(sg,Soe),e(Soe,SHe),e(sg,RHe),e(sg,Kk),e(Kk,BHe),e(sg,PHe),e(y,IHe),e(y,lg),e(lg,Roe),e(Roe,qHe),e(lg,NHe),e(lg,Zk),e(Zk,jHe),e(lg,DHe),e(y,GHe),e(y,ig),e(ig,Boe),e(Boe,OHe),e(ig,VHe),e(ig,eS),e(eS,XHe),e(ig,zHe),e(y,QHe),e(y,dg),e(dg,Poe),e(Poe,WHe),e(dg,HHe),e(dg,oS),e(oS,UHe),e(dg,JHe),e(y,YHe),e(y,cg),e(cg,Ioe),e(Ioe,KHe),e(cg,ZHe),e(cg,rS),e(rS,eUe),e(cg,oUe),e(y,rUe),e(y,fg),e(fg,qoe),e(qoe,tUe),e(fg,aUe),e(fg,tS),e(tS,nUe),e(fg,sUe),e(y,lUe),e(y,mg),e(mg,Noe),e(Noe,iUe),e(mg,dUe),e(mg,aS),e(aS,cUe),e(mg,fUe),e(y,mUe),e(y,gg),e(gg,joe),e(joe,gUe),e(gg,hUe),e(gg,nS),e(nS,pUe),e(gg,uUe),e(Er,_Ue),M(hg,Er,null),e(Co,bUe),e(Co,pg),M(HA,pg,null),e(pg,vUe),e(pg,Doe),e(Doe,FUe),b(f,cPe,_),b(f,_i,_),e(_i,ug),e(ug,Goe),M(UA,Goe,null),e(_i,TUe),e(_i,Ooe),e(Ooe,MUe),b(f,fPe,_),b(f,wo,_),M(JA,wo,null),e(wo,EUe),e(wo,YA),e(YA,CUe),e(YA,sS),e(sS,wUe),e(YA,AUe),e(wo,yUe),e(wo,KA),e(KA,LUe),e(KA,Voe),e(Voe,xUe),e(KA,$Ue),e(wo,kUe),e(wo,Cr),M(ZA,Cr,null),e(Cr,SUe),e(Cr,Xoe),e(Xoe,RUe),e(Cr,BUe),e(Cr,Ca),e(Ca,PUe),e(Ca,zoe),e(zoe,IUe),e(Ca,qUe),e(Ca,Qoe),e(Qoe,NUe),e(Ca,jUe),e(Ca,Woe),e(Woe,DUe),e(Ca,GUe),e(Cr,OUe),e(Cr,k),e(k,kn),e(kn,Hoe),e(Hoe,VUe),e(kn,XUe),e(kn,lS),e(lS,zUe),e(kn,QUe),e(kn,iS),e(iS,WUe),e(kn,HUe),e(k,UUe),e(k,Sn),e(Sn,Uoe),e(Uoe,JUe),e(Sn,YUe),e(Sn,dS),e(dS,KUe),e(Sn,ZUe),e(Sn,cS),e(cS,eJe),e(Sn,oJe),e(k,rJe),e(k,Rn),e(Rn,Joe),e(Joe,tJe),e(Rn,aJe),e(Rn,fS),e(fS,nJe),e(Rn,sJe),e(Rn,mS),e(mS,lJe),e(Rn,iJe),e(k,dJe),e(k,_g),e(_g,Yoe),e(Yoe,cJe),e(_g,fJe),e(_g,gS),e(gS,mJe),e(_g,gJe),e(k,hJe),e(k,Bn),e(Bn,Koe),e(Koe,pJe),e(Bn,uJe),e(Bn,hS),e(hS,_Je),e(Bn,bJe),e(Bn,pS),e(pS,vJe),e(Bn,FJe),e(k,TJe),e(k,bg),e(bg,Zoe),e(Zoe,MJe),e(bg,EJe),e(bg,uS),e(uS,CJe),e(bg,wJe),e(k,AJe),e(k,vg),e(vg,ere),e(ere,yJe),e(vg,LJe),e(vg,_S),e(_S,xJe),e(vg,$Je),e(k,kJe),e(k,Fg),e(Fg,ore),e(ore,SJe),e(Fg,RJe),e(Fg,bS),e(bS,BJe),e(Fg,PJe),e(k,IJe),e(k,Pn),e(Pn,rre),e(rre,qJe),e(Pn,NJe),e(Pn,vS),e(vS,jJe),e(Pn,DJe),e(Pn,FS),e(FS,GJe),e(Pn,OJe),e(k,VJe),e(k,In),e(In,tre),e(tre,XJe),e(In,zJe),e(In,TS),e(TS,QJe),e(In,WJe),e(In,MS),e(MS,HJe),e(In,UJe),e(k,JJe),e(k,qn),e(qn,are),e(are,YJe),e(qn,KJe),e(qn,ES),e(ES,ZJe),e(qn,eYe),e(qn,CS),e(CS,oYe),e(qn,rYe),e(k,tYe),e(k,Tg),e(Tg,nre),e(nre,aYe),e(Tg,nYe),e(Tg,wS),e(wS,sYe),e(Tg,lYe),e(k,iYe),e(k,Mg),e(Mg,sre),e(sre,dYe),e(Mg,cYe),e(Mg,AS),e(AS,fYe),e(Mg,mYe),e(k,gYe),e(k,Nn),e(Nn,lre),e(lre,hYe),e(Nn,pYe),e(Nn,yS),e(yS,uYe),e(Nn,_Ye),e(Nn,LS),e(LS,bYe),e(Nn,vYe),e(k,FYe),e(k,Eg),e(Eg,ire),e(ire,TYe),e(Eg,MYe),e(Eg,xS),e(xS,EYe),e(Eg,CYe),e(k,wYe),e(k,jn),e(jn,dre),e(dre,AYe),e(jn,yYe),e(jn,$S),e($S,LYe),e(jn,xYe),e(jn,kS),e(kS,$Ye),e(jn,kYe),e(k,SYe),e(k,Dn),e(Dn,cre),e(cre,RYe),e(Dn,BYe),e(Dn,SS),e(SS,PYe),e(Dn,IYe),e(Dn,RS),e(RS,qYe),e(Dn,NYe),e(k,jYe),e(k,Gn),e(Gn,fre),e(fre,DYe),e(Gn,GYe),e(Gn,BS),e(BS,OYe),e(Gn,VYe),e(Gn,PS),e(PS,XYe),e(Gn,zYe),e(k,QYe),e(k,Cg),e(Cg,mre),e(mre,WYe),e(Cg,HYe),e(Cg,IS),e(IS,UYe),e(Cg,JYe),e(k,YYe),e(k,On),e(On,gre),e(gre,KYe),e(On,ZYe),e(On,qS),e(qS,eKe),e(On,oKe),e(On,NS),e(NS,rKe),e(On,tKe),e(k,aKe),e(k,Vn),e(Vn,hre),e(hre,nKe),e(Vn,sKe),e(Vn,jS),e(jS,lKe),e(Vn,iKe),e(Vn,DS),e(DS,dKe),e(Vn,cKe),e(k,fKe),e(k,Xn),e(Xn,pre),e(pre,mKe),e(Xn,gKe),e(Xn,GS),e(GS,hKe),e(Xn,pKe),e(Xn,OS),e(OS,uKe),e(Xn,_Ke),e(k,bKe),e(k,zn),e(zn,ure),e(ure,vKe),e(zn,FKe),e(zn,VS),e(VS,TKe),e(zn,MKe),e(zn,XS),e(XS,EKe),e(zn,CKe),e(k,wKe),e(k,Qn),e(Qn,_re),e(_re,AKe),e(Qn,yKe),e(Qn,zS),e(zS,LKe),e(Qn,xKe),e(Qn,QS),e(QS,$Ke),e(Qn,kKe),e(k,SKe),e(k,Wn),e(Wn,bre),e(bre,RKe),e(Wn,BKe),e(Wn,WS),e(WS,PKe),e(Wn,IKe),e(Wn,HS),e(HS,qKe),e(Wn,NKe),e(k,jKe),e(k,wg),e(wg,vre),e(vre,DKe),e(wg,GKe),e(wg,US),e(US,OKe),e(wg,VKe),e(k,XKe),e(k,Hn),e(Hn,Fre),e(Fre,zKe),e(Hn,QKe),e(Hn,JS),e(JS,WKe),e(Hn,HKe),e(Hn,YS),e(YS,UKe),e(Hn,JKe),e(k,YKe),e(k,Ag),e(Ag,Tre),e(Tre,KKe),e(Ag,ZKe),e(Ag,KS),e(KS,eZe),e(Ag,oZe),e(k,rZe),e(k,Un),e(Un,Mre),e(Mre,tZe),e(Un,aZe),e(Un,ZS),e(ZS,nZe),e(Un,sZe),e(Un,eR),e(eR,lZe),e(Un,iZe),e(k,dZe),e(k,Jn),e(Jn,Ere),e(Ere,cZe),e(Jn,fZe),e(Jn,oR),e(oR,mZe),e(Jn,gZe),e(Jn,rR),e(rR,hZe),e(Jn,pZe),e(k,uZe),e(k,Yn),e(Yn,Cre),e(Cre,_Ze),e(Yn,bZe),e(Yn,tR),e(tR,vZe),e(Yn,FZe),e(Yn,aR),e(aR,TZe),e(Yn,MZe),e(k,EZe),e(k,Kn),e(Kn,wre),e(wre,CZe),e(Kn,wZe),e(Kn,nR),e(nR,AZe),e(Kn,yZe),e(Kn,sR),e(sR,LZe),e(Kn,xZe),e(k,$Ze),e(k,Zn),e(Zn,Are),e(Are,kZe),e(Zn,SZe),e(Zn,lR),e(lR,RZe),e(Zn,BZe),e(Zn,iR),e(iR,PZe),e(Zn,IZe),e(k,qZe),e(k,yg),e(yg,yre),e(yre,NZe),e(yg,jZe),e(yg,dR),e(dR,DZe),e(yg,GZe),e(k,OZe),e(k,es),e(es,Lre),e(Lre,VZe),e(es,XZe),e(es,cR),e(cR,zZe),e(es,QZe),e(es,fR),e(fR,WZe),e(es,HZe),e(k,UZe),e(k,os),e(os,xre),e(xre,JZe),e(os,YZe),e(os,mR),e(mR,KZe),e(os,ZZe),e(os,gR),e(gR,eeo),e(os,oeo),e(k,reo),e(k,rs),e(rs,$re),e($re,teo),e(rs,aeo),e(rs,hR),e(hR,neo),e(rs,seo),e(rs,pR),e(pR,leo),e(rs,ieo),e(k,deo),e(k,ts),e(ts,kre),e(kre,ceo),e(ts,feo),e(ts,uR),e(uR,meo),e(ts,geo),e(ts,_R),e(_R,heo),e(ts,peo),e(k,ueo),e(k,as),e(as,Sre),e(Sre,_eo),e(as,beo),e(as,bR),e(bR,veo),e(as,Feo),e(as,vR),e(vR,Teo),e(as,Meo),e(k,Eeo),e(k,ns),e(ns,Rre),e(Rre,Ceo),e(ns,weo),e(ns,FR),e(FR,Aeo),e(ns,yeo),e(ns,TR),e(TR,Leo),e(ns,xeo),e(k,$eo),e(k,Lg),e(Lg,Bre),e(Bre,keo),e(Lg,Seo),e(Lg,MR),e(MR,Reo),e(Lg,Beo),e(k,Peo),e(k,ss),e(ss,Pre),e(Pre,Ieo),e(ss,qeo),e(ss,ER),e(ER,Neo),e(ss,jeo),e(ss,CR),e(CR,Deo),e(ss,Geo),e(k,Oeo),e(k,xg),e(xg,Ire),e(Ire,Veo),e(xg,Xeo),e(xg,wR),e(wR,zeo),e(xg,Qeo),e(k,Weo),e(k,$g),e($g,qre),e(qre,Heo),e($g,Ueo),e($g,AR),e(AR,Jeo),e($g,Yeo),e(k,Keo),e(k,ls),e(ls,Nre),e(Nre,Zeo),e(ls,eoo),e(ls,yR),e(yR,ooo),e(ls,roo),e(ls,LR),e(LR,too),e(ls,aoo),e(k,noo),e(k,is),e(is,jre),e(jre,soo),e(is,loo),e(is,xR),e(xR,ioo),e(is,doo),e(is,$R),e($R,coo),e(is,foo),e(k,moo),e(k,ds),e(ds,Dre),e(Dre,goo),e(ds,hoo),e(ds,kR),e(kR,poo),e(ds,uoo),e(ds,SR),e(SR,_oo),e(ds,boo),e(k,voo),e(k,kg),e(kg,Gre),e(Gre,Foo),e(kg,Too),e(kg,RR),e(RR,Moo),e(kg,Eoo),e(k,Coo),e(k,cs),e(cs,Ore),e(Ore,woo),e(cs,Aoo),e(cs,BR),e(BR,yoo),e(cs,Loo),e(cs,PR),e(PR,xoo),e(cs,$oo),e(k,koo),e(k,fs),e(fs,Vre),e(Vre,Soo),e(fs,Roo),e(fs,IR),e(IR,Boo),e(fs,Poo),e(fs,qR),e(qR,Ioo),e(fs,qoo),e(k,Noo),e(k,ms),e(ms,Xre),e(Xre,joo),e(ms,Doo),e(ms,NR),e(NR,Goo),e(ms,Ooo),e(ms,jR),e(jR,Voo),e(ms,Xoo),e(k,zoo),e(k,gs),e(gs,zre),e(zre,Qoo),e(gs,Woo),e(gs,DR),e(DR,Hoo),e(gs,Uoo),e(gs,GR),e(GR,Joo),e(gs,Yoo),e(k,Koo),e(k,hs),e(hs,Qre),e(Qre,Zoo),e(hs,ero),e(hs,OR),e(OR,oro),e(hs,rro),e(hs,VR),e(VR,tro),e(hs,aro),e(k,nro),e(k,ps),e(ps,Wre),e(Wre,sro),e(ps,lro),e(ps,XR),e(XR,iro),e(ps,dro),e(ps,zR),e(zR,cro),e(ps,fro),e(k,mro),e(k,Sg),e(Sg,Hre),e(Hre,gro),e(Sg,hro),e(Sg,QR),e(QR,pro),e(Sg,uro),e(k,_ro),e(k,Rg),e(Rg,Ure),e(Ure,bro),e(Rg,vro),e(Rg,WR),e(WR,Fro),e(Rg,Tro),e(k,Mro),e(k,Bg),e(Bg,Jre),e(Jre,Ero),e(Bg,Cro),e(Bg,HR),e(HR,wro),e(Bg,Aro),e(k,yro),e(k,Pg),e(Pg,Yre),e(Yre,Lro),e(Pg,xro),e(Pg,UR),e(UR,$ro),e(Pg,kro),e(k,Sro),e(k,us),e(us,Kre),e(Kre,Rro),e(us,Bro),e(us,JR),e(JR,Pro),e(us,Iro),e(us,YR),e(YR,qro),e(us,Nro),e(k,jro),e(k,Ig),e(Ig,Zre),e(Zre,Dro),e(Ig,Gro),e(Ig,KR),e(KR,Oro),e(Ig,Vro),e(k,Xro),e(k,_s),e(_s,ete),e(ete,zro),e(_s,Qro),e(_s,ZR),e(ZR,Wro),e(_s,Hro),e(_s,eB),e(eB,Uro),e(_s,Jro),e(k,Yro),e(k,bs),e(bs,ote),e(ote,Kro),e(bs,Zro),e(bs,oB),e(oB,eto),e(bs,oto),e(bs,rB),e(rB,rto),e(bs,tto),e(k,ato),e(k,vs),e(vs,rte),e(rte,nto),e(vs,sto),e(vs,tB),e(tB,lto),e(vs,ito),e(vs,aB),e(aB,dto),e(vs,cto),e(k,fto),e(k,Fs),e(Fs,tte),e(tte,mto),e(Fs,gto),e(Fs,nB),e(nB,hto),e(Fs,pto),e(Fs,sB),e(sB,uto),e(Fs,_to),e(k,bto),e(k,Ts),e(Ts,ate),e(ate,vto),e(Ts,Fto),e(Ts,lB),e(lB,Tto),e(Ts,Mto),e(Ts,iB),e(iB,Eto),e(Ts,Cto),e(k,wto),e(k,Ms),e(Ms,nte),e(nte,Ato),e(Ms,yto),e(Ms,dB),e(dB,Lto),e(Ms,xto),e(Ms,cB),e(cB,$to),e(Ms,kto),e(k,Sto),e(k,qg),e(qg,ste),e(ste,Rto),e(qg,Bto),e(qg,fB),e(fB,Pto),e(qg,Ito),e(k,qto),e(k,Ng),e(Ng,lte),e(lte,Nto),e(Ng,jto),e(Ng,mB),e(mB,Dto),e(Ng,Gto),e(k,Oto),e(k,Es),e(Es,ite),e(ite,Vto),e(Es,Xto),e(Es,gB),e(gB,zto),e(Es,Qto),e(Es,hB),e(hB,Wto),e(Es,Hto),e(k,Uto),e(k,Cs),e(Cs,dte),e(dte,Jto),e(Cs,Yto),e(Cs,pB),e(pB,Kto),e(Cs,Zto),e(Cs,uB),e(uB,eao),e(Cs,oao),e(k,rao),e(k,ws),e(ws,cte),e(cte,tao),e(ws,aao),e(ws,_B),e(_B,nao),e(ws,sao),e(ws,bB),e(bB,lao),e(ws,iao),e(k,dao),e(k,jg),e(jg,fte),e(fte,cao),e(jg,fao),e(jg,vB),e(vB,mao),e(jg,gao),e(k,hao),e(k,Dg),e(Dg,mte),e(mte,pao),e(Dg,uao),e(Dg,FB),e(FB,_ao),e(Dg,bao),e(k,vao),e(k,Gg),e(Gg,gte),e(gte,Fao),e(Gg,Tao),e(Gg,TB),e(TB,Mao),e(Gg,Eao),e(k,Cao),e(k,As),e(As,hte),e(hte,wao),e(As,Aao),e(As,MB),e(MB,yao),e(As,Lao),e(As,EB),e(EB,xao),e(As,$ao),e(k,kao),e(k,Og),e(Og,pte),e(pte,Sao),e(Og,Rao),e(Og,CB),e(CB,Bao),e(Og,Pao),e(k,Iao),e(k,Vg),e(Vg,ute),e(ute,qao),e(Vg,Nao),e(Vg,wB),e(wB,jao),e(Vg,Dao),e(k,Gao),e(k,ys),e(ys,_te),e(_te,Oao),e(ys,Vao),e(ys,AB),e(AB,Xao),e(ys,zao),e(ys,yB),e(yB,Qao),e(ys,Wao),e(k,Hao),e(k,Xg),e(Xg,bte),e(bte,Uao),e(Xg,Jao),e(Xg,LB),e(LB,Yao),e(Xg,Kao),e(k,Zao),e(k,zg),e(zg,vte),e(vte,eno),e(zg,ono),e(zg,xB),e(xB,rno),e(zg,tno),e(k,ano),e(k,Ls),e(Ls,Fte),e(Fte,nno),e(Ls,sno),e(Ls,$B),e($B,lno),e(Ls,ino),e(Ls,kB),e(kB,dno),e(Ls,cno),e(k,fno),e(k,xs),e(xs,Tte),e(Tte,mno),e(xs,gno),e(xs,SB),e(SB,hno),e(xs,pno),e(xs,RB),e(RB,uno),e(xs,_no),e(k,bno),e(k,$s),e($s,Mte),e(Mte,vno),e($s,Fno),e($s,BB),e(BB,Tno),e($s,Mno),e($s,PB),e(PB,Eno),e($s,Cno),e(k,wno),e(k,ks),e(ks,Ete),e(Ete,Ano),e(ks,yno),e(ks,IB),e(IB,Lno),e(ks,xno),e(ks,qB),e(qB,$no),e(ks,kno),e(Cr,Sno),M(Qg,Cr,null),e(wo,Rno),e(wo,Wg),M(e0,Wg,null),e(Wg,Bno),e(Wg,Cte),e(Cte,Pno),b(f,mPe,_),b(f,bi,_),e(bi,Hg),e(Hg,wte),M(o0,wte,null),e(bi,Ino),e(bi,Ate),e(Ate,qno),b(f,gPe,_),b(f,Ao,_),M(r0,Ao,null),e(Ao,Nno),e(Ao,t0),e(t0,jno),e(t0,NB),e(NB,Dno),e(t0,Gno),e(Ao,Ono),e(Ao,a0),e(a0,Vno),e(a0,yte),e(yte,Xno),e(a0,zno),e(Ao,Qno),e(Ao,Qe),M(n0,Qe,null),e(Qe,Wno),e(Qe,Lte),e(Lte,Hno),e(Qe,Uno),e(Qe,wa),e(wa,Jno),e(wa,xte),e(xte,Yno),e(wa,Kno),e(wa,$te),e($te,Zno),e(wa,eso),e(wa,kte),e(kte,oso),e(wa,rso),e(Qe,tso),e(Qe,te),e(te,Ug),e(Ug,Ste),e(Ste,aso),e(Ug,nso),e(Ug,jB),e(jB,sso),e(Ug,lso),e(te,iso),e(te,Jg),e(Jg,Rte),e(Rte,dso),e(Jg,cso),e(Jg,DB),e(DB,fso),e(Jg,mso),e(te,gso),e(te,Yg),e(Yg,Bte),e(Bte,hso),e(Yg,pso),e(Yg,GB),e(GB,uso),e(Yg,_so),e(te,bso),e(te,Kg),e(Kg,Pte),e(Pte,vso),e(Kg,Fso),e(Kg,OB),e(OB,Tso),e(Kg,Mso),e(te,Eso),e(te,Zg),e(Zg,Ite),e(Ite,Cso),e(Zg,wso),e(Zg,VB),e(VB,Aso),e(Zg,yso),e(te,Lso),e(te,eh),e(eh,qte),e(qte,xso),e(eh,$so),e(eh,XB),e(XB,kso),e(eh,Sso),e(te,Rso),e(te,oh),e(oh,Nte),e(Nte,Bso),e(oh,Pso),e(oh,zB),e(zB,Iso),e(oh,qso),e(te,Nso),e(te,rh),e(rh,jte),e(jte,jso),e(rh,Dso),e(rh,QB),e(QB,Gso),e(rh,Oso),e(te,Vso),e(te,th),e(th,Dte),e(Dte,Xso),e(th,zso),e(th,WB),e(WB,Qso),e(th,Wso),e(te,Hso),e(te,ah),e(ah,Gte),e(Gte,Uso),e(ah,Jso),e(ah,HB),e(HB,Yso),e(ah,Kso),e(te,Zso),e(te,nh),e(nh,Ote),e(Ote,elo),e(nh,olo),e(nh,UB),e(UB,rlo),e(nh,tlo),e(te,alo),e(te,sh),e(sh,Vte),e(Vte,nlo),e(sh,slo),e(sh,JB),e(JB,llo),e(sh,ilo),e(te,dlo),e(te,lh),e(lh,Xte),e(Xte,clo),e(lh,flo),e(lh,YB),e(YB,mlo),e(lh,glo),e(te,hlo),e(te,ih),e(ih,zte),e(zte,plo),e(ih,ulo),e(ih,KB),e(KB,_lo),e(ih,blo),e(te,vlo),e(te,dh),e(dh,Qte),e(Qte,Flo),e(dh,Tlo),e(dh,ZB),e(ZB,Mlo),e(dh,Elo),e(te,Clo),e(te,ch),e(ch,Wte),e(Wte,wlo),e(ch,Alo),e(ch,eP),e(eP,ylo),e(ch,Llo),e(te,xlo),e(te,fh),e(fh,Hte),e(Hte,$lo),e(fh,klo),e(fh,oP),e(oP,Slo),e(fh,Rlo),e(te,Blo),e(te,mh),e(mh,Ute),e(Ute,Plo),e(mh,Ilo),e(mh,rP),e(rP,qlo),e(mh,Nlo),e(te,jlo),e(te,gh),e(gh,Jte),e(Jte,Dlo),e(gh,Glo),e(gh,tP),e(tP,Olo),e(gh,Vlo),e(te,Xlo),e(te,hh),e(hh,Yte),e(Yte,zlo),e(hh,Qlo),e(hh,aP),e(aP,Wlo),e(hh,Hlo),e(te,Ulo),e(te,ph),e(ph,Kte),e(Kte,Jlo),e(ph,Ylo),e(ph,nP),e(nP,Klo),e(ph,Zlo),e(te,eio),e(te,uh),e(uh,Zte),e(Zte,oio),e(uh,rio),e(uh,sP),e(sP,tio),e(uh,aio),e(te,nio),e(te,_h),e(_h,eae),e(eae,sio),e(_h,lio),e(_h,lP),e(lP,iio),e(_h,dio),e(te,cio),e(te,bh),e(bh,oae),e(oae,fio),e(bh,mio),e(bh,iP),e(iP,gio),e(bh,hio),e(Qe,pio),M(vh,Qe,null),e(Qe,uio),M(Fh,Qe,null),e(Ao,_io),e(Ao,Th),M(s0,Th,null),e(Th,bio),e(Th,rae),e(rae,vio),b(f,hPe,_),b(f,vi,_),e(vi,Mh),e(Mh,tae),M(l0,tae,null),e(vi,Fio),e(vi,aae),e(aae,Tio),b(f,pPe,_),b(f,yo,_),M(i0,yo,null),e(yo,Mio),e(yo,d0),e(d0,Eio),e(d0,dP),e(dP,Cio),e(d0,wio),e(yo,Aio),e(yo,c0),e(c0,yio),e(c0,nae),e(nae,Lio),e(c0,xio),e(yo,$io),e(yo,We),M(f0,We,null),e(We,kio),e(We,sae),e(sae,Sio),e(We,Rio),e(We,Fi),e(Fi,Bio),e(Fi,lae),e(lae,Pio),e(Fi,Iio),e(Fi,iae),e(iae,qio),e(Fi,Nio),e(We,jio),e(We,be),e(be,Eh),e(Eh,dae),e(dae,Dio),e(Eh,Gio),e(Eh,cP),e(cP,Oio),e(Eh,Vio),e(be,Xio),e(be,Ch),e(Ch,cae),e(cae,zio),e(Ch,Qio),e(Ch,fP),e(fP,Wio),e(Ch,Hio),e(be,Uio),e(be,wh),e(wh,fae),e(fae,Jio),e(wh,Yio),e(wh,mP),e(mP,Kio),e(wh,Zio),e(be,edo),e(be,Ah),e(Ah,mae),e(mae,odo),e(Ah,rdo),e(Ah,gP),e(gP,tdo),e(Ah,ado),e(be,ndo),e(be,yh),e(yh,gae),e(gae,sdo),e(yh,ldo),e(yh,hP),e(hP,ido),e(yh,ddo),e(be,cdo),e(be,Lh),e(Lh,hae),e(hae,fdo),e(Lh,mdo),e(Lh,pP),e(pP,gdo),e(Lh,hdo),e(be,pdo),e(be,xh),e(xh,pae),e(pae,udo),e(xh,_do),e(xh,uP),e(uP,bdo),e(xh,vdo),e(be,Fdo),e(be,$h),e($h,uae),e(uae,Tdo),e($h,Mdo),e($h,_P),e(_P,Edo),e($h,Cdo),e(be,wdo),e(be,kh),e(kh,_ae),e(_ae,Ado),e(kh,ydo),e(kh,bP),e(bP,Ldo),e(kh,xdo),e(be,$do),e(be,Sh),e(Sh,bae),e(bae,kdo),e(Sh,Sdo),e(Sh,vP),e(vP,Rdo),e(Sh,Bdo),e(be,Pdo),e(be,Rh),e(Rh,vae),e(vae,Ido),e(Rh,qdo),e(Rh,FP),e(FP,Ndo),e(Rh,jdo),e(be,Ddo),e(be,Bh),e(Bh,Fae),e(Fae,Gdo),e(Bh,Odo),e(Bh,TP),e(TP,Vdo),e(Bh,Xdo),e(be,zdo),e(be,Ph),e(Ph,Tae),e(Tae,Qdo),e(Ph,Wdo),e(Ph,MP),e(MP,Hdo),e(Ph,Udo),e(be,Jdo),e(be,Ih),e(Ih,Mae),e(Mae,Ydo),e(Ih,Kdo),e(Ih,EP),e(EP,Zdo),e(Ih,eco),e(We,oco),M(qh,We,null),e(We,rco),M(Nh,We,null),e(yo,tco),e(yo,jh),M(m0,jh,null),e(jh,aco),e(jh,Eae),e(Eae,nco),b(f,uPe,_),b(f,Ti,_),e(Ti,Dh),e(Dh,Cae),M(g0,Cae,null),e(Ti,sco),e(Ti,wae),e(wae,lco),b(f,_Pe,_),b(f,Lo,_),M(h0,Lo,null),e(Lo,ico),e(Lo,Mi),e(Mi,dco),e(Mi,CP),e(CP,cco),e(Mi,fco),e(Mi,wP),e(wP,mco),e(Mi,gco),e(Lo,hco),e(Lo,p0),e(p0,pco),e(p0,Aae),e(Aae,uco),e(p0,_co),e(Lo,bco),e(Lo,ot),M(u0,ot,null),e(ot,vco),e(ot,yae),e(yae,Fco),e(ot,Tco),e(ot,Ei),e(Ei,Mco),e(Ei,Lae),e(Lae,Eco),e(Ei,Cco),e(Ei,AP),e(AP,wco),e(Ei,Aco),e(ot,yco),M(Gh,ot,null),e(Lo,Lco),e(Lo,He),M(_0,He,null),e(He,xco),e(He,xae),e(xae,$co),e(He,kco),e(He,Aa),e(Aa,Sco),e(Aa,$ae),e($ae,Rco),e(Aa,Bco),e(Aa,kae),e(kae,Pco),e(Aa,Ico),e(Aa,Sae),e(Sae,qco),e(Aa,Nco),e(He,jco),e(He,x),e(x,Oh),e(Oh,Rae),e(Rae,Dco),e(Oh,Gco),e(Oh,yP),e(yP,Oco),e(Oh,Vco),e(x,Xco),e(x,Vh),e(Vh,Bae),e(Bae,zco),e(Vh,Qco),e(Vh,LP),e(LP,Wco),e(Vh,Hco),e(x,Uco),e(x,Xh),e(Xh,Pae),e(Pae,Jco),e(Xh,Yco),e(Xh,xP),e(xP,Kco),e(Xh,Zco),e(x,efo),e(x,zh),e(zh,Iae),e(Iae,ofo),e(zh,rfo),e(zh,$P),e($P,tfo),e(zh,afo),e(x,nfo),e(x,Qh),e(Qh,qae),e(qae,sfo),e(Qh,lfo),e(Qh,kP),e(kP,ifo),e(Qh,dfo),e(x,cfo),e(x,Wh),e(Wh,Nae),e(Nae,ffo),e(Wh,mfo),e(Wh,SP),e(SP,gfo),e(Wh,hfo),e(x,pfo),e(x,Hh),e(Hh,jae),e(jae,ufo),e(Hh,_fo),e(Hh,RP),e(RP,bfo),e(Hh,vfo),e(x,Ffo),e(x,Uh),e(Uh,Dae),e(Dae,Tfo),e(Uh,Mfo),e(Uh,BP),e(BP,Efo),e(Uh,Cfo),e(x,wfo),e(x,Jh),e(Jh,Gae),e(Gae,Afo),e(Jh,yfo),e(Jh,PP),e(PP,Lfo),e(Jh,xfo),e(x,$fo),e(x,Yh),e(Yh,Oae),e(Oae,kfo),e(Yh,Sfo),e(Yh,IP),e(IP,Rfo),e(Yh,Bfo),e(x,Pfo),e(x,Kh),e(Kh,Vae),e(Vae,Ifo),e(Kh,qfo),e(Kh,qP),e(qP,Nfo),e(Kh,jfo),e(x,Dfo),e(x,Zh),e(Zh,Xae),e(Xae,Gfo),e(Zh,Ofo),e(Zh,NP),e(NP,Vfo),e(Zh,Xfo),e(x,zfo),e(x,ep),e(ep,zae),e(zae,Qfo),e(ep,Wfo),e(ep,jP),e(jP,Hfo),e(ep,Ufo),e(x,Jfo),e(x,op),e(op,Qae),e(Qae,Yfo),e(op,Kfo),e(op,DP),e(DP,Zfo),e(op,emo),e(x,omo),e(x,rp),e(rp,Wae),e(Wae,rmo),e(rp,tmo),e(rp,GP),e(GP,amo),e(rp,nmo),e(x,smo),e(x,tp),e(tp,Hae),e(Hae,lmo),e(tp,imo),e(tp,OP),e(OP,dmo),e(tp,cmo),e(x,fmo),e(x,ap),e(ap,Uae),e(Uae,mmo),e(ap,gmo),e(ap,VP),e(VP,hmo),e(ap,pmo),e(x,umo),e(x,np),e(np,Jae),e(Jae,_mo),e(np,bmo),e(np,XP),e(XP,vmo),e(np,Fmo),e(x,Tmo),e(x,sp),e(sp,Yae),e(Yae,Mmo),e(sp,Emo),e(sp,zP),e(zP,Cmo),e(sp,wmo),e(x,Amo),e(x,lp),e(lp,Kae),e(Kae,ymo),e(lp,Lmo),e(lp,QP),e(QP,xmo),e(lp,$mo),e(x,kmo),e(x,ip),e(ip,Zae),e(Zae,Smo),e(ip,Rmo),e(ip,WP),e(WP,Bmo),e(ip,Pmo),e(x,Imo),e(x,dp),e(dp,ene),e(ene,qmo),e(dp,Nmo),e(dp,HP),e(HP,jmo),e(dp,Dmo),e(x,Gmo),e(x,cp),e(cp,one),e(one,Omo),e(cp,Vmo),e(cp,UP),e(UP,Xmo),e(cp,zmo),e(x,Qmo),e(x,fp),e(fp,rne),e(rne,Wmo),e(fp,Hmo),e(fp,JP),e(JP,Umo),e(fp,Jmo),e(x,Ymo),e(x,mp),e(mp,tne),e(tne,Kmo),e(mp,Zmo),e(mp,YP),e(YP,ego),e(mp,ogo),e(x,rgo),e(x,gp),e(gp,ane),e(ane,tgo),e(gp,ago),e(gp,KP),e(KP,ngo),e(gp,sgo),e(x,lgo),e(x,hp),e(hp,nne),e(nne,igo),e(hp,dgo),e(hp,ZP),e(ZP,cgo),e(hp,fgo),e(x,mgo),e(x,pp),e(pp,sne),e(sne,ggo),e(pp,hgo),e(pp,eI),e(eI,pgo),e(pp,ugo),e(x,_go),e(x,up),e(up,lne),e(lne,bgo),e(up,vgo),e(up,oI),e(oI,Fgo),e(up,Tgo),e(x,Mgo),e(x,_p),e(_p,ine),e(ine,Ego),e(_p,Cgo),e(_p,rI),e(rI,wgo),e(_p,Ago),e(x,ygo),e(x,Ss),e(Ss,dne),e(dne,Lgo),e(Ss,xgo),e(Ss,tI),e(tI,$go),e(Ss,kgo),e(Ss,aI),e(aI,Sgo),e(Ss,Rgo),e(x,Bgo),e(x,bp),e(bp,cne),e(cne,Pgo),e(bp,Igo),e(bp,nI),e(nI,qgo),e(bp,Ngo),e(x,jgo),e(x,vp),e(vp,fne),e(fne,Dgo),e(vp,Ggo),e(vp,sI),e(sI,Ogo),e(vp,Vgo),e(x,Xgo),e(x,Fp),e(Fp,mne),e(mne,zgo),e(Fp,Qgo),e(Fp,lI),e(lI,Wgo),e(Fp,Hgo),e(x,Ugo),e(x,Tp),e(Tp,gne),e(gne,Jgo),e(Tp,Ygo),e(Tp,iI),e(iI,Kgo),e(Tp,Zgo),e(x,eho),e(x,Mp),e(Mp,hne),e(hne,oho),e(Mp,rho),e(Mp,dI),e(dI,tho),e(Mp,aho),e(x,nho),e(x,Ep),e(Ep,pne),e(pne,sho),e(Ep,lho),e(Ep,cI),e(cI,iho),e(Ep,dho),e(x,cho),e(x,Cp),e(Cp,une),e(une,fho),e(Cp,mho),e(Cp,fI),e(fI,gho),e(Cp,hho),e(x,pho),e(x,wp),e(wp,_ne),e(_ne,uho),e(wp,_ho),e(wp,mI),e(mI,bho),e(wp,vho),e(x,Fho),e(x,Ap),e(Ap,bne),e(bne,Tho),e(Ap,Mho),e(Ap,gI),e(gI,Eho),e(Ap,Cho),e(x,who),e(x,yp),e(yp,vne),e(vne,Aho),e(yp,yho),e(yp,hI),e(hI,Lho),e(yp,xho),e(x,$ho),e(x,Lp),e(Lp,Fne),e(Fne,kho),e(Lp,Sho),e(Lp,pI),e(pI,Rho),e(Lp,Bho),e(x,Pho),e(x,xp),e(xp,Tne),e(Tne,Iho),e(xp,qho),e(xp,uI),e(uI,Nho),e(xp,jho),e(x,Dho),e(x,$p),e($p,Mne),e(Mne,Gho),e($p,Oho),e($p,_I),e(_I,Vho),e($p,Xho),e(x,zho),e(x,kp),e(kp,Ene),e(Ene,Qho),e(kp,Who),e(kp,bI),e(bI,Hho),e(kp,Uho),e(x,Jho),e(x,Sp),e(Sp,Cne),e(Cne,Yho),e(Sp,Kho),e(Sp,vI),e(vI,Zho),e(Sp,epo),e(x,opo),e(x,Rp),e(Rp,wne),e(wne,rpo),e(Rp,tpo),e(Rp,FI),e(FI,apo),e(Rp,npo),e(x,spo),e(x,Bp),e(Bp,Ane),e(Ane,lpo),e(Bp,ipo),e(Bp,TI),e(TI,dpo),e(Bp,cpo),e(x,fpo),e(x,Pp),e(Pp,yne),e(yne,mpo),e(Pp,gpo),e(Pp,MI),e(MI,hpo),e(Pp,ppo),e(x,upo),e(x,Ip),e(Ip,Lne),e(Lne,_po),e(Ip,bpo),e(Ip,EI),e(EI,vpo),e(Ip,Fpo),e(x,Tpo),e(x,qp),e(qp,xne),e(xne,Mpo),e(qp,Epo),e(qp,CI),e(CI,Cpo),e(qp,wpo),e(x,Apo),e(x,Np),e(Np,$ne),e($ne,ypo),e(Np,Lpo),e(Np,wI),e(wI,xpo),e(Np,$po),e(x,kpo),e(x,jp),e(jp,kne),e(kne,Spo),e(jp,Rpo),e(jp,AI),e(AI,Bpo),e(jp,Ppo),e(x,Ipo),e(x,Dp),e(Dp,Sne),e(Sne,qpo),e(Dp,Npo),e(Dp,yI),e(yI,jpo),e(Dp,Dpo),e(x,Gpo),e(x,Gp),e(Gp,Rne),e(Rne,Opo),e(Gp,Vpo),e(Gp,LI),e(LI,Xpo),e(Gp,zpo),e(x,Qpo),e(x,Op),e(Op,Bne),e(Bne,Wpo),e(Op,Hpo),e(Op,xI),e(xI,Upo),e(Op,Jpo),e(x,Ypo),e(x,Vp),e(Vp,Pne),e(Pne,Kpo),e(Vp,Zpo),e(Vp,$I),e($I,euo),e(Vp,ouo),e(x,ruo),e(x,Xp),e(Xp,Ine),e(Ine,tuo),e(Xp,auo),e(Xp,kI),e(kI,nuo),e(Xp,suo),e(x,luo),e(x,zp),e(zp,qne),e(qne,iuo),e(zp,duo),e(zp,SI),e(SI,cuo),e(zp,fuo),e(x,muo),e(x,Qp),e(Qp,Nne),e(Nne,guo),e(Qp,huo),e(Qp,RI),e(RI,puo),e(Qp,uuo),e(x,_uo),e(x,Wp),e(Wp,jne),e(jne,buo),e(Wp,vuo),e(Wp,BI),e(BI,Fuo),e(Wp,Tuo),e(x,Muo),e(x,Hp),e(Hp,Dne),e(Dne,Euo),e(Hp,Cuo),e(Hp,PI),e(PI,wuo),e(Hp,Auo),e(x,yuo),e(x,Up),e(Up,Gne),e(Gne,Luo),e(Up,xuo),e(Up,II),e(II,$uo),e(Up,kuo),e(x,Suo),e(x,Jp),e(Jp,One),e(One,Ruo),e(Jp,Buo),e(Jp,qI),e(qI,Puo),e(Jp,Iuo),e(x,quo),e(x,Yp),e(Yp,Vne),e(Vne,Nuo),e(Yp,juo),e(Yp,NI),e(NI,Duo),e(Yp,Guo),e(x,Ouo),e(x,Kp),e(Kp,Xne),e(Xne,Vuo),e(Kp,Xuo),e(Kp,jI),e(jI,zuo),e(Kp,Quo),e(x,Wuo),e(x,Zp),e(Zp,zne),e(zne,Huo),e(Zp,Uuo),e(Zp,DI),e(DI,Juo),e(Zp,Yuo),e(x,Kuo),e(x,eu),e(eu,Qne),e(Qne,Zuo),e(eu,e_o),e(eu,GI),e(GI,o_o),e(eu,r_o),e(x,t_o),e(x,ou),e(ou,Wne),e(Wne,a_o),e(ou,n_o),e(ou,OI),e(OI,s_o),e(ou,l_o),e(x,i_o),e(x,ru),e(ru,Hne),e(Hne,d_o),e(ru,c_o),e(ru,VI),e(VI,f_o),e(ru,m_o),e(x,g_o),e(x,tu),e(tu,Une),e(Une,h_o),e(tu,p_o),e(tu,XI),e(XI,u_o),e(tu,__o),e(x,b_o),e(x,au),e(au,Jne),e(Jne,v_o),e(au,F_o),e(au,zI),e(zI,T_o),e(au,M_o),e(x,E_o),e(x,nu),e(nu,Yne),e(Yne,C_o),e(nu,w_o),e(nu,QI),e(QI,A_o),e(nu,y_o),e(x,L_o),e(x,su),e(su,Kne),e(Kne,x_o),e(su,$_o),e(su,WI),e(WI,k_o),e(su,S_o),e(x,R_o),e(x,lu),e(lu,Zne),e(Zne,B_o),e(lu,P_o),e(lu,HI),e(HI,I_o),e(lu,q_o),e(x,N_o),e(x,iu),e(iu,ese),e(ese,j_o),e(iu,D_o),e(iu,UI),e(UI,G_o),e(iu,O_o),e(x,V_o),e(x,du),e(du,ose),e(ose,X_o),e(du,z_o),e(du,JI),e(JI,Q_o),e(du,W_o),e(x,H_o),e(x,cu),e(cu,rse),e(rse,U_o),e(cu,J_o),e(cu,YI),e(YI,Y_o),e(cu,K_o),e(x,Z_o),e(x,fu),e(fu,tse),e(tse,e2o),e(fu,o2o),e(fu,KI),e(KI,r2o),e(fu,t2o),e(x,a2o),e(x,mu),e(mu,ase),e(ase,n2o),e(mu,s2o),e(mu,ZI),e(ZI,l2o),e(mu,i2o),e(x,d2o),e(x,gu),e(gu,nse),e(nse,c2o),e(gu,f2o),e(gu,eq),e(eq,m2o),e(gu,g2o),e(x,h2o),e(x,hu),e(hu,sse),e(sse,p2o),e(hu,u2o),e(hu,oq),e(oq,_2o),e(hu,b2o),e(x,v2o),e(x,pu),e(pu,lse),e(lse,F2o),e(pu,T2o),e(pu,rq),e(rq,M2o),e(pu,E2o),e(x,C2o),e(x,uu),e(uu,ise),e(ise,w2o),e(uu,A2o),e(uu,tq),e(tq,y2o),e(uu,L2o),e(x,x2o),e(x,_u),e(_u,dse),e(dse,$2o),e(_u,k2o),e(_u,aq),e(aq,S2o),e(_u,R2o),e(x,B2o),e(x,bu),e(bu,cse),e(cse,P2o),e(bu,I2o),e(bu,nq),e(nq,q2o),e(bu,N2o),e(x,j2o),e(x,vu),e(vu,fse),e(fse,D2o),e(vu,G2o),e(vu,sq),e(sq,O2o),e(vu,V2o),e(x,X2o),e(x,Fu),e(Fu,mse),e(mse,z2o),e(Fu,Q2o),e(Fu,lq),e(lq,W2o),e(Fu,H2o),e(x,U2o),e(x,Tu),e(Tu,gse),e(gse,J2o),e(Tu,Y2o),e(Tu,iq),e(iq,K2o),e(Tu,Z2o),e(x,e1o),e(x,Mu),e(Mu,hse),e(hse,o1o),e(Mu,r1o),e(Mu,dq),e(dq,t1o),e(Mu,a1o),e(x,n1o),e(x,Eu),e(Eu,pse),e(pse,s1o),e(Eu,l1o),e(Eu,cq),e(cq,i1o),e(Eu,d1o),e(x,c1o),e(x,Cu),e(Cu,use),e(use,f1o),e(Cu,m1o),e(Cu,fq),e(fq,g1o),e(Cu,h1o),e(x,p1o),e(x,wu),e(wu,_se),e(_se,u1o),e(wu,_1o),e(wu,mq),e(mq,b1o),e(wu,v1o),e(x,F1o),e(x,Au),e(Au,bse),e(bse,T1o),e(Au,M1o),e(Au,gq),e(gq,E1o),e(Au,C1o),e(x,w1o),e(x,yu),e(yu,vse),e(vse,A1o),e(yu,y1o),e(yu,hq),e(hq,L1o),e(yu,x1o),e(He,$1o),e(He,Lu),e(Lu,k1o),e(Lu,Fse),e(Fse,S1o),e(Lu,R1o),e(Lu,Tse),e(Tse,B1o),e(He,P1o),M(xu,He,null),b(f,bPe,_),b(f,Ci,_),e(Ci,$u),e($u,Mse),M(b0,Mse,null),e(Ci,I1o),e(Ci,Ese),e(Ese,q1o),b(f,vPe,_),b(f,xo,_),M(v0,xo,null),e(xo,N1o),e(xo,wi),e(wi,j1o),e(wi,pq),e(pq,D1o),e(wi,G1o),e(wi,uq),e(uq,O1o),e(wi,V1o),e(xo,X1o),e(xo,F0),e(F0,z1o),e(F0,Cse),e(Cse,Q1o),e(F0,W1o),e(xo,H1o),e(xo,rt),M(T0,rt,null),e(rt,U1o),e(rt,wse),e(wse,J1o),e(rt,Y1o),e(rt,Ai),e(Ai,K1o),e(Ai,Ase),e(Ase,Z1o),e(Ai,ebo),e(Ai,_q),e(_q,obo),e(Ai,rbo),e(rt,tbo),M(ku,rt,null),e(xo,abo),e(xo,Ue),M(M0,Ue,null),e(Ue,nbo),e(Ue,yse),e(yse,sbo),e(Ue,lbo),e(Ue,ya),e(ya,ibo),e(ya,Lse),e(Lse,dbo),e(ya,cbo),e(ya,xse),e(xse,fbo),e(ya,mbo),e(ya,$se),e($se,gbo),e(ya,hbo),e(Ue,pbo),e(Ue,G),e(G,Su),e(Su,kse),e(kse,ubo),e(Su,_bo),e(Su,bq),e(bq,bbo),e(Su,vbo),e(G,Fbo),e(G,Ru),e(Ru,Sse),e(Sse,Tbo),e(Ru,Mbo),e(Ru,vq),e(vq,Ebo),e(Ru,Cbo),e(G,wbo),e(G,Bu),e(Bu,Rse),e(Rse,Abo),e(Bu,ybo),e(Bu,Fq),e(Fq,Lbo),e(Bu,xbo),e(G,$bo),e(G,Pu),e(Pu,Bse),e(Bse,kbo),e(Pu,Sbo),e(Pu,Tq),e(Tq,Rbo),e(Pu,Bbo),e(G,Pbo),e(G,Iu),e(Iu,Pse),e(Pse,Ibo),e(Iu,qbo),e(Iu,Mq),e(Mq,Nbo),e(Iu,jbo),e(G,Dbo),e(G,qu),e(qu,Ise),e(Ise,Gbo),e(qu,Obo),e(qu,Eq),e(Eq,Vbo),e(qu,Xbo),e(G,zbo),e(G,Nu),e(Nu,qse),e(qse,Qbo),e(Nu,Wbo),e(Nu,Cq),e(Cq,Hbo),e(Nu,Ubo),e(G,Jbo),e(G,ju),e(ju,Nse),e(Nse,Ybo),e(ju,Kbo),e(ju,wq),e(wq,Zbo),e(ju,e5o),e(G,o5o),e(G,Du),e(Du,jse),e(jse,r5o),e(Du,t5o),e(Du,Aq),e(Aq,a5o),e(Du,n5o),e(G,s5o),e(G,Gu),e(Gu,Dse),e(Dse,l5o),e(Gu,i5o),e(Gu,yq),e(yq,d5o),e(Gu,c5o),e(G,f5o),e(G,Ou),e(Ou,Gse),e(Gse,m5o),e(Ou,g5o),e(Ou,Lq),e(Lq,h5o),e(Ou,p5o),e(G,u5o),e(G,Vu),e(Vu,Ose),e(Ose,_5o),e(Vu,b5o),e(Vu,xq),e(xq,v5o),e(Vu,F5o),e(G,T5o),e(G,Xu),e(Xu,Vse),e(Vse,M5o),e(Xu,E5o),e(Xu,$q),e($q,C5o),e(Xu,w5o),e(G,A5o),e(G,zu),e(zu,Xse),e(Xse,y5o),e(zu,L5o),e(zu,kq),e(kq,x5o),e(zu,$5o),e(G,k5o),e(G,Qu),e(Qu,zse),e(zse,S5o),e(Qu,R5o),e(Qu,Sq),e(Sq,B5o),e(Qu,P5o),e(G,I5o),e(G,Wu),e(Wu,Qse),e(Qse,q5o),e(Wu,N5o),e(Wu,Rq),e(Rq,j5o),e(Wu,D5o),e(G,G5o),e(G,Hu),e(Hu,Wse),e(Wse,O5o),e(Hu,V5o),e(Hu,Bq),e(Bq,X5o),e(Hu,z5o),e(G,Q5o),e(G,Uu),e(Uu,Hse),e(Hse,W5o),e(Uu,H5o),e(Uu,Pq),e(Pq,U5o),e(Uu,J5o),e(G,Y5o),e(G,Ju),e(Ju,Use),e(Use,K5o),e(Ju,Z5o),e(Ju,Iq),e(Iq,evo),e(Ju,ovo),e(G,rvo),e(G,Yu),e(Yu,Jse),e(Jse,tvo),e(Yu,avo),e(Yu,qq),e(qq,nvo),e(Yu,svo),e(G,lvo),e(G,Ku),e(Ku,Yse),e(Yse,ivo),e(Ku,dvo),e(Ku,Nq),e(Nq,cvo),e(Ku,fvo),e(G,mvo),e(G,Zu),e(Zu,Kse),e(Kse,gvo),e(Zu,hvo),e(Zu,jq),e(jq,pvo),e(Zu,uvo),e(G,_vo),e(G,e_),e(e_,Zse),e(Zse,bvo),e(e_,vvo),e(e_,Dq),e(Dq,Fvo),e(e_,Tvo),e(G,Mvo),e(G,o_),e(o_,ele),e(ele,Evo),e(o_,Cvo),e(o_,Gq),e(Gq,wvo),e(o_,Avo),e(G,yvo),e(G,r_),e(r_,ole),e(ole,Lvo),e(r_,xvo),e(r_,Oq),e(Oq,$vo),e(r_,kvo),e(G,Svo),e(G,t_),e(t_,rle),e(rle,Rvo),e(t_,Bvo),e(t_,Vq),e(Vq,Pvo),e(t_,Ivo),e(G,qvo),e(G,a_),e(a_,tle),e(tle,Nvo),e(a_,jvo),e(a_,Xq),e(Xq,Dvo),e(a_,Gvo),e(G,Ovo),e(G,n_),e(n_,ale),e(ale,Vvo),e(n_,Xvo),e(n_,zq),e(zq,zvo),e(n_,Qvo),e(G,Wvo),e(G,s_),e(s_,nle),e(nle,Hvo),e(s_,Uvo),e(s_,Qq),e(Qq,Jvo),e(s_,Yvo),e(G,Kvo),e(G,l_),e(l_,sle),e(sle,Zvo),e(l_,eFo),e(l_,Wq),e(Wq,oFo),e(l_,rFo),e(G,tFo),e(G,i_),e(i_,lle),e(lle,aFo),e(i_,nFo),e(i_,Hq),e(Hq,sFo),e(i_,lFo),e(G,iFo),e(G,d_),e(d_,ile),e(ile,dFo),e(d_,cFo),e(d_,Uq),e(Uq,fFo),e(d_,mFo),e(G,gFo),e(G,c_),e(c_,dle),e(dle,hFo),e(c_,pFo),e(c_,Jq),e(Jq,uFo),e(c_,_Fo),e(G,bFo),e(G,f_),e(f_,cle),e(cle,vFo),e(f_,FFo),e(f_,Yq),e(Yq,TFo),e(f_,MFo),e(G,EFo),e(G,m_),e(m_,fle),e(fle,CFo),e(m_,wFo),e(m_,Kq),e(Kq,AFo),e(m_,yFo),e(G,LFo),e(G,g_),e(g_,mle),e(mle,xFo),e(g_,$Fo),e(g_,Zq),e(Zq,kFo),e(g_,SFo),e(G,RFo),e(G,h_),e(h_,gle),e(gle,BFo),e(h_,PFo),e(h_,eN),e(eN,IFo),e(h_,qFo),e(G,NFo),e(G,p_),e(p_,hle),e(hle,jFo),e(p_,DFo),e(p_,oN),e(oN,GFo),e(p_,OFo),e(G,VFo),e(G,u_),e(u_,ple),e(ple,XFo),e(u_,zFo),e(u_,rN),e(rN,QFo),e(u_,WFo),e(Ue,HFo),e(Ue,__),e(__,UFo),e(__,ule),e(ule,JFo),e(__,YFo),e(__,_le),e(_le,KFo),e(Ue,ZFo),M(b_,Ue,null),b(f,FPe,_),b(f,yi,_),e(yi,v_),e(v_,ble),M(E0,ble,null),e(yi,e6o),e(yi,vle),e(vle,o6o),b(f,TPe,_),b(f,$o,_),M(C0,$o,null),e($o,r6o),e($o,Li),e(Li,t6o),e(Li,tN),e(tN,a6o),e(Li,n6o),e(Li,aN),e(aN,s6o),e(Li,l6o),e($o,i6o),e($o,w0),e(w0,d6o),e(w0,Fle),e(Fle,c6o),e(w0,f6o),e($o,m6o),e($o,tt),M(A0,tt,null),e(tt,g6o),e(tt,Tle),e(Tle,h6o),e(tt,p6o),e(tt,xi),e(xi,u6o),e(xi,Mle),e(Mle,_6o),e(xi,b6o),e(xi,nN),e(nN,v6o),e(xi,F6o),e(tt,T6o),M(F_,tt,null),e($o,M6o),e($o,Je),M(y0,Je,null),e(Je,E6o),e(Je,Ele),e(Ele,C6o),e(Je,w6o),e(Je,La),e(La,A6o),e(La,Cle),e(Cle,y6o),e(La,L6o),e(La,wle),e(wle,x6o),e(La,$6o),e(La,Ale),e(Ale,k6o),e(La,S6o),e(Je,R6o),e(Je,z),e(z,T_),e(T_,yle),e(yle,B6o),e(T_,P6o),e(T_,sN),e(sN,I6o),e(T_,q6o),e(z,N6o),e(z,M_),e(M_,Lle),e(Lle,j6o),e(M_,D6o),e(M_,lN),e(lN,G6o),e(M_,O6o),e(z,V6o),e(z,E_),e(E_,xle),e(xle,X6o),e(E_,z6o),e(E_,iN),e(iN,Q6o),e(E_,W6o),e(z,H6o),e(z,C_),e(C_,$le),e($le,U6o),e(C_,J6o),e(C_,dN),e(dN,Y6o),e(C_,K6o),e(z,Z6o),e(z,w_),e(w_,kle),e(kle,eTo),e(w_,oTo),e(w_,cN),e(cN,rTo),e(w_,tTo),e(z,aTo),e(z,A_),e(A_,Sle),e(Sle,nTo),e(A_,sTo),e(A_,fN),e(fN,lTo),e(A_,iTo),e(z,dTo),e(z,y_),e(y_,Rle),e(Rle,cTo),e(y_,fTo),e(y_,mN),e(mN,mTo),e(y_,gTo),e(z,hTo),e(z,L_),e(L_,Ble),e(Ble,pTo),e(L_,uTo),e(L_,gN),e(gN,_To),e(L_,bTo),e(z,vTo),e(z,x_),e(x_,Ple),e(Ple,FTo),e(x_,TTo),e(x_,hN),e(hN,MTo),e(x_,ETo),e(z,CTo),e(z,$_),e($_,Ile),e(Ile,wTo),e($_,ATo),e($_,pN),e(pN,yTo),e($_,LTo),e(z,xTo),e(z,k_),e(k_,qle),e(qle,$To),e(k_,kTo),e(k_,uN),e(uN,STo),e(k_,RTo),e(z,BTo),e(z,S_),e(S_,Nle),e(Nle,PTo),e(S_,ITo),e(S_,_N),e(_N,qTo),e(S_,NTo),e(z,jTo),e(z,R_),e(R_,jle),e(jle,DTo),e(R_,GTo),e(R_,bN),e(bN,OTo),e(R_,VTo),e(z,XTo),e(z,B_),e(B_,Dle),e(Dle,zTo),e(B_,QTo),e(B_,vN),e(vN,WTo),e(B_,HTo),e(z,UTo),e(z,P_),e(P_,Gle),e(Gle,JTo),e(P_,YTo),e(P_,FN),e(FN,KTo),e(P_,ZTo),e(z,e9o),e(z,I_),e(I_,Ole),e(Ole,o9o),e(I_,r9o),e(I_,TN),e(TN,t9o),e(I_,a9o),e(z,n9o),e(z,q_),e(q_,Vle),e(Vle,s9o),e(q_,l9o),e(q_,MN),e(MN,i9o),e(q_,d9o),e(z,c9o),e(z,N_),e(N_,Xle),e(Xle,f9o),e(N_,m9o),e(N_,EN),e(EN,g9o),e(N_,h9o),e(z,p9o),e(z,j_),e(j_,zle),e(zle,u9o),e(j_,_9o),e(j_,CN),e(CN,b9o),e(j_,v9o),e(z,F9o),e(z,D_),e(D_,Qle),e(Qle,T9o),e(D_,M9o),e(D_,wN),e(wN,E9o),e(D_,C9o),e(z,w9o),e(z,G_),e(G_,Wle),e(Wle,A9o),e(G_,y9o),e(G_,AN),e(AN,L9o),e(G_,x9o),e(z,$9o),e(z,O_),e(O_,Hle),e(Hle,k9o),e(O_,S9o),e(O_,yN),e(yN,R9o),e(O_,B9o),e(z,P9o),e(z,V_),e(V_,Ule),e(Ule,I9o),e(V_,q9o),e(V_,LN),e(LN,N9o),e(V_,j9o),e(z,D9o),e(z,X_),e(X_,Jle),e(Jle,G9o),e(X_,O9o),e(X_,xN),e(xN,V9o),e(X_,X9o),e(z,z9o),e(z,z_),e(z_,Yle),e(Yle,Q9o),e(z_,W9o),e(z_,$N),e($N,H9o),e(z_,U9o),e(z,J9o),e(z,Q_),e(Q_,Kle),e(Kle,Y9o),e(Q_,K9o),e(Q_,kN),e(kN,Z9o),e(Q_,eMo),e(z,oMo),e(z,W_),e(W_,Zle),e(Zle,rMo),e(W_,tMo),e(W_,SN),e(SN,aMo),e(W_,nMo),e(z,sMo),e(z,H_),e(H_,eie),e(eie,lMo),e(H_,iMo),e(H_,RN),e(RN,dMo),e(H_,cMo),e(z,fMo),e(z,U_),e(U_,oie),e(oie,mMo),e(U_,gMo),e(U_,BN),e(BN,hMo),e(U_,pMo),e(z,uMo),e(z,J_),e(J_,rie),e(rie,_Mo),e(J_,bMo),e(J_,PN),e(PN,vMo),e(J_,FMo),e(z,TMo),e(z,Y_),e(Y_,tie),e(tie,MMo),e(Y_,EMo),e(Y_,IN),e(IN,CMo),e(Y_,wMo),e(z,AMo),e(z,K_),e(K_,aie),e(aie,yMo),e(K_,LMo),e(K_,qN),e(qN,xMo),e(K_,$Mo),e(z,kMo),e(z,Z_),e(Z_,nie),e(nie,SMo),e(Z_,RMo),e(Z_,NN),e(NN,BMo),e(Z_,PMo),e(z,IMo),e(z,e2),e(e2,sie),e(sie,qMo),e(e2,NMo),e(e2,jN),e(jN,jMo),e(e2,DMo),e(z,GMo),e(z,o2),e(o2,lie),e(lie,OMo),e(o2,VMo),e(o2,DN),e(DN,XMo),e(o2,zMo),e(Je,QMo),e(Je,r2),e(r2,WMo),e(r2,iie),e(iie,HMo),e(r2,UMo),e(r2,die),e(die,JMo),e(Je,YMo),M(t2,Je,null),b(f,MPe,_),b(f,$i,_),e($i,a2),e(a2,cie),M(L0,cie,null),e($i,KMo),e($i,fie),e(fie,ZMo),b(f,EPe,_),b(f,ko,_),M(x0,ko,null),e(ko,e4o),e(ko,ki),e(ki,o4o),e(ki,GN),e(GN,r4o),e(ki,t4o),e(ki,ON),e(ON,a4o),e(ki,n4o),e(ko,s4o),e(ko,$0),e($0,l4o),e($0,mie),e(mie,i4o),e($0,d4o),e(ko,c4o),e(ko,at),M(k0,at,null),e(at,f4o),e(at,gie),e(gie,m4o),e(at,g4o),e(at,Si),e(Si,h4o),e(Si,hie),e(hie,p4o),e(Si,u4o),e(Si,VN),e(VN,_4o),e(Si,b4o),e(at,v4o),M(n2,at,null),e(ko,F4o),e(ko,Ye),M(S0,Ye,null),e(Ye,T4o),e(Ye,pie),e(pie,M4o),e(Ye,E4o),e(Ye,xa),e(xa,C4o),e(xa,uie),e(uie,w4o),e(xa,A4o),e(xa,_ie),e(_ie,y4o),e(xa,L4o),e(xa,bie),e(bie,x4o),e(xa,$4o),e(Ye,k4o),e(Ye,Q),e(Q,s2),e(s2,vie),e(vie,S4o),e(s2,R4o),e(s2,XN),e(XN,B4o),e(s2,P4o),e(Q,I4o),e(Q,l2),e(l2,Fie),e(Fie,q4o),e(l2,N4o),e(l2,zN),e(zN,j4o),e(l2,D4o),e(Q,G4o),e(Q,i2),e(i2,Tie),e(Tie,O4o),e(i2,V4o),e(i2,QN),e(QN,X4o),e(i2,z4o),e(Q,Q4o),e(Q,d2),e(d2,Mie),e(Mie,W4o),e(d2,H4o),e(d2,WN),e(WN,U4o),e(d2,J4o),e(Q,Y4o),e(Q,c2),e(c2,Eie),e(Eie,K4o),e(c2,Z4o),e(c2,HN),e(HN,eEo),e(c2,oEo),e(Q,rEo),e(Q,f2),e(f2,Cie),e(Cie,tEo),e(f2,aEo),e(f2,UN),e(UN,nEo),e(f2,sEo),e(Q,lEo),e(Q,m2),e(m2,wie),e(wie,iEo),e(m2,dEo),e(m2,JN),e(JN,cEo),e(m2,fEo),e(Q,mEo),e(Q,g2),e(g2,Aie),e(Aie,gEo),e(g2,hEo),e(g2,YN),e(YN,pEo),e(g2,uEo),e(Q,_Eo),e(Q,h2),e(h2,yie),e(yie,bEo),e(h2,vEo),e(h2,KN),e(KN,FEo),e(h2,TEo),e(Q,MEo),e(Q,p2),e(p2,Lie),e(Lie,EEo),e(p2,CEo),e(p2,ZN),e(ZN,wEo),e(p2,AEo),e(Q,yEo),e(Q,u2),e(u2,xie),e(xie,LEo),e(u2,xEo),e(u2,ej),e(ej,$Eo),e(u2,kEo),e(Q,SEo),e(Q,_2),e(_2,$ie),e($ie,REo),e(_2,BEo),e(_2,oj),e(oj,PEo),e(_2,IEo),e(Q,qEo),e(Q,b2),e(b2,kie),e(kie,NEo),e(b2,jEo),e(b2,rj),e(rj,DEo),e(b2,GEo),e(Q,OEo),e(Q,v2),e(v2,Sie),e(Sie,VEo),e(v2,XEo),e(v2,tj),e(tj,zEo),e(v2,QEo),e(Q,WEo),e(Q,F2),e(F2,Rie),e(Rie,HEo),e(F2,UEo),e(F2,aj),e(aj,JEo),e(F2,YEo),e(Q,KEo),e(Q,T2),e(T2,Bie),e(Bie,ZEo),e(T2,eCo),e(T2,nj),e(nj,oCo),e(T2,rCo),e(Q,tCo),e(Q,M2),e(M2,Pie),e(Pie,aCo),e(M2,nCo),e(M2,sj),e(sj,sCo),e(M2,lCo),e(Q,iCo),e(Q,E2),e(E2,Iie),e(Iie,dCo),e(E2,cCo),e(E2,lj),e(lj,fCo),e(E2,mCo),e(Q,gCo),e(Q,C2),e(C2,qie),e(qie,hCo),e(C2,pCo),e(C2,ij),e(ij,uCo),e(C2,_Co),e(Q,bCo),e(Q,w2),e(w2,Nie),e(Nie,vCo),e(w2,FCo),e(w2,dj),e(dj,TCo),e(w2,MCo),e(Q,ECo),e(Q,A2),e(A2,jie),e(jie,CCo),e(A2,wCo),e(A2,cj),e(cj,ACo),e(A2,yCo),e(Q,LCo),e(Q,y2),e(y2,Die),e(Die,xCo),e(y2,$Co),e(y2,fj),e(fj,kCo),e(y2,SCo),e(Q,RCo),e(Q,L2),e(L2,Gie),e(Gie,BCo),e(L2,PCo),e(L2,mj),e(mj,ICo),e(L2,qCo),e(Q,NCo),e(Q,x2),e(x2,Oie),e(Oie,jCo),e(x2,DCo),e(x2,gj),e(gj,GCo),e(x2,OCo),e(Q,VCo),e(Q,$2),e($2,Vie),e(Vie,XCo),e($2,zCo),e($2,hj),e(hj,QCo),e($2,WCo),e(Q,HCo),e(Q,k2),e(k2,Xie),e(Xie,UCo),e(k2,JCo),e(k2,pj),e(pj,YCo),e(k2,KCo),e(Q,ZCo),e(Q,S2),e(S2,zie),e(zie,e3o),e(S2,o3o),e(S2,uj),e(uj,r3o),e(S2,t3o),e(Q,a3o),e(Q,R2),e(R2,Qie),e(Qie,n3o),e(R2,s3o),e(R2,_j),e(_j,l3o),e(R2,i3o),e(Q,d3o),e(Q,B2),e(B2,Wie),e(Wie,c3o),e(B2,f3o),e(B2,bj),e(bj,m3o),e(B2,g3o),e(Q,h3o),e(Q,P2),e(P2,Hie),e(Hie,p3o),e(P2,u3o),e(P2,vj),e(vj,_3o),e(P2,b3o),e(Q,v3o),e(Q,I2),e(I2,Uie),e(Uie,F3o),e(I2,T3o),e(I2,Jie),e(Jie,M3o),e(I2,E3o),e(Q,C3o),e(Q,q2),e(q2,Yie),e(Yie,w3o),e(q2,A3o),e(q2,Fj),e(Fj,y3o),e(q2,L3o),e(Q,x3o),e(Q,N2),e(N2,Kie),e(Kie,$3o),e(N2,k3o),e(N2,Tj),e(Tj,S3o),e(N2,R3o),e(Q,B3o),e(Q,j2),e(j2,Zie),e(Zie,P3o),e(j2,I3o),e(j2,Mj),e(Mj,q3o),e(j2,N3o),e(Q,j3o),e(Q,D2),e(D2,ede),e(ede,D3o),e(D2,G3o),e(D2,Ej),e(Ej,O3o),e(D2,V3o),e(Ye,X3o),e(Ye,G2),e(G2,z3o),e(G2,ode),e(ode,Q3o),e(G2,W3o),e(G2,rde),e(rde,H3o),e(Ye,U3o),M(O2,Ye,null),b(f,CPe,_),b(f,Ri,_),e(Ri,V2),e(V2,tde),M(R0,tde,null),e(Ri,J3o),e(Ri,ade),e(ade,Y3o),b(f,wPe,_),b(f,So,_),M(B0,So,null),e(So,K3o),e(So,Bi),e(Bi,Z3o),e(Bi,Cj),e(Cj,ewo),e(Bi,owo),e(Bi,wj),e(wj,rwo),e(Bi,two),e(So,awo),e(So,P0),e(P0,nwo),e(P0,nde),e(nde,swo),e(P0,lwo),e(So,iwo),e(So,nt),M(I0,nt,null),e(nt,dwo),e(nt,sde),e(sde,cwo),e(nt,fwo),e(nt,Pi),e(Pi,mwo),e(Pi,lde),e(lde,gwo),e(Pi,hwo),e(Pi,Aj),e(Aj,pwo),e(Pi,uwo),e(nt,_wo),M(X2,nt,null),e(So,bwo),e(So,Ke),M(q0,Ke,null),e(Ke,vwo),e(Ke,ide),e(ide,Fwo),e(Ke,Two),e(Ke,$a),e($a,Mwo),e($a,dde),e(dde,Ewo),e($a,Cwo),e($a,cde),e(cde,wwo),e($a,Awo),e($a,fde),e(fde,ywo),e($a,Lwo),e(Ke,xwo),e(Ke,he),e(he,z2),e(z2,mde),e(mde,$wo),e(z2,kwo),e(z2,yj),e(yj,Swo),e(z2,Rwo),e(he,Bwo),e(he,Q2),e(Q2,gde),e(gde,Pwo),e(Q2,Iwo),e(Q2,Lj),e(Lj,qwo),e(Q2,Nwo),e(he,jwo),e(he,W2),e(W2,hde),e(hde,Dwo),e(W2,Gwo),e(W2,xj),e(xj,Owo),e(W2,Vwo),e(he,Xwo),e(he,H2),e(H2,pde),e(pde,zwo),e(H2,Qwo),e(H2,$j),e($j,Wwo),e(H2,Hwo),e(he,Uwo),e(he,U2),e(U2,ude),e(ude,Jwo),e(U2,Ywo),e(U2,kj),e(kj,Kwo),e(U2,Zwo),e(he,eAo),e(he,J2),e(J2,_de),e(_de,oAo),e(J2,rAo),e(J2,Sj),e(Sj,tAo),e(J2,aAo),e(he,nAo),e(he,Y2),e(Y2,bde),e(bde,sAo),e(Y2,lAo),e(Y2,Rj),e(Rj,iAo),e(Y2,dAo),e(he,cAo),e(he,K2),e(K2,vde),e(vde,fAo),e(K2,mAo),e(K2,Bj),e(Bj,gAo),e(K2,hAo),e(he,pAo),e(he,Z2),e(Z2,Fde),e(Fde,uAo),e(Z2,_Ao),e(Z2,Pj),e(Pj,bAo),e(Z2,vAo),e(he,FAo),e(he,e1),e(e1,Tde),e(Tde,TAo),e(e1,MAo),e(e1,Ij),e(Ij,EAo),e(e1,CAo),e(he,wAo),e(he,o1),e(o1,Mde),e(Mde,AAo),e(o1,yAo),e(o1,qj),e(qj,LAo),e(o1,xAo),e(he,$Ao),e(he,r1),e(r1,Ede),e(Ede,kAo),e(r1,SAo),e(r1,Nj),e(Nj,RAo),e(r1,BAo),e(he,PAo),e(he,t1),e(t1,Cde),e(Cde,IAo),e(t1,qAo),e(t1,jj),e(jj,NAo),e(t1,jAo),e(he,DAo),e(he,a1),e(a1,wde),e(wde,GAo),e(a1,OAo),e(a1,Dj),e(Dj,VAo),e(a1,XAo),e(he,zAo),e(he,n1),e(n1,Ade),e(Ade,QAo),e(n1,WAo),e(n1,Gj),e(Gj,HAo),e(n1,UAo),e(he,JAo),e(he,s1),e(s1,yde),e(yde,YAo),e(s1,KAo),e(s1,Oj),e(Oj,ZAo),e(s1,e0o),e(he,o0o),e(he,l1),e(l1,Lde),e(Lde,r0o),e(l1,t0o),e(l1,Vj),e(Vj,a0o),e(l1,n0o),e(Ke,s0o),e(Ke,i1),e(i1,l0o),e(i1,xde),e(xde,i0o),e(i1,d0o),e(i1,$de),e($de,c0o),e(Ke,f0o),M(d1,Ke,null),b(f,APe,_),b(f,Ii,_),e(Ii,c1),e(c1,kde),M(N0,kde,null),e(Ii,m0o),e(Ii,Sde),e(Sde,g0o),b(f,yPe,_),b(f,Ro,_),M(j0,Ro,null),e(Ro,h0o),e(Ro,qi),e(qi,p0o),e(qi,Xj),e(Xj,u0o),e(qi,_0o),e(qi,zj),e(zj,b0o),e(qi,v0o),e(Ro,F0o),e(Ro,D0),e(D0,T0o),e(D0,Rde),e(Rde,M0o),e(D0,E0o),e(Ro,C0o),e(Ro,st),M(G0,st,null),e(st,w0o),e(st,Bde),e(Bde,A0o),e(st,y0o),e(st,Ni),e(Ni,L0o),e(Ni,Pde),e(Pde,x0o),e(Ni,$0o),e(Ni,Qj),e(Qj,k0o),e(Ni,S0o),e(st,R0o),M(f1,st,null),e(Ro,B0o),e(Ro,Ze),M(O0,Ze,null),e(Ze,P0o),e(Ze,Ide),e(Ide,I0o),e(Ze,q0o),e(Ze,ka),e(ka,N0o),e(ka,qde),e(qde,j0o),e(ka,D0o),e(ka,Nde),e(Nde,G0o),e(ka,O0o),e(ka,jde),e(jde,V0o),e(ka,X0o),e(Ze,z0o),e(Ze,q),e(q,m1),e(m1,Dde),e(Dde,Q0o),e(m1,W0o),e(m1,Wj),e(Wj,H0o),e(m1,U0o),e(q,J0o),e(q,g1),e(g1,Gde),e(Gde,Y0o),e(g1,K0o),e(g1,Hj),e(Hj,Z0o),e(g1,eyo),e(q,oyo),e(q,h1),e(h1,Ode),e(Ode,ryo),e(h1,tyo),e(h1,Uj),e(Uj,ayo),e(h1,nyo),e(q,syo),e(q,p1),e(p1,Vde),e(Vde,lyo),e(p1,iyo),e(p1,Jj),e(Jj,dyo),e(p1,cyo),e(q,fyo),e(q,u1),e(u1,Xde),e(Xde,myo),e(u1,gyo),e(u1,Yj),e(Yj,hyo),e(u1,pyo),e(q,uyo),e(q,_1),e(_1,zde),e(zde,_yo),e(_1,byo),e(_1,Kj),e(Kj,vyo),e(_1,Fyo),e(q,Tyo),e(q,b1),e(b1,Qde),e(Qde,Myo),e(b1,Eyo),e(b1,Zj),e(Zj,Cyo),e(b1,wyo),e(q,Ayo),e(q,v1),e(v1,Wde),e(Wde,yyo),e(v1,Lyo),e(v1,eD),e(eD,xyo),e(v1,$yo),e(q,kyo),e(q,F1),e(F1,Hde),e(Hde,Syo),e(F1,Ryo),e(F1,oD),e(oD,Byo),e(F1,Pyo),e(q,Iyo),e(q,T1),e(T1,Ude),e(Ude,qyo),e(T1,Nyo),e(T1,rD),e(rD,jyo),e(T1,Dyo),e(q,Gyo),e(q,M1),e(M1,Jde),e(Jde,Oyo),e(M1,Vyo),e(M1,tD),e(tD,Xyo),e(M1,zyo),e(q,Qyo),e(q,E1),e(E1,Yde),e(Yde,Wyo),e(E1,Hyo),e(E1,aD),e(aD,Uyo),e(E1,Jyo),e(q,Yyo),e(q,C1),e(C1,Kde),e(Kde,Kyo),e(C1,Zyo),e(C1,nD),e(nD,eLo),e(C1,oLo),e(q,rLo),e(q,w1),e(w1,Zde),e(Zde,tLo),e(w1,aLo),e(w1,sD),e(sD,nLo),e(w1,sLo),e(q,lLo),e(q,A1),e(A1,ece),e(ece,iLo),e(A1,dLo),e(A1,lD),e(lD,cLo),e(A1,fLo),e(q,mLo),e(q,y1),e(y1,oce),e(oce,gLo),e(y1,hLo),e(y1,iD),e(iD,pLo),e(y1,uLo),e(q,_Lo),e(q,L1),e(L1,rce),e(rce,bLo),e(L1,vLo),e(L1,dD),e(dD,FLo),e(L1,TLo),e(q,MLo),e(q,x1),e(x1,tce),e(tce,ELo),e(x1,CLo),e(x1,cD),e(cD,wLo),e(x1,ALo),e(q,yLo),e(q,$1),e($1,ace),e(ace,LLo),e($1,xLo),e($1,fD),e(fD,$Lo),e($1,kLo),e(q,SLo),e(q,k1),e(k1,nce),e(nce,RLo),e(k1,BLo),e(k1,mD),e(mD,PLo),e(k1,ILo),e(q,qLo),e(q,S1),e(S1,sce),e(sce,NLo),e(S1,jLo),e(S1,gD),e(gD,DLo),e(S1,GLo),e(q,OLo),e(q,R1),e(R1,lce),e(lce,VLo),e(R1,XLo),e(R1,hD),e(hD,zLo),e(R1,QLo),e(q,WLo),e(q,B1),e(B1,ice),e(ice,HLo),e(B1,ULo),e(B1,pD),e(pD,JLo),e(B1,YLo),e(q,KLo),e(q,P1),e(P1,dce),e(dce,ZLo),e(P1,e8o),e(P1,uD),e(uD,o8o),e(P1,r8o),e(q,t8o),e(q,I1),e(I1,cce),e(cce,a8o),e(I1,n8o),e(I1,_D),e(_D,s8o),e(I1,l8o),e(q,i8o),e(q,q1),e(q1,fce),e(fce,d8o),e(q1,c8o),e(q1,bD),e(bD,f8o),e(q1,m8o),e(q,g8o),e(q,N1),e(N1,mce),e(mce,h8o),e(N1,p8o),e(N1,vD),e(vD,u8o),e(N1,_8o),e(q,b8o),e(q,j1),e(j1,gce),e(gce,v8o),e(j1,F8o),e(j1,FD),e(FD,T8o),e(j1,M8o),e(q,E8o),e(q,D1),e(D1,hce),e(hce,C8o),e(D1,w8o),e(D1,TD),e(TD,A8o),e(D1,y8o),e(q,L8o),e(q,G1),e(G1,pce),e(pce,x8o),e(G1,$8o),e(G1,MD),e(MD,k8o),e(G1,S8o),e(q,R8o),e(q,O1),e(O1,uce),e(uce,B8o),e(O1,P8o),e(O1,ED),e(ED,I8o),e(O1,q8o),e(q,N8o),e(q,V1),e(V1,_ce),e(_ce,j8o),e(V1,D8o),e(V1,CD),e(CD,G8o),e(V1,O8o),e(q,V8o),e(q,X1),e(X1,bce),e(bce,X8o),e(X1,z8o),e(X1,wD),e(wD,Q8o),e(X1,W8o),e(q,H8o),e(q,z1),e(z1,vce),e(vce,U8o),e(z1,J8o),e(z1,AD),e(AD,Y8o),e(z1,K8o),e(q,Z8o),e(q,Q1),e(Q1,Fce),e(Fce,exo),e(Q1,oxo),e(Q1,yD),e(yD,rxo),e(Q1,txo),e(q,axo),e(q,W1),e(W1,Tce),e(Tce,nxo),e(W1,sxo),e(W1,LD),e(LD,lxo),e(W1,ixo),e(q,dxo),e(q,H1),e(H1,Mce),e(Mce,cxo),e(H1,fxo),e(H1,xD),e(xD,mxo),e(H1,gxo),e(q,hxo),e(q,U1),e(U1,Ece),e(Ece,pxo),e(U1,uxo),e(U1,$D),e($D,_xo),e(U1,bxo),e(q,vxo),e(q,J1),e(J1,Cce),e(Cce,Fxo),e(J1,Txo),e(J1,kD),e(kD,Mxo),e(J1,Exo),e(q,Cxo),e(q,Y1),e(Y1,wce),e(wce,wxo),e(Y1,Axo),e(Y1,SD),e(SD,yxo),e(Y1,Lxo),e(q,xxo),e(q,K1),e(K1,Ace),e(Ace,$xo),e(K1,kxo),e(K1,RD),e(RD,Sxo),e(K1,Rxo),e(q,Bxo),e(q,Z1),e(Z1,yce),e(yce,Pxo),e(Z1,Ixo),e(Z1,BD),e(BD,qxo),e(Z1,Nxo),e(q,jxo),e(q,eb),e(eb,Lce),e(Lce,Dxo),e(eb,Gxo),e(eb,PD),e(PD,Oxo),e(eb,Vxo),e(q,Xxo),e(q,ob),e(ob,xce),e(xce,zxo),e(ob,Qxo),e(ob,ID),e(ID,Wxo),e(ob,Hxo),e(q,Uxo),e(q,rb),e(rb,$ce),e($ce,Jxo),e(rb,Yxo),e(rb,qD),e(qD,Kxo),e(rb,Zxo),e(q,e7o),e(q,tb),e(tb,kce),e(kce,o7o),e(tb,r7o),e(tb,ND),e(ND,t7o),e(tb,a7o),e(q,n7o),e(q,ab),e(ab,Sce),e(Sce,s7o),e(ab,l7o),e(ab,jD),e(jD,i7o),e(ab,d7o),e(Ze,c7o),e(Ze,nb),e(nb,f7o),e(nb,Rce),e(Rce,m7o),e(nb,g7o),e(nb,Bce),e(Bce,h7o),e(Ze,p7o),M(sb,Ze,null),b(f,LPe,_),b(f,ji,_),e(ji,lb),e(lb,Pce),M(V0,Pce,null),e(ji,u7o),e(ji,Ice),e(Ice,_7o),b(f,xPe,_),b(f,Bo,_),M(X0,Bo,null),e(Bo,b7o),e(Bo,Di),e(Di,v7o),e(Di,DD),e(DD,F7o),e(Di,T7o),e(Di,GD),e(GD,M7o),e(Di,E7o),e(Bo,C7o),e(Bo,z0),e(z0,w7o),e(z0,qce),e(qce,A7o),e(z0,y7o),e(Bo,L7o),e(Bo,lt),M(Q0,lt,null),e(lt,x7o),e(lt,Nce),e(Nce,$7o),e(lt,k7o),e(lt,Gi),e(Gi,S7o),e(Gi,jce),e(jce,R7o),e(Gi,B7o),e(Gi,OD),e(OD,P7o),e(Gi,I7o),e(lt,q7o),M(ib,lt,null),e(Bo,N7o),e(Bo,eo),M(W0,eo,null),e(eo,j7o),e(eo,Dce),e(Dce,D7o),e(eo,G7o),e(eo,Sa),e(Sa,O7o),e(Sa,Gce),e(Gce,V7o),e(Sa,X7o),e(Sa,Oce),e(Oce,z7o),e(Sa,Q7o),e(Sa,Vce),e(Vce,W7o),e(Sa,H7o),e(eo,U7o),e(eo,Y),e(Y,db),e(db,Xce),e(Xce,J7o),e(db,Y7o),e(db,VD),e(VD,K7o),e(db,Z7o),e(Y,e$o),e(Y,cb),e(cb,zce),e(zce,o$o),e(cb,r$o),e(cb,XD),e(XD,t$o),e(cb,a$o),e(Y,n$o),e(Y,fb),e(fb,Qce),e(Qce,s$o),e(fb,l$o),e(fb,zD),e(zD,i$o),e(fb,d$o),e(Y,c$o),e(Y,mb),e(mb,Wce),e(Wce,f$o),e(mb,m$o),e(mb,QD),e(QD,g$o),e(mb,h$o),e(Y,p$o),e(Y,gb),e(gb,Hce),e(Hce,u$o),e(gb,_$o),e(gb,WD),e(WD,b$o),e(gb,v$o),e(Y,F$o),e(Y,hb),e(hb,Uce),e(Uce,T$o),e(hb,M$o),e(hb,HD),e(HD,E$o),e(hb,C$o),e(Y,w$o),e(Y,pb),e(pb,Jce),e(Jce,A$o),e(pb,y$o),e(pb,UD),e(UD,L$o),e(pb,x$o),e(Y,$$o),e(Y,ub),e(ub,Yce),e(Yce,k$o),e(ub,S$o),e(ub,JD),e(JD,R$o),e(ub,B$o),e(Y,P$o),e(Y,_b),e(_b,Kce),e(Kce,I$o),e(_b,q$o),e(_b,YD),e(YD,N$o),e(_b,j$o),e(Y,D$o),e(Y,bb),e(bb,Zce),e(Zce,G$o),e(bb,O$o),e(bb,KD),e(KD,V$o),e(bb,X$o),e(Y,z$o),e(Y,vb),e(vb,efe),e(efe,Q$o),e(vb,W$o),e(vb,ZD),e(ZD,H$o),e(vb,U$o),e(Y,J$o),e(Y,Fb),e(Fb,ofe),e(ofe,Y$o),e(Fb,K$o),e(Fb,eG),e(eG,Z$o),e(Fb,eko),e(Y,oko),e(Y,Tb),e(Tb,rfe),e(rfe,rko),e(Tb,tko),e(Tb,oG),e(oG,ako),e(Tb,nko),e(Y,sko),e(Y,Mb),e(Mb,tfe),e(tfe,lko),e(Mb,iko),e(Mb,rG),e(rG,dko),e(Mb,cko),e(Y,fko),e(Y,Eb),e(Eb,afe),e(afe,mko),e(Eb,gko),e(Eb,tG),e(tG,hko),e(Eb,pko),e(Y,uko),e(Y,Cb),e(Cb,nfe),e(nfe,_ko),e(Cb,bko),e(Cb,aG),e(aG,vko),e(Cb,Fko),e(Y,Tko),e(Y,wb),e(wb,sfe),e(sfe,Mko),e(wb,Eko),e(wb,nG),e(nG,Cko),e(wb,wko),e(Y,Ako),e(Y,Ab),e(Ab,lfe),e(lfe,yko),e(Ab,Lko),e(Ab,sG),e(sG,xko),e(Ab,$ko),e(Y,kko),e(Y,yb),e(yb,ife),e(ife,Sko),e(yb,Rko),e(yb,lG),e(lG,Bko),e(yb,Pko),e(Y,Iko),e(Y,Lb),e(Lb,dfe),e(dfe,qko),e(Lb,Nko),e(Lb,iG),e(iG,jko),e(Lb,Dko),e(Y,Gko),e(Y,xb),e(xb,cfe),e(cfe,Oko),e(xb,Vko),e(xb,dG),e(dG,Xko),e(xb,zko),e(Y,Qko),e(Y,$b),e($b,ffe),e(ffe,Wko),e($b,Hko),e($b,cG),e(cG,Uko),e($b,Jko),e(Y,Yko),e(Y,kb),e(kb,mfe),e(mfe,Kko),e(kb,Zko),e(kb,fG),e(fG,eSo),e(kb,oSo),e(Y,rSo),e(Y,Sb),e(Sb,gfe),e(gfe,tSo),e(Sb,aSo),e(Sb,mG),e(mG,nSo),e(Sb,sSo),e(Y,lSo),e(Y,Rb),e(Rb,hfe),e(hfe,iSo),e(Rb,dSo),e(Rb,gG),e(gG,cSo),e(Rb,fSo),e(Y,mSo),e(Y,Bb),e(Bb,pfe),e(pfe,gSo),e(Bb,hSo),e(Bb,hG),e(hG,pSo),e(Bb,uSo),e(Y,_So),e(Y,Pb),e(Pb,ufe),e(ufe,bSo),e(Pb,vSo),e(Pb,pG),e(pG,FSo),e(Pb,TSo),e(Y,MSo),e(Y,Ib),e(Ib,_fe),e(_fe,ESo),e(Ib,CSo),e(Ib,uG),e(uG,wSo),e(Ib,ASo),e(eo,ySo),e(eo,qb),e(qb,LSo),e(qb,bfe),e(bfe,xSo),e(qb,$So),e(qb,vfe),e(vfe,kSo),e(eo,SSo),M(Nb,eo,null),b(f,$Pe,_),b(f,Oi,_),e(Oi,jb),e(jb,Ffe),M(H0,Ffe,null),e(Oi,RSo),e(Oi,Tfe),e(Tfe,BSo),b(f,kPe,_),b(f,Po,_),M(U0,Po,null),e(Po,PSo),e(Po,Vi),e(Vi,ISo),e(Vi,_G),e(_G,qSo),e(Vi,NSo),e(Vi,bG),e(bG,jSo),e(Vi,DSo),e(Po,GSo),e(Po,J0),e(J0,OSo),e(J0,Mfe),e(Mfe,VSo),e(J0,XSo),e(Po,zSo),e(Po,it),M(Y0,it,null),e(it,QSo),e(it,Efe),e(Efe,WSo),e(it,HSo),e(it,Xi),e(Xi,USo),e(Xi,Cfe),e(Cfe,JSo),e(Xi,YSo),e(Xi,vG),e(vG,KSo),e(Xi,ZSo),e(it,eRo),M(Db,it,null),e(Po,oRo),e(Po,oo),M(K0,oo,null),e(oo,rRo),e(oo,wfe),e(wfe,tRo),e(oo,aRo),e(oo,Ra),e(Ra,nRo),e(Ra,Afe),e(Afe,sRo),e(Ra,lRo),e(Ra,yfe),e(yfe,iRo),e(Ra,dRo),e(Ra,Lfe),e(Lfe,cRo),e(Ra,fRo),e(oo,mRo),e(oo,Yr),e(Yr,Gb),e(Gb,xfe),e(xfe,gRo),e(Gb,hRo),e(Gb,FG),e(FG,pRo),e(Gb,uRo),e(Yr,_Ro),e(Yr,Ob),e(Ob,$fe),e($fe,bRo),e(Ob,vRo),e(Ob,TG),e(TG,FRo),e(Ob,TRo),e(Yr,MRo),e(Yr,Vb),e(Vb,kfe),e(kfe,ERo),e(Vb,CRo),e(Vb,MG),e(MG,wRo),e(Vb,ARo),e(Yr,yRo),e(Yr,Xb),e(Xb,Sfe),e(Sfe,LRo),e(Xb,xRo),e(Xb,EG),e(EG,$Ro),e(Xb,kRo),e(Yr,SRo),e(Yr,zb),e(zb,Rfe),e(Rfe,RRo),e(zb,BRo),e(zb,CG),e(CG,PRo),e(zb,IRo),e(oo,qRo),e(oo,Qb),e(Qb,NRo),e(Qb,Bfe),e(Bfe,jRo),e(Qb,DRo),e(Qb,Pfe),e(Pfe,GRo),e(oo,ORo),M(Wb,oo,null),b(f,SPe,_),b(f,zi,_),e(zi,Hb),e(Hb,Ife),M(Z0,Ife,null),e(zi,VRo),e(zi,qfe),e(qfe,XRo),b(f,RPe,_),b(f,Io,_),M(ey,Io,null),e(Io,zRo),e(Io,Qi),e(Qi,QRo),e(Qi,wG),e(wG,WRo),e(Qi,HRo),e(Qi,AG),e(AG,URo),e(Qi,JRo),e(Io,YRo),e(Io,oy),e(oy,KRo),e(oy,Nfe),e(Nfe,ZRo),e(oy,eBo),e(Io,oBo),e(Io,dt),M(ry,dt,null),e(dt,rBo),e(dt,jfe),e(jfe,tBo),e(dt,aBo),e(dt,Wi),e(Wi,nBo),e(Wi,Dfe),e(Dfe,sBo),e(Wi,lBo),e(Wi,yG),e(yG,iBo),e(Wi,dBo),e(dt,cBo),M(Ub,dt,null),e(Io,fBo),e(Io,ro),M(ty,ro,null),e(ro,mBo),e(ro,Gfe),e(Gfe,gBo),e(ro,hBo),e(ro,Ba),e(Ba,pBo),e(Ba,Ofe),e(Ofe,uBo),e(Ba,_Bo),e(Ba,Vfe),e(Vfe,bBo),e(Ba,vBo),e(Ba,Xfe),e(Xfe,FBo),e(Ba,TBo),e(ro,MBo),e(ro,U),e(U,Jb),e(Jb,zfe),e(zfe,EBo),e(Jb,CBo),e(Jb,LG),e(LG,wBo),e(Jb,ABo),e(U,yBo),e(U,Yb),e(Yb,Qfe),e(Qfe,LBo),e(Yb,xBo),e(Yb,xG),e(xG,$Bo),e(Yb,kBo),e(U,SBo),e(U,Kb),e(Kb,Wfe),e(Wfe,RBo),e(Kb,BBo),e(Kb,$G),e($G,PBo),e(Kb,IBo),e(U,qBo),e(U,Zb),e(Zb,Hfe),e(Hfe,NBo),e(Zb,jBo),e(Zb,kG),e(kG,DBo),e(Zb,GBo),e(U,OBo),e(U,e5),e(e5,Ufe),e(Ufe,VBo),e(e5,XBo),e(e5,SG),e(SG,zBo),e(e5,QBo),e(U,WBo),e(U,o5),e(o5,Jfe),e(Jfe,HBo),e(o5,UBo),e(o5,RG),e(RG,JBo),e(o5,YBo),e(U,KBo),e(U,r5),e(r5,Yfe),e(Yfe,ZBo),e(r5,ePo),e(r5,BG),e(BG,oPo),e(r5,rPo),e(U,tPo),e(U,t5),e(t5,Kfe),e(Kfe,aPo),e(t5,nPo),e(t5,PG),e(PG,sPo),e(t5,lPo),e(U,iPo),e(U,a5),e(a5,Zfe),e(Zfe,dPo),e(a5,cPo),e(a5,IG),e(IG,fPo),e(a5,mPo),e(U,gPo),e(U,n5),e(n5,eme),e(eme,hPo),e(n5,pPo),e(n5,qG),e(qG,uPo),e(n5,_Po),e(U,bPo),e(U,s5),e(s5,ome),e(ome,vPo),e(s5,FPo),e(s5,NG),e(NG,TPo),e(s5,MPo),e(U,EPo),e(U,l5),e(l5,rme),e(rme,CPo),e(l5,wPo),e(l5,jG),e(jG,APo),e(l5,yPo),e(U,LPo),e(U,i5),e(i5,tme),e(tme,xPo),e(i5,$Po),e(i5,DG),e(DG,kPo),e(i5,SPo),e(U,RPo),e(U,d5),e(d5,ame),e(ame,BPo),e(d5,PPo),e(d5,GG),e(GG,IPo),e(d5,qPo),e(U,NPo),e(U,c5),e(c5,nme),e(nme,jPo),e(c5,DPo),e(c5,OG),e(OG,GPo),e(c5,OPo),e(U,VPo),e(U,f5),e(f5,sme),e(sme,XPo),e(f5,zPo),e(f5,VG),e(VG,QPo),e(f5,WPo),e(U,HPo),e(U,m5),e(m5,lme),e(lme,UPo),e(m5,JPo),e(m5,XG),e(XG,YPo),e(m5,KPo),e(U,ZPo),e(U,g5),e(g5,ime),e(ime,eIo),e(g5,oIo),e(g5,zG),e(zG,rIo),e(g5,tIo),e(U,aIo),e(U,h5),e(h5,dme),e(dme,nIo),e(h5,sIo),e(h5,QG),e(QG,lIo),e(h5,iIo),e(U,dIo),e(U,p5),e(p5,cme),e(cme,cIo),e(p5,fIo),e(p5,WG),e(WG,mIo),e(p5,gIo),e(U,hIo),e(U,u5),e(u5,fme),e(fme,pIo),e(u5,uIo),e(u5,HG),e(HG,_Io),e(u5,bIo),e(U,vIo),e(U,_5),e(_5,mme),e(mme,FIo),e(_5,TIo),e(_5,UG),e(UG,MIo),e(_5,EIo),e(U,CIo),e(U,b5),e(b5,gme),e(gme,wIo),e(b5,AIo),e(b5,JG),e(JG,yIo),e(b5,LIo),e(U,xIo),e(U,v5),e(v5,hme),e(hme,$Io),e(v5,kIo),e(v5,YG),e(YG,SIo),e(v5,RIo),e(U,BIo),e(U,F5),e(F5,pme),e(pme,PIo),e(F5,IIo),e(F5,KG),e(KG,qIo),e(F5,NIo),e(U,jIo),e(U,T5),e(T5,ume),e(ume,DIo),e(T5,GIo),e(T5,ZG),e(ZG,OIo),e(T5,VIo),e(U,XIo),e(U,M5),e(M5,_me),e(_me,zIo),e(M5,QIo),e(M5,eO),e(eO,WIo),e(M5,HIo),e(U,UIo),e(U,E5),e(E5,bme),e(bme,JIo),e(E5,YIo),e(E5,oO),e(oO,KIo),e(E5,ZIo),e(U,eqo),e(U,C5),e(C5,vme),e(vme,oqo),e(C5,rqo),e(C5,rO),e(rO,tqo),e(C5,aqo),e(U,nqo),e(U,w5),e(w5,Fme),e(Fme,sqo),e(w5,lqo),e(w5,tO),e(tO,iqo),e(w5,dqo),e(U,cqo),e(U,A5),e(A5,Tme),e(Tme,fqo),e(A5,mqo),e(A5,aO),e(aO,gqo),e(A5,hqo),e(U,pqo),e(U,y5),e(y5,Mme),e(Mme,uqo),e(y5,_qo),e(y5,nO),e(nO,bqo),e(y5,vqo),e(U,Fqo),e(U,L5),e(L5,Eme),e(Eme,Tqo),e(L5,Mqo),e(L5,sO),e(sO,Eqo),e(L5,Cqo),e(ro,wqo),e(ro,x5),e(x5,Aqo),e(x5,Cme),e(Cme,yqo),e(x5,Lqo),e(x5,wme),e(wme,xqo),e(ro,$qo),M($5,ro,null),b(f,BPe,_),b(f,Hi,_),e(Hi,k5),e(k5,Ame),M(ay,Ame,null),e(Hi,kqo),e(Hi,yme),e(yme,Sqo),b(f,PPe,_),b(f,qo,_),M(ny,qo,null),e(qo,Rqo),e(qo,Ui),e(Ui,Bqo),e(Ui,lO),e(lO,Pqo),e(Ui,Iqo),e(Ui,iO),e(iO,qqo),e(Ui,Nqo),e(qo,jqo),e(qo,sy),e(sy,Dqo),e(sy,Lme),e(Lme,Gqo),e(sy,Oqo),e(qo,Vqo),e(qo,ct),M(ly,ct,null),e(ct,Xqo),e(ct,xme),e(xme,zqo),e(ct,Qqo),e(ct,Ji),e(Ji,Wqo),e(Ji,$me),e($me,Hqo),e(Ji,Uqo),e(Ji,dO),e(dO,Jqo),e(Ji,Yqo),e(ct,Kqo),M(S5,ct,null),e(qo,Zqo),e(qo,to),M(iy,to,null),e(to,eNo),e(to,kme),e(kme,oNo),e(to,rNo),e(to,Pa),e(Pa,tNo),e(Pa,Sme),e(Sme,aNo),e(Pa,nNo),e(Pa,Rme),e(Rme,sNo),e(Pa,lNo),e(Pa,Bme),e(Bme,iNo),e(Pa,dNo),e(to,cNo),e(to,O),e(O,R5),e(R5,Pme),e(Pme,fNo),e(R5,mNo),e(R5,cO),e(cO,gNo),e(R5,hNo),e(O,pNo),e(O,B5),e(B5,Ime),e(Ime,uNo),e(B5,_No),e(B5,fO),e(fO,bNo),e(B5,vNo),e(O,FNo),e(O,P5),e(P5,qme),e(qme,TNo),e(P5,MNo),e(P5,mO),e(mO,ENo),e(P5,CNo),e(O,wNo),e(O,I5),e(I5,Nme),e(Nme,ANo),e(I5,yNo),e(I5,gO),e(gO,LNo),e(I5,xNo),e(O,$No),e(O,q5),e(q5,jme),e(jme,kNo),e(q5,SNo),e(q5,hO),e(hO,RNo),e(q5,BNo),e(O,PNo),e(O,N5),e(N5,Dme),e(Dme,INo),e(N5,qNo),e(N5,pO),e(pO,NNo),e(N5,jNo),e(O,DNo),e(O,j5),e(j5,Gme),e(Gme,GNo),e(j5,ONo),e(j5,uO),e(uO,VNo),e(j5,XNo),e(O,zNo),e(O,D5),e(D5,Ome),e(Ome,QNo),e(D5,WNo),e(D5,_O),e(_O,HNo),e(D5,UNo),e(O,JNo),e(O,G5),e(G5,Vme),e(Vme,YNo),e(G5,KNo),e(G5,bO),e(bO,ZNo),e(G5,ejo),e(O,ojo),e(O,O5),e(O5,Xme),e(Xme,rjo),e(O5,tjo),e(O5,vO),e(vO,ajo),e(O5,njo),e(O,sjo),e(O,V5),e(V5,zme),e(zme,ljo),e(V5,ijo),e(V5,FO),e(FO,djo),e(V5,cjo),e(O,fjo),e(O,X5),e(X5,Qme),e(Qme,mjo),e(X5,gjo),e(X5,TO),e(TO,hjo),e(X5,pjo),e(O,ujo),e(O,z5),e(z5,Wme),e(Wme,_jo),e(z5,bjo),e(z5,MO),e(MO,vjo),e(z5,Fjo),e(O,Tjo),e(O,Q5),e(Q5,Hme),e(Hme,Mjo),e(Q5,Ejo),e(Q5,EO),e(EO,Cjo),e(Q5,wjo),e(O,Ajo),e(O,W5),e(W5,Ume),e(Ume,yjo),e(W5,Ljo),e(W5,CO),e(CO,xjo),e(W5,$jo),e(O,kjo),e(O,H5),e(H5,Jme),e(Jme,Sjo),e(H5,Rjo),e(H5,wO),e(wO,Bjo),e(H5,Pjo),e(O,Ijo),e(O,U5),e(U5,Yme),e(Yme,qjo),e(U5,Njo),e(U5,AO),e(AO,jjo),e(U5,Djo),e(O,Gjo),e(O,J5),e(J5,Kme),e(Kme,Ojo),e(J5,Vjo),e(J5,yO),e(yO,Xjo),e(J5,zjo),e(O,Qjo),e(O,Y5),e(Y5,Zme),e(Zme,Wjo),e(Y5,Hjo),e(Y5,LO),e(LO,Ujo),e(Y5,Jjo),e(O,Yjo),e(O,K5),e(K5,ege),e(ege,Kjo),e(K5,Zjo),e(K5,xO),e(xO,eDo),e(K5,oDo),e(O,rDo),e(O,Z5),e(Z5,oge),e(oge,tDo),e(Z5,aDo),e(Z5,$O),e($O,nDo),e(Z5,sDo),e(O,lDo),e(O,ev),e(ev,rge),e(rge,iDo),e(ev,dDo),e(ev,kO),e(kO,cDo),e(ev,fDo),e(O,mDo),e(O,ov),e(ov,tge),e(tge,gDo),e(ov,hDo),e(ov,SO),e(SO,pDo),e(ov,uDo),e(O,_Do),e(O,rv),e(rv,age),e(age,bDo),e(rv,vDo),e(rv,RO),e(RO,FDo),e(rv,TDo),e(O,MDo),e(O,tv),e(tv,nge),e(nge,EDo),e(tv,CDo),e(tv,BO),e(BO,wDo),e(tv,ADo),e(O,yDo),e(O,av),e(av,sge),e(sge,LDo),e(av,xDo),e(av,PO),e(PO,$Do),e(av,kDo),e(O,SDo),e(O,nv),e(nv,lge),e(lge,RDo),e(nv,BDo),e(nv,IO),e(IO,PDo),e(nv,IDo),e(O,qDo),e(O,sv),e(sv,ige),e(ige,NDo),e(sv,jDo),e(sv,qO),e(qO,DDo),e(sv,GDo),e(O,ODo),e(O,lv),e(lv,dge),e(dge,VDo),e(lv,XDo),e(lv,NO),e(NO,zDo),e(lv,QDo),e(O,WDo),e(O,iv),e(iv,cge),e(cge,HDo),e(iv,UDo),e(iv,jO),e(jO,JDo),e(iv,YDo),e(O,KDo),e(O,dv),e(dv,fge),e(fge,ZDo),e(dv,eGo),e(dv,DO),e(DO,oGo),e(dv,rGo),e(O,tGo),e(O,cv),e(cv,mge),e(mge,aGo),e(cv,nGo),e(cv,GO),e(GO,sGo),e(cv,lGo),e(O,iGo),e(O,fv),e(fv,gge),e(gge,dGo),e(fv,cGo),e(fv,OO),e(OO,fGo),e(fv,mGo),e(O,gGo),e(O,mv),e(mv,hge),e(hge,hGo),e(mv,pGo),e(mv,VO),e(VO,uGo),e(mv,_Go),e(O,bGo),e(O,gv),e(gv,pge),e(pge,vGo),e(gv,FGo),e(gv,XO),e(XO,TGo),e(gv,MGo),e(O,EGo),e(O,hv),e(hv,uge),e(uge,CGo),e(hv,wGo),e(hv,zO),e(zO,AGo),e(hv,yGo),e(O,LGo),e(O,pv),e(pv,_ge),e(_ge,xGo),e(pv,$Go),e(pv,QO),e(QO,kGo),e(pv,SGo),e(O,RGo),e(O,uv),e(uv,bge),e(bge,BGo),e(uv,PGo),e(uv,WO),e(WO,IGo),e(uv,qGo),e(O,NGo),e(O,_v),e(_v,vge),e(vge,jGo),e(_v,DGo),e(_v,HO),e(HO,GGo),e(_v,OGo),e(to,VGo),e(to,bv),e(bv,XGo),e(bv,Fge),e(Fge,zGo),e(bv,QGo),e(bv,Tge),e(Tge,WGo),e(to,HGo),M(vv,to,null),b(f,IPe,_),b(f,Yi,_),e(Yi,Fv),e(Fv,Mge),M(dy,Mge,null),e(Yi,UGo),e(Yi,Ege),e(Ege,JGo),b(f,qPe,_),b(f,No,_),M(cy,No,null),e(No,YGo),e(No,Ki),e(Ki,KGo),e(Ki,UO),e(UO,ZGo),e(Ki,eOo),e(Ki,JO),e(JO,oOo),e(Ki,rOo),e(No,tOo),e(No,fy),e(fy,aOo),e(fy,Cge),e(Cge,nOo),e(fy,sOo),e(No,lOo),e(No,ft),M(my,ft,null),e(ft,iOo),e(ft,wge),e(wge,dOo),e(ft,cOo),e(ft,Zi),e(Zi,fOo),e(Zi,Age),e(Age,mOo),e(Zi,gOo),e(Zi,YO),e(YO,hOo),e(Zi,pOo),e(ft,uOo),M(Tv,ft,null),e(No,_Oo),e(No,ao),M(gy,ao,null),e(ao,bOo),e(ao,yge),e(yge,vOo),e(ao,FOo),e(ao,Ia),e(Ia,TOo),e(Ia,Lge),e(Lge,MOo),e(Ia,EOo),e(Ia,xge),e(xge,COo),e(Ia,wOo),e(Ia,$ge),e($ge,AOo),e(Ia,yOo),e(ao,LOo),e(ao,kge),e(kge,Mv),e(Mv,Sge),e(Sge,xOo),e(Mv,$Oo),e(Mv,KO),e(KO,kOo),e(Mv,SOo),e(ao,ROo),e(ao,Ev),e(Ev,BOo),e(Ev,Rge),e(Rge,POo),e(Ev,IOo),e(Ev,Bge),e(Bge,qOo),e(ao,NOo),M(Cv,ao,null),b(f,NPe,_),b(f,ed,_),e(ed,wv),e(wv,Pge),M(hy,Pge,null),e(ed,jOo),e(ed,Ige),e(Ige,DOo),b(f,jPe,_),b(f,jo,_),M(py,jo,null),e(jo,GOo),e(jo,od),e(od,OOo),e(od,ZO),e(ZO,VOo),e(od,XOo),e(od,eV),e(eV,zOo),e(od,QOo),e(jo,WOo),e(jo,uy),e(uy,HOo),e(uy,qge),e(qge,UOo),e(uy,JOo),e(jo,YOo),e(jo,mt),M(_y,mt,null),e(mt,KOo),e(mt,Nge),e(Nge,ZOo),e(mt,eVo),e(mt,rd),e(rd,oVo),e(rd,jge),e(jge,rVo),e(rd,tVo),e(rd,oV),e(oV,aVo),e(rd,nVo),e(mt,sVo),M(Av,mt,null),e(jo,lVo),e(jo,no),M(by,no,null),e(no,iVo),e(no,Dge),e(Dge,dVo),e(no,cVo),e(no,qa),e(qa,fVo),e(qa,Gge),e(Gge,mVo),e(qa,gVo),e(qa,Oge),e(Oge,hVo),e(qa,pVo),e(qa,Vge),e(Vge,uVo),e(qa,_Vo),e(no,bVo),e(no,ve),e(ve,yv),e(yv,Xge),e(Xge,vVo),e(yv,FVo),e(yv,rV),e(rV,TVo),e(yv,MVo),e(ve,EVo),e(ve,Lv),e(Lv,zge),e(zge,CVo),e(Lv,wVo),e(Lv,tV),e(tV,AVo),e(Lv,yVo),e(ve,LVo),e(ve,xv),e(xv,Qge),e(Qge,xVo),e(xv,$Vo),e(xv,aV),e(aV,kVo),e(xv,SVo),e(ve,RVo),e(ve,Rs),e(Rs,Wge),e(Wge,BVo),e(Rs,PVo),e(Rs,nV),e(nV,IVo),e(Rs,qVo),e(Rs,sV),e(sV,NVo),e(Rs,jVo),e(ve,DVo),e(ve,$v),e($v,Hge),e(Hge,GVo),e($v,OVo),e($v,lV),e(lV,VVo),e($v,XVo),e(ve,zVo),e(ve,gt),e(gt,Uge),e(Uge,QVo),e(gt,WVo),e(gt,iV),e(iV,HVo),e(gt,UVo),e(gt,dV),e(dV,JVo),e(gt,YVo),e(gt,cV),e(cV,KVo),e(gt,ZVo),e(ve,eXo),e(ve,kv),e(kv,Jge),e(Jge,oXo),e(kv,rXo),e(kv,fV),e(fV,tXo),e(kv,aXo),e(ve,nXo),e(ve,Sv),e(Sv,Yge),e(Yge,sXo),e(Sv,lXo),e(Sv,mV),e(mV,iXo),e(Sv,dXo),e(ve,cXo),e(ve,Rv),e(Rv,Kge),e(Kge,fXo),e(Rv,mXo),e(Rv,gV),e(gV,gXo),e(Rv,hXo),e(ve,pXo),e(ve,Bv),e(Bv,Zge),e(Zge,uXo),e(Bv,_Xo),e(Bv,hV),e(hV,bXo),e(Bv,vXo),e(ve,FXo),e(ve,Pv),e(Pv,ehe),e(ehe,TXo),e(Pv,MXo),e(Pv,pV),e(pV,EXo),e(Pv,CXo),e(ve,wXo),e(ve,Iv),e(Iv,ohe),e(ohe,AXo),e(Iv,yXo),e(Iv,uV),e(uV,LXo),e(Iv,xXo),e(ve,$Xo),e(ve,qv),e(qv,rhe),e(rhe,kXo),e(qv,SXo),e(qv,_V),e(_V,RXo),e(qv,BXo),e(no,PXo),e(no,Nv),e(Nv,IXo),e(Nv,the),e(the,qXo),e(Nv,NXo),e(Nv,ahe),e(ahe,jXo),e(no,DXo),M(jv,no,null),b(f,DPe,_),b(f,td,_),e(td,Dv),e(Dv,nhe),M(vy,nhe,null),e(td,GXo),e(td,she),e(she,OXo),b(f,GPe,_),b(f,Do,_),M(Fy,Do,null),e(Do,VXo),e(Do,ad),e(ad,XXo),e(ad,bV),e(bV,zXo),e(ad,QXo),e(ad,vV),e(vV,WXo),e(ad,HXo),e(Do,UXo),e(Do,Ty),e(Ty,JXo),e(Ty,lhe),e(lhe,YXo),e(Ty,KXo),e(Do,ZXo),e(Do,ht),M(My,ht,null),e(ht,ezo),e(ht,ihe),e(ihe,ozo),e(ht,rzo),e(ht,nd),e(nd,tzo),e(nd,dhe),e(dhe,azo),e(nd,nzo),e(nd,FV),e(FV,szo),e(nd,lzo),e(ht,izo),M(Gv,ht,null),e(Do,dzo),e(Do,so),M(Ey,so,null),e(so,czo),e(so,che),e(che,fzo),e(so,mzo),e(so,Na),e(Na,gzo),e(Na,fhe),e(fhe,hzo),e(Na,pzo),e(Na,mhe),e(mhe,uzo),e(Na,_zo),e(Na,ghe),e(ghe,bzo),e(Na,vzo),e(so,Fzo),e(so,hhe),e(hhe,Ov),e(Ov,phe),e(phe,Tzo),e(Ov,Mzo),e(Ov,TV),e(TV,Ezo),e(Ov,Czo),e(so,wzo),e(so,Vv),e(Vv,Azo),e(Vv,uhe),e(uhe,yzo),e(Vv,Lzo),e(Vv,_he),e(_he,xzo),e(so,$zo),M(Xv,so,null),b(f,OPe,_),b(f,sd,_),e(sd,zv),e(zv,bhe),M(Cy,bhe,null),e(sd,kzo),e(sd,vhe),e(vhe,Szo),b(f,VPe,_),b(f,Go,_),M(wy,Go,null),e(Go,Rzo),e(Go,ld),e(ld,Bzo),e(ld,MV),e(MV,Pzo),e(ld,Izo),e(ld,EV),e(EV,qzo),e(ld,Nzo),e(Go,jzo),e(Go,Ay),e(Ay,Dzo),e(Ay,Fhe),e(Fhe,Gzo),e(Ay,Ozo),e(Go,Vzo),e(Go,pt),M(yy,pt,null),e(pt,Xzo),e(pt,The),e(The,zzo),e(pt,Qzo),e(pt,id),e(id,Wzo),e(id,Mhe),e(Mhe,Hzo),e(id,Uzo),e(id,CV),e(CV,Jzo),e(id,Yzo),e(pt,Kzo),M(Qv,pt,null),e(Go,Zzo),e(Go,lo),M(Ly,lo,null),e(lo,eQo),e(lo,Ehe),e(Ehe,oQo),e(lo,rQo),e(lo,ja),e(ja,tQo),e(ja,Che),e(Che,aQo),e(ja,nQo),e(ja,whe),e(whe,sQo),e(ja,lQo),e(ja,Ahe),e(Ahe,iQo),e(ja,dQo),e(lo,cQo),e(lo,Ne),e(Ne,Wv),e(Wv,yhe),e(yhe,fQo),e(Wv,mQo),e(Wv,wV),e(wV,gQo),e(Wv,hQo),e(Ne,pQo),e(Ne,Hv),e(Hv,Lhe),e(Lhe,uQo),e(Hv,_Qo),e(Hv,AV),e(AV,bQo),e(Hv,vQo),e(Ne,FQo),e(Ne,Uv),e(Uv,xhe),e(xhe,TQo),e(Uv,MQo),e(Uv,yV),e(yV,EQo),e(Uv,CQo),e(Ne,wQo),e(Ne,Jv),e(Jv,$he),e($he,AQo),e(Jv,yQo),e(Jv,LV),e(LV,LQo),e(Jv,xQo),e(Ne,$Qo),e(Ne,Yv),e(Yv,khe),e(khe,kQo),e(Yv,SQo),e(Yv,xV),e(xV,RQo),e(Yv,BQo),e(Ne,PQo),e(Ne,Kv),e(Kv,She),e(She,IQo),e(Kv,qQo),e(Kv,$V),e($V,NQo),e(Kv,jQo),e(Ne,DQo),e(Ne,Zv),e(Zv,Rhe),e(Rhe,GQo),e(Zv,OQo),e(Zv,kV),e(kV,VQo),e(Zv,XQo),e(Ne,zQo),e(Ne,eF),e(eF,Bhe),e(Bhe,QQo),e(eF,WQo),e(eF,SV),e(SV,HQo),e(eF,UQo),e(lo,JQo),e(lo,oF),e(oF,YQo),e(oF,Phe),e(Phe,KQo),e(oF,ZQo),e(oF,Ihe),e(Ihe,eWo),e(lo,oWo),M(rF,lo,null),b(f,XPe,_),b(f,dd,_),e(dd,tF),e(tF,qhe),M(xy,qhe,null),e(dd,rWo),e(dd,Nhe),e(Nhe,tWo),b(f,zPe,_),b(f,Oo,_),M($y,Oo,null),e(Oo,aWo),e(Oo,cd),e(cd,nWo),e(cd,RV),e(RV,sWo),e(cd,lWo),e(cd,BV),e(BV,iWo),e(cd,dWo),e(Oo,cWo),e(Oo,ky),e(ky,fWo),e(ky,jhe),e(jhe,mWo),e(ky,gWo),e(Oo,hWo),e(Oo,ut),M(Sy,ut,null),e(ut,pWo),e(ut,Dhe),e(Dhe,uWo),e(ut,_Wo),e(ut,fd),e(fd,bWo),e(fd,Ghe),e(Ghe,vWo),e(fd,FWo),e(fd,PV),e(PV,TWo),e(fd,MWo),e(ut,EWo),M(aF,ut,null),e(Oo,CWo),e(Oo,io),M(Ry,io,null),e(io,wWo),e(io,Ohe),e(Ohe,AWo),e(io,yWo),e(io,Da),e(Da,LWo),e(Da,Vhe),e(Vhe,xWo),e(Da,$Wo),e(Da,Xhe),e(Xhe,kWo),e(Da,SWo),e(Da,zhe),e(zhe,RWo),e(Da,BWo),e(io,PWo),e(io,Ga),e(Ga,nF),e(nF,Qhe),e(Qhe,IWo),e(nF,qWo),e(nF,IV),e(IV,NWo),e(nF,jWo),e(Ga,DWo),e(Ga,sF),e(sF,Whe),e(Whe,GWo),e(sF,OWo),e(sF,qV),e(qV,VWo),e(sF,XWo),e(Ga,zWo),e(Ga,lF),e(lF,Hhe),e(Hhe,QWo),e(lF,WWo),e(lF,NV),e(NV,HWo),e(lF,UWo),e(Ga,JWo),e(Ga,iF),e(iF,Uhe),e(Uhe,YWo),e(iF,KWo),e(iF,jV),e(jV,ZWo),e(iF,eHo),e(io,oHo),e(io,dF),e(dF,rHo),e(dF,Jhe),e(Jhe,tHo),e(dF,aHo),e(dF,Yhe),e(Yhe,nHo),e(io,sHo),M(cF,io,null),b(f,QPe,_),b(f,md,_),e(md,fF),e(fF,Khe),M(By,Khe,null),e(md,lHo),e(md,Zhe),e(Zhe,iHo),b(f,WPe,_),b(f,Vo,_),M(Py,Vo,null),e(Vo,dHo),e(Vo,gd),e(gd,cHo),e(gd,DV),e(DV,fHo),e(gd,mHo),e(gd,GV),e(GV,gHo),e(gd,hHo),e(Vo,pHo),e(Vo,Iy),e(Iy,uHo),e(Iy,epe),e(epe,_Ho),e(Iy,bHo),e(Vo,vHo),e(Vo,_t),M(qy,_t,null),e(_t,FHo),e(_t,ope),e(ope,THo),e(_t,MHo),e(_t,hd),e(hd,EHo),e(hd,rpe),e(rpe,CHo),e(hd,wHo),e(hd,OV),e(OV,AHo),e(hd,yHo),e(_t,LHo),M(mF,_t,null),e(Vo,xHo),e(Vo,co),M(Ny,co,null),e(co,$Ho),e(co,tpe),e(tpe,kHo),e(co,SHo),e(co,Oa),e(Oa,RHo),e(Oa,ape),e(ape,BHo),e(Oa,PHo),e(Oa,npe),e(npe,IHo),e(Oa,qHo),e(Oa,spe),e(spe,NHo),e(Oa,jHo),e(co,DHo),e(co,je),e(je,gF),e(gF,lpe),e(lpe,GHo),e(gF,OHo),e(gF,VV),e(VV,VHo),e(gF,XHo),e(je,zHo),e(je,hF),e(hF,ipe),e(ipe,QHo),e(hF,WHo),e(hF,XV),e(XV,HHo),e(hF,UHo),e(je,JHo),e(je,pF),e(pF,dpe),e(dpe,YHo),e(pF,KHo),e(pF,zV),e(zV,ZHo),e(pF,eUo),e(je,oUo),e(je,uF),e(uF,cpe),e(cpe,rUo),e(uF,tUo),e(uF,QV),e(QV,aUo),e(uF,nUo),e(je,sUo),e(je,_F),e(_F,fpe),e(fpe,lUo),e(_F,iUo),e(_F,WV),e(WV,dUo),e(_F,cUo),e(je,fUo),e(je,bF),e(bF,mpe),e(mpe,mUo),e(bF,gUo),e(bF,HV),e(HV,hUo),e(bF,pUo),e(je,uUo),e(je,vF),e(vF,gpe),e(gpe,_Uo),e(vF,bUo),e(vF,UV),e(UV,vUo),e(vF,FUo),e(je,TUo),e(je,FF),e(FF,hpe),e(hpe,MUo),e(FF,EUo),e(FF,JV),e(JV,CUo),e(FF,wUo),e(co,AUo),e(co,TF),e(TF,yUo),e(TF,ppe),e(ppe,LUo),e(TF,xUo),e(TF,upe),e(upe,$Uo),e(co,kUo),M(MF,co,null),b(f,HPe,_),b(f,pd,_),e(pd,EF),e(EF,_pe),M(jy,_pe,null),e(pd,SUo),e(pd,bpe),e(bpe,RUo),b(f,UPe,_),b(f,Xo,_),M(Dy,Xo,null),e(Xo,BUo),e(Xo,ud),e(ud,PUo),e(ud,YV),e(YV,IUo),e(ud,qUo),e(ud,KV),e(KV,NUo),e(ud,jUo),e(Xo,DUo),e(Xo,Gy),e(Gy,GUo),e(Gy,vpe),e(vpe,OUo),e(Gy,VUo),e(Xo,XUo),e(Xo,bt),M(Oy,bt,null),e(bt,zUo),e(bt,Fpe),e(Fpe,QUo),e(bt,WUo),e(bt,_d),e(_d,HUo),e(_d,Tpe),e(Tpe,UUo),e(_d,JUo),e(_d,ZV),e(ZV,YUo),e(_d,KUo),e(bt,ZUo),M(CF,bt,null),e(Xo,eJo),e(Xo,fo),M(Vy,fo,null),e(fo,oJo),e(fo,Mpe),e(Mpe,rJo),e(fo,tJo),e(fo,Va),e(Va,aJo),e(Va,Epe),e(Epe,nJo),e(Va,sJo),e(Va,Cpe),e(Cpe,lJo),e(Va,iJo),e(Va,wpe),e(wpe,dJo),e(Va,cJo),e(fo,fJo),e(fo,Xy),e(Xy,wF),e(wF,Ape),e(Ape,mJo),e(wF,gJo),e(wF,eX),e(eX,hJo),e(wF,pJo),e(Xy,uJo),e(Xy,AF),e(AF,ype),e(ype,_Jo),e(AF,bJo),e(AF,oX),e(oX,vJo),e(AF,FJo),e(fo,TJo),e(fo,yF),e(yF,MJo),e(yF,Lpe),e(Lpe,EJo),e(yF,CJo),e(yF,xpe),e(xpe,wJo),e(fo,AJo),M(LF,fo,null),b(f,JPe,_),b(f,bd,_),e(bd,xF),e(xF,$pe),M(zy,$pe,null),e(bd,yJo),e(bd,kpe),e(kpe,LJo),b(f,YPe,_),b(f,zo,_),M(Qy,zo,null),e(zo,xJo),e(zo,vd),e(vd,$Jo),e(vd,rX),e(rX,kJo),e(vd,SJo),e(vd,tX),e(tX,RJo),e(vd,BJo),e(zo,PJo),e(zo,Wy),e(Wy,IJo),e(Wy,Spe),e(Spe,qJo),e(Wy,NJo),e(zo,jJo),e(zo,vt),M(Hy,vt,null),e(vt,DJo),e(vt,Rpe),e(Rpe,GJo),e(vt,OJo),e(vt,Fd),e(Fd,VJo),e(Fd,Bpe),e(Bpe,XJo),e(Fd,zJo),e(Fd,aX),e(aX,QJo),e(Fd,WJo),e(vt,HJo),M($F,vt,null),e(zo,UJo),e(zo,mo),M(Uy,mo,null),e(mo,JJo),e(mo,Ppe),e(Ppe,YJo),e(mo,KJo),e(mo,Xa),e(Xa,ZJo),e(Xa,Ipe),e(Ipe,eYo),e(Xa,oYo),e(Xa,qpe),e(qpe,rYo),e(Xa,tYo),e(Xa,Npe),e(Npe,aYo),e(Xa,nYo),e(mo,sYo),e(mo,za),e(za,kF),e(kF,jpe),e(jpe,lYo),e(kF,iYo),e(kF,nX),e(nX,dYo),e(kF,cYo),e(za,fYo),e(za,SF),e(SF,Dpe),e(Dpe,mYo),e(SF,gYo),e(SF,sX),e(sX,hYo),e(SF,pYo),e(za,uYo),e(za,RF),e(RF,Gpe),e(Gpe,_Yo),e(RF,bYo),e(RF,lX),e(lX,vYo),e(RF,FYo),e(za,TYo),e(za,BF),e(BF,Ope),e(Ope,MYo),e(BF,EYo),e(BF,iX),e(iX,CYo),e(BF,wYo),e(mo,AYo),e(mo,PF),e(PF,yYo),e(PF,Vpe),e(Vpe,LYo),e(PF,xYo),e(PF,Xpe),e(Xpe,$Yo),e(mo,kYo),M(IF,mo,null),b(f,KPe,_),b(f,Td,_),e(Td,qF),e(qF,zpe),M(Jy,zpe,null),e(Td,SYo),e(Td,Qpe),e(Qpe,RYo),b(f,ZPe,_),b(f,Qo,_),M(Yy,Qo,null),e(Qo,BYo),e(Qo,Md),e(Md,PYo),e(Md,dX),e(dX,IYo),e(Md,qYo),e(Md,cX),e(cX,NYo),e(Md,jYo),e(Qo,DYo),e(Qo,Ky),e(Ky,GYo),e(Ky,Wpe),e(Wpe,OYo),e(Ky,VYo),e(Qo,XYo),e(Qo,Ft),M(Zy,Ft,null),e(Ft,zYo),e(Ft,Hpe),e(Hpe,QYo),e(Ft,WYo),e(Ft,Ed),e(Ed,HYo),e(Ed,Upe),e(Upe,UYo),e(Ed,JYo),e(Ed,fX),e(fX,YYo),e(Ed,KYo),e(Ft,ZYo),M(NF,Ft,null),e(Qo,eKo),e(Qo,go),M(eL,go,null),e(go,oKo),e(go,Jpe),e(Jpe,rKo),e(go,tKo),e(go,Qa),e(Qa,aKo),e(Qa,Ype),e(Ype,nKo),e(Qa,sKo),e(Qa,Kpe),e(Kpe,lKo),e(Qa,iKo),e(Qa,Zpe),e(Zpe,dKo),e(Qa,cKo),e(go,fKo),e(go,Cd),e(Cd,jF),e(jF,eue),e(eue,mKo),e(jF,gKo),e(jF,mX),e(mX,hKo),e(jF,pKo),e(Cd,uKo),e(Cd,DF),e(DF,oue),e(oue,_Ko),e(DF,bKo),e(DF,gX),e(gX,vKo),e(DF,FKo),e(Cd,TKo),e(Cd,GF),e(GF,rue),e(rue,MKo),e(GF,EKo),e(GF,hX),e(hX,CKo),e(GF,wKo),e(go,AKo),e(go,OF),e(OF,yKo),e(OF,tue),e(tue,LKo),e(OF,xKo),e(OF,aue),e(aue,$Ko),e(go,kKo),M(VF,go,null),b(f,eIe,_),b(f,wd,_),e(wd,XF),e(XF,nue),M(oL,nue,null),e(wd,SKo),e(wd,sue),e(sue,RKo),b(f,oIe,_),b(f,Wo,_),M(rL,Wo,null),e(Wo,BKo),e(Wo,Ad),e(Ad,PKo),e(Ad,pX),e(pX,IKo),e(Ad,qKo),e(Ad,uX),e(uX,NKo),e(Ad,jKo),e(Wo,DKo),e(Wo,tL),e(tL,GKo),e(tL,lue),e(lue,OKo),e(tL,VKo),e(Wo,XKo),e(Wo,Tt),M(aL,Tt,null),e(Tt,zKo),e(Tt,iue),e(iue,QKo),e(Tt,WKo),e(Tt,yd),e(yd,HKo),e(yd,due),e(due,UKo),e(yd,JKo),e(yd,_X),e(_X,YKo),e(yd,KKo),e(Tt,ZKo),M(zF,Tt,null),e(Wo,eZo),e(Wo,ho),M(nL,ho,null),e(ho,oZo),e(ho,cue),e(cue,rZo),e(ho,tZo),e(ho,Wa),e(Wa,aZo),e(Wa,fue),e(fue,nZo),e(Wa,sZo),e(Wa,mue),e(mue,lZo),e(Wa,iZo),e(Wa,gue),e(gue,dZo),e(Wa,cZo),e(ho,fZo),e(ho,sL),e(sL,QF),e(QF,hue),e(hue,mZo),e(QF,gZo),e(QF,bX),e(bX,hZo),e(QF,pZo),e(sL,uZo),e(sL,WF),e(WF,pue),e(pue,_Zo),e(WF,bZo),e(WF,vX),e(vX,vZo),e(WF,FZo),e(ho,TZo),e(ho,HF),e(HF,MZo),e(HF,uue),e(uue,EZo),e(HF,CZo),e(HF,_ue),e(_ue,wZo),e(ho,AZo),M(UF,ho,null),b(f,rIe,_),b(f,Ld,_),e(Ld,JF),e(JF,bue),M(lL,bue,null),e(Ld,yZo),e(Ld,vue),e(vue,LZo),b(f,tIe,_),b(f,Ho,_),M(iL,Ho,null),e(Ho,xZo),e(Ho,xd),e(xd,$Zo),e(xd,FX),e(FX,kZo),e(xd,SZo),e(xd,TX),e(TX,RZo),e(xd,BZo),e(Ho,PZo),e(Ho,dL),e(dL,IZo),e(dL,Fue),e(Fue,qZo),e(dL,NZo),e(Ho,jZo),e(Ho,Mt),M(cL,Mt,null),e(Mt,DZo),e(Mt,Tue),e(Tue,GZo),e(Mt,OZo),e(Mt,$d),e($d,VZo),e($d,Mue),e(Mue,XZo),e($d,zZo),e($d,MX),e(MX,QZo),e($d,WZo),e(Mt,HZo),M(YF,Mt,null),e(Ho,UZo),e(Ho,po),M(fL,po,null),e(po,JZo),e(po,Eue),e(Eue,YZo),e(po,KZo),e(po,Ha),e(Ha,ZZo),e(Ha,Cue),e(Cue,eer),e(Ha,oer),e(Ha,wue),e(wue,rer),e(Ha,ter),e(Ha,Aue),e(Aue,aer),e(Ha,ner),e(po,ser),e(po,yue),e(yue,KF),e(KF,Lue),e(Lue,ler),e(KF,ier),e(KF,EX),e(EX,der),e(KF,cer),e(po,fer),e(po,ZF),e(ZF,mer),e(ZF,xue),e(xue,ger),e(ZF,her),e(ZF,$ue),e($ue,per),e(po,uer),M(e6,po,null),b(f,aIe,_),b(f,kd,_),e(kd,o6),e(o6,kue),M(mL,kue,null),e(kd,_er),e(kd,Sue),e(Sue,ber),b(f,nIe,_),b(f,Uo,_),M(gL,Uo,null),e(Uo,ver),e(Uo,Sd),e(Sd,Fer),e(Sd,CX),e(CX,Ter),e(Sd,Mer),e(Sd,wX),e(wX,Eer),e(Sd,Cer),e(Uo,wer),e(Uo,hL),e(hL,Aer),e(hL,Rue),e(Rue,yer),e(hL,Ler),e(Uo,xer),e(Uo,Et),M(pL,Et,null),e(Et,$er),e(Et,Bue),e(Bue,ker),e(Et,Ser),e(Et,Rd),e(Rd,Rer),e(Rd,Pue),e(Pue,Ber),e(Rd,Per),e(Rd,AX),e(AX,Ier),e(Rd,qer),e(Et,Ner),M(r6,Et,null),e(Uo,jer),e(Uo,uo),M(uL,uo,null),e(uo,Der),e(uo,Iue),e(Iue,Ger),e(uo,Oer),e(uo,Ua),e(Ua,Ver),e(Ua,que),e(que,Xer),e(Ua,zer),e(Ua,Nue),e(Nue,Qer),e(Ua,Wer),e(Ua,jue),e(jue,Her),e(Ua,Uer),e(uo,Jer),e(uo,Ja),e(Ja,t6),e(t6,Due),e(Due,Yer),e(t6,Ker),e(t6,yX),e(yX,Zer),e(t6,eor),e(Ja,oor),e(Ja,a6),e(a6,Gue),e(Gue,ror),e(a6,tor),e(a6,LX),e(LX,aor),e(a6,nor),e(Ja,sor),e(Ja,n6),e(n6,Oue),e(Oue,lor),e(n6,ior),e(n6,xX),e(xX,dor),e(n6,cor),e(Ja,mor),e(Ja,s6),e(s6,Vue),e(Vue,gor),e(s6,hor),e(s6,$X),e($X,por),e(s6,uor),e(uo,_or),e(uo,l6),e(l6,bor),e(l6,Xue),e(Xue,vor),e(l6,For),e(l6,zue),e(zue,Tor),e(uo,Mor),M(i6,uo,null),b(f,sIe,_),b(f,Bd,_),e(Bd,d6),e(d6,Que),M(_L,Que,null),e(Bd,Eor),e(Bd,Wue),e(Wue,Cor),b(f,lIe,_),b(f,Jo,_),M(bL,Jo,null),e(Jo,wor),e(Jo,Pd),e(Pd,Aor),e(Pd,kX),e(kX,yor),e(Pd,Lor),e(Pd,SX),e(SX,xor),e(Pd,$or),e(Jo,kor),e(Jo,vL),e(vL,Sor),e(vL,Hue),e(Hue,Ror),e(vL,Bor),e(Jo,Por),e(Jo,Ct),M(FL,Ct,null),e(Ct,Ior),e(Ct,Uue),e(Uue,qor),e(Ct,Nor),e(Ct,Id),e(Id,jor),e(Id,Jue),e(Jue,Dor),e(Id,Gor),e(Id,RX),e(RX,Oor),e(Id,Vor),e(Ct,Xor),M(c6,Ct,null),e(Jo,zor),e(Jo,_o),M(TL,_o,null),e(_o,Qor),e(_o,Yue),e(Yue,Wor),e(_o,Hor),e(_o,Ya),e(Ya,Uor),e(Ya,Kue),e(Kue,Jor),e(Ya,Yor),e(Ya,Zue),e(Zue,Kor),e(Ya,Zor),e(Ya,e_e),e(e_e,err),e(Ya,orr),e(_o,rrr),e(_o,o_e),e(o_e,f6),e(f6,r_e),e(r_e,trr),e(f6,arr),e(f6,BX),e(BX,nrr),e(f6,srr),e(_o,lrr),e(_o,m6),e(m6,irr),e(m6,t_e),e(t_e,drr),e(m6,crr),e(m6,a_e),e(a_e,frr),e(_o,mrr),M(g6,_o,null),b(f,iIe,_),b(f,qd,_),e(qd,h6),e(h6,n_e),M(ML,n_e,null),e(qd,grr),e(qd,s_e),e(s_e,hrr),b(f,dIe,_),b(f,Yo,_),M(EL,Yo,null),e(Yo,prr),e(Yo,Nd),e(Nd,urr),e(Nd,PX),e(PX,_rr),e(Nd,brr),e(Nd,IX),e(IX,vrr),e(Nd,Frr),e(Yo,Trr),e(Yo,CL),e(CL,Mrr),e(CL,l_e),e(l_e,Err),e(CL,Crr),e(Yo,wrr),e(Yo,wt),M(wL,wt,null),e(wt,Arr),e(wt,i_e),e(i_e,yrr),e(wt,Lrr),e(wt,jd),e(jd,xrr),e(jd,d_e),e(d_e,$rr),e(jd,krr),e(jd,qX),e(qX,Srr),e(jd,Rrr),e(wt,Brr),M(p6,wt,null),e(Yo,Prr),e(Yo,wr),M(AL,wr,null),e(wr,Irr),e(wr,c_e),e(c_e,qrr),e(wr,Nrr),e(wr,Ka),e(Ka,jrr),e(Ka,f_e),e(f_e,Drr),e(Ka,Grr),e(Ka,m_e),e(m_e,Orr),e(Ka,Vrr),e(Ka,g_e),e(g_e,Xrr),e(Ka,zrr),e(wr,Qrr),e(wr,j),e(j,u6),e(u6,h_e),e(h_e,Wrr),e(u6,Hrr),e(u6,NX),e(NX,Urr),e(u6,Jrr),e(j,Yrr),e(j,_6),e(_6,p_e),e(p_e,Krr),e(_6,Zrr),e(_6,jX),e(jX,etr),e(_6,otr),e(j,rtr),e(j,b6),e(b6,u_e),e(u_e,ttr),e(b6,atr),e(b6,DX),e(DX,ntr),e(b6,str),e(j,ltr),e(j,v6),e(v6,__e),e(__e,itr),e(v6,dtr),e(v6,GX),e(GX,ctr),e(v6,ftr),e(j,mtr),e(j,F6),e(F6,b_e),e(b_e,gtr),e(F6,htr),e(F6,OX),e(OX,ptr),e(F6,utr),e(j,_tr),e(j,T6),e(T6,v_e),e(v_e,btr),e(T6,vtr),e(T6,VX),e(VX,Ftr),e(T6,Ttr),e(j,Mtr),e(j,M6),e(M6,F_e),e(F_e,Etr),e(M6,Ctr),e(M6,XX),e(XX,wtr),e(M6,Atr),e(j,ytr),e(j,E6),e(E6,T_e),e(T_e,Ltr),e(E6,xtr),e(E6,zX),e(zX,$tr),e(E6,ktr),e(j,Str),e(j,C6),e(C6,M_e),e(M_e,Rtr),e(C6,Btr),e(C6,QX),e(QX,Ptr),e(C6,Itr),e(j,qtr),e(j,w6),e(w6,E_e),e(E_e,Ntr),e(w6,jtr),e(w6,WX),e(WX,Dtr),e(w6,Gtr),e(j,Otr),e(j,A6),e(A6,C_e),e(C_e,Vtr),e(A6,Xtr),e(A6,HX),e(HX,ztr),e(A6,Qtr),e(j,Wtr),e(j,y6),e(y6,w_e),e(w_e,Htr),e(y6,Utr),e(y6,UX),e(UX,Jtr),e(y6,Ytr),e(j,Ktr),e(j,L6),e(L6,A_e),e(A_e,Ztr),e(L6,ear),e(L6,JX),e(JX,oar),e(L6,rar),e(j,tar),e(j,x6),e(x6,y_e),e(y_e,aar),e(x6,nar),e(x6,YX),e(YX,sar),e(x6,lar),e(j,iar),e(j,$6),e($6,L_e),e(L_e,dar),e($6,car),e($6,KX),e(KX,far),e($6,mar),e(j,gar),e(j,k6),e(k6,x_e),e(x_e,har),e(k6,par),e(k6,ZX),e(ZX,uar),e(k6,_ar),e(j,bar),e(j,S6),e(S6,$_e),e($_e,Far),e(S6,Tar),e(S6,ez),e(ez,Mar),e(S6,Ear),e(j,Car),e(j,Bs),e(Bs,k_e),e(k_e,war),e(Bs,Aar),e(Bs,oz),e(oz,yar),e(Bs,Lar),e(Bs,rz),e(rz,xar),e(Bs,$ar),e(j,kar),e(j,R6),e(R6,S_e),e(S_e,Sar),e(R6,Rar),e(R6,tz),e(tz,Bar),e(R6,Par),e(j,Iar),e(j,B6),e(B6,R_e),e(R_e,qar),e(B6,Nar),e(B6,az),e(az,jar),e(B6,Dar),e(j,Gar),e(j,P6),e(P6,B_e),e(B_e,Oar),e(P6,Var),e(P6,nz),e(nz,Xar),e(P6,zar),e(j,Qar),e(j,I6),e(I6,P_e),e(P_e,War),e(I6,Har),e(I6,sz),e(sz,Uar),e(I6,Jar),e(j,Yar),e(j,q6),e(q6,I_e),e(I_e,Kar),e(q6,Zar),e(q6,lz),e(lz,enr),e(q6,onr),e(j,rnr),e(j,N6),e(N6,q_e),e(q_e,tnr),e(N6,anr),e(N6,iz),e(iz,nnr),e(N6,snr),e(j,lnr),e(j,j6),e(j6,N_e),e(N_e,inr),e(j6,dnr),e(j6,dz),e(dz,cnr),e(j6,fnr),e(j,mnr),e(j,D6),e(D6,j_e),e(j_e,gnr),e(D6,hnr),e(D6,cz),e(cz,pnr),e(D6,unr),e(j,_nr),e(j,G6),e(G6,D_e),e(D_e,bnr),e(G6,vnr),e(G6,fz),e(fz,Fnr),e(G6,Tnr),e(j,Mnr),e(j,O6),e(O6,G_e),e(G_e,Enr),e(O6,Cnr),e(O6,mz),e(mz,wnr),e(O6,Anr),e(j,ynr),e(j,V6),e(V6,O_e),e(O_e,Lnr),e(V6,xnr),e(V6,gz),e(gz,$nr),e(V6,knr),e(j,Snr),e(j,X6),e(X6,V_e),e(V_e,Rnr),e(X6,Bnr),e(X6,hz),e(hz,Pnr),e(X6,Inr),e(j,qnr),e(j,z6),e(z6,X_e),e(X_e,Nnr),e(z6,jnr),e(z6,pz),e(pz,Dnr),e(z6,Gnr),e(j,Onr),e(j,Q6),e(Q6,z_e),e(z_e,Vnr),e(Q6,Xnr),e(Q6,uz),e(uz,znr),e(Q6,Qnr),e(j,Wnr),e(j,W6),e(W6,Q_e),e(Q_e,Hnr),e(W6,Unr),e(W6,_z),e(_z,Jnr),e(W6,Ynr),e(j,Knr),e(j,H6),e(H6,W_e),e(W_e,Znr),e(H6,esr),e(H6,bz),e(bz,osr),e(H6,rsr),e(j,tsr),e(j,U6),e(U6,H_e),e(H_e,asr),e(U6,nsr),e(U6,vz),e(vz,ssr),e(U6,lsr),e(j,isr),e(j,J6),e(J6,U_e),e(U_e,dsr),e(J6,csr),e(J6,Fz),e(Fz,fsr),e(J6,msr),e(j,gsr),e(j,Y6),e(Y6,J_e),e(J_e,hsr),e(Y6,psr),e(Y6,Tz),e(Tz,usr),e(Y6,_sr),e(j,bsr),e(j,K6),e(K6,Y_e),e(Y_e,vsr),e(K6,Fsr),e(K6,Mz),e(Mz,Tsr),e(K6,Msr),e(j,Esr),e(j,Z6),e(Z6,K_e),e(K_e,Csr),e(Z6,wsr),e(Z6,Ez),e(Ez,Asr),e(Z6,ysr),e(j,Lsr),e(j,eT),e(eT,Z_e),e(Z_e,xsr),e(eT,$sr),e(eT,Cz),e(Cz,ksr),e(eT,Ssr),e(j,Rsr),e(j,oT),e(oT,e2e),e(e2e,Bsr),e(oT,Psr),e(oT,wz),e(wz,Isr),e(oT,qsr),e(j,Nsr),e(j,rT),e(rT,o2e),e(o2e,jsr),e(rT,Dsr),e(rT,Az),e(Az,Gsr),e(rT,Osr),e(j,Vsr),e(j,tT),e(tT,r2e),e(r2e,Xsr),e(tT,zsr),e(tT,yz),e(yz,Qsr),e(tT,Wsr),e(j,Hsr),e(j,aT),e(aT,t2e),e(t2e,Usr),e(aT,Jsr),e(aT,Lz),e(Lz,Ysr),e(aT,Ksr),e(j,Zsr),e(j,nT),e(nT,a2e),e(a2e,elr),e(nT,olr),e(nT,xz),e(xz,rlr),e(nT,tlr),e(wr,alr),M(sT,wr,null),b(f,cIe,_),b(f,Dd,_),e(Dd,lT),e(lT,n2e),M(yL,n2e,null),e(Dd,nlr),e(Dd,s2e),e(s2e,slr),b(f,fIe,_),b(f,Ko,_),M(LL,Ko,null),e(Ko,llr),e(Ko,Gd),e(Gd,ilr),e(Gd,$z),e($z,dlr),e(Gd,clr),e(Gd,kz),e(kz,flr),e(Gd,mlr),e(Ko,glr),e(Ko,xL),e(xL,hlr),e(xL,l2e),e(l2e,plr),e(xL,ulr),e(Ko,_lr),e(Ko,At),M($L,At,null),e(At,blr),e(At,i2e),e(i2e,vlr),e(At,Flr),e(At,Od),e(Od,Tlr),e(Od,d2e),e(d2e,Mlr),e(Od,Elr),e(Od,Sz),e(Sz,Clr),e(Od,wlr),e(At,Alr),M(iT,At,null),e(Ko,ylr),e(Ko,Ar),M(kL,Ar,null),e(Ar,Llr),e(Ar,c2e),e(c2e,xlr),e(Ar,$lr),e(Ar,Za),e(Za,klr),e(Za,f2e),e(f2e,Slr),e(Za,Rlr),e(Za,m2e),e(m2e,Blr),e(Za,Plr),e(Za,g2e),e(g2e,Ilr),e(Za,qlr),e(Ar,Nlr),e(Ar,ne),e(ne,dT),e(dT,h2e),e(h2e,jlr),e(dT,Dlr),e(dT,Rz),e(Rz,Glr),e(dT,Olr),e(ne,Vlr),e(ne,cT),e(cT,p2e),e(p2e,Xlr),e(cT,zlr),e(cT,Bz),e(Bz,Qlr),e(cT,Wlr),e(ne,Hlr),e(ne,fT),e(fT,u2e),e(u2e,Ulr),e(fT,Jlr),e(fT,Pz),e(Pz,Ylr),e(fT,Klr),e(ne,Zlr),e(ne,mT),e(mT,_2e),e(_2e,eir),e(mT,oir),e(mT,Iz),e(Iz,rir),e(mT,tir),e(ne,air),e(ne,gT),e(gT,b2e),e(b2e,nir),e(gT,sir),e(gT,qz),e(qz,lir),e(gT,iir),e(ne,dir),e(ne,hT),e(hT,v2e),e(v2e,cir),e(hT,fir),e(hT,Nz),e(Nz,mir),e(hT,gir),e(ne,hir),e(ne,pT),e(pT,F2e),e(F2e,pir),e(pT,uir),e(pT,jz),e(jz,_ir),e(pT,bir),e(ne,vir),e(ne,uT),e(uT,T2e),e(T2e,Fir),e(uT,Tir),e(uT,Dz),e(Dz,Mir),e(uT,Eir),e(ne,Cir),e(ne,_T),e(_T,M2e),e(M2e,wir),e(_T,Air),e(_T,Gz),e(Gz,yir),e(_T,Lir),e(ne,xir),e(ne,bT),e(bT,E2e),e(E2e,$ir),e(bT,kir),e(bT,Oz),e(Oz,Sir),e(bT,Rir),e(ne,Bir),e(ne,vT),e(vT,C2e),e(C2e,Pir),e(vT,Iir),e(vT,Vz),e(Vz,qir),e(vT,Nir),e(ne,jir),e(ne,FT),e(FT,w2e),e(w2e,Dir),e(FT,Gir),e(FT,Xz),e(Xz,Oir),e(FT,Vir),e(ne,Xir),e(ne,TT),e(TT,A2e),e(A2e,zir),e(TT,Qir),e(TT,zz),e(zz,Wir),e(TT,Hir),e(ne,Uir),e(ne,MT),e(MT,y2e),e(y2e,Jir),e(MT,Yir),e(MT,Qz),e(Qz,Kir),e(MT,Zir),e(ne,edr),e(ne,ET),e(ET,L2e),e(L2e,odr),e(ET,rdr),e(ET,Wz),e(Wz,tdr),e(ET,adr),e(ne,ndr),e(ne,CT),e(CT,x2e),e(x2e,sdr),e(CT,ldr),e(CT,Hz),e(Hz,idr),e(CT,ddr),e(ne,cdr),e(ne,wT),e(wT,$2e),e($2e,fdr),e(wT,mdr),e(wT,Uz),e(Uz,gdr),e(wT,hdr),e(ne,pdr),e(ne,AT),e(AT,k2e),e(k2e,udr),e(AT,_dr),e(AT,Jz),e(Jz,bdr),e(AT,vdr),e(ne,Fdr),e(ne,yT),e(yT,S2e),e(S2e,Tdr),e(yT,Mdr),e(yT,Yz),e(Yz,Edr),e(yT,Cdr),e(ne,wdr),e(ne,LT),e(LT,R2e),e(R2e,Adr),e(LT,ydr),e(LT,Kz),e(Kz,Ldr),e(LT,xdr),e(ne,$dr),e(ne,xT),e(xT,B2e),e(B2e,kdr),e(xT,Sdr),e(xT,Zz),e(Zz,Rdr),e(xT,Bdr),e(ne,Pdr),e(ne,$T),e($T,P2e),e(P2e,Idr),e($T,qdr),e($T,eQ),e(eQ,Ndr),e($T,jdr),e(ne,Ddr),e(ne,kT),e(kT,I2e),e(I2e,Gdr),e(kT,Odr),e(kT,oQ),e(oQ,Vdr),e(kT,Xdr),e(Ar,zdr),M(ST,Ar,null),b(f,mIe,_),b(f,Vd,_),e(Vd,RT),e(RT,q2e),M(SL,q2e,null),e(Vd,Qdr),e(Vd,N2e),e(N2e,Wdr),b(f,gIe,_),b(f,Zo,_),M(RL,Zo,null),e(Zo,Hdr),e(Zo,Xd),e(Xd,Udr),e(Xd,rQ),e(rQ,Jdr),e(Xd,Ydr),e(Xd,tQ),e(tQ,Kdr),e(Xd,Zdr),e(Zo,ecr),e(Zo,BL),e(BL,ocr),e(BL,j2e),e(j2e,rcr),e(BL,tcr),e(Zo,acr),e(Zo,yt),M(PL,yt,null),e(yt,ncr),e(yt,D2e),e(D2e,scr),e(yt,lcr),e(yt,zd),e(zd,icr),e(zd,G2e),e(G2e,dcr),e(zd,ccr),e(zd,aQ),e(aQ,fcr),e(zd,mcr),e(yt,gcr),M(BT,yt,null),e(Zo,hcr),e(Zo,yr),M(IL,yr,null),e(yr,pcr),e(yr,O2e),e(O2e,ucr),e(yr,_cr),e(yr,en),e(en,bcr),e(en,V2e),e(V2e,vcr),e(en,Fcr),e(en,X2e),e(X2e,Tcr),e(en,Mcr),e(en,z2e),e(z2e,Ecr),e(en,Ccr),e(yr,wcr),e(yr,Te),e(Te,PT),e(PT,Q2e),e(Q2e,Acr),e(PT,ycr),e(PT,nQ),e(nQ,Lcr),e(PT,xcr),e(Te,$cr),e(Te,IT),e(IT,W2e),e(W2e,kcr),e(IT,Scr),e(IT,sQ),e(sQ,Rcr),e(IT,Bcr),e(Te,Pcr),e(Te,qT),e(qT,H2e),e(H2e,Icr),e(qT,qcr),e(qT,lQ),e(lQ,Ncr),e(qT,jcr),e(Te,Dcr),e(Te,NT),e(NT,U2e),e(U2e,Gcr),e(NT,Ocr),e(NT,iQ),e(iQ,Vcr),e(NT,Xcr),e(Te,zcr),e(Te,jT),e(jT,J2e),e(J2e,Qcr),e(jT,Wcr),e(jT,dQ),e(dQ,Hcr),e(jT,Ucr),e(Te,Jcr),e(Te,DT),e(DT,Y2e),e(Y2e,Ycr),e(DT,Kcr),e(DT,cQ),e(cQ,Zcr),e(DT,efr),e(Te,ofr),e(Te,GT),e(GT,K2e),e(K2e,rfr),e(GT,tfr),e(GT,fQ),e(fQ,afr),e(GT,nfr),e(Te,sfr),e(Te,OT),e(OT,Z2e),e(Z2e,lfr),e(OT,ifr),e(OT,mQ),e(mQ,dfr),e(OT,cfr),e(Te,ffr),e(Te,VT),e(VT,e1e),e(e1e,mfr),e(VT,gfr),e(VT,gQ),e(gQ,hfr),e(VT,pfr),e(Te,ufr),e(Te,XT),e(XT,o1e),e(o1e,_fr),e(XT,bfr),e(XT,hQ),e(hQ,vfr),e(XT,Ffr),e(Te,Tfr),e(Te,zT),e(zT,r1e),e(r1e,Mfr),e(zT,Efr),e(zT,pQ),e(pQ,Cfr),e(zT,wfr),e(Te,Afr),e(Te,QT),e(QT,t1e),e(t1e,yfr),e(QT,Lfr),e(QT,uQ),e(uQ,xfr),e(QT,$fr),e(yr,kfr),M(WT,yr,null),b(f,hIe,_),b(f,Qd,_),e(Qd,HT),e(HT,a1e),M(qL,a1e,null),e(Qd,Sfr),e(Qd,n1e),e(n1e,Rfr),b(f,pIe,_),b(f,er,_),M(NL,er,null),e(er,Bfr),e(er,Wd),e(Wd,Pfr),e(Wd,_Q),e(_Q,Ifr),e(Wd,qfr),e(Wd,bQ),e(bQ,Nfr),e(Wd,jfr),e(er,Dfr),e(er,jL),e(jL,Gfr),e(jL,s1e),e(s1e,Ofr),e(jL,Vfr),e(er,Xfr),e(er,Lt),M(DL,Lt,null),e(Lt,zfr),e(Lt,l1e),e(l1e,Qfr),e(Lt,Wfr),e(Lt,Hd),e(Hd,Hfr),e(Hd,i1e),e(i1e,Ufr),e(Hd,Jfr),e(Hd,vQ),e(vQ,Yfr),e(Hd,Kfr),e(Lt,Zfr),M(UT,Lt,null),e(er,emr),e(er,Lr),M(GL,Lr,null),e(Lr,omr),e(Lr,d1e),e(d1e,rmr),e(Lr,tmr),e(Lr,on),e(on,amr),e(on,c1e),e(c1e,nmr),e(on,smr),e(on,f1e),e(f1e,lmr),e(on,imr),e(on,m1e),e(m1e,dmr),e(on,cmr),e(Lr,fmr),e(Lr,Ud),e(Ud,JT),e(JT,g1e),e(g1e,mmr),e(JT,gmr),e(JT,FQ),e(FQ,hmr),e(JT,pmr),e(Ud,umr),e(Ud,YT),e(YT,h1e),e(h1e,_mr),e(YT,bmr),e(YT,TQ),e(TQ,vmr),e(YT,Fmr),e(Ud,Tmr),e(Ud,KT),e(KT,p1e),e(p1e,Mmr),e(KT,Emr),e(KT,MQ),e(MQ,Cmr),e(KT,wmr),e(Lr,Amr),M(ZT,Lr,null),b(f,uIe,_),b(f,Jd,_),e(Jd,e9),e(e9,u1e),M(OL,u1e,null),e(Jd,ymr),e(Jd,_1e),e(_1e,Lmr),b(f,_Ie,_),b(f,or,_),M(VL,or,null),e(or,xmr),e(or,Yd),e(Yd,$mr),e(Yd,EQ),e(EQ,kmr),e(Yd,Smr),e(Yd,CQ),e(CQ,Rmr),e(Yd,Bmr),e(or,Pmr),e(or,XL),e(XL,Imr),e(XL,b1e),e(b1e,qmr),e(XL,Nmr),e(or,jmr),e(or,xt),M(zL,xt,null),e(xt,Dmr),e(xt,v1e),e(v1e,Gmr),e(xt,Omr),e(xt,Kd),e(Kd,Vmr),e(Kd,F1e),e(F1e,Xmr),e(Kd,zmr),e(Kd,wQ),e(wQ,Qmr),e(Kd,Wmr),e(xt,Hmr),M(o9,xt,null),e(or,Umr),e(or,xr),M(QL,xr,null),e(xr,Jmr),e(xr,T1e),e(T1e,Ymr),e(xr,Kmr),e(xr,rn),e(rn,Zmr),e(rn,M1e),e(M1e,egr),e(rn,ogr),e(rn,E1e),e(E1e,rgr),e(rn,tgr),e(rn,C1e),e(C1e,agr),e(rn,ngr),e(xr,sgr),e(xr,ie),e(ie,r9),e(r9,w1e),e(w1e,lgr),e(r9,igr),e(r9,AQ),e(AQ,dgr),e(r9,cgr),e(ie,fgr),e(ie,t9),e(t9,A1e),e(A1e,mgr),e(t9,ggr),e(t9,yQ),e(yQ,hgr),e(t9,pgr),e(ie,ugr),e(ie,a9),e(a9,y1e),e(y1e,_gr),e(a9,bgr),e(a9,LQ),e(LQ,vgr),e(a9,Fgr),e(ie,Tgr),e(ie,n9),e(n9,L1e),e(L1e,Mgr),e(n9,Egr),e(n9,xQ),e(xQ,Cgr),e(n9,wgr),e(ie,Agr),e(ie,s9),e(s9,x1e),e(x1e,ygr),e(s9,Lgr),e(s9,$Q),e($Q,xgr),e(s9,$gr),e(ie,kgr),e(ie,l9),e(l9,$1e),e($1e,Sgr),e(l9,Rgr),e(l9,kQ),e(kQ,Bgr),e(l9,Pgr),e(ie,Igr),e(ie,i9),e(i9,k1e),e(k1e,qgr),e(i9,Ngr),e(i9,SQ),e(SQ,jgr),e(i9,Dgr),e(ie,Ggr),e(ie,d9),e(d9,S1e),e(S1e,Ogr),e(d9,Vgr),e(d9,RQ),e(RQ,Xgr),e(d9,zgr),e(ie,Qgr),e(ie,c9),e(c9,R1e),e(R1e,Wgr),e(c9,Hgr),e(c9,BQ),e(BQ,Ugr),e(c9,Jgr),e(ie,Ygr),e(ie,f9),e(f9,B1e),e(B1e,Kgr),e(f9,Zgr),e(f9,PQ),e(PQ,ehr),e(f9,ohr),e(ie,rhr),e(ie,m9),e(m9,P1e),e(P1e,thr),e(m9,ahr),e(m9,IQ),e(IQ,nhr),e(m9,shr),e(ie,lhr),e(ie,g9),e(g9,I1e),e(I1e,ihr),e(g9,dhr),e(g9,qQ),e(qQ,chr),e(g9,fhr),e(ie,mhr),e(ie,h9),e(h9,q1e),e(q1e,ghr),e(h9,hhr),e(h9,NQ),e(NQ,phr),e(h9,uhr),e(ie,_hr),e(ie,p9),e(p9,N1e),e(N1e,bhr),e(p9,vhr),e(p9,jQ),e(jQ,Fhr),e(p9,Thr),e(ie,Mhr),e(ie,u9),e(u9,j1e),e(j1e,Ehr),e(u9,Chr),e(u9,DQ),e(DQ,whr),e(u9,Ahr),e(ie,yhr),e(ie,_9),e(_9,D1e),e(D1e,Lhr),e(_9,xhr),e(_9,GQ),e(GQ,$hr),e(_9,khr),e(ie,Shr),e(ie,b9),e(b9,G1e),e(G1e,Rhr),e(b9,Bhr),e(b9,OQ),e(OQ,Phr),e(b9,Ihr),e(ie,qhr),e(ie,v9),e(v9,O1e),e(O1e,Nhr),e(v9,jhr),e(v9,VQ),e(VQ,Dhr),e(v9,Ghr),e(ie,Ohr),e(ie,F9),e(F9,V1e),e(V1e,Vhr),e(F9,Xhr),e(F9,XQ),e(XQ,zhr),e(F9,Qhr),e(ie,Whr),e(ie,T9),e(T9,X1e),e(X1e,Hhr),e(T9,Uhr),e(T9,zQ),e(zQ,Jhr),e(T9,Yhr),e(xr,Khr),M(M9,xr,null),b(f,bIe,_),b(f,Zd,_),e(Zd,E9),e(E9,z1e),M(WL,z1e,null),e(Zd,Zhr),e(Zd,Q1e),e(Q1e,epr),b(f,vIe,_),b(f,rr,_),M(HL,rr,null),e(rr,opr),e(rr,ec),e(ec,rpr),e(ec,QQ),e(QQ,tpr),e(ec,apr),e(ec,WQ),e(WQ,npr),e(ec,spr),e(rr,lpr),e(rr,UL),e(UL,ipr),e(UL,W1e),e(W1e,dpr),e(UL,cpr),e(rr,fpr),e(rr,$t),M(JL,$t,null),e($t,mpr),e($t,H1e),e(H1e,gpr),e($t,hpr),e($t,oc),e(oc,ppr),e(oc,U1e),e(U1e,upr),e(oc,_pr),e(oc,HQ),e(HQ,bpr),e(oc,vpr),e($t,Fpr),M(C9,$t,null),e(rr,Tpr),e(rr,$r),M(YL,$r,null),e($r,Mpr),e($r,J1e),e(J1e,Epr),e($r,Cpr),e($r,tn),e(tn,wpr),e(tn,Y1e),e(Y1e,Apr),e(tn,ypr),e(tn,K1e),e(K1e,Lpr),e(tn,xpr),e(tn,Z1e),e(Z1e,$pr),e(tn,kpr),e($r,Spr),e($r,ye),e(ye,w9),e(w9,ebe),e(ebe,Rpr),e(w9,Bpr),e(w9,UQ),e(UQ,Ppr),e(w9,Ipr),e(ye,qpr),e(ye,A9),e(A9,obe),e(obe,Npr),e(A9,jpr),e(A9,JQ),e(JQ,Dpr),e(A9,Gpr),e(ye,Opr),e(ye,y9),e(y9,rbe),e(rbe,Vpr),e(y9,Xpr),e(y9,YQ),e(YQ,zpr),e(y9,Qpr),e(ye,Wpr),e(ye,L9),e(L9,tbe),e(tbe,Hpr),e(L9,Upr),e(L9,KQ),e(KQ,Jpr),e(L9,Ypr),e(ye,Kpr),e(ye,x9),e(x9,abe),e(abe,Zpr),e(x9,eur),e(x9,ZQ),e(ZQ,our),e(x9,rur),e(ye,tur),e(ye,$9),e($9,nbe),e(nbe,aur),e($9,nur),e($9,eW),e(eW,sur),e($9,lur),e(ye,iur),e(ye,k9),e(k9,sbe),e(sbe,dur),e(k9,cur),e(k9,oW),e(oW,fur),e(k9,mur),e(ye,gur),e(ye,S9),e(S9,lbe),e(lbe,hur),e(S9,pur),e(S9,rW),e(rW,uur),e(S9,_ur),e(ye,bur),e(ye,R9),e(R9,ibe),e(ibe,vur),e(R9,Fur),e(R9,tW),e(tW,Tur),e(R9,Mur),e(ye,Eur),e(ye,B9),e(B9,dbe),e(dbe,Cur),e(B9,wur),e(B9,aW),e(aW,Aur),e(B9,yur),e($r,Lur),M(P9,$r,null),b(f,FIe,_),b(f,rc,_),e(rc,I9),e(I9,cbe),M(KL,cbe,null),e(rc,xur),e(rc,fbe),e(fbe,$ur),b(f,TIe,_),b(f,tr,_),M(ZL,tr,null),e(tr,kur),e(tr,tc),e(tc,Sur),e(tc,nW),e(nW,Rur),e(tc,Bur),e(tc,sW),e(sW,Pur),e(tc,Iur),e(tr,qur),e(tr,e8),e(e8,Nur),e(e8,mbe),e(mbe,jur),e(e8,Dur),e(tr,Gur),e(tr,kt),M(o8,kt,null),e(kt,Our),e(kt,gbe),e(gbe,Vur),e(kt,Xur),e(kt,ac),e(ac,zur),e(ac,hbe),e(hbe,Qur),e(ac,Wur),e(ac,lW),e(lW,Hur),e(ac,Uur),e(kt,Jur),M(q9,kt,null),e(tr,Yur),e(tr,kr),M(r8,kr,null),e(kr,Kur),e(kr,pbe),e(pbe,Zur),e(kr,e_r),e(kr,an),e(an,o_r),e(an,ube),e(ube,r_r),e(an,t_r),e(an,_be),e(_be,a_r),e(an,n_r),e(an,bbe),e(bbe,s_r),e(an,l_r),e(kr,i_r),e(kr,Z),e(Z,N9),e(N9,vbe),e(vbe,d_r),e(N9,c_r),e(N9,iW),e(iW,f_r),e(N9,m_r),e(Z,g_r),e(Z,j9),e(j9,Fbe),e(Fbe,h_r),e(j9,p_r),e(j9,dW),e(dW,u_r),e(j9,__r),e(Z,b_r),e(Z,D9),e(D9,Tbe),e(Tbe,v_r),e(D9,F_r),e(D9,cW),e(cW,T_r),e(D9,M_r),e(Z,E_r),e(Z,G9),e(G9,Mbe),e(Mbe,C_r),e(G9,w_r),e(G9,fW),e(fW,A_r),e(G9,y_r),e(Z,L_r),e(Z,O9),e(O9,Ebe),e(Ebe,x_r),e(O9,$_r),e(O9,mW),e(mW,k_r),e(O9,S_r),e(Z,R_r),e(Z,V9),e(V9,Cbe),e(Cbe,B_r),e(V9,P_r),e(V9,gW),e(gW,I_r),e(V9,q_r),e(Z,N_r),e(Z,X9),e(X9,wbe),e(wbe,j_r),e(X9,D_r),e(X9,hW),e(hW,G_r),e(X9,O_r),e(Z,V_r),e(Z,z9),e(z9,Abe),e(Abe,X_r),e(z9,z_r),e(z9,pW),e(pW,Q_r),e(z9,W_r),e(Z,H_r),e(Z,Q9),e(Q9,ybe),e(ybe,U_r),e(Q9,J_r),e(Q9,uW),e(uW,Y_r),e(Q9,K_r),e(Z,Z_r),e(Z,W9),e(W9,Lbe),e(Lbe,e2r),e(W9,o2r),e(W9,_W),e(_W,r2r),e(W9,t2r),e(Z,a2r),e(Z,H9),e(H9,xbe),e(xbe,n2r),e(H9,s2r),e(H9,bW),e(bW,l2r),e(H9,i2r),e(Z,d2r),e(Z,U9),e(U9,$be),e($be,c2r),e(U9,f2r),e(U9,vW),e(vW,m2r),e(U9,g2r),e(Z,h2r),e(Z,J9),e(J9,kbe),e(kbe,p2r),e(J9,u2r),e(J9,FW),e(FW,_2r),e(J9,b2r),e(Z,v2r),e(Z,Y9),e(Y9,Sbe),e(Sbe,F2r),e(Y9,T2r),e(Y9,TW),e(TW,M2r),e(Y9,E2r),e(Z,C2r),e(Z,K9),e(K9,Rbe),e(Rbe,w2r),e(K9,A2r),e(K9,MW),e(MW,y2r),e(K9,L2r),e(Z,x2r),e(Z,Z9),e(Z9,Bbe),e(Bbe,$2r),e(Z9,k2r),e(Z9,EW),e(EW,S2r),e(Z9,R2r),e(Z,B2r),e(Z,eM),e(eM,Pbe),e(Pbe,P2r),e(eM,I2r),e(eM,CW),e(CW,q2r),e(eM,N2r),e(Z,j2r),e(Z,oM),e(oM,Ibe),e(Ibe,D2r),e(oM,G2r),e(oM,wW),e(wW,O2r),e(oM,V2r),e(Z,X2r),e(Z,rM),e(rM,qbe),e(qbe,z2r),e(rM,Q2r),e(rM,AW),e(AW,W2r),e(rM,H2r),e(Z,U2r),e(Z,tM),e(tM,Nbe),e(Nbe,J2r),e(tM,Y2r),e(tM,yW),e(yW,K2r),e(tM,Z2r),e(Z,e1r),e(Z,aM),e(aM,jbe),e(jbe,o1r),e(aM,r1r),e(aM,LW),e(LW,t1r),e(aM,a1r),e(Z,n1r),e(Z,nM),e(nM,Dbe),e(Dbe,s1r),e(nM,l1r),e(nM,xW),e(xW,i1r),e(nM,d1r),e(Z,c1r),e(Z,sM),e(sM,Gbe),e(Gbe,f1r),e(sM,m1r),e(sM,$W),e($W,g1r),e(sM,h1r),e(Z,p1r),e(Z,lM),e(lM,Obe),e(Obe,u1r),e(lM,_1r),e(lM,kW),e(kW,b1r),e(lM,v1r),e(Z,F1r),e(Z,iM),e(iM,Vbe),e(Vbe,T1r),e(iM,M1r),e(iM,SW),e(SW,E1r),e(iM,C1r),e(Z,w1r),e(Z,dM),e(dM,Xbe),e(Xbe,A1r),e(dM,y1r),e(dM,RW),e(RW,L1r),e(dM,x1r),e(kr,$1r),M(cM,kr,null),b(f,MIe,_),b(f,nc,_),e(nc,fM),e(fM,zbe),M(t8,zbe,null),e(nc,k1r),e(nc,Qbe),e(Qbe,S1r),b(f,EIe,_),b(f,ar,_),M(a8,ar,null),e(ar,R1r),e(ar,sc),e(sc,B1r),e(sc,BW),e(BW,P1r),e(sc,I1r),e(sc,PW),e(PW,q1r),e(sc,N1r),e(ar,j1r),e(ar,n8),e(n8,D1r),e(n8,Wbe),e(Wbe,G1r),e(n8,O1r),e(ar,V1r),e(ar,St),M(s8,St,null),e(St,X1r),e(St,Hbe),e(Hbe,z1r),e(St,Q1r),e(St,lc),e(lc,W1r),e(lc,Ube),e(Ube,H1r),e(lc,U1r),e(lc,IW),e(IW,J1r),e(lc,Y1r),e(St,K1r),M(mM,St,null),e(ar,Z1r),e(ar,Sr),M(l8,Sr,null),e(Sr,ebr),e(Sr,Jbe),e(Jbe,obr),e(Sr,rbr),e(Sr,nn),e(nn,tbr),e(nn,Ybe),e(Ybe,abr),e(nn,nbr),e(nn,Kbe),e(Kbe,sbr),e(nn,lbr),e(nn,Zbe),e(Zbe,ibr),e(nn,dbr),e(Sr,cbr),e(Sr,pe),e(pe,gM),e(gM,e5e),e(e5e,fbr),e(gM,mbr),e(gM,qW),e(qW,gbr),e(gM,hbr),e(pe,pbr),e(pe,hM),e(hM,o5e),e(o5e,ubr),e(hM,_br),e(hM,NW),e(NW,bbr),e(hM,vbr),e(pe,Fbr),e(pe,pM),e(pM,r5e),e(r5e,Tbr),e(pM,Mbr),e(pM,jW),e(jW,Ebr),e(pM,Cbr),e(pe,wbr),e(pe,uM),e(uM,t5e),e(t5e,Abr),e(uM,ybr),e(uM,DW),e(DW,Lbr),e(uM,xbr),e(pe,$br),e(pe,_M),e(_M,a5e),e(a5e,kbr),e(_M,Sbr),e(_M,GW),e(GW,Rbr),e(_M,Bbr),e(pe,Pbr),e(pe,bM),e(bM,n5e),e(n5e,Ibr),e(bM,qbr),e(bM,OW),e(OW,Nbr),e(bM,jbr),e(pe,Dbr),e(pe,vM),e(vM,s5e),e(s5e,Gbr),e(vM,Obr),e(vM,VW),e(VW,Vbr),e(vM,Xbr),e(pe,zbr),e(pe,FM),e(FM,l5e),e(l5e,Qbr),e(FM,Wbr),e(FM,XW),e(XW,Hbr),e(FM,Ubr),e(pe,Jbr),e(pe,TM),e(TM,i5e),e(i5e,Ybr),e(TM,Kbr),e(TM,zW),e(zW,Zbr),e(TM,e5r),e(pe,o5r),e(pe,MM),e(MM,d5e),e(d5e,r5r),e(MM,t5r),e(MM,QW),e(QW,a5r),e(MM,n5r),e(pe,s5r),e(pe,EM),e(EM,c5e),e(c5e,l5r),e(EM,i5r),e(EM,WW),e(WW,d5r),e(EM,c5r),e(pe,f5r),e(pe,CM),e(CM,f5e),e(f5e,m5r),e(CM,g5r),e(CM,HW),e(HW,h5r),e(CM,p5r),e(pe,u5r),e(pe,wM),e(wM,m5e),e(m5e,_5r),e(wM,b5r),e(wM,UW),e(UW,v5r),e(wM,F5r),e(pe,T5r),e(pe,AM),e(AM,g5e),e(g5e,M5r),e(AM,E5r),e(AM,JW),e(JW,C5r),e(AM,w5r),e(pe,A5r),e(pe,yM),e(yM,h5e),e(h5e,y5r),e(yM,L5r),e(yM,YW),e(YW,x5r),e(yM,$5r),e(pe,k5r),e(pe,LM),e(LM,p5e),e(p5e,S5r),e(LM,R5r),e(LM,KW),e(KW,B5r),e(LM,P5r),e(pe,I5r),e(pe,xM),e(xM,u5e),e(u5e,q5r),e(xM,N5r),e(xM,ZW),e(ZW,j5r),e(xM,D5r),e(Sr,G5r),M($M,Sr,null),b(f,CIe,_),b(f,ic,_),e(ic,kM),e(kM,_5e),M(i8,_5e,null),e(ic,O5r),e(ic,b5e),e(b5e,V5r),b(f,wIe,_),b(f,nr,_),M(d8,nr,null),e(nr,X5r),e(nr,dc),e(dc,z5r),e(dc,eH),e(eH,Q5r),e(dc,W5r),e(dc,oH),e(oH,H5r),e(dc,U5r),e(nr,J5r),e(nr,c8),e(c8,Y5r),e(c8,v5e),e(v5e,K5r),e(c8,Z5r),e(nr,evr),e(nr,Rt),M(f8,Rt,null),e(Rt,ovr),e(Rt,F5e),e(F5e,rvr),e(Rt,tvr),e(Rt,cc),e(cc,avr),e(cc,T5e),e(T5e,nvr),e(cc,svr),e(cc,rH),e(rH,lvr),e(cc,ivr),e(Rt,dvr),M(SM,Rt,null),e(nr,cvr),e(nr,Rr),M(m8,Rr,null),e(Rr,fvr),e(Rr,M5e),e(M5e,mvr),e(Rr,gvr),e(Rr,sn),e(sn,hvr),e(sn,E5e),e(E5e,pvr),e(sn,uvr),e(sn,C5e),e(C5e,_vr),e(sn,bvr),e(sn,w5e),e(w5e,vvr),e(sn,Fvr),e(Rr,Tvr),e(Rr,g8),e(g8,RM),e(RM,A5e),e(A5e,Mvr),e(RM,Evr),e(RM,tH),e(tH,Cvr),e(RM,wvr),e(g8,Avr),e(g8,BM),e(BM,y5e),e(y5e,yvr),e(BM,Lvr),e(BM,aH),e(aH,xvr),e(BM,$vr),e(Rr,kvr),M(PM,Rr,null),b(f,AIe,_),b(f,fc,_),e(fc,IM),e(IM,L5e),M(h8,L5e,null),e(fc,Svr),e(fc,x5e),e(x5e,Rvr),b(f,yIe,_),b(f,sr,_),M(p8,sr,null),e(sr,Bvr),e(sr,mc),e(mc,Pvr),e(mc,nH),e(nH,Ivr),e(mc,qvr),e(mc,sH),e(sH,Nvr),e(mc,jvr),e(sr,Dvr),e(sr,u8),e(u8,Gvr),e(u8,$5e),e($5e,Ovr),e(u8,Vvr),e(sr,Xvr),e(sr,Bt),M(_8,Bt,null),e(Bt,zvr),e(Bt,k5e),e(k5e,Qvr),e(Bt,Wvr),e(Bt,gc),e(gc,Hvr),e(gc,S5e),e(S5e,Uvr),e(gc,Jvr),e(gc,lH),e(lH,Yvr),e(gc,Kvr),e(Bt,Zvr),M(qM,Bt,null),e(sr,eFr),e(sr,Br),M(b8,Br,null),e(Br,oFr),e(Br,R5e),e(R5e,rFr),e(Br,tFr),e(Br,ln),e(ln,aFr),e(ln,B5e),e(B5e,nFr),e(ln,sFr),e(ln,P5e),e(P5e,lFr),e(ln,iFr),e(ln,I5e),e(I5e,dFr),e(ln,cFr),e(Br,fFr),e(Br,q5e),e(q5e,NM),e(NM,N5e),e(N5e,mFr),e(NM,gFr),e(NM,iH),e(iH,hFr),e(NM,pFr),e(Br,uFr),M(jM,Br,null),b(f,LIe,_),b(f,hc,_),e(hc,DM),e(DM,j5e),M(v8,j5e,null),e(hc,_Fr),e(hc,D5e),e(D5e,bFr),b(f,xIe,_),b(f,lr,_),M(F8,lr,null),e(lr,vFr),e(lr,pc),e(pc,FFr),e(pc,dH),e(dH,TFr),e(pc,MFr),e(pc,cH),e(cH,EFr),e(pc,CFr),e(lr,wFr),e(lr,T8),e(T8,AFr),e(T8,G5e),e(G5e,yFr),e(T8,LFr),e(lr,xFr),e(lr,Pt),M(M8,Pt,null),e(Pt,$Fr),e(Pt,O5e),e(O5e,kFr),e(Pt,SFr),e(Pt,uc),e(uc,RFr),e(uc,V5e),e(V5e,BFr),e(uc,PFr),e(uc,fH),e(fH,IFr),e(uc,qFr),e(Pt,NFr),M(GM,Pt,null),e(lr,jFr),e(lr,Pr),M(E8,Pr,null),e(Pr,DFr),e(Pr,X5e),e(X5e,GFr),e(Pr,OFr),e(Pr,dn),e(dn,VFr),e(dn,z5e),e(z5e,XFr),e(dn,zFr),e(dn,Q5e),e(Q5e,QFr),e(dn,WFr),e(dn,W5e),e(W5e,HFr),e(dn,UFr),e(Pr,JFr),e(Pr,de),e(de,OM),e(OM,H5e),e(H5e,YFr),e(OM,KFr),e(OM,mH),e(mH,ZFr),e(OM,e6r),e(de,o6r),e(de,VM),e(VM,U5e),e(U5e,r6r),e(VM,t6r),e(VM,gH),e(gH,a6r),e(VM,n6r),e(de,s6r),e(de,XM),e(XM,J5e),e(J5e,l6r),e(XM,i6r),e(XM,hH),e(hH,d6r),e(XM,c6r),e(de,f6r),e(de,zM),e(zM,Y5e),e(Y5e,m6r),e(zM,g6r),e(zM,pH),e(pH,h6r),e(zM,p6r),e(de,u6r),e(de,QM),e(QM,K5e),e(K5e,_6r),e(QM,b6r),e(QM,uH),e(uH,v6r),e(QM,F6r),e(de,T6r),e(de,WM),e(WM,Z5e),e(Z5e,M6r),e(WM,E6r),e(WM,_H),e(_H,C6r),e(WM,w6r),e(de,A6r),e(de,HM),e(HM,eve),e(eve,y6r),e(HM,L6r),e(HM,bH),e(bH,x6r),e(HM,$6r),e(de,k6r),e(de,UM),e(UM,ove),e(ove,S6r),e(UM,R6r),e(UM,vH),e(vH,B6r),e(UM,P6r),e(de,I6r),e(de,JM),e(JM,rve),e(rve,q6r),e(JM,N6r),e(JM,FH),e(FH,j6r),e(JM,D6r),e(de,G6r),e(de,YM),e(YM,tve),e(tve,O6r),e(YM,V6r),e(YM,TH),e(TH,X6r),e(YM,z6r),e(de,Q6r),e(de,KM),e(KM,ave),e(ave,W6r),e(KM,H6r),e(KM,MH),e(MH,U6r),e(KM,J6r),e(de,Y6r),e(de,ZM),e(ZM,nve),e(nve,K6r),e(ZM,Z6r),e(ZM,EH),e(EH,eTr),e(ZM,oTr),e(de,rTr),e(de,e4),e(e4,sve),e(sve,tTr),e(e4,aTr),e(e4,CH),e(CH,nTr),e(e4,sTr),e(de,lTr),e(de,o4),e(o4,lve),e(lve,iTr),e(o4,dTr),e(o4,wH),e(wH,cTr),e(o4,fTr),e(de,mTr),e(de,r4),e(r4,ive),e(ive,gTr),e(r4,hTr),e(r4,AH),e(AH,pTr),e(r4,uTr),e(de,_Tr),e(de,t4),e(t4,dve),e(dve,bTr),e(t4,vTr),e(t4,yH),e(yH,FTr),e(t4,TTr),e(de,MTr),e(de,a4),e(a4,cve),e(cve,ETr),e(a4,CTr),e(a4,LH),e(LH,wTr),e(a4,ATr),e(de,yTr),e(de,n4),e(n4,fve),e(fve,LTr),e(n4,xTr),e(n4,xH),e(xH,$Tr),e(n4,kTr),e(de,STr),e(de,s4),e(s4,mve),e(mve,RTr),e(s4,BTr),e(s4,$H),e($H,PTr),e(s4,ITr),e(de,qTr),e(de,l4),e(l4,gve),e(gve,NTr),e(l4,jTr),e(l4,kH),e(kH,DTr),e(l4,GTr),e(Pr,OTr),M(i4,Pr,null),b(f,$Ie,_),b(f,_c,_),e(_c,d4),e(d4,hve),M(C8,hve,null),e(_c,VTr),e(_c,pve),e(pve,XTr),b(f,kIe,_),b(f,ir,_),M(w8,ir,null),e(ir,zTr),e(ir,bc),e(bc,QTr),e(bc,SH),e(SH,WTr),e(bc,HTr),e(bc,RH),e(RH,UTr),e(bc,JTr),e(ir,YTr),e(ir,A8),e(A8,KTr),e(A8,uve),e(uve,ZTr),e(A8,e9r),e(ir,o9r),e(ir,It),M(y8,It,null),e(It,r9r),e(It,_ve),e(_ve,t9r),e(It,a9r),e(It,vc),e(vc,n9r),e(vc,bve),e(bve,s9r),e(vc,l9r),e(vc,BH),e(BH,i9r),e(vc,d9r),e(It,c9r),M(c4,It,null),e(ir,f9r),e(ir,Ir),M(L8,Ir,null),e(Ir,m9r),e(Ir,vve),e(vve,g9r),e(Ir,h9r),e(Ir,cn),e(cn,p9r),e(cn,Fve),e(Fve,u9r),e(cn,_9r),e(cn,Tve),e(Tve,b9r),e(cn,v9r),e(cn,Mve),e(Mve,F9r),e(cn,T9r),e(Ir,M9r),e(Ir,ce),e(ce,f4),e(f4,Eve),e(Eve,E9r),e(f4,C9r),e(f4,PH),e(PH,w9r),e(f4,A9r),e(ce,y9r),e(ce,m4),e(m4,Cve),e(Cve,L9r),e(m4,x9r),e(m4,IH),e(IH,$9r),e(m4,k9r),e(ce,S9r),e(ce,g4),e(g4,wve),e(wve,R9r),e(g4,B9r),e(g4,qH),e(qH,P9r),e(g4,I9r),e(ce,q9r),e(ce,h4),e(h4,Ave),e(Ave,N9r),e(h4,j9r),e(h4,NH),e(NH,D9r),e(h4,G9r),e(ce,O9r),e(ce,p4),e(p4,yve),e(yve,V9r),e(p4,X9r),e(p4,jH),e(jH,z9r),e(p4,Q9r),e(ce,W9r),e(ce,u4),e(u4,Lve),e(Lve,H9r),e(u4,U9r),e(u4,DH),e(DH,J9r),e(u4,Y9r),e(ce,K9r),e(ce,_4),e(_4,xve),e(xve,Z9r),e(_4,eMr),e(_4,GH),e(GH,oMr),e(_4,rMr),e(ce,tMr),e(ce,b4),e(b4,$ve),e($ve,aMr),e(b4,nMr),e(b4,OH),e(OH,sMr),e(b4,lMr),e(ce,iMr),e(ce,v4),e(v4,kve),e(kve,dMr),e(v4,cMr),e(v4,VH),e(VH,fMr),e(v4,mMr),e(ce,gMr),e(ce,F4),e(F4,Sve),e(Sve,hMr),e(F4,pMr),e(F4,XH),e(XH,uMr),e(F4,_Mr),e(ce,bMr),e(ce,T4),e(T4,Rve),e(Rve,vMr),e(T4,FMr),e(T4,zH),e(zH,TMr),e(T4,MMr),e(ce,EMr),e(ce,M4),e(M4,Bve),e(Bve,CMr),e(M4,wMr),e(M4,QH),e(QH,AMr),e(M4,yMr),e(ce,LMr),e(ce,E4),e(E4,Pve),e(Pve,xMr),e(E4,$Mr),e(E4,WH),e(WH,kMr),e(E4,SMr),e(ce,RMr),e(ce,C4),e(C4,Ive),e(Ive,BMr),e(C4,PMr),e(C4,HH),e(HH,IMr),e(C4,qMr),e(ce,NMr),e(ce,w4),e(w4,qve),e(qve,jMr),e(w4,DMr),e(w4,UH),e(UH,GMr),e(w4,OMr),e(ce,VMr),e(ce,A4),e(A4,Nve),e(Nve,XMr),e(A4,zMr),e(A4,JH),e(JH,QMr),e(A4,WMr),e(ce,HMr),e(ce,y4),e(y4,jve),e(jve,UMr),e(y4,JMr),e(y4,YH),e(YH,YMr),e(y4,KMr),e(ce,ZMr),e(ce,L4),e(L4,Dve),e(Dve,e4r),e(L4,o4r),e(L4,KH),e(KH,r4r),e(L4,t4r),e(ce,a4r),e(ce,x4),e(x4,Gve),e(Gve,n4r),e(x4,s4r),e(x4,ZH),e(ZH,l4r),e(x4,i4r),e(ce,d4r),e(ce,$4),e($4,Ove),e(Ove,c4r),e($4,f4r),e($4,eU),e(eU,m4r),e($4,g4r),e(Ir,h4r),M(k4,Ir,null),b(f,SIe,_),b(f,Fc,_),e(Fc,S4),e(S4,Vve),M(x8,Vve,null),e(Fc,p4r),e(Fc,Xve),e(Xve,u4r),b(f,RIe,_),b(f,dr,_),M($8,dr,null),e(dr,_4r),e(dr,Tc),e(Tc,b4r),e(Tc,oU),e(oU,v4r),e(Tc,F4r),e(Tc,rU),e(rU,T4r),e(Tc,M4r),e(dr,E4r),e(dr,k8),e(k8,C4r),e(k8,zve),e(zve,w4r),e(k8,A4r),e(dr,y4r),e(dr,qt),M(S8,qt,null),e(qt,L4r),e(qt,Qve),e(Qve,x4r),e(qt,$4r),e(qt,Mc),e(Mc,k4r),e(Mc,Wve),e(Wve,S4r),e(Mc,R4r),e(Mc,tU),e(tU,B4r),e(Mc,P4r),e(qt,I4r),M(R4,qt,null),e(dr,q4r),e(dr,qr),M(R8,qr,null),e(qr,N4r),e(qr,Hve),e(Hve,j4r),e(qr,D4r),e(qr,fn),e(fn,G4r),e(fn,Uve),e(Uve,O4r),e(fn,V4r),e(fn,Jve),e(Jve,X4r),e(fn,z4r),e(fn,Yve),e(Yve,Q4r),e(fn,W4r),e(qr,H4r),e(qr,Kve),e(Kve,B4),e(B4,Zve),e(Zve,U4r),e(B4,J4r),e(B4,aU),e(aU,Y4r),e(B4,K4r),e(qr,Z4r),M(P4,qr,null),b(f,BIe,_),b(f,Ec,_),e(Ec,I4),e(I4,eFe),M(B8,eFe,null),e(Ec,eEr),e(Ec,oFe),e(oFe,oEr),b(f,PIe,_),b(f,cr,_),M(P8,cr,null),e(cr,rEr),e(cr,Cc),e(Cc,tEr),e(Cc,nU),e(nU,aEr),e(Cc,nEr),e(Cc,sU),e(sU,sEr),e(Cc,lEr),e(cr,iEr),e(cr,I8),e(I8,dEr),e(I8,rFe),e(rFe,cEr),e(I8,fEr),e(cr,mEr),e(cr,Nt),M(q8,Nt,null),e(Nt,gEr),e(Nt,tFe),e(tFe,hEr),e(Nt,pEr),e(Nt,wc),e(wc,uEr),e(wc,aFe),e(aFe,_Er),e(wc,bEr),e(wc,lU),e(lU,vEr),e(wc,FEr),e(Nt,TEr),M(q4,Nt,null),e(cr,MEr),e(cr,Nr),M(N8,Nr,null),e(Nr,EEr),e(Nr,nFe),e(nFe,CEr),e(Nr,wEr),e(Nr,mn),e(mn,AEr),e(mn,sFe),e(sFe,yEr),e(mn,LEr),e(mn,lFe),e(lFe,xEr),e(mn,$Er),e(mn,iFe),e(iFe,kEr),e(mn,SEr),e(Nr,REr),e(Nr,dFe),e(dFe,N4),e(N4,cFe),e(cFe,BEr),e(N4,PEr),e(N4,iU),e(iU,IEr),e(N4,qEr),e(Nr,NEr),M(j4,Nr,null),b(f,IIe,_),b(f,Ac,_),e(Ac,D4),e(D4,fFe),M(j8,fFe,null),e(Ac,jEr),e(Ac,mFe),e(mFe,DEr),b(f,qIe,_),b(f,fr,_),M(D8,fr,null),e(fr,GEr),e(fr,yc),e(yc,OEr),e(yc,dU),e(dU,VEr),e(yc,XEr),e(yc,cU),e(cU,zEr),e(yc,QEr),e(fr,WEr),e(fr,G8),e(G8,HEr),e(G8,gFe),e(gFe,UEr),e(G8,JEr),e(fr,YEr),e(fr,jt),M(O8,jt,null),e(jt,KEr),e(jt,hFe),e(hFe,ZEr),e(jt,eCr),e(jt,Lc),e(Lc,oCr),e(Lc,pFe),e(pFe,rCr),e(Lc,tCr),e(Lc,fU),e(fU,aCr),e(Lc,nCr),e(jt,sCr),M(G4,jt,null),e(fr,lCr),e(fr,jr),M(V8,jr,null),e(jr,iCr),e(jr,uFe),e(uFe,dCr),e(jr,cCr),e(jr,gn),e(gn,fCr),e(gn,_Fe),e(_Fe,mCr),e(gn,gCr),e(gn,bFe),e(bFe,hCr),e(gn,pCr),e(gn,vFe),e(vFe,uCr),e(gn,_Cr),e(jr,bCr),e(jr,oe),e(oe,O4),e(O4,FFe),e(FFe,vCr),e(O4,FCr),e(O4,mU),e(mU,TCr),e(O4,MCr),e(oe,ECr),e(oe,V4),e(V4,TFe),e(TFe,CCr),e(V4,wCr),e(V4,gU),e(gU,ACr),e(V4,yCr),e(oe,LCr),e(oe,X4),e(X4,MFe),e(MFe,xCr),e(X4,$Cr),e(X4,hU),e(hU,kCr),e(X4,SCr),e(oe,RCr),e(oe,z4),e(z4,EFe),e(EFe,BCr),e(z4,PCr),e(z4,pU),e(pU,ICr),e(z4,qCr),e(oe,NCr),e(oe,Q4),e(Q4,CFe),e(CFe,jCr),e(Q4,DCr),e(Q4,uU),e(uU,GCr),e(Q4,OCr),e(oe,VCr),e(oe,W4),e(W4,wFe),e(wFe,XCr),e(W4,zCr),e(W4,_U),e(_U,QCr),e(W4,WCr),e(oe,HCr),e(oe,H4),e(H4,AFe),e(AFe,UCr),e(H4,JCr),e(H4,bU),e(bU,YCr),e(H4,KCr),e(oe,ZCr),e(oe,U4),e(U4,yFe),e(yFe,e3r),e(U4,o3r),e(U4,vU),e(vU,r3r),e(U4,t3r),e(oe,a3r),e(oe,J4),e(J4,LFe),e(LFe,n3r),e(J4,s3r),e(J4,FU),e(FU,l3r),e(J4,i3r),e(oe,d3r),e(oe,Y4),e(Y4,xFe),e(xFe,c3r),e(Y4,f3r),e(Y4,TU),e(TU,m3r),e(Y4,g3r),e(oe,h3r),e(oe,K4),e(K4,$Fe),e($Fe,p3r),e(K4,u3r),e(K4,MU),e(MU,_3r),e(K4,b3r),e(oe,v3r),e(oe,Z4),e(Z4,kFe),e(kFe,F3r),e(Z4,T3r),e(Z4,EU),e(EU,M3r),e(Z4,E3r),e(oe,C3r),e(oe,eE),e(eE,SFe),e(SFe,w3r),e(eE,A3r),e(eE,CU),e(CU,y3r),e(eE,L3r),e(oe,x3r),e(oe,oE),e(oE,RFe),e(RFe,$3r),e(oE,k3r),e(oE,wU),e(wU,S3r),e(oE,R3r),e(oe,B3r),e(oe,rE),e(rE,BFe),e(BFe,P3r),e(rE,I3r),e(rE,AU),e(AU,q3r),e(rE,N3r),e(oe,j3r),e(oe,tE),e(tE,PFe),e(PFe,D3r),e(tE,G3r),e(tE,yU),e(yU,O3r),e(tE,V3r),e(oe,X3r),e(oe,aE),e(aE,IFe),e(IFe,z3r),e(aE,Q3r),e(aE,LU),e(LU,W3r),e(aE,H3r),e(oe,U3r),e(oe,nE),e(nE,qFe),e(qFe,J3r),e(nE,Y3r),e(nE,xU),e(xU,K3r),e(nE,Z3r),e(oe,ewr),e(oe,sE),e(sE,NFe),e(NFe,owr),e(sE,rwr),e(sE,$U),e($U,twr),e(sE,awr),e(oe,nwr),e(oe,lE),e(lE,jFe),e(jFe,swr),e(lE,lwr),e(lE,kU),e(kU,iwr),e(lE,dwr),e(oe,cwr),e(oe,iE),e(iE,DFe),e(DFe,fwr),e(iE,mwr),e(iE,SU),e(SU,gwr),e(iE,hwr),e(oe,pwr),e(oe,dE),e(dE,GFe),e(GFe,uwr),e(dE,_wr),e(dE,RU),e(RU,bwr),e(dE,vwr),e(oe,Fwr),e(oe,cE),e(cE,OFe),e(OFe,Twr),e(cE,Mwr),e(cE,BU),e(BU,Ewr),e(cE,Cwr),e(oe,wwr),e(oe,fE),e(fE,VFe),e(VFe,Awr),e(fE,ywr),e(fE,PU),e(PU,Lwr),e(fE,xwr),e(oe,$wr),e(oe,mE),e(mE,XFe),e(XFe,kwr),e(mE,Swr),e(mE,IU),e(IU,Rwr),e(mE,Bwr),e(jr,Pwr),M(gE,jr,null),b(f,NIe,_),b(f,xc,_),e(xc,hE),e(hE,zFe),M(X8,zFe,null),e(xc,Iwr),e(xc,QFe),e(QFe,qwr),b(f,jIe,_),b(f,mr,_),M(z8,mr,null),e(mr,Nwr),e(mr,$c),e($c,jwr),e($c,qU),e(qU,Dwr),e($c,Gwr),e($c,NU),e(NU,Owr),e($c,Vwr),e(mr,Xwr),e(mr,Q8),e(Q8,zwr),e(Q8,WFe),e(WFe,Qwr),e(Q8,Wwr),e(mr,Hwr),e(mr,Dt),M(W8,Dt,null),e(Dt,Uwr),e(Dt,HFe),e(HFe,Jwr),e(Dt,Ywr),e(Dt,kc),e(kc,Kwr),e(kc,UFe),e(UFe,Zwr),e(kc,eAr),e(kc,jU),e(jU,oAr),e(kc,rAr),e(Dt,tAr),M(pE,Dt,null),e(mr,aAr),e(mr,Dr),M(H8,Dr,null),e(Dr,nAr),e(Dr,JFe),e(JFe,sAr),e(Dr,lAr),e(Dr,hn),e(hn,iAr),e(hn,YFe),e(YFe,dAr),e(hn,cAr),e(hn,KFe),e(KFe,fAr),e(hn,mAr),e(hn,ZFe),e(ZFe,gAr),e(hn,hAr),e(Dr,pAr),e(Dr,ke),e(ke,uE),e(uE,e6e),e(e6e,uAr),e(uE,_Ar),e(uE,DU),e(DU,bAr),e(uE,vAr),e(ke,FAr),e(ke,_E),e(_E,o6e),e(o6e,TAr),e(_E,MAr),e(_E,GU),e(GU,EAr),e(_E,CAr),e(ke,wAr),e(ke,bE),e(bE,r6e),e(r6e,AAr),e(bE,yAr),e(bE,OU),e(OU,LAr),e(bE,xAr),e(ke,$Ar),e(ke,vE),e(vE,t6e),e(t6e,kAr),e(vE,SAr),e(vE,VU),e(VU,RAr),e(vE,BAr),e(ke,PAr),e(ke,FE),e(FE,a6e),e(a6e,IAr),e(FE,qAr),e(FE,XU),e(XU,NAr),e(FE,jAr),e(ke,DAr),e(ke,TE),e(TE,n6e),e(n6e,GAr),e(TE,OAr),e(TE,zU),e(zU,VAr),e(TE,XAr),e(ke,zAr),e(ke,ME),e(ME,s6e),e(s6e,QAr),e(ME,WAr),e(ME,QU),e(QU,HAr),e(ME,UAr),e(ke,JAr),e(ke,EE),e(EE,l6e),e(l6e,YAr),e(EE,KAr),e(EE,WU),e(WU,ZAr),e(EE,e0r),e(ke,o0r),e(ke,CE),e(CE,i6e),e(i6e,r0r),e(CE,t0r),e(CE,HU),e(HU,a0r),e(CE,n0r),e(Dr,s0r),M(wE,Dr,null),b(f,DIe,_),b(f,Sc,_),e(Sc,AE),e(AE,d6e),M(U8,d6e,null),e(Sc,l0r),e(Sc,c6e),e(c6e,i0r),b(f,GIe,_),b(f,gr,_),M(J8,gr,null),e(gr,d0r),e(gr,Rc),e(Rc,c0r),e(Rc,UU),e(UU,f0r),e(Rc,m0r),e(Rc,JU),e(JU,g0r),e(Rc,h0r),e(gr,p0r),e(gr,Y8),e(Y8,u0r),e(Y8,f6e),e(f6e,_0r),e(Y8,b0r),e(gr,v0r),e(gr,Gt),M(K8,Gt,null),e(Gt,F0r),e(Gt,m6e),e(m6e,T0r),e(Gt,M0r),e(Gt,Bc),e(Bc,E0r),e(Bc,g6e),e(g6e,C0r),e(Bc,w0r),e(Bc,YU),e(YU,A0r),e(Bc,y0r),e(Gt,L0r),M(yE,Gt,null),e(gr,x0r),e(gr,Gr),M(Z8,Gr,null),e(Gr,$0r),e(Gr,h6e),e(h6e,k0r),e(Gr,S0r),e(Gr,pn),e(pn,R0r),e(pn,p6e),e(p6e,B0r),e(pn,P0r),e(pn,u6e),e(u6e,I0r),e(pn,q0r),e(pn,_6e),e(_6e,N0r),e(pn,j0r),e(Gr,D0r),e(Gr,Me),e(Me,LE),e(LE,b6e),e(b6e,G0r),e(LE,O0r),e(LE,KU),e(KU,V0r),e(LE,X0r),e(Me,z0r),e(Me,xE),e(xE,v6e),e(v6e,Q0r),e(xE,W0r),e(xE,ZU),e(ZU,H0r),e(xE,U0r),e(Me,J0r),e(Me,$E),e($E,F6e),e(F6e,Y0r),e($E,K0r),e($E,eJ),e(eJ,Z0r),e($E,eyr),e(Me,oyr),e(Me,kE),e(kE,T6e),e(T6e,ryr),e(kE,tyr),e(kE,oJ),e(oJ,ayr),e(kE,nyr),e(Me,syr),e(Me,SE),e(SE,M6e),e(M6e,lyr),e(SE,iyr),e(SE,rJ),e(rJ,dyr),e(SE,cyr),e(Me,fyr),e(Me,RE),e(RE,E6e),e(E6e,myr),e(RE,gyr),e(RE,tJ),e(tJ,hyr),e(RE,pyr),e(Me,uyr),e(Me,BE),e(BE,C6e),e(C6e,_yr),e(BE,byr),e(BE,aJ),e(aJ,vyr),e(BE,Fyr),e(Me,Tyr),e(Me,PE),e(PE,w6e),e(w6e,Myr),e(PE,Eyr),e(PE,nJ),e(nJ,Cyr),e(PE,wyr),e(Me,Ayr),e(Me,IE),e(IE,A6e),e(A6e,yyr),e(IE,Lyr),e(IE,sJ),e(sJ,xyr),e(IE,$yr),e(Me,kyr),e(Me,qE),e(qE,y6e),e(y6e,Syr),e(qE,Ryr),e(qE,lJ),e(lJ,Byr),e(qE,Pyr),e(Me,Iyr),e(Me,NE),e(NE,L6e),e(L6e,qyr),e(NE,Nyr),e(NE,iJ),e(iJ,jyr),e(NE,Dyr),e(Me,Gyr),e(Me,jE),e(jE,x6e),e(x6e,Oyr),e(jE,Vyr),e(jE,dJ),e(dJ,Xyr),e(jE,zyr),e(Gr,Qyr),M(DE,Gr,null),b(f,OIe,_),b(f,Pc,_),e(Pc,GE),e(GE,$6e),M(ex,$6e,null),e(Pc,Wyr),e(Pc,k6e),e(k6e,Hyr),b(f,VIe,_),b(f,hr,_),M(ox,hr,null),e(hr,Uyr),e(hr,Ic),e(Ic,Jyr),e(Ic,cJ),e(cJ,Yyr),e(Ic,Kyr),e(Ic,fJ),e(fJ,Zyr),e(Ic,eLr),e(hr,oLr),e(hr,rx),e(rx,rLr),e(rx,S6e),e(S6e,tLr),e(rx,aLr),e(hr,nLr),e(hr,Ot),M(tx,Ot,null),e(Ot,sLr),e(Ot,R6e),e(R6e,lLr),e(Ot,iLr),e(Ot,qc),e(qc,dLr),e(qc,B6e),e(B6e,cLr),e(qc,fLr),e(qc,mJ),e(mJ,mLr),e(qc,gLr),e(Ot,hLr),M(OE,Ot,null),e(hr,pLr),e(hr,Or),M(ax,Or,null),e(Or,uLr),e(Or,P6e),e(P6e,_Lr),e(Or,bLr),e(Or,un),e(un,vLr),e(un,I6e),e(I6e,FLr),e(un,TLr),e(un,q6e),e(q6e,MLr),e(un,ELr),e(un,N6e),e(N6e,CLr),e(un,wLr),e(Or,ALr),e(Or,Le),e(Le,VE),e(VE,j6e),e(j6e,yLr),e(VE,LLr),e(VE,gJ),e(gJ,xLr),e(VE,$Lr),e(Le,kLr),e(Le,XE),e(XE,D6e),e(D6e,SLr),e(XE,RLr),e(XE,hJ),e(hJ,BLr),e(XE,PLr),e(Le,ILr),e(Le,zE),e(zE,G6e),e(G6e,qLr),e(zE,NLr),e(zE,pJ),e(pJ,jLr),e(zE,DLr),e(Le,GLr),e(Le,QE),e(QE,O6e),e(O6e,OLr),e(QE,VLr),e(QE,uJ),e(uJ,XLr),e(QE,zLr),e(Le,QLr),e(Le,WE),e(WE,V6e),e(V6e,WLr),e(WE,HLr),e(WE,_J),e(_J,ULr),e(WE,JLr),e(Le,YLr),e(Le,HE),e(HE,X6e),e(X6e,KLr),e(HE,ZLr),e(HE,bJ),e(bJ,e8r),e(HE,o8r),e(Le,r8r),e(Le,UE),e(UE,z6e),e(z6e,t8r),e(UE,a8r),e(UE,vJ),e(vJ,n8r),e(UE,s8r),e(Le,l8r),e(Le,JE),e(JE,Q6e),e(Q6e,i8r),e(JE,d8r),e(JE,FJ),e(FJ,c8r),e(JE,f8r),e(Le,m8r),e(Le,YE),e(YE,W6e),e(W6e,g8r),e(YE,h8r),e(YE,TJ),e(TJ,p8r),e(YE,u8r),e(Le,_8r),e(Le,KE),e(KE,H6e),e(H6e,b8r),e(KE,v8r),e(KE,MJ),e(MJ,F8r),e(KE,T8r),e(Or,M8r),M(ZE,Or,null),b(f,XIe,_),b(f,Nc,_),e(Nc,eC),e(eC,U6e),M(nx,U6e,null),e(Nc,E8r),e(Nc,J6e),e(J6e,C8r),b(f,zIe,_),b(f,pr,_),M(sx,pr,null),e(pr,w8r),e(pr,jc),e(jc,A8r),e(jc,EJ),e(EJ,y8r),e(jc,L8r),e(jc,CJ),e(CJ,x8r),e(jc,$8r),e(pr,k8r),e(pr,lx),e(lx,S8r),e(lx,Y6e),e(Y6e,R8r),e(lx,B8r),e(pr,P8r),e(pr,Vt),M(ix,Vt,null),e(Vt,I8r),e(Vt,K6e),e(K6e,q8r),e(Vt,N8r),e(Vt,Dc),e(Dc,j8r),e(Dc,Z6e),e(Z6e,D8r),e(Dc,G8r),e(Dc,wJ),e(wJ,O8r),e(Dc,V8r),e(Vt,X8r),M(oC,Vt,null),e(pr,z8r),e(pr,Vr),M(dx,Vr,null),e(Vr,Q8r),e(Vr,eTe),e(eTe,W8r),e(Vr,H8r),e(Vr,_n),e(_n,U8r),e(_n,oTe),e(oTe,J8r),e(_n,Y8r),e(_n,rTe),e(rTe,K8r),e(_n,Z8r),e(_n,tTe),e(tTe,exr),e(_n,oxr),e(Vr,rxr),e(Vr,Se),e(Se,rC),e(rC,aTe),e(aTe,txr),e(rC,axr),e(rC,AJ),e(AJ,nxr),e(rC,sxr),e(Se,lxr),e(Se,tC),e(tC,nTe),e(nTe,ixr),e(tC,dxr),e(tC,yJ),e(yJ,cxr),e(tC,fxr),e(Se,mxr),e(Se,aC),e(aC,sTe),e(sTe,gxr),e(aC,hxr),e(aC,LJ),e(LJ,pxr),e(aC,uxr),e(Se,_xr),e(Se,nC),e(nC,lTe),e(lTe,bxr),e(nC,vxr),e(nC,xJ),e(xJ,Fxr),e(nC,Txr),e(Se,Mxr),e(Se,sC),e(sC,iTe),e(iTe,Exr),e(sC,Cxr),e(sC,$J),e($J,wxr),e(sC,Axr),e(Se,yxr),e(Se,lC),e(lC,dTe),e(dTe,Lxr),e(lC,xxr),e(lC,kJ),e(kJ,$xr),e(lC,kxr),e(Se,Sxr),e(Se,iC),e(iC,cTe),e(cTe,Rxr),e(iC,Bxr),e(iC,SJ),e(SJ,Pxr),e(iC,Ixr),e(Se,qxr),e(Se,dC),e(dC,fTe),e(fTe,Nxr),e(dC,jxr),e(dC,RJ),e(RJ,Dxr),e(dC,Gxr),e(Se,Oxr),e(Se,cC),e(cC,mTe),e(mTe,Vxr),e(cC,Xxr),e(cC,BJ),e(BJ,zxr),e(cC,Qxr),e(Vr,Wxr),M(fC,Vr,null),b(f,QIe,_),b(f,Gc,_),e(Gc,mC),e(mC,gTe),M(cx,gTe,null),e(Gc,Hxr),e(Gc,hTe),e(hTe,Uxr),b(f,WIe,_),b(f,ur,_),M(fx,ur,null),e(ur,Jxr),e(ur,Oc),e(Oc,Yxr),e(Oc,PJ),e(PJ,Kxr),e(Oc,Zxr),e(Oc,IJ),e(IJ,e7r),e(Oc,o7r),e(ur,r7r),e(ur,mx),e(mx,t7r),e(mx,pTe),e(pTe,a7r),e(mx,n7r),e(ur,s7r),e(ur,Xt),M(gx,Xt,null),e(Xt,l7r),e(Xt,uTe),e(uTe,i7r),e(Xt,d7r),e(Xt,Vc),e(Vc,c7r),e(Vc,_Te),e(_Te,f7r),e(Vc,m7r),e(Vc,qJ),e(qJ,g7r),e(Vc,h7r),e(Xt,p7r),M(gC,Xt,null),e(ur,u7r),e(ur,Xr),M(hx,Xr,null),e(Xr,_7r),e(Xr,bTe),e(bTe,b7r),e(Xr,v7r),e(Xr,bn),e(bn,F7r),e(bn,vTe),e(vTe,T7r),e(bn,M7r),e(bn,FTe),e(FTe,E7r),e(bn,C7r),e(bn,TTe),e(TTe,w7r),e(bn,A7r),e(Xr,y7r),e(Xr,xe),e(xe,hC),e(hC,MTe),e(MTe,L7r),e(hC,x7r),e(hC,NJ),e(NJ,$7r),e(hC,k7r),e(xe,S7r),e(xe,pC),e(pC,ETe),e(ETe,R7r),e(pC,B7r),e(pC,jJ),e(jJ,P7r),e(pC,I7r),e(xe,q7r),e(xe,uC),e(uC,CTe),e(CTe,N7r),e(uC,j7r),e(uC,DJ),e(DJ,D7r),e(uC,G7r),e(xe,O7r),e(xe,_C),e(_C,wTe),e(wTe,V7r),e(_C,X7r),e(_C,GJ),e(GJ,z7r),e(_C,Q7r),e(xe,W7r),e(xe,bC),e(bC,ATe),e(ATe,H7r),e(bC,U7r),e(bC,OJ),e(OJ,J7r),e(bC,Y7r),e(xe,K7r),e(xe,vC),e(vC,yTe),e(yTe,Z7r),e(vC,e$r),e(vC,VJ),e(VJ,o$r),e(vC,r$r),e(xe,t$r),e(xe,FC),e(FC,LTe),e(LTe,a$r),e(FC,n$r),e(FC,XJ),e(XJ,s$r),e(FC,l$r),e(xe,i$r),e(xe,TC),e(TC,xTe),e(xTe,d$r),e(TC,c$r),e(TC,zJ),e(zJ,f$r),e(TC,m$r),e(xe,g$r),e(xe,MC),e(MC,$Te),e($Te,h$r),e(MC,p$r),e(MC,QJ),e(QJ,u$r),e(MC,_$r),e(xe,b$r),e(xe,EC),e(EC,kTe),e(kTe,v$r),e(EC,F$r),e(EC,WJ),e(WJ,T$r),e(EC,M$r),e(Xr,E$r),M(CC,Xr,null),b(f,HIe,_),b(f,Xc,_),e(Xc,wC),e(wC,STe),M(px,STe,null),e(Xc,C$r),e(Xc,RTe),e(RTe,w$r),b(f,UIe,_),b(f,_r,_),M(ux,_r,null),e(_r,A$r),e(_r,zc),e(zc,y$r),e(zc,HJ),e(HJ,L$r),e(zc,x$r),e(zc,UJ),e(UJ,$$r),e(zc,k$r),e(_r,S$r),e(_r,_x),e(_x,R$r),e(_x,BTe),e(BTe,B$r),e(_x,P$r),e(_r,I$r),e(_r,zt),M(bx,zt,null),e(zt,q$r),e(zt,PTe),e(PTe,N$r),e(zt,j$r),e(zt,Qc),e(Qc,D$r),e(Qc,ITe),e(ITe,G$r),e(Qc,O$r),e(Qc,JJ),e(JJ,V$r),e(Qc,X$r),e(zt,z$r),M(AC,zt,null),e(_r,Q$r),e(_r,zr),M(vx,zr,null),e(zr,W$r),e(zr,qTe),e(qTe,H$r),e(zr,U$r),e(zr,vn),e(vn,J$r),e(vn,NTe),e(NTe,Y$r),e(vn,K$r),e(vn,jTe),e(jTe,Z$r),e(vn,ekr),e(vn,DTe),e(DTe,okr),e(vn,rkr),e(zr,tkr),e(zr,$e),e($e,yC),e(yC,GTe),e(GTe,akr),e(yC,nkr),e(yC,YJ),e(YJ,skr),e(yC,lkr),e($e,ikr),e($e,LC),e(LC,OTe),e(OTe,dkr),e(LC,ckr),e(LC,KJ),e(KJ,fkr),e(LC,mkr),e($e,gkr),e($e,xC),e(xC,VTe),e(VTe,hkr),e(xC,pkr),e(xC,ZJ),e(ZJ,ukr),e(xC,_kr),e($e,bkr),e($e,$C),e($C,XTe),e(XTe,vkr),e($C,Fkr),e($C,eY),e(eY,Tkr),e($C,Mkr),e($e,Ekr),e($e,kC),e(kC,zTe),e(zTe,Ckr),e(kC,wkr),e(kC,oY),e(oY,Akr),e(kC,ykr),e($e,Lkr),e($e,SC),e(SC,QTe),e(QTe,xkr),e(SC,$kr),e(SC,rY),e(rY,kkr),e(SC,Skr),e($e,Rkr),e($e,RC),e(RC,WTe),e(WTe,Bkr),e(RC,Pkr),e(RC,tY),e(tY,Ikr),e(RC,qkr),e($e,Nkr),e($e,BC),e(BC,HTe),e(HTe,jkr),e(BC,Dkr),e(BC,aY),e(aY,Gkr),e(BC,Okr),e($e,Vkr),e($e,PC),e(PC,UTe),e(UTe,Xkr),e(PC,zkr),e(PC,nY),e(nY,Qkr),e(PC,Wkr),e($e,Hkr),e($e,IC),e(IC,JTe),e(JTe,Ukr),e(IC,Jkr),e(IC,sY),e(sY,Ykr),e(IC,Kkr),e(zr,Zkr),M(qC,zr,null),b(f,JIe,_),b(f,Wc,_),e(Wc,NC),e(NC,YTe),M(Fx,YTe,null),e(Wc,eSr),e(Wc,KTe),e(KTe,oSr),b(f,YIe,_),b(f,br,_),M(Tx,br,null),e(br,rSr),e(br,Hc),e(Hc,tSr),e(Hc,lY),e(lY,aSr),e(Hc,nSr),e(Hc,iY),e(iY,sSr),e(Hc,lSr),e(br,iSr),e(br,Mx),e(Mx,dSr),e(Mx,ZTe),e(ZTe,cSr),e(Mx,fSr),e(br,mSr),e(br,Qt),M(Ex,Qt,null),e(Qt,gSr),e(Qt,e9e),e(e9e,hSr),e(Qt,pSr),e(Qt,Uc),e(Uc,uSr),e(Uc,o9e),e(o9e,_Sr),e(Uc,bSr),e(Uc,dY),e(dY,vSr),e(Uc,FSr),e(Qt,TSr),M(jC,Qt,null),e(br,MSr),e(br,Qr),M(Cx,Qr,null),e(Qr,ESr),e(Qr,r9e),e(r9e,CSr),e(Qr,wSr),e(Qr,Fn),e(Fn,ASr),e(Fn,t9e),e(t9e,ySr),e(Fn,LSr),e(Fn,a9e),e(a9e,xSr),e(Fn,$Sr),e(Fn,n9e),e(n9e,kSr),e(Fn,SSr),e(Qr,RSr),e(Qr,De),e(De,DC),e(DC,s9e),e(s9e,BSr),e(DC,PSr),e(DC,cY),e(cY,ISr),e(DC,qSr),e(De,NSr),e(De,GC),e(GC,l9e),e(l9e,jSr),e(GC,DSr),e(GC,fY),e(fY,GSr),e(GC,OSr),e(De,VSr),e(De,OC),e(OC,i9e),e(i9e,XSr),e(OC,zSr),e(OC,mY),e(mY,QSr),e(OC,WSr),e(De,HSr),e(De,VC),e(VC,d9e),e(d9e,USr),e(VC,JSr),e(VC,gY),e(gY,YSr),e(VC,KSr),e(De,ZSr),e(De,XC),e(XC,c9e),e(c9e,eRr),e(XC,oRr),e(XC,hY),e(hY,rRr),e(XC,tRr),e(De,aRr),e(De,zC),e(zC,f9e),e(f9e,nRr),e(zC,sRr),e(zC,pY),e(pY,lRr),e(zC,iRr),e(De,dRr),e(De,QC),e(QC,m9e),e(m9e,cRr),e(QC,fRr),e(QC,uY),e(uY,mRr),e(QC,gRr),e(De,hRr),e(De,WC),e(WC,g9e),e(g9e,pRr),e(WC,uRr),e(WC,_Y),e(_Y,_Rr),e(WC,bRr),e(Qr,vRr),M(HC,Qr,null),b(f,KIe,_),b(f,Jc,_),e(Jc,UC),e(UC,h9e),M(wx,h9e,null),e(Jc,FRr),e(Jc,p9e),e(p9e,TRr),b(f,ZIe,_),b(f,vr,_),M(Ax,vr,null),e(vr,MRr),e(vr,Yc),e(Yc,ERr),e(Yc,bY),e(bY,CRr),e(Yc,wRr),e(Yc,vY),e(vY,ARr),e(Yc,yRr),e(vr,LRr),e(vr,yx),e(yx,xRr),e(yx,u9e),e(u9e,$Rr),e(yx,kRr),e(vr,SRr),e(vr,Wt),M(Lx,Wt,null),e(Wt,RRr),e(Wt,_9e),e(_9e,BRr),e(Wt,PRr),e(Wt,Kc),e(Kc,IRr),e(Kc,b9e),e(b9e,qRr),e(Kc,NRr),e(Kc,FY),e(FY,jRr),e(Kc,DRr),e(Wt,GRr),M(JC,Wt,null),e(vr,ORr),e(vr,Wr),M(xx,Wr,null),e(Wr,VRr),e(Wr,v9e),e(v9e,XRr),e(Wr,zRr),e(Wr,Tn),e(Tn,QRr),e(Tn,F9e),e(F9e,WRr),e(Tn,HRr),e(Tn,T9e),e(T9e,URr),e(Tn,JRr),e(Tn,M9e),e(M9e,YRr),e(Tn,KRr),e(Wr,ZRr),e(Wr,Ge),e(Ge,YC),e(YC,E9e),e(E9e,eBr),e(YC,oBr),e(YC,TY),e(TY,rBr),e(YC,tBr),e(Ge,aBr),e(Ge,KC),e(KC,C9e),e(C9e,nBr),e(KC,sBr),e(KC,MY),e(MY,lBr),e(KC,iBr),e(Ge,dBr),e(Ge,ZC),e(ZC,w9e),e(w9e,cBr),e(ZC,fBr),e(ZC,EY),e(EY,mBr),e(ZC,gBr),e(Ge,hBr),e(Ge,e3),e(e3,A9e),e(A9e,pBr),e(e3,uBr),e(e3,CY),e(CY,_Br),e(e3,bBr),e(Ge,vBr),e(Ge,o3),e(o3,y9e),e(y9e,FBr),e(o3,TBr),e(o3,wY),e(wY,MBr),e(o3,EBr),e(Ge,CBr),e(Ge,r3),e(r3,L9e),e(L9e,wBr),e(r3,ABr),e(r3,AY),e(AY,yBr),e(r3,LBr),e(Ge,xBr),e(Ge,t3),e(t3,x9e),e(x9e,$Br),e(t3,kBr),e(t3,yY),e(yY,SBr),e(t3,RBr),e(Ge,BBr),e(Ge,a3),e(a3,$9e),e($9e,PBr),e(a3,IBr),e(a3,LY),e(LY,qBr),e(a3,NBr),e(Wr,jBr),M(n3,Wr,null),b(f,eqe,_),b(f,Zc,_),e(Zc,s3),e(s3,k9e),M($x,k9e,null),e(Zc,DBr),e(Zc,S9e),e(S9e,GBr),b(f,oqe,_),b(f,Fr,_),M(kx,Fr,null),e(Fr,OBr),e(Fr,ef),e(ef,VBr),e(ef,xY),e(xY,XBr),e(ef,zBr),e(ef,$Y),e($Y,QBr),e(ef,WBr),e(Fr,HBr),e(Fr,Sx),e(Sx,UBr),e(Sx,R9e),e(R9e,JBr),e(Sx,YBr),e(Fr,KBr),e(Fr,Ht),M(Rx,Ht,null),e(Ht,ZBr),e(Ht,B9e),e(B9e,ePr),e(Ht,oPr),e(Ht,of),e(of,rPr),e(of,P9e),e(P9e,tPr),e(of,aPr),e(of,kY),e(kY,nPr),e(of,sPr),e(Ht,lPr),M(l3,Ht,null),e(Fr,iPr),e(Fr,Hr),M(Bx,Hr,null),e(Hr,dPr),e(Hr,I9e),e(I9e,cPr),e(Hr,fPr),e(Hr,Mn),e(Mn,mPr),e(Mn,q9e),e(q9e,gPr),e(Mn,hPr),e(Mn,N9e),e(N9e,pPr),e(Mn,uPr),e(Mn,j9e),e(j9e,_Pr),e(Mn,bPr),e(Hr,vPr),e(Hr,D9e),e(D9e,i3),e(i3,G9e),e(G9e,FPr),e(i3,TPr),e(i3,SY),e(SY,MPr),e(i3,EPr),e(Hr,CPr),M(d3,Hr,null),b(f,rqe,_),b(f,rf,_),e(rf,c3),e(c3,O9e),M(Px,O9e,null),e(rf,wPr),e(rf,V9e),e(V9e,APr),b(f,tqe,_),b(f,Tr,_),M(Ix,Tr,null),e(Tr,yPr),e(Tr,tf),e(tf,LPr),e(tf,RY),e(RY,xPr),e(tf,$Pr),e(tf,BY),e(BY,kPr),e(tf,SPr),e(Tr,RPr),e(Tr,qx),e(qx,BPr),e(qx,X9e),e(X9e,PPr),e(qx,IPr),e(Tr,qPr),e(Tr,Ut),M(Nx,Ut,null),e(Ut,NPr),e(Ut,z9e),e(z9e,jPr),e(Ut,DPr),e(Ut,af),e(af,GPr),e(af,Q9e),e(Q9e,OPr),e(af,VPr),e(af,PY),e(PY,XPr),e(af,zPr),e(Ut,QPr),M(f3,Ut,null),e(Tr,WPr),e(Tr,Ur),M(jx,Ur,null),e(Ur,HPr),e(Ur,W9e),e(W9e,UPr),e(Ur,JPr),e(Ur,En),e(En,YPr),e(En,H9e),e(H9e,KPr),e(En,ZPr),e(En,U9e),e(U9e,eIr),e(En,oIr),e(En,J9e),e(J9e,rIr),e(En,tIr),e(Ur,aIr),e(Ur,Dx),e(Dx,m3),e(m3,Y9e),e(Y9e,nIr),e(m3,sIr),e(m3,IY),e(IY,lIr),e(m3,iIr),e(Dx,dIr),e(Dx,g3),e(g3,K9e),e(K9e,cIr),e(g3,fIr),e(g3,qY),e(qY,mIr),e(g3,gIr),e(Ur,hIr),M(h3,Ur,null),b(f,aqe,_),b(f,nf,_),e(nf,p3),e(p3,Z9e),M(Gx,Z9e,null),e(nf,pIr),e(nf,eMe),e(eMe,uIr),b(f,nqe,_),b(f,Mr,_),M(Ox,Mr,null),e(Mr,_Ir),e(Mr,sf),e(sf,bIr),e(sf,NY),e(NY,vIr),e(sf,FIr),e(sf,jY),e(jY,TIr),e(sf,MIr),e(Mr,EIr),e(Mr,Vx),e(Vx,CIr),e(Vx,oMe),e(oMe,wIr),e(Vx,AIr),e(Mr,yIr),e(Mr,Jt),M(Xx,Jt,null),e(Jt,LIr),e(Jt,rMe),e(rMe,xIr),e(Jt,$Ir),e(Jt,lf),e(lf,kIr),e(lf,tMe),e(tMe,SIr),e(lf,RIr),e(lf,DY),e(DY,BIr),e(lf,PIr),e(Jt,IIr),M(u3,Jt,null),e(Mr,qIr),e(Mr,Jr),M(zx,Jr,null),e(Jr,NIr),e(Jr,aMe),e(aMe,jIr),e(Jr,DIr),e(Jr,Cn),e(Cn,GIr),e(Cn,nMe),e(nMe,OIr),e(Cn,VIr),e(Cn,sMe),e(sMe,XIr),e(Cn,zIr),e(Cn,lMe),e(lMe,QIr),e(Cn,WIr),e(Jr,HIr),e(Jr,iMe),e(iMe,_3),e(_3,dMe),e(dMe,UIr),e(_3,JIr),e(_3,GY),e(GY,YIr),e(_3,KIr),e(Jr,ZIr),M(b3,Jr,null),sqe=!0},p(f,[_]){const Qx={};_&2&&(Qx.$$scope={dirty:_,ctx:f}),_f.$set(Qx);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),hg.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),Qg.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),vh.$set(mMe);const Wx={};_&2&&(Wx.$$scope={dirty:_,ctx:f}),Fh.$set(Wx);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),qh.$set(gMe);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Nh.$set(wn);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),Gh.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),xu.$set(pMe);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),ku.$set(uMe);const Hx={};_&2&&(Hx.$$scope={dirty:_,ctx:f}),b_.$set(Hx);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),F_.$set(_Me);const Ux={};_&2&&(Ux.$$scope={dirty:_,ctx:f}),t2.$set(Ux);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),n2.$set(bMe);const Jx={};_&2&&(Jx.$$scope={dirty:_,ctx:f}),O2.$set(Jx);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),X2.$set(vMe);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),d1.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),f1.$set(TMe);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),sb.$set(df);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),ib.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),Nb.$set(EMe);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),Db.$set(CMe);const Yx={};_&2&&(Yx.$$scope={dirty:_,ctx:f}),Wb.$set(Yx);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),Ub.$set(wMe);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),$5.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),S5.$set(yMe);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),vv.$set(Kr);const Kx={};_&2&&(Kx.$$scope={dirty:_,ctx:f}),Tv.$set(Kx);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),Cv.$set(LMe);const Zx={};_&2&&(Zx.$$scope={dirty:_,ctx:f}),Av.$set(Zx);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),jv.$set(xMe);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),Gv.$set(Zr);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),Xv.$set($Me);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),Qv.$set(cf);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),rF.$set(kMe);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),aF.$set(SMe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),cF.$set(L);const v3={};_&2&&(v3.$$scope={dirty:_,ctx:f}),mF.$set(v3);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),MF.$set(RMe);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),CF.$set(BMe);const F3={};_&2&&(F3.$$scope={dirty:_,ctx:f}),LF.$set(F3);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),$F.$set(PMe);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),IF.$set(IMe);const T3={};_&2&&(T3.$$scope={dirty:_,ctx:f}),NF.$set(T3);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),VF.$set(qMe);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),zF.$set(NMe);const M3={};_&2&&(M3.$$scope={dirty:_,ctx:f}),UF.$set(M3);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),YF.$set(jMe);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),e6.$set(DMe);const E3={};_&2&&(E3.$$scope={dirty:_,ctx:f}),r6.$set(E3);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),i6.$set(GMe);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),c6.$set(OMe);const C3={};_&2&&(C3.$$scope={dirty:_,ctx:f}),g6.$set(C3);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),p6.$set(VMe);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),sT.$set(XMe);const w3={};_&2&&(w3.$$scope={dirty:_,ctx:f}),iT.$set(w3);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),ST.$set(zMe);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),BT.$set(QMe);const A3={};_&2&&(A3.$$scope={dirty:_,ctx:f}),WT.$set(A3);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),UT.$set(WMe);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),ZT.$set(HMe);const y3={};_&2&&(y3.$$scope={dirty:_,ctx:f}),o9.$set(y3);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),M9.$set(UMe);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),C9.$set(JMe);const L3={};_&2&&(L3.$$scope={dirty:_,ctx:f}),P9.$set(L3);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),q9.$set(YMe);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),cM.$set(KMe);const x3={};_&2&&(x3.$$scope={dirty:_,ctx:f}),mM.$set(x3);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),$M.$set(ZMe);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),SM.$set(e4e);const $3={};_&2&&($3.$$scope={dirty:_,ctx:f}),PM.$set($3);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),qM.$set(o4e);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),jM.$set(r4e);const k3={};_&2&&(k3.$$scope={dirty:_,ctx:f}),GM.$set(k3);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),i4.$set(t4e);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),c4.$set(a4e);const S3={};_&2&&(S3.$$scope={dirty:_,ctx:f}),k4.$set(S3);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),R4.$set(n4e);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),P4.$set(s4e);const R3={};_&2&&(R3.$$scope={dirty:_,ctx:f}),q4.$set(R3);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),j4.$set(l4e);const i4e={};_&2&&(i4e.$$scope={dirty:_,ctx:f}),G4.$set(i4e);const B3={};_&2&&(B3.$$scope={dirty:_,ctx:f}),gE.$set(B3);const d4e={};_&2&&(d4e.$$scope={dirty:_,ctx:f}),pE.$set(d4e);const c4e={};_&2&&(c4e.$$scope={dirty:_,ctx:f}),wE.$set(c4e);const P3={};_&2&&(P3.$$scope={dirty:_,ctx:f}),yE.$set(P3);const f4e={};_&2&&(f4e.$$scope={dirty:_,ctx:f}),DE.$set(f4e);const m4e={};_&2&&(m4e.$$scope={dirty:_,ctx:f}),OE.$set(m4e);const I3={};_&2&&(I3.$$scope={dirty:_,ctx:f}),ZE.$set(I3);const g4e={};_&2&&(g4e.$$scope={dirty:_,ctx:f}),oC.$set(g4e);const h4e={};_&2&&(h4e.$$scope={dirty:_,ctx:f}),fC.$set(h4e);const q3={};_&2&&(q3.$$scope={dirty:_,ctx:f}),gC.$set(q3);const p4e={};_&2&&(p4e.$$scope={dirty:_,ctx:f}),CC.$set(p4e);const u4e={};_&2&&(u4e.$$scope={dirty:_,ctx:f}),AC.$set(u4e);const N3={};_&2&&(N3.$$scope={dirty:_,ctx:f}),qC.$set(N3);const _4e={};_&2&&(_4e.$$scope={dirty:_,ctx:f}),jC.$set(_4e);const b4e={};_&2&&(b4e.$$scope={dirty:_,ctx:f}),HC.$set(b4e);const j3={};_&2&&(j3.$$scope={dirty:_,ctx:f}),JC.$set(j3);const v4e={};_&2&&(v4e.$$scope={dirty:_,ctx:f}),n3.$set(v4e);const F4e={};_&2&&(F4e.$$scope={dirty:_,ctx:f}),l3.$set(F4e);const D3={};_&2&&(D3.$$scope={dirty:_,ctx:f}),d3.$set(D3);const T4e={};_&2&&(T4e.$$scope={dirty:_,ctx:f}),f3.$set(T4e);const M4e={};_&2&&(M4e.$$scope={dirty:_,ctx:f}),h3.$set(M4e);const G3={};_&2&&(G3.$$scope={dirty:_,ctx:f}),u3.$set(G3);const E4e={};_&2&&(E4e.$$scope={dirty:_,ctx:f}),b3.$set(E4e)},i(f){sqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(GA.$$.fragment,f),E(OA.$$.fragment,f),E(_f.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(WA.$$.fragment,f),E(hg.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(ZA.$$.fragment,f),E(Qg.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(r0.$$.fragment,f),E(n0.$$.fragment,f),E(vh.$$.fragment,f),E(Fh.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(i0.$$.fragment,f),E(f0.$$.fragment,f),E(qh.$$.fragment,f),E(Nh.$$.fragment,f),E(m0.$$.fragment,f),E(g0.$$.fragment,f),E(h0.$$.fragment,f),E(u0.$$.fragment,f),E(Gh.$$.fragment,f),E(_0.$$.fragment,f),E(xu.$$.fragment,f),E(b0.$$.fragment,f),E(v0.$$.fragment,f),E(T0.$$.fragment,f),E(ku.$$.fragment,f),E(M0.$$.fragment,f),E(b_.$$.fragment,f),E(E0.$$.fragment,f),E(C0.$$.fragment,f),E(A0.$$.fragment,f),E(F_.$$.fragment,f),E(y0.$$.fragment,f),E(t2.$$.fragment,f),E(L0.$$.fragment,f),E(x0.$$.fragment,f),E(k0.$$.fragment,f),E(n2.$$.fragment,f),E(S0.$$.fragment,f),E(O2.$$.fragment,f),E(R0.$$.fragment,f),E(B0.$$.fragment,f),E(I0.$$.fragment,f),E(X2.$$.fragment,f),E(q0.$$.fragment,f),E(d1.$$.fragment,f),E(N0.$$.fragment,f),E(j0.$$.fragment,f),E(G0.$$.fragment,f),E(f1.$$.fragment,f),E(O0.$$.fragment,f),E(sb.$$.fragment,f),E(V0.$$.fragment,f),E(X0.$$.fragment,f),E(Q0.$$.fragment,f),E(ib.$$.fragment,f),E(W0.$$.fragment,f),E(Nb.$$.fragment,f),E(H0.$$.fragment,f),E(U0.$$.fragment,f),E(Y0.$$.fragment,f),E(Db.$$.fragment,f),E(K0.$$.fragment,f),E(Wb.$$.fragment,f),E(Z0.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(Ub.$$.fragment,f),E(ty.$$.fragment,f),E($5.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(S5.$$.fragment,f),E(iy.$$.fragment,f),E(vv.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Tv.$$.fragment,f),E(gy.$$.fragment,f),E(Cv.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(Av.$$.fragment,f),E(by.$$.fragment,f),E(jv.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(Gv.$$.fragment,f),E(Ey.$$.fragment,f),E(Xv.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(Qv.$$.fragment,f),E(Ly.$$.fragment,f),E(rF.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(aF.$$.fragment,f),E(Ry.$$.fragment,f),E(cF.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(mF.$$.fragment,f),E(Ny.$$.fragment,f),E(MF.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(CF.$$.fragment,f),E(Vy.$$.fragment,f),E(LF.$$.fragment,f),E(zy.$$.fragment,f),E(Qy.$$.fragment,f),E(Hy.$$.fragment,f),E($F.$$.fragment,f),E(Uy.$$.fragment,f),E(IF.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(NF.$$.fragment,f),E(eL.$$.fragment,f),E(VF.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(zF.$$.fragment,f),E(nL.$$.fragment,f),E(UF.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(YF.$$.fragment,f),E(fL.$$.fragment,f),E(e6.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(r6.$$.fragment,f),E(uL.$$.fragment,f),E(i6.$$.fragment,f),E(_L.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(c6.$$.fragment,f),E(TL.$$.fragment,f),E(g6.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(p6.$$.fragment,f),E(AL.$$.fragment,f),E(sT.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(iT.$$.fragment,f),E(kL.$$.fragment,f),E(ST.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(BT.$$.fragment,f),E(IL.$$.fragment,f),E(WT.$$.fragment,f),E(qL.$$.fragment,f),E(NL.$$.fragment,f),E(DL.$$.fragment,f),E(UT.$$.fragment,f),E(GL.$$.fragment,f),E(ZT.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(o9.$$.fragment,f),E(QL.$$.fragment,f),E(M9.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(C9.$$.fragment,f),E(YL.$$.fragment,f),E(P9.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(q9.$$.fragment,f),E(r8.$$.fragment,f),E(cM.$$.fragment,f),E(t8.$$.fragment,f),E(a8.$$.fragment,f),E(s8.$$.fragment,f),E(mM.$$.fragment,f),E(l8.$$.fragment,f),E($M.$$.fragment,f),E(i8.$$.fragment,f),E(d8.$$.fragment,f),E(f8.$$.fragment,f),E(SM.$$.fragment,f),E(m8.$$.fragment,f),E(PM.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(qM.$$.fragment,f),E(b8.$$.fragment,f),E(jM.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(GM.$$.fragment,f),E(E8.$$.fragment,f),E(i4.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(c4.$$.fragment,f),E(L8.$$.fragment,f),E(k4.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(R4.$$.fragment,f),E(R8.$$.fragment,f),E(P4.$$.fragment,f),E(B8.$$.fragment,f),E(P8.$$.fragment,f),E(q8.$$.fragment,f),E(q4.$$.fragment,f),E(N8.$$.fragment,f),E(j4.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(G4.$$.fragment,f),E(V8.$$.fragment,f),E(gE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(pE.$$.fragment,f),E(H8.$$.fragment,f),E(wE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(yE.$$.fragment,f),E(Z8.$$.fragment,f),E(DE.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(OE.$$.fragment,f),E(ax.$$.fragment,f),E(ZE.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(oC.$$.fragment,f),E(dx.$$.fragment,f),E(fC.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(gC.$$.fragment,f),E(hx.$$.fragment,f),E(CC.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(AC.$$.fragment,f),E(vx.$$.fragment,f),E(qC.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(jC.$$.fragment,f),E(Cx.$$.fragment,f),E(HC.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(JC.$$.fragment,f),E(xx.$$.fragment,f),E(n3.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(l3.$$.fragment,f),E(Bx.$$.fragment,f),E(d3.$$.fragment,f),E(Px.$$.fragment,f),E(Ix.$$.fragment,f),E(Nx.$$.fragment,f),E(f3.$$.fragment,f),E(jx.$$.fragment,f),E(h3.$$.fragment,f),E(Gx.$$.fragment,f),E(Ox.$$.fragment,f),E(Xx.$$.fragment,f),E(u3.$$.fragment,f),E(zx.$$.fragment,f),E(b3.$$.fragment,f),sqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(GA.$$.fragment,f),C(OA.$$.fragment,f),C(_f.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(WA.$$.fragment,f),C(hg.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(ZA.$$.fragment,f),C(Qg.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(r0.$$.fragment,f),C(n0.$$.fragment,f),C(vh.$$.fragment,f),C(Fh.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(i0.$$.fragment,f),C(f0.$$.fragment,f),C(qh.$$.fragment,f),C(Nh.$$.fragment,f),C(m0.$$.fragment,f),C(g0.$$.fragment,f),C(h0.$$.fragment,f),C(u0.$$.fragment,f),C(Gh.$$.fragment,f),C(_0.$$.fragment,f),C(xu.$$.fragment,f),C(b0.$$.fragment,f),C(v0.$$.fragment,f),C(T0.$$.fragment,f),C(ku.$$.fragment,f),C(M0.$$.fragment,f),C(b_.$$.fragment,f),C(E0.$$.fragment,f),C(C0.$$.fragment,f),C(A0.$$.fragment,f),C(F_.$$.fragment,f),C(y0.$$.fragment,f),C(t2.$$.fragment,f),C(L0.$$.fragment,f),C(x0.$$.fragment,f),C(k0.$$.fragment,f),C(n2.$$.fragment,f),C(S0.$$.fragment,f),C(O2.$$.fragment,f),C(R0.$$.fragment,f),C(B0.$$.fragment,f),C(I0.$$.fragment,f),C(X2.$$.fragment,f),C(q0.$$.fragment,f),C(d1.$$.fragment,f),C(N0.$$.fragment,f),C(j0.$$.fragment,f),C(G0.$$.fragment,f),C(f1.$$.fragment,f),C(O0.$$.fragment,f),C(sb.$$.fragment,f),C(V0.$$.fragment,f),C(X0.$$.fragment,f),C(Q0.$$.fragment,f),C(ib.$$.fragment,f),C(W0.$$.fragment,f),C(Nb.$$.fragment,f),C(H0.$$.fragment,f),C(U0.$$.fragment,f),C(Y0.$$.fragment,f),C(Db.$$.fragment,f),C(K0.$$.fragment,f),C(Wb.$$.fragment,f),C(Z0.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(Ub.$$.fragment,f),C(ty.$$.fragment,f),C($5.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(S5.$$.fragment,f),C(iy.$$.fragment,f),C(vv.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Tv.$$.fragment,f),C(gy.$$.fragment,f),C(Cv.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(Av.$$.fragment,f),C(by.$$.fragment,f),C(jv.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(Gv.$$.fragment,f),C(Ey.$$.fragment,f),C(Xv.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(Qv.$$.fragment,f),C(Ly.$$.fragment,f),C(rF.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(aF.$$.fragment,f),C(Ry.$$.fragment,f),C(cF.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(mF.$$.fragment,f),C(Ny.$$.fragment,f),C(MF.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(CF.$$.fragment,f),C(Vy.$$.fragment,f),C(LF.$$.fragment,f),C(zy.$$.fragment,f),C(Qy.$$.fragment,f),C(Hy.$$.fragment,f),C($F.$$.fragment,f),C(Uy.$$.fragment,f),C(IF.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(NF.$$.fragment,f),C(eL.$$.fragment,f),C(VF.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(zF.$$.fragment,f),C(nL.$$.fragment,f),C(UF.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(YF.$$.fragment,f),C(fL.$$.fragment,f),C(e6.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(r6.$$.fragment,f),C(uL.$$.fragment,f),C(i6.$$.fragment,f),C(_L.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(c6.$$.fragment,f),C(TL.$$.fragment,f),C(g6.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(p6.$$.fragment,f),C(AL.$$.fragment,f),C(sT.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(iT.$$.fragment,f),C(kL.$$.fragment,f),C(ST.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(BT.$$.fragment,f),C(IL.$$.fragment,f),C(WT.$$.fragment,f),C(qL.$$.fragment,f),C(NL.$$.fragment,f),C(DL.$$.fragment,f),C(UT.$$.fragment,f),C(GL.$$.fragment,f),C(ZT.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(o9.$$.fragment,f),C(QL.$$.fragment,f),C(M9.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(C9.$$.fragment,f),C(YL.$$.fragment,f),C(P9.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(q9.$$.fragment,f),C(r8.$$.fragment,f),C(cM.$$.fragment,f),C(t8.$$.fragment,f),C(a8.$$.fragment,f),C(s8.$$.fragment,f),C(mM.$$.fragment,f),C(l8.$$.fragment,f),C($M.$$.fragment,f),C(i8.$$.fragment,f),C(d8.$$.fragment,f),C(f8.$$.fragment,f),C(SM.$$.fragment,f),C(m8.$$.fragment,f),C(PM.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(qM.$$.fragment,f),C(b8.$$.fragment,f),C(jM.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(GM.$$.fragment,f),C(E8.$$.fragment,f),C(i4.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(c4.$$.fragment,f),C(L8.$$.fragment,f),C(k4.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(R4.$$.fragment,f),C(R8.$$.fragment,f),C(P4.$$.fragment,f),C(B8.$$.fragment,f),C(P8.$$.fragment,f),C(q8.$$.fragment,f),C(q4.$$.fragment,f),C(N8.$$.fragment,f),C(j4.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(G4.$$.fragment,f),C(V8.$$.fragment,f),C(gE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(pE.$$.fragment,f),C(H8.$$.fragment,f),C(wE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(yE.$$.fragment,f),C(Z8.$$.fragment,f),C(DE.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(OE.$$.fragment,f),C(ax.$$.fragment,f),C(ZE.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(oC.$$.fragment,f),C(dx.$$.fragment,f),C(fC.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(gC.$$.fragment,f),C(hx.$$.fragment,f),C(CC.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(AC.$$.fragment,f),C(vx.$$.fragment,f),C(qC.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(jC.$$.fragment,f),C(Cx.$$.fragment,f),C(HC.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(JC.$$.fragment,f),C(xx.$$.fragment,f),C(n3.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(l3.$$.fragment,f),C(Bx.$$.fragment,f),C(d3.$$.fragment,f),C(Px.$$.fragment,f),C(Ix.$$.fragment,f),C(Nx.$$.fragment,f),C(f3.$$.fragment,f),C(jx.$$.fragment,f),C(h3.$$.fragment,f),C(Gx.$$.fragment,f),C(Ox.$$.fragment,f),C(Xx.$$.fragment,f),C(u3.$$.fragment,f),C(zx.$$.fragment,f),C(b3.$$.fragment,f),sqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(tPe),f&&t(hi),w(GA),f&&t(aPe),f&&t($n),f&&t(nPe),w(OA,f),f&&t(sPe),f&&t(d$),f&&t(lPe),w(_f,f),f&&t(iPe),f&&t(pi),w(VA),f&&t(dPe),f&&t(Co),w(XA),w(WA),w(hg),w(HA),f&&t(cPe),f&&t(_i),w(UA),f&&t(fPe),f&&t(wo),w(JA),w(ZA),w(Qg),w(e0),f&&t(mPe),f&&t(bi),w(o0),f&&t(gPe),f&&t(Ao),w(r0),w(n0),w(vh),w(Fh),w(s0),f&&t(hPe),f&&t(vi),w(l0),f&&t(pPe),f&&t(yo),w(i0),w(f0),w(qh),w(Nh),w(m0),f&&t(uPe),f&&t(Ti),w(g0),f&&t(_Pe),f&&t(Lo),w(h0),w(u0),w(Gh),w(_0),w(xu),f&&t(bPe),f&&t(Ci),w(b0),f&&t(vPe),f&&t(xo),w(v0),w(T0),w(ku),w(M0),w(b_),f&&t(FPe),f&&t(yi),w(E0),f&&t(TPe),f&&t($o),w(C0),w(A0),w(F_),w(y0),w(t2),f&&t(MPe),f&&t($i),w(L0),f&&t(EPe),f&&t(ko),w(x0),w(k0),w(n2),w(S0),w(O2),f&&t(CPe),f&&t(Ri),w(R0),f&&t(wPe),f&&t(So),w(B0),w(I0),w(X2),w(q0),w(d1),f&&t(APe),f&&t(Ii),w(N0),f&&t(yPe),f&&t(Ro),w(j0),w(G0),w(f1),w(O0),w(sb),f&&t(LPe),f&&t(ji),w(V0),f&&t(xPe),f&&t(Bo),w(X0),w(Q0),w(ib),w(W0),w(Nb),f&&t($Pe),f&&t(Oi),w(H0),f&&t(kPe),f&&t(Po),w(U0),w(Y0),w(Db),w(K0),w(Wb),f&&t(SPe),f&&t(zi),w(Z0),f&&t(RPe),f&&t(Io),w(ey),w(ry),w(Ub),w(ty),w($5),f&&t(BPe),f&&t(Hi),w(ay),f&&t(PPe),f&&t(qo),w(ny),w(ly),w(S5),w(iy),w(vv),f&&t(IPe),f&&t(Yi),w(dy),f&&t(qPe),f&&t(No),w(cy),w(my),w(Tv),w(gy),w(Cv),f&&t(NPe),f&&t(ed),w(hy),f&&t(jPe),f&&t(jo),w(py),w(_y),w(Av),w(by),w(jv),f&&t(DPe),f&&t(td),w(vy),f&&t(GPe),f&&t(Do),w(Fy),w(My),w(Gv),w(Ey),w(Xv),f&&t(OPe),f&&t(sd),w(Cy),f&&t(VPe),f&&t(Go),w(wy),w(yy),w(Qv),w(Ly),w(rF),f&&t(XPe),f&&t(dd),w(xy),f&&t(zPe),f&&t(Oo),w($y),w(Sy),w(aF),w(Ry),w(cF),f&&t(QPe),f&&t(md),w(By),f&&t(WPe),f&&t(Vo),w(Py),w(qy),w(mF),w(Ny),w(MF),f&&t(HPe),f&&t(pd),w(jy),f&&t(UPe),f&&t(Xo),w(Dy),w(Oy),w(CF),w(Vy),w(LF),f&&t(JPe),f&&t(bd),w(zy),f&&t(YPe),f&&t(zo),w(Qy),w(Hy),w($F),w(Uy),w(IF),f&&t(KPe),f&&t(Td),w(Jy),f&&t(ZPe),f&&t(Qo),w(Yy),w(Zy),w(NF),w(eL),w(VF),f&&t(eIe),f&&t(wd),w(oL),f&&t(oIe),f&&t(Wo),w(rL),w(aL),w(zF),w(nL),w(UF),f&&t(rIe),f&&t(Ld),w(lL),f&&t(tIe),f&&t(Ho),w(iL),w(cL),w(YF),w(fL),w(e6),f&&t(aIe),f&&t(kd),w(mL),f&&t(nIe),f&&t(Uo),w(gL),w(pL),w(r6),w(uL),w(i6),f&&t(sIe),f&&t(Bd),w(_L),f&&t(lIe),f&&t(Jo),w(bL),w(FL),w(c6),w(TL),w(g6),f&&t(iIe),f&&t(qd),w(ML),f&&t(dIe),f&&t(Yo),w(EL),w(wL),w(p6),w(AL),w(sT),f&&t(cIe),f&&t(Dd),w(yL),f&&t(fIe),f&&t(Ko),w(LL),w($L),w(iT),w(kL),w(ST),f&&t(mIe),f&&t(Vd),w(SL),f&&t(gIe),f&&t(Zo),w(RL),w(PL),w(BT),w(IL),w(WT),f&&t(hIe),f&&t(Qd),w(qL),f&&t(pIe),f&&t(er),w(NL),w(DL),w(UT),w(GL),w(ZT),f&&t(uIe),f&&t(Jd),w(OL),f&&t(_Ie),f&&t(or),w(VL),w(zL),w(o9),w(QL),w(M9),f&&t(bIe),f&&t(Zd),w(WL),f&&t(vIe),f&&t(rr),w(HL),w(JL),w(C9),w(YL),w(P9),f&&t(FIe),f&&t(rc),w(KL),f&&t(TIe),f&&t(tr),w(ZL),w(o8),w(q9),w(r8),w(cM),f&&t(MIe),f&&t(nc),w(t8),f&&t(EIe),f&&t(ar),w(a8),w(s8),w(mM),w(l8),w($M),f&&t(CIe),f&&t(ic),w(i8),f&&t(wIe),f&&t(nr),w(d8),w(f8),w(SM),w(m8),w(PM),f&&t(AIe),f&&t(fc),w(h8),f&&t(yIe),f&&t(sr),w(p8),w(_8),w(qM),w(b8),w(jM),f&&t(LIe),f&&t(hc),w(v8),f&&t(xIe),f&&t(lr),w(F8),w(M8),w(GM),w(E8),w(i4),f&&t($Ie),f&&t(_c),w(C8),f&&t(kIe),f&&t(ir),w(w8),w(y8),w(c4),w(L8),w(k4),f&&t(SIe),f&&t(Fc),w(x8),f&&t(RIe),f&&t(dr),w($8),w(S8),w(R4),w(R8),w(P4),f&&t(BIe),f&&t(Ec),w(B8),f&&t(PIe),f&&t(cr),w(P8),w(q8),w(q4),w(N8),w(j4),f&&t(IIe),f&&t(Ac),w(j8),f&&t(qIe),f&&t(fr),w(D8),w(O8),w(G4),w(V8),w(gE),f&&t(NIe),f&&t(xc),w(X8),f&&t(jIe),f&&t(mr),w(z8),w(W8),w(pE),w(H8),w(wE),f&&t(DIe),f&&t(Sc),w(U8),f&&t(GIe),f&&t(gr),w(J8),w(K8),w(yE),w(Z8),w(DE),f&&t(OIe),f&&t(Pc),w(ex),f&&t(VIe),f&&t(hr),w(ox),w(tx),w(OE),w(ax),w(ZE),f&&t(XIe),f&&t(Nc),w(nx),f&&t(zIe),f&&t(pr),w(sx),w(ix),w(oC),w(dx),w(fC),f&&t(QIe),f&&t(Gc),w(cx),f&&t(WIe),f&&t(ur),w(fx),w(gx),w(gC),w(hx),w(CC),f&&t(HIe),f&&t(Xc),w(px),f&&t(UIe),f&&t(_r),w(ux),w(bx),w(AC),w(vx),w(qC),f&&t(JIe),f&&t(Wc),w(Fx),f&&t(YIe),f&&t(br),w(Tx),w(Ex),w(jC),w(Cx),w(HC),f&&t(KIe),f&&t(Jc),w(wx),f&&t(ZIe),f&&t(vr),w(Ax),w(Lx),w(JC),w(xx),w(n3),f&&t(eqe),f&&t(Zc),w($x),f&&t(oqe),f&&t(Fr),w(kx),w(Rx),w(l3),w(Bx),w(d3),f&&t(rqe),f&&t(rf),w(Px),f&&t(tqe),f&&t(Tr),w(Ix),w(Nx),w(f3),w(jx),w(h3),f&&t(aqe),f&&t(nf),w(Gx),f&&t(nqe),f&&t(Mr),w(Ox),w(Xx),w(u3),w(zx),w(b3)}}}const i0t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function d0t(A){return dwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class u0t extends nwt{constructor(g){super();swt(this,g,d0t,l0t,lwt,{})}}export{u0t as default,i0t as metadata};
